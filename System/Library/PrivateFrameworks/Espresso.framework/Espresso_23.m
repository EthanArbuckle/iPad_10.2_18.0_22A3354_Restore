void sub_191736404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a65;
  char a70;
  void *v70;
  uint64_t v71;

  if (*(char *)(v71 - 233) < 0)
    operator delete(*(void **)(v71 - 256));
  if (SLOBYTE(STACK[0x327]) < 0)
    operator delete((void *)STACK[0x310]);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a20);

  if (a70 < 0)
    operator delete(a65);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2B8]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2C8]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2D8]);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_inner_product_kernel::compile(Espresso::ANECompilerEngine::mix_inner_product_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::ANECompilerEngine::mix_inner_product_kernel::compile((Espresso::ANECompilerEngine::mix_inner_product_kernel *)((char *)this - 544), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_inner_product_kernel::~mix_inner_product_kernel(Espresso::ANECompilerEngine::mix_inner_product_kernel *this)
{
  Espresso::generic_inner_product_kernel *v2;
  char *v3;

  v2 = (Espresso::ANECompilerEngine::mix_inner_product_kernel *)((char *)this - 544);
  *((_QWORD *)this - 68) = &off_1E2D796B8;
  *(_QWORD *)this = &unk_1E2D798E8;
  v3 = (char *)this + 216;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 280);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 264);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 248);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 232);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v3);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel(v2);
}

{
  Espresso::generic_inner_product_kernel *v2;
  char *v3;

  v2 = (Espresso::ANECompilerEngine::mix_inner_product_kernel *)((char *)this - 544);
  *((_QWORD *)this - 68) = &off_1E2D796B8;
  *(_QWORD *)this = &unk_1E2D798E8;
  v3 = (char *)this + 216;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 280);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 264);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 248);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 232);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v3);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel(v2);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::add_conv<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(uint64_t a1, _BYTE *a2, const Espresso::net **a3, uint64_t a4, id *a5, uint64_t *a6, uint64_t *a7)
{
  std::__shared_weak_count *v10;
  const Espresso::net *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  const Espresso::net *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  const Espresso::net *v22;
  _QWORD *v23;
  char *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  _BOOL4 v29;
  int v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL4 v34;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  __CFString *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  std::string *v45;
  void *v46;
  void *v47;
  void *v48;
  int v49;
  const __CFString *v50;
  const NSDictionary *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _BOOL4 v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  void *v72;
  void *v73;
  Espresso::ANECompilerEngine::ane_kernel *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  void *v88;
  void *v89;
  Espresso::ANECompilerEngine::ane_kernel *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  void *v104;
  void *v105;
  Espresso::ANECompilerEngine::ane_kernel *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  const Espresso::net *v114;
  unint64_t *v115;
  unint64_t v116;
  void *v117;
  void *v118;
  Espresso::ANECompilerEngine::ane_kernel *v119;
  uint64_t v120;
  Espresso::ANECompilerEngine::ane_kernel *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  char *v127;
  unint64_t *v128;
  const unsigned __int8 *v129;
  int v130;
  unint64_t v131;
  uint64_t v132;
  void *v133;
  void *v134;
  uint64_t weights_file_index;
  std::string::size_type v136;
  Espresso::ANECompilerEngine::ane_kernel *v137;
  std::string::size_type v138;
  int v139;
  int v140;
  char *v141;
  unint64_t *v142;
  const unsigned __int8 *v143;
  int v144;
  unint64_t v145;
  uint64_t v146;
  void *v147;
  void *v148;
  uint64_t v149;
  void *v150;
  Espresso::quantized_weights_helper *v151;
  const Espresso::net *v152;
  unint64_t *v153;
  unint64_t v154;
  Espresso::quantized_weights_helper *v155;
  unint64_t *v156;
  unint64_t v157;
  void *v158;
  char *v159;
  char *v160;
  char *v161;
  int v162;
  _DWORD *v163;
  char v165;
  uint64_t v166;
  uint64_t v168;
  int v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  const unsigned __int8 *v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  void *v176;
  void *v177;
  uint64_t v178;
  std::__shared_weak_count *size;
  unint64_t *v180;
  unint64_t v181;
  unsigned int *v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  std::string::size_type v201;
  uint64_t v202;
  std::string::size_type v203;
  BOOL v204;
  void *v206;
  void *v207;
  void *v208;
  int v209;
  _BOOL4 v210;
  int v211;
  int v212;
  int v213;
  unsigned int v214;
  unsigned int v215;
  int v216;
  unsigned int v217;
  unsigned int v218;
  unsigned int v219;
  unsigned int v220;
  uint64_t v221;
  unsigned int v222;
  uint64_t v223;
  uint64_t v224;
  BOOL v225;
  int v227;
  void *v228;
  void *v229;
  void *v230;
  void *v231;
  const __CFString *v232;
  char v233;
  void *v234;
  void *v235;
  __CFString *v236;
  uint64_t v237;
  char *v238;
  _DWORD *v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  std::string *v243;
  std::string *v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  std::__shared_weak_count *v254;
  uint64_t v255;
  unint64_t *v256;
  unint64_t v257;
  char *v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  char v262;
  float v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  unint64_t *v269;
  unint64_t v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  uint64_t v278;
  int *v279;
  _WORD *v280;
  int v281;
  __int128 v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  uint64_t v293;
  int *v294;
  _WORD *v295;
  int v296;
  int v298;
  Espresso::ANECompilerEngine::compiler::build_state_t *v299;
  uint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  uint64_t v304;
  unint64_t *v305;
  unint64_t v306;
  void *v307;
  id v308;
  void *v309;
  void *v310;
  void *v311;
  void *v312;
  uint64_t v313;
  void *v314;
  void *v315;
  __int128 v316;
  unint64_t *v317;
  unint64_t v318;
  uint64_t v319;
  unint64_t *v320;
  unint64_t v321;
  void *v322;
  void *v323;
  void *v324;
  uint64_t v325;
  void *v326;
  void *v327;
  std::string *v328;
  std::string *v329;
  uint64_t v330;
  char v331;
  std::string::size_type v332;
  std::string::size_type v333;
  uint64_t v334;
  unsigned __int8 *v335;
  std::string *v336;
  const std::string::value_type *data;
  __int128 v338;
  __CFString *v339;
  std::string *v340;
  std::string *v341;
  unint64_t v342;
  unint64_t v343;
  unint64_t v344;
  uint64_t v345;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  unint64_t v348;
  std::__shared_weak_count *v349;
  unint64_t *v350;
  unint64_t v351;
  std::__shared_weak_count *v352;
  unint64_t *v353;
  unint64_t v354;
  std::__shared_weak_count *v355;
  unint64_t *v356;
  unint64_t v357;
  unint64_t *v358;
  unint64_t v359;
  uint64_t *v360;
  unint64_t v361;
  uint64_t *v362;
  unint64_t v363;
  _QWORD *v364;
  uint64_t v365;
  uint64_t v366;
  __int128 v367;
  const unsigned __int8 *v368;
  int *v369;
  _WORD *v370;
  uint64_t v371;
  int v372;
  Espresso::ANECompilerEngine::compiler::build_state_t *v374;
  unint64_t *v375;
  unint64_t v376;
  uint64_t v377;
  unint64_t *v378;
  unint64_t v379;
  void *v380;
  void *v381;
  void *v382;
  void *v383;
  uint64_t v384;
  std::__shared_weak_count *v385;
  unint64_t *v386;
  unint64_t v387;
  __int128 v388;
  unint64_t *v389;
  unint64_t v390;
  unint64_t *v391;
  unint64_t v392;
  Espresso::ANECompilerEngine::compiler::build_state_t *v393;
  unint64_t *v394;
  unint64_t v395;
  uint64_t v396;
  unint64_t *v397;
  unint64_t v398;
  const unsigned __int8 **v399;
  std::__shared_weak_count *v400;
  unint64_t *v401;
  unint64_t v402;
  uint64_t v403;
  unint64_t *v404;
  unint64_t v405;
  void *v406;
  void *v407;
  void *v408;
  void *v409;
  uint64_t v410;
  __int128 v411;
  unint64_t *v412;
  unint64_t v413;
  id v414;
  void *v415;
  void *v416;
  void *v417;
  void *v418;
  uint64_t v419;
  void *v420;
  void *v421;
  __CFString *v422;
  std::string *v423;
  std::string *v424;
  unint64_t v425;
  unint64_t v426;
  unint64_t v427;
  uint64_t v428;
  void *v429;
  std::__shared_weak_count *v430;
  unint64_t *v431;
  unint64_t v432;
  std::__shared_weak_count *v433;
  unint64_t *v434;
  unint64_t v435;
  unint64_t v436;
  char *v437;
  std::string::size_type v438;
  __int128 v439;
  std::__shared_weak_count *v440;
  unint64_t *v441;
  unint64_t v442;
  std::string::size_type v443;
  float *v444;
  float *v445;
  float *v446;
  uint64_t v447;
  float v448;
  float v449;
  float v450;
  uint64_t v451;
  const unsigned __int8 *v452;
  int *v453;
  _WORD *v454;
  uint64_t v455;
  int v456;
  std::__shared_weak_count *v458;
  unint64_t *v459;
  unint64_t v460;
  uint64_t v461;
  unint64_t *v462;
  unint64_t v463;
  void *v464;
  void *v465;
  void *v466;
  uint64_t v467;
  std::__shared_weak_count *v468;
  unint64_t *v469;
  unint64_t v470;
  std::__shared_weak_count *v471;
  unint64_t *v472;
  unint64_t v473;
  std::__shared_weak_count *v474;
  unint64_t *v475;
  unint64_t v476;
  std::__shared_weak_count *v477;
  unint64_t *v478;
  unint64_t v479;
  void *v480;
  std::__shared_weak_count *v481;
  unint64_t *v482;
  unint64_t v483;
  std::__shared_weak_count *v484;
  unint64_t *v485;
  unint64_t v486;
  std::__shared_weak_count *v487;
  unint64_t *v488;
  unint64_t v489;
  void *v490;
  __CFString *v491;
  std::string *v492;
  std::string *v493;
  unint64_t v494;
  unint64_t v495;
  unint64_t v496;
  uint64_t v497;
  unint64_t *v498;
  void *v499;
  void *v500;
  std::__shared_weak_count *v501;
  unint64_t *v502;
  unint64_t v503;
  int v504;
  std::__shared_weak_count *v505;
  unint64_t *v506;
  unint64_t v507;
  std::__shared_weak_count *v508;
  unint64_t *v509;
  unint64_t v510;
  uint64_t v511;
  std::__shared_weak_count *v512;
  unint64_t *v513;
  unint64_t v514;
  std::__shared_weak_count *v515;
  unint64_t *v516;
  unint64_t v517;
  Espresso::ANECompilerEngine::compiler *v518;
  unint64_t v519;
  std::__shared_weak_count *v520;
  unint64_t *v521;
  unint64_t v522;
  std::__shared_weak_count *v523;
  unint64_t *v524;
  unint64_t v525;
  std::__shared_weak_count *v526;
  unint64_t *v527;
  unint64_t v528;
  std::__shared_weak_count *v529;
  unint64_t *v530;
  unint64_t v531;
  unint64_t *v532;
  char *v533;
  std::__shared_weak_count *v534;
  unint64_t *v535;
  unint64_t v536;
  std::__shared_weak_count *v537;
  unint64_t *v538;
  unint64_t v539;
  int v540;
  std::__shared_weak_count *v541;
  unint64_t *v542;
  unint64_t v543;
  void *v544;
  void *v545;
  __CFString *v546;
  std::string *v547;
  std::string *v548;
  int *v549;
  uint64_t v550;
  std::string::size_type v551;
  const unsigned __int8 *v552;
  _WORD *v553;
  int v554;
  std::__shared_weak_count *v556;
  unint64_t *v557;
  unint64_t v558;
  unint64_t *v559;
  unint64_t v560;
  void *v561;
  uint64_t v562;
  std::__shared_weak_count *v563;
  unint64_t *v564;
  unint64_t v565;
  id v566;
  __CFString *v567;
  std::string *v568;
  std::string *v569;
  unint64_t v570;
  unint64_t v571;
  char *v572;
  uint64_t v573;
  const Espresso::net *v574;
  Espresso::ANECompilerEngine *v575;
  NSString *v576;
  Espresso::ANECompilerEngine *v577;
  std::string *p_str;
  void *v579;
  __int128 *v580;
  uint64_t v581;
  char *v582;
  char *k;
  __CFString *v584;
  std::string *v585;
  std::string *v586;
  std::string *v587;
  unint64_t v588;
  unint64_t v589;
  unint64_t v590;
  uint64_t v591;
  std::__shared_weak_count *v592;
  unint64_t *v593;
  unint64_t v594;
  std::__shared_weak_count *v595;
  unint64_t *v596;
  unint64_t v597;
  std::__shared_weak_count *v598;
  unint64_t *v599;
  unint64_t v600;
  std::__shared_weak_count *v601;
  unint64_t *v602;
  unint64_t v603;
  std::__shared_weak_count *v604;
  unint64_t *v605;
  unint64_t v606;
  std::__shared_weak_count *v607;
  unint64_t *v608;
  unint64_t v609;
  std::__shared_weak_count *v610;
  unint64_t *v611;
  unint64_t v612;
  std::__shared_weak_count *v613;
  unint64_t *v614;
  unint64_t v615;
  std::__shared_weak_count *v616;
  unint64_t *v617;
  unint64_t v618;
  std::__shared_weak_count *v619;
  unint64_t *v620;
  unint64_t v621;
  std::__shared_weak_count *v622;
  unint64_t *v623;
  unint64_t v624;
  std::__shared_weak_count *v625;
  unint64_t *v626;
  unint64_t v627;
  void *v628;
  std::__shared_weak_count *v629;
  unint64_t *v630;
  unint64_t v631;
  char *v632;
  char *v633;
  char *v634;
  vDSP_Length v635;
  unsigned int v636;
  uint64_t v637;
  uint64_t v638;
  float *v639;
  vDSP_Length v640;
  std::__shared_weak_count *v641;
  unint64_t *v642;
  unint64_t v643;
  uint64_t v644;
  unint64_t *v645;
  unint64_t v646;
  void *v647;
  void *v648;
  uint64_t v649;
  void *v650;
  std::__shared_weak_count *v651;
  unint64_t *v652;
  unint64_t v653;
  std::__shared_weak_count *v654;
  unint64_t *v655;
  unint64_t v656;
  std::__shared_weak_count *v657;
  unint64_t *v658;
  unint64_t v659;
  std::__shared_weak_count *v660;
  unint64_t *v661;
  unint64_t v662;
  void *v663;
  int v664;
  uint64_t v666;
  const __CFString *v668;
  std::__shared_weak_count *v669;
  unint64_t *v670;
  unint64_t v671;
  std::runtime_error *exception;
  uint64_t v673;
  int *v674;
  uint64_t i;
  float v676;
  int v677;
  _WORD *v678;
  int v679;
  std::runtime_error *v681;
  int *v682;
  uint64_t j;
  int v684;
  int v685;
  unsigned int v686;
  unsigned int v687;
  int v688;
  Espresso *v689;
  const char *v690;
  float v691;
  NSObject *v693;
  double v694;
  uint64_t v695;
  _WORD *v696;
  int v697;
  uint64_t v699;
  uint64_t v700;
  char *v701;
  char *v702;
  _WORD *v703;
  char *v704;
  std::string::size_type v705;
  uint64_t v706;
  vDSP_Length __N;
  vDSP_Length __Na;
  unsigned int __Nb;
  const __CFString *v710;
  int v711;
  void *v712;
  int v713;
  unsigned int v715;
  _BOOL4 v716;
  Espresso::ANECompilerEngine::sparsity_options *v717;
  const Espresso::net *v721;
  std::__shared_weak_count *v722;
  const Espresso::net *v723;
  std::__shared_weak_count *v724;
  const Espresso::net *v725;
  std::__shared_weak_count *v726;
  const Espresso::net *v727;
  std::__shared_weak_count *v728;
  const Espresso::net *v729;
  std::__shared_weak_count *v730;
  const Espresso::net *v731;
  std::__shared_weak_count *v732;
  char *v733;
  std::__shared_weak_count *v734;
  __int128 v735;
  uint64_t v736;
  std::__shared_weak_count *v737;
  uint64_t v738;
  uint64_t v739;
  const Espresso::net *v740;
  std::__shared_weak_count *v741;
  __int128 v742;
  uint64_t v743;
  std::__shared_weak_count *v744;
  const Espresso::net *v745;
  std::__shared_weak_count *v746;
  uint64_t v747;
  std::__shared_weak_count *v748;
  const Espresso::net *v749;
  std::__shared_weak_count *v750;
  const Espresso::net *v751;
  std::__shared_weak_count *v752;
  const Espresso::net *v753;
  std::__shared_weak_count *v754;
  std::__shared_weak_count *v755;
  std::__shared_weak_count *v756;
  Espresso::quantized_weights_helper *v757[2];
  _QWORD v758[2];
  _QWORD v759[2];
  _QWORD v760[2];
  uint64_t v761[2];
  _QWORD v762[2];
  const Espresso::net *v763;
  std::__shared_weak_count *v764;
  const Espresso::net *v765;
  std::__shared_weak_count *v766;
  const Espresso::net *v767;
  std::__shared_weak_count *v768;
  const Espresso::net *v769;
  std::__shared_weak_count *v770;
  const Espresso::net *v771;
  std::__shared_weak_count *v772;
  const Espresso::net *v773;
  std::__shared_weak_count *v774;
  const Espresso::net *v775;
  std::__shared_weak_count *v776;
  const Espresso::net *v777;
  std::__shared_weak_count *v778;
  uint64_t v779;
  std::string *v780;
  unint64_t v781;
  __int16 v782;
  char v783[40];
  void *v784;
  void *v785;
  const Espresso::net *v786;
  std::__shared_weak_count *v787;
  char v788[32];
  char v789[40];
  void *__p;
  void *v791;
  const Espresso::net *v792;
  std::__shared_weak_count *v793;
  char v794[32];
  __int128 v795;
  __int128 v796;
  __int128 v797;
  __int128 v798;
  __int128 v799;
  __int128 v800;
  __int128 v801;
  __int128 v802;
  __int128 v803;
  __int128 v804;
  __int128 v805;
  __int128 v806;
  __int128 v807;
  uint64_t v808;
  std::__shared_weak_count *v809;
  __int128 v810;
  uint64_t v811;
  std::__shared_weak_count *v812;
  uint64_t v813;
  std::__shared_weak_count *v814;
  char *v815;
  std::__shared_weak_count *v816;
  void *v817[2];
  uint64_t v818;
  std::__shared_weak_count *v819;
  unsigned int v820;
  unsigned int v821;
  char *v822;
  std::__shared_weak_count *v823;
  std::string v824;
  _QWORD v825[3];
  char *v826;
  std::string *v827;
  unint64_t v828;
  void *v829;
  char v830;
  id v831;
  __CFString *v832;
  id v833;
  uint64_t v834;
  _QWORD v835[2];
  _BYTE buf[24];
  __int128 v837;
  std::vector<std::string> v838;
  void *v839;
  char v840;
  id v841;
  __CFString *v842;
  id v843;
  std::string __str;
  __int128 v845;
  uint64_t v846;

  v846 = *MEMORY[0x1E0C80C00];
  v711 = a2[552];
  v806 = 0u;
  v805 = 0u;
  v804 = 0u;
  v803 = 0u;
  v802 = 0u;
  v801 = 0u;
  v799 = 0u;
  v800 = 0u;
  v797 = 0u;
  v798 = 0u;
  v795 = 0u;
  v796 = 0u;
  v11 = *a3;
  v10 = (std::__shared_weak_count *)a3[1];
  v792 = *a3;
  v793 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  Espresso::abstract_blob_container::shape(v789, *a6);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v794, v11, (const Espresso::layer_shape *)v789, 1);
  if (__p)
  {
    v791 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    v14 = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v17 = *a3;
  v16 = (std::__shared_weak_count *)a3[1];
  v786 = *a3;
  v787 = v16;
  if (v16)
  {
    v18 = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  Espresso::abstract_blob_container::shape(v783, *a7);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v788, v17, (const Espresso::layer_shape *)v783, 1);
  if (v784)
  {
    v785 = v784;
    operator delete(v784);
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v22 = *a3;
  v23 = a5[6];
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)*a3 + 45), v23))
  {
    *(_QWORD *)buf = v23;
    v24 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v22 + 44, v23, (uint64_t)&std::piecewise_construct, (__int128 **)buf);
    *(_OWORD *)&v824.__r_.__value_.__l.__data_ = *(_OWORD *)(v24 + 56);
    v825[1] = 0;
    v824.__r_.__value_.__r.__words[2] = 0;
    v825[0] = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v824.__r_.__value_.__r.__words[2], *((const void **)v24 + 9), *((_QWORD *)v24 + 10), (uint64_t)(*((_QWORD *)v24 + 10) - *((_QWORD *)v24 + 9)) >> 2);
    if (LODWORD(v824.__r_.__value_.__r.__words[1]) == -1)
      v25 = 1;
    else
      v25 = v824.__r_.__value_.__r.__words[1];
    if (v824.__r_.__value_.__r.__words[2])
    {
      v825[0] = *((_QWORD *)&v824.__r_.__value_.__l + 2);
      operator delete((void *)v824.__r_.__value_.__r.__words[2]);
    }
    v22 = *a3;
  }
  else
  {
    v25 = 1;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v22 + 472);
  v782 = 0;
  v712 = (void *)objc_claimAutoreleasedReturnValue();
  Espresso::ANECompilerEngine::query_dilation_options(a4, 0, v25, (char *)&v782 + 1, &v782, v712);
  v27 = *(_DWORD *)(a4 + 48);
  v26 = *(_DWORD *)(a4 + 52);
  v28 = *(__int16 *)(a4 + 96);
  v29 = v28 < 2;
  v30 = *(__int16 *)(a4 + 98);
  if (HIBYTE(v782))
  {
    v31 = v30 < 2;
  }
  else
  {
    v29 = 1;
    v31 = 1;
  }
  if (v29)
    v32 = v27;
  else
    v32 = ((v27 - 1) * v28 + 1);
  if (v31)
    v33 = v26;
  else
    v33 = ((v26 - 1) * v30 + 1);
  v34 = v28 >= 2 && v27 > 1 || v30 > 1 && v26 > 1;
  v716 = v34;
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v36, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
  v717 = (Espresso::ANECompilerEngine::sparsity_options *)objc_claimAutoreleasedReturnValue();

  Espresso::ANECompilerEngine::sparsity_options::scan_for_compress_sparse((uint64_t)*a3 + 472, v717);
  v37 = (uint64_t)a5[6];
  if ((char *)a5[7] - v37 != (_BYTE *)24)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent number of blobs");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v38 = *a6;
  if (!*a6)
  {
    if (*(char *)(v37 + 23) < 0)
      v37 = *(_QWORD *)v37;
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("ANEC conv: cannot find input blobs. bottom=%s", v37);
  }
  if (!*a7)
  {
    if (*((char *)a5 + 23) >= 0)
      v673 = (uint64_t)a5;
    else
      v673 = (uint64_t)*a5;
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("ANEC conv: cannot find output blobs. top=%s", v673);
  }
  v780 = 0;
  v779 = 0;
  v781 = 0;
  if (a1 && *(_BYTE *)(a1 + 840) && (*(int *)(v38 + 8) > 1 || *(int *)(v38 + 12) >= 2))
  {
    v39 = (void *)objc_opt_new();
    objc_msgSend(v39, "setObject:forKeyedSubscript:", CFSTR("NCHW"), CFSTR("Mode"));
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v824.__r_.__value_.__l.__data_, a5);
    v40 = v832;
    v832 = CFSTR("Flatten");

    objc_storeStrong(&v833, v39);
    v41 = 0x8E38E38E38E38E39 * (((uint64_t)v780 - v779) >> 4);
    if (v41 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v42 = 0x1C71C71C71C71C72 * ((uint64_t)(v781 - v779) >> 4);
    if (v42 <= v41 + 1)
      v42 = v41 + 1;
    if (0x8E38E38E38E38E39 * ((uint64_t)(v781 - v779) >> 4) >= 0xE38E38E38E38E3)
      v43 = 0x1C71C71C71C71C7;
    else
      v43 = v42;
    *((_QWORD *)&v837 + 1) = &v781;
    if (v43)
      v43 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v43);
    else
      v44 = 0;
    *(_QWORD *)buf = v43;
    *(_QWORD *)&buf[8] = v43 + 16 * (((uint64_t)v780 - v779) >> 4);
    *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
    *(_QWORD *)&v837 = v43 + 144 * v44;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v824);
    *(_QWORD *)&buf[16] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v779, buf);
    v45 = v780;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    v780 = v45;

    if (v830 < 0)
      operator delete(v829);
    *(_QWORD *)buf = &v826;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(_QWORD *)buf = v825;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (SHIBYTE(v824.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v824.__r_.__value_.__l.__data_);

  }
  v46 = (void *)objc_opt_new();
  objc_msgSend(v46, "setObject:forKeyedSubscript:", CFSTR("Dense"), CFSTR("KernelMode"));
  if (*(_BYTE *)(a1 + 754))
  {
    objc_msgSend(v46, "setObject:forKeyedSubscript:", CFSTR("Unity"), CFSTR("KernelMode"));
    objc_msgSend(v46, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("KernelType"));
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v32);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v46, "setObject:forKeyedSubscript:", v47, CFSTR("KernelWidth"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v33);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v46, "setObject:forKeyedSubscript:", v48, CFSTR("KernelHeight"));

  v49 = *(_DWORD *)(a4 + 116);
  if (v49 >= 2 && v49 == *(_DWORD *)(a4 + 44) && v49 == *(_DWORD *)(a4 + 40))
  {
    objc_msgSend(v46, "setObject:forKeyedSubscript:", CFSTR("ChannelWiseConv"), CFSTR("Type"));
    v50 = CFSTR("ChannelWiseDilatedConv");
  }
  else
  {
    objc_msgSend(v46, "setObject:forKeyedSubscript:", CFSTR("Conv"), CFSTR("Type"));
    v50 = CFSTR("DilatedConv");
  }
  v710 = v50;
  v713 = *(_DWORD *)(a4 + 116);
  objc_msgSend(v46, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], CFSTR("KernelGroupReuse"));
  if (*(_BYTE *)(a1 + 753))
    objc_msgSend(v46, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("KernelGroupReuse"));
  if (*(_BYTE *)(a1 + 754))
    goto LABEL_304;
  v52 = (std::__shared_weak_count *)a3[1];
  v777 = *a3;
  v778 = v52;
  if (v52)
  {
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  std::string::basic_string[abi:ne180100]<0>(&v824, "post_scale");
  v55 = ((*(uint64_t (**)(uint64_t, const Espresso::net **, uint64_t, std::string *))(*(_QWORD *)(a1 + 544)
                                                                                            + 88))(a1 + 544, &v777, a1, &v824) & 0x80000000) == 0|| *(_QWORD *)(a1 + 608) != 0;
  if (SHIBYTE(v824.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v824.__r_.__value_.__l.__data_);
  v56 = v778;
  if (v778)
  {
    v57 = (unint64_t *)&v778->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)a3[1];
  v775 = *a3;
  v776 = v59;
  if (v59)
  {
    v60 = (unint64_t *)&v59->__shared_owners_;
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
  }
  std::string::basic_string[abi:ne180100]<0>(&v824, "W_S8");
  v62 = (*(uint64_t (**)(uint64_t, const Espresso::net **, uint64_t, std::string *))(*(_QWORD *)(a1 + 544) + 88))(a1 + 544, &v775, a1, &v824);
  if ((int)v62 < 0)
    v55 = 0;
  if (SHIBYTE(v824.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v824.__r_.__value_.__l.__data_);
  v63 = v776;
  if (!v776)
    goto LABEL_103;
  v64 = (unint64_t *)&v776->__shared_owners_;
  do
    v65 = __ldaxr(v64);
  while (__stlxr(v65 - 1, v64));
  if (!v65)
  {
    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
    std::__shared_weak_count::__release_weak(v63);
    if (v55)
      goto LABEL_104;
  }
  else
  {
LABEL_103:
    if (v55)
    {
LABEL_104:
      v66 = (std::__shared_weak_count *)a3[1];
      v773 = *a3;
      v774 = v66;
      if (v66)
      {
        v67 = (unint64_t *)&v66->__shared_owners_;
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "W_S8");
      (*(void (**)(std::string *__return_ptr, uint64_t, const Espresso::net **, uint64_t, _BYTE *))(*(_QWORD *)(a1 + 544) + 120))(&v824, a1 + 544, &v773, a1, buf);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v69 = v774;
      if (v774)
      {
        v70 = (unint64_t *)&v774->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v62);
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v46, "setObject:forKeyedSubscript:", v72, CFSTR("KernelOffset"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((Espresso::ANECompilerEngine *)a2, (Espresso::ANECompilerEngine::compiler *)v824.__r_.__value_.__l.__data_, (const void *)v824.__r_.__value_.__r.__words[2]));
      v73 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v46, "setObject:forKeyedSubscript:", v73, CFSTR("KernelIndex"));

      objc_msgSend(v46, "setObject:forKeyedSubscript:", CFSTR("Int8"), CFSTR("KernelType"));
      if (a1)
        v74 = (Espresso::ANECompilerEngine::ane_kernel *)(a1 + 544);
      else
        v74 = 0;
      Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)&v795, v74, v824.__r_.__value_.__l.__data_);
      goto LABEL_304;
    }
  }
  v75 = (std::__shared_weak_count *)a3[1];
  v771 = *a3;
  v772 = v75;
  if (v75)
  {
    v76 = (unint64_t *)&v75->__shared_owners_;
    do
      v77 = __ldxr(v76);
    while (__stxr(v77 + 1, v76));
  }
  std::string::basic_string[abi:ne180100]<0>(&v824, "W_int8");
  v78 = (*(uint64_t (**)(uint64_t, const Espresso::net **, uint64_t, std::string *))(*(_QWORD *)(a1 + 544) + 88))(a1 + 544, &v771, a1, &v824);
  if (SHIBYTE(v824.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v824.__r_.__value_.__l.__data_);
  v79 = v772;
  if (v772)
  {
    v80 = (unint64_t *)&v772->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  if ((v78 & 0x80000000) == 0)
  {
    v82 = (std::__shared_weak_count *)a3[1];
    v769 = *a3;
    v770 = v82;
    if (v82)
    {
      v83 = (unint64_t *)&v82->__shared_owners_;
      do
        v84 = __ldxr(v83);
      while (__stxr(v84 + 1, v83));
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "W_int8");
    (*(void (**)(std::string *__return_ptr, uint64_t, const Espresso::net **, uint64_t, _BYTE *))(*(_QWORD *)(a1 + 544) + 120))(&v824, a1 + 544, &v769, a1, buf);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v85 = v770;
    if (v770)
    {
      v86 = (unint64_t *)&v770->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v78);
    v88 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "setObject:forKeyedSubscript:", v88, CFSTR("KernelOffset"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((Espresso::ANECompilerEngine *)a2, (Espresso::ANECompilerEngine::compiler *)v824.__r_.__value_.__l.__data_, (const void *)v824.__r_.__value_.__r.__words[2]));
    v89 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "setObject:forKeyedSubscript:", v89, CFSTR("KernelIndex"));

    objc_msgSend(v46, "setObject:forKeyedSubscript:", CFSTR("Int8"), CFSTR("KernelType"));
    if (a1)
      v90 = (Espresso::ANECompilerEngine::ane_kernel *)(a1 + 544);
    else
      v90 = 0;
    Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)&v795, v90, v824.__r_.__value_.__l.__data_);
    goto LABEL_304;
  }
  v91 = (std::__shared_weak_count *)a3[1];
  v767 = *a3;
  v768 = v91;
  if (v91)
  {
    v92 = (unint64_t *)&v91->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  std::string::basic_string[abi:ne180100]<0>(&v824, "blob_weights");
  v94 = (*(uint64_t (**)(uint64_t, const Espresso::net **, uint64_t, std::string *))(*(_QWORD *)(a1 + 544) + 88))(a1 + 544, &v767, a1, &v824);
  if (SHIBYTE(v824.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v824.__r_.__value_.__l.__data_);
  v95 = v768;
  if (v768)
  {
    v96 = (unint64_t *)&v768->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  if ((v94 & 0x80000000) == 0)
  {
    v98 = (std::__shared_weak_count *)a3[1];
    v765 = *a3;
    v766 = v98;
    if (v98)
    {
      v99 = (unint64_t *)&v98->__shared_owners_;
      do
        v100 = __ldxr(v99);
      while (__stxr(v100 + 1, v99));
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "blob_weights");
    (*(void (**)(std::string *__return_ptr, uint64_t, const Espresso::net **, uint64_t, _BYTE *))(*(_QWORD *)(a1 + 544) + 120))(&v824, a1 + 544, &v765, a1, buf);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v101 = v766;
    if (v766)
    {
      v102 = (unint64_t *)&v766->__shared_owners_;
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v94);
    v104 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "setObject:forKeyedSubscript:", v104, CFSTR("KernelOffset"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((Espresso::ANECompilerEngine *)a2, (Espresso::ANECompilerEngine::compiler *)v824.__r_.__value_.__l.__data_, (const void *)v824.__r_.__value_.__r.__words[2]));
    v105 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "setObject:forKeyedSubscript:", v105, CFSTR("KernelIndex"));

    objc_msgSend(v46, "setObject:forKeyedSubscript:", CFSTR("Float32"), CFSTR("KernelType"));
    if (a1)
      v106 = (Espresso::ANECompilerEngine::ane_kernel *)(a1 + 544);
    else
      v106 = 0;
    Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32((Espresso::ANECompilerEngine::final_anec_weights_t *)&v795, v106, v824.__r_.__value_.__l.__data_);
    goto LABEL_304;
  }
  v107 = (std::__shared_weak_count *)a3[1];
  v763 = *a3;
  v764 = v107;
  if (v107)
  {
    v108 = (unint64_t *)&v107->__shared_owners_;
    do
      v109 = __ldxr(v108);
    while (__stxr(v109 + 1, v108));
  }
  std::string::basic_string[abi:ne180100]<0>(&v824, "blob_weights_f16");
  v110 = (*(uint64_t (**)(uint64_t, const Espresso::net **, uint64_t, std::string *))(*(_QWORD *)(a1 + 544)
                                                                                            + 88))(a1 + 544, &v763, a1, &v824);
  if (SHIBYTE(v824.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v824.__r_.__value_.__l.__data_);
  v111 = v764;
  if (v764)
  {
    v112 = (unint64_t *)&v764->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  if ((v110 & 0x80000000) == 0)
  {
    v114 = a3[1];
    v762[0] = *a3;
    v762[1] = v114;
    if (v114)
    {
      v115 = (unint64_t *)((char *)v114 + 8);
      do
        v116 = __ldxr(v115);
      while (__stxr(v116 + 1, v115));
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "blob_weights_f16");
    (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD *, uint64_t, _BYTE *))(*(_QWORD *)(a1 + 544)
                                                                                           + 120))(&v824, a1 + 544, v762, a1, buf);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v762);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v110);
    v117 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "setObject:forKeyedSubscript:", v117, CFSTR("KernelOffset"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((Espresso::ANECompilerEngine *)a2, (Espresso::ANECompilerEngine::compiler *)v824.__r_.__value_.__l.__data_, (const void *)v824.__r_.__value_.__r.__words[2]));
    v118 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "setObject:forKeyedSubscript:", v118, CFSTR("KernelIndex"));

    objc_msgSend(v46, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("KernelType"));
    if (a1)
      v119 = (Espresso::ANECompilerEngine::ane_kernel *)(a1 + 544);
    else
      v119 = 0;
    Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16((Espresso::ANECompilerEngine::final_anec_weights_t *)&v795, v119, v824.__r_.__value_.__l.__data_);
    goto LABEL_304;
  }
  if (*(_QWORD *)(a1 + 776))
  {
    v120 = *(_QWORD *)(a1 + 784);
    if (a1)
      v121 = (Espresso::ANECompilerEngine::ane_kernel *)(a1 + 544);
    else
      v121 = 0;
    v761[0] = *(_QWORD *)(a1 + 776);
    v761[1] = v120;
    if (v120)
    {
      v122 = (unint64_t *)(v120 + 8);
      do
        v123 = __ldxr(v122);
      while (__stxr(v123 + 1, v122));
    }
    Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16((Espresso::ANECompilerEngine::final_anec_weights_t *)&v795, v121, v761);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v761);
    v124 = *(_QWORD *)(a1 + 776);
    v125 = *(_DWORD *)(v124 + 8);
    v126 = *(_DWORD *)(v124 + 12);
    v127 = (char *)operator new(0x58uLL);
    *((_QWORD *)v127 + 1) = 0;
    v128 = (unint64_t *)(v127 + 8);
    *((_QWORD *)v127 + 2) = 0;
    *(_QWORD *)v127 = &off_1E2DBED50;
    v129 = *(const unsigned __int8 **)(v124 + 16);
    *((_QWORD *)v127 + 3) = &off_1E2DA1250;
    v130 = 2 * v125 * v126;
    *(_OWORD *)(v127 + 72) = 0u;
    *(_OWORD *)(v127 + 56) = 0u;
    *((_DWORD *)v127 + 8) = v130;
    *((_QWORD *)v127 + 5) = v129;
    v127[48] = 0;
    v824.__r_.__value_.__r.__words[0] = (std::string::size_type)(v127 + 24);
    v824.__r_.__value_.__l.__size_ = (std::string::size_type)v127;
    v760[0] = v127 + 24;
    v760[1] = v127;
    do
      v131 = __ldxr(v128);
    while (__stxr(v131 + 1, v128));
    v132 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v129, v130);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v760);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v132);
    v133 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "setObject:forKeyedSubscript:", v133, CFSTR("KernelOffset"));

    v134 = (void *)MEMORY[0x1E0CB37E8];
    if (v711)
      weights_file_index = 0;
    else
    objc_msgSend(v134, "numberWithUnsignedLong:", weights_file_index);
    v150 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "setObject:forKeyedSubscript:", v150, CFSTR("KernelIndex"));

    objc_msgSend(v46, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("KernelType"));
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v824);
    goto LABEL_304;
  }
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 416))(&v824, a1);
  v136 = v824.__r_.__value_.__r.__words[0];
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v824);
  if (!v136)
  {
    v151 = *(Espresso::quantized_weights_helper **)(a1 + 440);
    if (v151
      && *(_QWORD *)v151
      && (*((_QWORD *)v151 + 4) || *((_QWORD *)v151 + 6) || *((_QWORD *)v151 + 8) || *((_QWORD *)v151 + 10)))
    {
      v152 = a3[1];
      v758[0] = *a3;
      v758[1] = v152;
      if (v152)
      {
        v153 = (unint64_t *)((char *)v152 + 8);
        do
          v154 = __ldxr(v153);
        while (__stxr(v154 + 1, v153));
        v151 = *(Espresso::quantized_weights_helper **)(a1 + 440);
      }
      v155 = *(Espresso::quantized_weights_helper **)(a1 + 448);
      v757[0] = v151;
      v757[1] = v155;
      if (v155)
      {
        v156 = (unint64_t *)((char *)v155 + 8);
        do
          v157 = __ldxr(v156);
        while (__stxr(v157 + 1, v156));
      }
      Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>((char *)a1, (Espresso::ANECompilerEngine *)a2, v758, v757, v46, (uint64_t *)&v795);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v757);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v758);
      goto LABEL_304;
    }
    if (!v159)
    {
      v165 = 0;
LABEL_264:
      v182 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 384))(a1);
      if (v182[9] == 1)
      {
        v699 = *v182;
        __Na = v182[1];
        v183 = (std::__shared_weak_count *)a3[1];
        v753 = *a3;
        v754 = v183;
        if (v183)
        {
          v184 = (unint64_t *)&v183->__shared_owners_;
          do
            v185 = __ldxr(v184);
          while (__stxr(v185 + 1, v184));
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "W_8bit");
        (*(void (**)(std::string *__return_ptr, uint64_t, const Espresso::net **, uint64_t, _BYTE *))(*(_QWORD *)(a1 + 544) + 120))(&v824, a1 + 544, &v753, a1, buf);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        v186 = v754;
        if (v754)
        {
          v187 = (unint64_t *)&v754->__shared_owners_;
          do
            v188 = __ldaxr(v187);
          while (__stlxr(v188 - 1, v187));
          if (!v188)
          {
            ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
            std::__shared_weak_count::__release_weak(v186);
          }
        }
        v189 = (std::__shared_weak_count *)a3[1];
        v751 = *a3;
        v752 = v189;
        if (v189)
        {
          v190 = (unint64_t *)&v189->__shared_owners_;
          do
            v191 = __ldxr(v190);
          while (__stxr(v191 + 1, v190));
        }
        std::string::basic_string[abi:ne180100]<0>(&__str, "Qscale");
        (*(void (**)(_BYTE *__return_ptr, uint64_t, const Espresso::net **, uint64_t, std::string *))(*(_QWORD *)(a1 + 544) + 120))(buf, a1 + 544, &v751, a1, &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v192 = v752;
        if (v752)
        {
          v193 = (unint64_t *)&v752->__shared_owners_;
          do
            v194 = __ldaxr(v193);
          while (__stlxr(v194 - 1, v193));
          if (!v194)
          {
            ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
            std::__shared_weak_count::__release_weak(v192);
          }
        }
        v195 = (std::__shared_weak_count *)a3[1];
        v749 = *a3;
        v750 = v195;
        if (v195)
        {
          v196 = (unint64_t *)&v195->__shared_owners_;
          do
            v197 = __ldxr(v196);
          while (__stxr(v197 + 1, v196));
        }
        std::string::basic_string[abi:ne180100]<0>(v817, "Qbias");
        (*(void (**)(std::string *__return_ptr, uint64_t, const Espresso::net **, uint64_t, void **))(*(_QWORD *)(a1 + 544) + 120))(&__str, a1 + 544, &v749, a1, v817);
        if (SHIBYTE(v818) < 0)
          operator delete(v817[0]);
        v198 = v750;
        if (v750)
        {
          v199 = (unint64_t *)&v750->__shared_owners_;
          do
            v200 = __ldaxr(v199);
          while (__stlxr(v200 - 1, v199));
          if (!v200)
          {
            ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
            std::__shared_weak_count::__release_weak(v198);
          }
        }
        v201 = v824.__r_.__value_.__r.__words[0];
        v202 = *(_QWORD *)buf;
        v203 = __str.__r_.__value_.__r.__words[0];
        v204 = !v824.__r_.__value_.__r.__words[0] || *(_QWORD *)buf == 0;
        if (!v204 && __str.__r_.__value_.__r.__words[0] != 0)
        {
          v632 = (char *)operator new(0x58uLL);
          *((_QWORD *)v632 + 1) = 0;
          *((_QWORD *)v632 + 2) = 0;
          *(_QWORD *)v632 = &off_1E2DBED88;
          *((_QWORD *)v632 + 3) = &off_1E2DA1270;
          *(_OWORD *)(v632 + 56) = 0u;
          *(_OWORD *)(v632 + 72) = 0u;
          *((_DWORD *)v632 + 8) = v699;
          *((_DWORD *)v632 + 9) = __Na;
          *((_QWORD *)v632 + 5) = v201;
          v632[48] = 0;
          v817[0] = v632 + 24;
          v704 = v632;
          v817[1] = v632;
          v633 = (char *)operator new(0x58uLL);
          *((_QWORD *)v633 + 1) = 0;
          *((_QWORD *)v633 + 2) = 0;
          *(_QWORD *)v633 = &off_1E2DBEC00;
          *((_QWORD *)v633 + 3) = &off_1E2DA1190;
          *(_OWORD *)(v633 + 56) = 0u;
          *(_OWORD *)(v633 + 72) = 0u;
          *((_DWORD *)v633 + 8) = v699;
          *((_QWORD *)v633 + 5) = v202;
          v633[48] = 0;
          v822 = v633 + 24;
          v702 = v633;
          v823 = (std::__shared_weak_count *)v633;
          v634 = (char *)operator new(0x58uLL);
          *((_QWORD *)v634 + 1) = 0;
          *((_QWORD *)v634 + 2) = 0;
          *(_QWORD *)v634 = &off_1E2DBEC00;
          *((_QWORD *)v634 + 3) = &off_1E2DA1190;
          *(_OWORD *)(v634 + 56) = 0u;
          *(_OWORD *)(v634 + 72) = 0u;
          *((_DWORD *)v634 + 8) = v699;
          *((_QWORD *)v634 + 5) = v203;
          v634[48] = 0;
          v815 = v634 + 24;
          v701 = v634;
          v816 = (std::__shared_weak_count *)v634;
          std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v813, 4 * v699 * __Na, 1, 1, 1);
          v706 = v813;
          v635 = __Na;
          if ((_DWORD)v699)
          {
            v636 = 0;
            v637 = 0;
            v638 = 0;
            v699 *= 4;
            v700 = 4 * __Na;
            do
            {
              __Nb = v636;
              v639 = (float *)(*(_QWORD *)(v706 + 16) + v637);
              v640 = v635;
              vDSP_vfltu8((const unsigned __int8 *)(*((_QWORD *)v704 + 5) + v636), 1, v639, 1, v635);
              vDSP_vsmul(v639, 1, (const float *)(*((_QWORD *)v702 + 5) + v638), v639, 1, v640);
              vDSP_vsadd(v639, 1, (const float *)(*((_QWORD *)v701 + 5) + v638), v639, 1, v640);
              v638 += 4;
              v637 += v700;
              v636 = __Nb + v640;
              v635 = v640;
            }
            while (v699 != v638);
          }
          v641 = v814;
          v747 = v706;
          v748 = v814;
          if (v814)
          {
            v642 = (unint64_t *)&v814->__shared_owners_;
            do
              v643 = __ldxr(v642);
            while (__stxr(v643 + 1, v642));
          }
          v644 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *(const unsigned __int8 **)(v706 + 16), *(int *)(v706 + 8));
          if (v641)
          {
            v645 = (unint64_t *)&v641->__shared_owners_;
            do
              v646 = __ldaxr(v645);
            while (__stlxr(v646 - 1, v645));
            if (!v646)
            {
              ((void (*)(std::__shared_weak_count *))v641->__on_zero_shared)(v641);
              std::__shared_weak_count::__release_weak(v641);
            }
          }
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v644, v699);
          v647 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v46, "setObject:forKeyedSubscript:", v647, CFSTR("KernelOffset"));

          v648 = (void *)MEMORY[0x1E0CB37E8];
          if (v711)
            v649 = 0;
          else
          objc_msgSend(v648, "numberWithUnsignedLong:", v649);
          v650 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v46, "setObject:forKeyedSubscript:", v650, CFSTR("KernelIndex"));

          objc_msgSend(v46, "setObject:forKeyedSubscript:", CFSTR("Float32"), CFSTR("KernelType"));
          v651 = v814;
          if (v814)
          {
            v652 = (unint64_t *)&v814->__shared_owners_;
            do
              v653 = __ldaxr(v652);
            while (__stlxr(v653 - 1, v652));
            if (!v653)
            {
              ((void (*)(std::__shared_weak_count *))v651->__on_zero_shared)(v651);
              std::__shared_weak_count::__release_weak(v651);
            }
          }
          v654 = v816;
          if (v816)
          {
            v655 = (unint64_t *)&v816->__shared_owners_;
            do
              v656 = __ldaxr(v655);
            while (__stlxr(v656 - 1, v655));
            if (!v656)
            {
              ((void (*)(std::__shared_weak_count *))v654->__on_zero_shared)(v654);
              std::__shared_weak_count::__release_weak(v654);
            }
          }
          v657 = v823;
          if (v823)
          {
            v658 = (unint64_t *)&v823->__shared_owners_;
            do
              v659 = __ldaxr(v658);
            while (__stlxr(v659 - 1, v658));
            if (!v659)
            {
              ((void (*)(std::__shared_weak_count *))v657->__on_zero_shared)(v657);
              std::__shared_weak_count::__release_weak(v657);
            }
          }
          v660 = (std::__shared_weak_count *)v817[1];
          if (v817[1])
          {
            v661 = (unint64_t *)((char *)v817[1] + 8);
            do
              v662 = __ldaxr(v661);
            while (__stlxr(v662 - 1, v661));
            if (!v662)
            {
              ((void (*)(std::__shared_weak_count *))v660->__on_zero_shared)(v660);
              std::__shared_weak_count::__release_weak(v660);
            }
          }
          goto LABEL_304;
        }
      }
LABEL_303:
      if ((v165 & 1) == 0)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cannot find the weights");
      goto LABEL_304;
    }
    v160 = v159;
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v159 + 568))(&v824);
    if (!v824.__r_.__value_.__r.__words[0])
      goto LABEL_257;
    v161 = v160 + 536;
    if (v160[559] < 0)
    {
      v166 = *((_QWORD *)v160 + 68);
      if (v166 != 4)
      {
        if (v166 != 6)
          goto LABEL_257;
        if (**(_DWORD **)v161 != 1852399447 || *(_WORD *)(*(_QWORD *)v161 + 4) != 14452)
          goto LABEL_257;
        goto LABEL_245;
      }
      v163 = *(_DWORD **)v161;
    }
    else
    {
      v162 = v160[559];
      v163 = v160 + 536;
      if (v162 != 4)
      {
        if (v162 != 6)
          goto LABEL_257;
        if (*(_DWORD *)v161 != 1852399447 || *((_WORD *)v160 + 270) != 14452)
          goto LABEL_257;
        goto LABEL_245;
      }
    }
    if (*v163 != 947216215)
    {
LABEL_257:
      v165 = 0;
      goto LABEL_258;
    }
LABEL_245:
    v705 = v824.__r_.__value_.__r.__words[0];
    __N = (vDSP_Length)v160;
    v703 = v160 + 536;
    v168 = 0;
    v169 = *(_DWORD *)(v824.__r_.__value_.__r.__words[0] + 8);
    do
    {
      v169 *= *(_DWORD *)(v824.__r_.__value_.__r.__words[0] + 12 + v168);
      v168 += 4;
    }
    while (v168 != 12);
    v170 = (std::__shared_weak_count *)operator new(0x58uLL);
    v170->__shared_owners_ = 0;
    v171 = (unint64_t *)&v170->__shared_owners_;
    v170->__shared_weak_owners_ = 0;
    v170->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBED50;
    v172 = *(const unsigned __int8 **)(v705 + 24);
    v170[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA1250;
    v170[3].std::__shared_count = 0u;
    *(_OWORD *)&v170[2].__shared_owners_ = 0u;
    LODWORD(v170[1].__shared_owners_) = v169;
    v170[1].__shared_weak_owners_ = (uint64_t)v172;
    LOBYTE(v170[2].__vftable) = 0;
    *(_QWORD *)buf = v170 + 1;
    *(_QWORD *)&buf[8] = v170;
    v755 = v170 + 1;
    v756 = v170;
    do
      v173 = __ldxr(v171);
    while (__stxr(v173 + 1, v171));
    v174 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v172, v169);
    do
      v175 = __ldaxr(v171);
    while (__stlxr(v175 - 1, v171));
    if (!v175)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v174);
    v176 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "setObject:forKeyedSubscript:", v176, CFSTR("KernelOffset"));

    v177 = (void *)MEMORY[0x1E0CB37E8];
    if (v711)
      v178 = 0;
    else
    objc_msgSend(v177, "numberWithUnsignedLong:", v178);
    v663 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "setObject:forKeyedSubscript:", v663, CFSTR("KernelIndex"));

    if (*(char *)(__N + 559) < 0)
    {
      v666 = *(_QWORD *)(__N + 544);
      if (v666 != 4)
      {
        if (v666 != 6)
          goto LABEL_1013;
        if (**(_DWORD **)v703 != 1852399447 || *(_WORD *)(*(_QWORD *)v703 + 4) != 14452)
          goto LABEL_1013;
LABEL_1010:
        v668 = CFSTR("Int8");
        goto LABEL_1015;
      }
      v703 = *(_WORD **)v703;
    }
    else
    {
      v664 = *(unsigned __int8 *)(__N + 559);
      if (v664 != 4)
      {
        if (v664 != 6)
          goto LABEL_1013;
        if (*(_DWORD *)v703 != 1852399447 || v703[2] != 14452)
          goto LABEL_1013;
        goto LABEL_1010;
      }
    }
    if (*(_DWORD *)v703 != 947216215)
    {
LABEL_1013:
      v165 = 0;
LABEL_1016:
      v669 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v670 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v671 = __ldaxr(v670);
        while (__stlxr(v671 - 1, v670));
        if (!v671)
        {
          ((void (*)(std::__shared_weak_count *))v669->__on_zero_shared)(v669);
          std::__shared_weak_count::__release_weak(v669);
        }
      }
LABEL_258:
      size = (std::__shared_weak_count *)v824.__r_.__value_.__l.__size_;
      if (v824.__r_.__value_.__l.__size_)
      {
        v180 = (unint64_t *)(v824.__r_.__value_.__l.__size_ + 8);
        do
          v181 = __ldaxr(v180);
        while (__stlxr(v181 - 1, v180));
        if (!v181)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      if (!a1)
        goto LABEL_303;
      goto LABEL_264;
    }
    v668 = CFSTR("UInt8");
LABEL_1015:
    objc_msgSend(v46, "setObject:forKeyedSubscript:", v668, CFSTR("KernelType"));
    v165 = 1;
    goto LABEL_1016;
  }
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 416))(&v824, a1);
  if (a1)
    v137 = (Espresso::ANECompilerEngine::ane_kernel *)(a1 + 544);
  else
    v137 = 0;
  Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32((Espresso::ANECompilerEngine::final_anec_weights_t *)&v795, v137, (uint64_t *)&v824);
  v138 = v824.__r_.__value_.__r.__words[0];
  v139 = *(_DWORD *)(v824.__r_.__value_.__r.__words[0] + 8);
  v140 = *(_DWORD *)(v824.__r_.__value_.__r.__words[0] + 12);
  v141 = (char *)operator new(0x58uLL);
  *((_QWORD *)v141 + 1) = 0;
  v142 = (unint64_t *)(v141 + 8);
  *((_QWORD *)v141 + 2) = 0;
  *(_QWORD *)v141 = &off_1E2DBED50;
  v143 = *(const unsigned __int8 **)(v138 + 16);
  *((_QWORD *)v141 + 3) = &off_1E2DA1250;
  v144 = 4 * v139 * v140;
  *(_OWORD *)(v141 + 72) = 0u;
  *(_OWORD *)(v141 + 56) = 0u;
  *((_DWORD *)v141 + 8) = v144;
  *((_QWORD *)v141 + 5) = v143;
  v141[48] = 0;
  *(_QWORD *)buf = v141 + 24;
  *(_QWORD *)&buf[8] = v141;
  v759[0] = v141 + 24;
  v759[1] = v141;
  do
    v145 = __ldxr(v142);
  while (__stxr(v145 + 1, v142));
  v146 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v143, v144);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v759);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v146);
  v147 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v46, "setObject:forKeyedSubscript:", v147, CFSTR("KernelOffset"));

  v148 = (void *)MEMORY[0x1E0CB37E8];
  if (v711)
    v149 = 0;
  else
  objc_msgSend(v148, "numberWithUnsignedLong:", v149);
  v158 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v46, "setObject:forKeyedSubscript:", v158, CFSTR("KernelIndex"));

  objc_msgSend(v46, "setObject:forKeyedSubscript:", CFSTR("Float32"), CFSTR("KernelType"));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v824);
LABEL_304:
  Espresso::ANECompilerEngine::sparsity_options::required_sparsity_for_compression(v717, v51);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(__int16 *)(a4 + 92));
  v206 = (void *)objc_claimAutoreleasedReturnValue();
  v835[0] = v206;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(__int16 *)(a4 + 94));
  v207 = (void *)objc_claimAutoreleasedReturnValue();
  v835[1] = v207;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v835, 2);
  v208 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v46, "setObject:forKeyedSubscript:", v208, CFSTR("Step"));

  v209 = HIBYTE(v782);
  v210 = v716;
  if (HIBYTE(v782))
    v210 = 0;
  if (v210 && !(_BYTE)v782)
  {
    LODWORD(v32) = (v32 - 1) * *(__int16 *)(a4 + 96) + 1;
    LODWORD(v33) = (v33 - 1) * *(__int16 *)(a4 + 98) + 1;
  }
  v211 = *(__int16 *)(a4 + 72);
  switch(v211)
  {
    case 4:
      goto LABEL_312;
    case 2:
      goto LABEL_359;
    case 1:
LABEL_312:
      v212 = v33 + (*(_DWORD *)(*a7 + 12) - 1) * *(__int16 *)(a4 + 94) - *(_DWORD *)(*a6 + 12);
      v213 = v32 + (*(_DWORD *)(*a7 + 8) - 1) * *(__int16 *)(a4 + 92) - *(_DWORD *)(*a6 + 8);
      v214 = v212 & ~(v212 >> 31);
      v215 = v213 & ~(v213 >> 31);
      v216 = *(unsigned __int16 *)(a4 + 72);
      v217 = v215 >> 1;
      v218 = v215 - (v215 >> 1);
      v219 = v214 >> 1;
      v220 = v214 - (v214 >> 1);
      if (v216 == 1)
        v221 = v220;
      else
        v221 = v219;
      if (v216 == 1)
        v222 = v219;
      else
        v222 = v220;
      if (v216 == 1)
        v223 = v218;
      else
        v223 = v217;
      if (v216 == 1)
        v224 = v217;
      else
        v224 = v218;
      break;
    default:
      v224 = *(__int16 *)(a4 + 80);
      v223 = *(__int16 *)(a4 + 82);
      v222 = *(__int16 *)(a4 + 84);
      v221 = *(__int16 *)(a4 + 86);
      break;
  }
  if (v222)
    v225 = 0;
  else
    v225 = (_DWORD)v221 == 0;
  if (v225 && (_DWORD)v224 == 0)
  {
    if (!(_DWORD)v223)
      goto LABEL_359;
    v221 = 0;
    v224 = 0;
  }
  else if ((v222 & 0x80000000) != 0)
  {
    v227 = 0;
    v228 = &unk_1E2DEDBE0;
    goto LABEL_337;
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v699);
  v228 = (void *)objc_claimAutoreleasedReturnValue();
  v227 = 1;
LABEL_337:
  objc_msgSend(v46, "setObject:forKeyedSubscript:", v228, CFSTR("PadTop"), v699);
  if (v227)

  if ((v221 & 0x80000000) != 0)
  {
    v229 = &unk_1E2DEDBE0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v221);
    v229 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(v46, "setObject:forKeyedSubscript:", v229, CFSTR("PadBot"));
  if ((v221 & 0x80000000) == 0)

  if ((v224 & 0x80000000) != 0)
  {
    v230 = &unk_1E2DEDBE0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v224);
    v230 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(v46, "setObject:forKeyedSubscript:", v230, CFSTR("PadLeft"));
  if ((v224 & 0x80000000) == 0)

  if ((v223 & 0x80000000) != 0)
  {
    v231 = &unk_1E2DEDBE0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v223);
    v231 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(v46, "setObject:forKeyedSubscript:", v231, CFSTR("PadRight"));
  if ((v223 & 0x80000000) == 0)

  if (*(_WORD *)(a4 + 74))
  {
    if (*(_WORD *)(a4 + 74) != 1)
      goto LABEL_359;
    v232 = CFSTR("Replication");
  }
  else
  {
    v232 = CFSTR("Zero");
  }
  objc_msgSend(v46, "setObject:forKeyedSubscript:", v232, CFSTR("PaddingMode"));
LABEL_359:
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v824.__r_.__value_.__l.__data_, a5);
  v233 = !v716;
  if (v209)
    v233 = 1;
  if ((v233 & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", *(__int16 *)(a4 + 96));
    v234 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "setObject:forKeyedSubscript:", v234, CFSTR("KernelDilationX"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", *(__int16 *)(a4 + 98));
    v235 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "setObject:forKeyedSubscript:", v235, CFSTR("KernelDilationY"));

    objc_msgSend(v46, "setObject:forKeyedSubscript:", v710, CFSTR("Type"));
  }
  v236 = v832;
  v832 = CFSTR("Conv");

  objc_storeStrong(&v833, v46);
  v237 = (uint64_t)*a3 + 136;
  *(_QWORD *)buf = &v824;
  v238 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v237, (unsigned __int8 *)&v824, (__int128 **)buf);
  v240 = (std::__shared_weak_count *)*((_QWORD *)v238 + 6);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v239;
  __str.__r_.__value_.__l.__size_ = (std::string::size_type)v240;
  if (v240)
  {
    v241 = (unint64_t *)&v240->__shared_owners_;
    do
      v242 = __ldxr(v241);
    while (__stxr(v242 + 1, v241));
  }
  LODWORD(v834) = v239[41];
  HIDWORD(v834) = v713;
  v243 = v780;
  if ((unint64_t)v780 >= v781)
  {
    v245 = 0x8E38E38E38E38E39 * (((uint64_t)v780 - v779) >> 4);
    if (v245 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v246 = 0x1C71C71C71C71C72 * ((uint64_t)(v781 - v779) >> 4);
    if (v246 <= v245 + 1)
      v246 = v245 + 1;
    if (0x8E38E38E38E38E39 * ((uint64_t)(v781 - v779) >> 4) >= 0xE38E38E38E38E3)
      v247 = 0x1C71C71C71C71C7;
    else
      v247 = v246;
    *((_QWORD *)&v837 + 1) = &v781;
    if (v247)
      v247 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v247);
    else
      v248 = 0;
    *(_QWORD *)buf = v247;
    *(_QWORD *)&buf[8] = v247 + 144 * v245;
    *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
    *(_QWORD *)&v837 = v247 + 144 * v248;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v824);
    *(_QWORD *)&buf[16] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v779, buf);
    v244 = v780;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v780, (uint64_t)&v824);
    v244 = v243 + 6;
  }
  v780 = v244;
  if (v240)
  {
    v249 = (unint64_t *)&v240->__shared_owners_;
    do
      v250 = __ldaxr(v249);
    while (__stlxr(v250 - 1, v249));
    if (!v250)
    {
      ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
      std::__shared_weak_count::__release_weak(v240);
    }
  }

  if (v830 < 0)
    operator delete(v829);
  *(_QWORD *)buf = &v826;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v825;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v824.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v824.__r_.__value_.__l.__data_);

  v251 = (std::__shared_weak_count *)a3[1];
  v745 = *a3;
  v746 = v251;
  if (v251)
  {
    v252 = (unint64_t *)&v251->__shared_owners_;
    do
      v253 = __ldxr(v252);
    while (__stxr(v253 + 1, v252));
  }
  v255 = *a7;
  v254 = (std::__shared_weak_count *)a7[1];
  v743 = *a7;
  v744 = v254;
  if (v254)
  {
    v256 = (unint64_t *)&v254->__shared_owners_;
    do
      v257 = __ldxr(v256);
    while (__stxr(v257 + 1, v256));
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v824);
  v833 = 0;
  v832 = 0;
  v834 = 0x100000000;
  v258 = *(char **)(a1 + 608);
  v259 = *(std::__shared_weak_count **)(a1 + 616);
  v822 = v258;
  v823 = v259;
  if (v259)
  {
    v260 = (unint64_t *)&v259->__shared_owners_;
    do
      v261 = __ldxr(v260);
    while (__stxr(v261 + 1, v260));
  }
  if (!v258 || *(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 544) + 104))(a1 + 544) + 40))
  {
    v262 = 0;
    if (!v259)
      goto LABEL_529;
    goto LABEL_525;
  }
  v263 = *(float *)(v255 + 112);
  v815 = v258;
  v816 = v259;
  if (v259)
  {
    v264 = (unint64_t *)&v259->__shared_owners_;
    do
      v265 = __ldxr(v264);
    while (__stxr(v265 + 1, v264));
  }
  v266 = *(std::__shared_weak_count **)(a1 + 632);
  v813 = *(_QWORD *)(a1 + 624);
  v814 = v266;
  if (v266)
  {
    v267 = (unint64_t *)&v266->__shared_owners_;
    do
      v268 = __ldxr(v267);
    while (__stxr(v268 + 1, v267));
  }
  Espresso::ane_style_post_scale_bias((uint64_t)&v815, &v813, (uint64_t)v817, v263);
  if (v266)
  {
    v269 = (unint64_t *)&v266->__shared_owners_;
    do
      v270 = __ldaxr(v269);
    while (__stlxr(v270 - 1, v269));
    if (!v270)
    {
      ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
      std::__shared_weak_count::__release_weak(v266);
    }
  }
  v271 = v816;
  if (v816)
  {
    v272 = (unint64_t *)&v816->__shared_owners_;
    do
      v273 = __ldaxr(v272);
    while (__stlxr(v273 - 1, v272));
    if (!v273)
    {
      ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
      std::__shared_weak_count::__release_weak(v271);
    }
  }
  v274 = v822;
  v275 = *((unsigned int *)v822 + 2);
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v811, 2 * v275, 1, 1, 1);
  v276 = (int)v275;
  v810 = 0uLL;
  v277 = v275;
  v278 = *(_QWORD *)(a1 + 624);
  if (v278)
    v277 = *(_DWORD *)(v278 + 8);
  if (!a2[384])
  {
    Espresso::blob<unsigned char,1>::make(&__str, 4 * v275);
    v674 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
    if ((int)v275 >= 1)
    {
      for (i = 0; i != v275; ++i)
      {
        v676 = *(float *)(*((_QWORD *)v274 + 2) + i * 4);
        *(float *)&v677 = ldexp(1.0, -v820) * v676;
        v674[i] = v677;
      }
    }
    if ((_DWORD)v275)
    {
      v678 = *(_WORD **)(v811 + 16);
      do
      {
        v679 = *v674++;
        _S0 = v679;
        __asm { FCVT            H0, S0 }
        *v678++ = _S0;
        --v276;
      }
      while (v276);
    }
    v809 = 0;
    v808 = 0;
    if (*(_QWORD *)(a1 + 624))
    {
      Espresso::blob<unsigned char,1>::make(buf, 4 * v277);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v808, (__int128 *)buf);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      Espresso::blob<unsigned char,1>::make(buf, 2 * v277);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v810, (__int128 *)buf);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      v682 = *(int **)(v808 + 16);
      if (v277 >= 1)
      {
        for (j = 0; j != v277; ++j)
        {
          if ((int)v275 - 1 >= (int)j)
            v684 = j;
          else
            v684 = v275 - 1;
          *(float *)&v685 = *(float *)(*(_QWORD *)(v818 + 16) + 4 * j)
                          * *(float *)(*((_QWORD *)v817[0] + 2) + 4 * v684);
          v682[j] = v685;
          v686 = v821;
          v687 = v820;
          *(float *)&v688 = ldexp(1.0, v821 - v820) * *(float *)&v685;
          v682[j] = v688;
          v691 = ldexp(1.0, v687 - v686) * *(float *)&v688;
          if (v691 < -127.0 || v691 > 255.0)
          {
            Espresso::espresso_os_log_subsystem(v689, v690);
            v693 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v693, OS_LOG_TYPE_ERROR))
            {
              v694 = *(float *)&v682[j];
              *(_DWORD *)buf = 134218752;
              *(double *)&buf[4] = v691;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v821;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v820;
              LOWORD(v837) = 2048;
              *(double *)((char *)&v837 + 2) = v694;
              _os_log_error_impl(&dword_190DAF000, v693, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
            }

          }
        }
      }
      if (v277)
      {
        v695 = v277;
        v696 = *(_WORD **)(v810 + 16);
        do
        {
          v697 = *v682++;
          _S0 = v697;
          __asm { FCVT            H0, S0 }
          *v696++ = _S0;
          --v695;
        }
        while (v695);
      }
    }
    v681 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::not_implemented_error::not_implemented_error(v681);
  }
  v715 = v821;
  if ((_DWORD)v275)
  {
    v279 = (int *)*((_QWORD *)v817[0] + 2);
    v280 = *(_WORD **)(v811 + 16);
    do
    {
      v281 = *v279++;
      _S0 = v281;
      __asm { FCVT            H0, S0 }
      *v280++ = _S0;
      --v276;
    }
    while (v276);
  }
  if (v278)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v277, 1, 1, 1);
    v286 = *(_OWORD *)buf;
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)buf = 0;
    v287 = (std::__shared_weak_count *)*((_QWORD *)&v810 + 1);
    v810 = v286;
    if (v287)
    {
      v288 = (unint64_t *)&v287->__shared_owners_;
      do
        v289 = __ldaxr(v288);
      while (__stlxr(v289 - 1, v288));
      if (!v289)
      {
        ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
        std::__shared_weak_count::__release_weak(v287);
      }
    }
    v290 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v291 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v292 = __ldaxr(v291);
      while (__stlxr(v292 - 1, v291));
      if (!v292)
      {
        ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
        std::__shared_weak_count::__release_weak(v290);
      }
    }
    if (v277)
    {
      v293 = v277;
      v294 = *(int **)(v818 + 16);
      v295 = *(_WORD **)(v810 + 16);
      do
      {
        v296 = *v294++;
        _S0 = v296;
        __asm { FCVT            H0, S0 }
        *v295++ = _S0;
        --v293;
      }
      while (v293);
    }
  }
  v298 = a2[552];
  v299 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
  v300 = v811;
  v301 = v812;
  v808 = v811;
  v809 = v812;
  if (v812)
  {
    v302 = (unint64_t *)&v812->__shared_owners_;
    do
      v303 = __ldxr(v302);
    while (__stxr(v303 + 1, v302));
  }
  v304 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v299, *(const unsigned __int8 **)(v300 + 16), *(int *)(v300 + 8));
  if (v301)
  {
    v305 = (unint64_t *)&v301->__shared_owners_;
    do
      v306 = __ldaxr(v305);
    while (__stlxr(v306 - 1, v305));
    if (!v306)
    {
      ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
      std::__shared_weak_count::__release_weak(v301);
    }
  }
  v307 = (void *)objc_opt_new();
  if (a2[121])
  {
    v308 = *(id *)(v779 + 128);

    v307 = v308;
  }
  v309 = (void *)objc_opt_new();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v275);
  v310 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v309, "setObject:forKeyedSubscript:", v310, CFSTR("ScaleCount"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v304);
  v311 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v309, "setObject:forKeyedSubscript:", v311, CFSTR("ScaleOffset"));

  v312 = (void *)MEMORY[0x1E0CB37E8];
  if (v298)
    v313 = 0;
  else
  objc_msgSend(v312, "numberWithUnsignedLong:", v313, v699);
  v314 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v309, "setObject:forKeyedSubscript:", v314, CFSTR("ScaleIndex"));

  objc_msgSend(v309, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v820);
  v315 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v307, "setObject:forKeyedSubscript:", v315, CFSTR("ScaleShift"));

  if (*(_QWORD *)(a1 + 624))
  {
    v316 = v810;
    v807 = v810;
    if (*((_QWORD *)&v810 + 1))
    {
      v317 = (unint64_t *)(*((_QWORD *)&v810 + 1) + 8);
      do
        v318 = __ldxr(v317);
      while (__stxr(v318 + 1, v317));
    }
    v319 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v299, *(const unsigned __int8 **)(v316 + 16), *(int *)(v316 + 8));
    if (*((_QWORD *)&v316 + 1))
    {
      v320 = (unint64_t *)(*((_QWORD *)&v316 + 1) + 8);
      do
        v321 = __ldaxr(v320);
      while (__stlxr(v321 - 1, v320));
      if (!v321)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v316 + 1) + 16))(*((_QWORD *)&v316 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v316 + 1));
      }
    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 624) + 8));
    v322 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v309, "setObject:forKeyedSubscript:", v322, CFSTR("BiasCount"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v319);
    v323 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v309, "setObject:forKeyedSubscript:", v323, CFSTR("BiasOffset"));

    v324 = (void *)MEMORY[0x1E0CB37E8];
    if (v298)
      v325 = 0;
    else
    objc_msgSend(v324, "numberWithUnsignedLong:", v325);
    v326 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v309, "setObject:forKeyedSubscript:", v326, CFSTR("BiasIndex"));

    objc_msgSend(v309, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v715);
    v327 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v307, "setObject:forKeyedSubscript:", v327, CFSTR("BiasShift"));

  }
  objc_msgSend(v307, "setObject:forKeyedSubscript:", v309, CFSTR("BiasScaleGroupData"));
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a5);
  v328 = v780;
  if (v780 != (std::string *)v779)
  {
    v329 = v780 - 6;
    v330 = HIBYTE(v780[-6].__r_.__value_.__r.__words[2]);
    v331 = v330;
    v332 = v780[-6].__r_.__value_.__l.__size_;
    if ((v330 & 0x80u) == 0)
      v333 = HIBYTE(v780[-6].__r_.__value_.__r.__words[2]);
    else
      v333 = v780[-6].__r_.__value_.__l.__size_;
    v334 = buf[23];
    if (buf[23] < 0)
      v334 = *(_QWORD *)&buf[8];
    if (v333 == v334)
    {
      if (buf[23] >= 0)
        v335 = buf;
      else
        v335 = *(unsigned __int8 **)buf;
      if ((char)v330 < 0)
      {
        data = (const std::string::value_type *)v329->__r_.__value_.__r.__words[0];
        if (memcmp(v329->__r_.__value_.__l.__data_, v335, v780[-6].__r_.__value_.__l.__size_))
          goto LABEL_483;
      }
      else if ((_BYTE)v330)
      {
        v336 = v780 - 6;
        while (v336->__r_.__value_.__s.__data_[0] == *v335)
        {
          v336 = (std::string *)((char *)v336 + 1);
          ++v335;
          if (!--v330)
            goto LABEL_479;
        }
        goto LABEL_480;
      }
LABEL_479:
      std::string::append(v328 - 6, "__@pre_scale_bias");
      v331 = HIBYTE(v328[-6].__r_.__value_.__r.__words[2]);
    }
LABEL_480:
    if ((v331 & 0x80) == 0)
    {
      v338 = *(_OWORD *)&v329->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v328[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v338;
      goto LABEL_484;
    }
    data = v328[-6].__r_.__value_.__l.__data_;
    v332 = v328[-6].__r_.__value_.__l.__size_;
LABEL_483:
    std::string::__init_copy_ctor_external(&__str, data, v332);
LABEL_484:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v838, &__str, &v845, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  v339 = v842;
  v842 = CFSTR("GOC");

  objc_storeStrong(&v843, v307);
  if (!a2[121])
  {
    v340 = v780;
    if ((unint64_t)v780 >= v781)
    {
      v342 = 0x8E38E38E38E38E39 * (((uint64_t)v780 - v779) >> 4);
      if (v342 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v343 = 0x1C71C71C71C71C72 * ((uint64_t)(v781 - v779) >> 4);
      if (v343 <= v342 + 1)
        v343 = v342 + 1;
      if (0x8E38E38E38E38E39 * ((uint64_t)(v781 - v779) >> 4) >= 0xE38E38E38E38E3)
        v344 = 0x1C71C71C71C71C7;
      else
        v344 = v343;
      *((_QWORD *)&v845 + 1) = &v781;
      if (v344)
        v344 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v344);
      else
        v345 = 0;
      __str.__r_.__value_.__r.__words[0] = v344;
      __str.__r_.__value_.__l.__size_ = v344 + 144 * v342;
      __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
      *(_QWORD *)&v845 = v344 + 144 * v345;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
      __str.__r_.__value_.__r.__words[2] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v779, &__str);
      v341 = v780;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v780, (uint64_t)buf);
      v341 = v340 + 6;
    }
    v780 = v341;
  }

  if (v840 < 0)
    operator delete(v839);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v838;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v837;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);

  v346 = (std::__shared_weak_count *)*((_QWORD *)&v810 + 1);
  if (*((_QWORD *)&v810 + 1))
  {
    v347 = (unint64_t *)(*((_QWORD *)&v810 + 1) + 8);
    do
      v348 = __ldaxr(v347);
    while (__stlxr(v348 - 1, v347));
    if (!v348)
    {
      ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
      std::__shared_weak_count::__release_weak(v346);
    }
  }
  v349 = v812;
  if (v812)
  {
    v350 = (unint64_t *)&v812->__shared_owners_;
    do
      v351 = __ldaxr(v350);
    while (__stlxr(v351 - 1, v350));
    if (!v351)
    {
      ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
      std::__shared_weak_count::__release_weak(v349);
    }
  }
  v352 = v819;
  if (v819)
  {
    v353 = (unint64_t *)&v819->__shared_owners_;
    do
      v354 = __ldaxr(v353);
    while (__stlxr(v354 - 1, v353));
    if (!v354)
    {
      ((void (*)(std::__shared_weak_count *))v352->__on_zero_shared)(v352);
      std::__shared_weak_count::__release_weak(v352);
    }
  }
  v355 = (std::__shared_weak_count *)v817[1];
  if (v817[1])
  {
    v356 = (unint64_t *)((char *)v817[1] + 8);
    do
      v357 = __ldaxr(v356);
    while (__stlxr(v357 - 1, v356));
    if (!v357)
    {
      ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
      std::__shared_weak_count::__release_weak(v355);
    }
  }
  v262 = 1;
  v259 = v823;
  if (v823)
  {
LABEL_525:
    v358 = (unint64_t *)&v259->__shared_owners_;
    do
      v359 = __ldaxr(v358);
    while (__stlxr(v359 - 1, v358));
    if (!v359)
    {
      ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
      std::__shared_weak_count::__release_weak(v259);
    }
  }
LABEL_529:

  if (v830 < 0)
    operator delete(v829);
  *(_QWORD *)buf = &v826;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v825;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v824.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v824.__r_.__value_.__l.__data_);
  if (v744)
  {
    v360 = &v744->__shared_owners_;
    do
      v361 = __ldaxr((unint64_t *)v360);
    while (__stlxr(v361 - 1, (unint64_t *)v360));
    if (!v361)
    {
      ((void (*)(std::__shared_weak_count *))v744->__on_zero_shared)(v744);
      std::__shared_weak_count::__release_weak(v744);
    }
  }
  if (!v746)
    goto LABEL_542;
  v362 = &v746->__shared_owners_;
  do
    v363 = __ldaxr((unint64_t *)v362);
  while (__stlxr(v363 - 1, (unint64_t *)v362));
  if (!v363)
  {
    ((void (*)(std::__shared_weak_count *))v746->__on_zero_shared)(v746);
    std::__shared_weak_count::__release_weak(v746);
    if ((v262 & 1) != 0)
    {
LABEL_543:
      if (*(_DWORD *)(a4 + 112))
LABEL_1028:
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent fused bn state");
      goto LABEL_817;
    }
  }
  else
  {
LABEL_542:
    if ((v262 & 1) != 0)
      goto LABEL_543;
  }
  v364 = *(_QWORD **)(a1 + 440);
  if (v364 && *v364 && (v364[4] || v364[6] || v364[8] || v364[10]))
  {
    v365 = v364[10];
    if (v365)
    {
      v366 = *(int *)(v365 + 8);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v824, 2 * v366, 1, 1, 1);
      v367 = *(_OWORD *)&v824.__r_.__value_.__l.__data_;
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&v824.__r_.__value_.__l.__data_;
      v368 = *(const unsigned __int8 **)(v824.__r_.__value_.__r.__words[0] + 16);
      if ((_DWORD)v366)
      {
        v369 = *(int **)(*(_QWORD *)(*(_QWORD *)(a1 + 440) + 80) + 16);
        v370 = *(_WORD **)(v824.__r_.__value_.__r.__words[0] + 16);
        v371 = v366;
        do
        {
          v372 = *v369++;
          _S0 = v372;
          __asm { FCVT            H0, S0 }
          *v370++ = _S0;
          --v371;
        }
        while (v371);
      }
      v374 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
      v742 = v367;
      if (*((_QWORD *)&v367 + 1))
      {
        v375 = (unint64_t *)(*((_QWORD *)&v367 + 1) + 8);
        do
          v376 = __ldxr(v375);
        while (__stxr(v376 + 1, v375));
        v368 = *(const unsigned __int8 **)(v367 + 16);
      }
      v377 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v374, v368, *(int *)(v367 + 8));
      if (*((_QWORD *)&v367 + 1))
      {
        v378 = (unint64_t *)(*((_QWORD *)&v367 + 1) + 8);
        do
          v379 = __ldaxr(v378);
        while (__stlxr(v379 - 1, v378));
        if (!v379)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v367 + 1) + 16))(*((_QWORD *)&v367 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v367 + 1));
        }
      }
      v380 = (void *)objc_opt_new();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v366);
      v381 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v380, "setObject:forKeyedSubscript:", v381, CFSTR("ScaleCount"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v377);
      v382 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v380, "setObject:forKeyedSubscript:", v382, CFSTR("ScaleOffset"));

      v383 = (void *)MEMORY[0x1E0CB37E8];
      if (v711)
        v384 = 0;
      else
      objc_msgSend(v383, "numberWithUnsignedLong:", v384, v699);
      v429 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v380, "setObject:forKeyedSubscript:", v429, CFSTR("ScaleIndex"));

      objc_msgSend(v380, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
      if (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 384))(a1) + 8))
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 408))(v817, a1);
        if (!v817[0])
        {
          v430 = (std::__shared_weak_count *)a3[1];
          v740 = *a3;
          v741 = v430;
          if (v430)
          {
            v431 = (unint64_t *)&v430->__shared_owners_;
            do
              v432 = __ldxr(v431);
            while (__stxr(v432 + 1, v431));
          }
          std::string::basic_string[abi:ne180100]<0>(buf, "blob_biases");
          (*(void (**)(std::string *__return_ptr, uint64_t, const Espresso::net **, uint64_t, _BYTE *))(*(_QWORD *)(a1 + 544) + 120))(&v824, a1 + 544, &v740, a1, buf);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          v433 = v741;
          if (v741)
          {
            v434 = (unint64_t *)&v741->__shared_owners_;
            do
              v435 = __ldaxr(v434);
            while (__stlxr(v435 - 1, v434));
            if (!v435)
            {
              ((void (*)(std::__shared_weak_count *))v433->__on_zero_shared)(v433);
              std::__shared_weak_count::__release_weak(v433);
            }
          }
          v436 = v824.__r_.__value_.__r.__words[2];
          v437 = (char *)operator new(0x58uLL);
          *((_QWORD *)v437 + 1) = 0;
          *((_QWORD *)v437 + 2) = 0;
          *(_QWORD *)v437 = &off_1E2DBEC00;
          *((_QWORD *)v437 + 3) = &off_1E2DA1190;
          v438 = v824.__r_.__value_.__r.__words[0];
          *(_OWORD *)(v437 + 56) = 0u;
          *(_OWORD *)(v437 + 72) = 0u;
          *((_DWORD *)v437 + 8) = v436 >> 2;
          *((_QWORD *)v437 + 5) = v438;
          v437[48] = 0;
          *(_QWORD *)&v439 = v437 + 24;
          *((_QWORD *)&v439 + 1) = v437;
          v440 = (std::__shared_weak_count *)v817[1];
          *(_OWORD *)v817 = v439;
          if (v440)
          {
            v441 = (unint64_t *)&v440->__shared_owners_;
            do
              v442 = __ldaxr(v441);
            while (__stlxr(v442 - 1, v441));
            if (!v442)
            {
              ((void (*)(std::__shared_weak_count *))v440->__on_zero_shared)(v440);
              std::__shared_weak_count::__release_weak(v440);
            }
          }
          if (!v817[0])
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("Missing biases");
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v824, 4 * v366, 1, 1, 1);
        v443 = v824.__r_.__value_.__r.__words[0];
        if ((_DWORD)v366)
        {
          v444 = *(float **)(v824.__r_.__value_.__r.__words[0] + 16);
          v445 = (float *)*((_QWORD *)v817[0] + 2);
          v446 = *(float **)(*(_QWORD *)(*(_QWORD *)(a1 + 440) + 80) + 16);
          v447 = v366;
          do
          {
            v448 = *v445++;
            v449 = v448;
            v450 = *v446++;
            *v444++ = v449 / v450;
            --v447;
          }
          while (v447);
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v366, 1, 1, 1);
        v451 = *(_QWORD *)buf;
        v452 = *(const unsigned __int8 **)(*(_QWORD *)buf + 16);
        if ((_DWORD)v366)
        {
          v453 = *(int **)(v443 + 16);
          v454 = *(_WORD **)(*(_QWORD *)buf + 16);
          v455 = v366;
          do
          {
            v456 = *v453++;
            _S0 = v456;
            __asm { FCVT            H0, S0 }
            *v454++ = _S0;
            --v455;
          }
          while (v455);
        }
        v458 = *(std::__shared_weak_count **)&buf[8];
        v738 = v451;
        v739 = *(_QWORD *)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v459 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v460 = __ldxr(v459);
          while (__stxr(v460 + 1, v459));
          v452 = *(const unsigned __int8 **)(v451 + 16);
        }
        v461 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v374, v452, *(int *)(v451 + 8));
        if (v458)
        {
          v462 = (unint64_t *)&v458->__shared_owners_;
          do
            v463 = __ldaxr(v462);
          while (__stlxr(v463 - 1, v462));
          if (!v463)
          {
            ((void (*)(std::__shared_weak_count *))v458->__on_zero_shared)(v458);
            std::__shared_weak_count::__release_weak(v458);
          }
        }
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v366);
        v464 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v380, "setObject:forKeyedSubscript:", v464, CFSTR("BiasCount"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v461);
        v465 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v380, "setObject:forKeyedSubscript:", v465, CFSTR("BiasOffset"));

        v466 = (void *)MEMORY[0x1E0CB37E8];
        if (v711)
          v467 = 0;
        else
        objc_msgSend(v466, "numberWithUnsignedLong:", v467);
        v480 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v380, "setObject:forKeyedSubscript:", v480, CFSTR("BiasIndex"));

        objc_msgSend(v380, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
        v481 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v482 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v483 = __ldaxr(v482);
          while (__stlxr(v483 - 1, v482));
          if (!v483)
          {
            ((void (*)(std::__shared_weak_count *))v481->__on_zero_shared)(v481);
            std::__shared_weak_count::__release_weak(v481);
          }
        }
        v484 = (std::__shared_weak_count *)v824.__r_.__value_.__l.__size_;
        if (v824.__r_.__value_.__l.__size_)
        {
          v485 = (unint64_t *)(v824.__r_.__value_.__l.__size_ + 8);
          do
            v486 = __ldaxr(v485);
          while (__stlxr(v486 - 1, v485));
          if (!v486)
          {
            ((void (*)(std::__shared_weak_count *))v484->__on_zero_shared)(v484);
            std::__shared_weak_count::__release_weak(v484);
          }
        }
        v487 = (std::__shared_weak_count *)v817[1];
        if (v817[1])
        {
          v488 = (unint64_t *)((char *)v817[1] + 8);
          do
            v489 = __ldaxr(v488);
          while (__stlxr(v489 - 1, v488));
          if (!v489)
          {
            ((void (*)(std::__shared_weak_count *))v487->__on_zero_shared)(v487);
            std::__shared_weak_count::__release_weak(v487);
          }
        }
      }
      v490 = (void *)objc_opt_new();
      objc_msgSend(v490, "setObject:forKeyedSubscript:", v380, CFSTR("BiasScaleGroupData"));
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v824.__r_.__value_.__l.__data_, a5);
      v491 = v832;
      v832 = CFSTR("GOC");

      objc_storeStrong(&v833, v490);
      v492 = v780;
      if ((unint64_t)v780 >= v781)
      {
        v494 = 0x8E38E38E38E38E39 * (((uint64_t)v780 - v779) >> 4);
        if (v494 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v495 = 0x1C71C71C71C71C72 * ((uint64_t)(v781 - v779) >> 4);
        if (v495 <= v494 + 1)
          v495 = v494 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v781 - v779) >> 4) >= 0xE38E38E38E38E3)
          v496 = 0x1C71C71C71C71C7;
        else
          v496 = v495;
        *((_QWORD *)&v837 + 1) = &v781;
        if (v496)
          v496 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v496);
        else
          v497 = 0;
        *(_QWORD *)buf = v496;
        *(_QWORD *)&buf[8] = v496 + 144 * v494;
        *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
        *(_QWORD *)&v837 = v496 + 144 * v497;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v824);
        *(_QWORD *)&buf[16] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v779, buf);
        v493 = v780;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v780, (uint64_t)&v824);
        v493 = v492 + 6;
      }
      v780 = v493;

      if (v830 < 0)
        operator delete(v829);
      *(_QWORD *)buf = &v826;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      *(_QWORD *)buf = v825;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      if (SHIBYTE(v824.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v824.__r_.__value_.__l.__data_);

      v477 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
      if (!__str.__r_.__value_.__l.__size_)
        goto LABEL_817;
      v498 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
      do
        v479 = __ldaxr(v498);
      while (__stlxr(v479 - 1, v498));
LABEL_717:
      if (!v479)
      {
        ((void (*)(std::__shared_weak_count *))v477->__on_zero_shared)(v477);
        std::__shared_weak_count::__release_weak(v477);
      }
      goto LABEL_817;
    }
  }
  if (!*(_DWORD *)(a4 + 112))
  {
    if (!*(_DWORD *)(a4 + 32))
      goto LABEL_817;
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 408))(&v824, a1);
    v411 = *(_OWORD *)&v824.__r_.__value_.__l.__data_;
    if (v824.__r_.__value_.__l.__size_)
    {
      v412 = (unint64_t *)(v824.__r_.__value_.__l.__size_ + 8);
      do
        v413 = __ldaxr(v412);
      while (__stlxr(v413 - 1, v412));
      if (!v413)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v411 + 1) + 16))(*((_QWORD *)&v411 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v411 + 1));
      }
    }
    if (!(_QWORD)v411)
      goto LABEL_817;
    if (a2[121])
    {
      v414 = *(id *)(v779 + 128);
    }
    else
    {
      v414 = (id)objc_opt_new();

    }
    v499 = (void *)objc_opt_new();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*a7 + 16));
    v500 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v499, "setObject:forKeyedSubscript:", v500, CFSTR("BiasCount"));

    v501 = (std::__shared_weak_count *)a3[1];
    v731 = *a3;
    v732 = v501;
    if (v501)
    {
      v502 = (unint64_t *)&v501->__shared_owners_;
      do
        v503 = __ldxr(v502);
      while (__stxr(v503 + 1, v502));
    }
    std::string::basic_string[abi:ne180100]<0>(&v824, "blob_biases_f16");
    v504 = (*(uint64_t (**)(uint64_t, const Espresso::net **, uint64_t, std::string *))(*(_QWORD *)(a1 + 544)
                                                                                              + 88))(a1 + 544, &v731, a1, &v824);
    if (SHIBYTE(v824.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v824.__r_.__value_.__l.__data_);
    v505 = v732;
    if (v732)
    {
      v506 = (unint64_t *)&v732->__shared_owners_;
      do
        v507 = __ldaxr(v506);
      while (__stlxr(v507 - 1, v506));
      if (!v507)
      {
        ((void (*)(std::__shared_weak_count *))v505->__on_zero_shared)(v505);
        std::__shared_weak_count::__release_weak(v505);
      }
    }
    if (v504 < 0)
    {
      v523 = (std::__shared_weak_count *)a3[1];
      v725 = *a3;
      v726 = v523;
      if (v523)
      {
        v524 = (unint64_t *)&v523->__shared_owners_;
        do
          v525 = __ldxr(v524);
        while (__stxr(v525 + 1, v524));
      }
      std::string::basic_string[abi:ne180100]<0>(&v824, "blob_biases");
      v511 = (*(uint64_t (**)(uint64_t, const Espresso::net **, uint64_t, std::string *))(*(_QWORD *)(a1 + 544)
                                                                                                + 88))(a1 + 544, &v725, a1, &v824);
      if (SHIBYTE(v824.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v824.__r_.__value_.__l.__data_);
      v526 = v726;
      if (v726)
      {
        v527 = (unint64_t *)&v726->__shared_owners_;
        do
          v528 = __ldaxr(v527);
        while (__stlxr(v528 - 1, v527));
        if (!v528)
        {
          ((void (*)(std::__shared_weak_count *))v526->__on_zero_shared)(v526);
          std::__shared_weak_count::__release_weak(v526);
        }
      }
      v529 = (std::__shared_weak_count *)a3[1];
      v723 = *a3;
      v724 = v529;
      if (v529)
      {
        v530 = (unint64_t *)&v529->__shared_owners_;
        do
          v531 = __ldxr(v530);
        while (__stxr(v531 + 1, v530));
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "blob_biases");
      (*(void (**)(std::string *__return_ptr, uint64_t, const Espresso::net **, uint64_t, _BYTE *))(*(_QWORD *)(a1 + 544) + 120))(&v824, a1 + 544, &v723, a1, buf);
      v518 = (Espresso::ANECompilerEngine::compiler *)v824.__r_.__value_.__r.__words[0];
      v519 = v824.__r_.__value_.__r.__words[2];
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v520 = v724;
      if (!v724)
        goto LABEL_770;
      v532 = (unint64_t *)&v724->__shared_owners_;
      do
        v522 = __ldaxr(v532);
      while (__stlxr(v522 - 1, v532));
    }
    else
    {
      v508 = (std::__shared_weak_count *)a3[1];
      v729 = *a3;
      v730 = v508;
      if (v508)
      {
        v509 = (unint64_t *)&v508->__shared_owners_;
        do
          v510 = __ldxr(v509);
        while (__stxr(v510 + 1, v509));
      }
      std::string::basic_string[abi:ne180100]<0>(&v824, "blob_biases_f16");
      v511 = (*(uint64_t (**)(uint64_t, const Espresso::net **, uint64_t, std::string *))(*(_QWORD *)(a1 + 544)
                                                                                                + 88))(a1 + 544, &v729, a1, &v824);
      if (SHIBYTE(v824.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v824.__r_.__value_.__l.__data_);
      v512 = v730;
      if (v730)
      {
        v513 = (unint64_t *)&v730->__shared_owners_;
        do
          v514 = __ldaxr(v513);
        while (__stlxr(v514 - 1, v513));
        if (!v514)
        {
          ((void (*)(std::__shared_weak_count *))v512->__on_zero_shared)(v512);
          std::__shared_weak_count::__release_weak(v512);
        }
      }
      v515 = (std::__shared_weak_count *)a3[1];
      v727 = *a3;
      v728 = v515;
      if (v515)
      {
        v516 = (unint64_t *)&v515->__shared_owners_;
        do
          v517 = __ldxr(v516);
        while (__stxr(v517 + 1, v516));
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "blob_biases_f16");
      (*(void (**)(std::string *__return_ptr, uint64_t, const Espresso::net **, uint64_t, _BYTE *))(*(_QWORD *)(a1 + 544) + 120))(&v824, a1 + 544, &v727, a1, buf);
      v518 = (Espresso::ANECompilerEngine::compiler *)v824.__r_.__value_.__r.__words[0];
      v519 = v824.__r_.__value_.__r.__words[2];
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v520 = v728;
      if (!v728)
        goto LABEL_770;
      v521 = (unint64_t *)&v728->__shared_owners_;
      do
        v522 = __ldaxr(v521);
      while (__stlxr(v522 - 1, v521));
    }
    if (!v522)
    {
      ((void (*)(std::__shared_weak_count *))v520->__on_zero_shared)(v520);
      std::__shared_weak_count::__release_weak(v520);
    }
LABEL_770:
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 408))(buf, a1);
    if (!*(_QWORD *)buf)
    {
      v533 = (char *)operator new(0x58uLL);
      *((_QWORD *)v533 + 1) = 0;
      *((_QWORD *)v533 + 2) = 0;
      *(_QWORD *)v533 = &off_1E2DBEC00;
      *((_QWORD *)v533 + 3) = &off_1E2DA1190;
      *(_OWORD *)(v533 + 56) = 0u;
      *(_OWORD *)(v533 + 72) = 0u;
      *((_DWORD *)v533 + 8) = v519 >> 2;
      *((_QWORD *)v533 + 5) = v518;
      v533[48] = 0;
      v534 = *(std::__shared_weak_count **)&buf[8];
      *(_QWORD *)buf = v533 + 24;
      *(_QWORD *)&buf[8] = v533;
      if (v534)
      {
        v535 = (unint64_t *)&v534->__shared_owners_;
        do
          v536 = __ldaxr(v535);
        while (__stlxr(v536 - 1, v535));
        if (!v536)
        {
          ((void (*)(std::__shared_weak_count *))v534->__on_zero_shared)(v534);
          std::__shared_weak_count::__release_weak(v534);
        }
        if (!*(_QWORD *)buf)
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Missing biases");
      }
    }
    v537 = (std::__shared_weak_count *)a3[1];
    v721 = *a3;
    v722 = v537;
    if (v537)
    {
      v538 = (unint64_t *)&v537->__shared_owners_;
      do
        v539 = __ldxr(v538);
      while (__stxr(v539 + 1, v538));
    }
    std::string::basic_string[abi:ne180100]<0>(&v824, "blob_biases_f16");
    v540 = (*(uint64_t (**)(uint64_t, const Espresso::net **, uint64_t, std::string *))(*(_QWORD *)(a1 + 544)
                                                                                              + 88))(a1 + 544, &v721, a1, &v824);
    if (SHIBYTE(v824.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v824.__r_.__value_.__l.__data_);
    v541 = v722;
    if (v722)
    {
      v542 = (unint64_t *)&v722->__shared_owners_;
      do
        v543 = __ldaxr(v542);
      while (__stlxr(v543 - 1, v542));
      if (!v543)
      {
        ((void (*)(std::__shared_weak_count *))v541->__on_zero_shared)(v541);
        std::__shared_weak_count::__release_weak(v541);
      }
    }
    if (v540 < 0)
    {
      v549 = *(int **)(*(_QWORD *)buf + 16);
      v550 = *(int *)(*(_QWORD *)buf + 8);
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v824, 2 * v550, 1, 1, 1);
      v551 = v824.__r_.__value_.__r.__words[0];
      v552 = *(const unsigned __int8 **)(v824.__r_.__value_.__r.__words[0] + 16);
      if ((_DWORD)v550)
      {
        v553 = *(_WORD **)(v824.__r_.__value_.__r.__words[0] + 16);
        do
        {
          v554 = *v549++;
          _S0 = v554;
          __asm { FCVT            H0, S0 }
          *v553++ = _S0;
          --v550;
        }
        while (v550);
      }
      v556 = (std::__shared_weak_count *)v824.__r_.__value_.__l.__size_;
      if (v824.__r_.__value_.__l.__size_)
      {
        v557 = (unint64_t *)(v824.__r_.__value_.__l.__size_ + 8);
        do
          v558 = __ldxr(v557);
        while (__stxr(v558 + 1, v557));
        v552 = *(const unsigned __int8 **)(v551 + 16);
      }
      v511 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v552, *(int *)(v551 + 8));
      if (v556)
      {
        v559 = (unint64_t *)&v556->__shared_owners_;
        do
          v560 = __ldaxr(v559);
        while (__stlxr(v560 - 1, v559));
        if (!v560)
        {
          ((void (*)(std::__shared_weak_count *))v556->__on_zero_shared)(v556);
          std::__shared_weak_count::__release_weak(v556);
        }
      }
      v561 = (void *)MEMORY[0x1E0CB37E8];
      if (v711)
        v562 = 0;
      else
      objc_msgSend(v561, "numberWithUnsignedLong:", v562, v699);
      v628 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v499, "setObject:forKeyedSubscript:", v628, CFSTR("BiasIndex"));

      v629 = (std::__shared_weak_count *)v824.__r_.__value_.__l.__size_;
      if (v824.__r_.__value_.__l.__size_)
      {
        v630 = (unint64_t *)(v824.__r_.__value_.__l.__size_ + 8);
        do
          v631 = __ldaxr(v630);
        while (__stlxr(v631 - 1, v630));
        if (!v631)
        {
          ((void (*)(std::__shared_weak_count *))v629->__on_zero_shared)(v629);
          std::__shared_weak_count::__release_weak(v629);
        }
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((Espresso::ANECompilerEngine *)a2, v518, (const void *)v519));
      v544 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v499, "setObject:forKeyedSubscript:", v544, CFSTR("BiasIndex"));

    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v511, v699);
    v545 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v499, "setObject:forKeyedSubscript:", v545, CFSTR("BiasOffset"));

    objc_msgSend(v499, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
    objc_msgSend(v414, "setObject:forKeyedSubscript:", v499, CFSTR("BiasScaleGroupData"));
    if (!a2[121])
    {
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v824.__r_.__value_.__l.__data_, a5);
      v546 = v832;
      v832 = CFSTR("GOC");

      objc_storeStrong(&v833, v414);
      v547 = v780;
      if ((unint64_t)v780 >= v781)
      {
        v548 = (std::string *)std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::unit_t const&>(&v779, (uint64_t)&v824);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v780, (uint64_t)&v824);
        v548 = v547 + 6;
      }
      v780 = v548;

      if (v830 < 0)
        operator delete(v829);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v826;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v825;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if (SHIBYTE(v824.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v824.__r_.__value_.__l.__data_);
    }
    v563 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v564 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v565 = __ldaxr(v564);
      while (__stlxr(v565 - 1, v564));
      if (!v565)
      {
        ((void (*)(std::__shared_weak_count *))v563->__on_zero_shared)(v563);
        std::__shared_weak_count::__release_weak(v563);
      }
    }

    goto LABEL_817;
  }
  if (a2[121])
    goto LABEL_1028;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 408))(&v736, a1);
  Espresso::ANECompilerEngine::batchnorm_kernel::batchnorm_to_scale_bias(&__str, (uint64_t)&v736, *(_DWORD *)(*a7 + 16), a2[384], 0, 0.0);
  v385 = v737;
  if (v737)
  {
    v386 = (unint64_t *)&v737->__shared_owners_;
    do
      v387 = __ldaxr(v386);
    while (__stlxr(v387 - 1, v386));
    if (!v387)
    {
      ((void (*)(std::__shared_weak_count *))v385->__on_zero_shared)(v385);
      std::__shared_weak_count::__release_weak(v385);
    }
  }
  v388 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  *(_OWORD *)v817 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  if (__str.__r_.__value_.__l.__size_)
  {
    v389 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
    do
      v390 = __ldxr(v389);
    while (__stxr(v390 + 1, v389));
  }
  v822 = (char *)__str.__r_.__value_.__r.__words[2];
  v823 = (std::__shared_weak_count *)v845;
  if ((_QWORD)v845)
  {
    v391 = (unint64_t *)(v845 + 8);
    do
      v392 = __ldxr(v391);
    while (__stxr(v392 + 1, v391));
  }
  v393 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
  v735 = v388;
  if (*((_QWORD *)&v388 + 1))
  {
    v394 = (unint64_t *)(*((_QWORD *)&v388 + 1) + 8);
    do
      v395 = __ldxr(v394);
    while (__stxr(v395 + 1, v394));
  }
  v396 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v393, *(const unsigned __int8 **)(v388 + 16), *(int *)(v388 + 8));
  if (*((_QWORD *)&v388 + 1))
  {
    v397 = (unint64_t *)(*((_QWORD *)&v388 + 1) + 8);
    do
      v398 = __ldaxr(v397);
    while (__stlxr(v398 - 1, v397));
    if (!v398)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v388 + 1) + 16))(*((_QWORD *)&v388 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v388 + 1));
    }
  }
  v399 = (const unsigned __int8 **)v822;
  v400 = v823;
  v733 = v822;
  v734 = v823;
  if (v823)
  {
    v401 = (unint64_t *)&v823->__shared_owners_;
    do
      v402 = __ldxr(v401);
    while (__stxr(v402 + 1, v401));
  }
  v403 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v393, v399[2], *((int *)v399 + 2));
  if (v400)
  {
    v404 = (unint64_t *)&v400->__shared_owners_;
    do
      v405 = __ldaxr(v404);
    while (__stlxr(v405 - 1, v404));
    if (!v405)
    {
      ((void (*)(std::__shared_weak_count *))v400->__on_zero_shared)(v400);
      std::__shared_weak_count::__release_weak(v400);
    }
  }
  v406 = (void *)objc_opt_new();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*a7 + 16));
  v407 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v406, "setObject:forKeyedSubscript:", v407, CFSTR("BiasCount"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v403);
  v408 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v406, "setObject:forKeyedSubscript:", v408, CFSTR("BiasOffset"));

  v409 = (void *)MEMORY[0x1E0CB37E8];
  if (v711)
    v410 = 0;
  else
  objc_msgSend(v409, "numberWithUnsignedLong:", v410, v699);
  v415 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v406, "setObject:forKeyedSubscript:", v415, CFSTR("BiasIndex"));

  objc_msgSend(v406, "setObject:forKeyedSubscript:", CFSTR("Float32"), CFSTR("BiasType"));
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*a7 + 16));
  v416 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v406, "setObject:forKeyedSubscript:", v416, CFSTR("ScaleCount"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v396);
  v417 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v406, "setObject:forKeyedSubscript:", v417, CFSTR("ScaleOffset"));

  v418 = (void *)MEMORY[0x1E0CB37E8];
  if (v711)
    v419 = 0;
  else
  objc_msgSend(v418, "numberWithUnsignedLong:", v419);
  v420 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v406, "setObject:forKeyedSubscript:", v420, CFSTR("ScaleIndex"));

  objc_msgSend(v406, "setObject:forKeyedSubscript:", CFSTR("Float32"), CFSTR("ScaleType"));
  v421 = (void *)objc_opt_new();
  objc_msgSend(v421, "setObject:forKeyedSubscript:", v406, CFSTR("BiasScaleGroupData"));
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v824.__r_.__value_.__l.__data_, a5);
  v422 = v832;
  v832 = CFSTR("GOC");

  objc_storeStrong(&v833, v421);
  v423 = v780;
  if ((unint64_t)v780 >= v781)
  {
    v425 = 0x8E38E38E38E38E39 * (((uint64_t)v780 - v779) >> 4);
    if (v425 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v426 = 0x1C71C71C71C71C72 * ((uint64_t)(v781 - v779) >> 4);
    if (v426 <= v425 + 1)
      v426 = v425 + 1;
    if (0x8E38E38E38E38E39 * ((uint64_t)(v781 - v779) >> 4) >= 0xE38E38E38E38E3)
      v427 = 0x1C71C71C71C71C7;
    else
      v427 = v426;
    *((_QWORD *)&v837 + 1) = &v781;
    if (v427)
      v427 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v427);
    else
      v428 = 0;
    *(_QWORD *)buf = v427;
    *(_QWORD *)&buf[8] = v427 + 144 * v425;
    *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
    *(_QWORD *)&v837 = v427 + 144 * v428;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v824);
    *(_QWORD *)&buf[16] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v779, buf);
    v424 = v780;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v780, (uint64_t)&v824);
    v424 = v423 + 6;
  }
  v780 = v424;

  if (v830 < 0)
    operator delete(v829);
  *(_QWORD *)buf = &v826;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v825;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v824.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v824.__r_.__value_.__l.__data_);

  v468 = v823;
  if (v823)
  {
    v469 = (unint64_t *)&v823->__shared_owners_;
    do
      v470 = __ldaxr(v469);
    while (__stlxr(v470 - 1, v469));
    if (!v470)
    {
      ((void (*)(std::__shared_weak_count *))v468->__on_zero_shared)(v468);
      std::__shared_weak_count::__release_weak(v468);
    }
  }
  v471 = (std::__shared_weak_count *)v817[1];
  if (v817[1])
  {
    v472 = (unint64_t *)((char *)v817[1] + 8);
    do
      v473 = __ldaxr(v472);
    while (__stlxr(v473 - 1, v472));
    if (!v473)
    {
      ((void (*)(std::__shared_weak_count *))v471->__on_zero_shared)(v471);
      std::__shared_weak_count::__release_weak(v471);
    }
  }
  v474 = (std::__shared_weak_count *)v845;
  if ((_QWORD)v845)
  {
    v475 = (unint64_t *)(v845 + 8);
    do
      v476 = __ldaxr(v475);
    while (__stlxr(v476 - 1, v475));
    if (!v476)
    {
      ((void (*)(std::__shared_weak_count *))v474->__on_zero_shared)(v474);
      std::__shared_weak_count::__release_weak(v474);
    }
  }
  v477 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  if (__str.__r_.__value_.__l.__size_)
  {
    v478 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
    do
      v479 = __ldaxr(v478);
    while (__stlxr(v479 - 1, v478));
    goto LABEL_717;
  }
LABEL_817:
  if (*(_DWORD *)(a4 + 24))
  {
    if (a2[121])
    {
      v566 = *(id *)(v779 + 128);
    }
    else
    {
      v566 = (id)objc_opt_new();

    }
    objc_msgSend(v566, "setObject:forKeyedSubscript:", CFSTR("ReLU"), CFSTR("Type"), v699);
    if (a2[121])
      goto LABEL_889;
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v824.__r_.__value_.__l.__data_, a5);
    v567 = v832;
    v832 = CFSTR("Neuron");

    objc_storeStrong(&v833, v566);
    v568 = v780;
    if ((unint64_t)v780 >= v781)
    {
      v570 = 0x8E38E38E38E38E39 * (((uint64_t)v780 - v779) >> 4);
      if (v570 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v571 = 0x1C71C71C71C71C72 * ((uint64_t)(v781 - v779) >> 4);
      if (v571 <= v570 + 1)
        v571 = v570 + 1;
      v572 = (char *)(0x8E38E38E38E38E39 * ((uint64_t)(v781 - v779) >> 4) >= 0xE38E38E38E38E3
                    ? 0x1C71C71C71C71C7
                    : v571);
      *((_QWORD *)&v837 + 1) = &v781;
      if (v572)
        v572 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>((unint64_t)v572);
      else
        v573 = 0;
      *(_QWORD *)buf = v572;
      *(_QWORD *)&buf[8] = &v572[144 * v570];
      *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
      *(_QWORD *)&v837 = &v572[144 * v573];
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v824);
      *(_QWORD *)&buf[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v779, buf);
      v569 = v780;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v780, (uint64_t)&v824);
      v569 = v568 + 6;
    }
    v780 = v569;

    if (v830 < 0)
      operator delete(v829);
    *(_QWORD *)buf = &v826;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(_QWORD *)buf = v825;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if ((SHIBYTE(v824.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_889;
    v579 = (void *)v824.__r_.__value_.__r.__words[0];
    goto LABEL_852;
  }
  if (!*(_DWORD *)(a4 + 28))
  {
    if (*(_DWORD *)(a4 + 60) != -1)
      Espresso::throw_exception_selector<Espresso::not_implemented_error>("Custom activation not implemented");
    goto LABEL_890;
  }
  if (a2[121])
  {
    v566 = *(id *)(v779 + 128);
  }
  else
  {
    v566 = (id)objc_opt_new();

  }
  objc_msgSend(v566, "setObject:forKeyedSubscript:", CFSTR("Tanh"), CFSTR("Type"), v699);
  if (a2[121])
  {
LABEL_889:

LABEL_890:
    (*(void (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)(a1 + 544) + 32))(a1 + 544, a2, &v779);
    goto LABEL_891;
  }
  v574 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v824, "experimental.ane.use_high_precision_activations");
  std::string::basic_string[abi:ne180100]<0>(buf, "1");
  Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)v574 + 472, (uint64_t)&v824, (uint64_t)buf, &__str);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (SHIBYTE(v824.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v824.__r_.__value_.__l.__data_);
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)*a3 + 472);
  v575 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  v577 = v575;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__str.__r_.__value_.__l.__size_ != 1)
      goto LABEL_856;
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) != 1)
      goto LABEL_856;
    p_str = &__str;
  }
  if (p_str->__r_.__value_.__s.__data_[0] == 48)
  {
LABEL_862:
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v824.__r_.__value_.__l.__data_, a5);
    v584 = v832;
    v832 = CFSTR("Neuron");

    objc_storeStrong(&v833, v566);
    v585 = v780;
    if ((unint64_t)v780 >= v781)
    {
      v588 = 0x8E38E38E38E38E39 * (((uint64_t)v780 - v779) >> 4);
      if (v588 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v589 = 0x1C71C71C71C71C72 * ((uint64_t)(v781 - v779) >> 4);
      if (v589 <= v588 + 1)
        v589 = v588 + 1;
      if (0x8E38E38E38E38E39 * ((uint64_t)(v781 - v779) >> 4) >= 0xE38E38E38E38E3)
        v590 = 0x1C71C71C71C71C7;
      else
        v590 = v589;
      *((_QWORD *)&v837 + 1) = &v781;
      if (v590)
        v590 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v590);
      else
        v591 = 0;
      *(_QWORD *)buf = v590;
      *(_QWORD *)&buf[8] = v590 + 144 * v588;
      *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
      *(_QWORD *)&v837 = v590 + 144 * v591;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v824);
      *(_QWORD *)&buf[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v779, buf);
      v586 = v780;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v780, (uint64_t)&v824);
      v586 = v585 + 6;
    }
    v780 = v586;

    if (v830 < 0)
      operator delete(v829);
    *(_QWORD *)buf = &v826;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(_QWORD *)buf = v825;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (SHIBYTE(v824.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v824.__r_.__value_.__l.__data_);

    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_889;
    v579 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_852:
    operator delete(v579);
    goto LABEL_889;
  }
LABEL_856:
  if (!Espresso::ANECompilerEngine::is_mix(v575, v576))
    goto LABEL_862;
  v580 = (__int128 *)&v780[-6];
  std::string::append(v780 - 6, "_pre_tanh");
  v581 = a1 + 544;
  (*(void (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)(a1 + 544) + 32))(a1 + 544, a2, &v779);
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&v824, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)a5);
  v582 = v826;
  for (k = (char *)v827; k != v582; k -= 24)
  {
    if (*(k - 1) < 0)
      operator delete(*((void **)k - 3));
  }
  v827 = (std::string *)v582;
  if ((unint64_t)v582 >= v828)
  {
    v587 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v826, (uint64_t)v580);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)&v826, v580);
    v587 = (std::string *)(v582 + 24);
  }
  v827 = v587;
  (*(void (**)(uint64_t, _BYTE *, std::string *))(*(_QWORD *)v581 + 48))(v581, a2, &v824);

  if (v830 < 0)
    operator delete(v829);
  *(_QWORD *)buf = &v826;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v825;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v824.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v824.__r_.__value_.__l.__data_);

  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);

LABEL_891:
  v824.__r_.__value_.__r.__words[0] = (std::string::size_type)&v779;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v824);

  v592 = (std::__shared_weak_count *)*((_QWORD *)&v806 + 1);
  if (*((_QWORD *)&v806 + 1))
  {
    v593 = (unint64_t *)(*((_QWORD *)&v806 + 1) + 8);
    do
      v594 = __ldaxr(v593);
    while (__stlxr(v594 - 1, v593));
    if (!v594)
    {
      ((void (*)(std::__shared_weak_count *))v592->__on_zero_shared)(v592);
      std::__shared_weak_count::__release_weak(v592);
    }
  }
  v595 = (std::__shared_weak_count *)*((_QWORD *)&v805 + 1);
  if (*((_QWORD *)&v805 + 1))
  {
    v596 = (unint64_t *)(*((_QWORD *)&v805 + 1) + 8);
    do
      v597 = __ldaxr(v596);
    while (__stlxr(v597 - 1, v596));
    if (!v597)
    {
      ((void (*)(std::__shared_weak_count *))v595->__on_zero_shared)(v595);
      std::__shared_weak_count::__release_weak(v595);
    }
  }
  v598 = (std::__shared_weak_count *)*((_QWORD *)&v804 + 1);
  if (*((_QWORD *)&v804 + 1))
  {
    v599 = (unint64_t *)(*((_QWORD *)&v804 + 1) + 8);
    do
      v600 = __ldaxr(v599);
    while (__stlxr(v600 - 1, v599));
    if (!v600)
    {
      ((void (*)(std::__shared_weak_count *))v598->__on_zero_shared)(v598);
      std::__shared_weak_count::__release_weak(v598);
    }
  }
  v601 = (std::__shared_weak_count *)*((_QWORD *)&v803 + 1);
  if (*((_QWORD *)&v803 + 1))
  {
    v602 = (unint64_t *)(*((_QWORD *)&v803 + 1) + 8);
    do
      v603 = __ldaxr(v602);
    while (__stlxr(v603 - 1, v602));
    if (!v603)
    {
      ((void (*)(std::__shared_weak_count *))v601->__on_zero_shared)(v601);
      std::__shared_weak_count::__release_weak(v601);
    }
  }
  v604 = (std::__shared_weak_count *)*((_QWORD *)&v802 + 1);
  if (*((_QWORD *)&v802 + 1))
  {
    v605 = (unint64_t *)(*((_QWORD *)&v802 + 1) + 8);
    do
      v606 = __ldaxr(v605);
    while (__stlxr(v606 - 1, v605));
    if (!v606)
    {
      ((void (*)(std::__shared_weak_count *))v604->__on_zero_shared)(v604);
      std::__shared_weak_count::__release_weak(v604);
    }
  }
  v607 = (std::__shared_weak_count *)*((_QWORD *)&v801 + 1);
  if (*((_QWORD *)&v801 + 1))
  {
    v608 = (unint64_t *)(*((_QWORD *)&v801 + 1) + 8);
    do
      v609 = __ldaxr(v608);
    while (__stlxr(v609 - 1, v608));
    if (!v609)
    {
      ((void (*)(std::__shared_weak_count *))v607->__on_zero_shared)(v607);
      std::__shared_weak_count::__release_weak(v607);
    }
  }
  v610 = (std::__shared_weak_count *)*((_QWORD *)&v800 + 1);
  if (*((_QWORD *)&v800 + 1))
  {
    v611 = (unint64_t *)(*((_QWORD *)&v800 + 1) + 8);
    do
      v612 = __ldaxr(v611);
    while (__stlxr(v612 - 1, v611));
    if (!v612)
    {
      ((void (*)(std::__shared_weak_count *))v610->__on_zero_shared)(v610);
      std::__shared_weak_count::__release_weak(v610);
    }
  }
  v613 = (std::__shared_weak_count *)*((_QWORD *)&v799 + 1);
  if (*((_QWORD *)&v799 + 1))
  {
    v614 = (unint64_t *)(*((_QWORD *)&v799 + 1) + 8);
    do
      v615 = __ldaxr(v614);
    while (__stlxr(v615 - 1, v614));
    if (!v615)
    {
      ((void (*)(std::__shared_weak_count *))v613->__on_zero_shared)(v613);
      std::__shared_weak_count::__release_weak(v613);
    }
  }
  v616 = (std::__shared_weak_count *)*((_QWORD *)&v798 + 1);
  if (*((_QWORD *)&v798 + 1))
  {
    v617 = (unint64_t *)(*((_QWORD *)&v798 + 1) + 8);
    do
      v618 = __ldaxr(v617);
    while (__stlxr(v618 - 1, v617));
    if (!v618)
    {
      ((void (*)(std::__shared_weak_count *))v616->__on_zero_shared)(v616);
      std::__shared_weak_count::__release_weak(v616);
    }
  }
  v619 = (std::__shared_weak_count *)*((_QWORD *)&v797 + 1);
  if (*((_QWORD *)&v797 + 1))
  {
    v620 = (unint64_t *)(*((_QWORD *)&v797 + 1) + 8);
    do
      v621 = __ldaxr(v620);
    while (__stlxr(v621 - 1, v620));
    if (!v621)
    {
      ((void (*)(std::__shared_weak_count *))v619->__on_zero_shared)(v619);
      std::__shared_weak_count::__release_weak(v619);
    }
  }
  v622 = (std::__shared_weak_count *)*((_QWORD *)&v796 + 1);
  if (*((_QWORD *)&v796 + 1))
  {
    v623 = (unint64_t *)(*((_QWORD *)&v796 + 1) + 8);
    do
      v624 = __ldaxr(v623);
    while (__stlxr(v624 - 1, v623));
    if (!v624)
    {
      ((void (*)(std::__shared_weak_count *))v622->__on_zero_shared)(v622);
      std::__shared_weak_count::__release_weak(v622);
    }
  }
  v625 = (std::__shared_weak_count *)*((_QWORD *)&v795 + 1);
  if (*((_QWORD *)&v795 + 1))
  {
    v626 = (unint64_t *)(*((_QWORD *)&v795 + 1) + 8);
    do
      v627 = __ldaxr(v626);
    while (__stlxr(v627 - 1, v626));
    if (!v627)
    {
      ((void (*)(std::__shared_weak_count *))v625->__on_zero_shared)(v625);
      std::__shared_weak_count::__release_weak(v625);
    }
  }
}

void sub_19173B668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;
  void *v23;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x5C0]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x520]);

  STACK[0x478] = (unint64_t)&STACK[0x2B0];
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x478]);

  Espresso::ANECompilerEngine::final_anec_weights_t::~final_anec_weights_t((Espresso::ANECompilerEngine::final_anec_weights_t *)&STACK[0x3B0]);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(char *a1, Espresso::ANECompilerEngine *a2, _QWORD *a3, Espresso::quantized_weights_helper **a4, void *a5, uint64_t *a6)
{
  void *v10;
  void *v11;
  void *v12;
  int v13;
  Espresso::quantized_weights_helper *v14;
  void *v15;
  void *v16;
  void *v17;
  Espresso::ANECompilerEngine *v18;
  Espresso::ANECompilerEngine *v19;
  NSString *v20;
  char is_mix;
  Espresso::quantized_weights_helper *v22;
  NSString *v23;
  int v24;
  NSString *v25;
  int v26;
  char *v27;
  uint64_t *v28;
  unsigned __int8 *v29;
  _QWORD *v30;
  uint64_t v31;
  NSString *v32;
  int v33;
  NSString *v34;
  int v35;
  char *v36;
  uint64_t *v37;
  unsigned __int8 *v38;
  NSString *v39;
  int v40;
  NSString *v41;
  int v42;
  char *v43;
  uint64_t *v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  _BOOL4 v51;
  uint64_t v52;
  std::string *v53;
  _BOOL4 v54;
  uint64_t v55;
  std::string *v56;
  _BOOL4 v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  BOOL is_qbias_zero;
  unint64_t *v62;
  unint64_t v63;
  const float **v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _BOOL4 v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t weights_file_index;
  Espresso::ANECompilerEngine::ane_kernel *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  Espresso::ANECompilerEngine *v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  Espresso::ANECompilerEngine::compiler::build_state_t *v99;
  const unsigned __int8 **v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  void *v104;
  void *v105;
  uint64_t v106;
  Espresso::ANECompilerEngine::ane_kernel *v107;
  unint64_t *v108;
  unint64_t v109;
  void *v110;
  void *v111;
  void *v112;
  Espresso::ANECompilerEngine::ane_kernel *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116[2];
  _QWORD v117[4];
  uint64_t v118[2];
  void *__p;
  uint64_t v120;
  void *v121;
  std::__shared_weak_count *v122;
  uint64_t v123;
  uint64_t v124;
  void *v125[2];
  char v126;
  std::string v127;
  std::string v128;
  _QWORD v129[2];
  uint64_t v130[2];
  uint64_t v131;
  uint64_t v132;
  _QWORD v133[4];
  uint64_t *v134[5];
  char v135;
  id v136;
  Espresso::ANECompilerEngine *v137;
  char *v138;
  _QWORD v139[3];
  _QWORD *v140;
  _QWORD v141[3];
  _QWORD *v142;
  _QWORD v143[3];
  _QWORD *v144;
  uint64_t v145;

  v145 = *MEMORY[0x1E0C80C00];
  v137 = a2;
  v138 = a1;
  v136 = a5;
  v135 = *((_BYTE *)a2 + 552);
  v134[0] = (uint64_t *)&v138;
  v134[1] = a6;
  v134[2] = (uint64_t *)&v137;
  v134[3] = (uint64_t *)&v136;
  v134[4] = (uint64_t *)&v135;
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("espresso.anecompiler.always_bloat"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "BOOLValue");

  if (v13)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "<rdar://problem/39402422> 257a: \"Illegal cog size\" or \"NE kernel blob too large \" assertion when using large convolutions with int8 weights");
    Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v134, (uint64_t *)&__p);
    goto LABEL_11;
  }
  v14 = *a4;
  if (*((_QWORD *)*a4 + 4) || *((_QWORD *)v14 + 6) || *((_QWORD *)v14 + 8))
  {
    if (v138)
    {
      if (v15)
      {
        v16 = v15;
        if (*(__int16 *)((*(uint64_t (**)(void *))(*(_QWORD *)v15 + 384))(v15) + 96) > 1
          || *(__int16 *)((*(uint64_t (**)(void *))(*(_QWORD *)v16 + 384))(v16) + 98) >= 2)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "Dilated + LUT");
          Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v134, (uint64_t *)&__p);
          goto LABEL_11;
        }
      }
    }
    v18 = v137;
    Espresso::ANECompilerEngine::ane_arch_allow_network_override(*a3 + 472);
    v19 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
    is_mix = Espresso::ANECompilerEngine::is_mix(v19, v20);
    v22 = *a4;
    if (*((_QWORD *)*a4 + 4))
    {
      __p = (void *)Espresso::ANECompilerEngine::sparsity_options::read_sparse_lut_config(*a3 + 472, (Espresso::ANECompilerEngine::sparsity_options *)v11);
      v120 = (uint64_t)v23;
      v24 = Espresso::ANECompilerEngine::is_mix(v19, v23);
      v26 = Espresso::ANECompilerEngine::is_mix(v19, v25);
      if (v24)
        v27 = (char *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::dense_fp16_palettes;
      else
        v27 = (char *)&Espresso::ANECompilerEngine::mix_limits::dense_fp16_palettes;
      v28 = (uint64_t *)*a4;
      v143[0] = &off_1E2DB1710;
      v143[1] = v18;
      v144 = v143;
      if (v26)
        v29 = (unsigned __int8 *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::sparse_fp16_palettes;
      else
        v29 = (unsigned __int8 *)&Espresso::ANECompilerEngine::mix_limits::sparse_fp16_palettes;
      Espresso::ANECompilerEngine::add_lut_to_f16_weights(v28, v136, (uint64_t)v143, v27, v29, is_mix, (uint64_t)&__p);
      v30 = v144;
      if (v144 == v143)
      {
        v31 = 4;
        v30 = v143;
        goto LABEL_42;
      }
    }
    else if (*((_QWORD *)v22 + 8))
    {
      __p = (void *)Espresso::ANECompilerEngine::sparsity_options::read_sparse_lut_config(*a3 + 472, (Espresso::ANECompilerEngine::sparsity_options *)v11);
      v120 = (uint64_t)v32;
      v33 = Espresso::ANECompilerEngine::is_mix(v19, v32);
      v35 = Espresso::ANECompilerEngine::is_mix(v19, v34);
      if (v33)
        v36 = (char *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::dense_uint8_palettes;
      else
        v36 = (char *)&Espresso::ANECompilerEngine::mix_limits::dense_uint8_palettes;
      v37 = (uint64_t *)*a4;
      v141[0] = &off_1E2DB1710;
      v141[1] = v18;
      v142 = v141;
      if (v35)
        v38 = (unsigned __int8 *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::sparse_uint8_palettes;
      else
        v38 = (unsigned __int8 *)&Espresso::ANECompilerEngine::mix_limits::sparse_uint8_palettes;
      Espresso::ANECompilerEngine::add_lut_to_uint8_weights(v37, v136, (uint64_t)v141, v36, v38, is_mix, (uint64_t)&__p);
      v30 = v142;
      if (v142 == v141)
      {
        v31 = 4;
        v30 = v141;
        goto LABEL_42;
      }
    }
    else
    {
      if (!*((_QWORD *)v22 + 6))
        Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Unknown lookup table type.");
      __p = (void *)Espresso::ANECompilerEngine::sparsity_options::read_sparse_lut_config(*a3 + 472, (Espresso::ANECompilerEngine::sparsity_options *)v11);
      v120 = (uint64_t)v39;
      v40 = Espresso::ANECompilerEngine::is_mix(v19, v39);
      v42 = Espresso::ANECompilerEngine::is_mix(v19, v41);
      if (v40)
        v43 = (char *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::dense_int8_palettes;
      else
        v43 = (char *)&Espresso::ANECompilerEngine::mix_limits::dense_int8_palettes;
      v44 = (uint64_t *)*a4;
      v139[0] = &off_1E2DB1710;
      v139[1] = v18;
      v140 = v139;
      if (v42)
        v45 = (unsigned __int8 *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::sparse_int8_palettes;
      else
        v45 = (unsigned __int8 *)&Espresso::ANECompilerEngine::mix_limits::sparse_int8_palettes;
      Espresso::ANECompilerEngine::add_lut_to_int8_weights(v44, v136, (uint64_t)v139, v43, v45, is_mix, (uint64_t)&__p);
      v30 = v140;
      if (v140 == v139)
      {
        v31 = 4;
        v30 = v139;
        goto LABEL_42;
      }
    }
    if (!v30)
    {
LABEL_43:

      goto LABEL_44;
    }
    v31 = 5;
LABEL_42:
    (*(void (**)(void))(*v30 + 8 * v31))();
    goto LABEL_43;
  }
  if (*((_DWORD *)v14 + 39) != 8)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Not 8 bits");
    Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v134, (uint64_t *)&__p);
LABEL_11:
    if (SHIBYTE(v121) < 0)
    {
      v17 = __p;
LABEL_13:
      operator delete(v17);
      goto LABEL_44;
    }
    goto LABEL_44;
  }
  if (*((_BYTE *)v14 + 164))
  {
    if (Espresso::quantized_weights_helper::is_quantization_linear_signed_symmetric(v14))
    {
      v46 = *((_QWORD *)v138 + 55);
      v47 = *(_QWORD *)(v46 + 80);
      v48 = *(std::__shared_weak_count **)(v46 + 88);
      v133[2] = v47;
      v133[3] = v48;
      if (v48)
      {
        p_shared_owners = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldxr(p_shared_owners);
        while (__stxr(v50 + 1, p_shared_owners));
      }
      v51 = 0;
      if (v47)
      {
        LODWORD(__p) = 0;
        vDSP_minmgv(*(const float **)(v47 + 16), 1, (float *)&__p, *(int *)(v47 + 8));
        if (*(float *)&__p < 0.000061035)
          v51 = 1;
      }
      if (v48)
      {
        v78 = (unint64_t *)&v48->__shared_owners_;
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      if (!v51)
      {
        v80 = v138;
        v81 = a3[1];
        v133[0] = *a3;
        v133[1] = v81;
        if (v81)
        {
          v82 = (unint64_t *)(v81 + 8);
          do
            v83 = __ldxr(v82);
          while (__stxr(v83 + 1, v82));
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "W_S8");
        v84 = (*(uint64_t (**)(char *, _QWORD *, char *, void **))(*((_QWORD *)v80 + 68) + 88))(v80 + 544, v133, v80, &__p);
        if (SHIBYTE(v121) < 0)
          operator delete(__p);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v133);
        if ((v84 & 0x80000000) != 0)
        {
          v91 = *(_QWORD *)*a4;
          v92 = *((_QWORD *)*a4 + 1);
          __p = (void *)v91;
          v120 = v92;
          if (v92)
          {
            v93 = (unint64_t *)(v92 + 8);
            do
              v94 = __ldxr(v93);
            while (__stxr(v94 + 1, v93));
            v95 = v137;
            v132 = v92;
            do
              v96 = __ldxr(v93);
            while (__stxr(v96 + 1, v93));
          }
          else
          {
            v95 = v137;
            v132 = 0;
          }
          v131 = v91;
          v84 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine *)((char *)v95 + 128), *(const unsigned __int8 **)(v91 + 16), *(int *)(v91 + 8));
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v131);
          if (v135)
            weights_file_index = 0;
          else
          if (v138)
            v107 = (Espresso::ANECompilerEngine::ane_kernel *)(v138 + 544);
          else
            v107 = 0;
          v130[0] = (uint64_t)__p;
          v130[1] = v120;
          if (v120)
          {
            v108 = (unint64_t *)(v120 + 8);
            do
              v109 = __ldxr(v108);
            while (__stxr(v109 + 1, v108));
          }
          Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)a6, v107, v130);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v130);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
        }
        else
        {
          v85 = v138;
          v86 = a3[1];
          v129[0] = *a3;
          v129[1] = v86;
          if (v86)
          {
            v87 = (unint64_t *)(v86 + 8);
            do
              v88 = __ldxr(v87);
            while (__stxr(v88 + 1, v87));
          }
          std::string::basic_string[abi:ne180100]<0>(&v128, "W_S8");
          (*(void (**)(void **__return_ptr, char *, _QWORD *, char *, std::string *))(*((_QWORD *)v85 + 68)
                                                                                               + 120))(&__p, v85 + 544, v129, v85, &v128);
          if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v128.__r_.__value_.__l.__data_);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v129);
          weights_file_index = Espresso::ANECompilerEngine::get_primary_weights_file_index(v137, (Espresso::ANECompilerEngine::compiler *)__p, v121);
          if (v138)
            v90 = (Espresso::ANECompilerEngine::ane_kernel *)(v138 + 544);
          else
            v90 = 0;
          Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)a6, v90, __p);
        }
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v84);
        v110 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v136, "setObject:forKeyedSubscript:", v110, CFSTR("KernelOffset"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", weights_file_index);
        v111 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v136, "setObject:forKeyedSubscript:", v111, CFSTR("KernelIndex"));

        objc_msgSend(v136, "setObject:forKeyedSubscript:", CFSTR("Int8"), CFSTR("KernelType"));
        goto LABEL_44;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "Signed / Overflowing");
      Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v134, (uint64_t *)&__p);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Signed / Not symmetric");
      Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v134, (uint64_t *)&__p);
    }
    goto LABEL_11;
  }
  v52 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "early_arch_conv_w_int8_no_bloat");
  std::string::basic_string[abi:ne180100]<0>(&v127, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>(v52 + 472, (uint64_t)&__p, (uint64_t)&v127, &v128);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v127.__r_.__value_.__l.__data_);
  if (SHIBYTE(v121) < 0)
    operator delete(__p);
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v128.__r_.__value_.__l.__size_ == 1)
    {
      v53 = (std::string *)v128.__r_.__value_.__r.__words[0];
      goto LABEL_66;
    }
  }
  else if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) == 1)
  {
    v53 = &v128;
LABEL_66:
    v54 = v53->__r_.__value_.__s.__data_[0] == 49;
    goto LABEL_68;
  }
  v54 = 0;
LABEL_68:
  v55 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "early_arch_conv_w_int8_no_bloat_v2");
  std::string::basic_string[abi:ne180100]<0>(v125, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>(v55 + 472, (uint64_t)&__p, (uint64_t)v125, &v127);
  if (v126 < 0)
    operator delete(v125[0]);
  if (SHIBYTE(v121) < 0)
    operator delete(__p);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v127.__r_.__value_.__l.__size_ == 1)
    {
      v56 = (std::string *)v127.__r_.__value_.__r.__words[0];
      goto LABEL_77;
    }
LABEL_78:
    v57 = 0;
    goto LABEL_79;
  }
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) != 1)
    goto LABEL_78;
  v56 = &v127;
LABEL_77:
  v57 = v56->__r_.__value_.__s.__data_[0] == 49;
LABEL_79:
  Espresso::quantized_weights_helper::cast_uint8_linear_to_int8_linear(*a4, v54, v57, &__p);
  if (!__p)
    goto LABEL_95;
  v58 = (std::__shared_weak_count *)v124;
  v118[0] = v123;
  v118[1] = v124;
  if (v124)
  {
    v59 = (unint64_t *)(v124 + 8);
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
  }
  is_qbias_zero = Espresso::quantized_weights_helper::is_qbias_zero(v118);
  if (v58)
  {
    v62 = (unint64_t *)&v58->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (!is_qbias_zero)
  {
LABEL_95:
    std::string::basic_string[abi:ne180100]<0>(v125, "Unsigned / Not symmetric");
    Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v134, (uint64_t *)v125);
LABEL_96:
    if (v126 < 0)
      operator delete(v125[0]);
    v69 = (std::__shared_weak_count *)v124;
    if (v124)
    {
      v70 = (unint64_t *)(v124 + 8);
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    v72 = v122;
    if (v122)
    {
      v73 = (unint64_t *)&v122->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
    v75 = (std::__shared_weak_count *)v120;
    if (v120)
    {
      v76 = (unint64_t *)(v120 + 8);
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    goto LABEL_175;
  }
  v64 = (const float **)v121;
  v65 = v122;
  v117[2] = v121;
  v117[3] = v122;
  if (v122)
  {
    v66 = (unint64_t *)&v122->__shared_owners_;
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 1, v66));
  }
  v68 = 0;
  if (v64)
  {
    LODWORD(v125[0]) = 0;
    vDSP_minmgv(v64[2], 1, (float *)v125, *((int *)v64 + 2));
    if (*(float *)v125 < 0.000061035)
      v68 = 1;
  }
  if (v65)
  {
    v97 = (unint64_t *)&v65->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (v68)
  {
    std::string::basic_string[abi:ne180100]<0>(v125, "Unsigned / Overflowing");
    Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v134, (uint64_t *)v125);
    goto LABEL_96;
  }
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)v138 + 55) + 80), (uint64_t)v121, (uint64_t)v122);
  v99 = (Espresso::ANECompilerEngine *)((char *)v137 + 128);
  v100 = (const unsigned __int8 **)__p;
  v117[0] = __p;
  v117[1] = v120;
  if (v120)
  {
    v101 = (unint64_t *)(v120 + 8);
    do
      v102 = __ldxr(v101);
    while (__stxr(v102 + 1, v101));
  }
  v103 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v99, v100[2], *((int *)v100 + 2));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v117);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v103);
  v104 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v136, "setObject:forKeyedSubscript:", v104, CFSTR("KernelOffset"));

  objc_msgSend(v136, "setObject:forKeyedSubscript:", CFSTR("Int8"), CFSTR("KernelType"));
  v105 = (void *)MEMORY[0x1E0CB37E8];
  if (v135)
    v106 = 0;
  else
  objc_msgSend(v105, "numberWithUnsignedLong:", v106);
  v112 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v136, "setObject:forKeyedSubscript:", v112, CFSTR("KernelIndex"));

  if (v138)
    v113 = (Espresso::ANECompilerEngine::ane_kernel *)(v138 + 544);
  else
    v113 = 0;
  v116[0] = (uint64_t)__p;
  v116[1] = v120;
  if (v120)
  {
    v114 = (unint64_t *)(v120 + 8);
    do
      v115 = __ldxr(v114);
    while (__stxr(v115 + 1, v114));
  }
  Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)a6, v113, v116);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v116);
  Espresso::quantized_weights_helper::linear_quantization_data::~linear_quantization_data((Espresso::quantized_weights_helper::linear_quantization_data *)&__p);
LABEL_175:
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v127.__r_.__value_.__l.__data_);
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
  {
    v17 = (void *)v128.__r_.__value_.__r.__words[0];
    goto LABEL_13;
  }
LABEL_44:

}

void sub_19173CE30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,uint64_t a46,char a47,uint64_t a48,char a49,uint64_t a50,char a51,uint64_t a52,char a53)
{
  void *v53;
  uint64_t v54;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);

  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  Espresso::ANECompilerEngine::final_anec_weights_t *v7;
  uint64_t v8;
  Espresso::ANECompilerEngine::ane_kernel *v9;
  unint64_t *v10;
  unint64_t v11;
  Espresso *v12;
  const char *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  NSObject *v16;
  Espresso::ANECompilerEngine::compiler::build_state_t *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  void *v24;
  uint64_t weights_file_index;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  _BYTE buf[22];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = **a1;
  if (v4)
    Espresso::quantized_weights_helper::dequantize_to_float16_2d(*(Espresso::quantized_weights_helper **)(v4 + 440), buf);
  else
    Espresso::quantized_weights_helper::dequantize_to_float16_4d(MEMORY[0x1B8], buf);
  v6 = *(_QWORD *)buf;
  v5 = *(std::__shared_weak_count **)&buf[8];
  v36 = *(_QWORD *)buf;
  v37 = *(std::__shared_weak_count **)&buf[8];
  v7 = (Espresso::ANECompilerEngine::final_anec_weights_t *)a1[1];
  v8 = **a1;
  if (v8)
    v9 = (Espresso::ANECompilerEngine::ane_kernel *)(v8 + 544);
  else
    v9 = 0;
  v34 = *(_QWORD *)buf;
  v35 = *(_QWORD *)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v10 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v7 + 20, v6, (uint64_t)v5);
  Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16(v7, v9, *(void **)(v6 + 16));
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  Espresso::espresso_os_log_subsystem(v12, v13);
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) >= 0)
      v32 = a2;
    else
      v32 = (uint64_t *)*a2;
    v33 = *(int *)(v36 + 8);
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v32;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v33;
    _os_log_debug_impl(&dword_190DAF000, v16, OS_LOG_TYPE_DEBUG, "[ANEC/handle_quantized_weights] Bloating (%s) W: %zu", buf, 0x16u);
  }

  v17 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(*a1[2] + 128);
  if (v37)
  {
    v18 = (unint64_t *)&v37->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v17, *(const unsigned __int8 **)(v36 + 16), *(int *)(v36 + 8));
  if (v37)
  {
    v21 = (unint64_t *)&v37->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v20, v36, v37, v34, v35);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)*a1[3], "setObject:forKeyedSubscript:", v23, CFSTR("KernelOffset"));

  objc_msgSend((id)*a1[3], "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("KernelType"));
  v24 = (void *)MEMORY[0x1E0CB37E8];
  if (*(_BYTE *)a1[4])
    weights_file_index = 0;
  else
  objc_msgSend(v24, "numberWithUnsignedLong:", weights_file_index);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)*a1[3], "setObject:forKeyedSubscript:", v26, CFSTR("KernelIndex"));

  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)(**a1 + 440) + 80, (__int128 *)buf);
  v27 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v28 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v37)
  {
    v30 = (unint64_t *)&v37->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
}

void sub_19173D42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB1710;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB1710;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::operator()(uint64_t a1, const unsigned __int8 **a2, size_t *a3)
{
  unsigned int v4;

  v4 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(*(_QWORD *)(a1 + 8) + 128), *a2, *a3);
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 8) + 552))
  return v4;
}

uint64_t std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso17ANECompilerEngine24handle_quantized_weightsIPNS0_24mix_inner_product_kernelEEEvT_PNS0_8compilerENSt3__110shared_ptrINS_3netEEENS8_INS_24quantized_weights_helperEEEP19NSMutableDictionaryRNS0_20final_anec_weights_tEEUlPKhmE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::target_type()
{
}

void Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel::~mix_non_maximum_suppression_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 42);
  Espresso::generic_non_maximum_suppression_kernel::~generic_non_maximum_suppression_kernel((Espresso::generic_non_maximum_suppression_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 42);
  Espresso::generic_non_maximum_suppression_kernel::~generic_non_maximum_suppression_kernel((Espresso::generic_non_maximum_suppression_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 336), a3, a4, a5);
}

uint64_t Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, Espresso::ANECompilerEngine *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  Espresso::base_kernel::validate_for_engine_args_t *v8;
  Espresso::ANECompilerEngine *v9;
  NSString *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  float v29;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v57;
  Espresso::base_kernel::validate_for_engine_args_t *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  __int128 *v62;
  __int128 v63;
  __int128 v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  unint64_t v74;
  __int128 v75;
  void *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  Espresso::base_kernel::validate_for_engine_args_t *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  __int128 *v85;
  __int128 v86;
  __int128 v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  _OWORD *v96;
  unint64_t v97;
  __int128 v98;
  void *v99;
  unint64_t *v100;
  unint64_t v101;
  Espresso::net *v102;
  Espresso::net *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  unint64_t *v109;
  unint64_t v110;
  _QWORD *v111;
  __int128 v112;
  const void *v113;
  std::string::size_type *v114;
  std::string::size_type *v115;
  __int128 v116;
  std::string::size_type v117;
  unsigned int v118;
  __CFString *v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unsigned int v123;
  __CFString *v124;
  int v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  int v129;
  uint64_t v130;
  unint64_t v131;
  const __CFString *v132;
  uint64_t v133;
  unint64_t v134;
  Espresso::base_kernel::validate_for_engine_args_t *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  __int128 v141;
  unint64_t *v142;
  unint64_t v143;
  uint64_t v144;
  unsigned int v145;
  int64x2_t *v146;
  unint64_t *v147;
  unint64_t v148;
  int v149;
  __CFString *v150;
  __int128 v151;
  uint64_t *v152;
  uint64_t *v153;
  __CFString *v154;
  int v155;
  void *v156;
  int32x4_t v157;
  int v158;
  int64x2_t *v159;
  unint64_t *v160;
  unint64_t v161;
  std::string *v162;
  uint64_t **v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  int v173;
  int64x2_t *v174;
  unint64_t *v175;
  unint64_t v176;
  int64x2_t **v177;
  int64x2_t *v178;
  unint64_t *v179;
  unint64_t v180;
  int64x2_t *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  int64x2_t *v193;
  unint64_t *v194;
  unint64_t v195;
  int64x2_t *v196;
  unint64_t *v197;
  unint64_t v198;
  std::string *v199;
  uint64_t **v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  __int128 v216;
  unint64_t v217;
  int64_t v218;
  uint64_t v219;
  __int128 v220;
  unint64_t v221;
  unint64_t v222;
  int64x2_t *v223;
  std::__shared_weak_count *v224;
  std::string v225;
  char v226;
  std::string v227;
  int64x2_t *v228[2];
  void *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  std::string v233[2];
  int64x2_t *v234[2];
  _OWORD v235[2];
  uint64_t v236;
  void *v237;
  void *v238;
  uint64_t v239;
  Espresso::base_kernel::validate_for_engine_args_t *v240;
  std::__shared_weak_count *v241;
  __int128 v242;
  __int128 v243;
  int64x2_t *v244;
  std::__shared_weak_count *v245;
  _BYTE __p[32];
  _BYTE v247[32];
  std::__shared_weak_count *v248;
  int64x2_t *v249[2];
  uint64_t v250;
  __n128 v251;
  _BYTE v252[32];
  __int128 v253;
  int64x2_t *v254[2];
  __n128 v255;
  _BYTE v256[32];
  __int128 v257;
  int64x2_t *v258;
  std::__shared_weak_count *v259;
  void *v260[2];
  void *v261;
  std::string::size_type *v262;
  _OWORD v263[2];
  uint64_t v264;
  void *v265;
  void *v266;
  uint64_t v267;
  Espresso::net *v268[2];
  _DWORD v269[3];
  int v270;
  int v271;
  _OWORD v272[2];
  uint64_t v273;
  void *v274;
  void *v275;
  uint64_t v276;
  Espresso::net *v277[2];
  _DWORD v278[3];
  int v279;
  int v280;
  int64x2_t *v281[2];
  char v282[8];
  void *v283;
  char v284;
  _OWORD v285[2];
  uint64_t v286;
  void *v287;
  void *v288;
  uint64_t v289;
  Espresso::base_kernel::validate_for_engine_args_t *v290;
  std::__shared_weak_count *v291;
  void *v292;
  char *v293;
  unint64_t v294;
  _OWORD v295[2];
  uint64_t v296;
  void *v297;
  void *v298;
  uint64_t v299;
  Espresso::base_kernel::validate_for_engine_args_t *v300;
  std::__shared_weak_count *v301;
  void *v302;
  char *v303;
  unint64_t v304;
  int64x2_t *v305[2];
  int64x2_t *v306[2];
  int64x2_t *v307;
  std::__shared_weak_count *v308;
  int64x2_t *v309;
  std::__shared_weak_count *v310;
  int64x2_t *v311;
  std::__shared_weak_count *v312;
  int64x2_t *v313;
  std::__shared_weak_count *v314;
  int64x2_t *v315;
  std::__shared_weak_count *v316;
  Espresso::base_kernel::validate_for_engine_args_t *v317;
  std::__shared_weak_count *v318;
  void **v319;
  _BYTE v320[48];
  __int128 v321;
  __n128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  uint64_t v326;

  v326 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)a3 + 6);
  v318 = 0;
  v317 = 0;
  v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7 && (v318 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = *(Espresso::base_kernel::validate_for_engine_args_t **)(v6 + 72);
    v317 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v8 + 472);
  v9 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v9, v10))
  {
    v11 = (std::__shared_weak_count *)a2[1];
    v315 = *a2;
    v316 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "NonMaximumSuppression kernel does not support on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v320, (__int128 *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v315, (Espresso::base_kernel::validate_for_engine_warning_t *)v320);
    v14 = (std::__shared_weak_count *)v323;
    if ((_QWORD)v323)
    {
      v15 = (unint64_t *)(v323 + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v255.n128_u64[0] = (unint64_t)&v321;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v255);
    v255.n128_u64[0] = (unint64_t)&v320[24];
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v255);
    if ((v320[23] & 0x80000000) != 0)
      operator delete(*(void **)v320);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v17 = v316;
    if (!v316)
      goto LABEL_97;
    v18 = (unint64_t *)&v316->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    goto LABEL_95;
  }
  v20 = *(_QWORD *)a3;
  v21 = *((_QWORD *)a3 + 1);
  if (((uint64_t)(*(_QWORD *)(a1 + 320) - *(_QWORD *)(a1 + 312)) >> 2) + 2 < (unint64_t)((v21 - *(_QWORD *)a3) >> 6))
  {
    v22 = (std::__shared_weak_count *)a2[1];
    v313 = *a2;
    v314 = v22;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "NonMaximumSuppression kernel does not support dynamic iou_threshold, score_threshold, or max_boxes on ANE.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v320, (__int128 *)__p, (uint64_t)a3, 1);
    Espresso::emit_kernel_validation_warning(&v313, (Espresso::base_kernel::validate_for_engine_warning_t *)v320);
    v25 = (std::__shared_weak_count *)v323;
    if ((_QWORD)v323)
    {
      v26 = (unint64_t *)(v323 + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v255.n128_u64[0] = (unint64_t)&v321;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v255);
    v255.n128_u64[0] = (unint64_t)&v320[24];
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v255);
    if ((v320[23] & 0x80000000) != 0)
      operator delete(*(void **)v320);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v17 = v314;
    if (!v314)
      goto LABEL_97;
    v28 = (unint64_t *)&v314->__shared_owners_;
    do
      v19 = __ldaxr(v28);
    while (__stlxr(v19 - 1, v28));
    goto LABEL_95;
  }
  if (*(int *)(v20 + 4) >= 2049 && !*(_BYTE *)(a1 + 306))
  {
    v38 = (std::__shared_weak_count *)a2[1];
    v311 = *a2;
    v312 = v38;
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "NonMaximumSuppression kernel cannot currently run on ANE with more than 2048 input boxes without p.no_indices.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v320, (__int128 *)__p, (uint64_t)a3, 1);
    Espresso::emit_kernel_validation_warning(&v311, (Espresso::base_kernel::validate_for_engine_warning_t *)v320);
    v41 = (std::__shared_weak_count *)v323;
    if ((_QWORD)v323)
    {
      v42 = (unint64_t *)(v323 + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v255.n128_u64[0] = (unint64_t)&v321;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v255);
    v255.n128_u64[0] = (unint64_t)&v320[24];
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v255);
    if ((v320[23] & 0x80000000) != 0)
      operator delete(*(void **)v320);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v17 = v312;
    if (!v312)
      goto LABEL_97;
    v44 = (unint64_t *)&v312->__shared_owners_;
    do
      v19 = __ldaxr(v44);
    while (__stlxr(v19 - 1, v44));
LABEL_95:
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    goto LABEL_97;
  }
  v29 = *(float *)(a1 + 284);
  if (v29 < 0.0 || v29 > 1.0)
    goto LABEL_97;
  if (*(float *)(a1 + 288) != 0.0)
  {
    v31 = (std::__shared_weak_count *)a2[1];
    v309 = *a2;
    v310 = v31;
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "NonMaximumSuppression kernel does not support score_threshold on ANE.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v320, (__int128 *)__p, (uint64_t)a3, 1);
    Espresso::emit_kernel_validation_warning(&v309, (Espresso::base_kernel::validate_for_engine_warning_t *)v320);
    v34 = (std::__shared_weak_count *)v323;
    if ((_QWORD)v323)
    {
      v35 = (unint64_t *)(v323 + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v255.n128_u64[0] = (unint64_t)&v321;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v255);
    v255.n128_u64[0] = (unint64_t)&v320[24];
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v255);
    if ((v320[23] & 0x80000000) != 0)
      operator delete(*(void **)v320);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v17 = v310;
    if (!v310)
      goto LABEL_97;
    v37 = (unint64_t *)&v310->__shared_owners_;
    do
      v19 = __ldaxr(v37);
    while (__stlxr(v19 - 1, v37));
    goto LABEL_95;
  }
  if (*(int *)(a1 + 296) >= 1)
  {
    v45 = (std::__shared_weak_count *)a2[1];
    v307 = *a2;
    v308 = v45;
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "NonMaximumSuppression kernel does not filter boxes pre-scoring on ANE.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v320, (__int128 *)__p, (uint64_t)a3, 1);
    Espresso::emit_kernel_validation_warning(&v307, (Espresso::base_kernel::validate_for_engine_warning_t *)v320);
    v48 = (std::__shared_weak_count *)v323;
    if ((_QWORD)v323)
    {
      v49 = (unint64_t *)(v323 + 8);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v255.n128_u64[0] = (unint64_t)&v321;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v255);
    v255.n128_u64[0] = (unint64_t)&v320[24];
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v255);
    if ((v320[23] & 0x80000000) != 0)
      operator delete(*(void **)v320);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v17 = v308;
    if (!v308)
      goto LABEL_97;
    v51 = (unint64_t *)&v308->__shared_owners_;
    do
      v19 = __ldaxr(v51);
    while (__stlxr(v19 - 1, v51));
    goto LABEL_95;
  }
  if (!*(_BYTE *)(a1 + 305))
  {
    v174 = a2[1];
    v306[0] = *a2;
    v306[1] = v174;
    if (v174)
    {
      v175 = &v174->u64[1];
      do
        v176 = __ldxr(v175);
      while (__stxr(v176 + 1, v175));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "NonMaximumSuppression kernel on ANE does not support the count output. Set no_count=true to run NMS on ANE.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v320, (__int128 *)__p, (uint64_t)a3, 1);
    Espresso::emit_kernel_validation_warning(v306, (Espresso::base_kernel::validate_for_engine_warning_t *)v320);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)v320);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v177 = v306;
    goto LABEL_298;
  }
  if (*(_BYTE *)(a1 + 292) && !*(_BYTE *)(a1 + 304))
  {
    v181 = a2[1];
    v305[0] = *a2;
    v305[1] = v181;
    if (v181)
    {
      v182 = &v181->u64[1];
      do
        v183 = __ldxr(v182);
      while (__stxr(v183 + 1, v182));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "NonMaximumSuppression kernel on ANE does not support the scores output when per_class_suppression is true. Set no_scores to true.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v320, (__int128 *)__p, (uint64_t)a3, 1);
    Espresso::emit_kernel_validation_warning(v305, (Espresso::base_kernel::validate_for_engine_warning_t *)v320);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)v320);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v177 = v305;
LABEL_298:
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v177);
LABEL_97:
    v52 = 0;
    goto LABEL_98;
  }
  v303 = 0;
  v302 = 0;
  v304 = 0;
  if (v21 != v20)
  {
    v57 = 0;
    do
    {
      v58 = v317;
      v59 = v318;
      v300 = v317;
      v301 = v318;
      if (v318)
      {
        v60 = (unint64_t *)&v318->__shared_owners_;
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
        v20 = *(_QWORD *)a3;
      }
      v62 = (__int128 *)(v20 + (v57 << 6));
      v63 = *v62;
      v64 = v62[1];
      v296 = *((_QWORD *)v62 + 4);
      v295[1] = v64;
      v295[0] = v63;
      v298 = 0;
      v299 = 0;
      v297 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v297, *((const void **)v62 + 5), *((_QWORD *)v62 + 6), (uint64_t)(*((_QWORD *)v62 + 6) - *((_QWORD *)v62 + 5)) >> 2);
      Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v320, v58, (const Espresso::layer_shape *)v295, 1);
      v65 = v303;
      if ((unint64_t)v303 >= v304)
      {
        v67 = (char *)v302;
        v68 = (v303 - (_BYTE *)v302) >> 5;
        v69 = v68 + 1;
        if ((unint64_t)(v68 + 1) >> 59)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v70 = v304 - (_QWORD)v302;
        if ((uint64_t)(v304 - (_QWORD)v302) >> 4 > v69)
          v69 = v70 >> 4;
        if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFE0)
          v71 = 0x7FFFFFFFFFFFFFFLL;
        else
          v71 = v69;
        if (v71)
          v71 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::blob_container::ane_blob_mapped_shape>>(v71);
        else
          v72 = 0;
        v73 = (_OWORD *)(v71 + 32 * v68);
        *v73 = *(_OWORD *)v320;
        v73[1] = *(_OWORD *)&v320[16];
        if (v65 == v67)
        {
          v76 = (void *)(v71 + 32 * v68);
        }
        else
        {
          v74 = v71 + 32 * v68;
          do
          {
            v75 = *((_OWORD *)v65 - 1);
            v76 = (void *)(v74 - 32);
            *(_OWORD *)(v74 - 32) = *((_OWORD *)v65 - 2);
            *(_OWORD *)(v74 - 16) = v75;
            v65 -= 32;
            v74 -= 32;
          }
          while (v65 != v67);
        }
        v66 = (char *)(v73 + 2);
        v302 = v76;
        v304 = v71 + 32 * v72;
        if (v67)
          operator delete(v67);
      }
      else
      {
        *(_OWORD *)v303 = *(_OWORD *)v320;
        *((_OWORD *)v65 + 1) = *(_OWORD *)&v320[16];
        v66 = v65 + 32;
      }
      v303 = v66;
      if (v297)
      {
        v298 = v297;
        operator delete(v297);
      }
      if (v59)
      {
        v77 = (unint64_t *)&v59->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      ++v57;
      v20 = *(_QWORD *)a3;
    }
    while (v57 < (uint64_t)(*((_QWORD *)a3 + 1) - *(_QWORD *)a3) >> 6);
  }
  v293 = 0;
  v292 = 0;
  v294 = 0;
  v79 = *((_QWORD *)a3 + 3);
  if (*((_QWORD *)a3 + 4) != v79)
  {
    v80 = 0;
    do
    {
      v81 = v317;
      v82 = v318;
      v290 = v317;
      v291 = v318;
      if (v318)
      {
        v83 = (unint64_t *)&v318->__shared_owners_;
        do
          v84 = __ldxr(v83);
        while (__stxr(v84 + 1, v83));
        v79 = *((_QWORD *)a3 + 3);
      }
      v85 = (__int128 *)(v79 + (v80 << 6));
      v86 = *v85;
      v87 = v85[1];
      v286 = *((_QWORD *)v85 + 4);
      v285[1] = v87;
      v285[0] = v86;
      v288 = 0;
      v289 = 0;
      v287 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v287, *((const void **)v85 + 5), *((_QWORD *)v85 + 6), (uint64_t)(*((_QWORD *)v85 + 6) - *((_QWORD *)v85 + 5)) >> 2);
      Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v320, v81, (const Espresso::layer_shape *)v285, 1);
      v88 = v293;
      if ((unint64_t)v293 >= v294)
      {
        v90 = (char *)v292;
        v91 = (v293 - (_BYTE *)v292) >> 5;
        v92 = v91 + 1;
        if ((unint64_t)(v91 + 1) >> 59)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v93 = v294 - (_QWORD)v292;
        if ((uint64_t)(v294 - (_QWORD)v292) >> 4 > v92)
          v92 = v93 >> 4;
        if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFE0)
          v94 = 0x7FFFFFFFFFFFFFFLL;
        else
          v94 = v92;
        if (v94)
          v94 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::blob_container::ane_blob_mapped_shape>>(v94);
        else
          v95 = 0;
        v96 = (_OWORD *)(v94 + 32 * v91);
        *v96 = *(_OWORD *)v320;
        v96[1] = *(_OWORD *)&v320[16];
        if (v88 == v90)
        {
          v99 = (void *)(v94 + 32 * v91);
        }
        else
        {
          v97 = v94 + 32 * v91;
          do
          {
            v98 = *((_OWORD *)v88 - 1);
            v99 = (void *)(v97 - 32);
            *(_OWORD *)(v97 - 32) = *((_OWORD *)v88 - 2);
            *(_OWORD *)(v97 - 16) = v98;
            v88 -= 32;
            v97 -= 32;
          }
          while (v88 != v90);
        }
        v89 = (char *)(v96 + 2);
        v292 = v99;
        v294 = v94 + 32 * v95;
        if (v90)
          operator delete(v90);
      }
      else
      {
        *(_OWORD *)v293 = *(_OWORD *)v320;
        *((_OWORD *)v88 + 1) = *(_OWORD *)&v320[16];
        v89 = v88 + 32;
      }
      v293 = v89;
      if (v287)
      {
        v288 = v287;
        operator delete(v287);
      }
      if (v82)
      {
        v100 = (unint64_t *)&v82->__shared_owners_;
        do
          v101 = __ldaxr(v100);
        while (__stlxr(v101 - 1, v100));
        if (!v101)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      ++v80;
      v79 = *((_QWORD *)a3 + 3);
    }
    while (v80 < (*((_QWORD *)a3 + 4) - v79) >> 6);
  }
  Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel::supported_by_hw((uint64_t)v282, v9, (uint64_t)&v302, (uint64_t)&v292);
  if (!v282[0])
  {
    v178 = a2[1];
    v281[0] = *a2;
    v281[1] = v178;
    if (v178)
    {
      v179 = &v178->u64[1];
      do
        v180 = __ldxr(v179);
      while (__stxr(v180 + 1, v179));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "NonMaximumSuppression kernel does not fit on ANE.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v320, (__int128 *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v281, (Espresso::base_kernel::validate_for_engine_warning_t *)v320);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)v320);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v281);
    v52 = 0;
    goto LABEL_352;
  }
  v102 = v317;
  v103 = (Espresso::net *)v318;
  v277[0] = v317;
  v277[1] = (Espresso::net *)v318;
  if (v318)
  {
    v104 = (unint64_t *)&v318->__shared_owners_;
    do
      v105 = __ldxr(v104);
    while (__stxr(v105 + 1, v104));
  }
  v106 = *(_QWORD *)a3;
  v107 = *(_QWORD *)(*(_QWORD *)a3 + 32);
  v108 = *(_OWORD *)(*(_QWORD *)a3 + 16);
  v272[0] = *(_OWORD *)*(_QWORD *)a3;
  v272[1] = v108;
  v273 = v107;
  v274 = 0;
  v276 = 0;
  v275 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v274, *(const void **)(v106 + 40), *(_QWORD *)(v106 + 48), (uint64_t)(*(_QWORD *)(v106 + 48) - *(_QWORD *)(v106 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v278, v277[0], (const Espresso::layer_shape *)v272, 1);
  if (v274)
  {
    v275 = v274;
    operator delete(v274);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v277);
  v268[0] = v102;
  v268[1] = v103;
  if (v103)
  {
    v109 = (unint64_t *)((char *)v103 + 8);
    do
      v110 = __ldxr(v109);
    while (__stxr(v110 + 1, v109));
  }
  v111 = *(_QWORD **)a3;
  v112 = *(_OWORD *)(*(_QWORD *)a3 + 80);
  v263[0] = *(_OWORD *)(*(_QWORD *)a3 + 64);
  v263[1] = v112;
  v113 = (const void *)v111[13];
  v264 = v111[12];
  v265 = 0;
  v267 = 0;
  v266 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v265, v113, v111[14], (uint64_t)(v111[14] - (_QWORD)v113) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v269, v268[0], (const Espresso::layer_shape *)v263, 1);
  if (v265)
  {
    v266 = v265;
    operator delete(v265);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v268);
  *(_QWORD *)v320 = CFSTR("Boxes");
  std::vector<__CFString const*>::vector[abi:ne180100](&v261, v320, 1uLL);
  if (*(_QWORD *)(a1 + 320) != *(_QWORD *)(a1 + 312))
  {
    *(_QWORD *)v320 = CFSTR("Indices");
    std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::push_back[abi:ne180100](&v261, v320);
  }
  if (!*(_BYTE *)(a1 + 304))
  {
    *(_QWORD *)v320 = CFSTR("Scores");
    std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::push_back[abi:ne180100](&v261, v320);
  }
  Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)v260, (NSString *)(a1 + 336), v9);
  v114 = (std::string::size_type *)v261;
  v115 = v262;
  if (v261 != v262)
  {
    *(_QWORD *)&v116 = v279;
    *((_QWORD *)&v116 + 1) = v280;
    v220 = v116;
    v217 = v278[0];
    v219 = v278[2];
    v212 = v279;
    v213 = v280;
    *(_QWORD *)&v116 = v270;
    *((_QWORD *)&v116 + 1) = v271;
    v216 = v116;
    v221 = v269[1];
    v222 = v278[1];
    v214 = v269[0];
    v215 = v269[2];
    v210 = v270;
    v211 = v271;
    while (1)
    {
      ANECNMSLayerDescInitialize();
      v117 = *(int *)(a1 + 280);
      v225.__r_.__value_.__r.__words[0] = *v114;
      v225.__r_.__value_.__l.__size_ = v117;
      LODWORD(v225.__r_.__value_.__r.__words[2]) = *(_DWORD *)(a1 + 284);
      WORD2(v225.__r_.__value_.__r.__words[2]) = *(unsigned __int8 *)(a1 + 292);
      v118 = Espresso::ANECompilerEngine::bottom_compute_path(a3, v102, 0);
      if (v118 >= 8 || ((0x97u >> v118) & 1) == 0)
        break;
      v119 = off_1E2DD5A30[v118];
      ANECTensorDescInitialize();
      if (*(_BYTE *)(a1 + 307))
      {
        v255.n128_u64[0] = (unint64_t)v119;
        *(_OWORD *)&v256[8] = v220;
        v120 = v222;
        v122 = v217;
        v121 = v219;
      }
      else
      {
        *(_QWORD *)&v256[16] = v212;
        *(_QWORD *)&v256[8] = 1;
        v120 = v213;
        v121 = 1;
        v122 = v222;
      }
      *(_QWORD *)&v256[24] = v121;
      *(_QWORD *)v256 = v120;
      v255.n128_u64[1] = v122;
      v123 = Espresso::ANECompilerEngine::bottom_compute_path(a3, v102, (const Espresso::net *)1);
      if (v123 >= 8 || ((0x97u >> v123) & 1) == 0)
      {
        v193 = a2[1];
        v254[0] = *a2;
        v254[1] = v193;
        if (v193)
        {
          v194 = &v193->u64[1];
          do
            v195 = __ldxr(v194);
          while (__stxr(v195 + 1, v194));
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "Invalid compute path for non maximum suppression");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v320, (__int128 *)__p, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(v254, (Espresso::base_kernel::validate_for_engine_warning_t *)v320);
        Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)v320);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v254);
        goto LABEL_349;
      }
      v124 = off_1E2DD5A30[v123];
      ANECTensorDescInitialize();
      v125 = *(unsigned __int8 *)(a1 + 307);
      v251.n128_u64[0] = (unint64_t)v124;
      if (v125)
      {
        *(_OWORD *)&v252[8] = v216;
        v126 = v221;
        v128 = v214;
        v127 = v215;
      }
      else
      {
        *(_QWORD *)&v252[16] = v210;
        *(_QWORD *)&v252[8] = 1;
        v126 = v211;
        v127 = 1;
        v128 = v221;
      }
      *(_QWORD *)&v252[24] = v127;
      *(_QWORD *)v252 = v126;
      v251.n128_u64[1] = v128;
      *(__n128 *)v320 = v255;
      *(_OWORD *)&v320[16] = *(_OWORD *)v256;
      *(_OWORD *)&v320[32] = *(_OWORD *)&v256[16];
      v321 = v257;
      v322 = v251;
      v323 = *(_OWORD *)v252;
      v324 = *(_OWORD *)&v252[16];
      v325 = v253;
      v319 = 0;
      v250 = 0;
      v129 = ANECValidateNMSLayer();
      if (v129)
      {
        v196 = a2[1];
        v249[0] = *a2;
        v249[1] = v196;
        if (v196)
        {
          v197 = &v196->u64[1];
          do
            v198 = __ldxr(v197);
          while (__stxr(v198 + 1, v197));
        }
        std::to_string((std::string *)&v242, v129);
        v199 = std::string::insert((std::string *)&v242, 0, "mix_non_maximum_suppression_kernel: ANECValidateNMSLayer failed with status ");
        v233[0] = *v199;
        v199->__r_.__value_.__l.__size_ = 0;
        v199->__r_.__value_.__r.__words[2] = 0;
        v199->__r_.__value_.__r.__words[0] = 0;
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)__p, (__int128 *)v233, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(v249, (Espresso::base_kernel::validate_for_engine_warning_t *)__p);
        Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)__p);
        if (SHIBYTE(v233[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v233[0].__r_.__value_.__l.__data_);
        if (SBYTE7(v243) < 0)
          operator delete((void *)v242);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v249);
        Espresso::ANECompilerEngine::violations_from_alternates<ANECNMSLayerDescAlternate>((uint64_t)v233, v250, (uint64_t)v319);
        v200 = (uint64_t **)v233[0].__r_.__value_.__r.__words[2];
        if (v233[0].__r_.__value_.__r.__words[2])
        {
          do
          {
            v201 = (std::__shared_weak_count *)a2[1];
            v244 = *a2;
            v245 = v201;
            if (v201)
            {
              v202 = (unint64_t *)&v201->__shared_owners_;
              do
                v203 = __ldxr(v202);
              while (__stxr(v203 + 1, v202));
            }
            std::string::basic_string[abi:ne180100]<0>(&v242, (char *)objc_msgSend(objc_retainAutorelease(v200[2]), "UTF8String"));
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)__p, &v242, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(&v244, (Espresso::base_kernel::validate_for_engine_warning_t *)__p);
            v204 = v248;
            if (v248)
            {
              v205 = (unint64_t *)&v248->__shared_owners_;
              do
                v206 = __ldaxr(v205);
              while (__stlxr(v206 - 1, v205));
              if (!v206)
              {
                ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
                std::__shared_weak_count::__release_weak(v204);
              }
            }
            v227.__r_.__value_.__r.__words[0] = (std::string::size_type)v247;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v227);
            v227.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[24];
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v227);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            if (SBYTE7(v243) < 0)
              operator delete((void *)v242);
            v207 = v245;
            if (v245)
            {
              v208 = (unint64_t *)&v245->__shared_owners_;
              do
                v209 = __ldaxr(v208);
              while (__stlxr(v209 - 1, v208));
              if (!v209)
              {
                ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
                std::__shared_weak_count::__release_weak(v207);
              }
            }
            v200 = (uint64_t **)*v200;
          }
          while (v200);
        }
        std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v233);
        goto LABEL_349;
      }
      if (++v114 == v115)
        goto LABEL_200;
    }
    v184 = (std::__shared_weak_count *)a2[1];
    v258 = *a2;
    v259 = v184;
    if (v184)
    {
      v185 = (unint64_t *)&v184->__shared_owners_;
      do
        v186 = __ldxr(v185);
      while (__stxr(v186 + 1, v185));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Invalid compute path for non maximum suppression");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v320, (__int128 *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v258, (Espresso::base_kernel::validate_for_engine_warning_t *)v320);
    v187 = (std::__shared_weak_count *)v323;
    if ((_QWORD)v323)
    {
      v188 = (unint64_t *)(v323 + 8);
      do
        v189 = __ldaxr(v188);
      while (__stlxr(v189 - 1, v188));
      if (!v189)
      {
        ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
        std::__shared_weak_count::__release_weak(v187);
      }
    }
    v255.n128_u64[0] = (unint64_t)&v321;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v255);
    v255.n128_u64[0] = (unint64_t)&v320[24];
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v255);
    if ((v320[23] & 0x80000000) != 0)
      operator delete(*(void **)v320);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v190 = v259;
    if (v259)
    {
      v191 = (unint64_t *)&v259->__shared_owners_;
      do
        v192 = __ldaxr(v191);
      while (__stlxr(v192 - 1, v191));
      if (!v192)
      {
        ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
        std::__shared_weak_count::__release_weak(v190);
      }
    }
LABEL_349:
    v52 = 0;
    goto LABEL_350;
  }
LABEL_200:
  v130 = 12;
  if (!*(_BYTE *)(a1 + 307))
    v130 = 8;
  v131 = *(int *)(*(_QWORD *)a3 + v130);
  ANECTensorDescInitialize();
  if (*(int *)(*(_QWORD *)a3 + 4 * (*(_BYTE *)(a1 + 307) == 0)) <= 2048)
    v132 = CFSTR("Float16");
  else
    v132 = CFSTR("UInt16");
  v133 = *(int *)(a1 + 280);
  v52 = 1;
  *(int64x2_t *)v256 = vdupq_n_s64(1uLL);
  *(_QWORD *)&v256[16] = v133;
  *(_QWORD *)&v256[24] = 1;
  v255.n128_u64[0] = (unint64_t)v132;
  v255.n128_u64[1] = v131;
  if (*(_QWORD *)(a1 + 320) != *(_QWORD *)(a1 + 312))
  {
    v134 = 0;
    while (1)
    {
      v135 = v317;
      v136 = v318;
      v240 = v317;
      v241 = v318;
      if (v318)
      {
        v137 = (unint64_t *)&v318->__shared_owners_;
        do
          v138 = __ldxr(v137);
        while (__stxr(v138 + 1, v137));
      }
      v139 = *(_QWORD *)a3 + (v134 << 6);
      v140 = *(_QWORD *)(v139 + 160);
      v141 = *(_OWORD *)(v139 + 144);
      v235[0] = *(_OWORD *)(v139 + 128);
      v235[1] = v141;
      v236 = v140;
      v238 = 0;
      v239 = 0;
      v237 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v237, *(const void **)(v139 + 168), *(_QWORD *)(v139 + 176), (uint64_t)(*(_QWORD *)(v139 + 176) - *(_QWORD *)(v139 + 168)) >> 2);
      Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v242, v135, (const Espresso::layer_shape *)v235, 1);
      if (v237)
      {
        v238 = v237;
        operator delete(v237);
      }
      if (v136)
      {
        v142 = (unint64_t *)&v136->__shared_owners_;
        do
          v143 = __ldaxr(v142);
        while (__stlxr(v143 - 1, v142));
        if (!v143)
        {
          ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
          std::__shared_weak_count::__release_weak(v136);
        }
      }
      if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v242, v9))
        goto LABEL_349;
      v144 = *(_QWORD *)(a1 + 312);
      if (v134 >= (*(_QWORD *)(a1 + 320) - v144) >> 2)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v145 = Espresso::ANECompilerEngine::bottom_compute_path(a3, v317, (const Espresso::net *)1);
      if (v145 >= 8 || ((0x97u >> v145) & 1) == 0)
        break;
      v150 = off_1E2DD5A30[v145];
      ANECGatherLayerDescInitialize();
      v233[0].__r_.__value_.__r.__words[0] = 1;
      v233[0].__r_.__value_.__l.__size_ = (std::string::size_type)CFSTR("Width");
      v250 = 0;
      v232 = 0;
      ANECTensorDescInitialize();
      ANECTensorDescInitialize();
      *(_QWORD *)&v151 = SHIDWORD(v242);
      *((_QWORD *)&v151 + 1) = (int)v243;
      *(_OWORD *)&v320[24] = v151;
      *(_QWORD *)v320 = v150;
      *(_QWORD *)&v320[40] = SDWORD2(v242);
      *(_QWORD *)&v151 = (int)v242;
      *((_QWORD *)&v151 + 1) = SDWORD1(v242);
      *(_OWORD *)&v320[8] = v151;
      v152 = (uint64_t *)v251.n128_u64[1];
      v153 = (uint64_t *)v251.n128_u64[0];
      v218 = v251.n128_u64[1] - v251.n128_u64[0];
      if (v251.n128_u64[1] == v251.n128_u64[0])
        goto LABEL_242;
      v154 = v150;
      Espresso::ANECompilerEngine::validate_transpose((uint64_t)__p, (uint64_t)v260, (uint64_t)&v242, (uint64_t)v150, (unsigned int **)&v251);
      v155 = __p[0];
      if ((__p[31] & 0x80000000) != 0)
        operator delete(*(void **)&__p[8]);
      if (!v155)
        goto LABEL_270;
      v229 = 0;
      v230 = 0;
      v231 = 0;
      std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__init_with_size[abi:ne180100]<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*,std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*>((char *)&v229, v153, v152, v218 >> 3);
      v156 = v229;
      v150 = v154;
      if (v156)
      {
        v230 = (uint64_t)v156;
        operator delete(v156);
      }
      v157 = vuzp1q_s32(*(int32x4_t *)&v320[16], *(int32x4_t *)&v320[32]);
      *(int32x4_t *)&__p[4] = vzip1q_s32(v157, (int32x4_t)vextq_s8((int8x16_t)v157, (int8x16_t)vdupq_laneq_s32(v157, 2), 0xCuLL));
      *(_QWORD *)&__p[20] = 0x500000001;
      *(_DWORD *)__p = *(_DWORD *)&v320[8];
      *(_DWORD *)&__p[28] = 1;
      if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(__p, v9))
      {
LABEL_242:
        v322 = v255;
        v323 = *(_OWORD *)v256;
        v324 = *(_OWORD *)&v256[16];
        v325 = v257;
        v158 = ANECValidateGatherLayer();
        if (v158)
        {
          v159 = a2[1];
          v228[0] = *a2;
          v228[1] = v159;
          if (v159)
          {
            v160 = &v159->u64[1];
            do
              v161 = __ldxr(v160);
            while (__stxr(v161 + 1, v160));
          }
          std::to_string(&v227, v158);
          v162 = std::string::insert(&v227, 0, "nms_kernel: ANECValidateGatherLayer failed with status ");
          v225 = *v162;
          v162->__r_.__value_.__l.__size_ = 0;
          v162->__r_.__value_.__r.__words[2] = 0;
          v162->__r_.__value_.__r.__words[0] = 0;
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)__p, (__int128 *)&v225, (uint64_t)a3, 0);
          Espresso::emit_kernel_validation_warning(v228, (Espresso::base_kernel::validate_for_engine_warning_t *)__p);
          Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)__p);
          if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v225.__r_.__value_.__l.__data_);
          if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v227.__r_.__value_.__l.__data_);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v228);
          Espresso::ANECompilerEngine::violations_from_alternates<ANECGatherLayerDescAlternate>((uint64_t)&v225, v250, v232);
          v163 = (uint64_t **)v225.__r_.__value_.__r.__words[2];
          if (v225.__r_.__value_.__r.__words[2])
          {
            do
            {
              v164 = (std::__shared_weak_count *)a2[1];
              v223 = *a2;
              v224 = v164;
              if (v164)
              {
                v165 = (unint64_t *)&v164->__shared_owners_;
                do
                  v166 = __ldxr(v165);
                while (__stxr(v166 + 1, v165));
              }
              std::string::basic_string[abi:ne180100]<0>(&v227, (char *)objc_msgSend(objc_retainAutorelease(v163[2]), "UTF8String"));
              Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)__p, (__int128 *)&v227, (uint64_t)a3, 0);
              Espresso::emit_kernel_validation_warning(&v223, (Espresso::base_kernel::validate_for_engine_warning_t *)__p);
              v167 = v248;
              if (v248)
              {
                v168 = (unint64_t *)&v248->__shared_owners_;
                do
                  v169 = __ldaxr(v168);
                while (__stlxr(v169 - 1, v168));
                if (!v169)
                {
                  ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                  std::__shared_weak_count::__release_weak(v167);
                }
              }
              v319 = (void **)v247;
              std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v319);
              v319 = (void **)&__p[24];
              std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v319);
              if ((__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
              if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v227.__r_.__value_.__l.__data_);
              v170 = v224;
              if (v224)
              {
                v171 = (unint64_t *)&v224->__shared_owners_;
                do
                  v172 = __ldaxr(v171);
                while (__stlxr(v172 - 1, v171));
                if (!v172)
                {
                  ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                  std::__shared_weak_count::__release_weak(v170);
                }
              }
              v163 = (uint64_t **)*v163;
            }
            while (v163);
          }
          std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v225);
          goto LABEL_227;
        }
        if (*(_QWORD *)&v252[16] == *(_QWORD *)&v252[8])
        {
          v149 = 0;
        }
        else
        {
          *(_OWORD *)__p = v242;
          *(_OWORD *)&__p[16] = v243;
          *(_DWORD *)&__p[16] = *(_DWORD *)(a1 + 280);
          if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(__p, v9))
            goto LABEL_277;
          Espresso::ANECompilerEngine::validate_transpose((uint64_t)&v225, (uint64_t)v260, (uint64_t)__p, (uint64_t)v150, (unsigned int **)&v252[8]);
          v173 = v225.__r_.__value_.__s.__data_[0];
          if (v226 < 0)
            operator delete((void *)v225.__r_.__value_.__l.__size_);
          if (v173)
            v149 = 0;
          else
LABEL_277:
            v149 = 1;
        }
      }
      else
      {
LABEL_270:
        v149 = 1;
      }
LABEL_228:
      if (*(_QWORD *)&v252[8])
        operator delete(*(void **)&v252[8]);
      if (v251.n128_u64[0])
        operator delete((void *)v251.n128_u64[0]);
      if (v149)
      {
        v52 = 0;
        goto LABEL_350;
      }
      if (++v134 >= (uint64_t)(*(_QWORD *)(a1 + 320) - *(_QWORD *)(a1 + 312)) >> 2)
      {
        v52 = 1;
        goto LABEL_350;
      }
    }
    v146 = a2[1];
    v234[0] = *a2;
    v234[1] = v146;
    if (v146)
    {
      v147 = &v146->u64[1];
      do
        v148 = __ldxr(v147);
      while (__stxr(v148 + 1, v147));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Invalid compute path for non maximum suppression");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v320, (__int128 *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v234, (Espresso::base_kernel::validate_for_engine_warning_t *)v320);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)v320);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v234);
LABEL_227:
    v149 = 1;
    goto LABEL_228;
  }
LABEL_350:
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v260);
  if (v261)
  {
    v262 = (std::string::size_type *)v261;
    operator delete(v261);
  }
LABEL_352:
  if (v284 < 0)
    operator delete(v283);
  if (v292)
    operator delete(v292);
  if (v302)
    operator delete(v302);
LABEL_98:

  v53 = v318;
  if (v318)
  {
    v54 = (unint64_t *)&v318->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  return v52;
}

void sub_19173EF20(_Unwind_Exception *a1)
{
  void *v1;
  void *v3;

  nitro::nitro_builtins::Sum(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0::~$_0((uint64_t)&STACK[0x238]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2D8]);
  v3 = (void *)STACK[0x2E8];
  if (STACK[0x2E8])
  {
    STACK[0x2F0] = (unint64_t)v3;
    operator delete(v3);
  }
  if (SLOBYTE(STACK[0x40F]) < 0)
    operator delete((void *)STACK[0x3F8]);
  if (STACK[0x468])
    operator delete((void *)STACK[0x468]);
  if (STACK[0x4D0])
    operator delete((void *)STACK[0x4D0]);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x558]);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel::compile(Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  void *v18;
  double v19;
  void *v20;
  uint64_t v21;
  __int128 *v22;
  __int128 v23;
  _OWORD *v24;
  uint64_t v25;
  int v26;
  int v27;
  void **v28;
  std::string *v29;
  void *v30;
  void *v31;
  std::string *v32;
  std::string *i;
  uint64_t v34;
  uint64_t v35;
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  __CFString *v41;
  int v42;
  const std::string::value_type *v43;
  uint64_t v44;
  __CFString *v45;
  Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel *v46;
  _OWORD *v47;
  int v48;
  int v49;
  void *v50;
  const std::string *v51;
  std::string *v52;
  Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel *v53;
  _OWORD *v54;
  void *v55;
  const void **v56;
  size_t v57;
  std::string *v58;
  const void *v59;
  void *v60;
  unint64_t v61;
  _BOOL8 v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  __int128 *v66;
  __int128 v67;
  uint64_t v68;
  int v69;
  int v70;
  char *v71;
  const void *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  _DWORD *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  __int128 *v82;
  __int128 v83;
  std::string::size_type v84;
  size_t size;
  std::string *p_str;
  std::string *v87;
  unsigned int *v88;
  unsigned int *v89;
  int v90;
  size_t v91;
  std::string *v92;
  std::string *v93;
  void *v94;
  void *v95;
  __CFString *v96;
  std::string *v97;
  std::string *j;
  __int128 v99;
  std::string *v100;
  __int128 v101;
  std::string *v102;
  uint64_t v103;
  uint64_t k;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  const char *v119;
  void *v120;
  void *v121;
  void *v122;
  char *v123;
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t *v124;
  std::string *v125;
  Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel *v126;
  void *v127;
  Espresso::ANECompilerEngine::compiler *v128;
  std::string v129;
  std::string v130;
  _DWORD *v131;
  std::__shared_weak_count *v132;
  const void *v133;
  std::__shared_weak_count *v134;
  std::string v135;
  std::string v136;
  unsigned int *v137;
  unsigned int *v138;
  uint64_t v139;
  void *v140;
  char v141;
  id v142;
  id v143;
  id v144;
  std::string __str;
  _BYTE v146[24];
  _BYTE v147[32];
  void *v148;
  char v149;
  id v150;
  __CFString *v151;
  id v152[2];
  std::string v153;
  uint64_t v154;
  uint64_t v155;
  std::string *v156;
  std::string *v157;
  unint64_t v158;
  void *v159;
  char v160;
  id v161;
  __CFString *v162;
  id v163;
  std::string v164;
  std::string v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  char v169;
  int v170;
  __CFString *v171;
  __CFString *v172;
  id v173[2];
  std::string v174;
  _BYTE v175[24];
  _BYTE v176[32];
  void *__p;
  char v178;
  id v179;
  __CFString *v180;
  id v181[2];
  void *v182[2];
  char v183;
  uint64_t v184;
  uint64_t v185;
  std::string *v186;
  std::string *v187;
  unint64_t v188;
  void *v189;
  char v190;
  id v191;
  __CFString *v192;
  id v193;
  void *v194;
  std::string v195;
  std::string v196;
  uint64_t v197;
  std::__shared_weak_count *v198;
  uint64_t v199;
  std::__shared_weak_count *v200;
  uint64_t v201;
  std::__shared_weak_count *v202;
  void **v203[2];

  v201 = 0;
  v202 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4 || (v202 = std::__shared_weak_count::lock(v4)) == 0 || (v7 = *((_QWORD *)a2 + 1), (v201 = v7) == 0))
  {
    v119 = "Inconsistent state: null network";
    goto LABEL_265;
  }
  if (!*(_QWORD *)(v7 + 576))
  {
    v119 = "Inconsistent state: blob_storage";
LABEL_265:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v119);
  }
  v8 = v7 + 136;
  v123 = (char *)(a3 + 6);
  v182[0] = a3[6];
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v182[0], (__int128 **)v182);
  v10 = (std::__shared_weak_count *)*((_QWORD *)v9 + 6);
  v199 = *((_QWORD *)v9 + 5);
  v200 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v182[0] = a3;
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)a3, (__int128 **)v182);
  v126 = this;
  v128 = a2;
  v14 = (std::__shared_weak_count *)*((_QWORD *)v13 + 6);
  v197 = *((_QWORD *)v13 + 5);
  v198 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v124 = (Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)a3;
  v17 = (void *)objc_opt_new();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)this + 70));
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setObject:forKeyedSubscript:", v18, CFSTR("NMSRounds"));

  LODWORD(v19) = *((_DWORD *)this + 71);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setObject:forKeyedSubscript:", v20, CFSTR("IoUThreshold"));

  if (*((_BYTE *)this + 292))
    v21 = MEMORY[0x1E0C9AAB0];
  else
    v21 = MEMORY[0x1E0C9AAA0];
  objc_msgSend(v17, "setObject:forKeyedSubscript:", v21, CFSTR("PerClassSuppression"));
  objc_msgSend(v17, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], CFSTR("ReturnPerClassResults"));
  v22 = *(__int128 **)v123;
  if (*(char *)(*(_QWORD *)v123 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v196, *(const std::string::value_type **)v22, *((_QWORD *)v22 + 1));
    v22 = *(__int128 **)v123;
  }
  else
  {
    v23 = *v22;
    v196.__r_.__value_.__r.__words[2] = *((_QWORD *)v22 + 2);
    *(_OWORD *)&v196.__r_.__value_.__l.__data_ = v23;
  }
  if (*((char *)v22 + 47) < 0)
    std::string::__init_copy_ctor_external(&v195, *((const std::string::value_type **)v22 + 3), *((_QWORD *)v22 + 4));
  else
    v195 = *(std::string *)((_BYTE *)v22 + 1);
  if (!*((_BYTE *)this + 307))
  {
    v24 = operator new(0x20uLL);
    v165.__r_.__value_.__r.__words[2] = (std::string::size_type)(v24 + 2);
    *v24 = xmmword_191A93880;
    v24[1] = xmmword_191A93890;
    v165.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
    v165.__r_.__value_.__l.__size_ = (std::string::size_type)(v24 + 2);
    std::string::append(&v196, "__transpose_fwd");
    std::string::append(&v195, "__transpose_fwd");
    v25 = (uint64_t)a3[6];
    v26 = *((_DWORD *)a3 + 18);
    v27 = *((_DWORD *)a3 + 26);
    v28 = a3;
    v29 = (std::string *)(a3 + 10);
    Espresso::ANECompilerEngine::transpose_unit_from_axis_pairs((uint64_t)v182, v25, &v196, v26, v27, v28[14], (unsigned int **)&v165, v29);
    Espresso::ANECompilerEngine::transpose_unit_from_axis_pairs((uint64_t)&v174, (uint64_t)v28[6] + 24, &v195, *((_DWORD *)v28 + 18), *((_DWORD *)v28 + 26), v28[14], (unsigned int **)&v165, v29);
    Espresso::ANECompilerEngine::compiler::add_unit(v128, (const Espresso::ANECompilerEngine::compiler::unit_t *)v182);
    Espresso::ANECompilerEngine::compiler::add_unit(v128, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v174);

    if (v178 < 0)
      operator delete(__p);
    v153.__r_.__value_.__r.__words[0] = (std::string::size_type)v176;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v153);
    v153.__r_.__value_.__r.__words[0] = (std::string::size_type)v175;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v153);
    if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v174.__r_.__value_.__l.__data_);

    if (v190 < 0)
      operator delete(v189);
    v174.__r_.__value_.__r.__words[0] = (std::string::size_type)&v186;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v174);
    v174.__r_.__value_.__r.__words[0] = (std::string::size_type)&v184;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v174);
    if (v183 < 0)
      operator delete(v182[0]);
    operator delete(v24);
  }
  v30 = (void *)objc_msgSend(v17, "mutableCopy");
  v31 = (void *)objc_msgSend(v17, "mutableCopy");
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v182, (id *)v124);
  v32 = v186;
  for (i = v187; i != v32; --i)
  {
    if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(i[-1].__r_.__value_.__l.__data_);
  }
  v187 = v32;
  v34 = v184;
  v35 = v185;
  if (v185 != v184)
  {
    do
    {
      if (*(char *)(v35 - 1) < 0)
        operator delete(*(void **)(v35 - 24));
      v35 -= 24;
    }
    while (v35 != v34);
    v32 = v187;
  }
  v185 = v34;
  if ((unint64_t)v32 >= v188)
  {
    v36 = v124;
    v38 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v186, (uint64_t)&v196);
  }
  else
  {
    v36 = v124;
    if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v32, v196.__r_.__value_.__l.__data_, v196.__r_.__value_.__l.__size_);
    }
    else
    {
      v37 = *(_OWORD *)&v196.__r_.__value_.__l.__data_;
      v32->__r_.__value_.__r.__words[2] = v196.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v37;
    }
    v38 = v32 + 1;
  }
  v187 = v38;
  if ((unint64_t)v38 >= v188)
  {
    v40 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v186, (uint64_t)&v195);
  }
  else
  {
    if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v38, v195.__r_.__value_.__l.__data_, v195.__r_.__value_.__l.__size_);
    }
    else
    {
      v39 = *(_OWORD *)&v195.__r_.__value_.__l.__data_;
      v38->__r_.__value_.__r.__words[2] = v195.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v39;
    }
    v40 = v38 + 1;
  }
  v41 = v192;
  v187 = v40;
  v192 = CFSTR("NMS");

  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&v174, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v182);
  v180 = v192;
  v181[0] = v193;
  v181[1] = v194;
  std::string::operator=(&v174, (const std::string *)v36);
  if (!*((_BYTE *)this + 307))
    std::string::append(&v174, "__pre_transpose_bwd");
  objc_msgSend(v30, "setObject:forKeyedSubscript:", CFSTR("Boxes"), CFSTR("Type"));
  objc_storeStrong(v181, v30);
  Espresso::ANECompilerEngine::compiler::add_unit(v128, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v174);
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&v165, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v182);
  v172 = v192;
  v173[0] = v193;
  v173[1] = v194;
  v42 = *((unsigned __int8 *)this + 304);
  if (*((_BYTE *)v126 + 306))
  {
    if (*((_QWORD *)v126 + 40) == *((_QWORD *)v126 + 39))
      goto LABEL_67;
    if (*((_BYTE *)v126 + 307))
    {
      v43 = "__pre_gather_indices";
LABEL_61:
      std::string::append(&v165, v43);
      goto LABEL_62;
    }
LABEL_60:
    v43 = "__pre_transpose_indices";
    goto LABEL_61;
  }
  if (!*((_BYTE *)v126 + 307))
    goto LABEL_60;
  std::string::operator=(&v165, (const std::string *)(*((_QWORD *)v36 + 3) + 24 * (v42 == 0)));
LABEL_62:
  v44 = 8;
  if (!*((_BYTE *)v126 + 307))
    v44 = 12;
  if (*(int *)(v199 + v44) >= 2049)
  {
    v45 = v171;
    v171 = CFSTR("UInt16");

    v170 = 5;
  }
  objc_msgSend(v31, "setObject:forKeyedSubscript:", CFSTR("Indices"), CFSTR("Type"));
  objc_storeStrong(v173, v31);
  Espresso::ANECompilerEngine::compiler::add_unit(v128, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v165);
LABEL_67:
  v46 = v126;
  if (!*((_BYTE *)v126 + 307))
  {
    v47 = operator new(0x20uLL);
    v164.__r_.__value_.__r.__words[2] = (std::string::size_type)(v47 + 2);
    *v47 = xmmword_191A938A0;
    v47[1] = xmmword_191A938B0;
    v164.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
    v164.__r_.__value_.__l.__size_ = (std::string::size_type)(v47 + 2);
    v48 = *((_DWORD *)v36 + 18);
    v49 = *((_DWORD *)v36 + 26);
    v50 = (void *)*((_QWORD *)v36 + 14);
    v51 = (const std::string *)v36;
    v52 = (std::string *)((char *)v36 + 80);
    Espresso::ANECompilerEngine::transpose_unit_from_axis_pairs((uint64_t)&v153, (uint64_t)&v174, v51, v48, v49, v50, (unsigned int **)&v164, v52);
    Espresso::ANECompilerEngine::compiler::add_unit(v128, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v153);
    v53 = v126;
    if (!*((_BYTE *)v126 + 306))
    {
      v54 = operator new(0x10uLL);
      *v54 = xmmword_191A934F0;
      v136.__r_.__value_.__l.__size_ = (std::string::size_type)(v54 + 1);
      v136.__r_.__value_.__r.__words[2] = (std::string::size_type)(v54 + 1);
      v136.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
      Espresso::ANECompilerEngine::transpose_unit_from_axis_pairs((uint64_t)&__str, (uint64_t)&v165, (const std::string *)(*((_QWORD *)v124 + 3) + 24 * (v42 == 0)), *((_DWORD *)v124 + 18), v170, v171, (unsigned int **)&v136, v52);
      Espresso::ANECompilerEngine::compiler::add_unit(v128, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__str);

      if (v149 < 0)
        operator delete(v148);
      v130.__r_.__value_.__r.__words[0] = (std::string::size_type)v147;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v130);
      v130.__r_.__value_.__r.__words[0] = (std::string::size_type)v146;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v130);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      operator delete(v54);
      v53 = v126;
    }
    if (!*((_BYTE *)v53 + 304))
    {
      v55 = v31;
      Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&__str, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v182);
      v151 = v192;
      v152[0] = v193;
      v152[1] = v194;
      v56 = (const void **)*((_QWORD *)v124 + 3);
      if (*((char *)v56 + 23) >= 0)
        v57 = *((unsigned __int8 *)v56 + 23);
      else
        v57 = (size_t)v56[1];
      v58 = &v136;
      std::string::basic_string[abi:ne180100]((uint64_t)&v136, v57 + 19);
      if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v58 = (std::string *)v136.__r_.__value_.__r.__words[0];
      if (v57)
      {
        if (*((char *)v56 + 23) >= 0)
          v59 = v56;
        else
          v59 = *v56;
        memmove(v58, v59, v57);
      }
      strcpy((char *)v58 + v57, "__pre_transpose_bwd");
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      __str = v136;
      v31 = v55;
      v60 = (void *)objc_msgSend(v17, "mutableCopy");
      objc_msgSend(v60, "setObject:forKeyedSubscript:", CFSTR("Scores"), CFSTR("Type"));
      objc_storeStrong(v152, v60);
      Espresso::ANECompilerEngine::compiler::add_unit(v128, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__str);
      Espresso::ANECompilerEngine::transpose_unit_from_axis_pairs((uint64_t)&v136, (uint64_t)&__str, *((const std::string **)v124 + 3), *((_DWORD *)v124 + 18), *((_DWORD *)v124 + 26), *((void **)v124 + 14), (unsigned int **)&v164, v52);
      Espresso::ANECompilerEngine::compiler::add_unit(v128, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v136);

      if (v141 < 0)
        operator delete(v140);
      v130.__r_.__value_.__r.__words[0] = (std::string::size_type)&v139;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v130);
      v130.__r_.__value_.__r.__words[0] = (std::string::size_type)&v137;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v130);
      if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v136.__r_.__value_.__l.__data_);

      if (v149 < 0)
        operator delete(v148);
      v136.__r_.__value_.__r.__words[0] = (std::string::size_type)v147;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
      v136.__r_.__value_.__r.__words[0] = (std::string::size_type)v146;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }

    if (v160 < 0)
      operator delete(v159);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v156;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v154;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v153.__r_.__value_.__l.__data_);
    operator delete(v47);
    v36 = v124;
    v46 = v126;
  }
  v120 = v31;
  v121 = v30;
  v122 = v17;
  if (*((_QWORD *)v46 + 40) != *((_QWORD *)v46 + 39))
  {
    v61 = 0;
    v62 = *((_BYTE *)v46 + 304) == 0;
    v63 = 1;
    if (!*((_BYTE *)v46 + 304))
      v63 = 2;
    if (!*((_BYTE *)v46 + 306))
      v62 = v63;
    if (*((_BYTE *)v46 + 305))
      v64 = v62;
    else
      v64 = v62 + 1;
    v125 = (std::string *)((char *)v36 + 80);
    while (1)
    {
      v65 = *((_QWORD *)v36 + 6);
      if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v36 + 7) - v65) >> 3) <= v61 + 2)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v66 = (__int128 *)(v65 + 24 * (v61 + 2));
      if (*((char *)v66 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v164, *(const std::string::value_type **)v66, *((_QWORD *)v66 + 1));
      }
      else
      {
        v67 = *v66;
        v164.__r_.__value_.__r.__words[2] = *((_QWORD *)v66 + 2);
        *(_OWORD *)&v164.__r_.__value_.__l.__data_ = v67;
      }
      v68 = v201;
      v69 = *((_DWORD *)v36 + 26);
      if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v135, v164.__r_.__value_.__l.__data_, v164.__r_.__value_.__l.__size_);
      else
        v135 = v164;
      if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v68 + 360), &v135))
      {
        v70 = *(_DWORD *)(std::map<std::string,Espresso::blob_numerical_properties>::at(v68 + 352, &v135) + 8);
        if (v70 == -1)
          v69 = 1;
        else
          v69 = v70;
      }
      if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v135.__r_.__value_.__l.__data_);
      v153.__r_.__value_.__r.__words[0] = (std::string::size_type)&v164;
      v71 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v68 + 136, (unsigned __int8 *)&v164, (__int128 **)&v153);
      v72 = (const void *)*((_QWORD *)v71 + 5);
      v73 = (std::__shared_weak_count *)*((_QWORD *)v71 + 6);
      v133 = v72;
      v134 = v73;
      if (v73)
      {
        v74 = (unint64_t *)&v73->__shared_owners_;
        do
          v75 = __ldxr(v74);
        while (__stxr(v75 + 1, v74));
      }
      if (v72
      {
        v131 = v76;
        v132 = v73;
        if (v73)
        {
          v77 = (unint64_t *)&v73->__shared_owners_;
          do
            v78 = __ldxr(v77);
          while (__stxr(v78 + 1, v77));
        }
      }
      else
      {
        v73 = 0;
        v76 = 0;
        v131 = 0;
        v132 = 0;
      }
      v79 = *((_QWORD *)v46 + 39);
      if (v61 >= (*((_QWORD *)v46 + 40) - v79) >> 2)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v80 = *(_DWORD *)(v79 + 4 * v61);
      if ((v80 & 0x80000000) != 0)
        v80 += v76[46];
      v81 = *((_QWORD *)v36 + 3);
      if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v36 + 4) - v81) >> 3) <= v64)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v82 = (__int128 *)(v81 + 24 * v64);
      if (*((char *)v82 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v130, *(const std::string::value_type **)v82, *((_QWORD *)v82 + 1));
      }
      else
      {
        v83 = *v82;
        v130.__r_.__value_.__r.__words[2] = *((_QWORD *)v82 + 2);
        *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v83;
      }
      v84 = v136.__r_.__value_.__r.__words[0];
      if (v136.__r_.__value_.__l.__size_ != v136.__r_.__value_.__r.__words[0])
      {
        if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v130.__r_.__value_.__r.__words[2]);
        else
          size = v130.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&__str, size + 28);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        if (size)
        {
          if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v87 = &v130;
          else
            v87 = (std::string *)v130.__r_.__value_.__r.__words[0];
          memmove(p_str, v87, size);
        }
        strcpy((char *)p_str + size, "__gather_param_pre_transpose");
        Espresso::ANECompilerEngine::transpose_unit_from_axis_pairs((uint64_t)&v153, (uint64_t)&v164, &__str, *((_DWORD *)v36 + 18), v69, *((void **)v36 + 14), (unsigned int **)&v136, v125);
        Espresso::ANECompilerEngine::compiler::add_unit(v128, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v153);
        std::string::operator=(&v164, &__str);

        if (v160 < 0)
          operator delete(v159);
        v129.__r_.__value_.__r.__words[0] = (std::string::size_type)&v156;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
        v129.__r_.__value_.__r.__words[0] = (std::string::size_type)&v154;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
        if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v153.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
      v88 = v137;
      v89 = v138;
      v127 = (void *)v84;
      if (v138 == v137)
      {
        v90 = v69;
        if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v129, v130.__r_.__value_.__l.__data_, v130.__r_.__value_.__l.__size_);
        else
          v129 = v130;
        std::string::operator=(&v129, &v130);
      }
      else
      {
        v90 = v69;
        if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v91 = HIBYTE(v130.__r_.__value_.__r.__words[2]);
        else
          v91 = v130.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&v129, v91 + 18);
        if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v92 = &v129;
        else
          v92 = (std::string *)v129.__r_.__value_.__r.__words[0];
        if (v91)
        {
          if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v93 = &v130;
          else
            v93 = (std::string *)v130.__r_.__value_.__r.__words[0];
          memmove(v92, v93, v91);
        }
        strcpy((char *)v92 + v91, "__gather_nd_result");
      }
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v153.__r_.__value_.__l.__data_, (id *)v36);
      v94 = (void *)objc_opt_new();
      v95 = (void *)objc_opt_new();
      objc_msgSend(v95, "addObject:", CFSTR("Width"));
      v96 = v162;
      v162 = CFSTR("Gather");

      objc_msgSend(v94, "setObject:forKeyedSubscript:", v95, CFSTR("GatherNDAxes"));
      objc_storeStrong(&v163, v94);
      v97 = v156;
      for (j = v157; j != v97; --j)
      {
        if (SHIBYTE(j[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(j[-1].__r_.__value_.__l.__data_);
      }
      v157 = v97;
      if ((unint64_t)v97 >= v158)
      {
        v100 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v156, (uint64_t)&v164);
      }
      else
      {
        if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v97, v164.__r_.__value_.__l.__data_, v164.__r_.__value_.__l.__size_);
        }
        else
        {
          v99 = *(_OWORD *)&v164.__r_.__value_.__l.__data_;
          v97->__r_.__value_.__r.__words[2] = v164.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v97->__r_.__value_.__l.__data_ = v99;
        }
        v100 = v97 + 1;
      }
      v157 = v100;
      if ((unint64_t)v100 >= v158)
      {
        v102 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v156, (uint64_t)&v165);
      }
      else
      {
        if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v100, v165.__r_.__value_.__l.__data_, v165.__r_.__value_.__l.__size_);
        }
        else
        {
          v101 = *(_OWORD *)&v165.__r_.__value_.__l.__data_;
          v100->__r_.__value_.__r.__words[2] = v165.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v100->__r_.__value_.__l.__data_ = v101;
        }
        v102 = v100 + 1;
      }
      v157 = v102;
      std::string::operator=(&v153, &v129);
      v103 = v154;
      for (k = v155; k != v103; k -= 24)
      {
        if (*(char *)(k - 1) < 0)
          operator delete(*(void **)(k - 24));
      }
      v155 = v103;
      Espresso::ANECompilerEngine::compiler::add_unit(v128, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v153);
      v36 = v124;
      if (v89 != v88)
      {
        Espresso::ANECompilerEngine::transpose_unit_from_axis_pairs((uint64_t)&__str, (uint64_t)&v129, &v130, *((_DWORD *)v124 + 18), v90, *((void **)v124 + 14), &v137, v125);
        Espresso::ANECompilerEngine::compiler::add_unit(v128, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__str);

        if (v149 < 0)
          operator delete(v148);
        v203[0] = (void **)v147;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v203);
        v203[0] = (void **)v146;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v203);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }

      if (v160 < 0)
        operator delete(v159);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v156;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v154;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v153.__r_.__value_.__l.__data_);
      if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v129.__r_.__value_.__l.__data_);
      if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
        break;
      if (v88)
        goto LABEL_209;
LABEL_210:
      if (v127)
        operator delete(v127);
      v46 = v126;
      if (v73)
      {
        v105 = (unint64_t *)&v73->__shared_owners_;
        do
          v106 = __ldaxr(v105);
        while (__stlxr(v106 - 1, v105));
        if (!v106)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v107 = v134;
      if (v134)
      {
        v108 = (unint64_t *)&v134->__shared_owners_;
        do
          v109 = __ldaxr(v108);
        while (__stlxr(v109 - 1, v108));
        if (!v109)
        {
          ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
          std::__shared_weak_count::__release_weak(v107);
        }
      }
      if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v164.__r_.__value_.__l.__data_);
      ++v64;
      if (++v61 >= (uint64_t)(*((_QWORD *)v126 + 40) - *((_QWORD *)v126 + 39)) >> 2)
        goto LABEL_228;
    }
    operator delete(v130.__r_.__value_.__l.__data_);
    if (!v88)
      goto LABEL_210;
LABEL_209:
    operator delete(v88);
    goto LABEL_210;
  }
LABEL_228:

  if (v169 < 0)
    operator delete(v168);
  v153.__r_.__value_.__r.__words[0] = (std::string::size_type)&v167;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v153);
  v153.__r_.__value_.__r.__words[0] = (std::string::size_type)&v166;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v153);
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v165.__r_.__value_.__l.__data_);

  if (v178 < 0)
    operator delete(__p);
  v165.__r_.__value_.__r.__words[0] = (std::string::size_type)v176;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v165);
  v165.__r_.__value_.__r.__words[0] = (std::string::size_type)v175;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v165);
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v174.__r_.__value_.__l.__data_);

  if (v190 < 0)
    operator delete(v189);
  v174.__r_.__value_.__r.__words[0] = (std::string::size_type)&v186;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v174);
  v174.__r_.__value_.__r.__words[0] = (std::string::size_type)&v184;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v174);
  if (v183 < 0)
    operator delete(v182[0]);

  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v195.__r_.__value_.__l.__data_);
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v196.__r_.__value_.__l.__data_);

  v110 = v198;
  if (v198)
  {
    v111 = (unint64_t *)&v198->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = v200;
  if (v200)
  {
    v114 = (unint64_t *)&v200->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = v202;
  if (v202)
  {
    v117 = (unint64_t *)&v202->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
}

void sub_191740848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,id a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61)
{
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a43);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a61);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&STACK[0x230]);
  operator delete(v61);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&STACK[0x2E0]);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&STACK[0x370]);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&STACK[0x400]);

  if (*(char *)(v66 - 185) < 0)
    operator delete(*(void **)(v66 - 208));
  if (*(char *)(v66 - 153) < 0)
    operator delete(*(void **)(v66 - 176));

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v66 - 144);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v66 - 128);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v66 - 112);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel::compile(Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel::compile((Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel *)((char *)this - 336), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel::~mix_non_maximum_suppression_kernel(void **this)
{
  Espresso::generic_non_maximum_suppression_kernel *v1;

  v1 = (Espresso::generic_non_maximum_suppression_kernel *)(this - 42);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_non_maximum_suppression_kernel::~generic_non_maximum_suppression_kernel(v1);
}

{
  Espresso::generic_non_maximum_suppression_kernel *v1;

  v1 = (Espresso::generic_non_maximum_suppression_kernel *)(this - 42);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_non_maximum_suppression_kernel::~generic_non_maximum_suppression_kernel(v1);
  JUMPOUT(0x19401CD90);
}

__n128 Espresso::ANECompilerEngine::`anonymous namespace'::get_inline_gather_plan(__n128 *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  int v20;
  char *v21;
  char *v22;
  char *v23;
  unsigned int v24;
  const char *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  __n128 v35;
  _DWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  _QWORD *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  __n128 v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  __n128 v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  __n128 result;
  std::runtime_error *exception;
  __n128 *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  _QWORD *v103;
  __n128 v104;
  char *v105;

  v5 = (int)a3[6];
  if ((int)v5 > 4)
  {
    if ((_DWORD)v5 == 5)
    {
      v20 = a3[7];
      v6 = v20 != 0;
      v104 = 0u;
      if (v5 - 1 == a2)
      {
        v14 = 0;
        v21 = 0;
        v22 = 0;
        v23 = 0;
        if (!v20)
          goto LABEL_165;
        goto LABEL_32;
      }
      if (a2 <= 4)
      {
        v14 = 0;
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v25 = "nms: Can't gather from axis zero.";
        v7 = 3;
        switch(4 - a2)
        {
          case 0u:
            goto LABEL_31;
          case 1u:
            goto LABEL_27;
          case 2u:
            if (v20)
              v7 = 2;
            else
              v7 = 1;
            goto LABEL_27;
          case 3u:
            v7 = 2 * (v20 == 0);
            goto LABEL_5;
          case 4u:
            goto LABEL_170;
          default:
            goto LABEL_167;
        }
      }
      goto LABEL_167;
    }
LABEL_166:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("nms: invalid zero axis.");
  }
  if ((v5 - 6) < 0xFFFFFFFB)
    goto LABEL_166;
  v6 = dword_191ABEC30[(v5 - 1)];
  if (v5 - 1 != a2)
  {
    if ((a2 & 0x80000000) == 0 && a2 < v5)
    {
      v24 = v5 + ~a2;
      if (v24 <= 4)
      {
        v7 = 4;
        switch(v24)
        {
          case 0u:
            goto LABEL_5;
          case 1u:
            v7 = 3;
            goto LABEL_5;
          case 2u:
            v7 = 2;
            goto LABEL_5;
          case 3u:
            v7 = 0;
            goto LABEL_5;
          default:
            break;
        }
      }
    }
LABEL_167:
    v25 = "nms: invalid gather axis.";
    goto LABEL_170;
  }
  v7 = 4;
LABEL_5:
  if ((_DWORD)v6 == v7)
  {
    v25 = "nms: Can't gather from axis zero.";
    goto LABEL_170;
  }
  if ((_DWORD)v6 == 4)
  {
    v25 = "nms: Can't gather from rank one tensor.";
LABEL_170:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v25);
  }
  if (v7 == 4)
  {
    v14 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v104 = 0u;
LABEL_31:
    if (!(_DWORD)v6)
      goto LABEL_165;
  }
  else
  {
    if (!v7)
    {
      v8 = operator new(8uLL);
      *v8 = 0x400000000;
      v9 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(2uLL);
      v10 = v9;
      v12 = v11;
      v13 = 0;
      v14 = (char *)&v9[v11];
      v15 = v6;
      v99 = v6 << 32;
      v9[1] = ((unint64_t)v6 << 32) | 4;
      v16 = (char *)(v9 + 2);
      v17 = 1;
      do
      {
        --v17;
        v9[v13] = v8[v13];
        --v13;
      }
      while (v13 != -1);
      v18 = (char *)&v9[v17];
      operator delete(v8);
      v103 = &v10[v17];
      if (v12 < 3)
      {
        v40 = (16 - 8 * v17) >> 3;
        v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if ((v14 - v18) >> 2 > v41)
          v41 = (v14 - v18) >> 2;
        if ((unint64_t)(v14 - v18) >= 0x7FFFFFFFFFFFFFF8)
          v42 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v42 = v41;
        if (v42)
          v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v42);
        else
          v43 = 0;
        v77 = (_QWORD *)(v42 + 8 * v40);
        v14 = (char *)(v42 + 8 * v43);
        *v77 = v15;
        v19 = v77 + 1;
        if (v17 == 2)
        {
          v103 = v77;
          v18 = v16;
        }
        else
        {
          v78 = -16;
          v79 = v10 + 1;
          do
          {
            v80 = *v79--;
            *--v77 = v80;
            v78 += 8;
          }
          while (v78);
          v103 = v77;
          if (!v18)
            goto LABEL_137;
        }
        operator delete(v18);
      }
      else
      {
        v10[2] = v15;
        v19 = v10 + 3;
      }
LABEL_137:
      v81.n128_u64[0] = (unint64_t)v103;
      v81.n128_u64[1] = (unint64_t)v19;
      v104 = v81;
      v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      v21 = v82;
      v23 = &v82[8 * v83];
      *(_QWORD *)v82 = 4;
      if (v83 < 2)
      {
        v85 = 2;
        if ((unint64_t)((8 * v83) >> 2) > 2)
          v85 = (8 * v83) >> 2;
        if ((unint64_t)(8 * v83) >= 0x7FFFFFFFFFFFFFF8)
          v86 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v86 = v85;
        if (v86)
          v86 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v86);
        else
          v87 = 0;
        v88 = 0;
        v23 = (char *)(v86 + 8 * v87);
        *(_QWORD *)(v86 + 8) = v15 | 0x400000000;
        v84 = (char *)(v86 + 16);
        do
        {
          *(_QWORD *)(v86 + v88) = *(_QWORD *)&v21[v88];
          v88 -= 8;
        }
        while (v88 != -8);
        v89 = (char *)v86;
        operator delete(v21);
        v21 = v89;
      }
      else
      {
        *((_QWORD *)v82 + 1) = v15 | 0x400000000;
        v84 = v82 + 16;
      }
      if (v84 >= v23)
      {
        v90 = (v84 - v21) >> 3;
        v91 = v90 + 1;
        if ((unint64_t)(v90 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if ((v23 - v21) >> 2 > v91)
          v91 = (v23 - v21) >> 2;
        if ((unint64_t)(v23 - v21) >= 0x7FFFFFFFFFFFFFF8)
          v92 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v92 = v91;
        if (v92)
          v92 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v92);
        else
          v93 = 0;
        v94 = (char *)(v92 + 8 * v90);
        v23 = (char *)(v92 + 8 * v93);
        *(_QWORD *)v94 = v99;
        v22 = v94 + 8;
        while (v84 != v21)
        {
          v95 = *((_QWORD *)v84 - 1);
          v84 -= 8;
          *((_QWORD *)v94 - 1) = v95;
          v94 -= 8;
        }
        operator delete(v21);
        v21 = v94;
      }
      else
      {
        *(_QWORD *)v84 = v99;
        v22 = v84 + 8;
      }
      goto LABEL_165;
    }
LABEL_27:
    v26 = operator new(8uLL);
    v27 = v7;
    v28 = v7 | 0x400000000;
    *v26 = v28;
    v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
    v30 = v29;
    v98 = a1;
    v100 = v6;
    *(_QWORD *)v21 = v28;
    v31 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(2uLL);
    v23 = &v21[8 * v30];
    v33 = (char *)&v31[v32];
    v34 = (v27 << 32) | 4;
    v31[1] = v34;
    *v31 = *v26;
    operator delete(v26);
    v35.n128_u64[0] = (unint64_t)v31;
    v35.n128_u64[1] = (unint64_t)(v31 + 2);
    v104 = v35;
    if (v30 < 2)
    {
      v37 = 2;
      if ((unint64_t)((8 * v30) >> 2) > 2)
        v37 = (8 * v30) >> 2;
      if ((unint64_t)(8 * v30) >= 0x7FFFFFFFFFFFFFF8)
        v38 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v38 = v37;
      v14 = v33;
      if (v38)
        v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v38);
      else
        v39 = 0;
      v6 = v100;
      v75 = 0;
      v23 = (char *)(v38 + 8 * v39);
      *(_QWORD *)(v38 + 8) = v34;
      v22 = (char *)(v38 + 16);
      do
      {
        *(_QWORD *)(v38 + v75) = *(_QWORD *)&v21[v75];
        v75 -= 8;
      }
      while (v75 != -8);
      v76 = (char *)v38;
      operator delete(v21);
      v21 = v76;
      a1 = v98;
      if (!(_DWORD)v100)
        goto LABEL_165;
    }
    else
    {
      *((_QWORD *)v21 + 1) = v34;
      v22 = v21 + 16;
      v14 = v33;
      v6 = v100;
      if (!(_DWORD)v100)
        goto LABEL_165;
    }
  }
LABEL_32:
  if (*a3 != 1)
    goto LABEL_55;
  switch((_DWORD)v6)
  {
    case 3:
      v36 = a3 + 3;
      break;
    case 2:
      v36 = a3 + 1;
      break;
    case 1:
      v36 = a3 + 2;
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::invalid_state_error::invalid_state_error(exception, "Bad axis.");
  }
  if (*v36 != 1)
  {
LABEL_55:
    v44 = (char *)v104.n128_u64[1];
    v45 = (char *)v104.n128_u64[0];
    if (v104.n128_u64[1] >= (unint64_t)v14)
    {
      v47 = (uint64_t)(v104.n128_u64[1] - v104.n128_u64[0]) >> 3;
      v48 = v47 + 1;
      if ((unint64_t)(v47 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      if ((uint64_t)&v14[-v104.n128_u64[0]] >> 2 > v48)
        v48 = (uint64_t)&v14[-v104.n128_u64[0]] >> 2;
      if ((unint64_t)&v14[-v104.n128_u64[0]] >= 0x7FFFFFFFFFFFFFF8)
        v49 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v49 = v48;
      if (v49)
        v49 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v49);
      else
        v50 = 0;
      v51 = (char *)(v49 + 8 * v47);
      v14 = (char *)(v49 + 8 * v50);
      *(_QWORD *)v51 = v6;
      v46 = v51 + 8;
      if (v104.n128_u64[1] != v104.n128_u64[0])
      {
        do
        {
          v52 = *((_QWORD *)v44 - 1);
          v44 -= 8;
          *((_QWORD *)v51 - 1) = v52;
          v51 -= 8;
        }
        while (v44 != (char *)v104.n128_u64[0]);
        v44 = (char *)v104.n128_u64[0];
      }
      v45 = v51;
      if (v44)
      {
        v101 = v51;
        operator delete(v44);
        v45 = v101;
      }
    }
    else
    {
      *(_QWORD *)v104.n128_u64[1] = v6;
      v46 = (char *)(v104.n128_u64[1] + 8);
    }
    v102 = v45;
    v105 = v45;
    if (v22 >= v23)
    {
      v54 = (v22 - v21) >> 3;
      v55 = v54 + 1;
      if ((unint64_t)(v54 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      if ((v23 - v21) >> 2 > v55)
        v55 = (v23 - v21) >> 2;
      if ((unint64_t)(v23 - v21) >= 0x7FFFFFFFFFFFFFF8)
        v56 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v56 = v55;
      if (v56)
        v56 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v56);
      else
        v57 = 0;
      v58 = (char *)(v56 + 8 * v54);
      v23 = (char *)(v56 + 8 * v57);
      *(_QWORD *)v58 = v6;
      v53 = v58 + 8;
      while (v22 != v21)
      {
        v59 = *((_QWORD *)v22 - 1);
        v22 -= 8;
        *((_QWORD *)v58 - 1) = v59;
        v58 -= 8;
      }
      if (v21)
        operator delete(v21);
      v21 = v58;
    }
    else
    {
      *(_QWORD *)v22 = v6;
      v53 = v22 + 8;
    }
    if (v46 < v14)
    {
      *(_QWORD *)v46 = v6 << 32;
      v60 = v46 + 8;
      goto LABEL_105;
    }
    v61 = v102;
    v62 = (v46 - v102) >> 3;
    v63 = v62 + 1;
    if ((unint64_t)(v62 + 1) >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    if ((v14 - v102) >> 2 > v63)
      v63 = (v14 - v102) >> 2;
    if ((unint64_t)(v14 - v102) >= 0x7FFFFFFFFFFFFFF8)
      v64 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v64 = v63;
    if (v64)
      v64 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v64);
    else
      v65 = 0;
    v66 = (_QWORD *)(v64 + 8 * v62);
    v14 = (char *)(v64 + 8 * v65);
    *v66 = v6 << 32;
    v60 = v66 + 1;
    if (v46 == v102)
    {
      v105 = (char *)v66;
      v61 = v46;
    }
    else
    {
      do
      {
        v67 = *((_QWORD *)v46 - 1);
        v46 -= 8;
        *--v66 = v67;
      }
      while (v46 != v102);
      v105 = (char *)v66;
      if (!v102)
      {
LABEL_105:
        v68.n128_u64[0] = (unint64_t)v105;
        v68.n128_u64[1] = (unint64_t)v60;
        v104 = v68;
        if (v53 >= v23)
        {
          v69 = (v53 - v21) >> 3;
          v70 = v69 + 1;
          if ((unint64_t)(v69 + 1) >> 61)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          if ((v23 - v21) >> 2 > v70)
            v70 = (v23 - v21) >> 2;
          if ((unint64_t)(v23 - v21) >= 0x7FFFFFFFFFFFFFF8)
            v71 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v71 = v70;
          if (v71)
            v71 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v71);
          else
            v72 = 0;
          v73 = (char *)(v71 + 8 * v69);
          v23 = (char *)(v71 + 8 * v72);
          *(_QWORD *)v73 = v6 << 32;
          v22 = v73 + 8;
          while (v53 != v21)
          {
            v74 = *((_QWORD *)v53 - 1);
            v53 -= 8;
            *((_QWORD *)v73 - 1) = v74;
            v73 -= 8;
          }
          if (v21)
            operator delete(v21);
          v21 = v73;
        }
        else
        {
          *(_QWORD *)v53 = v6 << 32;
          v22 = v53 + 8;
        }
        goto LABEL_165;
      }
    }
    operator delete(v61);
    goto LABEL_105;
  }
LABEL_165:
  result = v104;
  *a1 = v104;
  a1[1].n128_u64[0] = (unint64_t)v14;
  a1[1].n128_u64[1] = (unint64_t)v21;
  a1[2].n128_u64[0] = (unint64_t)v22;
  a1[2].n128_u64[1] = (unint64_t)v23;
  return result;
}

void sub_19174151C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13)
{
  void *v13;
  void *v14;

  __cxa_free_exception(v14);
  if (v13)
    operator delete(v13);
  if ((_QWORD)a13)
    operator delete((void *)a13);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel::supported_by_hw(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  id v11;

  v11 = a2;
  v7 = *(_DWORD **)a3;
  v8 = *(_DWORD **)(a3 + 8);
  while (v7 != v8)
  {
    if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v7, v11))
    {
LABEL_10:
      *(_BYTE *)a1 = 0;
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Input blob dimensions exceed ANE limit.");
      goto LABEL_11;
    }
    v7 += 8;
  }
  v10 = *(_DWORD **)a4;
  v9 = *(_DWORD **)(a4 + 8);
  while (v10 != v9)
  {
    if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v10, v11))
      goto LABEL_10;
    v10 += 8;
  }
  *(_BYTE *)a1 = 1;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Success");
LABEL_11:

}

void sub_191741674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *std::vector<__CFString const*>::vector[abi:ne180100](_QWORD *a1, const void *a2, unint64_t a3)
{
  char *v6;
  uint64_t v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a3);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[8 * v7];
    memmove(v6, a2, 8 * a3);
    a1[1] = &v6[8 * a3];
  }
  return a1;
}

void sub_191741710(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::violations_from_alternates<ANECNMSLayerDescAlternate>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  CFTypeRef *v7;
  unint64_t *v8;
  unint64_t v9;
  CFTypeRef *v10;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2)
  {
    v6 = 0;
    v7 = (CFTypeRef *)(a3 + 8);
    do
    {
      v8 = (unint64_t *)(a3 + 560 * v6);
      if (*v8)
      {
        v9 = 0;
        v10 = v7;
        do
        {
          std::__hash_table<__CFString const*,Espresso::ANECompilerEngine::CFStringHasher,Espresso::ANECompilerEngine::CFStringEqualWrapper,std::allocator<__CFString const*>>::__emplace_unique_key_args<__CFString const*,__CFString const* const&>((float *)a1, v10, v10);
          ++v9;
          ++v10;
        }
        while (v9 < *v8);
      }
      ++v6;
      v7 += 70;
    }
    while (v6 != a2);
  }
}

void sub_1917417D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::ANECompilerEngine::`anonymous namespace'::update_tensor_desc_axes_from_transpose_axes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v4 = v5;
  v6 = result[1];
  v7 = result[2];
  v8 = result[3];
  v9 = result[4];
  if (a2 != a3)
    __asm { BR              X16 }
  *result = v4;
  result[1] = v6;
  result[2] = v7;
  result[3] = v8;
  result[4] = v9;
  return result;
}

uint64_t Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel::mix_non_maximum_suppression_kernel(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  uint64_t v6;
  char v7;
  __int128 v13;

  v6 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v6 + 280) = 0x3F00000000000001;
  *(_DWORD *)(v6 + 288) = 0;
  *(_BYTE *)(v6 + 292) = 0;
  *(_QWORD *)(v6 + 296) = 0x300000000;
  *(_QWORD *)(v6 + 312) = 0;
  *(_OWORD *)(v6 + 320) = 0u;
  *(_DWORD *)(v6 + 304) = 0;
  v7 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v6 + 472) = 0u;
  *(_OWORD *)(v6 + 488) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_BYTE *)(v6 + 392) = 0;
  *(_OWORD *)(v6 + 400) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(_OWORD *)(v6 + 432) = 0u;
  *(_OWORD *)(v6 + 448) = 0u;
  *(_BYTE *)(v6 + 464) = 0;
  *(_DWORD *)(v6 + 504) = 1065353216;
  *(_WORD *)(v6 + 512) = 0;
  *(_BYTE *)(v6 + 514) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v6 + 516) = _D1;
  *(_BYTE *)(v6 + 524) = 0;
  *(_OWORD *)(v6 + 528) = 0u;
  *(_BYTE *)(v6 + 544) = v7;
  *(_QWORD *)v6 = &off_1E2D7CF18;
  *(_QWORD *)(v6 + 336) = &unk_1E2D7D078;
  v13 = *a3;
  *(_OWORD *)(v6 + 292) = *(__int128 *)((char *)a3 + 12);
  *(_OWORD *)(v6 + 280) = v13;
  if ((__int128 *)(v6 + 280) != a3)
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(a1 + 312), *((char **)a3 + 4), *((_QWORD *)a3 + 5), (uint64_t)(*((_QWORD *)a3 + 5) - *((_QWORD *)a3 + 4)) >> 2);
  return a1;
}

void sub_1917419F0(_Unwind_Exception *a1)
{
  Espresso::generic_non_maximum_suppression_kernel *v1;
  void **v2;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_non_maximum_suppression_kernel::~generic_non_maximum_suppression_kernel(v1);
  _Unwind_Resume(a1);
}

void Espresso::pass_reset_pre_ssa::~pass_reset_pre_ssa(Espresso::pass_reset_pre_ssa *this)
{
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_reset_pre_ssa::get_analysis_usage(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t Espresso::pass_reset_pre_ssa::run_on_network@<X0>(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  std::string *v8;
  _QWORD *v9;
  std::string *v10;
  std::string *v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;
  unint64_t v20;
  unint64_t *v21;
  std::string __p;

  v20 = 0;
  v5 = *((_QWORD *)a1 + 5) - *((_QWORD *)a1 + 4);
  if (v5)
  {
    do
    {
      v21 = &v20;
      v6 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a1 + 96, &v20, (uint64_t)&std::piecewise_construct, (uint64_t **)&v21);
      v7 = (std::string *)v6[3];
      v8 = (std::string *)v6[4];
      while (v7 != v8)
      {
        Espresso::ssa_blob_name::ssa_blob_name((uint64_t)&v21, (uint64_t)v7);
        if ((_BYTE)v21)
        {
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__erase_unique<std::string>((uint64_t **)a1 + 23, v7);
          std::string::operator=(v7, &__p);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        ++v7;
      }
      v21 = &v20;
      v9 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a1 + 56, &v20, (uint64_t)&std::piecewise_construct, (uint64_t **)&v21);
      v10 = (std::string *)v9[3];
      v11 = (std::string *)v9[4];
      while (v10 != v11)
      {
        Espresso::ssa_blob_name::ssa_blob_name((uint64_t)&v21, (uint64_t)v10);
        if ((_BYTE)v21)
        {
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__erase_unique<std::string>((uint64_t **)a1 + 23, v10);
          std::string::operator=(v10, &__p);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        ++v10;
      }
      ++v20;
      v5 = *((_QWORD *)a1 + 5) - *((_QWORD *)a1 + 4);
    }
    while (v20 < v5 >> 4);
  }
  v12 = v5 >> 4;
  while (v12)
  {
    --v12;
    v13 = *(_QWORD *)(*((_QWORD *)a1 + 4) + 16 * v12);
    v14 = *(const void **)(v13 + 64);
    if (v14
    {
      v15 = *(std::__shared_weak_count **)(v13 + 72);
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      Espresso::net::remove_layer(a1, v12);
    }
  }
  result = Espresso::net::_tag_inputs_and_outputs(a1);
  *(_BYTE *)a2 = 1;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return result;
}

void sub_191741C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::mix_crop_and_resize_kernel::~mix_crop_and_resize_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 45);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 45);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_crop_and_resize_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 360), a3, a4, a5);
}

BOOL Espresso::ANECompilerEngine::mix_crop_and_resize_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, __int128 **a3)
{
  __int128 *v6;
  std::__shared_weak_count *v7;
  Espresso::net *v8;
  void *v9;
  NSString *v10;
  std::__shared_weak_count *v11;
  const Espresso::net *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  const Espresso::net *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  id v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _BOOL8 v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *p_info;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  __int128 *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  int64x2_t *v75;
  unint64_t *v76;
  unint64_t v77;
  int64x2_t **v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  int64x2_t *v86;
  unint64_t *v87;
  unint64_t v88;
  __int128 *v89;
  uint64_t v90;
  __int128 v91;
  __int128 *v92;
  uint64_t v93;
  __int128 v94;
  NSString *v95;
  char is_mix;
  int64x2_t *v97;
  unint64_t *v98;
  unint64_t v99;
  const Espresso::base_kernel::validate_for_engine_args_t *v100;
  unint64_t *v101;
  unint64_t v102;
  __int128 v103;
  const void *v104;
  uint64_t v105;
  BOOL v107;
  int64x2_t *v108;
  unint64_t *v109;
  unint64_t v110;
  int v111;
  _BOOL4 v114;
  int v115;
  uint64_t v116;
  __CFString *v117;
  __CFString *crop_resize_mode_string;
  const __CFString *v119;
  int64x2_t *v120;
  unint64_t *v121;
  unint64_t v122;
  int64x2_t *v123;
  unint64_t *v124;
  unint64_t v125;
  unsigned int v126;
  unsigned int v127;
  __CFString *v128;
  char v129;
  int64x2_t *v130;
  __int128 v131;
  __int128 *v132;
  uint64_t v133;
  int64x2_t *v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  __int128 v138;
  int v139;
  int64x2_t *v140;
  unint64_t *v141;
  unint64_t v142;
  std::string *v143;
  uint64_t **v144;
  int64x2_t *v145;
  unint64_t *v146;
  unint64_t v147;
  _BOOL4 v148;
  uint64_t v149;
  int64x2_t *v150;
  std::__shared_weak_count *v151;
  int64x2_t *v152[2];
  std::string v153;
  std::string v154;
  int64x2_t *v155[2];
  uint64_t v156;
  uint64_t v157;
  std::string v158;
  int64x2_t *v159[3];
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  __CFString *v164;
  __int128 v165;
  __int128 v166;
  uint64_t v167;
  std::string v168;
  _QWORD v169[3];
  _QWORD v170[4];
  const __CFString *v171;
  const __CFString *v172;
  const __CFString *v173;
  const __CFString *v174;
  const __CFString *v175;
  const __CFString *v176;
  const __CFString *v177;
  const __CFString *v178;
  const __CFString *v179;
  int v180;
  uint64_t v181;
  _QWORD v182[2];
  int64x2_t *v183[2];
  int64x2_t *v184[2];
  int64x2_t *v185[2];
  _OWORD v186[2];
  uint64_t v187;
  void *v188;
  void *v189;
  uint64_t v190;
  Espresso::net *v191[2];
  int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  int v197;
  int64x2_t *v198[2];
  int64x2_t *v199[2];
  int64x2_t *v200[2];
  _OWORD v201[2];
  uint64_t v202;
  void *v203;
  void *v204;
  uint64_t v205;
  __int128 v206[2];
  uint64_t v207;
  void *v208;
  void *v209;
  uint64_t v210;
  _OWORD v211[2];
  uint64_t v212;
  void *v213;
  void *v214;
  uint64_t v215;
  int64x2_t *v216;
  std::__shared_weak_count *v217;
  int64x2_t *v218;
  std::__shared_weak_count *v219;
  int64x2_t *v220;
  std::__shared_weak_count *v221;
  char v222;
  void *v223[2];
  char v224;
  _OWORD v225[2];
  uint64_t v226;
  void *__p;
  void *v228;
  uint64_t v229;
  Espresso::net *v230;
  std::__shared_weak_count *v231;
  int v232;
  int v233;
  int v234;
  int v235;
  int v236;
  int v237;
  _OWORD v238[2];
  uint64_t v239;
  void *v240;
  void *v241;
  uint64_t v242;
  Espresso::net *v243;
  std::__shared_weak_count *v244;
  _DWORD v245[8];
  int64x2_t *v246;
  std::__shared_weak_count *v247;
  Espresso::net *v248;
  std::__shared_weak_count *v249;

  v6 = a3[6];
  v248 = 0;
  v249 = 0;
  v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 10);
  if (v7 && (v249 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = (Espresso::net *)*((_QWORD *)v6 + 9);
    v248 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v8 + 472);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (!Espresso::ANECompilerEngine::is_mix_e((Espresso::ANECompilerEngine *)v9, v10)
    || (char *)a3[1] - (char *)*a3 == 64)
  {
    v12 = v248;
    v11 = v249;
    v243 = v248;
    v244 = v249;
    if (v249)
    {
      p_shared_owners = (unint64_t *)&v249->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = a3[3];
    v16 = *((_QWORD *)v15 + 4);
    v17 = v15[1];
    v238[0] = *v15;
    v238[1] = v17;
    v239 = v16;
    v240 = 0;
    v241 = 0;
    v242 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v240, *((const void **)v15 + 5), *((_QWORD *)v15 + 6), (uint64_t)(*((_QWORD *)v15 + 6) - *((_QWORD *)v15 + 5)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v245, v12, (const Espresso::layer_shape *)v238, 1);
    if (v240)
    {
      v241 = v240;
      operator delete(v240);
    }
    if (v11)
    {
      v18 = (unint64_t *)&v11->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v21 = v248;
    v20 = v249;
    v230 = v248;
    v231 = v249;
    if (v249)
    {
      v22 = (unint64_t *)&v249->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v24 = *a3;
    v25 = *((_QWORD *)*a3 + 4);
    v26 = (*a3)[1];
    v225[0] = **a3;
    v225[1] = v26;
    v226 = v25;
    __p = 0;
    v229 = 0;
    v228 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v24 + 5), *((_QWORD *)v24 + 6), (uint64_t)(*((_QWORD *)v24 + 6) - *((_QWORD *)v24 + 5)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v232, v21, (const Espresso::layer_shape *)v225, 1);
    if (__p)
    {
      v228 = __p;
      operator delete(__p);
    }
    if (v20)
    {
      v27 = (unint64_t *)&v20->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v29 = v9;
    if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v232, v29))
    {
      if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v245, v29))
      {
        v222 = 1;
        std::string::basic_string[abi:ne180100]<0>(v223, "Success");
      }
      else
      {
        v222 = 0;
        std::string::basic_string[abi:ne180100]<0>(v223, "crop_and_resize_kernel: output blob dimensions exceed ANE limit.");
      }
    }
    else
    {
      v222 = 0;
      std::string::basic_string[abi:ne180100]<0>(v223, "crop_and_resize_kernel: input blob dimensions exceed ANE limit.");
    }

    if (v222)
    {
      if (*(float *)(a1 + 308) != 1.0)
      {
        v40 = (std::__shared_weak_count *)a2[1];
        v218 = *a2;
        v219 = v40;
        if (v40)
        {
          v41 = (unint64_t *)&v40->__shared_owners_;
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
        }
        std::string::basic_string[abi:ne180100]<0>(&v158, "crop_and_resize_kernel: only spatial scale == 1.0 is supported");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v168, (__int128 *)&v158, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(&v218, (Espresso::base_kernel::validate_for_engine_warning_t *)&v168);
        v43 = (std::__shared_weak_count *)v171;
        if (v171)
        {
          p_info = (unint64_t *)&v171->info;
          do
            v45 = __ldaxr(p_info);
          while (__stlxr(v45 - 1, p_info));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        v164 = (__CFString *)v170;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v164);
        v164 = (__CFString *)v169;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v164);
        if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v168.__r_.__value_.__l.__data_);
        if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v158.__r_.__value_.__l.__data_);
        v46 = v219;
        if (!v219)
          goto LABEL_100;
        v47 = (unint64_t *)&v219->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        goto LABEL_98;
      }
      if (*(_BYTE *)(a1 + 312))
      {
        v56 = (std::__shared_weak_count *)a2[1];
        v216 = *a2;
        v217 = v56;
        if (v56)
        {
          v57 = (unint64_t *)&v56->__shared_owners_;
          do
            v58 = __ldxr(v57);
          while (__stxr(v58 + 1, v57));
        }
        std::string::basic_string[abi:ne180100]<0>(&v158, "crop_and_resize_kernel: position sensitive is not supported");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v168, (__int128 *)&v158, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(&v216, (Espresso::base_kernel::validate_for_engine_warning_t *)&v168);
        v59 = (std::__shared_weak_count *)v171;
        if (v171)
        {
          v60 = (unint64_t *)&v171->info;
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        v164 = (__CFString *)v170;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v164);
        v164 = (__CFString *)v169;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v164);
        if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v168.__r_.__value_.__l.__data_);
        if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v158.__r_.__value_.__l.__data_);
        v46 = v217;
        if (!v217)
          goto LABEL_100;
        v62 = (unint64_t *)&v217->__shared_owners_;
        do
          v48 = __ldaxr(v62);
        while (__stlxr(v48 - 1, v62));
        goto LABEL_98;
      }
      v67 = *a3;
      v68 = ((char *)a3[1] - (char *)*a3) >> 6;
      if (v68 == 2)
      {
        if (*(_DWORD *)(a1 + 304) >= 2u)
        {
          v86 = a2[1];
          v199[0] = *a2;
          v199[1] = v86;
          if (v86)
          {
            v87 = &v86->u64[1];
            do
              v88 = __ldxr(v87);
            while (__stxr(v88 + 1, v87));
          }
          std::string::basic_string[abi:ne180100]<0>(&v158, "crop_and_resize_kernel: CENTER_SIZE modes achieve less PSNR ranging between 30 and 60 than CORNER modes. Falling back as a precaution.");
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v168, (__int128 *)&v158, (uint64_t)a3, 0);
          Espresso::emit_kernel_validation_warning(v199, (Espresso::base_kernel::validate_for_engine_warning_t *)&v168);
          Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v168.__r_.__value_.__l.__data_);
          if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v158.__r_.__value_.__l.__data_);
          v78 = v199;
        }
        else if (*(_DWORD *)(a1 + 300))
        {
          v75 = a2[1];
          v198[0] = *a2;
          v198[1] = v75;
          if (v75)
          {
            v76 = &v75->u64[1];
            do
              v77 = __ldxr(v76);
            while (__stxr(v77 + 1, v76));
          }
          std::string::basic_string[abi:ne180100]<0>(&v158, "crop_and_resize_kernel: have not tested and enabled other sampling modes than TF_CROP_RESIZE");
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v168, (__int128 *)&v158, (uint64_t)a3, 0);
          Espresso::emit_kernel_validation_warning(v198, (Espresso::base_kernel::validate_for_engine_warning_t *)&v168);
          Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v168.__r_.__value_.__l.__data_);
          if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v158.__r_.__value_.__l.__data_);
          v78 = v198;
        }
        else
        {
          v100 = v248;
          v191[0] = v248;
          v191[1] = (Espresso::net *)v249;
          if (v249)
          {
            v101 = (unint64_t *)&v249->__shared_owners_;
            do
              v102 = __ldxr(v101);
            while (__stxr(v102 + 1, v101));
            v67 = *a3;
          }
          v103 = v67[5];
          v186[0] = v67[4];
          v186[1] = v103;
          v104 = (const void *)*((_QWORD *)v67 + 13);
          v187 = *((_QWORD *)v67 + 12);
          v188 = 0;
          v190 = 0;
          v189 = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v188, v104, *((_QWORD *)v67 + 14), (uint64_t)(*((_QWORD *)v67 + 14) - (_QWORD)v104) >> 2);
          Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v192, v191[0], (const Espresso::layer_shape *)v186, 1);
          if (v188)
          {
            v189 = v188;
            operator delete(v188);
          }
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v191);
          v105 = v234;
          v107 = v232 <= 1 && v234 <= 1 && v233 <= 1;
          if (v107 || v237)
          {
            if (v197)
            {
              v111 = v193;
              v114 = v232 == 1 && v192 > 1 && v193 == 4;
              v115 = v193 == 5 || v114;
              v116 = *(unsigned int *)(a1 + 300);
              if (v116 < 5)
              {
                v148 = v114;
                v149 = v192;
                v117 = off_1E2DD5AB0[v116];
                Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)v182, (NSString *)(a1 + 360), v29);
                ANECCropResizeLayerDescInitialize();
                crop_resize_mode_string = get_crop_resize_mode_string(*(_DWORD *)(a1 + 304), v115);
                v181 = *(_QWORD *)(a1 + 284);
                v180 = 0;
                v168.__r_.__value_.__r.__words[0] = (std::string::size_type)crop_resize_mode_string;
                v168.__r_.__value_.__l.__size_ = (std::string::size_type)CFSTR("Height");
                v168.__r_.__value_.__r.__words[2] = (std::string::size_type)v117;
                v169[0] = CFSTR("Width");
                v169[1] = v117;
                v169[2] = CFSTR("Height");
                v170[0] = CFSTR("Linear");
                v170[1] = CFSTR("Width");
                v170[2] = CFSTR("Linear");
                v170[3] = CFSTR("Height");
                v171 = CFSTR("Replication");
                v172 = CFSTR("Width");
                v173 = CFSTR("Replication");
                v174 = CFSTR("Height");
                v177 = CFSTR("Width");
                if (*(_BYTE *)(a1 + 296))
                {
                  v175 = CFSTR("RangeZeroToOne");
                  v178 = CFSTR("RangeZeroToOne");
                  v119 = CFSTR("NormalizedReflect");
                }
                else
                {
                  v119 = CFSTR("NonNormalized");
                }
                v176 = v119;
                v179 = v119;
                ANECTensorDescInitialize();
                ANECTensorDescInitialize();
                v126 = Espresso::ANECompilerEngine::bottom_compute_path((Espresso::ANECompilerEngine *)a3, v100, 0);
                v127 = Espresso::ANECompilerEngine::bottom_compute_path((Espresso::ANECompilerEngine *)a3, v100, (const Espresso::net *)1);
                if (v126 <= 7 && ((0x97u >> v126) & 1) != 0)
                {
                  v128 = off_1E2DD5AD8[v126];
                  v129 = 1;
                }
                else
                {
                  v128 = 0;
                  v129 = 0;
                }
                if (v127 <= 7 && ((0x97u >> v127) & 1) != 0 && (v129 & 1) != 0)
                {
                  v130 = (int64x2_t *)off_1E2DD5AD8[v127];
                  if (v148)
                  {
                    v111 = 5;
                    v193 = 5;
                  }
                  *(_QWORD *)&v131 = v235;
                  *((_QWORD *)&v131 + 1) = v236;
                  v166 = v131;
                  v164 = v128;
                  v167 = v105;
                  *(_QWORD *)&v131 = v232;
                  *((_QWORD *)&v131 + 1) = v233;
                  v165 = v131;
                  *(_QWORD *)&v131 = v195;
                  *((_QWORD *)&v131 + 1) = v196;
                  v162 = v131;
                  v163 = v194;
                  v159[2] = v130;
                  v160 = v149;
                  v161 = v111;
                  if (v194 >= 2)
                  {
                    v132 = a3[6];
                    v133 = *(_QWORD *)(*(_QWORD *)v132 + 224 * (_QWORD)a3[9] + 136);
                    if (*(char *)(v133 + 47) < 0)
                    {
                      std::string::__init_copy_ctor_external(&v158, *(const std::string::value_type **)(v133 + 24), *(_QWORD *)(v133 + 32));
                      v132 = a3[6];
                    }
                    else
                    {
                      v158 = *(std::string *)(v133 + 24);
                    }
                    v153.__r_.__value_.__r.__words[0] = (std::string::size_type)&v158;
                    v137 = *(_QWORD *)a3[6]
                         + 224
                         * std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v132 + 24, &v158, (__int128 **)&v153)[7];
                    if (*(char *)(v137 + 71) < 0)
                    {
                      std::string::__init_copy_ctor_external(&v153, *(const std::string::value_type **)(v137 + 48), *(_QWORD *)(v137 + 56));
                    }
                    else
                    {
                      v138 = *(_OWORD *)(v137 + 48);
                      v153.__r_.__value_.__r.__words[2] = *(_QWORD *)(v137 + 64);
                      *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v138;
                    }
                    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v153, "load_constant"))
                    {
                      v160 = v163;
                      v163 = 1;
                    }
                    if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v153.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v158.__r_.__value_.__l.__data_);
                  }
                  v156 = 0;
                  v157 = 0;
                  v139 = ANECValidateCropResizeLayer();
                  v39 = v139 == 0;
                  if (v139)
                  {
                    v140 = a2[1];
                    v155[0] = *a2;
                    v155[1] = v140;
                    if (v140)
                    {
                      v141 = &v140->u64[1];
                      do
                        v142 = __ldxr(v141);
                      while (__stxr(v142 + 1, v141));
                    }
                    std::to_string(&v154, v139);
                    v143 = std::string::insert(&v154, 0, "crop_and_resize_kernel: ANECValidateCropResizeLayer failed with status ");
                    v153 = *v143;
                    v143->__r_.__value_.__l.__size_ = 0;
                    v143->__r_.__value_.__r.__words[2] = 0;
                    v143->__r_.__value_.__r.__words[0] = 0;
                    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v158, (__int128 *)&v153, (uint64_t)a3, 0);
                    Espresso::emit_kernel_validation_warning(v155, (Espresso::base_kernel::validate_for_engine_warning_t *)&v158);
                    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v158.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v153.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v154.__r_.__value_.__l.__data_);
                    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v155);
                    Espresso::ANECompilerEngine::violations_from_alternates<ANECCropResizeLayerDescAlternate>((uint64_t)&v153, v156, v157);
                    v144 = (uint64_t **)v153.__r_.__value_.__r.__words[2];
                    if (v153.__r_.__value_.__r.__words[2])
                    {
                      do
                      {
                        v145 = a2[1];
                        v152[0] = *a2;
                        v152[1] = v145;
                        if (v145)
                        {
                          v146 = &v145->u64[1];
                          do
                            v147 = __ldxr(v146);
                          while (__stxr(v147 + 1, v146));
                        }
                        std::string::basic_string[abi:ne180100]<0>(&v154, (char *)objc_msgSend(objc_retainAutorelease(v144[2]), "UTF8String"));
                        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v158, (__int128 *)&v154, (uint64_t)a3, 0);
                        Espresso::emit_kernel_validation_warning(v152, (Espresso::base_kernel::validate_for_engine_warning_t *)&v158);
                        Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v158.__r_.__value_.__l.__data_);
                        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v154.__r_.__value_.__l.__data_);
                        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v152);
                        v144 = (uint64_t **)*v144;
                      }
                      while (v144);
                    }
                    std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v153);
                  }
                }
                else
                {
                  v134 = a2[1];
                  v159[0] = *a2;
                  v159[1] = v134;
                  if (v134)
                  {
                    v135 = &v134->u64[1];
                    do
                      v136 = __ldxr(v135);
                    while (__stxr(v136 + 1, v135));
                  }
                  std::string::basic_string[abi:ne180100]<0>(&v153, "crop_and_resize_kernel: ANECValidateCropResizeLayer invalid compute path.");
                  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v158, (__int128 *)&v153, (uint64_t)a3, 0);
                  Espresso::emit_kernel_validation_warning(v159, (Espresso::base_kernel::validate_for_engine_warning_t *)&v158);
                  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v158.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v153.__r_.__value_.__l.__data_);
                  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v159);
                  v39 = 0;
                }
                std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v182);
                goto LABEL_101;
              }
              v123 = a2[1];
              v183[0] = *a2;
              v183[1] = v123;
              if (v123)
              {
                v124 = &v123->u64[1];
                do
                  v125 = __ldxr(v124);
                while (__stxr(v125 + 1, v124));
              }
              std::string::basic_string[abi:ne180100]<0>(&v158, "crop_and_resize_kernel: crop resize unsupported sampling grid.");
              Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v168, (__int128 *)&v158, (uint64_t)a3, 0);
              Espresso::emit_kernel_validation_warning(v183, (Espresso::base_kernel::validate_for_engine_warning_t *)&v168);
              Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v168.__r_.__value_.__l.__data_);
              if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v158.__r_.__value_.__l.__data_);
              v78 = v183;
            }
            else
            {
              v120 = a2[1];
              v184[0] = *a2;
              v184[1] = v120;
              if (v120)
              {
                v121 = &v120->u64[1];
                do
                  v122 = __ldxr(v121);
                while (__stxr(v122 + 1, v121));
              }
              std::string::basic_string[abi:ne180100]<0>(&v158, "crop_and_resize_kernel: unimplemented bottom 1 layout NCDHW for crop and resize. Transposes required to match ANE expectations");
              Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v168, (__int128 *)&v158, (uint64_t)a3, 0);
              Espresso::emit_kernel_validation_warning(v184, (Espresso::base_kernel::validate_for_engine_warning_t *)&v168);
              Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v168.__r_.__value_.__l.__data_);
              if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v158.__r_.__value_.__l.__data_);
              v78 = v184;
            }
          }
          else
          {
            v108 = a2[1];
            v185[0] = *a2;
            v185[1] = v108;
            if (v108)
            {
              v109 = &v108->u64[1];
              do
                v110 = __ldxr(v109);
              while (__stxr(v110 + 1, v109));
            }
            std::string::basic_string[abi:ne180100]<0>(&v158, "crop_and_resize_kernel: unimplemented bottom 0 layout NCDHW for crop and resize. Transposes required to match ANE expectations");
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v168, (__int128 *)&v158, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(v185, (Espresso::base_kernel::validate_for_engine_warning_t *)&v168);
            Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v168.__r_.__value_.__l.__data_);
            if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v158.__r_.__value_.__l.__data_);
            v78 = v185;
          }
        }
        goto LABEL_211;
      }
      if (v68 == 1)
      {
        v69 = (uint64_t)v248;
        v70 = *((_QWORD *)v67 + 4);
        v71 = v67[1];
        v211[0] = *v67;
        v211[1] = v71;
        v212 = v70;
        v213 = 0;
        v215 = 0;
        v214 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v213, *((const void **)v67 + 5), *((_QWORD *)v67 + 6), (uint64_t)(*((_QWORD *)v67 + 6) - *((_QWORD *)v67 + 5)) >> 2);
        v72 = *(_QWORD *)a3[6] + 224 * (_QWORD)a3[9];
        v73 = *(_QWORD *)(v72 + 136);
        if (*(_QWORD *)(v72 + 144) == v73)
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        v74 = Espresso::ANECompilerEngine::mix_crop_and_resize_kernel::single_input_mode_supported_by_anec(a1, v69, (uint64_t)v211, v73);
        if (v213)
        {
          v214 = v213;
          operator delete(v213);
        }
        if (v74)
          goto LABEL_115;
        v89 = *a3;
        v90 = *((_QWORD *)*a3 + 4);
        v91 = (*a3)[1];
        v206[0] = **a3;
        v206[1] = v91;
        v207 = v90;
        v208 = 0;
        v210 = 0;
        v209 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v208, *((const void **)v89 + 5), *((_QWORD *)v89 + 6), (uint64_t)(*((_QWORD *)v89 + 6) - *((_QWORD *)v89 + 5)) >> 2);
        v92 = a3[3];
        v93 = *((_QWORD *)v92 + 4);
        v94 = v92[1];
        v201[0] = *v92;
        v201[1] = v94;
        v202 = v93;
        v203 = 0;
        v205 = 0;
        v204 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v203, *((const void **)v92 + 5), *((_QWORD *)v92 + 6), (uint64_t)(*((_QWORD *)v92 + 6) - *((_QWORD *)v92 + 5)) >> 2);
        if (Espresso::ANECompilerEngine::mix_crop_and_resize_kernel::should_use_workaround(a1, (uint64_t)&v248, v206, v201))
        {
          is_mix = Espresso::ANECompilerEngine::is_mix((Espresso::ANECompilerEngine *)v29, v95);
          if (v203)
          {
            v204 = v203;
            operator delete(v203);
          }
          if (v208)
          {
            v209 = v208;
            operator delete(v208);
          }
          if ((is_mix & 1) == 0)
          {
LABEL_115:
            v39 = 1;
LABEL_101:
            if (v224 < 0)
              operator delete(v223[0]);
            goto LABEL_103;
          }
        }
        else
        {
          if (v203)
          {
            v204 = v203;
            operator delete(v203);
          }
          if (v208)
          {
            v209 = v208;
            operator delete(v208);
          }
        }
        v97 = a2[1];
        v200[0] = *a2;
        v200[1] = v97;
        if (v97)
        {
          v98 = &v97->u64[1];
          do
            v99 = __ldxr(v98);
          while (__stxr(v99 + 1, v98));
        }
        std::string::basic_string[abi:ne180100]<0>(&v158, "crop_and_resize_kernel: ANECValidateResizeLayer failed");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v168, (__int128 *)&v158, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(v200, (Espresso::base_kernel::validate_for_engine_warning_t *)&v168);
        Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v168.__r_.__value_.__l.__data_);
        if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v158.__r_.__value_.__l.__data_);
        v78 = v200;
LABEL_211:
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v78);
LABEL_100:
        v39 = 0;
        goto LABEL_101;
      }
      v79 = (std::__shared_weak_count *)a2[1];
      v150 = *a2;
      v151 = v79;
      if (v79)
      {
        v80 = (unint64_t *)&v79->__shared_owners_;
        do
          v81 = __ldxr(v80);
        while (__stxr(v81 + 1, v80));
      }
      std::string::basic_string[abi:ne180100]<0>(&v158, "crop_and_resize_kernel: unsupported bottom count.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v168, (__int128 *)&v158, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v150, (Espresso::base_kernel::validate_for_engine_warning_t *)&v168);
      v82 = (std::__shared_weak_count *)v171;
      if (v171)
      {
        v83 = (unint64_t *)&v171->info;
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      v164 = (__CFString *)v170;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v164);
      v164 = (__CFString *)v169;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v164);
      if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v168.__r_.__value_.__l.__data_);
      if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v158.__r_.__value_.__l.__data_);
      v46 = v151;
      if (!v151)
        goto LABEL_100;
      v85 = (unint64_t *)&v151->__shared_owners_;
      do
        v48 = __ldaxr(v85);
      while (__stlxr(v48 - 1, v85));
    }
    else
    {
      v49 = (std::__shared_weak_count *)a2[1];
      v220 = *a2;
      v221 = v49;
      if (v49)
      {
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
      }
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v168, (__int128 *)v223, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(&v220, (Espresso::base_kernel::validate_for_engine_warning_t *)&v168);
      v52 = (std::__shared_weak_count *)v171;
      if (v171)
      {
        v53 = (unint64_t *)&v171->info;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      v158.__r_.__value_.__r.__words[0] = (std::string::size_type)v170;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
      v158.__r_.__value_.__r.__words[0] = (std::string::size_type)v169;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
      if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v168.__r_.__value_.__l.__data_);
      v46 = v221;
      if (!v221)
        goto LABEL_100;
      v55 = (unint64_t *)&v221->__shared_owners_;
      do
        v48 = __ldaxr(v55);
      while (__stlxr(v48 - 1, v55));
    }
LABEL_98:
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
    goto LABEL_100;
  }
  v30 = (std::__shared_weak_count *)a2[1];
  v246 = *a2;
  v247 = v30;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  std::string::basic_string[abi:ne180100]<0>(&v158, "crop_and_resize_kernel: not enabled on requested architecture.");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v168, (__int128 *)&v158, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(&v246, (Espresso::base_kernel::validate_for_engine_warning_t *)&v168);
  v33 = (std::__shared_weak_count *)v171;
  if (v171)
  {
    v34 = (unint64_t *)&v171->info;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v164 = (__CFString *)v170;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v164);
  v164 = (__CFString *)v169;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v164);
  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v168.__r_.__value_.__l.__data_);
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v158.__r_.__value_.__l.__data_);
  v36 = v247;
  if (v247)
  {
    v37 = (unint64_t *)&v247->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = 0;
LABEL_103:

  v63 = v249;
  if (v249)
  {
    v64 = (unint64_t *)&v249->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  return v39;
}

void sub_191742E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  uint64_t v33;

  if (a32 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x240]);
  if (SLOBYTE(STACK[0x42F]) < 0)
    operator delete((void *)STACK[0x418]);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v33 - 112);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_crop_and_resize_kernel::compile(Espresso::ANECompilerEngine::mix_crop_and_resize_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  std::__shared_weak_count *v6;
  const Espresso::net *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  __CFString *v13;
  void *v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  std::string *v18;
  std::string *v19;
  const Espresso::net *v20;
  uint64_t v21;
  char *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  char *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  const Espresso::net *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  _BOOL4 v42;
  size_t v45;
  std::string *p_str;
  const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *v47;
  __int128 v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *size;
  unint64_t *v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t i;
  size_t v63;
  std::string *v64;
  const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *v65;
  void *v66;
  __CFString *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  __CFString *v71;
  void *v72;
  void *v73;
  int v74;
  id v75;
  void *v76;
  const __CFString *v77;
  const __CFString *v78;
  void *v79;
  const __CFString *v80;
  const __CFString *v81;
  void *v82;
  __int128 v83;
  __int128 v84;
  id v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  std::string *v90;
  std::string *v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  std::string::size_type v108;
  unint64_t *v109;
  unint64_t v110;
  float v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::string::size_type v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  int *v127;
  _WORD *v128;
  int v129;
  __int128 v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t v141;
  int *v142;
  _WORD *v143;
  int v144;
  int v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  void *v154;
  id v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  uint64_t weights_file_index;
  void *v161;
  void *v162;
  __int128 v163;
  unint64_t *v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  void *v169;
  void *v170;
  void *v171;
  uint64_t v172;
  void *v173;
  void *v174;
  std::string *v175;
  std::string *v176;
  uint64_t v177;
  char v178;
  std::string::size_type v179;
  std::string::size_type v180;
  std::string::size_type v181;
  std::string *v182;
  std::string *v183;
  const std::string::value_type *data;
  __int128 v185;
  __CFString *v186;
  std::string *v187;
  std::string *v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  unint64_t *v205;
  unint64_t v206;
  unint64_t *v207;
  unint64_t v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  int *v217;
  uint64_t j;
  float v219;
  int v220;
  _WORD *v221;
  int v222;
  std::runtime_error *exception;
  int *v225;
  uint64_t k;
  int v227;
  int v228;
  int v229;
  unsigned int v230;
  int v231;
  Espresso *v232;
  const char *v233;
  float v234;
  NSObject *v236;
  double v237;
  uint64_t v238;
  _WORD *v239;
  int v240;
  uint64_t v242;
  unsigned int v243;
  id obj;
  std::__shared_weak_count *v245;
  std::__shared_weak_count *v246;
  _OWORD v247[5];
  std::string __str;
  char v249[40];
  void *v250;
  void *v251;
  const Espresso::net *v252;
  std::__shared_weak_count *v253;
  std::string::size_type v254;
  std::__shared_weak_count *v255;
  char v256[40];
  void *__p;
  void *v258;
  const Espresso::net *v259;
  std::__shared_weak_count *v260;
  _OWORD v261[5];
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  void *v265[2];
  char v266;
  uint64_t v267;
  _QWORD v268[6];
  char v269;
  id v270;
  __CFString *v271;
  id v272[2];
  uint64_t v273;
  std::string *v274;
  unint64_t v275;
  uint64_t v276;
  std::__shared_weak_count *v277;
  const Espresso::net *v278;
  std::__shared_weak_count *v279;
  __int128 v280;
  uint64_t v281;
  std::__shared_weak_count *v282;
  __int128 v283;
  uint64_t v284;
  std::__shared_weak_count *v285;
  uint64_t v286;
  std::__shared_weak_count *v287;
  uint64_t v288;
  std::__shared_weak_count *v289;
  uint64_t v290;
  std::__shared_weak_count *v291;
  unsigned int v292;
  int v293;
  std::string v294;
  std::string v295;
  std::vector<std::string> v296;
  void *v297;
  char v298;
  id v299;
  __CFString *v300;
  id v301;
  std::string v302;
  unint64_t v303;
  unint64_t *v304;
  std::vector<std::string> v305;
  void *v306;
  char v307;
  id v308;
  __CFString *v309;
  id v310;
  uint64_t v311;
  _BYTE v312[40];
  uint64_t v313;

  v313 = *MEMORY[0x1E0C80C00];
  v279 = 0;
  v278 = 0;
  v6 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (v6 && (v279 = std::__shared_weak_count::lock(v6)) != 0)
  {
    v7 = (const Espresso::net *)*((_QWORD *)a2 + 1);
    v278 = v7;
  }
  else
  {
    v7 = 0;
  }
  v302.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v7 + 136, (unsigned __int8 *)a3, (__int128 **)&v302);
  v9 = (std::__shared_weak_count *)*((_QWORD *)v8 + 6);
  v276 = *((_QWORD *)v8 + 5);
  v277 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v274 = 0;
  v273 = 0;
  v275 = 0;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v265, (id *)a3);
  obj = (id)objc_opt_new();
  v262 = 0;
  v263 = 0;
  v264 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v262, *((_QWORD *)a3 + 6), *((_QWORD *)a3 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a3 + 7) - *((_QWORD *)a3 + 6)) >> 3));
  v12 = 0xAAAAAAAAAAAAAAABLL * ((v263 - v262) >> 3);
  if (v12 == 2)
  {
    v20 = v278;
    v21 = (uint64_t)v278 + 136;
    v302.__r_.__value_.__r.__words[0] = *((_QWORD *)a3 + 6);
    v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v278 + 136, (unsigned __int8 *)v302.__r_.__value_.__l.__data_, (__int128 **)&v302);
    v24 = *((_QWORD *)v22 + 5);
    v23 = (std::__shared_weak_count *)*((_QWORD *)v22 + 6);
    v286 = v24;
    v287 = v23;
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v302.__r_.__value_.__r.__words[0] = *((_QWORD *)a3 + 6) + 24;
    v27 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v21, (unsigned __int8 *)v302.__r_.__value_.__l.__data_, (__int128 **)&v302);
    v28 = (std::__shared_weak_count *)*((_QWORD *)v27 + 6);
    v284 = *((_QWORD *)v27 + 5);
    v285 = v28;
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    v31 = v279;
    v259 = v20;
    v260 = v279;
    if (v279)
    {
      v32 = (unint64_t *)&v279->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    Espresso::abstract_blob_container::shape(v256, v24);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v288, v20, (const Espresso::layer_shape *)v256, 1);
    if (__p)
    {
      v258 = __p;
      operator delete(__p);
    }
    if (v31)
    {
      v34 = (unint64_t *)&v31->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v36 = v278;
    v37 = v279;
    v252 = v278;
    v253 = v279;
    if (v279)
    {
      v38 = (unint64_t *)&v279->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    Espresso::abstract_blob_container::shape(v249, v284);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v254, v36, (const Espresso::layer_shape *)v249, 1);
    if (v250)
    {
      v251 = v250;
      operator delete(v250);
    }
    if (v37)
    {
      v40 = (unint64_t *)&v37->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v42 = HIDWORD(v254) == 5;
    if ((_DWORD)v288 == 1 && (int)v254 >= 2 && HIDWORD(v254) == 4)
    {
      memset(v312, 0, sizeof(v312));
      if (*((char *)a3 + 23) >= 0)
        v45 = *((unsigned __int8 *)a3 + 23);
      else
        v45 = *((_QWORD *)a3 + 1);
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, v45 + 17);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (v45)
      {
        if (*((char *)a3 + 23) >= 0)
          v47 = a3;
        else
          v47 = *(const Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)a3;
        memmove(p_str, v47, v45);
      }
      strcpy((char *)p_str + v45, "@__implicit_batch");
      std::string::operator=((std::string *)v312, &__str);
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v302, 1, 1, 1, 1);
      v48 = *(_OWORD *)&v302.__r_.__value_.__l.__data_;
      *(_OWORD *)&v302.__r_.__value_.__l.__data_ = 0uLL;
      v49 = *(std::__shared_weak_count **)&v312[32];
      *(_OWORD *)&v312[24] = v48;
      if (v49)
      {
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      size = (std::__shared_weak_count *)v302.__r_.__value_.__l.__size_;
      if (v302.__r_.__value_.__l.__size_)
      {
        v53 = (unint64_t *)(v302.__r_.__value_.__l.__size_ + 8);
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      **(_DWORD **)(*(_QWORD *)&v312[24] + 24) = 0;
      v302.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
      v55 = std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 34, &__str, (__int128 **)&v302);
      std::string::operator=((std::string *)(v55 + 56), (const std::string *)v312);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v55 + 10, *(uint64_t *)&v312[24], *(uint64_t *)&v312[32]);
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v302.__r_.__value_.__l.__data_, (id *)a3);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v294, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      else
        v294 = __str;
      v60 = *((_QWORD *)a3 + 6);
      if (*(char *)(v60 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v295, *(const std::string::value_type **)(v60 + 24), *(_QWORD *)(v60 + 32));
      }
      else
      {
        v61 = *(_OWORD *)(v60 + 24);
        v295.__r_.__value_.__r.__words[2] = *(_QWORD *)(v60 + 40);
        *(_OWORD *)&v295.__r_.__value_.__l.__data_ = v61;
      }
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v305, &v294, (__int128 *)&v296, 2uLL);
      for (i = 0; i != -6; i -= 3)
      {
        if (SHIBYTE(v295.__r_.__value_.__r.__words[i + 2]) < 0)
          operator delete(*(void **)((char *)&v294 + i * 8 + 24));
      }
      if (*((char *)a3 + 23) >= 0)
        v63 = *((unsigned __int8 *)a3 + 23);
      else
        v63 = *((_QWORD *)a3 + 1);
      std::string::basic_string[abi:ne180100]((uint64_t)&v294, v63 + 9);
      if ((v294.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v64 = &v294;
      else
        v64 = (std::string *)v294.__r_.__value_.__r.__words[0];
      if (v63)
      {
        if (*((char *)a3 + 23) >= 0)
          v65 = a3;
        else
          v65 = *(const Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)a3;
        memmove(v64, v65, v63);
      }
      strcpy((char *)v64 + v63, "@__concat");
      if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v302.__r_.__value_.__l.__data_);
      v302 = v294;
      v66 = (void *)objc_opt_new();
      v67 = v309;
      v309 = CFSTR("Concat");

      objc_msgSend(v66, "setObject:forKeyedSubscript:", CFSTR("Channel"), CFSTR("Dimension"));
      LODWORD(v311) = 5;
      objc_storeStrong(&v310, v66);
      Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v302);
      std::string::operator=((std::string *)(v268[0] + 24), &v302);

      if (v307 < 0)
        operator delete(v306);
      v294.__r_.__value_.__r.__words[0] = (std::string::size_type)&v305;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v294);
      v294.__r_.__value_.__r.__words[0] = (std::string::size_type)&v303;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v294);
      if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v302.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v68 = *(std::__shared_weak_count **)&v312[32];
      if (*(_QWORD *)&v312[32])
      {
        v69 = (unint64_t *)(*(_QWORD *)&v312[32] + 8);
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      if ((v312[23] & 0x80000000) != 0)
        operator delete(*(void **)v312);
      v42 = 1;
    }
    v71 = v271;
    v271 = CFSTR("CropResize");

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)this + 72));
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(obj, "setObject:forKeyedSubscript:", v72, CFSTR("OutputHeight"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)this + 71));
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(obj, "setObject:forKeyedSubscript:", v73, CFSTR("OutputWidth"));

    objc_msgSend(obj, "setObject:forKeyedSubscript:", get_crop_resize_mode_string(*((_DWORD *)this + 76), v42), CFSTR("CoordinateMode"));
    v74 = *((unsigned __int8 *)this + 296);
    v75 = obj;
    v76 = (void *)objc_opt_new();
    objc_msgSend(v76, "setObject:forKeyedSubscript:", CFSTR("Height"), CFSTR("Coordinate"));
    if (v74)
    {
      objc_msgSend(v76, "setObject:forKeyedSubscript:", CFSTR("NormalizedReflect"), CFSTR("CoordinateMode"));
      v77 = CFSTR("CoordinateRange");
      v78 = CFSTR("RangeZeroToOne");
    }
    else
    {
      v77 = CFSTR("CoordinateMode");
      v78 = CFSTR("NonNormalized");
    }
    objc_msgSend(v76, "setObject:forKeyedSubscript:", v78, v77);
    v79 = (void *)objc_opt_new();
    objc_msgSend(v79, "setObject:forKeyedSubscript:", CFSTR("Width"), CFSTR("Coordinate"));
    if (v74)
    {
      objc_msgSend(v79, "setObject:forKeyedSubscript:", CFSTR("NormalizedReflect"), CFSTR("CoordinateMode"));
      v80 = CFSTR("CoordinateRange");
      v81 = CFSTR("RangeZeroToOne");
    }
    else
    {
      v80 = CFSTR("CoordinateMode");
      v81 = CFSTR("NonNormalized");
    }
    objc_msgSend(v79, "setObject:forKeyedSubscript:", v81, v80);
    v302.__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
    v302.__r_.__value_.__l.__size_ = (std::string::size_type)v79;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v302, 2);
    v82 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v75, "setObject:forKeyedSubscript:", v82, CFSTR("CoordinateInfo"));

    v83 = *(_OWORD *)((char *)this + 328);
    v247[2] = *(_OWORD *)((char *)this + 312);
    v247[3] = v83;
    v247[4] = *(_OWORD *)((char *)this + 344);
    v84 = *(_OWORD *)((char *)this + 296);
    v247[0] = *(_OWORD *)((char *)this + 280);
    v247[1] = v84;
    set_sampling_info(v75, (uint64_t)v247);
    v85 = v75;
    v86 = (void *)objc_opt_new();
    objc_msgSend(v86, "setObject:forKeyedSubscript:", CFSTR("Height"), CFSTR("Coordinate"));
    objc_msgSend(v86, "setObject:forKeyedSubscript:", CFSTR("Replication"), CFSTR("PaddingMode"));
    v87 = (void *)objc_opt_new();
    objc_msgSend(v87, "setObject:forKeyedSubscript:", CFSTR("Width"), CFSTR("Coordinate"));
    objc_msgSend(v87, "setObject:forKeyedSubscript:", CFSTR("Replication"), CFSTR("PaddingMode"));
    v302.__r_.__value_.__r.__words[0] = (std::string::size_type)v86;
    v302.__r_.__value_.__l.__size_ = (std::string::size_type)v87;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v302, 2);
    v88 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v85, "setObject:forKeyedSubscript:", v88, CFSTR("PaddingInfo"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", 0);
    v89 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v85, "setObject:forKeyedSubscript:", v89, CFSTR("BackgroundValue"));

    objc_storeStrong(v272, obj);
    v90 = v274;
    if ((unint64_t)v274 >= v275)
    {
      v92 = 0x8E38E38E38E38E39 * (((uint64_t)v274 - v273) >> 4);
      if (v92 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v93 = 0x1C71C71C71C71C72 * ((uint64_t)(v275 - v273) >> 4);
      if (v93 <= v92 + 1)
        v93 = v92 + 1;
      if (0x8E38E38E38E38E39 * ((uint64_t)(v275 - v273) >> 4) >= 0xE38E38E38E38E3)
        v94 = 0x1C71C71C71C71C7;
      else
        v94 = v93;
      v304 = &v275;
      if (v94)
        v94 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v94);
      else
        v95 = 0;
      v302.__r_.__value_.__r.__words[0] = v94;
      v302.__r_.__value_.__l.__size_ = v94 + 144 * v92;
      v302.__r_.__value_.__r.__words[2] = v302.__r_.__value_.__l.__size_;
      v303 = v94 + 144 * v95;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v302.__r_.__value_.__l.__size_, (uint64_t)v265);
      v302.__r_.__value_.__r.__words[2] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v273, &v302);
      v91 = v274;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v302);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v274, (uint64_t)v265);
      v91 = v90 + 6;
    }
    v274 = v91;
    v96 = v285;
    if (v285)
    {
      v97 = (unint64_t *)&v285->__shared_owners_;
      do
        v98 = __ldaxr(v97);
      while (__stlxr(v98 - 1, v97));
      if (!v98)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
    v99 = v287;
    if (v287)
    {
      v100 = (unint64_t *)&v287->__shared_owners_;
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }
  }
  else
  {
    if (v12 != 1)
      Espresso::throw_exception_selector<Espresso::generic_error>("crop_and_resize_kernel: can only take input size of either 1 or 2.");
    v13 = v271;
    v271 = CFSTR("Resize");

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)this + 72));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(obj, "setObject:forKeyedSubscript:", v14, CFSTR("OutputHeight"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)this + 71));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(obj, "setObject:forKeyedSubscript:", v15, CFSTR("OutputWidth"));

    v16 = *(_OWORD *)((char *)this + 328);
    v261[2] = *(_OWORD *)((char *)this + 312);
    v261[3] = v16;
    v261[4] = *(_OWORD *)((char *)this + 344);
    v17 = *(_OWORD *)((char *)this + 296);
    v261[0] = *(_OWORD *)((char *)this + 280);
    v261[1] = v17;
    set_sampling_info(obj, (uint64_t)v261);
    objc_storeStrong(v272, obj);
    v18 = v274;
    if ((unint64_t)v274 >= v275)
    {
      v56 = 0x8E38E38E38E38E39 * (((uint64_t)v274 - v273) >> 4);
      if (v56 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v57 = 0x1C71C71C71C71C72 * ((uint64_t)(v275 - v273) >> 4);
      if (v57 <= v56 + 1)
        v57 = v56 + 1;
      if (0x8E38E38E38E38E39 * ((uint64_t)(v275 - v273) >> 4) >= 0xE38E38E38E38E3)
        v58 = 0x1C71C71C71C71C7;
      else
        v58 = v57;
      v304 = &v275;
      if (v58)
        v58 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v58);
      else
        v59 = 0;
      v302.__r_.__value_.__r.__words[0] = v58;
      v302.__r_.__value_.__l.__size_ = v58 + 144 * v56;
      v302.__r_.__value_.__r.__words[2] = v302.__r_.__value_.__l.__size_;
      v303 = v58 + 144 * v59;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v302.__r_.__value_.__l.__size_, (uint64_t)v265);
      v302.__r_.__value_.__r.__words[2] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v273, &v302);
      v19 = v274;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v302);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v274, (uint64_t)v265);
      v19 = v18 + 6;
    }
    v274 = v19;
  }
  v246 = v279;
  if (v279)
  {
    v102 = (unint64_t *)&v279->__shared_owners_;
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 1, v102));
  }
  v104 = v276;
  v245 = v277;
  if (v277)
  {
    v105 = (unint64_t *)&v277->__shared_owners_;
    do
      v106 = __ldxr(v105);
    while (__stxr(v106 + 1, v105));
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v302);
  v310 = 0;
  v309 = 0;
  v311 = 0x100000000;
  v108 = *((_QWORD *)this + 53);
  v107 = (std::__shared_weak_count *)*((_QWORD *)this + 54);
  v254 = v108;
  v255 = v107;
  if (v107)
  {
    v109 = (unint64_t *)&v107->__shared_owners_;
    do
      v110 = __ldxr(v109);
    while (__stxr(v110 + 1, v109));
  }
  if (v108
    && !*(_BYTE *)((*(uint64_t (**)(char *))(*((_QWORD *)this + 45) + 104))((char *)this + 360) + 40))
  {
    v111 = *(float *)(v104 + 112);
    __str.__r_.__value_.__r.__words[0] = v108;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v107;
    if (v107)
    {
      v112 = (unint64_t *)&v107->__shared_owners_;
      do
        v113 = __ldxr(v112);
      while (__stxr(v113 + 1, v112));
    }
    v114 = (std::__shared_weak_count *)*((_QWORD *)this + 56);
    v286 = *((_QWORD *)this + 55);
    v287 = v114;
    if (v114)
    {
      v115 = (unint64_t *)&v114->__shared_owners_;
      do
        v116 = __ldxr(v115);
      while (__stxr(v116 + 1, v115));
    }
    Espresso::ane_style_post_scale_bias((uint64_t)&__str, &v286, (uint64_t)&v288, v111);
    if (v114)
    {
      v117 = (unint64_t *)&v114->__shared_owners_;
      do
        v118 = __ldaxr(v117);
      while (__stlxr(v118 - 1, v117));
      if (!v118)
      {
        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
        std::__shared_weak_count::__release_weak(v114);
      }
    }
    v119 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
    if (__str.__r_.__value_.__l.__size_)
    {
      v120 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
      do
        v121 = __ldaxr(v120);
      while (__stlxr(v121 - 1, v120));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
      }
    }
    v122 = v254;
    v123 = *(unsigned int *)(v254 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v284, 2 * v123, 1, 1, 1);
    v124 = (int)v123;
    v283 = 0uLL;
    v125 = v123;
    v126 = *((_QWORD *)this + 55);
    if (v126)
      v125 = *(_DWORD *)(v126 + 8);
    if (!*((_BYTE *)a2 + 384))
    {
      Espresso::blob<unsigned char,1>::make(v312, 4 * v123);
      v217 = *(int **)(*(_QWORD *)v312 + 16);
      if ((int)v123 >= 1)
      {
        for (j = 0; j != v123; ++j)
        {
          v219 = *(float *)(*(_QWORD *)(v122 + 16) + j * 4);
          *(float *)&v220 = ldexp(1.0, -v292) * v219;
          v217[j] = v220;
        }
      }
      if ((_DWORD)v123)
      {
        v221 = *(_WORD **)(v284 + 16);
        do
        {
          v222 = *v217++;
          _S0 = v222;
          __asm { FCVT            H0, S0 }
          *v221++ = _S0;
          --v124;
        }
        while (v124);
      }
      v282 = 0;
      v281 = 0;
      if (*((_QWORD *)this + 55))
      {
        Espresso::blob<unsigned char,1>::make(&v294, 4 * v125);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v281, (__int128 *)&v294);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v294);
        Espresso::blob<unsigned char,1>::make(&v294, 2 * v125);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v283, (__int128 *)&v294);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v294);
        v225 = *(int **)(v281 + 16);
        if (v125 >= 1)
        {
          for (k = 0; k != v125; ++k)
          {
            if ((int)v123 - 1 >= (int)k)
              v227 = k;
            else
              v227 = v123 - 1;
            *(float *)&v228 = *(float *)(*(_QWORD *)(v290 + 16) + 4 * k)
                            * *(float *)(*(_QWORD *)(v288 + 16) + 4 * v227);
            v225[k] = v228;
            v229 = v293;
            v230 = v292;
            *(float *)&v231 = ldexp(1.0, v293 - v292) * *(float *)&v228;
            v225[k] = v231;
            v234 = ldexp(1.0, v230 - v229) * *(float *)&v231;
            if (v234 < -127.0 || v234 > 255.0)
            {
              Espresso::espresso_os_log_subsystem(v232, v233);
              v236 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v236, OS_LOG_TYPE_ERROR))
              {
                v237 = *(float *)&v225[k];
                LODWORD(v294.__r_.__value_.__l.__data_) = 134218752;
                *(double *)((char *)v294.__r_.__value_.__r.__words + 4) = v234;
                WORD2(v294.__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&v294.__r_.__value_.__r.__words[1] + 6) = v293;
                WORD1(v294.__r_.__value_.__r.__words[2]) = 1024;
                HIDWORD(v294.__r_.__value_.__r.__words[2]) = v292;
                LOWORD(v295.__r_.__value_.__l.__data_) = 2048;
                *(double *)((char *)v295.__r_.__value_.__r.__words + 2) = v237;
                _os_log_error_impl(&dword_190DAF000, v236, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", (uint8_t *)&v294, 0x22u);
              }

            }
          }
        }
        if (v125)
        {
          v238 = v125;
          v239 = *(_WORD **)(v283 + 16);
          do
          {
            v240 = *v225++;
            _S0 = v240;
            __asm { FCVT            H0, S0 }
            *v239++ = _S0;
            --v238;
          }
          while (v238);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    LODWORD(v242) = v293;
    if ((_DWORD)v123)
    {
      v127 = *(int **)(v288 + 16);
      v128 = *(_WORD **)(v284 + 16);
      do
      {
        v129 = *v127++;
        _S0 = v129;
        __asm { FCVT            H0, S0 }
        *v128++ = _S0;
        --v124;
      }
      while (v124);
    }
    if (v126)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v294, 2 * v125, 1, 1, 1);
      v134 = *(_OWORD *)&v294.__r_.__value_.__l.__data_;
      *(_OWORD *)&v294.__r_.__value_.__l.__data_ = 0uLL;
      v135 = (std::__shared_weak_count *)*((_QWORD *)&v283 + 1);
      v283 = v134;
      if (v135)
      {
        v136 = (unint64_t *)&v135->__shared_owners_;
        do
          v137 = __ldaxr(v136);
        while (__stlxr(v137 - 1, v136));
        if (!v137)
        {
          ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
          std::__shared_weak_count::__release_weak(v135);
        }
      }
      v138 = (std::__shared_weak_count *)v294.__r_.__value_.__l.__size_;
      if (v294.__r_.__value_.__l.__size_)
      {
        v139 = (unint64_t *)(v294.__r_.__value_.__l.__size_ + 8);
        do
          v140 = __ldaxr(v139);
        while (__stlxr(v140 - 1, v139));
        if (!v140)
        {
          ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
          std::__shared_weak_count::__release_weak(v138);
        }
      }
      if (v125)
      {
        v141 = v125;
        v142 = *(int **)(v290 + 16);
        v143 = *(_WORD **)(v283 + 16);
        do
        {
          v144 = *v142++;
          _S0 = v144;
          __asm { FCVT            H0, S0 }
          *v143++ = _S0;
          --v141;
        }
        while (v141);
      }
    }
    v146 = *((unsigned __int8 *)a2 + 552);
    v147 = v284;
    v148 = v285;
    v281 = v284;
    v282 = v285;
    if (v285)
    {
      v149 = (unint64_t *)&v285->__shared_owners_;
      do
        v150 = __ldxr(v149);
      while (__stxr(v150 + 1, v149));
    }
    v151 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v147 + 16), *(int *)(v147 + 8));
    if (v148)
    {
      v152 = (unint64_t *)&v148->__shared_owners_;
      do
        v153 = __ldaxr(v152);
      while (__stlxr(v153 - 1, v152));
      if (!v153)
      {
        ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
        std::__shared_weak_count::__release_weak(v148);
      }
    }
    v154 = (void *)objc_opt_new();
    if (*((_BYTE *)a2 + 121))
    {
      v155 = *(id *)(v273 + 128);

      v154 = v155;
    }
    v156 = (void *)objc_opt_new();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v123);
    v157 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v156, "setObject:forKeyedSubscript:", v157, CFSTR("ScaleCount"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v151);
    v158 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v156, "setObject:forKeyedSubscript:", v158, CFSTR("ScaleOffset"));

    v159 = (void *)MEMORY[0x1E0CB37E8];
    if (v146)
      weights_file_index = 0;
    else
    objc_msgSend(v159, "numberWithUnsignedLong:", weights_file_index, v242);
    v161 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v156, "setObject:forKeyedSubscript:", v161, CFSTR("ScaleIndex"));

    objc_msgSend(v156, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v292);
    v162 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v154, "setObject:forKeyedSubscript:", v162, CFSTR("ScaleShift"));

    if (*((_QWORD *)this + 55))
    {
      v163 = v283;
      v280 = v283;
      if (*((_QWORD *)&v283 + 1))
      {
        v164 = (unint64_t *)(*((_QWORD *)&v283 + 1) + 8);
        do
          v165 = __ldxr(v164);
        while (__stxr(v165 + 1, v164));
      }
      v166 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v163 + 16), *(int *)(v163 + 8));
      if (*((_QWORD *)&v163 + 1))
      {
        v167 = (unint64_t *)(*((_QWORD *)&v163 + 1) + 8);
        do
          v168 = __ldaxr(v167);
        while (__stlxr(v168 - 1, v167));
        if (!v168)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v163 + 1) + 16))(*((_QWORD *)&v163 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v163 + 1));
        }
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*((_QWORD *)this + 55) + 8));
      v169 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v156, "setObject:forKeyedSubscript:", v169, CFSTR("BiasCount"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v166);
      v170 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v156, "setObject:forKeyedSubscript:", v170, CFSTR("BiasOffset"));

      v171 = (void *)MEMORY[0x1E0CB37E8];
      if (v146)
        v172 = 0;
      else
      objc_msgSend(v171, "numberWithUnsignedLong:", v172);
      v173 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v156, "setObject:forKeyedSubscript:", v173, CFSTR("BiasIndex"));

      objc_msgSend(v156, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v243);
      v174 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v154, "setObject:forKeyedSubscript:", v174, CFSTR("BiasShift"));

    }
    objc_msgSend(v154, "setObject:forKeyedSubscript:", v156, CFSTR("BiasScaleGroupData"));
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v294.__r_.__value_.__l.__data_, (id *)a3);
    v175 = v274;
    if (v274 == (std::string *)v273)
      goto LABEL_240;
    v176 = v274 - 6;
    v177 = HIBYTE(v274[-6].__r_.__value_.__r.__words[2]);
    v178 = v177;
    v179 = v274[-6].__r_.__value_.__l.__size_;
    if ((v177 & 0x80u) == 0)
      v180 = HIBYTE(v274[-6].__r_.__value_.__r.__words[2]);
    else
      v180 = v274[-6].__r_.__value_.__l.__size_;
    v181 = HIBYTE(v294.__r_.__value_.__r.__words[2]);
    if ((v294.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v181 = v294.__r_.__value_.__l.__size_;
    if (v180 != v181)
      goto LABEL_234;
    if ((v294.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v182 = &v294;
    else
      v182 = (std::string *)v294.__r_.__value_.__r.__words[0];
    if ((char)v177 < 0)
    {
      data = (const std::string::value_type *)v176->__r_.__value_.__r.__words[0];
      if (memcmp(v176->__r_.__value_.__l.__data_, v182, v274[-6].__r_.__value_.__l.__size_))
        goto LABEL_237;
    }
    else if ((_BYTE)v177)
    {
      v183 = v274 - 6;
      while (v183->__r_.__value_.__s.__data_[0] == v182->__r_.__value_.__s.__data_[0])
      {
        v183 = (std::string *)((char *)v183 + 1);
        v182 = (std::string *)((char *)v182 + 1);
        if (!--v177)
          goto LABEL_233;
      }
      goto LABEL_234;
    }
LABEL_233:
    std::string::append(v175 - 6, "__@pre_scale_bias");
    v178 = HIBYTE(v175[-6].__r_.__value_.__r.__words[2]);
LABEL_234:
    if ((v178 & 0x80) == 0)
    {
      v185 = *(_OWORD *)&v176->__r_.__value_.__l.__data_;
      *(_QWORD *)&v312[16] = *((_QWORD *)&v175[-6].__r_.__value_.__l + 2);
      *(_OWORD *)v312 = v185;
      goto LABEL_238;
    }
    data = v175[-6].__r_.__value_.__l.__data_;
    v179 = v175[-6].__r_.__value_.__l.__size_;
LABEL_237:
    std::string::__init_copy_ctor_external((std::string *)v312, data, v179);
LABEL_238:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v296, (std::string *)v312, (__int128 *)&v312[24], 1uLL);
    if ((v312[23] & 0x80000000) != 0)
      operator delete(*(void **)v312);
LABEL_240:
    v186 = v300;
    v300 = CFSTR("GOC");

    objc_storeStrong(&v301, v154);
    if (!*((_BYTE *)a2 + 121))
    {
      v187 = v274;
      if ((unint64_t)v274 >= v275)
      {
        v189 = 0x8E38E38E38E38E39 * (((uint64_t)v274 - v273) >> 4);
        if (v189 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v190 = 0x1C71C71C71C71C72 * ((uint64_t)(v275 - v273) >> 4);
        if (v190 <= v189 + 1)
          v190 = v189 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v275 - v273) >> 4) >= 0xE38E38E38E38E3)
          v191 = 0x1C71C71C71C71C7;
        else
          v191 = v190;
        *(_QWORD *)&v312[32] = &v275;
        if (v191)
          v191 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v191);
        else
          v192 = 0;
        *(_QWORD *)v312 = v191;
        *(_QWORD *)&v312[8] = v191 + 144 * v189;
        *(_QWORD *)&v312[16] = *(_QWORD *)&v312[8];
        *(_QWORD *)&v312[24] = v191 + 144 * v192;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&v312[8], (uint64_t)&v294);
        *(_QWORD *)&v312[16] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v273, v312);
        v188 = v274;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)v312);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v274, (uint64_t)&v294);
        v188 = v187 + 6;
      }
      v274 = v188;
    }

    if (v298 < 0)
      operator delete(v297);
    *(_QWORD *)v312 = &v296;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v312);
    *(_QWORD *)v312 = &v295;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v312);
    if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v294.__r_.__value_.__l.__data_);

    v193 = (std::__shared_weak_count *)*((_QWORD *)&v283 + 1);
    if (*((_QWORD *)&v283 + 1))
    {
      v194 = (unint64_t *)(*((_QWORD *)&v283 + 1) + 8);
      do
        v195 = __ldaxr(v194);
      while (__stlxr(v195 - 1, v194));
      if (!v195)
      {
        ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
        std::__shared_weak_count::__release_weak(v193);
      }
    }
    v196 = v285;
    if (v285)
    {
      v197 = (unint64_t *)&v285->__shared_owners_;
      do
        v198 = __ldaxr(v197);
      while (__stlxr(v198 - 1, v197));
      if (!v198)
      {
        ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
        std::__shared_weak_count::__release_weak(v196);
      }
    }
    v199 = v291;
    if (v291)
    {
      v200 = (unint64_t *)&v291->__shared_owners_;
      do
        v201 = __ldaxr(v200);
      while (__stlxr(v201 - 1, v200));
      if (!v201)
      {
        ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
        std::__shared_weak_count::__release_weak(v199);
      }
    }
    v202 = v289;
    if (v289)
    {
      v203 = (unint64_t *)&v289->__shared_owners_;
      do
        v204 = __ldaxr(v203);
      while (__stlxr(v204 - 1, v203));
      if (!v204)
      {
        ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
        std::__shared_weak_count::__release_weak(v202);
      }
    }
    v107 = v255;
  }
  if (v107)
  {
    v205 = (unint64_t *)&v107->__shared_owners_;
    do
      v206 = __ldaxr(v205);
    while (__stlxr(v206 - 1, v205));
    if (!v206)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }

  if (v307 < 0)
    operator delete(v306);
  v294.__r_.__value_.__r.__words[0] = (std::string::size_type)&v305;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v294);
  v294.__r_.__value_.__r.__words[0] = (std::string::size_type)&v303;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v294);
  if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v302.__r_.__value_.__l.__data_);
  if (v245)
  {
    v207 = (unint64_t *)&v245->__shared_owners_;
    do
      v208 = __ldaxr(v207);
    while (__stlxr(v208 - 1, v207));
    if (!v208)
    {
      ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
      std::__shared_weak_count::__release_weak(v245);
    }
  }
  if (v246)
  {
    v209 = (unint64_t *)&v246->__shared_owners_;
    do
      v210 = __ldaxr(v209);
    while (__stlxr(v210 - 1, v209));
    if (!v210)
    {
      ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
      std::__shared_weak_count::__release_weak(v246);
    }
  }
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((_QWORD *)this + 45) + 32))((char *)this + 360, a2, &v273);
  v302.__r_.__value_.__r.__words[0] = (std::string::size_type)&v262;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v302);

  if (v269 < 0)
    operator delete((void *)v268[4]);
  v302.__r_.__value_.__r.__words[0] = (std::string::size_type)v268;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v302);
  v302.__r_.__value_.__r.__words[0] = (std::string::size_type)&v267;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v302);
  if (v266 < 0)
    operator delete(v265[0]);
  v302.__r_.__value_.__r.__words[0] = (std::string::size_type)&v273;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v302);
  v211 = v277;
  if (v277)
  {
    v212 = (unint64_t *)&v277->__shared_owners_;
    do
      v213 = __ldaxr(v212);
    while (__stlxr(v213 - 1, v212));
    if (!v213)
    {
      ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
      std::__shared_weak_count::__release_weak(v211);
    }
  }
  v214 = v279;
  if (v279)
  {
    v215 = (unint64_t *)&v279->__shared_owners_;
    do
      v216 = __ldaxr(v215);
    while (__stlxr(v216 - 1, v215));
    if (!v216)
    {
      ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
      std::__shared_weak_count::__release_weak(v214);
    }
  }
}

void sub_191744D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  id a68;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  STACK[0x320] = (unint64_t)&a65;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x320]);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a68);
  STACK[0x320] = (unint64_t)&STACK[0x268];
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x320]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x280]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x290]);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_crop_and_resize_kernel::compile(Espresso::ANECompilerEngine::mix_crop_and_resize_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::ANECompilerEngine::mix_crop_and_resize_kernel::compile((Espresso::ANECompilerEngine::mix_crop_and_resize_kernel *)((char *)this - 360), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_crop_and_resize_kernel::~mix_crop_and_resize_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 45);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 45);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void set_sampling_info(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  __CFString *v10;
  void *v11;
  _QWORD v12[2];
  _QWORD v13[3];

  v13[2] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = (void *)objc_opt_new();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", CFSTR("Height"), CFSTR("Coordinate"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", CFSTR("Linear"), CFSTR("SamplingMethod"));
  v5 = (void *)objc_opt_new();
  objc_msgSend(v5, "setObject:forKeyedSubscript:", CFSTR("Width"), CFSTR("Coordinate"));
  objc_msgSend(v5, "setObject:forKeyedSubscript:", CFSTR("Linear"), CFSTR("SamplingMethod"));
  v13[0] = v4;
  v13[1] = v5;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v13, 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v6, CFSTR("SamplingMethodInfo"));

  v7 = (void *)objc_opt_new();
  objc_msgSend(v7, "setObject:forKeyedSubscript:", CFSTR("Height"), CFSTR("Coordinate"));
  v8 = (void *)objc_opt_new();
  objc_msgSend(v8, "setObject:forKeyedSubscript:", CFSTR("Width"), CFSTR("Coordinate"));
  v9 = *(unsigned int *)(a2 + 20);
  if (v9 >= 5)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unrecognized grid sampling mode");
  v10 = off_1E2DD5AB0[v9];
  objc_msgSend(v7, "setObject:forKeyedSubscript:", v10, CFSTR("SamplingGridMode"));
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v10, CFSTR("SamplingGridMode"));
  v12[0] = v7;
  v12[1] = v8;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v12, 2);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v11, CFSTR("SamplingGridInfo"));

}

void sub_19174537C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

__CFString *get_crop_resize_mode_string(unsigned int a1, int a2)
{
  __CFString **v2;

  if (!a2)
  {
    if (a1 < 4)
    {
      v2 = off_1E2DD5A90;
      return v2[a1];
    }
LABEL_7:
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unrecognized crop index mode");
  }
  if (a1 >= 4)
    goto LABEL_7;
  v2 = off_1E2DD5A70;
  return v2[a1];
}

BOOL Espresso::ANECompilerEngine::mix_crop_and_resize_kernel::single_input_mode_supported_by_anec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v8;
  const void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13;
  unsigned int v14;
  unsigned int v15;
  __int128 v16;
  uint64_t v17;
  __CFString *v18;
  _BOOL8 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::string __p;
  __CFString *v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const __CFString *v32;
  const __CFString *v33;
  const __CFString *v34;
  const __CFString *v35;
  const __CFString *v36;
  __CFString *v37;
  const __CFString *v38;
  __CFString *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  _OWORD v42[2];
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  const Espresso::net *v47;
  std::__shared_weak_count *v48;
  _DWORD v49[8];

  std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v47, *(_QWORD *)a2, *(std::__shared_weak_count **)(a2 + 8));
  v8 = *(_OWORD *)(a3 + 16);
  v42[0] = *(_OWORD *)a3;
  v42[1] = v8;
  v9 = *(const void **)(a3 + 40);
  v43 = *(_QWORD *)(a3 + 32);
  v44 = 0;
  v45 = 0;
  v46 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v44, v9, *(_QWORD *)(a3 + 48), (uint64_t)(*(_QWORD *)(a3 + 48) - (_QWORD)v9) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v49, v47, (const Espresso::layer_shape *)v42, 1);
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  v10 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(a2 + 472);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v40, (NSString *)(a1 + 360), v13);
  ANECResizeLayerDescInitialize();
  v29 = 0;
  v30 = 0;
  ANECTensorDescInitialize();
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(a2 + 360), &__p))
  {
    v14 = *(_DWORD *)(std::map<std::string,Espresso::blob_numerical_properties>::at(a2 + 352, &__p) + 8);
    if (v14 == -1)
      v15 = 1;
    else
      v15 = v14;
  }
  else
  {
    v15 = 1;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v15 >= 8)
    goto LABEL_22;
  if (((0x97u >> v15) & 1) == 0)
    goto LABEL_22;
  v25 = off_1E2DD5AD8[v15];
  *(_QWORD *)&v16 = v49[3];
  *((_QWORD *)&v16 + 1) = v49[4];
  v27 = v16;
  v28 = v49[2];
  *(_QWORD *)&v16 = v49[0];
  *((_QWORD *)&v16 + 1) = v49[1];
  v26 = v16;
  v31 = *(_QWORD *)(a1 + 284);
  v17 = *(unsigned int *)(a1 + 300);
  if (v17 <= 4)
  {
    v18 = off_1E2DD5AB0[v17];
    v32 = CFSTR("Width");
    v33 = CFSTR("Linear");
    v34 = CFSTR("Height");
    v35 = CFSTR("Linear");
    v36 = CFSTR("Width");
    v37 = v18;
    v38 = CFSTR("Height");
    v39 = v18;
    v19 = ANECValidateResizeLayer() == 0;
  }
  else
  {
LABEL_22:
    v19 = 0;
  }
  v20 = v41;
  if (v41)
  {
    v21 = (unint64_t *)&v41->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

  return v19;
}

void sub_1917456A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  uint64_t v15;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15 - 176);

  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::mix_crop_and_resize_kernel::should_use_workaround(uint64_t a1, uint64_t a2, __int128 *a3, _DWORD *a4)
{
  void *v8;
  __int128 v9;
  const void *v10;
  int v11;
  std::__shared_weak_count *v12;
  const Espresso::net *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  BOOL v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  const Espresso::net *v20;
  unint64_t *v21;
  unint64_t v22;
  BOOL v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  std::__shared_weak_count *v27;
  const Espresso::net *v28;
  unint64_t *v29;
  unint64_t v30;
  BOOL v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  const Espresso::net *v35;
  unint64_t *v36;
  unint64_t v37;
  BOOL v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  const Espresso::net *v42;
  unint64_t *v43;
  unint64_t v44;
  BOOL v45;
  unint64_t *v46;
  unint64_t v47;
  Espresso::net *v48;
  unint64_t *v49;
  unint64_t v50;
  BOOL v51;
  int v52;
  int v53;
  uint64_t v54;
  _OWORD v56[2];
  uint64_t v57;
  void *v58;
  void *v59;
  uint64_t v60;
  Espresso::net *v61[2];
  _OWORD v62[2];
  uint64_t v63;
  void *v64;
  void *v65;
  uint64_t v66;
  Espresso::ANECompilerEngine *v67;
  std::__shared_weak_count *v68;
  _OWORD v69[2];
  uint64_t v70;
  void *v71;
  void *v72;
  uint64_t v73;
  Espresso::ANECompilerEngine *v74;
  std::__shared_weak_count *v75;
  _OWORD v76[2];
  uint64_t v77;
  void *v78;
  void *v79;
  uint64_t v80;
  Espresso::ANECompilerEngine *v81;
  std::__shared_weak_count *v82;
  _OWORD v83[2];
  uint64_t v84;
  void *__p;
  void *v86;
  uint64_t v87;
  Espresso::ANECompilerEngine *v88;
  std::__shared_weak_count *v89;
  _OWORD v90[2];
  uint64_t v91;
  void *v92;
  void *v93;
  uint64_t v94;
  Espresso::ANECompilerEngine *v95;
  std::__shared_weak_count *v96;
  _DWORD v97[8];
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  void *v101;
  _BYTE *v102;
  uint64_t v103;

  if (!Espresso::ANECompilerEngine::can_handle_configuration_dependent_transforms(*(Espresso::ANECompilerEngine **)a2, (Espresso::net *)a2))return 0;
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(*(_QWORD *)a2 + 472);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = a3[1];
  v98 = *a3;
  v99 = v9;
  v10 = (const void *)*((_QWORD *)a3 + 5);
  v100 = *((_QWORD *)a3 + 4);
  v101 = 0;
  v102 = 0;
  v103 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v101, v10, *((_QWORD *)a3 + 6), (uint64_t)(*((_QWORD *)a3 + 6) - (_QWORD)v10) >> 2);
  v11 = v98;
  LODWORD(v98) = DWORD2(v98);
  DWORD2(v98) = v11;
  v13 = *(const Espresso::net **)a2;
  v12 = *(std::__shared_weak_count **)(a2 + 8);
  v95 = *(Espresso::ANECompilerEngine **)a2;
  v96 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v90[0] = v98;
  v90[1] = v99;
  v91 = v100;
  v92 = 0;
  v93 = 0;
  v94 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v92, v101, (uint64_t)v102, (v102 - (_BYTE *)v101) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v97, v13, (const Espresso::layer_shape *)v90, 1);
  v16 = Espresso::ANECompilerEngine::blob_shape_ane_compatible(v97, v8);
  if (v92)
  {
    v93 = v92;
    operator delete(v92);
  }
  if (!v12)
    goto LABEL_11;
  v17 = (unint64_t *)&v12->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (!v16)
      goto LABEL_79;
  }
  else
  {
LABEL_11:
    if (!v16)
      goto LABEL_79;
  }
  DWORD2(v98) = *a4;
  v20 = *(const Espresso::net **)a2;
  v19 = *(std::__shared_weak_count **)(a2 + 8);
  v88 = *(Espresso::ANECompilerEngine **)a2;
  v89 = v19;
  if (v19)
  {
    v21 = (unint64_t *)&v19->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v83[0] = v98;
  v83[1] = v99;
  v84 = v100;
  __p = 0;
  v86 = 0;
  v87 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v101, (uint64_t)v102, (v102 - (_BYTE *)v101) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v97, v20, (const Espresso::layer_shape *)v83, 1);
  v23 = Espresso::ANECompilerEngine::blob_shape_ane_compatible(v97, v8);
  if (__p)
  {
    v86 = __p;
    operator delete(__p);
  }
  if (!v19)
    goto LABEL_21;
  v24 = (unint64_t *)&v19->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (v25)
  {
LABEL_21:
    if (v23)
      goto LABEL_22;
LABEL_79:
    v54 = 0;
    goto LABEL_80;
  }
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  if (!v23)
    goto LABEL_79;
LABEL_22:
  v26 = v98;
  LODWORD(v98) = DWORD2(v98);
  DWORD2(v98) = v26;
  v28 = *(const Espresso::net **)a2;
  v27 = *(std::__shared_weak_count **)(a2 + 8);
  v81 = *(Espresso::ANECompilerEngine **)a2;
  v82 = v27;
  if (v27)
  {
    v29 = (unint64_t *)&v27->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v76[0] = v98;
  v76[1] = v99;
  v77 = v100;
  v78 = 0;
  v79 = 0;
  v80 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v78, v101, (uint64_t)v102, (v102 - (_BYTE *)v101) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v97, v28, (const Espresso::layer_shape *)v76, 1);
  v31 = Espresso::ANECompilerEngine::blob_shape_ane_compatible(v97, v8);
  if (v78)
  {
    v79 = v78;
    operator delete(v78);
  }
  if (v27)
  {
    v32 = (unint64_t *)&v27->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (!v31)
    goto LABEL_79;
  *(int32x2_t *)((char *)&v98 + 4) = vrev64_s32(*(int32x2_t *)((char *)&v98 + 4));
  v35 = *(const Espresso::net **)a2;
  v34 = *(std::__shared_weak_count **)(a2 + 8);
  v74 = *(Espresso::ANECompilerEngine **)a2;
  v75 = v34;
  if (v34)
  {
    v36 = (unint64_t *)&v34->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  v69[0] = v98;
  v69[1] = v99;
  v70 = v100;
  v71 = 0;
  v72 = 0;
  v73 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v71, v101, (uint64_t)v102, (v102 - (_BYTE *)v101) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v97, v35, (const Espresso::layer_shape *)v69, 1);
  v38 = Espresso::ANECompilerEngine::blob_shape_ane_compatible(v97, v8);
  if (v71)
  {
    v72 = v71;
    operator delete(v71);
  }
  if (v34)
  {
    v39 = (unint64_t *)&v34->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (!v38)
    goto LABEL_79;
  DWORD2(v98) = a4[1];
  v42 = *(const Espresso::net **)a2;
  v41 = *(std::__shared_weak_count **)(a2 + 8);
  v67 = *(Espresso::ANECompilerEngine **)a2;
  v68 = v41;
  if (v41)
  {
    v43 = (unint64_t *)&v41->__shared_owners_;
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  v62[0] = v98;
  v62[1] = v99;
  v63 = v100;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v64, v101, (uint64_t)v102, (v102 - (_BYTE *)v101) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v97, v42, (const Espresso::layer_shape *)v62, 1);
  v45 = Espresso::ANECompilerEngine::blob_shape_ane_compatible(v97, v8);
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  if (v41)
  {
    v46 = (unint64_t *)&v41->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (!v45)
    goto LABEL_79;
  *(int32x2_t *)((char *)&v98 + 4) = vrev64_s32(*(int32x2_t *)((char *)&v98 + 4));
  v48 = *(Espresso::net **)(a2 + 8);
  v61[0] = *(Espresso::net **)a2;
  v61[1] = v48;
  if (v48)
  {
    v49 = (unint64_t *)((char *)v48 + 8);
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  v56[0] = v98;
  v56[1] = v99;
  v57 = v100;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v58, v101, (uint64_t)v102, (v102 - (_BYTE *)v101) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v97, v61[0], (const Espresso::layer_shape *)v56, 1);
  v51 = Espresso::ANECompilerEngine::blob_shape_ane_compatible(v97, v8);
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v61);
  if (!v51)
    goto LABEL_79;
  if ((*(_DWORD *)(a1 + 300) - 1) > 1)
    goto LABEL_79;
  if (*(_DWORD *)(a1 + 304))
    goto LABEL_79;
  if (*(_BYTE *)(a1 + 312))
    goto LABEL_79;
  v52 = a4[5];
  if (v52 != 4 && (v52 != -1 || a4[4] != 1))
    goto LABEL_79;
  v53 = *((_DWORD *)a3 + 5);
  if (v53 != 4 && (v53 != -1 || *((_DWORD *)a3 + 4) != 1))
    goto LABEL_79;
  if (*(int *)a3 > 128 || *((int *)a3 + 1) > 128 || (int)*a4 > 256 || (int)a4[1] >= 257)
    goto LABEL_79;
  v54 = 1;
LABEL_80:
  if (v101)
  {
    v102 = v101;
    operator delete(v101);
  }

  return v54;
}

void sub_191745CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,char a57)
{
  void *v57;
  uint64_t v58;
  void *v60;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  v60 = *(void **)(v58 - 104);
  if (v60)
  {
    *(_QWORD *)(v58 - 96) = v60;
    operator delete(v60);
  }

  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::violations_from_alternates<ANECCropResizeLayerDescAlternate>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  CFTypeRef *v7;
  unint64_t *v8;
  unint64_t v9;
  CFTypeRef *v10;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2)
  {
    v6 = 0;
    v7 = (CFTypeRef *)(a3 + 8);
    do
    {
      v8 = (unint64_t *)(a3 + 712 * v6);
      if (*v8)
      {
        v9 = 0;
        v10 = v7;
        do
        {
          std::__hash_table<__CFString const*,Espresso::ANECompilerEngine::CFStringHasher,Espresso::ANECompilerEngine::CFStringEqualWrapper,std::allocator<__CFString const*>>::__emplace_unique_key_args<__CFString const*,__CFString const* const&>((float *)a1, v10, v10);
          ++v9;
          ++v10;
        }
        while (v9 < *v8);
      }
      ++v6;
      v7 += 89;
    }
    while (v6 != a2);
  }
}

void sub_191745E88(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::stir_resize_nearest_neighbor_kernel::~stir_resize_nearest_neighbor_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 37);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 37);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::stir_resize_nearest_neighbor_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 296), a3, a4, a5);
}

uint64_t Espresso::ANECompilerEngine::stir_resize_nearest_neighbor_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, Espresso::ANECompilerEngine *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  const Espresso::base_kernel::validate_for_engine_args_t *v8;
  Espresso::ANECompilerEngine *v9;
  NSString *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  const Espresso::net *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  const Espresso::net *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  unint64_t *v36;
  unint64_t v37;
  Espresso::ANECompilerEngine *v38;
  unsigned int v39;
  __CFString *v40;
  __int128 v41;
  int v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  __int128 v49;
  void **v50;
  std::string::size_type v51;
  std::string *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  void *v74[2];
  unsigned __int8 v75;
  std::string v76;
  std::string v77;
  std::string v78;
  std::string v79;
  int64x2_t *v80;
  std::__shared_weak_count *v81;
  _BYTE v82[40];
  __CFString *v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 __p;
  const __CFString *v90;
  const __CFString *v91;
  const __CFString *v92;
  const __CFString *v93;
  const __CFString *v94;
  const __CFString *v95;
  const __CFString *v96;
  const __CFString *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  int64x2_t *v100;
  uint64_t v101;
  char v102;
  void *v103[2];
  char v104;
  _OWORD v105[2];
  uint64_t v106;
  void *v107;
  void *v108;
  uint64_t v109;
  const Espresso::base_kernel::validate_for_engine_args_t *v110;
  std::__shared_weak_count *v111;
  _DWORD v112[8];
  _OWORD v113[2];
  uint64_t v114;
  void *v115;
  void *v116;
  uint64_t v117;
  const Espresso::base_kernel::validate_for_engine_args_t *v118;
  std::__shared_weak_count *v119;
  _DWORD v120[8];
  std::string v121;
  _BYTE v122[24];
  _BYTE v123[32];
  std::__shared_weak_count *v124;
  int64x2_t *v125;
  uint64_t v126;
  const Espresso::base_kernel::validate_for_engine_args_t *v127;
  std::__shared_weak_count *v128;
  void **v129;

  v6 = *((_QWORD *)a3 + 6);
  v127 = 0;
  v128 = 0;
  v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7 && (v128 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = *(const Espresso::base_kernel::validate_for_engine_args_t **)(v6 + 72);
    v127 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v8 + 472);
  v9 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix_e(v9, v10))
  {
    v11 = *(_QWORD *)(a2 + 8);
    v125 = *(int64x2_t **)a2;
    v126 = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "resize_nearest_neighbor_kernel: not enabled on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v121, &__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v125, (Espresso::base_kernel::validate_for_engine_warning_t *)&v121);
    v14 = v124;
    if (v124)
    {
      p_shared_owners = (unint64_t *)&v124->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v83 = (__CFString *)v123;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
    v83 = (__CFString *)v122;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
    if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v121.__r_.__value_.__l.__data_);
    if (SHIBYTE(v90) < 0)
      operator delete((void *)__p);
    v17 = v126;
    if (v126)
    {
      v18 = (unint64_t *)(v126 + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v17);
      }
      v17 = 0;
    }
    goto LABEL_109;
  }
  v21 = v127;
  v20 = v128;
  v118 = v127;
  v119 = v128;
  if (v128)
  {
    v22 = (unint64_t *)&v128->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = *((_QWORD *)a3 + 3);
  v25 = *(_QWORD *)(v24 + 32);
  v26 = *(_OWORD *)(v24 + 16);
  v113[0] = *(_OWORD *)v24;
  v113[1] = v26;
  v114 = v25;
  v115 = 0;
  v117 = 0;
  v116 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v115, *(const void **)(v24 + 40), *(_QWORD *)(v24 + 48), (uint64_t)(*(_QWORD *)(v24 + 48) - *(_QWORD *)(v24 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v120, v21, (const Espresso::layer_shape *)v113, 1);
  if (v115)
  {
    v116 = v115;
    operator delete(v115);
  }
  if (v20)
  {
    v27 = (unint64_t *)&v20->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v30 = v127;
  v29 = v128;
  v110 = v127;
  v111 = v128;
  if (v128)
  {
    v31 = (unint64_t *)&v128->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v33 = *(_QWORD *)a3;
  v34 = *(_QWORD *)(*(_QWORD *)a3 + 32);
  v35 = *(_OWORD *)(*(_QWORD *)a3 + 16);
  v105[0] = *(_OWORD *)*(_QWORD *)a3;
  v105[1] = v35;
  v106 = v34;
  v107 = 0;
  v108 = 0;
  v109 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v107, *(const void **)(v33 + 40), *(_QWORD *)(v33 + 48), (uint64_t)(*(_QWORD *)(v33 + 48) - *(_QWORD *)(v33 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v112, v30, (const Espresso::layer_shape *)v105, 1);
  if (v107)
  {
    v108 = v107;
    operator delete(v107);
  }
  if (v29)
  {
    v36 = (unint64_t *)&v29->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v38 = v9;
  if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v112, v38))
  {
    if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v120, v38))
    {
      v102 = 1;
      std::string::basic_string[abi:ne180100]<0>(v103, "Success");
    }
    else
    {
      v102 = 0;
      std::string::basic_string[abi:ne180100]<0>(v103, "resize_nearest_neighbor_kernel: output blob dimensions exceed ANE limit.");
    }
  }
  else
  {
    v102 = 0;
    std::string::basic_string[abi:ne180100]<0>(v103, "resize_nearest_neighbor_kernel: input blob dimensions exceed ANE limit.");
  }

  if (!v102)
  {
    v62 = *(_QWORD *)(a2 + 8);
    v100 = *(int64x2_t **)a2;
    v101 = v62;
    if (v62)
    {
      v63 = (unint64_t *)(v62 + 8);
      do
        v64 = __ldxr(v63);
      while (__stxr(v64 + 1, v63));
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v121, (__int128 *)v103, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v100, (Espresso::base_kernel::validate_for_engine_warning_t *)&v121);
    v65 = v124;
    if (v124)
    {
      v66 = (unint64_t *)&v124->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    *(_QWORD *)&__p = v123;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    *(_QWORD *)&__p = v122;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v121.__r_.__value_.__l.__data_);
    v17 = v101;
    if (v101)
    {
      v68 = (unint64_t *)(v101 + 8);
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v17);
      }
      v17 = 0;
    }
    goto LABEL_107;
  }
  Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v98, (NSString *)(a1 + 296), v38);
  ANECResizeLayerDescInitialize();
  v87 = 0;
  v88 = 0;
  ANECTensorDescInitialize();
  v39 = Espresso::ANECompilerEngine::bottom_compute_path(a3, v127, 0);
  if (v39 < 8 && ((0x97u >> v39) & 1) != 0)
  {
    v40 = off_1E2DD5AD8[v39];
    *(_QWORD *)&v41 = v112[3];
    *((_QWORD *)&v41 + 1) = v112[4];
    v85 = v41;
    v83 = v40;
    v86 = v112[2];
    *(_QWORD *)&v41 = v112[0];
    *((_QWORD *)&v41 + 1) = v112[1];
    v84 = v41;
    *(_QWORD *)&__p = *(_QWORD *)(a1 + 284);
    v90 = CFSTR("Width");
    v91 = CFSTR("NearestNeighbor");
    v92 = CFSTR("Height");
    v93 = CFSTR("NearestNeighbor");
    v94 = CFSTR("Width");
    v95 = CFSTR("UnalignedCorners");
    v96 = CFSTR("Height");
    v97 = CFSTR("UnalignedCorners");
    v42 = ANECValidateResizeLayer();
    if (!v42)
    {
      v17 = 1;
      goto LABEL_86;
    }
    Espresso::ANECompilerEngine::violations_from_alternates<ANECResizeLayerDescAlternate>((uint64_t)v82, v88, v87);
    v43 = *(std::__shared_weak_count **)(a2 + 8);
    v80 = *(int64x2_t **)a2;
    v81 = v43;
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    std::to_string(&v76, v42);
    v46 = std::string::insert(&v76, 0, "resize_nearest_neighbor_kernel: ANECValidateResizeLayer failed with status ");
    v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    v48 = std::string::append(&v77, ". ");
    v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    Espresso::ANECompilerEngine::format_validation_violations((uint64_t)v74, (uint64_t)v82);
    if ((v75 & 0x80u) == 0)
      v50 = v74;
    else
      v50 = (void **)v74[0];
    if ((v75 & 0x80u) == 0)
      v51 = v75;
    else
      v51 = (std::string::size_type)v74[1];
    v52 = std::string::append(&v78, (const std::string::value_type *)v50, v51);
    v79 = *v52;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v121, (__int128 *)&v79, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v80, (Espresso::base_kernel::validate_for_engine_warning_t *)&v121);
    v53 = v124;
    if (v124)
    {
      v54 = (unint64_t *)&v124->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v129 = (void **)v123;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v129);
    v129 = (void **)v122;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v129);
    if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v121.__r_.__value_.__l.__data_);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v79.__r_.__value_.__l.__data_);
    if ((char)v75 < 0)
      operator delete(v74[0]);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v78.__r_.__value_.__l.__data_);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v77.__r_.__value_.__l.__data_);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v76.__r_.__value_.__l.__data_);
    v56 = v81;
    if (v81)
    {
      v57 = (unint64_t *)&v81->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v82);
  }
  v17 = 0;
LABEL_86:
  v59 = v99;
  if (v99)
  {
    v60 = (unint64_t *)&v99->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
LABEL_107:
  if (v104 < 0)
    operator delete(v103[0]);
LABEL_109:

  v70 = v128;
  if (v128)
  {
    v71 = (unint64_t *)&v128->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  return v17;
}

void sub_1917466E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;
  void *a72;
  char a73;
  void *v73;
  uint64_t v74;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)(v74 - 216));
  if (a40 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a43);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a68);
  if (a73 < 0)
    operator delete(a72);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v74 - 88);
  _Unwind_Resume(a1);
}

void sub_191746894()
{
  JUMPOUT(0x191746884);
}

void Espresso::ANECompilerEngine::stir_resize_nearest_neighbor_kernel::compile(Espresso::ANECompilerEngine::stir_resize_nearest_neighbor_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  __CFString *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  std::string *v27;
  std::string *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  const char *v41;
  Espresso::ANECompilerEngine::compiler *v42;
  void *v43[2];
  char v44;
  uint64_t v45;
  uint64_t v46;
  void *__p;
  char v48;
  id v49;
  __CFString *v50;
  id v51;
  uint64_t v52;
  std::string *v53;
  _QWORD v54[4];
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  void **v58;
  std::string *v59;
  std::string *v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD v63[2];
  _QWORD v64[4];

  v64[2] = *MEMORY[0x1E0C80C00];
  v56 = 0;
  v57 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4 || (v57 = std::__shared_weak_count::lock(v4)) == 0 || (v7 = *((_QWORD *)a2 + 1), (v56 = v7) == 0))
  {
    v41 = "Inconsistent state: null network";
    goto LABEL_45;
  }
  if (!*(_QWORD *)(v7 + 576))
  {
    v41 = "Inconsistent state: blob_storage";
LABEL_45:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v41);
  }
  v8 = v7 + 136;
  v43[0] = a3[6];
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v43[0], (__int128 **)v43);
  v10 = (std::__shared_weak_count *)*((_QWORD *)v9 + 6);
  v54[3] = *((_QWORD *)v9 + 5);
  v55 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v43[0] = a3;
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)a3, (__int128 **)v43);
  v14 = (std::__shared_weak_count *)*((_QWORD *)v13 + 6);
  v54[1] = *((_QWORD *)v13 + 5);
  v54[2] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v52 = 0;
  v53 = 0;
  v54[0] = 0;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v43, a3);
  v42 = a2;
  v17 = (void *)objc_opt_new();
  v18 = v50;
  v50 = CFSTR("Resize");

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)this + 72));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setObject:forKeyedSubscript:", v19, CFSTR("OutputHeight"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)this + 71));
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setObject:forKeyedSubscript:", v20, CFSTR("OutputWidth"));

  v21 = (void *)objc_opt_new();
  objc_msgSend(v21, "setObject:forKeyedSubscript:", CFSTR("Height"), CFSTR("Coordinate"));
  objc_msgSend(v21, "setObject:forKeyedSubscript:", CFSTR("NearestNeighbor"), CFSTR("SamplingMethod"));
  v22 = (void *)objc_opt_new();
  objc_msgSend(v22, "setObject:forKeyedSubscript:", CFSTR("Width"), CFSTR("Coordinate"));
  objc_msgSend(v22, "setObject:forKeyedSubscript:", CFSTR("NearestNeighbor"), CFSTR("SamplingMethod"));
  v64[0] = v21;
  v64[1] = v22;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v64, 2);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setObject:forKeyedSubscript:", v23, CFSTR("SamplingMethodInfo"));
  v24 = (void *)objc_opt_new();
  objc_msgSend(v24, "setObject:forKeyedSubscript:", CFSTR("Height"), CFSTR("Coordinate"));
  objc_msgSend(v24, "setObject:forKeyedSubscript:", CFSTR("UnalignedCorners"), CFSTR("SamplingGridMode"));
  v25 = (void *)objc_opt_new();
  objc_msgSend(v25, "setObject:forKeyedSubscript:", CFSTR("Width"), CFSTR("Coordinate"));
  objc_msgSend(v25, "setObject:forKeyedSubscript:", CFSTR("UnalignedCorners"), CFSTR("SamplingGridMode"));
  v63[0] = v24;
  v63[1] = v25;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v63, 2);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setObject:forKeyedSubscript:", v26, CFSTR("SamplingGridInfo"));
  objc_storeStrong(&v51, v17);
  v27 = v53;
  if ((unint64_t)v53 >= v54[0])
  {
    v29 = 0x8E38E38E38E38E39 * (((uint64_t)v53 - v52) >> 4);
    if (v29 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v30 = 0x1C71C71C71C71C72 * ((v54[0] - v52) >> 4);
    if (v30 <= v29 + 1)
      v30 = v29 + 1;
    if (0x8E38E38E38E38E39 * ((v54[0] - v52) >> 4) >= 0xE38E38E38E38E3)
      v31 = 0x1C71C71C71C71C7;
    else
      v31 = v30;
    v62 = v54;
    if (v31)
      v31 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v31);
    else
      v32 = 0;
    v58 = (void **)v31;
    v59 = (std::string *)(v31 + 144 * v29);
    v60 = v59;
    v61 = v31 + 144 * v32;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v59, (uint64_t)v43);
    v60 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v52, &v58);
    v28 = v53;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v58);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v53, (uint64_t)v43);
    v28 = v27 + 6;
  }
  v53 = v28;
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((_QWORD *)this + 37) + 32))((char *)this + 296, v42, &v52);

  if (v48 < 0)
    operator delete(__p);
  v58 = (void **)&v46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v58);
  v58 = (void **)&v45;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v58);
  if (v44 < 0)
    operator delete(v43[0]);
  v43[0] = &v52;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v43);
  if (v14)
  {
    v33 = (unint64_t *)&v14->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v35 = v55;
  if (v55)
  {
    v36 = (unint64_t *)&v55->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = v57;
  if (v57)
  {
    v39 = (unint64_t *)&v57->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_191746DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,char a34)
{
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;

  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer(v41 - 168);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a11);
  a11 = (void **)&a29;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v41 - 184);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::stir_resize_nearest_neighbor_kernel::compile(Espresso::ANECompilerEngine::stir_resize_nearest_neighbor_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  Espresso::ANECompilerEngine::stir_resize_nearest_neighbor_kernel::compile((Espresso::ANECompilerEngine::stir_resize_nearest_neighbor_kernel *)((char *)this - 296), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::stir_resize_nearest_neighbor_kernel::~stir_resize_nearest_neighbor_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 37);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 37);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

__n128 Espresso::ANECompilerEngine::mix_crop_and_resize_kernel::mix_crop_and_resize_kernel(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  char v6;
  __n128 result;
  __int128 v13;
  __int128 v14;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 300) = 0;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_BYTE *)(v5 + 296) = 0;
  *(_DWORD *)(v5 + 308) = 1065353216;
  *(_BYTE *)(v5 + 312) = 0;
  *(_DWORD *)(v5 + 316) = 2;
  *(_OWORD *)(v5 + 320) = 0u;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_DWORD *)(v5 + 352) = 1;
  *(_BYTE *)(v5 + 356) = 0;
  v6 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v5 + 496) = 0u;
  *(_OWORD *)(v5 + 512) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_BYTE *)(v5 + 416) = 0;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 456) = 0u;
  *(_OWORD *)(v5 + 472) = 0u;
  *(_BYTE *)(v5 + 488) = 0;
  *(_DWORD *)(v5 + 528) = 1065353216;
  *(_WORD *)(v5 + 536) = 0;
  *(_BYTE *)(v5 + 538) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v5 + 540) = _D1;
  *(_BYTE *)(v5 + 548) = 0;
  *(_OWORD *)(v5 + 552) = 0u;
  *(_BYTE *)(v5 + 568) = v6;
  *(_QWORD *)v5 = &off_1E2D7C718;
  *(_QWORD *)(v5 + 360) = &unk_1E2D7C878;
  *(_OWORD *)(v5 + 280) = *(_OWORD *)a3;
  result = *(__n128 *)(a3 + 16);
  v13 = *(_OWORD *)(a3 + 32);
  v14 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v5 + 341) = *(_OWORD *)(a3 + 61);
  *(_OWORD *)(v5 + 312) = v13;
  *(_OWORD *)(v5 + 328) = v14;
  *(__n128 *)(v5 + 296) = result;
  return result;
}

__n128 Espresso::ANECompilerEngine::stir_resize_nearest_neighbor_kernel::stir_resize_nearest_neighbor_kernel(uint64_t a1, _QWORD *a2, __n128 *a3)
{
  uint64_t v5;
  char v6;
  __n128 result;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 280) = 0;
  *(_QWORD *)(v5 + 288) = 0;
  v6 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v5 + 432) = 0u;
  *(_OWORD *)(v5 + 448) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 320) = 0u;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_BYTE *)(v5 + 352) = 0;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 408) = 0u;
  *(_BYTE *)(v5 + 424) = 0;
  *(_DWORD *)(v5 + 464) = 1065353216;
  *(_WORD *)(v5 + 472) = 0;
  *(_BYTE *)(v5 + 474) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v5 + 476) = _D0;
  *(_BYTE *)(v5 + 484) = 0;
  *(_QWORD *)(v5 + 488) = 0;
  *(_QWORD *)(v5 + 496) = 0;
  *(_BYTE *)(v5 + 504) = v6;
  *(_QWORD *)v5 = &off_1E2D7D118;
  *(_QWORD *)(v5 + 296) = &unk_1E2D7D278;
  result = *a3;
  *(__n128 *)(v5 + 280) = *a3;
  return result;
}

void Espresso::MPSGraphEngine::Kernels::load_random_kernel::~load_random_kernel(Espresso::MPSGraphEngine::Kernels::load_random_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSGraphEngine::Kernels::load_random_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, _QWORD *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  int v28;
  int64x2_t *v29;
  unint64_t *v30;
  unint64_t v31;
  int64x2_t **v32;
  int64x2_t *v33;
  unint64_t *v34;
  unint64_t v35;
  float v36;
  int64x2_t *v38;
  unint64_t *v39;
  unint64_t v40;
  int64x2_t *v41[2];
  int64x2_t *v42[2];
  int64x2_t *v43[2];
  int64x2_t *v44;
  std::__shared_weak_count *v45;
  int64x2_t *v46;
  std::__shared_weak_count *v47;
  void *v48[2];
  char v49;
  std::string __p;
  _BYTE v51[24];
  _BYTE v52[32];
  std::__shared_weak_count *v53;
  int64x2_t *v54;
  std::__shared_weak_count *v55;
  void **v56;

  if (a3[1] != *a3 || *(_BYTE *)(a1 + 324))
  {
    v4 = (std::__shared_weak_count *)a2[1];
    v54 = *a2;
    v55 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v48, "[Dispatch::MPSGraph::load_random_kernel] unsupported: static inputs only;");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v48, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v54, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v7 = v53;
    if (v53)
    {
      v8 = (unint64_t *)&v53->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v56 = (void **)v52;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v56);
    v56 = (void **)v51;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v56);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v49 < 0)
      operator delete(v48[0]);
    v10 = v55;
    if (!v55)
      return 0;
    v11 = (unint64_t *)&v55->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    goto LABEL_18;
  }
  if (*(int *)(a1 + 316) >= 2)
  {
    v14 = (std::__shared_weak_count *)a2[1];
    v46 = *a2;
    v47 = v14;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    std::string::basic_string[abi:ne180100]<0>(v48, "[Dispatch::MPSGraph::load_random_kernel] unsupported: only one output permitted");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v48, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v46, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v17 = v53;
    if (v53)
    {
      v18 = (unint64_t *)&v53->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v56 = (void **)v52;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v56);
    v56 = (void **)v51;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v56);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v49 < 0)
      operator delete(v48[0]);
    v10 = v47;
    if (!v47)
      return 0;
    v20 = (unint64_t *)&v47->__shared_owners_;
    do
      v12 = __ldaxr(v20);
    while (__stlxr(v12 - 1, v20));
    goto LABEL_18;
  }
  if (*(_BYTE *)(a1 + 325))
  {
    v21 = (std::__shared_weak_count *)a2[1];
    v44 = *a2;
    v45 = v21;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    std::string::basic_string[abi:ne180100]<0>(v48, "[Dispatch::MPSGraph::load_random_kernel] unsupported: reseed_each_launch must be false");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v48, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v44, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v24 = v53;
    if (v53)
    {
      v25 = (unint64_t *)&v53->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v56 = (void **)v52;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v56);
    v56 = (void **)v51;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v56);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v49 < 0)
      operator delete(v48[0]);
    v10 = v45;
    if (!v45)
      return 0;
    v27 = (unint64_t *)&v45->__shared_owners_;
    do
      v12 = __ldaxr(v27);
    while (__stlxr(v12 - 1, v27));
LABEL_18:
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return 0;
  }
  v28 = *(_DWORD *)(a1 + 280);
  if (!v28)
  {
    if (*(float *)(a1 + 284) < *(float *)(a1 + 288))
    {
      v33 = a2[1];
      v41[0] = *a2;
      v41[1] = v33;
      if (v33)
      {
        v34 = &v33->u64[1];
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      std::string::basic_string[abi:ne180100]<0>(v48, "[Dispatch::MPSGraph::load_random_kernel] unsupported: random_uniform: alpha must be less than beta");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v48, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v41, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
      if (v49 < 0)
        operator delete(v48[0]);
      v32 = v41;
      goto LABEL_83;
    }
    return 1;
  }
  if (v28 == 2)
  {
    v36 = *(float *)(a1 + 284);
    if (v36 < 0.0 || v36 > 1.0)
    {
      v38 = a2[1];
      v42[0] = *a2;
      v42[1] = v38;
      if (v38)
      {
        v39 = &v38->u64[1];
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      std::string::basic_string[abi:ne180100]<0>(v48, "[Dispatch::MPSGraph::load_random_kernel] unsupported: random_bernoulli p.alpha must be within [0.f, 1.f]");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v48, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v42, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
      if (v49 < 0)
        operator delete(v48[0]);
      v32 = v42;
      goto LABEL_83;
    }
    return 1;
  }
  if (v28 != 1 || *(float *)(a1 + 288) > 0.0)
    return 1;
  v29 = a2[1];
  v43[0] = *a2;
  v43[1] = v29;
  if (v29)
  {
    v30 = &v29->u64[1];
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  std::string::basic_string[abi:ne180100]<0>(v48, "[Dispatch::MPSGraph::load_random_kernel] unsupported: cannot have negative std deviation (beta) for random_normal");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v48, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(v43, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
  if (v49 < 0)
    operator delete(v48[0]);
  v32 = v43;
LABEL_83:
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v32);
  return 0;
}

void sub_1917475E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a25);
  if (a24 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void Espresso::blob_cpu::__copy_from_CVPixelBuffer(uint64_t a1, uint64_t a2, int a3, CVPixelBufferRef pixelBuffer, __int128 *a5, uint64_t a6)
{
  OSType PixelFormatType;
  int v12;
  __IOSurface *IOSurface;
  __IOSurface *v14;
  char *BaseAddress;
  char *v16;
  vImagePixelCount data_low;
  size_t Height;
  size_t v19;
  uint64_t v20;
  char *v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  char *v26;
  size_t v27;
  uint64_t v28;
  unsigned int v29;
  __IOSurface *buffer;
  vImage_Buffer src;
  void *__p;
  void *v33;
  vImage_Buffer dest;

  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  if (PixelFormatType == 1111970369)
    goto LABEL_4;
  if (PixelFormatType != 1278226536)
  {
    if (PixelFormatType != 1278226488)
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unsupported format: must be kCVPixelFormatType_OneComponent8, kCVPixelFormatType_32BGRA, or kCVPixelFormatType_OneComponent16Half");
LABEL_4:
    Espresso::abstract_blob_container::__copy_from_CVPixelBuffer((int *)a1, a2, v12, pixelBuffer, a5, a6);
    return;
  }
  if (!*(_QWORD *)(a1 + 160) && !*(_QWORD *)(a1 + 176))
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unsupported format: blob must be float16 or float32 for copy from kCVPixelFormatType_OneComponent16Half");
  IOSurface = CVPixelBufferGetIOSurface(pixelBuffer);
  buffer = IOSurface;
  if (IOSurface)
  {
    v14 = IOSurface;
    IOSurfaceLock(IOSurface, 5u, 0);
    BaseAddress = (char *)IOSurfaceGetBaseAddress(v14);
  }
  else
  {
    CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
  }
  v16 = BaseAddress;
  Espresso::abstract_blob_container::shape((char *)&src, a1);
  data_low = SLODWORD(src.data);
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
  Height = CVPixelBufferGetHeight(pixelBuffer);
  v19 = CVPixelBufferGetBytesPerRow(pixelBuffer) >> 1;
  v20 = *(_QWORD *)(a1 + 160);
  if (v20)
  {
    if (Height)
    {
      v21 = *(char **)(v20 + 24);
      v22 = 1;
      v23 = 2 * v19;
      do
      {
        src.data = v16;
        src.height = 1;
        src.width = data_low;
        src.rowBytes = 2 * data_low;
        dest.data = v21;
        dest.height = 1;
        dest.width = data_low;
        dest.rowBytes = 4 * data_low;
        vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
        v24 = Height > v22++;
        v21 += 4 * data_low;
        v16 += v23;
      }
      while (v24);
    }
  }
  else
  {
    v25 = *(_QWORD *)(a1 + 176);
    if (v25 && Height)
    {
      v26 = *(char **)(v25 + 24);
      v27 = 2 * data_low;
      v28 = 2 * v19;
      v29 = 1;
      do
      {
        memcpy(v26, v16, v27);
        v24 = Height > v29++;
        v26 += v27;
        v16 += v28;
      }
      while (v24);
    }
  }
  if (buffer)
    IOSurfaceUnlock(buffer, 4u, 0);
  else
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
}

void Espresso::blob_cpu::__copy_to_CVPixelBuffer(uint64_t a1, int a2, int a3, CVPixelBufferRef pixelBuffer)
{
  OSType PixelFormatType;
  int v7;
  int v8;
  OSType v9;
  __IOSurface *IOSurface;
  __IOSurface *v11;
  unsigned __int8 *BaseAddress;
  unsigned __int8 *v13;
  size_t v14;
  size_t Height;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  size_t v19;
  uint64_t i;
  uint64_t v26;
  char *v27;
  size_t v28;
  size_t v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  const float *v33;
  size_t BytesPerRow;
  size_t v35;
  uint64_t v36;
  unsigned int v37;
  char *v38;
  size_t v39;
  size_t v40;
  unsigned int v41;
  char v42[40];
  void *__p;
  void *v44;

  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  v9 = PixelFormatType;
  if (!*(_QWORD *)(a1 + 160) && !*(_QWORD *)(a1 + 176))
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unsupported format: blob must be float16 or float32 for copy to CVPixelBuffer.");
  if (PixelFormatType == 1278226536 || PixelFormatType == 1278226488)
  {
    IOSurface = CVPixelBufferGetIOSurface(pixelBuffer);
    v11 = IOSurface;
    if (IOSurface)
    {
      IOSurfaceLock(IOSurface, 4u, 0);
      BaseAddress = (unsigned __int8 *)IOSurfaceGetBaseAddress(v11);
    }
    else
    {
      CVPixelBufferLockBaseAddress(pixelBuffer, 0);
      BaseAddress = (unsigned __int8 *)CVPixelBufferGetBaseAddress(pixelBuffer);
    }
    v13 = BaseAddress;
    Espresso::abstract_blob_container::shape(v42, a1);
    v14 = *(int *)v42;
    if (__p)
    {
      v44 = __p;
      operator delete(__p);
    }
    Height = CVPixelBufferGetHeight(pixelBuffer);
    v16 = *(_QWORD *)(a1 + 160);
    if (v16)
    {
      if (v9 == 1278226488)
      {
        v33 = *(const float **)(v16 + 24);
        BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
        if (Height)
        {
          v35 = BytesPerRow;
          v36 = 4 * v14;
          v37 = 1;
          do
          {
            vDSP_vfixru8(v33, 1, v13, 1, *(int *)(*(_QWORD *)(a1 + 160) + 8));
            v13 += v35;
            v32 = Height > v37;
            v33 = (const float *)((char *)v33 + v36);
            ++v37;
          }
          while (v32);
        }
      }
      else if (v9 == 1278226536)
      {
        v17 = *(_QWORD *)(v16 + 24);
        v18 = CVPixelBufferGetBytesPerRow(pixelBuffer);
        if (Height)
        {
          LODWORD(v19) = 0;
          do
          {
            if ((_DWORD)v14)
            {
              for (i = 0; i != v14; ++i)
              {
                _S0 = *(_DWORD *)(v17 + 4 * i);
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v13[2 * i] = _S0;
              }
            }
            v19 = (v19 + 1);
            v13 += 2 * (v18 >> 1);
            v17 += 4 * v14;
          }
          while (Height > v19);
        }
      }
    }
    else
    {
      v26 = *(_QWORD *)(a1 + 176);
      if (v26)
      {
        if (v9 == 1278226488)
        {
          v38 = *(char **)(v26 + 24);
          v39 = CVPixelBufferGetBytesPerRow(pixelBuffer);
          if (Height)
          {
            v40 = v39;
            v41 = 1;
            do
            {
              memcpy(v13, v38, v14);
              v13 += v40;
              v32 = Height > v41++;
              v38 += 2 * v14;
            }
            while (v32);
          }
        }
        else if (v9 == 1278226536)
        {
          v27 = *(char **)(v26 + 24);
          v28 = CVPixelBufferGetBytesPerRow(pixelBuffer);
          if (Height)
          {
            v29 = 2 * v14;
            v30 = 2 * (v28 >> 1);
            v31 = 1;
            do
            {
              memcpy(v13, v27, v29);
              v32 = Height > v31++;
              v13 += v30;
              v27 += v29;
            }
            while (v32);
          }
        }
      }
    }
    if (v11)
      IOSurfaceUnlock(v11, 4u, 0);
    else
      CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  }
  else
  {
    if (PixelFormatType != 1111970369)
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unsupported format: must be kCVPixelFormatType_OneComponent8, kCVPixelFormatType_32BGRA, or kCVPixelFormatType_OneComponent16Half");
    Espresso::blob_cpu::__copy_to_interleaved_CVPixelBuffer(a1, v7, v8, pixelBuffer);
  }
}

BOOL Espresso::blob_cpu::set_reference_to(uint64_t a1, _QWORD *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;

  v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v4 == v5)
  {
    v6 = *a2;
    *(_DWORD *)(a1 + 240) = *(_DWORD *)(*a2 + 240);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v6 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v6 + 24);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 160), *(_QWORD *)(v6 + 160), *(_QWORD *)(v6 + 168));
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 176), *(_QWORD *)(v6 + 176), *(_QWORD *)(v6 + 184));
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 192), *(_QWORD *)(v6 + 192), *(_QWORD *)(v6 + 200));
    v8 = *(_QWORD *)(v6 + 208);
    v7 = *(_QWORD *)(v6 + 216);
    if (v7)
    {
      v9 = (unint64_t *)(v7 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = *(std::__shared_weak_count **)(a1 + 216);
    *(_QWORD *)(a1 + 208) = v8;
    *(_QWORD *)(a1 + 216) = v7;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v15 = *(_QWORD *)(v6 + 224);
    v14 = *(_QWORD *)(v6 + 232);
    if (v14)
    {
      v16 = (unint64_t *)(v14 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = *(std::__shared_weak_count **)(a1 + 232);
    *(_QWORD *)(a1 + 224) = v15;
    *(_QWORD *)(a1 + 232) = v14;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  return v4 == v5;
}

void *std::allocate_shared[abi:ne180100]<Espresso::blob<int,4>,std::allocator<Espresso::blob<int,4>>,int &,int &,int &,int &,Espresso::blob<int,4>::UnitializedBlobType,void>(_QWORD *a1, int a2, int a3, int a4, int a5)
{
  _QWORD *v10;
  void *result;

  v10 = operator new(0x60uLL);
  *v10 = &off_1E2DBEED8;
  v10[1] = 0;
  v10[3] = &off_1E2DA1330;
  *((_OWORD *)v10 + 4) = 0u;
  v10[2] = 0;
  *((_OWORD *)v10 + 5) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  *((_DWORD *)v10 + 9) = a3;
  *((_DWORD *)v10 + 10) = a4;
  *((_DWORD *)v10 + 11) = a5;
  result = Espresso::kern_alloc_uninitialized((Espresso *)(4 * a2 * (uint64_t)a3 * a4 * a5));
  v10[6] = result;
  *((_BYTE *)v10 + 56) = 1;
  *a1 = v10 + 3;
  a1[1] = v10;
  return result;
}

void sub_191747EA8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3].__shared_owners_);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void Espresso::blob_cpu::__copy_to_interleaved_CVPixelBuffer(uint64_t a1, int a2, int a3, CVPixelBufferRef pixelBuffer)
{
  __IOSurface *IOSurface;
  __IOSurface *v7;
  _BYTE *BaseAddress;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int *data;
  void *v15;
  vImagePixelCount v16;
  uint64_t v17;
  int *v18;
  std::__shared_weak_count **v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  size_t BytesPerRow;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  __int128 v45;
  vImage_Buffer dest;
  vImage_Buffer src;

  if (CVPixelBufferGetPixelFormatType(pixelBuffer) != 1111970369)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unsupported format: must be kCVPixelFormatType_OneComponent8, kCVPixelFormatType_32BGRA, or kCVPixelFormatType_OneComponent16Half");
  if (*(int *)(a1 + 16) >= 5)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unsupported format: blob may not have more than 4 channels for bgra buffer binding.");
  IOSurface = CVPixelBufferGetIOSurface(pixelBuffer);
  v7 = IOSurface;
  if (IOSurface)
  {
    IOSurfaceLock(IOSurface, 4u, 0);
    BaseAddress = IOSurfaceGetBaseAddress(v7);
  }
  else
  {
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    BaseAddress = CVPixelBufferGetBaseAddress(pixelBuffer);
  }
  v9 = BaseAddress;
  v45 = 0uLL;
  v10 = *(_QWORD *)(a1 + 176);
  if (v10)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&src, v10 + 8);
    v11 = 0;
    *((_QWORD *)&v45 + 1) = src.height;
    v12 = *(_QWORD *)(a1 + 176);
    v13 = *(void **)(v12 + 24);
    data = (int *)src.data;
    v15 = (void *)*((_QWORD *)src.data + 3);
    v16 = *(int *)(v12 + 8);
    v17 = v12 + 12;
    do
    {
      v16 *= *(int *)(v17 + v11);
      v11 += 4;
    }
    while (v11 != 12);
    src.data = v13;
    src.height = 1;
    src.width = v16;
    src.rowBytes = 2 * v16;
    dest.data = v15;
    dest.height = 1;
    dest.width = v16;
    dest.rowBytes = 4 * v16;
    vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
  }
  else
  {
    data = 0;
  }
  v18 = *(int **)(a1 + 160);
  v19 = (std::__shared_weak_count **)(a1 + 168);
  if (!v18)
    v19 = (std::__shared_weak_count **)&v45 + 1;
  v20 = *v19;
  if (v18)
    data = v18;
  src.data = data;
  src.height = (vImagePixelCount)v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  v23 = data[4];
  v24 = data[5];
  v26 = data[2];
  v25 = data[3];
  BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
  if ((_DWORD)v24)
  {
    v28 = 0;
    v29 = 0;
    v30 = v26 * (uint64_t)v25;
    if (v23 <= 1)
      v31 = 1;
    else
      v31 = v23;
    do
    {
      if ((_DWORD)v23)
      {
        v32 = 0;
        v33 = data[3];
        v34 = v28;
        v35 = v33;
        do
        {
          if (v35)
          {
            v36 = 0;
            LODWORD(v37) = data[2];
            do
            {
              if ((_DWORD)v37)
              {
                v38 = 0;
                v39 = 0;
                do
                {
                  v9[v32 + (v38 & 0xFFFFFFFC) + (v36 + v29 * data[3]) * BytesPerRow] = (int)*(float *)(*((_QWORD *)data + 3) + 4 * (v34 + v39++ + (v36 * v37)));
                  v37 = data[2];
                  v38 += 4;
                }
                while (v39 < v37);
                v33 = data[3];
              }
              ++v36;
              v35 = v33;
            }
            while (v36 < v33);
          }
          ++v32;
          v34 += v30;
        }
        while (v32 != v31);
      }
      ++v29;
      v28 += v23 * v30;
    }
    while (v29 != v24);
  }
  if (v7)
    IOSurfaceUnlock(v7, 4u, 0);
  else
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  if (v20)
  {
    v40 = (unint64_t *)&v20->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
  if (*((_QWORD *)&v45 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
}

void sub_1917481B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(_QWORD *a1, void *lpsrc, std::__shared_weak_count *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  if (!lpsrc
  {
    a3 = 0;
    goto LABEL_13;
  }
  v6 = v5;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if ((*(unsigned int (**)(_QWORD *))(*v5 + 32))(v5))
  {
LABEL_13:
    *a1 = 0;
    a1[1] = 0;
    if (!a3)
      return;
    goto LABEL_14;
  }
  v9 = v6[21];
  *a1 = v6[20];
  a1[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  if (a3)
  {
LABEL_14:
    v12 = (unint64_t *)&a3->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
}

void sub_1917482E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,true>(_QWORD *a1, void *lpsrc, std::__shared_weak_count *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  if (!lpsrc
  {
    a3 = 0;
    goto LABEL_13;
  }
  v6 = v5;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if ((*(unsigned int (**)(_QWORD *))(*v5 + 32))(v5) != 1)
  {
LABEL_13:
    *a1 = 0;
    a1[1] = 0;
    if (!a3)
      return;
    goto LABEL_14;
  }
  v9 = v6[23];
  *a1 = v6[22];
  a1[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  if (a3)
  {
LABEL_14:
    v12 = (unint64_t *)&a3->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
}

void sub_191748400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::get_cpu_blob@<X0>(uint64_t *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a1, a1[1], a2);
  if (result)
  {
    v5 = result[21];
    *a3 = result[20];
    a3[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

void Espresso::get_cpu_blob(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(a2, *(void **)a1, *(std::__shared_weak_count **)(a1 + 8));
}

void Espresso::get_cpu_blob_h(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,true>(a2, *(void **)a1, *(std::__shared_weak_count **)(a1 + 8));
}

void Espresso::get_cpu_blob_8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const void *v4;
  _QWORD *v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  v4 = *(const void **)a1;
  if (!v4
  {
    v7 = 0;
    goto LABEL_14;
  }
  v6 = v5;
  v7 = *(std::__shared_weak_count **)(a1 + 8);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if ((*(unsigned int (**)(_QWORD *))(*v5 + 32))(v5) != 2
    && (*(unsigned int (**)(_QWORD *))(*v6 + 32))(v6) != 4)
  {
LABEL_14:
    *a2 = 0;
    a2[1] = 0;
    if (!v7)
      return;
    goto LABEL_15;
  }
  v10 = v6[25];
  *a2 = v6[24];
  a2[1] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  if (v7)
  {
LABEL_15:
    v13 = (unint64_t *)&v7->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_191748590(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void Espresso::get_cpu_blob_i(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const void *v4;
  _QWORD *v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  v4 = *(const void **)a1;
  if (!v4
  {
    v7 = 0;
    goto LABEL_13;
  }
  v6 = v5;
  v7 = *(std::__shared_weak_count **)(a1 + 8);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if ((*(unsigned int (**)(_QWORD *))(*v5 + 32))(v5) != 3)
  {
LABEL_13:
    *a2 = 0;
    a2[1] = 0;
    if (!v7)
      return;
    goto LABEL_14;
  }
  v10 = v6[27];
  *a2 = v6[26];
  a2[1] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  if (v7)
  {
LABEL_14:
    v13 = (unint64_t *)&v7->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1917486C4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSGraphEngine::Kernels::dev_op_kernel::~dev_op_kernel(void **this)
{
  Espresso::generic_dev_op_kernel::~generic_dev_op_kernel(this);
  JUMPOUT(0x19401CD90);
}

BOOL Espresso::MPSGraphEngine::Kernels::dev_op_kernel::is_valid_for_engine(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 280);
  return v1 == 50005 || v1 == 50008;
}

void Espresso::V9Engine::batch::~batch(id *this)
{
  Espresso::batch_metal::~batch_metal(this);
  JUMPOUT(0x19401CD90);
}

__n128 Espresso::V9Engine::context::begin_batch@<Q0>(id *this@<X0>, __n128 *a2@<X8>)
{
  char *v4;
  void *v5;
  __n128 result;
  char v7;
  int v8;

  v4 = (char *)operator new(0x120uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1E2DC17C0;
  Espresso::batch_metal::batch_metal((Espresso::batch_metal *)(v4 + 24), this);
  *((_QWORD *)v4 + 3) = &off_1E2DA6A08;
  objc_msgSend(*((id *)v4 + 22), "endEncoding");
  v5 = (void *)*((_QWORD *)v4 + 22);
  *((_QWORD *)v4 + 22) = 0;

  result.n128_u64[0] = (unint64_t)(v4 + 24);
  result.n128_u64[1] = (unint64_t)v4;
  v7 = *((_BYTE *)this + 184);
  v8 = *((_DWORD *)this + 42);
  v4[240] = *((_BYTE *)this + 172);
  *((_DWORD *)v4 + 59) = v8;
  v4[256] = v7;
  *a2 = result;
  return result;
}

void sub_191748810(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  id *v2;
  void *v4;

  Espresso::batch_metal::~batch_metal(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::context::~context(id *this)
{
  Espresso::context_metal::~context_metal(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::V9Engine::context::network_transform_pre_allocation(Espresso::V9Engine::context *this, Espresso::net *a2)
{
  Espresso::net *v2;
  Espresso::V9Engine::context *v3;
  BOOL v4;
  int v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  BOOL v29;
  _DWORD *v30;
  _DWORD *v31;
  int v32;
  int *v33;
  int *v34;
  int v35;
  int v36;
  std::string::size_type v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  Espresso::net *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *size;
  unint64_t *v57;
  unint64_t v58;
  id v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  uint64_t **v63;
  uint64_t **v64;
  uint64_t *v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  void (***v74)(Espresso::V9Engine::v9_depthwise_kernel *__hidden);
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  BOOL v79;
  unint64_t *v80;
  unint64_t v81;
  _DWORD *v82;
  _DWORD *v83;
  int v84;
  int *v85;
  int *v86;
  int v87;
  int v88;
  std::string::size_type v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  id v110;
  uint64_t v111;
  unint64_t v112;
  int v113;
  uint64_t **v114;
  uint64_t **v115;
  uint64_t *v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  BOOL v133;
  _DWORD *v134;
  _DWORD *v135;
  int v136;
  int *v137;
  int *v138;
  int v139;
  int v140;
  std::string::size_type v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  id v162;
  uint64_t v163;
  unint64_t v164;
  int v165;
  uint64_t **v166;
  uint64_t **v167;
  uint64_t *v168;
  uint64_t v169;
  void *v170;
  uint64_t v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  uint64_t v177;
  void *v178;
  uint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  BOOL v185;
  _DWORD *v186;
  _DWORD *v187;
  int v188;
  int *v189;
  int *v190;
  int v191;
  int v192;
  std::string::size_type v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  const void *v217;
  void *v218;
  void *v219;
  uint64_t v220;
  unint64_t *v221;
  unint64_t v222;
  int v223;
  __int128 *v224;
  __int128 v225;
  uint64_t **v226;
  int v227;
  int v228;
  void **v229;
  int v230;
  void **v231;
  int v232;
  int v233;
  float v234;
  float v235;
  uint64_t **v236;
  uint64_t **v237;
  uint64_t **v238;
  uint64_t **v239;
  unint64_t v240;
  uint64_t *v241;
  unint64_t v242;
  uint64_t **v243;
  uint64_t **v244;
  unint64_t v245;
  std::vector<std::string> *v246;
  std::vector<std::string> *v247;
  uint64_t v248;
  int v249;
  int v250;
  void **v251;
  std::__shared_weak_count **v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  std::vector<std::string> *v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  std::vector<std::string> *v260;
  uint64_t v261;
  unint64_t *v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  uint64_t v273;
  int v274;
  __int128 v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  uint64_t v279;
  const void *v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  unint64_t v284;
  int v285;
  uint64_t **v286;
  uint64_t *v287;
  uint64_t *v288;
  uint64_t **v289;
  int v290;
  uint64_t *v291;
  uint64_t *v292;
  int v293;
  __int128 v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  uint64_t **v298;
  const void *v299;
  void **v300;
  void **v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  int v305;
  uint64_t v306;
  uint64_t v307;
  std::string::size_type v308;
  std::string::size_type v309;
  int v310;
  void *v311;
  uint64_t v312;
  unint64_t v313;
  int64_t v314;
  unint64_t v315;
  uint64_t v316;
  _DWORD *v317;
  int v318;
  uint64_t v319;
  unint64_t *v320;
  unint64_t v321;
  unint64_t *v322;
  unint64_t v323;
  void *v324;
  int64_t v325;
  uint64_t v326;
  uint64_t v327;
  BOOL v328;
  uint64_t v329;
  int v331;
  uint64_t **v332;
  int *v333;
  int *v334;
  uint64_t v335;
  int v336;
  __int128 v337;
  unint64_t *v338;
  unint64_t v339;
  uint64_t v340;
  const void *v341;
  void **v342;
  void **v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  unint64_t *v347;
  unint64_t v348;
  std::__shared_weak_count *v349;
  unint64_t *v350;
  unint64_t v351;
  uint64_t **v352;
  int *v353;
  int *v354;
  unint64_t v355;
  __int128 v356;
  std::__shared_weak_count *v357;
  unint64_t *v358;
  unint64_t v359;
  _QWORD *v360;
  _QWORD *v361;
  unint64_t *v362;
  unint64_t v363;
  unint64_t *v364;
  unint64_t v365;
  int v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  uint64_t v370;
  _QWORD *v371;
  uint64_t v372;
  unint64_t v373;
  uint64_t v374;
  void *v375;
  uint64_t v376;
  unint64_t *v377;
  unint64_t v378;
  std::__shared_weak_count *v379;
  unint64_t *v380;
  unint64_t v381;
  uint64_t v382;
  uint64_t v383;
  int v384;
  int v385;
  std::string::size_type v386;
  std::string::size_type v387;
  unint64_t *v388;
  unint64_t v389;
  std::__shared_weak_count *v390;
  unint64_t *v391;
  unint64_t v392;
  int v393;
  std::__shared_weak_count *v394;
  unint64_t *v395;
  unint64_t v396;
  std::__shared_weak_count *v397;
  unint64_t *v398;
  unint64_t v399;
  std::__shared_weak_count *v400;
  unint64_t *v401;
  unint64_t v402;
  uint64_t v403;
  unint64_t v404;
  int v405;
  uint64_t **v406;
  uint64_t **v407;
  uint64_t *v408;
  uint64_t v409;
  void *v410;
  uint64_t v411;
  unint64_t *v412;
  unint64_t v413;
  std::__shared_weak_count *v414;
  unint64_t *v415;
  unint64_t v416;
  uint64_t v417;
  void *v418;
  uint64_t v419;
  unint64_t *v420;
  unint64_t v421;
  std::__shared_weak_count *v422;
  unint64_t *v423;
  unint64_t v424;
  BOOL v425;
  _DWORD *v426;
  _DWORD *v427;
  int v428;
  int *v429;
  int *v430;
  int v431;
  int v432;
  std::string::size_type v433;
  unint64_t *v434;
  unint64_t v435;
  std::__shared_weak_count *v436;
  unint64_t *v437;
  unint64_t v438;
  std::__shared_weak_count *v439;
  unint64_t *v440;
  unint64_t v441;
  std::__shared_weak_count *v442;
  unint64_t *v443;
  unint64_t v444;
  std::__shared_weak_count *v445;
  unint64_t *v446;
  unint64_t v447;
  std::__shared_weak_count *v448;
  unint64_t *v449;
  unint64_t v450;
  std::__shared_weak_count *v451;
  unint64_t *v452;
  unint64_t v453;
  int v454;
  int v455;
  uint64_t v456;
  BOOL v457;
  unint64_t v458;
  uint64_t v459;
  Espresso::V9Engine::context *v460;
  uint64_t v461;
  __int16 v462;
  uint64_t v463;
  _QWORD *v464;
  Espresso::net *v465;
  _QWORD v466[2];
  void (*v467)(uint64_t, __int128 *);
  void *v468;
  Espresso::net *v469;
  _QWORD v470[2];
  void (*v471)(uint64_t, int64x2_t *);
  void *v472;
  Espresso::V9Engine::context *v473;
  Espresso::net *v474;
  BOOL v475;
  _QWORD v476[2];
  uint64_t v477;
  uint64_t v478;
  _QWORD v479[2];
  _QWORD v480[2];
  _QWORD v481[2];
  int v482[4];
  int v483;
  int v484;
  unint64_t v485;
  std::__shared_weak_count *v486;
  int v487;
  int v488;
  int v489;
  __int128 v490;
  _QWORD v491[2];
  __int128 v492;
  __int128 v493;
  _QWORD v494[4];
  __int128 __p;
  __int128 v496;
  __int128 v497;
  uint64_t v498;
  Espresso::net *v499;
  void **v500;
  std::__shared_weak_count *v501;
  std::string v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  std::string __str;
  __int128 v511;
  uint64_t *v512;
  _QWORD *v513;
  uint64_t v514;

  v514 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)a2 + 568))
  {
    v2 = a2;
    v3 = this;
    v4 = 1;
    *((_BYTE *)a2 + 568) = 1;
    v5 = *((_DWORD *)this + 57);
    if (v5 <= 0)
      v4 = getenv("DOWG") != 0;
    if (v5 < 0)
      v4 = 0;
    v457 = v4;
    v465 = v2;
    v460 = v3;
    if (*((_BYTE *)v3 + 220))
    {
      v6 = &__block_literal_global_12130;
      Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&__str, v2);
      v496 = 0u;
      v497 = 0u;
      __p = 0u;
      v493 = 0u;
      memset(v494, 0, sizeof(v494));
      v492 = 0u;
      v498 = 0;
      v499 = v2;
      LODWORD(v502.__r_.__value_.__l.__data_) = 0;
      v7 = *((_QWORD *)v2 + 4);
      if (*((_QWORD *)v2 + 5) != v7)
      {
        v8 = 0;
        v9 = 0;
        do
        {
          LODWORD(v498) = v9;
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v494, *(_QWORD *)(v7 + 16 * v8), *(_QWORD *)(v7 + 16 * v8 + 8));
          v10 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&__str.__r_.__value_.__r.__words[2], v9, &v502);
          if ((char *)v10[6] - (char *)v10[5] == 4)
          {
            HIDWORD(v498) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&__str.__r_.__value_.__r.__words[2], v498, &v498)[5];
            v11 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v512, SHIDWORD(v498), (_DWORD *)&v498 + 1);
            if ((char *)v11[6] - (char *)v11[5] == 4)
            {
              v12 = (uint64_t *)(*((_QWORD *)v2 + 4) + 16 * SHIDWORD(v498));
              std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v494[2], *v12, v12[1]);
              v13 = v494[0];
              v14 = *(void **)(v494[0] + 64);
              if (v14
              {
                v15 = *(_QWORD *)(v13 + 72);
                if (v15)
                {
                  v16 = (unint64_t *)(v15 + 8);
                  do
                    v17 = __ldxr(v16);
                  while (__stxr(v17 + 1, v16));
                }
              }
              else
              {
                v15 = 0;
              }
              v18 = (std::__shared_weak_count *)*((_QWORD *)&v492 + 1);
              *(_QWORD *)&v492 = v14;
              *((_QWORD *)&v492 + 1) = v15;
              if (v18)
              {
                p_shared_owners = (unint64_t *)&v18->__shared_owners_;
                do
                  v20 = __ldaxr(p_shared_owners);
                while (__stlxr(v20 - 1, p_shared_owners));
                if (!v20)
                {
                  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
                  std::__shared_weak_count::__release_weak(v18);
                }
              }
              v21 = v494[2];
              v22 = *(void **)(v494[2] + 64);
              if (v22
              {
                v23 = *(_QWORD *)(v21 + 72);
                if (v23)
                {
                  v24 = (unint64_t *)(v23 + 8);
                  do
                    v25 = __ldxr(v24);
                  while (__stxr(v25 + 1, v24));
                }
              }
              else
              {
                v23 = 0;
              }
              v26 = (std::__shared_weak_count *)*((_QWORD *)&v493 + 1);
              *(_QWORD *)&v493 = v22;
              *((_QWORD *)&v493 + 1) = v23;
              if (v26)
              {
                v27 = (unint64_t *)&v26->__shared_owners_;
                do
                  v28 = __ldaxr(v27);
                while (__stlxr(v28 - 1, v27));
                if (!v28)
                {
                  ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                  std::__shared_weak_count::__release_weak(v26);
                }
              }
              if ((_QWORD)v492)
                v29 = (_QWORD)v493 == 0;
              else
                v29 = 1;
              if (!v29)
                ___ZN8Espresso8V9Engine7context32network_transform_pre_allocationEPNS_3netE_block_invoke((uint64_t)v22, &v492);
            }
          }
          v8 = SLODWORD(v502.__r_.__value_.__l.__data_) + 1;
          ++LODWORD(v502.__r_.__value_.__l.__data_);
          v7 = *((_QWORD *)v2 + 4);
          v9 = v8;
        }
        while (v8 < (*((_QWORD *)v2 + 5) - v7) >> 4);
      }
      std::__sort<std::__less<int,int> &,int *>();
      v31 = (_DWORD *)*((_QWORD *)&__p + 1);
      v30 = (_DWORD *)__p;
      if ((_QWORD)__p != *((_QWORD *)&__p + 1))
      {
        v32 = 0;
        do
        {
          Espresso::net::remove_layer(v2, v32 + *v30++);
          --v32;
        }
        while (v30 != v31);
      }
      v33 = (int *)*((_QWORD *)&v496 + 1);
      v34 = (int *)v497;
      if (*((_QWORD *)&v496 + 1) != (_QWORD)v497)
      {
        v35 = 0;
        do
        {
          v36 = *v33;
          LODWORD(v485) = *v33 + v35;
          LODWORD(v502.__r_.__value_.__l.__data_) = v36;
          v37 = *((_QWORD *)v33 + 2);
          v502.__r_.__value_.__l.__size_ = *((_QWORD *)v33 + 1);
          v502.__r_.__value_.__r.__words[2] = v37;
          if (v37)
          {
            v38 = (unint64_t *)(v37 + 8);
            do
              v39 = __ldxr(v38);
            while (__stxr(v39 + 1, v38));
          }
          v503 = 0;
          v504 = 0;
          v505 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v503, *((_QWORD *)v33 + 3), *((_QWORD *)v33 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v33 + 4) - *((_QWORD *)v33 + 3)) >> 3));
          v506 = 0;
          v507 = 0;
          v508 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v506, *((_QWORD *)v33 + 6), *((_QWORD *)v33 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v33 + 7) - *((_QWORD *)v33 + 6)) >> 3));
          v490 = 0uLL;
          v491[0] = 0;
          v500 = (void **)&v490;
          LOBYTE(v501) = 0;
          *(_QWORD *)&v490 = operator new(0x48uLL);
          *((_QWORD *)&v490 + 1) = v490;
          v491[0] = v490 + 72;
          *((_QWORD *)&v490 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)v491, (uint64_t)&v502, (uint64_t)&v509, v490);
          Espresso::net::insert_layers((uint64_t)v465, (int *)&v485, (uint64_t *)&v490);
          v500 = (void **)&v490;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v500);
          v500 = (void **)&v506;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v500);
          v500 = (void **)&v503;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v500);
          v40 = (std::__shared_weak_count *)v502.__r_.__value_.__r.__words[2];
          if (v502.__r_.__value_.__r.__words[2])
          {
            v41 = (unint64_t *)(v502.__r_.__value_.__r.__words[2] + 8);
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v40);
            }
          }
          ++v35;
          v33 += 18;
        }
        while (v33 != v34);
      }
      v502.__r_.__value_.__r.__words[0] = (std::string::size_type)&v496 + 8;
      std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v502);
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      v43 = (std::__shared_weak_count *)v494[3];
      v44 = v465;
      if (v494[3])
      {
        v45 = (unint64_t *)(v494[3] + 8);
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v47 = (std::__shared_weak_count *)v494[1];
      if (v494[1])
      {
        v48 = (unint64_t *)(v494[1] + 8);
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      v50 = (std::__shared_weak_count *)*((_QWORD *)&v493 + 1);
      if (*((_QWORD *)&v493 + 1))
      {
        v51 = (unint64_t *)(*((_QWORD *)&v493 + 1) + 8);
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      v53 = (std::__shared_weak_count *)*((_QWORD *)&v492 + 1);
      if (*((_QWORD *)&v492 + 1))
      {
        v54 = (unint64_t *)(*((_QWORD *)&v492 + 1) + 8);
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v513);
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy((_QWORD *)v511);
      size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
      if (__str.__r_.__value_.__l.__size_)
      {
        v57 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }

      v59 = &__block_literal_global_19_12131;
      Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&__str, v465);
      v496 = 0u;
      v497 = 0u;
      __p = 0u;
      v493 = 0u;
      memset(v494, 0, sizeof(v494));
      v492 = 0u;
      v498 = 0;
      v499 = v465;
      LODWORD(v502.__r_.__value_.__l.__data_) = 0;
      v60 = *((_QWORD *)v465 + 4);
      if (*((_QWORD *)v465 + 5) != v60)
      {
        v61 = 0;
        v62 = 0;
        while (1)
        {
          LODWORD(v498) = v62;
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v494, *(_QWORD *)(v60 + 16 * v61), *(_QWORD *)(v60 + 16 * v61 + 8));
          v63 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&__str.__r_.__value_.__r.__words[2], v62, &v502);
          if ((char *)v63[6] - (char *)v63[5] == 4)
          {
            HIDWORD(v498) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&__str.__r_.__value_.__r.__words[2], v498, &v498)[5];
            v64 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v512, SHIDWORD(v498), (_DWORD *)&v498 + 1);
            if ((char *)v64[6] - (char *)v64[5] == 4)
              break;
          }
LABEL_112:
          v61 = SLODWORD(v502.__r_.__value_.__l.__data_) + 1;
          ++LODWORD(v502.__r_.__value_.__l.__data_);
          v60 = *((_QWORD *)v465 + 4);
          v62 = v61;
          if (v61 >= (*((_QWORD *)v465 + 5) - v60) >> 4)
          {
            v44 = v465;
            goto LABEL_118;
          }
        }
        v65 = (uint64_t *)(*((_QWORD *)v465 + 4) + 16 * SHIDWORD(v498));
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v494[2], *v65, v65[1]);
        v66 = v494[0];
        v67 = *(void **)(v494[0] + 64);
        if (v67
        {
          v68 = *(_QWORD *)(v66 + 72);
          if (v68)
          {
            v69 = (unint64_t *)(v68 + 8);
            do
              v70 = __ldxr(v69);
            while (__stxr(v70 + 1, v69));
          }
        }
        else
        {
          v68 = 0;
        }
        v71 = (std::__shared_weak_count *)*((_QWORD *)&v492 + 1);
        *(_QWORD *)&v492 = v67;
        *((_QWORD *)&v492 + 1) = v68;
        if (v71)
        {
          v72 = (unint64_t *)&v71->__shared_owners_;
          do
            v73 = __ldaxr(v72);
          while (__stlxr(v73 - 1, v72));
          if (!v73)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
        }
        v74 = *(void (****)(Espresso::V9Engine::v9_depthwise_kernel *__hidden))(v494[2] + 64);
        if (v74)
        {
          if (*v74 == &off_1E2DA5E28)
          {
            v75 = *(_QWORD *)(v494[2] + 72);
            if (v75)
            {
              v80 = (unint64_t *)(v75 + 8);
              do
                v81 = __ldxr(v80);
              while (__stxr(v81 + 1, v80));
            }
            goto LABEL_102;
          }
          v74 = 0;
        }
        v75 = 0;
LABEL_102:
        v76 = (std::__shared_weak_count *)*((_QWORD *)&v493 + 1);
        *(_QWORD *)&v493 = v74;
        *((_QWORD *)&v493 + 1) = v75;
        if (v76)
        {
          v77 = (unint64_t *)&v76->__shared_owners_;
          do
            v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
        if ((_QWORD)v492)
          v79 = (_QWORD)v493 == 0;
        else
          v79 = 1;
        if (!v79)
          ___ZN8Espresso8V9Engine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_2((uint64_t)v67, &v492);
        goto LABEL_112;
      }
LABEL_118:
      std::__sort<std::__less<int,int> &,int *>();
      v83 = (_DWORD *)*((_QWORD *)&__p + 1);
      v82 = (_DWORD *)__p;
      if ((_QWORD)__p != *((_QWORD *)&__p + 1))
      {
        v84 = 0;
        do
        {
          Espresso::net::remove_layer(v44, v84 + *v82++);
          --v84;
        }
        while (v82 != v83);
      }
      v85 = (int *)*((_QWORD *)&v496 + 1);
      v86 = (int *)v497;
      if (*((_QWORD *)&v496 + 1) != (_QWORD)v497)
      {
        v87 = 0;
        do
        {
          v88 = *v85;
          LODWORD(v485) = *v85 + v87;
          LODWORD(v502.__r_.__value_.__l.__data_) = v88;
          v89 = *((_QWORD *)v85 + 2);
          v502.__r_.__value_.__l.__size_ = *((_QWORD *)v85 + 1);
          v502.__r_.__value_.__r.__words[2] = v89;
          if (v89)
          {
            v90 = (unint64_t *)(v89 + 8);
            do
              v91 = __ldxr(v90);
            while (__stxr(v91 + 1, v90));
          }
          v503 = 0;
          v504 = 0;
          v505 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v503, *((_QWORD *)v85 + 3), *((_QWORD *)v85 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v85 + 4) - *((_QWORD *)v85 + 3)) >> 3));
          v506 = 0;
          v507 = 0;
          v508 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v506, *((_QWORD *)v85 + 6), *((_QWORD *)v85 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v85 + 7) - *((_QWORD *)v85 + 6)) >> 3));
          v490 = 0uLL;
          v491[0] = 0;
          v500 = (void **)&v490;
          LOBYTE(v501) = 0;
          *(_QWORD *)&v490 = operator new(0x48uLL);
          *((_QWORD *)&v490 + 1) = v490;
          v491[0] = v490 + 72;
          *((_QWORD *)&v490 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)v491, (uint64_t)&v502, (uint64_t)&v509, v490);
          Espresso::net::insert_layers((uint64_t)v465, (int *)&v485, (uint64_t *)&v490);
          v500 = (void **)&v490;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v500);
          v500 = (void **)&v506;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v500);
          v500 = (void **)&v503;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v500);
          v92 = (std::__shared_weak_count *)v502.__r_.__value_.__r.__words[2];
          if (v502.__r_.__value_.__r.__words[2])
          {
            v93 = (unint64_t *)(v502.__r_.__value_.__r.__words[2] + 8);
            do
              v94 = __ldaxr(v93);
            while (__stlxr(v94 - 1, v93));
            if (!v94)
            {
              ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
              std::__shared_weak_count::__release_weak(v92);
            }
          }
          ++v87;
          v85 += 18;
        }
        while (v85 != v86);
      }
      v502.__r_.__value_.__r.__words[0] = (std::string::size_type)&v496 + 8;
      std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v502);
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      v95 = (std::__shared_weak_count *)v494[3];
      v2 = v465;
      if (v494[3])
      {
        v96 = (unint64_t *)(v494[3] + 8);
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
        }
      }
      v98 = (std::__shared_weak_count *)v494[1];
      if (v494[1])
      {
        v99 = (unint64_t *)(v494[1] + 8);
        do
          v100 = __ldaxr(v99);
        while (__stlxr(v100 - 1, v99));
        if (!v100)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
        }
      }
      v101 = (std::__shared_weak_count *)*((_QWORD *)&v493 + 1);
      if (*((_QWORD *)&v493 + 1))
      {
        v102 = (unint64_t *)(*((_QWORD *)&v493 + 1) + 8);
        do
          v103 = __ldaxr(v102);
        while (__stlxr(v103 - 1, v102));
        if (!v103)
        {
          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
          std::__shared_weak_count::__release_weak(v101);
        }
      }
      v104 = (std::__shared_weak_count *)*((_QWORD *)&v492 + 1);
      if (*((_QWORD *)&v492 + 1))
      {
        v105 = (unint64_t *)(*((_QWORD *)&v492 + 1) + 8);
        do
          v106 = __ldaxr(v105);
        while (__stlxr(v106 - 1, v105));
        if (!v106)
        {
          ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
          std::__shared_weak_count::__release_weak(v104);
        }
      }
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v513);
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy((_QWORD *)v511);
      v107 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
      if (__str.__r_.__value_.__l.__size_)
      {
        v108 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
        do
          v109 = __ldaxr(v108);
        while (__stlxr(v109 - 1, v108));
        if (!v109)
        {
          ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
          std::__shared_weak_count::__release_weak(v107);
        }
      }

      v3 = v460;
    }
    if (*((_BYTE *)v3 + 221))
    {
      v110 = &__block_literal_global_20_12132;
      Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&__str, v2);
      v496 = 0u;
      v497 = 0u;
      __p = 0u;
      v493 = 0u;
      memset(v494, 0, sizeof(v494));
      v492 = 0u;
      v498 = 0;
      v499 = v2;
      LODWORD(v502.__r_.__value_.__l.__data_) = 0;
      v111 = *((_QWORD *)v2 + 4);
      if (*((_QWORD *)v2 + 5) != v111)
      {
        v112 = 0;
        v113 = 0;
        do
        {
          LODWORD(v498) = v113;
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v494, *(_QWORD *)(v111 + 16 * v112), *(_QWORD *)(v111 + 16 * v112 + 8));
          v114 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&__str.__r_.__value_.__r.__words[2], v113, &v502);
          if ((char *)v114[6] - (char *)v114[5] == 4)
          {
            HIDWORD(v498) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&__str.__r_.__value_.__r.__words[2], v498, &v498)[5];
            v115 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v512, SHIDWORD(v498), (_DWORD *)&v498 + 1);
            if ((char *)v115[6] - (char *)v115[5] == 4)
            {
              v116 = (uint64_t *)(*((_QWORD *)v465 + 4) + 16 * SHIDWORD(v498));
              std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v494[2], *v116, v116[1]);
              v117 = v494[0];
              v118 = *(void **)(v494[0] + 64);
              if (v118
              {
                v119 = *(_QWORD *)(v117 + 72);
                if (v119)
                {
                  v120 = (unint64_t *)(v119 + 8);
                  do
                    v121 = __ldxr(v120);
                  while (__stxr(v121 + 1, v120));
                }
              }
              else
              {
                v119 = 0;
              }
              v122 = (std::__shared_weak_count *)*((_QWORD *)&v492 + 1);
              *(_QWORD *)&v492 = v118;
              *((_QWORD *)&v492 + 1) = v119;
              if (v122)
              {
                v123 = (unint64_t *)&v122->__shared_owners_;
                do
                  v124 = __ldaxr(v123);
                while (__stlxr(v124 - 1, v123));
                if (!v124)
                {
                  ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                  std::__shared_weak_count::__release_weak(v122);
                }
              }
              v125 = v494[2];
              v126 = *(void **)(v494[2] + 64);
              if (v126
              {
                v127 = *(_QWORD *)(v125 + 72);
                if (v127)
                {
                  v128 = (unint64_t *)(v127 + 8);
                  do
                    v129 = __ldxr(v128);
                  while (__stxr(v129 + 1, v128));
                }
              }
              else
              {
                v127 = 0;
              }
              v130 = (std::__shared_weak_count *)*((_QWORD *)&v493 + 1);
              *(_QWORD *)&v493 = v126;
              *((_QWORD *)&v493 + 1) = v127;
              if (v130)
              {
                v131 = (unint64_t *)&v130->__shared_owners_;
                do
                  v132 = __ldaxr(v131);
                while (__stlxr(v132 - 1, v131));
                if (!v132)
                {
                  ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                  std::__shared_weak_count::__release_weak(v130);
                }
              }
              if ((_QWORD)v492)
                v133 = (_QWORD)v493 == 0;
              else
                v133 = 1;
              if (!v133)
                ___ZN8Espresso8V9Engine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_3((uint64_t)v126, &v492);
            }
          }
          v112 = SLODWORD(v502.__r_.__value_.__l.__data_) + 1;
          ++LODWORD(v502.__r_.__value_.__l.__data_);
          v111 = *((_QWORD *)v465 + 4);
          v113 = v112;
        }
        while (v112 < (*((_QWORD *)v465 + 5) - v111) >> 4);
        v2 = v465;
      }
      std::__sort<std::__less<int,int> &,int *>();
      v135 = (_DWORD *)*((_QWORD *)&__p + 1);
      v134 = (_DWORD *)__p;
      if ((_QWORD)__p != *((_QWORD *)&__p + 1))
      {
        v136 = 0;
        do
        {
          Espresso::net::remove_layer(v2, v136 + *v134++);
          --v136;
        }
        while (v134 != v135);
      }
      v137 = (int *)*((_QWORD *)&v496 + 1);
      v138 = (int *)v497;
      if (*((_QWORD *)&v496 + 1) != (_QWORD)v497)
      {
        v139 = 0;
        do
        {
          v140 = *v137;
          LODWORD(v485) = *v137 + v139;
          LODWORD(v502.__r_.__value_.__l.__data_) = v140;
          v141 = *((_QWORD *)v137 + 2);
          v502.__r_.__value_.__l.__size_ = *((_QWORD *)v137 + 1);
          v502.__r_.__value_.__r.__words[2] = v141;
          if (v141)
          {
            v142 = (unint64_t *)(v141 + 8);
            do
              v143 = __ldxr(v142);
            while (__stxr(v143 + 1, v142));
          }
          v503 = 0;
          v504 = 0;
          v505 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v503, *((_QWORD *)v137 + 3), *((_QWORD *)v137 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v137 + 4) - *((_QWORD *)v137 + 3)) >> 3));
          v506 = 0;
          v507 = 0;
          v508 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v506, *((_QWORD *)v137 + 6), *((_QWORD *)v137 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v137 + 7) - *((_QWORD *)v137 + 6)) >> 3));
          v490 = 0uLL;
          v491[0] = 0;
          v500 = (void **)&v490;
          LOBYTE(v501) = 0;
          *(_QWORD *)&v490 = operator new(0x48uLL);
          *((_QWORD *)&v490 + 1) = v490;
          v491[0] = v490 + 72;
          *((_QWORD *)&v490 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)v491, (uint64_t)&v502, (uint64_t)&v509, v490);
          Espresso::net::insert_layers((uint64_t)v465, (int *)&v485, (uint64_t *)&v490);
          v500 = (void **)&v490;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v500);
          v500 = (void **)&v506;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v500);
          v500 = (void **)&v503;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v500);
          v144 = (std::__shared_weak_count *)v502.__r_.__value_.__r.__words[2];
          if (v502.__r_.__value_.__r.__words[2])
          {
            v145 = (unint64_t *)(v502.__r_.__value_.__r.__words[2] + 8);
            do
              v146 = __ldaxr(v145);
            while (__stlxr(v146 - 1, v145));
            if (!v146)
            {
              ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
              std::__shared_weak_count::__release_weak(v144);
            }
          }
          ++v139;
          v137 += 18;
        }
        while (v137 != v138);
      }
      v502.__r_.__value_.__r.__words[0] = (std::string::size_type)&v496 + 8;
      std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v502);
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      v147 = (std::__shared_weak_count *)v494[3];
      v2 = v465;
      if (v494[3])
      {
        v148 = (unint64_t *)(v494[3] + 8);
        do
          v149 = __ldaxr(v148);
        while (__stlxr(v149 - 1, v148));
        if (!v149)
        {
          ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
          std::__shared_weak_count::__release_weak(v147);
        }
      }
      v150 = (std::__shared_weak_count *)v494[1];
      if (v494[1])
      {
        v151 = (unint64_t *)(v494[1] + 8);
        do
          v152 = __ldaxr(v151);
        while (__stlxr(v152 - 1, v151));
        if (!v152)
        {
          ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
          std::__shared_weak_count::__release_weak(v150);
        }
      }
      v153 = (std::__shared_weak_count *)*((_QWORD *)&v493 + 1);
      if (*((_QWORD *)&v493 + 1))
      {
        v154 = (unint64_t *)(*((_QWORD *)&v493 + 1) + 8);
        do
          v155 = __ldaxr(v154);
        while (__stlxr(v155 - 1, v154));
        if (!v155)
        {
          ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
          std::__shared_weak_count::__release_weak(v153);
        }
      }
      v156 = (std::__shared_weak_count *)*((_QWORD *)&v492 + 1);
      if (*((_QWORD *)&v492 + 1))
      {
        v157 = (unint64_t *)(*((_QWORD *)&v492 + 1) + 8);
        do
          v158 = __ldaxr(v157);
        while (__stlxr(v158 - 1, v157));
        if (!v158)
        {
          ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
          std::__shared_weak_count::__release_weak(v156);
        }
      }
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v513);
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy((_QWORD *)v511);
      v159 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
      if (__str.__r_.__value_.__l.__size_)
      {
        v160 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
        do
          v161 = __ldaxr(v160);
        while (__stlxr(v161 - 1, v160));
        if (!v161)
        {
          ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
          std::__shared_weak_count::__release_weak(v159);
        }
      }

      v3 = v460;
    }
    if (*((_BYTE *)v3 + 224))
    {
      v162 = &__block_literal_global_21_12133;
      Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&__str, v2);
      v496 = 0u;
      v497 = 0u;
      __p = 0u;
      v493 = 0u;
      memset(v494, 0, sizeof(v494));
      v492 = 0u;
      v498 = 0;
      v499 = v2;
      LODWORD(v502.__r_.__value_.__l.__data_) = 0;
      v163 = *((_QWORD *)v2 + 4);
      if (*((_QWORD *)v2 + 5) != v163)
      {
        v164 = 0;
        v165 = 0;
        do
        {
          LODWORD(v498) = v165;
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v494, *(_QWORD *)(v163 + 16 * v164), *(_QWORD *)(v163 + 16 * v164 + 8));
          v166 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&__str.__r_.__value_.__r.__words[2], v165, &v502);
          if ((char *)v166[6] - (char *)v166[5] == 4)
          {
            HIDWORD(v498) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&__str.__r_.__value_.__r.__words[2], v498, &v498)[5];
            v167 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v512, SHIDWORD(v498), (_DWORD *)&v498 + 1);
            if ((char *)v167[6] - (char *)v167[5] == 4)
            {
              v168 = (uint64_t *)(*((_QWORD *)v465 + 4) + 16 * SHIDWORD(v498));
              std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v494[2], *v168, v168[1]);
              v169 = v494[0];
              v170 = *(void **)(v494[0] + 64);
              if (v170
              {
                v171 = *(_QWORD *)(v169 + 72);
                if (v171)
                {
                  v172 = (unint64_t *)(v171 + 8);
                  do
                    v173 = __ldxr(v172);
                  while (__stxr(v173 + 1, v172));
                }
              }
              else
              {
                v171 = 0;
              }
              v174 = (std::__shared_weak_count *)*((_QWORD *)&v492 + 1);
              *(_QWORD *)&v492 = v170;
              *((_QWORD *)&v492 + 1) = v171;
              if (v174)
              {
                v175 = (unint64_t *)&v174->__shared_owners_;
                do
                  v176 = __ldaxr(v175);
                while (__stlxr(v176 - 1, v175));
                if (!v176)
                {
                  ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                  std::__shared_weak_count::__release_weak(v174);
                }
              }
              v177 = v494[2];
              v178 = *(void **)(v494[2] + 64);
              if (v178
              {
                v179 = *(_QWORD *)(v177 + 72);
                if (v179)
                {
                  v180 = (unint64_t *)(v179 + 8);
                  do
                    v181 = __ldxr(v180);
                  while (__stxr(v181 + 1, v180));
                }
              }
              else
              {
                v179 = 0;
              }
              v182 = (std::__shared_weak_count *)*((_QWORD *)&v493 + 1);
              *(_QWORD *)&v493 = v178;
              *((_QWORD *)&v493 + 1) = v179;
              if (v182)
              {
                v183 = (unint64_t *)&v182->__shared_owners_;
                do
                  v184 = __ldaxr(v183);
                while (__stlxr(v184 - 1, v183));
                if (!v184)
                {
                  ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                  std::__shared_weak_count::__release_weak(v182);
                }
              }
              if ((_QWORD)v492)
                v185 = (_QWORD)v493 == 0;
              else
                v185 = 1;
              if (!v185)
                ___ZN8Espresso8V9Engine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_4((uint64_t)v178, &v492);
            }
          }
          v164 = SLODWORD(v502.__r_.__value_.__l.__data_) + 1;
          ++LODWORD(v502.__r_.__value_.__l.__data_);
          v163 = *((_QWORD *)v465 + 4);
          v165 = v164;
        }
        while (v164 < (*((_QWORD *)v465 + 5) - v163) >> 4);
        v2 = v465;
      }
      std::__sort<std::__less<int,int> &,int *>();
      v187 = (_DWORD *)*((_QWORD *)&__p + 1);
      v186 = (_DWORD *)__p;
      if ((_QWORD)__p != *((_QWORD *)&__p + 1))
      {
        v188 = 0;
        do
        {
          Espresso::net::remove_layer(v2, v188 + *v186++);
          --v188;
        }
        while (v186 != v187);
      }
      v189 = (int *)*((_QWORD *)&v496 + 1);
      v190 = (int *)v497;
      if (*((_QWORD *)&v496 + 1) != (_QWORD)v497)
      {
        v191 = 0;
        do
        {
          v192 = *v189;
          LODWORD(v485) = *v189 + v191;
          LODWORD(v502.__r_.__value_.__l.__data_) = v192;
          v193 = *((_QWORD *)v189 + 2);
          v502.__r_.__value_.__l.__size_ = *((_QWORD *)v189 + 1);
          v502.__r_.__value_.__r.__words[2] = v193;
          if (v193)
          {
            v194 = (unint64_t *)(v193 + 8);
            do
              v195 = __ldxr(v194);
            while (__stxr(v195 + 1, v194));
          }
          v503 = 0;
          v504 = 0;
          v505 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v503, *((_QWORD *)v189 + 3), *((_QWORD *)v189 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v189 + 4) - *((_QWORD *)v189 + 3)) >> 3));
          v506 = 0;
          v507 = 0;
          v508 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v506, *((_QWORD *)v189 + 6), *((_QWORD *)v189 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v189 + 7) - *((_QWORD *)v189 + 6)) >> 3));
          v490 = 0uLL;
          v491[0] = 0;
          v500 = (void **)&v490;
          LOBYTE(v501) = 0;
          *(_QWORD *)&v490 = operator new(0x48uLL);
          *((_QWORD *)&v490 + 1) = v490;
          v491[0] = v490 + 72;
          *((_QWORD *)&v490 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)v491, (uint64_t)&v502, (uint64_t)&v509, v490);
          Espresso::net::insert_layers((uint64_t)v465, (int *)&v485, (uint64_t *)&v490);
          v500 = (void **)&v490;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v500);
          v500 = (void **)&v506;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v500);
          v500 = (void **)&v503;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v500);
          v196 = (std::__shared_weak_count *)v502.__r_.__value_.__r.__words[2];
          if (v502.__r_.__value_.__r.__words[2])
          {
            v197 = (unint64_t *)(v502.__r_.__value_.__r.__words[2] + 8);
            do
              v198 = __ldaxr(v197);
            while (__stlxr(v198 - 1, v197));
            if (!v198)
            {
              ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
              std::__shared_weak_count::__release_weak(v196);
            }
          }
          ++v191;
          v189 += 18;
        }
        while (v189 != v190);
      }
      v502.__r_.__value_.__r.__words[0] = (std::string::size_type)&v496 + 8;
      std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v502);
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      v199 = (std::__shared_weak_count *)v494[3];
      v2 = v465;
      if (v494[3])
      {
        v200 = (unint64_t *)(v494[3] + 8);
        do
          v201 = __ldaxr(v200);
        while (__stlxr(v201 - 1, v200));
        if (!v201)
        {
          ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
          std::__shared_weak_count::__release_weak(v199);
        }
      }
      v202 = (std::__shared_weak_count *)v494[1];
      if (v494[1])
      {
        v203 = (unint64_t *)(v494[1] + 8);
        do
          v204 = __ldaxr(v203);
        while (__stlxr(v204 - 1, v203));
        if (!v204)
        {
          ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
          std::__shared_weak_count::__release_weak(v202);
        }
      }
      v205 = (std::__shared_weak_count *)*((_QWORD *)&v493 + 1);
      if (*((_QWORD *)&v493 + 1))
      {
        v206 = (unint64_t *)(*((_QWORD *)&v493 + 1) + 8);
        do
          v207 = __ldaxr(v206);
        while (__stlxr(v207 - 1, v206));
        if (!v207)
        {
          ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
          std::__shared_weak_count::__release_weak(v205);
        }
      }
      v208 = (std::__shared_weak_count *)*((_QWORD *)&v492 + 1);
      if (*((_QWORD *)&v492 + 1))
      {
        v209 = (unint64_t *)(*((_QWORD *)&v492 + 1) + 8);
        do
          v210 = __ldaxr(v209);
        while (__stlxr(v210 - 1, v209));
        if (!v210)
        {
          ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
          std::__shared_weak_count::__release_weak(v208);
        }
      }
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v513);
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy((_QWORD *)v511);
      v211 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
      if (__str.__r_.__value_.__l.__size_)
      {
        v212 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
        do
          v213 = __ldaxr(v212);
        while (__stlxr(v213 - 1, v212));
        if (!v213)
        {
          ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
          std::__shared_weak_count::__release_weak(v211);
        }
      }

      v3 = v460;
    }
    if (*((_BYTE *)v3 + 222))
    {
      Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&v492, v2);
      v489 = 0;
      if (*((_QWORD *)v2 + 5) != *((_QWORD *)v2 + 4))
      {
        LODWORD(v214) = 0;
        v215 = (uint64_t)v2 + 96;
        v461 = (uint64_t)v2 + 56;
        do
        {
          v216 = *(_QWORD *)(*((_QWORD *)v2 + 4) + 16 * (int)v214);
          v217 = *(const void **)(v216 + 64);
          if (v217
          {
            v219 = v218;
            v220 = *(_QWORD *)(v216 + 72);
            if (v220)
            {
              v221 = (unint64_t *)(v220 + 8);
              do
                v222 = __ldxr(v221);
              while (__stxr(v222 + 1, v221));
            }
            *(_QWORD *)&v490 = v218;
            *((_QWORD *)&v490 + 1) = v220;
            v223 = v214;
            __str.__r_.__value_.__r.__words[0] = (int)v214;
            v224 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v215, (int)v214, &__str)[3];
            if (*((char *)v224 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v502, *(const std::string::value_type **)v224, *((_QWORD *)v224 + 1));
            }
            else
            {
              v225 = *v224;
              v502.__r_.__value_.__r.__words[2] = *((_QWORD *)v224 + 2);
              *(_OWORD *)&v502.__r_.__value_.__l.__data_ = v225;
            }
            if (*(_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v219 + 320))(v219)
              || (v226 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v494[1], v214, &v489), (char *)v226[6] - (char *)v226[5] != 8))
            {
              v230 = 4;
            }
            else
            {
              v227 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v494[1], v214, &v489)[5];
              v488 = v227;
              v228 = *((_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v494[1], v223, &v489)[5]+ 1);
              v487 = v228;
              Espresso::match_if_type<Espresso::V9Engine::v9_batchnorm_kernel>(&v500, (uint64_t)v2, v227);
              Espresso::match_if_type<Espresso::V9Engine::v9_batchnorm_kernel>(&v485, (uint64_t)v2, v228);
              v229 = v500;
              v230 = 4;
              if (v500)
              {
                v231 = (void **)v485;
                if (v485)
                {
                  v232 = *(_DWORD *)((*((uint64_t (**)(void **))*v500 + 48))(v500) + 28);
                  if (v232 == *(_DWORD *)((*((uint64_t (**)(void **))*v231 + 48))(v231) + 28))
                  {
                    v233 = *(_DWORD *)((*((uint64_t (**)(void **))*v229 + 48))(v229) + 24);
                    if (v233 == *(_DWORD *)((*((uint64_t (**)(void **))*v231 + 48))(v231) + 24))
                    {
                      v234 = *(float *)((*((uint64_t (**)(void **))*v229 + 48))(v229) + 12);
                      if (vabds_f32(v234, *(float *)((*((uint64_t (**)(void **))*v231 + 48))(v231) + 12)) <= 0.00001)
                      {
                        v235 = *(float *)((*((uint64_t (**)(void **))*v229 + 48))(v229) + 36);
                        if (vabds_f32(v235, *(float *)((*((uint64_t (**)(void **))*v231 + 48))(v231) + 36)) <= 0.00001)
                        {
                          v236 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v493, v227, &v488);
                          if ((char *)v236[6] - (char *)v236[5] == 4)
                          {
                            v237 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v493, v228, &v487);
                            if ((char *)v237[6] - (char *)v237[5] == 4)
                            {
                              v238 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v494[1], v227, &v488);
                              if ((char *)v238[6] - (char *)v238[5] == 4)
                              {
                                v239 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v494[1], v228, &v487);
                                if ((char *)v239[6] - (char *)v239[5] == 4)
                                {
                                  v484 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v494[1], v227, &v488)[5];
                                  v240 = v484;
                                  v241 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v494[1], v228, &v487)[5];
                                  v242 = *(int *)v241;
                                  v483 = *(_DWORD *)v241;
                                  v243 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v493, v240, &v484);
                                  if ((char *)v243[6] - (char *)v243[5] == 4
                                    && (v244 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v493, v242, &v483), v458 = v240, (char *)v244[6] - (char *)v244[5] == 4))
                                  {
                                    Espresso::match_if_type<Espresso::V9Engine::v9_conv_kernel>(v482, (uint64_t)v465, v240);
                                    v245 = v242;
                                    Espresso::match_if_type<Espresso::V9Engine::v9_conv_kernel>(v481, (uint64_t)v465, v242);
                                    v230 = 4;
                                    if (*(_QWORD *)v482 && v481[0])
                                    {
                                      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_pre_instancenorm", (const void **)&v502.__r_.__value_.__l.__data_, &__str);
                                      v480[0] = v458;
                                      v246 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v215, v458, v480);
                                      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(v246 + 1, &__str, &v511, 1uLL);
                                      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                                        operator delete(__str.__r_.__value_.__l.__data_);
                                      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_pre_instancenorm", (const void **)&v502.__r_.__value_.__l.__data_, &__str);
                                      v480[0] = v245;
                                      v247 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v215, v245, v480);
                                      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(v247 + 1, &__str, &v511, 1uLL);
                                      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                                        operator delete(__str.__r_.__value_.__l.__data_);
                                      v248 = *(int *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)v482 + 384))(*(_QWORD *)v482)
                                                    + 40);
                                      v459 = *(int *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)v481[0] + 384))(v481[0])
                                                    + 40);
                                      if (((v248 | v459) & 3) != 0)
                                      {
                                        v230 = 4;
                                      }
                                      else
                                      {
                                        *(_WORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)v482 + 384))(*(_QWORD *)v482)
                                                 + 126) = 0;
                                        *(_WORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)v481[0] + 384))(v481[0])
                                                 + 126) = v248;
                                        v455 = v459 + v248;
                                        *(_WORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)v482 + 384))(*(_QWORD *)v482)
                                                 + 130) = v459 + v248;
                                        *(_WORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)v481[0] + 384))(v481[0])
                                                 + 130) = v459 + v248;
                                        *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)v482 + 384))(*(_QWORD *)v482)
                                                  + 148) = -1;
                                        *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)v481[0] + 384))(v481[0])
                                                  + 148) = -1;
                                        if (v228 >= v227)
                                          v249 = v227;
                                        else
                                          v249 = v228;
                                        v454 = v249;
                                        if (v227 <= v228)
                                          v250 = v228;
                                        else
                                          v250 = v227;
                                        if (v227 >= v228)
                                          v251 = v229;
                                        else
                                          v251 = v231;
                                        v480[0] = v251;
                                        v252 = &v486;
                                        if (v227 >= v228)
                                          v252 = &v501;
                                        v253 = *v252;
                                        v480[1] = v253;
                                        if (v253)
                                        {
                                          v254 = (unint64_t *)&v253->__shared_owners_;
                                          do
                                            v255 = __ldxr(v254);
                                          while (__stxr(v255 + 1, v254));
                                        }
                                        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_pre_instancenorm", (const void **)&v502.__r_.__value_.__l.__data_, &__str);
                                        v479[0] = v250;
                                        v256 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v461, v250, v479);
                                        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(v256 + 1, &__str, &v511, 1uLL);
                                        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(__str.__r_.__value_.__l.__data_);
                                        if (SHIBYTE(v502.__r_.__value_.__r.__words[2]) < 0)
                                          std::string::__init_copy_ctor_external(&__str, v502.__r_.__value_.__l.__data_, v502.__r_.__value_.__l.__size_);
                                        else
                                          __str = v502;
                                        v479[0] = v250;
                                        v260 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v215, v250, v479);
                                        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(v260 + 1, &__str, &v511, 1uLL);
                                        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(__str.__r_.__value_.__l.__data_);
                                        (*((void (**)(std::string *__return_ptr, void **))*v229 + 51))(&__str, v229);
                                        (*((void (**)(_QWORD *__return_ptr, void **))*v231 + 51))(v479, v231);
                                        Espresso::blob<float,1>::make(&v477, 4 * v455);
                                        memcpy(*(void **)(v477 + 16), *(const void **)(__str.__r_.__value_.__r.__words[0] + 16), 16 * v248);
                                        memcpy((void *)(*(_QWORD *)(v477 + 16) + 16 * v248), *(const void **)(v479[0] + 16), 16 * v459);
                                        *(_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v480[0] + 384))(v480[0]) = v455;
                                        v261 = v480[0];
                                        v476[0] = v477;
                                        v476[1] = v478;
                                        if (v478)
                                        {
                                          v262 = (unint64_t *)(v478 + 8);
                                          do
                                            v263 = __ldxr(v262);
                                          while (__stxr(v263 + 1, v262));
                                        }
                                        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v261 + 392))(v261, v476);
                                        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v476);
                                        Espresso::net::remove_layer(v465, v223);
                                        Espresso::net::remove_layer(v465, v454);
                                        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v477);
                                        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v479);
                                        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__str);
                                        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v480);
                                        v230 = 2;
                                      }
                                    }
                                    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v481);
                                    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v482);
                                  }
                                  else
                                  {
                                    v230 = 4;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              v264 = v486;
              if (v486)
              {
                v265 = (unint64_t *)&v486->__shared_owners_;
                do
                  v266 = __ldaxr(v265);
                while (__stlxr(v266 - 1, v265));
                if (!v266)
                {
                  ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
                  std::__shared_weak_count::__release_weak(v264);
                }
              }
              v267 = v501;
              if (v501)
              {
                v268 = (unint64_t *)&v501->__shared_owners_;
                do
                  v269 = __ldaxr(v268);
                while (__stlxr(v269 - 1, v268));
                if (!v269)
                {
                  ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
                  std::__shared_weak_count::__release_weak(v267);
                }
              }
            }
            if (SHIBYTE(v502.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v502.__r_.__value_.__l.__data_);
            v257 = (std::__shared_weak_count *)*((_QWORD *)&v490 + 1);
            if (*((_QWORD *)&v490 + 1))
            {
              v258 = (unint64_t *)(*((_QWORD *)&v490 + 1) + 8);
              do
                v259 = __ldaxr(v258);
              while (__stlxr(v259 - 1, v258));
              if (!v259)
              {
                ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
                std::__shared_weak_count::__release_weak(v257);
              }
            }
            v29 = v230 == 4;
            v2 = v465;
            if (!v29)
              break;
          }
          else
          {
            v490 = 0uLL;
          }
          v214 = ++v489;
        }
        while (v214 < (uint64_t)(*((_QWORD *)v2 + 5) - *((_QWORD *)v2 + 4)) >> 4);
      }
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy((_QWORD *)v494[2]);
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*((_QWORD **)&v493 + 1));
      v270 = (std::__shared_weak_count *)*((_QWORD *)&v492 + 1);
      if (*((_QWORD *)&v492 + 1))
      {
        v271 = (unint64_t *)(*((_QWORD *)&v492 + 1) + 8);
        do
          v272 = __ldaxr(v271);
        while (__stlxr(v272 - 1, v271));
        if (!v272)
        {
          ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
          std::__shared_weak_count::__release_weak(v270);
        }
      }
      v3 = v460;
      if (*((_BYTE *)v460 + 222))
      {
        Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&v492, v2);
        v273 = (*((_QWORD *)v2 + 5) - *((_QWORD *)v2 + 4)) >> 4;
        v274 = v273 - 2;
        v482[0] = v273 - 2;
        if ((_DWORD)v273 == 1)
          goto LABEL_523;
        v456 = (uint64_t)v2 + 96;
        while (1)
        {
          v275 = *(_OWORD *)(*((_QWORD *)v2 + 4) + 16 * v274);
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v275;
          v276 = (std::__shared_weak_count *)*((_QWORD *)&v275 + 1);
          if (*((_QWORD *)&v275 + 1))
          {
            v277 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 8);
            do
              v278 = __ldxr(v277);
            while (__stxr(v278 + 1, v277));
          }
          v279 = v275;
          v280 = *(const void **)(v275 + 64);
          if (!v280
          {
            goto LABEL_517;
          }
          v281 = *(std::__shared_weak_count **)(v279 + 72);
          if (v281)
          {
            v282 = (unint64_t *)&v281->__shared_owners_;
            do
              v283 = __ldxr(v282);
            while (__stxr(v283 + 1, v282));
            do
              v284 = __ldaxr(v282);
            while (__stlxr(v284 - 1, v282));
            if (!v284)
            {
              ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
              std::__shared_weak_count::__release_weak(v281);
            }
          }
          memset(&v502, 0, sizeof(v502));
          v285 = v482[0];
          v286 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v494[1], v482[0], v482);
          v288 = v286[5];
          v287 = v286[6];
          v289 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v494[1], v285, v482);
          LOBYTE(v290) = v287 != v288;
          v292 = v289[5];
          v291 = v289[6];
          if (v292 == v291)
          {
            if (v287 == v288)
              goto LABEL_516;
            v462 = 0;
LABEL_479:
            v331 = v482[0];
            v332 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v494[1], v482[0], v482);
            v333 = (int *)v332[5];
            v334 = (int *)v332[6];
            if (v333 != v334)
            {
              v335 = 0;
              v336 = 0;
              do
              {
                v337 = *(_OWORD *)(*((_QWORD *)v465 + 4) + 16 * *v333);
                v490 = v337;
                if (*((_QWORD *)&v337 + 1))
                {
                  v338 = (unint64_t *)(*((_QWORD *)&v337 + 1) + 8);
                  do
                    v339 = __ldxr(v338);
                  while (__stxr(v339 + 1, v338));
                }
                v340 = v337;
                v341 = *(const void **)(v337 + 64);
                if (v341)
                {
                  if (v342)
                  {
                    v343 = v342;
                    v344 = *(std::__shared_weak_count **)(v340 + 72);
                    v500 = v342;
                    v501 = v344;
                    if (v344)
                    {
                      v345 = (unint64_t *)&v344->__shared_owners_;
                      do
                        v346 = __ldxr(v345);
                      while (__stxr(v346 + 1, v345));
                    }
                    *(_WORD *)((*((uint64_t (**)(void **))*v342 + 48))(v342) + 126) = v336;
                    *(_WORD *)((*((uint64_t (**)(void **))*v343 + 48))(v343) + 130) = v462;
                    v336 += *(_DWORD *)(v502.__r_.__value_.__r.__words[0] + 4 * v335);
                    if (v344)
                    {
                      v347 = (unint64_t *)&v344->__shared_owners_;
                      do
                        v348 = __ldaxr(v347);
                      while (__stlxr(v348 - 1, v347));
                      if (!v348)
                      {
                        ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
                        std::__shared_weak_count::__release_weak(v344);
                      }
                    }
                  }
                }
                v349 = (std::__shared_weak_count *)*((_QWORD *)&v490 + 1);
                if (*((_QWORD *)&v490 + 1))
                {
                  v350 = (unint64_t *)(*((_QWORD *)&v490 + 1) + 8);
                  do
                    v351 = __ldaxr(v350);
                  while (__stlxr(v351 - 1, v350));
                  if (!v351)
                  {
                    ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
                    std::__shared_weak_count::__release_weak(v349);
                  }
                }
                ++v335;
                ++v333;
              }
              while (v333 != v334);
              v331 = v482[0];
            }
            v352 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v494[1], v331, v482);
            v353 = (int *)v352[5];
            v354 = (int *)v352[6];
            if (v353 != v354)
            {
              do
              {
                v355 = *v353;
                v356 = *(_OWORD *)(*((_QWORD *)v465 + 4) + 16 * v355);
                v490 = v356;
                v357 = (std::__shared_weak_count *)*((_QWORD *)&v356 + 1);
                if (*((_QWORD *)&v356 + 1))
                {
                  v358 = (unint64_t *)(*((_QWORD *)&v356 + 1) + 8);
                  do
                    v359 = __ldxr(v358);
                  while (__stxr(v359 + 1, v358));
                }
                v500 = (void **)v482[0];
                v360 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v456, v482[0], &v500);
                v485 = v355;
                v361 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v456, v355, &v485);
                if (v361 != v360)
                  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v361 + 3), (std::string *)v360[3], (std::string *)v360[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v360[4] - v360[3]) >> 3));
                if (v357)
                {
                  v362 = (unint64_t *)&v357->__shared_owners_;
                  do
                    v363 = __ldaxr(v362);
                  while (__stlxr(v363 - 1, v362));
                  if (!v363)
                  {
                    ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
                    std::__shared_weak_count::__release_weak(v357);
                  }
                }
                ++v353;
              }
              while (v353 != v354);
              v331 = v482[0];
            }
            Espresso::net::remove_layer(v465, v331);
            v324 = (void *)v502.__r_.__value_.__r.__words[0];
            if (v502.__r_.__value_.__r.__words[0])
              goto LABEL_515;
            goto LABEL_516;
          }
          v462 = 0;
          do
          {
            LODWORD(v485) = *(_DWORD *)v292;
            v293 = v485;
            v294 = *(_OWORD *)(*((_QWORD *)v465 + 4) + 16 * (int)v485);
            v490 = v294;
            v295 = (std::__shared_weak_count *)*((_QWORD *)&v294 + 1);
            v463 = v294;
            if (*((_QWORD *)&v294 + 1))
            {
              v296 = (unint64_t *)(*((_QWORD *)&v294 + 1) + 8);
              do
                v297 = __ldxr(v296);
              while (__stxr(v297 + 1, v296));
            }
            v298 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v493, v293, &v485);
            if ((char *)v298[6] - (char *)v298[5] != 4)
            {
              v290 = 0;
              v310 = 7;
              if (!v295)
                goto LABEL_463;
LABEL_459:
              v322 = (unint64_t *)&v295->__shared_owners_;
              do
                v323 = __ldaxr(v322);
              while (__stlxr(v323 - 1, v322));
              if (!v323)
              {
                ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
                std::__shared_weak_count::__release_weak(v295);
              }
              goto LABEL_463;
            }
            v299 = *(const void **)(v463 + 64);
            if (v299
            {
              v301 = v300;
              v302 = *(std::__shared_weak_count **)(v463 + 72);
              v500 = v300;
              v501 = v302;
              if (v302)
              {
                v303 = (unint64_t *)&v302->__shared_owners_;
                do
                  v304 = __ldxr(v303);
                while (__stxr(v304 + 1, v303));
              }
              v305 = *(_DWORD *)((*((uint64_t (**)(void **))*v300 + 48))(v300) + 40);
              v306 = (*((uint64_t (**)(void **))*v301 + 48))(v301);
              v307 = v306;
              v308 = v502.__r_.__value_.__l.__size_;
              if (v502.__r_.__value_.__l.__size_ >= v502.__r_.__value_.__r.__words[2])
              {
                v311 = (void *)v502.__r_.__value_.__r.__words[0];
                v312 = (uint64_t)(v502.__r_.__value_.__l.__size_ - v502.__r_.__value_.__r.__words[0]) >> 2;
                v313 = v312 + 1;
                if ((unint64_t)(v312 + 1) >> 62)
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                v314 = v502.__r_.__value_.__r.__words[2] - v502.__r_.__value_.__r.__words[0];
                if ((uint64_t)(v502.__r_.__value_.__r.__words[2] - v502.__r_.__value_.__r.__words[0]) >> 1 > v313)
                  v313 = v314 >> 1;
                if ((unint64_t)v314 >= 0x7FFFFFFFFFFFFFFCLL)
                  v315 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v315 = v313;
                if (v315)
                  v315 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v315);
                else
                  v316 = 0;
                v317 = (_DWORD *)(v315 + 4 * v312);
                *v317 = *(_DWORD *)(v307 + 40);
                v309 = (std::string::size_type)(v317 + 1);
                while ((void *)v308 != v311)
                {
                  v318 = *(_DWORD *)(v308 - 4);
                  v308 -= 4;
                  *--v317 = v318;
                }
                v502.__r_.__value_.__r.__words[0] = (std::string::size_type)v317;
                v502.__r_.__value_.__r.__words[2] = v315 + 4 * v316;
                if (v311)
                  operator delete(v311);
              }
              else
              {
                *(_DWORD *)v502.__r_.__value_.__l.__size_ = *(_DWORD *)(v306 + 40);
                v309 = v308 + 4;
              }
              v502.__r_.__value_.__l.__size_ = v309;
              if (*(_WORD *)((*((uint64_t (**)(void **))*v301 + 48))(v301) + 126))
              {
                v290 = 0;
                v310 = 7;
              }
              else
              {
                v319 = (*((uint64_t (**)(void **))*v301 + 48))(v301);
                v290 = (*(_WORD *)(v319 + 130) == 0) & v290;
                if (*(_WORD *)(v319 + 130))
                  v310 = 7;
                else
                  v310 = 0;
              }
              v462 += v305;
              if (v302)
              {
                v320 = (unint64_t *)&v302->__shared_owners_;
                do
                  v321 = __ldaxr(v320);
                while (__stlxr(v321 - 1, v320));
                if (!v321)
                {
                  ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
                  std::__shared_weak_count::__release_weak(v302);
                }
              }
            }
            else
            {
              v290 = 0;
              v310 = 7;
            }
            v295 = (std::__shared_weak_count *)*((_QWORD *)&v490 + 1);
            if (*((_QWORD *)&v490 + 1))
              goto LABEL_459;
LABEL_463:
            if (v310)
              break;
            v292 = (uint64_t *)((char *)v292 + 4);
          }
          while (v292 != v291);
          v324 = (void *)v502.__r_.__value_.__r.__words[0];
          v325 = v502.__r_.__value_.__l.__size_ - v502.__r_.__value_.__r.__words[0];
          if (v502.__r_.__value_.__l.__size_ == v502.__r_.__value_.__r.__words[0])
          {
LABEL_474:
            if (!v290)
            {
              if (v502.__r_.__value_.__r.__words[0])
                goto LABEL_515;
              goto LABEL_516;
            }
            goto LABEL_479;
          }
          v326 = 0;
          v327 = v325 >> 2;
          v328 = v325 >> 2 != 0;
          v329 = (v325 >> 2) - 1;
          if (v329 == 0 || !v328)
            v327 = 1;
          while ((*(_DWORD *)(v502.__r_.__value_.__r.__words[0] + 4 * v326) & 3) == 0 || v329 == v326)
          {
            if (v327 == ++v326)
              goto LABEL_474;
          }
LABEL_515:
          v502.__r_.__value_.__l.__size_ = (std::string::size_type)v324;
          operator delete(v324);
LABEL_516:
          v276 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
          v2 = v465;
LABEL_517:
          if (v276)
          {
            v364 = (unint64_t *)&v276->__shared_owners_;
            do
              v365 = __ldaxr(v364);
            while (__stlxr(v365 - 1, v364));
            if (!v365)
            {
              ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
              std::__shared_weak_count::__release_weak(v276);
            }
          }
          v366 = v482[0];
          v274 = --v482[0];
          if (!v366)
          {
LABEL_523:
            std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy((_QWORD *)v494[2]);
            std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*((_QWORD **)&v493 + 1));
            v367 = (std::__shared_weak_count *)*((_QWORD *)&v492 + 1);
            if (*((_QWORD *)&v492 + 1))
            {
              v368 = (unint64_t *)(*((_QWORD *)&v492 + 1) + 8);
              do
                v369 = __ldaxr(v368);
              while (__stlxr(v369 - 1, v368));
              if (!v369)
              {
                ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
                std::__shared_weak_count::__release_weak(v367);
              }
            }
            v3 = v460;
            break;
          }
        }
      }
    }
    v370 = MEMORY[0x1E0C809B0];
    v470[0] = MEMORY[0x1E0C809B0];
    v470[1] = 3221225472;
    v471 = ___ZN8Espresso8V9Engine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_6;
    v472 = &__block_descriptor_49_e9_v16__0_v8l;
    v475 = v457;
    v473 = v3;
    v474 = v2;
    v371 = v470;
    Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&__str, v2);
    v493 = 0u;
    memset(v494, 0, 28);
    v492 = 0u;
    *(_QWORD *)&__p = v2;
    v372 = *((_QWORD *)v2 + 4);
    if (*((_QWORD *)v2 + 5) != v372)
    {
      v373 = 0;
      do
      {
        LODWORD(v494[3]) = v373;
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v493, *(_QWORD *)(v372 + 16 * v373), *(_QWORD *)(v372 + 16 * v373 + 8));
        v374 = v493;
        v375 = *(void **)(v493 + 64);
        if (v375
        {
          v376 = *(_QWORD *)(v374 + 72);
          if (v376)
          {
            v377 = (unint64_t *)(v376 + 8);
            do
              v378 = __ldxr(v377);
            while (__stxr(v378 + 1, v377));
          }
        }
        else
        {
          v376 = 0;
        }
        v379 = (std::__shared_weak_count *)*((_QWORD *)&v492 + 1);
        *(_QWORD *)&v492 = v375;
        *((_QWORD *)&v492 + 1) = v376;
        if (v379)
        {
          v380 = (unint64_t *)&v379->__shared_owners_;
          do
            v381 = __ldaxr(v380);
          while (__stlxr(v381 - 1, v380));
          if (!v381)
          {
            ((void (*)(std::__shared_weak_count *))v379->__on_zero_shared)(v379);
            std::__shared_weak_count::__release_weak(v379);
          }
          v375 = (void *)v492;
        }
        if (v375)
          v471((uint64_t)v371, (int64x2_t *)&v492);
        ++v373;
        v372 = *((_QWORD *)v2 + 4);
      }
      while (v373 < (*((_QWORD *)v2 + 5) - v372) >> 4);
      v382 = v494[0];
      v383 = v494[1];
      if (v494[0] != v494[1])
      {
        v384 = 0;
        do
        {
          v385 = *(_DWORD *)v382 + v384;
          *(_DWORD *)v382 = v385;
          v386 = *(_QWORD *)(v382 + 8);
          if (v386)
          {
            LODWORD(v502.__r_.__value_.__l.__data_) = v385;
            v387 = *(_QWORD *)(v382 + 16);
            v502.__r_.__value_.__l.__size_ = v386;
            v502.__r_.__value_.__r.__words[2] = v387;
            if (v387)
            {
              v388 = (unint64_t *)(v387 + 8);
              do
                v389 = __ldxr(v388);
              while (__stxr(v389 + 1, v388));
            }
            v503 = 0;
            v504 = 0;
            v505 = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v503, *(_QWORD *)(v382 + 24), *(_QWORD *)(v382 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v382 + 32) - *(_QWORD *)(v382 + 24)) >> 3));
            v506 = 0;
            v507 = 0;
            v508 = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v506, *(_QWORD *)(v382 + 48), *(_QWORD *)(v382 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v382 + 56) - *(_QWORD *)(v382 + 48)) >> 3));
            v490 = 0uLL;
            v491[0] = 0;
            v500 = (void **)&v490;
            LOBYTE(v501) = 0;
            *(_QWORD *)&v490 = operator new(0x48uLL);
            *((_QWORD *)&v490 + 1) = v490;
            v491[0] = v490 + 72;
            *((_QWORD *)&v490 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)v491, (uint64_t)&v502, (uint64_t)&v509, v490);
            Espresso::net::insert_layers((uint64_t)v465, (uint64_t *)&v490);
            v500 = (void **)&v490;
            std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v500);
            v500 = (void **)&v506;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v500);
            v500 = (void **)&v503;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v500);
            v390 = (std::__shared_weak_count *)v502.__r_.__value_.__r.__words[2];
            if (v502.__r_.__value_.__r.__words[2])
            {
              v391 = (unint64_t *)(v502.__r_.__value_.__r.__words[2] + 8);
              do
                v392 = __ldaxr(v391);
              while (__stlxr(v392 - 1, v391));
              if (!v392)
              {
                ((void (*)(std::__shared_weak_count *))v390->__on_zero_shared)(v390);
                std::__shared_weak_count::__release_weak(v390);
              }
            }
            v393 = 1;
            v2 = v465;
          }
          else
          {
            Espresso::net::remove_layer(v2, v385);
            v393 = -1;
          }
          v384 += v393;
          v382 += 72;
        }
        while (v382 != v383);
        v370 = MEMORY[0x1E0C809B0];
      }
    }
    v502.__r_.__value_.__r.__words[0] = (std::string::size_type)v494;
    std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v502);
    v394 = (std::__shared_weak_count *)*((_QWORD *)&v493 + 1);
    if (*((_QWORD *)&v493 + 1))
    {
      v395 = (unint64_t *)(*((_QWORD *)&v493 + 1) + 8);
      do
        v396 = __ldaxr(v395);
      while (__stlxr(v396 - 1, v395));
      if (!v396)
      {
        ((void (*)(std::__shared_weak_count *))v394->__on_zero_shared)(v394);
        std::__shared_weak_count::__release_weak(v394);
      }
    }
    v397 = (std::__shared_weak_count *)*((_QWORD *)&v492 + 1);
    if (*((_QWORD *)&v492 + 1))
    {
      v398 = (unint64_t *)(*((_QWORD *)&v492 + 1) + 8);
      do
        v399 = __ldaxr(v398);
      while (__stlxr(v399 - 1, v398));
      if (!v399)
      {
        ((void (*)(std::__shared_weak_count *))v397->__on_zero_shared)(v397);
        std::__shared_weak_count::__release_weak(v397);
      }
    }
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v513);
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy((_QWORD *)v511);
    v400 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
    if (__str.__r_.__value_.__l.__size_)
    {
      v401 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
      do
        v402 = __ldaxr(v401);
      while (__stlxr(v402 - 1, v401));
      if (!v402)
      {
        ((void (*)(std::__shared_weak_count *))v400->__on_zero_shared)(v400);
        std::__shared_weak_count::__release_weak(v400);
      }
    }

    if (*((_BYTE *)v460 + 223))
    {
      v466[0] = v370;
      v466[1] = 3221225472;
      v467 = (void (*)(uint64_t, __int128 *))___ZN8Espresso8V9Engine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_7;
      v468 = &__block_descriptor_40_e9_v16__0_v8l;
      v469 = v2;
      v464 = v466;
      Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&__str, v2);
      v496 = 0u;
      v497 = 0u;
      __p = 0u;
      v493 = 0u;
      memset(v494, 0, sizeof(v494));
      v492 = 0u;
      v498 = 0;
      v499 = v2;
      LODWORD(v502.__r_.__value_.__l.__data_) = 0;
      v403 = *((_QWORD *)v2 + 4);
      if (*((_QWORD *)v2 + 5) != v403)
      {
        v404 = 0;
        v405 = 0;
        do
        {
          LODWORD(v498) = v405;
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v494, *(_QWORD *)(v403 + 16 * v404), *(_QWORD *)(v403 + 16 * v404 + 8));
          v406 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&__str.__r_.__value_.__r.__words[2], v405, &v502);
          if ((char *)v406[6] - (char *)v406[5] == 4)
          {
            HIDWORD(v498) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&__str.__r_.__value_.__r.__words[2], v498, &v498)[5];
            v407 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v512, SHIDWORD(v498), (_DWORD *)&v498 + 1);
            if ((char *)v407[6] - (char *)v407[5] == 4)
            {
              v408 = (uint64_t *)(*((_QWORD *)v465 + 4) + 16 * SHIDWORD(v498));
              std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v494[2], *v408, v408[1]);
              v409 = v494[0];
              v410 = *(void **)(v494[0] + 64);
              if (v410
              {
                v411 = *(_QWORD *)(v409 + 72);
                if (v411)
                {
                  v412 = (unint64_t *)(v411 + 8);
                  do
                    v413 = __ldxr(v412);
                  while (__stxr(v413 + 1, v412));
                }
              }
              else
              {
                v411 = 0;
              }
              v414 = (std::__shared_weak_count *)*((_QWORD *)&v492 + 1);
              *(_QWORD *)&v492 = v410;
              *((_QWORD *)&v492 + 1) = v411;
              if (v414)
              {
                v415 = (unint64_t *)&v414->__shared_owners_;
                do
                  v416 = __ldaxr(v415);
                while (__stlxr(v416 - 1, v415));
                if (!v416)
                {
                  ((void (*)(std::__shared_weak_count *))v414->__on_zero_shared)(v414);
                  std::__shared_weak_count::__release_weak(v414);
                }
              }
              v417 = v494[2];
              v418 = *(void **)(v494[2] + 64);
              if (v418
              {
                v419 = *(_QWORD *)(v417 + 72);
                if (v419)
                {
                  v420 = (unint64_t *)(v419 + 8);
                  do
                    v421 = __ldxr(v420);
                  while (__stxr(v421 + 1, v420));
                }
              }
              else
              {
                v419 = 0;
              }
              v422 = (std::__shared_weak_count *)*((_QWORD *)&v493 + 1);
              *(_QWORD *)&v493 = v418;
              *((_QWORD *)&v493 + 1) = v419;
              if (v422)
              {
                v423 = (unint64_t *)&v422->__shared_owners_;
                do
                  v424 = __ldaxr(v423);
                while (__stlxr(v424 - 1, v423));
                if (!v424)
                {
                  ((void (*)(std::__shared_weak_count *))v422->__on_zero_shared)(v422);
                  std::__shared_weak_count::__release_weak(v422);
                }
              }
              if ((_QWORD)v492)
                v425 = (_QWORD)v493 == 0;
              else
                v425 = 1;
              if (!v425)
                v467((uint64_t)v464, &v492);
            }
          }
          v404 = SLODWORD(v502.__r_.__value_.__l.__data_) + 1;
          ++LODWORD(v502.__r_.__value_.__l.__data_);
          v403 = *((_QWORD *)v465 + 4);
          v405 = v404;
        }
        while (v404 < (*((_QWORD *)v465 + 5) - v403) >> 4);
        v2 = v465;
      }
      std::__sort<std::__less<int,int> &,int *>();
      v427 = (_DWORD *)*((_QWORD *)&__p + 1);
      v426 = (_DWORD *)__p;
      if ((_QWORD)__p != *((_QWORD *)&__p + 1))
      {
        v428 = 0;
        do
        {
          Espresso::net::remove_layer(v2, v428 + *v426++);
          --v428;
        }
        while (v426 != v427);
      }
      v429 = (int *)*((_QWORD *)&v496 + 1);
      v430 = (int *)v497;
      if (*((_QWORD *)&v496 + 1) != (_QWORD)v497)
      {
        v431 = 0;
        do
        {
          v432 = *v429;
          LODWORD(v485) = *v429 + v431;
          LODWORD(v502.__r_.__value_.__l.__data_) = v432;
          v433 = *((_QWORD *)v429 + 2);
          v502.__r_.__value_.__l.__size_ = *((_QWORD *)v429 + 1);
          v502.__r_.__value_.__r.__words[2] = v433;
          if (v433)
          {
            v434 = (unint64_t *)(v433 + 8);
            do
              v435 = __ldxr(v434);
            while (__stxr(v435 + 1, v434));
          }
          v503 = 0;
          v504 = 0;
          v505 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v503, *((_QWORD *)v429 + 3), *((_QWORD *)v429 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v429 + 4) - *((_QWORD *)v429 + 3)) >> 3));
          v506 = 0;
          v507 = 0;
          v508 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v506, *((_QWORD *)v429 + 6), *((_QWORD *)v429 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v429 + 7) - *((_QWORD *)v429 + 6)) >> 3));
          v490 = 0uLL;
          v491[0] = 0;
          v500 = (void **)&v490;
          LOBYTE(v501) = 0;
          *(_QWORD *)&v490 = operator new(0x48uLL);
          *((_QWORD *)&v490 + 1) = v490;
          v491[0] = v490 + 72;
          *((_QWORD *)&v490 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)v491, (uint64_t)&v502, (uint64_t)&v509, v490);
          Espresso::net::insert_layers((uint64_t)v465, (int *)&v485, (uint64_t *)&v490);
          v500 = (void **)&v490;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v500);
          v500 = (void **)&v506;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v500);
          v500 = (void **)&v503;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v500);
          v436 = (std::__shared_weak_count *)v502.__r_.__value_.__r.__words[2];
          if (v502.__r_.__value_.__r.__words[2])
          {
            v437 = (unint64_t *)(v502.__r_.__value_.__r.__words[2] + 8);
            do
              v438 = __ldaxr(v437);
            while (__stlxr(v438 - 1, v437));
            if (!v438)
            {
              ((void (*)(std::__shared_weak_count *))v436->__on_zero_shared)(v436);
              std::__shared_weak_count::__release_weak(v436);
            }
          }
          ++v431;
          v429 += 18;
        }
        while (v429 != v430);
      }
      v502.__r_.__value_.__r.__words[0] = (std::string::size_type)&v496 + 8;
      std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v502);
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      v439 = (std::__shared_weak_count *)v494[3];
      if (v494[3])
      {
        v440 = (unint64_t *)(v494[3] + 8);
        do
          v441 = __ldaxr(v440);
        while (__stlxr(v441 - 1, v440));
        if (!v441)
        {
          ((void (*)(std::__shared_weak_count *))v439->__on_zero_shared)(v439);
          std::__shared_weak_count::__release_weak(v439);
        }
      }
      v442 = (std::__shared_weak_count *)v494[1];
      if (v494[1])
      {
        v443 = (unint64_t *)(v494[1] + 8);
        do
          v444 = __ldaxr(v443);
        while (__stlxr(v444 - 1, v443));
        if (!v444)
        {
          ((void (*)(std::__shared_weak_count *))v442->__on_zero_shared)(v442);
          std::__shared_weak_count::__release_weak(v442);
        }
      }
      v445 = (std::__shared_weak_count *)*((_QWORD *)&v493 + 1);
      if (*((_QWORD *)&v493 + 1))
      {
        v446 = (unint64_t *)(*((_QWORD *)&v493 + 1) + 8);
        do
          v447 = __ldaxr(v446);
        while (__stlxr(v447 - 1, v446));
        if (!v447)
        {
          ((void (*)(std::__shared_weak_count *))v445->__on_zero_shared)(v445);
          std::__shared_weak_count::__release_weak(v445);
        }
      }
      v448 = (std::__shared_weak_count *)*((_QWORD *)&v492 + 1);
      if (*((_QWORD *)&v492 + 1))
      {
        v449 = (unint64_t *)(*((_QWORD *)&v492 + 1) + 8);
        do
          v450 = __ldaxr(v449);
        while (__stlxr(v450 - 1, v449));
        if (!v450)
        {
          ((void (*)(std::__shared_weak_count *))v448->__on_zero_shared)(v448);
          std::__shared_weak_count::__release_weak(v448);
        }
      }
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v513);
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy((_QWORD *)v511);
      v451 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
      if (__str.__r_.__value_.__l.__size_)
      {
        v452 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
        do
          v453 = __ldaxr(v452);
        while (__stlxr(v453 - 1, v452));
        if (!v453)
        {
          ((void (*)(std::__shared_weak_count *))v451->__on_zero_shared)(v451);
          std::__shared_weak_count::__release_weak(v451);
        }
      }

    }
  }
}

void sub_19174B748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,char a38,uint64_t a39,char a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;
  void *__p;
  uint64_t v71;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v71 - 192);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a38);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a40);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a42);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a69);
  if (SLOBYTE(STACK[0x207]) < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
  Espresso::network_optimization_graph::~network_optimization_graph((Espresso::network_optimization_graph *)&a53);
  _Unwind_Resume(a1);
}

uint64_t Espresso::V9Engine::context::is_valid_for_submit(uint64_t a1, uint64_t *a2)
{
  int v3;
  uint64_t v4;
  uint64_t i;

  v3 = (***(uint64_t (****)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 8));
  v4 = *a2;
LABEL_2:
  if (v4 == a2[1])
    return 1;
  for (i = *(_QWORD *)(*(_QWORD *)v4 + 32); ; i += 16)
  {
    if (i == *(_QWORD *)(*(_QWORD *)v4 + 40))
    {
      v4 += 16;
      goto LABEL_2;
    }
    if (*(_DWORD *)(*(_QWORD *)i + 8) != v3)
      break;
  }
  return 0;
}

void Espresso::match_if_type<Espresso::V9Engine::v9_batchnorm_kernel>(_QWORD *a1, uint64_t a2, int a3)
{
  id v6;
  uint64_t v7;
  const void *v8;
  void *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v6 = &__block_literal_global_23_12134;
  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 16 * a3);
  v8 = *(const void **)(v7 + 64);
  if (v8
  {
    v10 = v9;
    v11 = *(std::__shared_weak_count **)(v7 + 72);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    if (*(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v9 + 384))(v9) + 8) == 1)
    {
      *a1 = v10;
      a1[1] = v11;
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
      if (v11)
      {
        v14 = (unint64_t *)&v11->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }

}

void sub_19174BD8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void Espresso::match_if_type<Espresso::V9Engine::v9_conv_kernel>(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v4;
  const void *v5;
  void *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 16 * a3);
  v5 = *(const void **)(v4 + 64);
  if (v5
  {
    v7 = *(_QWORD *)(v4 + 72);
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    *a1 = v6;
    a1[1] = v7;
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }

}

void ___ZN8Espresso8V9Engine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_6(uint64_t a1, int64x2_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  __int16 v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  __int128 v31;
  uint64_t v32;
  __int128 *v33;
  __int128 v34;
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  __int128 v38;
  const void *v39;
  uint64_t **v40;
  char *v41;
  __int128 v42;
  const void *v43;
  int v44;
  int32x4_t v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  __int16 v53;
  __int16 v54;
  int v55;
  int v57;
  int v59;
  char *v60;
  int v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  std::string *v98;
  unint64_t *v99;
  unint64_t v100;
  int v101;
  int v102;
  int v103;
  int v104;
  uint64_t v105;
  __int16 v106;
  __int16 v107;
  __int16 v108;
  __int16 v109;
  int v110;
  int32x2_t v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  __int128 v118;
  _QWORD v119[2];
  _OWORD v120[2];
  uint64_t v121;
  std::string v122;
  int v123;
  uint64_t v124;
  int v125;
  int32x2_t v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  __int16 v133;
  __int16 v134;
  int v135;
  __int16 v136;
  __int16 v137;
  __int16 v138;
  __int16 v139;
  __int16 v140;
  __int16 v141;
  __int16 v142;
  __int16 v143;
  __int16 v144;
  __int16 v145;
  __int128 v146;
  int v147;
  uint64_t v148;
  __int16 v149;
  __int16 v150;
  __int128 v151;
  int v152;
  __int128 v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  _QWORD v156[2];
  uint64_t v157[2];
  std::string *v158;
  uint64_t v159;
  uint64_t v160[2];
  uint64_t v161;
  uint64_t v162;
  std::string __p;
  uint64_t v164;
  int v165;
  int v166;
  int32x2_t v167;
  uint64_t v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  uint64_t v175;
  __int16 v176;
  __int16 v177;
  __int16 v178;
  __int16 v179;
  __int16 v180;
  __int16 v181;
  int v182;
  uint64_t v183;
  int v184;
  int v185;
  int v186;
  int v187;
  __int16 v188;
  __int16 v189;
  __int128 v190;
  int v191;
  __int128 v192;
  std::string v193;
  uint64_t v194[2];
  uint64_t v195;
  uint64_t v196;
  std::string __s;
  std::string __sz;
  _QWORD v199[2];
  _QWORD v200[2];
  uint64_t v201;
  std::__shared_weak_count *v202;
  uint64_t v203;
  uint64_t v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;
  __int128 v208;
  __int128 v209;
  uint64_t v210;
  void *v211;
  void *v212;
  uint64_t v213;
  __int128 v214;
  __int128 v215;
  uint64_t v216;
  void *v217;
  void *v218;
  uint64_t v219;
  std::string v220;
  std::string v221;
  std::string v222;
  __int128 v223;
  __int128 v224;
  uint64_t v225;
  __int16 v226;
  __int128 v227;
  uint64_t v228;
  int v229;
  std::string v230;
  _QWORD *v231;
  std::__shared_weak_count *v232;
  std::string *v233;
  std::string v234;
  std::string v235;
  std::string v236;
  std::string v237;
  uint64_t v238;

  v238 = *MEMORY[0x1E0C80C00];
  v105 = *(_QWORD *)(a1 + 32);
  v4 = a2[3].i32[2];
  v5 = a2->i64[0];
  v6 = (std::__shared_weak_count *)a2->i64[1];
  v231 = (_QWORD *)a2->i64[0];
  v232 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 384))(v5);
  v230 = *(std::string *)v9;
  v10 = *(_DWORD *)(v9 + 24);
  v228 = *(_QWORD *)(v9 + 28);
  v229 = *(_DWORD *)(v9 + 36);
  v111 = *(int32x2_t *)(v9 + 40);
  v11 = *(_DWORD *)(v9 + 48);
  v114 = *(_DWORD *)(v9 + 52);
  v103 = *(_DWORD *)(v9 + 60);
  v104 = *(_DWORD *)(v9 + 56);
  v12 = *(_DWORD *)(v9 + 64);
  v13 = *(_DWORD *)(v9 + 68);
  v14 = *(__int16 *)(v9 + 72);
  v15 = *(_WORD *)(v9 + 74);
  v16 = *(_DWORD *)(v9 + 76);
  v17 = *(_WORD *)(v9 + 80);
  v18 = *(_WORD *)(v9 + 82);
  v106 = *(_WORD *)(v9 + 86);
  v107 = *(_WORD *)(v9 + 84);
  v108 = *(_WORD *)(v9 + 90);
  v109 = *(_WORD *)(v9 + 88);
  v19 = *(__int16 *)(v9 + 92);
  v20 = *(__int16 *)(v9 + 94);
  v116 = *(unsigned __int16 *)(v9 + 94);
  v117 = *(unsigned __int16 *)(v9 + 92);
  v115 = *(__int16 *)(v9 + 96);
  v21 = *(__int16 *)(v9 + 98);
  v227 = *(_OWORD *)(v9 + 100);
  v112 = *(_DWORD *)(v9 + 116);
  v113 = v21;
  v225 = *(_QWORD *)(v9 + 120);
  v226 = *(_WORD *)(v9 + 128);
  v22 = *(unsigned __int16 *)(v9 + 130);
  v224 = *(_OWORD *)(v9 + 132);
  v23 = *(_DWORD *)(v9 + 148);
  v223 = *(_OWORD *)(v9 + 152);
  v110 = v23;
  if ((v23 > 0
     || !v23
     && *(_BYTE *)(a1 + 48)
     && v11 == 3
     && v114 == 3
     && v117 == 1
     && v116 == 1
     && v115 <= 1
     && v113 <= 1
     && v112 <= 1)
    && !v22)
  {
    v101 = v10;
    v102 = v11;
    v24 = *(_QWORD *)(a1 + 40) + 96;
    __p.__r_.__value_.__r.__words[0] = v4;
    v25 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v24, v4, &__p);
    if (v25[4] - v25[3] == 24)
    {
      v26 = *(_QWORD *)(a1 + 40) + 56;
      __p.__r_.__value_.__r.__words[0] = v4;
      v27 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v26, v4, &__p);
      if (v27[4] - v27[3] == 24)
      {
        v28 = *(_QWORD *)(a1 + 40);
        v29 = *(_QWORD *)(*(_QWORD *)(v28 + 32) + 16 * v4);
        if (*(char *)(v29 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(&v222, *(const std::string::value_type **)(v29 + 16), *(_QWORD *)(v29 + 24));
          v28 = *(_QWORD *)(a1 + 40);
        }
        else
        {
          v222 = *(std::string *)(v29 + 16);
        }
        __p.__r_.__value_.__r.__words[0] = v4;
        v30 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v28 + 96, v4, &__p)[3];
        if (*((char *)v30 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v221, *(const std::string::value_type **)v30, *((_QWORD *)v30 + 1));
        }
        else
        {
          v31 = *v30;
          v221.__r_.__value_.__r.__words[2] = *((_QWORD *)v30 + 2);
          *(_OWORD *)&v221.__r_.__value_.__l.__data_ = v31;
        }
        v32 = *(_QWORD *)(a1 + 40) + 56;
        __p.__r_.__value_.__r.__words[0] = v4;
        v33 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v32, v4, &__p)[3];
        if (*((char *)v33 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v220, *(const std::string::value_type **)v33, *((_QWORD *)v33 + 1));
        }
        else
        {
          v34 = *v33;
          v220.__r_.__value_.__r.__words[2] = *((_QWORD *)v33 + 2);
          *(_OWORD *)&v220.__r_.__value_.__l.__data_ = v34;
        }
        v35 = *(_QWORD *)(a1 + 40);
        v36 = *(_QWORD **)(v35 + 192);
        if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v36, &v220)|| !std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v36, &v221))
        {
LABEL_152:
          if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v220.__r_.__value_.__l.__data_);
          if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v221.__r_.__value_.__l.__data_);
          if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v222.__r_.__value_.__l.__data_);
          v6 = v232;
          goto LABEL_159;
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v220;
        v37 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v35 + 184), &v220, (__int128 **)&__p);
        v38 = *(_OWORD *)(v37 + 72);
        v214 = *(_OWORD *)(v37 + 56);
        v215 = v38;
        v39 = (const void *)*((_QWORD *)v37 + 12);
        v216 = *((_QWORD *)v37 + 11);
        v217 = 0;
        v218 = 0;
        v219 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v217, v39, *((_QWORD *)v37 + 13), (uint64_t)(*((_QWORD *)v37 + 13) - (_QWORD)v39) >> 2);
        v40 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v221;
        v41 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v40, &v221, (__int128 **)&__p);
        v42 = *(_OWORD *)(v41 + 72);
        v208 = *(_OWORD *)(v41 + 56);
        v209 = v42;
        v43 = (const void *)*((_QWORD *)v41 + 12);
        v210 = *((_QWORD *)v41 + 11);
        v211 = 0;
        v212 = 0;
        v213 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v211, v43, *((_QWORD *)v41 + 13), (uint64_t)(*((_QWORD *)v41 + 13) - (_QWORD)v43) >> 2);
        if (v110 < 1)
        {
          *(int32x2_t *)v45.i8 = v111;
          v45.i64[1] = v214;
          if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32((int32x4_t)xmmword_191A938C0, v45))) & 1) != 0
            || vmul_lane_s32(v111, v111, 1).i32[0] < 256)
          {
            goto LABEL_148;
          }
          v44 = HIDWORD(v214);
        }
        else
        {
          v44 = HIDWORD(v214);
        }
        if (v44 <= 1 && (int)v215 <= 1)
        {
          Espresso::single_match_state<Espresso::V9Engine::v9_conv_kernel>::remove_layer(a2);
          v46 = v208;
          switch(v14)
          {
            case 4:
              goto LABEL_38;
            case 2:
              v53 = 0;
              LOWORD(v49) = 0;
              v54 = 0;
              LOWORD(v51) = 0;
              break;
            case 1:
LABEL_38:
              v47 = (v114 - DWORD1(v214) + (DWORD1(v208) - 1) * v20) & ~((v114 - DWORD1(v214) + (DWORD1(v208) - 1) * v20) >> 31);
              v48 = (v102 - v214 + (v208 - 1) * v19) & ~((v102 - (int)v214 + ((int)v208 - 1) * v19) >> 31);
              v49 = v48 >> 1;
              v50 = v48 - (v48 >> 1);
              v51 = v47 >> 1;
              v52 = v47 - (v47 >> 1);
              if ((unsigned __int16)v14 == 1)
              {
                v53 = v49;
                LOWORD(v49) = v50;
                v54 = v51;
                LOWORD(v51) = v52;
              }
              else
              {
                v53 = v50;
                v54 = v52;
              }
              break;
            default:
              v53 = v17;
              LOWORD(v49) = v18;
              LOWORD(v51) = v106;
              v54 = v107;
              break;
          }
          *((_QWORD *)&v205 + 1) = 0x10000000000001;
          DWORD2(v206) = 0;
          LODWORD(v205) = v102;
          HIWORD(v207) = v15;
          HIWORD(v206) = v53;
          LOWORD(v207) = v49;
          WORD1(v207) = v54;
          WORD2(v207) = v51;
          *(_QWORD *)&v206 = v208;
          WORD6(v206) = v101;
          if (v103 == 2)
          {
            WORD6(v206) = 2;
            DWORD2(v206) = v12;
          }
          v55 = v111.i32[1];
          if (v111.i32[1] >= v111.i32[0])
            v55 = v111.i32[0];
          if (SDWORD1(v208) < (int)v208)
            v46 = DWORD1(v208);
          if (v46 < 160 || v55 < 32)
            v57 = 4;
          else
            v57 = 6;
          if (SDWORD1(v214) < 17 || (int)v214 < 17)
            v59 = 2;
          else
            v59 = v57;
          DWORD1(v205) = v59;
          v60 = getenv("WGWIN");
          if (v60)
          {
            v59 = atoi(v60);
            DWORD1(v205) = v59;
          }
          if (v110)
          {
            DWORD1(v205) = v110;
            v59 = v110;
          }
          v61 = *(_DWORD *)(v105 + 228);
          if (v61 >= 2)
          {
            DWORD1(v205) = *(_DWORD *)(v105 + 228);
            v59 = v61;
          }
          Espresso::blob<float,1>::make(&v203, v111.i32[0]);
          v62 = *(int *)(v203 + 8);
          if ((_DWORD)v62)
            bzero(*(void **)(v203 + 16), 4 * v62);
          v63 = v231;
          v64 = v231[83];
          v65 = (std::__shared_weak_count *)v231[84];
          v201 = v64;
          v202 = v65;
          if (v65)
          {
            v66 = (unint64_t *)&v65->__shared_owners_;
            do
              v67 = __ldxr(v66);
            while (__stxr(v67 + 1, v66));
          }
          v68 = v63[85];
          v69 = v63[86];
          v200[0] = v68;
          v200[1] = v69;
          if (v69)
          {
            v70 = (unint64_t *)(v69 + 8);
            do
              v71 = __ldxr(v70);
            while (__stxr(v71 + 1, v70));
          }
          if (!v64)
          {
            (*(void (**)(std::string *__return_ptr, _QWORD *))(*v63 + 472))(&__p, v63);
            std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v201, (__int128 *)&__p);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
            v68 = v200[0];
          }
          if (!v68)
          {
            (*(void (**)(std::string *__return_ptr, _QWORD *))(*v63 + 488))(&__p, v63);
            std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v200, (__int128 *)&__p);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
          }
          v72 = *(_QWORD *)(a1 + 40);
          v74 = *(_QWORD *)(v72 + 16);
          v73 = *(_QWORD *)(v72 + 24);
          v199[0] = v74;
          v199[1] = v73;
          if (v73)
          {
            v75 = (unint64_t *)(v73 + 8);
            do
              v76 = __ldxr(v75);
            while (__stxr(v76 + 1, v75));
          }
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_tx", (const void **)&v220.__r_.__value_.__l.__data_, &__sz);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_1x1", (const void **)&v220.__r_.__value_.__l.__data_, &__s);
          std::allocate_shared[abi:ne180100]<Espresso::V9Engine::v9_wg_transform_in_kernel,std::allocator<Espresso::V9Engine::v9_wg_transform_in_kernel>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path,Espresso::wg_transform_params &,void>(&v195, v199, (uint64_t)&v205);
          v77 = v195;
          v78 = v196;
          v79 = v195 + 336;
          *(_QWORD *)(v195 + 352) = *((_QWORD *)&v230.__r_.__value_.__l + 2);
          *(_DWORD *)(v77 + 372) = v229;
          *(_QWORD *)(v79 + 28) = v228;
          *(_QWORD *)(v77 + 456) = v225;
          *(_WORD *)(v77 + 464) = v226;
          *(_QWORD *)(v77 + 488) = v223;
          *(_QWORD *)(v79 + 157) = *(_QWORD *)((char *)&v223 + 5);
          *(_OWORD *)(v77 + 336) = *(_OWORD *)&v230.__r_.__value_.__l.__data_;
          *(_DWORD *)(v77 + 360) = v101;
          *(int32x2_t *)(v77 + 376) = v111;
          *(_DWORD *)(v77 + 384) = v102;
          *(_DWORD *)(v77 + 388) = v114;
          *(_DWORD *)(v77 + 392) = v104;
          *(_DWORD *)(v77 + 396) = v103;
          *(_DWORD *)(v77 + 400) = v12;
          *(_DWORD *)(v77 + 404) = v13;
          *(_WORD *)(v77 + 408) = v14;
          *(_WORD *)(v77 + 410) = v15;
          *(_DWORD *)(v77 + 412) = v16;
          *(_WORD *)(v77 + 416) = v17;
          *(_WORD *)(v77 + 418) = v18;
          *(_WORD *)(v77 + 420) = v107;
          *(_WORD *)(v77 + 422) = v106;
          *(_WORD *)(v77 + 424) = v109;
          *(_WORD *)(v77 + 426) = v108;
          *(_WORD *)(v77 + 428) = v117;
          *(_WORD *)(v77 + 430) = v116;
          *(_WORD *)(v77 + 432) = v115;
          *(_WORD *)(v77 + 434) = v113;
          *(_OWORD *)(v79 + 100) = v227;
          *(_DWORD *)(v77 + 452) = v112;
          *(_WORD *)(v77 + 466) = 0;
          *(_OWORD *)(v79 + 132) = v224;
          *(_DWORD *)(v77 + 484) = v110;
          *(_BYTE *)(v77 + 504) = 1;
          *(_QWORD *)(v77 + 536) = v63[101];
          v194[0] = v77;
          v194[1] = v78;
          if (v78)
          {
            v80 = (unint64_t *)(v78 + 8);
            do
              v81 = __ldxr(v80);
            while (__stxr(v81 + 1, v80));
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "wg_tx_in");
          if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v237, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
          else
            v237 = v220;
          std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v193, (__int128 *)&v237, 1uLL);
          if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v235, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
          else
            v235 = __sz;
          std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v236, (__int128 *)&v235, 1uLL);
          Espresso::single_match_state<Espresso::V9Engine::v9_conv_kernel>::add_kernel(a2, v194, &__p, &__sz, (std::string **)&v193, (std::string **)&v236);
          v234.__r_.__value_.__r.__words[0] = (std::string::size_type)&v236;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v234);
          if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v235.__r_.__value_.__l.__data_);
          v236.__r_.__value_.__r.__words[0] = (std::string::size_type)&v193;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
          if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v237.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v194);
          __p = v230;
          v171 = v12;
          v172 = v13;
          v174 = v16;
          v176 = v109;
          v177 = v108;
          v178 = v117;
          v179 = v116;
          v180 = v115;
          v181 = v113;
          v183 = *(_QWORD *)((char *)&v227 + 4);
          v187 = HIDWORD(v225);
          v188 = v226;
          v189 = 0;
          v190 = v224;
          v191 = v110;
          v192 = v223;
          v186 = (v59 + 2) * (v59 + 2);
          v173 = 2;
          v175 = 0;
          v167 = v111;
          v168 = 0x100000001;
          v166 = v229;
          v165 = 1;
          v185 = v112;
          v184 = 0;
          v164 = 0;
          v182 = 0;
          v169 = v104;
          v170 = -1;
          LODWORD(v193.__r_.__value_.__l.__data_) = 1;
          std::allocate_shared[abi:ne180100]<Espresso::V9Engine::v9_conv_kernel,std::allocator<Espresso::V9Engine::v9_conv_kernel>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path,Espresso::convolution_uniforms &,void>(&v161, v199, &v193, (__int128 *)&__p);
          v160[0] = v161;
          v160[1] = v162;
          if (v162)
          {
            v82 = (unint64_t *)(v162 + 8);
            do
              v83 = __ldxr(v82);
            while (__stxr(v83 + 1, v82));
          }
          std::string::basic_string[abi:ne180100]<0>(&v193, "convolution");
          if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v236, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
          else
            v236 = __sz;
          std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v237, (__int128 *)&v236, 1uLL);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v234, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          else
            v234 = __s;
          std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v235, (__int128 *)&v234, 1uLL);
          Espresso::single_match_state<Espresso::V9Engine::v9_conv_kernel>::add_kernel(a2, v160, &v193, &__s, (std::string **)&v237, (std::string **)&v235);
          v158 = &v235;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
          if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v234.__r_.__value_.__l.__data_);
          v235.__r_.__value_.__r.__words[0] = (std::string::size_type)&v237;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v235);
          if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v236.__r_.__value_.__l.__data_);
          if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v193.__r_.__value_.__l.__data_);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v160);
          std::allocate_shared[abi:ne180100]<Espresso::V9Engine::v9_wg_transform_out_kernel,std::allocator<Espresso::V9Engine::v9_wg_transform_out_kernel>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path,Espresso::wg_transform_params &,void>((uint64_t *)&v158, v199, (uint64_t)&v205);
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v158[16].__r_.__value_.__r.__words[2], v195, v196);
          v157[0] = (uint64_t)v158;
          v157[1] = v159;
          if (v159)
          {
            v84 = (unint64_t *)(v159 + 8);
            do
              v85 = __ldxr(v84);
            while (__stxr(v85 + 1, v84));
          }
          std::string::basic_string[abi:ne180100]<0>(&v193, "wg_tx_out");
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v236, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          else
            v236 = __s;
          std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v237, (__int128 *)&v236, 1uLL);
          if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v234, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
          else
            v234 = v221;
          std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v235, (__int128 *)&v234, 1uLL);
          Espresso::single_match_state<Espresso::V9Engine::v9_conv_kernel>::add_kernel(a2, v157, &v193, &v222, (std::string **)&v237, (std::string **)&v235);
          v233 = &v235;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v233);
          if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v234.__r_.__value_.__l.__data_);
          v235.__r_.__value_.__r.__words[0] = (std::string::size_type)&v237;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v235);
          if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v236.__r_.__value_.__l.__data_);
          if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v193.__r_.__value_.__l.__data_);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v157);
          v156[0] = v161;
          v156[1] = v162;
          if (v162)
          {
            v86 = (unint64_t *)(v162 + 8);
            do
              v87 = __ldxr(v86);
            while (__stxr(v87 + 1, v86));
          }
          v88 = v201;
          v154 = v201;
          v155 = v202;
          if (v202)
          {
            v89 = (unint64_t *)&v202->__shared_owners_;
            do
              v90 = __ldxr(v89);
            while (__stxr(v90 + 1, v89));
            v91 = v155;
          }
          else
          {
            v91 = 0;
          }
          v122 = v230;
          v123 = v101;
          v124 = v228;
          v125 = v229;
          v126 = v111;
          v127 = v102;
          v128 = v114;
          v129 = v104;
          v130 = v103;
          v131 = v12;
          v132 = v13;
          v133 = v14;
          v134 = v15;
          v135 = v16;
          v136 = v17;
          v137 = v18;
          v138 = v107;
          v139 = v106;
          v140 = v109;
          v141 = v108;
          v142 = v117;
          v143 = v116;
          v144 = v115;
          v145 = v113;
          v146 = v227;
          v147 = v112;
          v149 = v226;
          v148 = v225;
          v150 = 0;
          v151 = v224;
          v152 = v110;
          v153 = v223;
          v120[0] = v205;
          v120[1] = v206;
          v121 = v207;
          Espresso::MetalLowmemEngine::wg_transform_weights_cpu((uint64_t *)&v237, v156, v88, v91, &v122, (uint64_t)v120);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v154);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v156);
          v92 = v161;
          v119[0] = v203;
          v119[1] = v204;
          if (v204)
          {
            v93 = (unint64_t *)(v204 + 8);
            do
              v94 = __ldxr(v93);
            while (__stxr(v94 + 1, v93));
          }
          (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v92 + 392))(v92, v119);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v119);
          v95 = v161;
          v118 = *(_OWORD *)&v237.__r_.__value_.__l.__data_;
          if (v237.__r_.__value_.__l.__size_)
          {
            v96 = (unint64_t *)(v237.__r_.__value_.__l.__size_ + 8);
            do
              v97 = __ldxr(v96);
            while (__stxr(v97 + 1, v96));
          }
          (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v95 + 400))(v95, &v118);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v118);
          v98 = v158;
          *(_OWORD *)&v236.__r_.__value_.__l.__data_ = 0uLL;
          std::string::basic_string[abi:ne180100]<0>(&v193, "bias");
          (*(void (**)(std::string *, std::string *, std::string *, _QWORD, uint64_t, _QWORD))(v98->__r_.__value_.__r.__words[0] + 168))(v98, &v236, &v193, *(_QWORD *)(v200[0] + 16), 4 * *(int *)(v200[0] + 8), 0);
          if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v193.__r_.__value_.__l.__data_);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v236);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v237);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v158);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v161);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v195);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__s.__r_.__value_.__l.__data_);
          if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__sz.__r_.__value_.__l.__data_);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v199);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v200);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v201);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v203);
        }
LABEL_148:
        if (v211)
        {
          v212 = v211;
          operator delete(v211);
        }
        if (v217)
        {
          v218 = v217;
          operator delete(v217);
        }
        goto LABEL_152;
      }
    }
  }
LABEL_159:
  if (v6)
  {
    v99 = (unint64_t *)&v6->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_19174CDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  uint64_t v65;
  void *v67;
  void *v68;

  *(_QWORD *)(v65 - 224) = v65 - 160;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v65 - 224));
  if (*(char *)(v65 - 169) < 0)
    operator delete(*(void **)(v65 - 192));
  if (SLOBYTE(STACK[0x297]) < 0)
    operator delete((void *)STACK[0x280]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a59);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a61);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a65);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2A8]);
  if (SLOBYTE(STACK[0x2CF]) < 0)
    operator delete((void *)STACK[0x2B8]);
  if (SLOBYTE(STACK[0x2E7]) < 0)
    operator delete((void *)STACK[0x2D0]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2E8]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2F8]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x308]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x318]);
  v67 = (void *)STACK[0x378];
  if (STACK[0x378])
  {
    STACK[0x380] = (unint64_t)v67;
    operator delete(v67);
  }
  v68 = (void *)STACK[0x3B8];
  if (STACK[0x3B8])
  {
    STACK[0x3C0] = (unint64_t)v68;
    operator delete(v68);
  }
  if (SLOBYTE(STACK[0x3E7]) < 0)
    operator delete((void *)STACK[0x3D0]);
  if (SLOBYTE(STACK[0x407]) < 0)
    operator delete((void *)STACK[0x3F0]);
  if (SLOBYTE(STACK[0x427]) < 0)
    operator delete((void *)STACK[0x410]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x498]);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso8V9Engine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_7(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD v29[4];
  std::__shared_weak_count *v30;

  if (*(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 384))(*a2) + 8) == 1
    && *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 384))(*a2) + 8) == 1
    && !*(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 384))(*a2) + 24))
  {
    v4 = *a2;
    v5 = (std::__shared_weak_count *)a2[1];
    v29[3] = *a2;
    v30 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    v8 = a2[2];
    v9 = (std::__shared_weak_count *)a2[3];
    v29[1] = v8;
    v29[2] = v9;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    *(_BYTE *)(v4 + 520) = 1;
    if (v5)
    {
      v12 = (unint64_t *)&v5->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    *(_QWORD *)(v8 + 544) = v4;
    v14 = *(std::__shared_weak_count **)(v8 + 552);
    *(_QWORD *)(v8 + 552) = v5;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = *(_QWORD *)(a1 + 32) + 56;
    v18 = *((int *)a2 + 28);
    v29[0] = v18;
    v19 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v17, v18, v29);
    v20 = *(_QWORD *)(a1 + 32) + 56;
    v21 = *((int *)a2 + 29);
    v28 = v21;
    v22 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v20, v21, &v28);
    if (v22 != v19)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v22 + 3), (std::string *)v19[3], (std::string *)v19[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19[4] - v19[3]) >> 3));
    if (v9)
    {
      v23 = (unint64_t *)&v9->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v25 = v30;
    if (v30)
    {
      v26 = (unint64_t *)&v30->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
}

void sub_19174D304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void Espresso::single_match_state<Espresso::V9Engine::v9_conv_kernel>::remove_layer(int64x2_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int32 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  _OWORD v10[3];
  void **v11;

  memset(v10, 0, sizeof(v10));
  v7 = a1[3].i32[2];
  v8 = 0;
  v9 = 0;
  v2 = a1[2].u64[1];
  if (v2 >= a1[3].i64[0])
  {
    v3 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v7);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v7);
    v3 = v2 + 72;
    a1[2].i64[1] = v2 + 72;
  }
  a1[2].i64[1] = v3;
  v11 = (void **)&v10[1] + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_19174D400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&a9);
  _Unwind_Resume(a1);
}

double std::allocate_shared[abi:ne180100]<Espresso::V9Engine::v9_wg_transform_in_kernel,std::allocator<Espresso::V9Engine::v9_wg_transform_in_kernel>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path,Espresso::wg_transform_params &,void>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  char *v6;
  __int128 v7;
  uint64_t v8;
  double result;

  v6 = (char *)operator new(0x248uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC1750;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  v7 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a3;
  *((_OWORD *)v6 + 20) = v7;
  v8 = *(_QWORD *)(a3 + 32);
  *((_QWORD *)v6 + 43) = 0;
  *((_QWORD *)v6 + 44) = 0;
  *((_QWORD *)v6 + 42) = v8;
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v6 + 360));
  *((_QWORD *)v6 + 3) = &off_1E2DA6718;
  result = 0.0;
  *(_OWORD *)(v6 + 536) = 0u;
  *(_OWORD *)(v6 + 552) = 0u;
  *(_OWORD *)(v6 + 568) = 0u;
  *a1 = v6 + 24;
  a1[1] = v6;
  return result;
}

void sub_19174D4BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::single_match_state<Espresso::V9Engine::v9_conv_kernel>::add_kernel(int64x2_t *a1, uint64_t *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6)
{
  char *v12;
  std::string *v13;
  uint64_t (***v14)(_QWORD);
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::string __p;
  __int32 v24;
  char *v25;
  std::__shared_weak_count *v26;
  _OWORD v27[3];

  v24 = 0;
  memset(v27, 0, sizeof(v27));
  v12 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)v12 = &off_1E2DBF0D0;
  *((_QWORD *)v12 + 3) = &off_1E2DA1A38;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 161) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  v13 = (std::string *)(v12 + 40);
  *(_OWORD *)(v12 + 88) = 0u;
  *((_OWORD *)v12 + 13) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((_QWORD *)v12 + 30) = 0;
  v25 = v12 + 24;
  v26 = (std::__shared_weak_count *)v12;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v12 + 11, *a2, a2[1]);
  std::string::operator=(v13, a4);
  std::string::operator=((std::string *)(v25 + 40), a3);
  v14 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*a2 + 8) + 8);
  v15 = v25;
  *((_DWORD *)v25 + 2) = (**v14)(v14);
  v16 = a1[1].i64[0];
  if (v16)
  {
    *((_DWORD *)v15 + 3) = *(_DWORD *)(v16 + 12);
    if (*(char *)(v16 + 223) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v16 + 200), *(_QWORD *)(v16 + 208));
    else
      __p = *(std::string *)(v16 + 200);
    std::string::operator=((std::string *)(v15 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v17 = *(_QWORD *)(a1[4].i64[0] + 32);
    if (*(_QWORD *)(a1[4].i64[0] + 40) != v17)
      *((_DWORD *)v15 + 3) = *(_DWORD *)(*(_QWORD *)v17 + 12);
  }
  if (v27 != (_OWORD *)a5)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v27, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  if ((std::string **)((char *)&v27[1] + 8) != a6)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v27[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  v24 = a1[3].i32[2];
  v18 = a1[2].u64[1];
  if (v18 >= a1[3].i64[0])
  {
    v19 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v24);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v24);
    v19 = v18 + 72;
    a1[2].i64[1] = v18 + 72;
  }
  a1[2].i64[1] = v19;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v20 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_19174D73C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&a15);
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::V9Engine::v9_conv_kernel,std::allocator<Espresso::V9Engine::v9_conv_kernel>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path,Espresso::convolution_uniforms &,void>(uint64_t *a1, _QWORD *a2, _DWORD *a3, __int128 *a4)
{
  _QWORD *v8;
  uint64_t result;

  v8 = operator new(0x348uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DC1408;
  result = Espresso::V9Engine::v9_conv_kernel::v9_conv_kernel((uint64_t)(v8 + 3), a2, a3, a4);
  *a1 = result;
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_19174D7E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

double std::allocate_shared[abi:ne180100]<Espresso::V9Engine::v9_wg_transform_out_kernel,std::allocator<Espresso::V9Engine::v9_wg_transform_out_kernel>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path,Espresso::wg_transform_params &,void>(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  __int128 v8;
  double result;

  v6 = (char *)operator new(0x1D0uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC1788;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 38) = v6 + 312;
  *((_QWORD *)v6 + 3) = &off_1E2DA6870;
  *((_QWORD *)v6 + 46) = 0;
  *((_QWORD *)v6 + 47) = 0;
  v8 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 328) = *(_OWORD *)a3;
  *(_OWORD *)(v6 + 344) = v8;
  *((_QWORD *)v6 + 45) = *(_QWORD *)(a3 + 32);
  result = 0.0;
  *((_OWORD *)v6 + 24) = 0u;
  *((_OWORD *)v6 + 25) = 0u;
  *((_OWORD *)v6 + 26) = 0u;
  *((_QWORD *)v6 + 54) = 0;
  *((_QWORD *)v6 + 55) = 0;
  *((_QWORD *)v6 + 56) = 0;
  *((_QWORD *)v6 + 57) = 0;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_19174D894(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_wg_transform_out_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1788;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_wg_transform_out_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1788;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::v9_wg_transform_out_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_conv_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1408;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_conv_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1408;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::v9_conv_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_wg_transform_in_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1750;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_wg_transform_in_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1750;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::v9_wg_transform_in_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

BOOL ___ZN8Espresso8V9Engine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_5(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 384))(a2) + 8) == 1;
}

uint64_t Espresso::fuse_vertical_state<Espresso::V9Engine::v9_conv_kernel,Espresso::V9Engine::v9_activation_kernel>::~fuse_vertical_state(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void **v7;

  v7 = (void **)(a1 + 88);
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v7);
  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
  v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1);
}

void ___ZN8Espresso8V9Engine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_4(uint64_t a1, _QWORD *a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  unint64_t v21;
  _DWORD *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v34[3];

  v3 = *(_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[2] + 384))(a2[2]);
  v4 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 384))(*a2) + 24);
  v5 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 384))(*a2) + 28) | v4;
  v6 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 384))(*a2) + 60);
  if (v3 == 2 && v5 == 0 && v6 == -1)
  {
    *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 384))(*a2) + 60) = 2;
    v9 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[2] + 384))(a2[2]) + 4);
    *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 384))(*a2) + 64) = v9;
    v10 = *(_QWORD *)(a2[15] + 32);
    v11 = *(char **)(*(_QWORD *)(v10 + 16 * *((int *)a2 + 28)) + 64);
    v12 = *(_QWORD *)(*(_QWORD *)(v10 + 16 * *((int *)a2 + 29)) + 64);
    v13 = operator new(8uLL);
    *v13 = v12;
    v34[1] = (uint64_t)(v13 + 1);
    v34[2] = (uint64_t)(v13 + 1);
    v34[0] = (uint64_t)v13;
    Espresso::merge_kernel_attributes(v11, v34);
    operator delete(v13);
    v14 = a2[15] + 96;
    v15 = *((int *)a2 + 29);
    v34[0] = v15;
    v16 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v14, v15, v34);
    v17 = a2[15] + 96;
    v18 = *((int *)a2 + 28);
    v33 = v18;
    v19 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v17, v18, &v33);
    if (v19 != v16)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v19 + 3), (std::string *)v16[3], (std::string *)v16[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16[4] - v16[3]) >> 3));
    v20 = (char *)a2[9];
    v21 = a2[10];
    if ((unint64_t)v20 >= v21)
    {
      v23 = (char *)a2[8];
      v24 = (v20 - v23) >> 2;
      if ((unint64_t)(v24 + 1) >> 62)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v25 = v21 - (_QWORD)v23;
      v26 = (uint64_t)(v21 - (_QWORD)v23) >> 1;
      if (v26 <= v24 + 1)
        v26 = v24 + 1;
      v27 = v25 >= 0x7FFFFFFFFFFFFFFCLL;
      v28 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v27)
        v28 = v26;
      if (v28)
      {
        v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v28);
        v23 = (char *)a2[8];
        v20 = (char *)a2[9];
      }
      else
      {
        v29 = 0;
      }
      v30 = (_DWORD *)(v28 + 4 * v24);
      v31 = v28 + 4 * v29;
      *v30 = *((_DWORD *)a2 + 29);
      v22 = v30 + 1;
      while (v20 != v23)
      {
        v32 = *((_DWORD *)v20 - 1);
        v20 -= 4;
        *--v30 = v32;
      }
      a2[8] = v30;
      a2[9] = v22;
      a2[10] = v31;
      if (v23)
        operator delete(v23);
    }
    else
    {
      *(_DWORD *)v20 = *((_DWORD *)a2 + 29);
      v22 = v20 + 4;
    }
    a2[9] = v22;
  }
}

void sub_19174DC98(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::fuse_vertical_state<Espresso::V9Engine::v9_upsample_kernel,Espresso::V9Engine::v9_conv_kernel>::~fuse_vertical_state(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void **v7;

  v7 = (void **)(a1 + 88);
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v7);
  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 16);
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

double ___ZN8Espresso8V9Engine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  double result;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  char *v14;
  unint64_t v15;
  _DWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28[3];

  if (!*(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 320))(*a2) + 12)
    && *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 320))(*a2) + 4) == 2
    && *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 320))(*a2) + 8) == 2)
  {
    v4 = *(_QWORD *)(a2[15] + 32);
    v5 = *(char **)(*(_QWORD *)(v4 + 16 * *((int *)a2 + 29)) + 64);
    v6 = *(_QWORD *)(*(_QWORD *)(v4 + 16 * *((int *)a2 + 28)) + 64);
    v7 = operator new(8uLL);
    *v7 = v6;
    v28[1] = (uint64_t)(v7 + 1);
    v28[2] = (uint64_t)(v7 + 1);
    v28[0] = (uint64_t)v7;
    Espresso::merge_kernel_attributes(v5, v28);
    operator delete(v7);
    v8 = a2[15] + 56;
    v9 = *((int *)a2 + 28);
    v28[0] = v9;
    v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v8, v9, v28);
    v11 = a2[15] + 56;
    v12 = *((int *)a2 + 29);
    v27 = v12;
    v13 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v11, v12, &v27);
    if (v13 != v10)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v13 + 3), (std::string *)v10[3], (std::string *)v10[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10[4] - v10[3]) >> 3));
    v14 = (char *)a2[9];
    v15 = a2[10];
    if ((unint64_t)v14 >= v15)
    {
      v17 = (char *)a2[8];
      v18 = (v14 - v17) >> 2;
      if ((unint64_t)(v18 + 1) >> 62)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v19 = v15 - (_QWORD)v17;
      v20 = (uint64_t)(v15 - (_QWORD)v17) >> 1;
      if (v20 <= v18 + 1)
        v20 = v18 + 1;
      v21 = v19 >= 0x7FFFFFFFFFFFFFFCLL;
      v22 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v21)
        v22 = v20;
      if (v22)
      {
        v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v22);
        v17 = (char *)a2[8];
        v14 = (char *)a2[9];
      }
      else
      {
        v23 = 0;
      }
      v24 = (_DWORD *)(v22 + 4 * v18);
      v25 = v22 + 4 * v23;
      *v24 = *((_DWORD *)a2 + 28);
      v16 = v24 + 1;
      while (v14 != v17)
      {
        v26 = *((_DWORD *)v14 - 1);
        v14 -= 4;
        *--v24 = v26;
      }
      a2[8] = v24;
      a2[9] = v16;
      a2[10] = v25;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_DWORD *)v14 = *((_DWORD *)a2 + 28);
      v16 = v14 + 4;
    }
    a2[9] = v16;
    *(_QWORD *)&result = 0x200000002;
    *(_QWORD *)(a2[2] + 808) = 0x200000002;
  }
  return result;
}

void sub_19174DF34(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso8V9Engine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_2(uint64_t a1, _QWORD *a2)
{
  __n128 result;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  char *v14;
  unint64_t v15;
  _DWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  unint64_t v25;
  int v26;
  __n128 *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30[3];

  if (*(_WORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 320))(*a2) + 2) == 2)
  {
    v4 = *(_QWORD *)(a2[15] + 32);
    v5 = *(char **)(*(_QWORD *)(v4 + 16 * *((int *)a2 + 29)) + 64);
    v6 = *(_QWORD *)(*(_QWORD *)(v4 + 16 * *((int *)a2 + 28)) + 64);
    v7 = operator new(8uLL);
    *v7 = v6;
    v30[1] = (uint64_t)(v7 + 1);
    v30[2] = (uint64_t)(v7 + 1);
    v30[0] = (uint64_t)v7;
    Espresso::merge_kernel_attributes(v5, v30);
    operator delete(v7);
    v8 = a2[15] + 56;
    v9 = *((int *)a2 + 28);
    v30[0] = v9;
    v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v8, v9, v30);
    v11 = a2[15] + 56;
    v12 = *((int *)a2 + 29);
    v29 = v12;
    v13 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v11, v12, &v29);
    if (v13 != v10)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v13 + 3), (std::string *)v10[3], (std::string *)v10[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10[4] - v10[3]) >> 3));
    v14 = (char *)a2[9];
    v15 = a2[10];
    if ((unint64_t)v14 >= v15)
    {
      v17 = (char *)a2[8];
      v18 = (v14 - v17) >> 2;
      if ((unint64_t)(v18 + 1) >> 62)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v19 = v15 - (_QWORD)v17;
      v20 = (uint64_t)(v15 - (_QWORD)v17) >> 1;
      if (v20 <= v18 + 1)
        v20 = v18 + 1;
      v21 = v19 >= 0x7FFFFFFFFFFFFFFCLL;
      v22 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v21)
        v22 = v20;
      if (v22)
      {
        v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v22);
        v17 = (char *)a2[8];
        v14 = (char *)a2[9];
      }
      else
      {
        v23 = 0;
      }
      v24 = (_DWORD *)(v22 + 4 * v18);
      v25 = v22 + 4 * v23;
      *v24 = *((_DWORD *)a2 + 28);
      v16 = v24 + 1;
      while (v14 != v17)
      {
        v26 = *((_DWORD *)v14 - 1);
        v14 -= 4;
        *--v24 = v26;
      }
      a2[8] = v24;
      a2[9] = v16;
      a2[10] = v25;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_DWORD *)v14 = *((_DWORD *)a2 + 28);
      v16 = v14 + 4;
    }
    a2[9] = v16;
    v27 = (__n128 *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 320))(*a2);
    v28 = a2[2];
    result = *v27;
    *(_DWORD *)(v28 + 392) = v27[1].n128_u32[0];
    *(__n128 *)(v28 + 376) = result;
  }
  return result;
}

void sub_19174E120(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso8V9Engine7context32network_transform_pre_allocationEPNS_3netE_block_invoke(uint64_t a1, _QWORD *a2)
{
  __n128 result;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  char *v14;
  unint64_t v15;
  _DWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  unint64_t v25;
  int v26;
  __n128 *v27;
  uint64_t v28;
  unsigned __int32 v29;
  unint64_t v30;
  uint64_t v31[3];

  if (*(_WORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 320))(*a2) + 2) == 2)
  {
    v4 = *(_QWORD *)(a2[15] + 32);
    v5 = *(char **)(*(_QWORD *)(v4 + 16 * *((int *)a2 + 29)) + 64);
    v6 = *(_QWORD *)(*(_QWORD *)(v4 + 16 * *((int *)a2 + 28)) + 64);
    v7 = operator new(8uLL);
    *v7 = v6;
    v31[1] = (uint64_t)(v7 + 1);
    v31[2] = (uint64_t)(v7 + 1);
    v31[0] = (uint64_t)v7;
    Espresso::merge_kernel_attributes(v5, v31);
    operator delete(v7);
    v8 = a2[15] + 56;
    v9 = *((int *)a2 + 28);
    v31[0] = v9;
    v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v8, v9, v31);
    v11 = a2[15] + 56;
    v12 = *((int *)a2 + 29);
    v30 = v12;
    v13 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v11, v12, &v30);
    if (v13 != v10)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v13 + 3), (std::string *)v10[3], (std::string *)v10[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10[4] - v10[3]) >> 3));
    v14 = (char *)a2[9];
    v15 = a2[10];
    if ((unint64_t)v14 >= v15)
    {
      v17 = (char *)a2[8];
      v18 = (v14 - v17) >> 2;
      if ((unint64_t)(v18 + 1) >> 62)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v19 = v15 - (_QWORD)v17;
      v20 = (uint64_t)(v15 - (_QWORD)v17) >> 1;
      if (v20 <= v18 + 1)
        v20 = v18 + 1;
      v21 = v19 >= 0x7FFFFFFFFFFFFFFCLL;
      v22 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v21)
        v22 = v20;
      if (v22)
      {
        v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v22);
        v17 = (char *)a2[8];
        v14 = (char *)a2[9];
      }
      else
      {
        v23 = 0;
      }
      v24 = (_DWORD *)(v22 + 4 * v18);
      v25 = v22 + 4 * v23;
      *v24 = *((_DWORD *)a2 + 28);
      v16 = v24 + 1;
      while (v14 != v17)
      {
        v26 = *((_DWORD *)v14 - 1);
        v14 -= 4;
        *--v24 = v26;
      }
      a2[8] = v24;
      a2[9] = v16;
      a2[10] = v25;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_DWORD *)v14 = *((_DWORD *)a2 + 28);
      v16 = v14 + 4;
    }
    a2[9] = v16;
    v27 = (__n128 *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 320))(*a2);
    v28 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[2] + 384))(a2[2]);
    v29 = v27[1].n128_u32[0];
    result = *v27;
    *(__n128 *)(v28 + 72) = *v27;
    *(_DWORD *)(v28 + 88) = v29;
  }
  return result;
}

void sub_19174E318(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::batch>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC17C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::batch>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC17C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::batch>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 Espresso::V9Engine::engine::make_abstract_blob_container@<Q0>(uint64_t *a1@<X1>, int a2@<W2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  __n128 result;
  _QWORD v16[2];

  v6 = operator new(0x128uLL);
  v7 = (unint64_t)v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DC13D0;
  v8 = (unint64_t)(v6 + 3);
  v9 = *a1;
  v10 = (std::__shared_weak_count *)a1[1];
  v16[0] = v9;
  v16[1] = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  Espresso::MetalLowmemEngine::blob_container::blob_container((uint64_t)(v6 + 3), v16, a2);
  *(_QWORD *)(v7 + 24) = &off_1E2DA4DD8;
  *(_OWORD *)(v7 + 256) = 0u;
  *(_OWORD *)(v7 + 272) = 0u;
  *(_QWORD *)(v7 + 288) = 0;
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = v7;
  *a3 = result;
  return result;
}

void sub_19174E460(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;

  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

__n128 Espresso::V9Engine::engine::create_context@<Q0>(_QWORD *a1@<X1>, int a2@<W2>, __n128 *a3@<X8>)
{
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __n128 result;
  __int128 v11;

  v6 = (char *)operator new(0x108uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC1830;
  Espresso::context_metal::context_metal((uint64_t)(v6 + 24), a1, a2);
  *((_QWORD *)v6 + 3) = &off_1E2DA6AC0;
  *((_DWORD *)v6 + 61) = 16843009;
  v6[248] = 1;
  *(_QWORD *)(v6 + 252) = 0xFFFFFFFF00000000;
  v6[68] = 1;
  _ZNSt3__115allocate_sharedB8ne180100IN8Espresso14wisdom_managerENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v11);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v6 + 48), &v11);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  objc_msgSend(*((id *)v6 + 23), "setKernelPrefix:", CFSTR("V9_"));
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19174E5A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  id *v2;
  void *v4;

  Espresso::context_metal::~context_metal(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::engine::~engine(Espresso::V9Engine::engine *this)
{
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x19401CD90);
}

__n128 ___ZN8Espresso8V9Engine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_18@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  uint64_t v10;

  v6 = (char *)operator new(0x1B0uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC14B0;
  v9 = *a2;
  v10 = *((_QWORD *)a2 + 2);
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 38) = v6 + 312;
  *((_OWORD *)v6 + 22) = 0u;
  *((_OWORD *)v6 + 23) = 0u;
  v6[384] = 1;
  *((_QWORD *)v6 + 49) = 0;
  v6[400] = 1;
  *((_QWORD *)v6 + 3) = &off_1E2DA5428;
  *((_QWORD *)v6 + 51) = 0;
  *((_QWORD *)v6 + 43) = v10;
  *(_OWORD *)(v6 + 328) = v9;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19174E700(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_noise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC14B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_noise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC14B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::v9_noise_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso8V9Engine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_17@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;

  v6 = operator new(0x180uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DC16A8;
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  v12 = *((_DWORD *)a2 + 12);
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2DA6248;
  v6[45] = 0;
  v6[46] = 0;
  v6[47] = 1065353216;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *((_OWORD *)v6 + 21) = v11;
  *((_DWORD *)v6 + 88) = v12;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19174E818(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_elementwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC16A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_elementwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC16A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::v9_elementwise_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso8V9Engine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_16@<Q0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;

  v6 = operator new(0x140uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DC1558;
  v7 = *a2;
  v8 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2DA5870;
  v6[38] = v7;
  v6[39] = 0;
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19174E8F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_flatten_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1558;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_flatten_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1558;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::v9_flatten_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso8V9Engine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_15@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  unint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[28];

  v6 = (char *)operator new(0x228uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC1600;
  v11 = a2[2];
  *(_OWORD *)v12 = a2[3];
  *(_OWORD *)&v12[12] = *(__int128 *)((char *)a2 + 60);
  v9 = *a2;
  v10 = a2[1];
  Espresso::kernel_with_uniforms_<Espresso::batchnorm_params,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 51) = 0;
  *((_QWORD *)v6 + 52) = 0;
  *((_QWORD *)v6 + 3) = &off_1E2DA5C78;
  *((_QWORD *)v6 + 57) = 0x358637BD00000000;
  *((_QWORD *)v6 + 58) = 0;
  *(_OWORD *)(v6 + 424) = 0u;
  *(_OWORD *)(v6 + 440) = 0u;
  *((_DWORD *)v6 + 118) = 0;
  *((_OWORD *)v6 + 30) = 0u;
  *((_OWORD *)v6 + 31) = 0u;
  *((_QWORD *)v6 + 64) = 0;
  *((_DWORD *)v6 + 130) = 1065353216;
  *((_QWORD *)v6 + 67) = 0;
  *((_QWORD *)v6 + 66) = 0;
  v6[544] = 0;
  *(_OWORD *)(v6 + 388) = *(_OWORD *)&v12[12];
  *(_OWORD *)(v6 + 360) = v11;
  *(_OWORD *)(v6 + 376) = *(_OWORD *)v12;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19174EA38(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_batchnorm_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1600;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_batchnorm_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1600;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::v9_batchnorm_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso8V9Engine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_14@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;

  v6 = operator new(0x170uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DC14E8;
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  v12 = *((_DWORD *)a2 + 12);
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2DA55C0;
  v6[45] = 0;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *((_OWORD *)v6 + 21) = v11;
  *((_DWORD *)v6 + 88) = v12;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19174EB44(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_split_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC14E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_split_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC14E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::v9_split_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso8V9Engine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_13@<Q0>(_QWORD *a1@<X1>, __n128 *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  __n128 result;

  v4 = operator new(0x148uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DC1440;
  v5 = Espresso::base_kernel::base_kernel((uint64_t)(v4 + 3), a1);
  v4[38] = 0;
  v4[39] = 0;
  v4[3] = &off_1E2DA5138;
  v4[40] = 0;
  result.n128_u64[0] = v5;
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_19174EC18(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_crop_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1440;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_crop_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1440;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::v9_crop_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso8V9Engine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_12@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[28];

  v6 = (char *)operator new(0x188uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC1718;
  v11 = a2[2];
  *(_OWORD *)v12 = a2[3];
  *(_OWORD *)&v12[12] = *(__int128 *)((char *)a2 + 60);
  v9 = *a2;
  v10 = a2[1];
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2DA65C0;
  *((_QWORD *)v6 + 48) = 0;
  *((_OWORD *)v6 + 21) = v11;
  *((_OWORD *)v6 + 22) = *(_OWORD *)v12;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *(_OWORD *)(v6 + 364) = *(_OWORD *)&v12[12];
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19174ED28(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_general_padding_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1718;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_general_padding_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1718;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::v9_general_padding_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso8V9Engine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_11@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::generic_context_transfer_kernel_impl,std::allocator<Espresso::generic_context_transfer_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::context_transfer_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso8V9Engine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_10@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::generic_load_constant_kernel_impl,std::allocator<Espresso::generic_load_constant_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_constant_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso8V9Engine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_9@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::V9Engine::v9_activation_kernel,std::allocator<Espresso::V9Engine::v9_activation_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::V9Engine::v9_activation_kernel,std::allocator<Espresso::V9Engine::v9_activation_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params const&,void>(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __n128 v9;
  __int128 v10;
  int v11;

  v6 = (char *)operator new(0x1A8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC1670;
  v9 = *(__n128 *)a3;
  v10 = *(_OWORD *)(a3 + 16);
  v11 = *(_DWORD *)(a3 + 32);
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 38) = v6 + 312;
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  *((_OWORD *)v6 + 25) = 0u;
  *((_QWORD *)v6 + 3) = &off_1E2DA60A8;
  *((_QWORD *)v6 + 52) = 0;
  *((_DWORD *)v6 + 90) = v11;
  result = v9;
  *(__n128 *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_19174EED4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_activation_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1670;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_activation_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1670;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::v9_activation_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso8V9Engine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_8@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::V9Engine::v9_activation_kernel,std::allocator<Espresso::V9Engine::v9_activation_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso8V9Engine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_7@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v6 = (char *)operator new(0x1B8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC15C8;
  v11 = a2[2];
  v12 = a2[3];
  v13 = *((_QWORD *)a2 + 8);
  v9 = *a2;
  v10 = a2[1];
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2DA5B20;
  *((_DWORD *)v6 + 106) = 0;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_OWORD *)(v6 + 392) = 0u;
  *(_OWORD *)(v6 + 408) = 0u;
  *(_QWORD *)(v6 + 428) = 1065353216;
  *((_OWORD *)v6 + 21) = v11;
  *((_OWORD *)v6 + 22) = v12;
  *((_QWORD *)v6 + 46) = v13;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19174F030(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_upsample_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC15C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_upsample_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC15C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::v9_upsample_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso8V9Engine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_6@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  _BYTE v11[32];

  v6 = (char *)operator new(0x1B8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC1520;
  v9 = *a2;
  v10 = a2[1];
  *(_OWORD *)v11 = a2[2];
  *(_OWORD *)&v11[16] = a2[3];
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2DA5718;
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  *((_OWORD *)v6 + 25) = 0u;
  *((_OWORD *)v6 + 26) = 0u;
  *((_DWORD *)v6 + 108) = 0;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *((_OWORD *)v6 + 21) = *(_OWORD *)v11;
  *(_OWORD *)(v6 + 349) = *(_OWORD *)&v11[13];
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19174F144(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1520;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1520;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::v9_concat_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso8V9Engine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_5@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  int64x2_t v7;
  unint64_t v8;
  __n128 result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;

  v6 = (char *)operator new(0x2D0uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC16E0;
  v16 = a2[6];
  v17 = a2[7];
  v18 = *((_DWORD *)a2 + 32);
  v12 = a2[2];
  v13 = a2[3];
  v14 = a2[4];
  v15 = a2[5];
  v10 = *a2;
  v11 = a2[1];
  Espresso::kernel_with_uniforms_<Espresso::inner_product_uniforms,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2DA63A0;
  *(_OWORD *)(v6 + 536) = 0u;
  *(_OWORD *)(v6 + 552) = 0u;
  *(_OWORD *)(v6 + 504) = 0u;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 488) = 0u;
  *((_OWORD *)v6 + 29) = 0u;
  v6[480] = 0;
  *((_QWORD *)v6 + 71) = 0;
  *((_OWORD *)v6 + 36) = 0u;
  *((_QWORD *)v6 + 74) = -1;
  *((_QWORD *)v6 + 75) = 0;
  *((_QWORD *)v6 + 76) = -1;
  *((_QWORD *)v6 + 77) = -1;
  *((_QWORD *)v6 + 78) = -1;
  *((_WORD *)v6 + 316) = -1;
  *((_QWORD *)v6 + 80) = 0;
  v7 = vdupq_n_s64(1uLL);
  *(int64x2_t *)(v6 + 648) = v7;
  *(int64x2_t *)(v6 + 664) = v7;
  *(int64x2_t *)(v6 + 680) = v7;
  *((_QWORD *)v6 + 87) = -1;
  *((_OWORD *)v6 + 44) = 0u;
  *(_OWORD *)(v6 + 424) = v16;
  *(_OWORD *)(v6 + 440) = v17;
  *((_DWORD *)v6 + 114) = v18;
  *(_OWORD *)(v6 + 360) = v12;
  *(_OWORD *)(v6 + 376) = v13;
  *(_OWORD *)(v6 + 392) = v14;
  *(_OWORD *)(v6 + 408) = v15;
  *(_OWORD *)(v6 + 328) = v10;
  *(_OWORD *)(v6 + 344) = v11;
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19174F2D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_inner_product_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC16E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_inner_product_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC16E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_inner_product_kernel>::__on_zero_shared(id *a1)
{
  Espresso::generic_inner_product_kernel *v2;

  v2 = (Espresso::generic_inner_product_kernel *)(a1 + 3);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 71));
  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel(v2);
}

__n128 ___ZN8Espresso8V9Engine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_4@<Q0>(_QWORD *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  _BYTE v9[28];

  v6 = (char *)operator new(0x158uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC1590;
  *(_OWORD *)v9 = *a2;
  *(_OWORD *)&v9[12] = *(_OWORD *)((char *)a2 + 12);
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_DWORD *)v6 + 83) = 0;
  *((_QWORD *)v6 + 3) = &off_1E2DA59C8;
  *((_QWORD *)v6 + 42) = 0;
  *((_OWORD *)v6 + 19) = *(_OWORD *)v9;
  *(_OWORD *)(v6 + 316) = *(_OWORD *)&v9[12];
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19174F41C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_softmax_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1590;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_softmax_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1590;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::v9_softmax_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso8V9Engine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_3@<Q0>(_QWORD *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  _BYTE v9[28];

  v6 = (char *)operator new(0x158uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC1398;
  *(_OWORD *)v9 = *a2;
  *(_OWORD *)&v9[12] = *(_OWORD *)((char *)a2 + 12);
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2DA4C80;
  *((_QWORD *)v6 + 42) = 0;
  *((_OWORD *)v6 + 19) = *(_OWORD *)v9;
  *(_OWORD *)(v6 + 316) = *(_OWORD *)&v9[12];
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19174F51C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_lrn_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1398;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_lrn_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1398;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::v9_lrn_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso8V9Engine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_2@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v6 = (char *)operator new(0x210uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC1478;
  v13 = a2[4];
  v14 = a2[5];
  v15 = a2[6];
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  v12 = a2[3];
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 38) = v6 + 312;
  *((_QWORD *)v6 + 56) = 0;
  *((_QWORD *)v6 + 57) = 0;
  *((_QWORD *)v6 + 55) = 0;
  *((_QWORD *)v6 + 3) = &off_1E2DA5290;
  *(_OWORD *)(v6 + 392) = v13;
  *(_OWORD *)(v6 + 408) = v14;
  *(_OWORD *)(v6 + 424) = v15;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  *(_OWORD *)(v6 + 360) = v11;
  *(_OWORD *)(v6 + 376) = v12;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19174F64C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_pool_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1478;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_pool_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1478;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::v9_pool_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso8V9Engine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  int v7;
  char *v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int64x2_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __n128 result;
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[2];

  v27 = a3;
  v7 = *(_DWORD *)(a2 + 44);
  if (v7 >= 2 && v7 == *(_DWORD *)(a2 + 116))
  {
    v9 = (char *)operator new(0x2E8uLL);
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = 0;
    *(_QWORD *)v9 = &off_1E2DC1638;
    v10 = (unint64_t)(v9 + 24);
    v11 = *(_OWORD *)(a2 + 144);
    v36 = *(_OWORD *)(a2 + 128);
    v37[0] = v11;
    *(_QWORD *)&v37[1] = *(_QWORD *)(a2 + 160);
    v12 = *(_OWORD *)(a2 + 80);
    v32 = *(_OWORD *)(a2 + 64);
    v33 = v12;
    v13 = *(_OWORD *)(a2 + 112);
    v34 = *(_OWORD *)(a2 + 96);
    v35 = v13;
    v14 = *(_OWORD *)(a2 + 16);
    v28 = *(_OWORD *)a2;
    v29 = v14;
    v15 = *(_OWORD *)(a2 + 48);
    v30 = *(_OWORD *)(a2 + 32);
    v31 = v15;
    Espresso::base_kernel::base_kernel((uint64_t)(v9 + 24), a1);
    *(_OWORD *)(v9 + 312) = 0u;
    *((_QWORD *)v9 + 38) = v9 + 312;
    Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v9 + 328));
    *((_OWORD *)v9 + 33) = 0u;
    *((_OWORD *)v9 + 34) = 0u;
    *((_OWORD *)v9 + 31) = 0u;
    *((_OWORD *)v9 + 32) = 0u;
    *((_OWORD *)v9 + 35) = 0u;
    *((_OWORD *)v9 + 36) = 0u;
    *((_QWORD *)v9 + 3) = &off_1E2DA5E28;
    *((_OWORD *)v9 + 37) = 0u;
    v9[608] = 0;
    *((_QWORD *)v9 + 77) = -1;
    *((_QWORD *)v9 + 78) = 0;
    *((_QWORD *)v9 + 84) = 0;
    v16 = vdupq_n_s64(1uLL);
    *(int64x2_t *)(v9 + 680) = v16;
    *(int64x2_t *)(v9 + 696) = v16;
    *(int64x2_t *)(v9 + 712) = v16;
    *(_OWORD *)(v9 + 728) = 0u;
    v17 = v29;
    *(_OWORD *)(v9 + 328) = v28;
    *(_OWORD *)(v9 + 344) = v17;
    v18 = v30;
    v19 = v31;
    v20 = v33;
    *(_OWORD *)(v9 + 392) = v32;
    *(_OWORD *)(v9 + 408) = v20;
    *(_OWORD *)(v9 + 360) = v18;
    *(_OWORD *)(v9 + 376) = v19;
    v21 = v34;
    v22 = v35;
    v23 = v36;
    v24 = v37[0];
    *(_QWORD *)(v25 + 157) = *(_QWORD *)((char *)v37 + 13);
    *(_OWORD *)(v9 + 456) = v23;
    *(_OWORD *)(v9 + 472) = v24;
    *(_OWORD *)(v9 + 424) = v21;
    *(_OWORD *)(v9 + 440) = v22;
  }
  else
  {
    v9 = (char *)operator new(0x348uLL);
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = 0;
    *(_QWORD *)v9 = &off_1E2DC1408;
    v10 = (unint64_t)(v9 + 24);
    Espresso::V9Engine::v9_conv_kernel::v9_conv_kernel((uint64_t)(v9 + 24), a1, &v27, (__int128 *)a2);
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = (unint64_t)v9;
  *a4 = result;
  return result;
}

void sub_19174F84C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_depthwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1638;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_depthwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1638;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_depthwise_kernel>::__on_zero_shared(id *a1)
{
  void **v2;

  v2 = a1 + 3;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 73));
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(v2);
}

double _ZNSt3__115allocate_sharedB8ne180100IN8Espresso14wisdom_managerENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(_QWORD *a1)
{
  char *v2;
  double result;
  std::string __p;

  v2 = (char *)operator new(0x178uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_1E2DB81B0;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  Espresso::wisdom_trainer2::wisdom_trainer2((uint64_t)(v2 + 24), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v2[176] = 0;
  *(_QWORD *)(v2 + 180) = 0;
  *((_WORD *)v2 + 94) = 256;
  *((_QWORD *)v2 + 26) = 0;
  *((_QWORD *)v2 + 25) = 0;
  *((_QWORD *)v2 + 24) = v2 + 200;
  *((_QWORD *)v2 + 28) = 0;
  *((_QWORD *)v2 + 29) = 0;
  *((_QWORD *)v2 + 32) = 0;
  *((_QWORD *)v2 + 33) = 0;
  *((_QWORD *)v2 + 30) = 0;
  *((_QWORD *)v2 + 31) = v2 + 256;
  result = 0.0;
  *((_OWORD *)v2 + 17) = 0u;
  *((_OWORD *)v2 + 18) = 0u;
  *((_OWORD *)v2 + 19) = 0u;
  *((_OWORD *)v2 + 20) = 0u;
  *((_OWORD *)v2 + 21) = 0u;
  *((_OWORD *)v2 + 22) = 0u;
  *((_QWORD *)v2 + 46) = 0;
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_19174FA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  if (a15 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::wisdom_manager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB81B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::wisdom_manager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB81B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__destroy_at[abi:ne180100]<std::pair<Espresso::wisdom_kernel_key const,std::map<std::string,int>>,0>(uint64_t a1)
{
  std::__tree<std::string>::destroy(a1 + 104, *(char **)(a1 + 112));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC13D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC13D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::blob_container>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_kernel>::__launch(uint64_t a1, id **a2, const void ***a3, const void ***a4)
{
  const void **v7;
  const void *v8;
  _QWORD *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  const void **v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  id *v22;
  uint64_t v23;
  id v24;
  int v25;
  int v26;
  _DWORD *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  const void *v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  unint64_t *v43;
  unint64_t v44;
  id *v45;
  void *v46;
  id *v47;
  id v48;
  void *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  BOOL v56;
  int v57;
  int v58;
  void *v59;
  int v60;
  std::runtime_error *v61;
  int v62;
  int v63;
  int v64;
  int v65;
  unsigned int v66;
  int8x8_t v67;
  int8x8_t v68;
  unsigned int v69;
  int v70;
  char v71;
  int v72;
  unsigned int v73;
  float v74;
  int v75;
  int v76;
  int v77;
  float v78;
  int v79;
  int v80;
  uint64_t v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  int v90;
  int v91;
  uint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  int v104;
  BOOL v105;
  int v106;
  int v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::runtime_error *v137;
  std::runtime_error *v138;
  std::runtime_error *v139;
  std::runtime_error *v140;
  std::runtime_error *exception;
  void *v142;
  id v143;
  int v144;
  _BOOL4 v145;
  int v146;
  id *v147;
  int v148;
  int v149;
  id v150;
  id v151;
  _QWORD v152[3];
  _QWORD v153[3];
  _QWORD v154[3];
  _QWORD v155[3];
  _QWORD v156[3];
  _QWORD v157[3];
  _QWORD v158[3];
  _QWORD v159[3];
  _DWORD *v160;
  std::__shared_weak_count *v161;
  _QWORD *v162;
  std::__shared_weak_count *v163;
  __int128 v164;
  uint64_t v165;
  _QWORD *v166;
  int64x2_t v167;

  v7 = *a4;
  v8 = **a4;
  if (v8
  {
    v10 = v9;
    v11 = (std::__shared_weak_count *)v7[1];
    v162 = v9;
    v163 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
  }
  else
  {
    v10 = 0;
    v162 = 0;
    v163 = 0;
  }
  v14 = *a3;
  v15 = **a3;
  if (v15
  {
    v17 = v16;
    v18 = (std::__shared_weak_count *)v14[1];
    v160 = v16;
    v161 = v18;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v15 = **a3;
    }
  }
  else
  {
    v17 = 0;
    v160 = 0;
    v161 = 0;
  }
  v21 = v15[5];
  v22 = *a2;
  v23 = *(_QWORD *)(a1 + 8);
  objc_msgSend((*a2)[19], "endEncoding");
  (*((void (**)(id *))*v22 + 9))(v22);
  *(_BYTE *)(a1 + 728) = *((_BYTE *)v22 + 216);
  *(_DWORD *)(a1 + 732) = *((_DWORD *)v22 + 53);
  v147 = v22;
  v24 = v22[19];
  v26 = v17[2];
  v25 = v17[3];
  v146 = objc_msgSend(*(id *)(v23 + 144), "supportsFeatureSet:", 11);
  v27 = (_DWORD *)(a1 + 304);
  v28 = *(void **)(a1 + 568);
  v148 = v26;
  v149 = v25;
  v144 = v21;
  if (v28 && v21 == *(__int16 *)(a1 + 438) && v26 == *v27 && v25 == *(_DWORD *)(a1 + 308))
  {
    v145 = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 304) = v26;
    *(_DWORD *)(a1 + 308) = v25;
    *(_QWORD *)(a1 + 312) = v10[1];
    *(_WORD *)(a1 + 438) = v21;
    *(_DWORD *)(a1 + 324) = v17[51];
    *(_QWORD *)(a1 + 568) = 0;

    v29 = objc_msgSend(*(id *)(v23 + 144), "newBufferWithBytes:length:options:", a1 + 304, 168, 0);
    v30 = *(void **)(a1 + 568);
    *(_QWORD *)(a1 + 568) = v29;

    (*(void (**)(uint64_t, id **))(*(_QWORD *)a1 + 88))(a1, a2);
    v145 = *(_DWORD *)(a1 + 736) > 1;
  }
  v31 = *(id *)(a1 + 576);
  v151 = *(id *)(a1 + 584);
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v17 + 32))(v17) == 1)
  {
    objc_storeStrong((id *)(a1 + 664), *(id *)(a1 + 712));
    v150 = *(id *)(a1 + 592);

    v32 = *(id *)(a1 + 608);
    if (v32)
    {
      v151 = v32;
    }
    else
    {
      v33 = *(int *)(a1 + 344);
      *(_QWORD *)(a1 + 744) = v33;
      v34 = *(const void **)(a1 + 8);
      if (!v34
      {
        v166 = 0;
        v167.i64[0] = 0;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
        exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
      }
      v36 = *(std::__shared_weak_count **)(a1 + 16);
      v166 = v35;
      v167.i64[0] = (uint64_t)v36;
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        v33 = *(_QWORD *)(a1 + 744);
      }
      v39 = (void *)v35[18];
      if ((unint64_t)(2 * v33) <= 0x10)
        v40 = 16;
      else
        v40 = 2 * v33;
      v41 = objc_msgSend(v39, "newBufferWithLength:options:", v40, 0);
      v42 = *(void **)(a1 + 608);
      *(_QWORD *)(a1 + 608) = v41;

      if (v36)
      {
        v43 = (unint64_t *)&v36->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      bzero((void *)objc_msgSend(*(id *)(a1 + 608), "contents"), objc_msgSend(*(id *)(a1 + 608), "length"));
      v151 = *(id *)(a1 + 608);
    }
  }
  else
  {
    objc_storeStrong((id *)(a1 + 664), *(id *)(a1 + 704));
    v150 = v31;
  }
  if (*(_QWORD *)(a1 + 600) && *(_QWORD *)(a1 + 624))
  {
    v45 = *a2;
    v46 = *(void **)(*(_QWORD *)(a1 + 8) + 160);
    if (*(_DWORD *)(a1 + 560))
    {
      objc_msgSend(v46, "kernelForFunction:cacheString:withConstants:", "dequantize_range_f16", 0, 0);
      v142 = (void *)objc_claimAutoreleasedReturnValue();
      v47 = (id *)(a1 + 592);
    }
    else
    {
      objc_msgSend(v46, "kernelForFunction:cacheString:withConstants:", "dequantize_range_f32", 0, 0);
      v142 = (void *)objc_claimAutoreleasedReturnValue();
      v47 = (id *)(a1 + 576);
    }
    v143 = *v47;
    v48 = v45[19];
    v49 = v48;
    if (!v142)
    {
      v139 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v139, "Kernel not found");
      __cxa_throw(v139, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    objc_msgSend(v48, "setComputePipelineState:");
    if (*(int *)(a1 + 348) <= 4)
      v50 = 4;
    else
      v50 = *(_DWORD *)(a1 + 348);
    if (*(int *)(a1 + 420) <= 1)
      v51 = 1;
    else
      v51 = *(_DWORD *)(a1 + 420);
    if (!v143)
    {
      v140 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v140, "Inconsistent state");
      __cxa_throw(v140, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v52 = *(_DWORD *)(a1 + 352);
    v53 = *(_DWORD *)(a1 + 356);
    v54 = *(_DWORD *)(a1 + 344);
    objc_msgSend(v49, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 600), 0, 0);
    objc_msgSend(v49, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 624), 0, 1);
    objc_msgSend(v49, "setBuffer:offset:atIndex:", v143, 0, 2);
    objc_msgSend(v49, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 568), 0, 3);
    v55 = v54 * (v50 * v52 * v53 / v51) / 4;
    v57 = v55 - 1;
    v56 = v55 < 1;
    v58 = v55 + 62;
    if (!v56)
      v58 = v57;
    v166 = (_QWORD *)((v58 >> 6) + 1);
    v167 = vdupq_n_s64(1uLL);
    v164 = xmmword_191A93520;
    v165 = 1;
    objc_msgSend(v49, "dispatchThreadgroups:threadsPerThreadgroup:", &v166, &v164);

  }
  if (v145)
  {
    v59 = *(void **)(a1 + 568);
    *(_QWORD *)(a1 + 568) = 0;

  }
  if (!*(_QWORD *)(a1 + 664))
  {
    v137 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v137, "Kernel not found");
    __cxa_throw(v137, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(v24, "setComputePipelineState:");
  objc_msgSend(v24, "setTexture:atIndex:", v162[21], 0);
  objc_msgSend(v24, "setBuffer:offset:atIndex:", *((_QWORD *)v160 + 20), 0, 3);
  objc_msgSend(v24, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 568), 0, 0);
  objc_msgSend(v24, "setBuffer:offset:atIndex:", v150, 0, 1);
  objc_msgSend(v24, "setBuffer:offset:atIndex:", v151, 0, 2);
  v60 = *(_DWORD *)(a1 + 764);
  switch(v60)
  {
    case 2:
      objc_msgSend(v24, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 624), 0, 4);
      break;
    case 3:
      v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v61, "not supported");
LABEL_174:
      __cxa_throw(v61, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    case 1:
      objc_msgSend(v24, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 616), 0, 4);
      v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v61, "shaders disabled");
      goto LABEL_174;
  }
  v62 = *(_DWORD *)(a1 + 344);
  v63 = v62 - 1;
  v56 = v62 < 1;
  v64 = v62 + 2;
  if (v56)
    v65 = v64;
  else
    v65 = v63;
  if (v146)
    v66 = -1;
  else
    v66 = 0;
  v67 = (int8x8_t)vdup_n_s32(v66);
  v68 = vbsl_s8(v67, (int8x8_t)0x800000008, (int8x8_t)0x400000004);
  if (v146)
    v69 = 8;
  else
    v69 = 4;
  v67.i32[0] = -1110651699;
  if (v146)
    *(float *)v67.i32 = 0.001;
  *(int8x8_t *)(a1 + 696) = v68;
  v70 = *(_DWORD *)(a1 + 672);
  if (v146)
    v71 = 3;
  else
    v71 = 2;
  v72 = v148 % (v70 << v71);
  v73 = v69;
  if (v72)
  {
    v74 = (float)v148;
    v73 = v69;
    if ((float)((float)v72 / (float)v148) > *(float *)v67.i32)
    {
      v73 = v69 >> 1;
      *(_DWORD *)(a1 + 696) = v69 >> 1;
      v72 = v148 % (int)((v69 >> 1) * v70);
    }
    if (v72)
    {
      if ((float)((float)v72 / v74) > *(float *)v67.i32)
      {
        v73 >>= 1;
        *(_DWORD *)(a1 + 696) = v73;
        v72 = v148 % (int)(v73 * v70);
      }
      if (v72 && v73 >= 2 && (float)((float)v72 / v74) > *(float *)v67.i32)
      {
        v73 >>= 1;
        *(_DWORD *)(a1 + 696) = v73;
      }
    }
  }
  v75 = v65 >> 2;
  v76 = *(_DWORD *)(a1 + 676);
  v77 = v149 % (v76 << v71);
  if (v77)
  {
    v78 = (float)v149;
    if ((float)((float)v77 / (float)v149) > *(float *)v67.i32)
    {
      v69 >>= 1;
      *(_DWORD *)(a1 + 700) = v69;
      v77 = v149 % (int)(v69 * v76);
    }
    if (v77)
    {
      if ((float)((float)v77 / v78) > *(float *)v67.i32)
      {
        v69 >>= 1;
        *(_DWORD *)(a1 + 700) = v69;
        v77 = v149 % (int)(v69 * v76);
      }
      if (v77 && v69 >= 2 && (float)((float)v77 / v78) > *(float *)v67.i32)
      {
        v69 >>= 1;
        *(_DWORD *)(a1 + 700) = v69;
      }
    }
  }
  v79 = v144 + v144 * v75;
  if (*(_DWORD *)(a1 + 784))
  {
    v80 = 1;
    goto LABEL_100;
  }
  v103 = v69 * v73;
  if (v146)
  {
    v80 = 1;
    if (v103 <= 0x20)
    {
      v104 = *(_DWORD *)(a1 + 656);
      v80 = v79 % (2 * v104) ? 1 : 2;
      if (v103 <= 0x10)
      {
        if (!(v79 % (4 * v104)))
          v80 = 4;
        if (v103 <= 8)
        {
          if (!(v79 % (8 * v104)))
            v80 = 8;
          if (v103 <= 4)
          {
            if (!(v79 % (16 * v104)))
              v80 = 16;
            if (v103 <= 2)
            {
              v105 = v79 % (32 * v104) == 0;
              v106 = 32;
              goto LABEL_145;
            }
          }
        }
      }
    }
  }
  else
  {
    v80 = 1;
    if (v103 <= 8)
    {
      v107 = *(_DWORD *)(a1 + 656);
      v80 = v79 % (2 * v107) ? 1 : 2;
      if (v103 <= 4)
      {
        if (!(v79 % (4 * v107)))
          v80 = 4;
        if (v103 <= 2)
        {
          v105 = v79 % (8 * v107) == 0;
          v106 = 8;
LABEL_145:
          if (v105)
            v80 = v106;
        }
      }
    }
  }
LABEL_100:
  v81 = *(_QWORD *)(v23 + 24);
  if (*(_BYTE *)(v81 + 152) && *(_DWORD *)(v81 + 156) && *(int *)(a1 + 736) <= 1)
  {
    v82 = v79 - 1;
    v83 = 10;
    do
    {
      v84 = *(int *)(a1 + 696);
      v85 = *(int *)(a1 + 700);
      v86 = (v149 - 1) / (*(_DWORD *)(a1 + 676) * (int)v85) + 1;
      v87 = v82 / (*(_DWORD *)(a1 + 656) * v80) + 1;
      v159[0] = (v148 - 1) / (*(_DWORD *)(a1 + 672) * (int)v84) + 1;
      v159[1] = v86;
      v159[2] = v87;
      v88 = *(int *)(a1 + 720) * (uint64_t)v80;
      v158[0] = v84;
      v158[1] = v85;
      v158[2] = v88;
      objc_msgSend(v24, "dispatchThreadgroups:threadsPerThreadgroup:", v159, v158, *(double *)&v67);
      --v83;
    }
    while (v83);
    objc_msgSend(v147[19], "endEncoding");
    (*((void (**)(id *))*v147 + 9))(v147);
    v89 = v147[19];

    v24 = v89;
    goto LABEL_161;
  }
  v90 = *(_DWORD *)(a1 + 736);
  if (v90 >= 2)
  {
    v91 = *(_DWORD *)(a1 + 420);
    if (v91 <= 1)
      v91 = 1;
    if (*(_DWORD *)(a1 + 348) / v91 % (4 * v90))
    {
      v138 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v138, "Invalid parameter");
      __cxa_throw(v138, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (*(_QWORD *)(a1 + 568))
    {
      if (*(_BYTE *)(v81 + 152))
        goto LABEL_112;
    }
    else
    {
      v108 = (char *)malloc_type_malloc(168 * v90, 0x10000405D2726C3uLL);
      v109 = v108;
      LODWORD(v110) = *(_DWORD *)(a1 + 736);
      if ((int)v110 >= 1)
      {
        v111 = 0;
        v112 = v108;
        do
        {
          v113 = *(_OWORD *)(a1 + 336);
          v114 = *(_OWORD *)v27;
          *((_OWORD *)v112 + 1) = *(_OWORD *)(a1 + 320);
          *((_OWORD *)v112 + 2) = v113;
          *(_OWORD *)v112 = v114;
          v115 = *(_OWORD *)(a1 + 352);
          v116 = *(_OWORD *)(a1 + 368);
          v117 = *(_OWORD *)(a1 + 400);
          *((_OWORD *)v112 + 5) = *(_OWORD *)(a1 + 384);
          *((_OWORD *)v112 + 6) = v117;
          *((_OWORD *)v112 + 3) = v115;
          *((_OWORD *)v112 + 4) = v116;
          v118 = *(_OWORD *)(a1 + 416);
          v119 = *(_OWORD *)(a1 + 432);
          v120 = *(_OWORD *)(a1 + 448);
          *(_QWORD *)(v112 + 157) = *(_QWORD *)(a1 + 461);
          *((_OWORD *)v112 + 8) = v119;
          *((_OWORD *)v112 + 9) = v120;
          *((_OWORD *)v112 + 7) = v118;
          *((_DWORD *)v112 + 4) = v111;
          v110 = *(int *)(a1 + 736);
          *((_WORD *)v112 + 66) = v110;
          if (v111 < v110 - 1)
          {
            *((_DWORD *)v112 + 8) = 0;
            *((_DWORD *)v112 + 28) = 0;
            *((_DWORD *)v112 + 6) = 0;
          }
          ++v111;
          v112 += 168;
        }
        while (v111 < v110);
      }
      v121 = objc_msgSend(*(id *)(v23 + 144), "newBufferWithBytes:length:options:", v108, 168 * (int)v110, 0);
      v122 = *(void **)(a1 + 568);
      *(_QWORD *)(a1 + 568) = v121;

      free(v109);
      v81 = *(_QWORD *)(v23 + 24);
      if (*(_BYTE *)(v81 + 152))
      {
LABEL_112:
        LODWORD(v92) = *(_DWORD *)(a1 + 736);
        if (*(_DWORD *)(v81 + 156))
        {
          v93 = 0;
          v94 = v79 - 1;
          do
          {
            if ((int)v92 >= 1)
            {
              v95 = 0;
              v96 = 0;
              do
              {
                objc_msgSend(v24, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 568), v95, 0, *(double *)&v67);
                v97 = *(int *)(a1 + 696);
                v98 = *(int *)(a1 + 700);
                v99 = (v149 - 1) / (*(_DWORD *)(a1 + 676) * (int)v98) + 1;
                v100 = *(_DWORD *)(a1 + 656) * v80;
                v157[0] = (v148 - 1) / (*(_DWORD *)(a1 + 672) * (int)v97) + 1;
                v157[1] = v99;
                v157[2] = v94 / v100 + 1;
                v156[0] = v97;
                v156[1] = v98;
                v156[2] = v80;
                objc_msgSend(v24, "dispatchThreadgroups:threadsPerThreadgroup:", v157, v156);
                ++v96;
                v92 = *(int *)(a1 + 736);
                v95 += 168;
              }
              while (v96 < v92);
            }
            ++v93;
          }
          while (v93 != 10);
          goto LABEL_158;
        }
LABEL_155:
        if ((int)v92 >= 1)
        {
          v123 = 0;
          v124 = 0;
          v125 = v79 - 1;
          do
          {
            objc_msgSend(v24, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 568), v123, 0, *(double *)&v67);
            v126 = *(int *)(a1 + 696);
            v127 = *(int *)(a1 + 700);
            v128 = (v149 - 1) / (*(_DWORD *)(a1 + 676) * (int)v127) + 1;
            v129 = *(_DWORD *)(a1 + 656) * v80;
            v155[0] = (v148 - 1) / (*(_DWORD *)(a1 + 672) * (int)v126) + 1;
            v155[1] = v128;
            v155[2] = v125 / v129 + 1;
            v154[0] = v126;
            v154[1] = v127;
            v154[2] = v80;
            objc_msgSend(v24, "dispatchThreadgroups:threadsPerThreadgroup:", v155, v154);
            ++v124;
            v123 += 168;
          }
          while (v124 < *(int *)(a1 + 736));
        }
        goto LABEL_158;
      }
    }
    LODWORD(v92) = *(_DWORD *)(a1 + 736);
    goto LABEL_155;
  }
  v101 = (v79 - 1) / (*(_DWORD *)(a1 + 656) * v80) + 1;
  v153[0] = (v148 - 1) / (int)(v73 * v70) + 1;
  v153[1] = (v149 - 1) / (int)(v69 * v76) + 1;
  v153[2] = v101;
  v102 = *(int *)(a1 + 720) * (uint64_t)v80;
  v152[0] = v73;
  v152[1] = v69;
  v152[2] = v102;
  objc_msgSend(v24, "dispatchThreadgroups:threadsPerThreadgroup:", v153, v152, *(double *)&v67);
LABEL_158:
  v130 = *(_DWORD *)(a1 + 420);
  if (v130 <= 1)
    v130 = 1;
  Espresso::batch_metal::recreate_command_buffer_after_flops((uint64_t)v147, (double)*(int *)(a1 + 344) * (double)*(__int16 *)(a1 + 438) * (double)v148 * (double)v149+ (double)(*(_DWORD *)(a1 + 348) / v130)* (double)*(int *)(a1 + 344)* (double)*(int *)(a1 + 352)* (double)*(int *)(a1 + 356)* (double)*(__int16 *)(a1 + 438)* (double)v148* (double)v149* 2.0);
LABEL_161:

  v131 = v161;
  if (v161)
  {
    v132 = (unint64_t *)&v161->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = v163;
  if (v163)
  {
    v135 = (unint64_t *)&v163->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
}

void sub_1917509F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  uint64_t v20;

  __cxa_free_exception(v19);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v20 - 176);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v20 - 160);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_kernel>::load_wisdom_parameterset(uint64_t a1)
{
  id *v2;
  int32x2_t v3;
  int32x2_t v4;
  uint64_t v5;
  __int32 v6;
  unint64_t v7;
  int32x2_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  Espresso::wisdom_manager *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  _BOOL4 v17;
  int v18;
  int v19;
  int v20;
  __int16 v21;
  int v22;
  _BOOL4 v23;
  int v24;
  unsigned int v25;
  void *v26;
  id v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  id v31;
  int v32;
  uint64_t v33;
  id v34;
  const __CFString *v35;
  const __CFString *v36;
  int v37;
  int v38;
  const __CFString *v39;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  const __CFString *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  void *v51;
  unint64_t *v52;
  unint64_t v53;
  int v54;
  id v55;
  __CFString *v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  void *v62;
  int v63;
  int v64;
  int v65;
  unsigned __int16 v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  void *v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned __int16 v85;
  unsigned __int16 v86;
  MTLFunctionConstantValues *v87;
  MTLFunctionConstantValues *v88;
  int v89;
  NSString *v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  std::runtime_error *exception;
  std::string *v95;
  __int128 v96;
  int v97;
  _BOOL4 v98;
  unsigned __int16 v99;
  unsigned __int16 v100;
  unsigned __int16 v101;
  std::string v102;
  std::string __p;
  uint64_t *v104[3];
  _QWORD v105[2];
  void *v106[2];
  void *v107[2];
  __int128 v108;
  _DWORD v109[8];
  __int128 v110;
  uint64_t v111;

  *(_QWORD *)(a1 + 672) = *(_QWORD *)(a1 + 648);
  v2 = (id *)(a1 + 680);
  objc_storeStrong((id *)(a1 + 680), *(id *)(a1 + 632));
  *(_DWORD *)(a1 + 720) = 1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 304);
  if (v6 <= *(_DWORD *)(a1 + 308))
    v6 = *(_DWORD *)(a1 + 308);
  v3.i32[0] = 200;
  v4.i32[0] = v6;
  *(int8x8_t *)(a1 + 696) = vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_s32(v3, v4), 0), (int8x8_t)0x800000004, (int8x8_t)0x80000000CLL);
  *(_DWORD *)(a1 + 724) = *(_DWORD *)(a1 + 656) == 1;
  v7 = 0x1E0CB3000;
  if (!*(_BYTE *)(*(_QWORD *)(v5 + 24) + 152))
  {
    v17 = 0;
    goto LABEL_95;
  }
  v111 = 0;
  v110 = 0u;
  memset(v109, 0, sizeof(v109));
  *(_OWORD *)v107 = 0u;
  v108 = 0u;
  *(_OWORD *)v106 = 0u;
  MEMORY[0x19401C808](v106, "convolution");
  v8 = *(int32x2_t *)(a1 + 312);
  *(int32x2_t *)&v9 = v8;
  *((_QWORD *)&v9 + 1) = *(_QWORD *)(a1 + 344);
  *(_OWORD *)&v109[1] = v9;
  v109[5] = *(__int16 *)(a1 + 438);
  LOBYTE(v109[6]) = *(_DWORD *)(a1 + 352);
  BYTE1(v109[6]) = *(_DWORD *)(a1 + 356);
  BYTE2(v109[6]) = *(_BYTE *)(a1 + 396);
  HIBYTE(v109[6]) = *(_BYTE *)(a1 + 376);
  LOBYTE(v109[7]) = *(_DWORD *)(a1 + 420);
  BYTE1(v109[7]) = *(_DWORD *)(a1 + 764);
  HIWORD(v109[7]) = 0;
  if (*(_DWORD *)(a1 + 132))
    *(int32x2_t *)&v109[1] = vrev64_s32(v8);
  v11 = *(Espresso::wisdom_manager **)(v5 + 24);
  v10 = *(std::__shared_weak_count **)(v5 + 32);
  v105[0] = v11;
  v105[1] = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  std::string::operator=((std::string *)&v107[1], (const std::string *)(a1 + 104));
  v109[0] = *(_DWORD *)(a1 + 128);
  Espresso::wisdom_manager::get_parameters(v11, (const Espresso::wisdom_kernel_key *)v106, v104);
  if (v104[2])
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "use_4chan");
    v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    *(_DWORD *)(a1 + 724) = *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v104, &__p, &v102)+ 14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "kernel_elements_per_thread");
    v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v14 = *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v104, &__p, &v102)+ 14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "block_size_x");
    v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v15 = *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v104, &__p, &v102)+ 14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "block_size_y");
    v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v16 = *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v104, &__p, &v102)+ 14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "use_manypar");
    v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v98 = *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v104, &__p, &v102)+ 14) != 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "cost");
    v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v104, &__p, &v102);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "use_smem");
    v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v104, &__p, &v102);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v98 = 0;
    v14 = *(_DWORD *)(a1 + 652) * *(_DWORD *)(a1 + 648);
    v15 = *(_DWORD *)(a1 + 696);
    v16 = *(_DWORD *)(a1 + 700);
  }
  v18 = *(_DWORD *)(a1 + 132);
  if (v18)
    v19 = v15;
  else
    v19 = v16;
  if (v18)
    v20 = v16;
  else
    v20 = v15;
  v21 = *(_WORD *)(a1 + 376);
  v97 = v20;
  if (v21 || *(_WORD *)(a1 + 384) || *(_WORD *)(a1 + 386) || *(_WORD *)(a1 + 388))
  {
    v22 = v19;
    v23 = 0;
  }
  else
  {
    v22 = v19;
    v23 = *(_WORD *)(a1 + 390) == 0;
  }
  v24 = *(_DWORD *)(a1 + 352);
  if (v24 <= *(_DWORD *)(a1 + 356))
    v24 = *(_DWORD *)(a1 + 356);
  v25 = v24 - 1;
  if (v25 < 0xB && ((0x5DFu >> v25) & 1) != 0)
  {
    v27 = *v2;
    *v2 = off_1E2DD5EE8[v25];

    v26 = 0;
  }
  else
  {
    v26 = (void *)objc_msgSend(*v2, "copy");
  }
  if ((v21 & 0xFFFE) == 2 || v23)
  {
    objc_msgSend(*v2, "stringByAppendingString:", CFSTR("_nopad"));
    v28 = objc_claimAutoreleasedReturnValue();
    v29 = *v2;
    *v2 = (id)v28;

  }
  if (*(int *)(a1 + 420) >= 2)
  {
    objc_msgSend(*v2, "stringByAppendingString:", CFSTR("_groups"));
    v30 = objc_claimAutoreleasedReturnValue();
    v31 = *v2;
    *v2 = (id)v30;

  }
  v32 = *(_DWORD *)(a1 + 724);
  switch(v32)
  {
    case 4:
      *(_DWORD *)(a1 + 656) = 4;
      v34 = *(id *)(a1 + 680);
      v35 = CFSTR("err(4z)");
      goto LABEL_54;
    case 3:
      *(_DWORD *)(a1 + 656) = 3;
      v34 = *(id *)(a1 + 680);
      v35 = CFSTR("err(3z)");
LABEL_54:
      *(_QWORD *)(a1 + 680) = v35;
      goto LABEL_55;
    case 1:
      *(_DWORD *)(a1 + 656) = 1;
      objc_msgSend(CFSTR("fourchan_"), "stringByAppendingString:", *(_QWORD *)(a1 + 680));
      v33 = objc_claimAutoreleasedReturnValue();
      v34 = *v2;
      *v2 = (id)v33;
LABEL_55:

      goto LABEL_57;
  }
  *(_DWORD *)(a1 + 656) = 2;
LABEL_57:
  if (*(__int16 *)(a1 + 396) > 1 || *(__int16 *)(a1 + 398) >= 2)
    v14 = 2;
  if (*(_DWORD *)(a1 + 412))
    v36 = CFSTR("_ncc");
  else
    v36 = CFSTR("_");
  v37 = *(_DWORD *)(a1 + 352);
  v38 = *(_DWORD *)(a1 + 356);
  v39 = CFSTR("xy");
  if (v37 <= 1)
  {
    if (v38 > 1 && v37 == 1)
      v39 = CFSTR("y");
  }
  else if (v38 == 1)
  {
    v39 = CFSTR("x");
  }
  v7 = 0x1E0CB3000uLL;
  switch(v14)
  {
    case 1:
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("morechan_t1x1%@%@_%@"), v36, v39, *v2);
      v41 = objc_claimAutoreleasedReturnValue();
      v42 = *(void **)(a1 + 680);
      *(_QWORD *)(a1 + 680) = v41;

      v43 = 0x100000001;
      goto LABEL_78;
    case 2:
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("morechan_t1x2%@%@_%@"), v36, v39, *v2);
      v48 = objc_claimAutoreleasedReturnValue();
      v49 = *(void **)(a1 + 680);
      *(_QWORD *)(a1 + 680) = v48;

      v43 = 0x200000001;
      goto LABEL_78;
    case 4:
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("morechan_t2x2%@%@_%@"), v36, v39, *v2);
      v44 = objc_claimAutoreleasedReturnValue();
      v45 = *(void **)(a1 + 680);
      *(_QWORD *)(a1 + 680) = v44;

      v43 = 0x200000002;
      goto LABEL_78;
    case 6:
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("morechan_t2x3%@%@_%@"), v36, v39, *v2);
      v50 = objc_claimAutoreleasedReturnValue();
      v51 = *(void **)(a1 + 680);
      *(_QWORD *)(a1 + 680) = v50;

      v43 = 0x300000002;
LABEL_78:
      *(_QWORD *)(a1 + 672) = v43;
      break;
    case 8:
      *(_QWORD *)(a1 + 672) = 0x400000002;
      v46 = *(void **)(a1 + 680);
      v47 = CFSTR("err(ket8)");
      goto LABEL_80;
    case 9:
      *(_QWORD *)(a1 + 672) = 0x300000003;
      v46 = *(void **)(a1 + 680);
      v47 = CFSTR("err(ket9)");
LABEL_80:
      *(_QWORD *)(a1 + 680) = v47;

      break;
    default:
      break;
  }
  *(_DWORD *)(a1 + 696) = v97;
  *(_DWORD *)(a1 + 700) = v22;
  if (objc_msgSend(v26, "length") && (objc_msgSend(v26, "isEqualToString:", *v2) & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v102, "load_wisdom_parameterset: kernel name was not reset: ");
    v95 = std::string::append(&v102, (const std::string::value_type *)objc_msgSend(*v2, "UTF8String"));
    v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v96;
    v95->__r_.__value_.__l.__size_ = 0;
    v95->__r_.__value_.__r.__words[2] = 0;
    v95->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &__p);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  std::__tree<std::string>::destroy((uint64_t)v104, (char *)v104[1]);
  if (v10)
  {
    v52 = (unint64_t *)&v10->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (SHIBYTE(v111) < 0)
    operator delete((void *)v110);
  v17 = v98;
  if (SHIBYTE(v108) < 0)
    operator delete(v107[1]);
  if (SHIBYTE(v107[0]) < 0)
    operator delete(v106[0]);

LABEL_95:
  *(_QWORD *)(a1 + 696) = 0x400000004;
  v54 = *(_DWORD *)(a1 + 764);
  if (v54 == 2)
  {
    v55 = *v2;
    v56 = CFSTR("quantized_range8bit_");
  }
  else
  {
    if (v54 != 1)
    {
      if (v17 && *(int *)(a1 + 348) >= 16 && !(*(_DWORD *)(a1 + 348) & 7 | v54))
      {
        objc_msgSend(CFSTR("moreparallelism_"), "stringByAppendingString:", *(_QWORD *)(a1 + 680));
        v73 = objc_claimAutoreleasedReturnValue();
        v74 = *(void **)(a1 + 680);
        *(_QWORD *)(a1 + 680) = v73;

        *(_DWORD *)(a1 + 720) = 2;
      }
      goto LABEL_100;
    }
    v55 = *v2;
    v56 = CFSTR("quantized_lut_");
  }
  -[__CFString stringByAppendingString:](v56, "stringByAppendingString:", v55);
  v57 = objc_claimAutoreleasedReturnValue();
  v58 = *v2;
  *v2 = (id)v57;

LABEL_100:
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 624))(a1, *(_QWORD *)(a1 + 680));
  v59 = objc_claimAutoreleasedReturnValue();
  v60 = *(void **)(a1 + 680);
  *(_QWORD *)(a1 + 680) = v59;

  objc_msgSend(*(id *)(a1 + 680), "stringByReplacingOccurrencesOfString:withString:", CFSTR("f32"), CFSTR("f16"));
  v61 = objc_claimAutoreleasedReturnValue();
  v62 = *(void **)(a1 + 688);
  *(_QWORD *)(a1 + 688) = v61;

  *(_DWORD *)(a1 + 736) = 1;
  v63 = *(_DWORD *)(a1 + 420);
  if (v63 <= 1)
    v63 = 1;
  v64 = (*(_DWORD *)(a1 + 348) - 1) / v63 / 4 + 1;
  if (*(_BYTE *)(a1 + 848))
    v65 = 8 * v64 * *(_DWORD *)(a1 + 352) * *(_DWORD *)(a1 + 356);
  else
    v65 = v64 * *(_DWORD *)(a1 + 352) * *(_DWORD *)(a1 + 356);
  v66 = objc_msgSend(*(id *)(v5 + 144), "supportsFeatureSet:", 11);
  v67 = *(_DWORD *)(a1 + 352);
  v68 = *(_DWORD *)(a1 + 356);
  if (v68 * v67 >= 3)
    v69 = 200;
  else
    v69 = 100;
  if (!*(_BYTE *)(a1 + 760))
    v69 = v69 >> (*(_DWORD *)(a1 + 764) == 2);
  if (v65 > v69)
  {
    v70 = 0;
    v71 = v65 >> 1;
    if (v65 >> 1 >= 0x40)
      v71 = 64;
    v72 = 1;
    while (1)
    {
      if (!(v64 % v72))
      {
        v70 = v72;
        if (v65 / v72 < v69)
          break;
      }
      if (v71 == ++v72)
        goto LABEL_123;
    }
    v70 = v72;
LABEL_123:
    *(_DWORD *)(a1 + 736) = v70;
  }
  v75 = *(__int16 *)(a1 + 376);
  switch(v75)
  {
    case 4:
      goto LABEL_127;
    case 2:
      v85 = 0;
      v86 = 0;
      break;
    case 1:
LABEL_127:
      v76 = v68 - *(_DWORD *)(a1 + 316) + (*(_DWORD *)(a1 + 308) - 1) * *(__int16 *)(a1 + 398);
      v77 = v67 - *(_DWORD *)(a1 + 312) + (*(_DWORD *)(a1 + 304) - 1) * *(__int16 *)(a1 + 396);
      v78 = v76 & ~(v76 >> 31);
      v79 = v77 & ~(v77 >> 31);
      v80 = *(unsigned __int16 *)(a1 + 376);
      v81 = v79 >> 1;
      v82 = v79 - (v79 >> 1);
      v83 = v78 >> 1;
      v84 = v78 - (v78 >> 1);
      if (v80 == 1)
        v85 = v81;
      else
        v85 = v82;
      if (v80 == 1)
        v86 = v83;
      else
        v86 = v84;
      break;
    default:
      v85 = *(_WORD *)(a1 + 384);
      v86 = *(_WORD *)(a1 + 388);
      break;
  }
  v87 = (MTLFunctionConstantValues *)objc_opt_new();
  v88 = v87;
  LOWORD(v106[0]) = *(_DWORD *)(a1 + 348);
  v89 = *(_DWORD *)(a1 + 344);
  LOWORD(v104[0]) = v89;
  LOWORD(__p.__r_.__value_.__l.__data_) = *(_WORD *)(a1 + 396);
  LOWORD(v102.__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 420);
  if (*(_BYTE *)(a1 + 848))
    LOWORD(v102.__r_.__value_.__l.__data_) = v89 / 8;
  LOWORD(v105[0]) = *(_DWORD *)(a1 + 736);
  v101 = v66;
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v87, "setConstantValue:type:atIndex:", v106, 37, 0);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v88, "setConstantValue:type:atIndex:", v104, 37, 1);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v88, "setConstantValue:type:atIndex:", &__p, 37, 2);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v88, "setConstantValue:type:atIndex:", &v102, 41, 3);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v88, "setConstantValue:type:atIndex:", v105, 41, 4);
  v100 = v85;
  v99 = v86;
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v88, "setConstantValue:type:atIndex:", &v100, 41, 5);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v88, "setConstantValue:type:atIndex:", &v99, 41, 6);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v88, "setConstantValue:type:atIndex:", &v101, 41, 7);
  objc_msgSend(*(id *)(v7 + 2368), "stringWithFormat:", CFSTR("k%d_c%d_s%d_g%d_s%d_px%d_py%d_d%d"), SLOWORD(v106[0]), SLOWORD(v104[0]), SLOWORD(__p.__r_.__value_.__l.__data_), LOWORD(v102.__r_.__value_.__l.__data_), LOWORD(v105[0]), v100, v99, v101);
  v90 = (NSString *)objc_claimAutoreleasedReturnValue();
  if (*(_DWORD *)(a1 + 560))
  {
    Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v5, *(NSString **)(a1 + 688), v90, v88);
    v91 = objc_claimAutoreleasedReturnValue();
    v92 = *(void **)(a1 + 712);
    *(_QWORD *)(a1 + 712) = v91;
  }
  else
  {
    Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v5, (NSString *)*v2, v90, v88);
    v93 = objc_claimAutoreleasedReturnValue();
    v92 = *(void **)(a1 + 704);
    *(_QWORD *)(a1 + 704) = v93;
  }

}

void sub_191751674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,char *a33,uint64_t a34,char a35,uint64_t a36,void *a37)
{
  int v37;
  void *v38;
  void *v39;

  if (a31 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v37 & 1) == 0)
    {
LABEL_8:
      std::__tree<std::string>::destroy((uint64_t)&a32, a33);

      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
      Espresso::wisdom_kernel_key::~wisdom_kernel_key(&a37);
      _Unwind_Resume(a1);
    }
  }
  else if (!v37)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v38);
  goto LABEL_8;
}

uint64_t Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_kernel>::tmp_aux_buffer_size(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;

  if (!*(_QWORD *)(a1 + 600) || !*(_QWORD *)(a1 + 624))
    return 0;
  v1 = *(_QWORD *)(a1 + 752);
  if ((*(_DWORD *)(a1 + 560) - 1) > 1)
    v2 = 4 * v1;
  else
    v2 = 2 * v1;
  if (v2 <= 0x10)
    return 16;
  else
    return v2;
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_kernel>::tmp_aux_buffer_create(uint64_t a1, uint64_t a2)
{
  const void *v3;
  id *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  std::runtime_error *exception;
  std::__shared_weak_count *v15;

  if (*(_QWORD *)(a1 + 600) && *(_QWORD *)(a1 + 624))
  {
    v3 = *(const void **)(a1 + 8);
    if (!v3
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v6 = *(std::__shared_weak_count **)(a1 + 16);
    v15 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = objc_msgSend(v5[18], "newBufferWithLength:options:", a2, 0, v5);
    if (v15)
    {
      v10 = (unint64_t *)&v15->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v12 = 576;
    if ((*(_DWORD *)(a1 + 560) - 1) < 2)
      v12 = 592;
    v13 = *(void **)(a1 + v12);
    *(_QWORD *)(a1 + v12) = v9;

  }
}

void sub_19175191C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_kernel>::tmp_aux_buffer_share(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::runtime_error *exception;

  if (*(_QWORD *)(a1 + 600) && *(_QWORD *)(a1 + 624))
  {
    if (!*(_QWORD *)a2
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Inconsistent state");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v5 = v4;
    v6 = *(std::__shared_weak_count **)(a2 + 8);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    if (v4[72])
      v9 = 72;
    else
      v9 = 74;
    objc_storeStrong((id *)(a1 + 576), (id)v4[v9]);
    if (v5[74])
      v10 = 74;
    else
      v10 = 72;
    objc_storeStrong((id *)(a1 + 592), (id)v5[v10]);
    if (v6)
    {
      v11 = (unint64_t *)&v6->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_191751A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_kernel>::transformkname(uint64_t a1, void *a2)
{
  return a2;
}

void Espresso::wisdom_kernel_key::~wisdom_kernel_key(void **this)
{
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_grad_kernel>::~convolution_kernel_metal_base(uint64_t a1)
{
  Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_grad_kernel>::~convolution_kernel_metal_base(a1);
  JUMPOUT(0x19401CD90);
}

{
  void **v2;

  *(_QWORD *)a1 = &off_1E2D80848;
  if (*(char *)(a1 + 759) < 0)
    operator delete(*(void **)(a1 + 736));
  if (*(char *)(a1 + 735) < 0)
    operator delete(*(void **)(a1 + 712));

  *(_QWORD *)a1 = off_1E2D9DD68;
  v2 = (void **)(a1 + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_grad_kernel>::__launch(uint64_t a1, id **a2, const void ***a3, const void ***a4)
{
  const void **v7;
  const void *v8;
  _QWORD *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  const void **v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  id *v22;
  uint64_t v23;
  id v24;
  int v25;
  int v26;
  _DWORD *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  const void *v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  unint64_t *v43;
  unint64_t v44;
  id *v45;
  void *v46;
  id *v47;
  id v48;
  void *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  BOOL v56;
  int v57;
  int v58;
  void *v59;
  int v60;
  std::runtime_error *v61;
  int v62;
  int v63;
  int v64;
  int v65;
  unsigned int v66;
  int8x8_t v67;
  int8x8_t v68;
  unsigned int v69;
  int v70;
  char v71;
  int v72;
  unsigned int v73;
  float v74;
  int v75;
  int v76;
  int v77;
  float v78;
  int v79;
  int v80;
  uint64_t v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  int v90;
  int v91;
  uint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  int v104;
  BOOL v105;
  int v106;
  int v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::runtime_error *v137;
  std::runtime_error *v138;
  std::runtime_error *v139;
  std::runtime_error *v140;
  std::runtime_error *exception;
  void *v142;
  id v143;
  int v144;
  _BOOL4 v145;
  int v146;
  id *v147;
  int v148;
  int v149;
  id v150;
  id v151;
  _QWORD v152[3];
  _QWORD v153[3];
  _QWORD v154[3];
  _QWORD v155[3];
  _QWORD v156[3];
  _QWORD v157[3];
  _QWORD v158[3];
  _QWORD v159[3];
  _DWORD *v160;
  std::__shared_weak_count *v161;
  _QWORD *v162;
  std::__shared_weak_count *v163;
  __int128 v164;
  uint64_t v165;
  _QWORD *v166;
  int64x2_t v167;

  v7 = *a4;
  v8 = **a4;
  if (v8
  {
    v10 = v9;
    v11 = (std::__shared_weak_count *)v7[1];
    v162 = v9;
    v163 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
  }
  else
  {
    v10 = 0;
    v162 = 0;
    v163 = 0;
  }
  v14 = *a3;
  v15 = **a3;
  if (v15
  {
    v17 = v16;
    v18 = (std::__shared_weak_count *)v14[1];
    v160 = v16;
    v161 = v18;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v15 = **a3;
    }
  }
  else
  {
    v17 = 0;
    v160 = 0;
    v161 = 0;
  }
  v21 = v15[5];
  v22 = *a2;
  v23 = *(_QWORD *)(a1 + 8);
  objc_msgSend((*a2)[19], "endEncoding");
  (*((void (**)(id *))*v22 + 9))(v22);
  *(_BYTE *)(a1 + 640) = *((_BYTE *)v22 + 216);
  *(_DWORD *)(a1 + 644) = *((_DWORD *)v22 + 53);
  v147 = v22;
  v24 = v22[19];
  v26 = v17[2];
  v25 = v17[3];
  v146 = objc_msgSend(*(id *)(v23 + 144), "supportsFeatureSet:", 11);
  v27 = (_DWORD *)(a1 + 304);
  v28 = *(void **)(a1 + 480);
  v148 = v26;
  v149 = v25;
  v144 = v21;
  if (v28 && v21 == *(__int16 *)(a1 + 438) && v26 == *v27 && v25 == *(_DWORD *)(a1 + 308))
  {
    v145 = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 304) = v26;
    *(_DWORD *)(a1 + 308) = v25;
    *(_QWORD *)(a1 + 312) = v10[1];
    *(_WORD *)(a1 + 438) = v21;
    *(_DWORD *)(a1 + 324) = v17[51];
    *(_QWORD *)(a1 + 480) = 0;

    v29 = objc_msgSend(*(id *)(v23 + 144), "newBufferWithBytes:length:options:", a1 + 304, 168, 0);
    v30 = *(void **)(a1 + 480);
    *(_QWORD *)(a1 + 480) = v29;

    (*(void (**)(uint64_t, id **))(*(_QWORD *)a1 + 88))(a1, a2);
    v145 = *(_DWORD *)(a1 + 648) > 1;
  }
  v31 = *(id *)(a1 + 488);
  v151 = *(id *)(a1 + 496);
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v17 + 32))(v17) == 1)
  {
    objc_storeStrong((id *)(a1 + 576), *(id *)(a1 + 624));
    v150 = *(id *)(a1 + 504);

    v32 = *(id *)(a1 + 520);
    if (v32)
    {
      v151 = v32;
    }
    else
    {
      v33 = *(int *)(a1 + 344);
      *(_QWORD *)(a1 + 656) = v33;
      v34 = *(const void **)(a1 + 8);
      if (!v34
      {
        v166 = 0;
        v167.i64[0] = 0;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
        exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
      }
      v36 = *(std::__shared_weak_count **)(a1 + 16);
      v166 = v35;
      v167.i64[0] = (uint64_t)v36;
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        v33 = *(_QWORD *)(a1 + 656);
      }
      v39 = (void *)v35[18];
      if ((unint64_t)(2 * v33) <= 0x10)
        v40 = 16;
      else
        v40 = 2 * v33;
      v41 = objc_msgSend(v39, "newBufferWithLength:options:", v40, 0);
      v42 = *(void **)(a1 + 520);
      *(_QWORD *)(a1 + 520) = v41;

      if (v36)
      {
        v43 = (unint64_t *)&v36->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      bzero((void *)objc_msgSend(*(id *)(a1 + 520), "contents"), objc_msgSend(*(id *)(a1 + 520), "length"));
      v151 = *(id *)(a1 + 520);
    }
  }
  else
  {
    objc_storeStrong((id *)(a1 + 576), *(id *)(a1 + 616));
    v150 = v31;
  }
  if (*(_QWORD *)(a1 + 512) && *(_QWORD *)(a1 + 536))
  {
    v45 = *a2;
    v46 = *(void **)(*(_QWORD *)(a1 + 8) + 160);
    if (*(_DWORD *)(a1 + 472))
    {
      objc_msgSend(v46, "kernelForFunction:cacheString:withConstants:", "dequantize_range_f16", 0, 0);
      v142 = (void *)objc_claimAutoreleasedReturnValue();
      v47 = (id *)(a1 + 504);
    }
    else
    {
      objc_msgSend(v46, "kernelForFunction:cacheString:withConstants:", "dequantize_range_f32", 0, 0);
      v142 = (void *)objc_claimAutoreleasedReturnValue();
      v47 = (id *)(a1 + 488);
    }
    v143 = *v47;
    v48 = v45[19];
    v49 = v48;
    if (!v142)
    {
      v139 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v139, "Kernel not found");
      __cxa_throw(v139, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    objc_msgSend(v48, "setComputePipelineState:");
    if (*(int *)(a1 + 348) <= 4)
      v50 = 4;
    else
      v50 = *(_DWORD *)(a1 + 348);
    if (*(int *)(a1 + 420) <= 1)
      v51 = 1;
    else
      v51 = *(_DWORD *)(a1 + 420);
    if (!v143)
    {
      v140 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v140, "Inconsistent state");
      __cxa_throw(v140, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v52 = *(_DWORD *)(a1 + 352);
    v53 = *(_DWORD *)(a1 + 356);
    v54 = *(_DWORD *)(a1 + 344);
    objc_msgSend(v49, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 512), 0, 0);
    objc_msgSend(v49, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 536), 0, 1);
    objc_msgSend(v49, "setBuffer:offset:atIndex:", v143, 0, 2);
    objc_msgSend(v49, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 480), 0, 3);
    v55 = v54 * (v50 * v52 * v53 / v51) / 4;
    v57 = v55 - 1;
    v56 = v55 < 1;
    v58 = v55 + 62;
    if (!v56)
      v58 = v57;
    v166 = (_QWORD *)((v58 >> 6) + 1);
    v167 = vdupq_n_s64(1uLL);
    v164 = xmmword_191A93520;
    v165 = 1;
    objc_msgSend(v49, "dispatchThreadgroups:threadsPerThreadgroup:", &v166, &v164);

  }
  if (v145)
  {
    v59 = *(void **)(a1 + 480);
    *(_QWORD *)(a1 + 480) = 0;

  }
  if (!*(_QWORD *)(a1 + 576))
  {
    v137 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v137, "Kernel not found");
    __cxa_throw(v137, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(v24, "setComputePipelineState:");
  objc_msgSend(v24, "setTexture:atIndex:", v162[21], 0);
  objc_msgSend(v24, "setBuffer:offset:atIndex:", *((_QWORD *)v160 + 20), 0, 3);
  objc_msgSend(v24, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 480), 0, 0);
  objc_msgSend(v24, "setBuffer:offset:atIndex:", v150, 0, 1);
  objc_msgSend(v24, "setBuffer:offset:atIndex:", v151, 0, 2);
  v60 = *(_DWORD *)(a1 + 676);
  switch(v60)
  {
    case 2:
      objc_msgSend(v24, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 536), 0, 4);
      break;
    case 3:
      v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v61, "not supported");
LABEL_174:
      __cxa_throw(v61, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    case 1:
      objc_msgSend(v24, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 528), 0, 4);
      v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v61, "shaders disabled");
      goto LABEL_174;
  }
  v62 = *(_DWORD *)(a1 + 344);
  v63 = v62 - 1;
  v56 = v62 < 1;
  v64 = v62 + 2;
  if (v56)
    v65 = v64;
  else
    v65 = v63;
  if (v146)
    v66 = -1;
  else
    v66 = 0;
  v67 = (int8x8_t)vdup_n_s32(v66);
  v68 = vbsl_s8(v67, (int8x8_t)0x800000008, (int8x8_t)0x400000004);
  if (v146)
    v69 = 8;
  else
    v69 = 4;
  v67.i32[0] = -1110651699;
  if (v146)
    *(float *)v67.i32 = 0.001;
  *(int8x8_t *)(a1 + 608) = v68;
  v70 = *(_DWORD *)(a1 + 584);
  if (v146)
    v71 = 3;
  else
    v71 = 2;
  v72 = v148 % (v70 << v71);
  v73 = v69;
  if (v72)
  {
    v74 = (float)v148;
    v73 = v69;
    if ((float)((float)v72 / (float)v148) > *(float *)v67.i32)
    {
      v73 = v69 >> 1;
      *(_DWORD *)(a1 + 608) = v69 >> 1;
      v72 = v148 % (int)((v69 >> 1) * v70);
    }
    if (v72)
    {
      if ((float)((float)v72 / v74) > *(float *)v67.i32)
      {
        v73 >>= 1;
        *(_DWORD *)(a1 + 608) = v73;
        v72 = v148 % (int)(v73 * v70);
      }
      if (v72 && v73 >= 2 && (float)((float)v72 / v74) > *(float *)v67.i32)
      {
        v73 >>= 1;
        *(_DWORD *)(a1 + 608) = v73;
      }
    }
  }
  v75 = v65 >> 2;
  v76 = *(_DWORD *)(a1 + 588);
  v77 = v149 % (v76 << v71);
  if (v77)
  {
    v78 = (float)v149;
    if ((float)((float)v77 / (float)v149) > *(float *)v67.i32)
    {
      v69 >>= 1;
      *(_DWORD *)(a1 + 612) = v69;
      v77 = v149 % (int)(v69 * v76);
    }
    if (v77)
    {
      if ((float)((float)v77 / v78) > *(float *)v67.i32)
      {
        v69 >>= 1;
        *(_DWORD *)(a1 + 612) = v69;
        v77 = v149 % (int)(v69 * v76);
      }
      if (v77 && v69 >= 2 && (float)((float)v77 / v78) > *(float *)v67.i32)
      {
        v69 >>= 1;
        *(_DWORD *)(a1 + 612) = v69;
      }
    }
  }
  v79 = v144 + v144 * v75;
  if (*(_DWORD *)(a1 + 696))
  {
    v80 = 1;
    goto LABEL_100;
  }
  v103 = v69 * v73;
  if (v146)
  {
    v80 = 1;
    if (v103 <= 0x20)
    {
      v104 = *(_DWORD *)(a1 + 568);
      v80 = v79 % (2 * v104) ? 1 : 2;
      if (v103 <= 0x10)
      {
        if (!(v79 % (4 * v104)))
          v80 = 4;
        if (v103 <= 8)
        {
          if (!(v79 % (8 * v104)))
            v80 = 8;
          if (v103 <= 4)
          {
            if (!(v79 % (16 * v104)))
              v80 = 16;
            if (v103 <= 2)
            {
              v105 = v79 % (32 * v104) == 0;
              v106 = 32;
              goto LABEL_145;
            }
          }
        }
      }
    }
  }
  else
  {
    v80 = 1;
    if (v103 <= 8)
    {
      v107 = *(_DWORD *)(a1 + 568);
      v80 = v79 % (2 * v107) ? 1 : 2;
      if (v103 <= 4)
      {
        if (!(v79 % (4 * v107)))
          v80 = 4;
        if (v103 <= 2)
        {
          v105 = v79 % (8 * v107) == 0;
          v106 = 8;
LABEL_145:
          if (v105)
            v80 = v106;
        }
      }
    }
  }
LABEL_100:
  v81 = *(_QWORD *)(v23 + 24);
  if (*(_BYTE *)(v81 + 152) && *(_DWORD *)(v81 + 156) && *(int *)(a1 + 648) <= 1)
  {
    v82 = v79 - 1;
    v83 = 10;
    do
    {
      v84 = *(int *)(a1 + 608);
      v85 = *(int *)(a1 + 612);
      v86 = (v149 - 1) / (*(_DWORD *)(a1 + 588) * (int)v85) + 1;
      v87 = v82 / (*(_DWORD *)(a1 + 568) * v80) + 1;
      v159[0] = (v148 - 1) / (*(_DWORD *)(a1 + 584) * (int)v84) + 1;
      v159[1] = v86;
      v159[2] = v87;
      v88 = *(int *)(a1 + 632) * (uint64_t)v80;
      v158[0] = v84;
      v158[1] = v85;
      v158[2] = v88;
      objc_msgSend(v24, "dispatchThreadgroups:threadsPerThreadgroup:", v159, v158, *(double *)&v67);
      --v83;
    }
    while (v83);
    objc_msgSend(v147[19], "endEncoding");
    (*((void (**)(id *))*v147 + 9))(v147);
    v89 = v147[19];

    v24 = v89;
    goto LABEL_161;
  }
  v90 = *(_DWORD *)(a1 + 648);
  if (v90 >= 2)
  {
    v91 = *(_DWORD *)(a1 + 420);
    if (v91 <= 1)
      v91 = 1;
    if (*(_DWORD *)(a1 + 348) / v91 % (4 * v90))
    {
      v138 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v138, "Invalid parameter");
      __cxa_throw(v138, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (*(_QWORD *)(a1 + 480))
    {
      if (*(_BYTE *)(v81 + 152))
        goto LABEL_112;
    }
    else
    {
      v108 = (char *)malloc_type_malloc(168 * v90, 0x10000405D2726C3uLL);
      v109 = v108;
      LODWORD(v110) = *(_DWORD *)(a1 + 648);
      if ((int)v110 >= 1)
      {
        v111 = 0;
        v112 = v108;
        do
        {
          v113 = *(_OWORD *)(a1 + 336);
          v114 = *(_OWORD *)v27;
          *((_OWORD *)v112 + 1) = *(_OWORD *)(a1 + 320);
          *((_OWORD *)v112 + 2) = v113;
          *(_OWORD *)v112 = v114;
          v115 = *(_OWORD *)(a1 + 352);
          v116 = *(_OWORD *)(a1 + 368);
          v117 = *(_OWORD *)(a1 + 400);
          *((_OWORD *)v112 + 5) = *(_OWORD *)(a1 + 384);
          *((_OWORD *)v112 + 6) = v117;
          *((_OWORD *)v112 + 3) = v115;
          *((_OWORD *)v112 + 4) = v116;
          v118 = *(_OWORD *)(a1 + 416);
          v119 = *(_OWORD *)(a1 + 432);
          v120 = *(_OWORD *)(a1 + 448);
          *(_QWORD *)(v112 + 157) = *(_QWORD *)(a1 + 461);
          *((_OWORD *)v112 + 8) = v119;
          *((_OWORD *)v112 + 9) = v120;
          *((_OWORD *)v112 + 7) = v118;
          *((_DWORD *)v112 + 4) = v111;
          v110 = *(int *)(a1 + 648);
          *((_WORD *)v112 + 66) = v110;
          if (v111 < v110 - 1)
          {
            *((_DWORD *)v112 + 8) = 0;
            *((_DWORD *)v112 + 28) = 0;
            *((_DWORD *)v112 + 6) = 0;
          }
          ++v111;
          v112 += 168;
        }
        while (v111 < v110);
      }
      v121 = objc_msgSend(*(id *)(v23 + 144), "newBufferWithBytes:length:options:", v108, 168 * (int)v110, 0);
      v122 = *(void **)(a1 + 480);
      *(_QWORD *)(a1 + 480) = v121;

      free(v109);
      v81 = *(_QWORD *)(v23 + 24);
      if (*(_BYTE *)(v81 + 152))
      {
LABEL_112:
        LODWORD(v92) = *(_DWORD *)(a1 + 648);
        if (*(_DWORD *)(v81 + 156))
        {
          v93 = 0;
          v94 = v79 - 1;
          do
          {
            if ((int)v92 >= 1)
            {
              v95 = 0;
              v96 = 0;
              do
              {
                objc_msgSend(v24, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 480), v95, 0, *(double *)&v67);
                v97 = *(int *)(a1 + 608);
                v98 = *(int *)(a1 + 612);
                v99 = (v149 - 1) / (*(_DWORD *)(a1 + 588) * (int)v98) + 1;
                v100 = *(_DWORD *)(a1 + 568) * v80;
                v157[0] = (v148 - 1) / (*(_DWORD *)(a1 + 584) * (int)v97) + 1;
                v157[1] = v99;
                v157[2] = v94 / v100 + 1;
                v156[0] = v97;
                v156[1] = v98;
                v156[2] = v80;
                objc_msgSend(v24, "dispatchThreadgroups:threadsPerThreadgroup:", v157, v156);
                ++v96;
                v92 = *(int *)(a1 + 648);
                v95 += 168;
              }
              while (v96 < v92);
            }
            ++v93;
          }
          while (v93 != 10);
          goto LABEL_158;
        }
LABEL_155:
        if ((int)v92 >= 1)
        {
          v123 = 0;
          v124 = 0;
          v125 = v79 - 1;
          do
          {
            objc_msgSend(v24, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 480), v123, 0, *(double *)&v67);
            v126 = *(int *)(a1 + 608);
            v127 = *(int *)(a1 + 612);
            v128 = (v149 - 1) / (*(_DWORD *)(a1 + 588) * (int)v127) + 1;
            v129 = *(_DWORD *)(a1 + 568) * v80;
            v155[0] = (v148 - 1) / (*(_DWORD *)(a1 + 584) * (int)v126) + 1;
            v155[1] = v128;
            v155[2] = v125 / v129 + 1;
            v154[0] = v126;
            v154[1] = v127;
            v154[2] = v80;
            objc_msgSend(v24, "dispatchThreadgroups:threadsPerThreadgroup:", v155, v154);
            ++v124;
            v123 += 168;
          }
          while (v124 < *(int *)(a1 + 648));
        }
        goto LABEL_158;
      }
    }
    LODWORD(v92) = *(_DWORD *)(a1 + 648);
    goto LABEL_155;
  }
  v101 = (v79 - 1) / (*(_DWORD *)(a1 + 568) * v80) + 1;
  v153[0] = (v148 - 1) / (int)(v73 * v70) + 1;
  v153[1] = (v149 - 1) / (int)(v69 * v76) + 1;
  v153[2] = v101;
  v102 = *(int *)(a1 + 632) * (uint64_t)v80;
  v152[0] = v73;
  v152[1] = v69;
  v152[2] = v102;
  objc_msgSend(v24, "dispatchThreadgroups:threadsPerThreadgroup:", v153, v152, *(double *)&v67);
LABEL_158:
  v130 = *(_DWORD *)(a1 + 420);
  if (v130 <= 1)
    v130 = 1;
  Espresso::batch_metal::recreate_command_buffer_after_flops((uint64_t)v147, (double)*(int *)(a1 + 344) * (double)*(__int16 *)(a1 + 438) * (double)v148 * (double)v149+ (double)(*(_DWORD *)(a1 + 348) / v130)* (double)*(int *)(a1 + 344)* (double)*(int *)(a1 + 352)* (double)*(int *)(a1 + 356)* (double)*(__int16 *)(a1 + 438)* (double)v148* (double)v149* 2.0);
LABEL_161:

  v131 = v161;
  if (v161)
  {
    v132 = (unint64_t *)&v161->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = v163;
  if (v163)
  {
    v135 = (unint64_t *)&v163->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
}

void sub_1917529E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  uint64_t v20;

  __cxa_free_exception(v19);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v20 - 176);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v20 - 160);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_grad_kernel>::load_wisdom_parameterset(uint64_t a1)
{
  id *v2;
  int32x2_t v3;
  int32x2_t v4;
  uint64_t v5;
  __int32 v6;
  unint64_t v7;
  int32x2_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  Espresso::wisdom_manager *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  _BOOL4 v17;
  int v18;
  int v19;
  int v20;
  __int16 v21;
  int v22;
  _BOOL4 v23;
  int v24;
  unsigned int v25;
  void *v26;
  id v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  id v31;
  int v32;
  uint64_t v33;
  id v34;
  const __CFString *v35;
  const __CFString *v36;
  int v37;
  int v38;
  const __CFString *v39;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  const __CFString *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  void *v51;
  unint64_t *v52;
  unint64_t v53;
  int v54;
  id v55;
  __CFString *v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  void *v62;
  int v63;
  int v64;
  int v65;
  unsigned __int16 v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  void *v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned __int16 v85;
  unsigned __int16 v86;
  MTLFunctionConstantValues *v87;
  MTLFunctionConstantValues *v88;
  int v89;
  NSString *v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  std::runtime_error *exception;
  std::string *v95;
  __int128 v96;
  int v97;
  _BOOL4 v98;
  unsigned __int16 v99;
  unsigned __int16 v100;
  unsigned __int16 v101;
  std::string v102;
  std::string __p;
  uint64_t *v104[3];
  _QWORD v105[2];
  void *v106[2];
  void *v107[2];
  __int128 v108;
  _DWORD v109[8];
  __int128 v110;
  uint64_t v111;

  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a1 + 560);
  v2 = (id *)(a1 + 592);
  objc_storeStrong((id *)(a1 + 592), *(id *)(a1 + 544));
  *(_DWORD *)(a1 + 632) = 1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 304);
  if (v6 <= *(_DWORD *)(a1 + 308))
    v6 = *(_DWORD *)(a1 + 308);
  v3.i32[0] = 200;
  v4.i32[0] = v6;
  *(int8x8_t *)(a1 + 608) = vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_s32(v3, v4), 0), (int8x8_t)0x800000004, (int8x8_t)0x80000000CLL);
  *(_DWORD *)(a1 + 636) = *(_DWORD *)(a1 + 568) == 1;
  v7 = 0x1E0CB3000;
  if (!*(_BYTE *)(*(_QWORD *)(v5 + 24) + 152))
  {
    v17 = 0;
    goto LABEL_95;
  }
  v111 = 0;
  v110 = 0u;
  memset(v109, 0, sizeof(v109));
  *(_OWORD *)v107 = 0u;
  v108 = 0u;
  *(_OWORD *)v106 = 0u;
  MEMORY[0x19401C808](v106, "convolution");
  v8 = *(int32x2_t *)(a1 + 312);
  *(int32x2_t *)&v9 = v8;
  *((_QWORD *)&v9 + 1) = *(_QWORD *)(a1 + 344);
  *(_OWORD *)&v109[1] = v9;
  v109[5] = *(__int16 *)(a1 + 438);
  LOBYTE(v109[6]) = *(_DWORD *)(a1 + 352);
  BYTE1(v109[6]) = *(_DWORD *)(a1 + 356);
  BYTE2(v109[6]) = *(_BYTE *)(a1 + 396);
  HIBYTE(v109[6]) = *(_BYTE *)(a1 + 376);
  LOBYTE(v109[7]) = *(_DWORD *)(a1 + 420);
  BYTE1(v109[7]) = *(_DWORD *)(a1 + 676);
  HIWORD(v109[7]) = 0;
  if (*(_DWORD *)(a1 + 132))
    *(int32x2_t *)&v109[1] = vrev64_s32(v8);
  v11 = *(Espresso::wisdom_manager **)(v5 + 24);
  v10 = *(std::__shared_weak_count **)(v5 + 32);
  v105[0] = v11;
  v105[1] = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  std::string::operator=((std::string *)&v107[1], (const std::string *)(a1 + 104));
  v109[0] = *(_DWORD *)(a1 + 128);
  Espresso::wisdom_manager::get_parameters(v11, (const Espresso::wisdom_kernel_key *)v106, v104);
  if (v104[2])
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "use_4chan");
    v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    *(_DWORD *)(a1 + 636) = *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v104, &__p, &v102)+ 14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "kernel_elements_per_thread");
    v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v14 = *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v104, &__p, &v102)+ 14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "block_size_x");
    v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v15 = *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v104, &__p, &v102)+ 14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "block_size_y");
    v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v16 = *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v104, &__p, &v102)+ 14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "use_manypar");
    v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v98 = *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v104, &__p, &v102)+ 14) != 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "cost");
    v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v104, &__p, &v102);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "use_smem");
    v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v104, &__p, &v102);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v98 = 0;
    v14 = *(_DWORD *)(a1 + 564) * *(_DWORD *)(a1 + 560);
    v15 = *(_DWORD *)(a1 + 608);
    v16 = *(_DWORD *)(a1 + 612);
  }
  v18 = *(_DWORD *)(a1 + 132);
  if (v18)
    v19 = v15;
  else
    v19 = v16;
  if (v18)
    v20 = v16;
  else
    v20 = v15;
  v21 = *(_WORD *)(a1 + 376);
  v97 = v20;
  if (v21 || *(_WORD *)(a1 + 384) || *(_WORD *)(a1 + 386) || *(_WORD *)(a1 + 388))
  {
    v22 = v19;
    v23 = 0;
  }
  else
  {
    v22 = v19;
    v23 = *(_WORD *)(a1 + 390) == 0;
  }
  v24 = *(_DWORD *)(a1 + 352);
  if (v24 <= *(_DWORD *)(a1 + 356))
    v24 = *(_DWORD *)(a1 + 356);
  v25 = v24 - 1;
  if (v25 < 0xB && ((0x5DFu >> v25) & 1) != 0)
  {
    v27 = *v2;
    *v2 = off_1E2DD5EE8[v25];

    v26 = 0;
  }
  else
  {
    v26 = (void *)objc_msgSend(*v2, "copy");
  }
  if ((v21 & 0xFFFE) == 2 || v23)
  {
    objc_msgSend(*v2, "stringByAppendingString:", CFSTR("_nopad"));
    v28 = objc_claimAutoreleasedReturnValue();
    v29 = *v2;
    *v2 = (id)v28;

  }
  if (*(int *)(a1 + 420) >= 2)
  {
    objc_msgSend(*v2, "stringByAppendingString:", CFSTR("_groups"));
    v30 = objc_claimAutoreleasedReturnValue();
    v31 = *v2;
    *v2 = (id)v30;

  }
  v32 = *(_DWORD *)(a1 + 636);
  switch(v32)
  {
    case 4:
      *(_DWORD *)(a1 + 568) = 4;
      v34 = *(id *)(a1 + 592);
      v35 = CFSTR("err(4z)");
      goto LABEL_54;
    case 3:
      *(_DWORD *)(a1 + 568) = 3;
      v34 = *(id *)(a1 + 592);
      v35 = CFSTR("err(3z)");
LABEL_54:
      *(_QWORD *)(a1 + 592) = v35;
      goto LABEL_55;
    case 1:
      *(_DWORD *)(a1 + 568) = 1;
      objc_msgSend(CFSTR("fourchan_"), "stringByAppendingString:", *(_QWORD *)(a1 + 592));
      v33 = objc_claimAutoreleasedReturnValue();
      v34 = *v2;
      *v2 = (id)v33;
LABEL_55:

      goto LABEL_57;
  }
  *(_DWORD *)(a1 + 568) = 2;
LABEL_57:
  if (*(__int16 *)(a1 + 396) > 1 || *(__int16 *)(a1 + 398) >= 2)
    v14 = 2;
  if (*(_DWORD *)(a1 + 412))
    v36 = CFSTR("_ncc");
  else
    v36 = CFSTR("_");
  v37 = *(_DWORD *)(a1 + 352);
  v38 = *(_DWORD *)(a1 + 356);
  v39 = CFSTR("xy");
  if (v37 <= 1)
  {
    if (v38 > 1 && v37 == 1)
      v39 = CFSTR("y");
  }
  else if (v38 == 1)
  {
    v39 = CFSTR("x");
  }
  v7 = 0x1E0CB3000uLL;
  switch(v14)
  {
    case 1:
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("morechan_t1x1%@%@_%@"), v36, v39, *v2);
      v41 = objc_claimAutoreleasedReturnValue();
      v42 = *(void **)(a1 + 592);
      *(_QWORD *)(a1 + 592) = v41;

      v43 = 0x100000001;
      goto LABEL_78;
    case 2:
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("morechan_t1x2%@%@_%@"), v36, v39, *v2);
      v48 = objc_claimAutoreleasedReturnValue();
      v49 = *(void **)(a1 + 592);
      *(_QWORD *)(a1 + 592) = v48;

      v43 = 0x200000001;
      goto LABEL_78;
    case 4:
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("morechan_t2x2%@%@_%@"), v36, v39, *v2);
      v44 = objc_claimAutoreleasedReturnValue();
      v45 = *(void **)(a1 + 592);
      *(_QWORD *)(a1 + 592) = v44;

      v43 = 0x200000002;
      goto LABEL_78;
    case 6:
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("morechan_t2x3%@%@_%@"), v36, v39, *v2);
      v50 = objc_claimAutoreleasedReturnValue();
      v51 = *(void **)(a1 + 592);
      *(_QWORD *)(a1 + 592) = v50;

      v43 = 0x300000002;
LABEL_78:
      *(_QWORD *)(a1 + 584) = v43;
      break;
    case 8:
      *(_QWORD *)(a1 + 584) = 0x400000002;
      v46 = *(void **)(a1 + 592);
      v47 = CFSTR("err(ket8)");
      goto LABEL_80;
    case 9:
      *(_QWORD *)(a1 + 584) = 0x300000003;
      v46 = *(void **)(a1 + 592);
      v47 = CFSTR("err(ket9)");
LABEL_80:
      *(_QWORD *)(a1 + 592) = v47;

      break;
    default:
      break;
  }
  *(_DWORD *)(a1 + 608) = v97;
  *(_DWORD *)(a1 + 612) = v22;
  if (objc_msgSend(v26, "length") && (objc_msgSend(v26, "isEqualToString:", *v2) & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v102, "load_wisdom_parameterset: kernel name was not reset: ");
    v95 = std::string::append(&v102, (const std::string::value_type *)objc_msgSend(*v2, "UTF8String"));
    v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v96;
    v95->__r_.__value_.__l.__size_ = 0;
    v95->__r_.__value_.__r.__words[2] = 0;
    v95->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &__p);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  std::__tree<std::string>::destroy((uint64_t)v104, (char *)v104[1]);
  if (v10)
  {
    v52 = (unint64_t *)&v10->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (SHIBYTE(v111) < 0)
    operator delete((void *)v110);
  v17 = v98;
  if (SHIBYTE(v108) < 0)
    operator delete(v107[1]);
  if (SHIBYTE(v107[0]) < 0)
    operator delete(v106[0]);

LABEL_95:
  *(_QWORD *)(a1 + 608) = 0x400000004;
  v54 = *(_DWORD *)(a1 + 676);
  if (v54 == 2)
  {
    v55 = *v2;
    v56 = CFSTR("quantized_range8bit_");
  }
  else
  {
    if (v54 != 1)
    {
      if (v17 && *(int *)(a1 + 348) >= 16 && !(*(_DWORD *)(a1 + 348) & 7 | v54))
      {
        objc_msgSend(CFSTR("moreparallelism_"), "stringByAppendingString:", *(_QWORD *)(a1 + 592));
        v73 = objc_claimAutoreleasedReturnValue();
        v74 = *(void **)(a1 + 592);
        *(_QWORD *)(a1 + 592) = v73;

        *(_DWORD *)(a1 + 632) = 2;
      }
      goto LABEL_100;
    }
    v55 = *v2;
    v56 = CFSTR("quantized_lut_");
  }
  -[__CFString stringByAppendingString:](v56, "stringByAppendingString:", v55);
  v57 = objc_claimAutoreleasedReturnValue();
  v58 = *v2;
  *v2 = (id)v57;

LABEL_100:
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 336))(a1, *(_QWORD *)(a1 + 592));
  v59 = objc_claimAutoreleasedReturnValue();
  v60 = *(void **)(a1 + 592);
  *(_QWORD *)(a1 + 592) = v59;

  objc_msgSend(*(id *)(a1 + 592), "stringByReplacingOccurrencesOfString:withString:", CFSTR("f32"), CFSTR("f16"));
  v61 = objc_claimAutoreleasedReturnValue();
  v62 = *(void **)(a1 + 600);
  *(_QWORD *)(a1 + 600) = v61;

  *(_DWORD *)(a1 + 648) = 1;
  v63 = *(_DWORD *)(a1 + 420);
  if (v63 <= 1)
    v63 = 1;
  v64 = (*(_DWORD *)(a1 + 348) - 1) / v63 / 4 + 1;
  if (*(_BYTE *)(a1 + 760))
    v65 = 8 * v64 * *(_DWORD *)(a1 + 352) * *(_DWORD *)(a1 + 356);
  else
    v65 = v64 * *(_DWORD *)(a1 + 352) * *(_DWORD *)(a1 + 356);
  v66 = objc_msgSend(*(id *)(v5 + 144), "supportsFeatureSet:", 11);
  v67 = *(_DWORD *)(a1 + 352);
  v68 = *(_DWORD *)(a1 + 356);
  if (v68 * v67 >= 3)
    v69 = 200;
  else
    v69 = 100;
  if (!*(_BYTE *)(a1 + 672))
    v69 = v69 >> (*(_DWORD *)(a1 + 676) == 2);
  if (v65 > v69)
  {
    v70 = 0;
    v71 = v65 >> 1;
    if (v65 >> 1 >= 0x40)
      v71 = 64;
    v72 = 1;
    while (1)
    {
      if (!(v64 % v72))
      {
        v70 = v72;
        if (v65 / v72 < v69)
          break;
      }
      if (v71 == ++v72)
        goto LABEL_123;
    }
    v70 = v72;
LABEL_123:
    *(_DWORD *)(a1 + 648) = v70;
  }
  v75 = *(__int16 *)(a1 + 376);
  switch(v75)
  {
    case 4:
      goto LABEL_127;
    case 2:
      v85 = 0;
      v86 = 0;
      break;
    case 1:
LABEL_127:
      v76 = v68 - *(_DWORD *)(a1 + 316) + (*(_DWORD *)(a1 + 308) - 1) * *(__int16 *)(a1 + 398);
      v77 = v67 - *(_DWORD *)(a1 + 312) + (*(_DWORD *)(a1 + 304) - 1) * *(__int16 *)(a1 + 396);
      v78 = v76 & ~(v76 >> 31);
      v79 = v77 & ~(v77 >> 31);
      v80 = *(unsigned __int16 *)(a1 + 376);
      v81 = v79 >> 1;
      v82 = v79 - (v79 >> 1);
      v83 = v78 >> 1;
      v84 = v78 - (v78 >> 1);
      if (v80 == 1)
        v85 = v81;
      else
        v85 = v82;
      if (v80 == 1)
        v86 = v83;
      else
        v86 = v84;
      break;
    default:
      v85 = *(_WORD *)(a1 + 384);
      v86 = *(_WORD *)(a1 + 388);
      break;
  }
  v87 = (MTLFunctionConstantValues *)objc_opt_new();
  v88 = v87;
  LOWORD(v106[0]) = *(_DWORD *)(a1 + 348);
  v89 = *(_DWORD *)(a1 + 344);
  LOWORD(v104[0]) = v89;
  LOWORD(__p.__r_.__value_.__l.__data_) = *(_WORD *)(a1 + 396);
  LOWORD(v102.__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 420);
  if (*(_BYTE *)(a1 + 760))
    LOWORD(v102.__r_.__value_.__l.__data_) = v89 / 8;
  LOWORD(v105[0]) = *(_DWORD *)(a1 + 648);
  v101 = v66;
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v87, "setConstantValue:type:atIndex:", v106, 37, 0);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v88, "setConstantValue:type:atIndex:", v104, 37, 1);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v88, "setConstantValue:type:atIndex:", &__p, 37, 2);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v88, "setConstantValue:type:atIndex:", &v102, 41, 3);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v88, "setConstantValue:type:atIndex:", v105, 41, 4);
  v100 = v85;
  v99 = v86;
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v88, "setConstantValue:type:atIndex:", &v100, 41, 5);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v88, "setConstantValue:type:atIndex:", &v99, 41, 6);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v88, "setConstantValue:type:atIndex:", &v101, 41, 7);
  objc_msgSend(*(id *)(v7 + 2368), "stringWithFormat:", CFSTR("k%d_c%d_s%d_g%d_s%d_px%d_py%d_d%d"), SLOWORD(v106[0]), SLOWORD(v104[0]), SLOWORD(__p.__r_.__value_.__l.__data_), LOWORD(v102.__r_.__value_.__l.__data_), LOWORD(v105[0]), v100, v99, v101);
  v90 = (NSString *)objc_claimAutoreleasedReturnValue();
  if (*(_DWORD *)(a1 + 472))
  {
    Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v5, *(NSString **)(a1 + 600), v90, v88);
    v91 = objc_claimAutoreleasedReturnValue();
    v92 = *(void **)(a1 + 624);
    *(_QWORD *)(a1 + 624) = v91;
  }
  else
  {
    Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v5, (NSString *)*v2, v90, v88);
    v93 = objc_claimAutoreleasedReturnValue();
    v92 = *(void **)(a1 + 616);
    *(_QWORD *)(a1 + 616) = v93;
  }

}

void sub_191753664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,char *a33,uint64_t a34,char a35,uint64_t a36,void *a37)
{
  int v37;
  void *v38;
  void *v39;

  if (a31 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v37 & 1) == 0)
    {
LABEL_8:
      std::__tree<std::string>::destroy((uint64_t)&a32, a33);

      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
      Espresso::wisdom_kernel_key::~wisdom_kernel_key(&a37);
      _Unwind_Resume(a1);
    }
  }
  else if (!v37)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v38);
  goto LABEL_8;
}

uint64_t Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_grad_kernel>::tmp_aux_buffer_size(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;

  if (!*(_QWORD *)(a1 + 512) || !*(_QWORD *)(a1 + 536))
    return 0;
  v1 = *(_QWORD *)(a1 + 664);
  if ((*(_DWORD *)(a1 + 472) - 1) > 1)
    v2 = 4 * v1;
  else
    v2 = 2 * v1;
  if (v2 <= 0x10)
    return 16;
  else
    return v2;
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_grad_kernel>::tmp_aux_buffer_create(uint64_t a1, uint64_t a2)
{
  const void *v3;
  id *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  std::runtime_error *exception;
  std::__shared_weak_count *v15;

  if (*(_QWORD *)(a1 + 512) && *(_QWORD *)(a1 + 536))
  {
    v3 = *(const void **)(a1 + 8);
    if (!v3
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v6 = *(std::__shared_weak_count **)(a1 + 16);
    v15 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = objc_msgSend(v5[18], "newBufferWithLength:options:", a2, 0, v5);
    if (v15)
    {
      v10 = (unint64_t *)&v15->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v12 = 488;
    if ((*(_DWORD *)(a1 + 472) - 1) < 2)
      v12 = 504;
    v13 = *(void **)(a1 + v12);
    *(_QWORD *)(a1 + v12) = v9;

  }
}

void sub_19175390C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_grad_kernel>::tmp_aux_buffer_share(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::runtime_error *exception;

  if (*(_QWORD *)(a1 + 512) && *(_QWORD *)(a1 + 536))
  {
    if (!*(_QWORD *)a2
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Inconsistent state");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v5 = v4;
    v6 = *(std::__shared_weak_count **)(a2 + 8);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    if (v4[61])
      v9 = 61;
    else
      v9 = 63;
    objc_storeStrong((id *)(a1 + 488), (id)v4[v9]);
    if (v5[63])
      v10 = 63;
    else
      v10 = 61;
    objc_storeStrong((id *)(a1 + 504), (id)v5[v10]);
    if (v6)
    {
      v11 = (unint64_t *)&v6->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_191753A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_grad_kernel>::transformkname(uint64_t a1, void *a2)
{
  return a2;
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base_with_weights<Espresso::generic_convolution_kernel>::~convolution_kernel_metal_base_with_weights(_QWORD *a1)
{
  *a1 = &off_1E2D81218;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 109));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 107));
  Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_kernel>::~convolution_kernel_metal_base((uint64_t)a1);
}

{
  *a1 = &off_1E2D81218;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 109));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 107));
  Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_kernel>::~convolution_kernel_metal_base((uint64_t)a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base_with_weights<Espresso::generic_convolution_kernel>::share_weights(uint64_t a1, const void **a2)
{
  id *v3;
  id *v4;
  void *v5;

  if (*a2)
  {
    if (v3)
    {
      v4 = v3;
      objc_storeStrong((id *)(a1 + 576), v3[72]);
      objc_storeStrong((id *)(a1 + 584), v4[73]);
      objc_storeStrong((id *)(a1 + 592), v4[74]);
      objc_storeStrong((id *)(a1 + 608), v4[76]);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 856), (uint64_t)v4[107], (uint64_t)v4[108]);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 872), (uint64_t)v4[109], (uint64_t)v4[110]);
      *(_DWORD *)(a1 + 336) = *((_DWORD *)v4 + 84);
      v5 = *(void **)(a1 + 568);
      *(_QWORD *)(a1 + 568) = 0;

    }
  }
}

uint64_t Espresso::MetalLowmemEngine::convolution_kernel_metal_base_with_weights<Espresso::generic_convolution_kernel>::get_weights_blob@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  _QWORD *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[2];

  v5 = (_QWORD *)(result + 8);
  v6 = 0uLL;
  v9[1] = 0u;
  if (a2 == 1)
  {
    v8 = 608;
    if (!*(_QWORD *)(result + 608))
      v8 = 584;
    result = std::allocate_shared[abi:ne180100]<Espresso::MetalLowmemEngine::blob_container,std::allocator<Espresso::MetalLowmemEngine::blob_container>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path &,objc_object  {objcproto9MTLBuffer}* {__strong}&,unsigned long &,int,int,int,void>((uint64_t *)v9, v5, *(_DWORD *)(result + 560), *(void **)(result + v8), *(_QWORD *)(result + 744), 1, 1, 1);
    goto LABEL_9;
  }
  if (!a2)
  {
    v7 = 592;
    if (!*(_QWORD *)(result + 592))
      v7 = 576;
    result = std::allocate_shared[abi:ne180100]<Espresso::MetalLowmemEngine::blob_container,std::allocator<Espresso::MetalLowmemEngine::blob_container>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path &,objc_object  {objcproto9MTLBuffer}* {__strong}&,unsigned long &,int,int,int,void>((uint64_t *)v9, v5, *(_DWORD *)(result + 560), *(void **)(result + v7), *(_QWORD *)(result + 752), 1, 1, 1);
LABEL_9:
    v6 = v9[0];
  }
  *a3 = v6;
  return result;
}

void sub_191753DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MetalLowmemEngine::convolution_kernel_metal_base_with_weights<Espresso::generic_convolution_kernel>::num_weights_blob()
{
  return 2;
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base_with_weights<Espresso::generic_convolution_kernel>::set_biases(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v2 = (std::__shared_weak_count *)a2[1];
  v13 = *a2;
  v14 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v11 = 0;
  v12 = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 416))(a1, &v13, &v11);
  v5 = v12;
  if (v12)
  {
    v6 = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v14;
  if (v14)
  {
    v9 = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_191753E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base_with_weights<Espresso::generic_convolution_kernel>::set_weights(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v2 = (std::__shared_weak_count *)a2[1];
  v13 = *a2;
  v14 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v11 = 0;
  v12 = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 424))(a1, &v13, &v11);
  v5 = v12;
  if (v12)
  {
    v6 = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v14;
  if (v14)
  {
    v9 = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v2 = (std::__shared_weak_count *)a2[1];
  v13 = *a2;
  v14 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v11 = 0;
  v12 = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 432))(a1, &v13, &v11);
  v5 = v12;
  if (v12)
  {
    v6 = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v14;
  if (v14)
  {
    v9 = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_191753F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_191754054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base_with_weights<Espresso::generic_convolution_kernel>::set_biases(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  const void **v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  std::runtime_error *exception;
  std::runtime_error *v47;
  _QWORD v48[7];
  std::__shared_weak_count *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;

  v6 = a1 + 856;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 856), *a2, a2[1]);
  if (*a2)
  {
    v7 = *(void **)(a1 + 584);
    *(_QWORD *)(a1 + 584) = 0;

    v8 = *(void **)(a1 + 608);
    *(_QWORD *)(a1 + 608) = 0;

    v9 = *(int *)(*a2 + 8);
    *(_QWORD *)(a1 + 744) = v9;
    if ((*(_DWORD *)(a1 + 560) - 1) > 1)
    {
      Espresso::bufferFromBlobReadOnly<std::shared_ptr<Espresso::blob<float,1>>>(*(void **)(*(_QWORD *)(a1 + 8) + 144), (uint64_t)a2);
      v43 = objc_claimAutoreleasedReturnValue();
      v44 = *(void **)(a1 + 584);
      *(_QWORD *)(a1 + 584) = v43;

    }
    else
    {
      v10 = (const void **)(a1 + 8);
      v11 = 2 * v9;
      if (v11 <= 8)
        v12 = 8;
      else
        v12 = v11;
      Espresso::on_alloc(0, (void *)v12);
      if (!*v10
      {
        v52 = 0uLL;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
        exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
      }
      v14 = (_QWORD *)(a1 + 744);
      v15 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)&v52 = v13;
      *((_QWORD *)&v52 + 1) = v15;
      if (v15)
      {
        v16 = (unint64_t *)(v15 + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v18 = (void *)v13[18];
      if ((unint64_t)(2 * *v14) <= 0x10)
        v19 = 16;
      else
        v19 = 2 * *v14;
      v20 = objc_msgSend(v18, "newBufferWithLength:options:", v19, 0);
      v21 = *(void **)(a1 + 608);
      *(_QWORD *)(a1 + 608) = v20;

      if (*((_QWORD *)&v52 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v52 + 1) + 16))(*((_QWORD *)&v52 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v52 + 1));
        }
      }
      if (!*v10
      {
        v52 = 0uLL;
        v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v47, "Espresso: wrong_context_type");
        v47->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
      }
      v25 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)&v52 = v24;
      *((_QWORD *)&v52 + 1) = v25;
      if (v25)
      {
        v26 = (unint64_t *)(v25 + 8);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      v48[0] = MEMORY[0x1E0C809B0];
      v48[1] = 3321888768;
      v48[2] = ___ZN8Espresso17MetalLowmemEngine42convolution_kernel_metal_base_with_weightsINS_26generic_convolution_kernelEE10set_biasesENSt3__110shared_ptrINS_4blobIfLi1EEEEENS5_INS_14abstract_batchEEE_block_invoke;
      v48[3] = &__block_descriptor_80_ea8_48c49_ZTSNSt3__110shared_ptrIN8Espresso4blobIfLi1EEEEE_e10_v16__0r_v8l;
      v48[4] = a1;
      v48[5] = a1 + 8;
      v28 = a2[1];
      v48[6] = *a2;
      v49 = (std::__shared_weak_count *)v28;
      if (v28)
      {
        v29 = (unint64_t *)(v28 + 8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v50 = a1 + 608;
      v51 = a1 + 744;
      (*(void (**)(void *, uint64_t, _QWORD *))(*(_QWORD *)v24 + 40))(v24, a3, v48);
      v31 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
      if (*((_QWORD *)&v52 + 1))
      {
        v32 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v52 = 0uLL;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v6, &v52);
      v34 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
      if (*((_QWORD *)&v52 + 1))
      {
        v35 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v37 = v49;
      if (v49)
      {
        p_shared_owners = (unint64_t *)&v49->__shared_owners_;
        do
          v39 = __ldaxr(p_shared_owners);
        while (__stlxr(v39 - 1, p_shared_owners));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
    }
    *(_DWORD *)(a1 + 336) = 1;
    v45 = *(void **)(a1 + 568);
    *(_QWORD *)(a1 + 568) = 0;

  }
  else
  {
    *(_DWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 744) = 0;
    v40 = *(void **)(a1 + 584);
    *(_QWORD *)(a1 + 584) = 0;

    v41 = *(void **)(a1 + 568);
    *(_QWORD *)(a1 + 568) = 0;

    v42 = *(void **)(a1 + 608);
    *(_QWORD *)(a1 + 608) = 0;

  }
}

void sub_191754440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base_with_weights<Espresso::generic_convolution_kernel>::set_weights(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  int *v23;
  int *v24;
  _DWORD *v25;
  uint64_t v26;
  int v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  __int128 v57;

  v7 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  v55 = *a2;
  v56 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (*(_BYTE *)(a1 + 848))
  {
    v10 = *(unsigned int *)(v7 + 8);
    v11 = *(unsigned int *)(v7 + 12);
    v13 = *(_DWORD *)(v7 + 16);
    v12 = *(unsigned int *)(v7 + 20);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v57, *(_DWORD *)(v7 + 8), *(_DWORD *)(v7 + 12), 8 * v13, *(_DWORD *)(v7 + 20));
    if ((int)v12 >= 1)
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = *(_QWORD *)(v7 + 24);
      v18 = *(_QWORD *)(v57 + 24);
      v19 = v11 * v10 * v13;
      v20 = 4 * (int)v10;
      do
      {
        if ((int)v11 >= 1)
        {
          v21 = 0;
          v22 = (_DWORD *)(v18 + 4 * (int)(v15 + v11 * v10 * (v16 & 7)));
          v23 = (int *)(v17 + 4 * v14);
          do
          {
            v24 = v23;
            v25 = v22;
            v26 = v10;
            if ((int)v10 >= 1)
            {
              do
              {
                v27 = *v24++;
                *v25++ = v27;
                --v26;
              }
              while (v26);
            }
            ++v21;
            v22 = (_DWORD *)((char *)v22 + v20);
            v23 = (int *)((char *)v23 + v20);
          }
          while (v21 != v11);
        }
        ++v16;
        v15 += 8 * v19;
        v14 += v19;
      }
      while (v16 != v12);
    }
    v28 = *(void **)(a1 + 568);
    *(_QWORD *)(a1 + 568) = 0;

  }
  else
  {
    *(_QWORD *)&v57 = v7;
    *((_QWORD *)&v57 + 1) = v6;
    v55 = 0;
    v56 = 0;
  }
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a2, &v57);
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
  if (*((_QWORD *)&v57 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v56)
  {
    v32 = &v56->__shared_owners_;
    do
      v33 = __ldaxr((unint64_t *)v32);
    while (__stlxr(v33 - 1, (unint64_t *)v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v34 = (std::__shared_weak_count *)a2[1];
  v51 = *a2;
  v52 = v34;
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  Espresso::shuffle_to_gpu_conv_weights(&v51, &v53);
  v37 = (std::__shared_weak_count *)a3[1];
  v49 = *a3;
  v50 = v37;
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 432))(a1, &v53, &v49);
  v40 = v50;
  if (v50)
  {
    v41 = (unint64_t *)&v50->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = v54;
  if (v54)
  {
    v44 = (unint64_t *)&v54->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = v52;
  if (v52)
  {
    v47 = (unint64_t *)&v52->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
}

void sub_191754748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base_with_weights<Espresso::generic_convolution_kernel>::set_weights(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  void **v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t i;
  const void **v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t j;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t k;
  void *v55;
  void *v56;
  std::runtime_error *exception;
  std::runtime_error *v58;
  _QWORD v59[6];
  std::__shared_weak_count *v60;
  uint64_t v61;
  void **v62;
  uint64_t v63;
  _QWORD *v64;
  std::__shared_weak_count *v65;

  v6 = (void **)(a1 + 592);
  v7 = (_QWORD *)(a1 + 872);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 872), *a2, a2[1]);
  v8 = *(void **)(a1 + 576);
  *(_QWORD *)(a1 + 576) = 0;

  v9 = *(void **)(a1 + 592);
  *(_QWORD *)(a1 + 592) = 0;

  v10 = *(int *)(*a2 + 8);
  for (i = 12; i != 32; i += 4)
    v10 *= *(int *)(*a2 + i);
  v12 = (const void **)(a1 + 8);
  *(_QWORD *)(a1 + 752) = v10;
  if ((*(_DWORD *)(a1 + 560) - 1) > 1)
  {
    v43 = *((id *)*v12 + 18);
    v44 = v43;
    v45 = *a2;
    v46 = *(int *)(*a2 + 8);
    v47 = 12;
    v48 = v46;
    do
    {
      v48 *= *(int *)(v45 + v47);
      v47 += 4;
    }
    while (v47 != 32);
    if ((v48 & 0x3FFFFFFFFFFFFFF8) != 0)
    {
      for (j = 12; j != 32; j += 4)
        v46 *= *(int *)(v45 + j);
      v50 = objc_msgSend(v43, "newBufferWithBytes:length:options:", *(_QWORD *)(v45 + 32), 4 * v46, 0);
    }
    else
    {
      v51 = malloc_type_malloc(0x20uLL, 0xD7789F2EuLL);
      v52 = v51;
      v53 = *(int *)(*a2 + 8);
      for (k = 12; k != 32; k += 4)
        v53 *= *(int *)(*a2 + k);
      memcpy(v51, *(const void **)(*a2 + 32), 4 * v53);
      v50 = objc_msgSend(v44, "newBufferWithBytes:length:options:", *(_QWORD *)(*a2 + 32), 32, 0);
      free(v52);
    }

    v55 = *(void **)(a1 + 576);
    *(_QWORD *)(a1 + 576) = v50;

  }
  else
  {
    v13 = 2 * v10;
    if (v13 <= 8)
      v14 = 8;
    else
      v14 = v13;
    Espresso::on_alloc(0, (void *)v14);
    if (!*v12
    {
      v64 = 0;
      v65 = 0;
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v16 = (_QWORD *)(a1 + 752);
    v17 = *(std::__shared_weak_count **)(a1 + 16);
    v64 = v15;
    v65 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    v20 = (void *)v15[18];
    if ((unint64_t)(2 * *v16) <= 0x10)
      v21 = 16;
    else
      v21 = 2 * *v16;
    v22 = objc_msgSend(v20, "newBufferWithLength:options:", v21, 0);
    v23 = *v6;
    *v6 = (void *)v22;

    if (v65)
    {
      v24 = &v65->__shared_owners_;
      do
        v25 = __ldaxr((unint64_t *)v24);
      while (__stlxr(v25 - 1, (unint64_t *)v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    if (!*v12
    {
      v64 = 0;
      v65 = 0;
      v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v58, "Espresso: wrong_context_type");
      v58->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v27 = *(std::__shared_weak_count **)(a1 + 16);
    v64 = v26;
    v65 = v27;
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v59[0] = MEMORY[0x1E0C809B0];
    v59[1] = 3321888768;
    v59[2] = ___ZN8Espresso17MetalLowmemEngine42convolution_kernel_metal_base_with_weightsINS_26generic_convolution_kernelEE11set_weightsENSt3__110shared_ptrINS_4blobIfLi6EEEEENS5_INS_14abstract_batchEEE_block_invoke;
    v59[3] = &__block_descriptor_80_ea8_40c49_ZTSNSt3__110shared_ptrIN8Espresso4blobIfLi6EEEEE_e10_v16__0r_v8l;
    v31 = *a2;
    v30 = a2[1];
    v59[4] = a1;
    v59[5] = v31;
    v60 = (std::__shared_weak_count *)v30;
    if (v30)
    {
      v32 = (unint64_t *)(v30 + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    v61 = a1 + 8;
    v62 = v6;
    v63 = a1 + 752;
    (*(void (**)(_QWORD *, uint64_t, _QWORD *))(*v26 + 40))(v26, a3, v59);
    v34 = v65;
    if (v65)
    {
      v35 = &v65->__shared_owners_;
      do
        v36 = __ldaxr((unint64_t *)v35);
      while (__stlxr(v36 - 1, (unint64_t *)v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v37 = *(std::__shared_weak_count **)(a1 + 880);
    *v7 = 0;
    v7[1] = 0;
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v40 = v60;
    if (v60)
    {
      v41 = (unint64_t *)&v60->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
  v56 = *(void **)(a1 + 568);
  *(_QWORD *)(a1 + 568) = 0;

}

void sub_191754BD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Espresso::MetalLowmemEngine::convolution_kernel_metal_base_with_weights<Espresso::generic_convolution_kernel>::get_shuffled_weights@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 880);
  *a2 = *(_QWORD *)(result + 872);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t Espresso::MetalLowmemEngine::convolution_kernel_metal_base_with_weights<Espresso::generic_convolution_kernel>::get_biases@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 864);
  *a2 = *(_QWORD *)(result + 856);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base_with_weights<Espresso::generic_convolution_kernel>::set_quantized_weights_blob(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  size_t v17;
  uint64_t j;
  uint64_t v19;
  uint64_t i;
  void *v21;
  uint64_t v22;
  uint64_t k;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;

  v4 = (std::__shared_weak_count *)a2[1];
  v29 = *a2;
  v30 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  Espresso::shuffle_to_gpu_conv_weights_8(&v29, &v31);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v9 = *(id *)(*(_QWORD *)(a1 + 8) + 144);
  v10 = v9;
  v11 = v31;
  v12 = *(int *)(v31 + 8);
  v13 = 12;
  v14 = v12;
  do
  {
    v14 *= *(int *)(v31 + v13);
    v13 += 4;
  }
  while (v13 != 32);
  if (v14 > 0x1F)
  {
    for (i = 12; i != 32; i += 4)
      v12 *= *(int *)(v31 + i);
    v19 = objc_msgSend(v9, "newBufferWithBytes:length:options:", *(_QWORD *)(v31 + 32), v12, 0, v29, v30);
  }
  else
  {
    v15 = malloc_type_malloc(0x20uLL, 0xD7789F2EuLL);
    v16 = v15;
    v17 = *(int *)(v11 + 8);
    for (j = 12; j != 32; j += 4)
      v17 *= *(int *)(v11 + j);
    memcpy(v15, *(const void **)(v11 + 32), v17);
    v19 = objc_msgSend(v10, "newBufferWithBytes:length:options:", *(_QWORD *)(v11 + 32), 32, 0, v29, v30);
    free(v16);
  }

  v21 = *(void **)(a1 + 592);
  *(_QWORD *)(a1 + 592) = v19;

  objc_storeStrong((id *)(a1 + 576), *(id *)(a1 + 592));
  v22 = *(int *)(v11 + 8);
  for (k = 12; k != 32; k += 4)
    v22 *= *(int *)(v11 + k);
  v24 = 0;
  *(_QWORD *)(a1 + 752) = v22;
  v25 = *(int *)(*a2 + 8);
  do
  {
    v25 *= *(int *)(*a2 + 12 + v24);
    v24 += 4;
  }
  while (v24 != 12);
  *(_BYTE *)(a1 + 760) = (v25 & 0x7FFFFFFFFFFC0000) == 0;
  if ((v25 & 0x7FFFFFFFFFFC0000) == 0)
    objc_storeStrong((id *)(a1 + 600), *(id *)(a1 + 592));
  v26 = v32;
  if (v32)
  {
    v27 = (unint64_t *)&v32->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_191754EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base_with_weights<Espresso::generic_convolution_kernel>::get_quantized_weights_blob(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base_with_weights<Espresso::generic_convolution_kernel>::set_quantization_lut_blob(uint64_t a1, _QWORD *a2)
{
  void *v4;
  std::runtime_error *exception;

  v4 = *(void **)(a1 + 616);
  *(_QWORD *)(a1 + 616) = 0;

  *(_DWORD *)(a1 + 764) = 0;
  if (*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "kernel disabled");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
}

void sub_191754F54(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base_with_weights<Espresso::generic_convolution_kernel>::get_quantization_lut_blob(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base_with_weights<Espresso::generic_convolution_kernel>::set_quantization_ranges_blob(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  int v12;
  int v13;
  uint64_t v14;
  void *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;

  v4 = a1 + 504;
  *(_DWORD *)(a1 + 764) = 0;
  v5 = *(void **)(a1 + 624);
  *(_QWORD *)(a1 + 624) = 0;

  v20 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v4, &v20);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = *a2;
  if (*a2)
  {
    if (!*(_BYTE *)(a1 + 760))
      *(_DWORD *)(a1 + 764) = 2;
    v10 = *(_DWORD *)(v9 + 8);
    v12 = v10 - 1;
    v11 = v10 < 1;
    v13 = v10 + 254;
    if (!v11)
      v13 = v12;
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v20, (v13 & 0xFFFFFF00) + 256, 1, 1, 1);
    memcpy(*(void **)(v20 + 16), *(const void **)(*a2 + 16), 4 * *(int *)(*a2 + 8));
    Espresso::bufferFromBlobReadOnly<std::shared_ptr<Espresso::blob<float,1>>>(*(void **)(*(_QWORD *)(a1 + 8) + 144), (uint64_t)&v20);
    v14 = objc_claimAutoreleasedReturnValue();
    v15 = *(void **)(a1 + 624);
    *(_QWORD *)(a1 + 624) = v14;

    v16 = *(void **)(a1 + 568);
    *(_QWORD *)(a1 + 568) = 0;

    v17 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (*((_QWORD *)&v20 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void sub_1917550C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id Espresso::bufferFromBlobReadOnly<std::shared_ptr<Espresso::blob<float,1>>>(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;

  v3 = a1;
  v4 = v3;
  if ((unint64_t)(4 * *(int *)(*(_QWORD *)a2 + 8)) > 0x1F)
  {
    v6 = (void *)objc_msgSend(v3, "newBufferWithBytes:length:options:", *(_QWORD *)(*(_QWORD *)a2 + 16));
  }
  else
  {
    v5 = malloc_type_malloc(0x20uLL, 0xD7789F2EuLL);
    memcpy(v5, *(const void **)(*(_QWORD *)a2 + 16), 4 * *(int *)(*(_QWORD *)a2 + 8));
    v6 = (void *)objc_msgSend(v4, "newBufferWithBytes:length:options:", *(_QWORD *)(*(_QWORD *)a2 + 16), 32, 0);
    free(v5);
  }

  return v6;
}

void sub_191755180(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN8Espresso17MetalLowmemEngine42convolution_kernel_metal_base_with_weightsINS_26generic_convolution_kernelEE11set_weightsENSt3__110shared_ptrINS_4blobIfLi6EEEEENS5_INS_14abstract_batchEEE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int64x2_t *v5;
  __int128 v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  __int128 v23;
  int64x2_t v24;
  uint64_t v25;
  uint64_t v26;
  int64x2_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  _QWORD *v44;
  char *v45;
  __int128 v46;
  int64x2_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t i;
  void *v51;
  const void *v52;
  void *v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::runtime_error *exception;
  __int128 v60;
  uint64_t v61;
  int64x2_t v62;
  uint64_t v63;
  int64x2_t *v64;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = (int64x2_t *)*a2;
  v6 = *(_OWORD *)(a1 + 40);
  if (*((_QWORD *)&v6 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = v5[11].u64[0];
  v10 = (_OWORD *)v5[10].i64[1];
  if ((unint64_t)v10 >= v9)
  {
    v60 = v6;
    v12 = v5[10].i64[0];
    v13 = ((uint64_t)v10 - v12) >> 4;
    if ((unint64_t)(v13 + 1) >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v14 = v9 - v12;
    v15 = v14 >> 3;
    if (v14 >> 3 <= (unint64_t)(v13 + 1))
      v15 = v13 + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v16 = 0xFFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    v64 = v5 + 11;
    v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v16);
    v19 = &v17[16 * v13];
    *(_OWORD *)v19 = v60;
    v21 = (_QWORD *)v5[10].i64[0];
    v20 = (_QWORD *)v5[10].i64[1];
    if (v20 == v21)
    {
      v24 = vdupq_n_s64((unint64_t)v20);
      v22 = &v17[16 * v13];
    }
    else
    {
      v22 = &v17[16 * v13];
      do
      {
        v23 = *((_OWORD *)v20 - 1);
        v20 -= 2;
        *((_OWORD *)v22 - 1) = v23;
        v22 -= 16;
        *v20 = 0;
        v20[1] = 0;
      }
      while (v20 != v21);
      v24 = v5[10];
    }
    v11 = v19 + 16;
    v5[10].i64[0] = (uint64_t)v22;
    v5[10].i64[1] = (uint64_t)(v19 + 16);
    v62 = v24;
    v25 = v5[11].i64[0];
    v5[11].i64[0] = (uint64_t)&v17[16 * v18];
    v63 = v25;
    v61 = v24.i64[0];
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v61);
  }
  else
  {
    *v10 = v6;
    v11 = v10 + 1;
  }
  v5[10].i64[1] = (uint64_t)v11;
  v26 = *(_QWORD *)(a1 + 56);
  v27 = (int64x2_t *)*a2;
  v28 = *(_QWORD *)(a1 + 40);
  if (*a2)
  {
    v29 = *(_QWORD *)(a1 + 48);
    if (v29)
    {
      v30 = (unint64_t *)(v29 + 8);
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    v32 = v27[11].u64[0];
    v33 = (_QWORD *)v27[10].i64[1];
    if ((unint64_t)v33 >= v32)
    {
      v35 = v27[10].i64[0];
      v36 = ((uint64_t)v33 - v35) >> 4;
      v37 = v36 + 1;
      if ((unint64_t)(v36 + 1) >> 60)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v38 = v32 - v35;
      if (v38 >> 3 > v37)
        v37 = v38 >> 3;
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0)
        v39 = 0xFFFFFFFFFFFFFFFLL;
      else
        v39 = v37;
      v64 = v27 + 11;
      v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v39);
      v42 = &v40[16 * v36];
      *(_QWORD *)v42 = v28;
      *((_QWORD *)v42 + 1) = v29;
      v44 = (_QWORD *)v27[10].i64[0];
      v43 = (_QWORD *)v27[10].i64[1];
      if (v43 == v44)
      {
        v47 = vdupq_n_s64((unint64_t)v43);
        v45 = &v40[16 * v36];
      }
      else
      {
        v45 = &v40[16 * v36];
        do
        {
          v46 = *((_OWORD *)v43 - 1);
          v43 -= 2;
          *((_OWORD *)v45 - 1) = v46;
          v45 -= 16;
          *v43 = 0;
          v43[1] = 0;
        }
        while (v43 != v44);
        v47 = v27[10];
      }
      v34 = v42 + 16;
      v27[10].i64[0] = (uint64_t)v45;
      v27[10].i64[1] = (uint64_t)(v42 + 16);
      v62 = v47;
      v48 = v27[11].i64[0];
      v27[11].i64[0] = (uint64_t)&v40[16 * v41];
      v63 = v48;
      v61 = v47.i64[0];
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v61);
    }
    else
    {
      *v33 = v28;
      v33[1] = v29;
      v34 = v33 + 2;
    }
    v27[10].i64[1] = (uint64_t)v34;
    v28 = *(_QWORD *)(a1 + 40);
  }
  v49 = *(int *)(v28 + 8);
  for (i = 12; i != 32; i += 4)
    v49 *= *(int *)(v28 + i);
  v51 = (void *)objc_msgSend(*(id *)(*(_QWORD *)v26 + 144), "newBufferWithBytesNoCopy:length:options:deallocator:", *(_QWORD *)(v28 + 32), (4 * v49 + 4095) & 0xFFFFFFFFFFFFF000, 0, 0);
  v52 = *(const void **)(v4 + 8);
  if (!v52
  {
    v61 = 0;
    v62.i64[0] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v54 = *(std::__shared_weak_count **)(v4 + 16);
  v61 = (uint64_t)v53;
  v62.i64[0] = (uint64_t)v54;
  if (v54)
  {
    p_shared_owners = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldxr(p_shared_owners);
    while (__stxr(v56 + 1, p_shared_owners));
  }
  Espresso::convert_float32_to_float16((uint64_t)v53, *a2, v51, **(void ***)(a1 + 64), **(_QWORD **)(a1 + 72), 0, 0);
  if (v54)
  {
    v57 = (unint64_t *)&v54->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }

}

void sub_191755500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c49_ZTSNSt3__110shared_ptrIN8Espresso4blobIfLi6EEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_40c49_ZTSNSt3__110shared_ptrIN8Espresso4blobIfLi6EEEEE(uint64_t a1)
{
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 40);
}

void ___ZN8Espresso17MetalLowmemEngine42convolution_kernel_metal_base_with_weightsINS_26generic_convolution_kernelEE10set_biasesENSt3__110shared_ptrINS_4blobIfLi1EEEEENS5_INS_14abstract_batchEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64x2_t *v8;
  int64x2_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  _QWORD *v28;
  char *v29;
  __int128 v30;
  int64x2_t v31;
  uint64_t v32;
  int64x2_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  _QWORD *v49;
  _QWORD *v50;
  char *v51;
  __int128 v52;
  int64x2_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  const void *v57;
  void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::runtime_error *exception;
  id v65;
  __int128 v66;
  uint64_t v67;
  int64x2_t v68;
  uint64_t v69;
  int64x2_t *v70;

  v4 = (uint64_t *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(v5 + 24))
  {
    if (!*(_QWORD *)a2
    {
      Espresso::throw_exception_selector<Espresso::generic_error>("Provided batch is not a Metal batch.");
    }
    v9 = v8;
    v10 = *(std::__shared_weak_count **)(a2 + 8);
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      v5 = *v4;
    }
    v13 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)&v66 = v5;
    *((_QWORD *)&v66 + 1) = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v16 = v8[11].u64[0];
    v17 = (_QWORD *)v8[10].i64[1];
    if ((unint64_t)v17 >= v16)
    {
      v19 = v8[10].i64[0];
      v20 = ((uint64_t)v17 - v19) >> 4;
      if ((unint64_t)(v20 + 1) >> 60)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = v16 - v19;
      v22 = v21 >> 3;
      if (v21 >> 3 <= (unint64_t)(v20 + 1))
        v22 = v20 + 1;
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
        v23 = 0xFFFFFFFFFFFFFFFLL;
      else
        v23 = v22;
      v70 = v9 + 11;
      v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v23);
      v26 = &v24[16 * v20];
      *(_OWORD *)v26 = v66;
      v28 = (_QWORD *)v9[10].i64[0];
      v27 = (_QWORD *)v9[10].i64[1];
      if (v27 == v28)
      {
        v31 = vdupq_n_s64((unint64_t)v27);
        v29 = &v24[16 * v20];
      }
      else
      {
        v29 = &v24[16 * v20];
        do
        {
          v30 = *((_OWORD *)v27 - 1);
          v27 -= 2;
          *((_OWORD *)v29 - 1) = v30;
          v29 -= 16;
          *v27 = 0;
          v27[1] = 0;
        }
        while (v27 != v28);
        v31 = v9[10];
      }
      v18 = v26 + 16;
      v9[10].i64[0] = (uint64_t)v29;
      v9[10].i64[1] = (uint64_t)(v26 + 16);
      v68 = v31;
      v32 = v9[11].i64[0];
      v9[11].i64[0] = (uint64_t)&v24[16 * v25];
      v69 = v32;
      v67 = v31.i64[0];
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v67);
    }
    else
    {
      *v17 = v5;
      v17[1] = v13;
      v18 = v17 + 2;
    }
    v9[10].i64[1] = (uint64_t)v18;
    v33 = *(int64x2_t **)a2;
    v34 = *v4;
    if (*(_QWORD *)a2)
    {
      v35 = *(_QWORD *)(a1 + 56);
      if (v35)
      {
        v36 = (unint64_t *)(v35 + 8);
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
      }
      v38 = v33[11].u64[0];
      v39 = (_QWORD *)v33[10].i64[1];
      if ((unint64_t)v39 >= v38)
      {
        v41 = v33[10].i64[0];
        v42 = ((uint64_t)v39 - v41) >> 4;
        v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v44 = v38 - v41;
        if (v44 >> 3 > v43)
          v43 = v44 >> 3;
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
          v45 = 0xFFFFFFFFFFFFFFFLL;
        else
          v45 = v43;
        v70 = v33 + 11;
        v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v45);
        v48 = &v46[16 * v42];
        *(_QWORD *)v48 = v34;
        *((_QWORD *)v48 + 1) = v35;
        v50 = (_QWORD *)v33[10].i64[0];
        v49 = (_QWORD *)v33[10].i64[1];
        if (v49 == v50)
        {
          v53 = vdupq_n_s64((unint64_t)v49);
          v51 = &v46[16 * v42];
        }
        else
        {
          v51 = &v46[16 * v42];
          do
          {
            v52 = *((_OWORD *)v49 - 1);
            v49 -= 2;
            *((_OWORD *)v51 - 1) = v52;
            v51 -= 16;
            *v49 = 0;
            v49[1] = 0;
          }
          while (v49 != v50);
          v53 = v33[10];
        }
        v40 = v48 + 16;
        v33[10].i64[0] = (uint64_t)v51;
        v33[10].i64[1] = (uint64_t)(v48 + 16);
        v68 = v53;
        v54 = v33[11].i64[0];
        v33[11].i64[0] = (uint64_t)&v46[16 * v47];
        v69 = v54;
        v67 = v53.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v67);
      }
      else
      {
        *v39 = v34;
        v39[1] = v35;
        v40 = v39 + 2;
      }
      v33[10].i64[1] = (uint64_t)v40;
      v34 = *v4;
    }
    v65 = (id)objc_msgSend(*(id *)(*(_QWORD *)v7 + 144), "newBufferWithBytesNoCopy:length:options:deallocator:", *(_QWORD *)(v34 + 16), (4 * *(int *)(v34 + 8) + 4095) & 0xFFFFFFFFFFFFF000, 0, 0);
    if (v10)
    {
      v55 = (unint64_t *)&v10->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
    Espresso::bufferFromBlobReadOnly<std::shared_ptr<Espresso::blob<float,1>>>(*(void **)(*(_QWORD *)v7 + 144), (uint64_t)v4);
    v65 = (id)objc_claimAutoreleasedReturnValue();
  }
  v57 = *(const void **)(v6 + 8);
  if (!v57
  {
    v67 = 0;
    v68.i64[0] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v59 = *(std::__shared_weak_count **)(v6 + 16);
  v67 = (uint64_t)v58;
  v68.i64[0] = (uint64_t)v59;
  if (v59)
  {
    v60 = (unint64_t *)&v59->__shared_owners_;
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
  }
  Espresso::convert_float32_to_float16((uint64_t)v58, *(_QWORD *)a2, v65, **(void ***)(a1 + 64), **(_QWORD **)(a1 + 72), 0, 0);
  if (v59)
  {
    v62 = (unint64_t *)&v59->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }

}

void sub_191755978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_48c49_ZTSNSt3__110shared_ptrIN8Espresso4blobIfLi1EEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_48c49_ZTSNSt3__110shared_ptrIN8Espresso4blobIfLi1EEEEE(uint64_t a1)
{
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_kernel>::~convolution_kernel_metal_base(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E2D805C0;
  if (*(char *)(a1 + 847) < 0)
    operator delete(*(void **)(a1 + 824));
  if (*(char *)(a1 + 823) < 0)
    operator delete(*(void **)(a1 + 800));

  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)a1);
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal::~convolution_kernel_metal(Espresso::MetalLowmemEngine::convolution_kernel_metal *this)
{
  Espresso::MetalLowmemEngine::convolution_kernel_metal::~convolution_kernel_metal(this);
  JUMPOUT(0x19401CD90);
}

{
  *(_QWORD *)this = &off_1E2D81218;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 872);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 856);
  Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_kernel>::~convolution_kernel_metal_base((uint64_t)this);
}

float Espresso::sanitize_nan(Espresso *this, float result)
{
  if ((LODWORD(result) & 0x7FFFFFFFu) >= 0x7F800000)
    return -10000000.0;
  return result;
}

void Espresso::get_top_pred(Espresso *this@<X0>, float *a2@<X1>, float *a3@<X2>, int a4@<W3>, unint64_t *a5@<X8>)
{
  char *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;

  if ((int)a3 < 1)
  {
    v8 = 0;
    v9 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = a3;
    do
    {
      if (a2)
        v13 = a2[v11];
      else
        v13 = 1.0;
      v14 = v13;
      v15 = v11 | ((unint64_t)*((unsigned int *)this + v11) << 32);
      if (v9 >= v10)
      {
        v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (_QWORD)v8) >> 2) + 1;
        if (v16 > 0x1555555555555555)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(v10 - (_QWORD)v8) >> 2) > v16)
          v16 = 0x5555555555555556 * ((uint64_t)(v10 - (_QWORD)v8) >> 2);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)v8) >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v17 = 0x1555555555555555;
        else
          v17 = v16;
        if (v17)
          v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,float>>>(v17);
        else
          v18 = 0;
        v19 = v17 + 4 * ((uint64_t)(v9 - (_QWORD)v8) >> 2);
        *(_QWORD *)v19 = v15;
        *(float *)(v19 + 8) = v14;
        v20 = (char *)v19;
        while ((char *)v9 != v8)
        {
          v21 = *(_QWORD *)(v9 - 12);
          v9 -= 12;
          v22 = *(_DWORD *)(v9 + 8);
          *(_QWORD *)(v20 - 12) = v21;
          v20 -= 12;
          *((_DWORD *)v20 + 2) = v22;
        }
        v10 = v17 + 12 * v18;
        v9 = v19 + 12;
        if (v8)
          operator delete(v8);
        v8 = v20;
      }
      else
      {
        *(_QWORD *)v9 = v15;
        *(float *)(v9 + 8) = v13;
        v9 += 12;
      }
      ++v11;
    }
    while (v11 != v12);
  }
  v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (_QWORD)v8) >> 2);
  v24 = 126 - 2 * __clz(v23);
  if ((char *)v9 == v8)
    v25 = 0;
  else
    v25 = v24;
  std::__introsort<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *,false>((uint64_t)v8, v9, v25, 1);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v26 = a4;
  if ((int)v23 < a4)
    v26 = -1431655765 * ((uint64_t)(v9 - (_QWORD)v8) >> 2);
  if (v26 >= 1)
  {
    v27 = 0;
    v28 = 0;
    v29 = v26;
    do
    {
      v30 = &v8[12 * v28];
      v31 = a5[2];
      if ((unint64_t)v27 >= v31)
      {
        v34 = (_DWORD *)*a5;
        v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v27 - *a5) >> 2);
        v36 = v35 + 1;
        if (v35 + 1 > 0x1555555555555555)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - (_QWORD)v34) >> 2);
        if (2 * v37 > v36)
          v36 = 2 * v37;
        if (v37 >= 0xAAAAAAAAAAAAAAALL)
          v38 = 0x1555555555555555;
        else
          v38 = v36;
        if (v38)
          v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,float>>>(v38);
        else
          v39 = 0;
        v40 = *(_QWORD *)v30;
        v41 = v38 + 12 * v35;
        *(_DWORD *)(v41 + 8) = *((_DWORD *)v30 + 2);
        *(_QWORD *)v41 = v40;
        v42 = v41;
        if (v27 != v34)
        {
          do
          {
            v43 = *(_QWORD *)(v27 - 3);
            v27 -= 3;
            v44 = v27[2];
            *(_QWORD *)(v42 - 12) = v43;
            v42 -= 12;
            *(_DWORD *)(v42 + 8) = v44;
          }
          while (v27 != v34);
          v27 = (_DWORD *)*a5;
        }
        v33 = (_DWORD *)(v41 + 12);
        *a5 = v42;
        a5[1] = v41 + 12;
        a5[2] = v38 + 12 * v39;
        if (v27)
          operator delete(v27);
      }
      else
      {
        v32 = *(_QWORD *)v30;
        v27[2] = *((_DWORD *)v30 + 2);
        *(_QWORD *)v27 = v32;
        v33 = v27 + 3;
      }
      a5[1] = (unint64_t)v33;
      ++v28;
      v27 = v33;
    }
    while (v28 != v29);
  }
  if (v8)
    operator delete(v8);
}

void sub_191755E78(_Unwind_Exception *exception_object)
{
  void *v1;
  uint64_t v2;
  void *v3;

  if (v3)
  {
    *(_QWORD *)(v2 + 8) = v3;
    operator delete(v3);
  }
  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,float>>>(unint64_t a1)
{
  if (a1 >= 0x1555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(12 * a1);
}

void std::__introsort<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  float *v14;
  float *v15;
  float v16;
  uint64_t v17;
  float v18;
  float v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  float *v24;
  float v25;
  unint64_t v26;
  float v27;
  float *v28;
  float v29;
  int v30;
  int v31;
  float v32;
  float v33;
  BOOL v34;
  uint64_t v35;
  float v36;
  unint64_t v37;
  float v38;
  float *v39;
  unint64_t v40;
  float v41;
  float v42;
  int v43;
  float v44;
  int v45;
  int v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  int v52;
  float v53;
  float v54;
  int v55;
  int v56;
  float v57;
  float v58;
  int v59;
  int v60;
  int v61;
  int v62;
  float v63;
  int v64;
  int v65;
  float v66;
  float v67;
  int v68;
  _DWORD *v69;
  BOOL v71;
  uint64_t v72;
  unint64_t v73;
  _DWORD *v74;
  float v75;
  int v76;
  int v77;
  uint64_t v78;
  float *v79;
  int v80;
  uint64_t v81;
  int64_t v82;
  int64_t v83;
  int64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  float v88;
  float v89;
  int v90;
  int v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int64_t v95;
  uint64_t v96;
  float v97;
  int v98;
  int v99;
  unint64_t v100;
  _DWORD *v101;
  uint64_t v102;
  int64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  float v107;
  float v108;
  int v109;
  int v110;
  unint64_t v111;
  float *v113;
  _DWORD *v114;
  float v115;
  int v116;
  int v117;
  float *v118;
  float v119;
  float v120;

float std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *>(float *a1, float *a2, float *a3)
{
  float result;
  float v4;
  float v5;
  float *v6;
  float v7;
  float v8;
  float *v9;
  int v10;
  float v11;
  float v12;
  int v13;
  float v14;

  result = a2[1];
  v4 = a1[1];
  v5 = a3[1];
  if (result > v4)
  {
    v6 = a1 + 2;
    v7 = *a1;
    if (v5 <= result)
    {
      *a1 = *a2;
      *a2 = v7;
      a1[1] = result;
      a2[1] = v4;
      v6 = a2 + 2;
      v13 = *((_DWORD *)a1 + 2);
      a1[2] = a2[2];
      *((_DWORD *)a2 + 2) = v13;
      result = a3[1];
      v14 = a2[1];
      if (result <= v14)
        return result;
      *a2 = *a3;
      *a3 = v7;
      a2[1] = result;
      a3[1] = v14;
    }
    else
    {
      *a1 = *a3;
      *a3 = v7;
      a1[1] = v5;
      a3[1] = v4;
    }
    v9 = a3 + 2;
    goto LABEL_10;
  }
  if (v5 > result)
  {
    v8 = *a2;
    *a2 = *a3;
    *a3 = v8;
    a2[1] = v5;
    a3[1] = result;
    v9 = a2 + 2;
    v10 = *((_DWORD *)a2 + 2);
    a2[2] = a3[2];
    *((_DWORD *)a3 + 2) = v10;
    result = a2[1];
    v11 = a1[1];
    if (result > v11)
    {
      v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
      a1[1] = result;
      a2[1] = v11;
      v6 = a1 + 2;
LABEL_10:
      result = *v6;
      *v6 = *v9;
      *v9 = result;
    }
  }
  return result;
}

float std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *>(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float result;
  float v9;
  float v10;
  int v11;
  float v12;
  float v13;
  int v14;
  float v15;
  float v16;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *>(a1, (float *)a2, (float *)a3);
  result = *(float *)(a4 + 4);
  v9 = *(float *)(a3 + 4);
  if (result > v9)
  {
    v10 = *(float *)a3;
    *(_DWORD *)a3 = *(_DWORD *)a4;
    *(float *)a4 = v10;
    *(float *)(a3 + 4) = result;
    *(float *)(a4 + 4) = v9;
    v11 = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = v11;
    result = *(float *)(a3 + 4);
    v12 = *(float *)(a2 + 4);
    if (result > v12)
    {
      v13 = *(float *)a2;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(float *)a3 = v13;
      *(float *)(a2 + 4) = result;
      *(float *)(a3 + 4) = v12;
      v14 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = v14;
      result = *(float *)(a2 + 4);
      v15 = a1[1];
      if (result > v15)
      {
        v16 = *a1;
        *a1 = *(float *)a2;
        *(float *)a2 = v16;
        a1[1] = result;
        *(float *)(a2 + 4) = v15;
        result = a1[2];
        a1[2] = *(float *)(a2 + 8);
        *(float *)(a2 + 8) = result;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  float v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  float v21;
  float v22;
  int v23;
  int v24;
  float v25;
  float v26;
  int v27;
  int v28;
  int v29;
  int v30;
  float v31;
  int v32;
  int v33;
  float v34;
  float v35;
  int v36;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(float *)(a2 - 8);
      v7 = *(float *)(a1 + 4);
      if (v6 > v7)
      {
        v8 = *(float *)a1;
        *(_DWORD *)a1 = *(_DWORD *)(a2 - 12);
        *(float *)(a2 - 12) = v8;
        *(float *)(a1 + 4) = v6;
        *(float *)(a2 - 8) = v7;
        v9 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v9;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *>((float *)a1, (float *)(a1 + 12), (float *)(a2 - 12));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *>((float *)a1, a1 + 12, a1 + 24, a2 - 12);
      return 1;
    case 5uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *>((float *)a1, a1 + 12, a1 + 24, a1 + 36);
      v21 = *(float *)(a2 - 8);
      v22 = *(float *)(a1 + 40);
      if (v21 > v22)
      {
        v23 = *(_DWORD *)(a1 + 36);
        *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 - 12);
        *(_DWORD *)(a2 - 12) = v23;
        *(float *)(a1 + 40) = v21;
        *(float *)(a2 - 8) = v22;
        v24 = *(_DWORD *)(a1 + 44);
        *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v24;
        v25 = *(float *)(a1 + 40);
        v26 = *(float *)(a1 + 28);
        if (v25 > v26)
        {
          v27 = *(_DWORD *)(a1 + 24);
          v28 = *(_DWORD *)(a1 + 36);
          *(_DWORD *)(a1 + 24) = v28;
          *(_DWORD *)(a1 + 36) = v27;
          v29 = *(_DWORD *)(a1 + 32);
          v30 = *(_DWORD *)(a1 + 44);
          *(float *)(a1 + 28) = v25;
          *(_DWORD *)(a1 + 32) = v30;
          v31 = *(float *)(a1 + 16);
          *(float *)(a1 + 40) = v26;
          *(_DWORD *)(a1 + 44) = v29;
          if (v25 > v31)
          {
            v32 = *(_DWORD *)(a1 + 12);
            *(_DWORD *)(a1 + 12) = v28;
            *(_DWORD *)(a1 + 24) = v32;
            v33 = *(_DWORD *)(a1 + 20);
            *(float *)(a1 + 16) = v25;
            *(_DWORD *)(a1 + 20) = v30;
            *(float *)(a1 + 28) = v31;
            *(_DWORD *)(a1 + 32) = v33;
            v34 = *(float *)(a1 + 4);
            if (v25 > v34)
            {
              v35 = *(float *)a1;
              *(_DWORD *)a1 = v28;
              *(float *)(a1 + 12) = v35;
              v36 = *(_DWORD *)(a1 + 8);
              *(float *)(a1 + 4) = v25;
              *(_DWORD *)(a1 + 8) = v30;
              *(float *)(a1 + 16) = v34;
              *(_DWORD *)(a1 + 20) = v36;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 24;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *>((float *)a1, (float *)(a1 + 12), (float *)(a1 + 24));
      v11 = a1 + 36;
      if (a1 + 36 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(float *)(v11 + 4);
    if (v14 > *(float *)(v10 + 4))
    {
      v15 = *(_DWORD *)v11;
      v16 = *(_DWORD *)(v11 + 8);
      v17 = v12;
      while (1)
      {
        v18 = a1 + v17;
        *(_DWORD *)(v18 + 36) = *(_DWORD *)(a1 + v17 + 24);
        v19 = *(_DWORD *)(a1 + v17 + 32);
        *(_DWORD *)(v18 + 40) = *(_DWORD *)(a1 + v17 + 28);
        *(_DWORD *)(v18 + 44) = v19;
        if (v17 == -24)
          break;
        v17 -= 12;
        if (v14 <= *(float *)(v18 + 16))
        {
          v20 = a1 + v17 + 36;
          goto LABEL_13;
        }
      }
      v20 = a1;
LABEL_13:
      *(_DWORD *)v20 = v15;
      *(float *)(v20 + 4) = v14;
      *(_DWORD *)(v20 + 8) = v16;
      if (++v13 == 8)
        return v11 + 12 == a2;
    }
    v10 = v11;
    v12 += 12;
    v11 += 12;
    if (v11 == a2)
      return 1;
  }
}

void Espresso::run_validation(_QWORD *a1@<X0>, _QWORD *a2@<X1>, unsigned int *a3@<X2>, uint64_t **a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  FILE *v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  int v40;
  int v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  const void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  std::__shared_weak_count *size;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  void (***v67)(uint64_t *__return_ptr, _QWORD);
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  void (***v71)(uint64_t *__return_ptr, _QWORD);
  uint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  int v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  _DWORD *v98;
  void (***v99)(uint64_t *__return_ptr, _QWORD);
  unint64_t *v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  int v140;
  uint64_t v141;
  float *v142;
  uint64_t v143;
  float *v144;
  float v145;
  int v146;
  uint64_t *i;
  int v148;
  int v149;
  int v150;
  unsigned int v151;
  float *v152;
  float v153;
  _BOOL4 v154;
  _BOOL4 v155;
  _BOOL4 v156;
  int v157;
  _BOOL4 v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  unint64_t v167;
  float *v168;
  float v169;
  float v170;
  int v171;
  unint64_t v173;
  uint64_t v174;
  char *v175;
  int v176;
  unint64_t v177;
  uint64_t v178;
  __int128 v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  float v183;
  uint64_t v184;
  int v185;
  int v186;
  uint64_t v187;
  float *v188;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  uint64_t *v215;
  unint64_t v216;
  void *v217;
  float v218;
  double v219;
  uint64_t **v220;
  float v221;
  void *v222;
  void *v223;
  double v224;
  int v225;
  void *v226;
  void *v227;
  double v228;
  void *v229;
  void *v230;
  double v231;
  void *v232;
  void *v233;
  double v234;
  void *v235;
  uint64_t **v236;
  float v237;
  uint64_t **v238;
  uint64_t v244;
  void *v245;
  void *v246;
  void *v247;
  void *v248;
  _QWORD *v249;
  id v250;
  void *v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  std::runtime_error *exception;
  std::string *v256;
  __int128 v257;
  uint64_t v258;
  int v259;
  _QWORD *v260;
  std::string *v262;
  unint64_t v263;
  _QWORD *v264;
  uint64_t v265;
  FILE *v266;
  unsigned int *v267;
  int v268;
  int v269;
  int v270;
  int v271;
  id v272;
  void *v273;
  std::__shared_weak_count *v274;
  char v275;
  int v276;
  __int128 v277;
  uint64_t v278;
  int v279;
  float v280;
  __int128 v281;
  int v282;
  std::string __p;
  void *v284;
  void *v285;
  const char *v286;
  void *v287;
  std::__shared_weak_count *v288;
  void *v289;
  _BYTE *v290;
  void *v291;
  void *v292;
  void *v293;
  void *v294;
  _QWORD v295[7];
  std::__shared_weak_count *v296;
  _DWORD *v297;
  std::__shared_weak_count *v298;
  uint64_t v299;
  std::__shared_weak_count *v300;
  uint64_t v301;
  std::__shared_weak_count *v302;
  __int128 v303;
  std::string v304;
  __n128 (*v305)(__n128 *, __n128 *);
  uint64_t (*v306)(uint64_t);
  const char *v307;
  uint64_t v308;
  std::__shared_weak_count *v309;
  uint64_t v310;
  std::__shared_weak_count *v311;
  uint64_t v312;
  std::__shared_weak_count *v313;
  uint64_t v314;
  std::__shared_weak_count *v315;
  _DWORD *v316;
  std::__shared_weak_count *v317;
  _QWORD v318[6];
  std::__shared_weak_count *v319;
  uint64_t v320;
  std::__shared_weak_count *v321;
  uint64_t v322;
  void *v323;
  char v324;
  void *v325;
  char v326;
  void *v327;
  char v328;
  void *v329;
  char v330;
  uint64_t v331;
  std::__shared_weak_count *v332;
  int v333;
  _QWORD v334[5];
  std::__shared_weak_count *v335;
  uint64_t v336;
  std::__shared_weak_count *v337;
  uint64_t v338;
  std::__shared_weak_count *v339;
  std::string v340;
  __n128 (*v341)(__n128 *, __n128 *);
  uint64_t (*v342)(uint64_t);
  const char *v343;
  uint64_t v344;
  std::__shared_weak_count *v345;
  uint64_t v346;
  std::__shared_weak_count *v347;
  void *v348[2];
  _QWORD *v349;
  __int128 v350;
  uint64_t v351;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  double v353;
  char v354;

  Espresso::scoped_timer::scoped_timer((Espresso::scoped_timer *)&v351, "validation", a6);
  v260 = a2;
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 32))(*a2);
  v11 = *a3;
  if (v10 >= v11)
    v12 = *a3;
  else
    v12 = v10;
  if ((int)v11 <= 0)
    v13 = v10;
  else
    v13 = v12;
  v14 = (v13 - 1) / (int)a3[2];
  v263 = v14;
  v15 = v14 + 1;
  if (a3[3])
    printf("Testing over %zu samples (%zu batches)\n", v13, v14 + 1);
  v16 = (const char *)(a3 + 4);
  if ((*((char *)a3 + 39) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)a3 + 39))
      goto LABEL_15;
LABEL_14:
    v17 = fopen(v16, "w");
    goto LABEL_16;
  }
  if (*((_QWORD *)a3 + 3))
  {
    v16 = *(const char **)v16;
    goto LABEL_14;
  }
LABEL_15:
  v17 = 0;
LABEL_16:
  v258 = a5;
  v350 = 0uLL;
  v267 = a3;
  if (v15)
  {
    v266 = v17;
    v271 = 0;
    v18 = 0;
    v19 = 0;
    v269 = 0;
    v270 = 0;
    v268 = 0;
    v20 = 0;
    v262 = (std::string *)(a3 + 10);
    v259 = v15;
    v21 = 0;
    v264 = a1;
    while (1)
    {
      if (a3[1] && a3[3])
        printf("ValBatch %d/%d (%d)\n", v21, v259, a3[2]);
      (*(void (**)(void **__return_ptr, _QWORD, uint64_t, _QWORD))(*(_QWORD *)*v260 + 8))(v348, *v260, v21, (int)a3[2]);
      if (*((char *)a3 + 63) < 0)
      {
        if (*((_QWORD *)a3 + 6))
          goto LABEL_30;
      }
      else if (*((_BYTE *)a3 + 63))
      {
        goto LABEL_30;
      }
      v340.__r_.__value_.__r.__words[0] = 0;
      v22 = *a1;
      if (*(_QWORD *)(*a1 + 80))
      {
        while (1)
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v340;
          v23 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v22 + 56, (unint64_t *)&v340, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
          if (v23[4] != v23[3])
            break;
          ++v340.__r_.__value_.__r.__words[0];
          v22 = *a1;
          if (v340.__r_.__value_.__r.__words[0] >= *(_QWORD *)(*a1 + 80))
            goto LABEL_30;
        }
        v24 = *a1 + 56;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v340;
        v25 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v24, (unint64_t *)&v340, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
        std::string::operator=(v262, (const std::string *)v25[3]);
      }
LABEL_30:
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v262;
      v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v348, (unsigned __int8 *)v262, (__int128 **)&__p);
      v27 = (void *)*((_QWORD *)v26 + 5);
      v28 = (std::__shared_weak_count *)*((_QWORD *)v26 + 6);
      v273 = v27;
      v274 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldxr(p_shared_owners);
        while (__stxr(v30 + 1, p_shared_owners));
      }
      if (!v27)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v256 = std::string::append(&v340, " not found in dset");
        v257 = *(_OWORD *)&v256->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v256->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v257;
        v256->__r_.__value_.__l.__size_ = 0;
        v256->__r_.__value_.__r.__words[2] = 0;
        v256->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &__p);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "labels");
      v340.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v31 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v348, (unsigned __int8 *)&__p, (__int128 **)&v340);
      v32 = v31[5];
      v33 = (std::__shared_weak_count *)v31[6];
      v346 = v32;
      v347 = v33;
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v346)
          goto LABEL_43;
      }
      else if (v32)
      {
        goto LABEL_43;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "label");
      v340.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v36 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v348, (unsigned __int8 *)&__p, (__int128 **)&v340);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v346, v36[5], v36[6]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_43:
      v340.__r_.__value_.__r.__words[0] = 0;
      v340.__r_.__value_.__l.__size_ = (std::string::size_type)&v340;
      v340.__r_.__value_.__r.__words[2] = 0x4012000000;
      v341 = __Block_byref_object_copy__12372;
      v342 = __Block_byref_object_dispose__12373;
      v343 = "";
      v344 = 0;
      v345 = 0;
      v339 = 0;
      v338 = 0;
      v337 = 0;
      v336 = 0;
      v37 = *a1;
      v38 = *(uint64_t **)(*a1 + 32);
      v39 = *(uint64_t **)(v37 + 40);
      v265 = v21;
      if (v38 != v39)
      {
        v40 = 0;
        v41 = 0;
        while (1)
        {
          v42 = *v38;
          v43 = (std::__shared_weak_count *)v38[1];
          if (v43)
          {
            v44 = (unint64_t *)&v43->__shared_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
          }
          v46 = *(const void **)(v42 + 64);
          if (!v46
          {
            goto LABEL_59;
          }
          v47 = *(std::__shared_weak_count **)(v42 + 72);
          if (v47)
          {
            v48 = (unint64_t *)&v47->__shared_owners_;
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
            std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v336, **(_QWORD **)(v42 + 104), *(_QWORD *)(*(_QWORD *)(v42 + 104) + 8));
            do
              v50 = __ldaxr(v48);
            while (__stlxr(v50 - 1, v48));
            v41 = v40;
            if (v50)
              goto LABEL_59;
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
          else
          {
            std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v336, **(_QWORD **)(v42 + 104), *(_QWORD *)(*(_QWORD *)(v42 + 104) + 8));
          }
          v41 = v40;
LABEL_59:
          a3 = v267;
          if (v43)
          {
            v51 = (unint64_t *)&v43->__shared_owners_;
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
          ++v40;
          v38 += 2;
          if (v38 == v39)
          {
            v53 = v336;
            v54 = v264;
            if (!v336)
            {
              v37 = *v264;
              goto LABEL_68;
            }
            goto LABEL_72;
          }
        }
      }
      v54 = v264;
LABEL_68:
      __p.__r_.__value_.__r.__words[0] = *(_DWORD *)(v37 + 120) - 1;
      v55 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v37 + 96, __p.__r_.__value_.__r.__words[0], &__p);
      v56 = *v54;
      if (-1431655765 * ((v55[4] - v55[3]) >> 3))
      {
        v57 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v56 + 40) - 16) + 104);
        v58 = &v336;
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v336, *v57, v57[1]);
      }
      else
      {
        v58 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v56 + 40) - 32) + 104);
      }
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v336, *v58, v58[1]);
      v41 = ((*(_QWORD *)(*v54 + 40) - *(_QWORD *)(*v54 + 32)) >> 4) - 1;
      v53 = v336;
LABEL_72:
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v53 + 56))(&__p);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v340.__r_.__value_.__l.__size_ + 48, (__int128 *)&__p);
      size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v60 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v62 = v339;
      v339 = 0;
      v338 = 0;
      if (v62)
      {
        v63 = (unint64_t *)&v62->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      v66 = *v54;
      v65 = (std::__shared_weak_count *)v54[1];
      v67 = *(void (****)(uint64_t *__return_ptr, _QWORD))(*v54 + 16);
      v334[0] = MEMORY[0x1E0C809B0];
      v334[1] = 3321888768;
      v334[2] = ___ZN8Espresso14run_validationENSt3__110shared_ptrINS_3netEEENS1_INS_20abstract_data_sourceEEENS_18validation_optionsENS0_6vectorIS3_NS0_9allocatorIS3_EEEE_block_invoke;
      v334[3] = &__block_descriptor_48_ea8_32c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE_e10_v16__0r_v8l;
      v334[4] = v66;
      v335 = v65;
      if (v65)
      {
        v68 = (unint64_t *)&v65->__shared_owners_;
        do
          v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
      }
      Espresso::abstract_context::compute_batch_sync(v67, v334);
      if (*((char *)a3 + 63) < 0)
      {
        if (*((_QWORD *)a3 + 6))
          goto LABEL_90;
      }
      else if (*((_BYTE *)a3 + 63))
      {
        goto LABEL_90;
      }
      std::string::operator=(v262, (const std::string *)(*(_QWORD *)(*v54 + 232) + 32));
LABEL_90:
      v70 = *v54;
      v71 = *(void (****)(uint64_t *__return_ptr, _QWORD))(*v54 + 16);
      v318[0] = MEMORY[0x1E0C809B0];
      v318[1] = 3321888768;
      v318[2] = ___ZN8Espresso14run_validationENSt3__110shared_ptrINS_3netEEENS1_INS_20abstract_data_sourceEEENS_18validation_optionsENS0_6vectorIS3_NS0_9allocatorIS3_EEEE_block_invoke_28;
      v318[3] = &unk_1E2DC3E28;
      v318[5] = v273;
      v319 = v274;
      if (v274)
      {
        v72 = &v274->__shared_owners_;
        do
          v73 = __ldxr((unint64_t *)v72);
        while (__stxr(v73 + 1, (unint64_t *)v72));
        v70 = *v54;
      }
      v74 = (std::__shared_weak_count *)v54[1];
      v320 = v70;
      v321 = v74;
      if (v74)
      {
        v75 = (unint64_t *)&v74->__shared_owners_;
        do
          v76 = __ldxr(v75);
        while (__stxr(v76 + 1, v75));
      }
      Espresso::validation_options::validation_options((uint64_t)&v322, (uint64_t)a3);
      v333 = v41;
      v331 = v336;
      v332 = v337;
      if (v337)
      {
        v77 = (unint64_t *)&v337->__shared_owners_;
        do
          v78 = __ldxr(v77);
        while (__stxr(v78 + 1, v77));
      }
      v318[4] = &v340;
      Espresso::abstract_context::compute_batch_sync(v71, v318);
      if (!(_QWORD)v350)
      {
        v174 = v336;
        v175 = (char *)operator new(0x38uLL);
        *(_OWORD *)(v175 + 8) = 0u;
        *(_QWORD *)v175 = &off_1E2DB9AD8;
        v176 = *(_DWORD *)(v174 + 16);
        *((_DWORD *)v175 + 6) = v176;
        *((_QWORD *)v175 + 4) = 0;
        *(_OWORD *)(v175 + 40) = 0u;
        std::vector<int>::resize((std::vector<int> *)(v175 + 32), (v176 * v176));
        if (*((_DWORD *)v175 + 6))
        {
          v177 = 0;
          v178 = *((_QWORD *)v175 + 4);
          do
            *(_DWORD *)(v178 + 4 * v177++) = 0;
          while (v177 < (*((_DWORD *)v175 + 6) * *((_DWORD *)v175 + 6)));
        }
        *(_QWORD *)&v179 = v175 + 24;
        *((_QWORD *)&v179 + 1) = v175;
        v180 = (std::__shared_weak_count *)*((_QWORD *)&v350 + 1);
        v350 = v179;
        if (v180)
        {
          v181 = (unint64_t *)&v180->__shared_owners_;
          do
            v182 = __ldaxr(v181);
          while (__stlxr(v182 - 1, v181));
          if (!v182)
          {
            ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
            std::__shared_weak_count::__release_weak(v180);
          }
        }
      }
      v80 = *a4;
      v79 = a4[1];
      if (v79 != *a4)
      {
        v81 = *(std::__shared_weak_count **)(v340.__r_.__value_.__l.__size_ + 56);
        v316 = *(_DWORD **)(v340.__r_.__value_.__l.__size_ + 48);
        v317 = v81;
        if (v81)
        {
          v82 = (unint64_t *)&v81->__shared_owners_;
          do
            v83 = __ldxr(v82);
          while (__stxr(v83 + 1, v82));
          v80 = *a4;
          v79 = a4[1];
        }
        if (v80 != v79)
        {
          v84 = 0;
          do
          {
            v86 = *v80;
            v85 = (std::__shared_weak_count *)v80[1];
            v314 = *v80;
            v315 = v85;
            if (v85)
            {
              v87 = (unint64_t *)&v85->__shared_owners_;
              do
                v88 = __ldxr(v87);
              while (__stxr(v88 + 1, v87));
            }
            v89 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v86 + 40) - 16) + 104);
            v90 = *v89;
            v91 = (std::__shared_weak_count *)v89[1];
            v312 = v90;
            v313 = v91;
            if (v91)
            {
              v92 = (unint64_t *)&v91->__shared_owners_;
              do
                v93 = __ldxr(v92);
              while (__stxr(v93 + 1, v92));
            }
            __p.__r_.__value_.__r.__words[0] = 0;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)&__p;
            __p.__r_.__value_.__r.__words[2] = 0x4012000000;
            v284 = __Block_byref_object_copy__12372;
            v285 = __Block_byref_object_dispose__12373;
            v286 = "";
            (*(void (**)(uint64_t))(*(_QWORD *)v90 + 56))(v90);
            v311 = 0;
            v310 = 0;
            v304.__r_.__value_.__r.__words[0] = 0;
            v304.__r_.__value_.__l.__size_ = (std::string::size_type)&v304;
            v304.__r_.__value_.__r.__words[2] = 0x4012000000;
            v305 = __Block_byref_object_copy__12372;
            v306 = __Block_byref_object_dispose__12373;
            v307 = "";
            v308 = 0;
            v309 = 0;
            v94 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v86 + 40) - 16) + 104);
            if ((unint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v86 + 40) - 16) + 112) - v94) >= 0x11)
            {
              std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v310, *(_QWORD *)(v94 + 16), *(_QWORD *)(v94 + 24));
              (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v310 + 56))(&v303);
              std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v304.__r_.__value_.__l.__size_ + 48, &v303);
              v95 = (std::__shared_weak_count *)*((_QWORD *)&v303 + 1);
              if (*((_QWORD *)&v303 + 1))
              {
                v96 = (unint64_t *)(*((_QWORD *)&v303 + 1) + 8);
                do
                  v97 = __ldaxr(v96);
                while (__stlxr(v97 - 1, v96));
                if (!v97)
                {
                  ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                  std::__shared_weak_count::__release_weak(v95);
                }
              }
              v86 = v314;
            }
            if ((int)a3[3] >= 2)
            {
              v98 = **(_DWORD ***)(**(_QWORD **)(v86 + 32) + 80);
              printf("%d: %d %d %d %d - %d %d %d %d\n", v84, v98[2], v98[3], v98[4], v98[5], v316[2], v316[3], v316[4], v316[5]);
            }
            v99 = *(void (****)(uint64_t *__return_ptr, _QWORD))(v86 + 16);
            v295[0] = MEMORY[0x1E0C809B0];
            v295[1] = 3321888768;
            v295[2] = ___ZN8Espresso14run_validationENSt3__110shared_ptrINS_3netEEENS1_INS_20abstract_data_sourceEEENS_18validation_optionsENS0_6vectorIS3_NS0_9allocatorIS3_EEEE_block_invoke_32;
            v295[3] = &unk_1E2DC3C48;
            v295[6] = v86;
            v296 = v315;
            if (v315)
            {
              v100 = (unint64_t *)&v315->__shared_owners_;
              do
                v101 = __ldxr(v100);
              while (__stxr(v101 + 1, v100));
            }
            v297 = v316;
            v298 = v317;
            if (v317)
            {
              v102 = (unint64_t *)&v317->__shared_owners_;
              do
                v103 = __ldxr(v102);
              while (__stxr(v103 + 1, v102));
            }
            v104 = v312;
            v105 = (uint64_t)v313;
            v299 = v312;
            v300 = v313;
            if (v313)
            {
              v106 = (unint64_t *)&v313->__shared_owners_;
              do
                v107 = __ldxr(v106);
              while (__stxr(v107 + 1, v106));
            }
            v295[4] = &__p;
            v301 = v310;
            v302 = v311;
            if (v311)
            {
              v108 = (unint64_t *)&v311->__shared_owners_;
              do
                v109 = __ldxr(v108);
              while (__stxr(v109 + 1, v108));
            }
            v295[5] = &v304;
            Espresso::abstract_context::compute_batch_sync(v99, v295);
            std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v336, v104, v105);
            std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v340.__r_.__value_.__l.__size_ + 48), *(_QWORD *)(__p.__r_.__value_.__l.__size_ + 48), *(_QWORD *)(__p.__r_.__value_.__l.__size_ + 56));
            std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v338, *(_QWORD *)(v304.__r_.__value_.__l.__size_ + 48), *(_QWORD *)(v304.__r_.__value_.__l.__size_ + 56));
            std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v316, *(_QWORD *)(__p.__r_.__value_.__l.__size_ + 48), *(_QWORD *)(__p.__r_.__value_.__l.__size_ + 56));
            v110 = v302;
            if (v302)
            {
              v111 = (unint64_t *)&v302->__shared_owners_;
              do
                v112 = __ldaxr(v111);
              while (__stlxr(v112 - 1, v111));
              if (!v112)
              {
                ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                std::__shared_weak_count::__release_weak(v110);
              }
            }
            v113 = v300;
            if (v300)
            {
              v114 = (unint64_t *)&v300->__shared_owners_;
              do
                v115 = __ldaxr(v114);
              while (__stlxr(v115 - 1, v114));
              if (!v115)
              {
                ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                std::__shared_weak_count::__release_weak(v113);
              }
            }
            v116 = v298;
            if (v298)
            {
              v117 = (unint64_t *)&v298->__shared_owners_;
              do
                v118 = __ldaxr(v117);
              while (__stlxr(v118 - 1, v117));
              if (!v118)
              {
                ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                std::__shared_weak_count::__release_weak(v116);
              }
            }
            v119 = v296;
            if (v296)
            {
              v120 = (unint64_t *)&v296->__shared_owners_;
              do
                v121 = __ldaxr(v120);
              while (__stlxr(v121 - 1, v120));
              if (!v121)
              {
                ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                std::__shared_weak_count::__release_weak(v119);
              }
            }
            _Block_object_dispose(&v304, 8);
            v122 = v309;
            if (v309)
            {
              v123 = (unint64_t *)&v309->__shared_owners_;
              do
                v124 = __ldaxr(v123);
              while (__stlxr(v124 - 1, v123));
              if (!v124)
              {
                ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                std::__shared_weak_count::__release_weak(v122);
              }
            }
            v125 = v311;
            if (v311)
            {
              v126 = (unint64_t *)&v311->__shared_owners_;
              do
                v127 = __ldaxr(v126);
              while (__stlxr(v127 - 1, v126));
              if (!v127)
              {
                ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                std::__shared_weak_count::__release_weak(v125);
              }
            }
            _Block_object_dispose(&__p, 8);
            v128 = v288;
            if (v288)
            {
              v129 = (unint64_t *)&v288->__shared_owners_;
              do
                v130 = __ldaxr(v129);
              while (__stlxr(v130 - 1, v129));
              if (!v130)
              {
                ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                std::__shared_weak_count::__release_weak(v128);
              }
            }
            v131 = v313;
            if (v313)
            {
              v132 = (unint64_t *)&v313->__shared_owners_;
              do
                v133 = __ldaxr(v132);
              while (__stlxr(v133 - 1, v132));
              if (!v133)
              {
                ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                std::__shared_weak_count::__release_weak(v131);
              }
            }
            v134 = v315;
            if (v315)
            {
              v135 = (unint64_t *)&v315->__shared_owners_;
              do
                v136 = __ldaxr(v135);
              while (__stlxr(v136 - 1, v135));
              if (!v136)
              {
                ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                std::__shared_weak_count::__release_weak(v134);
              }
            }
            ++v84;
            v80 += 2;
          }
          while (v80 != v79);
        }
        v137 = v317;
        if (v317)
        {
          v138 = (unint64_t *)&v317->__shared_owners_;
          do
            v139 = __ldaxr(v138);
          while (__stlxr(v139 - 1, v138));
          if (!v139)
          {
            ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
            std::__shared_weak_count::__release_weak(v137);
          }
        }
      }
      v140 = *(_DWORD *)(v336 + 16);
      if (*(int *)(v336 + 20) >= 1)
      {
        v141 = 0;
        do
        {
          if (v338)
            v142 = *(float **)(v338 + 24);
          else
            v142 = 0;
          v143 = *(_QWORD *)(v340.__r_.__value_.__l.__size_ + 48);
          v144 = (float *)(*(_DWORD *)(v143 + 12) * *(_DWORD *)(v143 + 8) * *(_DWORD *)(v143 + 16));
          Espresso::get_top_pred((Espresso *)(*(_QWORD *)(v143 + 24) + 4 * (int)v144 * (int)v141), v142, v144, 5, (unint64_t *)&__p);
          v145 = *(float *)(*(_QWORD *)(v346 + 24) + 4 * v141);
          v146 = (int)v145;
          LODWORD(v304.__r_.__value_.__l.__data_) = (int)v145;
          if (Espresso::validation_label_mapper)
          {
            for (i = *(uint64_t **)(Espresso::validation_label_mapper + 8); i; i = (uint64_t *)*i)
            {
              v148 = *((_DWORD *)i + 7);
              if (v148 <= v146)
              {
                if (v148 >= v146)
                {
                  v146 = *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)Espresso::validation_label_mapper, (int)v145, (unsigned int *)&v304)+ 8);
                  break;
                }
                ++i;
              }
            }
          }
          v149 = Espresso::validation_label_offset;
          v150 = v146 - Espresso::validation_label_offset;
          v151 = a3[3];
          v152 = (float *)__p.__r_.__value_.__r.__words[0];
          if (a3[1])
          {
            if (v151)
              printf("\tgt: %d pred: [%d %.2f %.2e] [%d %d %d %d]\n");
          }
          else if (v151)
          {
            printf("\tgt: %d pred: [%d %.2f] [%d]\n");
          }
          v153 = *v152;
          v154 = *(_DWORD *)v152 == 1;
          v155 = *(_DWORD *)v152 == 0;
          v156 = v150 == 1 && *(_DWORD *)v152 == 1;
          v157 = v19 + v156;
          v158 = v150 == 1 && *(_DWORD *)v152 == 0;
          v159 = v268 + v158;
          if (v146 != v149)
            v154 = 0;
          v160 = v269 + v154;
          if (v146 != v149)
            v155 = 0;
          v161 = v270 + v155;
          if (v140 == 2)
            v162 = v159;
          else
            v162 = v268;
          if (v140 == 2)
            v163 = v160;
          else
            v163 = v269;
          v268 = v162;
          v269 = v163;
          if (v140 == 2)
            v164 = v161;
          else
            v164 = v270;
          v270 = v164;
          if (v140 == 2)
            v19 = v157;
          v165 = v271;
          if (LODWORD(v153) == v150)
            v165 = v271 + 1;
          v271 = v165;
          if ((float *)__p.__r_.__value_.__l.__size_ == v152)
          {
            v166 = 0;
            v169 = 0.0;
          }
          else
          {
            v166 = 0;
            v167 = (int64_t)(__p.__r_.__value_.__l.__size_ - (_QWORD)v152) / 12;
            if (v167 <= 1)
              v167 = 1;
            v168 = v152 + 2;
            v169 = 0.0;
            do
            {
              if (*((_DWORD *)v168 - 2) == v150)
              {
                v166 = 1;
                ++v18;
              }
              v170 = *v168;
              v168 += 3;
              v169 = v169 + v170;
              --v167;
            }
            while (v167);
          }
          if (v266)
          {
            fprintf(v266, "%d;%d;%f;%f;%f\n", LODWORD(v153) == v150, v166, v152[2], v169, v152[1]);
            fflush(v266);
            v153 = *v152;
          }
          v171 = *(_DWORD *)v350;
          if (*(_DWORD *)v350 > v150 && v171 > SLODWORD(v153))
            ++*(_DWORD *)(*(_QWORD *)(v350 + 8) + 4 * (LODWORD(v153) + v171 * v150));
          ++v20;
          operator delete(v152);
          ++v141;
        }
        while (v141 < *(int *)(v336 + 20));
      }
      if (a3[1])
      {
        a1 = v264;
        if (a3[3])
          goto LABEL_256;
        v173 = v263;
      }
      else
      {
        v173 = v263;
        a1 = v264;
      }
      if (v173 == v265)
      {
LABEL_256:
        if (v140 == 2)
        {
          v183 = (float)v19 / (float)(v19 + v269);
          printf("\tTop 1: %.4f; Top 5: %.4f Count: %d\n",
            (float)((float)v271 / (float)v20),
            (float)((float)v18 / (float)v20),
            v20);
          printf("PR P=%.4f R=%.4f F1=%.4f Count: %d (tp=%d fp=%d fn=%d tn=%d)\n", v183, (float)((float)v19 / (float)(v19 + v268)), (float)((float)((float)(v183 * (float)((float)v19 / (float)(v19 + v268)))+ (float)(v183 * (float)((float)v19 / (float)(v19 + v268))))/ (float)(v183 + (float)((float)v19 / (float)(v19 + v268)))), v20, v19, v269, v268, v270);
        }
        else
        {
          printf("\tTop 1: %.4f; Top 5: %.4f Count: %d\n",
            (float)((float)v271 / (float)v20),
            (float)((float)v18 / (float)v20),
            v20);
          v184 = v350;
          Espresso::confusion_matrix::generate_summary((Espresso::confusion_matrix *)v350, (uint64_t)&__p);
          if ((*(_DWORD *)v184 - 1) <= 0x17)
          {
            v185 = 0;
            do
            {
              printf("%4d | ", v185);
              v186 = *(_DWORD *)v184;
              if (*(int *)v184 >= 1)
              {
                v187 = 0;
                do
                {
                  printf("%4d ", *(_DWORD *)(*(_QWORD *)(v184 + 8) + 4 * (v187 + v185 * v186)));
                  v186 = *(_DWORD *)v184;
                  ++v187;
                }
                while ((int)v187 < *(_DWORD *)v184);
              }
              putchar(10);
              ++v185;
            }
            while (v185 < *(_DWORD *)v184);
          }
          v188 = (float *)v289;
          if ((unint64_t)(v290 - (_BYTE *)v289) <= 0x18F && v290 != v289)
          {
            v190 = 0;
            do
            {
              printf("\tc:\t%d\ttp:\t%4d\tfp:\t%4d\tfn:%4d\tprec:\t%.3f\trecall:\t%.3f\tf1:\t%.3f\n", v190, *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 4 * v190), *((_DWORD *)v284 + v190), *((_DWORD *)v287 + v190), v188[v190], *((float *)v291 + v190), *((float *)v293 + v190));
              ++v190;
              v188 = (float *)v289;
            }
            while (v190 < (v290 - (_BYTE *)v289) >> 2);
          }
          if (v293)
          {
            v294 = v293;
            operator delete(v293);
          }
          if (v291)
          {
            v292 = v291;
            operator delete(v291);
          }
          if (v289)
          {
            v290 = v289;
            operator delete(v289);
          }
          if (v287)
          {
            v288 = (std::__shared_weak_count *)v287;
            operator delete(v287);
          }
          if (v284)
          {
            v285 = v284;
            operator delete(v284);
          }
          if (__p.__r_.__value_.__r.__words[0])
          {
            __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
      v191 = v332;
      if (v332)
      {
        v192 = (unint64_t *)&v332->__shared_owners_;
        do
          v193 = __ldaxr(v192);
        while (__stlxr(v193 - 1, v192));
        if (!v193)
        {
          ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
          std::__shared_weak_count::__release_weak(v191);
        }
      }
      if (v330 < 0)
        operator delete(v329);
      if (v328 < 0)
        operator delete(v327);
      if (v326 < 0)
        operator delete(v325);
      if (v324 < 0)
        operator delete(v323);
      v194 = v321;
      if (v321)
      {
        v195 = (unint64_t *)&v321->__shared_owners_;
        do
          v196 = __ldaxr(v195);
        while (__stlxr(v196 - 1, v195));
        if (!v196)
        {
          ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
          std::__shared_weak_count::__release_weak(v194);
        }
      }
      v197 = v319;
      if (v319)
      {
        v198 = (unint64_t *)&v319->__shared_owners_;
        do
          v199 = __ldaxr(v198);
        while (__stlxr(v199 - 1, v198));
        if (!v199)
        {
          ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
          std::__shared_weak_count::__release_weak(v197);
        }
      }
      v200 = v335;
      if (v335)
      {
        v201 = (unint64_t *)&v335->__shared_owners_;
        do
          v202 = __ldaxr(v201);
        while (__stlxr(v202 - 1, v201));
        if (!v202)
        {
          ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
          std::__shared_weak_count::__release_weak(v200);
        }
      }
      v203 = v337;
      if (v337)
      {
        v204 = (unint64_t *)&v337->__shared_owners_;
        do
          v205 = __ldaxr(v204);
        while (__stlxr(v205 - 1, v204));
        if (!v205)
        {
          ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
          std::__shared_weak_count::__release_weak(v203);
        }
      }
      v206 = v339;
      if (v339)
      {
        v207 = (unint64_t *)&v339->__shared_owners_;
        do
          v208 = __ldaxr(v207);
        while (__stlxr(v208 - 1, v207));
        if (!v208)
        {
          ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
          std::__shared_weak_count::__release_weak(v206);
        }
      }
      _Block_object_dispose(&v340, 8);
      v209 = v345;
      if (v345)
      {
        v210 = (unint64_t *)&v345->__shared_owners_;
        do
          v211 = __ldaxr(v210);
        while (__stlxr(v211 - 1, v210));
        if (!v211)
        {
          ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
          std::__shared_weak_count::__release_weak(v209);
        }
      }
      v212 = v347;
      if (v347)
      {
        v213 = (unint64_t *)&v347->__shared_owners_;
        do
          v214 = __ldaxr(v213);
        while (__stlxr(v214 - 1, v213));
        if (!v214)
        {
          ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
          std::__shared_weak_count::__release_weak(v212);
        }
      }
      if (v274)
      {
        v215 = &v274->__shared_owners_;
        do
          v216 = __ldaxr((unint64_t *)v215);
        while (__stlxr(v216 - 1, (unint64_t *)v215));
        if (!v216)
        {
          ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
          std::__shared_weak_count::__release_weak(v274);
        }
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(v349);
      v217 = v348[0];
      v348[0] = 0;
      if (v217)
        operator delete(v217);
      v21 = v265 + 1;
      if (v265 == v263)
        goto LABEL_340;
    }
  }
  v20 = 0;
  v18 = 0;
  v271 = 0;
LABEL_340:
  *(_QWORD *)(v258 + 8) = 0;
  *(_QWORD *)(v258 + 16) = 0;
  *(_QWORD *)v258 = v258 + 8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "top1");
  v218 = (float)v20;
  *((float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v258, &__p, (uint64_t)&__p)+ 14) = (float)v271 / (float)v20;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "top5");
  *((float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v258, &__p, (uint64_t)&__p)+ 14) = (float)v18 / v218;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "count");
  *((float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v258, &__p, (uint64_t)&__p)+ 14) = v218;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v354 = 1;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v219 = (double)(rep - v351) * 0.000001;
  v353 = v219;
  std::string::basic_string[abi:ne180100]<0>(&__p, "time");
  v220 = std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v258, &__p, (uint64_t)&__p);
  v221 = v219 / 1000.0;
  *((float *)v220 + 14) = v221;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*((char *)a3 + 87) < 0)
  {
    if (!*((_QWORD *)a3 + 9))
      goto LABEL_394;
  }
  else if (!*((_BYTE *)a3 + 87))
  {
    goto LABEL_394;
  }
  v222 = (void *)objc_opt_new();
  v223 = (void *)MEMORY[0x1E0CB37E8];
  std::string::basic_string[abi:ne180100]<0>(&__p, "top1");
  LODWORD(v224) = *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v258, &__p, (uint64_t)&__p)+ 14);
  v225 = -887581056;
  if ((LODWORD(v224) & 0x7FFFFFFFu) >= 0x7F800000)
    *(float *)&v224 = -10000000.0;
  objc_msgSend(v223, "numberWithFloat:", v224);
  v226 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v222, "setObject:forKeyedSubscript:", v226, CFSTR("top1"));

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v227 = (void *)MEMORY[0x1E0CB37E8];
  std::string::basic_string[abi:ne180100]<0>(&__p, "top5");
  LODWORD(v228) = *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v258, &__p, (uint64_t)&__p)+ 14);
  if ((LODWORD(v228) & 0x7FFFFFFFu) >= 0x7F800000)
    *(float *)&v228 = -10000000.0;
  objc_msgSend(v227, "numberWithFloat:", v228);
  v229 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v222, "setObject:forKeyedSubscript:", v229, CFSTR("top5"));

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v230 = (void *)MEMORY[0x1E0CB37E8];
  std::string::basic_string[abi:ne180100]<0>(&__p, "count");
  LODWORD(v231) = *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v258, &__p, (uint64_t)&__p)+ 14);
  if ((LODWORD(v231) & 0x7FFFFFFFu) >= 0x7F800000)
    *(float *)&v231 = -10000000.0;
  objc_msgSend(v230, "numberWithFloat:", v231);
  v232 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v222, "setObject:forKeyedSubscript:", v232, CFSTR("count"));

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v233 = (void *)MEMORY[0x1E0CB37E8];
  std::string::basic_string[abi:ne180100]<0>(&__p, "time");
  LODWORD(v234) = *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v258, &__p, (uint64_t)&__p)+ 14);
  if ((LODWORD(v234) & 0x7FFFFFFFu) >= 0x7F800000)
    *(float *)&v234 = -10000000.0;
  objc_msgSend(v233, "numberWithFloat:", v234);
  v235 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v222, "setObject:forKeyedSubscript:", v235, CFSTR("time"));

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((*((char *)v267 + 111) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)v267 + 111))
      goto LABEL_391;
LABEL_372:
    std::string::basic_string[abi:ne180100]<0>(&__p, "top1");
    v236 = std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v258, &__p, (uint64_t)&__p);
    if (((_DWORD)v236[7] & 0x7FFFFFFFu) >= 0x7F800000)
      v237 = -10000000.0;
    else
      v237 = *((float *)v236 + 14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "time");
    v238 = std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v258, &__p, (uint64_t)&__p);
    if (((_DWORD)v238[7] & 0x7FFFFFFFu) < 0x7F800000)
      v225 = *((_DWORD *)v238 + 14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v276 = v225;
    __asm { FMOV            V0.4S, #-1.0 }
    v277 = _Q0;
    __asm { FMOV            V1.2S, #-1.0 }
    v278 = _D1;
    v279 = -1082130432;
    v280 = v237;
    v281 = _Q0;
    v282 = -1082130432;
    std::operator+<char>();
    std::string::basic_string[abi:ne180100]<0>(&v340, "EspressoValidation");
    v244 = *a1;
    Espresso::compute_path_to_string(*(_DWORD *)(**(_QWORD **)(*a1 + 32) + 12), &v304);
    std::string::basic_string[abi:ne180100]<0>(v348, "");
    std::string::basic_string[abi:ne180100]<0>(&v273, "");
    Espresso::report_benchmark_result((uint64_t)&v276, (const char *)&__p, (uint64_t *)&v340, (uint64_t *)(v244 + 16), (uint64_t *)&v304, (uint64_t)v348, (uint64_t)&v273);
    if (v275 < 0)
      operator delete(v273);
    if (SHIBYTE(v349) < 0)
      operator delete(v348[0]);
    if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v304.__r_.__value_.__l.__data_);
    if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v340.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_391;
  }
  if (*((_QWORD *)v267 + 12))
    goto LABEL_372;
LABEL_391:
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceNow:", 0.0);
  v245 = (void *)objc_claimAutoreleasedReturnValue();
  v246 = (void *)objc_opt_new();
  objc_msgSend(v246, "setDateStyle:", 1);
  objc_msgSend(v246, "setTimeStyle:", 1);
  objc_msgSend(v246, "stringFromDate:", v245);
  v247 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v222, "setObject:forKeyedSubscript:", v247, CFSTR("date"));
  v272 = 0;
  objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v222, 1, &v272);
  v248 = (void *)objc_claimAutoreleasedReturnValue();
  v249 = v267 + 16;
  v250 = v272;
  if (*((char *)v267 + 87) < 0)
    v249 = (_QWORD *)*v249;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v249);
  v251 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v248, "writeToFile:atomically:", v251, 1);

LABEL_394:
  v252 = (std::__shared_weak_count *)*((_QWORD *)&v350 + 1);
  if (*((_QWORD *)&v350 + 1))
  {
    v253 = (unint64_t *)(*((_QWORD *)&v350 + 1) + 8);
    do
      v254 = __ldaxr(v253);
    while (__stlxr(v254 - 1, v253));
    if (!v254)
    {
      ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
      std::__shared_weak_count::__release_weak(v252);
    }
  }
  Espresso::scoped_timer::~scoped_timer((Espresso::scoped_timer *)&v351);
}

void sub_191758778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,Espresso::validation_options *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *v63;
  char **v64;
  uint64_t v65;

  if (a50 < 0)
    operator delete(__p);
  if (SLOBYTE(STACK[0x48F]) < 0)
    operator delete((void *)STACK[0x478]);
  if (SLOBYTE(STACK[0x297]) < 0)
    operator delete((void *)STACK[0x280]);
  if (SLOBYTE(STACK[0x43F]) < 0)
    operator delete((void *)STACK[0x428]);
  if (a63 < 0)
    operator delete(a58);

  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*v64);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v65 - 224);
  Espresso::scoped_timer::~scoped_timer((Espresso::scoped_timer *)(v65 - 200));
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__12372(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__12373(uint64_t a1)
{
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
}

void ___ZN8Espresso14run_validationENSt3__110shared_ptrINS_3netEEENS1_INS_20abstract_data_sourceEEENS_18validation_optionsENS0_6vectorIS3_NS0_9allocatorIS3_EEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  Espresso::net::__build(*(_QWORD *)(a1 + 32), a2, 0, 0xFFFFFFFFLL);
}

void ___ZN8Espresso14run_validationENSt3__110shared_ptrINS_3netEEENS1_INS_20abstract_data_sourceEEENS_18validation_optionsENS0_6vectorIS3_NS0_9allocatorIS3_EEEE_block_invoke_28(uint64_t a1, _QWORD *a2)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v15[2];
  std::string v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 *v19;

  v4 = Espresso::blob<float,4>::copy(&v17, *(_QWORD *)(a1 + 40));
  if (*(char *)(a1 + 135) < 0)
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(a1 + 112), *(_QWORD *)(a1 + 120));
  else
    v16 = *(std::string *)(a1 + 112);
  v5 = v18;
  v15[0] = v17;
  v15[1] = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  Espresso::prepare_blob_for_network((uint64_t)v4, (uint64_t *)(a1 + 56), (std::string::size_type)&v16, (uint64_t)v15, 0);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  v10 = *(_QWORD *)(a1 + 56) + 136;
  v19 = (__int128 *)(a1 + 112);
  v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (unsigned __int8 *)(a1 + 112), &v19);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(**((_QWORD **)v11 + 5) + 48))(*((_QWORD *)v11 + 5), a2, &v17);
  Espresso::net::__forward(*(_QWORD *)(a1 + 56), a2, 0, (*(_DWORD *)(a1 + 200) + 1));
  (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 184) + 40))(*(_QWORD *)(a1 + 184), a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_191758CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t ___ZN8Espresso14run_validationENSt3__110shared_ptrINS_3netEEENS1_INS_20abstract_data_sourceEEENS_18validation_optionsENS0_6vectorIS3_NS0_9allocatorIS3_EEEE_block_invoke_32(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = **(_QWORD **)(**(_QWORD **)(*(_QWORD *)(a1 + 48) + 32) + 80);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2, a1 + 64);
  Espresso::net::__forward(*(_QWORD *)(a1 + 48), a2, 0, 0xFFFFFFFFLL);
  (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 80) + 40))(*(_QWORD *)(a1 + 80), a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
  result = *(_QWORD *)(a1 + 96);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)result + 40))(result, a2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48);
  return result;
}

void Espresso::confusion_matrix::generate_summary(Espresso::confusion_matrix *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  float *v16;
  _DWORD *v17;
  _DWORD *v18;
  int v19;
  double v20;
  int v21;
  double v22;
  int v23;
  float v24;

  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::vector<int>::resize((std::vector<int> *)a2, *(int *)this);
  std::vector<int>::resize((std::vector<int> *)(a2 + 24), *(int *)this);
  std::vector<int>::resize((std::vector<int> *)(a2 + 48), *(int *)this);
  std::vector<float>::resize((_QWORD *)(a2 + 72), *(int *)this);
  std::vector<float>::resize((_QWORD *)(a2 + 96), *(int *)this);
  std::vector<float>::resize((_QWORD *)(a2 + 120), *(int *)this);
  v4 = *(_DWORD *)this;
  if (*(int *)this >= 1)
  {
    v5 = 0;
    v6 = *((_QWORD *)this + 1);
    v7 = *(int **)a2;
    v8 = *(int **)(a2 + 48);
    do
    {
      v7[v5] = *(_DWORD *)(v6 + 4 * ((int)v5 + (int)v5 * v4));
      v8[v5] = 0;
      v4 = *(_DWORD *)this;
      if (*(int *)this >= 1)
      {
        v9 = 0;
        v10 = 0;
        do
        {
          if (v5 != v9)
          {
            v10 += *(_DWORD *)(v6 + 4 * ((int)v9 + (int)v5 * v4));
            v8[v5] = v10;
            v4 = *(_DWORD *)this;
          }
          ++v9;
        }
        while (v9 < v4);
      }
      ++v5;
    }
    while (v5 < v4);
    if (v4 >= 1)
    {
      v11 = 0;
      v12 = *(int **)(a2 + 24);
      do
      {
        v12[v11] = 0;
        LODWORD(v13) = *(_DWORD *)this;
        if (*(int *)this >= 1)
        {
          v14 = 0;
          v15 = 0;
          do
          {
            if (v11 != v14)
            {
              v15 += *(_DWORD *)(v6 + 4 * ((int)v11 + (int)v13 * (int)v14));
              v12[v11] = v15;
              LODWORD(v13) = *(_DWORD *)this;
            }
            ++v14;
          }
          while (v14 < (int)v13);
        }
        ++v11;
      }
      while (v11 < (int)v13);
      if ((int)v13 >= 1)
      {
        v16 = *(float **)(a2 + 96);
        v17 = *(_DWORD **)(a2 + 72);
        v18 = *(_DWORD **)(a2 + 120);
        v13 = v13;
        do
        {
          v19 = *v7++;
          v20 = (double)v19;
          v21 = *v8++;
          v22 = (double)v21;
          v23 = *v12++;
          *(float *)&v22 = v20 / (v20 + 1.0e-12 + v22);
          *v16 = *(float *)&v22;
          *(float *)&v20 = v20 / (v20 + 1.0e-12 + (double)v23);
          *v17++ = LODWORD(v20);
          v24 = *v16++;
          *(float *)&v20 = (float)((float)(v24 * *(float *)&v20) + (float)(v24 * *(float *)&v20))
                         / (v24 + 1.0e-12 + *(float *)&v20);
          *v18++ = LODWORD(v20);
          --v13;
        }
        while (v13);
      }
    }
  }
}

void sub_191758F80(_Unwind_Exception *a1)
{
  Espresso::confusion_matrix::summary *v1;

  Espresso::confusion_matrix::summary::~summary(v1);
  _Unwind_Resume(a1);
}

void Espresso::confusion_matrix::summary::~summary(Espresso::confusion_matrix::summary *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)
  {
    *((_QWORD *)this + 16) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 12);
  if (v3)
  {
    *((_QWORD *)this + 13) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 9);
  if (v4)
  {
    *((_QWORD *)this + 10) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 6);
  if (v5)
  {
    *((_QWORD *)this + 7) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 3);
  if (v6)
  {
    *((_QWORD *)this + 4) = v6;
    operator delete(v6);
  }
  v7 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v7;
    operator delete(v7);
  }
}

_QWORD *__copy_helper_block_ea8_48c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE64c49_ZTSNSt3__110shared_ptrIN8Espresso4blobIfLi4EEEEE80c62_ZTSNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE96c62_ZTSNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = a2[7];
  result[6] = a2[6];
  result[7] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[9];
  result[8] = a2[8];
  result[9] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = a2[11];
  result[10] = a2[10];
  result[11] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = a2[13];
  result[12] = a2[12];
  result[13] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_48c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE64c49_ZTSNSt3__110shared_ptrIN8Espresso4blobIfLi4EEEEE80c62_ZTSNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE96c62_ZTSNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = a1 + 48;
  v2 = a1 + 64;
  v3 = a1 + 80;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 96);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
}

void std::__shared_ptr_emplace<Espresso::confusion_matrix>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9AD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::confusion_matrix>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9AD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::confusion_matrix>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

uint64_t __copy_helper_block_ea8_40c49_ZTSNSt3__110shared_ptrIN8Espresso4blobIfLi4EEEEE56c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE72c35_ZTSN8Espresso18validation_optionsE184c62_ZTSNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a2[8];
  a1[7] = a2[7];
  a1[8] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  result = Espresso::validation_options::validation_options((uint64_t)(a1 + 9), (uint64_t)(a2 + 9));
  v11 = a2[24];
  a1[23] = a2[23];
  a1[24] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  return result;
}

void sub_1917591D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_ea8_40c49_ZTSNSt3__110shared_ptrIN8Espresso4blobIfLi4EEEEE56c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE72c35_ZTSN8Espresso18validation_optionsE184c62_ZTSNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE(uint64_t a1)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 184);
  if (*(char *)(a1 + 183) < 0)
    operator delete(*(void **)(a1 + 160));
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 56);
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 40);
}

int *Espresso::confusion_matrix::predicted(int *this, int a2, int a3)
{
  int v3;

  v3 = *this;
  if (*this > a3 && v3 > a2)
    ++*(_DWORD *)(*((_QWORD *)this + 1) + 4 * (a2 + v3 * a3));
  return this;
}

void Espresso::regularizer_builder::~regularizer_builder(void **this)
{
  Espresso::regularizer_builder::~regularizer_builder(this);
  JUMPOUT(0x19401CD90);
}

{
  *this = &off_1E2D85550;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 26));
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)(this + 18));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 15));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 13));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 11));
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)(this + 3), this[4]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 1));
}

void Espresso::regularizer_builder::per_variable_loss(Espresso::regularizer_builder *this)
{
  Espresso::throw_exception_selector<Espresso::not_implemented_error>("per_variable_loss needs to be implemented to call add_regularization_loss");
}

void Espresso::regularizer_builder::variable_gradient_diff(Espresso::regularizer_builder *this)
{
  Espresso::throw_exception_selector<Espresso::not_implemented_error>("variable_gradient_diff needs to be implemented to call modify_gradient");
}

void Espresso::regularizer_with_factors_builder::~regularizer_with_factors_builder(Espresso::regularizer_with_factors_builder *this)
{
  Espresso::regularizer_with_factors_builder::~regularizer_with_factors_builder(this);
  JUMPOUT(0x19401CD90);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E2D9D188;
  v2 = (void *)*((_QWORD *)this + 29);
  if (v2)
  {
    *((_QWORD *)this + 30) = v2;
    operator delete(v2);
  }
  Espresso::regularizer_builder::~regularizer_builder((void **)this);
}

void Espresso::l2_regularizer_builder::~l2_regularizer_builder(Espresso::l2_regularizer_builder *this)
{
  Espresso::regularizer_with_factors_builder::~regularizer_with_factors_builder(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::l2_regularizer_builder::per_variable_loss(Espresso::l2_regularizer_builder *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  float *v8;
  float v9;
  void **v10;
  float v11;
  _QWORD v12[2];
  char v13;
  _QWORD v14[2];
  char v15;
  void *v16[2];
  char v17;
  void *v18[2];
  char v19;
  void *__p[2];
  char v21;
  void *v22[2];
  char v23;

  v6 = (uint64_t *)((char *)this + 8);
  v7 = **((_QWORD **)this + 28) + 24 * a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  Espresso::sequential_builder::by_constant_op(0xDu, v6, v7, (uint64_t)__p, (uint64_t)v22, 2.0);
  if (v21 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "");
  Espresso::sequential_builder::reduce(v6, (uint64_t)v22, 0, 0x1Fu, (uint64_t)v16, (uint64_t)v18);
  if (v17 < 0)
    operator delete(v16[0]);
  v8 = (float *)*((_QWORD *)this + 29);
  if (*((_BYTE *)this + 256))
  {
    v9 = *v8;
    std::string::basic_string[abi:ne180100]<0>(v14, "");
    Espresso::sequential_builder::by_constant_op(1u, v6, (uint64_t)v18, (uint64_t)v14, a3, v9 * 0.5);
    if ((v15 & 0x80000000) == 0)
      goto LABEL_11;
    v10 = (void **)v14;
  }
  else
  {
    v11 = v8[a2];
    std::string::basic_string[abi:ne180100]<0>(v12, "");
    Espresso::sequential_builder::by_constant_op(1u, v6, (uint64_t)v18, (uint64_t)v12, a3, v11 * 0.5);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_11;
    v10 = (void **)v12;
  }
  operator delete(*v10);
LABEL_11:
  if (v19 < 0)
    operator delete(v18[0]);
  if (v23 < 0)
    operator delete(v22[0]);
}

void sub_19175956C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (a14 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  if (*(char *)(v32 - 65) < 0)
    operator delete(*(void **)(v32 - 88));
  _Unwind_Resume(exception_object);
}

void sub_1917595E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    JUMPOUT(0x1917595D4);
  JUMPOUT(0x1917595DCLL);
}

void Espresso::l2_regularizer_builder::variable_gradient_diff(Espresso::l2_regularizer_builder *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  size_t v7;
  std::string::value_type *v8;
  const void *v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  void *v14;
  std::string __p;
  std::string v16;
  __int128 v17;
  uint64_t v18;

  v6 = **((_QWORD **)this + 28) + 24 * a2;
  if (*(char *)(v6 + 23) >= 0)
    v7 = *(unsigned __int8 *)(v6 + 23);
  else
    v7 = *(_QWORD *)(v6 + 8);
  std::string::basic_string[abi:ne180100](a3, v7 + 14);
  if (*(char *)(a3 + 23) >= 0)
    v8 = (std::string::value_type *)a3;
  else
    v8 = *(std::string::value_type **)a3;
  if (v7)
  {
    if (*(char *)(v6 + 23) >= 0)
      v9 = (const void *)v6;
    else
      v9 = *(const void **)v6;
    memmove(v8, v9, v7);
  }
  strcpy(&v8[v7], "/reg_grad_diff");
  if (*((_BYTE *)this + 256))
  {
    v10 = **((_QWORD **)this + 28);
    v11 = **((float **)this + 29);
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      v16 = *(std::string *)a3;
    Espresso::sequential_builder::by_constant_op(1u, (uint64_t *)this + 1, v10 + 24 * a2, (uint64_t)&v16, (uint64_t)&v17, v11);
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(_OWORD *)a3 = v17;
    *(_QWORD *)(a3 + 16) = v18;
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    {
      v14 = (void *)v16.__r_.__value_.__r.__words[0];
LABEL_27:
      operator delete(v14);
    }
  }
  else
  {
    v12 = **((_QWORD **)this + 28);
    v13 = *(float *)(*((_QWORD *)this + 29) + 4 * a2);
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      __p = *(std::string *)a3;
    Espresso::sequential_builder::by_constant_op(1u, (uint64_t *)this + 1, v12 + 24 * a2, (uint64_t)&__p, (uint64_t)&v17, v13);
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(_OWORD *)a3 = v17;
    *(_QWORD *)(a3 + 16) = v18;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      v14 = (void *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_27;
    }
  }
}

void sub_1917597CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 + 23) < 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(exception_object);
}

void Espresso::SharedUtils::TemporaryDirectory::~TemporaryDirectory(Espresso::SharedUtils::TemporaryDirectory *this)
{
  Espresso::SharedUtils::TemporaryDirectory::~TemporaryDirectory(this);
  JUMPOUT(0x19401CD90);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E2D5F810;
  v2 = (void **)((char *)this + 8);
  std::__fs::filesystem::__remove_all((const std::__fs::filesystem::path *)((char *)this + 8), 0);
  if (*((char *)this + 31) < 0)
    operator delete(*v2);
}

uint64_t Espresso::SharedUtils::TemporaryDirectory::GetDirectoryPath(Espresso::SharedUtils::TemporaryDirectory *this)
{
  return (uint64_t)this + 8;
}

uint64_t Espresso::SharedUtils::TemporaryDirectory::TemporaryDirectory(uint64_t a1, const void **a2)
{
  std::__fs::filesystem::path *v4;
  size_t v5;
  void **v6;
  const void *v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  std::runtime_error *exception;
  std::string v13;
  std::string *v14;
  void **v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = &off_1E2D5F810;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::__fs::filesystem::path *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if (*((char *)a2 + 23) >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  v6 = (void **)&v15;
  std::string::basic_string[abi:ne180100]((uint64_t)&v15, v5 + 41);
  if (v16 < 0)
    v6 = v15;
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0)
      v7 = a2;
    else
      v7 = *a2;
    memmove(v6, v7, v5);
  }
  strcpy((char *)v6 + v5, "/com.apple.espresso.test_directory.XXXXXX");
  MEMORY[0x1E0C80A78](*(__n128 *)"directory.XXXXXX");
  if (v16 >= 0)
    v9 = (const char *)&v15;
  else
    v9 = (const char *)v15;
  v10 = strcpy((char *)&v13 - v8, v9);
  v14 = (std::string *)mkdtemp(v10);
  if (!v14)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to create temporary directory.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v13, &v14);
  if (*(char *)(a1 + 31) < 0)
    operator delete(v4->__pn_.__r_.__value_.__l.__data_);
  v4->__pn_ = v13;
  std::__fs::filesystem::__permissions(v4, all, replace, 0);
  if (v16 < 0)
    operator delete(v15);
  return a1;
}

void sub_191759A74(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v3;
  uint64_t v4;

  __cxa_free_exception(v3);
  if (*(char *)(v4 - 57) < 0)
    operator delete(*(void **)(v4 - 80));
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

void Espresso::pass_params_sgd_hoisting::~pass_params_sgd_hoisting(Espresso::pass_params_sgd_hoisting *this)
{
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_sgd_hoisting::~pass_sgd_hoisting(Espresso::pass_sgd_hoisting *this)
{
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_sgd_hoisting::get_analysis_usage(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t Espresso::pass_sgd_hoisting::run_on_network@<X0>(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  Espresso::net *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  int v15;
  int v16;
  int v17;
  _BOOL4 v19;
  uint64_t v20;
  unsigned __int16 *v21;
  int v22;
  int v23;
  int v24;
  const void *v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  const void **v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  int v53;
  uint64_t *v54;
  int v55;
  int v56;
  uint64_t *v57;
  int v58;
  int v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  BOOL v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  int v70;
  _QWORD *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  int v77;
  uint64_t *v78;
  int v79;
  uint64_t v81;
  uint64_t v82;
  int *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint8x8_t v87;
  unint64_t v88;
  int v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  char **v93;
  char *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  void **v99;
  uint64_t v100;
  uint64_t v101;
  size_t v102;
  void *v103;
  const void **v104;
  void **v105;
  uint64_t **v107;
  uint64_t *i;
  unint64_t v109;
  _QWORD *v110;
  float v111;
  _BOOL8 v112;
  unint64_t v113;
  unint64_t v114;
  size_t v115;
  uint64_t v116;
  _QWORD *v117;
  unint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  char *v128;
  int v129;
  unint64_t v130;
  std::string::size_type size;
  std::string::size_type v132;
  std::string::size_type v133;
  uint64_t v134;
  unint64_t v135;
  int64_t v136;
  unint64_t v137;
  void *v138;
  std::string::size_type v139;
  uint64_t v140;
  __int128 v141;
  std::string::size_type v142;
  unint64_t v143;
  unint64_t v144;
  uint8x8_t v145;
  uint64_t **v146;
  uint64_t *j;
  unint64_t v148;
  _QWORD *v149;
  std::string::size_type v150;
  void *v151;
  __int128 v152;
  float v153;
  _BOOL8 v154;
  unint64_t v155;
  unint64_t v156;
  int8x8_t prime;
  void *v158;
  void *v159;
  uint64_t v160;
  _QWORD **v161;
  unint64_t v162;
  uint8x8_t v163;
  unint64_t v164;
  uint8x8_t v165;
  uint64_t v166;
  _QWORD *k;
  unint64_t v168;
  _QWORD *v169;
  void *v170;
  unint64_t v171;
  unint64_t *v172;
  unint64_t v173;
  void *v174;
  uint64_t *v175;
  int v176;
  uint64_t *v177;
  uint64_t *v178;
  int *v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  int *v183;
  int *v184;
  std::string *v185;
  int v186;
  uint64_t v187;
  __int128 v188;
  uint64_t v189;
  int *v190;
  int *v191;
  int v192;
  uint64_t v193;
  _OWORD *v194;
  __int128 v195;
  std::string *v196;
  uint64_t v197;
  void *v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  _BYTE *v202;
  _BYTE *v203;
  unint64_t v204;
  std::string *v205;
  unint64_t v206;
  void **v207;
  unint64_t *v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int *v214;
  unint64_t v215;
  int v216;
  uint64_t v217;
  _QWORD *v218;
  const std::string *v219;
  _QWORD *v220;
  _QWORD *v221;
  int *v222;
  int v223;
  uint64_t v224;
  _QWORD *v225;
  _QWORD *v226;
  _QWORD *v227;
  uint64_t v228;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  void *v233;
  char v234;
  std::__shared_weak_count *v235;
  uint64_t v236;
  _QWORD **v237;
  int v238;
  unint64_t v239;
  char v240;
  uint64_t v241;
  uint64_t v242;
  _QWORD *v243;
  _QWORD *v244;
  std::string v245;
  void *v246[4];
  int v247;
  _QWORD v248[2];
  int v249;
  int v250;
  _OWORD v251[2];
  int v252;
  __int128 v253;
  __int128 v254;
  int v255;
  _OWORD v256[2];
  int v257;
  _QWORD v258[5];
  _OWORD v259[2];
  int v260;
  void *v261[2];
  __int128 v262;
  float v263;
  void *__p;
  char *v265;
  unint64_t v266;
  __int128 v267;
  __int128 v268;
  float v269;
  _BYTE v270[24];
  _BYTE *v271;
  _QWORD v272[2];
  std::string v273;
  void *v274;
  int v275;
  std::string v276;
  uint64_t v277;

  v3 = a1;
  v277 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  Espresso::run_pass_on_network<Espresso::pass_global_name_indexing>((uint64_t)a1);
  Espresso::run_pass_on_network<Espresso::pass_blob_name_indexing>((uint64_t)v3);
  v243 = Espresso::net::get_analysis<Espresso::pass_global_name_indexing_result>((uint64_t)v3);
  v244 = Espresso::net::get_analysis<Espresso::pass_blob_name_indexing_result>((uint64_t)v3);
  v267 = 0u;
  v268 = 0u;
  v269 = 1.0;
  v265 = 0;
  __p = 0;
  v266 = 0;
  *(_OWORD *)v261 = 0u;
  v262 = 0u;
  v263 = 1.0;
  memset(v259, 0, sizeof(v259));
  v260 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(&v273, "array_gather");
  std::unordered_set<std::string>::unordered_set((uint64_t)v258, (uint64_t)&v273, 1);
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v273.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v273, "array_gather");
  std::string::basic_string[abi:ne180100]<0>(&v274, "scatter");
  memset(v256, 0, sizeof(v256));
  v257 = 1065353216;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string> const&>((uint64_t)v256, (uint64_t)&v273, (uint64_t)&v273);
  if (v276.__r_.__value_.__s.__data_[7] < 0)
    operator delete(v274);
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v273.__r_.__value_.__l.__data_);
  v253 = 0u;
  v254 = 0u;
  v255 = 1065353216;
  memset(v251, 0, sizeof(v251));
  v252 = 1065353216;
  v250 = -1;
  v4 = v243[1];
  v242 = (uint64_t)v3;
  if (v4)
  {
    v5 = 0;
    v231 = (uint64_t)v3 + 96;
    do
    {
      v6 = *(_QWORD **)(v243[7] + 24 * v5);
      if (*(_QWORD *)(v243[7] + 24 * v5 + 8) - (_QWORD)v6 == 8)
      {
        v7 = **(_DWORD **)(v244[10] + 24 * *v6);
        v8 = (_QWORD *)(v244[22] + 24 * v7);
        v9 = (_QWORD *)*v8;
        v10 = v8[1] - *v8;
        v11 = *(_QWORD *)(*v8 + 8 * ((v10 >> 3) - 1));
        v249 = v11;
        v12 = *((_QWORD *)v3 + 4);
        v13 = *(_QWORD *)(v12 + 16 * (int)v11);
        v14 = (unsigned __int16 *)(v13 + 40);
        v15 = *(char *)(v13 + 63);
        if ((v15 & 0x80000000) == 0)
        {
          if (v15 != 3)
            goto LABEL_291;
LABEL_15:
          v16 = *v14;
          v17 = *((unsigned __int8 *)v14 + 2);
          v19 = v16 != 26483 || v17 != 100;
          if ((unint64_t)v10 < 9 || v19)
            goto LABEL_291;
          v20 = *(_QWORD *)(v12 + 16 * v9[(v10 >> 3) - 2]);
          v21 = (unsigned __int16 *)(v20 + 40);
          v22 = *(char *)(v20 + 63);
          if (v22 < 0)
          {
            if (*(_QWORD *)(v20 + 48) == 3)
            {
              v21 = *(unsigned __int16 **)v21;
              goto LABEL_28;
            }
          }
          else
          {
            if (v22 != 3)
              goto LABEL_32;
LABEL_28:
            v23 = *v21;
            v24 = *((unsigned __int8 *)v21 + 2);
            if (v23 == 26483 && v24 == 100)
              goto LABEL_291;
          }
LABEL_32:
          v238 = v7;
          v239 = (v10 >> 3) - 1;
          v236 = v10;
          v250 = *(_DWORD *)(*(_QWORD *)(v244[13] + 24 * (int)v11 + 8) - 4);
          v26 = *(const void **)(v13 + 64);
          if (v26)
          {
            if (v27)
            {
              v28 = *(std::__shared_weak_count **)(v13 + 72);
              v248[0] = v27;
              v248[1] = v28;
              v235 = v28;
              if (v28)
              {
                p_shared_owners = (unint64_t *)&v28->__shared_owners_;
                do
                  v30 = __ldxr(p_shared_owners);
                while (__stxr(v30 + 1, p_shared_owners));
              }
              v237 = (_QWORD **)v8;
              v31 = (*(uint64_t (**)(void *))(*(_QWORD *)v27 + 320))(v27);
              if ((*(_BYTE *)v31 & 1) != 0)
                goto LABEL_285;
              v32 = *(_DWORD *)(v31 + 8);
              if (!v239)
                goto LABEL_59;
              v33 = 0;
              v34 = *(_QWORD *)(*((_QWORD *)v3 + 4) + 16 * **v237);
              LOBYTE(v35) = 1;
              while (2)
              {
                v36 = *(_QWORD *)(*((_QWORD *)v3 + 4) + 16 * (*v237)[v33]);
                v37 = *(unsigned __int8 *)(v36 + 63);
                if ((v37 & 0x80u) == 0)
                  v38 = *(unsigned __int8 *)(v36 + 63);
                else
                  v38 = *(_QWORD *)(v36 + 48);
                v39 = *(unsigned __int8 *)(v34 + 63);
                v40 = (char)v39;
                if ((v39 & 0x80u) != 0)
                  v39 = *(_QWORD *)(v34 + 48);
                if (v38 != v39)
                  goto LABEL_285;
                v41 = (const void **)(v36 + 40);
                if (v40 >= 0)
                  v42 = (unsigned __int8 *)(v34 + 40);
                else
                  v42 = *(unsigned __int8 **)(v34 + 40);
                if ((v37 & 0x80) != 0)
                {
                  if (memcmp(*v41, v42, *(_QWORD *)(v36 + 48)))
                    goto LABEL_285;
                }
                else if (*(_BYTE *)(v36 + 63))
                {
                  v43 = (unsigned __int8 *)(v36 + 40);
                  while (*v43 == *v42)
                  {
                    ++v43;
                    ++v42;
                    if (!--v37)
                      goto LABEL_56;
                  }
                  goto LABEL_285;
                }
LABEL_56:
                v44 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v258, (uint64_t)v41);
                v35 = (v44 != 0) & v35;
                if (v44)
                {
                  if (v239 > ++v33)
                    continue;
                }
                break;
              }
              if (v35)
              {
LABEL_59:
                memset(&v273, 0, sizeof(v273));
                memset(&v276, 0, sizeof(v276));
                v275 = v11;
                v45 = *(_QWORD *)(v244[13] + 24 * (int)v11);
                v46 = *(_QWORD *)(v244[13] + 24 * (int)v11 + 8) - v45;
                if (v46)
                {
                  v47 = 0;
                  v48 = v46 >> 2;
                  if (v48 <= 1)
                    v48 = 1;
                  v49 = (unint64_t)v237;
                  while (*(_DWORD *)(v45 + 4 * v47) != v238)
                  {
                    if (v48 == ++v47)
                    {
                      LODWORD(v47) = -1;
                      break;
                    }
                  }
                }
                else
                {
                  LODWORD(v47) = -1;
                  v49 = (unint64_t)v237;
                }
                if (!std::__hash_table<Espresso::activation_mode,std::hash<Espresso::activation_mode>,std::equal_to<Espresso::activation_mode>,std::allocator<Espresso::activation_mode>>::find<Espresso::activation_mode>(v253, *((unint64_t *)&v253 + 1), v11))
                {
                  memset(v246, 0, sizeof(v246));
                  v247 = 1065353216;
                  v50 = std::__hash_table<std::__hash_value_type<int,std::unordered_set<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_set<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_set<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_set<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)&v253, v11, &v249);
                  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__move_assign((uint64_t)(v50 + 3), (uint64_t *)v246);
                  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v246);
                }
                if (!std::__hash_table<Espresso::activation_mode,std::hash<Espresso::activation_mode>,std::equal_to<Espresso::activation_mode>,std::allocator<Espresso::activation_mode>>::find<Espresso::activation_mode>(*(uint64_t *)&v251[0], *((unint64_t *)&v251[0] + 1), v11))
                {
                  memset(v246, 0, sizeof(v246));
                  v247 = 1065353216;
                  v51 = std::__hash_table<std::__hash_value_type<int,std::unordered_set<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_set<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_set<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_set<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v251, v11, &v249);
                  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__move_assign((uint64_t)(v51 + 3), (uint64_t *)v246);
                  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v246);
                }
                v52 = std::__hash_table<std::__hash_value_type<int,std::unordered_set<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_set<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_set<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_set<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)&v253, v11, &v249);
                v53 = *(_DWORD *)(*(_QWORD *)(v244[13] + 24 * (int)v11) + 4 * (int)v47);
                std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)(v52 + 3), v53, v53);
                v54 = std::__hash_table<std::__hash_value_type<int,std::unordered_set<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_set<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_set<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_set<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)&v253, v11, &v249);
                v55 = v47 + v32;
                v56 = *(_DWORD *)(*(_QWORD *)(v244[13] + 24 * (int)v11) + 4 * v55);
                std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)(v54 + 3), v56, v56);
                v57 = std::__hash_table<std::__hash_value_type<int,std::unordered_set<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_set<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_set<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_set<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v251, v11, &v249);
                v58 = *(_DWORD *)(*(_QWORD *)(v244[10] + 24 * (int)v11) + 4 * (int)v47);
                std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)(v57 + 3), v58, v58);
                v59 = *(_DWORD *)(*(_QWORD *)(v244[13] + 24 * (int)v11) + 4 * v55);
                v60 = v265;
                if ((unint64_t)v265 >= v266)
                {
                  v62 = (char *)__p;
                  v63 = (v265 - (_BYTE *)__p) >> 2;
                  v64 = v63 + 1;
                  if ((unint64_t)(v63 + 1) >> 62)
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  v65 = v266 - (_QWORD)__p;
                  if ((uint64_t)(v266 - (_QWORD)__p) >> 1 > v64)
                    v64 = v65 >> 1;
                  v66 = (unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL;
                  v67 = 0x3FFFFFFFFFFFFFFFLL;
                  if (!v66)
                    v67 = v64;
                  if (v67)
                  {
                    v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v67);
                    v60 = v265;
                    v62 = (char *)__p;
                  }
                  else
                  {
                    v68 = 0;
                  }
                  v69 = (char *)(v67 + 4 * v63);
                  *(_DWORD *)v69 = v59;
                  v61 = v69 + 4;
                  while (v60 != v62)
                  {
                    v70 = *((_DWORD *)v60 - 1);
                    v60 -= 4;
                    *((_DWORD *)v69 - 1) = v70;
                    v69 -= 4;
                  }
                  __p = v69;
                  v265 = v61;
                  v266 = v67 + 4 * v68;
                  if (v62)
                    operator delete(v62);
                }
                else
                {
                  *(_DWORD *)v265 = v59;
                  v61 = v60 + 4;
                }
                v265 = v61;
                HIDWORD(v274) = v59;
                v246[0] = (void *)v249;
                v71 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v231, v249, v246);
                std::string::operator=(&v276, (const std::string *)(v71[3] + 24 * (int)v47));
                LODWORD(v274) = v5;
                v72 = v238;
                if (v239)
                {
                  v73 = 0;
                  v230 = v5;
                  while (1)
                  {
                    v74 = *(_QWORD *)(*(_QWORD *)v49 + 8 * v73);
                    v75 = *(_QWORD *)(*((_QWORD *)v3 + 4) + 16 * (int)v74);
                    v76 = (uint64_t *)(v75 + 40);
                    v77 = *(char *)(v75 + 63);
                    if (v77 < 0)
                    {
                      if (*(_QWORD *)(v75 + 48) != 12)
                        goto LABEL_208;
                      v76 = (uint64_t *)*v76;
                    }
                    else if (v77 != 12)
                    {
                      goto LABEL_208;
                    }
                    v78 = (uint64_t *)*v76;
                    v79 = *((_DWORD *)v76 + 2);
                    if (v78 == (uint64_t *)0x61675F7961727261 && v79 == 1919248500)
                      break;
LABEL_208:
                    if (++v73 == v239)
                      goto LABEL_209;
                  }
                  if (*(char *)(v75 + 39) < 0)
                    std::string::__init_copy_ctor_external(&v245, *(const std::string::value_type **)(v75 + 16), *(_QWORD *)(v75 + 24));
                  else
                    v245 = *(std::string *)(v75 + 16);
                  v232 = v73;
                  *(_QWORD *)((char *)v272 + 7) = 0;
                  v272[0] = 0;
                  std::operator+<char>();
                  v233 = v246[0];
                  v234 = HIBYTE(v246[2]);
                  v81 = SHIDWORD(v274);
                  v272[0] = v246[1];
                  *(void **)((char *)v272 + 7) = *(void **)((char *)&v246[1] + 7);
                  std::string::basic_string[abi:ne180100]<0>(v246, "scatter");
                  if (v236 == 16)
                  {
                    v82 = *(_QWORD *)(v244[19] + 8 * v81);
                    v240 = HIBYTE(v246[2]);
                    goto LABEL_103;
                  }
                  v89 = *(_DWORD *)(*(_QWORD *)(v244[13] + 24 * (int)v74) + 4);
                  v90 = (uint64_t *)(v244[19] + 8 * v81);
                  while (2)
                  {
                    v91 = *v90;
                    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)&v267, *v90, *v90);
                    v92 = v244[13];
                    v93 = (char **)(v92 + 24 * (int)v91);
                    v94 = *v93;
                    v95 = v93[1] - *v93;
                    v96 = v244[19];
                    if ((int)(v95 >> 2) < 1)
                      goto LABEL_133;
                    v97 = *(_QWORD *)(v242 + 32);
                    v240 = HIBYTE(v246[2]);
                    if (SHIBYTE(v246[2]) >= 0)
                      v98 = (void *)HIBYTE(v246[2]);
                    else
                      v98 = v246[1];
                    if (SHIBYTE(v246[2]) >= 0)
                      v99 = v246;
                    else
                      v99 = (void **)v246[0];
                    v81 = (v95 >> 2);
LABEL_117:
                    v82 = *(_QWORD *)(v96 + 8 * *(int *)&v94[4 * (v81 - 1)]);
                    v100 = *(_QWORD *)(v97 + 16 * (int)v82);
                    v101 = *(unsigned __int8 *)(v100 + 63);
                    v102 = *(_QWORD *)(v100 + 48);
                    if ((v101 & 0x80u) == 0)
                      v103 = (void *)*(unsigned __int8 *)(v100 + 63);
                    else
                      v103 = *(void **)(v100 + 48);
                    if (v103 == v98)
                    {
                      v104 = (const void **)(v100 + 40);
                      if ((v101 & 0x80) != 0)
                      {
                        if (memcmp(*v104, v99, v102))
                          break;
                      }
                      else if ((_DWORD)v101)
                      {
                        v105 = v99;
                        while (*(unsigned __int8 *)v104 == *(unsigned __int8 *)v105)
                        {
                          v104 = (const void **)((char *)v104 + 1);
                          v105 = (void **)((char *)v105 + 1);
                          if (!--v101)
                            goto LABEL_128;
                        }
                        break;
                      }
LABEL_128:
                      if (*(_DWORD *)(*(_QWORD *)(v92 + 24 * (int)v82) + 4) == v89)
                      {
                        if ((int)v82 <= 0)
                        {
LABEL_133:
                          v90 = (uint64_t *)(v96 + 8 * *(int *)v94);
                          continue;
                        }
LABEL_103:
                        if (v240 < 0)
                          operator delete(v246[0]);
                        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v259, v82, v82);
                        v3 = (Espresso::net *)v242;
                        v5 = v230;
                        v49 = (unint64_t)v237;
                        v83 = *(int **)(v244[13] + 24 * (int)v82);
                        v241 = v83[2];
                        v84 = *v83;
                        v85 = *(_QWORD *)(v244[19] + 8 * v84);
                        v86 = *((_QWORD *)&v267 + 1);
                        if (*((_QWORD *)&v267 + 1))
                        {
                          v87 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v267 + 8));
                          v87.i16[0] = vaddlv_u8(v87);
                          if (v87.u32[0] > 1uLL)
                          {
                            v88 = (int)v85;
                            if (*((_QWORD *)&v267 + 1) <= (unint64_t)(int)v85)
                              v88 = (unint64_t)(int)v85 % *((_QWORD *)&v267 + 1);
                          }
                          else
                          {
                            v88 = (*((_QWORD *)&v267 + 1) - 1) & (int)v85;
                          }
                          v81 = v88;
                          v107 = *(uint64_t ***)(v267 + 8 * v88);
                          if (v107)
                          {
                            for (i = *v107; i; i = (uint64_t *)*i)
                            {
                              v109 = i[1];
                              if (v109 == (int)v85)
                              {
                                if (*((_DWORD *)i + 4) == (_DWORD)v85)
                                  goto LABEL_169;
                              }
                              else
                              {
                                if (v87.u32[0] > 1uLL)
                                {
                                  if (v109 >= *((_QWORD *)&v267 + 1))
                                    v109 %= *((_QWORD *)&v267 + 1);
                                }
                                else
                                {
                                  v109 &= *((_QWORD *)&v267 + 1) - 1;
                                }
                                if (v109 != v88)
                                  break;
                              }
                            }
                          }
                        }
                        v110 = operator new(0x18uLL);
                        *v110 = 0;
                        v110[1] = (int)v85;
                        *((_DWORD *)v110 + 4) = v85;
                        v111 = (float)(unint64_t)(*((_QWORD *)&v268 + 1) + 1);
                        if (!v86 || (float)(v269 * (float)v86) < v111)
                        {
                          v112 = (v86 & (v86 - 1)) != 0;
                          if (v86 < 3)
                            v112 = 1;
                          v113 = v112 | (2 * v86);
                          v114 = vcvtps_u32_f32(v111 / v269);
                          if (v113 <= v114)
                            v115 = v114;
                          else
                            v115 = v113;
                          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>((uint64_t)&v267, v115);
                          v86 = *((_QWORD *)&v267 + 1);
                          if ((*((_QWORD *)&v267 + 1) & (*((_QWORD *)&v267 + 1) - 1)) != 0)
                          {
                            if (*((_QWORD *)&v267 + 1) <= (unint64_t)(int)v85)
                              v81 = (unint64_t)(int)v85 % *((_QWORD *)&v267 + 1);
                            else
                              v81 = (int)v85;
                          }
                          else
                          {
                            v81 = (*((_QWORD *)&v267 + 1) - 1) & (int)v85;
                          }
                        }
                        v116 = v267;
                        v117 = *(_QWORD **)(v267 + 8 * v81);
                        if (v117)
                        {
                          *v110 = *v117;
                          goto LABEL_167;
                        }
                        *v110 = v268;
                        *(_QWORD *)&v268 = v110;
                        *(_QWORD *)(v116 + 8 * v81) = &v268;
                        if (*v110)
                        {
                          v118 = *(_QWORD *)(*v110 + 8);
                          if ((v86 & (v86 - 1)) != 0)
                          {
                            if (v118 >= v86)
                              v118 %= v86;
                          }
                          else
                          {
                            v118 &= v86 - 1;
                          }
                          v117 = (_QWORD *)(v267 + 8 * v118);
LABEL_167:
                          *v117 = v110;
                        }
                        ++*((_QWORD *)&v268 + 1);
LABEL_169:
                        v119 = v265;
                        if ((unint64_t)v265 >= v266)
                        {
                          v122 = (char *)__p;
                          v123 = (v265 - (_BYTE *)__p) >> 2;
                          v124 = v123 + 1;
                          v72 = v238;
                          if ((unint64_t)(v123 + 1) >> 62)
                            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                          v125 = v266 - (_QWORD)__p;
                          if ((uint64_t)(v266 - (_QWORD)__p) >> 1 > v124)
                            v124 = v125 >> 1;
                          v66 = (unint64_t)v125 >= 0x7FFFFFFFFFFFFFFCLL;
                          v126 = 0x3FFFFFFFFFFFFFFFLL;
                          if (!v66)
                            v126 = v124;
                          if (v126)
                          {
                            v126 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v126);
                            v119 = v265;
                            v122 = (char *)__p;
                            v72 = v238;
                          }
                          else
                          {
                            v127 = 0;
                          }
                          v128 = (char *)(v126 + 4 * v123);
                          *(_DWORD *)v128 = v84;
                          v120 = v128 + 4;
                          if (v119 == v122)
                          {
                            v121 = v241;
                          }
                          else
                          {
                            v121 = v241;
                            do
                            {
                              v129 = *((_DWORD *)v119 - 1);
                              v119 -= 4;
                              *((_DWORD *)v128 - 1) = v129;
                              v128 -= 4;
                            }
                            while (v119 != v122);
                          }
                          __p = v128;
                          v265 = v120;
                          v266 = v126 + 4 * v127;
                          if (v122)
                            operator delete(v122);
                        }
                        else
                        {
                          *(_DWORD *)v265 = v84;
                          v120 = v119 + 4;
                          v72 = v238;
                          v121 = v241;
                        }
                        v130 = v82 | (unint64_t)(v121 << 32);
                        v265 = v120;
                        size = v273.__r_.__value_.__l.__size_;
                        if (v273.__r_.__value_.__l.__size_ >= v273.__r_.__value_.__r.__words[2])
                        {
                          v133 = v273.__r_.__value_.__r.__words[0];
                          v134 = (uint64_t)(v273.__r_.__value_.__l.__size_ - v273.__r_.__value_.__r.__words[0]) >> 5;
                          v135 = v134 + 1;
                          if ((unint64_t)(v134 + 1) >> 59)
                            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                          v136 = v273.__r_.__value_.__r.__words[2] - v273.__r_.__value_.__r.__words[0];
                          if ((uint64_t)(v273.__r_.__value_.__r.__words[2] - v273.__r_.__value_.__r.__words[0]) >> 4 > v135)
                            v135 = v136 >> 4;
                          if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFE0)
                            v137 = 0x7FFFFFFFFFFFFFFLL;
                          else
                            v137 = v135;
                          if (v137 >> 59)
                            std::__throw_bad_array_new_length[abi:ne180100]();
                          v138 = operator new(32 * v137);
                          v139 = (std::string::size_type)v138 + 32 * v134;
                          *(_QWORD *)v139 = v130;
                          *(_QWORD *)(v139 + 8) = v233;
                          *(_QWORD *)(v139 + 16) = v272[0];
                          *(_QWORD *)(v139 + 23) = *(_QWORD *)((char *)v272 + 7);
                          *(_BYTE *)(v139 + 31) = v234;
                          v272[0] = 0;
                          *(_QWORD *)((char *)v272 + 7) = 0;
                          v132 = v139 + 32;
                          if (size == v133)
                          {
                            v273.__r_.__value_.__r.__words[0] = v139;
                            v273.__r_.__value_.__l.__size_ = v139 + 32;
                            v273.__r_.__value_.__r.__words[2] = (std::string::size_type)v138 + 32 * v137;
                            v73 = v232;
                          }
                          else
                          {
                            v73 = v232;
                            do
                            {
                              v140 = *(_QWORD *)(size - 32);
                              size -= 32;
                              *(_QWORD *)(v139 - 32) = v140;
                              v139 -= 32;
                              v141 = *(_OWORD *)(size + 8);
                              *(_QWORD *)(v139 + 24) = *(_QWORD *)(size + 24);
                              *(_OWORD *)(v139 + 8) = v141;
                              *(_QWORD *)(size + 16) = 0;
                              *(_QWORD *)(size + 24) = 0;
                              *(_QWORD *)(size + 8) = 0;
                            }
                            while (size != v133);
                            size = v273.__r_.__value_.__l.__size_;
                            v142 = v273.__r_.__value_.__r.__words[0];
                            v273.__r_.__value_.__r.__words[0] = v139;
                            v273.__r_.__value_.__l.__size_ = v132;
                            v273.__r_.__value_.__r.__words[2] = (std::string::size_type)v138 + 32 * v137;
                            if (size != v142)
                            {
                              do
                              {
                                if (*(char *)(size - 1) < 0)
                                  operator delete(*(void **)(size - 24));
                                size -= 32;
                              }
                              while (size != v142);
                              size = v142;
                            }
                          }
                          v72 = v238;
                          if (size)
                            operator delete((void *)size);
                        }
                        else
                        {
                          *(_QWORD *)v273.__r_.__value_.__l.__size_ = v130;
                          *(_QWORD *)(size + 8) = v233;
                          *(_QWORD *)(size + 16) = v272[0];
                          *(_QWORD *)(size + 23) = *(_QWORD *)((char *)v272 + 7);
                          *(_BYTE *)(size + 31) = v234;
                          v132 = size + 32;
                          v73 = v232;
                        }
                        v273.__r_.__value_.__l.__size_ = v132;
                        if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v245.__r_.__value_.__l.__data_);
                        goto LABEL_208;
                      }
                    }
                    break;
                  }
                  if (v81-- <= 1)
                    goto LABEL_133;
                  goto LABEL_117;
                }
LABEL_209:
                v143 = v72;
                v144 = (unint64_t)v261[1];
                if (v261[1])
                {
                  v145 = (uint8x8_t)vcnt_s8((int8x8_t)v261[1]);
                  v145.i16[0] = vaddlv_u8(v145);
                  if (v145.u32[0] > 1uLL)
                  {
                    v49 = v143;
                    if (v261[1] <= (void *)v143)
                      v49 = v143 % (unint64_t)v261[1];
                  }
                  else
                  {
                    v49 = ((unint64_t)v261[1] - 1) & v143;
                  }
                  v146 = (uint64_t **)*((_QWORD *)v261[0] + v49);
                  if (v146)
                  {
                    for (j = *v146; j; j = (uint64_t *)*j)
                    {
                      v148 = j[1];
                      if (v148 == v143)
                      {
                        if (*((_DWORD *)j + 4) == v238)
                          goto LABEL_282;
                      }
                      else
                      {
                        if (v145.u32[0] > 1uLL)
                        {
                          if ((void *)v148 >= v261[1])
                            v148 %= (unint64_t)v261[1];
                        }
                        else
                        {
                          v148 &= (unint64_t)v261[1] - 1;
                        }
                        if (v148 != v49)
                          break;
                      }
                    }
                  }
                }
                v149 = operator new(0x58uLL);
                v246[0] = v149;
                v246[1] = &v262;
                *v149 = 0;
                v149[1] = v143;
                *((_DWORD *)v149 + 4) = v238;
                *(_OWORD *)(v149 + 3) = *(_OWORD *)&v273.__r_.__value_.__l.__data_;
                v150 = v273.__r_.__value_.__r.__words[2];
                memset(&v273, 0, sizeof(v273));
                v151 = v274;
                v149[5] = v150;
                v149[6] = v151;
                *((_DWORD *)v149 + 14) = v275;
                v152 = *(_OWORD *)&v276.__r_.__value_.__l.__data_;
                v149[10] = *((_QWORD *)&v276.__r_.__value_.__l + 2);
                *((_OWORD *)v149 + 4) = v152;
                memset(&v276, 0, sizeof(v276));
                LOBYTE(v246[2]) = 1;
                v153 = (float)(unint64_t)(*((_QWORD *)&v262 + 1) + 1);
                if (!v144 || (float)(v263 * (float)v144) < v153)
                {
                  v154 = v144 < 3 || (v144 & (v144 - 1)) != 0;
                  v155 = v154 | (2 * v144);
                  v156 = vcvtps_u32_f32(v153 / v263);
                  if (v155 <= v156)
                    prime = (int8x8_t)v156;
                  else
                    prime = (int8x8_t)v155;
                  if (*(_QWORD *)&prime == 1)
                  {
                    prime = (int8x8_t)2;
                  }
                  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
                  {
                    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
                    v144 = (unint64_t)v261[1];
                  }
                  if (*(_QWORD *)&prime <= v144)
                  {
                    if (*(_QWORD *)&prime < v144)
                    {
                      v164 = vcvtps_u32_f32((float)*((unint64_t *)&v262 + 1) / v263);
                      if (v144 < 3
                        || (v165 = (uint8x8_t)vcnt_s8((int8x8_t)v144), v165.i16[0] = vaddlv_u8(v165), v165.u32[0] > 1uLL))
                      {
                        v164 = std::__next_prime(v164);
                      }
                      else
                      {
                        v166 = 1 << -(char)__clz(v164 - 1);
                        if (v164 >= 2)
                          v164 = v166;
                      }
                      if (*(_QWORD *)&prime <= v164)
                        prime = (int8x8_t)v164;
                      if (*(_QWORD *)&prime >= v144)
                      {
                        v144 = (unint64_t)v261[1];
                      }
                      else
                      {
                        if (prime)
                          goto LABEL_238;
                        v174 = v261[0];
                        v261[0] = 0;
                        if (v174)
                          operator delete(v174);
                        v144 = 0;
                        v261[1] = 0;
                      }
                    }
                  }
                  else
                  {
LABEL_238:
                    if (*(_QWORD *)&prime >> 61)
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    v158 = operator new(8 * *(_QWORD *)&prime);
                    v159 = v261[0];
                    v261[0] = v158;
                    if (v159)
                      operator delete(v159);
                    v160 = 0;
                    v261[1] = (void *)prime;
                    do
                      *((_QWORD *)v261[0] + v160++) = 0;
                    while (*(_QWORD *)&prime != v160);
                    v161 = (_QWORD **)v262;
                    if ((_QWORD)v262)
                    {
                      v162 = *(_QWORD *)(v262 + 8);
                      v163 = (uint8x8_t)vcnt_s8(prime);
                      v163.i16[0] = vaddlv_u8(v163);
                      if (v163.u32[0] > 1uLL)
                      {
                        if (v162 >= *(_QWORD *)&prime)
                          v162 %= *(_QWORD *)&prime;
                      }
                      else
                      {
                        v162 &= *(_QWORD *)&prime - 1;
                      }
                      *((_QWORD *)v261[0] + v162) = &v262;
                      for (k = *v161; k; v162 = v168)
                      {
                        v168 = k[1];
                        if (v163.u32[0] > 1uLL)
                        {
                          if (v168 >= *(_QWORD *)&prime)
                            v168 %= *(_QWORD *)&prime;
                        }
                        else
                        {
                          v168 &= *(_QWORD *)&prime - 1;
                        }
                        if (v168 != v162)
                        {
                          if (!*((_QWORD *)v261[0] + v168))
                          {
                            *((_QWORD *)v261[0] + v168) = v161;
                            goto LABEL_263;
                          }
                          *v161 = (_QWORD *)*k;
                          *k = **((_QWORD **)v261[0] + v168);
                          **((_QWORD **)v261[0] + v168) = k;
                          k = v161;
                        }
                        v168 = v162;
LABEL_263:
                        v161 = (_QWORD **)k;
                        k = (_QWORD *)*k;
                      }
                    }
                    v144 = (unint64_t)prime;
                  }
                  if ((v144 & (v144 - 1)) != 0)
                  {
                    if (v144 <= v143)
                      v49 = v143 % v144;
                    else
                      v49 = v143;
                  }
                  else
                  {
                    v49 = (v144 - 1) & v143;
                  }
                }
                v169 = (_QWORD *)*((_QWORD *)v261[0] + v49);
                v170 = v246[0];
                if (v169)
                {
                  *(_QWORD *)v246[0] = *v169;
                  goto LABEL_280;
                }
                *(_QWORD *)v246[0] = v262;
                *(_QWORD *)&v262 = v170;
                *((_QWORD *)v261[0] + v49) = &v262;
                if (*(_QWORD *)v170)
                {
                  v171 = *(_QWORD *)(*(_QWORD *)v170 + 8);
                  if ((v144 & (v144 - 1)) != 0)
                  {
                    if (v171 >= v144)
                      v171 %= v144;
                  }
                  else
                  {
                    v171 &= v144 - 1;
                  }
                  v169 = (char *)v261[0] + 8 * v171;
LABEL_280:
                  *v169 = v170;
                }
                v246[0] = 0;
                ++*((_QWORD *)&v262 + 1);
                std::unique_ptr<std::__hash_node<std::__hash_value_type<int,sgd_hoisting_idx_info>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,sgd_hoisting_idx_info>,void *>>>>::reset[abi:ne180100]((uint64_t)v246);
LABEL_282:
                if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v276.__r_.__value_.__l.__data_);
                v246[0] = &v273;
                std::vector<sgd_hoisting_idx_info::single_consumer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)v246);
              }
LABEL_285:
              if (v235)
              {
                v172 = (unint64_t *)&v235->__shared_owners_;
                do
                  v173 = __ldaxr(v172);
                while (__stlxr(v173 - 1, v172));
                if (!v173)
                {
                  ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
                  std::__shared_weak_count::__release_weak(v235);
                }
              }
            }
          }
          v4 = v243[1];
          goto LABEL_291;
        }
        if (*(_QWORD *)(v13 + 48) == 3)
        {
          v14 = *(unsigned __int16 **)v14;
          goto LABEL_15;
        }
      }
LABEL_291:
      ++v5;
    }
    while (v5 < v4);
  }
  if (*((_QWORD *)&v262 + 1))
  {
    v175 = (uint64_t *)v262;
    if ((_QWORD)v262)
    {
      v176 = -1;
      v177 = (uint64_t *)v262;
      do
      {
        if (*((_DWORD *)v177 + 14) > v176)
          v176 = *((_DWORD *)v177 + 14);
        v177 = (uint64_t *)*v177;
      }
      while (v177);
    }
    else
    {
      v176 = -1;
    }
    LODWORD(v272[0]) = v176;
    v178 = (uint64_t *)v254;
    if ((_QWORD)v254)
    {
      do
      {
        v179 = (int *)(v178 + 2);
        v180 = std::__hash_table<std::__hash_value_type<int,std::unordered_set<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_set<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_set<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_set<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v251, *((_DWORD *)v178 + 4), (_DWORD *)v178 + 4);
        memset(&v273, 0, sizeof(v273));
        memset(v246, 0, 24);
        v181 = *((int *)v178 + 4);
        v182 = v244[13] + 24 * (int)v181;
        v183 = *(int **)v182;
        v184 = *(int **)(v182 + 8);
        if (*(int **)v182 != v184)
        {
          v185 = 0;
          do
          {
            v186 = *v183;
            if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v178 + 3, *v183))
            {
              v187 = v244[7] + 24 * v186;
              if ((unint64_t)v185 >= v273.__r_.__value_.__r.__words[2])
              {
                v185 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v273.__r_.__value_.__l.__data_, v187);
              }
              else
              {
                if (*(char *)(v187 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(v185, *(const std::string::value_type **)v187, *(_QWORD *)(v187 + 8));
                }
                else
                {
                  v188 = *(_OWORD *)v187;
                  v185->__r_.__value_.__r.__words[2] = *(_QWORD *)(v187 + 16);
                  *(_OWORD *)&v185->__r_.__value_.__l.__data_ = v188;
                }
                ++v185;
              }
              v273.__r_.__value_.__l.__size_ = (std::string::size_type)v185;
            }
            ++v183;
          }
          while (v183 != v184);
          v181 = *v179;
        }
        v189 = v244[10] + 24 * (int)v181;
        v190 = *(int **)v189;
        v191 = *(int **)(v189 + 8);
        if (*(int **)v189 != v191)
        {
          do
          {
            v192 = *v190;
            if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v180 + 3, *v190))
            {
              v193 = v244[7] + 24 * v192;
              v194 = v246[1];
              if (v246[1] >= v246[2])
              {
                v196 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)v246, v193);
              }
              else
              {
                if (*(char *)(v193 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)v246[1], *(const std::string::value_type **)v193, *(_QWORD *)(v193 + 8));
                }
                else
                {
                  v195 = *(_OWORD *)v193;
                  *((_QWORD *)v246[1] + 2) = *(_QWORD *)(v193 + 16);
                  *v194 = v195;
                }
                v196 = (std::string *)((char *)v194 + 24);
              }
              v246[1] = v196;
            }
            ++v190;
          }
          while (v190 != v191);
          v181 = *v179;
        }
        v197 = *(_QWORD *)(*(_QWORD *)(v242 + 32) + 16 * v181);
        v199 = *(std::__shared_weak_count **)(v197 + 72);
        v245.__r_.__value_.__r.__words[0] = (std::string::size_type)v198;
        v245.__r_.__value_.__l.__size_ = (std::string::size_type)v199;
        if (v199)
        {
          v200 = (unint64_t *)&v199->__shared_owners_;
          do
            v201 = __ldxr(v200);
          while (__stxr(v201 + 1, v200));
        }
        v203 = v246[0];
        v202 = v246[1];
        *(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v198 + 320))(v198) + 8) = -1431655765
                                                                                             * ((unint64_t)(v202 - v203) >> 3);
        v204 = *v179;
        v248[0] = v204;
        v205 = (std::string *)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v242 + 56, v204, v248)+ 3);
        if (v205 != &v273)
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v205, (std::string *)v273.__r_.__value_.__l.__data_, (std::string *)v273.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v273.__r_.__value_.__l.__size_ - v273.__r_.__value_.__r.__words[0]) >> 3));
        v206 = *v179;
        v248[0] = v206;
        v207 = (void **)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v242 + 96, v206, v248)+ 3);
        if (v207 != v246)
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v207, (std::string *)v246[0], (std::string *)v246[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v246[1] - (char *)v246[0]) >> 3));
        if (v199)
        {
          v208 = (unint64_t *)&v199->__shared_owners_;
          do
            v209 = __ldaxr(v208);
          while (__stlxr(v209 - 1, v208));
          if (!v209)
          {
            ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
            std::__shared_weak_count::__release_weak(v199);
          }
        }
        v245.__r_.__value_.__r.__words[0] = (std::string::size_type)v246;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
        v246[0] = &v273;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v246);
        v178 = (uint64_t *)*v178;
      }
      while (v178);
      v175 = (uint64_t *)v262;
    }
    if (v175)
    {
      v210 = v242 + 56;
      do
      {
        if (*((char *)v175 + 87) < 0)
          std::string::__init_copy_ctor_external(&v273, (const std::string::value_type *)v175[8], v175[9]);
        else
          v273 = *(std::string *)(v175 + 8);
        v211 = v175[4] - v175[3];
        if ((int)(v211 >> 5) >= 1)
        {
          v212 = 0;
          v213 = v211 & 0x1FFFFFFFE0;
          do
          {
            v214 = (int *)(v175[3] + v212);
            v215 = *v214;
            v216 = *((_DWORD *)v175 + 4);
            v217 = v244[7];
            v246[0] = (void *)v215;
            v218 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v210, v215, v246);
            v219 = (const std::string *)(v217 + 24 * v216);
            std::string::operator=((std::string *)v218[3], v219);
            v246[0] = (void *)v215;
            v220 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v210, v215, v246);
            std::string::operator=((std::string *)(v220[3] + 48), (const std::string *)(v214 + 2));
            v246[0] = (void *)v215;
            v221 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v242 + 96, v215, v246);
            std::string::operator=((std::string *)v221[3], v219);
            v222 = *(int **)(v243[10] + 24 * *((int *)v175 + 12));
            if (*(_QWORD *)(v243[10] + 24 * *((int *)v175 + 12) + 8) - (_QWORD)v222 != 8)
              Espresso::throw_exception_selector<Espresso::invalid_state_error>("store_global does not have exactly one input");
            v223 = *((_DWORD *)v175 + 4);
            v224 = v244[7];
            v246[0] = (void *)*v222;
            v225 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v210, (unint64_t)v246[0], v246);
            std::string::operator=((std::string *)v225[3], (const std::string *)(v224 + 24 * v223));
            v212 += 32;
          }
          while (v213 != v212);
        }
        if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v273.__r_.__value_.__l.__data_);
        v175 = (uint64_t *)*v175;
      }
      while (v175);
    }
    v271 = 0;
    v226 = operator new(0x40uLL);
    *v226 = &off_1E2DB1818;
    v226[1] = v272;
    v226[2] = v259;
    v226[3] = &v267;
    v226[4] = v244;
    v226[5] = &v250;
    v226[6] = v261;
    v226[7] = &__p;
    v271 = v226;
    Espresso::transform_network_inplace(v242, (uint64_t)v270);
    v227 = v271;
    if (v271 == v270)
    {
      v228 = 4;
      v227 = v270;
    }
    else
    {
      if (!v271)
        goto LABEL_365;
      v228 = 5;
    }
    (*(void (**)(void))(*v227 + 8 * v228))();
  }
LABEL_365:
  std::__hash_table<std::__hash_value_type<int,std::unordered_set<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_set<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_set<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_set<int>>>>::~__hash_table((uint64_t)v251);
  std::__hash_table<std::__hash_value_type<int,std::unordered_set<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_set<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_set<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_set<int>>>>::~__hash_table((uint64_t)&v253);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v256);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v258);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v259);
  std::__hash_table<std::__hash_value_type<int,sgd_hoisting_idx_info>,std::__unordered_map_hasher<int,std::__hash_value_type<int,sgd_hoisting_idx_info>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,sgd_hoisting_idx_info>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,sgd_hoisting_idx_info>>>::~__hash_table((uint64_t)v261);
  if (__p)
  {
    v265 = (char *)__p;
    operator delete(__p);
  }
  return std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v267);
}

void sub_19175B2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  char a69;
  uint64_t v69;
  void *v71;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,sgd_hoisting_idx_info>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,sgd_hoisting_idx_info>,void *>>>>::reset[abi:ne180100]((uint64_t)&a33);
  sgd_hoisting_idx_info::~sgd_hoisting_idx_info((void **)(v69 - 176));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a38);
  std::__hash_table<std::__hash_value_type<int,std::unordered_set<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_set<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_set<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_set<int>>>>::~__hash_table((uint64_t)&a41);
  std::__hash_table<std::__hash_value_type<int,std::unordered_set<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_set<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_set<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_set<int>>>>::~__hash_table((uint64_t)&a47);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a53);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a58);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a63);
  std::__hash_table<std::__hash_value_type<int,sgd_hoisting_idx_info>,std::__unordered_map_hasher<int,std::__hash_value_type<int,sgd_hoisting_idx_info>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,sgd_hoisting_idx_info>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,sgd_hoisting_idx_info>>>::~__hash_table((uint64_t)&a69);
  v71 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v71;
    operator delete(v71);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&STACK[0x220]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a14);
  _Unwind_Resume(a1);
}

void std::vector<sgd_hoisting_idx_info::single_consumer_info>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 4;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sgd_hoisting_idx_info::~sgd_hoisting_idx_info(void **this)
{
  void **v2;

  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  v2 = this;
  std::vector<sgd_hoisting_idx_info::single_consumer_info>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t std::__hash_table<std::__hash_value_type<int,sgd_hoisting_idx_info>,std::__unordered_map_hasher<int,std::__hash_value_type<int,sgd_hoisting_idx_info>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,sgd_hoisting_idx_info>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,sgd_hoisting_idx_info>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<int const,sgd_hoisting_idx_info>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<int const,sgd_hoisting_idx_info>,0>(uint64_t a1)
{
  void **v2;

  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v2 = (void **)(a1 + 8);
  std::vector<sgd_hoisting_idx_info::single_consumer_info>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::__function::__func<Espresso::pass_sgd_hoisting::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_sgd_hoisting::run_on_network(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<Espresso::pass_sgd_hoisting::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_sgd_hoisting::run_on_network(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_1E2DB1818;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<Espresso::pass_sgd_hoisting::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_sgd_hoisting::run_on_network(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E2DB1818;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<Espresso::pass_sgd_hoisting::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_sgd_hoisting::run_on_network(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::operator()(uint64_t a1, Espresso::net *a2, uint64_t *a3)
{
  uint64_t v5;
  int v6;
  int64_t v7;
  uint64_t v9;
  __int128 v10;
  size_t size;
  std::string *v12;
  std::string *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *i;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  __int128 v23;
  Espresso::net *v24;
  uint64_t v25;
  uint64_t *v26;
  const std::string::value_type **v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t j;
  unint64_t v34;
  int **v35;
  int *v36;
  int *v37;
  int v38;
  uint64_t v39;
  std::string *v40;
  std::string *v41;
  std::string *v42;
  std::string *v43;
  std::string *v44;
  void **p_data;
  uint64_t v46;
  std::__shared_weak_count *v47;
  void *__p[2];
  uint64_t v49;
  char v50;
  int v51;
  int v52;
  std::string *v53;
  std::string *v54;
  std::string *v55;
  std::string *v56;
  std::string *v57;
  std::string *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  _QWORD v61[3];
  char v62;
  int v63;
  int v64;
  std::string v65;
  std::string v66;
  std::string **v67;
  char v68;
  std::string v69;
  uint64_t v70;
  std::string v71;
  std::string v72;
  std::string v73;
  __int128 v74;

  v5 = a1;
  *(_QWORD *)&v74 = *MEMORY[0x1E0C80C00];
  v6 = **(_DWORD **)(a1 + 8);
  if ((v6 & 0x80000000) == 0)
  {
    v7 = 0;
    do
    {
      if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(*(_QWORD **)(v5 + 16), v7)&& !std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(*(_QWORD **)(v5 + 24), v7))
      {
        Espresso::sequential_builder::add_layer_from_network((Espresso::sequential_builder *)a3, a2, v7);
        v6 = **(_DWORD **)(v5 + 8);
      }
    }
    while (v7++ < v6);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(v5 + 32) + 56) + 24 * **(int **)(v5 + 40);
  if (*(char *)(v9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)v9, *(_QWORD *)(v9 + 8));
  }
  else
  {
    v10 = *(_OWORD *)v9;
    v66.__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 16);
    *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v10;
  }
  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v66.__r_.__value_.__r.__words[2]);
  else
    size = v66.__r_.__value_.__l.__size_;
  std::string::basic_string[abi:ne180100]((uint64_t)&v65, size + 4);
  if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v65;
  else
    v12 = (std::string *)v65.__r_.__value_.__r.__words[0];
  if (size)
  {
    if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &v66;
    else
      v13 = (std::string *)v66.__r_.__value_.__r.__words[0];
    memmove(v12, v13, size);
  }
  strcpy((char *)v12 + size, "/neg");
  v61[2] = 897988541;
  v62 = 0;
  v64 = 0;
  v63 = 0;
  v61[0] = 3;
  v61[1] = 3212836864;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v71, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
  else
    v71 = v66;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v53 = (std::string *)&v56;
  LOBYTE(v54) = 0;
  v56 = (std::string *)operator new(0x18uLL);
  v57 = v56;
  v58 = v56 + 1;
  v57 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v58, (__int128 *)&v71, (__int128 *)&v72, v56);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v73, v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
  else
    v73 = v65;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v43 = (std::string *)&v53;
  LOBYTE(v44) = 0;
  v53 = (std::string *)operator new(0x18uLL);
  v54 = v53;
  v55 = v53 + 1;
  v54 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v55, (__int128 *)&v73, &v74, v53);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v59, a3, (uint64_t)__p, (uint64_t)&v65, (uint64_t)v61, (uint64_t)v56, (uint64_t)v57, (uint64_t *)&v53);
  v14 = v60;
  if (v60)
  {
    p_shared_owners = (unint64_t *)&v60->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v43 = (std::string *)&v53;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  v73.__r_.__value_.__r.__words[0] = (std::string::size_type)&v56;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49) < 0)
    operator delete(__p[0]);
  for (i = *(_QWORD **)(*(_QWORD *)(v5 + 48) + 16); i; i = (_QWORD *)*i)
  {
    v18 = i[4] - i[3];
    if ((int)(v18 >> 5) >= 1)
    {
      v19 = 0;
      v39 = (v18 >> 5);
      do
      {
        v20 = i[3];
        v49 = 897988541;
        v50 = 0;
        v51 = 0;
        v52 = 0;
        __p[0] = (void *)1;
        __p[1] = (void *)1065353216;
        std::string::basic_string[abi:ne180100]<0>(&v73, "elementwise");
        v21 = (int *)(v20 + 32 * v19);
        v22 = *(_QWORD *)(*(_QWORD *)(v5 + 32) + 56) + 24 * v21[1];
        if (*(char *)(v22 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v71, *(const std::string::value_type **)v22, *(_QWORD *)(v22 + 8));
        }
        else
        {
          v23 = *(_OWORD *)v22;
          v71.__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 16);
          *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v23;
        }
        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v72, v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
        else
          v72 = v65;
        v24 = a2;
        v25 = v5;
        v26 = a3;
        v43 = 0;
        v44 = 0;
        p_data = 0;
        v69.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
        v69.__r_.__value_.__s.__data_[8] = 0;
        v43 = (std::string *)operator new(0x30uLL);
        v44 = v43;
        p_data = (void **)&v43[2].__r_.__value_.__l.__data_;
        v27 = (const std::string::value_type **)(v21 + 2);
        v44 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (__int128 *)&v71, (__int128 *)&v73, v43);
        if (*((char *)v21 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v69, *v27, *((_QWORD *)v21 + 2));
        }
        else
        {
          v28 = *(_OWORD *)v27;
          v69.__r_.__value_.__r.__words[2] = *((_QWORD *)v21 + 3);
          *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v28;
        }
        v40 = 0;
        v41 = 0;
        v42 = 0;
        v67 = &v40;
        v68 = 0;
        v40 = (std::string *)operator new(0x18uLL);
        v41 = v40;
        v42 = v40 + 1;
        v41 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v42, (__int128 *)&v69, (__int128 *)&v70, v40);
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v46, v26, (uint64_t)&v73, (uint64_t)(v21 + 2), (uint64_t)__p, (uint64_t)v43, (uint64_t)v44, (uint64_t *)&v40);
        v29 = v47;
        if (v47)
        {
          v30 = (unint64_t *)&v47->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        v67 = &v40;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
        if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v69.__r_.__value_.__l.__data_);
        v69.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
        v32 = 0;
        a3 = v26;
        v5 = v25;
        a2 = v24;
        do
        {
          if (SHIBYTE(v72.__r_.__value_.__r.__words[v32 + 2]) < 0)
            operator delete(*(void **)((char *)&v71 + v32 * 8 + 24));
          v32 -= 3;
        }
        while (v32 != -6);
        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v73.__r_.__value_.__l.__data_);
        Espresso::sequential_builder::add_layer_from_network((Espresso::sequential_builder *)a3, v24, *v21);
        ++v19;
      }
      while (v19 != v39);
    }
  }
  for (j = **(int **)(v5 + 8) + 1; j < (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 4; j = v34)
  {
    v34 = j + 1;
    Espresso::sequential_builder::add_layer_from_network((Espresso::sequential_builder *)a3, a2, j);
  }
  v35 = *(int ***)(v5 + 56);
  v36 = *v35;
  v37 = v35[1];
  if (*v35 != v37)
  {
    do
    {
      v38 = *v36++;
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__erase_unique<std::string>((_QWORD *)(a3[10] + 136), (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 56) + 24 * v38));
    }
    while (v36 != v37);
  }
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
}

void sub_19175BD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  *(_QWORD *)(v58 - 144) = &a35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v58 - 144));
  if (*(char *)(v58 - 169) < 0)
    operator delete(*(void **)(v58 - 192));
  if (a27 < 0)
    operator delete(__p);
  if (a52 < 0)
    operator delete(a47);
  if (a58 < 0)
    operator delete(a53);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::pass_sgd_hoisting::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_sgd_hoisting::run_on_network(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso17pass_sgd_hoisting14run_on_networkERNS_3netEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::pass_sgd_hoisting::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_sgd_hoisting::run_on_network(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::target_type()
{
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<int,sgd_hoisting_idx_info>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,sgd_hoisting_idx_info>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<int const,sgd_hoisting_idx_info>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void Espresso::MPSGraphCompilerEngine::compiler::~compiler(Espresso::MPSGraphCompilerEngine::compiler *this)
{
  Espresso::MPSGraphCompilerEngine::compiler::~compiler(this);
  JUMPOUT(0x19401CD90);
}

{
  void *v2;
  std::__shared_weak_count *v3;
  void **v4;

  *(_QWORD *)this = &off_1E2D8C930;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  std::unique_ptr<std::map<int,std::unique_ptr<MIL::IRProgram>>>::reset[abi:ne180100]((uint64_t *)this + 26, 0);
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*((char **)this + 24));
  std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::destroy(*((_QWORD **)this + 21));
  std::__tree<std::__value_type<unsigned long,std::vector<std::string>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<std::string>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<std::string>>>>::destroy(*((char **)this + 18));

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  *(_QWORD *)this = off_1E2D94680;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)this + 56, *((_QWORD **)this + 8));
  v4 = (void **)((char *)this + 32);
  std::vector<Espresso::net_compiler_segment_based::segment_t>::__destroy_vector::operator()[abi:ne180100](&v4);
  *(_QWORD *)this = off_1E2D5FD08;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void Espresso::MPSGraphCompilerEngine::compiler::build(_QWORD *a1, uint64_t a2)
{
  __int128 *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  __int128 *i;
  char *v11;
  const void *v12;
  void *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  int v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t j;
  char v29;
  uint64_t v30;
  __int128 **v31;
  __int128 *v32;
  __int128 *v33;
  char *v34;
  const void *v35;
  void *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  int v41;
  _QWORD *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t k;
  unint64_t *v54;
  unint64_t v55;
  std::runtime_error *v56;
  std::runtime_error *exception;
  std::__shared_weak_count *v58;
  uint64_t **v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  _QWORD *v65;
  char *v66;
  std::__shared_weak_count *v67;
  char *v68;
  std::__shared_weak_count *v69;
  void *v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  _OWORD v74[2];
  int v75;
  __int128 *v76[3];
  _QWORD v77[2];
  void *__p;
  void *v79;
  __int128 *v80[5];
  void *v81[7];

  v81[5] = *(void **)MEMORY[0x1E0C80C00];
  if (a1)
  {
    v65 = a1;
    Espresso::MILUtil::CreateMILContext((Espresso::MILUtil *)v80);
    std::shared_ptr<MIL::MILContext>::operator=[abi:ne180100]<MIL::MILContext,std::default_delete<MIL::MILContext>,void>(v65 + 27, (uint64_t *)v80);
    v4 = v80[0];
    v80[0] = 0;
    if (v4)
      (*(void (**)(__int128 *))(*(_QWORD *)v4 + 8))(v4);
  }
  Espresso::net_compiler_segment_based::build(a1, a2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5 || (v6 = std::__shared_weak_count::lock(v5)) == 0 || (v58 = v6, (v60 = (uint64_t *)a1[1]) == 0))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  memset(v74, 0, sizeof(v74));
  v75 = 1065353216;
  v7 = a1[4];
  v59 = (uint64_t **)a1;
  v61 = a1[5];
  if (v7 != v61)
  {
    do
    {
      std::unordered_set<std::string>::unordered_set((uint64_t)v80, v7 + 16);
      v62 = v7;
      std::unordered_set<std::string>::unordered_set((uint64_t)v81, v7 + 56);
      v8 = 0;
      v9 = 0;
      do
      {
        v64 = v8;
        for (i = v80[5 * v9 + 2]; i; i = *(__int128 **)i)
        {
          v76[0] = i + 1;
          v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v60 + 17), (unsigned __int8 *)i + 16, v76);
          v12 = (const void *)*((_QWORD *)v11 + 5);
          if (!v12
          {
            v56 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
            Espresso::invalid_state_error::invalid_state_error(v56);
          }
          v14 = (uint64_t)v13;
          v15 = (std::__shared_weak_count *)*((_QWORD *)v11 + 6);
          if (v15)
          {
            p_shared_owners = (unint64_t *)&v15->__shared_owners_;
            do
              v17 = __ldxr(p_shared_owners);
            while (__stxr(v17 + 1, p_shared_owners));
          }
          v18 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::compute_path>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::compute_path>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::compute_path>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v59 + 23, (_QWORD *)i + 2, (uint64_t)(i + 1))+ 14);
          v19 = (std::__shared_weak_count *)operator new(0x98uLL);
          v19->__shared_owners_ = 0;
          v20 = (unint64_t *)&v19->__shared_owners_;
          v19->__shared_weak_owners_ = 0;
          v19->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC8C8;
          *(_OWORD *)&v19[2].__shared_weak_owners_ = 0u;
          *(_OWORD *)&v19[3].__shared_owners_ = 0u;
          *(_OWORD *)&v19[4].__shared_weak_owners_ = 0u;
          *(_OWORD *)&v19[5].__shared_owners_ = 0u;
          v19[5].__shared_weak_owners_ = 0;
          v19[6].__vftable = 0;
          *(_OWORD *)&v19[1].__shared_owners_ = 0u;
          v19[2].std::__shared_count = 0u;
          v19[4].std::__shared_count = 0u;
          LODWORD(v19[2].__vftable) = 1065353216;
          v19[2].__shared_owners_ = 0x1FFFFFFFFLL;
          v19[2].__shared_weak_owners_ = 0;
          v19[3].__vftable = 0;
          LOBYTE(v19[3].__shared_weak_owners_) = 0;
          v19[3].__shared_owners_ = 0;
          v19[5].__vftable = 0;
          v19[5].__shared_owners_ = 0;
          LOBYTE(v19[6].__vftable) = 0;
          v19[4].__vftable = 0;
          v19[4].__shared_owners_ = 0;
          LOBYTE(v19[4].__shared_weak_owners_) = 0;
          v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2D8C7A8;
          LOBYTE(v19[1].__shared_owners_) = 1;
          HIDWORD(v19[1].__shared_owners_) = v18;
          Espresso::abstract_blob_container::shape((char *)v76, v14);
          v72 = v19 + 1;
          v73 = v19;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          (*(void (**)(uint64_t, __int128 **, std::__shared_weak_count **))(*(_QWORD *)v14 + 16))(v14, v76, &v72);
          v22 = v73;
          if (v73)
          {
            v23 = (unint64_t *)&v73->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v74, (uint64_t)(i + 1), (uint64_t)(i + 1));
          if (__p)
          {
            v79 = __p;
            operator delete(__p);
          }
          do
            v25 = __ldaxr(v20);
          while (__stlxr(v25 - 1, v20));
          if (v25)
          {
            if (v15)
              goto LABEL_29;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
            if (v15)
            {
LABEL_29:
              v26 = (unint64_t *)&v15->__shared_owners_;
              do
                v27 = __ldaxr(v26);
              while (__stlxr(v27 - 1, v26));
              if (!v27)
              {
                ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                std::__shared_weak_count::__release_weak(v15);
              }
            }
          }
        }
        v8 = 1;
        v9 = 1;
      }
      while ((v64 & 1) == 0);
      for (j = 5; j != -5; j -= 5)
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v80[j]);
      v7 = v62 + 120;
    }
    while (v62 + 120 != v61);
  }
  memset(v76, 0, sizeof(v76));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v76, v60[80], v60[81], 0xAAAAAAAAAAAAAAABLL * ((v60[81] - v60[80]) >> 3));
  v77[0] = 0;
  v77[1] = 0;
  __p = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v77, v60[83], v60[84], 0xAAAAAAAAAAAAAAABLL * ((v60[84] - v60[83]) >> 3));
  v29 = 0;
  v30 = 0;
  do
  {
    v63 = v29;
    v31 = &v76[3 * v30];
    v32 = *v31;
    v33 = v31[1];
    while (v32 != v33)
    {
      v80[0] = v32;
      v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v60 + 17), (unsigned __int8 *)v32, v80);
      v35 = (const void *)*((_QWORD *)v34 + 5);
      if (v35)
      {
        if (v36)
        {
          v37 = (uint64_t)v36;
          v38 = (std::__shared_weak_count *)*((_QWORD *)v34 + 6);
          v70 = v36;
          v71 = v38;
          if (v38)
          {
            v39 = (unint64_t *)&v38->__shared_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
          }
          if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v74, (uint64_t)v32))
          {
            if (!v38)
              goto LABEL_68;
LABEL_64:
            v51 = (unint64_t *)&v38->__shared_owners_;
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
            goto LABEL_68;
          }
          v41 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::compute_path>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::compute_path>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::compute_path>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v59 + 23, v32, (uint64_t)v32)+ 14);
          v42 = operator new(0x98uLL);
          v42[1] = 0;
          v43 = v42 + 1;
          v42[2] = 0;
          *v42 = &off_1E2DBC8C8;
          *((_OWORD *)v42 + 4) = 0u;
          *((_OWORD *)v42 + 5) = 0u;
          *((_OWORD *)v42 + 7) = 0u;
          *((_OWORD *)v42 + 8) = 0u;
          v42[17] = 0;
          v42[18] = 0;
          *((_OWORD *)v42 + 2) = 0u;
          *((_OWORD *)v42 + 3) = 0u;
          *((_OWORD *)v42 + 6) = 0u;
          *((_DWORD *)v42 + 12) = 1065353216;
          v42[7] = 0x1FFFFFFFFLL;
          v42[8] = 0;
          v42[9] = 0;
          *((_BYTE *)v42 + 88) = 0;
          v42[10] = 0;
          v42[15] = 0;
          v42[16] = 0;
          *((_BYTE *)v42 + 144) = 0;
          v42[12] = 0;
          v42[13] = 0;
          *((_BYTE *)v42 + 112) = 0;
          v42[3] = &off_1E2D8C7A8;
          v68 = (char *)(v42 + 3);
          v69 = (std::__shared_weak_count *)v42;
          *((_BYTE *)v42 + 32) = 1;
          *((_DWORD *)v42 + 9) = v41;
          Espresso::abstract_blob_container::shape((char *)v80, v37);
          v66 = (char *)(v42 + 3);
          v67 = (std::__shared_weak_count *)v42;
          do
            v44 = __ldxr(v43);
          while (__stxr(v44 + 1, v43));
          (*(void (**)(uint64_t, __int128 **, char **))(*(_QWORD *)v37 + 16))(v37, v80, &v66);
          v45 = v67;
          if (v67)
          {
            v46 = (unint64_t *)&v67->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
          if (v81[0])
          {
            v81[1] = v81[0];
            operator delete(v81[0]);
          }
          v48 = v69;
          if (v69)
          {
            v49 = (unint64_t *)&v69->__shared_owners_;
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
          v38 = v71;
          if (v71)
            goto LABEL_64;
        }
      }
LABEL_68:
      v32 = (__int128 *)((char *)v32 + 24);
    }
    v29 = 1;
    v30 = 1;
  }
  while ((v63 & 1) == 0);
  for (k = 3; k != -3; k -= 3)
  {
    v80[0] = (__int128 *)&v76[k];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v80);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v74);
  v54 = (unint64_t *)&v58->__shared_owners_;
  do
    v55 = __ldaxr(v54);
  while (__stlxr(v55 - 1, v54));
  if (!v55)
  {
    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
    std::__shared_weak_count::__release_weak(v58);
  }
  Espresso::MPSGraphCompilerEngine::compiler::mil_context_in_memory_scoped::~mil_context_in_memory_scoped((Espresso::MPSGraphCompilerEngine::compiler::mil_context_in_memory_scoped *)&v65);
}

void sub_19175C6CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40)
{
  uint64_t v40;
  uint64_t v42;

  v42 = *(_QWORD *)(v40 - 192);
  *(_QWORD *)(v40 - 192) = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  _Unwind_Resume(exception_object);
}

void Espresso::MPSGraphCompilerEngine::compiler::dump_ir(Espresso *a1, uint64_t *a2)
{
  Espresso *v3;
  NSObject *v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t *v11;
  std::string *v12;
  void *v13;
  void (***v14)(uint64_t *__return_ptr, _QWORD);
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  char v21;
  std::string::size_type size;
  std::string::size_type i;
  uint64_t v24;
  char *v25;
  char *v26;
  void *v27;
  char *v28;
  BOOL v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  void *v33;
  size_t v34;
  std::__fs::filesystem::path *v35;
  char *v36;
  std::__fs::filesystem::path *v37;
  void *v38;
  void *v39;
  _QWORD *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  id v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  Espresso *v52;
  const char *v53;
  void **v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  std::string *v61;
  NSObject *v62;
  const std::__fs::filesystem::path *v63;
  Espresso *v64;
  const char *v65;
  NSObject *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__fs::filesystem::path *p_to;
  std::runtime_error *exception;
  char *v75;
  _QWORD *v76;
  uint64_t v77;
  Espresso *v78;
  id v79;
  id v80;
  void *v81[2];
  char v82;
  void *v83[2];
  char v84;
  void *v85[2];
  char v86;
  void *v87[2];
  char v88;
  void *v89[3];
  void *__p[2];
  char v91;
  void *v92[2];
  char v93;
  uint8_t buf[8];
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  _QWORD v99[5];
  std::__shared_weak_count *v100;
  std::string v101;
  void *v102;
  char v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  std::string *v106;
  std::__fs::filesystem::path v107;
  std::__fs::filesystem::path __to;
  std::string v109;
  std::__fs::filesystem::path v110;
  std::string v111;
  uint64_t v112;

  v3 = a1;
  v112 = *MEMORY[0x1E0C80C00];
  if (*((char *)a2 + 23) < 0)
  {
    if (a2[1])
    {
LABEL_3:
      if (!a1)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  else if (*((_BYTE *)a2 + 23))
  {
    goto LABEL_3;
  }
  Espresso::espresso_os_log_subsystem(a1, (const char *)a2);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_190DAF000, v5, OS_LOG_TYPE_DEBUG, "[Espresso::MPSGraphEngine] Provide a non-null directory for IR dump.", buf, 2u);
  }

  v3 = a1;
  if (a1)
  {
LABEL_9:
    v6 = (_QWORD *)operator new();
    v6[2] = 0;
    v6[1] = 0;
    *v6 = v6 + 1;
    *(_QWORD *)buf = 0;
    std::unique_ptr<std::map<int,std::unique_ptr<MIL::IRProgram>>>::reset[abi:ne180100]((uint64_t *)v3 + 26, (uint64_t)v6);
    std::unique_ptr<std::map<int,std::unique_ptr<MIL::IRProgram>>>::reset[abi:ne180100]((uint64_t *)buf, 0);
  }
LABEL_10:
  v104 = 0;
  v105 = 0;
  v78 = v3;
  v7 = (std::__shared_weak_count *)*((_QWORD *)v3 + 2);
  if (!v7
    || (v8 = std::__shared_weak_count::lock(v7), (v105 = v8) == 0)
    || (v9 = *((_QWORD *)v3 + 1), (v104 = v9) == 0))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = v8;
  std::string::basic_string[abi:ne180100]<0>(&v102, "net");
  v77 = v9;
  if (*((char *)a2 + 23) >= 0)
    v11 = a2;
  else
    v11 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v11);
  v80 = (id)objc_claimAutoreleasedReturnValue();
  if (*(char *)(v9 + 471) < 0)
    std::string::__init_copy_ctor_external(&v101, *(const std::string::value_type **)(v9 + 448), *(_QWORD *)(v9 + 456));
  else
    v101 = *(std::string *)(v9 + 448);
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v101.__r_.__value_.__l.__size_)
    {
      v12 = (std::string *)v101.__r_.__value_.__r.__words[0];
      goto LABEL_24;
    }
LABEL_25:
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v80, 1, 0, 0);
    goto LABEL_26;
  }
  if (!*((_BYTE *)&v101.__r_.__value_.__s + 23))
    goto LABEL_25;
  v12 = &v101;
LABEL_24:
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v12);
  v13 = v80;
  v80 = (id)objc_claimAutoreleasedReturnValue();
LABEL_26:

  v14 = (void (***)(uint64_t *__return_ptr, _QWORD))*((_QWORD *)v78 + 13);
  v99[0] = MEMORY[0x1E0C809B0];
  v99[1] = 3321888768;
  v99[2] = ___ZN8Espresso22MPSGraphCompilerEngine8compiler7dump_irERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke;
  v99[3] = &__block_descriptor_48_ea8_32c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE_e10_v16__0r_v8l;
  v99[4] = v77;
  v100 = v10;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v16 = __ldxr(p_shared_owners);
  while (__stxr(v16 + 1, p_shared_owners));
  Espresso::abstract_context::compute_batch_sync(v14, v99);
  buf[0] = 1;
  v95 = 0u;
  v96 = 0u;
  v97 = 0u;
  v98 = 0u;
  *(_DWORD *)&buf[4] = 723714120;
  kdebug_trace();
  v17 = (_QWORD *)(v77 + 592);
  if (*(char *)(v77 + 615) < 0)
  {
    if (*(_QWORD *)(v77 + 600))
    {
LABEL_33:
      v17 = (_QWORD *)*v17;
      goto LABEL_34;
    }
  }
  else if (*(_BYTE *)(v77 + 615))
  {
    goto LABEL_34;
  }
  v17 = (_QWORD *)(v77 + 616);
  if (*(char *)(v77 + 639) < 0)
    goto LABEL_33;
LABEL_34:
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", v17, 1);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "stringByDeletingLastPathComponent");
  v79 = (id)objc_claimAutoreleasedReturnValue();

  v75 = (char *)a2;
  v76 = (_QWORD *)*((_QWORD *)v78 + 26);
  v19 = v76 + 1;
  v20 = (_QWORD *)*v76;
  if ((_QWORD *)*v76 == v76 + 1)
    goto LABEL_62;
  v21 = 0;
  do
  {
    MIL::Util::FindBlobFilePaths();
    size = v110.__pn_.__r_.__value_.__l.__size_;
    for (i = v110.__pn_.__r_.__value_.__r.__words[0]; i != size; i += 24)
    {
      if (*(char *)(i + 23) < 0)
      {
        v25 = *(char **)i;
        v24 = *(_QWORD *)(i + 8);
      }
      else
      {
        v24 = *(unsigned __int8 *)(i + 23);
        v25 = (char *)i;
      }
      if (v24 >= 16)
      {
        v26 = &v25[v24];
        v27 = v25;
        do
        {
          v28 = (char *)memchr(v27, 101, v24 - 15);
          if (!v28)
            break;
          v29 = *(_QWORD *)v28 == 0x6F73736572707365 && *((_QWORD *)v28 + 1) == 0x737468676965772ELL;
          if (v29)
          {
            if (v28 != v26 && v28 - v25 != -1)
            {
              v21 = 1;
              goto LABEL_54;
            }
            break;
          }
          v27 = v28 + 1;
          v24 = v26 - (_BYTE *)v27;
        }
        while (v26 - (_BYTE *)v27 >= 16);
      }
    }
LABEL_54:
    v109.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
    v30 = (_QWORD *)v20[1];
    if (v30)
    {
      do
      {
        v31 = v30;
        v30 = (_QWORD *)*v30;
      }
      while (v30);
    }
    else
    {
      do
      {
        v31 = (_QWORD *)v20[2];
        v29 = *v31 == (_QWORD)v20;
        v20 = v31;
      }
      while (!v29);
    }
    v20 = v31;
  }
  while (v31 != v19);
  if ((v21 & 1) == 0)
  {
LABEL_62:
    v33 = (void *)MEMORY[0x1E0CB3940];
    if (*((char *)a2 + 23) >= 0)
      v34 = *((unsigned __int8 *)a2 + 23);
    else
      v34 = a2[1];
    std::string::basic_string[abi:ne180100]((uint64_t)&v110, v34 + 8);
    if ((v110.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = &v110;
    else
      v35 = (std::__fs::filesystem::path *)v110.__pn_.__r_.__value_.__r.__words[0];
    if (v34)
    {
      if (v75[23] >= 0)
        v36 = v75;
      else
        v36 = *(char **)v75;
      memmove(v35, v36, v34);
    }
    strcpy((char *)v35 + v34, "/weights");
    if ((v110.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = &v110;
    else
      v37 = (std::__fs::filesystem::path *)v110.__pn_.__r_.__value_.__r.__words[0];
    objc_msgSend(v33, "stringWithUTF8String:", v37);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    if (SHIBYTE(v110.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v110.__pn_.__r_.__value_.__l.__data_);
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v38, 0, 0, 0);

    v32 = 0;
  }
  else
  {
    v32 = 1;
  }
  v40 = (_QWORD *)*v76;
  if ((_QWORD *)*v76 != v19)
  {
    do
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("model.mil"));
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v80, "stringByAppendingPathComponent:", v41);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      v43 = v42;
      if (v32)
      {
        v44 = v40[5];
        std::string::basic_string[abi:ne180100]<0>(v92, (char *)objc_msgSend(objc_retainAutorelease(v42), "UTF8String"));
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(objc_retainAutorelease(v79), "UTF8String"));
        memset(v89, 0, sizeof(v89));
        Espresso::MILUtil::SerializeProgram(v44, (uint64_t)v92, (uint64_t)__p, (uint64_t)v89, 0, 0);
        if (v91 < 0)
          operator delete(__p[0]);
        if (v93 < 0)
          operator delete(v92[0]);
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("weights/weight.bin"));
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v80, "stringByAppendingPathComponent:", v45);
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        v47 = v40[5];
        std::string::basic_string[abi:ne180100]<0>(v87, (char *)objc_msgSend(objc_retainAutorelease(v43), "UTF8String"));
        std::string::basic_string[abi:ne180100]<0>(v85, (char *)objc_msgSend(objc_retainAutorelease(v80), "UTF8String"));
        v48 = objc_retainAutorelease(v46);
        std::string::basic_string[abi:ne180100]<0>(v83, (char *)objc_msgSend(v48, "UTF8String"));
        Espresso::MILUtil::SerializeProgram(v47, (uint64_t)v87, (uint64_t)v85, (uint64_t)v83, 0, 0);
        if (v84 < 0)
          operator delete(v83[0]);
        if (v86 < 0)
          operator delete(v85[0]);
        if (v88 < 0)
          operator delete(v87[0]);

      }
      v49 = (_QWORD *)v40[1];
      if (v49)
      {
        do
        {
          v50 = v49;
          v49 = (_QWORD *)*v49;
        }
        while (v49);
      }
      else
      {
        do
        {
          v50 = (_QWORD *)v40[2];
          v29 = *v50 == (_QWORD)v40;
          v40 = v50;
        }
        while (!v29);
      }
      v40 = v50;
    }
    while (v50 != v19);
  }
  if ((v32 & 1) != 0)
  {
    v51 = *(_QWORD *)(v77 + 576);
    if (v51)
      v52 = (Espresso *)(*(_QWORD *(**)(void **__return_ptr))(*(_QWORD *)v51 + 40))(v81);
    else
      v52 = (Espresso *)std::string::basic_string[abi:ne180100]<0>(v81, "");
    if (v82 < 0)
    {
      if (v81[1])
      {
        v54 = (void **)v81[0];
        goto LABEL_107;
      }
    }
    else if (v82)
    {
      v54 = v81;
LABEL_107:
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v54);
      v55 = (id)objc_claimAutoreleasedReturnValue();
      v56 = v80;
      v57 = v79;
      v58 = objc_retainAutorelease(v55);
      v107.__pn_.__r_.__value_.__r.__words[0] = objc_msgSend(v58, "UTF8String");
      std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v109, (std::string **)&v107);
      v59 = objc_retainAutorelease(v57);
      v111.__r_.__value_.__r.__words[0] = objc_msgSend(v59, "UTF8String");
      std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&__to.__pn_, (std::string **)&v111);
      std::__fs::filesystem::relative[abi:ne180100]((const std::__fs::filesystem::path *)&v109, &__to, &v110);
      if (SHIBYTE(__to.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__to.__pn_.__r_.__value_.__l.__data_);
      if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v109.__r_.__value_.__l.__data_);
      v60 = objc_retainAutorelease(v56);
      __to.__pn_.__r_.__value_.__r.__words[0] = objc_msgSend(v60, "UTF8String");
      v61 = std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v109, (std::string **)&__to);
      std::__fs::filesystem::operator/[abi:ne180100](&v110, (uint64_t)v61, &__to);
      std::__fs::filesystem::path::parent_path[abi:ne180100]((uint64_t)&v107, &__to);
      std::__fs::filesystem::__create_directory(&v107, 0);
      v62 = objc_retainAutorelease(v58);
      v106 = (std::string *)-[NSObject UTF8String](v62, "UTF8String");
      v63 = (const std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v111, &v106);
      std::__fs::filesystem::__copy(v63, &__to, (std::__fs::filesystem::copy_options)0, 0);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v111.__r_.__value_.__l.__data_);
      Espresso::espresso_os_log_subsystem(v64, v65);
      v66 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
      {
        p_to = &__to;
        if ((__to.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_to = (std::__fs::filesystem::path *)__to.__pn_.__r_.__value_.__r.__words[0];
        LODWORD(v111.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v111.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_to;
        _os_log_debug_impl(&dword_190DAF000, v66, OS_LOG_TYPE_DEBUG, "[MPSGraphCompilerCompiler::dump_ir] weights dumped to: %s", (uint8_t *)&v111, 0xCu);
      }

      if (SHIBYTE(v107.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v107.__pn_.__r_.__value_.__l.__data_);
      if (SHIBYTE(__to.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__to.__pn_.__r_.__value_.__l.__data_);
      if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v109.__r_.__value_.__l.__data_);
      if (SHIBYTE(v110.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v110.__pn_.__r_.__value_.__l.__data_);

LABEL_125:
      if (v82 < 0)
        operator delete(v81[0]);
      goto LABEL_127;
    }
    Espresso::espresso_os_log_subsystem(v52, v53);
    v62 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v110.__pn_.__r_.__value_.__l.__data_) = 0;
      _os_log_debug_impl(&dword_190DAF000, v62, OS_LOG_TYPE_DEBUG, "[MPSGraphCompilerCompiler::dump_ir] Failed to find weights file, or network does not have weights.", (uint8_t *)&v110, 2u);
    }
    goto LABEL_125;
  }
LABEL_127:

  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)buf);
  v67 = v100;
  if (v100)
  {
    v68 = (unint64_t *)&v100->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v101.__r_.__value_.__l.__data_);

  if (v103 < 0)
    operator delete(v102);
  v70 = v105;
  if (v105)
  {
    v71 = (unint64_t *)&v105->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (v78)
    std::unique_ptr<std::map<int,std::unique_ptr<MIL::IRProgram>>>::reset[abi:ne180100]((uint64_t *)v78 + 26, 0);
}

void sub_19175D394(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _Unwind_Exception *exception_objecta, uint64_t a15, void *a16, void *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a64;
  char a69;
  void *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  Espresso *v74;
  const char *v75;
  NSObject *v76;
  uint64_t v77;

  if (*(char *)(v72 - 105) < 0)
    operator delete(*(void **)(v72 - 128));
  if (a2 == 1)
  {
    v74 = (Espresso *)__cxa_begin_catch(a1);
    Espresso::espresso_os_log_subsystem(v74, v75);
    v76 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
    {
      v77 = (*(uint64_t (**)(Espresso *))(*(_QWORD *)v74 + 16))(v74);
      *(_DWORD *)(v72 - 128) = 136315138;
      *(_QWORD *)(v72 - 124) = v77;
      _os_log_debug_impl(&dword_190DAF000, v76, OS_LOG_TYPE_DEBUG, "[MPSGraphCompilerCompiler::dump_ir] failed to dump weights file - maybe it already exists? Error: %s", (uint8_t *)(v72 - 128), 0xCu);
    }

    __cxa_end_catch();
    JUMPOUT(0x19175D144);
  }
  if (*(char *)(v72 - 209) < 0)
    operator delete(*(void **)(v72 - 232));
  if (*(char *)(v72 - 185) < 0)
    operator delete(*(void **)(v72 - 208));
  if (*(char *)(v72 - 161) < 0)
    operator delete(*(void **)(v72 - 184));
  if (*(char *)(v72 - 137) < 0)
    operator delete(*(void **)(v72 - 160));

  if (a23 < 0)
    operator delete(__p);

  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&a42);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a10);
  if (a63 < 0)
    operator delete(a58);

  if (a69 < 0)
    operator delete(a64);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v72 - 256);
  if (a15)
    std::unique_ptr<std::map<int,std::unique_ptr<MIL::IRProgram>>>::reset[abi:ne180100]((uint64_t *)(a15 + 208), 0);
  _Unwind_Resume(a1);
}

void sub_19175D3E8()
{
  __cxa_end_catch();
  JUMPOUT(0x19175D3F0);
}

void sub_19175D404(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_19175D43C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;

  if (*(char *)(v26 - 185) < 0)
    operator delete(*(void **)(v26 - 208));
  if (*(char *)(v26 - 161) < 0)
    JUMPOUT(0x19175D52CLL);

  if (a23 < 0)
    JUMPOUT(0x19175D580);
  JUMPOUT(0x19175D6A8);
}

void sub_19175D454()
{
  JUMPOUT(0x19175D548);
}

void sub_19175D45C()
{
  void *v0;

  JUMPOUT(0x19175D6C0);
}

void sub_19175D468()
{
  JUMPOUT(0x19175D6D0);
}

void sub_19175D474()
{
  JUMPOUT(0x19175D47CLL);
}

void sub_19175D500()
{
  uint64_t v0;

  if (*(char *)(v0 - 209) < 0)
    operator delete(*(void **)(v0 - 232));
  JUMPOUT(0x19175D410);
}

void sub_19175D558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *v66;
  void *v67;
  uint64_t v68;

  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&a39);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a10);
  if (a60 < 0)
    operator delete(a55);

  if (a66 < 0)
    operator delete(a61);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v68 - 256);
  if (a15)
    std::unique_ptr<std::map<int,std::unique_ptr<MIL::IRProgram>>>::reset[abi:ne180100]((uint64_t *)(a15 + 208), 0);
  _Unwind_Resume(a1);
}

void sub_19175D570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  uint64_t v66;

  if (*(char *)(v66 - 137) < 0)
    JUMPOUT(0x19175D580);

  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&a39);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a10);
  if (a60 < 0)
    operator delete(a55);

  if (a66 < 0)
    operator delete(a61);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v66 - 256);
  if (a15)
    std::unique_ptr<std::map<int,std::unique_ptr<MIL::IRProgram>>>::reset[abi:ne180100](a15 + 208, 0);
  _Unwind_Resume(a1);
}

void sub_19175D58C()
{
  void *v0;

  JUMPOUT(0x19175D6B0);
}

void sub_19175D598()
{
  JUMPOUT(0x19175D6B0);
}

void sub_19175D5A0()
{
  JUMPOUT(0x19175D6B8);
}

void sub_19175D5A8()
{
  JUMPOUT(0x19175D6BCLL);
}

void sub_19175D5B4()
{
  JUMPOUT(0x19175D6C0);
}

void sub_19175D5BC()
{
  JUMPOUT(0x19175D6D8);
}

void sub_19175D5C4()
{
  uint64_t v0;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v0 - 256);
  JUMPOUT(0x19175D6F8);
}

void sub_19175D5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a70;
  char a72;
  void *a73;
  char a74;
  void *v74;
  void *v75;
  void *v76;
  uint64_t v77;

  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&a54);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a10);
  if (a72 < 0)
    operator delete(a70);

  if (a74 < 0)
    operator delete(a73);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v77 - 256);
  if (a15)
    std::unique_ptr<std::map<int,std::unique_ptr<MIL::IRProgram>>>::reset[abi:ne180100]((uint64_t *)(a15 + 208), 0);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSGraphCompilerEngine::compiler::build_segment(uint64_t a1, uint64_t a2, int a3, __int128 *a4)
{
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t **v11;
  std::string::size_type *v12;
  std::string::size_type **v13;
  std::string::size_type size;
  std::string::size_type v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  __int128 v18;
  uint64_t **v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t Function;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t ExternalName;
  std::string *p_p;
  _OWORD *v36;
  __int128 v37;
  std::string::size_type v38;
  std::string *v39;
  _QWORD *v40;
  _QWORD *v41;
  BOOL v42;
  int v43;
  uint64_t **v44;
  uint64_t **v45;
  uint64_t **v46;
  uint64_t *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  int v54;
  __int128 v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t *v58;
  uint64_t v59;
  MIL::IRValueType **v60;
  std::string::size_type v61;
  uint64_t v62;
  int v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t **v66;
  uint64_t **v67;
  uint64_t v68;
  uint64_t *v69;
  MIL::Attributes::IOAliasInfo *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::runtime_error *exception;
  std::string __p;
  uint64_t v78;
  __int128 v79;
  uint64_t *v80;
  MIL::Attributes::IOAliasInfo *v81;
  __int128 v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  char v86[4];
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  __int128 v98;
  const void **v99[5];
  const void **v100[5];
  void *v101;
  void *v102;
  uint64_t v103;
  int v104[3];
  std::string v105;

  v104[0] = a3;
  v98 = *a4;
  std::unordered_set<std::string>::unordered_set((uint64_t)v99, (uint64_t)(a4 + 1));
  std::unordered_set<std::string>::unordered_set((uint64_t)v100, (uint64_t)a4 + 56);
  v101 = 0;
  v102 = 0;
  v103 = 0;
  std::vector<Espresso::platform>::__init_with_size[abi:ne180100]<Espresso::platform*,Espresso::platform*>(&v101, *((const void **)a4 + 12), *((_QWORD *)a4 + 13), (uint64_t)(*((_QWORD *)a4 + 13) - *((_QWORD *)a4 + 12)) >> 2);
  v96 = 0;
  v97 = 0;
  v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v7
    || (v8 = std::__shared_weak_count::lock(v7), (v97 = v8) == 0)
    || (v9 = *(_QWORD *)(a1 + 8), (v96 = v9) == 0))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = v8;
  v86[0] = 1;
  v88 = a3;
  v89 = v9;
  v90 = 0;
  v91 = 0;
  v92 = 0;
  v93 = v9;
  v94 = 0;
  v95 = 0;
  v87 = 723714112;
  kdebug_trace();
  std::set<std::string>::set[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>((uint64_t)&__p, v100[2]);
  v11 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1 + 160), a3, v104);
  v12 = (std::string::size_type *)(v11 + 6);
  v13 = (std::string::size_type **)(v11 + 5);
  std::__tree<std::string>::destroy((uint64_t)(v11 + 5), (char *)v11[6]);
  size = __p.__r_.__value_.__l.__size_;
  *(v12 - 1) = __p.__r_.__value_.__r.__words[0];
  *v12 = size;
  v15 = __p.__r_.__value_.__r.__words[2];
  v12[1] = __p.__r_.__value_.__r.__words[2];
  if (v15)
  {
    *(_QWORD *)(size + 16) = v12;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    size = 0;
  }
  else
  {
    *v13 = v12;
  }
  std::__tree<std::string>::destroy((uint64_t)&__p, (char *)size);
  v83 = v9;
  v84 = v10;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  v18 = v98;
  std::set<std::string>::set[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>((uint64_t)&__p, v99[2]);
  v19 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1 + 160), a3, v104)+ 5;
  v20 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)&v82 = *(_QWORD *)(a1 + 216);
  *((_QWORD *)&v82 + 1) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  Espresso::MILTranslator::TranslateSegment((MIL::Attributes::FlexibleShapeInfo *)&v85, (const Espresso::net *)&v83, v18, *((unint64_t *)&v18 + 1), &__p, v19, &v82);
  v23 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
  if (*((_QWORD *)&v82 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  std::__tree<std::string>::destroy((uint64_t)&__p, (char *)__p.__r_.__value_.__l.__size_);
  v26 = v84;
  if (v84)
  {
    v27 = (unint64_t *)&v84->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v85 + 40))(v85);
  std::string::basic_string[abi:ne180100]<0>(&__p, "main");
  MIL::IRProgram::GetFunction();
  MIL::Attributes::IOAliasInfo::Make();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v79 = 0uLL;
  v80 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "main");
  Function = MIL::IRProgram::GetFunction();
  v30 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Function + 128))(Function);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v33 = (_QWORD *)*v30;
  v31 = v30 + 1;
  v32 = v33;
  if (v33 != v31)
  {
    do
    {
      if (*((char *)v32 + 55) < 0)
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v32[4], v32[5]);
      else
        __p = *(std::string *)(v32 + 4);
      v78 = v32[7];
      ExternalName = MIL::Attributes::IOAliasInfo::TryGetExternalName();
      p_p = (std::string *)ExternalName;
      v36 = (_OWORD *)*((_QWORD *)&v79 + 1);
      if (ExternalName)
      {
        if (*((_QWORD *)&v79 + 1) < (unint64_t)v80)
        {
          if ((*(char *)(ExternalName + 23) & 0x80000000) == 0)
          {
            v37 = *(_OWORD *)ExternalName;
            v38 = *(_QWORD *)(ExternalName + 16);
            goto LABEL_37;
          }
          std::string::__init_copy_ctor_external(*((std::string **)&v79 + 1), *(const std::string::value_type **)ExternalName, *(_QWORD *)(ExternalName + 8));
LABEL_42:
          v39 = (std::string *)((char *)v36 + 24);
          goto LABEL_43;
        }
      }
      else
      {
        if (*((_QWORD *)&v79 + 1) < (unint64_t)v80)
        {
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(*((std::string **)&v79 + 1), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else
          {
            v37 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            v38 = __p.__r_.__value_.__r.__words[2];
LABEL_37:
            *(_QWORD *)(*((_QWORD *)&v79 + 1) + 16) = v38;
            *v36 = v37;
          }
          goto LABEL_42;
        }
        p_p = &__p;
      }
      v39 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v79, (uint64_t)p_p);
LABEL_43:
      *((_QWORD *)&v79 + 1) = v39;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v40 = (_QWORD *)v32[1];
      if (v40)
      {
        do
        {
          v41 = v40;
          v40 = (_QWORD *)*v40;
        }
        while (v40);
      }
      else
      {
        do
        {
          v41 = (_QWORD *)v32[2];
          v42 = *v41 == (_QWORD)v32;
          v32 = v41;
        }
        while (!v42);
      }
      v32 = v41;
    }
    while (v41 != v31);
  }
  v43 = v104[0];
  v44 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1 + 136), v104[0], v104);
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v44 + 5));
  *(_OWORD *)(v44 + 5) = v79;
  v44[7] = v80;
  v80 = 0;
  v79 = 0uLL;
  Espresso::MPSGraphEngine::SanitizeMILReshapes(v85);
  v45 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1 + 136), v43, v104);
  v46 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1 + 160), v43, v104);
  v47 = v45[5];
  std::string::basic_string[abi:ne180100]<0>(&__p, "main");
  v48 = MIL::IRProgram::GetFunction();
  v49 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 128))(v48);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v52 = (_QWORD *)*v49;
  v50 = v49 + 1;
  v51 = v52;
  if (v52 != v50)
  {
    do
    {
      v53 = MIL::IRValueType::AsTensorType((MIL::IRValueType *)v51[7]);
      v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 88))(v53);
      if (*((char *)v47 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)*v47, v47[1]);
      }
      else
      {
        v55 = *(_OWORD *)v47;
        __p.__r_.__value_.__r.__words[2] = v47[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v55;
      }
      Espresso::MPSGraphCompilerEngine::compiler::process_blob_tensor_type(a1, v54, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v56 = (_QWORD *)v51[1];
      if (v56)
      {
        do
        {
          v57 = v56;
          v56 = (_QWORD *)*v56;
        }
        while (v56);
      }
      else
      {
        do
        {
          v57 = (_QWORD *)v51[2];
          v42 = *v57 == (_QWORD)v51;
          v51 = v57;
        }
        while (!v42);
      }
      v47 += 3;
      v51 = v57;
    }
    while (v57 != v50);
  }
  v58 = v46[5];
  std::string::basic_string[abi:ne180100]<0>(&v105, "main");
  v59 = MIL::IRProgram::GetFunction();
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v59 + 160))(&__p);
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v105.__r_.__value_.__l.__data_);
  v61 = __p.__r_.__value_.__l.__size_;
  v60 = (MIL::IRValueType **)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
  {
    do
    {
      v62 = MIL::IRValueType::AsTensorType(*v60);
      v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 88))(v62);
      if (*((char *)v58 + 55) < 0)
        std::string::__init_copy_ctor_external(&v105, (const std::string::value_type *)v58[4], v58[5]);
      else
        v105 = *(std::string *)(v58 + 4);
      Espresso::MPSGraphCompilerEngine::compiler::process_blob_tensor_type(a1, v63, &v105);
      v64 = (uint64_t *)v58[1];
      v65 = v58;
      if (v64)
      {
        do
        {
          v58 = v64;
          v64 = (uint64_t *)*v64;
        }
        while (v64);
      }
      else
      {
        do
        {
          v58 = (uint64_t *)v65[2];
          v42 = *v58 == (_QWORD)v65;
          v65 = v58;
        }
        while (!v42);
      }
      if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v105.__r_.__value_.__l.__data_);
      ++v60;
    }
    while (v60 != (MIL::IRValueType **)v61);
    v60 = (MIL::IRValueType **)__p.__r_.__value_.__r.__words[0];
  }
  if (v60)
  {
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v60;
    operator delete(v60);
  }
  v66 = *(uint64_t ***)(a1 + 208);
  if (v66)
  {
    v67 = std::__tree<std::__value_type<Espresso::platform,void *>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,void *>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,void *>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform&&>,std::tuple<>>(v66, v43, v104);
    v68 = v85;
    v85 = 0;
    v69 = v67[5];
    v67[5] = (uint64_t *)v68;
    if (v69)
      (*(void (**)(uint64_t *))(*v69 + 8))(v69);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v79;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v70 = v81;
  v81 = 0;
  if (v70)
  {
    MIL::Attributes::IOAliasInfo::~IOAliasInfo(v70);
    MEMORY[0x19401CD90]();
  }
  v71 = v85;
  v85 = 0;
  if (v71)
    (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v86);
  v72 = v97;
  if (v97)
  {
    v73 = (unint64_t *)&v97->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  if (v101)
  {
    v102 = v101;
    operator delete(v101);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v100);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v99);
}

void sub_19175DE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, MIL::Attributes::IOAliasInfo *a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,char a38)
{
  uint64_t v38;
  uint64_t v40;

  *(_QWORD *)(v38 - 120) = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 120));
  std::unique_ptr<MIL::Attributes::IOAliasInfo>::reset[abi:ne180100](&a19);
  v40 = a26;
  a26 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&a27);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  Espresso::net_compiler_segment_based::segment_t::~segment_t((Espresso::net_compiler_segment_based::segment_t *)&a38);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSGraphCompilerEngine::compiler::set_priority(uint64_t result, int a2)
{
  *(_BYTE *)(result + 120) = 1;
  *(_DWORD *)(result + 124) = a2;
  return result;
}

uint64_t Espresso::MPSGraphCompilerEngine::compiler::clear_priority(uint64_t this)
{
  *(_BYTE *)(this + 120) = 0;
  return this;
}

uint64_t std::set<std::string>::set[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(uint64_t a1, const void **a2)
{
  uint64_t *v3;
  const void **v4;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2)
  {
    v4 = a2;
    do
    {
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)a1, v3, v4 + 2, (uint64_t)(v4 + 2));
      v4 = (const void **)*v4;
    }
    while (v4);
  }
  return a1;
}

void sub_19175E0A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

MIL::Attributes::IOAliasInfo *std::unique_ptr<MIL::Attributes::IOAliasInfo>::reset[abi:ne180100](MIL::Attributes::IOAliasInfo **a1)
{
  MIL::Attributes::IOAliasInfo *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    MIL::Attributes::IOAliasInfo::~IOAliasInfo(result);
    JUMPOUT(0x19401CD90);
  }
  return result;
}

uint64_t **Espresso::MPSGraphCompilerEngine::compiler::process_blob_tensor_type(uint64_t a1, int a2, _QWORD *a3)
{
  int v3;
  int v4;
  uint64_t **result;

  v3 = a2 - 2;
  if ((a2 - 2) >= 0xF || ((0x778Du >> v3) & 1) == 0)
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("[Espresso] MPSGraphEngine: unsupported type for I/O Tensors");
  v4 = dword_191AC9D58[v3];
  result = std::__tree<std::__value_type<std::string,Espresso::compute_path>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::compute_path>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::compute_path>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 184), a3, (uint64_t)a3);
  *((_DWORD *)result + 14) = v4;
  return result;
}

uint64_t **std::__tree<std::__value_type<std::string,Espresso::compute_path>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::compute_path>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::compute_path>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  _QWORD *v8;
  uint64_t **v9;
  char *v10;
  std::string *v11;
  uint64_t *v12;
  uint64_t *v13;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v5;
        v8 = v5 + 4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4))
          break;
        v5 = *v6;
        v9 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a2))
        return v6;
      v9 = v6 + 1;
      v5 = v6[1];
      if (!v5)
        goto LABEL_9;
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_9:
    v10 = (char *)operator new(0x40uLL);
    v11 = (std::string *)(v10 + 32);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      *((_QWORD *)v10 + 6) = *(_QWORD *)(a3 + 16);
    }
    *((_DWORD *)v10 + 14) = 0;
    *(_QWORD *)v10 = 0;
    *((_QWORD *)v10 + 1) = 0;
    *((_QWORD *)v10 + 2) = v6;
    *v9 = (uint64_t *)v10;
    v12 = (uint64_t *)**a1;
    v13 = (uint64_t *)v10;
    if (v12)
    {
      *a1 = v12;
      v13 = *v9;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v10;
}

void sub_19175E254(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso22MPSGraphCompilerEngine8compiler7dump_irERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  Espresso::net::__build(*(_QWORD *)(a1 + 32), a2, 0, 0xFFFFFFFFLL);
}

uint64_t *std::unique_ptr<std::map<int,std::unique_ptr<MIL::IRProgram>>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::__tree<std::__value_type<int,std::unique_ptr<MIL::IRProgram>>,std::__map_value_compare<int,std::__value_type<int,std::unique_ptr<MIL::IRProgram>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unique_ptr<MIL::IRProgram>>>>::destroy(*(_QWORD **)(v2 + 8));
    JUMPOUT(0x19401CD90);
  }
  return result;
}

void std::__tree<std::__value_type<int,std::unique_ptr<MIL::IRProgram>>,std::__map_value_compare<int,std::__value_type<int,std::unique_ptr<MIL::IRProgram>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unique_ptr<MIL::IRProgram>>>>::destroy(_QWORD *a1)
{
  uint64_t v2;

  if (a1)
  {
    std::__tree<std::__value_type<int,std::unique_ptr<MIL::IRProgram>>,std::__map_value_compare<int,std::__value_type<int,std::unique_ptr<MIL::IRProgram>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unique_ptr<MIL::IRProgram>>>>::destroy(*a1);
    std::__tree<std::__value_type<int,std::unique_ptr<MIL::IRProgram>>,std::__map_value_compare<int,std::__value_type<int,std::unique_ptr<MIL::IRProgram>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unique_ptr<MIL::IRProgram>>>>::destroy(a1[1]);
    v2 = a1[5];
    a1[5] = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    operator delete(a1);
  }
}

void Espresso::MPSGraphCompilerEngine::compiler::mil_context_in_memory_scoped::~mil_context_in_memory_scoped(Espresso::MPSGraphCompilerEngine::compiler::mil_context_in_memory_scoped *this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  __int128 v5;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v5 = 0uLL;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v1 + 216, &v5);
    v2 = (std::__shared_weak_count *)*((_QWORD *)&v5 + 1);
    if (*((_QWORD *)&v5 + 1))
    {
      v3 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
}

void std::__shared_ptr_emplace<Espresso::MPSGraphCompilerEngine::blob_container_options>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC8C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphCompilerEngine::blob_container_options>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC8C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphCompilerEngine::blob_container_options>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::EspressoCreateMetalContext(void *a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  _QWORD v8[2];

  Espresso::create_metal_context((uint64_t)v8, a1, a2);
  v4 = (std::__shared_weak_count *)v8[1];
  *a3 = v8[0];
  a3[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void Espresso::abstract_batch_metal::~abstract_batch_metal(Espresso::abstract_batch_metal *this)
{
  Espresso::abstract_batch_metal::~abstract_batch_metal(this);
  JUMPOUT(0x19401CD90);
}

{
  void *v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = &off_1E2D85B88;
  v2 = (void *)*((_QWORD *)this + 20);
  if (v2)
  {
    v3 = *((_QWORD *)this + 21);
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3 - 16);
      while ((void *)v3 != v2);
      v4 = (void *)*((_QWORD *)this + 20);
    }
    *((_QWORD *)this + 21) = v2;
    operator delete(v4);
  }

  *(_QWORD *)this = &off_1E2D85988;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 120);
  Espresso::abstract_batch::~abstract_batch(this);
}

void Espresso::loopkit_kernel_cpu::~loopkit_kernel_cpu(Espresso::loopkit_kernel_cpu *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E2D839A8;
  v2 = (void *)*((_QWORD *)this + 64);
  if (v2)
  {
    *((_QWORD *)this + 65) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Espresso::lk_buffer_generator>>>::~__hash_table((uint64_t)this + 472);
  Espresso::generic_loopkit_kernel::~generic_loopkit_kernel((void **)this);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E2D839A8;
  v2 = (void *)*((_QWORD *)this + 64);
  if (v2)
  {
    *((_QWORD *)this + 65) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Espresso::lk_buffer_generator>>>::~__hash_table((uint64_t)this + 472);
  Espresso::generic_loopkit_kernel::~generic_loopkit_kernel((void **)this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::loopkit_kernel_cpu::__launch(uint64_t a1, const char *a2, _QWORD *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id v17;
  void ***v18;
  unint64_t *v19;
  unint64_t v20;
  void **v21;
  void *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t **v31;
  uint64_t *i;
  unint64_t v33;
  char *v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  float v39;
  float v40;
  _BOOL8 v41;
  unint64_t v42;
  unint64_t v43;
  size_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  char *v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  uint8x8_t v61;
  unint64_t v62;
  uint64_t **v63;
  uint64_t *j;
  unint64_t v65;
  float v66;
  float v67;
  uint64_t v68;
  _BOOL8 v69;
  size_t v70;
  unint64_t v71;
  size_t v72;
  uint8x8_t v73;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  unint64_t v99;
  uint8x8_t v100;
  void **v101;
  _QWORD *v102;
  unint64_t v103;
  float v104;
  float v105;
  _BOOL8 v106;
  unint64_t v107;
  unint64_t v108;
  size_t v109;
  uint64_t v110;
  _QWORD *v111;
  unint64_t v112;
  uint64_t result;
  void **v114;
  _QWORD *v115;
  _QWORD *v116;
  void *__p[2];
  uint64_t v118;
  uint64_t v119;
  int v120;
  _QWORD *v121;
  __int128 v122;

  if (*(char *)(a1 + 375) < 0)
  {
    if (!*(_QWORD *)(a1 + 360))
      goto LABEL_33;
  }
  else if (!*(_BYTE *)(a1 + 375))
  {
    goto LABEL_33;
  }
  Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__p[0]) = 0;
    _os_log_error_impl(&dword_190DAF000, v9, OS_LOG_TYPE_ERROR, "Loading deprecated LK kernels.\nThis path will be removed.", (uint8_t *)__p, 2u);
  }

  if (*(char *)(a1 + 375) < 0)
  {
    if (!*(_QWORD *)(a1 + 360))
      goto LABEL_33;
  }
  else if (!*(_BYTE *)(a1 + 375))
  {
    goto LABEL_33;
  }
  if (*(_QWORD *)(a1 + 464))
    goto LABEL_33;
  v10 = (_QWORD *)(a1 + 424);
  if (*(char *)(a1 + 447) < 0)
    v10 = (_QWORD *)*v10;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "stringByDeletingLastPathComponent");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (_QWORD *)(a1 + 352);

  if (*(char *)(a1 + 375) < 0)
    v13 = (_QWORD *)*v13;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "lastPathComponent");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (Espresso::loopkit_dylib_cache::shared(void)::onceToken != -1)
    dispatch_once(&Espresso::loopkit_dylib_cache::shared(void)::onceToken, &__block_literal_global_12479);
  v16 = Espresso::loopkit_dylib_cache::shared(void)::ret;
  objc_msgSend(v12, "stringByAppendingPathComponent:", v15);
  v17 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v17, "UTF8String"));
  Espresso::loopkit_dylib_cache::get_dylib((uint64_t **)&v122, v16, (uint64_t)__p);
  v4 = a1 + 280;
  v18 = (void ***)(a1 + 408);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 408, &v122);
  v5 = *((_QWORD *)&v122 + 1);
  if (*((_QWORD *)&v122 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v122 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v5 + 16))(v5);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v5);
    }
  }
  if (SHIBYTE(v118) < 0)
    operator delete(__p[0]);

  Espresso::func_argv_name((uint64_t)__p, (const void **)(a1 + 280), 0);
  if (*v18)
  {
    if (v118 >= 0)
      v21 = __p;
    else
      v21 = (void **)__p[0];
    v22 = dlsym(**v18, (const char *)v21);
    *(_QWORD *)(a1 + 464) = v22;
    if (v22)
      goto LABEL_30;
LABEL_187:
    v114 = __p;
    if (v118 < 0)
      v114 = (void **)__p[0];
    *(_QWORD *)&v122 = v114;
    v115 = (_QWORD *)(a1 + 328);
    if (*(char *)(a1 + 351) < 0)
      v115 = (_QWORD *)*v115;
    v121 = v115;
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*,char const*>("Fail to load function '%s' from dylib %s", &v122, &v121);
  }
  if (!*(_QWORD *)(a1 + 464))
    goto LABEL_187;
LABEL_30:
  if (SHIBYTE(v118) < 0)
    operator delete(__p[0]);

LABEL_33:
  v23 = *(_QWORD *)(a1 + 512);
  if (v23 != *(_QWORD *)(a1 + 520))
    goto LABEL_184;
  v24 = (uint64_t *)(a1 + 472);
  std::__hash_table<std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Espresso::lk_buffer_generator>>>::clear(a1 + 472);
  v25 = a4[1];
  if (v25 != *a4)
  {
    v116 = a3;
    v26 = 0;
    v27 = (_QWORD *)(a1 + 488);
    v25 = *a4;
    while (1)
    {
      blob_to_lk_buffer_cpu((uint64_t)__p, (uint64_t *)(v25 + 16 * v26));
      v28 = *(_QWORD *)(a1 + 304);
      v29 = *(int *)(v28 + 4 * v26);
      v5 = *(_QWORD *)(a1 + 480);
      if (v5)
      {
        v30 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
        v30.i16[0] = vaddlv_u8(v30);
        if (v30.u32[0] > 1uLL)
        {
          v4 = *(int *)(v28 + 4 * v26);
          if (v5 <= v29)
            v4 = v29 % v5;
        }
        else
        {
          v4 = (v5 - 1) & v29;
        }
        v31 = *(uint64_t ***)(*v24 + 8 * v4);
        if (v31)
        {
          for (i = *v31; i; i = (uint64_t *)*i)
          {
            v33 = i[1];
            if (v33 == v29)
            {
              if (*((_DWORD *)i + 4) == (_DWORD)v29)
                goto LABEL_74;
            }
            else
            {
              if (v30.u32[0] > 1uLL)
              {
                if (v33 >= v5)
                  v33 %= v5;
              }
              else
              {
                v33 &= v5 - 1;
              }
              if (v33 != v4)
                break;
            }
          }
        }
      }
      v34 = (char *)operator new(0x68uLL);
      *(_QWORD *)v34 = 0;
      *((_QWORD *)v34 + 1) = v29;
      *((_DWORD *)v34 + 4) = *(_DWORD *)(v28 + 4 * v26);
      v35 = *(_OWORD *)__p;
      *(_OWORD *)(v34 + 24) = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v36 = v118;
      v37 = v119;
      v118 = 0;
      *((_QWORD *)v34 + 11) = v35;
      v38 = v120;
      *((_QWORD *)v34 + 5) = v36;
      *((_QWORD *)v34 + 6) = 0;
      *((_QWORD *)v34 + 7) = 0;
      *((_QWORD *)v34 + 8) = v37;
      *((_QWORD *)v34 + 9) = 0;
      *((_DWORD *)v34 + 20) = v38;
      *((_DWORD *)v34 + 21) = (*((_QWORD *)&v35 + 1) - (_QWORD)v35) >> 4;
      *((_QWORD *)v34 + 12) = 0;
      v39 = (float)(unint64_t)(*(_QWORD *)(a1 + 496) + 1);
      v40 = *(float *)(a1 + 504);
      if (!v5 || (float)(v40 * (float)v5) < v39)
      {
        v41 = (v5 & (v5 - 1)) != 0;
        if (v5 < 3)
          v41 = 1;
        v42 = v41 | (2 * v5);
        v43 = vcvtps_u32_f32(v39 / v40);
        if (v42 <= v43)
          v44 = v43;
        else
          v44 = v42;
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1 + 472, v44);
        v5 = *(_QWORD *)(a1 + 480);
        if ((v5 & (v5 - 1)) != 0)
        {
          if (v5 <= v29)
            v4 = v29 % v5;
          else
            v4 = v29;
        }
        else
        {
          v4 = (v5 - 1) & v29;
        }
      }
      v45 = *v24;
      v46 = *(_QWORD **)(*v24 + 8 * v4);
      if (v46)
      {
        *(_QWORD *)v34 = *v46;
      }
      else
      {
        *(_QWORD *)v34 = *v27;
        *v27 = v34;
        *(_QWORD *)(v45 + 8 * v4) = v27;
        if (!*(_QWORD *)v34)
          goto LABEL_73;
        v47 = *(_QWORD *)(*(_QWORD *)v34 + 8);
        if ((v5 & (v5 - 1)) != 0)
        {
          if (v47 >= v5)
            v47 %= v5;
        }
        else
        {
          v47 &= v5 - 1;
        }
        v46 = (_QWORD *)(*v24 + 8 * v47);
      }
      *v46 = v34;
LABEL_73:
      ++*(_QWORD *)(a1 + 496);
LABEL_74:
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      ++v26;
      v25 = *a4;
      v48 = a4[1];
      v49 = v48 - *a4;
      if (v26 >= v49 >> 4)
      {
        v50 = v49 >> 4;
        a3 = v116;
        goto LABEL_79;
      }
    }
  }
  v50 = (v25 - *a4) >> 4;
  v48 = a4[1];
LABEL_79:
  v51 = *a3;
  if (a3[1] != *a3)
  {
    v52 = 0;
    v53 = (_QWORD *)(a1 + 488);
    v5 = 1;
    while (1)
    {
      blob_to_lk_buffer_cpu((uint64_t)__p, (uint64_t *)(v51 + 16 * v52));
      v54 = (char *)operator new(0x68uLL);
      *((_DWORD *)v54 + 4) = v52 + v50;
      v55 = *(_OWORD *)__p;
      *(_OWORD *)(v54 + 24) = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v56 = v118;
      v57 = v119;
      v118 = 0;
      *((_QWORD *)v54 + 11) = v55;
      v58 = v120;
      *((_QWORD *)v54 + 5) = v56;
      *((_QWORD *)v54 + 6) = 0;
      *((_QWORD *)v54 + 7) = 0;
      *((_QWORD *)v54 + 8) = v57;
      *((_QWORD *)v54 + 9) = 0;
      *((_DWORD *)v54 + 20) = v58;
      *((_DWORD *)v54 + 21) = (*((_QWORD *)&v55 + 1) - (_QWORD)v55) >> 4;
      *((_QWORD *)v54 + 12) = 0;
      v59 = (int)v52 + (int)v50;
      *(_QWORD *)v54 = 0;
      *((_QWORD *)v54 + 1) = v59;
      v60 = *(_QWORD *)(a1 + 480);
      if (v60)
      {
        v61 = (uint8x8_t)vcnt_s8((int8x8_t)v60);
        v61.i16[0] = vaddlv_u8(v61);
        if (v61.u32[0] > 1uLL)
        {
          v62 = (int)v52 + (int)v50;
          if (v60 <= v59)
            v62 = v59 % v60;
        }
        else
        {
          v62 = (v60 - 1) & v59;
        }
        v63 = *(uint64_t ***)(*v24 + 8 * v62);
        if (v63)
        {
          for (j = *v63; j; j = (uint64_t *)*j)
          {
            v65 = j[1];
            if (v65 == v59)
            {
              if (*((_DWORD *)j + 4) == (_DWORD)v52 + (_DWORD)v50)
              {
                std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,void *>>>::operator()[abi:ne180100](1, v54);
                goto LABEL_120;
              }
            }
            else
            {
              if (v61.u32[0] > 1uLL)
              {
                if (v65 >= v60)
                  v65 %= v60;
              }
              else
              {
                v65 &= v60 - 1;
              }
              if (v65 != v62)
                break;
            }
          }
        }
      }
      v66 = (float)(unint64_t)(*(_QWORD *)(a1 + 496) + 1);
      v67 = *(float *)(a1 + 504);
      if (!v60 || (float)(v67 * (float)v60) < v66)
      {
        v68 = 2 * v60;
        v69 = v60 < 3 || (v60 & (v60 - 1)) != 0;
        v70 = v69 | v68;
        v71 = vcvtps_u32_f32(v66 / v67);
        if (v70 <= v71)
          v72 = v71;
        else
          v72 = v70;
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1 + 472, v72);
        v60 = *(_QWORD *)(a1 + 480);
        v59 = *((_QWORD *)v54 + 1);
      }
      v73 = (uint8x8_t)vcnt_s8((int8x8_t)v60);
      v73.i16[0] = vaddlv_u8(v73);
      if (v73.u32[0] > 1uLL)
      {
        if (v59 >= v60)
          v59 %= v60;
      }
      else
      {
        v59 &= v60 - 1;
      }
      v74 = *v24;
      v75 = *(_QWORD **)(*v24 + 8 * v59);
      if (v75)
      {
        *(_QWORD *)v54 = *v75;
      }
      else
      {
        *(_QWORD *)v54 = *v53;
        *v53 = v54;
        *(_QWORD *)(v74 + 8 * v59) = v53;
        if (!*(_QWORD *)v54)
          goto LABEL_119;
        v76 = *(_QWORD *)(*(_QWORD *)v54 + 8);
        if (v73.u32[0] > 1uLL)
        {
          if (v76 >= v60)
            v76 %= v60;
        }
        else
        {
          v76 &= v60 - 1;
        }
        v75 = (_QWORD *)(*v24 + 8 * v76);
      }
      *v75 = v54;
LABEL_119:
      ++*(_QWORD *)(a1 + 496);
LABEL_120:
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      ++v52;
      v51 = *a3;
      v77 = a3[1] - *a3;
      if (v52 >= v77 >> 4)
      {
        v78 = v77 >> 4;
        v25 = *a4;
        v48 = a4[1];
        goto LABEL_125;
      }
    }
  }
  v78 = 0;
LABEL_125:
  v79 = v78 + ((v48 - v25) >> 4);
  v80 = *(_QWORD *)(a1 + 520);
  v81 = *(_QWORD *)(a1 + 512);
  v82 = (v80 - v81) >> 3;
  if (v79 > v82)
  {
    v83 = v79 - v82;
    v84 = *(_QWORD *)(a1 + 528);
    if (v79 - v82 > (v84 - v80) >> 3)
    {
      if (v79 >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v85 = v84 - v81;
      if (v85 >> 2 > v79)
        v79 = v85 >> 2;
      if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8)
        v86 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v86 = v79;
      v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v86);
      v88 = &v87[8 * v82];
      v90 = &v87[8 * v89];
      bzero(v88, 8 * v83);
      v91 = &v88[8 * v83];
      v92 = *(char **)(a1 + 520);
      v93 = *(char **)(a1 + 512);
      if (v92 != v93)
      {
        do
        {
          v94 = *((_QWORD *)v92 - 1);
          v92 -= 8;
          *((_QWORD *)v88 - 1) = v94;
          v88 -= 8;
        }
        while (v92 != v93);
        v92 = *(char **)(a1 + 512);
      }
      *(_QWORD *)(a1 + 512) = v88;
      *(_QWORD *)(a1 + 520) = v91;
      *(_QWORD *)(a1 + 528) = v90;
      if (v92)
        operator delete(v92);
      goto LABEL_142;
    }
    bzero(*(void **)(a1 + 520), 8 * v83);
    v95 = v80 + 8 * v83;
    goto LABEL_141;
  }
  if (v79 < v82)
  {
    v95 = v81 + 8 * v79;
LABEL_141:
    *(_QWORD *)(a1 + 520) = v95;
  }
LABEL_142:
  v96 = *(_QWORD *)(a1 + 496);
  if (v96)
  {
    v97 = 0;
    v98 = (_QWORD *)(a1 + 488);
    v99 = *(_QWORD *)(a1 + 480);
    do
    {
      if (v99)
      {
        v100 = (uint8x8_t)vcnt_s8((int8x8_t)v99);
        v100.i16[0] = vaddlv_u8(v100);
        if (v100.u32[0] > 1uLL)
        {
          v5 = v97;
          if (v99 <= v97)
            v5 = v97 % v99;
        }
        else
        {
          v5 = (v99 - 1) & v97;
        }
        v101 = *(void ***)(*v24 + 8 * v5);
        if (v101)
        {
          v102 = *v101;
          if (*v101)
          {
            do
            {
              v103 = v102[1];
              if (v103 == v97)
              {
                if (v97 == *((_DWORD *)v102 + 4))
                  goto LABEL_182;
              }
              else
              {
                if (v100.u32[0] > 1uLL)
                {
                  if (v103 >= v99)
                    v103 %= v99;
                }
                else
                {
                  v103 &= v99 - 1;
                }
                if (v103 != v5)
                  break;
              }
              v102 = (_QWORD *)*v102;
            }
            while (v102);
          }
        }
      }
      v102 = operator new(0x68uLL);
      *v102 = 0;
      v102[1] = v97;
      *((_DWORD *)v102 + 4) = v97;
      v102[4] = 0;
      v102[5] = 0;
      v102[3] = 0;
      v104 = (float)(v96 + 1);
      v105 = *(float *)(a1 + 504);
      if (!v99 || (float)(v105 * (float)v99) < v104)
      {
        v106 = (v99 & (v99 - 1)) != 0;
        if (v99 < 3)
          v106 = 1;
        v107 = v106 | (2 * v99);
        v108 = vcvtps_u32_f32(v104 / v105);
        if (v107 <= v108)
          v109 = v108;
        else
          v109 = v107;
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1 + 472, v109);
        v99 = *(_QWORD *)(a1 + 480);
        if ((v99 & (v99 - 1)) != 0)
        {
          if (v99 <= v97)
            v5 = v97 % v99;
          else
            v5 = v97;
        }
        else
        {
          v5 = (v99 - 1) & v97;
        }
      }
      v110 = *v24;
      v111 = *(_QWORD **)(*v24 + 8 * v5);
      if (v111)
      {
        *v102 = *v111;
      }
      else
      {
        *v102 = *v98;
        *v98 = v102;
        *(_QWORD *)(v110 + 8 * v5) = v98;
        if (!*v102)
          goto LABEL_181;
        v112 = *(_QWORD *)(*v102 + 8);
        if ((v99 & (v99 - 1)) != 0)
        {
          if (v112 >= v99)
            v112 %= v99;
        }
        else
        {
          v112 &= v99 - 1;
        }
        v111 = (_QWORD *)(*v24 + 8 * v112);
      }
      *v111 = v102;
LABEL_181:
      v96 = *(_QWORD *)(a1 + 496) + 1;
      *(_QWORD *)(a1 + 496) = v96;
LABEL_182:
      *(_QWORD *)(*(_QWORD *)(a1 + 512) + 8 * v97++) = v102 + 6;
    }
    while (v96 > v97);
  }
  v23 = *(_QWORD *)(a1 + 512);
LABEL_184:
  result = (*(uint64_t (**)(uint64_t))(a1 + 464))(v23);
  if ((_DWORD)result)
    Espresso::throw_exception_selector<Espresso::invalid_state_error,Espresso::loopkit_func_t &>(0);
  return result;
}

void sub_19175F0D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;

  if (a16 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void Espresso::generic_loopkit_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v3;
  uint64_t *v5;
  void **v7;
  void *v8;
  void **v9;
  void *v10;
  void **v11;
  std::vector<int>::size_type v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t **v24;
  uint64_t *i;
  unint64_t v26;
  char *v27;
  float v28;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  size_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint8x8_t v40;
  void **v41;
  _QWORD *v42;
  unint64_t v43;
  float v44;
  _BOOL8 v45;
  unint64_t v46;
  unint64_t v47;
  size_t v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  _BYTE *v74;
  int64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  void *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  void *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  void *v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  int **v121;
  int *v122;
  uint64_t v123;
  uint64_t v124;
  _DWORD *v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  __int128 v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  unint64_t v142;
  std::vector<int>::size_type v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD v147[2];
  uint64_t v148;
  _QWORD v149[3];
  __int128 v150;
  __int128 v151;
  void *__p[2];
  _BYTE v153[24];
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  _OWORD v157[2];
  __int128 v158;
  __int128 v159;
  float v160;
  std::vector<int> v161;
  char v162;
  _BYTE v163[32];
  _OWORD *v164;

  v5 = a3;
  if (*(_QWORD *)(a1 + 376) != *(_QWORD *)(a1 + 384))
  {
    Espresso::generic_loopkit_kernel::deserialize_shapes((uint64_t *)(a1 + 376), a3);
    return;
  }
  if (!*(_QWORD *)(a1 + 448) || !*(_QWORD *)(a1 + 456))
  {
    v7 = *(void ***)(a1 + 408);
    if (!v7)
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("dylib not loaded");
    v8 = *v7;
    Espresso::func_argv_name((uint64_t)__p, (const void **)(a1 + 280), 1);
    if (v153[7] >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    *(_QWORD *)(a1 + 448) = dlsym(v8, (const char *)v9);
    if ((v153[7] & 0x80000000) != 0)
      operator delete(__p[0]);
    v10 = **(void ***)(a1 + 408);
    Espresso::func_argv_name((uint64_t)__p, (const void **)(a1 + 280), 2);
    if (v153[7] >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    *(_QWORD *)(a1 + 456) = dlsym(v10, (const char *)v11);
    if ((v153[7] & 0x80000000) != 0)
      operator delete(__p[0]);
    if (!*(_QWORD *)(a1 + 448) || !*(_QWORD *)(a1 + 456))
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("cannot load shape info");
  }
  v146 = a1;
  v12 = *(int *)(a1 + 400);
  v14 = *a2;
  v13 = a2[1];
  v158 = 0u;
  v159 = 0u;
  v160 = 1.0;
  memset(v157, 0, 24);
  v16 = v13 - v14;
  v15 = v16 == 0;
  v17 = v16 >> 6;
  v144 = v5;
  v142 = v17;
  v143 = v12;
  if (v15)
  {
    v36 = 0;
    goto LABEL_123;
  }
  v18 = 0;
  if (v17 <= 1)
    v19 = 1;
  else
    v19 = v17;
  do
  {
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v163, (const Espresso::layer_shape *)(*a2 + (v18 << 6)), 0);
    Espresso::layer_nd_shape::shape_vector((std::vector<int> *)__p, (uint64_t)v163);
    v20 = *(_QWORD *)(v146 + 304);
    v21 = *(int *)(v20 + 4 * v18);
    v22 = *((_QWORD *)&v158 + 1);
    if (*((_QWORD *)&v158 + 1))
    {
      v23 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v158 + 8));
      v23.i16[0] = vaddlv_u8(v23);
      if (v23.u32[0] > 1uLL)
      {
        v3 = *(int *)(v20 + 4 * v18);
        if (*((_QWORD *)&v158 + 1) <= v21)
          v3 = v21 % *((_QWORD *)&v158 + 1);
      }
      else
      {
        v3 = (*((_QWORD *)&v158 + 1) - 1) & v21;
      }
      v24 = *(uint64_t ***)(v158 + 8 * v3);
      if (v24)
      {
        for (i = *v24; i; i = (uint64_t *)*i)
        {
          v26 = i[1];
          if (v26 == v21)
          {
            if (*((_DWORD *)i + 4) == (_DWORD)v21)
              goto LABEL_60;
          }
          else
          {
            if (v23.u32[0] > 1uLL)
            {
              if (v26 >= *((_QWORD *)&v158 + 1))
                v26 %= *((_QWORD *)&v158 + 1);
            }
            else
            {
              v26 &= *((_QWORD *)&v158 + 1) - 1;
            }
            if (v26 != v3)
              break;
          }
        }
      }
    }
    v27 = (char *)operator new(0x30uLL);
    *(_QWORD *)v27 = 0;
    *((_QWORD *)v27 + 1) = v21;
    *((_DWORD *)v27 + 4) = *(_DWORD *)(v20 + 4 * v18);
    *(_OWORD *)(v27 + 24) = *(_OWORD *)__p;
    *((_QWORD *)v27 + 5) = *(_QWORD *)v153;
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)v153 = 0;
    v28 = (float)(unint64_t)(*((_QWORD *)&v159 + 1) + 1);
    if (!v22 || (float)(v160 * (float)v22) < v28)
    {
      v29 = (v22 & (v22 - 1)) != 0;
      if (v22 < 3)
        v29 = 1;
      v30 = v29 | (2 * v22);
      v31 = vcvtps_u32_f32(v28 / v160);
      if (v30 <= v31)
        v32 = v31;
      else
        v32 = v30;
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>((uint64_t)&v158, v32);
      v22 = *((_QWORD *)&v158 + 1);
      if ((*((_QWORD *)&v158 + 1) & (*((_QWORD *)&v158 + 1) - 1)) != 0)
      {
        if (*((_QWORD *)&v158 + 1) <= v21)
          v3 = v21 % *((_QWORD *)&v158 + 1);
        else
          v3 = v21;
      }
      else
      {
        v3 = (*((_QWORD *)&v158 + 1) - 1) & v21;
      }
    }
    v33 = v158;
    v34 = *(_QWORD **)(v158 + 8 * v3);
    if (v34)
    {
      *(_QWORD *)v27 = *v34;
LABEL_58:
      *v34 = v27;
      goto LABEL_59;
    }
    *(_QWORD *)v27 = v159;
    *(_QWORD *)&v159 = v27;
    *(_QWORD *)(v33 + 8 * v3) = &v159;
    if (*(_QWORD *)v27)
    {
      v35 = *(_QWORD *)(*(_QWORD *)v27 + 8);
      if ((v22 & (v22 - 1)) != 0)
      {
        if (v35 >= v22)
          v35 %= v22;
      }
      else
      {
        v35 &= v22 - 1;
      }
      v34 = (_QWORD *)(v158 + 8 * v35);
      goto LABEL_58;
    }
LABEL_59:
    ++*((_QWORD *)&v159 + 1);
LABEL_60:
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    ++v18;
  }
  while (v18 != v19);
  v36 = *((_QWORD *)&v159 + 1);
  if (*((_QWORD *)&v159 + 1))
  {
    v37 = 0;
    v38 = &v163[4];
    do
    {
      v39 = *((_QWORD *)&v158 + 1);
      if (*((_QWORD *)&v158 + 1))
      {
        v40 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v158 + 8));
        v40.i16[0] = vaddlv_u8(v40);
        if (v40.u32[0] > 1uLL)
        {
          v21 = (int)v37;
          if (*((_QWORD *)&v158 + 1) <= (unint64_t)(int)v37)
            v21 = (unint64_t)(int)v37 % *((_QWORD *)&v158 + 1);
        }
        else
        {
          v21 = (*((_QWORD *)&v158 + 1) - 1) & (int)v37;
        }
        v41 = *(void ***)(v158 + 8 * v21);
        if (v41)
        {
          v42 = *v41;
          if (*v41)
          {
            do
            {
              v43 = v42[1];
              if (v43 == (int)v37)
              {
                if (*((_DWORD *)v42 + 4) == (_DWORD)v37)
                  goto LABEL_104;
              }
              else
              {
                if (v40.u32[0] > 1uLL)
                {
                  if (v43 >= *((_QWORD *)&v158 + 1))
                    v43 %= *((_QWORD *)&v158 + 1);
                }
                else
                {
                  v43 &= *((_QWORD *)&v158 + 1) - 1;
                }
                if (v43 != v21)
                  break;
              }
              v42 = (_QWORD *)*v42;
            }
            while (v42);
          }
        }
      }
      v42 = operator new(0x30uLL);
      *v42 = 0;
      v42[1] = (int)v37;
      *((_DWORD *)v42 + 4) = v37;
      v42[4] = 0;
      v42[5] = 0;
      v42[3] = 0;
      v44 = (float)(unint64_t)(v36 + 1);
      if (!v39 || (float)(v160 * (float)v39) < v44)
      {
        v45 = v39 < 3 || (v39 & (v39 - 1)) != 0;
        v46 = v45 | (2 * v39);
        v47 = vcvtps_u32_f32(v44 / v160);
        if (v46 <= v47)
          v48 = v47;
        else
          v48 = v46;
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>((uint64_t)&v158, v48);
        v39 = *((_QWORD *)&v158 + 1);
        if ((*((_QWORD *)&v158 + 1) & (*((_QWORD *)&v158 + 1) - 1)) != 0)
        {
          if (*((_QWORD *)&v158 + 1) <= (unint64_t)(int)v37)
            v21 = (unint64_t)(int)v37 % *((_QWORD *)&v158 + 1);
          else
            v21 = (int)v37;
        }
        else
        {
          v21 = (*((_QWORD *)&v158 + 1) - 1) & (int)v37;
        }
      }
      v49 = v158;
      v50 = *(_QWORD **)(v158 + 8 * v21);
      if (v50)
      {
        *v42 = *v50;
      }
      else
      {
        *v42 = v159;
        *(_QWORD *)&v159 = v42;
        *(_QWORD *)(v49 + 8 * v21) = &v159;
        if (!*v42)
          goto LABEL_103;
        v51 = *(_QWORD *)(*v42 + 8);
        if ((v39 & (v39 - 1)) != 0)
        {
          if (v51 >= v39)
            v51 %= v39;
        }
        else
        {
          v51 &= v39 - 1;
        }
        v50 = (_QWORD *)(v158 + 8 * v51);
      }
      *v50 = v42;
LABEL_103:
      ++*((_QWORD *)&v159 + 1);
LABEL_104:
      v52 = v42[3];
      v53 = (unint64_t)(v42[4] - v52) >> 2;
      *v38 = 0;
      v38[1] = 0;
      *(_DWORD *)v163 = v53;
      *(_DWORD *)&v163[20] = 1;
      Espresso::lk_buffer_generator::lk_buffer_generator((uint64_t)__p, (uint64_t)v163, v52, 3u);
      v54 = (uint64_t *)*((_QWORD *)&v157[0] + 1);
      if (*((_QWORD *)&v157[0] + 1) >= *(_QWORD *)&v157[1])
      {
        v59 = v38;
        v60 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v157[0] + 1) - *(_QWORD *)&v157[0]) >> 4);
        v61 = v60 + 1;
        if (v60 + 1 > 0x333333333333333)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(*(_QWORD *)&v157[1] - *(_QWORD *)&v157[0]) >> 4) > v61)
          v61 = 0x999999999999999ALL * ((uint64_t)(*(_QWORD *)&v157[1] - *(_QWORD *)&v157[0]) >> 4);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)&v157[1] - *(_QWORD *)&v157[0]) >> 4) >= 0x199999999999999)
          v62 = 0x333333333333333;
        else
          v62 = v61;
        v164 = &v157[1];
        v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::lk_buffer_generator>>(v62);
        v64 = &v63[80 * v60];
        *(_QWORD *)v163 = v63;
        *(_QWORD *)&v163[8] = v64;
        *(_QWORD *)&v163[16] = v64;
        *(_QWORD *)&v163[24] = &v63[80 * v65];
        *(_QWORD *)v64 = 0;
        *((_QWORD *)v64 + 1) = 0;
        *((_QWORD *)v64 + 2) = 0;
        *(_OWORD *)v64 = *(_OWORD *)__p;
        *((_QWORD *)v64 + 2) = *(_QWORD *)v153;
        __p[1] = 0;
        *(_QWORD *)v153 = 0;
        __p[0] = 0;
        v66 = v154;
        v67 = v155;
        v68 = *(_QWORD *)v64;
        v69 = (*((_QWORD *)v64 + 1) - *(_QWORD *)v64) >> 4;
        *((_QWORD *)v64 + 3) = 0;
        *((_QWORD *)v64 + 4) = 0;
        *((_QWORD *)v64 + 5) = v66;
        *((_QWORD *)v64 + 6) = 0;
        *((_DWORD *)v64 + 14) = v67;
        *((_DWORD *)v64 + 15) = v69;
        *((_QWORD *)v64 + 8) = v68;
        *((_QWORD *)v64 + 9) = 0;
        v21 = *(_QWORD *)&v163[8];
        *(_QWORD *)&v163[16] += 80;
        v70 = *((_QWORD *)&v157[0] + 1);
        v71 = *(_QWORD *)&v157[0];
        *(_QWORD *)&v151 = *(_QWORD *)&v163[8];
        *((_QWORD *)&v151 + 1) = *(_QWORD *)&v163[8];
        v150 = v151;
        v161.__begin_ = (std::vector<int>::pointer)&v157[1];
        v161.__end_ = (std::vector<int>::pointer)&v150;
        v161.__end_cap_.__value_ = (int *)&v151;
        v162 = 0;
        if (*((_QWORD *)&v157[0] + 1) != *(_QWORD *)&v157[0])
        {
          v72 = *((_QWORD *)&v157[0] + 1);
          do
          {
            *(_QWORD *)(v21 - 80) = 0;
            *(_QWORD *)(v21 - 72) = 0;
            *(_QWORD *)(v21 - 64) = 0;
            v74 = *(_BYTE **)(v72 - 80);
            v73 = *(_BYTE **)(v72 - 72);
            v72 -= 80;
            v75 = v73 - v74;
            if (v73 == v74)
            {
              v78 = 0;
              v77 = 0;
            }
            else
            {
              std::vector<loopkit_rt_dimension_t>::__vallocate[abi:ne180100]((_QWORD *)(v21 - 80), v75 >> 4);
              v76 = *(char **)(v21 - 72);
              memmove(v76, v74, v75);
              v77 = &v76[16 * (v75 >> 4)];
              *(_QWORD *)(v21 - 72) = v77;
              v78 = *(_QWORD *)(v21 - 80);
            }
            v79 = *(_QWORD *)(v70 - 40);
            v80 = *(_DWORD *)(v70 - 24);
            *(_QWORD *)(v21 - 56) = 0;
            *(_QWORD *)(v21 - 48) = 0;
            *(_QWORD *)(v21 - 40) = v79;
            *(_QWORD *)(v21 - 32) = 0;
            *(_DWORD *)(v21 - 24) = v80;
            *(_DWORD *)(v21 - 20) = (unint64_t)&v77[-v78] >> 4;
            *(_QWORD *)(v21 - 16) = v78;
            *(_QWORD *)(v21 - 8) = 0;
            v21 = *((_QWORD *)&v151 + 1) - 80;
            *((_QWORD *)&v151 + 1) -= 80;
            v70 = v72;
          }
          while (v72 != v71);
        }
        v162 = 1;
        std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Espresso::lk_buffer_generator>,std::reverse_iterator<Espresso::lk_buffer_generator*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v161);
        v81 = *(_QWORD *)&v157[1];
        v145 = *(_QWORD *)&v163[16];
        v82 = *(_OWORD *)&v163[16];
        v83 = v157[0];
        *(_QWORD *)&v157[0] = v21;
        *(_OWORD *)&v163[8] = v83;
        *(_OWORD *)((char *)v157 + 8) = v82;
        *(_QWORD *)&v163[24] = v81;
        *(_QWORD *)v163 = v83;
        std::__split_buffer<Espresso::lk_buffer_generator>::~__split_buffer((uint64_t)v163);
        *((_QWORD *)&v157[0] + 1) = v145;
        v38 = v59;
        v5 = v144;
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      else
      {
        **((_QWORD **)&v157[0] + 1) = 0;
        v54[1] = 0;
        v54[2] = 0;
        *(_OWORD *)v54 = *(_OWORD *)__p;
        v54[2] = *(_QWORD *)v153;
        __p[1] = 0;
        *(_QWORD *)v153 = 0;
        __p[0] = 0;
        v55 = v154;
        v56 = v155;
        v57 = *v54;
        v58 = (unint64_t)(v54[1] - *v54) >> 4;
        v54[3] = 0;
        v54[4] = 0;
        v54[5] = v55;
        v54[6] = 0;
        *((_DWORD *)v54 + 14) = v56;
        *((_DWORD *)v54 + 15) = v58;
        v54[8] = v57;
        v54[9] = 0;
        *((_QWORD *)&v157[0] + 1) = v54 + 10;
      }
      ++v37;
      v36 = *((_QWORD *)&v159 + 1);
    }
    while (v37 < *((_QWORD *)&v159 + 1));
  }
LABEL_123:
  v84 = v142 + v143;
  if (v142 + v143)
  {
    if (v84 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v142 + v143);
    bzero(v85, 8 * v84);
    v36 = *((_QWORD *)&v159 + 1);
    if (!*((_QWORD *)&v159 + 1))
      goto LABEL_130;
LABEL_128:
    v86 = 24;
    v87 = v85;
    do
    {
      *(_QWORD *)v87 = *(_QWORD *)&v157[0] + v86;
      v87 += 8;
      v86 += 80;
      --v36;
    }
    while (v36);
  }
  else
  {
    v85 = 0;
    if (v36)
      goto LABEL_128;
  }
LABEL_130:
  std::vector<int>::vector(&v161, v143);
  std::vector<Espresso::lk_buffer_generator>::vector(&v151, v143);
  if ((int)v143 >= 1)
  {
    v88 = 0;
    v89 = 0;
    v90 = &v85[8 * v142];
    do
    {
      *(_OWORD *)&v163[4] = 0uLL;
      *(_DWORD *)v163 = 1;
      *(_DWORD *)&v163[20] = 1;
      Espresso::lk_buffer_generator::lk_buffer_generator((uint64_t)__p, (uint64_t)v163, (uint64_t)&v161.__begin_[v88], 3u);
      v91 = v151 + v89;
      v92 = *(void **)(v151 + v89);
      *(void **)v91 = __p[0];
      __p[0] = v92;
      v93 = *(void **)(v91 + 8);
      *(void **)(v91 + 8) = __p[1];
      __p[1] = v93;
      v94 = *(_QWORD *)(v91 + 16);
      *(_QWORD *)(v91 + 16) = *(_QWORD *)v153;
      *(_QWORD *)v153 = v94;
      v95 = *(_QWORD *)(v91 + 72);
      v96 = *(_OWORD *)(v91 + 56);
      v97 = *(_OWORD *)(v91 + 40);
      v98 = *(_OWORD *)(v91 + 24);
      v100 = v154;
      v99 = v155;
      v101 = v156;
      *(_OWORD *)(v91 + 24) = *(_OWORD *)&v153[8];
      *(_QWORD *)(v91 + 72) = v101;
      *(_OWORD *)(v91 + 56) = v99;
      *(_OWORD *)(v91 + 40) = v100;
      *(_OWORD *)&v153[8] = v98;
      v154 = v97;
      v155 = v96;
      v156 = v95;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      *(_QWORD *)v90 = v151 + v89 + 24;
      v90 += 8;
      v89 += 80;
      ++v88;
    }
    while (80 * v143 != v89);
  }
  if ((*(unsigned int (**)(char *))(v146 + 456))(v85))
    Espresso::throw_exception_selector<Espresso::invalid_state_error,Espresso::loopkit_func_t &>(2);
  std::vector<std::vector<int>>::vector(&v150, v143);
  std::vector<Espresso::lk_buffer_generator>::vector(v149, v143);
  if ((int)v143 >= 1)
  {
    v102 = 0;
    v103 = 0;
    v104 = 0;
    do
    {
      std::vector<int>::vector((std::vector<int> *)__p, v161.__begin_[v104]);
      v105 = (_QWORD *)(v150 + v102);
      v106 = *(void **)(v150 + v102);
      if (v106)
      {
        v105[1] = v106;
        operator delete(v106);
        *v105 = 0;
        v105[1] = 0;
        v105[2] = 0;
      }
      *(_OWORD *)v105 = *(_OWORD *)__p;
      v105[2] = *(_QWORD *)v153;
      v107 = *(_QWORD *)(v150 + v102);
      v108 = (unint64_t)(*(_QWORD *)(v150 + v102 + 8) - v107) >> 2;
      *(_QWORD *)&v163[4] = 0;
      *(_QWORD *)&v163[12] = 0;
      *(_DWORD *)v163 = v108;
      *(_DWORD *)&v163[20] = 1;
      Espresso::lk_buffer_generator::lk_buffer_generator((uint64_t)__p, (uint64_t)v163, v107, 3u);
      v109 = v149[0] + v103;
      v110 = *(void **)(v149[0] + v103);
      *(void **)v109 = __p[0];
      __p[0] = v110;
      v111 = *(void **)(v109 + 8);
      *(void **)(v109 + 8) = __p[1];
      __p[1] = v111;
      v112 = *(_QWORD *)(v109 + 16);
      *(_QWORD *)(v109 + 16) = *(_QWORD *)v153;
      *(_QWORD *)v153 = v112;
      v113 = *(_QWORD *)(v109 + 72);
      v114 = *(_OWORD *)(v109 + 56);
      v115 = *(_OWORD *)(v109 + 40);
      v116 = *(_OWORD *)(v109 + 24);
      v118 = v154;
      v117 = v155;
      v119 = v156;
      *(_OWORD *)(v109 + 24) = *(_OWORD *)&v153[8];
      *(_QWORD *)(v109 + 72) = v119;
      *(_OWORD *)(v109 + 56) = v117;
      *(_OWORD *)(v109 + 40) = v118;
      *(_OWORD *)&v153[8] = v116;
      v154 = v115;
      v155 = v114;
      v156 = v113;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      *(_QWORD *)&v85[8 * v142 + 8 * v104++] = v149[0] + v103 + 24;
      v103 += 80;
      v102 += 24;
    }
    while (80 * v143 != v103);
  }
  if ((*(unsigned int (**)(char *))(v146 + 448))(v85))
    Espresso::throw_exception_selector<Espresso::invalid_state_error,Espresso::loopkit_func_t &>(1);
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  if ((int)v143 >= 1)
  {
    v120 = 0;
    do
    {
      v121 = (int **)(v150 + 24 * v120);
      v147[1] = 0;
      v148 = 0;
      v147[0] = 0;
      v122 = *v121;
      v123 = (char *)v121[1] - (char *)*v121;
      if (v123)
      {
        v124 = v123 >> 2;
        if ((unint64_t)(v123 >> 2) <= 1)
          v124 = 1;
        v125 = v147;
        do
        {
          v126 = *v122++;
          *v125++ = v126;
          --v124;
        }
        while (v124);
      }
      HIDWORD(v148) = (unint64_t)v123 >> 2;
      Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v147, 0, (uint64_t)__p);
      v127 = v5[1];
      v128 = v5[2];
      if (v127 >= v128)
      {
        v131 = (uint64_t)(v127 - *v5) >> 6;
        v132 = v131 + 1;
        if ((unint64_t)(v131 + 1) >> 58)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v133 = v128 - *v5;
        if (v133 >> 5 > v132)
          v132 = v133 >> 5;
        if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFC0)
          v134 = 0x3FFFFFFFFFFFFFFLL;
        else
          v134 = v132;
        v164 = v5 + 2;
        v135 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v134);
        v136 = &v135[64 * v131];
        *(_QWORD *)v163 = v135;
        *(_QWORD *)&v163[8] = v136;
        *(_QWORD *)&v163[24] = &v135[64 * v137];
        v138 = *(_OWORD *)v153;
        v139 = *(_QWORD *)&v153[16];
        *(_OWORD *)v136 = *(_OWORD *)__p;
        *((_OWORD *)v136 + 1) = v138;
        *((_QWORD *)v136 + 4) = v139;
        *((_QWORD *)v136 + 5) = 0;
        *((_QWORD *)v136 + 6) = 0;
        *((_QWORD *)v136 + 7) = 0;
        *(_OWORD *)(v136 + 40) = v154;
        *((_QWORD *)v136 + 7) = v155;
        v154 = 0uLL;
        *(_QWORD *)&v155 = 0;
        *(_QWORD *)&v163[16] = v136 + 64;
        std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(v5, v163);
        v140 = v5[1];
        std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)v163);
        v141 = (void *)v154;
        v5[1] = v140;
        if (v141)
        {
          *((_QWORD *)&v154 + 1) = v141;
          operator delete(v141);
        }
      }
      else
      {
        v129 = *(_OWORD *)v153;
        v130 = *(_QWORD *)&v153[16];
        *(_OWORD *)v127 = *(_OWORD *)__p;
        *(_OWORD *)(v127 + 16) = v129;
        *(_QWORD *)(v127 + 32) = v130;
        *(_QWORD *)(v127 + 40) = 0;
        *(_QWORD *)(v127 + 48) = 0;
        *(_QWORD *)(v127 + 56) = 0;
        *(_OWORD *)(v127 + 40) = v154;
        *(_QWORD *)(v127 + 56) = v155;
        v154 = 0uLL;
        *(_QWORD *)&v155 = 0;
        v5[1] = v127 + 64;
      }
      ++v120;
    }
    while (v120 != v143);
  }
  __p[0] = v149;
  std::vector<Espresso::lk_buffer_generator>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v150;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v151;
  std::vector<Espresso::lk_buffer_generator>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v161.__begin_)
  {
    v161.__end_ = v161.__begin_;
    operator delete(v161.__begin_);
  }
  if (v85)
    operator delete(v85);
  __p[0] = v157;
  std::vector<Espresso::lk_buffer_generator>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::~__hash_table((uint64_t)&v158);
}

void sub_19175FF10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55)
{
  if (a36 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::loopkit_kernel_cpu::on_resized(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Espresso::lk_buffer_generator>>>::clear(a1 + 472);
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a1 + 512);
}

void std::__hash_table<std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Espresso::lk_buffer_generator>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Espresso::lk_buffer_generator>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Espresso::lk_buffer_generator>>>::__deallocate_node(_QWORD *__p)
{
  _QWORD *v1;
  _QWORD *v2;
  void *v3;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = (_QWORD *)*v1;
      v3 = (void *)v1[3];
      if (v3)
      {
        v1[4] = v3;
        operator delete(v3);
      }
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void Espresso::generic_loopkit_kernel::deserialize_shapes(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  std::vector<int>::pointer begin;
  uint64_t v10;
  std::vector<int>::pointer v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  _QWORD v31[2];
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  void *__p[2];
  uint64_t v37;
  std::vector<int> v38;
  _QWORD v39[5];

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *a1;
  if (a1[1] != *a1)
  {
    v5 = 0;
    LODWORD(v6) = 0;
    do
    {
      v7 = *(_DWORD *)(v3 + 4 * v5);
      std::vector<int>::vector(&v38, v7);
      v8 = v7;
      LODWORD(v6) = v6 + 1;
      begin = v38.__begin_;
      if (v7 >= 1)
      {
        v10 = *a1;
        v6 = (int)v6;
        v11 = v38.__begin_;
        do
        {
          *v11++ = *(_DWORD *)(v10 + 4 * v6++);
          --v8;
        }
        while (v8);
      }
      v31[0] = 0;
      v31[1] = 0;
      v32 = 0;
      v12 = (char *)v38.__end_ - (char *)begin;
      if (v38.__end_ != begin)
      {
        v13 = v12 >> 2;
        if ((unint64_t)(v12 >> 2) <= 1)
          v13 = 1;
        v14 = (int *)v31;
        do
        {
          v15 = *begin++;
          *v14++ = v15;
          --v13;
        }
        while (v13);
      }
      HIDWORD(v32) = (unint64_t)v12 >> 2;
      Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v31, 0, (uint64_t)&v33);
      v16 = a2[1];
      v17 = a2[2];
      if (v16 >= v17)
      {
        v20 = (uint64_t)(v16 - *a2) >> 6;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 58)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v22 = v17 - *a2;
        if (v22 >> 5 > v21)
          v21 = v22 >> 5;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFC0)
          v23 = 0x3FFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        v39[4] = a2 + 2;
        v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v23);
        v25 = &v24[64 * v20];
        v39[0] = v24;
        v39[1] = v25;
        v39[3] = &v24[64 * v26];
        v27 = v34;
        v28 = v35;
        *(_OWORD *)v25 = v33;
        *((_OWORD *)v25 + 1) = v27;
        *((_QWORD *)v25 + 4) = v28;
        *((_QWORD *)v25 + 5) = 0;
        *((_QWORD *)v25 + 6) = 0;
        *((_QWORD *)v25 + 7) = 0;
        *(_OWORD *)(v25 + 40) = *(_OWORD *)__p;
        *((_QWORD *)v25 + 7) = v37;
        __p[0] = 0;
        __p[1] = 0;
        v37 = 0;
        v39[2] = v25 + 64;
        std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a2, v39);
        v29 = a2[1];
        std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)v39);
        v30 = __p[0];
        a2[1] = v29;
        if (v30)
        {
          __p[1] = v30;
          operator delete(v30);
        }
      }
      else
      {
        v18 = v34;
        v19 = v35;
        *(_OWORD *)v16 = v33;
        *(_OWORD *)(v16 + 16) = v18;
        *(_QWORD *)(v16 + 32) = v19;
        *(_QWORD *)(v16 + 40) = 0;
        *(_QWORD *)(v16 + 48) = 0;
        *(_QWORD *)(v16 + 56) = 0;
        *(_OWORD *)(v16 + 40) = *(_OWORD *)__p;
        *(_QWORD *)(v16 + 56) = v37;
        __p[0] = 0;
        __p[1] = 0;
        v37 = 0;
        a2[1] = v16 + 64;
      }
      if (v38.__begin_)
      {
        v38.__end_ = v38.__begin_;
        operator delete(v38.__begin_);
      }
      v5 = (int)v6;
      v3 = *a1;
    }
    while ((int)v6 < (unint64_t)((a1[1] - *a1) >> 2));
  }
}

void sub_191760364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21)
  {
    a22 = (uint64_t)a21;
    operator delete(a21);
  }
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<Espresso::lk_buffer_generator>::vector(_QWORD *a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x333333333333334)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v4 = std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::lk_buffer_generator>>(a2);
    *a1 = v4;
    a1[1] = v4;
    a1[2] = &v4[10 * v5];
    v6 = &v4[10 * a2];
    v7 = 80 * a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      v4 += 10;
      v7 -= 80;
    }
    while (v7);
    a1[1] = v6;
  }
  return a1;
}

void sub_191760448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<Espresso::lk_buffer_generator>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<Espresso::lk_buffer_generator>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 10);
        v6 -= 80;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 9) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::lk_buffer_generator>>(unint64_t a1)
{
  if (a1 >= 0x333333333333334)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(80 * a1);
}

uint64_t std::__split_buffer<Espresso::lk_buffer_generator>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v4 = *(void **)(v2 - 80);
    *(_QWORD *)(a1 + 16) = v2 - 80;
    if (v4)
    {
      *(_QWORD *)(v2 - 72) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 80;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Espresso::lk_buffer_generator>,std::reverse_iterator<Espresso::lk_buffer_generator*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      v5 = *(void **)v3;
      if (*(_QWORD *)v3)
      {
        *(_QWORD *)(v3 + 8) = v5;
        operator delete(v5);
      }
      v3 += 80;
    }
  }
  return a1;
}

void blob_to_lk_buffer_cpu(uint64_t a1, uint64_t *a2)
{
  uint64_t (***v4)(_QWORD);
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t *v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  void *__p;
  void *v29;
  _BYTE v30[24];

  Espresso::abstract_blob_container::shape((char *)&v26, *a2);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v30, (const Espresso::layer_shape *)&v26, 0);
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
  v4 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*a2 + 72) + 8);
  v5 = (**v4)(v4);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 32))(*a2);
  if (v5 == 10010)
  {
    switch(v6)
    {
      case 0:
        v7 = *a2;
        v8 = *(_QWORD *)(*a2 + 160);
        goto LABEL_26;
      case 1:
        v7 = *a2;
        v8 = *(_QWORD *)(*a2 + 176);
        goto LABEL_26;
      case 2:
        v7 = *a2;
        v8 = *(_QWORD *)(*a2 + 208);
        goto LABEL_26;
      case 4:
        v7 = *a2;
        v8 = *(_QWORD *)(*a2 + 192);
LABEL_26:
        v23 = *(_QWORD *)(v8 + 24);
        v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
        Espresso::lk_buffer_generator::lk_buffer_generator(a1, (uint64_t)v30, v23, v24);
        return;
      default:
        goto LABEL_28;
    }
  }
  if (v6 == 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)*a2 + 32))(*a2);
    v17 = *(_QWORD *)(*a2 + 176);
    v10 = *(std::__shared_weak_count **)(*a2 + 184);
    v26 = v17;
    v27 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    v20 = *(_QWORD *)(v17 + 24);
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 32))(*a2);
    Espresso::lk_buffer_generator::lk_buffer_generator(a1, (uint64_t)v30, v20, v21);
    if (v10)
    {
      v22 = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(v22);
      while (__stlxr(v16 - 1, v22));
LABEL_21:
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
    if (v6)
    {
LABEL_28:
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 32))(*a2);
      Espresso::throw_exception_selector<Espresso::not_implemented_error,Espresso::compute_path>(v25);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)*a2 + 32))(*a2);
    v9 = *(_QWORD *)(*a2 + 160);
    v10 = *(std::__shared_weak_count **)(*a2 + 168);
    v26 = v9;
    v27 = v10;
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = *(_QWORD *)(v9 + 24);
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 32))(*a2);
    Espresso::lk_buffer_generator::lk_buffer_generator(a1, (uint64_t)v30, v13, v14);
    if (v10)
    {
      v15 = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      goto LABEL_21;
    }
  }
}

void sub_19176080C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::not_implemented_error,Espresso::compute_path>(int a1)
{
  Espresso::throw_exception_with_format<Espresso::not_implemented_error>("cp not supported %d", a1);
}

void Espresso::loopkit_dylib_cache::get_dylib(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  std::mutex *v6;
  uint64_t **v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t *v10;
  Espresso *v11;
  const char *v12;
  Espresso *v13;
  NSObject *v14;
  Espresso *v15;
  const char *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  NSObject *v22;
  std::string *v23;
  void *v24;
  const char *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t **v29;
  uint64_t *v30;
  uint64_t *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  std::string *v35;
  NSObject *v36;
  char *v37;
  int v38;
  std::string::size_type v39;
  char *v40;
  std::string *v41;
  __int128 v42;
  std::string v43;
  uint8_t buf[4];
  std::string *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v6 = (std::mutex *)(a2 + 24);
  std::mutex::lock((std::mutex *)(a2 + 24));
  v7 = std::__tree<std::__value_type<std::string,std::weak_ptr<Espresso::generic_loopkit_kernel::raii_dylib>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<Espresso::generic_loopkit_kernel::raii_dylib>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<Espresso::generic_loopkit_kernel::raii_dylib>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (_QWORD *)a3, a3);
  *a1 = 0;
  a1[1] = 0;
  v8 = (std::__shared_weak_count *)v7[8];
  if (v8)
  {
    v9 = std::__shared_weak_count::lock(v8);
    a1[1] = (uint64_t *)v9;
    if (v9)
    {
      v10 = v7[7];
      *a1 = v10;
      if (v10)
        goto LABEL_32;
    }
  }
  v11 = (Espresso *)operator new(0x20uLL);
  v13 = v11;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = &off_1E2DBCB30;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v43 = *(std::string *)a3;
  *((_QWORD *)v13 + 3) = 0;
  Espresso::espresso_os_log_subsystem(v11, v12);
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_190DAF000, v14, OS_LOG_TYPE_ERROR, "RAII load of deprecated LK kernels.\nThis path will be removed.", buf, 2u);
  }

  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v43.__r_.__value_.__l.__size_)
    {
LABEL_13:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "executablePath");
      v18 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v18, "stringByDeletingLastPathComponent");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "stringByAppendingPathComponent:", CFSTR("Frameworks/LoopKitGeneratedKernels.framework/LoopKitGeneratedKernels"));
      v20 = (void *)objc_claimAutoreleasedReturnValue();

      v21 = objc_retainAutorelease(v20);
      if (!objc_msgSend(v21, "UTF8String"))
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cannot find bundle");
      MEMORY[0x19401C808](&v43);

    }
  }
  else if (!*((_BYTE *)&v43.__r_.__value_.__s + 23))
  {
    goto LABEL_13;
  }
  Espresso::espresso_os_log_subsystem(v15, v16);
  v22 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
  {
    v35 = &v43;
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v35 = (std::string *)v43.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    v45 = v35;
    _os_log_debug_impl(&dword_190DAF000, v22, OS_LOG_TYPE_DEBUG, "raii_dylib: %s", buf, 0xCu);
  }

  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = &v43;
  else
    v23 = (std::string *)v43.__r_.__value_.__r.__words[0];
  v24 = dlopen((const char *)v23, 5);
  *((_QWORD *)v13 + 3) = v24;
  if (!v24)
  {
    Espresso::espresso_os_log_subsystem(0, v25);
    v36 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
    {
      v37 = dlerror();
      *(_DWORD *)buf = 136315138;
      v45 = (std::string *)v37;
      _os_log_debug_impl(&dword_190DAF000, v36, OS_LOG_TYPE_DEBUG, "dl error: %s\n", buf, 0xCu);
    }

    v38 = SHIBYTE(v43.__r_.__value_.__r.__words[2]);
    v39 = v43.__r_.__value_.__r.__words[0];
    v40 = dlerror();
    if (v38 >= 0)
      v41 = &v43;
    else
      v41 = (std::string *)v39;
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*,char *>((const char *)v41, v40);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  *(_QWORD *)&v42 = (char *)v13 + 24;
  *((_QWORD *)&v42 + 1) = v13;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, &v42);
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (*((_QWORD *)&v42 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = std::__tree<std::__value_type<std::string,std::weak_ptr<Espresso::generic_loopkit_kernel::raii_dylib>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<Espresso::generic_loopkit_kernel::raii_dylib>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<Espresso::generic_loopkit_kernel::raii_dylib>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (_QWORD *)a3, a3);
  v31 = *a1;
  v30 = a1[1];
  if (v30)
  {
    v32 = (unint64_t *)(v30 + 2);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v34 = (std::__shared_weak_count *)v29[8];
  v29[7] = v31;
  v29[8] = v30;
  if (v34)
    std::__shared_weak_count::__release_weak(v34);
LABEL_32:
  std::mutex::unlock(v6);
}

void sub_191760C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::mutex *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  void *v20;
  void *v22;

  if (a16 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v18);
  operator delete(v22);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v17);
  std::mutex::unlock(v16);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,std::weak_ptr<Espresso::generic_loopkit_kernel::raii_dylib>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<Espresso::generic_loopkit_kernel::raii_dylib>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<Espresso::generic_loopkit_kernel::raii_dylib>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t **v8;
  _QWORD *v10;
  _QWORD *v11;
  std::string *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v16[2];
  char v17;

  v6 = (uint64_t)(a1 + 1);
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v10 = v5 + 4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4))
          break;
        v5 = *v7;
        v8 = v7;
        if (!*v7)
          goto LABEL_7;
      }
      if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a2))
        return v7;
      v8 = v7 + 1;
      v5 = v7[1];
      if (!v5)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    v11 = operator new(0x48uLL);
    v16[0] = (uint64_t)v11;
    v16[1] = v6;
    v17 = 0;
    v12 = (std::string *)(v11 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      v11[6] = *(_QWORD *)(a3 + 16);
    }
    v11[7] = 0;
    v11[8] = 0;
    v17 = 1;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = v7;
    *v8 = v11;
    v13 = (uint64_t *)**a1;
    v14 = v11;
    if (v13)
    {
      *a1 = v13;
      v14 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v16[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<Espresso::generic_loopkit_kernel::raii_dylib>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<Espresso::generic_loopkit_kernel::raii_dylib>>,void *>>>>::reset[abi:ne180100](v16);
  }
  return (uint64_t **)v11;
}

void sub_191760DC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<Espresso::generic_loopkit_kernel::raii_dylib>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<Espresso::generic_loopkit_kernel::raii_dylib>>,void *>>>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*,char *>(const char *a1, const char *a2)
{
  Espresso::throw_exception_with_format<Espresso::invalid_state_error>("Cannot load dylib %s %s", a1, a2);
}

void std::__shared_ptr_emplace<Espresso::generic_loopkit_kernel::raii_dylib>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCB30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::generic_loopkit_kernel::raii_dylib>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCB30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void *std::__shared_ptr_emplace<Espresso::generic_loopkit_kernel::raii_dylib>::__on_zero_shared(uint64_t a1)
{
  void *result;

  result = *(void **)(a1 + 24);
  if (result)
    return (void *)dlclose(result);
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<Espresso::generic_loopkit_kernel::raii_dylib>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<Espresso::generic_loopkit_kernel::raii_dylib>>,void *>>>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;

  v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v2 = *(std::__shared_weak_count **)(v1 + 64);
      if (v2)
        std::__shared_weak_count::__release_weak(v2);
      if (*(char *)(v1 + 55) < 0)
        operator delete(*(void **)(v1 + 32));
    }
    operator delete((void *)v1);
  }
}

double ___ZN8Espresso19loopkit_dylib_cache6sharedEv_block_invoke()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_QWORD *)v0 = v0 + 8;
  *(_QWORD *)(v0 + 24) = 850045863;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_QWORD *)(v0 + 80) = 0;
  Espresso::loopkit_dylib_cache::shared(void)::ret = v0;
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Espresso::lk_buffer_generator>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Espresso::lk_buffer_generator>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

uint64_t ___ZN8Espresso18loopkit_kernel_cpuC2ERKNSt3__110shared_ptrINS_16abstract_contextEEENS_12compute_pathERKNS_16loopkit_params_tE_block_invoke()
{
  return MGGetBoolAnswer();
}

void Espresso::generic_loopkit_kernel::serialize_shapes(__int128 **a1@<X0>, int **a2@<X8>)
{
  __int128 *v2;
  __int128 *v3;
  __int128 v5;
  __int128 v6;
  int v7;
  int v8;
  unint64_t v9;
  int *v10;
  int *v11;
  int *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  int *v22;
  int v23;
  unint64_t v24;
  int *v25;
  int *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int *v32;
  int v33;
  _BYTE v34[24];
  std::vector<int> v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  void *__p;
  void *v40;
  uint64_t v41;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      v5 = *v2;
      v6 = v2[1];
      v38 = *((_QWORD *)v2 + 4);
      v36 = v5;
      v37 = v6;
      v40 = 0;
      v41 = 0;
      __p = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v2 + 5), *((_QWORD *)v2 + 6), (uint64_t)(*((_QWORD *)v2 + 6) - *((_QWORD *)v2 + 5)) >> 2);
      if ((_DWORD)v37 == 1)
        v7 = 4;
      else
        v7 = 5;
      if (DWORD1(v37) == -1)
        v8 = v7;
      else
        v8 = DWORD1(v37);
      v10 = a2[1];
      v9 = (unint64_t)a2[2];
      if ((unint64_t)v10 >= v9)
      {
        v12 = *a2;
        v13 = v10 - *a2;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v15 = v9 - (_QWORD)v12;
        if (v15 >> 1 > v14)
          v14 = v15 >> 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v16);
          v12 = *a2;
          v10 = a2[1];
        }
        else
        {
          v17 = 0;
        }
        v18 = (int *)(v16 + 4 * v13);
        *v18 = v8;
        v11 = v18 + 1;
        while (v10 != v12)
        {
          v19 = *--v10;
          *--v18 = v19;
        }
        *a2 = v18;
        a2[1] = v11;
        a2[2] = (int *)(v16 + 4 * v17);
        if (v12)
          operator delete(v12);
      }
      else
      {
        *v10 = v8;
        v11 = v10 + 1;
      }
      a2[1] = v11;
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v34, (const Espresso::layer_shape *)&v36, 0);
      Espresso::layer_nd_shape::shape_vector(&v35, (uint64_t)v34);
      begin = v35.__begin_;
      end = v35.__end_;
      if (v35.__begin_ != v35.__end_)
      {
        v22 = a2[1];
        do
        {
          v23 = *begin;
          v24 = (unint64_t)a2[2];
          if ((unint64_t)v22 >= v24)
          {
            v26 = *a2;
            v27 = v22 - *a2;
            v28 = v27 + 1;
            if ((unint64_t)(v27 + 1) >> 62)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v29 = v24 - (_QWORD)v26;
            if (v29 >> 1 > v28)
              v28 = v29 >> 1;
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
              v30 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v30 = v28;
            if (v30)
            {
              v30 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v30);
              v26 = *a2;
              v22 = a2[1];
            }
            else
            {
              v31 = 0;
            }
            v32 = (int *)(v30 + 4 * v27);
            *v32 = v23;
            v25 = v32 + 1;
            while (v22 != v26)
            {
              v33 = *--v22;
              *--v32 = v33;
            }
            *a2 = v32;
            a2[1] = v25;
            a2[2] = (int *)(v30 + 4 * v31);
            if (v26)
              operator delete(v26);
          }
          else
          {
            *v22 = v23;
            v25 = v22 + 1;
          }
          a2[1] = v25;
          ++begin;
          v22 = v25;
        }
        while (begin != end);
        begin = v35.__begin_;
      }
      if (begin)
      {
        v35.__end_ = begin;
        operator delete(begin);
      }
      if (__p)
      {
        v40 = __p;
        operator delete(__p);
      }
      v2 += 4;
    }
    while (v2 != v3);
  }
}

void sub_1917611B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  uint64_t v21;
  void *v23;

  if (__p)
    operator delete(__p);
  v23 = *(void **)v21;
  if (*(_QWORD *)v21)
  {
    *(_QWORD *)(v21 + 8) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSGraphEngine::Kernels::copy_kernel::~copy_kernel(Espresso::MPSGraphEngine::Kernels::copy_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSGraphEngine::Kernels::copy_kernel::is_valid_for_engine()
{
  return 1;
}

void Espresso::rnn_arch_cpu::~rnn_arch_cpu(Espresso::rnn_arch_cpu *this)
{
  Espresso::generic_rnn_arch_kernel_impl::~generic_rnn_arch_kernel_impl(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::rnn_arch_cpu::__set_weights_finalize(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  Espresso::quantized_weights_helper *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *v8;
  unsigned __int16 *v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v26;
  int v27;
  uint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  std::__shared_weak_count *v53;
  char *v54;
  std::__shared_weak_count *v55;
  char *v56;
  std::__shared_weak_count *v57;
  char *v58;
  std::__shared_weak_count *v59;
  __int128 v60;
  __int128 v61;
  Espresso::quantized_weights_helper *v62;
  std::__shared_weak_count *v63;

  v1 = *(_QWORD **)(a1 + 464);
  v2 = (_QWORD *)(a1 + 472);
  if (v1 == (_QWORD *)(a1 + 472))
    return;
  while (1)
  {
    v4 = (Espresso::quantized_weights_helper *)v1[7];
    v5 = (std::__shared_weak_count *)v1[8];
    v62 = v4;
    v63 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    if (!v4
      || !*(_QWORD *)v4
      || !*((_QWORD *)v4 + 4) && !*((_QWORD *)v4 + 6) && !*((_QWORD *)v4 + 8) && !*((_QWORD *)v4 + 10))
    {
      break;
    }
    v61 = 0uLL;
    if (*(_DWORD *)(a1 + 304))
      Espresso::quantized_weights_helper::dequantize_to_float32_4d(v4, &v60);
    else
      Espresso::quantized_weights_helper::dequantize_to_float32_4d_lstm(v4, &v60);
    v51 = v60;
    v61 = v60;
    v8 = (char *)operator new(0x58uLL);
    v9 = (unsigned __int16 *)(v1 + 4);
    *((_QWORD *)v8 + 1) = 0;
    v10 = (unint64_t *)(v8 + 8);
    *((_QWORD *)v8 + 2) = 0;
    *((_QWORD *)v8 + 3) = &off_1E2DA11B0;
    *(_QWORD *)v8 = &off_1E2DBEC38;
    v11 = *(_QWORD *)(v51 + 24);
    v12 = *(_QWORD *)(v51 + 16);
    *(_OWORD *)(v8 + 56) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *((_QWORD *)v8 + 4) = v12;
    *((_QWORD *)v8 + 5) = v11;
    *(_QWORD *)&v60 = v8 + 24;
    *((_QWORD *)&v60 + 1) = v8;
    v8[48] = 1;
    *(_BYTE *)(v51 + 32) = 0;
    v13 = *((unsigned __int8 *)v1 + 55);
    if ((v13 & 0x80) != 0)
    {
      v15 = v1[5];
      if (v15 != 3)
      {
        if (v15 != 11)
          goto LABEL_70;
        if (**(_QWORD **)v9 != 0x657665725F685F57 || *(_QWORD *)(*(_QWORD *)v9 + 3) != 0x657372657665725FLL)
        {
          v9 = *(unsigned __int16 **)v9;
LABEL_30:
          v17 = *(_QWORD *)v9;
          v18 = *(_QWORD *)((char *)v9 + 3);
          if (v17 == 0x657665725F785F57 && v18 == 0x657372657665725FLL)
          {
            v20 = *(_QWORD *)(a1 + 640);
            v52 = v8 + 24;
            v53 = (std::__shared_weak_count *)v8;
            do
              v21 = __ldxr(v10);
            while (__stxr(v21 + 1, v10));
            (*(void (**)(uint64_t, char **))(*(_QWORD *)v20 + 400))(v20, &v52);
            v22 = v53;
            if (v53)
            {
              v23 = (unint64_t *)&v53->__shared_owners_;
              do
                v24 = __ldaxr(v23);
              while (__stlxr(v24 - 1, v23));
              goto LABEL_68;
            }
          }
          goto LABEL_70;
        }
        goto LABEL_57;
      }
      v9 = *(unsigned __int16 **)v9;
    }
    else if (v13 != 3)
    {
      if (v13 != 11)
        goto LABEL_70;
      v14 = *(_QWORD *)v9 == 0x657665725F685F57 && *(_QWORD *)((char *)v1 + 35) == 0x657372657665725FLL;
      if (!v14)
        goto LABEL_30;
LABEL_57:
      v32 = *(_QWORD *)(a1 + 672);
      v56 = v8 + 24;
      v57 = (std::__shared_weak_count *)v8;
      do
        v33 = __ldxr(v10);
      while (__stxr(v33 + 1, v10));
      (*(void (**)(uint64_t, char **))(*(_QWORD *)v32 + 400))(v32, &v56);
      v22 = v57;
      if (v57)
      {
        v34 = (unint64_t *)&v57->__shared_owners_;
        do
          v24 = __ldaxr(v34);
        while (__stlxr(v24 - 1, v34));
        goto LABEL_68;
      }
      goto LABEL_70;
    }
    if (*v9 == 24407 && *((_BYTE *)v9 + 2) == 104)
    {
      v35 = *(_QWORD *)(a1 + 656);
      v58 = v8 + 24;
      v59 = (std::__shared_weak_count *)v8;
      do
        v36 = __ldxr(v10);
      while (__stxr(v36 + 1, v10));
      (*(void (**)(uint64_t, char **))(*(_QWORD *)v35 + 400))(v35, &v58);
      v22 = v59;
      if (v59)
      {
        v37 = (unint64_t *)&v59->__shared_owners_;
        do
          v24 = __ldaxr(v37);
        while (__stlxr(v24 - 1, v37));
LABEL_68:
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }
    else
    {
      v26 = *v9;
      v27 = *((unsigned __int8 *)v9 + 2);
      if (v26 == 24407 && v27 == 120)
      {
        v29 = *(_QWORD *)(a1 + 624);
        v54 = v8 + 24;
        v55 = (std::__shared_weak_count *)v8;
        do
          v30 = __ldxr(v10);
        while (__stxr(v30 + 1, v10));
        (*(void (**)(uint64_t, char **))(*(_QWORD *)v29 + 400))(v29, &v54);
        v22 = v55;
        if (v55)
        {
          v31 = (unint64_t *)&v55->__shared_owners_;
          do
            v24 = __ldaxr(v31);
          while (__stlxr(v24 - 1, v31));
          goto LABEL_68;
        }
      }
    }
LABEL_70:
    v38 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
    if (*((_QWORD *)&v60 + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
    if (*((_QWORD *)&v61 + 1))
    {
      v42 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v44 = v63;
    if (v63)
    {
      v45 = (unint64_t *)&v63->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v47 = (_QWORD *)v1[1];
    if (v47)
    {
      do
      {
        v48 = v47;
        v47 = (_QWORD *)*v47;
      }
      while (v47);
    }
    else
    {
      do
      {
        v48 = (_QWORD *)v1[2];
        v14 = *v48 == (_QWORD)v1;
        v1 = v48;
      }
      while (!v14);
    }
    v1 = v48;
    if (v48 == v2)
      return;
  }
  if (v5)
  {
    v49 = (unint64_t *)&v5->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1917616D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v5 - 96);
  _Unwind_Resume(a1);
}

void Espresso::rnn_arch_cpu::blob_container_options_for_weight(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::rnn_arch_cpu::lstm_elementwise(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, _QWORD *a5, _QWORD *a6)
{
  int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  vDSP_Length v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  vDSP_Length v30;
  char v31;
  int v32;
  float v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  vDSP_Length v37;
  char v38;
  int v39;
  float v40;
  float *v41;
  float *v42;
  float *v43;
  float *v44;
  vDSP_Length v45;
  float v46;
  float v47;
  float v48;
  float *v49;
  float *v50;
  uint64_t v51;
  vDSP_Length v52;
  float v53;
  float *__E;
  float v55;
  uint64_t v56;
  char *v57;
  vDSP_Length v58;
  char v59;
  int v60;
  float v61;
  float *v62;
  float *v63;
  vDSP_Length v64;
  float v65;
  float *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *p_shared_owners;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  float *__C;
  uint64_t v98;
  float v99;
  float v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;

  v10 = *(unsigned __int8 *)(a1 + 456);
  v11 = *a4;
  v12 = v10 == 0;
  v13 = 12;
  if (v12)
    v13 = 20;
  v93 = *(unsigned int *)(v11 + v13);
  v98 = a1;
  v14 = *(int *)(a1 + 380);
  if (v11 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11))
  {
    v75 = *(std::__shared_weak_count **)(*a4 + 168);
    v90 = *(_QWORD *)(*a4 + 160);
    v111 = v90;
    v112 = v75;
    if (v75)
    {
      p_shared_owners = (unint64_t *)&v75->__shared_owners_;
      do
        v77 = __ldxr(p_shared_owners);
      while (__stxr(v77 + 1, p_shared_owners));
    }
  }
  else
  {
    v90 = 0;
    v111 = 0;
    v112 = 0;
  }
  if (*a5 && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a5 + 32))(*a5))
  {
    v78 = *(std::__shared_weak_count **)(*a5 + 168);
    v92 = *(_QWORD *)(*a5 + 160);
    v109 = v92;
    v110 = v78;
    if (v78)
    {
      v79 = (unint64_t *)&v78->__shared_owners_;
      do
        v80 = __ldxr(v79);
      while (__stxr(v80 + 1, v79));
    }
  }
  else
  {
    v92 = 0;
    v109 = 0;
    v110 = 0;
  }
  if (*a6 && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a6 + 32))(*a6))
  {
    v81 = *(std::__shared_weak_count **)(*a6 + 168);
    v91 = *(_QWORD *)(*a6 + 160);
    v107 = v91;
    v108 = v81;
    if (v81)
    {
      v82 = (unint64_t *)&v81->__shared_owners_;
      do
        v83 = __ldxr(v82);
      while (__stxr(v83 + 1, v82));
      v84 = v81;
    }
    else
    {
      v84 = 0;
    }
  }
  else
  {
    v84 = 0;
    v91 = 0;
    v107 = 0;
    v108 = 0;
  }
  v105 = 0;
  v106 = 0;
  v103 = 0;
  v104 = 0;
  v101 = 0;
  v102 = 0;
  if ((int)v93 >= 1)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = v98 + 16 * a3;
    v20 = 4 * v14;
    v87 = v19 + 704;
    v89 = 3 * (int)v14;
    v85 = v19 + 768;
    v86 = v19 + 736;
    v96 = v98 + 320;
    v88 = 16 * v14;
    v21 = 8 * v14;
    v22 = 4 * v14;
    v94 = v14;
    do
    {
      v23 = *(_QWORD *)(v91 + 24);
      v95 = v18;
      __C = (float *)(v23 + 4 * v18 * v20);
      v24 = *(_QWORD *)(v92 + 24);
      if (*(_DWORD *)(v98 + 404))
        vDSP_vsadd(&__C[v14], 1, (const float *)(v98 + 388), &__C[v14], 1, v14);
      if (*(_DWORD *)(v98 + 392))
      {
        if (*(_DWORD *)(v98 + 396) == 2)
        {
          if ((_DWORD)v14)
          {
            v25 = *(char **)(*(_QWORD *)v86 + 16);
            v26 = *(_QWORD *)(*(_QWORD *)v85 + 16);
            v27 = v25;
            v28 = v24;
            v29 = v23;
            v30 = v14;
            do
            {
              v31 = *v27++;
              v32 = v31;
              if (v26)
                v33 = (double)v32 * 0.0078125 * *(float *)(v26 + 4);
              else
                v33 = (float)v32;
              *(float *)(v29 + v17) = *(float *)(v29 + v17) + (float)(*(float *)(v28 + v16) * v33);
              v29 += 4;
              v28 += 4;
              --v30;
            }
            while (v30);
            v34 = &v25[v14];
            v35 = v24;
            v36 = v23;
            v37 = v14;
            do
            {
              v38 = *v34++;
              v39 = v38;
              if (v26)
                v40 = (double)v39 * 0.0078125 * *(float *)(v26 + 4);
              else
                v40 = (float)v39;
              *(float *)(v36 + v22) = *(float *)(v36 + v22) + (float)(*(float *)(v35 + v16) * v40);
              v36 += 4;
              v35 += 4;
              --v37;
            }
            while (v37);
          }
        }
        else if ((_DWORD)v14)
        {
          v41 = *(float **)(*(_QWORD *)v87 + 16);
          v42 = (float *)(v23 + v17);
          v43 = (float *)(v24 + v16);
          v44 = v41;
          v45 = v14;
          do
          {
            v46 = *v44++;
            v47 = v46;
            v48 = *v43++;
            *v42 = *v42 + (float)(v48 * v47);
            ++v42;
            --v45;
          }
          while (v45);
          v49 = (float *)(v23 + v22);
          v50 = &v41[v94];
          v51 = v24;
          v52 = v14;
          do
          {
            v53 = *v50++;
            *v49 = *v49 + (float)(*(float *)(v51 + v16) * v53);
            ++v49;
            v51 += 4;
            --v52;
          }
          while (v52);
        }
      }
      Espresso::apply_nonlinearity2(&__C[v89], &__C[v89], v14, v98 + 332);
      Espresso::apply_nonlinearity2(__C, __C, v14, v96);
      Espresso::apply_nonlinearity2(&__C[v14], &__C[v14], v14, v96);
      __E = (float *)(v24 + 4 * v95 * v14);
      vDSP_vmma(&__C[v14], 1, __E, 1, __C, 1, &__C[v89], 1, __E, 1, v14);
      v55 = *(float *)(v98 + 408);
      v100 = -v55;
      v99 = v55;
      vDSP_vclip(__E, 1, &v100, &v99, __E, 1, v14);
      if (*(_DWORD *)(v98 + 392))
      {
        if (*(_DWORD *)(v98 + 396) == 2)
        {
          if ((_DWORD)v14)
          {
            v56 = *(_QWORD *)(*(_QWORD *)v85 + 16);
            v57 = (char *)(*(_QWORD *)(*(_QWORD *)v86 + 16) + 2 * v14);
            v58 = v14;
            do
            {
              v59 = *v57++;
              v60 = v59;
              if (v56)
                v61 = (double)v60 * 0.0078125 * *(float *)(v56 + 4);
              else
                v61 = (float)v60;
              *(float *)(v23 + v21) = *(float *)(v23 + v21) + (float)(*(float *)(v24 + v16) * v61);
              v23 += 4;
              v24 += 4;
              --v58;
            }
            while (v58);
          }
        }
        else if ((_DWORD)v14)
        {
          v62 = (float *)(v23 + v21);
          v63 = (float *)(*(_QWORD *)(*(_QWORD *)v87 + 16) + 8 * v14);
          v64 = v14;
          do
          {
            v65 = *v63++;
            *v62 = *v62 + (float)(*(float *)(v24 + v16) * v65);
            ++v62;
            v24 += 4;
            --v64;
          }
          while (v64);
        }
      }
      Espresso::apply_nonlinearity2(&__C[2 * v14], &__C[2 * v14], v14, v96);
      v66 = (float *)(*(_QWORD *)(v90 + 24) + 4 * v95 * v14);
      Espresso::apply_nonlinearity2(__E, v66, v14, v98 + 308);
      vDSP_vmul(v66, 1, &__C[2 * v14], 1, v66, 1, v14);
      v18 = v95 + 1;
      v17 += v88;
      v20 = 4 * v14;
      v16 += v94 * 4;
      v22 += v88;
      v21 += v88;
    }
    while (v95 + 1 != v93);
  }
  if (v84)
  {
    v67 = (unint64_t *)&v84->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v69 = v110;
  if (v110)
  {
    v70 = (unint64_t *)&v110->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = v112;
  if (v112)
  {
    v73 = (unint64_t *)&v112->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
}

void sub_191761DA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 120);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 104);
  _Unwind_Resume(a1);
}

void Espresso::sequence_reverse_kernel_cpu::~sequence_reverse_kernel_cpu(Espresso::sequence_reverse_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::sequence_reverse_kernel_cpu::__launch(uint64_t a1, uint64_t a2, void ***a3, void ***a4)
{
  std::__shared_weak_count *v5;
  _DWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  void *v35;
  std::__shared_weak_count *v36;
  _DWORD *v37;
  std::__shared_weak_count *v38;

  v6 = **a4;
  v5 = (std::__shared_weak_count *)(*a4)[1];
  v37 = v6;
  v38 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (std::__shared_weak_count *)(*a3)[1];
  v35 = **a3;
  v36 = v9;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v33, **a4, (std::__shared_weak_count *)(*a4)[1]);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v31, **a3, (std::__shared_weak_count *)(*a3)[1]);
  LODWORD(v12) = v6[6];
  if ((int)v12 >= 1)
  {
    v13 = 0;
    v14 = 0;
    v15 = v6[3] * v6[2] * v6[4] * v6[5];
    v16 = v31;
    v17 = -1;
    v18 = v33;
    do
    {
      memcpy((void *)(*(_QWORD *)(v16 + 24) + v13), (const void *)(*(_QWORD *)(v18 + 24) + 4 * ((int)v12 + v17) * v15), 4 * v15);
      ++v14;
      v12 = (int)v6[6];
      --v17;
      v13 += 4 * v15;
    }
    while (v14 < v12);
  }
  v19 = v32;
  if (v32)
  {
    v20 = (unint64_t *)&v32->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v34;
  if (v34)
  {
    v23 = (unint64_t *)&v34->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v36;
  if (v36)
  {
    v26 = (unint64_t *)&v36->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v38;
  if (v38)
  {
    v29 = (unint64_t *)&v38->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_191762030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void Espresso::sequence_concat_kernel_cpu::~sequence_concat_kernel_cpu(Espresso::sequence_concat_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::sequence_concat_kernel_cpu::__launch(uint64_t a1, uint64_t a2, void ***a3, uint64_t a4)
{
  void **v5;
  std::__shared_weak_count *v6;
  _DWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  _DWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  _DWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  _DWORD **v19;
  std::__shared_weak_count *v20;
  int *v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  char *v26;
  char *v27;
  size_t v28;
  size_t v29;
  char *v30;
  uint64_t v31;
  size_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _DWORD **v51;
  _DWORD **v52;
  int v53;
  char *v54;
  _DWORD *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  int v59;
  int v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  std::runtime_error *exception;
  uint64_t v72;
  std::__shared_weak_count *v73;
  int *v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  _DWORD *v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  _DWORD *v82;
  std::__shared_weak_count *v83;

  if (*(_DWORD *)(a1 + 280))
  {
    v5 = *a3;
    v7 = **a3;
    v6 = (std::__shared_weak_count *)(*a3)[1];
    v82 = v7;
    v83 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v5 = *a3;
      v10 = **a3;
    }
    else
    {
      v10 = v7;
    }
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v80, v10, (std::__shared_weak_count *)v5[1]);
    v51 = *(_DWORD ***)a4;
    v52 = *(_DWORD ***)(a4 + 8);
    if (*(_DWORD ***)a4 != v52)
    {
      v53 = v7[3] * v7[2] * v7[4] * v7[5];
      v54 = *(char **)(v80 + 24);
      do
      {
        v55 = *v51;
        v56 = (std::__shared_weak_count *)v51[1];
        v78 = *v51;
        v79 = v56;
        if (v56)
        {
          v57 = (unint64_t *)&v56->__shared_owners_;
          do
            v58 = __ldxr(v57);
          while (__stxr(v58 + 1, v57));
        }
        v59 = v55[6];
        Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v76, v55, v56);
        v60 = v53 * v59;
        if (v53 * v59 >= 1)
          memcpy(v54, *(const void **)(v76 + 24), 4 * (v53 * v59));
        v61 = v77;
        if (v77)
        {
          v62 = (unint64_t *)&v77->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v64 = v79;
        if (v79)
        {
          v65 = (unint64_t *)&v79->__shared_owners_;
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
        v54 += 4 * v60;
        v51 += 2;
      }
      while (v51 != v52);
    }
    v67 = v81;
    if (v81)
    {
      v68 = (unint64_t *)&v81->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    v48 = v83;
    if (v83)
    {
      v70 = (unint64_t *)&v83->__shared_owners_;
      do
        v50 = __ldaxr(v70);
      while (__stlxr(v50 - 1, v70));
LABEL_76:
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
  }
  else
  {
    v12 = **a3;
    v11 = (std::__shared_weak_count *)(*a3)[1];
    v82 = v12;
    v83 = v11;
    if (v11)
    {
      v13 = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v80, v12, v11);
    v16 = **(_DWORD ***)a4;
    v15 = *(std::__shared_weak_count **)(*(_QWORD *)a4 + 8);
    v78 = v16;
    v79 = v15;
    if (v15)
    {
      v17 = (unint64_t *)&v15->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v76, v16, v15);
    v19 = *(_DWORD ***)a4;
    v21 = *(int **)(*(_QWORD *)a4 + 16);
    v20 = (std::__shared_weak_count *)v19[3];
    v74 = v21;
    v75 = v20;
    if (v20)
    {
      v22 = (unint64_t *)&v20->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v72, v21, v20);
    v24 = v16[6];
    if (v24 != v21[6] || v24 != v12[6])
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Mismatched sequence lengths in sequence concat.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (v24 >= 1)
    {
      v25 = v21[2] * (uint64_t)v21[4] * v21[3];
      v26 = (char *)(*(_QWORD *)(v72 + 24) + 4 * (int)v25 * (v24 - 1));
      v27 = *(char **)(v76 + 24);
      v28 = 4 * v16[2] * v16[4] * v16[3];
      v29 = 4 * v25;
      v30 = *(char **)(v80 + 24);
      v31 = -4 * v25;
      v32 = 4 * v25 + v28;
      do
      {
        memcpy(v30, v27, v28);
        memcpy(&v30[v28], v26, v29);
        v26 += v31;
        v27 += v28;
        v30 += v32;
        --v24;
      }
      while (v24);
    }
    v33 = v73;
    if (v73)
    {
      v34 = (unint64_t *)&v73->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = v75;
    if (v75)
    {
      v37 = (unint64_t *)&v75->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v39 = v77;
    if (v77)
    {
      v40 = (unint64_t *)&v77->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v42 = v79;
    if (v79)
    {
      v43 = (unint64_t *)&v79->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v45 = v81;
    if (v81)
    {
      v46 = (unint64_t *)&v81->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v48 = v83;
    if (v83)
    {
      v49 = (unint64_t *)&v83->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      goto LABEL_76;
    }
  }
}

void sub_191762510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void Espresso::sequence_repeat_kernel_cpu::~sequence_repeat_kernel_cpu(Espresso::sequence_repeat_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::sequence_repeat_kernel_cpu::__launch(uint64_t a1, uint64_t a2, void ***a3, void ***a4)
{
  void **v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  void *v32;
  std::__shared_weak_count *v33;

  v6 = *a3;
  v7 = **a3;
  v8 = (std::__shared_weak_count *)(*a3)[1];
  v32 = v7;
  v33 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v6 = *a3;
    v7 = **a3;
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v30, v7, (std::__shared_weak_count *)v6[1]);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v28, **a4, (std::__shared_weak_count *)(*a4)[1]);
  if (*(int *)(a1 + 280) >= 1)
  {
    v11 = 0;
    v12 = *(char **)(v30 + 24);
    v13 = v28;
    LODWORD(v14) = *(_DWORD *)(v28 + 8);
    v15 = v28 + 12;
    do
    {
      v16 = 0;
      v14 = (int)v14;
      do
      {
        v14 *= *(int *)(v15 + v16);
        v16 += 4;
      }
      while (v16 != 12);
      memcpy(v12, *(const void **)(v13 + 24), 4 * v14);
      v17 = 0;
      LODWORD(v14) = *(_DWORD *)(v13 + 8);
      v18 = (int)v14;
      do
      {
        v18 *= *(int *)(v15 + v17);
        v17 += 4;
      }
      while (v17 != 12);
      v12 += 4 * v18;
      ++v11;
    }
    while (v11 < *(_DWORD *)(a1 + 280));
  }
  v19 = v29;
  if (v29)
  {
    v20 = (unint64_t *)&v29->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v31;
  if (v31)
  {
    v23 = (unint64_t *)&v31->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v33;
  if (v33)
  {
    v26 = (unint64_t *)&v33->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_191762764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL Espresso::generic_rnn_arch_kernel_impl::__set_quantized_weight_raw_blob(_DWORD *a1, uint64_t *a2, const std::string *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  int v12;
  int v13;
  int v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t **v18;
  uint64_t **v19;
  uint64_t **v20;
  uint64_t **v21;
  uint64_t **v22;
  uint64_t **v23;
  uint64_t **v24;
  uint64_t **v25;
  uint64_t **v26;
  uint64_t **v27;
  int v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t **v32;
  uint64_t **v33;
  uint64_t **v34;
  uint64_t **v35;
  std::string *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  std::string::size_type size;
  size_t v46;
  const std::string *v47;
  std::string *v48;
  std::string *v49;
  _BOOL4 v50;
  uint64_t v51;
  std::string::size_type v52;
  std::string::size_type v53;
  int v54;
  std::string *v55;
  uint64_t v56;
  const std::string *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  BOOL v62;
  char v63;
  size_t v64;
  std::string *v65;
  std::string *v66;
  _BOOL4 v67;
  uint64_t v68;
  std::string::size_type v69;
  std::string::size_type v70;
  int v71;
  std::string *v72;
  uint64_t v73;
  const std::string *v74;
  int v75;
  int v76;
  int v77;
  int v78;
  char v79;
  size_t v80;
  std::string *v81;
  std::string *v82;
  _BOOL4 v83;
  uint64_t v84;
  std::string::size_type v85;
  std::string::size_type v86;
  int v87;
  uint64_t v88;
  const std::string *v89;
  int v90;
  int v91;
  int v92;
  int v93;
  char v94;
  int v95;
  char *v96;
  char **v97;
  std::string::size_type v98;
  std::string::size_type v99;
  std::string::size_type v100;
  std::string::size_type v101;
  uint64_t v102;
  int v103;
  int v104;
  BOOL v105;
  void *v106;
  int v107;
  std::string::size_type v108;
  const std::string *v109;
  std::string::size_type v110;
  int v111;
  std::string *v112;
  int v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::string v123;
  std::string v124;
  void *__p;
  std::__shared_weak_count *v126;
  uint64_t v127;
  uint64_t v128;
  unsigned __int8 *v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  uint64_t *v132;
  _DWORD *v133;
  char **v134;
  char *v135[2];
  unsigned __int8 v136;
  void *v137;
  std::__shared_weak_count *v138;
  std::string v139;
  char v140[9];

  v137 = 0;
  v138 = 0;
  if (a6 && *a6)
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v137, *a6, a6[1]);
  v12 = a1[95];
  v13 = a1[96];
  if (a1[76])
    v14 = a1[95];
  else
    v14 = 4 * v12;
  v136 = 0;
  v135[0] = 0;
  v135[1] = 0;
  v134 = v135;
  std::string::basic_string[abi:ne180100]<0>(&__p, "W_x");
  v15 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v134, &__p, (uint64_t)&__p);
  *((_DWORD *)v15 + 14) = v13;
  *((_DWORD *)v15 + 15) = v14;
  if (SHIBYTE(v127) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "W_x_reverse");
  v16 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v134, &__p, (uint64_t)&__p);
  *((_DWORD *)v16 + 14) = v13;
  *((_DWORD *)v16 + 15) = v14;
  if (SHIBYTE(v127) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "W_h");
  v17 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v134, &__p, (uint64_t)&__p);
  *((_DWORD *)v17 + 14) = v12;
  *((_DWORD *)v17 + 15) = v14;
  if (SHIBYTE(v127) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "W_h_reverse");
  v18 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v134, &__p, (uint64_t)&__p);
  *((_DWORD *)v18 + 14) = v12;
  *((_DWORD *)v18 + 15) = v14;
  if (SHIBYTE(v127) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "W_z");
  v19 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v134, &__p, (uint64_t)&__p);
  *((_DWORD *)v19 + 14) = v13;
  *((_DWORD *)v19 + 15) = v14;
  if (SHIBYTE(v127) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "W_r");
  v20 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v134, &__p, (uint64_t)&__p);
  *((_DWORD *)v20 + 14) = v13;
  *((_DWORD *)v20 + 15) = v14;
  if (SHIBYTE(v127) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "W_o");
  v21 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v134, &__p, (uint64_t)&__p);
  *((_DWORD *)v21 + 14) = v13;
  *((_DWORD *)v21 + 15) = v14;
  if (SHIBYTE(v127) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "R_z");
  v22 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v134, &__p, (uint64_t)&__p);
  *((_DWORD *)v22 + 14) = v12;
  *((_DWORD *)v22 + 15) = v14;
  if (SHIBYTE(v127) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "R_r");
  v23 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v134, &__p, (uint64_t)&__p);
  *((_DWORD *)v23 + 14) = v12;
  *((_DWORD *)v23 + 15) = v14;
  if (SHIBYTE(v127) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "R_o");
  v24 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v134, &__p, (uint64_t)&__p);
  *((_DWORD *)v24 + 14) = v12;
  *((_DWORD *)v24 + 15) = v14;
  if (SHIBYTE(v127) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "b");
  v25 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v134, &__p, (uint64_t)&__p);
  *((_DWORD *)v25 + 14) = v14;
  *((_DWORD *)v25 + 15) = 1;
  if (SHIBYTE(v127) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "b_reverse");
  v26 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v134, &__p, (uint64_t)&__p);
  *((_DWORD *)v26 + 14) = v14;
  *((_DWORD *)v26 + 15) = 1;
  if (SHIBYTE(v127) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "p");
  v27 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v134, &__p, (uint64_t)&__p);
  v28 = 3 * v12;
  *((_DWORD *)v27 + 14) = v28;
  *((_DWORD *)v27 + 15) = 1;
  if (SHIBYTE(v127) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "p_reverse");
  v29 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v134, &__p, (uint64_t)&__p);
  *((_DWORD *)v29 + 14) = v28;
  *((_DWORD *)v29 + 15) = 1;
  if (SHIBYTE(v127) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "B_z");
  v30 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v134, &__p, (uint64_t)&__p);
  *((_DWORD *)v30 + 14) = v14;
  *((_DWORD *)v30 + 15) = 1;
  if (SHIBYTE(v127) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "B_r");
  v31 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v134, &__p, (uint64_t)&__p);
  *((_DWORD *)v31 + 14) = v14;
  *((_DWORD *)v31 + 15) = 1;
  if (SHIBYTE(v127) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "B_o");
  v32 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v134, &__p, (uint64_t)&__p);
  *((_DWORD *)v32 + 14) = v14;
  *((_DWORD *)v32 + 15) = 1;
  if (SHIBYTE(v127) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "B_i_z");
  v33 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v134, &__p, (uint64_t)&__p);
  *((_DWORD *)v33 + 14) = v14;
  *((_DWORD *)v33 + 15) = 1;
  if (SHIBYTE(v127) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "B_i_r");
  v34 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v134, &__p, (uint64_t)&__p);
  *((_DWORD *)v34 + 14) = v14;
  *((_DWORD *)v34 + 15) = 1;
  if (SHIBYTE(v127) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "B_i_o");
  v35 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v134, &__p, (uint64_t)&__p);
  *((_DWORD *)v35 + 14) = v14;
  *((_DWORD *)v35 + 15) = 1;
  if (SHIBYTE(v127) < 0)
    operator delete(__p);
  __p = v137;
  v126 = v138;
  if (v138)
  {
    p_shared_owners = (unint64_t *)&v138->__shared_owners_;
    do
      v38 = __ldxr(p_shared_owners);
    while (__stxr(v38 + 1, p_shared_owners));
  }
  v127 = a4;
  v128 = a5;
  v39 = *a2;
  v40 = (std::__shared_weak_count *)a2[1];
  v129 = &v136;
  v130 = v39;
  v131 = v40;
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v132 = a6;
  v133 = a1;
  v43 = (uint64_t *)v134;
  if (v134 != v135)
  {
    while (1)
    {
      if (*((char *)v43 + 55) < 0)
        std::string::__init_copy_ctor_external(&v124, (const std::string::value_type *)v43[4], v43[5]);
      else
        v124 = *(std::string *)(v43 + 4);
      v44 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      if ((v44 & 0x80u) == 0)
        size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      else
        size = a3->__r_.__value_.__l.__size_;
      if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v46 = HIBYTE(v124.__r_.__value_.__r.__words[2]);
      else
        v46 = v124.__r_.__value_.__l.__size_;
      if (size == v46)
      {
        if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v36 = &v124;
        else
          v36 = (std::string *)v124.__r_.__value_.__r.__words[0];
        if ((v44 & 0x80) != 0)
        {
          if (!memcmp(a3->__r_.__value_.__l.__data_, v36, a3->__r_.__value_.__l.__size_))
            goto LABEL_172;
        }
        else
        {
          if (!*((_BYTE *)&a3->__r_.__value_.__s + 23))
            goto LABEL_172;
          v47 = a3;
          while (v47->__r_.__value_.__s.__data_[0] == v36->__r_.__value_.__s.__data_[0])
          {
            v47 = (const std::string *)((char *)v47 + 1);
            v36 = (std::string *)((char *)v36 + 1);
            if (!--v44)
              goto LABEL_172;
          }
        }
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v139, v46 + 14);
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v48 = &v139;
      else
        v48 = (std::string *)v139.__r_.__value_.__r.__words[0];
      if (v46)
      {
        if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v49 = &v124;
        else
          v49 = (std::string *)v124.__r_.__value_.__r.__words[0];
        memmove(v48, v49, v46);
      }
      v50 = 0;
      strcpy((char *)v48 + v46, "_per_ch_qscale");
      v51 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      if ((v51 & 0x80u) == 0)
        v52 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      else
        v52 = a3->__r_.__value_.__l.__size_;
      v53 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
      v54 = SHIBYTE(v139.__r_.__value_.__r.__words[2]);
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v53 = v139.__r_.__value_.__l.__size_;
      if (v52 != v53)
        goto LABEL_99;
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v55 = &v139;
      else
        v55 = (std::string *)v139.__r_.__value_.__r.__words[0];
      if ((v51 & 0x80) != 0)
      {
        v50 = memcmp(a3->__r_.__value_.__l.__data_, v55, a3->__r_.__value_.__l.__size_) == 0;
        if ((v54 & 0x80000000) == 0)
          goto LABEL_100;
      }
      else
      {
        if (*((_BYTE *)&a3->__r_.__value_.__s + 23))
        {
          v56 = v51 - 1;
          v57 = a3;
          do
          {
            v59 = v57->__r_.__value_.__s.__data_[0];
            v57 = (const std::string *)((char *)v57 + 1);
            v58 = v59;
            v61 = v55->__r_.__value_.__s.__data_[0];
            v55 = (std::string *)((char *)v55 + 1);
            v60 = v61;
            v62 = v56-- != 0;
            v63 = v62;
            v50 = v58 == v60;
          }
          while (v58 == v60 && (v63 & 1) != 0);
LABEL_99:
          if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_100;
          goto LABEL_103;
        }
        v50 = 1;
        if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_100:
          if (v50)
            goto LABEL_101;
          goto LABEL_104;
        }
      }
LABEL_103:
      operator delete(v139.__r_.__value_.__l.__data_);
      if (v50)
      {
LABEL_101:
        std::string::basic_string[abi:ne180100]<0>(&v139, "per_ch_qscale");
        Espresso::generic_rnn_arch_kernel_impl::__set_quantized_weight_raw_blob(std::shared_ptr<Espresso::abstract_batch> const&,std::string const&,void *,unsigned long,Espresso::base_kernel::set_weight_options *)::$_0::operator()((uint64_t)&__p, &v124, (uint64_t)&v139, *((_DWORD *)v43 + 14), *((_DWORD *)v43 + 15));
        goto LABEL_170;
      }
LABEL_104:
      if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v64 = HIBYTE(v124.__r_.__value_.__r.__words[2]);
      else
        v64 = v124.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v139, v64 + 13);
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v65 = &v139;
      else
        v65 = (std::string *)v139.__r_.__value_.__r.__words[0];
      if (v64)
      {
        if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v66 = &v124;
        else
          v66 = (std::string *)v124.__r_.__value_.__r.__words[0];
        memmove(v65, v66, v64);
      }
      v67 = 0;
      strcpy((char *)v65 + v64, "_per_ch_qbias");
      v68 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      if ((v68 & 0x80u) == 0)
        v69 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      else
        v69 = a3->__r_.__value_.__l.__size_;
      v70 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
      v71 = SHIBYTE(v139.__r_.__value_.__r.__words[2]);
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v70 = v139.__r_.__value_.__l.__size_;
      if (v69 != v70)
        goto LABEL_132;
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v72 = &v139;
      else
        v72 = (std::string *)v139.__r_.__value_.__r.__words[0];
      if ((v68 & 0x80) != 0)
      {
        v67 = memcmp(a3->__r_.__value_.__l.__data_, v72, a3->__r_.__value_.__l.__size_) == 0;
        if ((v71 & 0x80000000) == 0)
          goto LABEL_133;
      }
      else
      {
        if (*((_BYTE *)&a3->__r_.__value_.__s + 23))
        {
          v73 = v68 - 1;
          v74 = a3;
          do
          {
            v76 = v74->__r_.__value_.__s.__data_[0];
            v74 = (const std::string *)((char *)v74 + 1);
            v75 = v76;
            v78 = v72->__r_.__value_.__s.__data_[0];
            v72 = (std::string *)((char *)v72 + 1);
            v77 = v78;
            v62 = v73-- != 0;
            v79 = v62;
            v67 = v75 == v77;
          }
          while (v75 == v77 && (v79 & 1) != 0);
LABEL_132:
          if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_133;
          goto LABEL_138;
        }
        v67 = 1;
        if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_133:
          if (v67)
            goto LABEL_134;
          goto LABEL_139;
        }
      }
LABEL_138:
      operator delete(v139.__r_.__value_.__l.__data_);
      if (v67)
      {
LABEL_134:
        std::string::basic_string[abi:ne180100]<0>(&v139, "per_ch_qbias");
        Espresso::generic_rnn_arch_kernel_impl::__set_quantized_weight_raw_blob(std::shared_ptr<Espresso::abstract_batch> const&,std::string const&,void *,unsigned long,Espresso::base_kernel::set_weight_options *)::$_0::operator()((uint64_t)&__p, &v124, (uint64_t)&v139, *((_DWORD *)v43 + 14), *((_DWORD *)v43 + 15));
        goto LABEL_170;
      }
LABEL_139:
      if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v80 = HIBYTE(v124.__r_.__value_.__r.__words[2]);
      else
        v80 = v124.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v139, v80 + 15);
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v81 = &v139;
      else
        v81 = (std::string *)v139.__r_.__value_.__r.__words[0];
      if (v80)
      {
        if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v82 = &v124;
        else
          v82 = (std::string *)v124.__r_.__value_.__r.__words[0];
        memmove(v81, v82, v80);
      }
      v83 = 0;
      strcpy((char *)v81 + v80, "_lut_to_float32");
      v84 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      if ((v84 & 0x80u) == 0)
        v85 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      else
        v85 = a3->__r_.__value_.__l.__size_;
      v86 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
      v87 = SHIBYTE(v139.__r_.__value_.__r.__words[2]);
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v86 = v139.__r_.__value_.__l.__size_;
      if (v85 != v86)
        goto LABEL_167;
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = &v139;
      else
        v36 = (std::string *)v139.__r_.__value_.__r.__words[0];
      if ((v84 & 0x80) != 0)
      {
        v83 = memcmp(a3->__r_.__value_.__l.__data_, v36, a3->__r_.__value_.__l.__size_) == 0;
        if (v87 < 0)
          goto LABEL_185;
      }
      else
      {
        if (*((_BYTE *)&a3->__r_.__value_.__s + 23))
        {
          v88 = v84 - 1;
          v89 = a3;
          do
          {
            v91 = v89->__r_.__value_.__s.__data_[0];
            v89 = (const std::string *)((char *)v89 + 1);
            v90 = v91;
            v93 = v36->__r_.__value_.__s.__data_[0];
            v36 = (std::string *)((char *)v36 + 1);
            v92 = v93;
            v62 = v88-- != 0;
            v94 = v62;
            v83 = v90 == v92;
          }
          while (v90 == v92 && (v94 & 1) != 0);
LABEL_167:
          if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_185;
          goto LABEL_168;
        }
        v83 = 1;
        if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_185:
          operator delete(v139.__r_.__value_.__l.__data_);
          if (!v83)
          {
LABEL_186:
            if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v98 = HIBYTE(v124.__r_.__value_.__r.__words[2]);
            else
              v98 = v124.__r_.__value_.__l.__size_;
            v99 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
            if ((v99 & 0x80u) != 0)
              v99 = a3->__r_.__value_.__l.__size_;
            if (v99 != v98 + 3)
              goto LABEL_172;
            std::string::basic_string(&v139, a3, 0, v98, (std::allocator<char> *)&v123);
            if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v100 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
            else
              v100 = v139.__r_.__value_.__l.__size_;
            v101 = HIBYTE(v124.__r_.__value_.__r.__words[2]);
            if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v101 = v124.__r_.__value_.__l.__size_;
            if (v100 != v101)
            {
              if ((*((_BYTE *)&v139.__r_.__value_.__s + 23) & 0x80) == 0)
                goto LABEL_172;
LABEL_171:
              operator delete(v139.__r_.__value_.__l.__data_);
              goto LABEL_172;
            }
            if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v36 = &v124;
            else
              v36 = (std::string *)v124.__r_.__value_.__r.__words[0];
            if ((*((_BYTE *)&v139.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              v106 = (void *)v139.__r_.__value_.__r.__words[0];
              v107 = memcmp(v139.__r_.__value_.__l.__data_, v36, v139.__r_.__value_.__l.__size_);
              operator delete(v106);
              if (v107)
                goto LABEL_172;
            }
            else if (*((_BYTE *)&v139.__r_.__value_.__s + 23))
            {
              v102 = 0;
              do
              {
                v103 = v139.__r_.__value_.__s.__data_[v102];
                v104 = v36->__r_.__value_.__s.__data_[v102];
                v105 = v103 != v104 || HIBYTE(v139.__r_.__value_.__r.__words[2]) - 1 == v102++;
              }
              while (!v105);
              if (v103 != v104)
                goto LABEL_172;
            }
            v108 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
            if ((v108 & 0x80u) == 0)
              v109 = a3;
            else
              v109 = (const std::string *)a3->__r_.__value_.__r.__words[0];
            if (v109->__r_.__value_.__s.__data_[v98] != 95)
              goto LABEL_172;
            v110 = (std::string::size_type)v109 + v98;
            v111 = *(unsigned __int8 *)(v110 + 1);
            if (v111 != 85 && v111 != 83)
              goto LABEL_172;
            if (*(unsigned __int8 *)(v110 + 2) - 49 > 7)
              goto LABEL_172;
            if ((v108 & 0x80u) != 0)
              v108 = a3->__r_.__value_.__l.__size_;
            std::string::basic_string(&v123, a3, v108 - 2, 2uLL, (std::allocator<char> *)v140);
            v112 = std::string::insert(&v123, 0, "W_");
            v139 = *v112;
            v112->__r_.__value_.__l.__size_ = 0;
            v112->__r_.__value_.__r.__words[2] = 0;
            v112->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v123.__r_.__value_.__l.__data_);
            Espresso::generic_rnn_arch_kernel_impl::__set_quantized_weight_raw_blob(std::shared_ptr<Espresso::abstract_batch> const&,std::string const&,void *,unsigned long,Espresso::base_kernel::set_weight_options *)::$_0::operator()((uint64_t)&__p, &v124, (uint64_t)&v139, *((_DWORD *)v43 + 14), *((_DWORD *)v43 + 15));
            goto LABEL_170;
          }
          goto LABEL_169;
        }
      }
LABEL_168:
      if (!v83)
        goto LABEL_186;
LABEL_169:
      std::string::basic_string[abi:ne180100]<0>(&v139, "lut_to_float32");
      Espresso::generic_rnn_arch_kernel_impl::__set_quantized_weight_raw_blob(std::shared_ptr<Espresso::abstract_batch> const&,std::string const&,void *,unsigned long,Espresso::base_kernel::set_weight_options *)::$_0::operator()((uint64_t)&__p, &v124, (uint64_t)&v139, *((_DWORD *)v43 + 14), *((_DWORD *)v43 + 15));
LABEL_170:
      if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_171;
LABEL_172:
      v95 = v136;
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v124.__r_.__value_.__l.__data_);
      if (!v95)
      {
        v96 = (char *)v43[1];
        if (v96)
        {
          do
          {
            v97 = (char **)v96;
            v96 = *(char **)v96;
          }
          while (v96);
        }
        else
        {
          do
          {
            v97 = (char **)v43[2];
            v105 = *v97 == (char *)v43;
            v43 = (uint64_t *)v97;
          }
          while (!v105);
        }
        v43 = (uint64_t *)v97;
        if (v97 != v135)
          continue;
      }
      break;
    }
  }
  v113 = v136;
  if (v40)
  {
    v114 = (unint64_t *)&v40->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *, std::string *))v40->__on_zero_shared)(v40, v36);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v116 = v126;
  if (v126)
  {
    v117 = (unint64_t *)&v126->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *, std::string *))v116->__on_zero_shared)(v116, v36);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(v135[0]);
  v119 = v138;
  if (v138)
  {
    v120 = (unint64_t *)&v138->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  return v113 != 0;
}

void sub_1917633D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char *a35)
{
  uint64_t v35;

  if (*(char *)(v35 - 105) < 0)
    operator delete(*(void **)(v35 - 128));
  if (a21 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(a35);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v35 - 144);
  _Unwind_Resume(a1);
}

void Espresso::generic_rnn_arch_kernel_impl::__set_quantized_weight_raw_blob(std::shared_ptr<Espresso::abstract_batch> const&,std::string const&,void *,unsigned long,Espresso::base_kernel::set_weight_options *)::$_0::operator()(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t **v11;
  _QWORD *v12;
  _QWORD *v13;
  _BOOL4 v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  _OWORD *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  _OWORD *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t **v40;
  unint64_t *v41;
  uint64_t **v42;
  uint64_t v43;
  double v44;
  double v45;
  int32x2_t v46;
  __int128 v47;

  v10 = *(_QWORD *)(a1 + 64);
  v11 = (uint64_t **)(v10 + 464);
  v12 = *(_QWORD **)(v10 + 472);
  if (!v12)
    goto LABEL_45;
  v13 = (_QWORD *)(v10 + 472);
  do
  {
    v14 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12 + 4, a2);
    v15 = v12 + 1;
    if (!v14)
    {
      v15 = v12;
      v13 = v12;
    }
    v12 = (_QWORD *)*v15;
  }
  while (*v15);
  if (v13 == (_QWORD *)(v10 + 472)
    || std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v13 + 4))
  {
LABEL_45:
    if (*(_DWORD *)(v10 + 304))
    {
      v16 = (char *)operator new(0xD0uLL);
      v17 = v16;
      *((_QWORD *)v16 + 1) = 0;
      *((_QWORD *)v16 + 2) = 0;
      *(_QWORD *)v16 = &off_1E2DBD3F0;
      v18 = v16 + 24;
      v19 = *(_QWORD *)(v10 + 8);
      v20 = *(std::__shared_weak_count **)(v10 + 16);
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldxr(p_shared_owners);
        while (__stxr(v22 + 1, p_shared_owners));
        *(_OWORD *)(v16 + 104) = 0u;
        *(_OWORD *)(v16 + 120) = 0u;
        *(_OWORD *)(v16 + 72) = 0u;
        *(_OWORD *)(v16 + 88) = 0u;
        *(_OWORD *)(v16 + 40) = 0u;
        *(_OWORD *)(v16 + 56) = 0u;
        *v18 = 0u;
        *((_QWORD *)v16 + 17) = v19;
        *((_QWORD *)v16 + 18) = v20;
        do
          v23 = __ldxr(p_shared_owners);
        while (__stxr(v23 + 1, p_shared_owners));
      }
      else
      {
        *(_OWORD *)(v16 + 104) = 0u;
        *(_OWORD *)(v16 + 120) = 0u;
        *(_OWORD *)(v16 + 72) = 0u;
        *(_OWORD *)(v16 + 88) = 0u;
        *(_OWORD *)(v16 + 40) = 0u;
        *(_OWORD *)(v16 + 56) = 0u;
        *v18 = 0u;
        *((_QWORD *)v16 + 17) = v19;
        *((_QWORD *)v16 + 18) = 0;
      }
      *((_QWORD *)v16 + 19) = 0x100000001;
      *((_DWORD *)v16 + 40) = a4;
      *((_DWORD *)v16 + 41) = a5;
      *((_QWORD *)v16 + 21) = 0x100000000;
      v16[176] = 0;
      *((_QWORD *)v16 + 24) = 0;
      *((_QWORD *)v16 + 25) = 0;
      *(_QWORD *)(v16 + 180) = 0;
      v16[188] = 0;
      if (v20)
      {
        v32 = (unint64_t *)&v20->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      *(_QWORD *)&v47 = v18;
      *((_QWORD *)&v47 + 1) = v17;
      v34 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, a2, (uint64_t)a2);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v34 + 7), &v47);
      v35 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
      if (*((_QWORD *)&v47 + 1))
      {
        v36 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        goto LABEL_40;
      }
    }
    else
    {
      v24 = (char *)operator new(0xD0uLL);
      v25 = v24;
      *((_QWORD *)v24 + 1) = 0;
      *((_QWORD *)v24 + 2) = 0;
      *(_QWORD *)v24 = &off_1E2DBD3F0;
      v26 = v24 + 24;
      v27 = *(_QWORD *)(v10 + 8);
      v28 = *(std::__shared_weak_count **)(v10 + 16);
      if (v28)
      {
        v29 = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
        *(_OWORD *)(v24 + 104) = 0u;
        *(_OWORD *)(v24 + 120) = 0u;
        *(_OWORD *)(v24 + 72) = 0u;
        *(_OWORD *)(v24 + 88) = 0u;
        *(_OWORD *)(v24 + 40) = 0u;
        *(_OWORD *)(v24 + 56) = 0u;
        *v26 = 0u;
        *((_QWORD *)v24 + 17) = v27;
        *((_QWORD *)v24 + 18) = v28;
        do
          v31 = __ldxr(v29);
        while (__stxr(v31 + 1, v29));
      }
      else
      {
        *(_OWORD *)(v24 + 104) = 0u;
        *(_OWORD *)(v24 + 120) = 0u;
        *(_OWORD *)(v24 + 72) = 0u;
        *(_OWORD *)(v24 + 88) = 0u;
        *(_OWORD *)(v24 + 40) = 0u;
        *(_OWORD *)(v24 + 56) = 0u;
        *v26 = 0u;
        *((_QWORD *)v24 + 17) = v27;
        *((_QWORD *)v24 + 18) = 0;
      }
      *((_QWORD *)v24 + 19) = 0x100000001;
      *((_DWORD *)v24 + 40) = a4;
      *((_DWORD *)v24 + 41) = a5;
      *((_QWORD *)v24 + 21) = 0x400000000;
      v24[176] = 0;
      *((_QWORD *)v24 + 24) = 0;
      *((_QWORD *)v24 + 25) = 0;
      *(_QWORD *)(v24 + 180) = 0;
      v24[188] = 0;
      if (v28)
      {
        v38 = (unint64_t *)&v28->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      *(_QWORD *)&v47 = v26;
      *((_QWORD *)&v47 + 1) = v25;
      v40 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, a2, (uint64_t)a2);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v40 + 7), &v47);
      v35 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
      if (*((_QWORD *)&v47 + 1))
      {
        v41 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
        do
          v37 = __ldaxr(v41);
        while (__stlxr(v37 - 1, v41));
LABEL_40:
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
    }
  }
  v42 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, a2, (uint64_t)a2);
  Espresso::quantized_weights_helper::__set_weight_raw_blob((uint64_t)v42[7], v44, v45, v46, v43, a3, *(char **)(a1 + 16), *(_QWORD *)(a1 + 24), *(uint64_t **)(a1 + 56));
  **(_BYTE **)(a1 + 32) = 1;
}

void sub_191763854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  _QWORD *v10;
  _QWORD *v11;
  std::string *v12;
  uint64_t *v13;
  uint64_t *v14;
  _QWORD v16[2];
  char v17;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v10 = v5 + 4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4))
          break;
        v5 = *v7;
        v8 = v7;
        if (!*v7)
          goto LABEL_7;
      }
      if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a2))
        return v7;
      v8 = v7 + 1;
      v5 = v7[1];
      if (!v5)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    v11 = operator new(0x48uLL);
    v16[0] = v11;
    v16[1] = v6;
    v17 = 0;
    v12 = (std::string *)(v11 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      v11[6] = *(_QWORD *)(a3 + 16);
    }
    v11[7] = 0;
    v11[8] = 0;
    v17 = 1;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = v7;
    *v8 = v11;
    v13 = (uint64_t *)**a1;
    v14 = v11;
    if (v13)
    {
      *a1 = v13;
      v14 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v16[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v16);
  }
  return (uint64_t **)v11;
}

void sub_191763998(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::rnn_arch_params>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  int v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *p_shared_owners;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  unint64_t *v274;
  void *v275[2];
  char v276;
  uint64_t v277;
  std::__shared_weak_count *v278;
  void *__p[2];
  char v280;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v275, "alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(float *)(a2 + 8) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v277 + 96))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v142 = v278;
    if (v278)
    {
      p_shared_owners = (unint64_t *)&v278->__shared_owners_;
      do
        v144 = __ldaxr(p_shared_owners);
      while (__stlxr(v144 - 1, p_shared_owners));
      if (!v144)
      {
        ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
        std::__shared_weak_count::__release_weak(v142);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(float *)(a2 + 12) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v277 + 96))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v145 = v278;
    if (v278)
    {
      v146 = (unint64_t *)&v278->__shared_owners_;
      do
        v147 = __ldaxr(v146);
      while (__stlxr(v147 - 1, v146));
      if (!v147)
      {
        ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
        std::__shared_weak_count::__release_weak(v145);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v277 + 40))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v148 = v278;
    if (v278)
    {
      v149 = (unint64_t *)&v278->__shared_owners_;
      do
        v150 = __ldaxr(v149);
      while (__stlxr(v150 - 1, v149));
      if (!v150)
      {
        ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
        std::__shared_weak_count::__release_weak(v148);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "nonlinearity_type");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v277 + 40))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v151 = v278;
    if (v278)
    {
      v152 = (unint64_t *)&v278->__shared_owners_;
      do
        v153 = __ldaxr(v152);
      while (__stlxr(v153 - 1, v152));
      if (!v153)
      {
        ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
        std::__shared_weak_count::__release_weak(v151);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "nonlinearity_alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(float *)(a2 + 8) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v277 + 96))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v154 = v278;
    if (v278)
    {
      v155 = (unint64_t *)&v278->__shared_owners_;
      do
        v156 = __ldaxr(v155);
      while (__stlxr(v156 - 1, v155));
      if (!v156)
      {
        ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
        std::__shared_weak_count::__release_weak(v154);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "nonlinearity_beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(float *)(a2 + 12) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v277 + 96))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v157 = v278;
    if (v278)
    {
      v158 = (unint64_t *)&v278->__shared_owners_;
      do
        v159 = __ldaxr(v158);
      while (__stlxr(v159 - 1, v158));
      if (!v159)
      {
        ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
        std::__shared_weak_count::__release_weak(v157);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "quantization_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(_DWORD *)(a2 + 92) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v277 + 40))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v160 = v278;
    if (v278)
    {
      v161 = (unint64_t *)&v278->__shared_owners_;
      do
        v162 = __ldaxr(v161);
      while (__stlxr(v162 - 1, v161));
      if (!v162)
      {
        ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
        std::__shared_weak_count::__release_weak(v160);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "quantization_scale_x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(float *)(a2 + 116) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v277 + 96))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v163 = v278;
    if (v278)
    {
      v164 = (unint64_t *)&v278->__shared_owners_;
      do
        v165 = __ldaxr(v164);
      while (__stlxr(v165 - 1, v164));
      if (!v165)
      {
        ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
        std::__shared_weak_count::__release_weak(v163);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "quantization_scale_x_reverse");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(float *)(a2 + 120) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v277 + 96))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v166 = v278;
    if (v278)
    {
      v167 = (unint64_t *)&v278->__shared_owners_;
      do
        v168 = __ldaxr(v167);
      while (__stlxr(v168 - 1, v167));
      if (!v168)
      {
        ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
        std::__shared_weak_count::__release_weak(v166);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "quantization_scale_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(float *)(a2 + 124) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v277 + 96))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v169 = v278;
    if (v278)
    {
      v170 = (unint64_t *)&v278->__shared_owners_;
      do
        v171 = __ldaxr(v170);
      while (__stlxr(v171 - 1, v170));
      if (!v171)
      {
        ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
        std::__shared_weak_count::__release_weak(v169);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "quantization_scale_h_reverse");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(float *)(a2 + 128) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v277 + 96))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v172 = v278;
    if (v278)
    {
      v173 = (unint64_t *)&v278->__shared_owners_;
      do
        v174 = __ldaxr(v173);
      while (__stlxr(v174 - 1, v173));
      if (!v174)
      {
        ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
        std::__shared_weak_count::__release_weak(v172);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "quantization_simple_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(_BYTE *)(a2 + 132) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v277 + 88))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v175 = v278;
    if (v278)
    {
      v176 = (unint64_t *)&v278->__shared_owners_;
      do
        v177 = __ldaxr(v176);
      while (__stlxr(v177 - 1, v176));
      if (!v177)
      {
        ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
        std::__shared_weak_count::__release_weak(v175);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "internal_nonlinearity_type");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v277 + 40))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v178 = v278;
    if (v278)
    {
      v179 = (unint64_t *)&v278->__shared_owners_;
      do
        v180 = __ldaxr(v179);
      while (__stlxr(v180 - 1, v179));
      if (!v180)
      {
        ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
        std::__shared_weak_count::__release_weak(v178);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "internal_nonlinearity_alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(float *)(a2 + 20) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v277 + 96))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v181 = v278;
    if (v278)
    {
      v182 = (unint64_t *)&v278->__shared_owners_;
      do
        v183 = __ldaxr(v182);
      while (__stlxr(v183 - 1, v182));
      if (!v183)
      {
        ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
        std::__shared_weak_count::__release_weak(v181);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "internal_nonlinearity_beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(float *)(a2 + 24) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v277 + 96))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v184 = v278;
    if (v278)
    {
      v185 = (unint64_t *)&v278->__shared_owners_;
      do
        v186 = __ldaxr(v185);
      while (__stlxr(v186 - 1, v185));
      if (!v186)
      {
        ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
        std::__shared_weak_count::__release_weak(v184);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "hidden_size");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(_DWORD *)(a2 + 76) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v277 + 40))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v187 = v278;
    if (v278)
    {
      v188 = (unint64_t *)&v278->__shared_owners_;
      do
        v189 = __ldaxr(v188);
      while (__stlxr(v189 - 1, v188));
      if (!v189)
      {
        ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
        std::__shared_weak_count::__release_weak(v187);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "input_size");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(_DWORD *)(a2 + 80) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v277 + 40))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v190 = v278;
    if (v278)
    {
      v191 = (unint64_t *)&v278->__shared_owners_;
      do
        v192 = __ldaxr(v191);
      while (__stlxr(v192 - 1, v191));
      if (!v192)
      {
        ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
        std::__shared_weak_count::__release_weak(v190);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    if (*(int *)(a2 + 80) <= 0)
      *(_DWORD *)(a2 + 80) = *(_DWORD *)(a2 + 76);
    std::string::basic_string[abi:ne180100]<0>(v275, "lstm_forget_bias");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(float *)(a2 + 84) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v277 + 96))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v193 = v278;
    if (v278)
    {
      v194 = (unint64_t *)&v278->__shared_owners_;
      do
        v195 = __ldaxr(v194);
      while (__stlxr(v195 - 1, v194));
      if (!v195)
      {
        ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
        std::__shared_weak_count::__release_weak(v193);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "lstm_has_peepholes");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(_DWORD *)(a2 + 88) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v277 + 40))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v196 = v278;
    if (v278)
    {
      v197 = (unint64_t *)&v278->__shared_owners_;
      do
        v198 = __ldaxr(v197);
      while (__stlxr(v198 - 1, v197));
      if (!v198)
      {
        ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
        std::__shared_weak_count::__release_weak(v196);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "encoder_output_sequence");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(_DWORD *)(a2 + 144) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v277 + 40))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v199 = v278;
    if (v278)
    {
      v200 = (unint64_t *)&v278->__shared_owners_;
      do
        v201 = __ldaxr(v200);
      while (__stlxr(v201 - 1, v200));
      if (!v201)
      {
        ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
        std::__shared_weak_count::__release_weak(v199);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "arch");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(_DWORD *)(a2 + 136) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v277 + 40))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v202 = v278;
    if (v278)
    {
      v203 = (unint64_t *)&v278->__shared_owners_;
      do
        v204 = __ldaxr(v203);
      while (__stlxr(v204 - 1, v203));
      if (!v204)
      {
        ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
        std::__shared_weak_count::__release_weak(v202);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "encoder_bidirectional_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(_DWORD *)(a2 + 148) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v277 + 40))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v205 = v278;
    if (v278)
    {
      v206 = (unint64_t *)&v278->__shared_owners_;
      do
        v207 = __ldaxr(v206);
      while (__stlxr(v207 - 1, v206));
      if (!v207)
      {
        ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
        std::__shared_weak_count::__release_weak(v205);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "internal_nonlinearity_second_type");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(_DWORD *)(a2 + 28) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v277 + 40))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v208 = v278;
    if (v278)
    {
      v209 = (unint64_t *)&v278->__shared_owners_;
      do
        v210 = __ldaxr(v209);
      while (__stlxr(v210 - 1, v209));
      if (!v210)
      {
        ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
        std::__shared_weak_count::__release_weak(v208);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "internal_nonlinearity_second_alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(float *)(a2 + 32) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v277 + 96))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v211 = v278;
    if (v278)
    {
      v212 = (unint64_t *)&v278->__shared_owners_;
      do
        v213 = __ldaxr(v212);
      while (__stlxr(v213 - 1, v212));
      if (!v213)
      {
        ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
        std::__shared_weak_count::__release_weak(v211);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "internal_nonlinearity_second_beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(float *)(a2 + 36) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v277 + 96))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v214 = v278;
    if (v278)
    {
      v215 = (unint64_t *)&v278->__shared_owners_;
      do
        v216 = __ldaxr(v215);
      while (__stlxr(v216 - 1, v215));
      if (!v216)
      {
        ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
        std::__shared_weak_count::__release_weak(v214);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "nonlinearity_bidir_type");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(_DWORD *)(a2 + 40) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v277 + 40))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v217 = v278;
    if (v278)
    {
      v218 = (unint64_t *)&v278->__shared_owners_;
      do
        v219 = __ldaxr(v218);
      while (__stlxr(v219 - 1, v218));
      if (!v219)
      {
        ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
        std::__shared_weak_count::__release_weak(v217);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "nonlinearity_bidir_alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(float *)(a2 + 44) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v277 + 96))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v220 = v278;
    if (v278)
    {
      v221 = (unint64_t *)&v278->__shared_owners_;
      do
        v222 = __ldaxr(v221);
      while (__stlxr(v222 - 1, v221));
      if (!v222)
      {
        ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
        std::__shared_weak_count::__release_weak(v220);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "nonlinearity_bidir_beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(float *)(a2 + 48) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v277 + 96))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v223 = v278;
    if (v278)
    {
      v224 = (unint64_t *)&v278->__shared_owners_;
      do
        v225 = __ldaxr(v224);
      while (__stlxr(v225 - 1, v224));
      if (!v225)
      {
        ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
        std::__shared_weak_count::__release_weak(v223);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "internal_nonlinearity_bidir_type");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(_DWORD *)(a2 + 52) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v277 + 40))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v226 = v278;
    if (v278)
    {
      v227 = (unint64_t *)&v278->__shared_owners_;
      do
        v228 = __ldaxr(v227);
      while (__stlxr(v228 - 1, v227));
      if (!v228)
      {
        ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
        std::__shared_weak_count::__release_weak(v226);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "internal_nonlinearity_bidir_alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(float *)(a2 + 56) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v277 + 96))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v229 = v278;
    if (v278)
    {
      v230 = (unint64_t *)&v278->__shared_owners_;
      do
        v231 = __ldaxr(v230);
      while (__stlxr(v231 - 1, v230));
      if (!v231)
      {
        ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
        std::__shared_weak_count::__release_weak(v229);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "internal_nonlinearity_bidir_beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(float *)(a2 + 60) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v277 + 96))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v232 = v278;
    if (v278)
    {
      v233 = (unint64_t *)&v278->__shared_owners_;
      do
        v234 = __ldaxr(v233);
      while (__stlxr(v234 - 1, v233));
      if (!v234)
      {
        ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
        std::__shared_weak_count::__release_weak(v232);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "internal_nonlinearity_second_bidir_type");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(_DWORD *)(a2 + 64) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v277 + 40))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v235 = v278;
    if (v278)
    {
      v236 = (unint64_t *)&v278->__shared_owners_;
      do
        v237 = __ldaxr(v236);
      while (__stlxr(v237 - 1, v236));
      if (!v237)
      {
        ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
        std::__shared_weak_count::__release_weak(v235);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "internal_nonlinearity_second_bidir_alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(float *)(a2 + 68) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v277 + 96))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v238 = v278;
    if (v278)
    {
      v239 = (unint64_t *)&v278->__shared_owners_;
      do
        v240 = __ldaxr(v239);
      while (__stlxr(v240 - 1, v239));
      if (!v240)
      {
        ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
        std::__shared_weak_count::__release_weak(v238);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "internal_nonlinearity_second_bidir_beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(float *)(a2 + 72) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v277 + 96))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v241 = v278;
    if (v278)
    {
      v242 = (unint64_t *)&v278->__shared_owners_;
      do
        v243 = __ldaxr(v242);
      while (__stlxr(v243 - 1, v242));
      if (!v243)
      {
        ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
        std::__shared_weak_count::__release_weak(v241);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "bias_vector_flag");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(_DWORD *)(a2 + 96) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v277 + 40))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v244 = v278;
    if (v278)
    {
      v245 = (unint64_t *)&v278->__shared_owners_;
      do
        v246 = __ldaxr(v245);
      while (__stlxr(v246 - 1, v245));
      if (!v246)
      {
        ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
        std::__shared_weak_count::__release_weak(v244);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "forget_bias");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(_DWORD *)(a2 + 100) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v277 + 40))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v247 = v278;
    if (v278)
    {
      v248 = (unint64_t *)&v278->__shared_owners_;
      do
        v249 = __ldaxr(v248);
      while (__stlxr(v249 - 1, v248));
      if (!v249)
      {
        ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
        std::__shared_weak_count::__release_weak(v247);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "cell_clip_threshold");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(float *)(a2 + 104) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v277 + 96))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v250 = v278;
    if (v278)
    {
      v251 = (unint64_t *)&v278->__shared_owners_;
      do
        v252 = __ldaxr(v251);
      while (__stlxr(v252 - 1, v251));
      if (!v252)
      {
        ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
        std::__shared_weak_count::__release_weak(v250);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "reset_after");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(_BYTE *)(a2 + 133) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v277 + 88))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v253 = v278;
    if (v278)
    {
      v254 = (unint64_t *)&v278->__shared_owners_;
      do
        v255 = __ldaxr(v254);
      while (__stlxr(v255 - 1, v254));
      if (!v255)
      {
        ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
        std::__shared_weak_count::__release_weak(v253);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "hidden_bias");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(_BYTE *)(a2 + 134) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v277 + 88))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v256 = v278;
    if (v278)
    {
      v257 = (unint64_t *)&v278->__shared_owners_;
      do
        v258 = __ldaxr(v257);
      while (__stlxr(v258 - 1, v257));
      if (!v258)
      {
        ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
        std::__shared_weak_count::__release_weak(v256);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "input_bias");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(_BYTE *)(a2 + 135) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v277 + 88))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v259 = v278;
    if (v278)
    {
      v260 = (unint64_t *)&v278->__shared_owners_;
      do
        v261 = __ldaxr(v260);
      while (__stlxr(v261 - 1, v260));
      if (!v261)
      {
        ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
        std::__shared_weak_count::__release_weak(v259);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "coupled_input_forget");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(_DWORD *)(a2 + 108) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v277 + 40))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v262 = v278;
    if (v278)
    {
      v263 = (unint64_t *)&v278->__shared_owners_;
      do
        v264 = __ldaxr(v263);
      while (__stlxr(v264 - 1, v263));
      if (!v264)
      {
        ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
        std::__shared_weak_count::__release_weak(v262);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "max_batch_size");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(_DWORD *)(a2 + 112) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v277 + 40))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v265 = v278;
    if (v278)
    {
      v266 = (unint64_t *)&v278->__shared_owners_;
      do
        v267 = __ldaxr(v266);
      while (__stlxr(v267 - 1, v266));
      if (!v267)
      {
        ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
        std::__shared_weak_count::__release_weak(v265);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(_BYTE *)(a2 + 152) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v277 + 88))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v268 = v278;
    if (v278)
    {
      v269 = (unint64_t *)&v278->__shared_owners_;
      do
        v270 = __ldaxr(v269);
      while (__stlxr(v270 - 1, v269));
      if (!v270)
      {
        ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
        std::__shared_weak_count::__release_weak(v268);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "dynamic_length");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(_BYTE *)(a2 + 153) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v277 + 88))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v271 = v278;
    if (v278)
    {
      v272 = (unint64_t *)&v278->__shared_owners_;
      do
        v273 = __ldaxr(v272);
      while (__stlxr(v273 - 1, v272));
      if (!v273)
      {
        ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
        std::__shared_weak_count::__release_weak(v271);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "override_eng");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v277 + 24))(v277, __p))
      *(_DWORD *)(a2 + 140) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v277 + 40))(v277, __p);
    if (v280 < 0)
      operator delete(__p[0]);
    v139 = v278;
    if (!v278)
      goto LABEL_904;
    v274 = (unint64_t *)&v278->__shared_owners_;
    do
      v141 = __ldaxr(v274);
    while (__stlxr(v141 - 1, v274));
    goto LABEL_902;
  }
  std::string::basic_string[abi:ne180100]<0>(v275, "alpha");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 216))(v277, __p, a2 + 8);
  if (v280 < 0)
    operator delete(__p[0]);
  v5 = v278;
  if (v278)
  {
    v6 = (unint64_t *)&v278->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v276 < 0)
    operator delete(v275[0]);
  std::string::basic_string[abi:ne180100]<0>(v275, "beta");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 216))(v277, __p, a2 + 12);
  if (v280 < 0)
    operator delete(__p[0]);
  v8 = v278;
  if (v278)
  {
    v9 = (unint64_t *)&v278->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v276 < 0)
    operator delete(v275[0]);
  std::string::basic_string[abi:ne180100]<0>(v275, "mode");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 160))(v277, __p, a2);
  if (v280 < 0)
    operator delete(__p[0]);
  v11 = v278;
  if (v278)
  {
    v12 = (unint64_t *)&v278->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v276 < 0)
    operator delete(v275[0]);
  std::string::basic_string[abi:ne180100]<0>(v275, "nonlinearity_type");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 160))(v277, __p, a2 + 4);
  if (v280 < 0)
    operator delete(__p[0]);
  v14 = v278;
  if (v278)
  {
    v15 = (unint64_t *)&v278->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v276 < 0)
    operator delete(v275[0]);
  std::string::basic_string[abi:ne180100]<0>(v275, "nonlinearity_alpha");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 216))(v277, __p, a2 + 8);
  if (v280 < 0)
    operator delete(__p[0]);
  v17 = v278;
  if (v278)
  {
    v18 = (unint64_t *)&v278->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v276 < 0)
    operator delete(v275[0]);
  std::string::basic_string[abi:ne180100]<0>(v275, "nonlinearity_beta");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 216))(v277, __p, a2 + 12);
  if (v280 < 0)
    operator delete(__p[0]);
  v20 = v278;
  if (v278)
  {
    v21 = (unint64_t *)&v278->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v276 < 0)
    operator delete(v275[0]);
  std::string::basic_string[abi:ne180100]<0>(v275, "quantization_mode");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 160))(v277, __p, a2 + 92);
  if (v280 < 0)
    operator delete(__p[0]);
  v23 = v278;
  if (v278)
  {
    v24 = (unint64_t *)&v278->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v276 < 0)
    operator delete(v275[0]);
  std::string::basic_string[abi:ne180100]<0>(v275, "quantization_scale_x");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 216))(v277, __p, a2 + 116);
  if (v280 < 0)
    operator delete(__p[0]);
  v26 = v278;
  if (v278)
  {
    v27 = (unint64_t *)&v278->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v276 < 0)
    operator delete(v275[0]);
  std::string::basic_string[abi:ne180100]<0>(v275, "quantization_scale_x_reverse");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 216))(v277, __p, a2 + 120);
  if (v280 < 0)
    operator delete(__p[0]);
  v29 = v278;
  if (v278)
  {
    v30 = (unint64_t *)&v278->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v276 < 0)
    operator delete(v275[0]);
  std::string::basic_string[abi:ne180100]<0>(v275, "quantization_scale_h");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 216))(v277, __p, a2 + 124);
  if (v280 < 0)
    operator delete(__p[0]);
  v32 = v278;
  if (v278)
  {
    v33 = (unint64_t *)&v278->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (v276 < 0)
    operator delete(v275[0]);
  std::string::basic_string[abi:ne180100]<0>(v275, "quantization_scale_h_reverse");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 216))(v277, __p, a2 + 128);
  if (v280 < 0)
    operator delete(__p[0]);
  v35 = v278;
  if (v278)
  {
    v36 = (unint64_t *)&v278->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (v276 < 0)
    operator delete(v275[0]);
  std::string::basic_string[abi:ne180100]<0>(v275, "quantization_simple_mode");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 208))(v277, __p, a2 + 132);
  if (v280 < 0)
    operator delete(__p[0]);
  v38 = v278;
  if (v278)
  {
    v39 = (unint64_t *)&v278->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v276 < 0)
    operator delete(v275[0]);
  std::string::basic_string[abi:ne180100]<0>(v275, "internal_nonlinearity_type");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 160))(v277, __p, a2 + 16);
  if (v280 < 0)
    operator delete(__p[0]);
  v41 = v278;
  if (v278)
  {
    v42 = (unint64_t *)&v278->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v276 < 0)
    operator delete(v275[0]);
  std::string::basic_string[abi:ne180100]<0>(v275, "internal_nonlinearity_alpha");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 216))(v277, __p, a2 + 20);
  if (v280 < 0)
    operator delete(__p[0]);
  v44 = v278;
  if (v278)
  {
    v45 = (unint64_t *)&v278->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (v276 < 0)
    operator delete(v275[0]);
  std::string::basic_string[abi:ne180100]<0>(v275, "internal_nonlinearity_beta");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 216))(v277, __p, a2 + 24);
  if (v280 < 0)
    operator delete(__p[0]);
  v47 = v278;
  if (v278)
  {
    v48 = (unint64_t *)&v278->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  if (v276 < 0)
    operator delete(v275[0]);
  std::string::basic_string[abi:ne180100]<0>(v275, "hidden_size");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 160))(v277, __p, a2 + 76);
  if (v280 < 0)
    operator delete(__p[0]);
  v50 = v278;
  if (v278)
  {
    v51 = (unint64_t *)&v278->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if (v276 < 0)
    operator delete(v275[0]);
  if (*(int *)(a2 + 80) >= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v275, "input_size");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 160))(v277, __p, a2 + 80);
    if (v280 < 0)
      operator delete(__p[0]);
    v53 = v278;
    if (v278)
    {
      v54 = (unint64_t *)&v278->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v275, "lstm_forget_bias");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 216))(v277, __p, a2 + 84);
  if (v280 < 0)
    operator delete(__p[0]);
  v56 = v278;
  if (v278)
  {
    v57 = (unint64_t *)&v278->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v276 < 0)
    operator delete(v275[0]);
  std::string::basic_string[abi:ne180100]<0>(v275, "lstm_has_peepholes");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 160))(v277, __p, a2 + 88);
  if (v280 < 0)
    operator delete(__p[0]);
  v59 = v278;
  if (v278)
  {
    v60 = (unint64_t *)&v278->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (v276 < 0)
    operator delete(v275[0]);
  std::string::basic_string[abi:ne180100]<0>(v275, "encoder_output_sequence");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 160))(v277, __p, a2 + 144);
  if (v280 < 0)
    operator delete(__p[0]);
  v62 = v278;
  if (v278)
  {
    v63 = (unint64_t *)&v278->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  if (v276 < 0)
    operator delete(v275[0]);
  std::string::basic_string[abi:ne180100]<0>(v275, "arch");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 160))(v277, __p, a2 + 136);
  if (v280 < 0)
    operator delete(__p[0]);
  v65 = v278;
  if (v278)
  {
    v66 = (unint64_t *)&v278->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (v276 < 0)
    operator delete(v275[0]);
  std::string::basic_string[abi:ne180100]<0>(v275, "encoder_bidirectional_mode");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 160))(v277, __p, a2 + 148);
  if (v280 < 0)
    operator delete(__p[0]);
  v68 = v278;
  if (v278)
  {
    v69 = (unint64_t *)&v278->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  if (v276 < 0)
    operator delete(v275[0]);
  std::string::basic_string[abi:ne180100]<0>(v275, "internal_nonlinearity_second_type");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 160))(v277, __p, a2 + 28);
  if (v280 < 0)
    operator delete(__p[0]);
  v71 = v278;
  if (v278)
  {
    v72 = (unint64_t *)&v278->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  if (v276 < 0)
    operator delete(v275[0]);
  std::string::basic_string[abi:ne180100]<0>(v275, "internal_nonlinearity_second_alpha");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 216))(v277, __p, a2 + 32);
  if (v280 < 0)
    operator delete(__p[0]);
  v74 = v278;
  if (v278)
  {
    v75 = (unint64_t *)&v278->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  if (v276 < 0)
    operator delete(v275[0]);
  std::string::basic_string[abi:ne180100]<0>(v275, "internal_nonlinearity_second_beta");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 216))(v277, __p, a2 + 36);
  if (v280 < 0)
    operator delete(__p[0]);
  v77 = v278;
  if (v278)
  {
    v78 = (unint64_t *)&v278->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  if (v276 < 0)
    operator delete(v275[0]);
  std::string::basic_string[abi:ne180100]<0>(v275, "nonlinearity_bidir_type");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 160))(v277, __p, a2 + 40);
  if (v280 < 0)
    operator delete(__p[0]);
  v80 = v278;
  if (v278)
  {
    v81 = (unint64_t *)&v278->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  if (v276 < 0)
    operator delete(v275[0]);
  std::string::basic_string[abi:ne180100]<0>(v275, "nonlinearity_bidir_alpha");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 216))(v277, __p, a2 + 44);
  if (v280 < 0)
    operator delete(__p[0]);
  v83 = v278;
  if (v278)
  {
    v84 = (unint64_t *)&v278->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  if (v276 < 0)
    operator delete(v275[0]);
  std::string::basic_string[abi:ne180100]<0>(v275, "nonlinearity_bidir_beta");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 216))(v277, __p, a2 + 48);
  if (v280 < 0)
    operator delete(__p[0]);
  v86 = v278;
  if (v278)
  {
    v87 = (unint64_t *)&v278->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  if (v276 < 0)
    operator delete(v275[0]);
  if (*(_DWORD *)(a2 + 148))
  {
    std::string::basic_string[abi:ne180100]<0>(v275, "internal_nonlinearity_bidir_type");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 160))(v277, __p, a2 + 52);
    if (v280 < 0)
      operator delete(__p[0]);
    v89 = v278;
    if (v278)
    {
      v90 = (unint64_t *)&v278->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "internal_nonlinearity_bidir_alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 216))(v277, __p, a2 + 56);
    if (v280 < 0)
      operator delete(__p[0]);
    v92 = v278;
    if (v278)
    {
      v93 = (unint64_t *)&v278->__shared_owners_;
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "internal_nonlinearity_bidir_beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 216))(v277, __p, a2 + 60);
    if (v280 < 0)
      operator delete(__p[0]);
    v95 = v278;
    if (v278)
    {
      v96 = (unint64_t *)&v278->__shared_owners_;
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 - 1, v96));
      if (!v97)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "internal_nonlinearity_second_bidir_type");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 160))(v277, __p, a2 + 64);
    if (v280 < 0)
      operator delete(__p[0]);
    v98 = v278;
    if (v278)
    {
      v99 = (unint64_t *)&v278->__shared_owners_;
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "internal_nonlinearity_second_bidir_alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 216))(v277, __p, a2 + 68);
    if (v280 < 0)
      operator delete(__p[0]);
    v101 = v278;
    if (v278)
    {
      v102 = (unint64_t *)&v278->__shared_owners_;
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
    std::string::basic_string[abi:ne180100]<0>(v275, "internal_nonlinearity_second_bidir_beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 216))(v277, __p, a2 + 72);
    if (v280 < 0)
      operator delete(__p[0]);
    v104 = v278;
    if (v278)
    {
      v105 = (unint64_t *)&v278->__shared_owners_;
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v275, "bias_vector_flag");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 160))(v277, __p, a2 + 96);
  if (v280 < 0)
    operator delete(__p[0]);
  v107 = v278;
  if (v278)
  {
    v108 = (unint64_t *)&v278->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  if (v276 < 0)
    operator delete(v275[0]);
  std::string::basic_string[abi:ne180100]<0>(v275, "forget_bias");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 160))(v277, __p, a2 + 100);
  if (v280 < 0)
    operator delete(__p[0]);
  v110 = v278;
  if (v278)
  {
    v111 = (unint64_t *)&v278->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  if (v276 < 0)
    operator delete(v275[0]);
  std::string::basic_string[abi:ne180100]<0>(v275, "cell_clip_threshold");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 216))(v277, __p, a2 + 104);
  if (v280 < 0)
    operator delete(__p[0]);
  v113 = v278;
  if (v278)
  {
    v114 = (unint64_t *)&v278->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  if (v276 < 0)
    operator delete(v275[0]);
  std::string::basic_string[abi:ne180100]<0>(v275, "reset_after");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 208))(v277, __p, a2 + 133);
  if (v280 < 0)
    operator delete(__p[0]);
  v116 = v278;
  if (v278)
  {
    v117 = (unint64_t *)&v278->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  if (v276 < 0)
    operator delete(v275[0]);
  std::string::basic_string[abi:ne180100]<0>(v275, "hidden_bias");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 208))(v277, __p, a2 + 134);
  if (v280 < 0)
    operator delete(__p[0]);
  v119 = v278;
  if (v278)
  {
    v120 = (unint64_t *)&v278->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  if (v276 < 0)
    operator delete(v275[0]);
  std::string::basic_string[abi:ne180100]<0>(v275, "input_bias");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 208))(v277, __p, a2 + 135);
  if (v280 < 0)
    operator delete(__p[0]);
  v122 = v278;
  if (v278)
  {
    v123 = (unint64_t *)&v278->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  if (v276 < 0)
    operator delete(v275[0]);
  std::string::basic_string[abi:ne180100]<0>(v275, "coupled_input_forget");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 160))(v277, __p, a2 + 108);
  if (v280 < 0)
    operator delete(__p[0]);
  v125 = v278;
  if (v278)
  {
    v126 = (unint64_t *)&v278->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  if (v276 < 0)
    operator delete(v275[0]);
  std::string::basic_string[abi:ne180100]<0>(v275, "max_batch_size");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 160))(v277, __p, a2 + 112);
  if (v280 < 0)
    operator delete(__p[0]);
  v128 = v278;
  if (v278)
  {
    v129 = (unint64_t *)&v278->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  if (v276 < 0)
    operator delete(v275[0]);
  if (*(_BYTE *)(a2 + 152))
  {
    std::string::basic_string[abi:ne180100]<0>(v275, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 208))(v277, __p, a2 + 152);
    if (v280 < 0)
      operator delete(__p[0]);
    v131 = v278;
    if (v278)
    {
      v132 = (unint64_t *)&v278->__shared_owners_;
      do
        v133 = __ldaxr(v132);
      while (__stlxr(v133 - 1, v132));
      if (!v133)
      {
        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
        std::__shared_weak_count::__release_weak(v131);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
  }
  if (*(_BYTE *)(a2 + 153))
  {
    std::string::basic_string[abi:ne180100]<0>(v275, "dynamic_length");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 208))(v277, __p, a2 + 153);
    if (v280 < 0)
      operator delete(__p[0]);
    v134 = v278;
    if (v278)
    {
      v135 = (unint64_t *)&v278->__shared_owners_;
      do
        v136 = __ldaxr(v135);
      while (__stlxr(v136 - 1, v135));
      if (!v136)
      {
        ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
        std::__shared_weak_count::__release_weak(v134);
      }
    }
    if (v276 < 0)
      operator delete(v275[0]);
  }
  v138 = *(_DWORD *)(a2 + 140);
  v137 = a2 + 140;
  if (v138)
  {
    std::string::basic_string[abi:ne180100]<0>(v275, "override_eng");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v275, &v277);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v277 + 160))(v277, __p, v137);
    if (v280 < 0)
      operator delete(__p[0]);
    v139 = v278;
    if (!v278)
      goto LABEL_904;
    v140 = (unint64_t *)&v278->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
LABEL_902:
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
LABEL_904:
    if (v276 < 0)
      operator delete(v275[0]);
  }
}

void sub_191767300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::sequence_concat_params>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p[2];
  char v14;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "simple_concat");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, &v11);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v11 + 160))(v11, __p, a2);
    if (v14 < 0)
      operator delete(__p[0]);
    v5 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      goto LABEL_15;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "simple_concat");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, &v11);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v11 + 24))(v11, __p))
      *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v11 + 40))(v11, __p);
    if (v14 < 0)
      operator delete(__p[0]);
    v5 = v12;
    if (v12)
    {
      v8 = (unint64_t *)&v12->__shared_owners_;
      do
        v7 = __ldaxr(v8);
      while (__stlxr(v7 - 1, v8));
LABEL_15:
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_19176773C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::params_io<Espresso::sequence_repeat_params>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p[2];
  char v14;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "n_repetitions");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, &v11);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v11 + 160))(v11, __p, a2);
    if (v14 < 0)
      operator delete(__p[0]);
    v5 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      goto LABEL_15;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "n_repetitions");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, &v11);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v11 + 24))(v11, __p))
      *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v11 + 40))(v11, __p);
    if (v14 < 0)
      operator delete(__p[0]);
    v5 = v12;
    if (v12)
    {
      v8 = (unint64_t *)&v12->__shared_owners_;
      do
        v7 = __ldaxr(v8);
      while (__stlxr(v7 - 1, v8));
LABEL_15:
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1917678B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::operator>>(uint64_t a1, uint64_t a2)
{
  Espresso::SerDes::params_io<Espresso::rnn_arch_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::convolution_uniforms>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::pool_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::lrn_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::softmax_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::layer_shape>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::concat_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::split_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::upsample_kernel_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::elementwise_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::activation_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::axpby_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::l2_norm_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::bias_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::batchnorm_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::dropout_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::reshape_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::reshape_like_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::vimage2espresso_param>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::blob_numerical_properties>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::reduce_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::general_padding_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::prediction_smoothing_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::space_to_batch_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::broadcast_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::lambda_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::patch_extractor_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::crop_and_resize_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::cf_branch_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::dynamic_dequantize_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::spatial_transformer_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::cf_call_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::topk_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::general_concat_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::alloc_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::load_global_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::store_global_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::scatter_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::load_random_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::matrix_band_part_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::fill_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::tensor_zero_pad_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::squeeze_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::array_gather_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::instancenorm_1d_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::gumbel_max_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::builtin_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::general_slice_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::cross_entropy_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::non_maximum_suppression_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::sgd_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::gather_nd_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::adam_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::scatter_nd_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::one_hot_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::wg_transform_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::grid_sampling_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::resample_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::self_attention_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::loopkit_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::argsort_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::pool3d_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::conv3d_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::static_quantize_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::static_dequantize_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::general_slice_update_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::einsum_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::foreign_network_storage_blob_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::foreign_network_weight_file_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::tunneled_ane_op_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::tunneled_unit_bottom_layout_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::tunneled_unit_top_layout_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::tunneled_ane_unit_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::brick_params>(a1, a2, 0);
}

void Espresso::SerDes::operator>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::rnn_arch_params>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::convolution_uniforms>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  Espresso::convolution_uniforms *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Espresso::convolution_uniforms *v16;
  char *v17;
  Espresso::convolution_uniforms *v18;
  Espresso::convolution_uniforms *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  Espresso::convolution_uniforms *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v34, *a1, v4);
    v5 = *(Espresso::convolution_uniforms **)a2;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    v6 = v35 - v34;
    if (v35 == v34)
    {
      v16 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 3);
      if (v8 >= v6 >> 4)
      {
        v28 = 168 * v7;
        v16 = (Espresso::convolution_uniforms *)((char *)v5 + 168 * v7);
        do
        {
          Espresso::convolution_uniforms::convolution_uniforms(v5);
          v5 = (Espresso::convolution_uniforms *)(v29 + 168);
          v28 -= 168;
        }
        while (v28);
        *(_QWORD *)(a2 + 8) = v16;
      }
      else
      {
        if ((unint64_t)v6 >= 0x1861861861861861)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x9E79E79E79E79E7ALL * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 3);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0xC30C30C30C30C3)
          v10 = 0x186186186186186;
        else
          v10 = v9;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::convolution_uniforms>>(v10);
        v13 = v12;
        v14 = 0;
        v15 = 168 * v7;
        v16 = (Espresso::convolution_uniforms *)&v11[168 * v7];
        do
        {
          Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)&v11[v14]);
          v14 += 168;
        }
        while (v15 != v14);
        v17 = &v11[168 * v13];
        v19 = *(Espresso::convolution_uniforms **)a2;
        v18 = *(Espresso::convolution_uniforms **)(a2 + 8);
        if (v18 != *(Espresso::convolution_uniforms **)a2)
        {
          do
          {
            v20 = *(_OWORD *)((char *)v18 - 168);
            v21 = *(_OWORD *)((char *)v18 - 152);
            *(_OWORD *)(v11 - 136) = *(_OWORD *)((char *)v18 - 136);
            *(_OWORD *)(v11 - 152) = v21;
            *(_OWORD *)(v11 - 168) = v20;
            v22 = *(_OWORD *)((char *)v18 - 120);
            v23 = *(_OWORD *)((char *)v18 - 104);
            v24 = *(_OWORD *)((char *)v18 - 88);
            *(_OWORD *)(v11 - 72) = *(_OWORD *)((char *)v18 - 72);
            *(_OWORD *)(v11 - 88) = v24;
            *(_OWORD *)(v11 - 104) = v23;
            *(_OWORD *)(v11 - 120) = v22;
            v25 = *(_OWORD *)((char *)v18 - 56);
            v26 = *(_OWORD *)((char *)v18 - 40);
            v27 = *(_OWORD *)((char *)v18 - 24);
            *(_QWORD *)(v11 - 11) = *(_QWORD *)((char *)v18 - 11);
            *(_OWORD *)(v11 - 24) = v27;
            *(_OWORD *)(v11 - 40) = v26;
            *(_OWORD *)(v11 - 56) = v25;
            v11 -= 168;
            v18 = (Espresso::convolution_uniforms *)((char *)v18 - 168);
          }
          while (v18 != v19);
          v18 = *(Espresso::convolution_uniforms **)a2;
        }
        *(_QWORD *)a2 = v11;
        *(_QWORD *)(a2 + 8) = v16;
        *(_QWORD *)(a2 + 16) = v17;
        if (v18)
        {
          operator delete(v18);
          v16 = *(Espresso::convolution_uniforms **)(a2 + 8);
        }
      }
    }
    v30 = *(Espresso::convolution_uniforms **)a2;
    if (v16 != *(Espresso::convolution_uniforms **)a2)
    {
      v31 = 0;
      v32 = 0;
      v33 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::convolution_uniforms>(*(_QWORD *)(v34 + v31), (uint64_t)v30 + v32, 0);
        ++v33;
        v30 = *(Espresso::convolution_uniforms **)a2;
        v32 += 168;
        v31 += 16;
      }
      while (v33 < 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    }
    v36 = (void **)&v34;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v36);
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::pool_params>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::lrn_params>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::softmax_params>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::layer_shape>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::concat_params>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::split_params>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::upsample_kernel_params>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::elementwise_params>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v18, *a1, v4);
    v5 = *(char **)a2;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    v6 = v19 - v18;
    if (v19 == v18)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        v12 = &v5[52 * v7];
        do
        {
          *(_OWORD *)v5 = 0uLL;
          *((_OWORD *)v5 + 1) = 0uLL;
          *(_OWORD *)(v5 + 28) = 0uLL;
          *((_DWORD *)v5 + 2) = 1065353216;
          *((_DWORD *)v5 + 4) = 897988541;
          *((_DWORD *)v5 + 11) = 0;
          *((_DWORD *)v5 + 12) = 0;
          v5 += 52;
        }
        while (v5 != v12);
        *(_QWORD *)(a2 + 8) = v12;
      }
      else
      {
        if ((unint64_t)v6 >= 0x4EC4EC4EC4EC4EC1)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x9D89D89D89D89D8ALL * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x276276276276276)
          v10 = 0x4EC4EC4EC4EC4ECLL;
        else
          v10 = v9;
        if (v10 > 0x4EC4EC4EC4EC4ECLL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(52 * v10);
        v12 = &v11[52 * v7];
        v13 = v11;
        do
        {
          *(_OWORD *)v13 = 0uLL;
          *((_OWORD *)v13 + 1) = 0uLL;
          *(_OWORD *)(v13 + 28) = 0uLL;
          *((_DWORD *)v13 + 2) = 1065353216;
          *((_DWORD *)v13 + 4) = 897988541;
          *((_DWORD *)v13 + 11) = 0;
          *((_DWORD *)v13 + 12) = 0;
          v13 += 52;
        }
        while (v13 != v12);
        *(_QWORD *)a2 = v11;
        *(_QWORD *)(a2 + 8) = v12;
        *(_QWORD *)(a2 + 16) = &v11[52 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = *(char **)(a2 + 8);
        }
      }
    }
    v14 = *(char **)a2;
    if (v12 != *(char **)a2)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::elementwise_params>(*(_QWORD *)(v18 + v15), (uint64_t)&v14[v16], 0);
        ++v17;
        v14 = *(char **)a2;
        v16 += 52;
        v15 += 16;
      }
      while (v17 < 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2));
    }
    v20 = (void **)&v18;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::activation_params>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::axpby_params>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::l2_norm_params>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::bias_params>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v18, *a1, v4);
    v5 = *(char **)a2;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    v6 = v19 - v18;
    if (v19 == v18)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 3);
      if (v8 >= v6 >> 4)
      {
        v12 = &v5[24 * v7];
        do
        {
          *(_OWORD *)v5 = xmmword_191A8AA80;
          *((_QWORD *)v5 + 2) = 0xFFFFFFFF00000001;
          v5 += 24;
        }
        while (v5 != v12);
        *(_QWORD *)(a2 + 8) = v12;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 3);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x555555555555555)
          v10 = 0xAAAAAAAAAAAAAAALL;
        else
          v10 = v9;
        if (v10 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(24 * v10);
        v12 = &v11[24 * v7];
        v13 = v11;
        do
        {
          *(_OWORD *)v13 = xmmword_191A8AA80;
          *((_QWORD *)v13 + 2) = 0xFFFFFFFF00000001;
          v13 += 24;
        }
        while (v13 != v12);
        *(_QWORD *)a2 = v11;
        *(_QWORD *)(a2 + 8) = v12;
        *(_QWORD *)(a2 + 16) = &v11[24 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = *(char **)(a2 + 8);
        }
      }
    }
    v14 = *(char **)a2;
    if (v12 != *(char **)a2)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::load_constant_params>(*(_QWORD *)(v18 + v15), &v14[v16], 0);
        ++v17;
        v14 = *(char **)a2;
        v16 += 24;
        v15 += 16;
      }
      while (v17 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    }
    v20 = (void **)&v18;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::batchnorm_params>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::dropout_params>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::reshape_params>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v18, *a1, v4);
    v5 = *(char **)a2;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    v6 = v19 - v18;
    if (v19 == v18)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 3);
      if (v8 >= v6 >> 4)
      {
        v12 = &v5[40 * v7];
        do
        {
          *((_QWORD *)v5 + 4) = 0x100000000;
          *(_OWORD *)v5 = 0uLL;
          *((_OWORD *)v5 + 1) = 0uLL;
          *((_QWORD *)v5 + 2) = 0xFFFFFFFF00000001;
          v5[32] = 1;
          v5 += 40;
        }
        while (v5 != v12);
        *(_QWORD *)(a2 + 8) = v12;
      }
      else
      {
        if ((unint64_t)v6 >= 0x6666666666666661)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x999999999999999ALL * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 3);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x333333333333333)
          v10 = 0x666666666666666;
        else
          v10 = v9;
        if (v10 > 0x666666666666666)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(40 * v10);
        v12 = &v11[40 * v7];
        v13 = v11;
        do
        {
          *((_QWORD *)v13 + 4) = 0x100000000;
          *(_OWORD *)v13 = 0uLL;
          *((_OWORD *)v13 + 1) = 0uLL;
          *((_QWORD *)v13 + 2) = 0xFFFFFFFF00000001;
          v13[32] = 1;
          v13 += 40;
        }
        while (v13 != v12);
        *(_QWORD *)a2 = v11;
        *(_QWORD *)(a2 + 8) = v12;
        *(_QWORD *)(a2 + 16) = &v11[40 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = *(char **)(a2 + 8);
        }
      }
    }
    v14 = *(char **)a2;
    if (v12 != *(char **)a2)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::reshape_params>(*(_QWORD *)(v18 + v15), (uint64_t)&v14[v16], 0);
        ++v17;
        v14 = *(char **)a2;
        v16 += 40;
        v15 += 16;
      }
      while (v17 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    }
    v20 = (void **)&v18;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::reshape_like_params>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::vimage2espresso_param>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::blob_numerical_properties>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void **v14;
  void **v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void **v25[5];

  v4 = a1 + 2;
  if (!(*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
    return;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v23, *a1, v4);
  std::vector<Espresso::blob_numerical_properties>::__clear[abi:ne180100]((uint64_t *)a2);
  v5 = (v24 - v23) >> 4;
  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *(_QWORD *)a2) >> 3);
  v9 = v5 - v8;
  if (v5 <= v8)
  {
    if (v5 >= v8)
    {
      v17 = *(_QWORD *)(a2 + 8);
      goto LABEL_23;
    }
    v17 = v6 + 40 * v5;
    while (v7 != v17)
    {
      v18 = *(void **)(v7 - 24);
      if (v18)
      {
        *(_QWORD *)(v7 - 16) = v18;
        operator delete(v18);
      }
      v7 -= 40;
    }
  }
  else
  {
    v10 = *(_QWORD *)(a2 + 16);
    if (0xCCCCCCCCCCCCCCCDLL * ((v10 - v7) >> 3) < v9)
    {
      if ((unint64_t)(v24 - v23) >= 0x6666666666666661)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v25[4] = (void **)(a2 + 16);
      v11 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - v6) >> 3);
      v12 = 2 * v11;
      if (2 * v11 <= v5)
        v12 = (v24 - v23) >> 4;
      if (v11 >= 0x333333333333333)
        v13 = 0x666666666666666;
      else
        v13 = v12;
      v14 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unordered_set<std::string>>>(v13);
      v15 = &v14[5 * v8];
      v25[0] = v14;
      v25[1] = v15;
      v25[3] = &v14[5 * v16];
      do
      {
        *(_DWORD *)v15 = 1065353216;
        *(void **)((char *)v15 + 4) = (void *)0xFFFFFFFF00000000;
        *((_DWORD *)v15 + 3) = 1;
        v15[3] = 0;
        v15[4] = 0;
        v15[2] = 0;
        v15 += 5;
      }
      while (v15 != &v14[5 * v5]);
      v25[2] = &v14[5 * v5];
      std::vector<Espresso::blob_numerical_properties>::__swap_out_circular_buffer((uint64_t *)a2, v25);
      std::__split_buffer<Espresso::blob_numerical_properties>::~__split_buffer((uint64_t)v25);
      v17 = *(_QWORD *)(a2 + 8);
      goto LABEL_23;
    }
    v17 = v7 + 40 * v9;
    do
    {
      *(_DWORD *)v7 = 1065353216;
      *(_QWORD *)(v7 + 4) = 0xFFFFFFFF00000000;
      *(_DWORD *)(v7 + 12) = 1;
      *(_QWORD *)(v7 + 24) = 0;
      *(_QWORD *)(v7 + 32) = 0;
      *(_QWORD *)(v7 + 16) = 0;
      v7 += 40;
    }
    while (v7 != v17);
  }
  *(_QWORD *)(a2 + 8) = v17;
LABEL_23:
  v19 = *(_QWORD *)a2;
  if (v17 != *(_QWORD *)a2)
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    do
    {
      Espresso::SerDes::params_io<Espresso::blob_numerical_properties>(*(_QWORD *)(v23 + v20), v19 + v21, 0);
      ++v22;
      v19 = *(_QWORD *)a2;
      v21 += 40;
      v20 += 16;
    }
    while (v22 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  }
  v25[0] = (void **)&v23;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v25);
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v19, *a1, v4);
    v5 = *(char **)a2;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    v6 = v20 - v19;
    if (v20 == v19)
    {
      v13 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = *(_QWORD *)(a2 + 16) - (_QWORD)v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 6))
      {
        v13 = &v5[64 * v7];
        do
        {
          *(_QWORD *)v5 = 0;
          *((_QWORD *)v5 + 1) = 0x3F80000000000200;
          *((_OWORD *)v5 + 1) = xmmword_191A93850;
          *((_OWORD *)v5 + 2) = xmmword_191A93860;
          *((_OWORD *)v5 + 3) = xmmword_191A93870;
          v5 += 64;
        }
        while (v5 != v13);
        *(_QWORD *)(a2 + 8) = v13;
      }
      else
      {
        if ((unint64_t)v6 >= 0x3FFFFFFFFFFFFFF1)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = v8 >> 5;
        if (v8 >> 5 <= v7)
          v9 = v7;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0)
          v10 = 0x3FFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10 >> 58)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(v10 << 6);
        v12 = v11;
        v13 = &v11[64 * v7];
        do
        {
          *(_QWORD *)v12 = 0;
          *((_QWORD *)v12 + 1) = 0x3F80000000000200;
          *((_OWORD *)v12 + 1) = xmmword_191A93850;
          *((_OWORD *)v12 + 2) = xmmword_191A93860;
          *((_OWORD *)v12 + 3) = xmmword_191A93870;
          v12 += 64;
        }
        while (v12 != v13);
        *(_QWORD *)&v14 = &v11[64 * v7];
        *((_QWORD *)&v14 + 1) = &v11[64 * v10];
        *(_QWORD *)a2 = v11;
        *(_OWORD *)(a2 + 8) = v14;
        if (v5)
        {
          operator delete(v5);
          v13 = *(char **)(a2 + 8);
        }
      }
    }
    v15 = *(char **)a2;
    if (v13 != *(char **)a2)
    {
      v16 = 0;
      v17 = 0;
      v18 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::rnn_params>(*(_QWORD *)(v19 + v16), &v15[v17], 0);
        ++v18;
        v15 = *(char **)a2;
        v17 += 64;
        v16 += 16;
      }
      while (v18 < (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 6);
    }
    v21 = (void **)&v19;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v21);
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::reduce_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v18, *a1, v4);
    v5 = *(char **)a2;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    v6 = v19 - v18;
    if (v19 == v18)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        v12 = &v5[44 * v7];
        do
        {
          *(_OWORD *)v5 = 0uLL;
          *((_OWORD *)v5 + 1) = 0uLL;
          *(_OWORD *)(v5 + 28) = 0uLL;
          *((_DWORD *)v5 + 1) = 897988541;
          *((_QWORD *)v5 + 1) = 0x100000007;
          *((_QWORD *)v5 + 2) = 0;
          *((_QWORD *)v5 + 3) = 0;
          *((_QWORD *)v5 + 4) = 0xFFFFFFFF00000000;
          v5 += 44;
        }
        while (v5 != v12);
        *(_QWORD *)(a2 + 8) = v12;
      }
      else
      {
        if ((unint64_t)v6 >= 0x5D1745D1745D1741)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x5D1745D1745D1746 * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x2E8BA2E8BA2E8BALL)
          v10 = 0x5D1745D1745D174;
        else
          v10 = v9;
        if (v10 > 0x5D1745D1745D174)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(44 * v10);
        v12 = &v11[44 * v7];
        v13 = v11;
        do
        {
          *(_OWORD *)v13 = 0uLL;
          *((_OWORD *)v13 + 1) = 0uLL;
          *(_OWORD *)(v13 + 28) = 0uLL;
          *((_DWORD *)v13 + 1) = 897988541;
          *((_QWORD *)v13 + 1) = 0x100000007;
          *((_QWORD *)v13 + 2) = 0;
          *((_QWORD *)v13 + 3) = 0;
          *((_QWORD *)v13 + 4) = 0xFFFFFFFF00000000;
          v13 += 44;
        }
        while (v13 != v12);
        *(_QWORD *)a2 = v11;
        *(_QWORD *)(a2 + 8) = v12;
        *(_QWORD *)(a2 + 16) = &v11[44 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = *(char **)(a2 + 8);
        }
      }
    }
    v14 = *(char **)a2;
    if (v12 != *(char **)a2)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::reduce_params_t>(*(_QWORD *)(v18 + v15), (uint64_t)&v14[v16], 0);
        ++v17;
        v14 = *(char **)a2;
        v16 += 44;
        v15 += 16;
      }
      while (v17 < 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2));
    }
    v20 = (void **)&v18;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::general_padding_params>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v18, *a1, v4);
    v5 = *(char **)a2;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    v6 = v19 - v18;
    if (v19 == v18)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        v12 = &v5[20 * v7];
        do
        {
          *(_OWORD *)v5 = xmmword_191A761E0;
          *((_DWORD *)v5 + 4) = 4;
          v5 += 20;
        }
        while (v5 != v12);
        *(_QWORD *)(a2 + 8) = v12;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x999999999999999ALL * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x666666666666666)
          v10 = 0xCCCCCCCCCCCCCCCLL;
        else
          v10 = v9;
        if (v10 > 0xCCCCCCCCCCCCCCCLL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(20 * v10);
        v12 = &v11[20 * v7];
        v13 = v11;
        do
        {
          *(_OWORD *)v13 = xmmword_191A761E0;
          *((_DWORD *)v13 + 4) = 4;
          v13 += 20;
        }
        while (v13 != v12);
        *(_QWORD *)a2 = v11;
        *(_QWORD *)(a2 + 8) = v12;
        *(_QWORD *)(a2 + 16) = &v11[20 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = *(char **)(a2 + 8);
        }
      }
    }
    v14 = *(char **)a2;
    if (v12 != *(char **)a2)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::transpose_params_t>(*(_QWORD *)(v18 + v15), &v14[v16], 0);
        ++v17;
        v14 = *(char **)a2;
        v16 += 20;
        v15 += 16;
      }
      while (v17 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2));
    }
    v20 = (void **)&v18;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::prediction_smoothing_params>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v18, *a1, v4);
    v5 = *(char **)a2;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    v6 = v19 - v18;
    if (v19 == v18)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = *(_QWORD *)(a2 + 16) - (_QWORD)v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 3))
      {
        v12 = &v5[8 * v7];
        do
        {
          *(_QWORD *)v5 = 0;
          *((_DWORD *)v5 + 1) = 1061997773;
          v5 += 8;
        }
        while (v5 != v12);
        *(_QWORD *)(a2 + 8) = v12;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = v8 >> 2;
        if (v8 >> 2 <= v7)
          v9 = v7;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
          v10 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(8 * v10);
        v12 = &v11[8 * v7];
        v13 = v11;
        do
        {
          *(_QWORD *)v13 = 0;
          *((_DWORD *)v13 + 1) = 1061997773;
          v13 += 8;
        }
        while (v13 != v12);
        *(_QWORD *)a2 = v11;
        *(_QWORD *)(a2 + 8) = v12;
        *(_QWORD *)(a2 + 16) = &v11[8 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = *(char **)(a2 + 8);
        }
      }
    }
    v14 = *(char **)a2;
    if (v12 != *(char **)a2)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::prediction_smoothing_params>(*(_QWORD *)(v18 + v15), (uint64_t)&v14[v16], 0);
        ++v17;
        v14 = *(char **)a2;
        v16 += 8;
        v15 += 16;
      }
      while (v17 < (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
    }
    v20 = (void **)&v18;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v18, *a1, v4);
    v5 = *(char **)a2;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    v6 = v19 - v18;
    if (v19 == v18)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        v12 = &v5[12 * v7];
        do
        {
          *(_QWORD *)v5 = 2;
          *((_DWORD *)v5 + 2) = 0;
          v5 += 12;
        }
        while (v5 != v12);
        *(_QWORD *)(a2 + 8) = v12;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0xAAAAAAAAAAAAAAALL)
          v10 = 0x1555555555555555;
        else
          v10 = v9;
        if (v10 > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(12 * v10);
        v12 = &v11[12 * v7];
        v13 = v11;
        do
        {
          *(_QWORD *)v13 = 2;
          *((_DWORD *)v13 + 2) = 0;
          v13 += 12;
        }
        while (v13 != v12);
        *(_QWORD *)a2 = v11;
        *(_QWORD *)(a2 + 8) = v12;
        *(_QWORD *)(a2 + 16) = &v11[12 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = *(char **)(a2 + 8);
        }
      }
    }
    v14 = *(char **)a2;
    if (v12 != *(char **)a2)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::space_to_depth_params_t>(*(_QWORD *)(v18 + v15), &v14[v16], 0);
        ++v17;
        v14 = *(char **)a2;
        v16 += 12;
        v15 += 16;
      }
      while (v17 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2));
    }
    v20 = (void **)&v18;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::space_to_batch_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v18, *a1, v4);
    v5 = *(char **)a2;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    v6 = v19 - v18;
    if (v19 == v18)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 3);
      if (v8 >= v6 >> 4)
      {
        v12 = &v5[24 * v7];
        do
        {
          *(_OWORD *)v5 = xmmword_191A93790;
          *((_QWORD *)v5 + 2) = 0x100000000;
          v5 += 24;
        }
        while (v5 != v12);
        *(_QWORD *)(a2 + 8) = v12;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 3);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x555555555555555)
          v10 = 0xAAAAAAAAAAAAAAALL;
        else
          v10 = v9;
        if (v10 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(24 * v10);
        v12 = &v11[24 * v7];
        v13 = v11;
        do
        {
          *(_OWORD *)v13 = xmmword_191A93790;
          *((_QWORD *)v13 + 2) = 0x100000000;
          v13 += 24;
        }
        while (v13 != v12);
        *(_QWORD *)a2 = v11;
        *(_QWORD *)(a2 + 8) = v12;
        *(_QWORD *)(a2 + 16) = &v11[24 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = *(char **)(a2 + 8);
        }
      }
    }
    v14 = *(char **)a2;
    if (v12 != *(char **)a2)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::slice_params_t>(*(_QWORD *)(v18 + v15), &v14[v16], 0);
        ++v17;
        v14 = *(char **)a2;
        v16 += 24;
        v15 += 16;
      }
      while (v17 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    }
    v20 = (void **)&v18;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::broadcast_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::lambda_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::patch_extractor_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v20, *a1, v4);
    v5 = *(char **)a2;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    v6 = v21 - v20;
    if (v21 == v20)
    {
      v13 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        v15 = 44 * v7;
        v13 = &v5[44 * v7];
        do
        {
          *((_DWORD *)v5 + 10) = 0;
          *(_OWORD *)v5 = xmmword_191A93680;
          *((_QWORD *)v5 + 3) = 0;
          *((_QWORD *)v5 + 4) = 0;
          *((_QWORD *)v5 + 2) = 0;
          v5[40] = 0;
          v5 += 44;
          v15 -= 44;
        }
        while (v15);
        *(_QWORD *)(a2 + 8) = v13;
      }
      else
      {
        if ((unint64_t)v6 >= 0x5D1745D1745D1741)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x5D1745D1745D1746 * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x2E8BA2E8BA2E8BALL)
          v10 = 0x5D1745D1745D174;
        else
          v10 = v9;
        if (v10 > 0x5D1745D1745D174)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(44 * v10);
        v12 = 0;
        v13 = &v11[44 * v7];
        do
        {
          v14 = &v11[v12];
          *((_DWORD *)v14 + 10) = 0;
          *(_OWORD *)v14 = xmmword_191A93680;
          *((_QWORD *)v14 + 3) = 0;
          *((_QWORD *)v14 + 4) = 0;
          *((_QWORD *)v14 + 2) = 0;
          v12 += 44;
          v14[40] = 0;
        }
        while (44 * v7 != v12);
        *(_QWORD *)a2 = v11;
        *(_QWORD *)(a2 + 8) = v13;
        *(_QWORD *)(a2 + 16) = &v11[44 * v10];
        if (v5)
        {
          operator delete(v5);
          v13 = *(char **)(a2 + 8);
        }
      }
    }
    v16 = *(char **)a2;
    if (v13 != *(char **)a2)
    {
      v17 = 0;
      v18 = 0;
      v19 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::patch_extractor_params_t>(*(_QWORD *)(v20 + v17), (uint64_t)&v16[v18], 0);
        ++v19;
        v16 = *(char **)a2;
        v18 += 44;
        v17 += 16;
      }
      while (v19 < 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2));
    }
    v22 = (void **)&v20;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v22);
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::crop_and_resize_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v18, *a1, v4);
    v5 = *(char **)a2;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    v6 = v19 - v18;
    if (v19 == v18)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 4);
      if (v8 >= v6 >> 4)
      {
        v12 = &v5[80 * v7];
        do
        {
          *((_OWORD *)v5 + 2) = 0uLL;
          *((_OWORD *)v5 + 3) = 0uLL;
          *((_OWORD *)v5 + 4) = 0uLL;
          *(_OWORD *)v5 = 0uLL;
          *((_OWORD *)v5 + 1) = 0uLL;
          *((_DWORD *)v5 + 7) = 1065353216;
          *((_DWORD *)v5 + 9) = 2;
          *(_OWORD *)(v5 + 40) = 0uLL;
          *(_OWORD *)(v5 + 56) = 0uLL;
          *((_DWORD *)v5 + 18) = 1;
          v5 += 80;
        }
        while (v5 != v12);
        *(_QWORD *)(a2 + 8) = v12;
      }
      else
      {
        if ((unint64_t)v6 >= 0x3333333333333331)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x999999999999999ALL * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 4);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x199999999999999)
          v10 = 0x333333333333333;
        else
          v10 = v9;
        if (v10 > 0x333333333333333)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(80 * v10);
        v12 = &v11[80 * v7];
        v13 = v11;
        do
        {
          *((_OWORD *)v13 + 2) = 0uLL;
          *((_OWORD *)v13 + 3) = 0uLL;
          *((_OWORD *)v13 + 4) = 0uLL;
          *(_OWORD *)v13 = 0uLL;
          *((_OWORD *)v13 + 1) = 0uLL;
          *((_DWORD *)v13 + 7) = 1065353216;
          *((_DWORD *)v13 + 9) = 2;
          *(_OWORD *)(v13 + 40) = 0uLL;
          *(_OWORD *)(v13 + 56) = 0uLL;
          *((_DWORD *)v13 + 18) = 1;
          v13 += 80;
        }
        while (v13 != v12);
        *(_QWORD *)a2 = v11;
        *(_QWORD *)(a2 + 8) = v12;
        *(_QWORD *)(a2 + 16) = &v11[80 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = *(char **)(a2 + 8);
        }
      }
    }
    v14 = *(char **)a2;
    if (v12 != *(char **)a2)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::crop_and_resize_params_t>(*(_QWORD *)(v18 + v15), (uint64_t)&v14[v16], 0);
        ++v17;
        v14 = *(char **)a2;
        v16 += 80;
        v15 += 16;
      }
      while (v17 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4));
    }
    v20 = (void **)&v18;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v18, *a1, v4);
    v5 = *(char **)a2;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    v6 = v19 - v18;
    if (v19 == v18)
    {
      v13 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = *(_QWORD *)(a2 + 16) - (_QWORD)v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 4))
      {
        v13 = &v5[16 * v7];
        v14 = 16 * v7;
        do
        {
          *(_OWORD *)v5 = xmmword_191A93840;
          v5 += 16;
          v14 -= 16;
        }
        while (v14);
        *(_QWORD *)(a2 + 8) = v13;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = v8 >> 3;
        if (v8 >> 3 <= v7)
          v9 = v7;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(16 * v10);
        v12 = 0;
        v13 = &v11[16 * v7];
        do
        {
          *(_OWORD *)&v11[v12] = xmmword_191A93840;
          v12 += 16;
        }
        while (16 * v7 != v12);
        *(_QWORD *)a2 = v11;
        *(_QWORD *)(a2 + 8) = v13;
        *(_QWORD *)(a2 + 16) = &v11[16 * v10];
        if (v5)
        {
          operator delete(v5);
          v13 = *(char **)(a2 + 8);
        }
      }
    }
    v15 = *(char **)a2;
    if (v13 != *(char **)a2)
    {
      v16 = 0;
      v17 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::quantized_gather_params_t>(*(_QWORD *)(v18 + v16), &v15[v16], 0);
        ++v17;
        v15 = *(char **)a2;
        v16 += 16;
      }
      while (v17 < (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
    }
    v20 = (void **)&v18;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::cf_branch_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::dynamic_dequantize_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::spatial_transformer_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v18, *a1, v4);
    v5 = *(char **)a2;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    v6 = v19 - v18;
    if (v19 == v18)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 3);
      if (v8 >= v6 >> 4)
      {
        v12 = &v5[24 * v7];
        do
        {
          *(_OWORD *)v5 = xmmword_191A93680;
          *((_QWORD *)v5 + 2) = 0;
          v5 += 24;
        }
        while (v5 != v12);
        *(_QWORD *)(a2 + 8) = v12;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 3);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x555555555555555)
          v10 = 0xAAAAAAAAAAAAAAALL;
        else
          v10 = v9;
        if (v10 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(24 * v10);
        v12 = &v11[24 * v7];
        v13 = v11;
        do
        {
          *(_OWORD *)v13 = xmmword_191A93680;
          *((_QWORD *)v13 + 2) = 0;
          v13 += 24;
        }
        while (v13 != v12);
        *(_QWORD *)a2 = v11;
        *(_QWORD *)(a2 + 8) = v12;
        *(_QWORD *)(a2 + 16) = &v11[24 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = *(char **)(a2 + 8);
        }
      }
    }
    v14 = *(char **)a2;
    if (v12 != *(char **)a2)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::spatial_transformer_params_t>(*(_QWORD *)(v18 + v15), (uint64_t)&v14[v16], 0);
        ++v17;
        v14 = *(char **)a2;
        v16 += 24;
        v15 += 16;
      }
      while (v17 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    }
    v20 = (void **)&v18;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::cf_call_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  void **v5;
  void **v6;
  void **v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  size_t v18;
  char *v19;
  __int128 v20;
  void **v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;

  v4 = a1 + 2;
  if (!(*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
    return;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v27, *a1, v4);
  v5 = *(void ***)a2;
  v6 = *(void ***)(a2 + 8);
  v7 = *(void ***)a2;
  if (v6 != *(void ***)a2)
  {
    do
    {
      if (*((char *)v6 - 1) < 0)
        operator delete(*(v6 - 3));
      v6 -= 3;
    }
    while (v6 != v5);
    v7 = *(void ***)a2;
  }
  *(_QWORD *)(a2 + 8) = v5;
  v8 = (v28 - v27) >> 4;
  v9 = 0xAAAAAAAAAAAAAAABLL * (v5 - v7);
  v10 = v8 - v9;
  if (v8 <= v9)
  {
    if (v8 >= v9)
    {
      v22 = v5;
      goto LABEL_36;
    }
    v22 = &v7[3 * v8];
    while (v5 != v22)
    {
      if (*((char *)v5 - 1) < 0)
        operator delete(*(v5 - 3));
      v5 -= 3;
    }
  }
  else
  {
    v11 = *(_QWORD *)(a2 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v5) >> 3) < v10)
    {
      if (v28 - v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v12 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v7) >> 3);
      v13 = 0x5555555555555556 * ((v11 - (uint64_t)v7) >> 3);
      if (v13 > v8)
        v8 = v13;
      if (v12 >= 0x555555555555555)
        v14 = 0xAAAAAAAAAAAAAAALL;
      else
        v14 = v8;
      if (v14 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = (char *)operator new(24 * v14);
      v16 = &v15[8 * (v5 - v7)];
      v17 = &v15[24 * v14];
      v18 = 24 * ((24 * v10 - 24) / 0x18) + 24;
      bzero(v16, v18);
      v19 = &v16[v18];
      if (v5 == v7)
      {
        *(_QWORD *)a2 = v16;
        *(_QWORD *)(a2 + 8) = v19;
        *(_QWORD *)(a2 + 16) = v17;
      }
      else
      {
        do
        {
          v20 = *(_OWORD *)(v5 - 3);
          *((_QWORD *)v16 - 1) = *(v5 - 1);
          *(_OWORD *)(v16 - 24) = v20;
          v16 -= 24;
          *(v5 - 2) = 0;
          *(v5 - 1) = 0;
          *(v5 - 3) = 0;
          v5 -= 3;
        }
        while (v5 != v7);
        v21 = *(void ***)a2;
        v5 = *(void ***)(a2 + 8);
        *(_QWORD *)a2 = v16;
        *(_QWORD *)(a2 + 8) = v19;
        *(_QWORD *)(a2 + 16) = v17;
        if (v5 != v21)
        {
          do
          {
            if (*((char *)v5 - 1) < 0)
              operator delete(*(v5 - 3));
            v5 -= 3;
          }
          while (v5 != v21);
          v5 = v21;
        }
      }
      if (v5)
        operator delete(v5);
      v22 = *(void ***)(a2 + 8);
      goto LABEL_36;
    }
    bzero(v5, 24 * ((24 * v10 - 24) / 0x18) + 24);
    v22 = &v5[3 * ((24 * v10 - 24) / 0x18) + 3];
  }
  *(_QWORD *)(a2 + 8) = v22;
LABEL_36:
  v23 = *(void ***)a2;
  if (v22 != *(void ***)a2)
  {
    v24 = 0;
    v25 = 0;
    v26 = 0;
    do
    {
      Espresso::SerDes::params_io<Espresso::cf_call_params_t>(*(_QWORD *)(v27 + v24), (uint64_t)&v23[v25], 0);
      ++v26;
      v23 = *(void ***)a2;
      v25 += 3;
      v24 += 16;
    }
    while (v26 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  }
  v29 = (void **)&v27;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v29);
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::topk_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::general_concat_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::alloc_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::load_global_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  char *v5;
  void **v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  void **v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;

  v4 = a1 + 2;
  if (!(*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
    return;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v28, *a1, v4);
  v5 = *(char **)a2;
  v6 = *(void ***)(a2 + 8);
  v7 = *(char **)a2;
  if (v6 != *(void ***)a2)
  {
    do
    {
      if (*((char *)v6 - 33) < 0)
        operator delete(*(v6 - 7));
      v6 -= 7;
    }
    while (v6 != (void **)v5);
    v7 = *(char **)a2;
  }
  *(_QWORD *)(a2 + 8) = v5;
  v8 = (v29 - v28) >> 4;
  v9 = 0x6DB6DB6DB6DB6DB7 * ((v5 - v7) >> 3);
  v10 = v8 - v9;
  if (v8 <= v9)
  {
    if (v8 >= v9)
    {
      v23 = v5;
      goto LABEL_39;
    }
    v23 = &v7[56 * v8];
    while (v5 != v23)
    {
      if (*(v5 - 33) < 0)
        operator delete(*((void **)v5 - 7));
      v5 -= 56;
    }
  }
  else
  {
    v11 = *(_QWORD *)(a2 + 16);
    if (0x6DB6DB6DB6DB6DB7 * ((v11 - (uint64_t)v5) >> 3) < v10)
    {
      if ((unint64_t)(v29 - v28) >= 0x4924924924924921)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v12 = 0x6DB6DB6DB6DB6DB7 * ((v11 - (uint64_t)v7) >> 3);
      v13 = 2 * v12;
      if (2 * v12 <= v8)
        v13 = (v29 - v28) >> 4;
      if (v12 >= 0x249249249249249)
        v14 = 0x492492492492492;
      else
        v14 = v13;
      if (v14 > 0x492492492492492)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = (char *)operator new(56 * v14);
      v16 = &v15[56 * v9];
      v17 = &v15[56 * v8];
      v18 = v16;
      do
      {
        *(_OWORD *)v18 = 0uLL;
        *((_OWORD *)v18 + 1) = 0uLL;
        *(_OWORD *)(v18 + 28) = xmmword_191A935B0;
        *(_QWORD *)(v18 + 44) = 0xFFFFFFFF00000001;
        *((_DWORD *)v18 + 13) = 7;
        v18 += 56;
      }
      while (v18 != v17);
      v19 = *(char **)a2;
      if (v5 != *(char **)a2)
      {
        do
        {
          v20 = *(_OWORD *)(v5 - 56);
          *((_QWORD *)v16 - 5) = *((_QWORD *)v5 - 5);
          *(_OWORD *)(v16 - 56) = v20;
          *((_QWORD *)v5 - 6) = 0;
          *((_QWORD *)v5 - 5) = 0;
          *((_QWORD *)v5 - 7) = 0;
          v21 = *((_OWORD *)v5 - 1);
          *((_OWORD *)v16 - 2) = *((_OWORD *)v5 - 2);
          *((_OWORD *)v16 - 1) = v21;
          v16 -= 56;
          v5 -= 56;
        }
        while (v5 != v19);
        v5 = *(char **)a2;
      }
      v22 = *(void ***)(a2 + 8);
      *(_QWORD *)a2 = v16;
      *(_QWORD *)(a2 + 8) = v17;
      *(_QWORD *)(a2 + 16) = &v15[56 * v14];
      while (v22 != (void **)v5)
      {
        if (*((char *)v22 - 33) < 0)
          operator delete(*(v22 - 7));
        v22 -= 7;
      }
      if (v5)
        operator delete(v5);
      v23 = *(char **)(a2 + 8);
      goto LABEL_39;
    }
    v23 = &v5[56 * v10];
    do
    {
      *(_OWORD *)v5 = 0uLL;
      *((_OWORD *)v5 + 1) = 0uLL;
      *(_OWORD *)(v5 + 28) = xmmword_191A935B0;
      *(_QWORD *)(v5 + 44) = 0xFFFFFFFF00000001;
      *((_DWORD *)v5 + 13) = 7;
      v5 += 56;
    }
    while (v5 != v23);
  }
  *(_QWORD *)(a2 + 8) = v23;
LABEL_39:
  v24 = *(char **)a2;
  if (v23 != *(char **)a2)
  {
    v25 = 0;
    v26 = 0;
    v27 = 0;
    do
    {
      Espresso::SerDes::params_io<Espresso::load_global_params_t>(*(_QWORD *)(v28 + v25), (uint64_t)&v24[v26], 0);
      ++v27;
      v24 = *(char **)a2;
      v26 += 56;
      v25 += 16;
    }
    while (v27 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  }
  v30 = (void **)&v28;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v30);
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::store_global_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  char *v5;
  void **v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  void **v23;
  char *v24;
  __int128 v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;

  v4 = a1 + 2;
  if (!(*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
    return;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v30, *a1, v4);
  v5 = *(char **)a2;
  v6 = *(void ***)(a2 + 8);
  v7 = *(char **)a2;
  if (v6 != *(void ***)a2)
  {
    do
    {
      if (*((char *)v6 - 33) < 0)
        operator delete(*(v6 - 7));
      v6 -= 7;
    }
    while (v6 != (void **)v5);
    v7 = *(char **)a2;
  }
  *(_QWORD *)(a2 + 8) = v5;
  v8 = (v31 - v30) >> 4;
  v9 = 0x6DB6DB6DB6DB6DB7 * ((v5 - v7) >> 3);
  v10 = v8 - v9;
  if (v8 <= v9)
  {
    if (v8 >= v9)
    {
      v24 = v5;
      goto LABEL_39;
    }
    v24 = &v7[56 * v8];
    while (v5 != v24)
    {
      if (*(v5 - 33) < 0)
        operator delete(*((void **)v5 - 7));
      v5 -= 56;
    }
  }
  else
  {
    v11 = *(_QWORD *)(a2 + 16);
    if (0x6DB6DB6DB6DB6DB7 * ((v11 - (uint64_t)v5) >> 3) < v10)
    {
      if ((unint64_t)(v31 - v30) >= 0x4924924924924921)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v12 = 0x6DB6DB6DB6DB6DB7 * ((v11 - (uint64_t)v7) >> 3);
      v13 = 2 * v12;
      if (2 * v12 <= v8)
        v13 = (v31 - v30) >> 4;
      if (v12 >= 0x249249249249249)
        v14 = 0x492492492492492;
      else
        v14 = v13;
      if (v14 > 0x492492492492492)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = (char *)operator new(56 * v14);
      v16 = &v15[56 * v9];
      v17 = &v15[56 * v8];
      *(_QWORD *)&v18 = 0x100000001;
      *((_QWORD *)&v18 + 1) = 0x100000001;
      v19 = v16;
      do
      {
        *(_OWORD *)v19 = 0uLL;
        *((_OWORD *)v19 + 1) = 0uLL;
        *((_OWORD *)v19 + 2) = v18;
        *((_QWORD *)v19 + 6) = 1;
        v19 += 56;
      }
      while (v19 != v17);
      v20 = *(char **)a2;
      if (v5 != *(char **)a2)
      {
        do
        {
          v21 = *(_OWORD *)(v5 - 56);
          *((_QWORD *)v16 - 5) = *((_QWORD *)v5 - 5);
          *(_OWORD *)(v16 - 56) = v21;
          *((_QWORD *)v5 - 6) = 0;
          *((_QWORD *)v5 - 5) = 0;
          *((_QWORD *)v5 - 7) = 0;
          v22 = *((_OWORD *)v5 - 1);
          *((_OWORD *)v16 - 2) = *((_OWORD *)v5 - 2);
          *((_OWORD *)v16 - 1) = v22;
          v16 -= 56;
          v5 -= 56;
        }
        while (v5 != v20);
        v5 = *(char **)a2;
      }
      v23 = *(void ***)(a2 + 8);
      *(_QWORD *)a2 = v16;
      *(_QWORD *)(a2 + 8) = v17;
      *(_QWORD *)(a2 + 16) = &v15[56 * v14];
      while (v23 != (void **)v5)
      {
        if (*((char *)v23 - 33) < 0)
          operator delete(*(v23 - 7));
        v23 -= 7;
      }
      if (v5)
        operator delete(v5);
      v24 = *(char **)(a2 + 8);
      goto LABEL_39;
    }
    v24 = &v5[56 * v10];
    *(_QWORD *)&v25 = 0x100000001;
    *((_QWORD *)&v25 + 1) = 0x100000001;
    do
    {
      *(_OWORD *)v5 = 0uLL;
      *((_OWORD *)v5 + 1) = 0uLL;
      *((_OWORD *)v5 + 2) = v25;
      *((_QWORD *)v5 + 6) = 1;
      v5 += 56;
    }
    while (v5 != v24);
  }
  *(_QWORD *)(a2 + 8) = v24;
LABEL_39:
  v26 = *(char **)a2;
  if (v24 != *(char **)a2)
  {
    v27 = 0;
    v28 = 0;
    v29 = 0;
    do
    {
      Espresso::SerDes::params_io<Espresso::store_global_params_t>(*(_QWORD *)(v30 + v27), (uint64_t)&v26[v28], 0);
      ++v29;
      v26 = *(char **)a2;
      v28 += 56;
      v27 += 16;
    }
    while (v29 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  }
  v32 = (void **)&v30;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v32);
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::scatter_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  char *v14;
  __int128 v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v20, *a1, v4);
    v5 = *(char **)a2;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    v6 = v21 - v20;
    if (v21 == v20)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 3);
      if (v8 >= v6 >> 4)
      {
        v12 = &v5[24 * v7];
        *(_QWORD *)&v15 = 0x100000001;
        *((_QWORD *)&v15 + 1) = 0x100000001;
        do
        {
          *(_OWORD *)v5 = v15;
          *((_QWORD *)v5 + 2) = 4294967294;
          v5 += 24;
        }
        while (v5 != v12);
        *(_QWORD *)(a2 + 8) = v12;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 3);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x555555555555555)
          v10 = 0xAAAAAAAAAAAAAAALL;
        else
          v10 = v9;
        if (v10 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(24 * v10);
        v12 = &v11[24 * v7];
        *(_QWORD *)&v13 = 0x100000001;
        *((_QWORD *)&v13 + 1) = 0x100000001;
        v14 = v11;
        do
        {
          *(_OWORD *)v14 = v13;
          *((_QWORD *)v14 + 2) = 4294967294;
          v14 += 24;
        }
        while (v14 != v12);
        *(_QWORD *)a2 = v11;
        *(_QWORD *)(a2 + 8) = v12;
        *(_QWORD *)(a2 + 16) = &v11[24 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = *(char **)(a2 + 8);
        }
      }
    }
    v16 = *(char **)a2;
    if (v12 != *(char **)a2)
    {
      v17 = 0;
      v18 = 0;
      v19 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::scatter_params_t>(*(_QWORD *)(v20 + v17), (uint64_t)&v16[v18], 0);
        ++v19;
        v16 = *(char **)a2;
        v18 += 24;
        v17 += 16;
      }
      while (v19 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    }
    v22 = (void **)&v20;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v22);
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::load_random_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v18, *a1, v4);
    v5 = *(char **)a2;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    v6 = v19 - v18;
    if (v19 == v18)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 4);
      if (v8 >= v6 >> 4)
      {
        v12 = &v5[48 * v7];
        do
        {
          *(_OWORD *)v5 = 0uLL;
          *((_OWORD *)v5 + 1) = 0uLL;
          *((_OWORD *)v5 + 2) = 0uLL;
          *((_DWORD *)v5 + 1) = 1065353216;
          *(_OWORD *)(v5 + 12) = xmmword_191A935B0;
          *(_OWORD *)(v5 + 28) = xmmword_191A8D8A0;
          v5 += 48;
        }
        while (v5 != v12);
        *(_QWORD *)(a2 + 8) = v12;
      }
      else
      {
        if ((unint64_t)v6 >= 0x5555555555555551)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 4);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x2AAAAAAAAAAAAAALL)
          v10 = 0x555555555555555;
        else
          v10 = v9;
        if (v10 > 0x555555555555555)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(48 * v10);
        v12 = &v11[48 * v7];
        v13 = v11;
        do
        {
          *(_OWORD *)v13 = 0uLL;
          *((_OWORD *)v13 + 1) = 0uLL;
          *((_OWORD *)v13 + 2) = 0uLL;
          *((_DWORD *)v13 + 1) = 1065353216;
          *(_OWORD *)(v13 + 12) = xmmword_191A935B0;
          *(_OWORD *)(v13 + 28) = xmmword_191A8D8A0;
          v13 += 48;
        }
        while (v13 != v12);
        *(_QWORD *)a2 = v11;
        *(_QWORD *)(a2 + 8) = v12;
        *(_QWORD *)(a2 + 16) = &v11[48 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = *(char **)(a2 + 8);
        }
      }
    }
    v14 = *(char **)a2;
    if (v12 != *(char **)a2)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::load_random_params_t>(*(_QWORD *)(v18 + v15), (uint64_t)&v14[v16], 0);
        ++v17;
        v14 = *(char **)a2;
        v16 += 48;
        v15 += 16;
      }
      while (v17 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4));
    }
    v20 = (void **)&v18;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v18, *a1, v4);
    v5 = *(char **)a2;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    v6 = v19 - v18;
    if (v19 == v18)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        v12 = &v5[12 * v7];
        do
        {
          *(_QWORD *)v5 = 1065353216;
          *((_DWORD *)v5 + 2) = 1065353216;
          v5 += 12;
        }
        while (v5 != v12);
        *(_QWORD *)(a2 + 8) = v12;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0xAAAAAAAAAAAAAAALL)
          v10 = 0x1555555555555555;
        else
          v10 = v9;
        if (v10 > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(12 * v10);
        v12 = &v11[12 * v7];
        v13 = v11;
        do
        {
          *(_QWORD *)v13 = 1065353216;
          *((_DWORD *)v13 + 2) = 1065353216;
          v13 += 12;
        }
        while (v13 != v12);
        *(_QWORD *)a2 = v11;
        *(_QWORD *)(a2 + 8) = v12;
        *(_QWORD *)(a2 + 16) = &v11[12 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = *(char **)(a2 + 8);
        }
      }
    }
    v14 = *(char **)a2;
    if (v12 != *(char **)a2)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::range_params_t>(*(_QWORD *)(v18 + v15), (float *)&v14[v16], 0);
        ++v17;
        v14 = *(char **)a2;
        v16 += 12;
        v15 += 16;
      }
      while (v17 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2));
    }
    v20 = (void **)&v18;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::matrix_band_part_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::fill_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::tensor_zero_pad_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::squeeze_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v18, *a1, v4);
    v5 = *(char **)a2;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    v6 = v19 - v18;
    if (v19 == v18)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 4);
      if (v8 >= v6 >> 4)
      {
        v12 = &v5[144 * v7];
        do
        {
          *(_OWORD *)(v5 + 124) = 0uLL;
          *((_OWORD *)v5 + 6) = 0uLL;
          *((_OWORD *)v5 + 7) = 0uLL;
          *((_OWORD *)v5 + 4) = 0uLL;
          *((_OWORD *)v5 + 5) = 0uLL;
          *((_OWORD *)v5 + 2) = 0uLL;
          *((_OWORD *)v5 + 3) = 0uLL;
          *(_OWORD *)v5 = 0uLL;
          *((_OWORD *)v5 + 1) = 0uLL;
          *((_DWORD *)v5 + 35) = 2;
          v5 += 144;
        }
        while (v5 != v12);
        *(_QWORD *)(a2 + 8) = v12;
      }
      else
      {
        if ((unint64_t)v6 >= 0x1C71C71C71C71C71)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x1C71C71C71C71C72 * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 4);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0xE38E38E38E38E3)
          v10 = 0x1C71C71C71C71C7;
        else
          v10 = v9;
        if (v10 > 0x1C71C71C71C71C7)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(144 * v10);
        v12 = &v11[144 * v7];
        v13 = v11;
        do
        {
          *(_OWORD *)(v13 + 124) = 0uLL;
          *((_OWORD *)v13 + 6) = 0uLL;
          *((_OWORD *)v13 + 7) = 0uLL;
          *((_OWORD *)v13 + 4) = 0uLL;
          *((_OWORD *)v13 + 5) = 0uLL;
          *((_OWORD *)v13 + 2) = 0uLL;
          *((_OWORD *)v13 + 3) = 0uLL;
          *(_OWORD *)v13 = 0uLL;
          *((_OWORD *)v13 + 1) = 0uLL;
          *((_DWORD *)v13 + 35) = 2;
          v13 += 144;
        }
        while (v13 != v12);
        *(_QWORD *)a2 = v11;
        *(_QWORD *)(a2 + 8) = v12;
        *(_QWORD *)(a2 + 16) = &v11[144 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = *(char **)(a2 + 8);
        }
      }
    }
    v14 = *(char **)a2;
    if (v12 != *(char **)a2)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::squeeze_params_t>(*(_QWORD *)(v18 + v15), (uint64_t)&v14[v16], 0);
        ++v17;
        v14 = *(char **)a2;
        v16 += 144;
        v15 += 16;
      }
      while (v17 < 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4));
    }
    v20 = (void **)&v18;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::array_gather_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::instancenorm_1d_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v18, *a1, v4);
    v5 = *(char **)a2;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    v6 = v19 - v18;
    if (v19 == v18)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        v12 = &v5[20 * v7];
        do
        {
          *(_QWORD *)v5 = 0x358637BD00000000;
          *((_QWORD *)v5 + 1) = 0;
          *((_DWORD *)v5 + 4) = 0;
          v5 += 20;
        }
        while (v5 != v12);
        *(_QWORD *)(a2 + 8) = v12;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x999999999999999ALL * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x666666666666666)
          v10 = 0xCCCCCCCCCCCCCCCLL;
        else
          v10 = v9;
        if (v10 > 0xCCCCCCCCCCCCCCCLL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(20 * v10);
        v12 = &v11[20 * v7];
        v13 = v11;
        do
        {
          *(_QWORD *)v13 = 0x358637BD00000000;
          *((_QWORD *)v13 + 1) = 0;
          *((_DWORD *)v13 + 4) = 0;
          v13 += 20;
        }
        while (v13 != v12);
        *(_QWORD *)a2 = v11;
        *(_QWORD *)(a2 + 8) = v12;
        *(_QWORD *)(a2 + 16) = &v11[20 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = *(char **)(a2 + 8);
        }
      }
    }
    v14 = *(char **)a2;
    if (v12 != *(char **)a2)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::instancenorm_1d_params_t>(*(_QWORD *)(v18 + v15), (uint64_t)&v14[v16], 0);
        ++v17;
        v14 = *(char **)a2;
        v16 += 20;
        v15 += 16;
      }
      while (v17 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2));
    }
    v20 = (void **)&v18;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::gumbel_max_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::builtin_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::general_slice_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v18, *a1, v4);
    v5 = *(char **)a2;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    v6 = v19 - v18;
    if (v19 == v18)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        v12 = &v5[12 * v7];
        do
        {
          *(_QWORD *)v5 = 0x100000000;
          *((_DWORD *)v5 + 2) = 1;
          v5 += 12;
        }
        while (v5 != v12);
        *(_QWORD *)(a2 + 8) = v12;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0xAAAAAAAAAAAAAAALL)
          v10 = 0x1555555555555555;
        else
          v10 = v9;
        if (v10 > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(12 * v10);
        v12 = &v11[12 * v7];
        v13 = v11;
        do
        {
          *(_QWORD *)v13 = 0x100000000;
          *((_DWORD *)v13 + 2) = 1;
          v13 += 12;
        }
        while (v13 != v12);
        *(_QWORD *)a2 = v11;
        *(_QWORD *)(a2 + 8) = v12;
        *(_QWORD *)(a2 + 16) = &v11[12 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = *(char **)(a2 + 8);
        }
      }
    }
    v14 = *(char **)a2;
    if (v12 != *(char **)a2)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::sliding_windows_params_t>(*(_QWORD *)(v18 + v15), &v14[v16], 0);
        ++v17;
        v14 = *(char **)a2;
        v16 += 12;
        v15 += 16;
      }
      while (v17 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2));
    }
    v20 = (void **)&v18;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::cross_entropy_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::non_maximum_suppression_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::sgd_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v18, *a1, v4);
    v5 = *(char **)a2;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    v6 = v19 - v18;
    if (v19 == v18)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        v12 = &v5[12 * v7];
        do
        {
          *(_QWORD *)v5 = 0;
          *((_DWORD *)v5 + 2) = 1;
          v5 += 12;
        }
        while (v5 != v12);
        *(_QWORD *)(a2 + 8) = v12;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0xAAAAAAAAAAAAAAALL)
          v10 = 0x1555555555555555;
        else
          v10 = v9;
        if (v10 > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(12 * v10);
        v12 = &v11[12 * v7];
        v13 = v11;
        do
        {
          *(_QWORD *)v13 = 0;
          *((_DWORD *)v13 + 2) = 1;
          v13 += 12;
        }
        while (v13 != v12);
        *(_QWORD *)a2 = v11;
        *(_QWORD *)(a2 + 8) = v12;
        *(_QWORD *)(a2 + 16) = &v11[12 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = *(char **)(a2 + 8);
        }
      }
    }
    v14 = *(char **)a2;
    if (v12 != *(char **)a2)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::sgd_params_t>(*(_QWORD *)(v18 + v15), (uint64_t)&v14[v16], 0);
        ++v17;
        v14 = *(char **)a2;
        v16 += 12;
        v15 += 16;
      }
      while (v17 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2));
    }
    v20 = (void **)&v18;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::gather_nd_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v17, *a1, v4);
    v5 = *(char **)a2;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    v6 = v18 - v17;
    if (v18 == v17)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = *(_QWORD *)(a2 + 16) - (_QWORD)v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 4))
      {
        v12 = &v5[16 * v7];
        do
        {
          *(_QWORD *)v5 = 0;
          *((_QWORD *)v5 + 1) = 0;
          *((_WORD *)v5 + 6) = 257;
          v5 += 16;
        }
        while (v5 != v12);
        *(_QWORD *)(a2 + 8) = v12;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = v8 >> 3;
        if (v8 >> 3 <= v7)
          v9 = v7;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(16 * v10);
        v12 = &v11[16 * v7];
        v13 = v11;
        do
        {
          *(_QWORD *)v13 = 0;
          *((_QWORD *)v13 + 1) = 0;
          *((_WORD *)v13 + 6) = 257;
          v13 += 16;
        }
        while (v13 != v12);
        *(_QWORD *)a2 = v11;
        *(_QWORD *)(a2 + 8) = v12;
        *(_QWORD *)(a2 + 16) = &v11[16 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = *(char **)(a2 + 8);
        }
      }
    }
    v14 = *(char **)a2;
    if (v12 != *(char **)a2)
    {
      v15 = 0;
      v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::gather_nd_params_t>(*(_QWORD *)(v17 + v15), (uint64_t)&v14[v15], 0);
        ++v16;
        v14 = *(char **)a2;
        v15 += 16;
      }
      while (v16 < (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
    }
    v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::adam_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v17, *a1, v4);
    v5 = *(_QWORD **)a2;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    v6 = v18 - v17;
    if (v18 == v17)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = *(_QWORD *)(a2 + 16) - (_QWORD)v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 4))
      {
        v12 = &v5[2 * v7];
        do
        {
          *v5 = 0x3F7FBE773F666666;
          v5[1] = 0x1322BCC77;
          v5 += 2;
        }
        while (v5 != v12);
        *(_QWORD *)(a2 + 8) = v12;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = v8 >> 3;
        if (v8 >> 3 <= v7)
          v9 = v7;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = operator new(16 * v10);
        v12 = &v11[2 * v7];
        v13 = v11;
        do
        {
          *v13 = 0x3F7FBE773F666666;
          v13[1] = 0x1322BCC77;
          v13 += 2;
        }
        while (v13 != v12);
        *(_QWORD *)a2 = v11;
        *(_QWORD *)(a2 + 8) = v12;
        *(_QWORD *)(a2 + 16) = &v11[2 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = *(_QWORD **)(a2 + 8);
        }
      }
    }
    v14 = *(_QWORD **)a2;
    if (v12 != *(_QWORD **)a2)
    {
      v15 = 0;
      v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::adam_params_t>(*(_QWORD *)(v17 + v15 * 8), (uint64_t)&v14[v15], 0);
        ++v16;
        v14 = *(_QWORD **)a2;
        v15 += 2;
      }
      while (v16 < (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
    }
    v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::scatter_nd_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v17, *a1, v4);
    v5 = *(char **)a2;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    v6 = v18 - v17;
    if (v18 == v17)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = *(_QWORD *)(a2 + 16) - (_QWORD)v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 4))
      {
        v12 = &v5[16 * v7];
        do
        {
          *(_QWORD *)v5 = 0;
          *((_QWORD *)v5 + 1) = 0;
          *((_WORD *)v5 + 6) = 257;
          v5 += 16;
        }
        while (v5 != v12);
        *(_QWORD *)(a2 + 8) = v12;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = v8 >> 3;
        if (v8 >> 3 <= v7)
          v9 = v7;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(16 * v10);
        v12 = &v11[16 * v7];
        v13 = v11;
        do
        {
          *(_QWORD *)v13 = 0;
          *((_QWORD *)v13 + 1) = 0;
          *((_WORD *)v13 + 6) = 257;
          v13 += 16;
        }
        while (v13 != v12);
        *(_QWORD *)a2 = v11;
        *(_QWORD *)(a2 + 8) = v12;
        *(_QWORD *)(a2 + 16) = &v11[16 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = *(char **)(a2 + 8);
        }
      }
    }
    v14 = *(char **)a2;
    if (v12 != *(char **)a2)
    {
      v15 = 0;
      v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::scatter_nd_params_t>(*(_QWORD *)(v17 + v15), (uint64_t)&v14[v15], 0);
        ++v16;
        v14 = *(char **)a2;
        v15 += 16;
      }
      while (v16 < (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
    }
    v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::one_hot_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(void **__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::dev_op_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v18, *a1, v4);
    v5 = *(char **)a2;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    v6 = v19 - v18;
    if (v19 == v18)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        v12 = &v5[12 * v7];
        do
        {
          *(_QWORD *)v5 = 0x100000001;
          *((_DWORD *)v5 + 2) = 0;
          v5 += 12;
        }
        while (v5 != v12);
        *(_QWORD *)(a2 + 8) = v12;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0xAAAAAAAAAAAAAAALL)
          v10 = 0x1555555555555555;
        else
          v10 = v9;
        if (v10 > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(12 * v10);
        v12 = &v11[12 * v7];
        v13 = v11;
        do
        {
          *(_QWORD *)v13 = 0x100000001;
          *((_DWORD *)v13 + 2) = 0;
          v13 += 12;
        }
        while (v13 != v12);
        *(_QWORD *)a2 = v11;
        *(_QWORD *)(a2 + 8) = v12;
        *(_QWORD *)(a2 + 16) = &v11[12 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = *(char **)(a2 + 8);
        }
      }
    }
    v14 = *(char **)a2;
    if (v12 != *(char **)a2)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::sparse_inner_product_params_t>(*(_QWORD *)(v18 + v15), &v14[v16], 0);
        ++v17;
        v14 = *(char **)a2;
        v16 += 12;
        v15 += 16;
      }
      while (v17 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2));
    }
    v20 = (void **)&v18;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::wg_transform_params>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v18, *a1, v4);
    v5 = *(char **)a2;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    v6 = v19 - v18;
    if (v19 == v18)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 3);
      if (v8 >= v6 >> 4)
      {
        v12 = &v5[40 * v7];
        do
        {
          *(_OWORD *)v5 = xmmword_191A93820;
          *((_QWORD *)v5 + 3) = 0;
          *((_QWORD *)v5 + 4) = 0;
          *((_QWORD *)v5 + 2) = 0;
          v5 += 40;
        }
        while (v5 != v12);
        *(_QWORD *)(a2 + 8) = v12;
      }
      else
      {
        if ((unint64_t)v6 >= 0x6666666666666661)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x999999999999999ALL * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 3);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x333333333333333)
          v10 = 0x666666666666666;
        else
          v10 = v9;
        if (v10 > 0x666666666666666)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(40 * v10);
        v12 = &v11[40 * v7];
        v13 = v11;
        do
        {
          *(_OWORD *)v13 = xmmword_191A93820;
          *((_QWORD *)v13 + 3) = 0;
          *((_QWORD *)v13 + 4) = 0;
          *((_QWORD *)v13 + 2) = 0;
          v13 += 40;
        }
        while (v13 != v12);
        *(_QWORD *)a2 = v11;
        *(_QWORD *)(a2 + 8) = v12;
        *(_QWORD *)(a2 + 16) = &v11[40 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = *(char **)(a2 + 8);
        }
      }
    }
    v14 = *(char **)a2;
    if (v12 != *(char **)a2)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::wg_transform_params>(*(_QWORD *)(v18 + v15), (uint64_t)&v14[v16], 0);
        ++v17;
        v14 = *(char **)a2;
        v16 += 40;
        v15 += 16;
      }
      while (v17 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    }
    v20 = (void **)&v18;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::grid_sampling_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::resample_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v18, *a1, v4);
    v5 = *(char **)a2;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    v6 = v19 - v18;
    if (v19 == v18)
    {
      v13 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = *(_QWORD *)(a2 + 16) - (_QWORD)v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 4))
      {
        v13 = &v5[16 * v7];
        v14 = 16 * v7;
        do
        {
          *(_OWORD *)v5 = xmmword_191A93830;
          v5 += 16;
          v14 -= 16;
        }
        while (v14);
        *(_QWORD *)(a2 + 8) = v13;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = v8 >> 3;
        if (v8 >> 3 <= v7)
          v9 = v7;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(16 * v10);
        v12 = 0;
        v13 = &v11[16 * v7];
        do
        {
          *(_OWORD *)&v11[v12] = xmmword_191A93830;
          v12 += 16;
        }
        while (16 * v7 != v12);
        *(_QWORD *)a2 = v11;
        *(_QWORD *)(a2 + 8) = v13;
        *(_QWORD *)(a2 + 16) = &v11[16 * v10];
        if (v5)
        {
          operator delete(v5);
          v13 = *(char **)(a2 + 8);
        }
      }
    }
    v15 = *(char **)a2;
    if (v13 != *(char **)a2)
    {
      v16 = 0;
      v17 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::local_correlation_params_t>(*(_QWORD *)(v18 + v16), &v15[v16], 0);
        ++v17;
        v15 = *(char **)a2;
        v16 += 16;
      }
      while (v17 < (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
    }
    v20 = (void **)&v18;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::self_attention_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::loopkit_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::argsort_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::pool3d_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::conv3d_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v18, *a1, v4);
    v5 = *(char **)a2;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    v6 = v19 - v18;
    if (v19 == v18)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        v12 = &v5[28 * v7];
        do
        {
          *(_OWORD *)v5 = xmmword_191A93790;
          *((_QWORD *)v5 + 2) = 0x100000000;
          *((_DWORD *)v5 + 6) = 0;
          v5 += 28;
        }
        while (v5 != v12);
        *(_QWORD *)(a2 + 8) = v12;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x492492492492492)
          v10 = 0x924924924924924;
        else
          v10 = v9;
        if (v10 > 0x924924924924924)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(28 * v10);
        v12 = &v11[28 * v7];
        v13 = v11;
        do
        {
          *(_OWORD *)v13 = xmmword_191A93790;
          *((_QWORD *)v13 + 2) = 0x100000000;
          *((_DWORD *)v13 + 6) = 0;
          v13 += 28;
        }
        while (v13 != v12);
        *(_QWORD *)a2 = v11;
        *(_QWORD *)(a2 + 8) = v12;
        *(_QWORD *)(a2 + 16) = &v11[28 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = *(char **)(a2 + 8);
        }
      }
    }
    v14 = *(_QWORD **)a2;
    if (v12 != *(char **)a2)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::slice_update_params_t>(*(_QWORD *)(v18 + v15), (_QWORD *)((char *)v14 + v16), 0);
        ++v17;
        v14 = *(_QWORD **)a2;
        v16 += 28;
        v15 += 16;
      }
      while (v17 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2));
    }
    v20 = (void **)&v18;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::static_quantize_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::static_dequantize_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::general_slice_update_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::einsum_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::foreign_network_storage_blob_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::foreign_network_weight_file_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::tunneled_ane_op_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  Espresso::tunneled_ane_op_params_t *v5;
  Espresso::tunneled_ane_op_params_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  size_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  Espresso::tunneled_ane_op_params_t *v27;
  Espresso::tunneled_ane_op_params_t *v28;
  Espresso::tunneled_ane_op_params_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;

  v4 = a1 + 2;
  if (!(*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
    return;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v33, *a1, v4);
  v5 = *(Espresso::tunneled_ane_op_params_t **)a2;
  v6 = *(Espresso::tunneled_ane_op_params_t **)(a2 + 8);
  if (v6 != *(Espresso::tunneled_ane_op_params_t **)a2)
  {
    do
    {
      v6 = (Espresso::tunneled_ane_op_params_t *)((char *)v6 - 280);
      Espresso::tunneled_ane_op_params_t::~tunneled_ane_op_params_t(v6);
    }
    while (v6 != v5);
    v6 = *(Espresso::tunneled_ane_op_params_t **)a2;
  }
  *(_QWORD *)(a2 + 8) = v5;
  v7 = (v34 - v33) >> 4;
  v8 = 0xAF8AF8AF8AF8AF8BLL * ((v5 - v6) >> 3);
  v9 = v7 - v8;
  if (v7 <= v8)
  {
    if (v7 >= v8)
    {
      v28 = v5;
      goto LABEL_31;
    }
    v28 = (Espresso::tunneled_ane_op_params_t *)((char *)v6 + 280 * v7);
    while (v5 != v28)
    {
      v5 = (Espresso::tunneled_ane_op_params_t *)((char *)v5 - 280);
      Espresso::tunneled_ane_op_params_t::~tunneled_ane_op_params_t(v5);
    }
  }
  else
  {
    v10 = *(_QWORD *)(a2 + 16);
    if (0xAF8AF8AF8AF8AF8BLL * ((v10 - (uint64_t)v5) >> 3) < v9)
    {
      if ((unint64_t)(v34 - v33) >= 0xEA0EA0EA0EA0EA1)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v11 = 0xAF8AF8AF8AF8AF8BLL * ((v10 - (uint64_t)v6) >> 3);
      v12 = 0x5F15F15F15F15F16 * ((v10 - (uint64_t)v6) >> 3);
      if (v12 > v7)
        v7 = v12;
      if (v11 >= 0x75075075075075)
        v13 = 0xEA0EA0EA0EA0EALL;
      else
        v13 = v7;
      if (v13 > 0xEA0EA0EA0EA0EALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = (char *)operator new(280 * v13);
      v15 = &v14[8 * ((v5 - v6) >> 3)];
      v16 = &v14[280 * v13];
      v17 = 280 * ((280 * v9 - 280) / 0x118) + 280;
      bzero(v15, v17);
      v18 = &v15[v17];
      if (v5 == v6)
      {
        *(_QWORD *)a2 = v15;
        *(_QWORD *)(a2 + 8) = v18;
        *(_QWORD *)(a2 + 16) = v16;
      }
      else
      {
        v19 = 0;
        do
        {
          v20 = &v15[v19];
          v21 = (char *)v5 + v19;
          v22 = (uint64_t)v5 + v19 - 280;
          v23 = &v15[v19 - 264];
          *(_QWORD *)v23 = 0;
          *(_OWORD *)&v15[v19 - 280] = *(_OWORD *)v22;
          *(_QWORD *)v23 = *(_QWORD *)((char *)v5 + v19 - 264);
          *(_QWORD *)((char *)v5 + v19 - 272) = 0;
          *(_QWORD *)v22 = 0;
          *(_QWORD *)(v22 + 16) = 0;
          *((_QWORD *)v20 - 30) = 0;
          *((_OWORD *)v20 - 16) = *(_OWORD *)((char *)v5 + v19 - 256);
          *((_QWORD *)v20 - 30) = *(_QWORD *)((char *)v5 + v19 - 240);
          *((_QWORD *)v21 - 31) = 0;
          *((_QWORD *)v21 - 30) = 0;
          *((_QWORD *)v21 - 32) = 0;
          *((_DWORD *)v20 - 58) = *(_DWORD *)((char *)v5 + v19 - 232);
          *((_DWORD *)v20 - 56) = *(_DWORD *)((char *)v5 + v19 - 224);
          v24 = *(_OWORD *)((char *)v5 + v19 - 216);
          *((_QWORD *)v20 - 25) = *(_QWORD *)((char *)v5 + v19 - 200);
          *(_OWORD *)(v20 - 216) = v24;
          *((_QWORD *)v21 - 26) = 0;
          *((_QWORD *)v21 - 25) = 0;
          *((_QWORD *)v21 - 27) = 0;
          v25 = *(_OWORD *)((char *)v5 + v19 - 192);
          *((_QWORD *)v20 - 22) = *(_QWORD *)((char *)v5 + v19 - 176);
          *((_OWORD *)v20 - 12) = v25;
          *((_QWORD *)v21 - 23) = 0;
          *((_QWORD *)v21 - 22) = 0;
          *((_QWORD *)v21 - 24) = 0;
          v26 = *(_OWORD *)((char *)v5 + v19 - 168);
          *((_QWORD *)v20 - 19) = *(_QWORD *)((char *)v5 + v19 - 152);
          *(_OWORD *)(v20 - 168) = v26;
          *((_QWORD *)v21 - 20) = 0;
          *((_QWORD *)v21 - 19) = 0;
          *((_QWORD *)v21 - 21) = 0;
          *((_QWORD *)v20 - 16) = 0;
          *((_OWORD *)v20 - 9) = *(_OWORD *)((char *)v5 + v19 - 144);
          *((_QWORD *)v20 - 16) = *(_QWORD *)((char *)v5 + v19 - 128);
          *((_QWORD *)v21 - 18) = 0;
          *((_QWORD *)v21 - 17) = 0;
          *((_QWORD *)v21 - 16) = 0;
          *((_QWORD *)v20 - 13) = 0;
          *(_OWORD *)(v20 - 120) = *(_OWORD *)((char *)v5 + v19 - 120);
          *((_QWORD *)v20 - 13) = *(_QWORD *)((char *)v5 + v19 - 104);
          *((_QWORD *)v21 - 15) = 0;
          *((_QWORD *)v21 - 14) = 0;
          *((_QWORD *)v21 - 13) = 0;
          *((_QWORD *)v20 - 10) = 0;
          *((_OWORD *)v20 - 6) = *(_OWORD *)((char *)v5 + v19 - 96);
          *((_QWORD *)v20 - 10) = *(_QWORD *)((char *)v5 + v19 - 80);
          *((_QWORD *)v21 - 12) = 0;
          *((_QWORD *)v21 - 11) = 0;
          *((_QWORD *)v21 - 10) = 0;
          *((_QWORD *)v20 - 7) = 0;
          *(_OWORD *)(v20 - 72) = *(_OWORD *)((char *)v5 + v19 - 72);
          *((_QWORD *)v20 - 7) = *(_QWORD *)((char *)v5 + v19 - 56);
          *((_QWORD *)v21 - 9) = 0;
          *((_QWORD *)v21 - 8) = 0;
          *((_QWORD *)v21 - 7) = 0;
          *((_QWORD *)v20 - 4) = 0;
          *((_OWORD *)v20 - 3) = *(_OWORD *)((char *)v5 + v19 - 48);
          *((_QWORD *)v20 - 4) = *(_QWORD *)((char *)v5 + v19 - 32);
          *((_QWORD *)v21 - 6) = 0;
          *((_QWORD *)v21 - 5) = 0;
          *((_QWORD *)v21 - 4) = 0;
          *((_QWORD *)v20 - 1) = 0;
          *(_OWORD *)(v20 - 24) = *(_OWORD *)((char *)v5 + v19 - 24);
          *((_QWORD *)v20 - 1) = *(_QWORD *)((char *)v5 + v19 - 8);
          *((_QWORD *)v21 - 3) = 0;
          *((_QWORD *)v21 - 2) = 0;
          *((_QWORD *)v21 - 1) = 0;
          v19 -= 280;
        }
        while ((Espresso::tunneled_ane_op_params_t *)((char *)v5 + v19) != v6);
        v27 = *(Espresso::tunneled_ane_op_params_t **)a2;
        v5 = *(Espresso::tunneled_ane_op_params_t **)(a2 + 8);
        *(_QWORD *)a2 = &v15[v19];
        *(_QWORD *)(a2 + 8) = v18;
        *(_QWORD *)(a2 + 16) = v16;
        if (v5 != v27)
        {
          do
          {
            v5 = (Espresso::tunneled_ane_op_params_t *)((char *)v5 - 280);
            Espresso::tunneled_ane_op_params_t::~tunneled_ane_op_params_t(v5);
          }
          while (v5 != v27);
          v5 = v27;
        }
      }
      if (v5)
        operator delete(v5);
      v28 = *(Espresso::tunneled_ane_op_params_t **)(a2 + 8);
      goto LABEL_31;
    }
    bzero(v5, 280 * ((280 * v9 - 280) / 0x118) + 280);
    v28 = (Espresso::tunneled_ane_op_params_t *)((char *)v5 + 280 * ((280 * v9 - 280) / 0x118) + 280);
  }
  *(_QWORD *)(a2 + 8) = v28;
LABEL_31:
  v29 = *(Espresso::tunneled_ane_op_params_t **)a2;
  if (v28 != *(Espresso::tunneled_ane_op_params_t **)a2)
  {
    v30 = 0;
    v31 = 0;
    v32 = 0;
    do
    {
      Espresso::SerDes::params_io<Espresso::tunneled_ane_op_params_t>(*(_QWORD *)(v33 + v30), (uint64_t)v29 + v31, 0);
      ++v32;
      v29 = *(Espresso::tunneled_ane_op_params_t **)a2;
      v31 += 280;
      v30 += 16;
    }
    while (v32 < 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  }
  v35 = (void **)&v33;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v35);
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::tunneled_unit_bottom_layout_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::tunneled_unit_top_layout_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::tunneled_ane_unit_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  void **v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  size_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  void **v21;
  __int128 v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  void **v26;
  void **v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;

  v4 = a1 + 2;
  if (!(*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
    return;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v32, *a1, v4);
  v5 = *(void ***)a2;
  v6 = *(void ***)(a2 + 8);
  if (v6 != *(void ***)a2)
  {
    do
    {
      v6 -= 22;
      Espresso::tunneled_ane_unit_params_t::~tunneled_ane_unit_params_t(v6);
    }
    while (v6 != v5);
    v6 = *(void ***)a2;
  }
  *(_QWORD *)(a2 + 8) = v5;
  v7 = (v33 - v32) >> 4;
  v8 = 0x2E8BA2E8BA2E8BA3 * (((char *)v5 - (char *)v6) >> 4);
  v9 = v7 - v8;
  if (v7 <= v8)
  {
    if (v7 >= v8)
    {
      v27 = v5;
      goto LABEL_31;
    }
    v27 = &v6[22 * v7];
    while (v5 != v27)
    {
      v5 -= 22;
      Espresso::tunneled_ane_unit_params_t::~tunneled_ane_unit_params_t(v5);
    }
  }
  else
  {
    v10 = *(_QWORD *)(a2 + 16);
    if (0x2E8BA2E8BA2E8BA3 * ((v10 - (uint64_t)v5) >> 4) < v9)
    {
      if ((unint64_t)(v33 - v32) >= 0x1745D1745D1745D1)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v11 = 0x2E8BA2E8BA2E8BA3 * ((v10 - (uint64_t)v6) >> 4);
      v12 = 0x5D1745D1745D1746 * ((v10 - (uint64_t)v6) >> 4);
      if (v12 > v7)
        v7 = v12;
      if (v11 >= 0xBA2E8BA2E8BA2ELL)
        v13 = 0x1745D1745D1745DLL;
      else
        v13 = v7;
      if (v13 > 0x1745D1745D1745DLL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = (char *)operator new(176 * v13);
      v15 = &v14[16 * (((char *)v5 - (char *)v6) >> 4)];
      v16 = &v14[176 * v13];
      v17 = 176 * ((176 * v9 - 176) / 0xB0) + 176;
      bzero(v15, v17);
      v18 = &v15[v17];
      if (v5 == v6)
      {
        *(_QWORD *)a2 = v15;
        *(_QWORD *)(a2 + 8) = v18;
        *(_QWORD *)(a2 + 16) = v16;
      }
      else
      {
        v19 = 0;
        do
        {
          v20 = &v15[v19 * 8];
          v21 = &v5[v19];
          *((_QWORD *)v20 - 20) = 0;
          *((_OWORD *)v20 - 11) = *(_OWORD *)&v5[v19 - 22];
          *((_QWORD *)v20 - 20) = v5[v19 - 20];
          *(v21 - 22) = 0;
          *(v21 - 21) = 0;
          *(v21 - 20) = 0;
          *((_QWORD *)v20 - 17) = 0;
          *(_OWORD *)(v20 - 152) = *(_OWORD *)&v5[v19 - 19];
          *((_QWORD *)v20 - 17) = v5[v19 - 17];
          *(v21 - 19) = 0;
          *(v21 - 18) = 0;
          *(v21 - 17) = 0;
          *((_QWORD *)v20 - 14) = 0;
          *((_OWORD *)v20 - 8) = *(_OWORD *)&v5[v19 - 16];
          *((_QWORD *)v20 - 14) = v5[v19 - 14];
          *(v21 - 16) = 0;
          *(v21 - 15) = 0;
          *(v21 - 14) = 0;
          *((_QWORD *)v20 - 11) = 0;
          *(_OWORD *)(v20 - 104) = *(_OWORD *)&v5[v19 - 13];
          *((_QWORD *)v20 - 11) = v5[v19 - 11];
          *(v21 - 13) = 0;
          *(v21 - 12) = 0;
          v22 = *(_OWORD *)&v5[v19 - 10];
          v23 = v5[v19 - 8];
          *(v21 - 11) = 0;
          *((_QWORD *)v20 - 8) = v23;
          *((_OWORD *)v20 - 5) = v22;
          *(v21 - 9) = 0;
          *(v21 - 8) = 0;
          *(v21 - 10) = 0;
          v24 = *(_OWORD *)&v5[v19 - 7];
          *((_QWORD *)v20 - 5) = v5[v19 - 5];
          *(_OWORD *)(v20 - 56) = v24;
          *(v21 - 6) = 0;
          *(v21 - 5) = 0;
          *(v21 - 7) = 0;
          v25 = *(_OWORD *)&v5[v19 - 4];
          *((_QWORD *)v20 - 2) = v5[v19 - 2];
          *((_OWORD *)v20 - 2) = v25;
          *(v21 - 4) = 0;
          *(v21 - 3) = 0;
          *(v21 - 2) = 0;
          *((_DWORD *)v20 - 2) = v5[v19 - 1];
          v19 -= 22;
        }
        while (&v5[v19] != v6);
        v26 = *(void ***)a2;
        v5 = *(void ***)(a2 + 8);
        *(_QWORD *)a2 = &v15[v19 * 8];
        *(_QWORD *)(a2 + 8) = v18;
        *(_QWORD *)(a2 + 16) = v16;
        if (v5 != v26)
        {
          do
          {
            v5 -= 22;
            Espresso::tunneled_ane_unit_params_t::~tunneled_ane_unit_params_t(v5);
          }
          while (v5 != v26);
          v5 = v26;
        }
      }
      if (v5)
        operator delete(v5);
      v27 = *(void ***)(a2 + 8);
      goto LABEL_31;
    }
    bzero(v5, 176 * ((176 * v9 - 176) / 0xB0) + 176);
    v27 = &v5[22 * ((176 * v9 - 176) / 0xB0) + 22];
  }
  *(_QWORD *)(a2 + 8) = v27;
LABEL_31:
  v28 = *(void ***)a2;
  if (v27 != *(void ***)a2)
  {
    v29 = 0;
    v30 = 0;
    v31 = 0;
    do
    {
      Espresso::SerDes::params_io<Espresso::tunneled_ane_unit_params_t>(*(_QWORD *)(v32 + v29), (uint64_t)&v28[v30], 0);
      ++v31;
      v28 = *(void ***)a2;
      v30 += 22;
      v29 += 16;
    }
    while (v31 < 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4));
  }
  v34 = (void **)&v32;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v34);
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v18, *a1, v4);
    v5 = *(char **)a2;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    v6 = v19 - v18;
    if (v19 == v18)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        v12 = &v5[12 * v7];
        do
        {
          *(_QWORD *)v5 = 2;
          *((_DWORD *)v5 + 2) = -2;
          v5 += 12;
        }
        while (v5 != v12);
        *(_QWORD *)(a2 + 8) = v12;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0xAAAAAAAAAAAAAAALL)
          v10 = 0x1555555555555555;
        else
          v10 = v9;
        if (v10 > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(12 * v10);
        v12 = &v11[12 * v7];
        v13 = v11;
        do
        {
          *(_QWORD *)v13 = 2;
          *((_DWORD *)v13 + 2) = -2;
          v13 += 12;
        }
        while (v13 != v12);
        *(_QWORD *)a2 = v11;
        *(_QWORD *)(a2 + 8) = v12;
        *(_QWORD *)(a2 + 16) = &v11[12 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = *(char **)(a2 + 8);
        }
      }
    }
    v14 = *(char **)a2;
    if (v12 != *(char **)a2)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::furthest_point_sampling_params_t>(*(_QWORD *)(v18 + v15), &v14[v16], 0);
        ++v17;
        v14 = *(char **)a2;
        v16 += 12;
        v15 += 16;
      }
      while (v17 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2));
    }
    v20 = (void **)&v18;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::brick_params>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_19176799C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::operator>>(_QWORD *a1, char **a2)
{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v18;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v24, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v25 - v24;
    if (v25 == v24)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0x6F96F96F96F96F97 * ((a2[2] - v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        v12 = &v5[156 * v7];
        __asm { FMOV            V1.2S, #1.0 }
        do
        {
          *(_OWORD *)v5 = 0uLL;
          *((_OWORD *)v5 + 1) = 0uLL;
          *((_OWORD *)v5 + 2) = 0uLL;
          *((_OWORD *)v5 + 3) = 0uLL;
          *((_OWORD *)v5 + 4) = 0uLL;
          *((_OWORD *)v5 + 5) = 0uLL;
          *((_OWORD *)v5 + 6) = 0uLL;
          *((_OWORD *)v5 + 7) = 0uLL;
          *(_OWORD *)(v5 + 140) = 0uLL;
          *((_OWORD *)v5 + 8) = 0uLL;
          *((_QWORD *)v5 + 1) = _D1;
          *(_QWORD *)(v5 + 20) = _D1;
          *((_DWORD *)v5 + 4) = 2;
          *((_QWORD *)v5 + 4) = _D1;
          *(_QWORD *)(v5 + 44) = _D1;
          *((_QWORD *)v5 + 7) = _D1;
          *((_DWORD *)v5 + 13) = 2;
          *(_QWORD *)(v5 + 68) = _D1;
          *((_DWORD *)v5 + 19) = 512;
          *((_DWORD *)v5 + 21) = 1065353216;
          *(_QWORD *)(v5 + 92) = 0x100000000;
          *((_DWORD *)v5 + 26) = 1112014848;
          *((_QWORD *)v5 + 14) = 0x3F80000000000001;
          *((_DWORD *)v5 + 31) = 1065353216;
          *((_QWORD *)v5 + 16) = 0;
          *((_QWORD *)v5 + 17) = 0;
          *((_WORD *)v5 + 76) = 0;
          *((_QWORD *)v5 + 18) = 0;
          v5 += 156;
        }
        while (v5 != v12);
        a2[1] = v12;
      }
      else
      {
        if ((unint64_t)v6 >= 0x1A41A41A41A41A41)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0xDF2DF2DF2DF2DF2ELL * ((a2[2] - v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0xD20D20D20D20D2)
          v10 = 0x1A41A41A41A41A4;
        else
          v10 = v9;
        if (v10 > 0x1A41A41A41A41A4)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(156 * v10);
        v12 = &v11[156 * v7];
        __asm { FMOV            V1.2S, #1.0 }
        v18 = v11;
        do
        {
          *(_OWORD *)v18 = 0uLL;
          *((_OWORD *)v18 + 1) = 0uLL;
          *((_OWORD *)v18 + 2) = 0uLL;
          *((_OWORD *)v18 + 3) = 0uLL;
          *((_OWORD *)v18 + 4) = 0uLL;
          *((_OWORD *)v18 + 5) = 0uLL;
          *((_OWORD *)v18 + 6) = 0uLL;
          *((_OWORD *)v18 + 7) = 0uLL;
          *(_OWORD *)(v18 + 140) = 0uLL;
          *((_OWORD *)v18 + 8) = 0uLL;
          *((_QWORD *)v18 + 1) = _D1;
          *(_QWORD *)(v18 + 20) = _D1;
          *((_DWORD *)v18 + 4) = 2;
          *((_QWORD *)v18 + 4) = _D1;
          *(_QWORD *)(v18 + 44) = _D1;
          *((_QWORD *)v18 + 7) = _D1;
          *((_DWORD *)v18 + 13) = 2;
          *(_QWORD *)(v18 + 68) = _D1;
          *((_DWORD *)v18 + 19) = 512;
          *((_DWORD *)v18 + 21) = 1065353216;
          *(_QWORD *)(v18 + 92) = 0x100000000;
          *((_DWORD *)v18 + 26) = 1112014848;
          *((_QWORD *)v18 + 14) = 0x3F80000000000001;
          *((_DWORD *)v18 + 31) = 1065353216;
          *((_QWORD *)v18 + 16) = 0;
          *((_QWORD *)v18 + 17) = 0;
          *((_WORD *)v18 + 76) = 0;
          *((_QWORD *)v18 + 18) = 0;
          v18 += 156;
        }
        while (v18 != v12);
        *a2 = v11;
        a2[1] = v12;
        a2[2] = &v11[156 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = a2[1];
        }
      }
    }
    v20 = *a2;
    if (v12 != *a2)
    {
      v21 = 0;
      v22 = 0;
      v23 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::rnn_arch_params>(*(_QWORD *)(v24 + v21), (uint64_t)&v20[v22], 0);
        ++v23;
        v20 = *a2;
        v22 += 156;
        v21 += 16;
      }
      while (v23 < 0x6F96F96F96F96F97 * ((a2[1] - *a2) >> 2));
    }
    v26 = (void **)&v24;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v26);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v15, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v16 - v15;
    if (v16 != v15)
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 2))
      {
        bzero(v5, v6 >> 2);
        v5 += v6 >> 2;
        a2[1] = v5;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (v8 >> 1 > v7)
          v7 = v8 >> 1;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
          v9 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v9 = v7;
        if (v9 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v10 = (char *)operator new(4 * v9);
        bzero(v10, v6 >> 2);
        *a2 = v10;
        a2[1] = &v10[v6 >> 2];
        a2[2] = &v10[4 * v9];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v10[v6 >> 2];
        }
      }
    }
    v11 = *a2;
    if (v5 != *a2)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::sequence_concat_params>(*(_QWORD *)(v15 + v12), &v11[v13], 0);
        ++v14;
        v11 = *a2;
        v13 += 4;
        v12 += 16;
      }
      while (v14 < (a2[1] - *a2) >> 2);
    }
    v17 = (void **)&v15;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v17);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v12, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v13 - v12;
    if (v13 != v12)
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v8 >= v6 >> 4)
      {
        a2[1] = &v5[v7];
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 2 * v8;
        if (2 * v8 <= v7)
          v9 = v7;
        if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
          v10 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        v11 = (char *)operator new(v10);
        *a2 = v11;
        a2[1] = &v11[v7];
        a2[2] = &v11[v10];
        if (v5)
          operator delete(v5);
      }
    }
    v14 = (void **)&v12;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v14);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v15, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v16 - v15;
    if (v16 != v15)
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 2))
      {
        memset_pattern16(v5, &xmmword_191A93A60, v6 >> 2);
        v5 += v6 >> 2;
        a2[1] = v5;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (v8 >> 1 > v7)
          v7 = v8 >> 1;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
          v9 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v9 = v7;
        if (v9 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v10 = (char *)operator new(4 * v9);
        memset_pattern16(v10, &xmmword_191A93A60, v6 >> 2);
        *a2 = v10;
        a2[1] = &v10[v6 >> 2];
        a2[2] = &v10[4 * v9];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v10[v6 >> 2];
        }
      }
    }
    v11 = *a2;
    if (v5 != *a2)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::sequence_repeat_params>(*(_QWORD *)(v15 + v12), &v11[v13], 0);
        ++v14;
        v11 = *a2;
        v13 += 4;
        v12 += 16;
      }
      while (v14 < (a2[1] - *a2) >> 2);
    }
    v17 = (void **)&v15;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v17);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v12, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v13 - v12;
    if (v13 != v12)
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v8 >= v6 >> 4)
      {
        a2[1] = &v5[v7];
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 2 * v8;
        if (2 * v8 <= v7)
          v9 = v7;
        if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
          v10 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        v11 = (char *)operator new(v10);
        *a2 = v11;
        a2[1] = &v11[v7];
        a2[2] = &v11[v10];
        if (v5)
          operator delete(v5);
      }
    }
    v14 = (void **)&v12;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v14);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v19, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v20 - v19;
    if (v20 == v19)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0x6DB6DB6DB6DB6DB7 * ((a2[2] - v5) >> 4);
      if (v8 >= v6 >> 4)
      {
        v12 = &v5[112 * v7];
        do
        {
          *(_OWORD *)v5 = 0uLL;
          *((_OWORD *)v5 + 1) = 0uLL;
          *((_OWORD *)v5 + 2) = 0uLL;
          *((_OWORD *)v5 + 3) = 0uLL;
          *((_QWORD *)v5 + 8) = 0;
          *((_QWORD *)v5 + 9) = 0;
          *(_QWORD *)(v5 + 4) = 0x300000003;
          *((_QWORD *)v5 + 2) = 0x100000001;
          *((_DWORD *)v5 + 6) = 1;
          *((_DWORD *)v5 + 8) = 2;
          *((_WORD *)v5 + 18) = 1;
          *(_OWORD *)(v5 + 38) = 0uLL;
          *(_OWORD *)(v5 + 54) = 0uLL;
          *((_QWORD *)v5 + 10) = 0;
          *((_QWORD *)v5 + 11) = 0x100000001;
          *((_QWORD *)v5 + 12) = 0;
          *((_QWORD *)v5 + 13) = 0;
          v5 += 112;
        }
        while (v5 != v12);
        a2[1] = v12;
      }
      else
      {
        if ((unint64_t)v6 >= 0x2492492492492491)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0xDB6DB6DB6DB6DB6ELL * ((a2[2] - v5) >> 4);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x124924924924924)
          v10 = 0x249249249249249;
        else
          v10 = v9;
        if (v10 > 0x249249249249249)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(112 * v10);
        v12 = &v11[112 * v7];
        v13 = v11;
        do
        {
          *(_OWORD *)v13 = 0uLL;
          *((_OWORD *)v13 + 1) = 0uLL;
          *((_OWORD *)v13 + 2) = 0uLL;
          *((_OWORD *)v13 + 3) = 0uLL;
          *((_QWORD *)v13 + 8) = 0;
          *((_QWORD *)v13 + 9) = 0;
          *(_QWORD *)(v13 + 4) = 0x300000003;
          *((_QWORD *)v13 + 2) = 0x100000001;
          *((_DWORD *)v13 + 6) = 1;
          *((_DWORD *)v13 + 8) = 2;
          *((_WORD *)v13 + 18) = 1;
          *(_OWORD *)(v13 + 38) = 0uLL;
          *(_OWORD *)(v13 + 54) = 0uLL;
          *((_QWORD *)v13 + 10) = 0;
          *((_QWORD *)v13 + 11) = 0x100000001;
          *((_QWORD *)v13 + 12) = 0;
          *((_QWORD *)v13 + 13) = 0;
          v13 += 112;
        }
        while (v13 != v12);
        *(_QWORD *)&v14 = &v11[112 * v7];
        *((_QWORD *)&v14 + 1) = &v11[112 * v10];
        *a2 = v11;
        *(_OWORD *)(a2 + 1) = v14;
        if (v5)
        {
          operator delete(v5);
          v12 = a2[1];
        }
      }
    }
    v15 = *a2;
    if (v12 != *a2)
    {
      v16 = 0;
      v17 = 0;
      v18 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::pool_params>(*(_QWORD *)(v19 + v16), (uint64_t)&v15[v17], 0);
        ++v18;
        v15 = *a2;
        v17 += 112;
        v16 += 16;
      }
      while (v18 < 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 4));
    }
    v21 = (void **)&v19;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v21);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v18, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v19 - v18;
    if (v19 == v18)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0x6DB6DB6DB6DB6DB7 * ((a2[2] - v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        v12 = &v5[28 * v7];
        do
        {
          *(_QWORD *)v5 = 0x3F40000038D1B717;
          *((_DWORD *)v5 + 2) = 3;
          *(_QWORD *)(v5 + 20) = 0;
          *(_QWORD *)(v5 + 12) = 0;
          v5 += 28;
        }
        while (v5 != v12);
        a2[1] = v12;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0xDB6DB6DB6DB6DB6ELL * ((a2[2] - v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x492492492492492)
          v10 = 0x924924924924924;
        else
          v10 = v9;
        if (v10 > 0x924924924924924)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(28 * v10);
        v12 = &v11[28 * v7];
        v13 = v11;
        do
        {
          *(_QWORD *)v13 = 0x3F40000038D1B717;
          *((_DWORD *)v13 + 2) = 3;
          *(_QWORD *)(v13 + 20) = 0;
          *(_QWORD *)(v13 + 12) = 0;
          v13 += 28;
        }
        while (v13 != v12);
        *a2 = v11;
        a2[1] = v12;
        a2[2] = &v11[28 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = a2[1];
        }
      }
    }
    v14 = *a2;
    if (v12 != *a2)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::lrn_params>(*(_QWORD *)(v18 + v15), (uint64_t)&v14[v16], 0);
        ++v17;
        v14 = *a2;
        v16 += 28;
        v15 += 16;
      }
      while (v17 < 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 2));
    }
    v20 = (void **)&v18;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v21, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v22 - v21;
    if (v22 == v21)
    {
      v13 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0x6DB6DB6DB6DB6DB7 * ((a2[2] - v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        v15 = 28 * v7;
        v13 = &v5[28 * v7];
        v16 = v5 + 16;
        do
        {
          *((_DWORD *)v16 + 2) = 256;
          *((_OWORD *)v16 - 1) = xmmword_191A93370;
          *(_QWORD *)v16 = 1;
          v16 += 28;
          v15 -= 28;
        }
        while (v15);
        a2[1] = v13;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0xDB6DB6DB6DB6DB6ELL * ((a2[2] - v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x492492492492492)
          v10 = 0x924924924924924;
        else
          v10 = v9;
        if (v10 > 0x924924924924924)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(28 * v10);
        v12 = 0;
        v13 = &v11[28 * v7];
        do
        {
          v14 = &v11[v12];
          *((_DWORD *)v14 + 6) = 256;
          *(_OWORD *)v14 = xmmword_191A93370;
          *((_QWORD *)v14 + 2) = 1;
          v12 += 28;
        }
        while (28 * v7 != v12);
        *a2 = v11;
        a2[1] = v13;
        a2[2] = &v11[28 * v10];
        if (v5)
        {
          operator delete(v5);
          v13 = a2[1];
        }
      }
    }
    v17 = *a2;
    if (v13 != *a2)
    {
      v18 = 0;
      v19 = 0;
      v20 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::softmax_params>(*(_QWORD *)(v21 + v18), (uint64_t)&v17[v19], 0);
        ++v20;
        v17 = *a2;
        v19 += 28;
        v18 += 16;
      }
      while (v20 < 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 2));
    }
    v23 = (void **)&v21;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v23);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v19;
  __int128 v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v28, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v29 - v28;
    if (v29 == v28)
    {
      v13 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0xF83E0F83E0F83E1 * ((a2[2] - v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        v21 = 0;
        v13 = &v5[132 * v7];
        __asm { FMOV            V0.2S, #1.0 }
        do
        {
          v23 = &v5[v21];
          v23[40] = 0;
          *((_DWORD *)v23 + 13) = -1;
          *((_QWORD *)v23 + 7) = _D0;
          *(_QWORD *)(v23 + 124) = 0;
          *(_OWORD *)v23 = xmmword_191A93320;
          *((_DWORD *)v23 + 4) = 0;
          *(_QWORD *)(v23 + 20) = _D0;
          *(_QWORD *)(v23 + 84) = 0;
          *(_QWORD *)(v23 + 28) = 0;
          *(_QWORD *)(v23 + 44) = 0;
          *((_DWORD *)v23 + 9) = 0;
          *(_QWORD *)(v23 + 100) = 0;
          *(_QWORD *)(v23 + 116) = 0;
          v21 += 132;
          *(_QWORD *)(v23 + 108) = 0;
        }
        while (132 * v7 != v21);
        a2[1] = v13;
      }
      else
      {
        if ((unint64_t)v6 >= 0x1F07C1F07C1F07C1)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x1F07C1F07C1F07C2 * ((a2[2] - v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0xF83E0F83E0F83ELL)
          v10 = 0x1F07C1F07C1F07CLL;
        else
          v10 = v9;
        if (v10 > 0x1F07C1F07C1F07CLL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(132 * v10);
        v12 = 0;
        v13 = &v11[132 * v7];
        __asm { FMOV            V0.2S, #1.0 }
        do
        {
          v19 = &v11[v12];
          v19[40] = 0;
          *((_DWORD *)v19 + 13) = -1;
          *((_QWORD *)v19 + 7) = _D0;
          *(_QWORD *)(v19 + 124) = 0;
          *(_OWORD *)v19 = xmmword_191A93320;
          *((_DWORD *)v19 + 4) = 0;
          *(_QWORD *)(v19 + 20) = _D0;
          *(_QWORD *)(v19 + 84) = 0;
          *(_QWORD *)(v19 + 28) = 0;
          *(_QWORD *)(v19 + 44) = 0;
          *((_DWORD *)v19 + 9) = 0;
          *(_QWORD *)(v19 + 100) = 0;
          *(_QWORD *)(v19 + 116) = 0;
          v12 += 132;
          *(_QWORD *)(v19 + 108) = 0;
        }
        while (132 * v7 != v12);
        *(_QWORD *)&v20 = &v11[132 * v7];
        *((_QWORD *)&v20 + 1) = &v11[132 * v10];
        *a2 = v11;
        *(_OWORD *)(a2 + 1) = v20;
        if (v5)
        {
          operator delete(v5);
          v13 = a2[1];
        }
      }
    }
    v24 = *a2;
    if (v13 != *a2)
    {
      v25 = 0;
      v26 = 0;
      v27 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(*(_QWORD *)(v28 + v25), (uint64_t)&v24[v26], 0);
        ++v27;
        v24 = *a2;
        v26 += 132;
        v25 += 16;
      }
      while (v27 < 0xF83E0F83E0F83E1 * ((a2[1] - *a2) >> 2));
    }
    v30 = (void **)&v28;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v30);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v21, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v22 - v21;
    if (v22 == v21)
    {
      v13 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 6))
      {
        v15 = v7 << 6;
        v16 = v5 + 32;
        v13 = &v5[64 * v7];
        do
        {
          v16[28] = 0;
          *((_WORD *)v16 + 4) = 0;
          *((_DWORD *)v16 - 8) = 0;
          *(_DWORD *)v16 = 0;
          v16 += 64;
          v15 -= 64;
        }
        while (v15);
        a2[1] = v13;
      }
      else
      {
        if ((unint64_t)v6 >= 0x3FFFFFFFFFFFFFF1)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = v8 >> 5;
        if (v8 >> 5 <= v7)
          v9 = v7;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0)
          v10 = 0x3FFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10 >> 58)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(v10 << 6);
        v12 = 0;
        v13 = &v11[64 * v7];
        do
        {
          v14 = &v11[v12];
          v14[60] = 0;
          *((_WORD *)v14 + 20) = 0;
          *(_DWORD *)v14 = 0;
          *((_DWORD *)v14 + 8) = 0;
          v12 += 64;
        }
        while (v7 << 6 != v12);
        *a2 = v11;
        a2[1] = v13;
        a2[2] = &v11[64 * v10];
        if (v5)
        {
          operator delete(v5);
          v13 = a2[1];
        }
      }
    }
    v17 = *a2;
    if (v13 != *a2)
    {
      v18 = 0;
      v19 = 0;
      v20 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::concat_params>(*(_QWORD *)(v21 + v18), (uint64_t)&v17[v19], 0);
        ++v20;
        v17 = *a2;
        v19 += 64;
        v18 += 16;
      }
      while (v20 < (a2[1] - *a2) >> 6);
    }
    v23 = (void **)&v21;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v23);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v20, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v21 - v20;
    if (v21 == v20)
    {
      v13 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0x4EC4EC4EC4EC4EC5 * ((a2[2] - v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        v15 = 52 * v7;
        v13 = &v5[52 * v7];
        do
        {
          v5[8] = 0;
          *(_QWORD *)(v5 + 20) = 0;
          *(_QWORD *)(v5 + 12) = 0;
          *(_QWORD *)v5 = 0x200000002;
          *((_DWORD *)v5 + 12) = 0;
          v5 += 52;
          v15 -= 52;
        }
        while (v15);
        a2[1] = v13;
      }
      else
      {
        if ((unint64_t)v6 >= 0x4EC4EC4EC4EC4EC1)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x9D89D89D89D89D8ALL * ((a2[2] - v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x276276276276276)
          v10 = 0x4EC4EC4EC4EC4ECLL;
        else
          v10 = v9;
        if (v10 > 0x4EC4EC4EC4EC4ECLL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(52 * v10);
        v12 = 0;
        v13 = &v11[52 * v7];
        do
        {
          v14 = &v11[v12];
          v14[8] = 0;
          *(_QWORD *)(v14 + 20) = 0;
          *(_QWORD *)(v14 + 12) = 0;
          *(_QWORD *)v14 = 0x200000002;
          v12 += 52;
          *((_DWORD *)v14 + 12) = 0;
        }
        while (52 * v7 != v12);
        *a2 = v11;
        a2[1] = v13;
        a2[2] = &v11[52 * v10];
        if (v5)
        {
          operator delete(v5);
          v13 = a2[1];
        }
      }
    }
    v16 = *a2;
    if (v13 != *a2)
    {
      v17 = 0;
      v18 = 0;
      v19 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::split_params>(*(_QWORD *)(v20 + v17), (uint64_t)&v16[v18], 0);
        ++v19;
        v16 = *a2;
        v18 += 52;
        v17 += 16;
      }
      while (v19 < 0x4EC4EC4EC4EC4EC5 * ((a2[1] - *a2) >> 2));
    }
    v22 = (void **)&v20;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v22);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v19;
  __int128 v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v28, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v29 - v28;
    if (v29 == v28)
    {
      v13 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0x8E38E38E38E38E39 * ((a2[2] - v5) >> 3);
      if (v8 >= v6 >> 4)
      {
        v21 = 0;
        v13 = &v5[72 * v7];
        __asm { FMOV            V2.2S, #1.0 }
        do
        {
          v23 = &v5[v21];
          *((_QWORD *)v23 + 3) = 0;
          *((_QWORD *)v23 + 4) = 0;
          *(_OWORD *)v23 = xmmword_191A93470;
          *((_QWORD *)v23 + 2) = 0x100000000;
          *(_QWORD *)(v23 + 28) = _D2;
          v23[36] = 1;
          *((_QWORD *)v23 + 6) = 0;
          *((_QWORD *)v23 + 7) = 0;
          *((_QWORD *)v23 + 5) = 0;
          v21 += 72;
          *((_QWORD *)v23 + 8) = _D2;
        }
        while (72 * v7 != v21);
        a2[1] = v13;
      }
      else
      {
        if ((unint64_t)v6 >= 0x38E38E38E38E38E1)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x1C71C71C71C71C72 * ((a2[2] - v5) >> 3);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x1C71C71C71C71C7)
          v10 = 0x38E38E38E38E38ELL;
        else
          v10 = v9;
        if (v10 > 0x38E38E38E38E38ELL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(72 * v10);
        v12 = 0;
        v13 = &v11[72 * v7];
        __asm { FMOV            V2.2S, #1.0 }
        do
        {
          v19 = &v11[v12];
          *((_QWORD *)v19 + 3) = 0;
          *((_QWORD *)v19 + 4) = 0;
          *(_OWORD *)v19 = xmmword_191A93470;
          *((_QWORD *)v19 + 2) = 0x100000000;
          *(_QWORD *)(v19 + 28) = _D2;
          v19[36] = 1;
          *((_QWORD *)v19 + 6) = 0;
          *((_QWORD *)v19 + 7) = 0;
          *((_QWORD *)v19 + 5) = 0;
          v12 += 72;
          *((_QWORD *)v19 + 8) = _D2;
        }
        while (72 * v7 != v12);
        *(_QWORD *)&v20 = &v11[72 * v7];
        *((_QWORD *)&v20 + 1) = &v11[72 * v10];
        *a2 = v11;
        *(_OWORD *)(a2 + 1) = v20;
        if (v5)
        {
          operator delete(v5);
          v13 = a2[1];
        }
      }
    }
    v24 = *a2;
    if (v13 != *a2)
    {
      v25 = 0;
      v26 = 0;
      v27 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::upsample_kernel_params>(*(_QWORD *)(v28 + v25), (uint64_t)&v24[v26], 0);
        ++v27;
        v24 = *a2;
        v26 += 72;
        v25 += 16;
      }
      while (v27 < 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 3));
    }
    v30 = (void **)&v28;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v30);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v18;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v24, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v25 - v24;
    if (v25 == v24)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0x8E38E38E38E38E39 * ((a2[2] - v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        v12 = &v5[36 * v7];
        __asm { FMOV            V0.2S, #1.0 }
        do
        {
          *(_DWORD *)v5 = 0;
          *(_QWORD *)(v5 + 4) = _D0;
          *(_QWORD *)(v5 + 12) = 0;
          *(_QWORD *)(v5 + 28) = 0;
          *(_QWORD *)(v5 + 20) = 0;
          v5 += 36;
        }
        while (v5 != v12);
        a2[1] = v12;
      }
      else
      {
        if ((unint64_t)v6 >= 0x71C71C71C71C71C1)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x1C71C71C71C71C72 * ((a2[2] - v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x38E38E38E38E38ELL)
          v10 = 0x71C71C71C71C71CLL;
        else
          v10 = v9;
        if (v10 > 0x71C71C71C71C71CLL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(36 * v10);
        v12 = &v11[36 * v7];
        __asm { FMOV            V0.2S, #1.0 }
        v18 = v11;
        do
        {
          *(_DWORD *)v18 = 0;
          *(_QWORD *)(v18 + 4) = _D0;
          *(_QWORD *)(v18 + 12) = 0;
          *(_QWORD *)(v18 + 28) = 0;
          *(_QWORD *)(v18 + 20) = 0;
          v18 += 36;
        }
        while (v18 != v12);
        *a2 = v11;
        a2[1] = v12;
        a2[2] = &v11[36 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = a2[1];
        }
      }
    }
    v20 = *a2;
    if (v12 != *a2)
    {
      v21 = 0;
      v22 = 0;
      v23 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::activation_params>(*(_QWORD *)(v24 + v21), (uint64_t)&v20[v22], 0);
        ++v23;
        v20 = *a2;
        v22 += 36;
        v21 += 16;
      }
      while (v23 < 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 2));
    }
    v26 = (void **)&v24;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v26);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v33, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v34 - v33;
    if (v34 == v33)
    {
      v14 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0x6DB6DB6DB6DB6DB7 * ((a2[2] - v5) >> 3);
      if (v8 >= v6 >> 4)
      {
        v27 = 56 * v7;
        v14 = &v5[56 * v7];
        __asm { FMOV            V0.2S, #1.0 }
        do
        {
          *((_DWORD *)v5 + 13) = 0;
          *(_QWORD *)v5 = _D0;
          *(_OWORD *)(v5 + 8) = 0uLL;
          *(_OWORD *)(v5 + 24) = 0uLL;
          *(_OWORD *)(v5 + 36) = 0uLL;
          v5 += 56;
          v27 -= 56;
        }
        while (v27);
        a2[1] = v14;
      }
      else
      {
        if ((unint64_t)v6 >= 0x4924924924924921)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0xDB6DB6DB6DB6DB6ELL * ((a2[2] - v5) >> 3);
        if (2 * v8 <= v7)
          v9 = v6 >> 4;
        if (v8 >= 0x249249249249249)
          v10 = 0x492492492492492;
        else
          v10 = v9;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::axpby_params>>(v10);
        v13 = 0;
        v14 = &v11[56 * v7];
        __asm { FMOV            V0.2S, #1.0 }
        do
        {
          v20 = &v11[v13];
          *((_DWORD *)v20 + 13) = 0;
          *(_QWORD *)v20 = _D0;
          *(_OWORD *)(v20 + 8) = 0uLL;
          *(_OWORD *)(v20 + 24) = 0uLL;
          v13 += 56;
          *(_OWORD *)(v20 + 36) = 0uLL;
        }
        while (56 * v7 != v13);
        v21 = &v11[56 * v12];
        v23 = *a2;
        v22 = a2[1];
        if (v22 != *a2)
        {
          do
          {
            v24 = *(_OWORD *)(v22 - 56);
            v25 = *(_OWORD *)(v22 - 40);
            v26 = *(_OWORD *)(v22 - 24);
            *((_QWORD *)v11 - 1) = *((_QWORD *)v22 - 1);
            *(_OWORD *)(v11 - 24) = v26;
            *(_OWORD *)(v11 - 40) = v25;
            *(_OWORD *)(v11 - 56) = v24;
            v11 -= 56;
            v22 -= 56;
          }
          while (v22 != v23);
          v22 = *a2;
        }
        *a2 = v11;
        a2[1] = v14;
        a2[2] = v21;
        if (v22)
        {
          operator delete(v22);
          v14 = a2[1];
        }
      }
    }
    v29 = *a2;
    if (v14 != *a2)
    {
      v30 = 0;
      v31 = 0;
      v32 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::axpby_params>(*(_QWORD *)(v33 + v30), (uint64_t)&v29[v31], 0);
        ++v32;
        v29 = *a2;
        v31 += 56;
        v30 += 16;
      }
      while (v32 < 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
    }
    v35 = (void **)&v33;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v35);
  }
}

{
  _QWORD *v4;
  char *v5;
  int64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v14, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v15 - v14;
    if (v15 != v14)
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 4))
      {
        bzero(v5, v15 - v14);
        v5 += v6;
        a2[1] = v5;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (v8 >> 3 > v7)
          v7 = v8 >> 3;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
          v9 = 0xFFFFFFFFFFFFFFFLL;
        else
          v9 = v7;
        if (v9 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v10 = (char *)operator new(16 * v9);
        bzero(v10, v6);
        *a2 = v10;
        a2[1] = &v10[v6];
        a2[2] = &v10[16 * v9];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v10[v6];
        }
      }
    }
    v11 = *a2;
    if (v5 != *a2)
    {
      v12 = 0;
      v13 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::fused_kernel_parameters>(*(_QWORD *)(v14 + v12), &v11[v12], 0);
        ++v13;
        v11 = *a2;
        v12 += 16;
      }
      while (v13 < (a2[1] - *a2) >> 4);
    }
    v16 = (void **)&v14;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v16);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v18, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v19 - v18;
    if (v19 == v18)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0xAAAAAAAAAAAAAAABLL * ((a2[2] - v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        v12 = &v5[12 * v7];
        do
        {
          *(_DWORD *)v5 = 897988541;
          *(_QWORD *)(v5 + 4) = 0x200000003;
          v5 += 12;
        }
        while (v5 != v12);
        a2[1] = v12;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x5555555555555556 * ((a2[2] - v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0xAAAAAAAAAAAAAAALL)
          v10 = 0x1555555555555555;
        else
          v10 = v9;
        if (v10 > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(12 * v10);
        v12 = &v11[12 * v7];
        v13 = v11;
        do
        {
          *(_DWORD *)v13 = 897988541;
          *(_QWORD *)(v13 + 4) = 0x200000003;
          v13 += 12;
        }
        while (v13 != v12);
        *a2 = v11;
        a2[1] = v12;
        a2[2] = &v11[12 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = a2[1];
        }
      }
    }
    v14 = *a2;
    if (v12 != *a2)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::l2_norm_params>(*(_QWORD *)(v18 + v15), (uint64_t)&v14[v16], 0);
        ++v17;
        v14 = *a2;
        v16 += 12;
        v15 += 16;
      }
      while (v17 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2));
    }
    v20 = (void **)&v18;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v15, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v16 - v15;
    if (v16 != v15)
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 3))
      {
        bzero(v5, v6 >> 1);
        v5 += v6 >> 1;
        a2[1] = v5;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (v8 >> 2 > v7)
          v7 = v8 >> 2;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
          v9 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v9 = v7;
        if (v9 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v10 = (char *)operator new(8 * v9);
        bzero(v10, v6 >> 1);
        *a2 = v10;
        a2[1] = &v10[v6 >> 1];
        a2[2] = &v10[8 * v9];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v10[v6 >> 1];
        }
      }
    }
    v11 = *a2;
    if (v5 != *a2)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::bias_params>(*(_QWORD *)(v15 + v12), (uint64_t)&v11[v13], 0);
        ++v14;
        v11 = *a2;
        v13 += 8;
        v12 += 16;
      }
      while (v14 < (a2[1] - *a2) >> 3);
    }
    v17 = (void **)&v15;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v17);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v18, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v19 - v18;
    if (v19 == v18)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0x86BCA1AF286BCA1BLL * ((a2[2] - v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        v12 = &v5[76 * v7];
        do
        {
          *((_QWORD *)v5 + 1) = 0;
          *((_QWORD *)v5 + 2) = 0;
          *(_QWORD *)v5 = 0;
          *(_QWORD *)(v5 + 12) = 0x3F6666663727C5ACLL;
          *(_OWORD *)(v5 + 24) = 0uLL;
          *(_OWORD *)(v5 + 40) = 0uLL;
          *((_DWORD *)v5 + 15) = 0;
          *((_DWORD *)v5 + 16) = 0;
          *((_DWORD *)v5 + 14) = 1065353216;
          *(_QWORD *)(v5 + 68) = 0x200000000;
          v5 += 76;
        }
        while (v5 != v12);
        a2[1] = v12;
      }
      else
      {
        if ((unint64_t)v6 >= 0x35E50D79435E50D1)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0xD79435E50D79436 * ((a2[2] - v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x1AF286BCA1AF286)
          v10 = 0x35E50D79435E50DLL;
        else
          v10 = v9;
        if (v10 > 0x35E50D79435E50DLL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(76 * v10);
        v12 = &v11[76 * v7];
        v13 = v11;
        do
        {
          *((_QWORD *)v13 + 1) = 0;
          *((_QWORD *)v13 + 2) = 0;
          *(_QWORD *)v13 = 0;
          *(_QWORD *)(v13 + 12) = 0x3F6666663727C5ACLL;
          *(_OWORD *)(v13 + 24) = 0uLL;
          *(_OWORD *)(v13 + 40) = 0uLL;
          *((_DWORD *)v13 + 15) = 0;
          *((_DWORD *)v13 + 16) = 0;
          *((_DWORD *)v13 + 14) = 1065353216;
          *(_QWORD *)(v13 + 68) = 0x200000000;
          v13 += 76;
        }
        while (v13 != v12);
        *a2 = v11;
        a2[1] = v12;
        a2[2] = &v11[76 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = a2[1];
        }
      }
    }
    v14 = *a2;
    if (v12 != *a2)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::batchnorm_params>(*(_QWORD *)(v18 + v15), (uint64_t)&v14[v16], 0);
        ++v17;
        v14 = *a2;
        v16 += 76;
        v15 += 16;
      }
      while (v17 < 0x86BCA1AF286BCA1BLL * ((a2[1] - *a2) >> 2));
    }
    v20 = (void **)&v18;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v17, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v18 - v17;
    if (v18 == v17)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 4))
      {
        v12 = &v5[16 * v7];
        do
        {
          *(_DWORD *)v5 = 1056964608;
          *(_QWORD *)(v5 + 4) = 1993;
          *((_DWORD *)v5 + 3) = 0;
          v5 += 16;
        }
        while (v5 != v12);
        a2[1] = v12;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = v8 >> 3;
        if (v8 >> 3 <= v7)
          v9 = v7;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(16 * v10);
        v12 = &v11[16 * v7];
        v13 = v11;
        do
        {
          *(_DWORD *)v13 = 1056964608;
          *(_QWORD *)(v13 + 4) = 1993;
          *((_DWORD *)v13 + 3) = 0;
          v13 += 16;
        }
        while (v13 != v12);
        *a2 = v11;
        a2[1] = v12;
        a2[2] = &v11[16 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = a2[1];
        }
      }
    }
    v14 = *a2;
    if (v12 != *a2)
    {
      v15 = 0;
      v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::dropout_params>(*(_QWORD *)(v17 + v15), (uint64_t)&v14[v15], 0);
        ++v16;
        v14 = *a2;
        v15 += 16;
      }
      while (v16 < (a2[1] - *a2) >> 4);
    }
    v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v15, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v16 - v15;
    if (v16 != v15)
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 5))
      {
        bzero(v5, 2 * v6);
        v5 += 2 * v6;
        a2[1] = v5;
      }
      else
      {
        if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF1)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (v8 >> 4 > v7)
          v7 = v8 >> 4;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
          v9 = 0x7FFFFFFFFFFFFFFLL;
        else
          v9 = v7;
        if (v9 >> 59)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v10 = (char *)operator new(32 * v9);
        bzero(v10, 2 * v6);
        *a2 = v10;
        a2[1] = &v10[2 * v6];
        a2[2] = &v10[32 * v9];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v10[2 * v6];
        }
      }
    }
    v11 = *a2;
    if (v5 != *a2)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::context_transfer_params>(*(_QWORD *)(v15 + v12), &v11[v13], 0);
        ++v14;
        v11 = *a2;
        v13 += 32;
        v12 += 16;
      }
      while (v14 < (a2[1] - *a2) >> 5);
    }
    v17 = (void **)&v15;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v17);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v17, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v18 - v17;
    if (v18 != v17)
    {
      v7 = v6 >> 4;
      v8 = 0xAAAAAAAAAAAAAAABLL * ((a2[2] - v5) >> 4);
      if (v8 >= v6 >> 4)
      {
        bzero(v5, 48 * ((48 * v7 - 48) / 0x30) + 48);
        v5 += 48 * ((48 * v7 - 48) / 0x30) + 48;
        a2[1] = v5;
      }
      else
      {
        if ((unint64_t)v6 >= 0x5555555555555551)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x5555555555555556 * ((a2[2] - v5) >> 4);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x2AAAAAAAAAAAAAALL)
          v10 = 0x555555555555555;
        else
          v10 = v9;
        if (v10 > 0x555555555555555)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(48 * v10);
        v12 = 48 * ((48 * v7 - 48) / 0x30) + 48;
        bzero(v11, v12);
        *a2 = v11;
        a2[1] = &v11[v12];
        a2[2] = &v11[48 * v10];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v11[v12];
        }
      }
    }
    v13 = *a2;
    if (v5 != *a2)
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::reshape_like_params>(*(_QWORD *)(v17 + v14), (uint64_t)&v13[v15], 0);
        ++v16;
        v13 = *a2;
        v15 += 48;
        v14 += 16;
      }
      while (v16 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4));
    }
    v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v17, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v18 - v17;
    if (v18 != v17)
    {
      v7 = v6 >> 4;
      v8 = 0xCCCCCCCCCCCCCCCDLL * ((a2[2] - v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        memset_pattern16(v5, &xmmword_191A93A60, 20 * ((20 * v7 - 20) / 0x14) + 20);
        v5 += 20 * ((20 * v7 - 20) / 0x14) + 20;
        a2[1] = v5;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x999999999999999ALL * ((a2[2] - v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x666666666666666)
          v10 = 0xCCCCCCCCCCCCCCCLL;
        else
          v10 = v9;
        if (v10 > 0xCCCCCCCCCCCCCCCLL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(20 * v10);
        v12 = 20 * ((20 * v7 - 20) / 0x14) + 20;
        memset_pattern16(v11, &xmmword_191A93A60, v12);
        *a2 = v11;
        a2[1] = &v11[v12];
        a2[2] = &v11[20 * v10];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v11[v12];
        }
      }
    }
    v13 = *a2;
    if (v5 != *a2)
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::tile_params_t>(*(_QWORD *)(v17 + v14), &v13[v15], 0);
        ++v16;
        v13 = *a2;
        v15 += 20;
        v14 += 16;
      }
      while (v16 < 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 2));
    }
    v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v18;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v24, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v25 - v24;
    if (v25 == v24)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0xCCCCCCCCCCCCCCCDLL * ((a2[2] - v5) >> 4);
      if (v8 >= v6 >> 4)
      {
        v12 = &v5[80 * v7];
        __asm { FMOV            V1.2S, #1.0 }
        do
        {
          *(_DWORD *)v5 = 1065353216;
          *(_QWORD *)(v5 + 20) = 0;
          *(_QWORD *)(v5 + 12) = 0;
          *((_DWORD *)v5 + 7) = 0;
          *(_QWORD *)(v5 + 4) = 0x100000000;
          *((_DWORD *)v5 + 18) = 0;
          *((_QWORD *)v5 + 7) = 0;
          *((_QWORD *)v5 + 8) = 0;
          *((_QWORD *)v5 + 4) = 0;
          *((_QWORD *)v5 + 5) = 0;
          *((_QWORD *)v5 + 6) = _D1;
          v5 += 80;
        }
        while (v5 != v12);
        a2[1] = v12;
      }
      else
      {
        if ((unint64_t)v6 >= 0x3333333333333331)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x999999999999999ALL * ((a2[2] - v5) >> 4);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x199999999999999)
          v10 = 0x333333333333333;
        else
          v10 = v9;
        if (v10 > 0x333333333333333)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(80 * v10);
        v12 = &v11[80 * v7];
        __asm { FMOV            V1.2S, #1.0 }
        v18 = v11;
        do
        {
          *(_DWORD *)v18 = 1065353216;
          *(_QWORD *)(v18 + 20) = 0;
          *(_QWORD *)(v18 + 12) = 0;
          *((_DWORD *)v18 + 7) = 0;
          *(_QWORD *)(v18 + 4) = 0x100000000;
          *((_DWORD *)v18 + 18) = 0;
          *((_QWORD *)v18 + 7) = 0;
          *((_QWORD *)v18 + 8) = 0;
          *((_QWORD *)v18 + 4) = 0;
          *((_QWORD *)v18 + 5) = 0;
          *((_QWORD *)v18 + 6) = _D1;
          v18 += 80;
        }
        while (v18 != v12);
        *a2 = v11;
        a2[1] = v12;
        a2[2] = &v11[80 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = a2[1];
        }
      }
    }
    v20 = *a2;
    if (v12 != *a2)
    {
      v21 = 0;
      v22 = 0;
      v23 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::vimage2espresso_param>(*(_QWORD *)(v24 + v21), (uint64_t)&v20[v22], 0);
        ++v23;
        v20 = *a2;
        v22 += 80;
        v21 += 16;
      }
      while (v23 < 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 4));
    }
    v26 = (void **)&v24;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v26);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v17, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v18 - v17;
    if (v18 != v17)
    {
      v7 = v6 >> 4;
      v8 = 0x86BCA1AF286BCA1BLL * ((a2[2] - v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        bzero(v5, 76 * ((76 * v7 - 76) / 0x4C) + 76);
        v5 += 76 * ((76 * v7 - 76) / 0x4C) + 76;
        a2[1] = v5;
      }
      else
      {
        if ((unint64_t)v6 >= 0x35E50D79435E50D1)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0xD79435E50D79436 * ((a2[2] - v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x1AF286BCA1AF286)
          v10 = 0x35E50D79435E50DLL;
        else
          v10 = v9;
        if (v10 > 0x35E50D79435E50DLL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(76 * v10);
        v12 = 76 * ((76 * v7 - 76) / 0x4C) + 76;
        bzero(v11, v12);
        *a2 = v11;
        a2[1] = &v11[v12];
        a2[2] = &v11[76 * v10];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v11[v12];
        }
      }
    }
    v13 = *a2;
    if (v5 != *a2)
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::general_padding_params>(*(_QWORD *)(v17 + v14), (uint64_t)&v13[v15], 0);
        ++v16;
        v13 = *a2;
        v15 += 76;
        v14 += 16;
      }
      while (v16 < 0x86BCA1AF286BCA1BLL * ((a2[1] - *a2) >> 2));
    }
    v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v15, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v16 - v15;
    if (v16 != v15)
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 3))
      {
        bzero(v5, v6 >> 1);
        v5 += v6 >> 1;
        a2[1] = v5;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (v8 >> 2 > v7)
          v7 = v8 >> 2;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
          v9 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v9 = v7;
        if (v9 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v10 = (char *)operator new(8 * v9);
        bzero(v10, v6 >> 1);
        *a2 = v10;
        a2[1] = &v10[v6 >> 1];
        a2[2] = &v10[8 * v9];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v10[v6 >> 1];
        }
      }
    }
    v11 = *a2;
    if (v5 != *a2)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::flatten_params>(*(_QWORD *)(v15 + v12), &v11[v13], 0);
        ++v14;
        v11 = *a2;
        v13 += 8;
        v12 += 16;
      }
      while (v14 < (a2[1] - *a2) >> 3);
    }
    v17 = (void **)&v15;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v17);
  }
}

{
  _QWORD *v4;
  char *v5;
  int64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v14, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v15 - v14;
    if (v15 != v14)
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 4))
      {
        bzero(v5, v15 - v14);
        v5 += v6;
        a2[1] = v5;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (v8 >> 3 > v7)
          v7 = v8 >> 3;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
          v9 = 0xFFFFFFFFFFFFFFFLL;
        else
          v9 = v7;
        if (v9 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v10 = (char *)operator new(16 * v9);
        bzero(v10, v6);
        *a2 = v10;
        a2[1] = &v10[v6];
        a2[2] = &v10[16 * v9];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v10[v6];
        }
      }
    }
    v11 = *a2;
    if (v5 != *a2)
    {
      v12 = 0;
      v13 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::crop_params>(*(_QWORD *)(v14 + v12), &v11[v12], 0);
        ++v13;
        v11 = *a2;
        v12 += 16;
      }
      while (v13 < (a2[1] - *a2) >> 4);
    }
    v16 = (void **)&v14;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v16);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v17, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v18 - v17;
    if (v18 != v17)
    {
      v7 = v6 >> 4;
      v8 = 0xCCCCCCCCCCCCCCCDLL * ((a2[2] - v5) >> 3);
      if (v8 >= v6 >> 4)
      {
        bzero(v5, 40 * ((40 * v7 - 40) / 0x28) + 40);
        v5 += 40 * ((40 * v7 - 40) / 0x28) + 40;
        a2[1] = v5;
      }
      else
      {
        if ((unint64_t)v6 >= 0x6666666666666661)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x999999999999999ALL * ((a2[2] - v5) >> 3);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x333333333333333)
          v10 = 0x666666666666666;
        else
          v10 = v9;
        if (v10 > 0x666666666666666)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(40 * v10);
        v12 = 40 * ((40 * v7 - 40) / 0x28) + 40;
        bzero(v11, v12);
        *a2 = v11;
        a2[1] = &v11[v12];
        a2[2] = &v11[40 * v10];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v11[v12];
        }
      }
    }
    v13 = *a2;
    if (v5 != *a2)
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::space_to_batch_params_t>(*(_QWORD *)(v17 + v14), (uint64_t)&v13[v15], 0);
        ++v16;
        v13 = *a2;
        v15 += 40;
        v14 += 16;
      }
      while (v16 < 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3));
    }
    v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v21, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v22 - v21;
    if (v22 == v21)
    {
      v13 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0x8E38E38E38E38E39 * ((a2[2] - v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        v13 = &v5[36 * v7];
        v15 = 36 * v7;
        v16 = v5 + 24;
        do
        {
          *((_DWORD *)v16 + 2) = 0;
          *(_QWORD *)v16 = 0;
          *((_QWORD *)v16 - 3) = -1;
          *((_QWORD *)v16 - 2) = -1;
          *((_QWORD *)v16 - 1) = 0xFFFFFFFF00000001;
          v16 += 36;
          v15 -= 36;
        }
        while (v15);
        a2[1] = v13;
      }
      else
      {
        if ((unint64_t)v6 >= 0x71C71C71C71C71C1)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x1C71C71C71C71C72 * ((a2[2] - v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x38E38E38E38E38ELL)
          v10 = 0x71C71C71C71C71CLL;
        else
          v10 = v9;
        if (v10 > 0x71C71C71C71C71CLL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(36 * v10);
        v12 = 0;
        v13 = &v11[36 * v7];
        do
        {
          v14 = &v11[v12];
          *((_DWORD *)v14 + 8) = 0;
          *((_QWORD *)v14 + 3) = 0;
          *(_QWORD *)v14 = -1;
          *((_QWORD *)v14 + 1) = -1;
          v12 += 36;
          *((_QWORD *)v14 + 2) = 0xFFFFFFFF00000001;
        }
        while (36 * v7 != v12);
        *a2 = v11;
        a2[1] = v13;
        a2[2] = &v11[36 * v10];
        if (v5)
        {
          operator delete(v5);
          v13 = a2[1];
        }
      }
    }
    v17 = *a2;
    if (v13 != *a2)
    {
      v18 = 0;
      v19 = 0;
      v20 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::broadcast_params_t>(*(_QWORD *)(v21 + v18), (uint64_t)&v17[v19], 0);
        ++v20;
        v17 = *a2;
        v19 += 36;
        v18 += 16;
      }
      while (v20 < 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 2));
    }
    v23 = (void **)&v21;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v23);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v15, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v16 - v15;
    if (v16 != v15)
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 3))
      {
        bzero(v5, v6 >> 1);
        v5 += v6 >> 1;
        a2[1] = v5;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (v8 >> 2 > v7)
          v7 = v8 >> 2;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
          v9 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v9 = v7;
        if (v9 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v10 = (char *)operator new(8 * v9);
        bzero(v10, v6 >> 1);
        *a2 = v10;
        a2[1] = &v10[v6 >> 1];
        a2[2] = &v10[8 * v9];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v10[v6 >> 1];
        }
      }
    }
    v11 = *a2;
    if (v5 != *a2)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::cast_params_t>(*(_QWORD *)(v15 + v12), &v11[v13], 0);
        ++v14;
        v11 = *a2;
        v13 += 8;
        v12 += 16;
      }
      while (v14 < (a2[1] - *a2) >> 3);
    }
    v17 = (void **)&v15;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v17);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v12, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v13 - v12;
    if (v13 != v12)
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v8 >= v6 >> 4)
      {
        a2[1] = &v5[v7];
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 2 * v8;
        if (2 * v8 <= v7)
          v9 = v7;
        if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
          v10 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        v11 = (char *)operator new(v10);
        *a2 = v11;
        a2[1] = &v11[v7];
        a2[2] = &v11[v10];
        if (v5)
          operator delete(v5);
      }
    }
    v14 = (void **)&v12;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v14);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v15, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v16 - v15;
    if (v16 != v15)
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 3))
      {
        memset_pattern16(v5, &unk_191A93A70, v6 >> 1);
        v5 += v6 >> 1;
        a2[1] = v5;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (v8 >> 2 > v7)
          v7 = v8 >> 2;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
          v9 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v9 = v7;
        if (v9 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v10 = (char *)operator new(8 * v9);
        memset_pattern16(v10, &unk_191A93A70, v6 >> 1);
        *a2 = v10;
        a2[1] = &v10[v6 >> 1];
        a2[2] = &v10[8 * v9];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v10[v6 >> 1];
        }
      }
    }
    v11 = *a2;
    if (v5 != *a2)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::dynamic_quantize_params_t>(*(_QWORD *)(v15 + v12), &v11[v13], 0);
        ++v14;
        v11 = *a2;
        v13 += 8;
        v12 += 16;
      }
      while (v14 < (a2[1] - *a2) >> 3);
    }
    v17 = (void **)&v15;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v17);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v15, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v16 - v15;
    if (v16 != v15)
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 2))
      {
        memset(v5, 255, v6 >> 2);
        v5 += v6 >> 2;
        a2[1] = v5;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (v8 >> 1 > v7)
          v7 = v8 >> 1;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
          v9 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v9 = v7;
        if (v9 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v10 = (char *)operator new(4 * v9);
        memset(v10, 255, v6 >> 2);
        *a2 = v10;
        a2[1] = &v10[v6 >> 2];
        a2[2] = &v10[4 * v9];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v10[v6 >> 2];
        }
      }
    }
    v11 = *a2;
    if (v5 != *a2)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::cf_jump_params_t>(*(_QWORD *)(v15 + v12), &v11[v13], 0);
        ++v14;
        v11 = *a2;
        v13 += 4;
        v12 += 16;
      }
      while (v14 < (a2[1] - *a2) >> 2);
    }
    v17 = (void **)&v15;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v17);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v18, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v19 - v18;
    if (v19 == v18)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 5))
      {
        v12 = &v5[32 * v7];
        do
        {
          *(_QWORD *)v5 = 0xFFFFFFFFLL;
          *((_DWORD *)v5 + 2) = 0;
          *(_QWORD *)(v5 + 12) = 1065353216;
          *((_DWORD *)v5 + 5) = 0;
          *((_DWORD *)v5 + 6) = 0;
          *((_DWORD *)v5 + 7) = 1065353216;
          v5 += 32;
        }
        while (v5 != v12);
        a2[1] = v12;
      }
      else
      {
        if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF1)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = v8 >> 4;
        if (v8 >> 4 <= v7)
          v9 = v7;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
          v10 = 0x7FFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10 >> 59)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(32 * v10);
        v12 = &v11[32 * v7];
        v13 = v11;
        do
        {
          *(_QWORD *)v13 = 0xFFFFFFFFLL;
          *((_DWORD *)v13 + 2) = 0;
          *(_QWORD *)(v13 + 12) = 1065353216;
          *((_DWORD *)v13 + 5) = 0;
          *((_DWORD *)v13 + 6) = 0;
          *((_DWORD *)v13 + 7) = 1065353216;
          v13 += 32;
        }
        while (v13 != v12);
        *a2 = v11;
        a2[1] = v12;
        a2[2] = &v11[32 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = a2[1];
        }
      }
    }
    v14 = *a2;
    if (v12 != *a2)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::dynamic_dequantize_params_t>(*(_QWORD *)(v18 + v15), (uint64_t)&v14[v16], 0);
        ++v17;
        v14 = *a2;
        v16 += 32;
        v15 += 16;
      }
      while (v17 < (a2[1] - *a2) >> 5);
    }
    v20 = (void **)&v18;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v12, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v13 - v12;
    if (v13 != v12)
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v8 >= v6 >> 4)
      {
        a2[1] = &v5[v7];
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 2 * v8;
        if (2 * v8 <= v7)
          v9 = v7;
        if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
          v10 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        v11 = (char *)operator new(v10);
        *a2 = v11;
        a2[1] = &v11[v7];
        a2[2] = &v11[v10];
        if (v5)
          operator delete(v5);
      }
    }
    v14 = (void **)&v12;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v14);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v15, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v16 - v15;
    if (v16 != v15)
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 3))
      {
        memset_pattern16(v5, &unk_191A93A70, v6 >> 1);
        v5 += v6 >> 1;
        a2[1] = v5;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (v8 >> 2 > v7)
          v7 = v8 >> 2;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
          v9 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v9 = v7;
        if (v9 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v10 = (char *)operator new(8 * v9);
        memset_pattern16(v10, &unk_191A93A70, v6 >> 1);
        *a2 = v10;
        a2[1] = &v10[v6 >> 1];
        a2[2] = &v10[8 * v9];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v10[v6 >> 1];
        }
      }
    }
    v11 = *a2;
    if (v5 != *a2)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::get_shape_params_t>(*(_QWORD *)(v15 + v12), &v11[v13], 0);
        ++v14;
        v11 = *a2;
        v13 += 8;
        v12 += 16;
      }
      while (v14 < (a2[1] - *a2) >> 3);
    }
    v17 = (void **)&v15;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v17);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v20, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v21 - v20;
    if (v21 == v20)
    {
      v13 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 4))
      {
        v15 = 16 * v7;
        v16 = v5 + 14;
        v13 = &v5[16 * v7];
        do
        {
          *(_QWORD *)(v16 - 10) = 0;
          *(_DWORD *)(v16 - 2) = 0;
          *(_DWORD *)(v16 - 14) = 5;
          *(_DWORD *)(v16 - 6) = -1;
          *(_WORD *)(v16 - 1) = 257;
          v16 += 16;
          v15 -= 16;
        }
        while (v15);
        a2[1] = v13;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = v8 >> 3;
        if (v8 >> 3 <= v7)
          v9 = v7;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(16 * v10);
        v12 = 0;
        v13 = &v11[16 * v7];
        do
        {
          v14 = &v11[v12];
          *(_QWORD *)(v14 + 4) = 0;
          *(_DWORD *)v14 = 5;
          *((_QWORD *)v14 + 1) = 0xFFFFFFFFLL;
          v12 += 16;
          *(_WORD *)(v14 + 13) = 257;
        }
        while (16 * v7 != v12);
        *a2 = v11;
        a2[1] = v13;
        a2[2] = &v11[16 * v10];
        if (v5)
        {
          operator delete(v5);
          v13 = a2[1];
        }
      }
    }
    v17 = *a2;
    if (v13 != *a2)
    {
      v18 = 0;
      v19 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::topk_params_t>(*(_QWORD *)(v20 + v18), (uint64_t)&v17[v18], 0);
        ++v19;
        v17 = *a2;
        v18 += 16;
      }
      while (v19 < (a2[1] - *a2) >> 4);
    }
    v22 = (void **)&v20;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v22);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v17, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v18 - v17;
    if (v18 != v17)
    {
      v7 = v6 >> 4;
      v8 = 0xCCCCCCCCCCCCCCCDLL * ((a2[2] - v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        memset_pattern16(v5, &unk_191A93A80, 20 * ((20 * v7 - 20) / 0x14) + 20);
        v5 += 20 * ((20 * v7 - 20) / 0x14) + 20;
        a2[1] = v5;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x999999999999999ALL * ((a2[2] - v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x666666666666666)
          v10 = 0xCCCCCCCCCCCCCCCLL;
        else
          v10 = v9;
        if (v10 > 0xCCCCCCCCCCCCCCCLL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(20 * v10);
        v12 = 20 * ((20 * v7 - 20) / 0x14) + 20;
        memset_pattern16(v11, &unk_191A93A80, v12);
        *a2 = v11;
        a2[1] = &v11[v12];
        a2[2] = &v11[20 * v10];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v11[v12];
        }
      }
    }
    v13 = *a2;
    if (v5 != *a2)
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::gather_params_t>(*(_QWORD *)(v17 + v14), &v13[v15], 0);
        ++v16;
        v13 = *a2;
        v15 += 20;
        v14 += 16;
      }
      while (v16 < 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 2));
    }
    v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v15, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v16 - v15;
    if (v16 != v15)
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 3))
      {
        memset_pattern16(v5, &unk_191A93A90, v6 >> 1);
        v5 += v6 >> 1;
        a2[1] = v5;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (v8 >> 2 > v7)
          v7 = v8 >> 2;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
          v9 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v9 = v7;
        if (v9 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v10 = (char *)operator new(8 * v9);
        memset_pattern16(v10, &unk_191A93A90, v6 >> 1);
        *a2 = v10;
        a2[1] = &v10[v6 >> 1];
        a2[2] = &v10[8 * v9];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v10[v6 >> 1];
        }
      }
    }
    v11 = *a2;
    if (v5 != *a2)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::general_concat_params_t>(*(_QWORD *)(v15 + v12), (uint64_t)&v11[v13], 0);
        ++v14;
        v11 = *a2;
        v13 += 8;
        v12 += 16;
      }
      while (v14 < (a2[1] - *a2) >> 3);
    }
    v17 = (void **)&v15;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v17);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v15, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v16 - v15;
    if (v16 != v15)
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 3))
      {
        memset_pattern16(v5, &xmmword_191A93740, v6 >> 1);
        v5 += v6 >> 1;
        a2[1] = v5;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (v8 >> 2 > v7)
          v7 = v8 >> 2;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
          v9 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v9 = v7;
        if (v9 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v10 = (char *)operator new(8 * v9);
        memset_pattern16(v10, &xmmword_191A93740, v6 >> 1);
        *a2 = v10;
        a2[1] = &v10[v6 >> 1];
        a2[2] = &v10[8 * v9];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v10[v6 >> 1];
        }
      }
    }
    v11 = *a2;
    if (v5 != *a2)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::alloc_params_t>(*(_QWORD *)(v15 + v12), (uint64_t)&v11[v13], 0);
        ++v14;
        v11 = *a2;
        v13 += 8;
        v12 += 16;
      }
      while (v14 < (a2[1] - *a2) >> 3);
    }
    v17 = (void **)&v15;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v17);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v12, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v13 - v12;
    if (v13 != v12)
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v8 >= v6 >> 4)
      {
        a2[1] = &v5[v7];
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 2 * v8;
        if (2 * v8 <= v7)
          v9 = v7;
        if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
          v10 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        v11 = (char *)operator new(v10);
        *a2 = v11;
        a2[1] = &v11[v7];
        a2[2] = &v11[v10];
        if (v5)
          operator delete(v5);
      }
    }
    v14 = (void **)&v12;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v14);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v15, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v16 - v15;
    if (v16 != v15)
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 2))
      {
        bzero(v5, v6 >> 2);
        v5 += v6 >> 2;
        a2[1] = v5;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (v8 >> 1 > v7)
          v7 = v8 >> 1;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
          v9 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v9 = v7;
        if (v9 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v10 = (char *)operator new(4 * v9);
        bzero(v10, v6 >> 2);
        *a2 = v10;
        a2[1] = &v10[v6 >> 2];
        a2[2] = &v10[4 * v9];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v10[v6 >> 2];
        }
      }
    }
    v11 = *a2;
    if (v5 != *a2)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::cf_loop_params_t>(*(_QWORD *)(v15 + v12), &v11[v13], 0);
        ++v14;
        v11 = *a2;
        v13 += 4;
        v12 += 16;
      }
      while (v14 < (a2[1] - *a2) >> 2);
    }
    v17 = (void **)&v15;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v17);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v15, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v16 - v15;
    if (v16 != v15)
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 3))
      {
        memset_pattern16(v5, &xmmword_191A93A60, v6 >> 1);
        v5 += v6 >> 1;
        a2[1] = v5;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (v8 >> 2 > v7)
          v7 = v8 >> 2;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
          v9 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v9 = v7;
        if (v9 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v10 = (char *)operator new(8 * v9);
        memset_pattern16(v10, &xmmword_191A93A60, v6 >> 1);
        *a2 = v10;
        a2[1] = &v10[v6 >> 1];
        a2[2] = &v10[8 * v9];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v10[v6 >> 1];
        }
      }
    }
    v11 = *a2;
    if (v5 != *a2)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::cf_for_params_t>(*(_QWORD *)(v15 + v12), &v11[v13], 0);
        ++v14;
        v11 = *a2;
        v13 += 8;
        v12 += 16;
      }
      while (v14 < (a2[1] - *a2) >> 3);
    }
    v17 = (void **)&v15;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v17);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v12, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v13 - v12;
    if (v13 != v12)
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v8 >= v6 >> 4)
      {
        a2[1] = &v5[v7];
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 2 * v8;
        if (2 * v8 <= v7)
          v9 = v7;
        if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
          v10 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        v11 = (char *)operator new(v10);
        *a2 = v11;
        a2[1] = &v11[v7];
        a2[2] = &v11[v10];
        if (v5)
          operator delete(v5);
      }
    }
    v14 = (void **)&v12;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v14);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v12, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v13 - v12;
    if (v13 != v12)
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v8 >= v6 >> 4)
      {
        a2[1] = &v5[v7];
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 2 * v8;
        if (2 * v8 <= v7)
          v9 = v7;
        if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
          v10 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        v11 = (char *)operator new(v10);
        *a2 = v11;
        a2[1] = &v11[v7];
        a2[2] = &v11[v10];
        if (v5)
          operator delete(v5);
      }
    }
    v14 = (void **)&v12;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v14);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v15, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v16 - v15;
    if (v16 != v15)
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 2))
      {
        bzero(v5, v6 >> 2);
        v5 += v6 >> 2;
        a2[1] = v5;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (v8 >> 1 > v7)
          v7 = v8 >> 1;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
          v9 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v9 = v7;
        if (v9 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v10 = (char *)operator new(4 * v9);
        bzero(v10, v6 >> 2);
        *a2 = v10;
        a2[1] = &v10[v6 >> 2];
        a2[2] = &v10[4 * v9];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v10[v6 >> 2];
        }
      }
    }
    v11 = *a2;
    if (v5 != *a2)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::copy_params_t>(*(_QWORD *)(v15 + v12), &v11[v13], 0);
        ++v14;
        v11 = *a2;
        v13 += 4;
        v12 += 16;
      }
      while (v14 < (a2[1] - *a2) >> 2);
    }
    v17 = (void **)&v15;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v17);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v17, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v18 - v17;
    if (v18 != v17)
    {
      v7 = v6 >> 4;
      v8 = 0xCCCCCCCCCCCCCCCDLL * ((a2[2] - v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        bzero(v5, 20 * ((20 * v7 - 20) / 0x14) + 20);
        v5 += 20 * ((20 * v7 - 20) / 0x14) + 20;
        a2[1] = v5;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x999999999999999ALL * ((a2[2] - v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x666666666666666)
          v10 = 0xCCCCCCCCCCCCCCCLL;
        else
          v10 = v9;
        if (v10 > 0xCCCCCCCCCCCCCCCLL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(20 * v10);
        v12 = 20 * ((20 * v7 - 20) / 0x14) + 20;
        bzero(v11, v12);
        *a2 = v11;
        a2[1] = &v11[v12];
        a2[2] = &v11[20 * v10];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v11[v12];
        }
      }
    }
    v13 = *a2;
    if (v5 != *a2)
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::matrix_band_part_params_t>(*(_QWORD *)(v17 + v14), (uint64_t)&v13[v15], 0);
        ++v16;
        v13 = *a2;
        v15 += 20;
        v14 += 16;
      }
      while (v16 < 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 2));
    }
    v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v18, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v19 - v18;
    if (v19 == v18)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0x8E38E38E38E38E39 * ((a2[2] - v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        v12 = &v5[36 * v7];
        do
        {
          *((_DWORD *)v5 + 8) = 0;
          *(_OWORD *)v5 = 0uLL;
          *((_OWORD *)v5 + 1) = 0uLL;
          *(_QWORD *)(v5 + 20) = 0xFFFFFFFF00000001;
          v5[32] = 1;
          v5 += 36;
        }
        while (v5 != v12);
        a2[1] = v12;
      }
      else
      {
        if ((unint64_t)v6 >= 0x71C71C71C71C71C1)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x1C71C71C71C71C72 * ((a2[2] - v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x38E38E38E38E38ELL)
          v10 = 0x71C71C71C71C71CLL;
        else
          v10 = v9;
        if (v10 > 0x71C71C71C71C71CLL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(36 * v10);
        v12 = &v11[36 * v7];
        v13 = v11;
        do
        {
          *((_DWORD *)v13 + 8) = 0;
          *(_OWORD *)v13 = 0uLL;
          *((_OWORD *)v13 + 1) = 0uLL;
          *(_QWORD *)(v13 + 20) = 0xFFFFFFFF00000001;
          v13[32] = 1;
          v13 += 36;
        }
        while (v13 != v12);
        *a2 = v11;
        a2[1] = v12;
        a2[2] = &v11[36 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = a2[1];
        }
      }
    }
    v14 = *a2;
    if (v12 != *a2)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::fill_params_t>(*(_QWORD *)(v18 + v15), (uint64_t)&v14[v16], 0);
        ++v17;
        v14 = *a2;
        v16 += 36;
        v15 += 16;
      }
      while (v17 < 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 2));
    }
    v20 = (void **)&v18;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v18, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v19 - v18;
    if (v19 == v18)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0xAAAAAAAAAAAAAAABLL * (a2[2] - v5);
      if (v8 >= v6 >> 4)
      {
        v12 = &v5[3 * v7];
        do
        {
          *(_WORD *)v5 = 1;
          v5[2] = 0;
          v5 += 3;
        }
        while (v5 != v12);
        a2[1] = v12;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x5555555555555556 * (a2[2] - v5);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x2AAAAAAAAAAAAAAALL)
          v10 = 0x5555555555555555;
        else
          v10 = v9;
        if (v10 >= 0x5555555555555556)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(3 * v10);
        v12 = &v11[3 * v7];
        v13 = v11;
        do
        {
          *(_WORD *)v13 = 1;
          v13[2] = 0;
          v13 += 3;
        }
        while (v13 != v12);
        *a2 = v11;
        a2[1] = v12;
        a2[2] = &v11[3 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = a2[1];
        }
      }
    }
    v14 = *a2;
    if (v12 != *a2)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::batch_matmul_params_t>(*(_QWORD *)(v18 + v15), &v14[v16], 0);
        ++v17;
        v14 = *a2;
        v16 += 3;
        v15 += 16;
      }
      while (v17 < 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
    }
    v20 = (void **)&v18;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v17, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v18 - v17;
    if (v18 != v17)
    {
      v7 = v6 >> 4;
      v8 = 0xF0B7672A07A44C6BLL * ((a2[2] - v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        bzero(v5, 268 * ((268 * v7 - 268) / 0x10C) + 268);
        v5 += 268 * ((268 * v7 - 268) / 0x10C) + 268;
        a2[1] = v5;
      }
      else
      {
        if ((unint64_t)v6 >= 0xF4898D5F85BB391)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0xE16ECE540F4898D6 * ((a2[2] - v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x7A44C6AFC2DD9CLL)
          v10 = 0xF4898D5F85BB39;
        else
          v10 = v9;
        if (v10 > 0xF4898D5F85BB39)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(268 * v10);
        v12 = 268 * ((268 * v7 - 268) / 0x10C) + 268;
        bzero(v11, v12);
        *a2 = v11;
        a2[1] = &v11[v12];
        a2[2] = &v11[268 * v10];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v11[v12];
        }
      }
    }
    v13 = *a2;
    if (v5 != *a2)
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::tensor_zero_pad_params_t>(*(_QWORD *)(v17 + v14), (uint64_t)&v13[v15], 0);
        ++v16;
        v13 = *a2;
        v15 += 268;
        v14 += 16;
      }
      while (v16 < 0xF0B7672A07A44C6BLL * ((a2[1] - *a2) >> 2));
    }
    v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v17, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v18 - v17;
    if (v18 != v17)
    {
      v7 = v6 >> 4;
      v8 = 0xF0F0F0F0F0F0F0F1 * ((a2[2] - v5) >> 3);
      if (v8 >= v6 >> 4)
      {
        bzero(v5, 136 * ((136 * v7 - 136) / 0x88) + 136);
        v5 += 136 * ((136 * v7 - 136) / 0x88) + 136;
        a2[1] = v5;
      }
      else
      {
        if ((unint64_t)v6 >= 0x1E1E1E1E1E1E1E11)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0xE1E1E1E1E1E1E1E2 * ((a2[2] - v5) >> 3);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0xF0F0F0F0F0F0F0)
          v10 = 0x1E1E1E1E1E1E1E1;
        else
          v10 = v9;
        if (v10 > 0x1E1E1E1E1E1E1E1)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(136 * v10);
        v12 = 136 * ((136 * v7 - 136) / 0x88) + 136;
        bzero(v11, v12);
        *a2 = v11;
        a2[1] = &v11[v12];
        a2[2] = &v11[136 * v10];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v11[v12];
        }
      }
    }
    v13 = *a2;
    if (v5 != *a2)
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::expand_dims_params_t>(*(_QWORD *)(v17 + v14), &v13[v15], 0);
        ++v16;
        v13 = *a2;
        v15 += 136;
        v14 += 16;
      }
      while (v16 < 0xF0F0F0F0F0F0F0F1 * ((a2[1] - *a2) >> 3));
    }
    v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  char *v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v23, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v24 - v23;
    if (v24 == v23)
    {
      v13 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0x6DB6DB6DB6DB6DB7 * ((a2[2] - v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        v16 = 28 * v7;
        v13 = &v5[28 * v7];
        v17 = v5 + 16;
        *(_QWORD *)&v18 = 0x100000001;
        *((_QWORD *)&v18 + 1) = 0x100000001;
        do
        {
          *((_DWORD *)v17 + 2) = 0;
          *((_OWORD *)v17 - 1) = v18;
          *(_QWORD *)v17 = 4294967294;
          v17 += 28;
          v16 -= 28;
        }
        while (v16);
        a2[1] = v13;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0xDB6DB6DB6DB6DB6ELL * ((a2[2] - v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x492492492492492)
          v10 = 0x924924924924924;
        else
          v10 = v9;
        if (v10 > 0x924924924924924)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(28 * v10);
        v12 = 0;
        v13 = &v11[28 * v7];
        *(_QWORD *)&v14 = 0x100000001;
        *((_QWORD *)&v14 + 1) = 0x100000001;
        do
        {
          v15 = &v11[v12];
          *((_DWORD *)v15 + 6) = 0;
          *(_OWORD *)v15 = v14;
          *((_QWORD *)v15 + 2) = 4294967294;
          v12 += 28;
        }
        while (28 * v7 != v12);
        *a2 = v11;
        a2[1] = v13;
        a2[2] = &v11[28 * v10];
        if (v5)
        {
          operator delete(v5);
          v13 = a2[1];
        }
      }
    }
    v19 = *a2;
    if (v13 != *a2)
    {
      v20 = 0;
      v21 = 0;
      v22 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::array_gather_params_t>(*(_QWORD *)(v23 + v20), (uint64_t)&v19[v21], 0);
        ++v22;
        v19 = *a2;
        v21 += 28;
        v20 += 16;
      }
      while (v22 < 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 2));
    }
    v25 = (void **)&v23;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v25);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v15, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v16 - v15;
    if (v16 != v15)
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 3))
      {
        memset_pattern16(v5, &unk_191A93AA0, v6 >> 1);
        v5 += v6 >> 1;
        a2[1] = v5;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (v8 >> 2 > v7)
          v7 = v8 >> 2;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
          v9 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v9 = v7;
        if (v9 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v10 = (char *)operator new(8 * v9);
        memset_pattern16(v10, &unk_191A93AA0, v6 >> 1);
        *a2 = v10;
        a2[1] = &v10[v6 >> 1];
        a2[2] = &v10[8 * v9];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v10[v6 >> 1];
        }
      }
    }
    v11 = *a2;
    if (v5 != *a2)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::multinomial_params_t>(*(_QWORD *)(v15 + v12), &v11[v13], 0);
        ++v14;
        v11 = *a2;
        v13 += 8;
        v12 += 16;
      }
      while (v14 < (a2[1] - *a2) >> 3);
    }
    v17 = (void **)&v15;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v17);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v12, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v13 - v12;
    if (v13 != v12)
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v8 >= v6 >> 4)
      {
        a2[1] = &v5[v7];
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 2 * v8;
        if (2 * v8 <= v7)
          v9 = v7;
        if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
          v10 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        v11 = (char *)operator new(v10);
        *a2 = v11;
        a2[1] = &v11[v7];
        a2[2] = &v11[v10];
        if (v5)
          operator delete(v5);
      }
    }
    v14 = (void **)&v12;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v14);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v21, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v22 - v21;
    if (v22 == v21)
    {
      v13 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0x8E38E38E38E38E39 * ((a2[2] - v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        v13 = &v5[36 * v7];
        v15 = 36 * v7;
        v16 = v5 + 16;
        do
        {
          *((_QWORD *)v16 + 1) = 0;
          *((_QWORD *)v16 - 1) = 0;
          *((_QWORD *)v16 - 2) = 0xFFFFFFFF00000001;
          *(_QWORD *)v16 = 0x2EDBE6FF3F800000;
          *((_DWORD *)v16 + 2) = 1065353216;
          *((_DWORD *)v16 + 4) = 0;
          v16 += 36;
          v15 -= 36;
        }
        while (v15);
        a2[1] = v13;
      }
      else
      {
        if ((unint64_t)v6 >= 0x71C71C71C71C71C1)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x1C71C71C71C71C72 * ((a2[2] - v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x38E38E38E38E38ELL)
          v10 = 0x71C71C71C71C71CLL;
        else
          v10 = v9;
        if (v10 > 0x71C71C71C71C71CLL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(36 * v10);
        v12 = 0;
        v13 = &v11[36 * v7];
        do
        {
          v14 = &v11[v12];
          *((_QWORD *)v14 + 3) = 0;
          *((_QWORD *)v14 + 1) = 0;
          *(_QWORD *)v14 = 0xFFFFFFFF00000001;
          *((_QWORD *)v14 + 2) = 0x2EDBE6FF3F800000;
          *((_DWORD *)v14 + 6) = 1065353216;
          v12 += 36;
          *((_DWORD *)v14 + 8) = 0;
        }
        while (36 * v7 != v12);
        *a2 = v11;
        a2[1] = v13;
        a2[2] = &v11[36 * v10];
        if (v5)
        {
          operator delete(v5);
          v13 = a2[1];
        }
      }
    }
    v17 = *a2;
    if (v13 != *a2)
    {
      v18 = 0;
      v19 = 0;
      v20 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::gumbel_max_params_t>(*(_QWORD *)(v21 + v18), (uint64_t)&v17[v19], 0);
        ++v20;
        v17 = *a2;
        v19 += 36;
        v18 += 16;
      }
      while (v20 < 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 2));
    }
    v23 = (void **)&v21;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v23);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v17, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v18 - v17;
    if (v18 != v17)
    {
      v7 = v6 >> 4;
      v8 = 0xCCCCCCCCCCCCCCCDLL * ((a2[2] - v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        bzero(v5, 20 * ((20 * v7 - 20) / 0x14) + 20);
        v5 += 20 * ((20 * v7 - 20) / 0x14) + 20;
        a2[1] = v5;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x999999999999999ALL * ((a2[2] - v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x666666666666666)
          v10 = 0xCCCCCCCCCCCCCCCLL;
        else
          v10 = v9;
        if (v10 > 0xCCCCCCCCCCCCCCCLL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(20 * v10);
        v12 = 20 * ((20 * v7 - 20) / 0x14) + 20;
        bzero(v11, v12);
        *a2 = v11;
        a2[1] = &v11[v12];
        a2[2] = &v11[20 * v10];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v11[v12];
        }
      }
    }
    v13 = *a2;
    if (v5 != *a2)
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::transplant_params_t>(*(_QWORD *)(v17 + v14), &v13[v15], 0);
        ++v16;
        v13 = *a2;
        v15 += 20;
        v14 += 16;
      }
      while (v16 < 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 2));
    }
    v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v18, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v19 - v18;
    if (v19 == v18)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0x8F5C28F5C28F5C29 * ((a2[2] - v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        v12 = &v5[100 * v7];
        do
        {
          *(_QWORD *)v5 = 0;
          *((_QWORD *)v5 + 1) = 0;
          *((_DWORD *)v5 + 4) = 0;
          *((_DWORD *)v5 + 9) = 1;
          *(_OWORD *)(v5 + 20) = xmmword_191AD0DEC;
          *((_DWORD *)v5 + 14) = 1;
          *(_OWORD *)(v5 + 40) = xmmword_191AD0DEC;
          *(_OWORD *)(v5 + 60) = 0uLL;
          *(_OWORD *)(v5 + 76) = 0uLL;
          *(_QWORD *)(v5 + 92) = 0xFFFFFFFF00000000;
          v5 += 100;
        }
        while (v5 != v12);
        a2[1] = v12;
      }
      else
      {
        if ((unint64_t)v6 >= 0x28F5C28F5C28F5C1)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x1EB851EB851EB852 * ((a2[2] - v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x147AE147AE147AELL)
          v10 = 0x28F5C28F5C28F5CLL;
        else
          v10 = v9;
        if (v10 > 0x28F5C28F5C28F5CLL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(100 * v10);
        v12 = &v11[100 * v7];
        v13 = v11;
        do
        {
          *(_QWORD *)v13 = 0;
          *((_QWORD *)v13 + 1) = 0;
          *((_DWORD *)v13 + 4) = 0;
          *((_DWORD *)v13 + 9) = 1;
          *(_OWORD *)(v13 + 20) = xmmword_191AD0DEC;
          *((_DWORD *)v13 + 14) = 1;
          *(_OWORD *)(v13 + 40) = xmmword_191AD0DEC;
          *(_OWORD *)(v13 + 60) = 0uLL;
          *(_OWORD *)(v13 + 76) = 0uLL;
          *(_QWORD *)(v13 + 92) = 0xFFFFFFFF00000000;
          v13 += 100;
        }
        while (v13 != v12);
        *a2 = v11;
        a2[1] = v12;
        a2[2] = &v11[100 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = a2[1];
        }
      }
    }
    v14 = *a2;
    if (v12 != *a2)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::general_slice_params_t>(*(_QWORD *)(v18 + v15), (uint64_t)&v14[v16], 0);
        ++v17;
        v14 = *a2;
        v16 += 100;
        v15 += 16;
      }
      while (v17 < 0x8F5C28F5C28F5C29 * ((a2[1] - *a2) >> 2));
    }
    v20 = (void **)&v18;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v15, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v16 - v15;
    if (v16 != v15)
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 2))
      {
        bzero(v5, v6 >> 2);
        v5 += v6 >> 2;
        a2[1] = v5;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (v8 >> 1 > v7)
          v7 = v8 >> 1;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
          v9 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v9 = v7;
        if (v9 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v10 = (char *)operator new(4 * v9);
        bzero(v10, v6 >> 2);
        *a2 = v10;
        a2[1] = &v10[v6 >> 2];
        a2[2] = &v10[4 * v9];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v10[v6 >> 2];
        }
      }
    }
    v11 = *a2;
    if (v5 != *a2)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::stack_nd_params_t>(*(_QWORD *)(v15 + v12), &v11[v13], 0);
        ++v14;
        v11 = *a2;
        v13 += 4;
        v12 += 16;
      }
      while (v14 < (a2[1] - *a2) >> 2);
    }
    v17 = (void **)&v15;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v17);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v20, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v21 - v20;
    if (v21 == v20)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0xFC0FC0FC0FC0FC1 * ((a2[2] - v5) >> 3);
      if (v8 >= v6 >> 4)
      {
        v12 = &v5[520 * v7];
        do
        {
          *(_QWORD *)v5 = 0x200000000;
          *(_OWORD *)(v5 + 24) = 0uLL;
          *(_OWORD *)(v5 + 40) = 0uLL;
          *(_OWORD *)(v5 + 56) = 0uLL;
          *(_OWORD *)(v5 + 72) = 0uLL;
          *(_OWORD *)(v5 + 88) = 0uLL;
          *(_OWORD *)(v5 + 104) = 0uLL;
          *(_OWORD *)(v5 + 120) = 0uLL;
          *(_OWORD *)(v5 + 136) = 0uLL;
          *(_OWORD *)(v5 + 152) = 0uLL;
          *(_OWORD *)(v5 + 168) = 0uLL;
          *(_OWORD *)(v5 + 184) = 0uLL;
          *(_OWORD *)(v5 + 200) = 0uLL;
          *(_OWORD *)(v5 + 216) = 0uLL;
          *(_OWORD *)(v5 + 232) = 0uLL;
          *(_OWORD *)(v5 + 248) = 0uLL;
          *(_OWORD *)(v5 + 8) = 0uLL;
          v15 = v5 + 8;
          *(_OWORD *)(v5 + 264) = 0uLL;
          *(_OWORD *)(v5 + 280) = 0uLL;
          *(_OWORD *)(v5 + 296) = 0uLL;
          *(_OWORD *)(v5 + 312) = 0uLL;
          *(_OWORD *)(v5 + 328) = 0uLL;
          *(_OWORD *)(v5 + 344) = 0uLL;
          *(_OWORD *)(v5 + 360) = 0uLL;
          *(_OWORD *)(v5 + 376) = 0uLL;
          *(_OWORD *)(v5 + 392) = 0uLL;
          *(_OWORD *)(v5 + 408) = 0uLL;
          *(_OWORD *)(v5 + 424) = 0uLL;
          *(_OWORD *)(v5 + 440) = 0uLL;
          *(_OWORD *)(v5 + 456) = 0uLL;
          *(_OWORD *)(v5 + 472) = 0uLL;
          v5 += 520;
          *((_OWORD *)v15 + 30) = 0uLL;
          *((_OWORD *)v15 + 31) = 0uLL;
        }
        while (v5 != v12);
        a2[1] = v12;
      }
      else
      {
        if ((unint64_t)v6 >= 0x7E07E07E07E07E1)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x1F81F81F81F81F82 * ((a2[2] - v5) >> 3);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x3F03F03F03F03FLL)
          v10 = 0x7E07E07E07E07ELL;
        else
          v10 = v9;
        if (v10 > 0x7E07E07E07E07ELL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(520 * v10);
        v12 = &v11[520 * v7];
        v13 = v11;
        do
        {
          *(_QWORD *)v13 = 0x200000000;
          *(_OWORD *)(v13 + 24) = 0uLL;
          *(_OWORD *)(v13 + 40) = 0uLL;
          *(_OWORD *)(v13 + 56) = 0uLL;
          *(_OWORD *)(v13 + 72) = 0uLL;
          *(_OWORD *)(v13 + 88) = 0uLL;
          *(_OWORD *)(v13 + 104) = 0uLL;
          *(_OWORD *)(v13 + 120) = 0uLL;
          *(_OWORD *)(v13 + 136) = 0uLL;
          *(_OWORD *)(v13 + 152) = 0uLL;
          *(_OWORD *)(v13 + 168) = 0uLL;
          *(_OWORD *)(v13 + 184) = 0uLL;
          *(_OWORD *)(v13 + 200) = 0uLL;
          *(_OWORD *)(v13 + 216) = 0uLL;
          *(_OWORD *)(v13 + 232) = 0uLL;
          *(_OWORD *)(v13 + 248) = 0uLL;
          *(_OWORD *)(v13 + 8) = 0uLL;
          v14 = v13 + 8;
          *(_OWORD *)(v13 + 264) = 0uLL;
          *(_OWORD *)(v13 + 280) = 0uLL;
          *(_OWORD *)(v13 + 296) = 0uLL;
          *(_OWORD *)(v13 + 312) = 0uLL;
          *(_OWORD *)(v13 + 328) = 0uLL;
          *(_OWORD *)(v13 + 344) = 0uLL;
          *(_OWORD *)(v13 + 360) = 0uLL;
          *(_OWORD *)(v13 + 376) = 0uLL;
          *(_OWORD *)(v13 + 392) = 0uLL;
          *(_OWORD *)(v13 + 408) = 0uLL;
          *(_OWORD *)(v13 + 424) = 0uLL;
          *(_OWORD *)(v13 + 440) = 0uLL;
          *(_OWORD *)(v13 + 456) = 0uLL;
          *(_OWORD *)(v13 + 472) = 0uLL;
          v13 += 520;
          *((_OWORD *)v14 + 30) = 0uLL;
          *((_OWORD *)v14 + 31) = 0uLL;
        }
        while (v13 != v12);
        *a2 = v11;
        a2[1] = v12;
        a2[2] = &v11[520 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = a2[1];
        }
      }
    }
    v16 = *a2;
    if (v12 != *a2)
    {
      v17 = 0;
      v18 = 0;
      v19 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::split_nd_params_t>(*(_QWORD *)(v20 + v17), &v16[v18], 0);
        ++v19;
        v16 = *a2;
        v18 += 520;
        v17 += 16;
      }
      while (v19 < 0xFC0FC0FC0FC0FC1 * ((a2[1] - *a2) >> 3));
    }
    v22 = (void **)&v20;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v22);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v15, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v16 - v15;
    if (v16 != v15)
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 2))
      {
        bzero(v5, v6 >> 2);
        v5 += v6 >> 2;
        a2[1] = v5;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (v8 >> 1 > v7)
          v7 = v8 >> 1;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
          v9 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v9 = v7;
        if (v9 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v10 = (char *)operator new(4 * v9);
        bzero(v10, v6 >> 2);
        *a2 = v10;
        a2[1] = &v10[v6 >> 2];
        a2[2] = &v10[4 * v9];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v10[v6 >> 2];
        }
      }
    }
    v11 = *a2;
    if (v5 != *a2)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::softmax_nd_params_t>(*(_QWORD *)(v15 + v12), &v11[v13], 0);
        ++v14;
        v11 = *a2;
        v13 += 4;
        v12 += 16;
      }
      while (v14 < (a2[1] - *a2) >> 2);
    }
    v17 = (void **)&v15;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v17);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v15, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v16 - v15;
    if (v16 != v15)
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 3))
      {
        memset_pattern16(v5, &xmmword_191A93740, v6 >> 1);
        v5 += v6 >> 1;
        a2[1] = v5;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (v8 >> 2 > v7)
          v7 = v8 >> 2;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
          v9 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v9 = v7;
        if (v9 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v10 = (char *)operator new(8 * v9);
        memset_pattern16(v10, &xmmword_191A93740, v6 >> 1);
        *a2 = v10;
        a2[1] = &v10[v6 >> 1];
        a2[2] = &v10[8 * v9];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v10[v6 >> 1];
        }
      }
    }
    v11 = *a2;
    if (v5 != *a2)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::reverse_seq_params_t>(*(_QWORD *)(v15 + v12), &v11[v13], 0);
        ++v14;
        v11 = *a2;
        v13 += 8;
        v12 += 16;
      }
      while (v14 < (a2[1] - *a2) >> 3);
    }
    v17 = (void **)&v15;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v17);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v18, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v19 - v18;
    if (v19 == v18)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0xAAAAAAAAAAAAAAABLL * ((a2[2] - v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        v12 = &v5[12 * v7];
        do
        {
          *(_QWORD *)v5 = 0;
          *(_QWORD *)(v5 + 4) = 1;
          v5[8] = 1;
          v5 += 12;
        }
        while (v5 != v12);
        a2[1] = v12;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x5555555555555556 * ((a2[2] - v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0xAAAAAAAAAAAAAAALL)
          v10 = 0x1555555555555555;
        else
          v10 = v9;
        if (v10 > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(12 * v10);
        v12 = &v11[12 * v7];
        v13 = v11;
        do
        {
          *(_QWORD *)v13 = 0;
          *(_QWORD *)(v13 + 4) = 1;
          v13[8] = 1;
          v13 += 12;
        }
        while (v13 != v12);
        *a2 = v11;
        a2[1] = v12;
        a2[2] = &v11[12 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = a2[1];
        }
      }
    }
    v14 = *a2;
    if (v12 != *a2)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::cross_entropy_params_t>(*(_QWORD *)(v18 + v15), (uint64_t)&v14[v16], 0);
        ++v17;
        v14 = *a2;
        v16 += 12;
        v15 += 16;
      }
      while (v17 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2));
    }
    v20 = (void **)&v18;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

{
  _QWORD *v4;
  char *v5;
  char *v6;
  char *v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  char *v25;
  void *v26;
  char *v27;
  void *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void **v37;

  v4 = a1 + 2;
  if (!(*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
    return;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v35, *a1, v4);
  v5 = *a2;
  v6 = a2[1];
  v7 = *a2;
  if (v6 != *a2)
  {
    do
    {
      v8 = (void *)*((_QWORD *)v6 - 3);
      if (v8)
      {
        *((_QWORD *)v6 - 2) = v8;
        operator delete(v8);
      }
      v6 -= 56;
    }
    while (v6 != v5);
    v7 = *a2;
  }
  a2[1] = v5;
  v9 = (v36 - v35) >> 4;
  v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - v7) >> 3);
  v11 = v9 - v10;
  if (v9 <= v10)
  {
    if (v9 >= v10)
    {
      v27 = v5;
      goto LABEL_39;
    }
    v27 = &v7[56 * v9];
    while (v5 != v27)
    {
      v28 = (void *)*((_QWORD *)v5 - 3);
      if (v28)
      {
        *((_QWORD *)v5 - 2) = v28;
        operator delete(v28);
      }
      v5 -= 56;
    }
  }
  else
  {
    v12 = a2[2];
    if (0x6DB6DB6DB6DB6DB7 * ((v12 - v5) >> 3) < v11)
    {
      if ((unint64_t)(v36 - v35) >= 0x4924924924924921)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v13 = 0x6DB6DB6DB6DB6DB7 * ((v12 - v7) >> 3);
      v14 = 2 * v13;
      if (2 * v13 <= v9)
        v14 = (v36 - v35) >> 4;
      if (v13 >= 0x249249249249249)
        v15 = 0x492492492492492;
      else
        v15 = v14;
      if (v15 > 0x492492492492492)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v16 = (char *)operator new(56 * v15);
      v17 = &v16[56 * v10];
      v18 = &v16[56 * v9];
      v19 = 56 * v9 - 56 * v10;
      v20 = v17 + 20;
      do
      {
        *(_QWORD *)(v20 - 4) = 0;
        *(_QWORD *)(v20 - 12) = 0;
        *(_QWORD *)(v20 + 12) = 0;
        *(_QWORD *)(v20 + 4) = 0;
        *(_QWORD *)(v20 - 20) = 0x3F00000000000001;
        *(_DWORD *)v20 = 3;
        *(_QWORD *)(v20 + 28) = 0;
        *(_QWORD *)(v20 + 20) = 0;
        v20 += 56;
        v19 -= 56;
      }
      while (v19);
      v21 = &v16[56 * v15];
      v22 = *a2;
      v23 = a2[1];
      if (v23 == *a2)
      {
        *a2 = v17;
        a2[1] = v18;
        a2[2] = v21;
      }
      else
      {
        do
        {
          v24 = *(_OWORD *)(v23 - 56);
          *(_OWORD *)(v17 - 44) = *(_OWORD *)(v23 - 44);
          *(_OWORD *)(v17 - 56) = v24;
          *((_QWORD *)v17 - 2) = 0;
          *((_QWORD *)v17 - 1) = 0;
          *((_QWORD *)v17 - 3) = 0;
          *(_OWORD *)(v17 - 24) = *(_OWORD *)(v23 - 24);
          *((_QWORD *)v17 - 1) = *((_QWORD *)v23 - 1);
          v17 -= 56;
          *((_QWORD *)v23 - 3) = 0;
          *((_QWORD *)v23 - 2) = 0;
          *((_QWORD *)v23 - 1) = 0;
          v23 -= 56;
        }
        while (v23 != v22);
        v25 = *a2;
        v23 = a2[1];
        *a2 = v17;
        a2[1] = v18;
        a2[2] = v21;
        if (v23 != v25)
        {
          do
          {
            v26 = (void *)*((_QWORD *)v23 - 3);
            if (v26)
            {
              *((_QWORD *)v23 - 2) = v26;
              operator delete(v26);
            }
            v23 -= 56;
          }
          while (v23 != v25);
          v23 = v25;
        }
      }
      if (v23)
        operator delete(v23);
      v27 = a2[1];
      goto LABEL_39;
    }
    v27 = &v5[56 * v11];
    v29 = 56 * v9 - 8 * ((v5 - v7) >> 3);
    v30 = v5 + 20;
    do
    {
      *(_QWORD *)(v30 - 4) = 0;
      *(_QWORD *)(v30 - 12) = 0;
      *(_QWORD *)(v30 + 12) = 0;
      *(_QWORD *)(v30 + 4) = 0;
      *(_QWORD *)(v30 - 20) = 0x3F00000000000001;
      *(_DWORD *)v30 = 3;
      *(_QWORD *)(v30 + 28) = 0;
      *(_QWORD *)(v30 + 20) = 0;
      v30 += 56;
      v29 -= 56;
    }
    while (v29);
  }
  a2[1] = v27;
LABEL_39:
  v31 = *a2;
  if (v27 != *a2)
  {
    v32 = 0;
    v33 = 0;
    v34 = 0;
    do
    {
      Espresso::SerDes::params_io<Espresso::non_maximum_suppression_params_t>(*(_QWORD *)(v35 + v32), (uint64_t)&v31[v33], 0);
      ++v34;
      v31 = *a2;
      v33 += 56;
      v32 += 16;
    }
    while (v34 < 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  }
  v37 = (void **)&v35;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v37);
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v12, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v13 - v12;
    if (v13 != v12)
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v8 >= v6 >> 4)
      {
        a2[1] = &v5[v7];
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 2 * v8;
        if (2 * v8 <= v7)
          v9 = v7;
        if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
          v10 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        v11 = (char *)operator new(v10);
        *a2 = v11;
        a2[1] = &v11[v7];
        a2[2] = &v11[v10];
        if (v5)
          operator delete(v5);
      }
    }
    v14 = (void **)&v12;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v14);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v12, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v13 - v12;
    if (v13 != v12)
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v8 >= v6 >> 4)
      {
        a2[1] = &v5[v7];
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 2 * v8;
        if (2 * v8 <= v7)
          v9 = v7;
        if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
          v10 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        v11 = (char *)operator new(v10);
        *a2 = v11;
        a2[1] = &v11[v7];
        a2[2] = &v11[v10];
        if (v5)
          operator delete(v5);
      }
    }
    v14 = (void **)&v12;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v14);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v17, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v18 - v17;
    if (v18 == v17)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 4))
      {
        v12 = &v5[16 * v7];
        do
        {
          *(_DWORD *)v5 = 0;
          *(_QWORD *)(v5 + 4) = 1065353216;
          *((_DWORD *)v5 + 3) = -1;
          v5 += 16;
        }
        while (v5 != v12);
        a2[1] = v12;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = v8 >> 3;
        if (v8 >> 3 <= v7)
          v9 = v7;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(16 * v10);
        v12 = &v11[16 * v7];
        v13 = v11;
        do
        {
          *(_DWORD *)v13 = 0;
          *(_QWORD *)(v13 + 4) = 1065353216;
          *((_DWORD *)v13 + 3) = -1;
          v13 += 16;
        }
        while (v13 != v12);
        *a2 = v11;
        a2[1] = v12;
        a2[2] = &v11[16 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = a2[1];
        }
      }
    }
    v14 = *a2;
    if (v12 != *a2)
    {
      v15 = 0;
      v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::one_hot_params_t>(*(_QWORD *)(v17 + v15), (uint64_t)&v14[v15], 0);
        ++v16;
        v14 = *a2;
        v15 += 16;
      }
      while (v16 < (a2[1] - *a2) >> 4);
    }
    v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v14, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v15 - v14;
    if (v15 != v14)
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 1))
      {
        bzero(v5, v6 >> 3);
        v5 += v6 >> 3;
        a2[1] = v5;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (v8 > v7)
          v7 = a2[2] - v5;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFELL)
          v9 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v9 = v7;
        if (v9 < 0)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v10 = (char *)operator new(2 * v9);
        bzero(v10, v6 >> 3);
        *a2 = v10;
        a2[1] = &v10[v6 >> 3];
        a2[2] = &v10[2 * v9];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v10[v6 >> 3];
        }
      }
    }
    v11 = *a2;
    if (v5 != *a2)
    {
      v12 = 0;
      v13 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::cumsum_params_t>(*(_QWORD *)(v14 + 8 * v12), &v11[v12], 0);
        ++v13;
        v11 = *a2;
        v12 += 2;
      }
      while (v13 < (a2[1] - *a2) >> 1);
    }
    v16 = (void **)&v14;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v16);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v15, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v16 - v15;
    if (v16 != v15)
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 3))
      {
        bzero(v5, v6 >> 1);
        v5 += v6 >> 1;
        a2[1] = v5;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (v8 >> 2 > v7)
          v7 = v8 >> 2;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
          v9 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v9 = v7;
        if (v9 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v10 = (char *)operator new(8 * v9);
        bzero(v10, v6 >> 1);
        *a2 = v10;
        a2[1] = &v10[v6 >> 1];
        a2[2] = &v10[8 * v9];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v10[v6 >> 1];
        }
      }
    }
    v11 = *a2;
    if (v5 != *a2)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::grid_sampling_params_t>(*(_QWORD *)(v15 + v12), (uint64_t)&v11[v13], 0);
        ++v14;
        v11 = *a2;
        v13 += 8;
        v12 += 16;
      }
      while (v14 < (a2[1] - *a2) >> 3);
    }
    v17 = (void **)&v15;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v17);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v20, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v21 - v20;
    if (v21 == v20)
    {
      v13 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0x6DB6DB6DB6DB6DB7 * ((a2[2] - v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        v15 = 28 * v7;
        v13 = &v5[28 * v7];
        do
        {
          *(_DWORD *)v5 = 1;
          *(_QWORD *)(v5 + 12) = 0;
          *(_QWORD *)(v5 + 4) = 0;
          *(_QWORD *)(v5 + 20) = 0x100000000;
          v5 += 28;
          v15 -= 28;
        }
        while (v15);
        a2[1] = v13;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0xDB6DB6DB6DB6DB6ELL * ((a2[2] - v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x492492492492492)
          v10 = 0x924924924924924;
        else
          v10 = v9;
        if (v10 > 0x924924924924924)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(28 * v10);
        v12 = 0;
        v13 = &v11[28 * v7];
        do
        {
          v14 = &v11[v12];
          *(_DWORD *)v14 = 1;
          *(_QWORD *)(v14 + 12) = 0;
          *(_QWORD *)(v14 + 4) = 0;
          *(_QWORD *)(v14 + 20) = 0x100000000;
          v12 += 28;
        }
        while (28 * v7 != v12);
        *a2 = v11;
        a2[1] = v13;
        a2[2] = &v11[28 * v10];
        if (v5)
        {
          operator delete(v5);
          v13 = a2[1];
        }
      }
    }
    v16 = *a2;
    if (v13 != *a2)
    {
      v17 = 0;
      v18 = 0;
      v19 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::resample_params_t>(*(_QWORD *)(v20 + v17), (uint64_t)&v16[v18], 0);
        ++v19;
        v16 = *a2;
        v18 += 28;
        v17 += 16;
      }
      while (v19 < 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 2));
    }
    v22 = (void **)&v20;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v22);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v17, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v18 - v17;
    if (v18 != v17)
    {
      v7 = v6 >> 4;
      v8 = 0xAAAAAAAAAAAAAAABLL * ((a2[2] - v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        bzero(v5, 12 * ((12 * v7 - 12) / 0xC) + 12);
        v5 += 12 * ((12 * v7 - 12) / 0xC) + 12;
        a2[1] = v5;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x5555555555555556 * ((a2[2] - v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0xAAAAAAAAAAAAAAALL)
          v10 = 0x1555555555555555;
        else
          v10 = v9;
        if (v10 > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(12 * v10);
        v12 = 12 * ((12 * v7 - 12) / 0xC) + 12;
        bzero(v11, v12);
        *a2 = v11;
        a2[1] = &v11[v12];
        a2[2] = &v11[12 * v10];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v11[v12];
        }
      }
    }
    v13 = *a2;
    if (v5 != *a2)
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::bahdanau_attention_params_t>(*(_QWORD *)(v17 + v14), &v13[v15], 0);
        ++v16;
        v13 = *a2;
        v15 += 12;
        v14 += 16;
      }
      while (v16 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2));
    }
    v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v17, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v18 - v17;
    if (v18 != v17)
    {
      v7 = v6 >> 4;
      v8 = 0xAAAAAAAAAAAAAAABLL * ((a2[2] - v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        bzero(v5, 12 * ((12 * v7 - 12) / 0xC) + 12);
        v5 += 12 * ((12 * v7 - 12) / 0xC) + 12;
        a2[1] = v5;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x5555555555555556 * ((a2[2] - v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0xAAAAAAAAAAAAAAALL)
          v10 = 0x1555555555555555;
        else
          v10 = v9;
        if (v10 > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(12 * v10);
        v12 = 12 * ((12 * v7 - 12) / 0xC) + 12;
        bzero(v11, v12);
        *a2 = v11;
        a2[1] = &v11[v12];
        a2[2] = &v11[12 * v10];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v11[v12];
        }
      }
    }
    v13 = *a2;
    if (v5 != *a2)
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::self_attention_params_t>(*(_QWORD *)(v17 + v14), (uint64_t)&v13[v15], 0);
        ++v16;
        v13 = *a2;
        v15 += 12;
        v14 += 16;
      }
      while (v16 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2));
    }
    v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v15, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v16 - v15;
    if (v16 != v15)
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 3))
      {
        memset_pattern16(v5, &xmmword_191A93740, v6 >> 1);
        v5 += v6 >> 1;
        a2[1] = v5;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (v8 >> 2 > v7)
          v7 = v8 >> 2;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
          v9 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v9 = v7;
        if (v9 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v10 = (char *)operator new(8 * v9);
        memset_pattern16(v10, &xmmword_191A93740, v6 >> 1);
        *a2 = v10;
        a2[1] = &v10[v6 >> 1];
        a2[2] = &v10[8 * v9];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v10[v6 >> 1];
        }
      }
    }
    v11 = *a2;
    if (v5 != *a2)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::argsort_params_t>(*(_QWORD *)(v15 + v12), (uint64_t)&v11[v13], 0);
        ++v14;
        v11 = *a2;
        v13 += 8;
        v12 += 16;
      }
      while (v14 < (a2[1] - *a2) >> 3);
    }
    v17 = (void **)&v15;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v17);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v18, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v19 - v18;
    if (v19 == v18)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0xEEEEEEEEEEEEEEEFLL * ((a2[2] - v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        v12 = &v5[60 * v7];
        do
        {
          *(_OWORD *)v5 = xmmword_191A8AA80;
          *((_OWORD *)v5 + 1) = xmmword_191A93320;
          *((_DWORD *)v5 + 8) = 0;
          *((_WORD *)v5 + 18) = 1;
          *(_QWORD *)(v5 + 46) = 0;
          *(_QWORD *)(v5 + 38) = 0;
          *(_QWORD *)(v5 + 52) = 0;
          v5 += 60;
        }
        while (v5 != v12);
        a2[1] = v12;
      }
      else
      {
        if ((unint64_t)v6 >= 0x4444444444444441)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0xDDDDDDDDDDDDDDDELL * ((a2[2] - v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x222222222222222)
          v10 = 0x444444444444444;
        else
          v10 = v9;
        if (v10 > 0x444444444444444)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(60 * v10);
        v12 = &v11[60 * v7];
        v13 = v11;
        do
        {
          *(_OWORD *)v13 = xmmword_191A8AA80;
          *((_OWORD *)v13 + 1) = xmmword_191A93320;
          *((_DWORD *)v13 + 8) = 0;
          *((_WORD *)v13 + 18) = 1;
          *(_QWORD *)(v13 + 46) = 0;
          *(_QWORD *)(v13 + 38) = 0;
          *(_QWORD *)(v13 + 52) = 0;
          v13 += 60;
        }
        while (v13 != v12);
        *a2 = v11;
        a2[1] = v12;
        a2[2] = &v11[60 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = a2[1];
        }
      }
    }
    v14 = *a2;
    if (v12 != *a2)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::pool3d_params_t>(*(_QWORD *)(v18 + v15), (uint64_t)&v14[v16], 0);
        ++v17;
        v14 = *a2;
        v16 += 60;
        v15 += 16;
      }
      while (v17 < 0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 2));
    }
    v20 = (void **)&v18;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  char *v19;
  __int128 v20;
  __int128 v21;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v27, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v28 - v27;
    if (v28 == v27)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0x8F5C28F5C28F5C29 * ((a2[2] - v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        v12 = &v5[100 * v7];
        *(_QWORD *)&v21 = 0x100000001;
        *((_QWORD *)&v21 + 1) = 0x100000001;
        __asm { FMOV            V2.2S, #1.0 }
        do
        {
          *(_QWORD *)v5 = 1;
          *(_OWORD *)(v5 + 8) = v21;
          *((_QWORD *)v5 + 3) = 0xFFFFFFFF00000001;
          *((_QWORD *)v5 + 4) = _D2;
          *((_DWORD *)v5 + 10) = 0;
          *((_WORD *)v5 + 22) = 1;
          *(_QWORD *)(v5 + 54) = 0;
          *(_QWORD *)(v5 + 46) = 0;
          *((_WORD *)v5 + 31) = 0;
          *((_QWORD *)v5 + 8) = 0x1000100010001;
          *((_DWORD *)v5 + 18) = 65537;
          *(_QWORD *)(v5 + 76) = 0x100000000;
          *(_QWORD *)(v5 + 92) = 0;
          *(_QWORD *)(v5 + 84) = 0;
          v5 += 100;
        }
        while (v5 != v12);
        a2[1] = v12;
      }
      else
      {
        if ((unint64_t)v6 >= 0x28F5C28F5C28F5C1)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x1EB851EB851EB852 * ((a2[2] - v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x147AE147AE147AELL)
          v10 = 0x28F5C28F5C28F5CLL;
        else
          v10 = v9;
        if (v10 > 0x28F5C28F5C28F5CLL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(100 * v10);
        v12 = &v11[100 * v7];
        *(_QWORD *)&v13 = 0x100000001;
        *((_QWORD *)&v13 + 1) = 0x100000001;
        __asm { FMOV            V2.2S, #1.0 }
        v19 = v11;
        do
        {
          *(_QWORD *)v19 = 1;
          *(_OWORD *)(v19 + 8) = v13;
          *((_QWORD *)v19 + 3) = 0xFFFFFFFF00000001;
          *((_QWORD *)v19 + 4) = _D2;
          *((_DWORD *)v19 + 10) = 0;
          *((_WORD *)v19 + 22) = 1;
          *(_QWORD *)(v19 + 54) = 0;
          *(_QWORD *)(v19 + 46) = 0;
          *((_WORD *)v19 + 31) = 0;
          *((_QWORD *)v19 + 8) = 0x1000100010001;
          *((_DWORD *)v19 + 18) = 65537;
          *(_QWORD *)(v19 + 76) = 0x100000000;
          *(_QWORD *)(v19 + 92) = 0;
          *(_QWORD *)(v19 + 84) = 0;
          v19 += 100;
        }
        while (v19 != v12);
        *(_QWORD *)&v20 = &v11[100 * v7];
        *((_QWORD *)&v20 + 1) = &v11[100 * v10];
        *a2 = v11;
        *(_OWORD *)(a2 + 1) = v20;
        if (v5)
        {
          operator delete(v5);
          v12 = a2[1];
        }
      }
    }
    v23 = *a2;
    if (v12 != *a2)
    {
      v24 = 0;
      v25 = 0;
      v26 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::conv3d_params_t>(*(_QWORD *)(v27 + v24), (uint64_t)&v23[v25], 0);
        ++v26;
        v23 = *a2;
        v25 += 100;
        v24 += 16;
      }
      while (v26 < 0x8F5C28F5C28F5C29 * ((a2[1] - *a2) >> 2));
    }
    v29 = (void **)&v27;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v29);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v18, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v19 - v18;
    if (v19 == v18)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0xAAAAAAAAAAAAAAABLL * ((a2[2] - v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        v12 = &v5[12 * v7];
        do
        {
          *(_DWORD *)v5 = -1;
          *(_QWORD *)(v5 + 4) = 1065353216;
          v5 += 12;
        }
        while (v5 != v12);
        a2[1] = v12;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x5555555555555556 * ((a2[2] - v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0xAAAAAAAAAAAAAAALL)
          v10 = 0x1555555555555555;
        else
          v10 = v9;
        if (v10 > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(12 * v10);
        v12 = &v11[12 * v7];
        v13 = v11;
        do
        {
          *(_DWORD *)v13 = -1;
          *(_QWORD *)(v13 + 4) = 1065353216;
          v13 += 12;
        }
        while (v13 != v12);
        *a2 = v11;
        a2[1] = v12;
        a2[2] = &v11[12 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = a2[1];
        }
      }
    }
    v14 = *a2;
    if (v12 != *a2)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::static_quantize_params_t>(*(_QWORD *)(v18 + v15), (uint64_t)&v14[v16], 0);
        ++v17;
        v14 = *a2;
        v16 += 12;
        v15 += 16;
      }
      while (v17 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2));
    }
    v20 = (void **)&v18;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v18, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v19 - v18;
    if (v19 == v18)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 5))
      {
        v12 = &v5[32 * v7];
        do
        {
          *(_DWORD *)v5 = -1;
          *(_QWORD *)(v5 + 4) = 1065353216;
          *((_DWORD *)v5 + 3) = 0;
          *((_DWORD *)v5 + 4) = 0;
          *(_QWORD *)(v5 + 20) = 1065353216;
          *((_DWORD *)v5 + 7) = 0;
          v5 += 32;
        }
        while (v5 != v12);
        a2[1] = v12;
      }
      else
      {
        if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF1)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = v8 >> 4;
        if (v8 >> 4 <= v7)
          v9 = v7;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
          v10 = 0x7FFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10 >> 59)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(32 * v10);
        v12 = &v11[32 * v7];
        v13 = v11;
        do
        {
          *(_DWORD *)v13 = -1;
          *(_QWORD *)(v13 + 4) = 1065353216;
          *((_DWORD *)v13 + 3) = 0;
          *((_DWORD *)v13 + 4) = 0;
          *(_QWORD *)(v13 + 20) = 1065353216;
          *((_DWORD *)v13 + 7) = 0;
          v13 += 32;
        }
        while (v13 != v12);
        *a2 = v11;
        a2[1] = v12;
        a2[2] = &v11[32 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = a2[1];
        }
      }
    }
    v14 = *a2;
    if (v12 != *a2)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::static_dequantize_params_t>(*(_QWORD *)(v18 + v15), (uint64_t)&v14[v16], 0);
        ++v17;
        v14 = *a2;
        v16 += 32;
        v15 += 16;
      }
      while (v17 < (a2[1] - *a2) >> 5);
    }
    v20 = (void **)&v18;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v19, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v20 - v19;
    if (v20 == v19)
    {
      v13 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0x82FA0BE82FA0BE83 * ((a2[2] - v5) >> 2);
      if (v8 >= v6 >> 4)
      {
        v13 = &v5[172 * v7];
        do
        {
          *((_QWORD *)v5 + 20) = 0;
          *((_OWORD *)v5 + 8) = 0u;
          *((_OWORD *)v5 + 9) = 0u;
          *((_OWORD *)v5 + 6) = 0u;
          *((_OWORD *)v5 + 7) = 0u;
          *((_OWORD *)v5 + 4) = 0u;
          *((_OWORD *)v5 + 5) = 0u;
          *((_OWORD *)v5 + 2) = 0u;
          *((_OWORD *)v5 + 3) = 0u;
          *(_OWORD *)v5 = 0u;
          *((_OWORD *)v5 + 1) = 0u;
          Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)v5);
          *((_DWORD *)v5 + 42) = 65793;
          v5 += 172;
        }
        while (v5 != v13);
        a2[1] = v13;
      }
      else
      {
        if ((unint64_t)v6 >= 0x17D05F417D05F411)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x5F417D05F417D06 * ((a2[2] - v5) >> 2);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0xBE82FA0BE82FA0)
          v10 = 0x17D05F417D05F41;
        else
          v10 = v9;
        if (v10 > 0x17D05F417D05F41)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(172 * v10);
        v12 = v11;
        v13 = &v11[172 * v7];
        do
        {
          *((_QWORD *)v11 + 20) = 0;
          *((_OWORD *)v11 + 8) = 0u;
          *((_OWORD *)v11 + 9) = 0u;
          *((_OWORD *)v11 + 6) = 0u;
          *((_OWORD *)v11 + 7) = 0u;
          *((_OWORD *)v11 + 4) = 0u;
          *((_OWORD *)v11 + 5) = 0u;
          *((_OWORD *)v11 + 2) = 0u;
          *((_OWORD *)v11 + 3) = 0u;
          *(_OWORD *)v11 = 0u;
          *((_OWORD *)v11 + 1) = 0u;
          Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)v11);
          *(_DWORD *)(v14 + 168) = 65793;
          v11 = (char *)(v14 + 172);
        }
        while (v11 != v13);
        *a2 = v12;
        a2[1] = v13;
        a2[2] = &v12[172 * v10];
        if (v5)
        {
          operator delete(v5);
          v13 = a2[1];
        }
      }
    }
    v15 = *a2;
    if (v13 != *a2)
    {
      v16 = 0;
      v17 = 0;
      v18 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::fused_convolution_grad_params_t>(*(_QWORD *)(v19 + v16), &v15[v17], 0);
        ++v18;
        v15 = *a2;
        v17 += 172;
        v16 += 16;
      }
      while (v18 < 0x82FA0BE82FA0BE83 * ((a2[1] - *a2) >> 2));
    }
    v21 = (void **)&v19;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v21);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v19;
  __int128 v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v28, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v29 - v28;
    if (v29 == v28)
    {
      v13 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0xF0F0F0F0F0F0F0F1 * ((a2[2] - v5) >> 3);
      if (v8 >= v6 >> 4)
      {
        v21 = 0;
        v13 = &v5[136 * v7];
        __asm { FMOV            V1.2S, #1.0 }
        do
        {
          v23 = &v5[v21];
          *(_OWORD *)(v23 + 40) = 0uLL;
          *(_OWORD *)(v23 + 56) = 0uLL;
          *(_OWORD *)(v23 + 104) = 0uLL;
          *(_OWORD *)(v23 + 88) = 0uLL;
          *(_OWORD *)(v23 + 120) = 0uLL;
          *(_OWORD *)(v23 + 72) = 0uLL;
          *((_DWORD *)v23 + 13) = -1;
          *((_QWORD *)v23 + 7) = _D1;
          *(_OWORD *)v23 = xmmword_191A93320;
          *((_DWORD *)v23 + 4) = 0;
          *(_QWORD *)(v23 + 20) = _D1;
          *((_QWORD *)v23 + 4) = 0;
          *((_DWORD *)v23 + 7) = 0;
          *(_QWORD *)(v23 + 100) = 0;
          *(_QWORD *)(v23 + 108) = 0;
          *(_QWORD *)(v23 + 116) = 0;
          *((_WORD *)v23 + 66) = 257;
          v21 += 136;
          v23[134] = 1;
        }
        while (136 * v7 != v21);
        a2[1] = v13;
      }
      else
      {
        if ((unint64_t)v6 >= 0x1E1E1E1E1E1E1E11)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0xE1E1E1E1E1E1E1E2 * ((a2[2] - v5) >> 3);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0xF0F0F0F0F0F0F0)
          v10 = 0x1E1E1E1E1E1E1E1;
        else
          v10 = v9;
        if (v10 > 0x1E1E1E1E1E1E1E1)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(136 * v10);
        v12 = 0;
        v13 = &v11[136 * v7];
        __asm { FMOV            V1.2S, #1.0 }
        do
        {
          v19 = &v11[v12];
          *(_OWORD *)(v19 + 40) = 0uLL;
          *(_OWORD *)(v19 + 56) = 0uLL;
          *(_OWORD *)(v19 + 104) = 0uLL;
          *(_OWORD *)(v19 + 88) = 0uLL;
          *(_OWORD *)(v19 + 120) = 0uLL;
          *(_OWORD *)(v19 + 72) = 0uLL;
          *((_DWORD *)v19 + 13) = -1;
          *((_QWORD *)v19 + 7) = _D1;
          *(_OWORD *)v19 = xmmword_191A93320;
          *((_DWORD *)v19 + 4) = 0;
          *(_QWORD *)(v19 + 20) = _D1;
          *((_QWORD *)v19 + 4) = 0;
          *((_DWORD *)v19 + 7) = 0;
          *(_QWORD *)(v19 + 100) = 0;
          *(_QWORD *)(v19 + 108) = 0;
          *(_QWORD *)(v19 + 116) = 0;
          *((_WORD *)v19 + 66) = 257;
          v12 += 136;
          v19[134] = 1;
        }
        while (136 * v7 != v12);
        *(_QWORD *)&v20 = &v11[136 * v7];
        *((_QWORD *)&v20 + 1) = &v11[136 * v10];
        *a2 = v11;
        *(_OWORD *)(a2 + 1) = v20;
        if (v5)
        {
          operator delete(v5);
          v13 = a2[1];
        }
      }
    }
    v24 = *a2;
    if (v13 != *a2)
    {
      v25 = 0;
      v26 = 0;
      v27 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::fused_inner_product_grad_params_t>(*(_QWORD *)(v28 + v25), &v24[v26], 0);
        ++v27;
        v24 = *a2;
        v26 += 136;
        v25 += 16;
      }
      while (v27 < 0xF0F0F0F0F0F0F0F1 * ((a2[1] - *a2) >> 3));
    }
    v30 = (void **)&v28;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v30);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v18, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v19 - v18;
    if (v19 == v18)
    {
      v12 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0x4EC4EC4EC4EC4EC5 * ((a2[2] - v5) >> 3);
      if (v8 >= v6 >> 4)
      {
        v12 = &v5[104 * v7];
        do
        {
          *(_QWORD *)v5 = 0;
          *((_QWORD *)v5 + 1) = 0;
          *((_DWORD *)v5 + 4) = 0;
          *((_DWORD *)v5 + 9) = 1;
          *(_OWORD *)(v5 + 20) = xmmword_191AD0DEC;
          *((_DWORD *)v5 + 14) = 1;
          *(_OWORD *)(v5 + 40) = xmmword_191AD0DEC;
          *(_OWORD *)(v5 + 60) = 0uLL;
          *(_OWORD *)(v5 + 76) = 0uLL;
          *((_DWORD *)v5 + 23) = 0;
          *((_QWORD *)v5 + 12) = 0xFFFFFFFFLL;
          v5 += 104;
        }
        while (v5 != v12);
        a2[1] = v12;
      }
      else
      {
        if ((unint64_t)v6 >= 0x2762762762762761)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x9D89D89D89D89D8ALL * ((a2[2] - v5) >> 3);
        if (v9 <= v7)
          v9 = v7;
        if (v8 >= 0x13B13B13B13B13BLL)
          v10 = 0x276276276276276;
        else
          v10 = v9;
        if (v10 > 0x276276276276276)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = (char *)operator new(104 * v10);
        v12 = &v11[104 * v7];
        v13 = v11;
        do
        {
          *(_QWORD *)v13 = 0;
          *((_QWORD *)v13 + 1) = 0;
          *((_DWORD *)v13 + 4) = 0;
          *((_DWORD *)v13 + 9) = 1;
          *(_OWORD *)(v13 + 20) = xmmword_191AD0DEC;
          *((_DWORD *)v13 + 14) = 1;
          *(_OWORD *)(v13 + 40) = xmmword_191AD0DEC;
          *(_OWORD *)(v13 + 60) = 0uLL;
          *(_OWORD *)(v13 + 76) = 0uLL;
          *((_DWORD *)v13 + 23) = 0;
          *((_QWORD *)v13 + 12) = 0xFFFFFFFFLL;
          v13 += 104;
        }
        while (v13 != v12);
        *a2 = v11;
        a2[1] = v12;
        a2[2] = &v11[104 * v10];
        if (v5)
        {
          operator delete(v5);
          v12 = a2[1];
        }
      }
    }
    v14 = *a2;
    if (v12 != *a2)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::general_slice_update_params_t>(*(_QWORD *)(v18 + v15), (uint64_t)&v14[v16], 0);
        ++v17;
        v14 = *a2;
        v16 += 104;
        v15 += 16;
      }
      while (v17 < 0x4EC4EC4EC4EC4EC5 * ((a2[1] - *a2) >> 3));
    }
    v20 = (void **)&v18;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

{
  _QWORD *v4;
  char *v5;
  int64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v14, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v15 - v14;
    if (v15 != v14)
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 4))
      {
        bzero(v5, v15 - v14);
        v5 += v6;
        a2[1] = v5;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (v8 >> 3 > v7)
          v7 = v8 >> 3;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
          v9 = 0xFFFFFFFFFFFFFFFLL;
        else
          v9 = v7;
        if (v9 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v10 = (char *)operator new(16 * v9);
        bzero(v10, v6);
        *a2 = v10;
        a2[1] = &v10[v6];
        a2[2] = &v10[16 * v9];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v10[v6];
        }
      }
    }
    v11 = *a2;
    if (v5 != *a2)
    {
      v12 = 0;
      v13 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::resize_nearest_neighbor_params_t>(*(_QWORD *)(v14 + v12), &v11[v12], 0);
        ++v13;
        v11 = *a2;
        v12 += 16;
      }
      while (v13 < (a2[1] - *a2) >> 4);
    }
    v16 = (void **)&v14;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v16);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v25, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v26 - v25;
    if (v26 == v25)
    {
      v13 = v5;
    }
    else
    {
      v7 = v6 >> 4;
      v8 = 0xAAAAAAAAAAAAAAABLL * ((a2[2] - v5) >> 3);
      if (v8 >= v6 >> 4)
      {
        v13 = &v5[24 * v7];
        *(_QWORD *)&v20 = 0x100000001;
        *((_QWORD *)&v20 + 1) = 0x100000001;
        do
        {
          *(_OWORD *)v5 = v20;
          *((_QWORD *)v5 + 2) = 0xFFFFFFFF00000001;
          v5 += 24;
        }
        while (v5 != v13);
        a2[1] = v13;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = 0x5555555555555556 * ((a2[2] - v5) >> 3);
        if (2 * v8 <= v7)
          v9 = v6 >> 4;
        if (v8 >= 0x555555555555555)
          v10 = 0xAAAAAAAAAAAAAAALL;
        else
          v10 = v9;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v10);
        v13 = &v11[24 * v7];
        *(_QWORD *)&v14 = 0x100000001;
        *((_QWORD *)&v14 + 1) = 0x100000001;
        v15 = v11;
        do
        {
          *(_OWORD *)v15 = v14;
          *((_QWORD *)v15 + 2) = 0xFFFFFFFF00000001;
          v15 += 24;
        }
        while (v15 != v13);
        v16 = &v11[24 * v12];
        v18 = *a2;
        v17 = a2[1];
        if (v17 != *a2)
        {
          do
          {
            v19 = *(_OWORD *)(v17 - 24);
            *((_QWORD *)v11 - 1) = *((_QWORD *)v17 - 1);
            *(_OWORD *)(v11 - 24) = v19;
            v11 -= 24;
            v17 -= 24;
          }
          while (v17 != v18);
          v17 = *a2;
        }
        *a2 = v11;
        a2[1] = v13;
        a2[2] = v16;
        if (v17)
        {
          operator delete(v17);
          v13 = a2[1];
        }
      }
    }
    v21 = *a2;
    if (v13 != *a2)
    {
      v22 = 0;
      v23 = 0;
      v24 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::tensor_shape_t>(*(_QWORD *)(v25 + v22), &v21[v23], 0);
        ++v24;
        v21 = *a2;
        v23 += 24;
        v22 += 16;
      }
      while (v24 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
    }
    v27 = (void **)&v25;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v27);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v15, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v16 - v15;
    if (v16 != v15)
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 3))
      {
        memset_pattern16(v5, "f024", v6 >> 1);
        v5 += v6 >> 1;
        a2[1] = v5;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (v8 >> 2 > v7)
          v7 = v8 >> 2;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
          v9 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v9 = v7;
        if (v9 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v10 = (char *)operator new(8 * v9);
        memset_pattern16(v10, "f024", v6 >> 1);
        *a2 = v10;
        a2[1] = &v10[v6 >> 1];
        a2[2] = &v10[8 * v9];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v10[v6 >> 1];
        }
      }
    }
    v11 = *a2;
    if (v5 != *a2)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::plane_rw_params_t>(*(_QWORD *)(v15 + v12), (int *)&v11[v13], 0);
        ++v14;
        v11 = *a2;
        v13 += 8;
        v12 += 16;
      }
      while (v14 < (a2[1] - *a2) >> 3);
    }
    v17 = (void **)&v15;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v17);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v15, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v16 - v15;
    if (v16 != v15)
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 2))
      {
        bzero(v5, v6 >> 2);
        v5 += v6 >> 2;
        a2[1] = v5;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (v8 >> 1 > v7)
          v7 = v8 >> 1;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
          v9 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v9 = v7;
        if (v9 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v10 = (char *)operator new(4 * v9);
        bzero(v10, v6 >> 2);
        *a2 = v10;
        a2[1] = &v10[v6 >> 2];
        a2[2] = &v10[4 * v9];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v10[v6 >> 2];
        }
      }
    }
    v11 = *a2;
    if (v5 != *a2)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::degamma_params_t>(*(_QWORD *)(v15 + v12), &v11[v13], 0);
        ++v14;
        v11 = *a2;
        v13 += 4;
        v12 += 16;
      }
      while (v14 < (a2[1] - *a2) >> 2);
    }
    v17 = (void **)&v15;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v17);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v15, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v16 - v15;
    if (v16 != v15)
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 3))
      {
        memset(v5, 255, v6 >> 1);
        v5 += v6 >> 1;
        a2[1] = v5;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (v8 >> 2 > v7)
          v7 = v8 >> 2;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
          v9 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v9 = v7;
        if (v9 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v10 = (char *)operator new(8 * v9);
        memset(v10, 255, v6 >> 1);
        *a2 = v10;
        a2[1] = &v10[v6 >> 1];
        a2[2] = &v10[8 * v9];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v10[v6 >> 1];
        }
      }
    }
    v11 = *a2;
    if (v5 != *a2)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::linear_quantize_params_t>(*(_QWORD *)(v15 + v12), &v11[v13], 0);
        ++v14;
        v11 = *a2;
        v13 += 8;
        v12 += 16;
      }
      while (v14 < (a2[1] - *a2) >> 3);
    }
    v17 = (void **)&v15;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v17);
  }
}

{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 128))(&v15, *a1, v4);
    v5 = *a2;
    a2[1] = *a2;
    v6 = v16 - v15;
    if (v16 != v15)
    {
      v7 = v6 >> 4;
      v8 = a2[2] - v5;
      if (v6 >> 4 <= (unint64_t)(v8 >> 3))
      {
        memset(v5, 255, v6 >> 1);
        v5 += v6 >> 1;
        a2[1] = v5;
      }
      else
      {
        if (v6 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (v8 >> 2 > v7)
          v7 = v8 >> 2;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
          v9 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v9 = v7;
        if (v9 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v10 = (char *)operator new(8 * v9);
        memset(v10, 255, v6 >> 1);
        *a2 = v10;
        a2[1] = &v10[v6 >> 1];
        a2[2] = &v10[8 * v9];
        if (v5)
        {
          operator delete(v5);
          v5 = a2[1];
        }
        else
        {
          v5 = &v10[v6 >> 1];
        }
      }
    }
    v11 = *a2;
    if (v5 != *a2)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::linear_dequantize_params_t>(*(_QWORD *)(v15 + v12), &v11[v13], 0);
        ++v14;
        v11 = *a2;
        v13 += 8;
        v12 += 16;
      }
      while (v14 < (a2[1] - *a2) >> 3);
    }
    v17 = (void **)&v15;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v17);
  }
}

void sub_191767CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::operator<<(uint64_t a1, uint64_t a2)
{
  Espresso::SerDes::params_io<Espresso::rnn_arch_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::convolution_uniforms>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::pool_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::lrn_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::softmax_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::layer_shape>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::concat_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::split_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::upsample_kernel_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::elementwise_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::activation_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::axpby_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::l2_norm_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::bias_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::batchnorm_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::dropout_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::reshape_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::reshape_like_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::vimage2espresso_param>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::blob_numerical_properties>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::reduce_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::general_padding_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::prediction_smoothing_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::space_to_batch_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::broadcast_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::lambda_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::patch_extractor_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::crop_and_resize_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::cf_branch_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::dynamic_dequantize_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::spatial_transformer_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::cf_call_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::topk_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::general_concat_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::alloc_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::load_global_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::store_global_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::scatter_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::load_random_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::matrix_band_part_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::fill_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::tensor_zero_pad_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::squeeze_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::array_gather_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::instancenorm_1d_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::gumbel_max_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::builtin_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::general_slice_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::cross_entropy_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::non_maximum_suppression_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::sgd_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::gather_nd_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::adam_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::scatter_nd_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::one_hot_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::wg_transform_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::grid_sampling_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::resample_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::self_attention_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::loopkit_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::argsort_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::pool3d_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::conv3d_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::static_quantize_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::static_dequantize_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::general_slice_update_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::einsum_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::foreign_network_storage_blob_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::foreign_network_weight_file_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::tunneled_ane_op_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::tunneled_unit_bottom_layout_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::tunneled_unit_top_layout_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::tunneled_ane_unit_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::brick_params>(a1, a2, 1);
}

void Espresso::SerDes::operator<<(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::rnn_arch_params>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::convolution_uniforms>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::pool_params>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::lrn_params>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::softmax_params>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::layer_shape>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::concat_params>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::split_params>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::upsample_kernel_params>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::elementwise_params>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::activation_params>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::axpby_params>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::l2_norm_params>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::bias_params>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::batchnorm_params>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::dropout_params>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::reshape_params>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::reshape_like_params>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::vimage2espresso_param>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::blob_numerical_properties>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::reduce_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::general_padding_params>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::prediction_smoothing_params>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::space_to_batch_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::broadcast_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::lambda_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::patch_extractor_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::crop_and_resize_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::cf_branch_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::dynamic_dequantize_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::spatial_transformer_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::cf_call_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::topk_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::general_concat_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::alloc_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::load_global_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::store_global_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::scatter_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::load_random_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::matrix_band_part_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::fill_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::tensor_zero_pad_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::squeeze_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::array_gather_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::instancenorm_1d_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::gumbel_max_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::builtin_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::general_slice_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::cross_entropy_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::non_maximum_suppression_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::sgd_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::gather_nd_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::adam_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::scatter_nd_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::one_hot_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  std::__shared_weak_count *v8;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::dev_op_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, void **))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::wg_transform_params>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::grid_sampling_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::resample_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::self_attention_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::loopkit_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::argsort_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::pool3d_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::conv3d_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::static_quantize_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::static_dequantize_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::general_slice_update_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::einsum_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::foreign_network_storage_blob_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::foreign_network_weight_file_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::tunneled_ane_op_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::tunneled_unit_bottom_layout_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::tunneled_unit_top_layout_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::tunneled_ane_unit_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::brick_params>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_191767D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::operator<<(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0x6F96F96F96F96F97 * ((a2[1] - *a2) >> 2));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::rnn_arch_params>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 156;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, a2[1] - *a2);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      ++v4;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, a2[1] - *a2);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      ++v4;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xCF3CF3CF3CF3CF3DLL * ((a2[1] - *a2) >> 3));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::convolution_uniforms>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 168;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 4));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::pool_params>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 112;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 2));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::lrn_params>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 28;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 2));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::softmax_params>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 28;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xF83E0F83E0F83E1 * ((a2[1] - *a2) >> 2));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 132;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (a2[1] - *a2) >> 6);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::layer_shape>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 64;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (a2[1] - *a2) >> 6);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::concat_params>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 64;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0x4EC4EC4EC4EC4EC5 * ((a2[1] - *a2) >> 2));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::split_params>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 52;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 3));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::upsample_kernel_params>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 72;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0x4EC4EC4EC4EC4EC5 * ((a2[1] - *a2) >> 2));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::elementwise_params>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 52;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 2));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::activation_params>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 36;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::axpby_params>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 56;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::l2_norm_params>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 12;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (a2[1] - *a2) >> 3);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::bias_params>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 8;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0x86BCA1AF286BCA1BLL * ((a2[1] - *a2) >> 2));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::batchnorm_params>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 76;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (a2[1] - *a2) >> 4);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::dropout_params>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 16;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::reshape_params>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 40;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::reshape_like_params>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 48;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 4));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::vimage2espresso_param>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 80;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::blob_numerical_properties>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 40;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 2));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::reduce_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 44;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0x86BCA1AF286BCA1BLL * ((a2[1] - *a2) >> 2));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::general_padding_params>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 76;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (a2[1] - *a2) >> 3);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::prediction_smoothing_params>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 8;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::space_to_batch_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 40;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 2));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::broadcast_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 36;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, a2[1] - *a2);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      ++v4;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::lambda_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 48;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 2));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::patch_extractor_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 44;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 4));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::crop_and_resize_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 80;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::cf_branch_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 56;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (a2[1] - *a2) >> 5);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::dynamic_dequantize_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 32;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::spatial_transformer_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 24;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::cf_call_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 24;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, a2[1] - *a2);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      ++v4;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (a2[1] - *a2) >> 4);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::topk_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 16;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (a2[1] - *a2) >> 3);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::general_concat_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 8;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (a2[1] - *a2) >> 3);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::alloc_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 8;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::load_global_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 56;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::store_global_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 56;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, a2[1] - *a2);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      ++v4;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, a2[1] - *a2);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      ++v4;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, a2[1] - *a2);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      ++v4;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::scatter_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 24;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::load_random_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 48;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 2));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::matrix_band_part_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 20;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 2));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::fill_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 36;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xF0B7672A07A44C6BLL * ((a2[1] - *a2) >> 2));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::tensor_zero_pad_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 268;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 4));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::squeeze_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 144;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 2));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::array_gather_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 28;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 2));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::instancenorm_1d_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 20;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, a2[1] - *a2);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      ++v4;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 2));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::gumbel_max_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 36;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0x86BCA1AF286BCA1BLL * ((a2[1] - *a2) >> 3));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::builtin_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 152;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0x8F5C28F5C28F5C29 * ((a2[1] - *a2) >> 2));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::general_slice_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 100;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::cross_entropy_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 12;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::non_maximum_suppression_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 56;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, a2[1] - *a2);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      ++v4;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::sgd_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 12;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (a2[1] - *a2) >> 4);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::gather_nd_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 16;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (a2[1] - *a2) >> 4);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::adam_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 16;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (a2[1] - *a2) >> 4);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::scatter_nd_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 16;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, a2[1] - *a2);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      ++v4;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (a2[1] - *a2) >> 4);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::one_hot_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 16;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xF0F0F0F0F0F0F0F1 * ((a2[1] - *a2) >> 3));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::dev_op_params_t>((void *)v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 136;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::wg_transform_params>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 40;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (a2[1] - *a2) >> 3);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::grid_sampling_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 8;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 2));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::resample_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 28;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::self_attention_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 12;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (a2[1] - *a2) >> 7);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::loopkit_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 128;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (a2[1] - *a2) >> 3);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::argsort_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 8;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 2));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::pool3d_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 60;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0x8F5C28F5C28F5C29 * ((a2[1] - *a2) >> 2));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::conv3d_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 100;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::static_quantize_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 12;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (a2[1] - *a2) >> 5);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::static_dequantize_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 32;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0x4EC4EC4EC4EC4EC5 * ((a2[1] - *a2) >> 3));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::general_slice_update_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 104;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::einsum_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 96;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 4));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::foreign_network_storage_blob_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 80;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0x4EC4EC4EC4EC4EC5 * ((a2[1] - *a2) >> 3));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::foreign_network_weight_file_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 104;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xAF8AF8AF8AF8AF8BLL * ((a2[1] - *a2) >> 3));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::tunneled_ane_op_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 280;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (a2[1] - *a2) >> 5);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::tunneled_unit_bottom_layout_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 32;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (a2[1] - *a2) >> 5);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::tunneled_unit_top_layout_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 32;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 4));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::tunneled_ane_unit_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 176;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::brick_params>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 56;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

void sub_191767F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::operator>>(uint64_t a1, _DWORD *a2)
{
  Espresso::SerDes::params_io<Espresso::sequence_concat_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::sequence_repeat_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::fused_kernel_parameters>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::load_constant_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::context_transfer_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::tile_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::rnn_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::transpose_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::flatten_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::crop_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::space_to_depth_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::slice_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::cast_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::dynamic_quantize_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::quantized_gather_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::cf_jump_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::get_shape_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::gather_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::cf_loop_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::cf_for_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::copy_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::expand_dims_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::multinomial_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::transplant_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::stack_nd_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::split_nd_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::softmax_nd_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::sliding_windows_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::reverse_seq_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::sparse_inner_product_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::local_correlation_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::bahdanau_attention_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::slice_update_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::resize_nearest_neighbor_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::tensor_shape_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::foreign_network_rep_blob_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::furthest_point_sampling_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::degamma_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::linear_quantize_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::linear_dequantize_params_t>(a1, a2, 0);
}

void Espresso::SerDes::operator>>(_QWORD *a1, _DWORD *a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::sequence_concat_params>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::sequence_repeat_params>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::fused_kernel_parameters>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::load_constant_params>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::context_transfer_params>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::tile_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::rnn_params>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::transpose_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::flatten_params>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::crop_params>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::space_to_depth_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::slice_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::cast_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::dynamic_quantize_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::quantized_gather_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::cf_jump_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::get_shape_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::gather_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::cf_loop_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::cf_for_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::copy_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::expand_dims_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::multinomial_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::transplant_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::stack_nd_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::split_nd_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::softmax_nd_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::sliding_windows_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::reverse_seq_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::sparse_inner_product_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::local_correlation_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::bahdanau_attention_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::slice_update_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::resize_nearest_neighbor_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::tensor_shape_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::foreign_network_rep_blob_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::furthest_point_sampling_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::degamma_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::linear_quantize_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::linear_dequantize_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_191768048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1917681D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::operator<<(uint64_t a1, _DWORD *a2)
{
  Espresso::SerDes::params_io<Espresso::sequence_concat_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::sequence_repeat_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::fused_kernel_parameters>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::load_constant_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::context_transfer_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::tile_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::rnn_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::transpose_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::flatten_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::crop_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::space_to_depth_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::slice_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::cast_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::dynamic_quantize_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::quantized_gather_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::cf_jump_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::get_shape_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::gather_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::cf_loop_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::cf_for_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::copy_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::expand_dims_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::multinomial_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::transplant_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::stack_nd_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::split_nd_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::softmax_nd_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::sliding_windows_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::reverse_seq_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::sparse_inner_product_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::local_correlation_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::bahdanau_attention_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::slice_update_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::resize_nearest_neighbor_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::tensor_shape_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::foreign_network_rep_blob_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::furthest_point_sampling_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::degamma_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::linear_quantize_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::linear_dequantize_params_t>(a1, a2, 1);
}

void Espresso::SerDes::operator<<(_QWORD *a1, _DWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::sequence_concat_params>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::sequence_repeat_params>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::fused_kernel_parameters>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::load_constant_params>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::context_transfer_params>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::tile_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::rnn_params>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::transpose_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::flatten_params>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::crop_params>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::space_to_depth_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::slice_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::cast_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::dynamic_quantize_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::quantized_gather_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::cf_jump_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::get_shape_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::gather_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::cf_loop_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::cf_for_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::copy_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::expand_dims_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::multinomial_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::transplant_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::stack_nd_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::split_nd_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::softmax_nd_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::sliding_windows_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::reverse_seq_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::sparse_inner_product_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::local_correlation_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::bahdanau_attention_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::slice_update_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::resize_nearest_neighbor_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::tensor_shape_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::foreign_network_rep_blob_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::furthest_point_sampling_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::degamma_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::linear_quantize_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::linear_dequantize_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_191768298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::operator<<(_QWORD *a1, _QWORD *a2)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (uint64_t)(a2[1] - *a2) >> 2);
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::sequence_concat_params>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      ++v4;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (uint64_t)(a2[1] - *a2) >> 2);
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::sequence_repeat_params>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      ++v4;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (uint64_t)(a2[1] - *a2) >> 4);
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::fused_kernel_parameters>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 4;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::load_constant_params>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 6;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (uint64_t)(a2[1] - *a2) >> 5);
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::context_transfer_params>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 8;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 2));
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::tile_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 5;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (uint64_t)(a2[1] - *a2) >> 6);
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::rnn_params>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 16;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 2));
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::transpose_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 5;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (uint64_t)(a2[1] - *a2) >> 3);
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::flatten_params>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 2;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (uint64_t)(a2[1] - *a2) >> 4);
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::crop_params>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 4;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 2));
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::space_to_depth_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 3;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::slice_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 6;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (uint64_t)(a2[1] - *a2) >> 3);
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::cast_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 2;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (uint64_t)(a2[1] - *a2) >> 3);
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::dynamic_quantize_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 2;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (uint64_t)(a2[1] - *a2) >> 4);
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::quantized_gather_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 4;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (uint64_t)(a2[1] - *a2) >> 2);
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::cf_jump_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      ++v4;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (uint64_t)(a2[1] - *a2) >> 3);
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::get_shape_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 2;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 2));
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::gather_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 5;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (uint64_t)(a2[1] - *a2) >> 2);
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::cf_loop_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      ++v4;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (uint64_t)(a2[1] - *a2) >> 3);
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::cf_for_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 2;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (uint64_t)(a2[1] - *a2) >> 2);
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::copy_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      ++v4;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  v4 = (_BYTE *)*a2;
  v5 = (_BYTE *)a2[1];
  if ((_BYTE *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::batch_matmul_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 3;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(a2[1] - *a2) >> 3));
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::expand_dims_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 34;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (uint64_t)(a2[1] - *a2) >> 3);
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::multinomial_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 2;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 2));
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::transplant_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 5;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (uint64_t)(a2[1] - *a2) >> 2);
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::stack_nd_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      ++v4;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xFC0FC0FC0FC0FC1 * ((uint64_t)(a2[1] - *a2) >> 3));
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::split_nd_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 130;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (uint64_t)(a2[1] - *a2) >> 2);
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::softmax_nd_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      ++v4;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 2));
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::sliding_windows_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 3;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (uint64_t)(a2[1] - *a2) >> 3);
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::reverse_seq_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 2;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (uint64_t)(a2[1] - *a2) >> 1);
  v4 = (_BYTE *)*a2;
  v5 = (_BYTE *)a2[1];
  if ((_BYTE *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::cumsum_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 2;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 2));
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::sparse_inner_product_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 3;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (uint64_t)(a2[1] - *a2) >> 4);
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::local_correlation_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 4;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 2));
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::bahdanau_attention_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 3;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[1] - *a2) >> 2));
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::slice_update_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 7;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0x82FA0BE82FA0BE83 * ((uint64_t)(a2[1] - *a2) >> 2));
  v4 = (_BYTE *)*a2;
  v5 = (_BYTE *)a2[1];
  if ((_BYTE *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::fused_convolution_grad_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 172;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(a2[1] - *a2) >> 3));
  v4 = (_BYTE *)*a2;
  v5 = (_BYTE *)a2[1];
  if ((_BYTE *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::fused_inner_product_grad_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 136;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (uint64_t)(a2[1] - *a2) >> 4);
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::resize_nearest_neighbor_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 4;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::tensor_shape_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 6;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a2[1] - *a2) >> 3));
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::foreign_network_rep_blob_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 22;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 2));
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::furthest_point_sampling_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 3;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (uint64_t)(a2[1] - *a2) >> 2);
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::degamma_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      ++v4;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (uint64_t)(a2[1] - *a2) >> 3);
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::linear_quantize_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 2;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, (uint64_t)(a2[1] - *a2) >> 3);
  v4 = (_DWORD *)*a2;
  v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::linear_dequantize_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 2;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

void sub_191768480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::operator>>(_QWORD *a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v6, *a1, v2);
    v3 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v6, *a1, v2);
    v3 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v6, *a1, v2);
    v3 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v6, *a1, v2);
    v3 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v6, *a1, v2);
    v3 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v6, *a1, v2);
    v3 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v6, *a1, v2);
    v3 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v6, *a1, v2);
    v3 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v6, *a1, v2);
    v3 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v6, *a1, v2);
    v3 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

void sub_191768644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::operator<<(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v5);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v5);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v5);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v5);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v5);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v5);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v5);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v5);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v5);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v5);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v5);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v5);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v5);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v5);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v5);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v5);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v5);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v5);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v5);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v5);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1917686EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1917688C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_1917689A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191768B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191768C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191768DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::control_flow_graph::~control_flow_graph(Espresso::control_flow_graph *this)
{
  void **v1;

  *(_QWORD *)this = &off_1E2D830F8;
  v1 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v1;

  *(_QWORD *)this = &off_1E2D830F8;
  v1 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::control_flow_graph::deserialize()
{
  return 0;
}

void Espresso::control_flow_graph::serialize(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::pass_control_flow_graph::~pass_control_flow_graph(Espresso::pass_control_flow_graph *this)
{
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_control_flow_graph::get_analysis_usage(uint64_t a1, _BYTE *a2)
{
  *a2 = 1;
}

void Espresso::pass_control_flow_graph::run_on_network(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v17;
  void *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  _QWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  __int128 *v42;
  __int128 *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  unint64_t *v49;
  unint64_t v50;
  void *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *p_shared_weak_owners;
  unint64_t v56;
  char v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  __int128 *v71;
  unint64_t *v72;
  unint64_t v73;
  __int128 *v74;
  unint64_t *v75;
  unint64_t v76;
  __int128 *v77;
  __int128 *v78;
  unint64_t *v79;
  unint64_t v80;
  void *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  char v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  __int128 *v91;
  unint64_t *v92;
  unint64_t v93;
  void *v94;
  unint64_t *v95;
  unint64_t v96;
  char *v97;
  char *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t *v101;
  __int128 *v102;
  unint64_t *v103;
  unint64_t v104;
  void *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t *v110;
  unint64_t *v111;
  unint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  uint64_t *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  uint64_t *v128;
  uint64_t p_on_zero_shared;
  _QWORD *v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  _QWORD *v138;
  unint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  char *v150;
  __int128 v151;
  int64x2_t v152;
  _OWORD *v153;
  uint64_t v154;
  void *v155;
  unint64_t *v156;
  unint64_t v157;
  _QWORD *v158;
  uint64_t *v159;
  unint64_t v160;
  _QWORD *v161;
  std::__shared_weak_count *v162;
  uint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  const void *v170;
  __int128 *v171;
  __int128 *v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  _QWORD *v176;
  float *v177;
  _QWORD *v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t i;
  uint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  uint64_t *v191;
  uint64_t *v192;
  unint64_t *v193;
  unint64_t v194;
  float *v195;
  uint64_t *v196;
  unint64_t v197;
  unint64_t *v198;
  unint64_t v199;
  unint64_t *v200;
  unint64_t v201;
  __int128 *v202;
  unint64_t *v203;
  unint64_t v204;
  uint64_t *v205;
  _QWORD *v206;
  __int128 *v207;
  unint64_t *v208;
  unint64_t v209;
  uint64_t *v210;
  _QWORD *v211;
  __int128 *v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  uint64_t *v216;
  _QWORD *v217;
  unint64_t *v218;
  unint64_t v219;
  unint64_t *v220;
  unint64_t v221;
  unint64_t *v222;
  unint64_t *v223;
  std::__shared_weak_count *v224;
  unint64_t v225;
  unint64_t *v226;
  unint64_t v227;
  _QWORD *j;
  unint64_t *v229;
  unint64_t v230;
  char *v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  void *v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  uint64_t v241;
  _QWORD *v242;
  Espresso::net *v243;
  uint64_t *v244;
  _QWORD *v245;
  uint64_t *v246;
  _QWORD *v247[2];
  uint64_t *v248[2];
  void *v249;
  std::__shared_weak_count *v250;
  __int128 *v251;
  std::__shared_weak_count *v252;
  char *v253;
  std::__shared_weak_count *v254;
  unint64_t v255;
  std::__shared_weak_count *v256;
  __int128 *v257;
  std::__shared_weak_count *v258;
  __int128 *v259;
  std::__shared_weak_count *v260;
  __int128 *v261;
  std::__shared_weak_count *v262;
  __int128 *v263;
  std::__shared_weak_count *v264;
  __int128 **v265;
  std::__shared_weak_count *v266;
  __int128 *v267;
  std::__shared_weak_count *v268;
  __int128 v269;
  unint64_t v270;
  __int128 __p;
  __int128 v272;
  int v273;
  _QWORD v274[4];
  int v275;
  _QWORD v276[4];
  int v277;
  _QWORD v278[4];
  int v279;
  _QWORD v280[4];
  int v281;
  char *v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;

  v5 = operator new(0x40uLL);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = &off_1E2DBB908;
  v5[6] = 0;
  v5[7] = 0;
  v5[3] = &off_1E2D830F8;
  v5[4] = 0;
  v245 = v5 + 4;
  v5[5] = 0;
  *((_WORD *)v5 + 28) = 0;
  v282 = (char *)(v5 + 3);
  v283 = (std::__shared_weak_count *)v5;
  memset(v280, 0, sizeof(v280));
  v281 = 1065353216;
  memset(v278, 0, sizeof(v278));
  v279 = 1065353216;
  memset(v276, 0, sizeof(v276));
  v277 = 1065353216;
  memset(v274, 0, sizeof(v274));
  v275 = 1065353216;
  __p = 0u;
  v272 = 0u;
  v273 = 1065353216;
  v6 = *((_QWORD *)a1 + 4);
  v7 = *((_QWORD *)a1 + 5);
  v242 = v5;
  v243 = a1;
  v241 = a2;
  if (v7 != v6)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v246 = (uint64_t *)(*(_QWORD *)(v6 + v8) + 16);
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&__p, (uint64_t)v246, (uint64_t)&std::piecewise_construct, (__int128 **)&v246)[5] = v9++;
      v6 = *((_QWORD *)v243 + 4);
      v7 = *((_QWORD *)v243 + 5);
      v8 += 16;
    }
    while (v9 < (v7 - v6) >> 4);
    v270 = 0;
    if (v7 != v6)
    {
      v10 = 0;
      v11 = (uint64_t)v243 + 56;
      while (1)
      {
        v12 = *(_QWORD *)(v6 + 16 * v10);
        v13 = *(uint64_t **)(v12 + 64);
        v14 = *(std::__shared_weak_count **)(v12 + 72);
        v246 = v13;
        v247[0] = &v14->__vftable;
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldxr(p_shared_owners);
          while (__stxr(v16 + 1, p_shared_owners));
        }
        if (!v13)
          break;
        if (v17)
        {
          v18 = v17;
          *(_QWORD *)&v269 = v17;
          *((_QWORD *)&v269 + 1) = v14;
          if (v14)
          {
            v19 = (unint64_t *)&v14->__shared_owners_;
            do
              v20 = __ldxr(v19);
            while (__stxr(v20 + 1, v19));
          }
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v280, &v270, &v270);
          v267 = (__int128 *)(*(uint64_t (**)(void *))(*(_QWORD *)v18 + 320))(v18);
          v21 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&__p, (uint64_t)v267, (uint64_t)&std::piecewise_construct, &v267);
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v278, (unint64_t *)v21 + 5, v21 + 5);
          v267 = (__int128 *)((*(uint64_t (**)(void *))(*(_QWORD *)v18 + 320))(v18) + 24);
          v22 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&__p, (uint64_t)v267, (uint64_t)&std::piecewise_construct, &v267);
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v278, (unint64_t *)v22 + 5, v22 + 5);
          *((_BYTE *)v5 + 57) = 1;
          if (!v14)
            goto LABEL_100;
LABEL_96:
          v66 = (unint64_t *)&v14->__shared_owners_;
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
          goto LABEL_100;
        }
        v269 = 0uLL;
        if (v42)
        {
          v43 = v42;
          v267 = v42;
          v268 = v14;
          if (v14)
          {
            v44 = (unint64_t *)&v14->__shared_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
          }
          v265 = (__int128 **)(v10 + 1);
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t)v280, (unint64_t *)&v265, &v265);
          v265 = (__int128 **)v43 + 37;
          v46 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&__p, (uint64_t)v43 + 296, (uint64_t)&std::piecewise_construct, (__int128 **)&v265);
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v278, (unint64_t *)v46 + 5, v46 + 5);
          *((_BYTE *)v5 + 57) = 1;
          if (v14)
            goto LABEL_91;
          goto LABEL_95;
        }
        v267 = 0;
        v268 = 0;
        if (v47)
        {
          v48 = v47;
          v265 = (__int128 **)v47;
          v266 = v14;
          if (v14)
          {
            v49 = (unint64_t *)&v14->__shared_owners_;
            do
              v50 = __ldxr(v49);
            while (__stxr(v50 + 1, v49));
          }
          v263 = (__int128 *)(v10 + 1);
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t)v278, (unint64_t *)&v263, &v263);
          v51 = (void *)*((_QWORD *)v243 + 121);
          if (v51
          {
            v52 = (std::__shared_weak_count *)*((_QWORD *)v243 + 122);
            if (v52)
            {
              v53 = (unint64_t *)&v52->__shared_owners_;
              do
                v54 = __ldxr(v53);
              while (__stxr(v54 + 1, v53));
              p_shared_weak_owners = (unint64_t *)&v52->__shared_weak_owners_;
              do
                v56 = __ldxr(p_shared_weak_owners);
              while (__stxr(v56 + 1, p_shared_weak_owners));
              v57 = 0;
LABEL_79:
              v58 = (std::__shared_weak_count *)v48[39];
              v48[38] = (uint64_t)v51;
              v48[39] = (uint64_t)v52;
              if (v58)
                std::__shared_weak_count::__release_weak(v58);
              if ((v57 & 1) == 0)
              {
                v59 = (unint64_t *)&v52->__shared_owners_;
                do
                  v60 = __ldaxr(v59);
                while (__stlxr(v60 - 1, v59));
                if (!v60)
                {
                  ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                  v41 = v52;
                  goto LABEL_58;
                }
              }
              goto LABEL_85;
            }
          }
          else
          {
            v52 = 0;
          }
          v57 = 1;
          goto LABEL_79;
        }
        v265 = 0;
        v266 = 0;
        if (v71)
        {
          v263 = v71;
          v264 = v14;
          if (v14)
          {
            v72 = (unint64_t *)&v14->__shared_owners_;
            do
              v73 = __ldxr(v72);
            while (__stxr(v73 + 1, v72));
          }
          v261 = (__int128 *)(v10 + 1);
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t)v274, (unint64_t *)&v261, &v261);
          goto LABEL_53;
        }
        v263 = 0;
        v264 = 0;
        if (!v74)
        {
          v261 = 0;
          v262 = 0;
          if (v77)
          {
            v78 = v77;
            v259 = v77;
            v260 = v14;
            if (v14)
            {
              v79 = (unint64_t *)&v14->__shared_owners_;
              do
                v80 = __ldxr(v79);
              while (__stxr(v80 + 1, v79));
            }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v274, &v270, &v270);
            v81 = (void *)*((_QWORD *)v243 + 121);
            if (v81
            {
              v82 = (std::__shared_weak_count *)*((_QWORD *)v243 + 122);
              if (v82)
              {
                v83 = (unint64_t *)&v82->__shared_owners_;
                do
                  v84 = __ldxr(v83);
                while (__stxr(v84 + 1, v83));
                v85 = (unint64_t *)&v82->__shared_weak_owners_;
                do
                  v86 = __ldxr(v85);
                while (__stxr(v86 + 1, v85));
                v87 = 0;
LABEL_132:
                v88 = (std::__shared_weak_count *)*((_QWORD *)v78 + 43);
                *((_QWORD *)v78 + 42) = v81;
                *((_QWORD *)v78 + 43) = v82;
                if (v88)
                  std::__shared_weak_count::__release_weak(v88);
                if ((v87 & 1) == 0)
                {
                  v89 = (unint64_t *)&v82->__shared_owners_;
                  do
                    v90 = __ldaxr(v89);
                  while (__stlxr(v90 - 1, v89));
                  if (!v90)
                  {
                    ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                    v33 = v82;
LABEL_40:
                    std::__shared_weak_count::__release_weak(v33);
                  }
                }
                goto LABEL_41;
              }
            }
            else
            {
              v82 = 0;
            }
            v87 = 1;
            goto LABEL_132;
          }
          v259 = 0;
          v260 = 0;
          if (v91)
          {
            v257 = v91;
            v258 = v14;
            if (v14)
            {
              v92 = (unint64_t *)&v14->__shared_owners_;
              do
                v93 = __ldxr(v92);
              while (__stxr(v93 + 1, v92));
            }
            v255 = v10 + 1;
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t)v278, &v255, &v255);
            *((_BYTE *)v5 + 57) = 1;
            if (!v14)
              goto LABEL_41;
LABEL_36:
            v31 = (unint64_t *)&v14->__shared_owners_;
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              v33 = v14;
              goto LABEL_40;
            }
LABEL_41:
            v34 = v260;
            if (v260)
            {
              v35 = (unint64_t *)&v260->__shared_owners_;
              do
                v36 = __ldaxr(v35);
              while (__stlxr(v36 - 1, v35));
              if (!v36)
              {
                ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                std::__shared_weak_count::__release_weak(v34);
              }
            }
            v14 = v262;
            goto LABEL_47;
          }
          v257 = 0;
          v258 = 0;
          if (v94)
          {
            v255 = (unint64_t)v94;
            v256 = v14;
            if (v14)
            {
              v95 = (unint64_t *)&v14->__shared_owners_;
              do
                v96 = __ldxr(v95);
              while (__stxr(v96 + 1, v95));
            }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v278, &v270, &v270);
            *((_WORD *)v5 + 28) = 257;
            if (!v14)
            {
LABEL_35:
              v14 = v258;
              if (!v258)
                goto LABEL_41;
              goto LABEL_36;
            }
LABEL_31:
            v29 = (unint64_t *)&v14->__shared_owners_;
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
            goto LABEL_35;
          }
          v255 = 0;
          v256 = 0;
          if (v97)
          {
            v98 = v97;
            v253 = v97;
            v254 = v14;
            if (v14)
            {
              v99 = (unint64_t *)&v14->__shared_owners_;
              do
                v100 = __ldxr(v99);
              while (__stxr(v100 + 1, v99));
            }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v278, &v270, &v270);
            v251 = (__int128 *)(v98 + 296);
            v101 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&__p, (uint64_t)(v98 + 296), (uint64_t)&std::piecewise_construct, &v251);
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v278, (unint64_t *)v101 + 5, v101 + 5);
            *((_WORD *)v5 + 28) = 257;
            if (!v14)
              goto LABEL_30;
            goto LABEL_26;
          }
          v253 = 0;
          v254 = 0;
          if (v102)
          {
            v251 = v102;
            v252 = v14;
            if (v14)
            {
              v103 = (unint64_t *)&v14->__shared_owners_;
              do
                v104 = __ldxr(v103);
              while (__stxr(v104 + 1, v103));
            }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v278, &v270, &v270);
            v249 = (void *)(v270 + 1);
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t)v278, (unint64_t *)&v249, &v249);
LABEL_20:
            if (v14)
            {
              v25 = (unint64_t *)&v14->__shared_owners_;
              do
                v26 = __ldaxr(v25);
              while (__stlxr(v26 - 1, v25));
              if (!v26)
              {
                ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
                std::__shared_weak_count::__release_weak(v14);
              }
            }
            v14 = v254;
            if (!v254)
            {
LABEL_30:
              v14 = v256;
              if (!v256)
                goto LABEL_35;
              goto LABEL_31;
            }
LABEL_26:
            v27 = (unint64_t *)&v14->__shared_owners_;
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
            goto LABEL_30;
          }
          v251 = 0;
          v252 = 0;
          if (v105)
          {
            v249 = v105;
            v250 = v14;
            if (v14)
            {
              v106 = (unint64_t *)&v14->__shared_owners_;
              do
                v107 = __ldxr(v106);
              while (__stxr(v107 + 1, v106));
            }
            v248[0] = (uint64_t *)(v10 + 1);
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t)v278, (unint64_t *)v248, v248);
            if (v14)
            {
              v108 = (unint64_t *)&v14->__shared_owners_;
              do
                v109 = __ldaxr(v108);
              while (__stlxr(v109 - 1, v108));
              if (!v109)
              {
                ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
                std::__shared_weak_count::__release_weak(v14);
              }
            }
            goto LABEL_19;
          }
          v249 = 0;
          v250 = 0;
          if (v110)
          {
            v248[0] = v110;
            v248[1] = (uint64_t *)v14;
            if (v14)
            {
              v111 = (unint64_t *)&v14->__shared_owners_;
              do
                v112 = __ldxr(v111);
              while (__stxr(v112 + 1, v111));
            }
            v284 = &v270;
            v113 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v11, &v270, (uint64_t)&std::piecewise_construct, (uint64_t **)&v284);
            v115 = v113[3];
            v114 = v113[4];
            if (v14)
            {
              v116 = (unint64_t *)&v14->__shared_owners_;
              do
                v117 = __ldaxr(v116);
              while (__stlxr(v117 - 1, v116));
              if (!v117)
              {
                ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
                std::__shared_weak_count::__release_weak(v14);
              }
            }
            if (v114 != v115)
            {
LABEL_18:
              v248[0] = (uint64_t *)(v270 + 1);
              std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t)v274, (unint64_t *)v248, v248);
              goto LABEL_19;
            }
          }
LABEL_17:
          v23 = v246;
          v248[0] = (uint64_t *)&v270;
          v24 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v11, &v270, (uint64_t)&std::piecewise_construct, v248);
          if ((*(unsigned int (**)(uint64_t *, unint64_t))(*v23 + 264))(v23, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24[4] - v24[3]) >> 3)))
          {
            goto LABEL_18;
          }
LABEL_19:
          v14 = v252;
          goto LABEL_20;
        }
        v261 = v74;
        v262 = v14;
        if (v14)
        {
          v75 = (unint64_t *)&v14->__shared_owners_;
          do
            v76 = __ldxr(v75);
          while (__stxr(v76 + 1, v75));
        }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v274, &v270, &v270);
LABEL_47:
        if (v14)
        {
          v37 = (unint64_t *)&v14->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v14 = v264;
LABEL_53:
        if (v14)
        {
          v39 = (unint64_t *)&v14->__shared_owners_;
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            v41 = v14;
LABEL_58:
            std::__shared_weak_count::__release_weak(v41);
          }
        }
LABEL_85:
        v61 = v266;
        if (v266)
        {
          v62 = (unint64_t *)&v266->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v14 = v268;
        if (v268)
        {
LABEL_91:
          v64 = (unint64_t *)&v14->__shared_owners_;
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
LABEL_95:
        v14 = (std::__shared_weak_count *)*((_QWORD *)&v269 + 1);
        if (*((_QWORD *)&v269 + 1))
          goto LABEL_96;
LABEL_100:
        v68 = (std::__shared_weak_count *)v247[0];
        if (v247[0])
        {
          v69 = v247[0] + 1;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }
        v10 = v270 + 1;
        v270 = v10;
        v6 = *((_QWORD *)v243 + 4);
        v7 = *((_QWORD *)v243 + 5);
        if (v10 >= (v7 - v6) >> 4)
        {
          v118 = (v7 - v6) >> 4;
          goto LABEL_183;
        }
      }
      v269 = 0uLL;
      v267 = 0;
      v268 = 0;
      v265 = 0;
      v266 = 0;
      v263 = 0;
      v264 = 0;
      v261 = 0;
      v262 = 0;
      v259 = 0;
      v260 = 0;
      v257 = 0;
      v258 = 0;
      v255 = 0;
      v256 = 0;
      v253 = 0;
      v254 = 0;
      v251 = 0;
      v252 = 0;
      v249 = 0;
      v250 = 0;
      goto LABEL_17;
    }
  }
  v118 = 0;
  v6 = v7;
LABEL_183:
  v119 = 0;
  v120 = 0;
  v255 = 0;
  v247[0] = 0;
  v247[1] = 0;
  v246 = (uint64_t *)v247;
  do
  {
    if (!v120
      || v120 == v118
      || std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v280, v120)|| std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v278, v120)|| std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v276, v120)|| std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v274, v120))
    {
      if (v119 >= v120)
      {
LABEL_234:
        v255 = v120;
        v119 = v120;
        goto LABEL_235;
      }
      v122 = v5[4];
      v121 = v5[5];
      std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v246, v119, (uint64_t *)&v255)[5] = (v121 - v122) >> 4;
      v123 = (std::__shared_weak_count *)operator new(0xE0uLL);
      v123->__shared_owners_ = 0;
      v124 = (unint64_t *)&v123->__shared_owners_;
      v123->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6AB8;
      v125 = (uint64_t *)&v123[1];
      v123->__shared_weak_owners_ = 0;
      v123[1].__vftable = (std::__shared_weak_count_vtbl *)&v123[1];
      v123[1].__shared_owners_ = (uint64_t)&v123[1];
      *(_OWORD *)&v123[1].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v123[2].__shared_owners_ = 0u;
      v123[3].std::__shared_count = 0u;
      *(_OWORD *)&v123[3].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v123[4].__shared_owners_ = 0u;
      v123[5].__vftable = 0;
      LODWORD(v123[5].__shared_owners_) = 1065353216;
      *(_OWORD *)&v123[5].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v123[6].__shared_owners_ = 0u;
      LODWORD(v123[7].__vftable) = 1065353216;
      *(_OWORD *)&v123[7].__shared_owners_ = 0u;
      v123[8].std::__shared_count = 0u;
      LODWORD(v123[8].__shared_weak_owners_) = 1065353216;
      v123[9].__vftable = (std::__shared_weak_count_vtbl *)v243;
      v267 = (__int128 *)v119;
      do
      {
        v126 = (std::__shared_weak_count *)operator new(0x58uLL);
        v126->__shared_owners_ = 0;
        v127 = (unint64_t *)&v126->__shared_owners_;
        v126->__shared_weak_owners_ = 0;
        v126->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6A80;
        v126[1].std::__shared_count = 0u;
        *(_OWORD *)&v126[1].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v126[2].__shared_owners_ = 0u;
        v126[3].std::__shared_count = 0u;
        v128 = (uint64_t *)((char *)v123[9].__on_zero_shared_weak + 16 * v119);
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v126[1].__vftable, *v128, v128[1]);
        p_on_zero_shared = (uint64_t)&v123[9].__vftable[2].__on_zero_shared;
        v265 = &v267;
        v130 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(p_on_zero_shared, (unint64_t *)&v267, (uint64_t)&std::piecewise_construct, (uint64_t **)&v265);
        if (&v126[1].__shared_weak_owners_ != v130 + 3)
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v126[1].__shared_weak_owners_, (std::string *)v130[3], (std::string *)v130[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v130[4] - v130[3]) >> 3));
        v131 = (uint64_t)&v123[9].__vftable[1].__on_zero_shared;
        v265 = &v267;
        v132 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v131, (unint64_t *)&v267, (uint64_t)&std::piecewise_construct, (uint64_t **)&v265);
        if (&v126[2].__shared_weak_owners_ != v132 + 3)
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v126[2].__shared_weak_owners_, (std::string *)v132[3], (std::string *)v132[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v132[4] - v132[3]) >> 3));
        v133 = operator new(0x20uLL);
        v133[2] = v126 + 1;
        v133[3] = v126;
        do
          v134 = __ldxr(v127);
        while (__stxr(v134 + 1, v127));
        v135 = *v125;
        *v133 = *v125;
        v133[1] = v125;
        *(_QWORD *)(v135 + 8) = v133;
        *v125 = (uint64_t)v133;
        ++v123[1].__shared_weak_owners_;
        do
          v136 = __ldaxr(v127);
        while (__stlxr(v136 - 1, v127));
        if (!v136)
        {
          ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
          std::__shared_weak_count::__release_weak(v126);
        }
        v119 = (unint64_t)v267 + 1;
        v267 = (__int128 *)v119;
      }
      while (v119 < v120);
      *(_QWORD *)&v269 = v123 + 1;
      *((_QWORD *)&v269 + 1) = v123;
      v5 = v242;
      v138 = (_QWORD *)v242[5];
      v137 = v242[6];
      if ((unint64_t)v138 >= v137)
      {
        v140 = (_QWORD *)*v245;
        v141 = ((uint64_t)v138 - *v245) >> 4;
        v142 = v141 + 1;
        if ((unint64_t)(v141 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v143 = v137 - (_QWORD)v140;
        if (v143 >> 3 > v142)
          v142 = v143 >> 3;
        if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFF0)
          v144 = 0xFFFFFFFFFFFFFFFLL;
        else
          v144 = v142;
        if (v144 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v145 = (char *)operator new(16 * v144);
        v146 = &v145[16 * v141];
        v147 = *((_QWORD *)&v269 + 1);
        *(_OWORD *)v146 = v269;
        if (v147)
        {
          v148 = (unint64_t *)(v147 + 8);
          do
            v149 = __ldxr(v148);
          while (__stxr(v149 + 1, v148));
          v140 = (_QWORD *)v242[4];
          v138 = (_QWORD *)v242[5];
        }
        if (v138 == v140)
        {
          v152 = vdupq_n_s64((unint64_t)v138);
          v150 = &v145[16 * v141];
        }
        else
        {
          v150 = &v145[16 * v141];
          do
          {
            v151 = *((_OWORD *)v138 - 1);
            v138 -= 2;
            *((_OWORD *)v150 - 1) = v151;
            v150 -= 16;
            *v138 = 0;
            v138[1] = 0;
          }
          while (v138 != v140);
          v152 = *(int64x2_t *)v245;
        }
        v153 = v146 + 16;
        v242[4] = v150;
        v242[5] = v146 + 16;
        v242[6] = &v145[16 * v144];
        v154 = v152.i64[1];
        v155 = (void *)v152.i64[0];
        while ((void *)v154 != v155)
          v154 = std::shared_ptr<void>::~shared_ptr[abi:ne180100](v154 - 16);
        if (v155)
          operator delete(v155);
        v123 = (std::__shared_weak_count *)*((_QWORD *)&v269 + 1);
        v242[5] = v153;
        if (!v123)
          goto LABEL_233;
      }
      else
      {
        *v138 = v269;
        v138[1] = v123;
        do
          v139 = __ldxr(v124);
        while (__stxr(v139 + 1, v124));
        v242[5] = v138 + 2;
      }
      v156 = (unint64_t *)&v123->__shared_owners_;
      do
        v157 = __ldaxr(v156);
      while (__stlxr(v157 - 1, v156));
      if (!v157)
      {
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
      }
LABEL_233:
      v6 = *((_QWORD *)v243 + 4);
      v7 = *((_QWORD *)v243 + 5);
      goto LABEL_234;
    }
LABEL_235:
    ++v120;
    v118 = (v7 - v6) >> 4;
  }
  while (v120 <= v118);
  v158 = v5;
  v159 = (uint64_t *)v5[4];
  v244 = (uint64_t *)v158[5];
  if (v159 != v244)
  {
    v160 = 0;
    v161 = v245;
    do
    {
      v163 = *v159;
      v162 = (std::__shared_weak_count *)v159[1];
      *(_QWORD *)&v269 = *v159;
      *((_QWORD *)&v269 + 1) = v162;
      if (v162)
      {
        v164 = (unint64_t *)&v162->__shared_owners_;
        do
          v165 = __ldxr(v164);
        while (__stxr(v165 + 1, v164));
      }
      v166 = v242[4];
      if (v160 < ((v242[5] - v166) >> 4) - 1)
        std::__hash_table<Espresso::basic_block *,std::hash<Espresso::basic_block *>,std::equal_to<Espresso::basic_block *>,std::allocator<Espresso::basic_block *>>::__emplace_unique_key_args<Espresso::basic_block *,Espresso::basic_block *>((float *)(v163 + 152), *(_QWORD *)(v166 + 16 * v160 + 16), *(_QWORD *)(v166 + 16 * v160 + 16));
      v167 = *(_QWORD *)(v163 + 8);
      if (v167 != v163)
      {
        while (1)
        {
          v168 = *(uint64_t **)(v167 + 16);
          v169 = *v168;
          v170 = *(const void **)(*v168 + 64);
          if (!v170)
            break;
          if (v171)
          {
            v172 = v171;
            v173 = *(std::__shared_weak_count **)(v169 + 72);
            v267 = v171;
            v268 = v173;
            if (v173)
            {
              v174 = (unint64_t *)&v173->__shared_owners_;
              do
                v175 = __ldxr(v174);
              while (__stxr(v175 + 1, v174));
            }
            v176 = (_QWORD *)v269;
            v177 = (float *)(v269 + 152);
            if (*(_QWORD *)(v269 + 176))
            {
              v178 = *(_QWORD **)(v269 + 168);
              if (v178)
              {
                do
                {
                  v179 = (_QWORD *)*v178;
                  operator delete(v178);
                  v178 = v179;
                }
                while (v179);
              }
              v176[21] = 0;
              v180 = v176[20];
              if (v180)
              {
                for (i = 0; i != v180; ++i)
                  *(_QWORD *)(*(_QWORD *)v177 + 8 * i) = 0;
              }
              v176[22] = 0;
              v161 = v245;
            }
            v265 = (__int128 **)v172 + 37;
            v182 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&__p, (uint64_t)v172 + 296, (uint64_t)&std::piecewise_construct, (__int128 **)&v265);
            v183 = *(_QWORD *)(*v161 + 16 * *std::map<unsigned long,unsigned long>::at(v247[0], v182[5]));
            std::__hash_table<Espresso::basic_block *,std::hash<Espresso::basic_block *>,std::equal_to<Espresso::basic_block *>,std::allocator<Espresso::basic_block *>>::__emplace_unique_key_args<Espresso::basic_block *,Espresso::basic_block *>(v177, v183, v183);
            if (!v173)
              goto LABEL_287;
            goto LABEL_283;
          }
          v267 = 0;
          v268 = 0;
          if (v191)
          {
            v192 = v191;
            v190 = *(std::__shared_weak_count **)(v169 + 72);
            v265 = (__int128 **)v191;
            v266 = v190;
            if (v190)
            {
              v193 = (unint64_t *)&v190->__shared_owners_;
              do
                v194 = __ldxr(v193);
              while (__stxr(v194 + 1, v193));
            }
            v195 = (float *)(v269 + 152);
            std::__hash_table<Espresso::basic_block *,std::hash<Espresso::basic_block *>,std::equal_to<Espresso::basic_block *>,std::allocator<Espresso::basic_block *>>::__emplace_unique_key_args<Espresso::basic_block *,Espresso::basic_block *>((float *)(v269 + 152), v269, v269);
            v263 = (__int128 *)(v192 + 37);
            v196 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&__p, (uint64_t)(v192 + 37), (uint64_t)&std::piecewise_construct, &v263);
            v197 = *(_QWORD *)(*v161 + 16 * *std::map<unsigned long,unsigned long>::at(v247[0], v196[5]));
            std::__hash_table<Espresso::basic_block *,std::hash<Espresso::basic_block *>,std::equal_to<Espresso::basic_block *>,std::allocator<Espresso::basic_block *>>::__emplace_unique_key_args<Espresso::basic_block *,Espresso::basic_block *>(v195, v197, v197);
            goto LABEL_277;
          }
          v265 = 0;
          v266 = 0;
          if (!v202)
          {
            v263 = 0;
            v264 = 0;
            if (v207)
            {
              v184 = *(std::__shared_weak_count **)(v169 + 72);
              v261 = v207;
              v262 = v184;
              if (v184)
              {
                v208 = (unint64_t *)&v184->__shared_owners_;
                do
                  v209 = __ldxr(v208);
                while (__stxr(v209 + 1, v208));
              }
              v259 = (__int128 *)((char *)v207 + 296);
              v210 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&__p, (uint64_t)v207 + 296, (uint64_t)&std::piecewise_construct, &v259);
              v211 = std::map<unsigned long,unsigned long>::at(v247[0], v210[5]);
              std::__hash_table<Espresso::basic_block *,std::hash<Espresso::basic_block *>,std::equal_to<Espresso::basic_block *>,std::allocator<Espresso::basic_block *>>::__emplace_unique_key_args<Espresso::basic_block *,Espresso::basic_block *>((float *)(v269 + 152), *(_QWORD *)(*v161 + 16 * *v211), *(_QWORD *)(*v161 + 16 * *v211));
              goto LABEL_260;
            }
            v261 = 0;
            v262 = 0;
            if (v212)
            {
              v213 = *(std::__shared_weak_count **)(v169 + 72);
              v259 = v212;
              v260 = v213;
              if (v213)
              {
                v214 = (unint64_t *)&v213->__shared_owners_;
                do
                  v215 = __ldxr(v214);
                while (__stxr(v215 + 1, v214));
              }
              if (*((_BYTE *)v212 + 281))
              {
                v257 = v212 + 18;
                v216 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&__p, (uint64_t)(v212 + 18), (uint64_t)&std::piecewise_construct, &v257);
                v217 = std::map<unsigned long,unsigned long>::at(v247[0], v216[5]);
                std::__hash_table<Espresso::basic_block *,std::hash<Espresso::basic_block *>,std::equal_to<Espresso::basic_block *>,std::allocator<Espresso::basic_block *>>::__emplace_unique_key_args<Espresso::basic_block *,Espresso::basic_block *>((float *)(v269 + 152), *(_QWORD *)(*v161 + 16 * *v217), *(_QWORD *)(*v161 + 16 * *v217));
              }
              if (v213)
              {
                v218 = (unint64_t *)&v213->__shared_owners_;
                do
                  v219 = __ldaxr(v218);
                while (__stlxr(v219 - 1, v218));
                if (!v219)
                {
                  ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
                  std::__shared_weak_count::__release_weak(v213);
                }
              }
            }
LABEL_259:
            v184 = v262;
LABEL_260:
            if (v184)
            {
              v185 = (unint64_t *)&v184->__shared_owners_;
              do
                v186 = __ldaxr(v185);
              while (__stlxr(v186 - 1, v185));
              if (!v186)
              {
                ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
                std::__shared_weak_count::__release_weak(v184);
              }
            }
            v187 = v264;
            goto LABEL_266;
          }
          v187 = *(std::__shared_weak_count **)(v169 + 72);
          v263 = v202;
          v264 = v187;
          if (v187)
          {
            v203 = (unint64_t *)&v187->__shared_owners_;
            do
              v204 = __ldxr(v203);
            while (__stxr(v204 + 1, v203));
          }
          v261 = (__int128 *)((char *)v202 + 296);
          v205 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&__p, (uint64_t)v202 + 296, (uint64_t)&std::piecewise_construct, &v261);
          v206 = std::map<unsigned long,unsigned long>::at(v247[0], v205[5]);
          std::__hash_table<Espresso::basic_block *,std::hash<Espresso::basic_block *>,std::equal_to<Espresso::basic_block *>,std::allocator<Espresso::basic_block *>>::__emplace_unique_key_args<Espresso::basic_block *,Espresso::basic_block *>((float *)(v269 + 152), *(_QWORD *)(*v161 + 16 * *v206), *(_QWORD *)(*v161 + 16 * *v206));
LABEL_266:
          if (v187)
          {
            v188 = (unint64_t *)&v187->__shared_owners_;
            do
              v189 = __ldaxr(v188);
            while (__stlxr(v189 - 1, v188));
            if (!v189)
            {
              ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
              std::__shared_weak_count::__release_weak(v187);
            }
          }
          v190 = v266;
LABEL_277:
          if (v190)
          {
            v198 = (unint64_t *)&v190->__shared_owners_;
            do
              v199 = __ldaxr(v198);
            while (__stlxr(v199 - 1, v198));
            if (!v199)
            {
              ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
              std::__shared_weak_count::__release_weak(v190);
            }
          }
          v173 = v268;
          if (!v268)
            goto LABEL_287;
LABEL_283:
          v200 = (unint64_t *)&v173->__shared_owners_;
          do
            v201 = __ldaxr(v200);
          while (__stlxr(v201 - 1, v200));
          if (!v201)
          {
            ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
            std::__shared_weak_count::__release_weak(v173);
          }
LABEL_287:
          v167 = *(_QWORD *)(v167 + 8);
          if (v167 == v163)
          {
            v162 = (std::__shared_weak_count *)*((_QWORD *)&v269 + 1);
            goto LABEL_310;
          }
        }
        v267 = 0;
        v268 = 0;
        v265 = 0;
        v266 = 0;
        v263 = 0;
        v264 = 0;
        v261 = 0;
        v262 = 0;
        goto LABEL_259;
      }
LABEL_310:
      if (v162)
      {
        v220 = (unint64_t *)&v162->__shared_owners_;
        do
          v221 = __ldaxr(v220);
        while (__stlxr(v221 - 1, v220));
        if (!v221)
        {
          ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
          std::__shared_weak_count::__release_weak(v162);
        }
      }
      ++v160;
      v159 += 2;
    }
    while (v159 != v244);
    v222 = (unint64_t *)v242[4];
    v223 = (unint64_t *)v242[5];
    while (v222 != v223)
    {
      v225 = *v222;
      v224 = (std::__shared_weak_count *)v222[1];
      *(_QWORD *)&v269 = *v222;
      *((_QWORD *)&v269 + 1) = v224;
      if (v224)
      {
        v226 = (unint64_t *)&v224->__shared_owners_;
        do
          v227 = __ldxr(v226);
        while (__stxr(v227 + 1, v226));
      }
      for (j = *(_QWORD **)(v225 + 168); j; j = (_QWORD *)*j)
        std::__hash_table<Espresso::basic_block *,std::hash<Espresso::basic_block *>,std::equal_to<Espresso::basic_block *>,std::allocator<Espresso::basic_block *>>::__emplace_unique_key_args<Espresso::basic_block *,Espresso::basic_block *>((float *)(j[2] + 112), v225, v225);
      if (v224)
      {
        v229 = (unint64_t *)&v224->__shared_owners_;
        do
          v230 = __ldaxr(v229);
        while (__stlxr(v230 - 1, v229));
        if (!v230)
        {
          ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
          std::__shared_weak_count::__release_weak(v224);
        }
      }
      v222 += 2;
    }
  }
  v231 = v282;
  v232 = v283;
  if (v283)
  {
    v233 = (unint64_t *)&v283->__shared_owners_;
    do
      v234 = __ldxr(v233);
    while (__stxr(v234 + 1, v233));
    *(_BYTE *)v241 = 1;
    *(_QWORD *)(v241 + 8) = v231;
    *(_QWORD *)(v241 + 16) = v232;
    do
      v235 = __ldxr(v233);
    while (__stxr(v235 + 1, v233));
    do
      v236 = __ldaxr(v233);
    while (__stlxr(v236 - 1, v233));
    if (!v236)
    {
      ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
      std::__shared_weak_count::__release_weak(v232);
    }
  }
  else
  {
    *(_BYTE *)v241 = 1;
    *(_QWORD *)(v241 + 8) = v231;
    *(_QWORD *)(v241 + 16) = 0;
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v246, v247[0]);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v272);
  v237 = (void *)__p;
  *(_QWORD *)&__p = 0;
  if (v237)
    operator delete(v237);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v274);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v276);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v278);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v280);
  v238 = v283;
  if (v283)
  {
    v239 = (unint64_t *)&v283->__shared_owners_;
    do
      v240 = __ldaxr(v239);
    while (__stlxr(v240 - 1, v239));
    if (!v240)
    {
      ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
      std::__shared_weak_count::__release_weak(v238);
    }
  }
}

void sub_19176A5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  uint64_t v57;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)&a45);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a51);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a57);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v57 - 224);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v57 - 176);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v57 - 128);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v6;
  i[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_19176AA14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<Espresso::basic_block *,std::hash<Espresso::basic_block *>,std::equal_to<Espresso::basic_block *>,std::allocator<Espresso::basic_block *>>::__emplace_unique_key_args<Espresso::basic_block *,Espresso::basic_block *>(float *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t prime;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = (_QWORD *)*v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v8;
  v14[2] = a3;
  v15 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = (int8x8_t)v19;
    else
      prime = (int8x8_t)v18;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v9)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v9)
    {
      v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (*(_QWORD *)&prime <= v27)
        prime = (int8x8_t)v27;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v21 = operator new(8 * *(_QWORD *)&prime);
          v22 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v21;
          if (v22)
            operator delete(v22);
          v23 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v23++) = 0;
          while (*(_QWORD *)&prime != v23);
          v24 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v24)
          {
            v25 = v24[1];
            v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(_QWORD *)&prime)
                v25 %= *(_QWORD *)&prime;
            }
            else
            {
              v25 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = a1 + 4;
            v30 = (_QWORD *)*v24;
            if (*v24)
            {
              do
              {
                v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(_QWORD *)&prime)
                    v31 %= *(_QWORD *)&prime;
                }
                else
                {
                  v31 &= *(_QWORD *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v31))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v24;
                    goto LABEL_55;
                  }
                  *v24 = *v30;
                  *v30 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v31);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v31) = v30;
                  v30 = v24;
                }
                v31 = v25;
LABEL_55:
                v24 = v30;
                v30 = (_QWORD *)*v30;
                v25 = v31;
              }
              while (v30);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        v35 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v35)
          operator delete(v35);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v32 = *(_QWORD **)a1;
  v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v33)
  {
    *v14 = *v33;
LABEL_72:
    *v33 = v14;
    goto LABEL_73;
  }
  *v14 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v14;
  v32[v3] = a1 + 4;
  if (*v14)
  {
    v34 = *(_QWORD *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9)
        v34 %= v9;
    }
    else
    {
      v34 &= v9 - 1;
    }
    v33 = (_QWORD *)(*(_QWORD *)a1 + 8 * v34);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
}

void sub_19176AE28(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::basic_block>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6AB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::basic_block>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6AB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::basic_block>::__on_zero_shared(uint64_t a1)
{
  uint64_t *v2;
  void **v3;

  v2 = (uint64_t *)(a1 + 24);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](a1 + 176);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](a1 + 136);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 96);
  v3 = (void **)(a1 + 72);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a1 + 48);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__list_imp<std::shared_ptr<Espresso::basic_block::instruction>>::clear(v2);
}

void std::__shared_ptr_emplace<Espresso::control_flow_graph>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB908;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::control_flow_graph>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB908;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::control_flow_graph>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::pass_allocation>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB83A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_allocation>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB83A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_allocation>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::pass_liveness>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB70A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_liveness>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB70A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_liveness>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::pass_re_lower_to_network>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD3B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_re_lower_to_network>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD3B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_re_lower_to_network>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::pass_block_transform>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC200;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_block_transform>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC200;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_block_transform>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::pass_tag_dynamic_blobs>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCC48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_tag_dynamic_blobs>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCC48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_tag_dynamic_blobs>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::pass_make_ssa>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB70D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_make_ssa>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB70D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_make_ssa>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::pass_control_flow_graph>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCF58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_control_flow_graph>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCF58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_control_flow_graph>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::pass_bind_labels>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9B80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_bind_labels>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9B80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_bind_labels>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

char *Espresso::control_flow_graph::blob_defined_in_block(char *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 *v12;
  uint64_t v13;
  __int128 *v14;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  v3 = *(_QWORD *)(a2 + 8);
  v2 = *(_QWORD *)(a2 + 16);
  if (v2 != v3)
  {
    v5 = (uint64_t *)this;
    v6 = 0;
    do
    {
      v7 = (uint64_t *)(v3 + 16 * v6);
      v8 = *v7;
      v9 = *(_QWORD *)(*v7 + 8);
      if (v9 != *v7)
      {
        do
        {
          v10 = *(_QWORD *)(v9 + 16);
          v11 = *(__int128 **)(v10 + 16);
          v12 = *(__int128 **)(v10 + 24);
          while (v11 != v12)
          {
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(*v7 + 72, (uint64_t)v11, (uint64_t)v11);
            v13 = *v7;
            v14 = v11;
            this = std::__hash_table<std::__hash_value_type<std::string,Espresso::basic_block *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::basic_block *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::basic_block *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::basic_block *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (unsigned __int8 *)v11, &v14);
            *((_QWORD *)this + 5) = v13;
            v11 = (__int128 *)((char *)v11 + 24);
          }
          v9 = *(_QWORD *)(v9 + 8);
        }
        while (v9 != v8);
        v3 = *(_QWORD *)(a2 + 8);
        v2 = *(_QWORD *)(a2 + 16);
      }
      ++v6;
    }
    while (v6 < (v2 - v3) >> 4);
  }
  return this;
}

void sub_19176B298(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void H12PlatformHeuristics::~H12PlatformHeuristics(H12PlatformHeuristics *this)
{
  H12PlatformHeuristics::~H12PlatformHeuristics(this);
  JUMPOUT(0x19401CD90);
}

{
  char *v2;

  *(_QWORD *)this = &off_1E2D56E90;
  v2 = (char *)this + 72;
  H12GPUHeuristics::~H12GPUHeuristics((H12PlatformHeuristics *)((char *)this + 408));
  H12ANEHeuristics::~H12ANEHeuristics((H12PlatformHeuristics *)((char *)this + 240));
  H12ACCPHeuristics::~H12ACCPHeuristics((H12PlatformHeuristics *)((char *)this + 112));
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v2);
  *(_QWORD *)this = off_1E2D56B18;
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

uint64_t H12PlatformHeuristics::num_anes(H12PlatformHeuristics *this)
{
  return 1;
}

uint64_t H12PlatformHeuristics::num_gpus(H12PlatformHeuristics *this)
{
  return 1;
}

uint64_t H12PlatformHeuristics::num_accp(H12PlatformHeuristics *this)
{
  return 2;
}

uint64_t H12PlatformHeuristics::num_acce(H12PlatformHeuristics *this)
{
  return 4;
}

uint64_t H12PlatformHeuristics::GetPlatformEnum(H12PlatformHeuristics *this)
{
  return 1;
}

uint64_t H12PlatformHeuristics::GetCpuPerfHeuristics(H12PlatformHeuristics *this)
{
  return (uint64_t)this + 112;
}

uint64_t H12PlatformHeuristics::GetGpuPerfHeuristics(H12PlatformHeuristics *this)
{
  return (uint64_t)this + 408;
}

uint64_t H12PlatformHeuristics::GetAnePerfHeuristics(H12PlatformHeuristics *this)
{
  return (uint64_t)this + 240;
}

double H12PlatformHeuristics::GetDramBW(uint64_t a1, int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 80);
  if (!v2)
    goto LABEL_17;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = (v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*(_QWORD *)(a1 + 72) + 8 * v4);
  if (!v5 || (v6 = *v5) == 0)
LABEL_17:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  while (1)
  {
    v7 = v6[1];
    if (v7 == a2)
      break;
    if (v3.u32[0] > 1uLL)
    {
      if (v7 >= v2)
        v7 %= v2;
    }
    else
    {
      v7 &= v2 - 1;
    }
    if (v7 != v4)
      goto LABEL_17;
LABEL_16:
    v6 = (uint64_t *)*v6;
    if (!v6)
      goto LABEL_17;
  }
  if (*((_DWORD *)v6 + 4) != a2)
    goto LABEL_16;
  return *((double *)v6 + 3);
}

double H12PlatformHeuristics::GetANEComputeRatio(H12PlatformHeuristics *this)
{
  return 0.4;
}

double H12PlatformHeuristics::GetGPULThreshold(H12PlatformHeuristics *this)
{
  return 0.00100000005;
}

double H12PlatformHeuristics::GetGPULScale(H12PlatformHeuristics *this)
{
  return 0.5;
}

double H12PlatformHeuristics::GetANESmallSourceFactor(H12PlatformHeuristics *this)
{
  return 8.0;
}

double H12PlatformHeuristics::GetCPUAvgPoolFactor(H12PlatformHeuristics *this)
{
  return 1000.0;
}

double H12PlatformHeuristics::GetANEOptimalityFactor(H12PlatformHeuristics *this)
{
  return 10.0;
}

double H12PlatformHeuristics::GetMPSInnerProductFactor(H12PlatformHeuristics *this)
{
  return 4.0;
}

double H12PlatformHeuristics::GetMPSDynamicConvFactor(H12PlatformHeuristics *this)
{
  return 10.0;
}

double H12PlatformHeuristics::GetANEDualSrcEWFactor(H12PlatformHeuristics *this)
{
  return 2.0;
}

uint64_t H12PlatformHeuristics::small_net_layer_count_threshold(H12PlatformHeuristics *this)
{
  return 10;
}

double H12PlatformHeuristics::ane_gpu_net_compute_threshold(H12PlatformHeuristics *this)
{
  return 0.03;
}

double H12PlatformHeuristics::get_engine_switch_ms(uint64_t a1, int a2, int a3)
{
  double result;
  unsigned int v5;
  int v6;
  int v7;
  char v8;
  char v9;
  int v10;
  int v11;

  v10 = a3;
  v11 = a2;
  result = 0.0;
  if (a2 != a3)
  {
    v5 = ((a2 - 10006) < 6) & (0x2Fu >> (a2 - 22));
    if (v5 == 1 && (is_cpu(&v10) & 1) != 0)
      return 0.200000003;
    v6 = is_cpu(&v11);
    if (v6 && (a3 - 10006) <= 5 && ((0x2Fu >> (a3 - 22)) & 1) != 0)
      return 0.0199999996;
    v7 = is_gpu(&v11);
    if (!v7 || (v8 = is_cpu(&v10), result = 0.25, (v8 & 1) == 0))
    {
      if (!v6 || (v9 = is_gpu(&v10), result = 0.25, (v9 & 1) == 0))
      {
        if (v5 && (is_gpu(&v10) & 1) != 0)
          return 0.200000003;
        if (v7 && (a3 - 10006) <= 5 && ((0x2Fu >> (a3 - 22)) & 1) != 0)
          return 0.0199999996;
        return 0.100000001;
      }
    }
  }
  return result;
}

void newpPlatformHeuristics::~newpPlatformHeuristics(newpPlatformHeuristics *this)
{
  newpPlatformHeuristics::~newpPlatformHeuristics(this);
  JUMPOUT(0x19401CD90);
}

{
  char *v2;

  *(_QWORD *)this = &off_1E2D57088;
  v2 = (char *)this + 72;
  newpGPUHeuristics::~newpGPUHeuristics((newpPlatformHeuristics *)((char *)this + 408));
  newpANEHeuristics::~newpANEHeuristics((newpPlatformHeuristics *)((char *)this + 240));
  newpACCPHeuristics::~newpACCPHeuristics((newpPlatformHeuristics *)((char *)this + 112));
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v2);
  *(_QWORD *)this = off_1E2D56B18;
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

uint64_t newpPlatformHeuristics::num_anes(newpPlatformHeuristics *this)
{
  return 1;
}

uint64_t newpPlatformHeuristics::num_gpus(newpPlatformHeuristics *this)
{
  return 1;
}

uint64_t newpPlatformHeuristics::num_accp(newpPlatformHeuristics *this)
{
  return 2;
}

uint64_t newpPlatformHeuristics::num_acce(newpPlatformHeuristics *this)
{
  return 4;
}

double newpPlatformHeuristics::GetANESmallSourceFactor(newpPlatformHeuristics *this)
{
  return 6.0;
}

double newpPlatformHeuristics::GetCPUAvgPoolFactor(newpPlatformHeuristics *this)
{
  return 1000.0;
}

double newpPlatformHeuristics::GetANEOptimalityFactor(newpPlatformHeuristics *this)
{
  return 10.0;
}

double newpPlatformHeuristics::GetMPSDynamicConvFactor(newpPlatformHeuristics *this)
{
  return 10.0;
}

void JadePlatformHeuristics::~JadePlatformHeuristics(JadePlatformHeuristics *this)
{
  JadePlatformHeuristics::~JadePlatformHeuristics(this);
  JUMPOUT(0x19401CD90);
}

{
  char *v2;

  *(_QWORD *)this = &off_1E2D56FB8;
  v2 = (char *)this + 72;
  JadeGPUHeuristics::~JadeGPUHeuristics((JadePlatformHeuristics *)((char *)this + 408));
  newpANEHeuristics::~newpANEHeuristics((JadePlatformHeuristics *)((char *)this + 240));
  newpACCPHeuristics::~newpACCPHeuristics((JadePlatformHeuristics *)((char *)this + 112));
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v2);
  *(_QWORD *)this = off_1E2D56B18;
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

uint64_t JadePlatformHeuristics::num_anes(JadePlatformHeuristics *this)
{
  return 1;
}

uint64_t JadePlatformHeuristics::num_gpus(JadePlatformHeuristics *this)
{
  return 1;
}

uint64_t JadePlatformHeuristics::num_accp(JadePlatformHeuristics *this)
{
  return 2;
}

uint64_t JadePlatformHeuristics::num_acce(JadePlatformHeuristics *this)
{
  return 4;
}

uint64_t JadePlatformHeuristics::GetPlatformEnum(JadePlatformHeuristics *this)
{
  return 2;
}

uint64_t JadePlatformHeuristics::GetCpuPerfHeuristics(JadePlatformHeuristics *this)
{
  return (uint64_t)this + 112;
}

uint64_t JadePlatformHeuristics::GetGpuPerfHeuristics(JadePlatformHeuristics *this)
{
  return (uint64_t)this + 408;
}

uint64_t JadePlatformHeuristics::GetAnePerfHeuristics(JadePlatformHeuristics *this)
{
  return (uint64_t)this + 240;
}

double JadePlatformHeuristics::GetDramBW(uint64_t a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 72), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((float *)v2 + 5);
}

double JadePlatformHeuristics::GetANEComputeRatio(JadePlatformHeuristics *this)
{
  return 0.6;
}

double JadePlatformHeuristics::GetGPULThreshold(JadePlatformHeuristics *this)
{
  return 0.00499999989;
}

double JadePlatformHeuristics::GetGPULScale(JadePlatformHeuristics *this)
{
  return 0.5;
}

double JadePlatformHeuristics::GetANESmallSourceFactor(JadePlatformHeuristics *this)
{
  return 6.0;
}

double JadePlatformHeuristics::GetCPUAvgPoolFactor(JadePlatformHeuristics *this)
{
  return 1000.0;
}

double JadePlatformHeuristics::GetANEOptimalityFactor(JadePlatformHeuristics *this)
{
  return 10.0;
}

double JadePlatformHeuristics::GetMPSInnerProductFactor(JadePlatformHeuristics *this)
{
  return 4.0;
}

double JadePlatformHeuristics::GetMPSDynamicConvFactor(JadePlatformHeuristics *this)
{
  return 10.0;
}

double JadePlatformHeuristics::GetANEDualSrcEWFactor(JadePlatformHeuristics *this)
{
  return 1.0;
}

uint64_t JadePlatformHeuristics::small_net_layer_count_threshold(JadePlatformHeuristics *this)
{
  return 10;
}

double JadePlatformHeuristics::ane_gpu_net_compute_threshold(JadePlatformHeuristics *this)
{
  return 0.03;
}

double JadePlatformHeuristics::get_engine_switch_ms(uint64_t a1, int a2, int a3)
{
  double result;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  v8 = a3;
  v9 = a2;
  result = 0.0;
  if (a2 != a3)
  {
    v5 = ((a2 - 10006) < 6) & (0x2Fu >> (a2 - 22));
    if (v5 == 1 && (is_cpu(&v8) & 1) != 0)
      return 0.100000001;
    v6 = is_cpu(&v9);
    if (v6 && (a3 - 10006) <= 5 && ((0x2Fu >> (a3 - 22)) & 1) != 0)
      return 0.0199999996;
    v7 = is_gpu(&v9);
    if (v7 && (is_cpu(&v8) & 1) != 0 || v6 && (is_gpu(&v8) & 1) != 0)
      return 0.150000006;
    if ((!v5 || (is_gpu(&v8) & 1) == 0) && v7 && (a3 - 10006) <= 5 && ((0x2Fu >> (a3 - 22)) & 1) != 0)
      return 0.0199999996;
    else
      return 0.100000001;
  }
  return result;
}

uint64_t JadePlatformHeuristics::is_jade_family(JadePlatformHeuristics *this)
{
  return 1;
}

void Espresso::reload_network_on_context(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  char *v8;
  void **v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v29;
  void (***v30)(uint64_t *__return_ptr, _QWORD);
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD v56[6];
  std::__shared_weak_count *v57;
  __int128 v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  void *__p[2];
  char v62;
  char *v63[4];
  std::__shared_weak_count *v64;
  __int128 v65;
  _QWORD v66[2];
  __int128 v67;
  char *v68;
  std::__shared_weak_count *v69;
  char *v70;
  std::__shared_weak_count *v71;

  v8 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E2DBE2D0;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  v9 = (void **)(v8 + 24);
  v70 = v8 + 24;
  v71 = (std::__shared_weak_count *)v8;
  v10 = (std::__shared_weak_count *)a1[1];
  v66[0] = *a1;
  v66[1] = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "model.espresso.weights");
  Espresso::serialize_network(v66, (uint64_t)__p, v9, 1, &v67);
  if (v62 < 0)
    operator delete(__p[0]);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v65 = v67;
  if (*((_QWORD *)&v67 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = (uint64_t)v68;
  v18 = v69;
  v63[3] = v68;
  v64 = v69;
  if (v69)
  {
    v19 = (unint64_t *)&v69->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    v60 = v18;
    do
      v21 = __ldxr(v19);
    while (__stxr(v21 + 1, v19));
  }
  else
  {
    v60 = 0;
  }
  v59 = v17;
  Espresso::load_network_shape(&v59, (uint64_t)__p);
  v22 = v60;
  if (v60)
  {
    v23 = (unint64_t *)&v60->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = operator new(0x30uLL);
  v25[1] = 0;
  v25[2] = 0;
  *v25 = &off_1E2DBBCF8;
  v25[3] = &off_1E2D84570;
  v26 = v71;
  v25[4] = v70;
  v25[5] = v26;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  *(_QWORD *)&v29 = v25 + 3;
  *((_QWORD *)&v29 + 1) = v25;
  v58 = v29;
  Espresso::load_and_shape_network((uint64_t)&v65, (const std::string *)(*a1 + 1024), a2, (Espresso::net *)__p, a3, (uint64_t *)&v58, (std::string *)(*a1 + 592), (uint64_t)a4);
  v30 = (void (***)(uint64_t *__return_ptr, _QWORD))*a2;
  v31 = *a4;
  if (*(_BYTE *)(*a2 + 72))
  {
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v31 + 576), v58, *((uint64_t *)&v58 + 1));
    v30 = (void (***)(uint64_t *__return_ptr, _QWORD))*a2;
  }
  v56[0] = MEMORY[0x1E0C809B0];
  v56[1] = 3321888768;
  v56[2] = ___ZN8Espresso25reload_network_on_contextERKNSt3__110shared_ptrINS_3netEEERKNS1_INS_16abstract_contextEEENS_12compute_pathE_block_invoke;
  v56[3] = &__block_descriptor_56_ea8_40c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE_e10_v16__0r_v8l;
  v56[4] = a1;
  v56[5] = v31;
  v32 = (std::__shared_weak_count *)a4[1];
  v57 = v32;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  Espresso::abstract_context::compute_batch_sync(v30, v56);
  v35 = v57;
  if (v57)
  {
    v36 = (unint64_t *)&v57->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
  if (*((_QWORD *)&v58 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v63, v63[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)__p, (char *)__p[1]);
  v41 = v64;
  if (v64)
  {
    v42 = (unint64_t *)&v64->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
  if (*((_QWORD *)&v65 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = v69;
  if (v69)
  {
    v48 = (unint64_t *)&v69->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
  if (*((_QWORD *)&v67 + 1))
  {
    v51 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = v71;
  if (v71)
  {
    v54 = (unint64_t *)&v71->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
}

void sub_19176BD88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v31);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v30);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  Espresso::network_shape::~network_shape((char **)&__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v32 - 144);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v32 - 96);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v32 - 112);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v32 - 80);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso25reload_network_on_contextERKNSt3__110shared_ptrINS_3netEEERKNS1_INS_16abstract_contextEEENS_12compute_pathE_block_invoke(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  void *__p;
  _QWORD *v13;

  Espresso::net::all_globals((Espresso::net *)&__p, **(_QWORD **)(a1 + 32));
  v4 = v13;
  if (v13)
  {
    do
    {
      Espresso::net::get_global(&v10, *(_QWORD *)(a1 + 40), (unsigned __int8 *)v4 + 16);
      if (v10)
        Espresso::blobcpy(a2, &v10, v4 + 5);
      v5 = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      v4 = (_QWORD *)*v4;
    }
    while (v4);
    v8 = v13;
  }
  else
  {
    v8 = 0;
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(v8);
  v9 = __p;
  __p = 0;
  if (v9)
    operator delete(v9);
}

void sub_19176BEFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table((uint64_t)va1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::blob_storage_memory>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBCF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::blob_storage_memory>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBCF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::blob_storage_memory>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso11Image2Image10settings_t6sharedEv_block_invoke()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)v0 = v0 + 8;
  result = 0.0;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  Espresso::Image2Image::settings_t::shared(void)::global = v0;
  return result;
}

void Espresso::Image2Image::settings_t::load_style_settings_from_dict(uint64_t **this, NSDictionary *a2)
{
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void **v11;
  char *v12;
  uint64_t **v13;
  void *v14;
  BOOL v15;
  id v16;
  void *v17;
  BOOL v18;
  id v19;
  void *v20;
  BOOL v21;
  void *v22;
  void *v23;
  BOOL v24;
  void *v25;
  int v26;
  void *v27;
  BOOL v28;
  void *v29;
  void *v30;
  BOOL v31;
  void *v32;
  void *v33;
  BOOL v34;
  void *v35;
  int v36;
  void *v37;
  BOOL v38;
  void *v39;
  int v40;
  void *v41;
  BOOL v42;
  void *v43;
  int v44;
  void *v45;
  BOOL v46;
  void *v47;
  int v48;
  void *v49;
  BOOL v50;
  void *v51;
  int v52;
  void *v53;
  BOOL v54;
  void *v55;
  int v56;
  void *v57;
  BOOL v58;
  void *v59;
  int v60;
  void *v61;
  BOOL v62;
  void *v63;
  void *v64;
  BOOL v65;
  void *v66;
  void *v67;
  BOOL v68;
  void *v69;
  void *v70;
  BOOL v71;
  void *v72;
  void *v73;
  BOOL v74;
  void *v75;
  void *v76;
  BOOL v77;
  void *v78;
  void *v79;
  BOOL v80;
  void *v81;
  void *v82;
  BOOL v83;
  void *v84;
  void *v85;
  BOOL v86;
  void *v87;
  void *v88;
  BOOL v89;
  void *v90;
  void *v91;
  BOOL v92;
  void *v93;
  void *v94;
  BOOL v95;
  void *v96;
  void *v97;
  BOOL v98;
  void *v99;
  void *v100;
  BOOL v101;
  void *v102;
  void *v103;
  BOOL v104;
  void *v105;
  void *v106;
  BOOL v107;
  void *v108;
  int v109;
  void *v110;
  BOOL v111;
  void *v112;
  int v113;
  void *v114;
  BOOL v115;
  void *v116;
  int v117;
  void *v118;
  BOOL v119;
  void *v120;
  int v121;
  void *v122;
  BOOL v123;
  void *v124;
  int v125;
  void *v126;
  BOOL v127;
  void *v128;
  int v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  char *v135;
  id obj;
  NSDictionary *v137;
  void *__p[2];
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144[2];
  char v145;
  uint64_t v146;
  _BYTE v147[128];
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  v137 = a2;
  if (v137)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      -[NSDictionary objectForKeyedSubscript:](v137, "objectForKeyedSubscript:", CFSTR("wisdom_path"));
      v3 = (void *)objc_claimAutoreleasedReturnValue();

      if (v3)
      {
        -[NSDictionary objectForKeyedSubscript:](v137, "objectForKeyedSubscript:", CFSTR("wisdom_path"));
        v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        MEMORY[0x19401C808](this + 3, objc_msgSend(v4, "UTF8String"));

      }
      v142 = 0u;
      v143 = 0u;
      v140 = 0u;
      v141 = 0u;
      -[NSDictionary objectForKeyedSubscript:](v137, "objectForKeyedSubscript:", CFSTR("styles"));
      obj = (id)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v140, v147, 16);
      if (v5)
      {
        v135 = (char *)(this + 1);
        v6 = *(_QWORD *)v141;
        v134 = xmmword_191A93390;
        v133 = xmmword_191A933E0;
        v132 = xmmword_191A933F0;
        v131 = xmmword_191A93400;
        v130 = xmmword_191A933D0;
        do
        {
          v7 = 0;
          do
          {
            if (*(_QWORD *)v141 != v6)
              objc_enumerationMutation(obj);
            v8 = *(void **)(*((_QWORD *)&v140 + 1) + 8 * v7);
            -[NSDictionary objectForKeyedSubscript:](v137, "objectForKeyedSubscript:", CFSTR("styles"), v130, v131, v132, v133, v134, v135);
            v9 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v9, "objectForKeyedSubscript:", v8);
            v10 = (void *)objc_claimAutoreleasedReturnValue();

            std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(objc_retainAutorelease(v8), "UTF8String"));
            v11 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)this, &v146, __p);
            v12 = (char *)*v11;
            if (!*v11)
            {
              v13 = (uint64_t **)v11;
              v12 = (char *)operator new(0xE8uLL);
              v144[1] = (uint64_t)v135;
              *((_OWORD *)v12 + 2) = *(_OWORD *)__p;
              *((_QWORD *)v12 + 6) = v139;
              __p[0] = 0;
              __p[1] = 0;
              v139 = 0;
              *(_OWORD *)(v12 + 56) = 0u;
              *(_OWORD *)(v12 + 72) = 0u;
              *(_OWORD *)(v12 + 88) = 0u;
              *(_OWORD *)(v12 + 104) = 0u;
              *(_OWORD *)(v12 + 120) = 0u;
              *(_OWORD *)(v12 + 136) = 0u;
              *(_OWORD *)(v12 + 152) = 0u;
              *(_OWORD *)(v12 + 168) = 0u;
              *(_OWORD *)(v12 + 184) = 0u;
              *(_OWORD *)(v12 + 200) = 0u;
              *(_OWORD *)(v12 + 216) = 0u;
              *((_DWORD *)v12 + 27) = 1050253722;
              *(_OWORD *)(v12 + 120) = v134;
              *((_OWORD *)v12 + 9) = v133;
              *((_OWORD *)v12 + 10) = v132;
              *((_OWORD *)v12 + 11) = v131;
              *((_QWORD *)v12 + 24) = 0x3F8000003DA3D70ALL;
              *(_OWORD *)(v12 + 204) = v130;
              *(_QWORD *)(v12 + 220) = 0x3F8000003F79999ALL;
              v145 = 1;
              std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(this, v146, v13, (uint64_t *)v12);
              v144[0] = 0;
              std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::Image2Image::postprocessing_settings_t>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::Image2Image::postprocessing_settings_t>,void *>>>>::reset[abi:ne180100](v144);
            }
            if (SHIBYTE(v139) < 0)
              operator delete(__p[0]);
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("name"));
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            v15 = v14 == 0;

            if (!v15)
            {
              objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("name"));
              v16 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
              MEMORY[0x19401C808](v12 + 56, objc_msgSend(v16, "UTF8String"));

            }
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("network"));
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            v18 = v17 == 0;

            if (!v18)
            {
              objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("network"));
              v19 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
              MEMORY[0x19401C808](v12 + 80, objc_msgSend(v19, "UTF8String"));

            }
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("do_blend"));
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            v21 = v20 == 0;

            if (!v21)
            {
              objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("do_blend"));
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              *((_DWORD *)v12 + 26) = objc_msgSend(v22, "intValue");

            }
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("blend_alpha"));
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            v24 = v23 == 0;

            if (!v24)
            {
              objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("blend_alpha"));
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v25, "floatValue");
              *((_DWORD *)v12 + 27) = v26;

            }
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("grayscale_i0"));
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            v28 = v27 == 0;

            if (!v28)
            {
              objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("grayscale_i0"));
              v29 = (void *)objc_claimAutoreleasedReturnValue();
              *((_DWORD *)v12 + 28) = objc_msgSend(v29, "intValue");

            }
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("grayscale_i1"));
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            v31 = v30 == 0;

            if (!v31)
            {
              objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("grayscale_i1"));
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              *((_DWORD *)v12 + 29) = objc_msgSend(v32, "intValue");

            }
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("temporal_alpha"));
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            v34 = v33 == 0;

            if (!v34)
            {
              objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("temporal_alpha"));
              v35 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v35, "floatValue");
              *((_DWORD *)v12 + 30) = v36;

            }
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("gamma"));
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            v38 = v37 == 0;

            if (!v38)
            {
              objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("gamma"));
              v39 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v39, "floatValue");
              *((_DWORD *)v12 + 31) = v40;

            }
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("saturation"));
            v41 = (void *)objc_claimAutoreleasedReturnValue();
            v42 = v41 == 0;

            if (!v42)
            {
              objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("saturation"));
              v43 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v43, "floatValue");
              *((_DWORD *)v12 + 32) = v44;

            }
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("contrast"));
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            v46 = v45 == 0;

            if (!v46)
            {
              objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("contrast"));
              v47 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v47, "floatValue");
              *((_DWORD *)v12 + 33) = v48;

            }
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("brightness"));
            v49 = (void *)objc_claimAutoreleasedReturnValue();
            v50 = v49 == 0;

            if (!v50)
            {
              objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("brightness"));
              v51 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v51, "floatValue");
              *((_DWORD *)v12 + 34) = v52;

            }
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("noise_strength"));
            v53 = (void *)objc_claimAutoreleasedReturnValue();
            v54 = v53 == 0;

            if (!v54)
            {
              objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("noise_strength"));
              v55 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v55, "floatValue");
              *((_DWORD *)v12 + 49) = v56;

            }
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("noise_speed"));
            v57 = (void *)objc_claimAutoreleasedReturnValue();
            v58 = v57 == 0;

            if (!v58)
            {
              objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("noise_speed"));
              v59 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v59, "floatValue");
              *((_DWORD *)v12 + 51) = v60;

            }
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("color_transfer_mode"));
            v61 = (void *)objc_claimAutoreleasedReturnValue();
            v62 = v61 == 0;

            if (!v62)
            {
              objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("color_transfer_mode"));
              v63 = (void *)objc_claimAutoreleasedReturnValue();
              *((_DWORD *)v12 + 35) = objc_msgSend(v63, "intValue");

            }
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("width"));
            v64 = (void *)objc_claimAutoreleasedReturnValue();
            v65 = v64 == 0;

            if (!v65)
            {
              objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("width"));
              v66 = (void *)objc_claimAutoreleasedReturnValue();
              *((_DWORD *)v12 + 36) = objc_msgSend(v66, "intValue");

            }
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("height"));
            v67 = (void *)objc_claimAutoreleasedReturnValue();
            v68 = v67 == 0;

            if (!v68)
            {
              objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("height"));
              v69 = (void *)objc_claimAutoreleasedReturnValue();
              *((_DWORD *)v12 + 37) = objc_msgSend(v69, "intValue");

            }
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("width_fast"));
            v70 = (void *)objc_claimAutoreleasedReturnValue();
            v71 = v70 == 0;

            if (!v71)
            {
              objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("width_fast"));
              v72 = (void *)objc_claimAutoreleasedReturnValue();
              *((_DWORD *)v12 + 38) = objc_msgSend(v72, "intValue");

            }
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("height_fast"));
            v73 = (void *)objc_claimAutoreleasedReturnValue();
            v74 = v73 == 0;

            if (!v74)
            {
              objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("height_fast"));
              v75 = (void *)objc_claimAutoreleasedReturnValue();
              *((_DWORD *)v12 + 39) = objc_msgSend(v75, "intValue");

            }
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("width_capture"));
            v76 = (void *)objc_claimAutoreleasedReturnValue();
            v77 = v76 == 0;

            if (!v77)
            {
              objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("width_capture"));
              v78 = (void *)objc_claimAutoreleasedReturnValue();
              *((_DWORD *)v12 + 40) = objc_msgSend(v78, "intValue");

            }
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("height_capture"));
            v79 = (void *)objc_claimAutoreleasedReturnValue();
            v80 = v79 == 0;

            if (!v80)
            {
              objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("height_capture"));
              v81 = (void *)objc_claimAutoreleasedReturnValue();
              *((_DWORD *)v12 + 41) = objc_msgSend(v81, "intValue");

            }
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("width_miniature"));
            v82 = (void *)objc_claimAutoreleasedReturnValue();
            v83 = v82 == 0;

            if (!v83)
            {
              objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("width_miniature"));
              v84 = (void *)objc_claimAutoreleasedReturnValue();
              *((_DWORD *)v12 + 42) = objc_msgSend(v84, "intValue");

            }
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("height_miniature"));
            v85 = (void *)objc_claimAutoreleasedReturnValue();
            v86 = v85 == 0;

            if (!v86)
            {
              objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("height_miniature"));
              v87 = (void *)objc_claimAutoreleasedReturnValue();
              *((_DWORD *)v12 + 43) = objc_msgSend(v87, "intValue");

            }
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("width_fullscreen"));
            v88 = (void *)objc_claimAutoreleasedReturnValue();
            v89 = v88 == 0;

            if (!v89)
            {
              objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("width_fullscreen"));
              v90 = (void *)objc_claimAutoreleasedReturnValue();
              *((_DWORD *)v12 + 44) = objc_msgSend(v90, "intValue");

            }
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("height_fullscreen"));
            v91 = (void *)objc_claimAutoreleasedReturnValue();
            v92 = v91 == 0;

            if (!v92)
            {
              objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("height_fullscreen"));
              v93 = (void *)objc_claimAutoreleasedReturnValue();
              *((_DWORD *)v12 + 45) = objc_msgSend(v93, "intValue");

            }
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("width_hd"));
            v94 = (void *)objc_claimAutoreleasedReturnValue();
            v95 = v94 == 0;

            if (!v95)
            {
              objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("width_hd"));
              v96 = (void *)objc_claimAutoreleasedReturnValue();
              *((_DWORD *)v12 + 46) = objc_msgSend(v96, "intValue");

            }
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("height_hd"));
            v97 = (void *)objc_claimAutoreleasedReturnValue();
            v98 = v97 == 0;

            if (!v98)
            {
              objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("height_hd"));
              v99 = (void *)objc_claimAutoreleasedReturnValue();
              *((_DWORD *)v12 + 47) = objc_msgSend(v99, "intValue");

            }
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("dyn_noise"));
            v100 = (void *)objc_claimAutoreleasedReturnValue();
            v101 = v100 == 0;

            if (!v101)
            {
              objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("dyn_noise"));
              v102 = (void *)objc_claimAutoreleasedReturnValue();
              *((_DWORD *)v12 + 50) = objc_msgSend(v102, "intValue");

            }
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("high_quality_scaling"));
            v103 = (void *)objc_claimAutoreleasedReturnValue();
            v104 = v103 == 0;

            if (!v104)
            {
              objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("high_quality_scaling"));
              v105 = (void *)objc_claimAutoreleasedReturnValue();
              v12[228] = objc_msgSend(v105, "BOOLValue");

            }
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("old_frame_scale"));
            v106 = (void *)objc_claimAutoreleasedReturnValue();
            v107 = v106 == 0;

            if (!v107)
            {
              objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("old_frame_scale"));
              v108 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v108, "floatValue");
              *((_DWORD *)v12 + 48) = v109;

            }
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("preprocessing_bias_b"));
            v110 = (void *)objc_claimAutoreleasedReturnValue();
            v111 = v110 == 0;

            if (!v111)
            {
              objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("preprocessing_bias_b"));
              v112 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v112, "floatValue");
              *((_DWORD *)v12 + 52) = v113;

            }
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("preprocessing_bias_g"));
            v114 = (void *)objc_claimAutoreleasedReturnValue();
            v115 = v114 == 0;

            if (!v115)
            {
              objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("preprocessing_bias_g"));
              v116 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v116, "floatValue");
              *((_DWORD *)v12 + 53) = v117;

            }
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("preprocessing_bias_r"));
            v118 = (void *)objc_claimAutoreleasedReturnValue();
            v119 = v118 == 0;

            if (!v119)
            {
              objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("preprocessing_bias_r"));
              v120 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v120, "floatValue");
              *((_DWORD *)v12 + 54) = v121;

            }
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("preprocessing_scale"));
            v122 = (void *)objc_claimAutoreleasedReturnValue();
            v123 = v122 == 0;

            if (!v123)
            {
              objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("preprocessing_scale"));
              v124 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v124, "floatValue");
              *((_DWORD *)v12 + 55) = v125;

            }
            objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("preprocessing_old_frame_bias_scale"));
            v126 = (void *)objc_claimAutoreleasedReturnValue();
            v127 = v126 == 0;

            if (!v127)
            {
              objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("preprocessing_old_frame_bias_scale"));
              v128 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v128, "floatValue");
              *((_DWORD *)v12 + 56) = v129;

            }
            ++v7;
          }
          while (v5 != v7);
          v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v140, v147, 16);
        }
        while (v5);
      }

    }
  }

}

void sub_19176CC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{

  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::rnn_kernel::~rnn_kernel(id *this)
{

  Espresso::generic_rnn_kernel::~generic_rnn_kernel((Espresso::generic_rnn_kernel *)this);
}

{

  Espresso::generic_rnn_kernel::~generic_rnn_kernel((Espresso::generic_rnn_kernel *)this);
  JUMPOUT(0x19401CD90);
}

_QWORD *Espresso::MetalLowmemEngine::rnn_kernel::blob_options@<X0>(Espresso::MetalLowmemEngine::rnn_kernel *this@<X0>, int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  _QWORD *result;

  result = operator new(0x78uLL);
  result[1] = 0;
  result[2] = 0;
  *result = &off_1E2DBAF68;
  result[3] = &off_1E2D7F198;
  *((_OWORD *)result + 2) = 0u;
  *((_OWORD *)result + 3) = 0u;
  *((_OWORD *)result + 4) = 0u;
  *((_OWORD *)result + 5) = 0u;
  *((_OWORD *)result + 6) = 0u;
  result[13] = 0;
  result[14] = 0;
  *((_DWORD *)result + 12) = 1065353216;
  result[7] = 0x1FFFFFFFFLL;
  result[12] = 0;
  result[8] = 0;
  result[9] = 0;
  *((_BYTE *)result + 88) = 0;
  result[10] = 0;
  if (!a3 && *((_DWORD *)this + 80) == 1 && a2)
    *((_BYTE *)result + 32) = 1;
  *a4 = result + 3;
  a4[1] = result;
  return result;
}

char *Espresso::MetalLowmemEngine::rnn_kernel::blob_container_options_for_weight@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  char *result;

  v2 = operator new(0x78uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E2DBAF68;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  v2[13] = 0;
  v2[14] = 0;
  *((_DWORD *)v2 + 12) = 1065353216;
  v2[7] = 0x1FFFFFFFFLL;
  v2[12] = 0;
  v2[8] = 0;
  v2[9] = 0;
  *((_BYTE *)v2 + 88) = 0;
  v2[10] = 0;
  a1[1] = v2;
  v2[3] = &off_1E2D7F198;
  result = (char *)(v2 + 3);
  *a1 = result;
  return result;
}

void Espresso::MetalLowmemEngine::rnn_kernel::__launch_rnn()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "not implemented");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_19176D0A4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::rnn_kernel::__launch_gru()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "not implemented");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_19176D0F4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::rnn_kernel::set_seq(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  Espresso::context_metal *v9;
  id v10;
  uint64_t v11;
  void *v12;
  std::runtime_error *exception;
  int64x2_t v14;
  uint64_t v15;
  int64x2_t v16;
  uint64_t v17;
  int v18;

  v18 = a4;
  v9 = *(Espresso::context_metal **)(a1 + 8);
  v10 = *(id *)(*(_QWORD *)a2 + 152);
  if (*(_DWORD *)(*(_QWORD *)a3 + 20) <= a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Seq error");
    goto LABEL_7;
  }
  if (!*(_QWORD *)(a1 + 880))
  {
    Espresso::context_metal::kernel_for_function(v9, CFSTR("rnn_set_seq"));
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = *(void **)(a1 + 880);
    *(_QWORD *)(a1 + 880) = v11;

    if (!*(_QWORD *)(a1 + 880))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Kernel not found");
LABEL_7:
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  objc_msgSend(v10, "setComputePipelineState:");
  objc_msgSend(v10, "setBuffer:offset:atIndex:", *(_QWORD *)(*(_QWORD *)a3 + 160), 0, 0);
  objc_msgSend(v10, "setBuffer:offset:atIndex:", *(_QWORD *)(*(_QWORD *)a5 + 160), 0, 1);
  objc_msgSend(v10, "setBytes:length:atIndex:", &v18, 4, 2);
  v16 = vdupq_n_s64(1uLL);
  v17 = 1;
  v14 = v16;
  v15 = 1;
  objc_msgSend(v10, "dispatchThreadgroups:threadsPerThreadgroup:", &v16, &v14);

}

void sub_19176D26C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  __cxa_free_exception(v2);

  _Unwind_Resume(a1);
}

void Espresso::analysis_ane_multi_head::~analysis_ane_multi_head(Espresso::analysis_ane_multi_head *this)
{
  *(_QWORD *)this = &off_1E2D8F1E8;
  std::__tree<int>::destroy(*((_QWORD **)this + 5));
  std::__tree<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>>>::destroy(*((_QWORD **)this + 2));
}

{
  *(_QWORD *)this = &off_1E2D8F1E8;
  std::__tree<int>::destroy(*((_QWORD **)this + 5));
  std::__tree<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>>>::destroy(*((_QWORD **)this + 2));
  JUMPOUT(0x19401CD90);
}

void std::__tree<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>>>::destroy(*a1);
    std::__tree<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<int const,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<int const,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,0>(uint64_t a1)
{
  void *v2;

  std::__tree<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>>>::destroy(*(_QWORD **)(a1 + 40));
  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,0>(uint64_t a1)
{
  void *v2;
  void **v3;

  v3 = (void **)(a1 + 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a1 + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void Espresso::pass_ane_multi_head::~pass_ane_multi_head(Espresso::pass_ane_multi_head *this)
{
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_ane_multi_head::get_analysis_usage(uint64_t a1, _BYTE *a2)
{
  *a2 = 1;
}

void Espresso::pass_ane_multi_head::run_on_network(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  unsigned int v5;
  uint64_t *v6;
  uint64_t *v7;
  const void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  BOOL v26;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  Espresso *v38;
  const char *v39;
  NSObject *v40;
  Espresso *v41;
  const char *v42;
  uint64_t *v43;
  NSObject *v44;
  _BYTE *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  NSObject *v50;
  char *v51;
  void *v52;
  _QWORD *v53;
  char *v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD **v58;
  _QWORD *v59;
  _DWORD *v60;
  unint64_t v61;
  _DWORD *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  BOOL v66;
  unint64_t v67;
  _DWORD *v68;
  int v69;
  NSObject *v70;
  _BOOL4 v71;
  int v72;
  __int128 v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t *v80;
  int v81;
  uint64_t v82;
  int v83;
  BOOL v84;
  int v85;
  uint64_t v86;
  int v87;
  BOOL v88;
  int v89;
  _BOOL4 v91;
  int v92;
  int v93;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  _BOOL4 v103;
  NSObject *v104;
  _QWORD *v105;
  uint64_t *v106;
  void *v107;
  void *v108;
  char v109;
  uint64_t *v110;
  uint64_t v111;
  unint64_t v112;
  int *v113;
  int *v114;
  int v115;
  char *v116;
  _DWORD *v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  int *v124;
  int v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  int *v133;
  int *v134;
  int v135;
  char *v136;
  _DWORD *v137;
  char *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  int *v144;
  int v145;
  char *v146;
  unint64_t v147;
  int *v148;
  int *v149;
  unint64_t v150;
  _DWORD *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  unint64_t v156;
  int v157;
  unint64_t v158;
  _DWORD *v159;
  _DWORD *v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  _DWORD *v166;
  int v167;
  char *v168;
  int *v169;
  int *v170;
  _DWORD *v171;
  int v172;
  _DWORD *v173;
  _DWORD *v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  _DWORD *v180;
  int v181;
  std::string *v182;
  const char *v183;
  int *v184;
  int *v185;
  std::string *v186;
  __int128 v187;
  uint8_t *v188;
  std::string::size_type v189;
  NSObject *v190;
  Espresso *v191;
  const char *v192;
  uint64_t *v193;
  NSObject *v194;
  uint64_t *v195;
  uint64_t *v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  void **v200;
  int v201;
  void **v202;
  int *v203;
  int *v204;
  void **v205;
  std::string *v206;
  std::string *v207;
  __int128 v208;
  uint8_t *v209;
  std::string::size_type v210;
  uint64_t *v211;
  uint64_t *v212;
  uint64_t *v213;
  std::string *v214;
  uint64_t *v215;
  uint64_t *v216;
  int *v217;
  int *v218;
  int v219;
  uint64_t v220;
  _QWORD *v221;
  _QWORD *i;
  __int128 *j;
  std::string *v224;
  std::string *v225;
  unsigned __int8 *v226;
  char *v227;
  uint64_t v228;
  unint64_t *v229;
  unint64_t *v230;
  unint64_t v231;
  std::string *v232;
  std::string *v233;
  uint64_t *v234;
  uint64_t *v235;
  uint64_t *v236;
  uint64_t *v237;
  _QWORD *v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  _QWORD *v241;
  uint64_t **v242;
  _QWORD *v243;
  uint64_t *v244;
  _QWORD *v245;
  uint64_t v246;
  _QWORD *v247;
  _DWORD *v248;
  _DWORD *v249;
  int v250;
  _QWORD *v251;
  _QWORD *v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  void *v259;
  unint64_t *v260;
  unint64_t v261;
  std::runtime_error *exception;
  __int128 v263;
  uint64_t v264;
  std::__shared_weak_count *v265;
  uint64_t v266;
  void *v267;
  unint64_t v268;
  uint64_t **v269;
  uint64_t **v270;
  unint64_t *v271;
  uint64_t *v272;
  _QWORD *v273;
  std::string v274;
  void *__p[2];
  char v276;
  std::string v277;
  unint64_t v278;
  uint64_t *v279;
  _QWORD *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  __int128 buf;
  __int128 v288;
  int v289;
  _BYTE v290[32];
  int v291;
  uint8_t v292[4];
  void **v293;
  __int16 v294;
  std::string *v295;
  uint8_t v296[24];
  __int128 *v297;
  __int128 v298;
  uint64_t v299;

  v299 = *MEMORY[0x1E0C80C00];
  v5 = (***(uint64_t (****)(_QWORD))(*((_QWORD *)a1 + 2) + 8))(*(_QWORD *)(*((_QWORD *)a1 + 2) + 8));
  v6 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((_QWORD *)a1 + 66, v5);
  if (!v6)
    goto LABEL_441;
  v7 = v6;
  v8 = (const void *)v6[3];
  v9 = (std::__shared_weak_count *)v7[4];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  if (!v8
  {
    v273 = 0;
    v265 = 0;
    if (!v9)
      goto LABEL_441;
    goto LABEL_12;
  }
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v265 = v9;
LABEL_12:
    v14 = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    if (v273)
      goto LABEL_17;
LABEL_441:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::invalid_state_error::invalid_state_error(exception);
  }
  v265 = 0;
LABEL_17:
  std::vector<std::unordered_set<std::string>>::vector(&v285, 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v273[5] - v273[4]) >> 3));
  v264 = a2;
  v282 = 0;
  v283 = 0;
  v284 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v282, *((_QWORD *)a1 + 83), *((_QWORD *)a1 + 84), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a1 + 84) - *((_QWORD *)a1 + 83)) >> 3));
  v18 = *((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 5) != v18)
  {
    v19 = 0;
    while (1)
    {
      v20 = *(_QWORD *)(v18 + 16 * v19);
      v16 = *(_QWORD *)(v20 + 64);
      if (v16)
      {
        if (v16)
          break;
      }
LABEL_45:
      v31 = v273[10];
      if (v19 < (v273[11] - v31) >> 2)
      {
        v32 = *(_DWORD *)(v31 + 4 * v19);
        if ((v32 & 0x80000000) == 0)
        {
          std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>(v285 + 40 * v32, vcvtps_u32_f32((float)(0xAAAAAAAAAAAAAAABLL * ((v283 - v282) >> 3)) / *(float *)(v285 + 40 * v32 + 32)));
          v34 = v282;
          v33 = v283;
          while (v34 != v33)
          {
            v16 = (uint64_t)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v285 + 40 * v32, v34, v34);
            v34 += 24;
          }
        }
      }
      ++v19;
      v18 = *((_QWORD *)a1 + 4);
      if (v19 >= (*((_QWORD *)a1 + 5) - v18) >> 4)
        goto LABEL_51;
    }
    v21 = v16;
    v22 = *(std::__shared_weak_count **)(v20 + 72);
    *(_QWORD *)v296 = v16;
    *(_QWORD *)&v296[8] = v22;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 320))(v16);
    v25 = *(char *)(v16 + 23);
    if (v25 < 0)
    {
      if (*(_QWORD *)(v16 + 8) != 12)
      {
LABEL_40:
        if (v22)
        {
          v29 = (unint64_t *)&v22->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        goto LABEL_45;
      }
      v16 = *(_QWORD *)v16;
    }
    else if (v25 != 12)
    {
      goto LABEL_40;
    }
    v26 = *(_QWORD *)v16 == 0x756F5F646E756F62 && *(_DWORD *)(v16 + 8) == 1953853556;
    if (v26 && &v282 != (uint64_t *)(v21 + 432))
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v282, *(std::string **)(v21 + 432), *(std::string **)(v21 + 440), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v21 + 440) - *(_QWORD *)(v21 + 432)) >> 3));
    goto LABEL_40;
  }
LABEL_51:
  v35 = v285;
  v36 = v286;
  if (v285 != v286)
  {
    v37 = 0;
    do
    {
      v38 = (Espresso *)std::unordered_set<std::string>::unordered_set((uint64_t)v296, v35);
      Espresso::espresso_os_log_subsystem(v38, v39);
      v40 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v290 = 67109120;
        *(_DWORD *)&v290[4] = v37;
        _os_log_debug_impl(&dword_190DAF000, v40, OS_LOG_TYPE_DEBUG, "pass_ane_multi_head: outputs_per_segment: %d: ", v290, 8u);
        ++v37;
      }

      v43 = *(uint64_t **)&v296[16];
      if (*(_QWORD *)&v296[16])
      {
        do
        {
          if (*((char *)v43 + 39) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v290, (const std::string::value_type *)v43[2], v43[3]);
          }
          else
          {
            *(_OWORD *)v290 = *((_OWORD *)v43 + 1);
            *(_QWORD *)&v290[16] = v43[4];
          }
          Espresso::espresso_os_log_subsystem(v41, v42);
          v44 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
          {
            if (v290[23] >= 0)
              v45 = v290;
            else
              v45 = *(_BYTE **)v290;
            LODWORD(buf) = 136315138;
            *(_QWORD *)((char *)&buf + 4) = v45;
            _os_log_debug_impl(&dword_190DAF000, v44, OS_LOG_TYPE_DEBUG, "\t%s", (uint8_t *)&buf, 0xCu);
          }

          if ((v290[23] & 0x80000000) != 0)
            operator delete(*(void **)v290);
          v43 = (uint64_t *)*v43;
        }
        while (v43);
      }
      v16 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v296);
      v35 += 40;
    }
    while (v35 != v36);
  }
  v280 = 0;
  v281 = 0;
  v279 = (uint64_t *)&v280;
  *(_DWORD *)v290 = 0;
  v46 = v273[4];
  if (v273[5] != v46)
  {
    LODWORD(v47) = 0;
    v48 = 0;
    LOBYTE(v49) = 0;
    do
    {
      if ((v49 & 1) == 0)
      {
        Espresso::espresso_os_log_subsystem((Espresso *)v16, v17);
        v50 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v296 = 67109120;
          *(_DWORD *)&v296[4] = v47;
          _os_log_debug_impl(&dword_190DAF000, v50, OS_LOG_TYPE_DEBUG, "pass_ane_multi_head: new segment group: %d", v296, 8u);
        }

        v298 = 0u;
        memset(v296, 0, sizeof(v296));
        v297 = &v298;
        v51 = std::__tree<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v279, v47, v290);
        v52 = (void *)*((_QWORD *)v51 + 5);
        if (v52)
        {
          *((_QWORD *)v51 + 6) = v52;
          operator delete(v52);
          *((_QWORD *)v51 + 5) = 0;
          *((_QWORD *)v51 + 6) = 0;
          *((_QWORD *)v51 + 7) = 0;
        }
        v54 = v51 + 72;
        v53 = (_QWORD *)*((_QWORD *)v51 + 9);
        *(_OWORD *)(v51 + 40) = *(_OWORD *)v296;
        *((_QWORD *)v51 + 7) = *(_QWORD *)&v296[16];
        memset(v296, 0, sizeof(v296));
        std::__tree<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>>>::destroy(v53);
        v55 = (_QWORD *)v298;
        *((_QWORD *)v51 + 8) = v297;
        *((_QWORD *)v51 + 9) = v55;
        v56 = *((_QWORD *)&v298 + 1);
        *((_QWORD *)v51 + 10) = *((_QWORD *)&v298 + 1);
        if (v56)
        {
          v55[2] = v54;
          v55 = 0;
          v297 = &v298;
          v298 = 0uLL;
        }
        else
        {
          *((_QWORD *)v51 + 8) = v54;
        }
        std::__tree<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>>>::destroy(v55);
        v16 = *(_QWORD *)v296;
        if (*(_QWORD *)v296)
        {
          *(_QWORD *)&v296[8] = *(_QWORD *)v296;
          operator delete(*(void **)v296);
        }
      }
      v57 = v280;
      v58 = &v280;
      if (v280)
      {
        do
        {
          v59 = v57;
          v57 = (_QWORD *)v57[1];
        }
        while (v57);
      }
      else
      {
        do
        {
          v59 = v58[2];
          v26 = *v59 == (_QWORD)v58;
          v58 = (_QWORD **)v59;
        }
        while (v26);
      }
      v60 = (_DWORD *)v59[6];
      v61 = v59[7];
      if ((unint64_t)v60 >= v61)
      {
        v16 = v59[5];
        v63 = ((uint64_t)v60 - v16) >> 2;
        if ((unint64_t)(v63 + 1) >> 62)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v64 = v61 - v16;
        v65 = (uint64_t)(v61 - v16) >> 1;
        if (v65 <= v63 + 1)
          v65 = v63 + 1;
        v66 = v64 >= 0x7FFFFFFFFFFFFFFCLL;
        v67 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v66)
          v67 = v65;
        if (v67)
        {
          v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v67);
          v16 = v59[5];
          v60 = (_DWORD *)v59[6];
        }
        else
        {
          v17 = 0;
        }
        v68 = (_DWORD *)(v67 + 4 * v63);
        *v68 = v47;
        v62 = v68 + 1;
        while (v60 != (_DWORD *)v16)
        {
          v69 = *--v60;
          *--v68 = v69;
        }
        v59[5] = v68;
        v59[6] = v62;
        v59[7] = v67 + 4 * (_QWORD)v17;
        if (v16)
          operator delete((void *)v16);
      }
      else
      {
        *v60 = v47;
        v62 = v60 + 1;
      }
      v59[6] = v62;
      Espresso::espresso_os_log_subsystem((Espresso *)v16, v17);
      v70 = objc_claimAutoreleasedReturnValue();
      v71 = os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG);
      v72 = *(_DWORD *)v290;
      if (v71)
      {
        *(_DWORD *)v296 = 67109120;
        *(_DWORD *)&v296[4] = *(_DWORD *)v290;
        _os_log_debug_impl(&dword_190DAF000, v70, OS_LOG_TYPE_DEBUG, "pass_ane_multi_head:\tcoalescing segment %d", v296, 8u);
      }

      v74 = v273[4];
      v75 = 0xEEEEEEEEEEEEEEEFLL * ((v273[5] - v74) >> 3);
      v47 = v72 + 1;
      if (v75 - 1 > v72)
      {
        v76 = (unint64_t *)(v74 + 120 * v47);
        v77 = *(_QWORD *)(v46 + 120 * v48 + 8);
        if (v77 < *v76)
        {
          v49 = 1;
          v271 = (unint64_t *)(v74 + 120 * v47);
          while (1)
          {
            v78 = *((_QWORD *)a1 + 4) + 16 * v77;
            v79 = *(_QWORD **)v78;
            v80 = (uint64_t *)(*(_QWORD *)v78 + 40);
            v81 = *(unsigned __int8 *)(*(_QWORD *)v78 + 63);
            if ((*(char *)(*(_QWORD *)v78 + 63) & 0x80000000) == 0)
            {
              if (v81 == 5)
              {
                v83 = *(unsigned __int8 *)(*(_QWORD *)v78 + 44);
                v84 = *(_DWORD *)v80 == 1767859811;
                v85 = 102;
              }
              else
              {
                v82 = *(_QWORD *)v78 + 40;
                if (v81 == 6)
                  goto LABEL_123;
                if (v81 != 7)
                {
                  v91 = 0;
LABEL_154:
                  if (v81 == 16)
                    goto LABEL_159;
                  goto LABEL_165;
                }
                v83 = *(_DWORD *)(*(_QWORD *)v78 + 43);
                v84 = *(_DWORD *)v80 == 1818850658;
                v85 = 1852404844;
              }
              if (!v84 || v83 != v85)
                goto LABEL_134;
              goto LABEL_135;
            }
            v86 = v79[6];
            if (v86 == 5)
            {
              v87 = *(unsigned __int8 *)(*v80 + 4);
              v88 = *(_DWORD *)*v80 == 1767859811;
              v89 = 102;
              goto LABEL_130;
            }
            if (v86 == 6)
              break;
            if (v86 == 7)
            {
              v87 = *(_DWORD *)(*v80 + 3);
              v88 = *(_DWORD *)*v80 == 1818850658;
              v89 = 1852404844;
LABEL_130:
              if (!v88 || v87 != v89)
              {
LABEL_134:
                v91 = 0;
                goto LABEL_165;
              }
              goto LABEL_135;
            }
            v91 = 0;
LABEL_157:
            if (v86 == 16)
            {
              v80 = (uint64_t *)*v80;
LABEL_159:
              v103 = *v80 == 0x5F747865746E6F63 && v80[1] == 0x726566736E617274;
              goto LABEL_166;
            }
LABEL_165:
            v103 = 0;
LABEL_166:
            v49 &= v91 || v103;
            Espresso::espresso_os_log_subsystem((Espresso *)v16, v17);
            v104 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v104, OS_LOG_TYPE_DEBUG))
            {
              v105 = (_QWORD *)(*(_QWORD *)v78 + 40);
              if (*(char *)(*(_QWORD *)v78 + 63) < 0)
                v105 = (_QWORD *)*v105;
              *(_DWORD *)v296 = 134218498;
              *(_QWORD *)&v296[4] = v77;
              *(_WORD *)&v296[12] = 2080;
              *(_QWORD *)&v296[14] = v105;
              *(_WORD *)&v296[22] = 1024;
              LODWORD(v297) = v49;
              _os_log_debug_impl(&dword_190DAF000, v104, OS_LOG_TYPE_DEBUG, "pass_ane_multi_head:\tintermediate %zu %s cn=%d\n", v296, 0x1Cu);
            }

            if (++v77 >= *v76)
            {
              v74 = v273[4];
              v75 = 0xEEEEEEEEEEEEEEEFLL * ((v273[5] - v74) >> 3);
              goto LABEL_173;
            }
          }
          v82 = *v80;
LABEL_123:
          v92 = *(_DWORD *)v82;
          v93 = *(unsigned __int16 *)(v82 + 4);
          if (v92 != 1700750947 || v93 != 25710)
          {
            v91 = 0;
            if ((v81 & 0x80) == 0)
              goto LABEL_154;
LABEL_128:
            v86 = v79[6];
            goto LABEL_157;
          }
LABEL_135:
          if (*((char *)v79 + 39) < 0)
          {
            v96 = (void *)v79[2];
            v97 = v79[3];
          }
          else
          {
            v96 = v79 + 2;
            v97 = *((unsigned __int8 *)v79 + 39);
          }
          v98 = (uint64_t)v96 + v97;
          if (v97 >= 11)
          {
            v99 = v96;
            do
            {
              v16 = (uint64_t)memchr(v99, 109, v97 - 10);
              if (!v16)
                break;
              if (*(_QWORD *)v16 == 0x72746E6F635F686DLL && *(_QWORD *)(v16 + 3) == 0x406C6F72746E6F63)
                goto LABEL_147;
              v99 = (void *)(v16 + 1);
              v97 = v98 - (_QWORD)v99;
            }
            while (v98 - (uint64_t)v99 > 10);
          }
          v16 = v98;
LABEL_147:
          v91 = v16 != v98 && v16 == (_QWORD)v96;
          v76 = v271;
          if ((v81 & 0x80) == 0)
            goto LABEL_154;
          goto LABEL_128;
        }
      }
      LOBYTE(v49) = 1;
LABEL_173:
      *(_DWORD *)v290 = v47;
      v46 = v74;
      v48 = v47;
    }
    while (v75 > v47);
    v106 = v279;
    if (v279 != (uint64_t *)&v280)
    {
      v266 = *MEMORY[0x1E0CB2B58];
      *(_QWORD *)&v73 = 136315138;
      v263 = v73;
      while (1)
      {
        objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults", v263);
        v107 = (void *)objc_claimAutoreleasedReturnValue();
        v272 = v106;
        objc_msgSend(v107, "persistentDomainForName:", v266);
        v267 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v267, "objectForKeyedSubscript:", CFSTR("espresso.ane.no_mh_procedures"));
        v108 = (void *)objc_claimAutoreleasedReturnValue();
        v109 = objc_msgSend(v108, "BOOLValue");

        v110 = v272;
        if ((v109 & 1) == 0)
        {
          v111 = *((_QWORD *)a1 + 84);
          if (v111 == *((_QWORD *)a1 + 83))
          {
            v128 = 0;
            v127 = *((_QWORD *)a1 + 84);
          }
          else
          {
            v112 = 0;
            do
            {
              memset(v296, 0, sizeof(v296));
              v113 = (int *)v110[5];
              v114 = (int *)v110[6];
              while (v113 != v114)
              {
                v115 = *v113;
                if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((_QWORD *)(v285 + 40 * *v113), *((_QWORD *)a1 + 83) + 24 * v112))
                {
                  v116 = *(char **)&v296[8];
                  if (*(_QWORD *)&v296[8] >= *(_QWORD *)&v296[16])
                  {
                    v118 = *(char **)v296;
                    v119 = (uint64_t)(*(_QWORD *)&v296[8] - *(_QWORD *)v296) >> 2;
                    v120 = v119 + 1;
                    if ((unint64_t)(v119 + 1) >> 62)
                      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                    v121 = *(_QWORD *)&v296[16] - *(_QWORD *)v296;
                    if ((uint64_t)(*(_QWORD *)&v296[16] - *(_QWORD *)v296) >> 1 > v120)
                      v120 = v121 >> 1;
                    v66 = (unint64_t)v121 >= 0x7FFFFFFFFFFFFFFCLL;
                    v122 = 0x3FFFFFFFFFFFFFFFLL;
                    if (!v66)
                      v122 = v120;
                    if (v122)
                    {
                      v122 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v122);
                      v118 = *(char **)v296;
                      v116 = *(char **)&v296[8];
                    }
                    else
                    {
                      v123 = 0;
                    }
                    v124 = (int *)(v122 + 4 * v119);
                    *v124 = v115;
                    v117 = v124 + 1;
                    while (v116 != v118)
                    {
                      v125 = *((_DWORD *)v116 - 1);
                      v116 -= 4;
                      *--v124 = v125;
                    }
                    *(_QWORD *)v296 = v124;
                    *(_QWORD *)&v296[8] = v117;
                    *(_QWORD *)&v296[16] = v122 + 4 * v123;
                    if (v118)
                      operator delete(v118);
                  }
                  else
                  {
                    **(_DWORD **)&v296[8] = v115;
                    v117 = v116 + 4;
                  }
                  *(_QWORD *)&v296[8] = v117;
                }
                ++v113;
              }
              *(_QWORD *)v290 = 1 << v112;
              v126 = std::__tree<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)v272 + 8, 1 << v112, v290)+ 40;
              if (v126 != (char *)v296)
                std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v126, *(char **)v296, *(uint64_t *)&v296[8], (uint64_t)(*(_QWORD *)&v296[8] - *(_QWORD *)v296) >> 2);
              if (*(_QWORD *)v296)
              {
                *(_QWORD *)&v296[8] = *(_QWORD *)v296;
                operator delete(*(void **)v296);
              }
              ++v112;
              v127 = *((_QWORD *)a1 + 84);
              v111 = *((_QWORD *)a1 + 83);
              v128 = 0xAAAAAAAAAAAAAAABLL * ((v127 - v111) >> 3);
              v110 = v272;
            }
            while (v112 < v128);
          }
          if (v128 > 0xB)
            goto LABEL_239;
          if (v127 != v111)
            break;
        }
LABEL_276:
        buf = 0uLL;
        *(_QWORD *)&v288 = 0;
        v169 = (int *)v110[5];
        v170 = (int *)v110[6];
        if (v169 != v170)
        {
          v171 = 0;
          do
          {
            v172 = *v169;
            if ((unint64_t)v171 >= (unint64_t)v288)
            {
              v174 = (_DWORD *)buf;
              v175 = (uint64_t)((uint64_t)v171 - buf) >> 2;
              v176 = v175 + 1;
              if ((unint64_t)(v175 + 1) >> 62)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v177 = v288 - buf;
              if ((uint64_t)(v288 - buf) >> 1 > v176)
                v176 = v177 >> 1;
              v66 = (unint64_t)v177 >= 0x7FFFFFFFFFFFFFFCLL;
              v178 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v66)
                v178 = v176;
              if (v178)
              {
                v178 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v178);
                v171 = (_DWORD *)*((_QWORD *)&buf + 1);
                v174 = (_DWORD *)buf;
              }
              else
              {
                v179 = 0;
              }
              v180 = (_DWORD *)(v178 + 4 * v175);
              *v180 = v172;
              v173 = v180 + 1;
              while (v171 != v174)
              {
                v181 = *--v171;
                *--v180 = v181;
              }
              *(_QWORD *)&buf = v180;
              *((_QWORD *)&buf + 1) = v173;
              *(_QWORD *)&v288 = v178 + 4 * v179;
              if (v174)
                operator delete(v174);
            }
            else
            {
              *v171 = v172;
              v173 = v171 + 1;
            }
            *((_QWORD *)&buf + 1) = v173;
            ++v169;
            v171 = v173;
          }
          while (v169 != v170);
        }
        v278 = ~(-1 << (-85 * ((uint64_t)(*((_QWORD *)a1 + 84) - *((_QWORD *)a1 + 83)) >> 3)));
        v182 = (std::string *)(std::__tree<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)v110 + 8, v278, &v278)+ 40);
        if (v182 != (std::string *)&buf)
          v182 = (std::string *)std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v182, (char *)buf, *((uint64_t *)&buf + 1), (uint64_t)(*((_QWORD *)&buf + 1) - buf) >> 2);
        memset(&v277, 0, sizeof(v277));
        v184 = (int *)v110[5];
        v185 = (int *)v110[6];
        while (v184 != v185)
        {
          std::to_string((std::string *)v290, *v184);
          v186 = std::string::append((std::string *)v290, ", ");
          v187 = *(_OWORD *)&v186->__r_.__value_.__l.__data_;
          *(_QWORD *)&v296[16] = *((_QWORD *)&v186->__r_.__value_.__l + 2);
          *(_OWORD *)v296 = v187;
          v186->__r_.__value_.__l.__size_ = 0;
          v186->__r_.__value_.__r.__words[2] = 0;
          v186->__r_.__value_.__r.__words[0] = 0;
          if ((v296[23] & 0x80u) == 0)
            v188 = v296;
          else
            v188 = *(uint8_t **)v296;
          if ((v296[23] & 0x80u) == 0)
            v189 = v296[23];
          else
            v189 = *(_QWORD *)&v296[8];
          v182 = std::string::append(&v277, (const std::string::value_type *)v188, v189);
          if ((char)v296[23] < 0)
            operator delete(*(void **)v296);
          if ((v290[23] & 0x80000000) != 0)
            operator delete(*(void **)v290);
          ++v184;
        }
        Espresso::espresso_os_log_subsystem((Espresso *)v182, v183);
        v190 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v190, OS_LOG_TYPE_DEBUG))
        {
          v214 = &v277;
          if ((v277.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v214 = (std::string *)v277.__r_.__value_.__r.__words[0];
          *(_DWORD *)v296 = v263;
          *(_QWORD *)&v296[4] = v214;
          _os_log_debug_impl(&dword_190DAF000, v190, OS_LOG_TYPE_DEBUG, "pass_ane_multi_head: segments_group=%s", v296, 0xCu);
        }

        v193 = (uint64_t *)v272[8];
        if (v193 != v272 + 9)
        {
          do
          {
            Espresso::espresso_os_log_subsystem(v191, v192);
            v194 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v194, OS_LOG_TYPE_DEBUG))
            {
              v197 = 0;
              v198 = *((unsigned __int8 *)v193 + 32);
              v276 = 8;
              strcpy((char *)__p, "00000000");
              v199 = 7;
              do
              {
                if (((v198 >> v197) & 1) != 0)
                {
                  if (v276 >= 0)
                    v200 = __p;
                  else
                    v200 = (void **)__p[0];
                  *((_BYTE *)v200 + v199) = 49;
                }
                ++v197;
                --v199;
              }
              while (v197 != 8);
              v201 = v276;
              v202 = (void **)__p[0];
              memset(&v274, 0, sizeof(v274));
              v204 = (int *)v193[5];
              v203 = (int *)v193[6];
              if (v204 == v203)
              {
                v205 = __p;
                if (v276 < 0)
                  v205 = (void **)__p[0];
                v206 = &v274;
              }
              else
              {
                do
                {
                  std::to_string((std::string *)v290, *v204);
                  v207 = std::string::append((std::string *)v290, ", ");
                  v208 = *(_OWORD *)&v207->__r_.__value_.__l.__data_;
                  *(_QWORD *)&v296[16] = *((_QWORD *)&v207->__r_.__value_.__l + 2);
                  *(_OWORD *)v296 = v208;
                  v207->__r_.__value_.__l.__size_ = 0;
                  v207->__r_.__value_.__r.__words[2] = 0;
                  v207->__r_.__value_.__r.__words[0] = 0;
                  if ((v296[23] & 0x80u) == 0)
                    v209 = v296;
                  else
                    v209 = *(uint8_t **)v296;
                  if ((v296[23] & 0x80u) == 0)
                    v210 = v296[23];
                  else
                    v210 = *(_QWORD *)&v296[8];
                  std::string::append(&v274, (const std::string::value_type *)v209, v210);
                  if ((char)v296[23] < 0)
                    operator delete(*(void **)v296);
                  if ((v290[23] & 0x80000000) != 0)
                    operator delete(*(void **)v290);
                  ++v204;
                }
                while (v204 != v203);
                v205 = __p;
                if (v201 < 0)
                  v205 = v202;
                v206 = &v274;
                if ((v274.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v206 = (std::string *)v274.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)v292 = 136315394;
              v293 = v205;
              v294 = 2080;
              v295 = v206;
              _os_log_debug_impl(&dword_190DAF000, v194, OS_LOG_TYPE_DEBUG, "\toutput_configuration=%s combo_desc=%s", v292, 0x16u);
              if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v274.__r_.__value_.__l.__data_);
              if (v276 < 0)
                operator delete(__p[0]);
            }

            v195 = (uint64_t *)v193[1];
            if (v195)
            {
              do
              {
                v196 = v195;
                v195 = (uint64_t *)*v195;
              }
              while (v195);
            }
            else
            {
              do
              {
                v196 = (uint64_t *)v193[2];
                v26 = *v196 == (_QWORD)v193;
                v193 = v196;
              }
              while (!v26);
            }
            v193 = v196;
          }
          while (v196 != v272 + 9);
        }
        if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v277.__r_.__value_.__l.__data_);
        if ((_QWORD)buf)
        {
          *((_QWORD *)&buf + 1) = buf;
          operator delete((void *)buf);
        }

        v211 = v272;
        v212 = (uint64_t *)v272[1];
        if (v212)
        {
          do
          {
            v213 = v212;
            v212 = (uint64_t *)*v212;
          }
          while (v212);
        }
        else
        {
          do
          {
            v213 = (uint64_t *)v211[2];
            v26 = *v213 == (_QWORD)v211;
            v211 = v213;
          }
          while (!v26);
        }
        v106 = v213;
        if (v213 == (uint64_t *)&v280)
          goto LABEL_363;
      }
      v129 = 0;
      v269 = (uint64_t **)(v110 + 8);
      do
      {
        v130 = v129++;
        v131 = 0xAAAAAAAAAAAAAAABLL * ((v127 - v111) >> 3);
        if (v129 < v131)
        {
          v268 = v129;
          v132 = v129;
          do
          {
            memset(v296, 0, sizeof(v296));
            v134 = (int *)v272[5];
            v133 = (int *)v272[6];
            while (v134 != v133)
            {
              v135 = *v134;
              if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((_QWORD *)(v285 + 40 * *v134), *((_QWORD *)a1 + 83) + 24 * v130)|| std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((_QWORD *)(v285 + 40 * v135), *((_QWORD *)a1 + 83) + 24 * v132))
              {
                v136 = *(char **)&v296[8];
                if (*(_QWORD *)&v296[8] >= *(_QWORD *)&v296[16])
                {
                  v138 = *(char **)v296;
                  v139 = (uint64_t)(*(_QWORD *)&v296[8] - *(_QWORD *)v296) >> 2;
                  v140 = v139 + 1;
                  if ((unint64_t)(v139 + 1) >> 62)
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  v141 = *(_QWORD *)&v296[16] - *(_QWORD *)v296;
                  if ((uint64_t)(*(_QWORD *)&v296[16] - *(_QWORD *)v296) >> 1 > v140)
                    v140 = v141 >> 1;
                  v66 = (unint64_t)v141 >= 0x7FFFFFFFFFFFFFFCLL;
                  v142 = 0x3FFFFFFFFFFFFFFFLL;
                  if (!v66)
                    v142 = v140;
                  if (v142)
                  {
                    v142 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v142);
                    v138 = *(char **)v296;
                    v136 = *(char **)&v296[8];
                  }
                  else
                  {
                    v143 = 0;
                  }
                  v144 = (int *)(v142 + 4 * v139);
                  *v144 = v135;
                  v137 = v144 + 1;
                  while (v136 != v138)
                  {
                    v145 = *((_DWORD *)v136 - 1);
                    v136 -= 4;
                    *--v144 = v145;
                  }
                  *(_QWORD *)v296 = v144;
                  *(_QWORD *)&v296[8] = v137;
                  *(_QWORD *)&v296[16] = v142 + 4 * v143;
                  if (v138)
                    operator delete(v138);
                }
                else
                {
                  **(_DWORD **)&v296[8] = v135;
                  v137 = v136 + 4;
                }
                *(_QWORD *)&v296[8] = v137;
              }
              ++v134;
            }
            *(_QWORD *)v290 = (1 << v132) | (1 << v130);
            v146 = std::__tree<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v269, *(unint64_t *)v290, v290)+ 40;
            if (v146 != (char *)v296)
              std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v146, *(char **)v296, *(uint64_t *)&v296[8], (uint64_t)(*(_QWORD *)&v296[8] - *(_QWORD *)v296) >> 2);
            if (*(_QWORD *)v296)
            {
              *(_QWORD *)&v296[8] = *(_QWORD *)v296;
              operator delete(*(void **)v296);
            }
            ++v132;
            v127 = *((_QWORD *)a1 + 84);
            v111 = *((_QWORD *)a1 + 83);
            v131 = 0xAAAAAAAAAAAAAAABLL * ((v127 - v111) >> 3);
          }
          while (v132 < v131);
          v110 = v272;
          v129 = v268;
        }
      }
      while (v129 < v131);
LABEL_239:
      if (v127 != v111)
      {
        v147 = 0;
        v270 = (uint64_t **)(v110 + 8);
        do
        {
          memset(v296, 0, sizeof(v296));
          *(_QWORD *)v290 = 0;
          v148 = (int *)v110[5];
          v149 = (int *)v110[6];
          if (v148 == v149)
          {
            v150 = 0;
          }
          else
          {
            v150 = 0;
            v151 = 0;
            do
            {
              v152 = *((_QWORD *)a1 + 84);
              v153 = *((_QWORD *)a1 + 83);
              v154 = v152 - v153;
              if (v152 != v153)
              {
                v155 = 0;
                v156 = 0;
                v157 = *v148;
                v158 = v154 / 24;
                if (v158 <= 1)
                  v158 = 1;
                do
                {
                  while (v156 != v147)
                  {
                    v155 = 1;
                    v150 |= 1 << v156++;
                    if (v156 == v158)
                      goto LABEL_252;
                  }
                  v156 = v147 + 1;
                }
                while (v147 + 1 != v158);
                if ((v155 & 1) == 0)
                  goto LABEL_268;
LABEL_252:
                if ((unint64_t)v151 >= *(_QWORD *)&v296[16])
                {
                  v160 = *(_DWORD **)v296;
                  v161 = ((uint64_t)v151 - *(_QWORD *)v296) >> 2;
                  v162 = v161 + 1;
                  if ((unint64_t)(v161 + 1) >> 62)
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  v163 = *(_QWORD *)&v296[16] - *(_QWORD *)v296;
                  if ((uint64_t)(*(_QWORD *)&v296[16] - *(_QWORD *)v296) >> 1 > v162)
                    v162 = v163 >> 1;
                  v66 = (unint64_t)v163 >= 0x7FFFFFFFFFFFFFFCLL;
                  v164 = 0x3FFFFFFFFFFFFFFFLL;
                  if (!v66)
                    v164 = v162;
                  if (v164)
                  {
                    v164 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v164);
                    v160 = *(_DWORD **)v296;
                    v151 = *(_DWORD **)&v296[8];
                  }
                  else
                  {
                    v165 = 0;
                  }
                  v166 = (_DWORD *)(v164 + 4 * v161);
                  *v166 = v157;
                  v159 = v166 + 1;
                  while (v151 != v160)
                  {
                    v167 = *--v151;
                    *--v166 = v167;
                  }
                  *(_QWORD *)v296 = v166;
                  *(_QWORD *)&v296[8] = v159;
                  *(_QWORD *)&v296[16] = v164 + 4 * v165;
                  if (v160)
                    operator delete(v160);
                }
                else
                {
                  *v151 = v157;
                  v159 = v151 + 1;
                }
                *(_QWORD *)&v296[8] = v159;
                v151 = v159;
              }
LABEL_268:
              ++v148;
            }
            while (v148 != v149);
            *(_QWORD *)v290 = v150;
          }
          v110 = v272;
          v168 = std::__tree<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v270, v150, v290)+ 40;
          if (v168 != (char *)v296)
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v168, *(char **)v296, *(uint64_t *)&v296[8], (uint64_t)(*(_QWORD *)&v296[8] - *(_QWORD *)v296) >> 2);
          if (*(_QWORD *)v296)
          {
            *(_QWORD *)&v296[8] = *(_QWORD *)v296;
            operator delete(*(void **)v296);
          }
          ++v147;
        }
        while (v147 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a1 + 84) - *((_QWORD *)a1 + 83)) >> 3));
      }
      goto LABEL_276;
    }
  }
LABEL_363:
  memset(v290, 0, sizeof(v290));
  v291 = 1065353216;
  Espresso::net::get_consumers_of_blobs(a1, v290, (uint64_t)v296);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v290);
  v215 = v279;
  if (v279 != (uint64_t *)&v280)
  {
    while (1)
    {
      v216 = (uint64_t *)v215[8];
      if (v216 != v215 + 9)
        break;
LABEL_397:
      v236 = (uint64_t *)v215[1];
      if (v236)
      {
        do
        {
          v237 = v236;
          v236 = (uint64_t *)*v236;
        }
        while (v236);
      }
      else
      {
        do
        {
          v237 = (uint64_t *)v215[2];
          v26 = *v237 == (_QWORD)v215;
          v215 = v237;
        }
        while (!v26);
      }
      v215 = v237;
      if (v237 == (uint64_t *)&v280)
        goto LABEL_403;
    }
    while (1)
    {
      memset(v290, 0, sizeof(v290));
      v291 = 1065353216;
      buf = 0u;
      v288 = 0u;
      v289 = 1065353216;
      v217 = (int *)v216[5];
      v218 = (int *)v216[6];
      if (v217 != v218)
      {
        do
        {
          v219 = *v217;
          v220 = v273[4];
          v221 = *(_QWORD **)(v220 + 120 * *v217 + 32);
          if (v221)
          {
            do
            {
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&buf, (uint64_t)(v221 + 2), (uint64_t)(v221 + 2));
              v221 = (_QWORD *)*v221;
            }
            while (v221);
            v220 = v273[4];
          }
          for (i = *(_QWORD **)(v220 + 120 * v219 + 72); i; i = (_QWORD *)*i)
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v290, (uint64_t)(i + 2), (uint64_t)(i + 2));
          ++v217;
        }
        while (v217 != v218);
        for (j = (__int128 *)v288; j; j = *(__int128 **)j)
        {
          if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v290, (uint64_t)(j + 1)))
          {
            v224 = (std::string *)v216[9];
            if ((unint64_t)v224 >= v216[10])
            {
              v225 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)v216 + 8, (uint64_t)(j + 1));
            }
            else
            {
              std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)(v216 + 8), j + 1);
              v225 = v224 + 1;
            }
            v216[9] = (uint64_t)v225;
          }
        }
      }
      v226 = *(unsigned __int8 **)&v290[16];
      if (*(_QWORD *)&v290[16])
        break;
LABEL_391:
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&buf);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v290);
      v234 = (uint64_t *)v216[1];
      if (v234)
      {
        do
        {
          v235 = v234;
          v234 = (uint64_t *)*v234;
        }
        while (v234);
      }
      else
      {
        do
        {
          v235 = (uint64_t *)v216[2];
          v26 = *v235 == (_QWORD)v216;
          v216 = v235;
        }
        while (!v26);
      }
      v216 = v235;
      if (v235 == v215 + 9)
        goto LABEL_397;
    }
    while (1)
    {
      v277.__r_.__value_.__r.__words[0] = (std::string::size_type)(v226 + 16);
      v227 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v296, v226 + 16, (__int128 **)&v277);
      v228 = v216[6];
      if (v216[5] != v228)
      {
        v229 = (unint64_t *)*((_QWORD *)v227 + 5);
        v230 = (unint64_t *)*((_QWORD *)v227 + 6);
        if (v229 != v230)
          break;
      }
LABEL_385:
      if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)a1 + 33), (_QWORD *)v226 + 2))
      {
        goto LABEL_386;
      }
LABEL_390:
      v226 = *(unsigned __int8 **)v226;
      if (!v226)
        goto LABEL_391;
    }
    v231 = *(_QWORD *)(v273[4] + 120 * *(int *)(v228 - 4) + 8);
    while (*v229 < v231)
    {
      if (++v229 == v230)
        goto LABEL_385;
    }
LABEL_386:
    v232 = (std::string *)v216[12];
    if ((unint64_t)v232 >= v216[13])
    {
      v233 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)v216 + 11, (uint64_t)(v226 + 16));
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)(v216 + 11), (__int128 *)v226 + 1);
      v233 = v232 + 1;
    }
    v216[12] = (uint64_t)v233;
    goto LABEL_390;
  }
LABEL_403:
  v238 = operator new(0x50uLL);
  v239 = (std::__shared_weak_count *)v238;
  v238[1] = 0;
  v240 = v238 + 1;
  v238[2] = 0;
  v238[3] = &off_1E2D8F1E8;
  v241 = v238 + 3;
  *v238 = &off_1E2DBCD28;
  v238[8] = 0;
  v238[7] = v238 + 8;
  v242 = (uint64_t **)(v238 + 7);
  v244 = v279;
  v243 = v280;
  v238[5] = v280;
  v245 = v238 + 5;
  v238[9] = 0;
  *(_QWORD *)v290 = v238 + 3;
  *(_QWORD *)&v290[8] = v238;
  v238[4] = v244;
  v246 = v281;
  v238[6] = v281;
  if (v246)
  {
    v243[2] = v245;
    v279 = (uint64_t *)&v280;
    v280 = 0;
    v281 = 0;
    v247 = (_QWORD *)v238[4];
    if (v247 != v245)
    {
      do
      {
        v248 = (_DWORD *)v247[5];
        v249 = (_DWORD *)v247[6];
        while (v248 != v249)
        {
          LODWORD(buf) = *v248;
          v250 = *((_DWORD *)v247 + 8);
          *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(v242, buf, (unsigned int *)&buf)+ 8) = v250;
          ++v248;
        }
        v251 = (_QWORD *)v247[1];
        if (v251)
        {
          do
          {
            v252 = v251;
            v251 = (_QWORD *)*v251;
          }
          while (v251);
        }
        else
        {
          do
          {
            v252 = (_QWORD *)v247[2];
            v26 = *v252 == (_QWORD)v247;
            v247 = v252;
          }
          while (!v26);
        }
        v247 = v252;
      }
      while (v252 != v245);
    }
  }
  else
  {
    v238[4] = v245;
  }
  do
    v253 = __ldxr(v240);
  while (__stxr(v253 + 1, v240));
  *(_BYTE *)v264 = 1;
  *(_QWORD *)(v264 + 8) = v241;
  *(_QWORD *)(v264 + 16) = v239;
  do
    v254 = __ldxr(v240);
  while (__stxr(v254 + 1, v240));
  do
    v255 = __ldaxr(v240);
  while (__stlxr(v255 - 1, v240));
  if (!v255)
  {
    ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
    std::__shared_weak_count::__release_weak(v239);
  }
  v256 = *(std::__shared_weak_count **)&v290[8];
  if (*(_QWORD *)&v290[8])
  {
    v257 = (unint64_t *)(*(_QWORD *)&v290[8] + 8);
    do
      v258 = __ldaxr(v257);
    while (__stlxr(v258 - 1, v257));
    if (!v258)
    {
      ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
      std::__shared_weak_count::__release_weak(v256);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node(*(_QWORD **)&v296[16]);
  v259 = *(void **)v296;
  *(_QWORD *)v296 = 0;
  if (v259)
    operator delete(v259);
  std::__tree<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>>>::destroy(v280);
  *(_QWORD *)v296 = &v282;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v296);
  *(_QWORD *)v296 = &v285;
  std::vector<std::unordered_set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v296);
  if (v265)
  {
    v260 = (unint64_t *)&v265->__shared_owners_;
    do
      v261 = __ldaxr(v260);
    while (__stlxr(v261 - 1, v260));
    if (!v261)
    {
      ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
      std::__shared_weak_count::__release_weak(v265);
    }
  }
}

void sub_19176EE18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,_QWORD *a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57)
{
  uint64_t v57;
  void *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;

  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node(*(_QWORD **)(v57 - 144));
  v59 = *(void **)(v57 - 160);
  *(_QWORD *)(v57 - 160) = 0;
  if (v59)
    operator delete(v59);
  std::__tree<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>>>::destroy(a48);
  *(_QWORD *)(v57 - 160) = &a50;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v57 - 160));
  *(_QWORD *)(v57 - 160) = &a53;
  std::vector<std::unordered_set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v57 - 160));
  if (a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v61 = __ldaxr(p_shared_owners);
    while (__stlxr(v61 - 1, p_shared_owners));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  _Unwind_Resume(a1);
}

char *std::__tree<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  char *v5;
  uint64_t **v6;
  char *v7;
  int v8;
  char *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = (char *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *(char **)v7;
        v6 = (uint64_t **)v7;
        if (!*(_QWORD *)v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = (char *)*((_QWORD *)v7 + 1);
      if (!v5)
      {
        v6 = (uint64_t **)(v7 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (char *)(a1 + 1);
LABEL_9:
    v9 = v7;
    v7 = (char *)operator new(0x58uLL);
    *((_DWORD *)v7 + 8) = *a3;
    *(_OWORD *)(v7 + 56) = 0u;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *((_QWORD *)v7 + 8) = v7 + 72;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void Espresso::analysis_ane_multi_head::coalesced_segments_group_t::~coalesced_segments_group_t(Espresso::analysis_ane_multi_head::coalesced_segments_group_t *this)
{
  _QWORD *v2;

  std::__tree<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>>>::destroy(*((_QWORD **)this + 4));
  v2 = *(_QWORD **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

char *std::__tree<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, _QWORD *a3)
{
  char *v5;
  uint64_t **v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = (char *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = v5;
        v8 = *((_QWORD *)v5 + 4);
        if (v8 <= a2)
          break;
        v5 = *(char **)v7;
        v6 = (uint64_t **)v7;
        if (!*(_QWORD *)v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = (char *)*((_QWORD *)v7 + 1);
      if (!v5)
      {
        v6 = (uint64_t **)(v7 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (char *)(a1 + 1);
LABEL_9:
    v9 = v7;
    v7 = (char *)operator new(0x70uLL);
    *((_QWORD *)v7 + 4) = *a3;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 88) = 0u;
    *((_QWORD *)v7 + 13) = 0;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void std::__shared_ptr_emplace<Espresso::analysis_ane_multi_head>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCD28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::analysis_ane_multi_head>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCD28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::analysis_ane_multi_head>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::analysis_ane_multi_head::get_combo_for_coalesced_segment_given_bound_outputs(Espresso *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  int v6;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t *v15;
  int v16;
  NSObject *v17;
  uint64_t **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  _QWORD *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  unint64_t v31;
  BOOL v32;
  _QWORD *v33;
  BOOL v34;
  int v35;
  uint8_t buf[4];
  int v37;
  uint64_t v38;

  v6 = a4;
  v38 = *MEMORY[0x1E0C80C00];
  v35 = a4;
  v8 = *(uint64_t **)(a2 + 16);
  if (v8)
  {
    v9 = *(uint64_t **)(a2 + 16);
    do
    {
      v10 = *((_DWORD *)v9 + 8);
      if (v10 <= a4)
      {
        if (v10 >= a4)
        {
LABEL_26:
          v18 = (uint64_t **)(a2 + 8);
          v19 = *(_QWORD *)(a3 + 64);
          if (v19)
            std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v19 + 48, v6, v6);
          v20 = *(_QWORD *)(a5 + 664);
          if (*(_QWORD *)(a5 + 672) == v20)
          {
            v23 = 0;
          }
          else
          {
            v21 = 0;
            v22 = 0;
            v23 = 0;
            do
            {
              v24 = *(_QWORD *)(a5 + 1240);
              if (!v24
                || (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v24 + 144))(v24, *(unsigned int *)(a5 + 1248), v20 + v21))
              {
                v23 |= 1 << v22;
              }
              ++v22;
              v20 = *(_QWORD *)(a5 + 664);
              v21 += 24;
            }
            while (v22 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a5 + 672) - v20) >> 3));
          }
          v25 = std::__tree<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v18, v6, &v35);
          v28 = (_QWORD *)*((_QWORD *)v25 + 9);
          v26 = v25 + 72;
          v27 = v28;
          if (v28)
          {
            v29 = v26;
            v30 = v27;
            do
            {
              v31 = v30[4];
              v32 = v31 >= v23;
              if (v31 >= v23)
                v33 = v30;
              else
                v33 = v30 + 1;
              if (v32)
                v29 = (char *)v30;
              v30 = (_QWORD *)*v33;
            }
            while (*v33);
            if (v29 == v26 || v23 < *((_QWORD *)v29 + 4))
            {
              do
              {
                v29 = (char *)v27;
                v27 = (_QWORD *)v27[1];
              }
              while (v27);
            }
          }
          else
          {
            do
            {
              v29 = (char *)*((_QWORD *)v26 + 2);
              v34 = *(_QWORD *)v29 == (_QWORD)v26;
              v26 = v29;
            }
            while (v34);
          }
          *(_QWORD *)a1 = 0;
          *((_QWORD *)a1 + 1) = 0;
          *((_QWORD *)a1 + 2) = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1, *((const void **)v29 + 5), *((_QWORD *)v29 + 6), (uint64_t)(*((_QWORD *)v29 + 6) - *((_QWORD *)v29 + 5)) >> 2);
          *((_QWORD *)a1 + 3) = 0;
          *((_QWORD *)a1 + 4) = 0;
          *((_QWORD *)a1 + 5) = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)a1 + 3, *((_QWORD *)v29 + 8), *((_QWORD *)v29 + 9), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v29 + 9) - *((_QWORD *)v29 + 8)) >> 3));
          *((_QWORD *)a1 + 6) = 0;
          *((_QWORD *)a1 + 7) = 0;
          *((_QWORD *)a1 + 8) = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)a1 + 6, *((_QWORD *)v29 + 11), *((_QWORD *)v29 + 12), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v29 + 12) - *((_QWORD *)v29 + 11)) >> 3));
          return;
        }
        ++v9;
      }
      v9 = (uint64_t *)*v9;
    }
    while (v9);
  }
  v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    v12 = a2 + 40;
    do
    {
      v13 = *(_DWORD *)(v11 + 28);
      v14 = v13 < a4;
      if (v13 >= a4)
        v15 = (uint64_t *)v11;
      else
        v15 = (uint64_t *)(v11 + 8);
      if (!v14)
        v12 = v11;
      v11 = *v15;
    }
    while (*v15);
    if (v12 != a2 + 40 && *(_DWORD *)(v12 + 28) <= a4)
    {
      v6 = *(_DWORD *)(v12 + 32);
      v35 = v6;
    }
  }
  for (; v8; v8 = (uint64_t *)*v8)
  {
    v16 = *((_DWORD *)v8 + 8);
    if (v6 >= v16)
    {
      if (v16 >= v6)
        goto LABEL_26;
      ++v8;
    }
  }
  Espresso::espresso_os_log_subsystem(a1, (const char *)a2);
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    v37 = v6;
    _os_log_debug_impl(&dword_190DAF000, v17, OS_LOG_TYPE_DEBUG, "skip segment %d", buf, 8u);
  }

  *((_QWORD *)a1 + 8) = 0;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
}

void sub_19176F628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  va_list va;

  va_start(va, a3);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  v5 = *(void **)v3;
  if (*(_QWORD *)v3)
  {
    *(_QWORD *)(v3 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::pool_kernel::~pool_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 54);
  Espresso::generic_pool_kernel::~generic_pool_kernel((Espresso::generic_pool_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 54);
  Espresso::generic_pool_kernel::~generic_pool_kernel((Espresso::generic_pool_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::pool_kernel::__set_weight_raw_blob(_QWORD *a1, uint64_t a2, unsigned __int8 **a3, char *a4, unint64_t a5, uint64_t *a6)
{
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  int32x2_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21[2];
  __int128 v22[2];
  void *__p;
  void *v24;

  v11 = a1 + 54;
  (*(void (**)(__int128 *__return_ptr, _QWORD *))(a1[54] + 128))(v22, a1 + 54);
  v12 = (std::__shared_weak_count *)a1[2];
  v21[0] = a1[1];
  v21[1] = (uint64_t)v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = (*(uint64_t (**)(_QWORD *))(*v11 + 136))(v11);
  Espresso::set_conv_quantized_weight_helper(v16, v17, v18, v15, a3, a4, a5, a6, (uint64_t)(a1 + 52), v22, v21, v15, 1);
  if (v12)
  {
    v19 = (unint64_t *)&v12->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob(v11, (uint64_t *)a3, a4, a5);
}

void sub_19176F7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL Espresso::ANECompilerEngine::pool_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, Espresso::ANECompilerEngine *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  Espresso::base_kernel::validate_for_engine_args_t *v8;
  void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  const Espresso::net *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _BOOL8 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  const Espresso::net *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  unint64_t *v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  unsigned int v46;
  int v47;
  int64x2_t *v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  int v52;
  int v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  unsigned int v57;
  std::__shared_weak_count *v58;
  uint64_t **v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  Espresso::net *v74;
  char *v75;
  int v76;
  int v77;
  BOOL v78;
  BOOL v79;
  _DWORD *v80;
  std::__shared_weak_count *v81;
  int64x2_t *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  BOOL v87;
  unint64_t *v88;
  unint64_t v89;
  char v90;
  std::__shared_weak_count *v91;
  int64x2_t *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  BOOL v97;
  unint64_t *v98;
  unint64_t v99;
  char v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *size;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  unsigned int v111;
  int64x2_t *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::string *v118;
  __int128 v119;
  std::string *v120;
  __int128 v121;
  std::string *v122;
  std::string::size_type v123;
  std::string *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  __CFString *v134;
  __int128 v135;
  int v136;
  int v137;
  int v138;
  int v139;
  uint64_t v140;
  const __CFString *v141;
  __int128 v142;
  BOOL v143;
  char v145;
  BOOL v146;
  int v147;
  std::string *v148;
  __int128 v149;
  std::string *v150;
  __int128 v151;
  void **v152;
  std::string::size_type v153;
  std::string *v154;
  std::string::size_type v155;
  char v156;
  int v157;
  int v158;
  uint64_t v159;
  int64x2_t *v160[2];
  _BYTE v161[31];
  char v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  __int128 v168;
  int v169;
  int v170;
  BOOL v171;
  std::__shared_weak_count *v172;
  int64x2_t *v173;
  std::__shared_weak_count *v174;
  __int128 v175;
  uint64_t v176;
  std::__shared_weak_count *v177;
  int64x2_t *v178;
  std::__shared_weak_count *v179;
  int64x2_t *v180;
  std::__shared_weak_count *v181;
  _OWORD v182[2];
  uint64_t v183;
  void *v184;
  void *v185;
  uint64_t v186;
  const Espresso::net *v187;
  std::__shared_weak_count *v188;
  _DWORD v189[3];
  int v190;
  int v191;
  _OWORD v192[2];
  uint64_t v193;
  void *v194;
  void *v195;
  uint64_t v196;
  const Espresso::net *v197;
  std::__shared_weak_count *v198;
  _DWORD v199[2];
  int v200;
  uint64_t v201;
  void *__p[2];
  __int128 v203;
  __int128 v204;
  _OWORD v205[2];
  __int128 v206;
  __int128 v207;
  int64x2_t *v208;
  std::__shared_weak_count *v209;
  Espresso::base_kernel::validate_for_engine_args_t *v210;
  std::__shared_weak_count *v211;
  void *v212[2];
  unsigned __int8 v213;
  std::string v214;
  std::string v215;
  std::string v216;
  std::string v217;
  uint64_t v218;
  uint64_t v219;
  std::string v220;
  std::string v221;
  std::string v222;
  __int128 v223;
  uint64_t v224;
  _QWORD v225[5];

  v225[2] = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)a3 + 6);
  v211 = 0;
  v210 = 0;
  v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7 && (v211 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = *(Espresso::base_kernel::validate_for_engine_args_t **)(v6 + 72);
    v210 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v8 + 472);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (*((_QWORD *)a3 + 1) - *(_QWORD *)a3 != 64 || *((_QWORD *)a3 + 4) - *((_QWORD *)a3 + 3) != 64)
  {
    v14 = (std::__shared_weak_count *)a2[1];
    v208 = *a2;
    v209 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(&v163, "pool_kernel: expect only one input / output");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)__p, &v163, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v208, (Espresso::base_kernel::validate_for_engine_warning_t *)__p);
    v17 = (std::__shared_weak_count *)v206;
    if ((_QWORD)v206)
    {
      v18 = (unint64_t *)(v206 + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v222.__r_.__value_.__r.__words[0] = (std::string::size_type)v205;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v222);
    v222.__r_.__value_.__r.__words[0] = (std::string::size_type)&v203 + 8;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v222);
    if (SBYTE7(v203) < 0)
      operator delete(__p[0]);
    if (SBYTE7(v164) < 0)
      operator delete((void *)v163);
    v20 = v209;
    if (!v209)
      goto LABEL_27;
    v21 = (unint64_t *)&v209->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    goto LABEL_25;
  }
  v10 = *((_QWORD *)a3 + 6);
  v197 = 0;
  v198 = 0;
  v11 = *(std::__shared_weak_count **)(v10 + 80);
  if (v11)
  {
    v12 = std::__shared_weak_count::lock(v11);
    v198 = v12;
    if (v12)
    {
      v13 = *(const Espresso::net **)(v10 + 72);
      v197 = v13;
      goto LABEL_36;
    }
  }
  else
  {
    v12 = 0;
  }
  v13 = 0;
LABEL_36:
  v28 = *(_QWORD *)a3;
  v29 = *(_QWORD *)(*(_QWORD *)a3 + 32);
  v30 = *(_OWORD *)(*(_QWORD *)a3 + 16);
  v192[0] = *(_OWORD *)*(_QWORD *)a3;
  v192[1] = v30;
  v193 = v29;
  v194 = 0;
  v195 = 0;
  v196 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v194, *(const void **)(v28 + 40), *(_QWORD *)(v28 + 48), (uint64_t)(*(_QWORD *)(v28 + 48) - *(_QWORD *)(v28 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v199, v13, (const Espresso::layer_shape *)v192, 1);
  if (v194)
  {
    v195 = v194;
    operator delete(v194);
  }
  if (v12)
  {
    v31 = (unint64_t *)&v12->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v33 = *((_QWORD *)a3 + 6);
  v187 = 0;
  v188 = 0;
  v34 = *(std::__shared_weak_count **)(v33 + 80);
  if (v34)
  {
    v35 = std::__shared_weak_count::lock(v34);
    v188 = v35;
    if (v35)
    {
      v36 = *(const Espresso::net **)(v33 + 72);
      v187 = v36;
      goto LABEL_48;
    }
  }
  else
  {
    v35 = 0;
  }
  v36 = 0;
LABEL_48:
  v37 = *((_QWORD *)a3 + 3);
  v38 = *(_QWORD *)(v37 + 32);
  v39 = *(_OWORD *)(v37 + 16);
  v182[0] = *(_OWORD *)v37;
  v182[1] = v39;
  v183 = v38;
  v184 = 0;
  v185 = 0;
  v186 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v184, *(const void **)(v37 + 40), *(_QWORD *)(v37 + 48), (uint64_t)(*(_QWORD *)(v37 + 48) - *(_QWORD *)(v37 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v189, v36, (const Espresso::layer_shape *)v182, 1);
  if (v184)
  {
    v185 = v184;
    operator delete(v184);
  }
  if (v35)
  {
    v40 = (unint64_t *)&v35->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v199, v9))
  {
    v60 = (std::__shared_weak_count *)a2[1];
    v180 = *a2;
    v181 = v60;
    if (v60)
    {
      v61 = (unint64_t *)&v60->__shared_owners_;
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
    std::string::basic_string[abi:ne180100]<0>(&v163, "pool_kernel: Input tensor extents exceed ANE limits");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)__p, &v163, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v180, (Espresso::base_kernel::validate_for_engine_warning_t *)__p);
    v63 = (std::__shared_weak_count *)v206;
    if ((_QWORD)v206)
    {
      v64 = (unint64_t *)(v206 + 8);
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v222.__r_.__value_.__r.__words[0] = (std::string::size_type)v205;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v222);
    v222.__r_.__value_.__r.__words[0] = (std::string::size_type)&v203 + 8;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v222);
    if (SBYTE7(v203) < 0)
      operator delete(__p[0]);
    if (SBYTE7(v164) < 0)
      operator delete((void *)v163);
    v20 = v181;
    if (!v181)
      goto LABEL_27;
    v66 = (unint64_t *)&v181->__shared_owners_;
    do
      v22 = __ldaxr(v66);
    while (__stlxr(v22 - 1, v66));
    goto LABEL_25;
  }
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v189, v9))
  {
    v67 = (std::__shared_weak_count *)a2[1];
    v178 = *a2;
    v179 = v67;
    if (v67)
    {
      v68 = (unint64_t *)&v67->__shared_owners_;
      do
        v69 = __ldxr(v68);
      while (__stxr(v69 + 1, v68));
    }
    std::string::basic_string[abi:ne180100]<0>(&v163, "pool_kernel: Output tensor extents exceed ANE limits");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)__p, &v163, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v178, (Espresso::base_kernel::validate_for_engine_warning_t *)__p);
    v70 = (std::__shared_weak_count *)v206;
    if ((_QWORD)v206)
    {
      v71 = (unint64_t *)(v206 + 8);
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    v222.__r_.__value_.__r.__words[0] = (std::string::size_type)v205;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v222);
    v222.__r_.__value_.__r.__words[0] = (std::string::size_type)&v203 + 8;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v222);
    if (SBYTE7(v203) < 0)
      operator delete(__p[0]);
    if (SBYTE7(v164) < 0)
      operator delete((void *)v163);
    v20 = v179;
    if (!v179)
      goto LABEL_27;
    v73 = (unint64_t *)&v179->__shared_owners_;
    do
      v22 = __ldaxr(v73);
    while (__stlxr(v22 - 1, v73));
LABEL_25:
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
LABEL_27:
    v23 = 0;
    goto LABEL_28;
  }
  v42 = *(_OWORD *)(a1 + 352);
  v43 = *(_OWORD *)(a1 + 384);
  v44 = *(_OWORD *)(a1 + 400);
  v205[1] = *(_OWORD *)(a1 + 368);
  v206 = v43;
  v207 = v44;
  v45 = *(_OWORD *)(a1 + 320);
  *(_OWORD *)__p = *(_OWORD *)(a1 + 304);
  v203 = v45;
  v204 = *(_OWORD *)(a1 + 336);
  v205[0] = v42;
  if (*(_DWORD *)(a1 + 336) == 2 && !*(_WORD *)(a1 + 340))
    WORD2(v204) = 1;
  Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v176, (NSString *)(a1 + 432), v9);
  if (!*(_DWORD *)(a1 + 360))
  {
    v80 = (_DWORD *)*((_QWORD *)a3 + 3);
    if (*((_DWORD **)a3 + 4) == v80 || v80[1] != 1 || *v80 != 1)
      goto LABEL_196;
  }
  v46 = *(_DWORD *)(a1 + 308);
  v47 = *(_DWORD *)(a1 + 312);
  v48 = a2[1];
  *(_QWORD *)&v175 = *a2;
  *((_QWORD *)&v175 + 1) = v48;
  if (v48)
  {
    v49 = &v48->u64[1];
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  v51 = *(_DWORD *)(a1 + 304);
  if (v51 == 1)
    v52 = 15;
  else
    v52 = 29;
  v158 = v52;
  if (v51 == 1)
    v53 = 7;
  else
    v53 = 13;
  v54 = (_QWORD *)*((_QWORD *)a3 + 6);
  v55 = *v54 + 224 * *((_QWORD *)a3 + 9);
  v56 = *(_QWORD **)(v55 + 136);
  if (*(_QWORD **)(v55 + 144) == v56)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v157 = v53;
  v57 = *((_DWORD *)a3 + 16);
  *(_OWORD *)&v217.__r_.__value_.__l.__data_ = 0uLL;
  v58 = (std::__shared_weak_count *)v54[10];
  if (v58 && (v217.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v58)) != 0)
  {
    v59 = (uint64_t **)v54[9];
    v217.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
  }
  else
  {
    v59 = 0;
  }
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v59[45], v56))
  {
    v222.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
    v75 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v59 + 44, v56, (uint64_t)&std::piecewise_construct, (__int128 **)&v222);
    v163 = *(_OWORD *)(v75 + 56);
    v165 = 0;
    v164 = 0uLL;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v164, *((const void **)v75 + 9), *((_QWORD *)v75 + 10), (uint64_t)(*((_QWORD *)v75 + 10) - *((_QWORD *)v75 + 9)) >> 2);
    v57 = DWORD2(v163) == -1 ? 1 : DWORD2(v163);
    if ((_QWORD)v164)
    {
      *((_QWORD *)&v164 + 1) = v164;
      operator delete((void *)v164);
    }
  }
  if (v57 <= 1)
    v76 = 1;
  else
    v76 = v57;
  if (!Espresso::ANECompilerEngine::can_handle_configuration_dependent_transforms((Espresso::ANECompilerEngine *)v59, v74))
  {
    if (v57 > 1)
    {
      if (v76 != 4 && v76 != 2)
        Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("Wrong compute path for ANE: %d", *((unsigned int *)a3 + 16));
      std::string::basic_string[abi:ne180100]<0>(&v163, "(dilated)kernel width");
      v91 = (std::__shared_weak_count *)*((_QWORD *)&v175 + 1);
      v92 = (int64x2_t *)v175;
      *(_OWORD *)v161 = v175;
      if (*((_QWORD *)&v175 + 1))
      {
        v93 = (unint64_t *)(*((_QWORD *)&v175 + 1) + 8);
        do
          v94 = __ldxr(v93);
        while (__stxr(v94 + 1, v93));
      }
      if (Espresso::ANECompilerEngine::validate_size(v46, v158, (uint64_t)&v163, (uint64_t)a3, v92, v91))
      {
        std::string::basic_string[abi:ne180100]<0>(&v222, "(dilated)kernel height");
        v221.__r_.__value_.__r.__words[0] = (std::string::size_type)v92;
        v221.__r_.__value_.__l.__size_ = (std::string::size_type)v91;
        if (v91)
        {
          v95 = (unint64_t *)&v91->__shared_owners_;
          do
            v96 = __ldxr(v95);
          while (__stxr(v96 + 1, v95));
        }
        v97 = Espresso::ANECompilerEngine::validate_size(v47, v158, (uint64_t)&v222, (uint64_t)a3, v92, v91);
        if (v91)
        {
          v98 = (unint64_t *)&v91->__shared_owners_;
          do
            v99 = __ldaxr(v98);
          while (__stlxr(v99 - 1, v98));
          if (!v99)
          {
            ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
            std::__shared_weak_count::__release_weak(v91);
          }
        }
        v100 = !v97;
        if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v222.__r_.__value_.__l.__data_);
        v91 = *(std::__shared_weak_count **)&v161[8];
      }
      else
      {
        v100 = 1;
      }
      if (v91)
      {
        v103 = (unint64_t *)&v91->__shared_owners_;
        do
          v104 = __ldaxr(v103);
        while (__stlxr(v104 - 1, v103));
        if (!v104)
        {
          ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
          std::__shared_weak_count::__release_weak(v91);
        }
      }
      if (SBYTE7(v164) < 0)
        operator delete((void *)v163);
      if ((v100 & 1) == 0)
        goto LABEL_184;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v163, "(dilated)kernel width");
      v81 = (std::__shared_weak_count *)*((_QWORD *)&v175 + 1);
      v82 = (int64x2_t *)v175;
      *(_OWORD *)v161 = v175;
      if (*((_QWORD *)&v175 + 1))
      {
        v83 = (unint64_t *)(*((_QWORD *)&v175 + 1) + 8);
        do
          v84 = __ldxr(v83);
        while (__stxr(v84 + 1, v83));
      }
      if (Espresso::ANECompilerEngine::validate_size(v46, v157, (uint64_t)&v163, (uint64_t)a3, v82, v81))
      {
        std::string::basic_string[abi:ne180100]<0>(&v222, "(dilated)kernel height");
        v221.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
        v221.__r_.__value_.__l.__size_ = (std::string::size_type)v81;
        if (v81)
        {
          v85 = (unint64_t *)&v81->__shared_owners_;
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
        }
        v87 = Espresso::ANECompilerEngine::validate_size(v47, v158, (uint64_t)&v222, (uint64_t)a3, v82, v81);
        if (v81)
        {
          v88 = (unint64_t *)&v81->__shared_owners_;
          do
            v89 = __ldaxr(v88);
          while (__stlxr(v89 - 1, v88));
          if (!v89)
          {
            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
            std::__shared_weak_count::__release_weak(v81);
          }
        }
        v90 = !v87;
        if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v222.__r_.__value_.__l.__data_);
        v81 = *(std::__shared_weak_count **)&v161[8];
      }
      else
      {
        v90 = 1;
      }
      if (v81)
      {
        v101 = (unint64_t *)&v81->__shared_owners_;
        do
          v102 = __ldaxr(v101);
        while (__stlxr(v102 - 1, v101));
        if (!v102)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      if (SBYTE7(v164) < 0)
        operator delete((void *)v163);
      if ((v90 & 1) == 0)
        goto LABEL_184;
    }
LABEL_174:
    v78 = 0;
    goto LABEL_185;
  }
  if (v51 != 1)
    goto LABEL_184;
  if (v57 >= 2)
    v77 = 29;
  else
    v77 = 13;
  if (v77 < (int)v46)
  {
    while ((v46 & 1) == 0)
    {
      v46 >>= 1;
      if (v46 <= v77)
        goto LABEL_124;
    }
    goto LABEL_174;
  }
LABEL_124:
  if (v47 < 30)
  {
LABEL_184:
    v78 = 1;
    goto LABEL_185;
  }
  do
  {
    v78 = (v47 & 1) == 0;
    if ((v47 & 1) != 0)
      break;
    v79 = v47 > 0x3B;
    v47 = v47 >> 1;
  }
  while (v79);
LABEL_185:
  size = (std::__shared_weak_count *)v217.__r_.__value_.__l.__size_;
  if (v217.__r_.__value_.__l.__size_)
  {
    v106 = (unint64_t *)(v217.__r_.__value_.__l.__size_ + 8);
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v108 = (std::__shared_weak_count *)*((_QWORD *)&v175 + 1);
  if (*((_QWORD *)&v175 + 1))
  {
    v109 = (unint64_t *)(*((_QWORD *)&v175 + 1) + 8);
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  if (!v78)
  {
    v115 = (std::__shared_weak_count *)a2[1];
    v173 = *a2;
    v174 = v115;
    if (v115)
    {
      v116 = (unint64_t *)&v115->__shared_owners_;
      do
        v117 = __ldxr(v116);
      while (__stxr(v117 + 1, v116));
    }
    std::to_string(&v221, *(_DWORD *)(a1 + 308));
    v118 = std::string::insert(&v221, 0, "pool_kernel: Invalid kernel size, size_x = ");
    v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
    *(_QWORD *)&v161[16] = *((_QWORD *)&v118->__r_.__value_.__l + 2);
    *(_OWORD *)v161 = v119;
    v118->__r_.__value_.__l.__size_ = 0;
    v118->__r_.__value_.__r.__words[2] = 0;
    v118->__r_.__value_.__r.__words[0] = 0;
    v120 = std::string::append((std::string *)v161, " size_y = ");
    v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
    v217.__r_.__value_.__r.__words[2] = v120->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v121;
    v120->__r_.__value_.__l.__size_ = 0;
    v120->__r_.__value_.__r.__words[2] = 0;
    v120->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v220, *(_DWORD *)(a1 + 312));
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v122 = &v220;
    else
      v122 = (std::string *)v220.__r_.__value_.__r.__words[0];
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v123 = HIBYTE(v220.__r_.__value_.__r.__words[2]);
    else
      v123 = v220.__r_.__value_.__l.__size_;
    v124 = std::string::append(&v217, (const std::string::value_type *)v122, v123);
    v222 = *v124;
    v124->__r_.__value_.__l.__size_ = 0;
    v124->__r_.__value_.__r.__words[2] = 0;
    v124->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)&v163, (__int128 *)&v222, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v173, (Espresso::base_kernel::validate_for_engine_warning_t *)&v163);
    v125 = v172;
    if (v172)
    {
      v126 = (unint64_t *)&v172->__shared_owners_;
      do
        v127 = __ldaxr(v126);
      while (__stlxr(v127 - 1, v126));
      if (!v127)
      {
        ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
        std::__shared_weak_count::__release_weak(v125);
      }
    }
    v216.__r_.__value_.__r.__words[0] = (std::string::size_type)&v167;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v216);
    v216.__r_.__value_.__r.__words[0] = (std::string::size_type)&v164 + 8;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v216);
    if (SBYTE7(v164) < 0)
      operator delete((void *)v163);
    if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v222.__r_.__value_.__l.__data_);
    if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v220.__r_.__value_.__l.__data_);
    if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v217.__r_.__value_.__l.__data_);
    if ((v161[23] & 0x80000000) != 0)
      operator delete(*(void **)v161);
    if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v221.__r_.__value_.__l.__data_);
    v128 = v174;
    if (v174)
    {
      v129 = (unint64_t *)&v174->__shared_owners_;
      do
        v130 = __ldaxr(v129);
      while (__stlxr(v130 - 1, v129));
      if (!v130)
      {
        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
        std::__shared_weak_count::__release_weak(v128);
      }
    }
    v23 = 0;
    goto LABEL_238;
  }
LABEL_196:
  v111 = Espresso::ANECompilerEngine::bottom_compute_path(a3, v210, 0);
  if (v111 < 8 && ((0x97u >> v111) & 1) != 0)
  {
    v134 = off_1E2DD6038[v111];
    ANECTensorDescInitialize();
    v159 = v201;
    *(_QWORD *)&v135 = (int)v201;
    *((_QWORD *)&v135 + 1) = SHIDWORD(v201);
    v223 = v135;
    v136 = v200;
    v222.__r_.__value_.__r.__words[0] = (std::string::size_type)v134;
    v224 = v200;
    *(_QWORD *)&v135 = v199[0];
    *((_QWORD *)&v135 + 1) = v199[1];
    *(_OWORD *)&v222.__r_.__value_.__r.__words[1] = v135;
    ANECPoolLayerDescInitialize();
    v137 = (int)__p[0];
    v138 = v190;
    v139 = v191;
    v140 = *(_QWORD *)v221.__r_.__value_.__l.__data_;
    v141 = CFSTR("Zero");
    if (v137 == 1)
      v141 = CFSTR("Negative");
    *((_QWORD *)&v163 + 1) = v141;
    *(_QWORD *)&v142 = SHIDWORD(__p[0]);
    *((_QWORD *)&v142 + 1) = SLODWORD(__p[1]);
    v164 = v142;
    v165 = 1;
    v166 = v140;
    v167 = 1;
    if (*(_OWORD *)&v220.__r_.__value_.__l.__data_ != 0)
    {
      v168 = *(_OWORD *)&v220.__r_.__value_.__l.__data_;
      v169 = 0;
      v170 = 0;
    }
    if (DWORD2(v205[0]))
      v143 = HIDWORD(v220.__r_.__value_.__r.__words[1]) == 0;
    else
      v143 = 0;
    v145 = v143 && *(std::string::size_type *)((char *)v220.__r_.__value_.__r.__words + 4) == 0;
    if (!v137 && (v145 & 1) == 0)
    {
      v146 = !(LODWORD(v220.__r_.__value_.__r.__words[1]) | LODWORD(v220.__r_.__value_.__l.__data_))
          && (SHIDWORD(v220.__r_.__value_.__r.__words[1]) > 0 || SHIDWORD(v220.__r_.__value_.__r.__words[0]) >= 1)
          || HIDWORD(v203) != 0;
      v171 = v146;
    }
    v219 = 0;
    v218 = 0;
    v147 = ANECValidatePoolLayer();
    if (v147)
    {
      Espresso::ANECompilerEngine::violations_from_alternates<ANECPoolLayerDescAlternate>((uint64_t)&v217, v219, v218);
      std::to_string(&v214, v147);
      v148 = std::string::insert(&v214, 0, "pool_kernel: ANECValidatePoolLayer failed with status ");
      v149 = *(_OWORD *)&v148->__r_.__value_.__l.__data_;
      v215.__r_.__value_.__r.__words[2] = v148->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v215.__r_.__value_.__l.__data_ = v149;
      v148->__r_.__value_.__l.__size_ = 0;
      v148->__r_.__value_.__r.__words[2] = 0;
      v148->__r_.__value_.__r.__words[0] = 0;
      v150 = std::string::append(&v215, ". ");
      v151 = *(_OWORD *)&v150->__r_.__value_.__l.__data_;
      v216.__r_.__value_.__r.__words[2] = v150->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v216.__r_.__value_.__l.__data_ = v151;
      v150->__r_.__value_.__l.__size_ = 0;
      v150->__r_.__value_.__r.__words[2] = 0;
      v150->__r_.__value_.__r.__words[0] = 0;
      Espresso::ANECompilerEngine::format_validation_violations((uint64_t)v212, (uint64_t)&v217);
      if ((v213 & 0x80u) == 0)
        v152 = v212;
      else
        v152 = (void **)v212[0];
      if ((v213 & 0x80u) == 0)
        v153 = v213;
      else
        v153 = (std::string::size_type)v212[1];
      v154 = std::string::append(&v216, (const std::string::value_type *)v152, v153);
      v155 = v154->__r_.__value_.__r.__words[0];
      v225[0] = v154->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v225 + 7) = *(std::string::size_type *)((char *)&v154->__r_.__value_.__r.__words[1] + 7);
      v156 = HIBYTE(v154->__r_.__value_.__r.__words[2]);
      v154->__r_.__value_.__l.__size_ = 0;
      v154->__r_.__value_.__r.__words[2] = 0;
      v154->__r_.__value_.__r.__words[0] = 0;
      v161[0] = 0;
      *(_QWORD *)&v161[23] = *(_QWORD *)((char *)v225 + 7);
      *(_QWORD *)&v161[8] = v155;
      *(_QWORD *)&v161[16] = v225[0];
      v162 = v156;
      if ((char)v213 < 0)
        operator delete(v212[0]);
      if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v216.__r_.__value_.__l.__data_);
      if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v215.__r_.__value_.__l.__data_);
      if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v214.__r_.__value_.__l.__data_);
      std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v217);
    }
    else
    {
      v161[0] = 1;
      std::string::basic_string[abi:ne180100]<0>(&v161[8], "Success");
    }
    if (v221.__r_.__value_.__r.__words[0])
    {
      v221.__r_.__value_.__l.__size_ = v221.__r_.__value_.__r.__words[0];
      operator delete(v221.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    v161[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v161[8], "pool_kernel: invalid compute path for input");
  }
  v23 = v161[0] != 0;
  if (!v161[0])
  {
    v112 = a2[1];
    v160[0] = *a2;
    v160[1] = v112;
    if (v112)
    {
      v113 = &v112->u64[1];
      do
        v114 = __ldxr(v113);
      while (__stxr(v114 + 1, v113));
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)&v163, (__int128 *)&v161[8], (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v160, (Espresso::base_kernel::validate_for_engine_warning_t *)&v163);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v163);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v160);
  }
  if (v162 < 0)
    operator delete(*(void **)&v161[8]);
LABEL_238:
  v131 = v177;
  if (v177)
  {
    v132 = (unint64_t *)&v177->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
LABEL_28:

  v24 = v211;
  if (v211)
  {
    v25 = (unint64_t *)&v211->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return v23;
}

void sub_19177088C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  void *v37;
  uint64_t v38;
  void *v40;

  v40 = *(void **)(v38 - 232);
  if (v40)
  {
    *(_QWORD *)(v38 - 224) = v40;
    operator delete(v40);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a37);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x270]);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::pool_kernel::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  if (Espresso::weight_key_supported_by_conv_quantized_weights_helper(a2, 1))
    return 1;
  else
    return Espresso::ANECompilerEngine::ane_kernel::supports_weight_key(a2);
}

void Espresso::ANECompilerEngine::pool_kernel::compile(Espresso::ANECompilerEngine::pool_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  char *v10;
  const void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  int *v19;
  int *v20;
  unint64_t *v21;
  unint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  int8x16_t v33;
  uint64_t v34;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  char v40;
  void *v41;
  uint64_t v42;
  int32x4_t v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  std::string::pointer data;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  float v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  unsigned int v73;
  int *v74;
  _WORD *v75;
  int v76;
  __int128 v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  int *v89;
  _WORD *v90;
  int v91;
  int v93;
  Espresso::ANECompilerEngine::compiler::build_state_t *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  void *v102;
  id v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  uint64_t weights_file_index;
  void *v109;
  void *v110;
  __int128 v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  void *v117;
  void *v118;
  void *v119;
  uint64_t v120;
  void *v121;
  void *v122;
  std::string *v123;
  std::string *v124;
  uint64_t v125;
  char v126;
  std::string::size_type size;
  std::string::size_type v128;
  uint64_t v129;
  unsigned __int8 *v130;
  std::string *v131;
  const std::string::value_type *v132;
  __int128 v133;
  __CFString *v134;
  std::string *v135;
  std::string *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  const char *v174;
  int *v175;
  uint64_t i;
  float v177;
  int v178;
  _WORD *v179;
  int v180;
  std::runtime_error *exception;
  int *v183;
  uint64_t j;
  int v185;
  int v186;
  unsigned int v187;
  unsigned int v188;
  int v189;
  Espresso *v190;
  const char *v191;
  float v192;
  NSObject *v194;
  double v195;
  uint64_t v196;
  _WORD *v197;
  int v198;
  int8x16_t v200;
  void *v201;
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t *v202;
  Espresso::ANECompilerEngine::compiler *v203;
  float *lpsrc;
  unsigned int lpsrca;
  id obj;
  std::__shared_weak_count *v207;
  std::__shared_weak_count *v208;
  std::string *v209;
  std::string *v210;
  unint64_t v211;
  __int32 v212;
  uint64_t v213;
  unsigned int v214;
  void *v215[3];
  void *v216;
  std::__shared_weak_count *v217;
  int *v218;
  std::__shared_weak_count *v219;
  float *v220;
  std::__shared_weak_count *v221;
  const void *v222;
  std::__shared_weak_count *v223;
  uint64_t v224;
  std::__shared_weak_count *v225;
  __int128 v226;
  uint64_t v227;
  std::__shared_weak_count *v228;
  __int128 v229;
  uint64_t v230;
  std::__shared_weak_count *v231;
  uint64_t v232[2];
  uint64_t v233;
  std::__shared_weak_count *v234;
  uint64_t v235;
  std::__shared_weak_count *v236;
  uint64_t v237;
  std::__shared_weak_count *v238;
  unsigned int v239;
  unsigned int v240;
  uint64_t v241;
  std::__shared_weak_count *v242;
  _QWORD v243[2];
  _BYTE buf[18];
  __int16 v245;
  int v246;
  __int16 v247;
  double v248;
  std::vector<std::string> v249;
  void *v250;
  char v251;
  id v252;
  __CFString *v253;
  id v254;
  void *v255[2];
  char v256;
  _BYTE v257[24];
  _BYTE v258[32];
  void *__p;
  char v260;
  id v261;
  id v262;
  id v263;
  uint64_t v264;
  std::string __str;
  __int128 v266;
  uint64_t v267;

  v267 = *MEMORY[0x1E0C80C00];
  v224 = 0;
  v225 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4
    || (v7 = std::__shared_weak_count::lock(v4), (v225 = v7) == 0)
    || (v8 = *((_QWORD *)a2 + 1), (v224 = v8) == 0))
  {
    v174 = "Inconsistent state: null network";
    goto LABEL_237;
  }
  if (!*(_QWORD *)(v8 + 576))
  {
    v174 = "Inconsistent state: blob_storage";
LABEL_237:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v174);
  }
  v9 = v7;
  v255[0] = a3[6];
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)v255[0], (__int128 **)v255);
  v11 = (const void *)*((_QWORD *)v10 + 5);
  v12 = (std::__shared_weak_count *)*((_QWORD *)v10 + 6);
  v222 = v11;
  v223 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v255[0] = a3;
  v202 = (Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)a3;
  v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)a3, (__int128 **)v255);
  v16 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
  lpsrc = (float *)*((_QWORD *)v15 + 5);
  v220 = lpsrc;
  v221 = v16;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v203 = a2;
  obj = (id)objc_opt_new();
  if (v11
  {
    v20 = v19;
    v218 = v19;
    v219 = v12;
    if (v12)
    {
      v21 = (unint64_t *)&v12->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
  }
  else
  {
    v20 = 0;
    v218 = 0;
    v219 = 0;
  }
  if (lpsrc
  {
    v24 = v23;
    v216 = v23;
    v217 = v16;
    if (v16)
    {
      v25 = (unint64_t *)&v16->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
  }
  else
  {
    v24 = 0;
    v216 = 0;
    v217 = 0;
  }
  v201 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(obj, "setObject:forKeyedSubscript:", v201, CFSTR("Type"));
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)this + 77));
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(obj, "setObject:forKeyedSubscript:", v27, CFSTR("KernelWidth"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)this + 78));
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(obj, "setObject:forKeyedSubscript:", v28, CFSTR("KernelHeight"));

  v29 = *((unsigned int *)v215[0] + 1);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)v215[0]);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v243[0] = v30;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v29);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v243[1] = v31;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v243, 2);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(obj, "setObject:forKeyedSubscript:", v32, CFSTR("Step"));

  if (*((_DWORD *)this + 84) == 2 && !*((_WORD *)this + 170))
    *((_WORD *)this + 170) = 1;
  v34 = v214;
  if (*((_DWORD *)this + 90))
    _ZF = v214 == 0;
  else
    _ZF = 0;
  v33.i64[0] = v213;
  v36 = v213;
  v37 = _ZF && (_DWORD)v213 == 0;
  v200 = v33;
  v38 = HIDWORD(v213);
  v40 = v37 && HIDWORD(v213) == 0;
  if (!*((_DWORD *)this + 76) && (v40 & 1) == 0)
  {
    if (*(_BYTE *)((*(uint64_t (**)(char *))(*((_QWORD *)this + 54) + 104))((char *)this + 432) + 52)
      || v38 | v212
      || (int)v34 <= 0 && (int)v36 < 1)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *((_DWORD *)this + 83) != 0, *(_OWORD *)&v200);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(obj, "setObject:forKeyedSubscript:", v41, CFSTR("AverageCountExcludePadding"));

    }
    else
    {
      objc_msgSend(obj, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("AverageCountExcludePadding"), *(_OWORD *)&v200);
    }
  }
  v42 = v212;
  v43 = (int32x4_t)vextq_s8(v200, v200, 0xCuLL);
  v43.i32[0] = v212;
  v43.i32[3] = v34;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(v43, v43))) & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v38);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(obj, "setObject:forKeyedSubscript:", v44, CFSTR("PadTop"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v34);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(obj, "setObject:forKeyedSubscript:", v45, CFSTR("PadBot"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v42);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(obj, "setObject:forKeyedSubscript:", v46, CFSTR("PadLeft"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v36);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(obj, "setObject:forKeyedSubscript:", v47, CFSTR("PadRight"));

  }
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v255, (id *)v202);
  v209 = 0;
  v210 = 0;
  v211 = 0;
  *(_QWORD *)buf = &v209;
  buf[8] = 0;
  v209 = (std::string *)operator new(0x90uLL);
  v210 = v209;
  v211 = (unint64_t)&v209[6];
  v210 = (std::string *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t*>((uint64_t)&v211, (uint64_t)v255, (uint64_t)&__str, (uint64_t)v209);

  if (v260 < 0)
    operator delete(__p);
  *(_QWORD *)buf = v258;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v257;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v256 < 0)
    operator delete(v255[0]);
  data = v209[5].__r_.__value_.__l.__data_;
  v209[5].__r_.__value_.__r.__words[0] = (std::string::size_type)CFSTR("Pooling");

  objc_storeStrong((id *)&v209[5].__r_.__value_.__l.__size_, obj);
  v208 = v9;
  v49 = (unint64_t *)&v9->__shared_owners_;
  do
    v50 = __ldxr(v49);
  while (__stxr(v50 + 1, v49));
  v207 = v16;
  if (v16)
  {
    v51 = (unint64_t *)&v16->__shared_owners_;
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v255);
  v263 = 0;
  v262 = 0;
  v264 = 0x100000000;
  v53 = *((_QWORD *)this + 62);
  v54 = (std::__shared_weak_count *)*((_QWORD *)this + 63);
  v241 = v53;
  v242 = v54;
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  if (v53 && !*(_BYTE *)((*(uint64_t (**)(char *))(*((_QWORD *)this + 54) + 104))((char *)this + 432) + 40))
  {
    v57 = lpsrc[28];
    v233 = v53;
    v234 = v54;
    if (v54)
    {
      v58 = (unint64_t *)&v54->__shared_owners_;
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
    }
    v60 = (std::__shared_weak_count *)*((_QWORD *)this + 65);
    v232[0] = *((_QWORD *)this + 64);
    v232[1] = (uint64_t)v60;
    if (v60)
    {
      v61 = (unint64_t *)&v60->__shared_owners_;
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
    Espresso::ane_style_post_scale_bias((uint64_t)&v233, v232, (uint64_t)&v235, v57);
    if (v60)
    {
      v63 = (unint64_t *)&v60->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    v65 = v234;
    if (v234)
    {
      v66 = (unint64_t *)&v234->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    v68 = v241;
    v69 = *(unsigned int *)(v241 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v230, 2 * v69, 1, 1, 1);
    v70 = (int)v69;
    v229 = 0uLL;
    v71 = v69;
    v72 = *((_QWORD *)this + 64);
    if (v72)
      v71 = *(_DWORD *)(v72 + 8);
    if (!*((_BYTE *)v203 + 384))
    {
      Espresso::blob<unsigned char,1>::make(&__str, 4 * v69);
      v175 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
      if ((int)v69 >= 1)
      {
        for (i = 0; i != v69; ++i)
        {
          v177 = *(float *)(*(_QWORD *)(v68 + 16) + i * 4);
          *(float *)&v178 = ldexp(1.0, -v239) * v177;
          v175[i] = v178;
        }
      }
      if ((_DWORD)v69)
      {
        v179 = *(_WORD **)(v230 + 16);
        do
        {
          v180 = *v175++;
          _S0 = v180;
          __asm { FCVT            H0, S0 }
          *v179++ = _S0;
          --v70;
        }
        while (v70);
      }
      v227 = 0;
      v228 = 0;
      if (*((_QWORD *)this + 64))
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * v71);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v227, (__int128 *)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        Espresso::blob<unsigned char,1>::make(buf, 2 * v71);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v229, (__int128 *)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        v183 = *(int **)(v227 + 16);
        if (v71 >= 1)
        {
          for (j = 0; j != v71; ++j)
          {
            if ((int)v69 - 1 >= (int)j)
              v185 = j;
            else
              v185 = v69 - 1;
            *(float *)&v186 = *(float *)(*(_QWORD *)(v237 + 16) + 4 * j)
                            * *(float *)(*(_QWORD *)(v235 + 16) + 4 * v185);
            v183[j] = v186;
            v187 = v240;
            v188 = v239;
            *(float *)&v189 = ldexp(1.0, v240 - v239) * *(float *)&v186;
            v183[j] = v189;
            v192 = ldexp(1.0, v188 - v187) * *(float *)&v189;
            if (v192 < -127.0 || v192 > 255.0)
            {
              Espresso::espresso_os_log_subsystem(v190, v191);
              v194 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v194, OS_LOG_TYPE_ERROR))
              {
                v195 = *(float *)&v183[j];
                *(_DWORD *)buf = 134218752;
                *(double *)&buf[4] = v192;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v240;
                v245 = 1024;
                v246 = v239;
                v247 = 2048;
                v248 = v195;
                _os_log_error_impl(&dword_190DAF000, v194, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }

            }
          }
        }
        if (v71)
        {
          v196 = v71;
          v197 = *(_WORD **)(v229 + 16);
          do
          {
            v198 = *v183++;
            _S0 = v198;
            __asm { FCVT            H0, S0 }
            *v197++ = _S0;
            --v196;
          }
          while (v196);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    v73 = v240;
    if ((_DWORD)v69)
    {
      v74 = *(int **)(v235 + 16);
      v75 = *(_WORD **)(v230 + 16);
      do
      {
        v76 = *v74++;
        _S0 = v76;
        __asm { FCVT            H0, S0 }
        *v75++ = _S0;
        --v70;
      }
      while (v70);
    }
    if (v72)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v71, 1, 1, 1);
      v81 = *(_OWORD *)buf;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v82 = (std::__shared_weak_count *)*((_QWORD *)&v229 + 1);
      v229 = v81;
      if (v82)
      {
        v83 = (unint64_t *)&v82->__shared_owners_;
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      v85 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v86 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      if (v71)
      {
        v88 = v71;
        v89 = *(int **)(v237 + 16);
        v90 = *(_WORD **)(v229 + 16);
        do
        {
          v91 = *v89++;
          _S0 = v91;
          __asm { FCVT            H0, S0 }
          *v90++ = _S0;
          --v88;
        }
        while (v88);
      }
    }
    v93 = *((unsigned __int8 *)v203 + 552);
    v94 = (Espresso::ANECompilerEngine::compiler *)((char *)v203 + 128);
    v95 = v230;
    v96 = v231;
    v227 = v230;
    v228 = v231;
    if (v231)
    {
      v97 = (unint64_t *)&v231->__shared_owners_;
      do
        v98 = __ldxr(v97);
      while (__stxr(v98 + 1, v97));
    }
    v99 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v94, *(const unsigned __int8 **)(v95 + 16), *(int *)(v95 + 8));
    if (v96)
    {
      v100 = (unint64_t *)&v96->__shared_owners_;
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
    lpsrca = v73;
    v102 = (void *)objc_opt_new();
    if (*((_BYTE *)v203 + 121))
    {
      v103 = (id)v209[5].__r_.__value_.__l.__size_;

      v102 = v103;
    }
    v104 = (void *)objc_opt_new();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v69);
    v105 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v104, "setObject:forKeyedSubscript:", v105, CFSTR("ScaleCount"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v99);
    v106 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v104, "setObject:forKeyedSubscript:", v106, CFSTR("ScaleOffset"));

    v107 = (void *)MEMORY[0x1E0CB37E8];
    if (v93)
      weights_file_index = 0;
    else
    objc_msgSend(v107, "numberWithUnsignedLong:", weights_file_index, *(_OWORD *)&v200);
    v109 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v104, "setObject:forKeyedSubscript:", v109, CFSTR("ScaleIndex"));

    objc_msgSend(v104, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v239);
    v110 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v102, "setObject:forKeyedSubscript:", v110, CFSTR("ScaleShift"));

    if (*((_QWORD *)this + 64))
    {
      v111 = v229;
      v226 = v229;
      if (*((_QWORD *)&v229 + 1))
      {
        v112 = (unint64_t *)(*((_QWORD *)&v229 + 1) + 8);
        do
          v113 = __ldxr(v112);
        while (__stxr(v113 + 1, v112));
      }
      v114 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v94, *(const unsigned __int8 **)(v111 + 16), *(int *)(v111 + 8));
      if (*((_QWORD *)&v111 + 1))
      {
        v115 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
        do
          v116 = __ldaxr(v115);
        while (__stlxr(v116 - 1, v115));
        if (!v116)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v111 + 1) + 16))(*((_QWORD *)&v111 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v111 + 1));
        }
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*((_QWORD *)this + 64) + 8));
      v117 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v104, "setObject:forKeyedSubscript:", v117, CFSTR("BiasCount"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v114);
      v118 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v104, "setObject:forKeyedSubscript:", v118, CFSTR("BiasOffset"));

      v119 = (void *)MEMORY[0x1E0CB37E8];
      if (v93)
        v120 = 0;
      else
      objc_msgSend(v119, "numberWithUnsignedLong:", v120);
      v121 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v104, "setObject:forKeyedSubscript:", v121, CFSTR("BiasIndex"));

      objc_msgSend(v104, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", lpsrca);
      v122 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v102, "setObject:forKeyedSubscript:", v122, CFSTR("BiasShift"));

    }
    objc_msgSend(v102, "setObject:forKeyedSubscript:", v104, CFSTR("BiasScaleGroupData"));
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, (id *)v202);
    v123 = v210;
    if (v210 == v209)
      goto LABEL_150;
    v124 = v210 - 6;
    v125 = HIBYTE(v210[-6].__r_.__value_.__r.__words[2]);
    v126 = v125;
    size = v210[-6].__r_.__value_.__l.__size_;
    if ((v125 & 0x80u) == 0)
      v128 = HIBYTE(v210[-6].__r_.__value_.__r.__words[2]);
    else
      v128 = v210[-6].__r_.__value_.__l.__size_;
    v129 = HIBYTE(v246);
    if (v246 < 0)
      v129 = *(_QWORD *)&buf[8];
    if (v128 != v129)
      goto LABEL_144;
    if (v246 >= 0)
      v130 = buf;
    else
      v130 = *(unsigned __int8 **)buf;
    if ((char)v125 < 0)
    {
      v132 = (const std::string::value_type *)v124->__r_.__value_.__r.__words[0];
      if (memcmp(v124->__r_.__value_.__l.__data_, v130, v210[-6].__r_.__value_.__l.__size_))
        goto LABEL_147;
    }
    else if ((_BYTE)v125)
    {
      v131 = v210 - 6;
      while (v131->__r_.__value_.__s.__data_[0] == *v130)
      {
        v131 = (std::string *)((char *)v131 + 1);
        ++v130;
        if (!--v125)
          goto LABEL_143;
      }
      goto LABEL_144;
    }
LABEL_143:
    std::string::append(v123 - 6, "__@pre_scale_bias");
    v126 = HIBYTE(v123[-6].__r_.__value_.__r.__words[2]);
LABEL_144:
    if ((v126 & 0x80) == 0)
    {
      v133 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v123[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v133;
      goto LABEL_148;
    }
    v132 = v123[-6].__r_.__value_.__l.__data_;
    size = v123[-6].__r_.__value_.__l.__size_;
LABEL_147:
    std::string::__init_copy_ctor_external(&__str, v132, size);
LABEL_148:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v249, &__str, &v266, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
LABEL_150:
    v134 = v253;
    v253 = CFSTR("GOC");

    objc_storeStrong(&v254, v102);
    if (!*((_BYTE *)v203 + 121))
    {
      v135 = v210;
      if ((unint64_t)v210 >= v211)
      {
        v137 = 0x8E38E38E38E38E39 * (((char *)v210 - (char *)v209) >> 4);
        if (v137 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v138 = 0x1C71C71C71C71C72 * ((uint64_t)(v211 - (_QWORD)v209) >> 4);
        if (v138 <= v137 + 1)
          v138 = v137 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v211 - (_QWORD)v209) >> 4) >= 0xE38E38E38E38E3)
          v139 = 0x1C71C71C71C71C7;
        else
          v139 = v138;
        *((_QWORD *)&v266 + 1) = &v211;
        if (v139)
          v139 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v139);
        else
          v140 = 0;
        __str.__r_.__value_.__r.__words[0] = v139;
        __str.__r_.__value_.__l.__size_ = v139 + 144 * v137;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        *(_QWORD *)&v266 = v139 + 144 * v140;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
        __str.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer((uint64_t *)&v209, &__str);
        v136 = v210;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v210, (uint64_t)buf);
        v136 = v135 + 6;
      }
      v210 = v136;
    }

    if (v251 < 0)
      operator delete(v250);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v249;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v247;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(v246) < 0)
      operator delete(*(void **)buf);

    v141 = (std::__shared_weak_count *)*((_QWORD *)&v229 + 1);
    if (*((_QWORD *)&v229 + 1))
    {
      v142 = (unint64_t *)(*((_QWORD *)&v229 + 1) + 8);
      do
        v143 = __ldaxr(v142);
      while (__stlxr(v143 - 1, v142));
      if (!v143)
      {
        ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
        std::__shared_weak_count::__release_weak(v141);
      }
    }
    v144 = v231;
    if (v231)
    {
      v145 = (unint64_t *)&v231->__shared_owners_;
      do
        v146 = __ldaxr(v145);
      while (__stlxr(v146 - 1, v145));
      if (!v146)
      {
        ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
        std::__shared_weak_count::__release_weak(v144);
      }
    }
    v147 = v238;
    if (v238)
    {
      v148 = (unint64_t *)&v238->__shared_owners_;
      do
        v149 = __ldaxr(v148);
      while (__stlxr(v149 - 1, v148));
      if (!v149)
      {
        ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
        std::__shared_weak_count::__release_weak(v147);
      }
    }
    v150 = v236;
    if (v236)
    {
      v151 = (unint64_t *)&v236->__shared_owners_;
      do
        v152 = __ldaxr(v151);
      while (__stlxr(v152 - 1, v151));
      if (!v152)
      {
        ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
        std::__shared_weak_count::__release_weak(v150);
      }
    }
    v54 = v242;
  }
  if (v54)
  {
    v153 = (unint64_t *)&v54->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }

  if (v260 < 0)
    operator delete(__p);
  *(_QWORD *)buf = v258;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v257;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v256 < 0)
    operator delete(v255[0]);
  if (v207)
  {
    v155 = (unint64_t *)&v207->__shared_owners_;
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
      std::__shared_weak_count::__release_weak(v207);
    }
  }
  v157 = (unint64_t *)&v208->__shared_owners_;
  do
    v158 = __ldaxr(v157);
  while (__stlxr(v158 - 1, v157));
  if (!v158)
  {
    ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
    std::__shared_weak_count::__release_weak(v208);
  }
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, std::string **))(*((_QWORD *)this + 54) + 32))((char *)this + 432, v203, &v209);
  v255[0] = &v209;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v255);
  if (v215[0])
  {
    v215[1] = v215[0];
    operator delete(v215[0]);
  }

  v159 = v217;
  if (v217)
  {
    v160 = (unint64_t *)&v217->__shared_owners_;
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  v162 = v219;
  if (v219)
  {
    v163 = (unint64_t *)&v219->__shared_owners_;
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }

  v165 = v221;
  if (v221)
  {
    v166 = (unint64_t *)&v221->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }
  v168 = v223;
  if (v223)
  {
    v169 = (unint64_t *)&v223->__shared_owners_;
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  v171 = v225;
  if (v225)
  {
    v172 = (unint64_t *)&v225->__shared_owners_;
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
}

void sub_191771F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  a63 = (uint64_t)&a22;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::pool_kernel::compile(Espresso::ANECompilerEngine::pool_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  Espresso::ANECompilerEngine::pool_kernel::compile((Espresso::ANECompilerEngine::pool_kernel *)((char *)this - 432), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::pool_kernel::~pool_kernel(void **this)
{
  Espresso::generic_pool_kernel *v1;

  v1 = (Espresso::generic_pool_kernel *)(this - 54);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_pool_kernel::~generic_pool_kernel(v1);
}

{
  Espresso::generic_pool_kernel *v1;

  v1 = (Espresso::generic_pool_kernel *)(this - 54);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_pool_kernel::~generic_pool_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void sub_191772344(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::get_anec_final_strides<Espresso::pool_params>(char *a1, _DWORD *a2, int a3, int a4, int a5, int a6)
{
  int v8;
  int v9;
  int v10;
  BOOL v12;
  int v14;
  _DWORD *v15;
  int v17;
  uint64_t v18;
  _DWORD *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  int v24;
  _DWORD __src[3];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  v8 = a2[5];
  if (a2[14])
  {
    v9 = a2[4];
    a4 = a2[5];
  }
  else
  {
    v10 = a2[6];
    v12 = v8 == a4 && a2[4] == a4 && v10 == a3;
    v9 = a4;
    if (!v12)
    {
      __src[0] = a2[4];
      __src[1] = v8;
      __src[2] = v10;
      std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>(a1, (char *)__src, (uint64_t)&v26, 3uLL);
      return;
    }
  }
  if (a4 > 2 && a5 == 1)
    v14 = 1;
  else
    v14 = a4;
  v15 = operator new(4uLL);
  if (v9 > 2 && a6 == 1)
    v17 = 1;
  else
    v17 = v9;
  *v15 = v17;
  *(_QWORD *)a1 = v15;
  *((_QWORD *)a1 + 1) = v15 + 1;
  *((_QWORD *)a1 + 2) = v15 + 1;
  v19 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(2uLL);
  v20 = *(char **)a1;
  v21 = (char *)*((_QWORD *)a1 + 1);
  v19[1] = v14;
  v22 = (char *)(v19 + 1);
  v23 = (char *)(v19 + 2);
  while (v21 != v20)
  {
    v24 = *((_DWORD *)v21 - 1);
    v21 -= 4;
    *((_DWORD *)v22 - 1) = v24;
    v22 -= 4;
  }
  *(_QWORD *)a1 = v22;
  *((_QWORD *)a1 + 1) = v23;
  *((_QWORD *)a1 + 2) = &v19[v18];
  if (v20)
    operator delete(v20);
  *((_QWORD *)a1 + 1) = v23;
}

void sub_19177248C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *`anonymous namespace'::get_anec_final_pad<Espresso::pool_params>(unsigned int *result, uint64_t a2, int a3, int a4, int a5, int a6)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;

  v7 = *(_DWORD *)(a2 + 16);
  v6 = *(_DWORD *)(a2 + 20);
  v9 = *(_DWORD *)(a2 + 4);
  v8 = *(_DWORD *)(a2 + 8);
  v10 = *(__int16 *)(a2 + 36);
  v11 = *(unsigned __int16 *)(a2 + 36);
  switch(v10)
  {
    case 4:
      goto LABEL_4;
    case 2:
      v18 = 0;
      v15 = 0;
      v19 = 0;
      v16 = 0;
      v20 = 0;
      v21 = 0;
      break;
    case 1:
LABEL_4:
      v12 = (v6 * (a5 - 1) - a3 + v8) & ~((v6 * (a5 - 1) - a3 + v8) >> 31);
      v13 = (v7 * (a6 - 1) - a4 + v9) & ~((v7 * (a6 - 1) - a4 + v9) >> 31);
      v14 = v13 >> 1;
      v15 = v13 - (v13 >> 1);
      v16 = v12 >> 1;
      v17 = v12 - (v12 >> 1);
      if (v11 == 1)
        v18 = v14;
      else
        v18 = v15;
      if (v11 == 1)
      {
        v19 = v16;
      }
      else
      {
        v15 = v14;
        v19 = v17;
      }
      if (v11 == 1)
        v16 = v17;
      v20 = 0;
      v21 = 0;
      break;
    default:
      v18 = *(__int16 *)(a2 + 44);
      v15 = *(__int16 *)(a2 + 46);
      v19 = *(__int16 *)(a2 + 48);
      v16 = *(__int16 *)(a2 + 50);
      v21 = *(__int16 *)(a2 + 52);
      v20 = *(__int16 *)(a2 + 54);
      break;
  }
  *result = v18;
  result[1] = v15;
  result[2] = v19;
  result[3] = v16;
  result[4] = v20;
  result[5] = v21;
  if (v11 == 3 && *(_DWORD *)(a2 + 32) == 2)
  {
    result[1] = v7 * (a6 - 1) - a4 + v9;
    result[3] = v6 * (a5 - 1) - a3 + v8;
  }
  return result;
}

void Espresso::ANECompilerEngine::violations_from_alternates<ANECPoolLayerDescAlternate>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  CFTypeRef *v7;
  unint64_t *v8;
  unint64_t v9;
  CFTypeRef *v10;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2)
  {
    v6 = 0;
    v7 = (CFTypeRef *)(a3 + 8);
    do
    {
      v8 = (unint64_t *)(a3 + 680 * v6);
      if (*v8)
      {
        v9 = 0;
        v10 = v7;
        do
        {
          std::__hash_table<__CFString const*,Espresso::ANECompilerEngine::CFStringHasher,Espresso::ANECompilerEngine::CFStringEqualWrapper,std::allocator<__CFString const*>>::__emplace_unique_key_args<__CFString const*,__CFString const* const&>((float *)a1, v10, v10);
          ++v9;
          ++v10;
        }
        while (v9 < *v8);
      }
      ++v6;
      v7 += 85;
    }
    while (v6 != a2);
  }
}

void sub_191772658(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_pool3d_kernel::~mix_pool3d_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 43);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 43);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_pool3d_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 344), a3, a4, a5);
}

BOOL Espresso::ANECompilerEngine::mix_pool3d_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, uint64_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  Espresso::ANECompilerEngine *v9;
  NSString *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  const Espresso::net *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  const Espresso::net *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 *v38;
  __int128 v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  _BOOL8 v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  int64x2_t *v66;
  unint64_t *v67;
  unint64_t v68;
  unsigned int v69;
  uint64_t v70;
  char *v71;
  int64x2_t *v72;
  unint64_t *v73;
  unint64_t v74;
  int64x2_t *v75[2];
  void *v76[2];
  char v77;
  char v78;
  _BYTE v79[16];
  std::string v80;
  int64x2_t *v81[2];
  int64x2_t *v82;
  std::__shared_weak_count *v83;
  _OWORD v84[2];
  uint64_t v85;
  void *v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  void **v91[4];
  _OWORD v92[2];
  uint64_t v93;
  void *v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  void *__p[2];
  char v100;
  int64x2_t *v101;
  std::__shared_weak_count *v102;
  int64x2_t *v103;
  std::__shared_weak_count *v104;
  std::string v105;
  _QWORD v106[3];
  _BYTE v107[32];
  std::__shared_weak_count *v108;
  int64x2_t *v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;

  v6 = *(_QWORD *)(a3 + 48);
  v111 = 0;
  v112 = 0;
  v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7 && (v112 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = *(_QWORD *)(v6 + 72);
    v111 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v8 + 472);
  v9 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v9, v10))
  {
    v11 = (std::__shared_weak_count *)a2[1];
    v109 = *a2;
    v110 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "pool3d_kernel: not supported on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v105, (__int128 *)__p, a3, 0);
    Espresso::emit_kernel_validation_warning(&v109, (Espresso::base_kernel::validate_for_engine_warning_t *)&v105);
    v14 = v108;
    if (v108)
    {
      v15 = (unint64_t *)&v108->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v91[0] = (void **)v107;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v91);
    v91[0] = (void **)v106;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v91);
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v105.__r_.__value_.__l.__data_);
    if (v100 < 0)
      operator delete(__p[0]);
    v17 = v110;
    if (!v110)
      goto LABEL_83;
    v18 = (unint64_t *)&v110->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
LABEL_81:
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
LABEL_83:
    v54 = 0;
    goto LABEL_84;
  }
  v20 = (const Espresso::net *)v111;
  if (!*(_BYTE *)(v111 + 1281))
  {
    v47 = (std::__shared_weak_count *)a2[1];
    v103 = *a2;
    v104 = v47;
    if (v47)
    {
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "pool3d_kernel: has_3d_operations is not set");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v105, (__int128 *)__p, a3, 0);
    Espresso::emit_kernel_validation_warning(&v103, (Espresso::base_kernel::validate_for_engine_warning_t *)&v105);
    v50 = v108;
    if (v108)
    {
      v51 = (unint64_t *)&v108->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    v91[0] = (void **)v107;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v91);
    v91[0] = (void **)v106;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v91);
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v105.__r_.__value_.__l.__data_);
    if (v100 < 0)
      operator delete(__p[0]);
    v17 = v104;
    if (!v104)
      goto LABEL_83;
    v53 = (unint64_t *)&v104->__shared_owners_;
    do
      v19 = __ldaxr(v53);
    while (__stlxr(v19 - 1, v53));
    goto LABEL_81;
  }
  v21 = *(_QWORD *)a3;
  if (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3 != 64 || *(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24) != 64)
  {
    v40 = (std::__shared_weak_count *)a2[1];
    v101 = *a2;
    v102 = v40;
    if (v40)
    {
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "pool3d_kernel: expect only one input / output");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v105, (__int128 *)__p, a3, 0);
    Espresso::emit_kernel_validation_warning(&v101, (Espresso::base_kernel::validate_for_engine_warning_t *)&v105);
    v43 = v108;
    if (v108)
    {
      v44 = (unint64_t *)&v108->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v91[0] = (void **)v107;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v91);
    v91[0] = (void **)v106;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v91);
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v105.__r_.__value_.__l.__data_);
    if (v100 < 0)
      operator delete(__p[0]);
    v17 = v102;
    if (!v102)
      goto LABEL_83;
    v46 = (unint64_t *)&v102->__shared_owners_;
    do
      v19 = __ldaxr(v46);
    while (__stlxr(v19 - 1, v46));
    goto LABEL_81;
  }
  v22 = v112;
  v97 = v111;
  v98 = v112;
  if (v112)
  {
    v23 = (unint64_t *)&v112->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    v21 = *(_QWORD *)a3;
  }
  v25 = *(_OWORD *)(v21 + 16);
  v26 = *(_QWORD *)(v21 + 32);
  v92[0] = *(_OWORD *)v21;
  v92[1] = v25;
  v93 = v26;
  v94 = 0;
  v95 = 0;
  v96 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v94, *(const void **)(v21 + 40), *(_QWORD *)(v21 + 48), (uint64_t)(*(_QWORD *)(v21 + 48) - *(_QWORD *)(v21 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)__p, v20, (const Espresso::layer_shape *)v92, 1);
  if (v94)
  {
    v95 = v94;
    operator delete(v94);
  }
  if (v22)
  {
    v27 = (unint64_t *)&v22->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v30 = (const Espresso::net *)v111;
  v29 = v112;
  v89 = v111;
  v90 = v112;
  if (v112)
  {
    v31 = (unint64_t *)&v112->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v33 = *(_QWORD *)(a3 + 24);
  v34 = *(_QWORD *)(v33 + 32);
  v35 = *(_OWORD *)(v33 + 16);
  v84[0] = *(_OWORD *)v33;
  v84[1] = v35;
  v85 = v34;
  v86 = 0;
  v87 = 0;
  v88 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v86, *(const void **)(v33 + 40), *(_QWORD *)(v33 + 48), (uint64_t)(*(_QWORD *)(v33 + 48) - *(_QWORD *)(v33 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v91, v30, (const Espresso::layer_shape *)v84, 1);
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (v29)
  {
    v36 = (unint64_t *)&v29->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(__p, v9))
  {
    v59 = (std::__shared_weak_count *)a2[1];
    v82 = *a2;
    v83 = v59;
    if (v59)
    {
      v60 = (unint64_t *)&v59->__shared_owners_;
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
    }
    std::string::basic_string[abi:ne180100]<0>(v76, "pool3d_kernel: Input tensor extents exceed ANE limits");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v105, (__int128 *)v76, a3, 0);
    Espresso::emit_kernel_validation_warning(&v82, (Espresso::base_kernel::validate_for_engine_warning_t *)&v105);
    v62 = v108;
    if (v108)
    {
      v63 = (unint64_t *)&v108->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    v80.__r_.__value_.__r.__words[0] = (std::string::size_type)v107;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
    v80.__r_.__value_.__r.__words[0] = (std::string::size_type)v106;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v105.__r_.__value_.__l.__data_);
    if (v77 < 0)
      operator delete(v76[0]);
    v17 = v83;
    if (!v83)
      goto LABEL_83;
    v65 = (unint64_t *)&v83->__shared_owners_;
    do
      v19 = __ldaxr(v65);
    while (__stlxr(v19 - 1, v65));
    goto LABEL_81;
  }
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v91, v9))
  {
    v66 = a2[1];
    v81[0] = *a2;
    v81[1] = v66;
    if (v66)
    {
      v67 = &v66->u64[1];
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
    }
    std::string::basic_string[abi:ne180100]<0>(v76, "pool3d_kernel: Output tensor extents exceed ANE limits");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v105, (__int128 *)v76, a3, 0);
    Espresso::emit_kernel_validation_warning(v81, (Espresso::base_kernel::validate_for_engine_warning_t *)&v105);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v105.__r_.__value_.__l.__data_);
    if (v77 < 0)
      operator delete(v76[0]);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v81);
    goto LABEL_83;
  }
  v38 = *(__int128 **)(**(_QWORD **)(a3 + 48) + 224 * *(_QWORD *)(a3 + 72) + 136);
  if (*((char *)v38 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v80, *(const std::string::value_type **)v38, *((_QWORD *)v38 + 1));
  }
  else
  {
    v39 = *v38;
    v80.__r_.__value_.__r.__words[2] = *((_QWORD *)v38 + 2);
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v39;
  }
  v69 = *(_DWORD *)(a3 + 64);
  v70 = v111;
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v111 + 360), &v80))
  {
    v76[0] = &v80;
    v71 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v70 + 352), &v80, (uint64_t)&std::piecewise_construct, (__int128 **)v76);
    *(_OWORD *)&v105.__r_.__value_.__l.__data_ = *(_OWORD *)(v71 + 56);
    v106[0] = 0;
    v106[1] = 0;
    v105.__r_.__value_.__r.__words[2] = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v105.__r_.__value_.__r.__words[2], *((const void **)v71 + 9), *((_QWORD *)v71 + 10), (uint64_t)(*((_QWORD *)v71 + 10) - *((_QWORD *)v71 + 9)) >> 2);
    v69 = LODWORD(v105.__r_.__value_.__r.__words[1]) == -1 ? 1 : LODWORD(v105.__r_.__value_.__r.__words[1]);
    if (v105.__r_.__value_.__r.__words[2])
    {
      v106[0] = *((_QWORD *)&v105.__r_.__value_.__l + 2);
      operator delete((void *)v105.__r_.__value_.__r.__words[2]);
    }
  }
  Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)v79, (NSString *)(a1 + 344), v9);
  v54 = LOBYTE(v76[0]) != 0;
  if (!LOBYTE(v76[0]))
  {
    v72 = a2[1];
    v75[0] = *a2;
    v75[1] = v72;
    if (v72)
    {
      v73 = &v72->u64[1];
      do
        v74 = __ldxr(v73);
      while (__stxr(v74 + 1, v73));
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v105, (__int128 *)&v76[1], a3, 0);
    Espresso::emit_kernel_validation_warning(v75, (Espresso::base_kernel::validate_for_engine_warning_t *)&v105);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v105.__r_.__value_.__l.__data_);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v75);
  }
  if (v78 < 0)
    operator delete(v76[1]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v79);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
LABEL_84:

  v55 = v112;
  if (v112)
  {
    v56 = (unint64_t *)&v112->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  return v54;
}

void sub_191772F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *v63;
  uint64_t v64;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)(v64 - 208));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a20 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  if (a28 < 0)
    operator delete(a23);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v64 - 80);
  _Unwind_Resume(a1);
}

void sub_1917730EC()
{
  JUMPOUT(0x1917730DCLL);
}

void Espresso::ANECompilerEngine::mix_pool3d_kernel::compile(Espresso::ANECompilerEngine::mix_pool3d_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  char *v10;
  const void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  unint64_t *v21;
  unint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  _DWORD *v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  int32x4_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  std::string::pointer data;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  float v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  _WORD *v74;
  int v75;
  __int128 v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  int *v89;
  _WORD *v90;
  int v91;
  int v93;
  Espresso::ANECompilerEngine::compiler::build_state_t *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  void *v103;
  id v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  uint64_t weights_file_index;
  void *v110;
  void *v111;
  __int128 v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  void *v118;
  void *v119;
  void *v120;
  uint64_t v121;
  void *v122;
  void *v123;
  std::string *v124;
  std::string *v125;
  uint64_t v126;
  char v127;
  std::string::size_type size;
  std::string::size_type v129;
  uint64_t v130;
  unsigned __int8 *v131;
  std::string *v132;
  const std::string::value_type *v133;
  __int128 v134;
  __CFString *v135;
  std::string *v136;
  std::string *v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  const char *v175;
  int *v176;
  uint64_t i;
  float v178;
  int v179;
  _WORD *v180;
  int v181;
  std::runtime_error *exception;
  int *v184;
  uint64_t j;
  int v186;
  int v187;
  unsigned int v188;
  unsigned int v189;
  int v190;
  Espresso *v191;
  const char *v192;
  float v193;
  NSObject *v195;
  double v196;
  uint64_t v197;
  _WORD *v198;
  int v199;
  void *v201;
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t *v202;
  int32x2_t v203;
  uint64_t v204;
  Espresso::ANECompilerEngine::compiler *v205;
  float *lpsrc;
  Espresso::ANECompilerEngine::mix_pool3d_kernel *v207;
  id obj;
  std::__shared_weak_count *v209;
  std::__shared_weak_count *v210;
  std::string *v211;
  std::string *v212;
  unint64_t v213;
  uint64_t v214;
  int v215;
  unsigned int v216;
  int32x2_t v217;
  void *v218[3];
  void *v219;
  std::__shared_weak_count *v220;
  _DWORD *v221;
  std::__shared_weak_count *v222;
  float *v223;
  std::__shared_weak_count *v224;
  const void *v225;
  std::__shared_weak_count *v226;
  uint64_t v227;
  std::__shared_weak_count *v228;
  __int128 v229;
  uint64_t v230;
  std::__shared_weak_count *v231;
  __int128 v232;
  uint64_t v233;
  std::__shared_weak_count *v234;
  uint64_t v235[2];
  uint64_t v236;
  std::__shared_weak_count *v237;
  uint64_t v238;
  std::__shared_weak_count *v239;
  uint64_t v240;
  std::__shared_weak_count *v241;
  unsigned int v242;
  unsigned int v243;
  uint64_t v244;
  std::__shared_weak_count *v245;
  _QWORD v246[3];
  _BYTE buf[18];
  __int16 v248;
  int v249;
  __int16 v250;
  double v251;
  std::vector<std::string> v252;
  void *v253;
  char v254;
  id v255;
  __CFString *v256;
  id v257;
  void *v258[2];
  char v259;
  _BYTE v260[24];
  _BYTE v261[32];
  void *__p;
  char v263;
  id v264;
  id v265;
  id v266;
  uint64_t v267;
  std::string __str;
  __int128 v269;
  uint64_t v270;

  v270 = *MEMORY[0x1E0C80C00];
  v227 = 0;
  v228 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4
    || (v7 = std::__shared_weak_count::lock(v4), (v228 = v7) == 0)
    || (v8 = *((_QWORD *)a2 + 1), (v227 = v8) == 0))
  {
    v175 = "Inconsistent state: null network";
    goto LABEL_221;
  }
  if (!*(_QWORD *)(v8 + 576))
  {
    v175 = "Inconsistent state: blob_storage";
LABEL_221:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v175);
  }
  v9 = v7;
  v258[0] = a3[6];
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)v258[0], (__int128 **)v258);
  v11 = (const void *)*((_QWORD *)v10 + 5);
  v12 = (std::__shared_weak_count *)*((_QWORD *)v10 + 6);
  v225 = v11;
  v226 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v258[0] = a3;
  v202 = (Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)a3;
  v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)a3, (__int128 **)v258);
  v16 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
  lpsrc = (float *)*((_QWORD *)v15 + 5);
  v223 = lpsrc;
  v224 = v16;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if (v11
  {
    v20 = v19;
    v221 = v19;
    v222 = v12;
    if (v12)
    {
      v21 = (unint64_t *)&v12->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
  }
  else
  {
    v20 = 0;
    v221 = 0;
    v222 = 0;
  }
  if (lpsrc
  {
    v24 = v23;
    v219 = v23;
    v220 = v16;
    if (v16)
    {
      v25 = (unint64_t *)&v16->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
  }
  else
  {
    v24 = 0;
    v219 = 0;
    v220 = 0;
  }
  obj = (id)objc_opt_new();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)this + 71));
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(obj, "setObject:forKeyedSubscript:", v27, CFSTR("KernelWidth"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)this + 72));
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(obj, "setObject:forKeyedSubscript:", v28, CFSTR("KernelHeight"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)this + 73));
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v205 = a2;
  v207 = this;
  objc_msgSend(obj, "setObject:forKeyedSubscript:", v29, CFSTR("KernelDepth"));
  v30 = v24 + 40;
  v31 = (unsigned int *)((char *)this + 280);

  v32 = *((unsigned int *)v218[0] + 1);
  v33 = *((unsigned int *)v218[0] + 2);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)v218[0]);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v246[0] = v34;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v32);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v246[1] = v35;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v33);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v246[2] = v36;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v246, 3);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(obj, "setObject:forKeyedSubscript:", v37, CFSTR("Step"));

  if (*((_DWORD *)v207 + 78) == 2 && !*((_WORD *)v207 + 158))
    *((_WORD *)v207 + 158) = 1;
  v201 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(obj, "setObject:forKeyedSubscript:", v201, CFSTR("Type"));
  v38 = v216;
  v204 = v214;
  v203 = v217;
  if (v215
    || (v39.i64[0] = v214,
        v39.u64[1] = (unint64_t)vrev64_s32(v217),
        (vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_191A93380, (int8x16_t)vceqzq_s32(v39))) & 0xF) != 0)
    || v216)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(obj, "setObject:forKeyedSubscript:", v40, CFSTR("PadTop"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v38);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(obj, "setObject:forKeyedSubscript:", v41, CFSTR("PadBot"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v204);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(obj, "setObject:forKeyedSubscript:", v42, CFSTR("PadLeft"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", HIDWORD(v204));
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(obj, "setObject:forKeyedSubscript:", v43, CFSTR("PadRight"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v203.u32[1]);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(obj, "setObject:forKeyedSubscript:", v44, CFSTR("PadFront"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v203.u32[0]);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(obj, "setObject:forKeyedSubscript:", v45, CFSTR("PadBack"));

  }
  if (!*v31)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *((_DWORD *)v207 + 77) != 0);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(obj, "setObject:forKeyedSubscript:", v46, CFSTR("AverageCountExcludePadding"));

  }
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v258, (id *)v202);
  v211 = 0;
  v212 = 0;
  v213 = 0;
  *(_QWORD *)buf = &v211;
  buf[8] = 0;
  v211 = (std::string *)operator new(0x90uLL);
  v212 = v211;
  v213 = (unint64_t)&v211[6];
  v212 = (std::string *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t*>((uint64_t)&v213, (uint64_t)v258, (uint64_t)&__str, (uint64_t)v211);

  if (v263 < 0)
    operator delete(__p);
  *(_QWORD *)buf = v261;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v260;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v259 < 0)
    operator delete(v258[0]);
  data = v211[5].__r_.__value_.__l.__data_;
  v211[5].__r_.__value_.__r.__words[0] = (std::string::size_type)CFSTR("Pooling");

  objc_storeStrong((id *)&v211[5].__r_.__value_.__l.__size_, obj);
  v210 = v9;
  v48 = (unint64_t *)&v9->__shared_owners_;
  do
    v49 = __ldxr(v48);
  while (__stxr(v49 + 1, v48));
  v209 = v16;
  if (v16)
  {
    v50 = (unint64_t *)&v16->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v258);
  v266 = 0;
  v265 = 0;
  v267 = 0x100000000;
  v52 = *((_QWORD *)v207 + 51);
  v53 = (std::__shared_weak_count *)*((_QWORD *)v207 + 52);
  v244 = v52;
  v245 = v53;
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  if (v52
    && !*(_BYTE *)((*(uint64_t (**)(uint64_t))(*((_QWORD *)v207 + 43) + 104))((uint64_t)v207 + 344) + 40))
  {
    v56 = lpsrc[28];
    v236 = v52;
    v237 = v53;
    if (v53)
    {
      v57 = (unint64_t *)&v53->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
    }
    v59 = (std::__shared_weak_count *)*((_QWORD *)v207 + 54);
    v235[0] = *((_QWORD *)v207 + 53);
    v235[1] = (uint64_t)v59;
    if (v59)
    {
      v60 = (unint64_t *)&v59->__shared_owners_;
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
    }
    Espresso::ane_style_post_scale_bias((uint64_t)&v236, v235, (uint64_t)&v238, v56);
    if (v59)
    {
      v62 = (unint64_t *)&v59->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    v64 = v237;
    if (v237)
    {
      v65 = (unint64_t *)&v237->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    v67 = v244;
    v68 = *(unsigned int *)(v244 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v233, 2 * v68, 1, 1, 1);
    v69 = (int)v68;
    v232 = 0uLL;
    v70 = v68;
    v71 = *((_QWORD *)v207 + 53);
    if (v71)
      v70 = *(_DWORD *)(v71 + 8);
    if (!*((_BYTE *)v205 + 384))
    {
      Espresso::blob<unsigned char,1>::make(&__str, 4 * v68);
      v176 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
      if ((int)v68 >= 1)
      {
        for (i = 0; i != v68; ++i)
        {
          v178 = *(float *)(*(_QWORD *)(v67 + 16) + i * 4);
          *(float *)&v179 = ldexp(1.0, -v242) * v178;
          v176[i] = v179;
        }
      }
      if ((_DWORD)v68)
      {
        v180 = *(_WORD **)(v233 + 16);
        do
        {
          v181 = *v176++;
          _S0 = v181;
          __asm { FCVT            H0, S0 }
          *v180++ = _S0;
          --v69;
        }
        while (v69);
      }
      v230 = 0;
      v231 = 0;
      if (*((_QWORD *)v207 + 53))
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * v70);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v230, (__int128 *)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        Espresso::blob<unsigned char,1>::make(buf, 2 * v70);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v232, (__int128 *)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        v184 = *(int **)(v230 + 16);
        if (v70 >= 1)
        {
          for (j = 0; j != v70; ++j)
          {
            if ((int)v68 - 1 >= (int)j)
              v186 = j;
            else
              v186 = v68 - 1;
            *(float *)&v187 = *(float *)(*(_QWORD *)(v240 + 16) + 4 * j)
                            * *(float *)(*(_QWORD *)(v238 + 16) + 4 * v186);
            v184[j] = v187;
            v188 = v243;
            v189 = v242;
            *(float *)&v190 = ldexp(1.0, v243 - v242) * *(float *)&v187;
            v184[j] = v190;
            v193 = ldexp(1.0, v189 - v188) * *(float *)&v190;
            if (v193 < -127.0 || v193 > 255.0)
            {
              Espresso::espresso_os_log_subsystem(v191, v192);
              v195 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v195, OS_LOG_TYPE_ERROR))
              {
                v196 = *(float *)&v184[j];
                *(_DWORD *)buf = 134218752;
                *(double *)&buf[4] = v193;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v243;
                v248 = 1024;
                v249 = v242;
                v250 = 2048;
                v251 = v196;
                _os_log_error_impl(&dword_190DAF000, v195, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }

            }
          }
        }
        if (v70)
        {
          v197 = v70;
          v198 = *(_WORD **)(v232 + 16);
          do
          {
            v199 = *v184++;
            _S0 = v199;
            __asm { FCVT            H0, S0 }
            *v198++ = _S0;
            --v197;
          }
          while (v197);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    v72 = v243;
    if ((_DWORD)v68)
    {
      v73 = *(int **)(v238 + 16);
      v74 = *(_WORD **)(v233 + 16);
      do
      {
        v75 = *v73++;
        _S0 = v75;
        __asm { FCVT            H0, S0 }
        *v74++ = _S0;
        --v69;
      }
      while (v69);
    }
    if (v71)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v70, 1, 1, 1);
      v81 = *(_OWORD *)buf;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v82 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
      v232 = v81;
      if (v82)
      {
        v83 = (unint64_t *)&v82->__shared_owners_;
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      v85 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v86 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      if (v70)
      {
        v88 = v70;
        v89 = *(int **)(v240 + 16);
        v90 = *(_WORD **)(v232 + 16);
        do
        {
          v91 = *v89++;
          _S0 = v91;
          __asm { FCVT            H0, S0 }
          *v90++ = _S0;
          --v88;
        }
        while (v88);
      }
    }
    v93 = *((unsigned __int8 *)v205 + 552);
    v94 = (Espresso::ANECompilerEngine::compiler *)((char *)v205 + 128);
    v95 = v233;
    v96 = v234;
    v230 = v233;
    v231 = v234;
    if (v234)
    {
      v97 = (unint64_t *)&v234->__shared_owners_;
      do
        v98 = __ldxr(v97);
      while (__stxr(v98 + 1, v97));
    }
    v99 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v94, *(const unsigned __int8 **)(v95 + 16), *(int *)(v95 + 8));
    if (v96)
    {
      v100 = (unint64_t *)&v96->__shared_owners_;
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
    v102 = v72;
    v103 = (void *)objc_opt_new();
    if (*((_BYTE *)v205 + 121))
    {
      v104 = (id)v211[5].__r_.__value_.__l.__size_;

      v103 = v104;
    }
    v105 = (void *)objc_opt_new();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v68);
    v106 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v105, "setObject:forKeyedSubscript:", v106, CFSTR("ScaleCount"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v99);
    v107 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v105, "setObject:forKeyedSubscript:", v107, CFSTR("ScaleOffset"));

    v108 = (void *)MEMORY[0x1E0CB37E8];
    if (v93)
      weights_file_index = 0;
    else
    objc_msgSend(v108, "numberWithUnsignedLong:", weights_file_index);
    v110 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v105, "setObject:forKeyedSubscript:", v110, CFSTR("ScaleIndex"));

    objc_msgSend(v105, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v242);
    v111 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v103, "setObject:forKeyedSubscript:", v111, CFSTR("ScaleShift"));

    if (*((_QWORD *)v207 + 53))
    {
      v112 = v232;
      v229 = v232;
      if (*((_QWORD *)&v232 + 1))
      {
        v113 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
        do
          v114 = __ldxr(v113);
        while (__stxr(v114 + 1, v113));
      }
      v115 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v94, *(const unsigned __int8 **)(v112 + 16), *(int *)(v112 + 8));
      if (*((_QWORD *)&v112 + 1))
      {
        v116 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
        do
          v117 = __ldaxr(v116);
        while (__stlxr(v117 - 1, v116));
        if (!v117)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v112 + 1) + 16))(*((_QWORD *)&v112 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v112 + 1));
        }
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*((_QWORD *)v207 + 53) + 8));
      v118 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v105, "setObject:forKeyedSubscript:", v118, CFSTR("BiasCount"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v115);
      v119 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v105, "setObject:forKeyedSubscript:", v119, CFSTR("BiasOffset"));

      v120 = (void *)MEMORY[0x1E0CB37E8];
      if (v93)
        v121 = 0;
      else
      objc_msgSend(v120, "numberWithUnsignedLong:", v121);
      v122 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v105, "setObject:forKeyedSubscript:", v122, CFSTR("BiasIndex"));

      objc_msgSend(v105, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v102);
      v123 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v103, "setObject:forKeyedSubscript:", v123, CFSTR("BiasShift"));

    }
    objc_msgSend(v103, "setObject:forKeyedSubscript:", v105, CFSTR("BiasScaleGroupData"));
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, (id *)v202);
    v124 = v212;
    if (v212 == v211)
      goto LABEL_134;
    v125 = v212 - 6;
    v126 = HIBYTE(v212[-6].__r_.__value_.__r.__words[2]);
    v127 = v126;
    size = v212[-6].__r_.__value_.__l.__size_;
    if ((v126 & 0x80u) == 0)
      v129 = HIBYTE(v212[-6].__r_.__value_.__r.__words[2]);
    else
      v129 = v212[-6].__r_.__value_.__l.__size_;
    v130 = HIBYTE(v249);
    if (v249 < 0)
      v130 = *(_QWORD *)&buf[8];
    if (v129 != v130)
      goto LABEL_128;
    if (v249 >= 0)
      v131 = buf;
    else
      v131 = *(unsigned __int8 **)buf;
    if ((char)v126 < 0)
    {
      v133 = (const std::string::value_type *)v125->__r_.__value_.__r.__words[0];
      if (memcmp(v125->__r_.__value_.__l.__data_, v131, v212[-6].__r_.__value_.__l.__size_))
        goto LABEL_131;
    }
    else if ((_BYTE)v126)
    {
      v132 = v212 - 6;
      while (v132->__r_.__value_.__s.__data_[0] == *v131)
      {
        v132 = (std::string *)((char *)v132 + 1);
        ++v131;
        if (!--v126)
          goto LABEL_127;
      }
      goto LABEL_128;
    }
LABEL_127:
    std::string::append(v124 - 6, "__@pre_scale_bias");
    v127 = HIBYTE(v124[-6].__r_.__value_.__r.__words[2]);
LABEL_128:
    if ((v127 & 0x80) == 0)
    {
      v134 = *(_OWORD *)&v125->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v124[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v134;
      goto LABEL_132;
    }
    v133 = v124[-6].__r_.__value_.__l.__data_;
    size = v124[-6].__r_.__value_.__l.__size_;
LABEL_131:
    std::string::__init_copy_ctor_external(&__str, v133, size);
LABEL_132:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v252, &__str, &v269, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
LABEL_134:
    v135 = v256;
    v256 = CFSTR("GOC");

    objc_storeStrong(&v257, v103);
    if (!*((_BYTE *)v205 + 121))
    {
      v136 = v212;
      if ((unint64_t)v212 >= v213)
      {
        v138 = 0x8E38E38E38E38E39 * (((char *)v212 - (char *)v211) >> 4);
        if (v138 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v139 = 0x1C71C71C71C71C72 * ((uint64_t)(v213 - (_QWORD)v211) >> 4);
        if (v139 <= v138 + 1)
          v139 = v138 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v213 - (_QWORD)v211) >> 4) >= 0xE38E38E38E38E3)
          v140 = 0x1C71C71C71C71C7;
        else
          v140 = v139;
        *((_QWORD *)&v269 + 1) = &v213;
        if (v140)
          v140 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v140);
        else
          v141 = 0;
        __str.__r_.__value_.__r.__words[0] = v140;
        __str.__r_.__value_.__l.__size_ = v140 + 144 * v138;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        *(_QWORD *)&v269 = v140 + 144 * v141;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
        __str.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer((uint64_t *)&v211, &__str);
        v137 = v212;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v212, (uint64_t)buf);
        v137 = v136 + 6;
      }
      v212 = v137;
    }

    if (v254 < 0)
      operator delete(v253);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v252;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v250;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(v249) < 0)
      operator delete(*(void **)buf);

    v142 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
    if (*((_QWORD *)&v232 + 1))
    {
      v143 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
      do
        v144 = __ldaxr(v143);
      while (__stlxr(v144 - 1, v143));
      if (!v144)
      {
        ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
        std::__shared_weak_count::__release_weak(v142);
      }
    }
    v145 = v234;
    if (v234)
    {
      v146 = (unint64_t *)&v234->__shared_owners_;
      do
        v147 = __ldaxr(v146);
      while (__stlxr(v147 - 1, v146));
      if (!v147)
      {
        ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
        std::__shared_weak_count::__release_weak(v145);
      }
    }
    v148 = v241;
    if (v241)
    {
      v149 = (unint64_t *)&v241->__shared_owners_;
      do
        v150 = __ldaxr(v149);
      while (__stlxr(v150 - 1, v149));
      if (!v150)
      {
        ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
        std::__shared_weak_count::__release_weak(v148);
      }
    }
    v151 = v239;
    if (v239)
    {
      v152 = (unint64_t *)&v239->__shared_owners_;
      do
        v153 = __ldaxr(v152);
      while (__stlxr(v153 - 1, v152));
      if (!v153)
      {
        ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
        std::__shared_weak_count::__release_weak(v151);
      }
    }
    v53 = v245;
  }
  if (v53)
  {
    v154 = (unint64_t *)&v53->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }

  if (v263 < 0)
    operator delete(__p);
  *(_QWORD *)buf = v261;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v260;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v259 < 0)
    operator delete(v258[0]);
  if (v209)
  {
    v156 = (unint64_t *)&v209->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
      std::__shared_weak_count::__release_weak(v209);
    }
  }
  v158 = (unint64_t *)&v210->__shared_owners_;
  do
    v159 = __ldaxr(v158);
  while (__stlxr(v159 - 1, v158));
  if (!v159)
  {
    ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
    std::__shared_weak_count::__release_weak(v210);
  }
  (*(void (**)(uint64_t, Espresso::ANECompilerEngine::compiler *, std::string **))(*((_QWORD *)v207 + 43)
                                                                                           + 32))((uint64_t)v207 + 344, v205, &v211);
  v258[0] = &v211;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v258);

  if (v218[0])
  {
    v218[1] = v218[0];
    operator delete(v218[0]);
  }

  v160 = v220;
  if (v220)
  {
    v161 = (unint64_t *)&v220->__shared_owners_;
    do
      v162 = __ldaxr(v161);
    while (__stlxr(v162 - 1, v161));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  v163 = v222;
  if (v222)
  {
    v164 = (unint64_t *)&v222->__shared_owners_;
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  v166 = v224;
  if (v224)
  {
    v167 = (unint64_t *)&v224->__shared_owners_;
    do
      v168 = __ldaxr(v167);
    while (__stlxr(v168 - 1, v167));
    if (!v168)
    {
      ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
      std::__shared_weak_count::__release_weak(v166);
    }
  }
  v169 = v226;
  if (v226)
  {
    v170 = (unint64_t *)&v226->__shared_owners_;
    do
      v171 = __ldaxr(v170);
    while (__stlxr(v171 - 1, v170));
    if (!v171)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  v172 = v228;
  if (v228)
  {
    v173 = (unint64_t *)&v228->__shared_owners_;
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
}

void sub_191774518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  a65 = (uint64_t)&a24;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a65);

  if (__p)
  {
    a31 = (uint64_t)__p;
    operator delete(__p);
  }

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_pool3d_kernel::compile(Espresso::ANECompilerEngine::mix_pool3d_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  Espresso::ANECompilerEngine::mix_pool3d_kernel::compile((Espresso::ANECompilerEngine::mix_pool3d_kernel *)((char *)this - 344), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_pool3d_kernel::~mix_pool3d_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 43);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 43);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_pool_kernel::~mix_pool_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 54);
  Espresso::generic_pool_kernel::~generic_pool_kernel((Espresso::generic_pool_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 54);
  Espresso::generic_pool_kernel::~generic_pool_kernel((Espresso::generic_pool_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_pool_kernel::compile(Espresso::ANECompilerEngine::mix_pool_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  char *v10;
  std::__shared_weak_count *v11;
  _DWORD *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v15;
  std::__shared_weak_count *v16;
  void *v17;
  unint64_t *v18;
  unint64_t v19;
  Espresso::ANECompilerEngine *v20;
  NSString *v21;
  NSString *v22;
  _DWORD *v23;
  unsigned int v24;
  void *v25;
  __CFString *v26;
  int v27;
  const __CFString *v28;
  void *v29;
  __CFString *v30;
  void *v31;
  std::string *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::string *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  __CFString *v54;
  std::string *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  std::string *v60;
  __CFString *v61;
  void *v62;
  std::string *v63;
  std::string *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void *v69;
  __CFString *v70;
  std::string *v71;
  std::string *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  const char *v95;
  id obj;
  _QWORD v97[3];
  std::__shared_weak_count *v98;
  void *v99;
  std::string *v100;
  std::string *v101;
  unint64_t v102;
  unint64_t *v103;
  uint64_t v104;
  void *v105;
  char v106;
  id v107;
  __CFString *v108;
  id v109;
  uint64_t v110;
  std::string *v111;
  unint64_t v112;
  _QWORD v113[2];
  uint64_t v114;
  std::__shared_weak_count *v115;
  void *v116[2];
  char v117;
  _BYTE v118[24];
  char *v119;
  std::string *v120;
  unint64_t v121;
  void *__p;
  char v123;
  id v124;
  __CFString *v125;
  id v126[3];
  std::__shared_weak_count *v127;
  _DWORD *v128;
  std::__shared_weak_count *v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  void **v132;
  std::string *v133;
  _QWORD v134[3];
  _QWORD v135[2];
  _QWORD v136[4];

  v136[2] = *MEMORY[0x1E0C80C00];
  v130 = 0;
  v131 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4
    || (v7 = std::__shared_weak_count::lock(v4), (v131 = v7) == 0)
    || (v8 = *((_QWORD *)a2 + 1), (v130 = v8) == 0))
  {
    v95 = "Inconsistent state: null network";
    goto LABEL_166;
  }
  if (!*(_QWORD *)(v8 + 576))
  {
    v95 = "Inconsistent state: blob_storage";
LABEL_166:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v95);
  }
  v9 = v7;
  v116[0] = a3[6];
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)v116[0], (__int128 **)v116);
  v12 = (_DWORD *)*((_QWORD *)v10 + 5);
  v11 = (std::__shared_weak_count *)*((_QWORD *)v10 + 6);
  v128 = v12;
  v129 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v116[0] = a3;
  v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)a3, (__int128 **)v116);
  v17 = (void *)*((_QWORD *)v15 + 5);
  v16 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
  v126[2] = v17;
  v127 = v16;
  if (v16)
  {
    v18 = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v8 + 472);
  v20 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v20, v21))
    goto LABEL_12;
  if (v12)
  v23 = v17
  if (!*((_DWORD *)this + 90)
    && (*((_DWORD *)this + 77) != v12[44] || *((_DWORD *)this + 78) != v12[43] || v23[43] != 1 || v23[44] != 1))
  {
LABEL_12:
    Espresso::ANECompilerEngine::pool_kernel::compile(this, a2, a3);
    goto LABEL_148;
  }
  v24 = *((_DWORD *)this + 76);
  if (v24 < 2)
  {
    v25 = (void *)objc_opt_new();
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v116, a3);
    v132 = 0;
    v133 = 0;
    v134[0] = 0;
    v26 = v125;
    v125 = CFSTR("Reduction");

    v27 = *((_DWORD *)this + 76);
    if (v27 == 1)
    {
      v28 = CFSTR("Max");
    }
    else
    {
      if (v27)
        goto LABEL_33;
      v28 = CFSTR("Avg");
    }
    objc_msgSend(v25, "setObject:forKeyedSubscript:", v28, CFSTR("Type"));
LABEL_33:
    v136[0] = CFSTR("Width");
    v136[1] = CFSTR("Height");
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v136, 2);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "setObject:forKeyedSubscript:", v31, CFSTR("Dimension"));

    objc_storeStrong(v126, v25);
    v32 = v133;
    if ((unint64_t)v133 >= v134[0])
    {
      v33 = 0x8E38E38E38E38E39 * (((char *)v133 - (char *)v132) >> 4);
      if (v33 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v34 = 0x1C71C71C71C71C72 * ((uint64_t)(v134[0] - (_QWORD)v132) >> 4);
      if (v34 <= v33 + 1)
        v34 = v33 + 1;
      if (0x8E38E38E38E38E39 * ((uint64_t)(v134[0] - (_QWORD)v132) >> 4) >= 0xE38E38E38E38E3)
        v35 = 0x1C71C71C71C71C7;
      else
        v35 = v34;
      v103 = v134;
      if (v35)
        v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v35);
      else
        v36 = 0;
      v99 = (void *)v35;
      v100 = (std::string *)(v35 + 144 * v33);
      v101 = v100;
      v102 = v35 + 144 * v36;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v100, (uint64_t)v116);
      v101 = v100 + 6;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer((uint64_t *)&v132, &v99);
      v39 = v133;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v99);
      v9 = v131;
      v133 = v39;
      v114 = v8;
      v115 = v131;
      if (!v131)
        goto LABEL_50;
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v133, (uint64_t)v116);
      v133 = v32 + 6;
      v114 = v8;
      v115 = v9;
    }
    v40 = (unint64_t *)&v9->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
LABEL_50:
    v113[0] = v17;
    v113[1] = v16;
    if (v16)
    {
      v42 = (unint64_t *)&v16->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    Espresso::ANECompilerEngine::add_ane_scale_bias_unit<Espresso::ANECompilerEngine::mix_pool_kernel *>(this, a2, a3, (uint64_t)v113, (uint64_t *)&v132);
    if (v16)
    {
      v44 = (unint64_t *)&v16->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v46 = v115;
    if (v115)
    {
      v47 = (unint64_t *)&v115->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, void ***))(*((_QWORD *)this + 54) + 32))((char *)this + 432, a2, &v132);
    v99 = &v132;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);

    if (v123 < 0)
      operator delete(__p);
    v99 = &v119;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
    v99 = v118;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
    if (v117 < 0)
      operator delete(v116[0]);

    goto LABEL_148;
  }
  if (v24 == 2)
  {
    v110 = 0;
    v111 = 0;
    v112 = 0;
    if (Espresso::ANECompilerEngine::prefer_ne(v20, v22))
    {
      v29 = (void *)objc_opt_new();
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v116, a3);
      v30 = v125;
      v125 = CFSTR("ElementWise");

      objc_msgSend(v29, "setObject:forKeyedSubscript:", CFSTR("Square"), CFSTR("Type"));
      objc_storeStrong(v126, v29);
      v50 = 0x8E38E38E38E38E39 * (((uint64_t)v111 - v110) >> 4);
      if (v50 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = 0x1C71C71C71C71C72 * ((uint64_t)(v112 - v110) >> 4);
      if (v51 <= v50 + 1)
        v51 = v50 + 1;
      if (0x8E38E38E38E38E39 * ((uint64_t)(v112 - v110) >> 4) >= 0xE38E38E38E38E3)
        v52 = 0x1C71C71C71C71C7;
      else
        v52 = v51;
      v103 = &v112;
      if (v52)
        v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v52);
      else
        v53 = 0;
      v99 = (void *)v52;
      v100 = (std::string *)(v52 + 16 * (((uint64_t)v111 - v110) >> 4));
      v101 = v100;
      v102 = v52 + 144 * v53;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v100, (uint64_t)v116);
      v101 = v100 + 6;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v110, &v99);
      v60 = v111;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v99);
      v111 = v60;

      if (v123 < 0)
        operator delete(__p);
    }
    else
    {
      v29 = (void *)objc_opt_new();
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v116, a3);
      v37 = v120;
      if ((unint64_t)v120 >= v121)
      {
        v49 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v119, (uint64_t)v119);
      }
      else
      {
        if (v119[23] < 0)
        {
          std::string::__init_copy_ctor_external(v120, *(const std::string::value_type **)v119, *((_QWORD *)v119 + 1));
        }
        else
        {
          v38 = *(_OWORD *)v119;
          v120->__r_.__value_.__r.__words[2] = *((_QWORD *)v119 + 2);
          *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v38;
        }
        v49 = v37 + 1;
      }
      v54 = v125;
      v120 = v49;
      v125 = CFSTR("ScaledElementWise");

      objc_msgSend(v29, "setObject:forKeyedSubscript:", CFSTR("Mult"), CFSTR("Type"));
      objc_storeStrong(v126, v29);
      if ((unint64_t)v111 >= v112)
      {
        v56 = 0x8E38E38E38E38E39 * (((uint64_t)v111 - v110) >> 4);
        if (v56 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v57 = 0x1C71C71C71C71C72 * ((uint64_t)(v112 - v110) >> 4);
        if (v57 <= v56 + 1)
          v57 = v56 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v112 - v110) >> 4) >= 0xE38E38E38E38E3)
          v58 = 0x1C71C71C71C71C7;
        else
          v58 = v57;
        v103 = &v112;
        if (v58)
          v58 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v58);
        else
          v59 = 0;
        v99 = (void *)v58;
        v100 = (std::string *)(v58 + 16 * (((uint64_t)v111 - v110) >> 4));
        v101 = v100;
        v102 = v58 + 144 * v59;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v100, (uint64_t)v116);
        v101 = v100 + 6;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v110, &v99);
        v55 = v111;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v99);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v111, (uint64_t)v116);
        v55 = v111 + 6;
      }
      v111 = v55;

      if (v123 < 0)
        operator delete(__p);
    }
    v99 = &v119;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
    v99 = v118;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
    if (v117 < 0)
      operator delete(v116[0]);

    obj = (id)objc_opt_new();
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v116, a3);
    v61 = v125;
    v125 = CFSTR("Reduction");

    objc_msgSend(obj, "setObject:forKeyedSubscript:", CFSTR("Avg"), CFSTR("Type"));
    v135[0] = CFSTR("Width");
    v135[1] = CFSTR("Height");
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v135, 2);
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(obj, "setObject:forKeyedSubscript:", v62, CFSTR("Dimension"));

    objc_storeStrong(v126, obj);
    v63 = v111;
    if ((unint64_t)v111 >= v112)
    {
      v65 = 0x8E38E38E38E38E39 * (((uint64_t)v111 - v110) >> 4);
      if (v65 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v66 = 0x1C71C71C71C71C72 * ((uint64_t)(v112 - v110) >> 4);
      if (v66 <= v65 + 1)
        v66 = v65 + 1;
      if (0x8E38E38E38E38E39 * ((uint64_t)(v112 - v110) >> 4) >= 0xE38E38E38E38E3)
        v67 = 0x1C71C71C71C71C7;
      else
        v67 = v66;
      v103 = &v112;
      if (v67)
        v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v67);
      else
        v68 = 0;
      v99 = (void *)v67;
      v100 = (std::string *)(v67 + 144 * v65);
      v101 = v100;
      v102 = v67 + 144 * v68;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v100, (uint64_t)v116);
      v101 += 6;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v110, &v99);
      v64 = v111;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v99);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v111, (uint64_t)v116);
      v64 = v63 + 6;
    }
    v111 = v64;
    v69 = (void *)objc_opt_new();
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t(&v99, a3);
    v70 = v108;
    v108 = CFSTR("Neuron");

    objc_msgSend(v69, "setObject:forKeyedSubscript:", CFSTR("Sqrt"), CFSTR("Type"));
    objc_storeStrong(&v109, v69);
    v71 = v111;
    if ((unint64_t)v111 >= v112)
    {
      v73 = 0x8E38E38E38E38E39 * (((uint64_t)v111 - v110) >> 4);
      if (v73 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v74 = 0x1C71C71C71C71C72 * ((uint64_t)(v112 - v110) >> 4);
      if (v74 <= v73 + 1)
        v74 = v73 + 1;
      if (0x8E38E38E38E38E39 * ((uint64_t)(v112 - v110) >> 4) >= 0xE38E38E38E38E3)
        v75 = 0x1C71C71C71C71C7;
      else
        v75 = v74;
      v134[2] = &v112;
      if (v75)
        v75 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v75);
      else
        v76 = 0;
      v132 = (void **)v75;
      v133 = (std::string *)(v75 + 144 * v73);
      v134[0] = v133;
      v134[1] = v75 + 144 * v76;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v133, (uint64_t)&v99);
      v134[0] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v110, &v132);
      v72 = v111;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v132);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v111, (uint64_t)&v99);
      v72 = v71 + 6;
    }
    v111 = v72;
    v97[2] = v8;
    v98 = v131;
    if (v131)
    {
      v77 = (unint64_t *)&v131->__shared_owners_;
      do
        v78 = __ldxr(v77);
      while (__stxr(v78 + 1, v77));
    }
    v97[0] = v17;
    v97[1] = v16;
    if (v16)
    {
      v79 = (unint64_t *)&v16->__shared_owners_;
      do
        v80 = __ldxr(v79);
      while (__stxr(v80 + 1, v79));
    }
    Espresso::ANECompilerEngine::add_ane_scale_bias_unit<Espresso::ANECompilerEngine::mix_pool_kernel *>(this, a2, a3, (uint64_t)v97, &v110);
    if (v16)
    {
      v81 = (unint64_t *)&v16->__shared_owners_;
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v83 = v98;
    if (v98)
    {
      v84 = (unint64_t *)&v98->__shared_owners_;
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
    (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((_QWORD *)this + 54) + 32))((char *)this + 432, a2, &v110);

    if (v106 < 0)
      operator delete(v105);
    v132 = (void **)&v104;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v132);
    v132 = (void **)&v102;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v132);
    if (SHIBYTE(v101) < 0)
      operator delete(v99);

    if (v123 < 0)
      operator delete(__p);
    v99 = &v119;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
    v99 = v118;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
    if (v117 < 0)
      operator delete(v116[0]);

    v116[0] = &v110;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v116);
  }
LABEL_148:

  v86 = v127;
  if (v127)
  {
    v87 = (unint64_t *)&v127->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = v129;
  if (v129)
  {
    v90 = (unint64_t *)&v129->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = v131;
  if (v131)
  {
    v93 = (unint64_t *)&v131->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
}

