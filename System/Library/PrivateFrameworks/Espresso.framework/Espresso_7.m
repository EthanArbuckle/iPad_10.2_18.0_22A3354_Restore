void sub_1910A0B68(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  void **v4;
  void **v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;

  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__deallocate_node(v1 - 208, *(char **)(v1 - 192));
  v3 = *(void **)(v1 - 208);
  *(_QWORD *)(v1 - 208) = 0;
  if (v3)
    operator delete(v3);
  if (*(char *)(v1 - 145) < 0)
    operator delete(*(void **)(v1 - 168));
  v4 = *(void ***)(v1 - 128);
  if (v4)
  {
    do
    {
      while (1)
      {
        v5 = (void **)*v4;
        v6 = (std::__shared_weak_count *)v4[6];
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        if (*((char *)v4 + 39) < 0)
          break;
        operator delete(v4);
        v4 = v5;
        if (!v5)
          goto LABEL_15;
      }
      operator delete(v4[2]);
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
LABEL_15:
  v9 = *(void **)(v1 - 144);
  *(_QWORD *)(v1 - 144) = 0;
  if (v9)
    operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t *std::__basic_node_handle<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::allocator<std::pair<std::string const,std::vector<MIL::IRDimension const*>>>,std::__map_node_handle_specifics>::~__basic_node_handle[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(void **)(v2 + 40);
    if (v3)
    {
      *(_QWORD *)(v2 + 48) = v3;
      operator delete(v3);
    }
    if (*(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    operator delete((void *)v2);
    *a1 = 0;
  }
  return a1;
}

uint64_t std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  char *v2;
  void *v3;
  char *v5;
  void *v6;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = *(char **)v2;
      v6 = (void *)*((_QWORD *)v2 + 5);
      if (v6)
      {
        *((_QWORD *)v2 + 6) = v6;
        operator delete(v6);
      }
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

MIL::Attributes::FlexibleShapeInfo **std::unique_ptr<MIL::Attributes::FlexibleShapeInfo>::~unique_ptr[abi:ne180100](MIL::Attributes::FlexibleShapeInfo **a1)
{
  MIL::Attributes::FlexibleShapeInfo *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v2);
    MEMORY[0x19401CD90]();
  }
  return a1;
}

MIL::Builder::ProgramBuilder *Espresso::AOT::ConvertNoOpFunctions@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, std::string::size_type *a3@<X8>)
{
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const char *OpsetName;
  unint64_t v11;
  void *v12;
  const char *v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::string::size_type v18;
  std::string::size_type size;
  __int128 v20;
  char *v21;
  char **v22;
  char **v23;
  char v24;
  void *v25;
  void **v26;
  char *v27;
  char *v28;
  char *v29;
  int v30;
  size_t v31;
  char *v32;
  size_t v33;
  int v34;
  _BOOL4 v35;
  int v36;
  _BOOL4 v37;
  char *v38;
  std::string *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  _BYTE *v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  std::string::size_type v53;
  void *v54;
  MIL::Builder::OperationBuilder **v55;
  MIL::Builder::OperationBuilder **v56;
  MIL::Builder::OperationBuilder **v57;
  void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t Operator;
  uint64_t v63;
  int v64;
  BOOL v65;
  uint64_t v66;
  __int128 v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  __int128 v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  MIL::Builder::OperationBuilder **v78;
  MIL::Builder::OperationBuilder **v79;
  char v80;
  std::__shared_weak_count *v81;
  MIL::Builder::OperationBuilder *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t **v88;
  MIL::IRValue *Value;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  void *v93;
  unint64_t *v94;
  unint64_t v95;
  MIL::Builder::OperationBuilder **v96;
  MIL::Builder::OperationBuilder **v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  void *v102;
  __int128 v103;
  uint64_t Name;
  uint64_t v105;
  std::string::size_type v106;
  std::string::size_type *p_size;
  std::string::size_type *v108;
  int v109;
  size_t v110;
  const void *v111;
  std::string::size_type v112;
  const void *v113;
  const void *v114;
  int v115;
  size_t v116;
  const void *v117;
  size_t v118;
  int v119;
  _BOOL4 v120;
  int v121;
  _BOOL4 v122;
  char *v123;
  std::string *v124;
  __int128 v125;
  char *v126;
  std::string::size_type v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  _BYTE *v131;
  int v132;
  uint64_t v133;
  int v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  std::string::size_type v140;
  int v141;
  MIL::Builder::Variable *v142;
  uint64_t OperationsByInput;
  uint64_t v144;
  size_t prime;
  void *v146;
  BOOL v147;
  unint64_t v148;
  uint8x8_t v149;
  uint64_t v150;
  void *v151;
  void *v152;
  uint64_t v153;
  _QWORD **v154;
  size_t v155;
  size_t v156;
  size_t v157;
  _QWORD *v158;
  size_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  size_t v163;
  _QWORD *v164;
  uint64_t v165;
  std::string::size_type v166;
  int v167;
  size_t v168;
  const void *v169;
  int v170;
  size_t v171;
  const void *v172;
  size_t v173;
  int v174;
  BOOL v175;
  int v176;
  _BOOL4 v177;
  const std::string *v178;
  uint64_t v179;
  uint64_t v180;
  std::string::size_type v181;
  std::string::size_type *v182;
  std::string::size_type *v183;
  int v184;
  size_t v185;
  const void *v186;
  std::string::size_type v187;
  const void *v188;
  const void *v189;
  int v190;
  size_t v191;
  const void *v192;
  size_t v193;
  int v194;
  _BOOL4 v195;
  int v196;
  _BOOL4 v197;
  char *v198;
  std::string *v199;
  __int128 v200;
  std::string::size_type v201;
  uint64_t v202;
  _BYTE *v203;
  uint64_t v204;
  _BYTE *v205;
  int v206;
  uint64_t v207;
  int v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  char *v213;
  char *v214;
  char **v215;
  char **v216;
  int v217;
  char *v218;
  char *v219;
  char *v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  _BYTE *v224;
  int v225;
  uint64_t v226;
  int v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  std::__shared_weak_count *v232;
  _BYTE *v233;
  char v234;
  _QWORD *v235;
  void *v236;
  _QWORD *v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  void *v241;
  uint64_t v242;
  uint64_t v243;
  _QWORD *v244;
  _QWORD *v245;
  void *v246;
  char **v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  unint64_t *v251;
  unint64_t v252;
  void **v253;
  void **v254;
  void **v255;
  void **v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  MIL::Builder::Variable *ArgumentForParameter;
  uint64_t v264;
  __int128 v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  uint64_t OutputName;
  __int128 v270;
  int v271;
  size_t v272;
  unint64_t v273;
  void *v274;
  uint64_t v275;
  uint64_t v276;
  void **v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  std::__shared_weak_count *v287;
  std::__shared_weak_count_vtbl *v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  void *v295;
  std::__shared_weak_count *v296;
  std::__shared_weak_count_vtbl *v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  void *v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  int v317;
  void *v318;
  size_t v319;
  unint64_t v320;
  void *v321;
  uint64_t v322;
  uint64_t v323;
  void **v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  char *v328;
  char **v329;
  std::string::size_type v330;
  std::string::size_type i;
  std::string::size_type v332;
  std::string::size_type v333;
  void *v334;
  std::__shared_weak_count *v335;
  unint64_t *v336;
  unint64_t v337;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  std::__shared_weak_count *v341;
  unint64_t *v342;
  unint64_t v343;
  uint64_t *v344;
  std::string::size_type v345;
  std::string::size_type v346;
  void **v347;
  void *v348;
  MIL::Builder::ProgramBuilder *result;
  void **v350;
  char *v351;
  char **v352;
  std::runtime_error *exception;
  std::string::size_type *v354;
  uint64_t v355;
  uint64_t v356;
  MIL::Builder::OperationBuilder **v357;
  uint64_t v358;
  std::string::size_type *v359;
  MIL::Builder::OperationBuilder **v360;
  MIL::Builder::Variable *v361;
  char v362;
  std::__shared_weak_count *v363;
  std::string v364;
  MIL::Builder::OperationBuilder *v365;
  std::__shared_weak_count *v366;
  uint64_t v367;
  std::__shared_weak_count *v368;
  void *v369[2];
  char v370;
  void *v371;
  std::__shared_weak_count *v372;
  void *v373[2];
  char v374;
  std::__shared_weak_count *v375;
  void *v376[2];
  char v377;
  void *v378;
  std::__shared_weak_count *v379;
  void *v380[2];
  char v381;
  std::__shared_weak_count *v382;
  std::string v383;
  std::__shared_weak_count *v384;
  void *v385;
  size_t v386;
  unint64_t v387;
  std::__shared_weak_count *v388;
  std::string v389;
  void *v390[2];
  char v391;
  std::__shared_weak_count *v392;
  std::__shared_weak_count *v393;
  uint64_t v394;
  std::__shared_weak_count *v395;
  void *v396;
  std::__shared_weak_count *v397;
  unint64_t v398;
  void *__p[2];
  void *v400[2];
  float v401;
  char **v402;
  char *v403;
  uint64_t v404;
  std::string v405;
  MIL::Builder::BlockBuilder *v406;
  std::__shared_weak_count *v407;
  std::string v408;
  void *v409;
  MIL::Builder::OperationBuilder **v410;
  char **v411;
  char *v412;
  uint64_t v413;
  MIL::Builder::BlockBuilder *v414;
  std::__shared_weak_count *v415;
  MIL::Builder::FunctionBuilder *v416[2];
  char **v417;
  char *v418[2];
  void *v419[2];
  void *v420[2];
  int v421;
  void *__dst[2];
  unint64_t v423;
  uint64_t v424;
  std::__shared_weak_count *v425;
  MIL::Builder::ProgramBuilder *v426;
  std::string v427;
  void *v428[2];
  char v429;
  char *v430;
  __int128 v431;
  char *v432;
  __int128 v433;
  uint64_t v434;

  v434 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 48))(&v424);
  v6 = (E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *)MIL::Builder::ProgramBuilder::Make();
  v7 = v425;
  if (v425)
  {
    p_shared_owners = (unint64_t *)&v425->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  OpsetName = E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::GetOpsetName(v6);
  v12 = (void *)v11;
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = OpsetName;
  v358 = a1;
  if (v11 >= 0x17)
  {
    v15 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v15 = v11 | 7;
    v16 = v15 + 1;
    v14 = (void **)operator new(v15 + 1);
    __dst[1] = v12;
    v423 = v16 | 0x8000000000000000;
    __dst[0] = v14;
    goto LABEL_13;
  }
  HIBYTE(v423) = v11;
  v14 = __dst;
  if (v11)
LABEL_13:
    memmove(v14, v13, (size_t)v12);
  *((_BYTE *)v12 + (_QWORD)v14) = 0;
  *((_BYTE *)&v427.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v427, "cast");
  v429 = 8;
  strcpy((char *)v428, "identity");
  v430 = (char *)operator new(0x19uLL);
  v431 = xmmword_191A849B0;
  strcpy(v430, "tensor_buffer_to_tensor");
  v432 = (char *)operator new(0x19uLL);
  v433 = xmmword_191A849B0;
  strcpy(v432, "tensor_to_tensor_buffer");
  *(_OWORD *)v419 = 0u;
  *(_OWORD *)v420 = 0u;
  v421 = 1065353216;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v419, (uint64_t)&v427, (uint64_t)&v427);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v419, (uint64_t)v428, (uint64_t)v428);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v419, (uint64_t)&v430, (uint64_t)&v430);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v419, (uint64_t)&v432, (uint64_t)&v432);
  if (SHIBYTE(v433) < 0)
  {
    operator delete(v432);
    if ((SHIBYTE(v431) & 0x80000000) == 0)
    {
LABEL_16:
      if ((v429 & 0x80000000) == 0)
        goto LABEL_17;
LABEL_688:
      operator delete(v428[0]);
      v354 = a3;
      if ((SHIBYTE(v427.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_18;
LABEL_689:
      operator delete(v427.__r_.__value_.__l.__data_);
      goto LABEL_18;
    }
  }
  else if ((SHIBYTE(v431) & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(v430);
  if (v429 < 0)
    goto LABEL_688;
LABEL_17:
  v354 = a3;
  if (SHIBYTE(v427.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_689;
LABEL_18:
  v418[1] = 0;
  v418[0] = 0;
  v417 = v418;
  v17 = *a2;
  v355 = a2[1];
  if (*a2 == v355)
    goto LABEL_659;
  while (2)
  {
    v356 = v17;
    MIL::Builder::ProgramBuilder::GetFunction();
    MIL::Builder::FunctionBuilder::GetBlock();
    v412 = 0;
    v413 = 0;
    v411 = &v412;
    MIL::Builder::BlockBuilder::GetOutputNames(v414);
    size = v427.__r_.__value_.__l.__size_;
    v18 = v427.__r_.__value_.__r.__words[0];
    if (v427.__r_.__value_.__r.__words[0] == v427.__r_.__value_.__l.__size_)
    {
      if (v427.__r_.__value_.__r.__words[0])
        goto LABEL_92;
      goto LABEL_99;
    }
    do
    {
      if (*(char *)(v18 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)v18, *(_QWORD *)(v18 + 8));
      }
      else
      {
        v20 = *(_OWORD *)v18;
        v400[0] = *(void **)(v18 + 16);
        *(_OWORD *)__p = v20;
      }
      v21 = v412;
      v22 = &v412;
      v23 = &v412;
      if (v412)
      {
        v24 = HIBYTE(v400[0]);
        if (SHIBYTE(v400[0]) >= 0)
          v25 = (void *)HIBYTE(v400[0]);
        else
          v25 = __p[1];
        if (SHIBYTE(v400[0]) >= 0)
          v26 = __p;
        else
          v26 = (void **)__p[0];
        while (1)
        {
          while (1)
          {
            v22 = (char **)v21;
            v29 = (char *)*((_QWORD *)v21 + 4);
            v27 = v21 + 32;
            v28 = v29;
            v30 = v27[23];
            if (v30 >= 0)
              v31 = v27[23];
            else
              v31 = *((_QWORD *)v27 + 1);
            if (v30 >= 0)
              v32 = v27;
            else
              v32 = v28;
            if (v31 >= (unint64_t)v25)
              v33 = (size_t)v25;
            else
              v33 = v31;
            v34 = memcmp(v26, v32, v33);
            v35 = (unint64_t)v25 < v31;
            if (v34)
              v35 = v34 < 0;
            if (!v35)
              break;
            v21 = *v22;
            v23 = v22;
            if (!*v22)
              goto LABEL_54;
          }
          v36 = memcmp(v32, v26, v33);
          v37 = v31 < (unint64_t)v25;
          if (v36)
            v37 = v36 < 0;
          if (!v37)
            break;
          v21 = v22[1];
          if (!v21)
          {
            v23 = v22 + 1;
            goto LABEL_54;
          }
        }
        if (v24 < 0)
LABEL_24:
          operator delete(__p[0]);
      }
      else
      {
LABEL_54:
        v38 = (char *)operator new(0x38uLL);
        v39 = (std::string *)(v38 + 32);
        if (SHIBYTE(v400[0]) < 0)
        {
          std::string::__init_copy_ctor_external(v39, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          *(_OWORD *)&v39->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
          *((void **)v38 + 6) = v400[0];
        }
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
        *((_QWORD *)v38 + 2) = v22;
        *v23 = v38;
        if (*v411)
        {
          v411 = (char **)*v411;
          v38 = *v23;
        }
        v40 = v412;
        v65 = v38 == v412;
        v38[24] = v38 == v412;
        if (!v65)
        {
          do
          {
            v41 = *((_QWORD *)v38 + 2);
            if (*(_BYTE *)(v41 + 24))
              break;
            v42 = *(char **)(v41 + 16);
            v43 = *(_QWORD *)v42;
            if (*(_QWORD *)v42 == v41)
            {
              v46 = *((_QWORD *)v42 + 1);
              if (!v46 || (v47 = *(unsigned __int8 *)(v46 + 24), v44 = (_BYTE *)(v46 + 24), v47))
              {
                if (*(char **)v41 == v38)
                {
                  *(_BYTE *)(v41 + 24) = 1;
                  v42[24] = 0;
                  v50 = *(_QWORD *)(v41 + 8);
                  *(_QWORD *)v42 = v50;
                  if (v50)
                    goto LABEL_74;
                }
                else
                {
                  v48 = *(uint64_t **)(v41 + 8);
                  v49 = *v48;
                  *(_QWORD *)(v41 + 8) = *v48;
                  if (v49)
                  {
                    *(_QWORD *)(v49 + 16) = v41;
                    v42 = *(char **)(v41 + 16);
                  }
                  v48[2] = (uint64_t)v42;
                  *(_QWORD *)(*(_QWORD *)(v41 + 16) + 8 * (**(_QWORD **)(v41 + 16) != v41)) = v48;
                  *v48 = v41;
                  *(_QWORD *)(v41 + 16) = v48;
                  v42 = (char *)v48[2];
                  v41 = *(_QWORD *)v42;
                  *((_BYTE *)v48 + 24) = 1;
                  v42[24] = 0;
                  v50 = *(_QWORD *)(v41 + 8);
                  *(_QWORD *)v42 = v50;
                  if (v50)
LABEL_74:
                    *(_QWORD *)(v50 + 16) = v42;
                }
                *(_QWORD *)(v41 + 16) = *((_QWORD *)v42 + 2);
                *(_QWORD *)(*((_QWORD *)v42 + 2) + 8 * (**((_QWORD **)v42 + 2) != (_QWORD)v42)) = v41;
                *(_QWORD *)(v41 + 8) = v42;
LABEL_82:
                *((_QWORD *)v42 + 2) = v41;
                break;
              }
            }
            else if (!v43 || (v45 = *(unsigned __int8 *)(v43 + 24), v44 = (_BYTE *)(v43 + 24), v45))
            {
              if (*(char **)v41 == v38)
              {
                v52 = *((_QWORD *)v38 + 1);
                *(_QWORD *)v41 = v52;
                if (v52)
                {
                  *(_QWORD *)(v52 + 16) = v41;
                  v42 = *(char **)(v41 + 16);
                }
                *((_QWORD *)v38 + 2) = v42;
                *(_QWORD *)(*(_QWORD *)(v41 + 16) + 8 * (**(_QWORD **)(v41 + 16) != v41)) = v38;
                *((_QWORD *)v38 + 1) = v41;
                *(_QWORD *)(v41 + 16) = v38;
                v42 = (char *)*((_QWORD *)v38 + 2);
                v38[24] = 1;
                v42[24] = 0;
                v41 = *((_QWORD *)v42 + 1);
                v51 = *(char **)v41;
                *((_QWORD *)v42 + 1) = *(_QWORD *)v41;
                if (v51)
LABEL_80:
                  *((_QWORD *)v51 + 2) = v42;
              }
              else
              {
                *(_BYTE *)(v41 + 24) = 1;
                v42[24] = 0;
                v41 = *((_QWORD *)v42 + 1);
                v51 = *(char **)v41;
                *((_QWORD *)v42 + 1) = *(_QWORD *)v41;
                if (v51)
                  goto LABEL_80;
              }
              *(_QWORD *)(v41 + 16) = *((_QWORD *)v42 + 2);
              *(_QWORD *)(*((_QWORD *)v42 + 2) + 8 * (**((_QWORD **)v42 + 2) != (_QWORD)v42)) = v41;
              *(_QWORD *)v41 = v42;
              goto LABEL_82;
            }
            *(_BYTE *)(v41 + 24) = 1;
            v38 = v42;
            v42[24] = v42 == v40;
            *v44 = 1;
          }
          while (v42 != v40);
        }
        ++v413;
        if ((HIBYTE(v400[0]) & 0x80) != 0)
          goto LABEL_24;
      }
      v18 += 24;
    }
    while (v18 != size);
    v18 = v427.__r_.__value_.__r.__words[0];
    if (v427.__r_.__value_.__r.__words[0])
    {
LABEL_92:
      v53 = v427.__r_.__value_.__l.__size_;
      v54 = (void *)v18;
      if (v427.__r_.__value_.__l.__size_ != v18)
      {
        do
        {
          if (*(char *)(v53 - 1) < 0)
            operator delete(*(void **)(v53 - 24));
          v53 -= 24;
        }
        while (v53 != v18);
        v54 = (void *)v427.__r_.__value_.__r.__words[0];
      }
      v427.__r_.__value_.__l.__size_ = v18;
      operator delete(v54);
    }
LABEL_99:
    MIL::Builder::BlockBuilder::GetOperations(v414);
    v55 = (MIL::Builder::OperationBuilder **)v409;
    v56 = v410;
    v357 = v410;
    if (v409 == v410)
    {
      if (v409)
        goto LABEL_101;
LABEL_644:
      std::__tree<std::string>::destroy((uint64_t)&v411, v412);
      v338 = v415;
      if (!v415)
        goto LABEL_651;
LABEL_648:
      v339 = (unint64_t *)&v338->__shared_owners_;
      do
        v340 = __ldaxr(v339);
      while (__stlxr(v340 - 1, v339));
      if (v340)
        goto LABEL_651;
      ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
      std::__shared_weak_count::__release_weak(v338);
      v341 = (std::__shared_weak_count *)v416[1];
      if (!v416[1])
        goto LABEL_20;
LABEL_652:
      v342 = (unint64_t *)&v341->__shared_owners_;
      do
        v343 = __ldaxr(v342);
      while (__stlxr(v343 - 1, v342));
      if (!v343)
      {
        ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
        std::__shared_weak_count::__release_weak(v341);
      }
      goto LABEL_20;
    }
    while (2)
    {
      Operator = MIL::Builder::OperationBuilder::GetOperator(*v55);
      v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Operator + 16))(Operator);
      v64 = *(char *)(v63 + 23);
      if (v64 < 0)
      {
        if (*(_QWORD *)(v63 + 8) == 15)
        {
          v63 = *(_QWORD *)v63;
          goto LABEL_117;
        }
        goto LABEL_111;
      }
      if (v64 != 15)
        goto LABEL_111;
LABEL_117:
      v65 = *(_QWORD *)v63 == 0x736F695F4C4D3545 && *(_QWORD *)(v63 + 7) == 0x6C6C61632E363173;
      if (v65)
      {
        *((_BYTE *)&v427.__r_.__value_.__s + 23) = 8;
        strcpy((char *)&v427, "function");
        MIL::Builder::OperationBuilder::TryGetAttribute();
        MIL::IRValue::AsTensor((MIL::IRValue *)__p[0]);
        v66 = MIL::IRTensorValue::GetDataView<std::string>();
        if (*(char *)(v66 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v408, *(const std::string::value_type **)v66, *(_QWORD *)(v66 + 8));
        }
        else
        {
          v67 = *(_OWORD *)v66;
          v408.__r_.__value_.__r.__words[2] = *(_QWORD *)(v66 + 16);
          *(_OWORD *)&v408.__r_.__value_.__l.__data_ = v67;
        }
        v68 = (std::__shared_weak_count *)__p[1];
        if (!__p[1])
          goto LABEL_129;
        v69 = (unint64_t *)((char *)__p[1] + 8);
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
          if (SHIBYTE(v427.__r_.__value_.__r.__words[2]) < 0)
LABEL_130:
            operator delete(v427.__r_.__value_.__l.__data_);
        }
        else
        {
LABEL_129:
          if (SHIBYTE(v427.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_130;
        }
        MIL::Builder::ProgramBuilder::GetFunction();
        v71 = *(_OWORD *)&v427.__r_.__value_.__l.__data_;
        *(_OWORD *)&v427.__r_.__value_.__l.__data_ = 0uLL;
        v72 = (std::__shared_weak_count *)v416[1];
        *(_OWORD *)v416 = v71;
        if (!v72)
          goto LABEL_135;
        v73 = (unint64_t *)&v72->__shared_owners_;
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
          v75 = (std::__shared_weak_count *)v427.__r_.__value_.__l.__size_;
          if (v427.__r_.__value_.__l.__size_)
          {
LABEL_136:
            v76 = (unint64_t *)&v75->__shared_owners_;
            do
              v77 = __ldaxr(v76);
            while (__stlxr(v77 - 1, v76));
            if (!v77)
            {
              ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
              std::__shared_weak_count::__release_weak(v75);
            }
          }
        }
        else
        {
LABEL_135:
          v75 = (std::__shared_weak_count *)v427.__r_.__value_.__l.__size_;
          if (v427.__r_.__value_.__l.__size_)
            goto LABEL_136;
        }
        MIL::Builder::FunctionBuilder::SelectedSpecialization(v416[0]);
        MIL::Builder::FunctionBuilder::GetBlock();
        v360 = v55;
        MIL::Builder::BlockBuilder::GetOperations(v406);
        v78 = (MIL::Builder::OperationBuilder **)__p[0];
        v79 = (MIL::Builder::OperationBuilder **)__p[1];
        v80 = 1;
        if (__p[0] == __p[1])
          goto LABEL_170;
        while (2)
        {
          v82 = *v78;
          v81 = (std::__shared_weak_count *)v78[1];
          if (v81)
          {
            v83 = (unint64_t *)&v81->__shared_owners_;
            do
              v84 = __ldxr(v83);
            while (__stxr(v84 + 1, v83));
          }
          v85 = MIL::Builder::OperationBuilder::GetOperator(v82);
          v86 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v85 + 16))(v85);
          Espresso::AOT::GetOperatorType(v86, &v405);
          v87 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v419, (uint64_t)&v405);
          if (v87)
          {
            MIL::Builder::OperationBuilder::GetInputArguments(v82);
            v88 = (uint64_t **)v427.__r_.__value_.__r.__words[2];
            if (v427.__r_.__value_.__r.__words[2])
            {
              while (1)
              {
                Value = (MIL::IRValue *)MIL::Builder::Variable::TryGetValue((MIL::Builder::Variable *)v88[2]);
                if (Value)
                {
                  v90 = MIL::IRValue::AsTensor(Value);
                  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v90 + 80))(v90) & 1) != 0)
                    break;
                }
                v88 = (uint64_t **)*v88;
                if (!v88)
                  goto LABEL_154;
              }
              v80 = 0;
LABEL_154:
              v91 = (_QWORD *)v427.__r_.__value_.__r.__words[2];
              if (v427.__r_.__value_.__r.__words[2])
              {
                do
                {
                  v92 = (_QWORD *)*v91;
                  operator delete(v91);
                  v91 = v92;
                }
                while (v92);
              }
            }
            v93 = (void *)v427.__r_.__value_.__r.__words[0];
            v427.__r_.__value_.__r.__words[0] = 0;
            if (v93)
              operator delete(v93);
            if ((SHIBYTE(v405.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_159:
              if (!v81)
                goto LABEL_167;
LABEL_163:
              v94 = (unint64_t *)&v81->__shared_owners_;
              do
                v95 = __ldaxr(v94);
              while (__stlxr(v95 - 1, v94));
              if (!v95)
              {
                ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                std::__shared_weak_count::__release_weak(v81);
              }
LABEL_167:
              if (v87)
              {
                v78 += 2;
                if (v78 != v79)
                  continue;
              }
              v78 = (MIL::Builder::OperationBuilder **)__p[0];
LABEL_170:
              if (v78)
              {
                v96 = (MIL::Builder::OperationBuilder **)__p[1];
                v97 = v78;
                if (__p[1] != v78)
                {
                  do
                  {
                    v98 = (std::__shared_weak_count *)*(v96 - 1);
                    if (v98)
                    {
                      v99 = (unint64_t *)&v98->__shared_owners_;
                      do
                        v100 = __ldaxr(v99);
                      while (__stlxr(v100 - 1, v99));
                      if (!v100)
                      {
                        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                        std::__shared_weak_count::__release_weak(v98);
                      }
                    }
                    v96 -= 2;
                  }
                  while (v96 != v78);
                  v97 = (MIL::Builder::OperationBuilder **)__p[0];
                }
                __p[1] = v78;
                operator delete(v97);
              }
              if ((v80 & 1) == 0)
              {
LABEL_638:
                v335 = v407;
                v55 = v360;
                v56 = v357;
                if (v407)
                {
                  v336 = (unint64_t *)&v407->__shared_owners_;
                  do
                    v337 = __ldaxr(v336);
                  while (__stlxr(v337 - 1, v336));
                  if (!v337)
                  {
                    ((void (*)(std::__shared_weak_count *))v335->__on_zero_shared)(v335);
                    std::__shared_weak_count::__release_weak(v335);
                  }
                }
                if (SHIBYTE(v408.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v408.__r_.__value_.__l.__data_);
                goto LABEL_111;
              }
              v101 = 0;
              *(_OWORD *)&v405.__r_.__value_.__r.__words[1] = 0uLL;
              v405.__r_.__value_.__r.__words[0] = (std::string::size_type)&v405.__r_.__value_.__l.__size_;
              while (1)
              {
                MIL::Builder::BlockBuilder::GetOutputs(v406);
                v103 = *(_OWORD *)&v427.__r_.__value_.__l.__data_;
                if (v427.__r_.__value_.__r.__words[0])
                {
                  v427.__r_.__value_.__l.__size_ = v427.__r_.__value_.__r.__words[0];
                  operator delete((void *)v103);
                }
                if ((uint64_t)(*((_QWORD *)&v103 + 1) - v103) >> 3 <= v101)
                  break;
                MIL::Builder::BlockBuilder::GetOutputs(v406);
                Name = MIL::Builder::Variable::GetName(*(MIL::Builder::Variable **)(v427.__r_.__value_.__r.__words[0]
                                                                                  + 8 * v101));
                v105 = Name;
                v106 = v405.__r_.__value_.__l.__size_;
                p_size = &v405.__r_.__value_.__l.__size_;
                v108 = &v405.__r_.__value_.__l.__size_;
                if (v405.__r_.__value_.__l.__size_)
                {
                  v109 = *(char *)(Name + 23);
                  if (v109 >= 0)
                    v110 = *(unsigned __int8 *)(Name + 23);
                  else
                    v110 = *(_QWORD *)(Name + 8);
                  if (v109 >= 0)
                    v111 = (const void *)Name;
                  else
                    v111 = *(const void **)Name;
                  while (1)
                  {
                    while (1)
                    {
                      p_size = (std::string::size_type *)v106;
                      v114 = *(const void **)(v106 + 32);
                      v112 = v106 + 32;
                      v113 = v114;
                      v115 = *(char *)(v112 + 23);
                      if (v115 >= 0)
                        v116 = *(unsigned __int8 *)(v112 + 23);
                      else
                        v116 = *(_QWORD *)(v112 + 8);
                      if (v115 >= 0)
                        v117 = (const void *)v112;
                      else
                        v117 = v113;
                      if (v116 >= v110)
                        v118 = v110;
                      else
                        v118 = v116;
                      v119 = memcmp(v111, v117, v118);
                      v120 = v110 < v116;
                      if (v119)
                        v120 = v119 < 0;
                      if (!v120)
                        break;
                      v106 = *p_size;
                      v108 = p_size;
                      if (!*p_size)
                        goto LABEL_214;
                    }
                    v121 = memcmp(v117, v111, v118);
                    v122 = v116 < v110;
                    if (v121)
                      v122 = v121 < 0;
                    if (!v122)
                      break;
                    v106 = p_size[1];
                    if (!v106)
                    {
                      v108 = p_size + 1;
                      goto LABEL_214;
                    }
                  }
                  *((_DWORD *)p_size + 14) = v101;
                  v102 = (void *)v427.__r_.__value_.__r.__words[0];
                  if (!v427.__r_.__value_.__r.__words[0])
                    goto LABEL_185;
LABEL_184:
                  v427.__r_.__value_.__l.__size_ = (std::string::size_type)v102;
                  operator delete(v102);
                  goto LABEL_185;
                }
LABEL_214:
                v123 = (char *)operator new(0x40uLL);
                v124 = (std::string *)(v123 + 32);
                if (*(char *)(v105 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(v124, *(const std::string::value_type **)v105, *(_QWORD *)(v105 + 8));
                }
                else
                {
                  v125 = *(_OWORD *)v105;
                  *((_QWORD *)v123 + 6) = *(_QWORD *)(v105 + 16);
                  *(_OWORD *)&v124->__r_.__value_.__l.__data_ = v125;
                }
                *((_DWORD *)v123 + 14) = 0;
                *(_QWORD *)v123 = 0;
                *((_QWORD *)v123 + 1) = 0;
                *((_QWORD *)v123 + 2) = p_size;
                *v108 = (std::string::size_type)v123;
                v126 = v123;
                if (*(_QWORD *)v405.__r_.__value_.__l.__data_)
                {
                  v405.__r_.__value_.__r.__words[0] = *(_QWORD *)v405.__r_.__value_.__l.__data_;
                  v126 = (char *)*v108;
                }
                v127 = v405.__r_.__value_.__l.__size_;
                v65 = v126 == (char *)v405.__r_.__value_.__l.__size_;
                v126[24] = v126 == (char *)v405.__r_.__value_.__l.__size_;
                if (!v65)
                {
                  do
                  {
                    v128 = *((_QWORD *)v126 + 2);
                    if (*(_BYTE *)(v128 + 24))
                      break;
                    v129 = *(char **)(v128 + 16);
                    v130 = *(_QWORD *)v129;
                    if (*(_QWORD *)v129 == v128)
                    {
                      v133 = *((_QWORD *)v129 + 1);
                      if (!v133 || (v134 = *(unsigned __int8 *)(v133 + 24), v131 = (_BYTE *)(v133 + 24), v134))
                      {
                        if (*(char **)v128 == v126)
                        {
                          *(_BYTE *)(v128 + 24) = 1;
                          v129[24] = 0;
                          v137 = *(_QWORD *)(v128 + 8);
                          *(_QWORD *)v129 = v137;
                          if (v137)
                            goto LABEL_234;
                        }
                        else
                        {
                          v135 = *(uint64_t **)(v128 + 8);
                          v136 = *v135;
                          *(_QWORD *)(v128 + 8) = *v135;
                          if (v136)
                          {
                            *(_QWORD *)(v136 + 16) = v128;
                            v129 = *(char **)(v128 + 16);
                          }
                          v135[2] = (uint64_t)v129;
                          *(_QWORD *)(*(_QWORD *)(v128 + 16) + 8 * (**(_QWORD **)(v128 + 16) != v128)) = v135;
                          *v135 = v128;
                          *(_QWORD *)(v128 + 16) = v135;
                          v129 = (char *)v135[2];
                          v128 = *(_QWORD *)v129;
                          *((_BYTE *)v135 + 24) = 1;
                          v129[24] = 0;
                          v137 = *(_QWORD *)(v128 + 8);
                          *(_QWORD *)v129 = v137;
                          if (v137)
LABEL_234:
                            *(_QWORD *)(v137 + 16) = v129;
                        }
                        *(_QWORD *)(v128 + 16) = *((_QWORD *)v129 + 2);
                        *(_QWORD *)(*((_QWORD *)v129 + 2) + 8 * (**((_QWORD **)v129 + 2) != (_QWORD)v129)) = v128;
                        *(_QWORD *)(v128 + 8) = v129;
LABEL_244:
                        *((_QWORD *)v129 + 2) = v128;
                        break;
                      }
                    }
                    else if (!v130 || (v132 = *(unsigned __int8 *)(v130 + 24), v131 = (_BYTE *)(v130 + 24), v132))
                    {
                      if (*(char **)v128 == v126)
                      {
                        v138 = *((_QWORD *)v126 + 1);
                        *(_QWORD *)v128 = v138;
                        if (v138)
                        {
                          *(_QWORD *)(v138 + 16) = v128;
                          v129 = *(char **)(v128 + 16);
                        }
                        *((_QWORD *)v126 + 2) = v129;
                        *(_QWORD *)(*(_QWORD *)(v128 + 16) + 8 * (**(_QWORD **)(v128 + 16) != v128)) = v126;
                        *((_QWORD *)v126 + 1) = v128;
                        *(_QWORD *)(v128 + 16) = v126;
                        v129 = (char *)*((_QWORD *)v126 + 2);
                      }
                      else
                      {
                        v126 = (char *)*((_QWORD *)v126 + 2);
                      }
                      v126[24] = 1;
                      v129[24] = 0;
                      v128 = *((_QWORD *)v129 + 1);
                      v139 = *(char **)v128;
                      *((_QWORD *)v129 + 1) = *(_QWORD *)v128;
                      if (v139)
                        *((_QWORD *)v139 + 2) = v129;
                      *(_QWORD *)(v128 + 16) = *((_QWORD *)v129 + 2);
                      *(_QWORD *)(*((_QWORD *)v129 + 2) + 8 * (**((_QWORD **)v129 + 2) != (_QWORD)v129)) = v128;
                      *(_QWORD *)v128 = v129;
                      goto LABEL_244;
                    }
                    *(_BYTE *)(v128 + 24) = 1;
                    v126 = v129;
                    v129[24] = v129 == (char *)v127;
                    *v131 = 1;
                  }
                  while (v129 != (char *)v127);
                }
                ++v405.__r_.__value_.__r.__words[2];
                *((_DWORD *)v123 + 14) = v101;
                v102 = (void *)v427.__r_.__value_.__r.__words[0];
                if (v427.__r_.__value_.__r.__words[0])
                  goto LABEL_184;
LABEL_185:
                ++v101;
              }
              v403 = 0;
              v404 = 0;
              v402 = &v403;
              MIL::Builder::FunctionBuilder::GetInputs(v416[0]);
              v140 = v427.__r_.__value_.__r.__words[2];
              if (!v427.__r_.__value_.__r.__words[2])
              {
                v362 = 1;
                v246 = (void *)v427.__r_.__value_.__r.__words[0];
                v427.__r_.__value_.__r.__words[0] = 0;
                if (!v246)
                  goto LABEL_449;
                goto LABEL_448;
              }
              v362 = 1;
LABEL_252:
              v141 = 0;
              v359 = (std::string::size_type *)v140;
              v142 = *(MIL::Builder::Variable **)(v140 + 16);
              v361 = v142;
LABEL_253:
              MIL::Builder::Variable::GetName(v142);
              OperationsByInput = MIL::Builder::BlockBuilder::GetOperationsByInput();
              v144 = OperationsByInput;
              *(_OWORD *)__p = 0u;
              *(_OWORD *)v400 = 0u;
              v401 = *(float *)(OperationsByInput + 32);
              prime = *(_QWORD *)(OperationsByInput + 8);
              if (prime == 1)
              {
                prime = 2;
LABEL_271:
                v151 = operator new(8 * prime);
                v152 = __p[0];
                __p[0] = v151;
                if (v152)
                  operator delete(v152);
                v153 = 0;
                __p[1] = (void *)prime;
                do
                  *((_QWORD *)__p[0] + v153++) = 0;
                while (prime != v153);
                v154 = (_QWORD **)v400[0];
                if (!v400[0])
                  goto LABEL_295;
                v155 = *((_QWORD *)v400[0] + 1);
                v156 = prime - 1;
                if ((prime & (prime - 1)) == 0)
                {
                  v157 = v155 & v156;
                  *((_QWORD *)__p[0] + v157) = v400;
                  while (1)
                  {
                    v158 = *v154;
                    if (!*v154)
                      break;
                    v159 = v158[1] & v156;
                    if (v159 == v157)
                    {
                      v154 = (_QWORD **)*v154;
                    }
                    else if (*((_QWORD *)__p[0] + v159))
                    {
                      *v154 = (_QWORD *)*v158;
                      v160 = 8 * v159;
                      *v158 = **(_QWORD **)((char *)__p[0] + v160);
                      **(_QWORD **)((char *)__p[0] + v160) = v158;
                    }
                    else
                    {
                      *((_QWORD *)__p[0] + v159) = v154;
                      v154 = (_QWORD **)v158;
                      v157 = v159;
                    }
                  }
                  goto LABEL_295;
                }
                if (v155 >= prime)
                  v155 %= prime;
                *((_QWORD *)__p[0] + v155) = v400;
                v161 = *v154;
                if (!*v154)
                {
LABEL_295:
                  v164 = *(_QWORD **)(v144 + 16);
                  if (!v164)
                  {
LABEL_297:
                    v165 = MIL::Builder::Variable::GetName(v142);
                    v166 = v405.__r_.__value_.__l.__size_;
                    if (!v405.__r_.__value_.__l.__size_)
                      goto LABEL_409;
                    v167 = *(char *)(v165 + 23);
                    if (v167 >= 0)
                      v168 = *(unsigned __int8 *)(v165 + 23);
                    else
                      v168 = *(_QWORD *)(v165 + 8);
                    if (v167 >= 0)
                      v169 = (const void *)v165;
                    else
                      v169 = *(const void **)v165;
                    while (1)
                    {
                      v170 = *(char *)(v166 + 55);
                      if (v170 >= 0)
                        v171 = *(unsigned __int8 *)(v166 + 55);
                      else
                        v171 = *(_QWORD *)(v166 + 40);
                      if (v170 >= 0)
                        v172 = (const void *)(v166 + 32);
                      else
                        v172 = *(const void **)(v166 + 32);
                      if (v171 >= v168)
                        v173 = v168;
                      else
                        v173 = v171;
                      v174 = memcmp(v169, v172, v173);
                      v175 = v168 < v171;
                      if (v174)
                        v175 = v174 < 0;
                      if (!v175)
                      {
                        v176 = memcmp(v172, v169, v173);
                        v177 = v171 < v168;
                        if (v176)
                          v177 = v176 < 0;
                        if (!v177)
                        {
                          v178 = (const std::string *)MIL::Builder::Variable::GetName(v361);
                          v179 = MIL::Builder::Variable::GetName(v142);
                          v180 = v179;
                          v181 = v405.__r_.__value_.__l.__size_;
                          v182 = &v405.__r_.__value_.__l.__size_;
                          v183 = &v405.__r_.__value_.__l.__size_;
                          if (v405.__r_.__value_.__l.__size_)
                          {
                            v184 = *(char *)(v179 + 23);
                            if (v184 >= 0)
                              v185 = *(unsigned __int8 *)(v179 + 23);
                            else
                              v185 = *(_QWORD *)(v179 + 8);
                            if (v184 >= 0)
                              v186 = (const void *)v179;
                            else
                              v186 = *(const void **)v179;
                            while (1)
                            {
                              while (1)
                              {
                                v182 = (std::string::size_type *)v181;
                                v189 = *(const void **)(v181 + 32);
                                v187 = v181 + 32;
                                v188 = v189;
                                v190 = *(char *)(v187 + 23);
                                if (v190 >= 0)
                                  v191 = *(unsigned __int8 *)(v187 + 23);
                                else
                                  v191 = *(_QWORD *)(v187 + 8);
                                if (v190 >= 0)
                                  v192 = (const void *)v187;
                                else
                                  v192 = v188;
                                if (v191 >= v185)
                                  v193 = v185;
                                else
                                  v193 = v191;
                                v194 = memcmp(v186, v192, v193);
                                v195 = v185 < v191;
                                if (v194)
                                  v195 = v194 < 0;
                                if (!v195)
                                  break;
                                v181 = *v182;
                                v183 = v182;
                                if (!*v182)
                                  goto LABEL_346;
                              }
                              v196 = memcmp(v192, v186, v193);
                              v197 = v191 < v185;
                              if (v196)
                                v197 = v196 < 0;
                              if (!v197)
                                break;
                              v181 = v182[1];
                              if (!v181)
                              {
                                v183 = v182 + 1;
                                goto LABEL_346;
                              }
                            }
                            v212 = *((_DWORD *)v182 + 14);
                          }
                          else
                          {
LABEL_346:
                            v198 = (char *)operator new(0x40uLL);
                            v199 = (std::string *)(v198 + 32);
                            if (*(char *)(v180 + 23) < 0)
                            {
                              std::string::__init_copy_ctor_external(v199, *(const std::string::value_type **)v180, *(_QWORD *)(v180 + 8));
                            }
                            else
                            {
                              v200 = *(_OWORD *)v180;
                              *((_QWORD *)v198 + 6) = *(_QWORD *)(v180 + 16);
                              *(_OWORD *)&v199->__r_.__value_.__l.__data_ = v200;
                            }
                            *((_DWORD *)v198 + 14) = 0;
                            *(_QWORD *)v198 = 0;
                            *((_QWORD *)v198 + 1) = 0;
                            *((_QWORD *)v198 + 2) = v182;
                            *v183 = (std::string::size_type)v198;
                            if (*(_QWORD *)v405.__r_.__value_.__l.__data_)
                            {
                              v405.__r_.__value_.__r.__words[0] = *(_QWORD *)v405.__r_.__value_.__l.__data_;
                              v198 = (char *)*v183;
                            }
                            v201 = v405.__r_.__value_.__l.__size_;
                            v65 = v198 == (char *)v405.__r_.__value_.__l.__size_;
                            v198[24] = v198 == (char *)v405.__r_.__value_.__l.__size_;
                            if (!v65)
                            {
                              do
                              {
                                v202 = *((_QWORD *)v198 + 2);
                                if (*(_BYTE *)(v202 + 24))
                                  break;
                                v203 = *(_BYTE **)(v202 + 16);
                                v204 = *(_QWORD *)v203;
                                if (*(_QWORD *)v203 == v202)
                                {
                                  v207 = *((_QWORD *)v203 + 1);
                                  if (!v207
                                    || (v208 = *(unsigned __int8 *)(v207 + 24), v205 = (_BYTE *)(v207 + 24), v208))
                                  {
                                    if (*(char **)v202 == v198)
                                    {
                                      *(_BYTE *)(v202 + 24) = 1;
                                      v203[24] = 0;
                                      v211 = *(_QWORD *)(v202 + 8);
                                      *(_QWORD *)v203 = v211;
                                      if (v211)
                                        goto LABEL_366;
                                    }
                                    else
                                    {
                                      v209 = *(uint64_t **)(v202 + 8);
                                      v210 = *v209;
                                      *(_QWORD *)(v202 + 8) = *v209;
                                      if (v210)
                                      {
                                        *(_QWORD *)(v210 + 16) = v202;
                                        v203 = *(_BYTE **)(v202 + 16);
                                      }
                                      v209[2] = (uint64_t)v203;
                                      *(_QWORD *)(*(_QWORD *)(v202 + 16) + 8 * (**(_QWORD **)(v202 + 16) != v202)) = v209;
                                      *v209 = v202;
                                      *(_QWORD *)(v202 + 16) = v209;
                                      v203 = (_BYTE *)v209[2];
                                      v202 = *(_QWORD *)v203;
                                      *((_BYTE *)v209 + 24) = 1;
                                      v203[24] = 0;
                                      v211 = *(_QWORD *)(v202 + 8);
                                      *(_QWORD *)v203 = v211;
                                      if (v211)
LABEL_366:
                                        *(_QWORD *)(v211 + 16) = v203;
                                    }
                                    *(_QWORD *)(v202 + 16) = *((_QWORD *)v203 + 2);
                                    *(_QWORD *)(*((_QWORD *)v203 + 2) + 8 * (**((_QWORD **)v203 + 2) != (_QWORD)v203)) = v202;
                                    *(_QWORD *)(v202 + 8) = v203;
LABEL_373:
                                    *((_QWORD *)v203 + 2) = v202;
                                    break;
                                  }
                                }
                                else if (!v204
                                       || (v206 = *(unsigned __int8 *)(v204 + 24), v205 = (_BYTE *)(v204 + 24), v206))
                                {
                                  if (*(char **)v202 == v198)
                                  {
                                    v242 = *((_QWORD *)v198 + 1);
                                    *(_QWORD *)v202 = v242;
                                    if (v242)
                                    {
                                      *(_QWORD *)(v242 + 16) = v202;
                                      v203 = *(_BYTE **)(v202 + 16);
                                    }
                                    *((_QWORD *)v198 + 2) = v203;
                                    *(_QWORD *)(*(_QWORD *)(v202 + 16) + 8 * (**(_QWORD **)(v202 + 16) != v202)) = v198;
                                    *((_QWORD *)v198 + 1) = v202;
                                    *(_QWORD *)(v202 + 16) = v198;
                                    v203 = (_BYTE *)*((_QWORD *)v198 + 2);
                                    v198[24] = 1;
                                    v203[24] = 0;
                                    v202 = *((_QWORD *)v203 + 1);
                                    v213 = *(char **)v202;
                                    *((_QWORD *)v203 + 1) = *(_QWORD *)v202;
                                    if (v213)
LABEL_371:
                                      *((_QWORD *)v213 + 2) = v203;
                                  }
                                  else
                                  {
                                    *(_BYTE *)(v202 + 24) = 1;
                                    v203[24] = 0;
                                    v202 = *((_QWORD *)v203 + 1);
                                    v213 = *(char **)v202;
                                    *((_QWORD *)v203 + 1) = *(_QWORD *)v202;
                                    if (v213)
                                      goto LABEL_371;
                                  }
                                  *(_QWORD *)(v202 + 16) = *((_QWORD *)v203 + 2);
                                  *(_QWORD *)(*((_QWORD *)v203 + 2) + 8 * (**((_QWORD **)v203 + 2) != (_QWORD)v203)) = v202;
                                  *(_QWORD *)v202 = v203;
                                  goto LABEL_373;
                                }
                                *(_BYTE *)(v202 + 24) = 1;
                                v198 = v203;
                                v203[24] = v203 == (_BYTE *)v201;
                                *v205 = 1;
                              }
                              while (v203 != (_BYTE *)v201);
                            }
                            v212 = 0;
                            ++v405.__r_.__value_.__r.__words[2];
                          }
                          v214 = v403;
                          v215 = &v403;
LABEL_377:
                          v216 = v215;
                          if (v214)
                          {
                            while (1)
                            {
                              v215 = (char **)v214;
                              v217 = *((_DWORD *)v214 + 8);
                              if (v212 < v217)
                              {
                                v214 = *v215;
                                goto LABEL_377;
                              }
                              if (v217 >= v212)
                                break;
                              v214 = v215[1];
                              if (!v214)
                              {
                                v216 = v215 + 1;
                                goto LABEL_382;
                              }
                            }
                            v218 = (char *)v215;
                          }
                          else
                          {
LABEL_382:
                            v218 = (char *)operator new(0x40uLL);
                            *((_DWORD *)v218 + 8) = v212;
                            *((_QWORD *)v218 + 6) = 0;
                            *((_QWORD *)v218 + 7) = 0;
                            *((_QWORD *)v218 + 5) = 0;
                            *(_QWORD *)v218 = 0;
                            *((_QWORD *)v218 + 1) = 0;
                            *((_QWORD *)v218 + 2) = v215;
                            *v216 = v218;
                            v219 = v218;
                            if (*v402)
                            {
                              v402 = (char **)*v402;
                              v219 = *v216;
                            }
                            v220 = v403;
                            v65 = v219 == v403;
                            v219[24] = v219 == v403;
                            if (!v65)
                            {
                              do
                              {
                                v221 = *((_QWORD *)v219 + 2);
                                if (*(_BYTE *)(v221 + 24))
                                  break;
                                v222 = *(char **)(v221 + 16);
                                v223 = *(_QWORD *)v222;
                                if (*(_QWORD *)v222 == v221)
                                {
                                  v226 = *((_QWORD *)v222 + 1);
                                  if (!v226
                                    || (v227 = *(unsigned __int8 *)(v226 + 24), v224 = (_BYTE *)(v226 + 24), v227))
                                  {
                                    if (*(char **)v221 == v219)
                                    {
                                      *(_BYTE *)(v221 + 24) = 1;
                                      v222[24] = 0;
                                      v230 = *(_QWORD *)(v221 + 8);
                                      *(_QWORD *)v222 = v230;
                                      if (v230)
                                        goto LABEL_399;
                                    }
                                    else
                                    {
                                      v228 = *(uint64_t **)(v221 + 8);
                                      v229 = *v228;
                                      *(_QWORD *)(v221 + 8) = *v228;
                                      if (v229)
                                      {
                                        *(_QWORD *)(v229 + 16) = v221;
                                        v222 = *(char **)(v221 + 16);
                                      }
                                      v228[2] = (uint64_t)v222;
                                      *(_QWORD *)(*(_QWORD *)(v221 + 16) + 8 * (**(_QWORD **)(v221 + 16) != v221)) = v228;
                                      *v228 = v221;
                                      *(_QWORD *)(v221 + 16) = v228;
                                      v222 = (char *)v228[2];
                                      v221 = *(_QWORD *)v222;
                                      *((_BYTE *)v228 + 24) = 1;
                                      v222[24] = 0;
                                      v230 = *(_QWORD *)(v221 + 8);
                                      *(_QWORD *)v222 = v230;
                                      if (v230)
LABEL_399:
                                        *(_QWORD *)(v230 + 16) = v222;
                                    }
                                    *(_QWORD *)(v221 + 16) = *((_QWORD *)v222 + 2);
                                    *(_QWORD *)(*((_QWORD *)v222 + 2) + 8 * (**((_QWORD **)v222 + 2) != (_QWORD)v222)) = v221;
                                    *(_QWORD *)(v221 + 8) = v222;
LABEL_406:
                                    *((_QWORD *)v222 + 2) = v221;
                                    break;
                                  }
                                }
                                else if (!v223
                                       || (v225 = *(unsigned __int8 *)(v223 + 24), v224 = (_BYTE *)(v223 + 24), v225))
                                {
                                  if (*(char **)v221 == v219)
                                  {
                                    v243 = *((_QWORD *)v219 + 1);
                                    *(_QWORD *)v221 = v243;
                                    if (v243)
                                    {
                                      *(_QWORD *)(v243 + 16) = v221;
                                      v222 = *(char **)(v221 + 16);
                                    }
                                    *((_QWORD *)v219 + 2) = v222;
                                    *(_QWORD *)(*(_QWORD *)(v221 + 16) + 8 * (**(_QWORD **)(v221 + 16) != v221)) = v219;
                                    *((_QWORD *)v219 + 1) = v221;
                                    *(_QWORD *)(v221 + 16) = v219;
                                    v222 = (char *)*((_QWORD *)v219 + 2);
                                    v219[24] = 1;
                                    v222[24] = 0;
                                    v221 = *((_QWORD *)v222 + 1);
                                    v231 = *(char **)v221;
                                    *((_QWORD *)v222 + 1) = *(_QWORD *)v221;
                                    if (v231)
LABEL_404:
                                      *((_QWORD *)v231 + 2) = v222;
                                  }
                                  else
                                  {
                                    *(_BYTE *)(v221 + 24) = 1;
                                    v222[24] = 0;
                                    v221 = *((_QWORD *)v222 + 1);
                                    v231 = *(char **)v221;
                                    *((_QWORD *)v222 + 1) = *(_QWORD *)v221;
                                    if (v231)
                                      goto LABEL_404;
                                  }
                                  *(_QWORD *)(v221 + 16) = *((_QWORD *)v222 + 2);
                                  *(_QWORD *)(*((_QWORD *)v222 + 2) + 8 * (**((_QWORD **)v222 + 2) != (_QWORD)v222)) = v221;
                                  *(_QWORD *)v221 = v222;
                                  goto LABEL_406;
                                }
                                *(_BYTE *)(v221 + 24) = 1;
                                v219 = v222;
                                v222[24] = v222 == v220;
                                *v224 = 1;
                              }
                              while (v222 != v220);
                            }
                            ++v404;
                          }
                          std::string::operator=((std::string *)(v218 + 40), v178);
LABEL_409:
                          if (v400[1])
                          {
                            if (v400[1] == (void *)1)
                            {
                              MIL::Builder::OperationBuilder::GetOutputs(*((MIL::Builder::OperationBuilder **)v400[0] + 2));
                              v232 = v397;
                              v233 = v396;
                              if (v396)
                              {
                                v397 = (std::__shared_weak_count *)v396;
                                operator delete(v396);
                              }
                              if ((char *)v232 - v233 == 8)
                              {
                                MIL::Builder::OperationBuilder::GetOutputs(*((MIL::Builder::OperationBuilder **)v400[0]
                                                                           + 2));
                                v142 = *(MIL::Builder::Variable **)v396;
                                v397 = (std::__shared_weak_count *)v396;
                                operator delete(v396);
                                v234 = 1;
                                v235 = v400[0];
                                if (!v400[0])
                                  goto LABEL_418;
                                goto LABEL_424;
                              }
                            }
                            v362 = 0;
                          }
                          v234 = 0;
                          v235 = v400[0];
                          if (!v400[0])
                            goto LABEL_418;
                          do
                          {
LABEL_424:
                            v237 = v235;
                            v235 = (_QWORD *)*v235;
                            v238 = (std::__shared_weak_count *)v237[3];
                            if (v238)
                            {
                              v239 = (unint64_t *)&v238->__shared_owners_;
                              do
                                v240 = __ldaxr(v239);
                              while (__stlxr(v240 - 1, v239));
                              if (!v240)
                              {
                                ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
                                std::__shared_weak_count::__release_weak(v238);
                              }
                            }
                            operator delete(v237);
                          }
                          while (v235);
LABEL_418:
                          v236 = __p[0];
                          __p[0] = 0;
                          if (v236)
                            operator delete(v236);
                          if ((v234 & 1) != 0)
                          {
                            if (++v141 == 6)
                            {
                              v362 = 0;
                              goto LABEL_251;
                            }
                            goto LABEL_253;
                          }
LABEL_251:
                          v140 = *v359;
                          if (!*v359)
                          {
                            v244 = (_QWORD *)v427.__r_.__value_.__r.__words[2];
                            if (v427.__r_.__value_.__r.__words[2])
                            {
                              do
                              {
                                v245 = (_QWORD *)*v244;
                                operator delete(v244);
                                v244 = v245;
                              }
                              while (v245);
                            }
                            v246 = (void *)v427.__r_.__value_.__r.__words[0];
                            v427.__r_.__value_.__r.__words[0] = 0;
                            if (!v246)
                              goto LABEL_449;
LABEL_448:
                            operator delete(v246);
LABEL_449:
                            if ((v362 & 1) == 0)
                            {
LABEL_637:
                              std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy((uint64_t)&v402, v403);
                              std::__tree<std::string>::destroy((uint64_t)&v405, (char *)v405.__r_.__value_.__l.__size_);
                              goto LABEL_638;
                            }
                            MIL::Builder::BlockBuilder::GetOutputNames(v414);
                            v247 = v402;
                            if (v402 == &v403)
                            {
LABEL_451:
                              v248 = (std::__shared_weak_count *)v360[1];
                              v363 = v248;
                              if (v248)
                              {
                                v249 = (unint64_t *)&v248->__shared_owners_;
                                do
                                  v250 = __ldxr(v249);
                                while (__stxr(v250 + 1, v249));
                              }
                              MIL::Builder::BlockBuilder::RemoveOperation();
                              if (v363)
                              {
                                v251 = (unint64_t *)&v363->__shared_owners_;
                                do
                                  v252 = __ldaxr(v251);
                                while (__stlxr(v252 - 1, v251));
                                if (!v252)
                                {
                                  ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
                                  std::__shared_weak_count::__release_weak(v363);
                                }
                              }
                              MIL::Builder::BlockBuilder::GetOutputNames(v414);
                              v253 = (void **)__p[0];
                              v254 = (void **)__p[1];
                              if (__p[0] != __p[1])
                              {
                                do
                                {
                                  MIL::Builder::BlockBuilder::RemoveOutput();
                                  v253 += 3;
                                }
                                while (v253 != v254);
                                v253 = (void **)__p[0];
                              }
                              if (v253)
                              {
                                v255 = (void **)__p[1];
                                v256 = v253;
                                if (__p[1] != v253)
                                {
                                  do
                                  {
                                    if (*((char *)v255 - 1) < 0)
                                      operator delete(*(v255 - 3));
                                    v255 -= 3;
                                  }
                                  while (v255 != v253);
                                  v256 = (void **)__p[0];
                                }
                                __p[1] = v253;
                                operator delete(v256);
                              }
                              v330 = v427.__r_.__value_.__l.__size_;
                              for (i = v427.__r_.__value_.__r.__words[0]; i != v330; i += 24)
                                MIL::Builder::BlockBuilder::AddOutput();
                              std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v417, (const void **)&v408.__r_.__value_.__l.__data_, (uint64_t)&v408);
                              v332 = v427.__r_.__value_.__r.__words[0];
                              if (v427.__r_.__value_.__r.__words[0])
                              {
                                v333 = v427.__r_.__value_.__l.__size_;
                                v334 = (void *)v427.__r_.__value_.__r.__words[0];
                                if (v427.__r_.__value_.__l.__size_ != v427.__r_.__value_.__r.__words[0])
                                {
                                  do
                                  {
                                    if (*(char *)(v333 - 1) < 0)
                                      operator delete(*(void **)(v333 - 24));
                                    v333 -= 24;
                                  }
                                  while (v333 != v332);
                                  v334 = (void *)v427.__r_.__value_.__r.__words[0];
                                }
                                v427.__r_.__value_.__l.__size_ = v332;
                                operator delete(v334);
                              }
                              goto LABEL_637;
                            }
                            while (1)
                            {
                              (*(void (**)(void **__return_ptr))(*(_QWORD *)v358 + 48))(&v396);
                              MIL::MILContext::GetOpset();
                              HIBYTE(v400[0]) = 8;
                              strcpy((char *)__p, "transfer");
                              MIL::IROpset::TryGetOperatorSharedPtr();
                              MIL::Builder::OperationBuilder::Make();
                              v257 = v393;
                              if (!v393)
                                goto LABEL_470;
                              v258 = (unint64_t *)&v393->__shared_owners_;
                              do
                                v259 = __ldaxr(v258);
                              while (__stlxr(v259 - 1, v258));
                              if (!v259)
                              {
                                ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
                                std::__shared_weak_count::__release_weak(v257);
                                if ((SHIBYTE(v400[0]) & 0x80000000) == 0)
                                {
LABEL_471:
                                  v260 = v397;
                                  if (!v397)
                                    goto LABEL_479;
                                  goto LABEL_475;
                                }
                              }
                              else
                              {
LABEL_470:
                                if ((SHIBYTE(v400[0]) & 0x80000000) == 0)
                                  goto LABEL_471;
                              }
                              operator delete(__p[0]);
                              v260 = v397;
                              if (!v397)
                                goto LABEL_479;
LABEL_475:
                              v261 = (unint64_t *)&v260->__shared_owners_;
                              do
                                v262 = __ldaxr(v261);
                              while (__stlxr(v262 - 1, v261));
                              if (!v262)
                              {
                                ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
                                std::__shared_weak_count::__release_weak(v260);
                              }
LABEL_479:
                              v391 = 6;
                              strcpy((char *)v390, "values");
                              ArgumentForParameter = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
                              v264 = MIL::Builder::Variable::GetName(ArgumentForParameter);
                              if (*(char *)(v264 + 23) < 0)
                              {
                                std::string::__init_copy_ctor_external(&v389, *(const std::string::value_type **)v264, *(_QWORD *)(v264 + 8));
                              }
                              else
                              {
                                v265 = *(_OWORD *)v264;
                                v389.__r_.__value_.__r.__words[2] = *(_QWORD *)(v264 + 16);
                                *(_OWORD *)&v389.__r_.__value_.__l.__data_ = v265;
                              }
                              MIL::Builder::OperationBuilder::AddInput();
                              v266 = v392;
                              if (!v392)
                                goto LABEL_486;
                              v267 = (unint64_t *)&v392->__shared_owners_;
                              do
                                v268 = __ldaxr(v267);
                              while (__stlxr(v268 - 1, v267));
                              if (!v268)
                              {
                                ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
                                std::__shared_weak_count::__release_weak(v266);
                                if (SHIBYTE(v389.__r_.__value_.__r.__words[2]) < 0)
                                {
LABEL_513:
                                  operator delete(v389.__r_.__value_.__l.__data_);
                                  if ((v391 & 0x80000000) == 0)
                                    goto LABEL_488;
                                  goto LABEL_514;
                                }
                              }
                              else
                              {
LABEL_486:
                                if (SHIBYTE(v389.__r_.__value_.__r.__words[2]) < 0)
                                  goto LABEL_513;
                              }
                              if ((v391 & 0x80000000) == 0)
                                goto LABEL_488;
LABEL_514:
                              operator delete(v390[0]);
LABEL_488:
                              OutputName = MIL::Builder::OperationBuilder::GetOutputName(*v360);
                              if (*(char *)(OutputName + 23) < 0)
                              {
                                std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)OutputName, *(_QWORD *)(OutputName + 8));
                              }
                              else
                              {
                                v270 = *(_OWORD *)OutputName;
                                v400[0] = *(void **)(OutputName + 16);
                                *(_OWORD *)__p = v270;
                              }
                              v271 = SHIBYTE(v400[0]);
                              if (SHIBYTE(v400[0]) >= 0)
                                v272 = HIBYTE(v400[0]);
                              else
                                v272 = (size_t)__p[1];
                              v273 = v272 + 4;
                              if (v272 + 4 > 0x7FFFFFFFFFFFFFF7)
                                std::string::__throw_length_error[abi:ne180100]();
                              if (v273 >= 0x17)
                              {
                                v275 = (v273 & 0xFFFFFFFFFFFFFFF8) + 8;
                                if ((v273 | 7) != 0x17)
                                  v275 = v273 | 7;
                                v276 = v275 + 1;
                                v274 = operator new(v275 + 1);
                                v386 = v272 + 4;
                                v387 = v276 | 0x8000000000000000;
                                v385 = v274;
                              }
                              else
                              {
                                v386 = 0;
                                v387 = 0;
                                v385 = 0;
                                v274 = &v385;
                                HIBYTE(v387) = v272 + 4;
                                if (!v272)
                                  goto LABEL_505;
                              }
                              if (v271 >= 0)
                                v277 = __p;
                              else
                                v277 = (void **)__p[0];
                              memmove(v274, v277, v272);
LABEL_505:
                              strcpy((char *)v274 + v272, "_old");
                              MIL::Builder::OperationBuilder::RenameOutput();
                              v278 = v388;
                              if (!v388)
                                goto LABEL_509;
                              v279 = (unint64_t *)&v388->__shared_owners_;
                              do
                                v280 = __ldaxr(v279);
                              while (__stlxr(v280 - 1, v279));
                              if (!v280)
                              {
                                ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
                                std::__shared_weak_count::__release_weak(v278);
                                if ((SHIBYTE(v387) & 0x80000000) == 0)
                                {
LABEL_510:
                                  if (SHIBYTE(v400[0]) < 0)
                                    goto LABEL_517;
                                  goto LABEL_511;
                                }
                              }
                              else
                              {
LABEL_509:
                                if ((SHIBYTE(v387) & 0x80000000) == 0)
                                  goto LABEL_510;
                              }
                              operator delete(v385);
                              if (SHIBYTE(v400[0]) < 0)
                              {
LABEL_517:
                                std::string::__init_copy_ctor_external(&v383, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
                                goto LABEL_518;
                              }
LABEL_511:
                              *(_OWORD *)&v383.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
                              v383.__r_.__value_.__r.__words[2] = (std::string::size_type)v400[0];
LABEL_518:
                              MIL::Builder::OperationBuilder::GetOutputType(*v360);
                              MIL::Builder::OperationBuilder::AddOutput();
                              v281 = v384;
                              if (v384)
                              {
                                v282 = (unint64_t *)&v384->__shared_owners_;
                                do
                                  v283 = __ldaxr(v282);
                                while (__stlxr(v283 - 1, v282));
                                if (!v283)
                                {
                                  ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
                                  std::__shared_weak_count::__release_weak(v281);
                                  if ((SHIBYTE(v383.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                    goto LABEL_524;
LABEL_523:
                                  operator delete(v383.__r_.__value_.__l.__data_);
                                  goto LABEL_524;
                                }
                              }
                              if (SHIBYTE(v383.__r_.__value_.__r.__words[2]) < 0)
                                goto LABEL_523;
LABEL_524:
                              (*(void (**)(void **__return_ptr))(*(_QWORD *)v358 + 48))(&v396);
                              MIL::IRTensorValueType::MakeScalar();
                              v284 = v397;
                              if (v397)
                              {
                                v285 = (unint64_t *)&v397->__shared_owners_;
                                do
                                  v286 = __ldaxr(v285);
                                while (__stlxr(v286 - 1, v285));
                                if (!v286)
                                {
                                  ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
                                  std::__shared_weak_count::__release_weak(v284);
                                }
                              }
                              v381 = 4;
                              strcpy((char *)v380, "from");
                              v377 = 9;
                              strcpy((char *)v376, "cast_only");
                              MIL::IRTensorValueType::MakeStringValue();
                              v378 = v396;
                              if (v396)
                              {
                                v287 = (std::__shared_weak_count *)operator new();
                                v288 = (std::__shared_weak_count_vtbl *)v396;
                                v287->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
                                v287->__shared_owners_ = 0;
                                v287->__shared_weak_owners_ = 0;
                                v287[1].__vftable = v288;
                              }
                              else
                              {
                                v287 = 0;
                              }
                              v379 = v287;
                              v396 = 0;
                              MIL::Builder::OperationBuilder::AddInput();
                              v289 = v382;
                              if (!v382)
                                goto LABEL_536;
                              v290 = (unint64_t *)&v382->__shared_owners_;
                              do
                                v291 = __ldaxr(v290);
                              while (__stlxr(v291 - 1, v290));
                              if (!v291)
                              {
                                ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
                                std::__shared_weak_count::__release_weak(v289);
                                v292 = v379;
                                if (!v379)
                                  goto LABEL_544;
                              }
                              else
                              {
LABEL_536:
                                v292 = v379;
                                if (!v379)
                                  goto LABEL_544;
                              }
                              v293 = (unint64_t *)&v292->__shared_owners_;
                              do
                                v294 = __ldaxr(v293);
                              while (__stlxr(v294 - 1, v293));
                              if (!v294)
                              {
                                ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
                                std::__shared_weak_count::__release_weak(v292);
                              }
LABEL_544:
                              v295 = v396;
                              v396 = 0;
                              if (v295)
                                (*(void (**)(void *))(*(_QWORD *)v295 + 8))(v295);
                              if (v377 < 0)
                              {
                                operator delete(v376[0]);
                                if ((v381 & 0x80000000) == 0)
                                  goto LABEL_548;
                              }
                              else if ((v381 & 0x80000000) == 0)
                              {
                                goto LABEL_548;
                              }
                              operator delete(v380[0]);
LABEL_548:
                              v374 = 2;
                              strcpy((char *)v373, "to");
                              v370 = 9;
                              strcpy((char *)v369, "cast_only");
                              MIL::IRTensorValueType::MakeStringValue();
                              v371 = v396;
                              if (v396)
                              {
                                v296 = (std::__shared_weak_count *)operator new();
                                v297 = (std::__shared_weak_count_vtbl *)v396;
                                v296->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
                                v296->__shared_owners_ = 0;
                                v296->__shared_weak_owners_ = 0;
                                v296[1].__vftable = v297;
                              }
                              else
                              {
                                v296 = 0;
                              }
                              v372 = v296;
                              v396 = 0;
                              MIL::Builder::OperationBuilder::AddInput();
                              v298 = v375;
                              if (!v375)
                                goto LABEL_557;
                              v299 = (unint64_t *)&v375->__shared_owners_;
                              do
                                v300 = __ldaxr(v299);
                              while (__stlxr(v300 - 1, v299));
                              if (!v300)
                              {
                                ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
                                std::__shared_weak_count::__release_weak(v298);
                                v301 = v372;
                                if (!v372)
                                  goto LABEL_563;
                              }
                              else
                              {
LABEL_557:
                                v301 = v372;
                                if (!v372)
                                  goto LABEL_563;
                              }
                              v302 = (unint64_t *)&v301->__shared_owners_;
                              do
                                v303 = __ldaxr(v302);
                              while (__stlxr(v303 - 1, v302));
                              if (!v303)
                              {
                                ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
                                std::__shared_weak_count::__release_weak(v301);
                              }
LABEL_563:
                              v304 = v396;
                              v396 = 0;
                              if (v304)
                                (*(void (**)(void *))(*(_QWORD *)v304 + 8))(v304);
                              if (v370 < 0)
                              {
                                operator delete(v369[0]);
                                if ((v374 & 0x80000000) == 0)
                                {
LABEL_567:
                                  v305 = v395;
                                  v367 = v394;
                                  v368 = v395;
                                  if (!v395)
                                    goto LABEL_573;
                                  goto LABEL_571;
                                }
                              }
                              else if ((v374 & 0x80000000) == 0)
                              {
                                goto LABEL_567;
                              }
                              operator delete(v373[0]);
                              v305 = v395;
                              v367 = v394;
                              v368 = v395;
                              if (!v395)
                                goto LABEL_573;
LABEL_571:
                              v306 = (unint64_t *)&v305->__shared_owners_;
                              do
                                v307 = __ldxr(v306);
                              while (__stxr(v307 + 1, v306));
LABEL_573:
                              v308 = (std::__shared_weak_count *)v360[1];
                              v365 = *v360;
                              v366 = v308;
                              if (v308)
                              {
                                v309 = (unint64_t *)&v308->__shared_owners_;
                                do
                                  v310 = __ldxr(v309);
                                while (__stxr(v310 + 1, v309));
                              }
                              MIL::Builder::BlockBuilder::AddOperation();
                              v311 = v366;
                              if (!v366)
                                goto LABEL_580;
                              v312 = (unint64_t *)&v366->__shared_owners_;
                              do
                                v313 = __ldaxr(v312);
                              while (__stlxr(v313 - 1, v312));
                              if (!v313)
                              {
                                ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
                                std::__shared_weak_count::__release_weak(v311);
                                v314 = v368;
                                if (!v368)
                                  goto LABEL_586;
                              }
                              else
                              {
LABEL_580:
                                v314 = v368;
                                if (!v368)
                                  goto LABEL_586;
                              }
                              v315 = (unint64_t *)&v314->__shared_owners_;
                              do
                                v316 = __ldaxr(v315);
                              while (__stlxr(v316 - 1, v315));
                              if (!v316)
                              {
                                ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
                                std::__shared_weak_count::__release_weak(v314);
                              }
LABEL_586:
                              v317 = SHIBYTE(v400[0]);
                              v318 = __p[1];
                              if (SHIBYTE(v400[0]) >= 0)
                                v319 = HIBYTE(v400[0]);
                              else
                                v319 = (size_t)__p[1];
                              v320 = v319 + 4;
                              if (v319 + 4 > 0x7FFFFFFFFFFFFFF7)
                                std::string::__throw_length_error[abi:ne180100]();
                              if (v320 >= 0x17)
                              {
                                v322 = (v320 & 0xFFFFFFFFFFFFFFF8) + 8;
                                if ((v320 | 7) != 0x17)
                                  v322 = v320 | 7;
                                v323 = v322 + 1;
                                v321 = operator new(v322 + 1);
                                v398 = v323 | 0x8000000000000000;
                                v396 = v321;
                                v397 = (std::__shared_weak_count *)(v319 + 4);
                              }
                              else
                              {
                                v398 = 0;
                                v397 = 0;
                                v396 = 0;
                                v321 = &v396;
                                HIBYTE(v398) = v319 + 4;
                                if (!v319)
                                {
                                  strcpy((char *)&v396, "_old");
                                  if ((SHIBYTE(v400[0]) & 0x80000000) == 0)
                                    goto LABEL_593;
                                  goto LABEL_601;
                                }
                              }
                              if (v317 >= 0)
                                v324 = __p;
                              else
                                v324 = (void **)__p[0];
                              memmove(v321, v324, v319);
                              strcpy((char *)v321 + v319, "_old");
                              if ((v317 & 0x80000000) == 0)
                              {
LABEL_593:
                                *(_OWORD *)&v364.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
                                v364.__r_.__value_.__r.__words[2] = (std::string::size_type)v400[0];
                                goto LABEL_602;
                              }
LABEL_601:
                              std::string::__init_copy_ctor_external(&v364, (const std::string::value_type *)__p[0], (std::string::size_type)v318);
LABEL_602:
                              MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable();
                              if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
                              {
                                operator delete(v364.__r_.__value_.__l.__data_);
                                if ((SHIBYTE(v398) & 0x80000000) == 0)
                                {
LABEL_604:
                                  if ((SHIBYTE(v400[0]) & 0x80000000) == 0)
                                    goto LABEL_605;
                                  goto LABEL_609;
                                }
                              }
                              else if ((SHIBYTE(v398) & 0x80000000) == 0)
                              {
                                goto LABEL_604;
                              }
                              operator delete(v396);
                              if ((SHIBYTE(v400[0]) & 0x80000000) == 0)
                              {
LABEL_605:
                                v325 = v395;
                                if (!v395)
                                  goto LABEL_613;
                                goto LABEL_610;
                              }
LABEL_609:
                              operator delete(__p[0]);
                              v325 = v395;
                              if (!v395)
                                goto LABEL_613;
LABEL_610:
                              v326 = (unint64_t *)&v325->__shared_owners_;
                              do
                                v327 = __ldaxr(v326);
                              while (__stlxr(v327 - 1, v326));
                              if (v327)
                              {
LABEL_613:
                                v328 = v247[1];
                                if (!v328)
                                  goto LABEL_617;
                                goto LABEL_614;
                              }
                              ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
                              std::__shared_weak_count::__release_weak(v325);
                              v328 = v247[1];
                              if (!v328)
                              {
                                do
                                {
LABEL_617:
                                  v329 = (char **)v247[2];
                                  v65 = *v329 == (char *)v247;
                                  v247 = v329;
                                }
                                while (!v65);
                                goto LABEL_465;
                              }
                              do
                              {
LABEL_614:
                                v329 = (char **)v328;
                                v328 = *(char **)v328;
                              }
                              while (v328);
LABEL_465:
                              v247 = v329;
                              if (v329 == &v403)
                                goto LABEL_451;
                            }
                          }
                          goto LABEL_252;
                        }
                        v166 += 8;
                      }
                      v166 = *(_QWORD *)v166;
                      if (!v166)
                        goto LABEL_409;
                    }
                  }
                  do
                  {
LABEL_296:
                    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder> const&>((uint64_t)__p, v164 + 2, v164 + 2);
                    v164 = (_QWORD *)*v164;
                  }
                  while (v164);
                  goto LABEL_297;
                }
                while (1)
                {
                  v163 = v161[1];
                  if (v163 >= prime)
                    v163 %= prime;
                  if (v163 == v155)
                    goto LABEL_289;
                  if (*((_QWORD *)__p[0] + v163))
                  {
                    *v154 = (_QWORD *)*v161;
                    v162 = 8 * v163;
                    *v161 = **(_QWORD **)((char *)__p[0] + v162);
                    **(_QWORD **)((char *)__p[0] + v162) = v161;
                    v161 = v154;
LABEL_289:
                    v154 = (_QWORD **)v161;
                    v161 = (_QWORD *)*v161;
                    if (!v161)
                      goto LABEL_295;
                  }
                  else
                  {
                    *((_QWORD *)__p[0] + v163) = v154;
                    v154 = (_QWORD **)v161;
                    v161 = (_QWORD *)*v161;
                    v155 = v163;
                    if (!v161)
                      goto LABEL_295;
                  }
                }
              }
              if ((prime & (prime - 1)) != 0)
              {
                prime = std::__next_prime(*(_QWORD *)(OperationsByInput + 8));
                v146 = __p[1];
                v147 = (void *)prime >= __p[1];
                if ((void *)prime > __p[1])
                  goto LABEL_270;
              }
              else
              {
                v146 = 0;
                v147 = 1;
                if (prime)
                {
LABEL_270:
                  if (prime >> 61)
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  goto LABEL_271;
                }
              }
              if (v147)
                goto LABEL_295;
              v148 = vcvtps_u32_f32((float)(unint64_t)v400[1] / v401);
              if ((unint64_t)v146 < 3
                || (v149 = (uint8x8_t)vcnt_s8((int8x8_t)v146), v149.i16[0] = vaddlv_u8(v149), v149.u32[0] > 1uLL))
              {
                v148 = std::__next_prime(v148);
              }
              else
              {
                v150 = 1 << -(char)__clz(v148 - 1);
                if (v148 >= 2)
                  v148 = v150;
              }
              if (prime <= v148)
                prime = v148;
              if (prime >= (unint64_t)v146)
                goto LABEL_295;
              if (!prime)
              {
                v241 = __p[0];
                __p[0] = 0;
                if (v241)
                  operator delete(v241);
                __p[1] = 0;
                v164 = *(_QWORD **)(v144 + 16);
                if (!v164)
                  goto LABEL_297;
                goto LABEL_296;
              }
              goto LABEL_270;
            }
          }
          else
          {
            v80 = 0;
            if ((SHIBYTE(v405.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_159;
          }
          break;
        }
        operator delete(v405.__r_.__value_.__l.__data_);
        if (v81)
          goto LABEL_163;
        goto LABEL_167;
      }
LABEL_111:
      v55 += 2;
      if (v55 != v56)
        continue;
      break;
    }
    v55 = (MIL::Builder::OperationBuilder **)v409;
    if (!v409)
      goto LABEL_644;
LABEL_101:
    v57 = v410;
    v58 = v55;
    if (v410 != v55)
    {
      do
      {
        v59 = (std::__shared_weak_count *)*(v57 - 1);
        if (v59)
        {
          v60 = (unint64_t *)&v59->__shared_owners_;
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        v57 -= 2;
      }
      while (v57 != v55);
      v58 = v409;
    }
    v410 = v55;
    operator delete(v58);
    std::__tree<std::string>::destroy((uint64_t)&v411, v412);
    v338 = v415;
    if (v415)
      goto LABEL_648;
LABEL_651:
    v341 = (std::__shared_weak_count *)v416[1];
    if (v416[1])
      goto LABEL_652;
LABEL_20:
    v17 = v356 + 24;
    if (v356 + 24 != v355)
      continue;
    break;
  }
  v344 = (uint64_t *)v417;
  if (v417 != v418)
  {
    do
    {
      if (*((char *)v344 + 55) < 0)
        std::string::__init_copy_ctor_external(&v427, (const std::string::value_type *)v344[4], v344[5]);
      else
        v427 = *(std::string *)(v344 + 4);
      MIL::Builder::ProgramBuilder::RemoveFunction();
      if (SHIBYTE(v427.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v427.__r_.__value_.__l.__data_);
        v351 = (char *)v344[1];
        if (v351)
        {
          do
          {
LABEL_681:
            v352 = (char **)v351;
            v351 = *(char **)v351;
          }
          while (v351);
          goto LABEL_673;
        }
      }
      else
      {
        v351 = (char *)v344[1];
        if (v351)
          goto LABEL_681;
      }
      do
      {
        v352 = (char **)v344[2];
        v65 = *v352 == (char *)v344;
        v344 = (uint64_t *)v352;
      }
      while (!v65);
LABEL_673:
      v344 = (uint64_t *)v352;
    }
    while (v352 != v418);
  }
LABEL_659:
  MIL::Builder::ProgramBuilder::CreateProgram(v426);
  if (((*(uint64_t (**)(std::string::size_type *))(v427.__r_.__value_.__l.__size_ + 16))(&v427.__r_.__value_.__l.__size_) & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    MIL::MILResult::GetMessage((MIL::MILResult *)&v427.__r_.__value_.__r.__words[1]);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, (const std::string *)__p);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v345 = v427.__r_.__value_.__r.__words[0];
  v427.__r_.__value_.__r.__words[0] = 0;
  *v354 = v345;
  MEMORY[0x19401B338](&v427.__r_.__value_.__r.__words[1]);
  v346 = v427.__r_.__value_.__r.__words[0];
  v427.__r_.__value_.__r.__words[0] = 0;
  if (v346)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v346 + 8))(v346);
  std::__tree<std::string>::destroy((uint64_t)&v417, v418[0]);
  v347 = (void **)v420[0];
  if (v420[0])
  {
    do
    {
      v350 = (void **)*v347;
      if (*((char *)v347 + 39) < 0)
        operator delete(v347[2]);
      operator delete(v347);
      v347 = v350;
    }
    while (v350);
  }
  v348 = v419[0];
  v419[0] = 0;
  if (v348)
    operator delete(v348);
  if (SHIBYTE(v423) < 0)
    operator delete(__dst[0]);
  result = v426;
  v426 = 0;
  if (result)
    return (MIL::Builder::ProgramBuilder *)(*(uint64_t (**)(MIL::Builder::ProgramBuilder *))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1910A3C90(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t v9;
  void **v10;

  if (SLOBYTE(STACK[0x267]) < 0)
  {
    operator delete((void *)STACK[0x250]);
    if ((v3 & 1) == 0)
    {
LABEL_6:
      MEMORY[0x19401B338](v1);
      v6 = *(_QWORD *)(v4 - 192);
      *(_QWORD *)(v4 - 192) = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      std::__tree<std::string>::destroy((uint64_t)&STACK[0x338], (char *)STACK[0x340]);
      v7 = (void **)STACK[0x360];
      if (STACK[0x360])
      {
        do
        {
          v10 = (void **)*v7;
          if (*((char *)v7 + 39) < 0)
            operator delete(v7[2]);
          operator delete(v7);
          v7 = v10;
        }
        while (v10);
      }
      v8 = (void *)STACK[0x350];
      STACK[0x350] = 0;
      if (v8)
        operator delete(v8);
      if (*(char *)(v4 - 217) < 0)
        operator delete(*(void **)(v4 - 240));
      v9 = *(_QWORD *)(v4 - 200);
      *(_QWORD *)(v4 - 200) = 0;
      if (!v9)
        _Unwind_Resume(a1);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v3)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v2);
  goto LABEL_6;
}

MIL::Builder::ProgramBuilder *Espresso::AOT::PruneNoOpTransfers@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const char *OpsetName;
  unint64_t v11;
  void *v12;
  const char *v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  MIL::Builder::OperationBuilder **v18;
  MIL::Builder::OperationBuilder **v19;
  void *v20;
  uint64_t Operator;
  uint64_t v22;
  int v23;
  MIL::Builder::OperationBuilder *v26;
  uint64_t *i;
  unint64_t NumArguments;
  MIL::Builder::Variable *ArgumentForParameter;
  char *v30;
  MIL::Builder::OperationBuilder *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t OperationsByInput;
  uint64_t v35;
  size_t prime;
  unint64_t v37;
  void *v38;
  BOOL v39;
  unint64_t v40;
  uint8x8_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  _QWORD **v46;
  size_t v47;
  size_t v48;
  size_t v49;
  _QWORD *v50;
  size_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  size_t v55;
  _QWORD *v56;
  void *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  __int128 v71;
  unint64_t *v72;
  unint64_t v73;
  __int128 v74;
  char *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  BOOL v83;
  MIL::Builder::Variable *Output;
  uint64_t Name;
  __int128 v87;
  uint64_t v88;
  __int128 v89;
  E5Common::Utils *Type;
  E5Common::Utils *v91;
  _BOOL4 IsTensor;
  const MIL::IRValueType *v93;
  int IsTensorBuffer;
  const MIL::IRValueType *v95;
  const MIL::IRValueType *v96;
  int IsPixelBuffer;
  const MIL::IRValueType *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *size;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  std::string::size_type v109;
  uint64_t v110;
  _QWORD *v111;
  unint64_t v112;
  void *v113;
  _BYTE *v114;
  void **v115;
  void **v116;
  void *v117;
  void *v118;
  char *v119;
  std::string::size_type v120;
  uint64_t v121;
  int v122;
  unsigned __int8 *v123;
  uint64_t v124;
  std::string *v125;
  int v126;
  int v127;
  int v128;
  int v129;
  char v130;
  BOOL v131;
  void **v132;
  unint64_t *v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t *v136;
  uint64_t **v137;
  uint64_t **v138;
  unint64_t v139;
  uint64_t *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t *v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t *v150;
  uint64_t **v151;
  uint64_t **v152;
  unint64_t v153;
  uint64_t *v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  _BYTE *v159;
  int v160;
  uint64_t v161;
  int v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  MIL::Builder::OperationBuilder **v174;
  MIL::Builder::OperationBuilder **v175;
  MIL::Builder::OperationBuilder *v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  unint64_t v180;
  MIL::Builder::Variable *v181;
  unsigned __int8 *v182;
  uint64_t v183;
  uint64_t v184;
  std::string::size_type v185;
  std::string *v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::string::size_type v199;
  std::__shared_weak_count *v200;
  std::string::size_type v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::string::size_type v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  int v212;
  size_t v213;
  unint64_t v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  std::string *v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  MIL::Builder::OperationBuilder **v222;
  void *v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  int v241;
  std::string::size_type v242;
  size_t v243;
  unint64_t v244;
  void *v245;
  uint64_t v246;
  uint64_t v247;
  std::string *v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  unint64_t *v252;
  unint64_t *v253;
  unint64_t v254;
  uint64_t *v255;
  uint64_t **v256;
  uint64_t **v257;
  unint64_t v258;
  uint64_t *v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t *v262;
  uint64_t v263;
  _BYTE *v264;
  int v265;
  uint64_t v266;
  int v267;
  uint64_t *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t *v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  uint64_t v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  _QWORD *v282;
  void *v283;
  _QWORD *v284;
  _QWORD *v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  void *v289;
  char *v290;
  char *v291;
  _QWORD *v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  MIL::Builder::OperationBuilder **v299;
  MIL::Builder::OperationBuilder **v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  void **v304;
  void **v305;
  void **v306;
  void **v307;
  void **v308;
  void **v309;
  void **v310;
  void *v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  void *v318;
  void *v319;
  MIL::Builder::ProgramBuilder *result;
  char *v321;
  char *j;
  std::runtime_error *exception;
  std::runtime_error *v324;
  _QWORD *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  void *v329[2];
  __int128 v330;
  float v331;
  unint64_t v332;
  std::__shared_weak_count *v333;
  uint64_t v334;
  std::__shared_weak_count *v335;
  std::string v336;
  uint64_t v337;
  std::__shared_weak_count *v338;
  void *v339;
  std::__shared_weak_count *v340;
  std::string v341;
  std::__shared_weak_count *v342;
  void *v343;
  size_t v344;
  unint64_t v345;
  std::__shared_weak_count *v346;
  std::string v347;
  void *v348[2];
  char v349;
  std::__shared_weak_count *v350;
  void *v351[2];
  char v352;
  std::string::size_type v353;
  std::__shared_weak_count *v354;
  void *v355[2];
  char v356;
  std::__shared_weak_count *v357;
  void *v358[2];
  char v359;
  std::string::size_type v360;
  std::__shared_weak_count *v361;
  void *v362[2];
  char v363;
  std::__shared_weak_count *v364;
  std::__shared_weak_count *v365;
  unint64_t v366;
  std::__shared_weak_count *v367;
  std::string v368;
  std::__shared_weak_count *v369;
  MIL::Builder::OperationBuilder *v370;
  std::__shared_weak_count *v371;
  unint64_t v372;
  std::__shared_weak_count *v373;
  void *v374;
  void *v375;
  std::string v376;
  std::string v377;
  std::string v378;
  std::string v379;
  void *__p;
  char *v381;
  char *v382;
  MIL::Builder::OperationBuilder **v383;
  MIL::Builder::OperationBuilder **v384;
  char *v385;
  void **v386;
  uint64_t **v387;
  uint64_t *v388;
  uint64_t v389;
  MIL::Builder::BlockBuilder *v390;
  std::__shared_weak_count *v391;
  std::__shared_weak_count *v392;
  void *__dst[2];
  unint64_t v394;
  uint64_t v395;
  std::__shared_weak_count *v396;
  MIL::Builder::ProgramBuilder *v397;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 48))(&v395);
  v326 = a1;
  v6 = (E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *)MIL::Builder::ProgramBuilder::Make();
  v7 = v396;
  if (v396)
  {
    p_shared_owners = (unint64_t *)&v396->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  OpsetName = E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::GetOpsetName(v6);
  v12 = (void *)v11;
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = OpsetName;
  v325 = a3;
  if (v11 >= 0x17)
  {
    v16 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v16 = v11 | 7;
    v17 = v16 + 1;
    v14 = (void **)operator new(v16 + 1);
    __dst[1] = v12;
    v394 = v17 | 0x8000000000000000;
    __dst[0] = v14;
LABEL_14:
    memmove(v14, v13, (size_t)v12);
    *((_BYTE *)v12 + (_QWORD)v14) = 0;
    v15 = *a2;
    v327 = a2[1];
    if (*a2 != v327)
      goto LABEL_17;
    goto LABEL_596;
  }
  HIBYTE(v394) = v11;
  v14 = __dst;
  if (v11)
    goto LABEL_14;
  LOBYTE(__dst[0]) = 0;
  v15 = *a2;
  v327 = a2[1];
  if (*a2 != v327)
  {
    do
    {
LABEL_17:
      MIL::Builder::ProgramBuilder::GetFunction();
      MIL::Builder::FunctionBuilder::GetBlock();
      v388 = 0;
      v389 = 0;
      v387 = &v388;
      MIL::Builder::BlockBuilder::GetOutputNames(v390);
      v328 = v15;
      MIL::Builder::BlockBuilder::GetOperations(v390);
      v18 = v383;
      v19 = v384;
      if (v383 == v384)
      {
        if (v383)
          goto LABEL_553;
        goto LABEL_563;
      }
      do
      {
        Operator = MIL::Builder::OperationBuilder::GetOperator(*v18);
        v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Operator + 16))(Operator);
        v23 = *(char *)(v22 + 23);
        if (v23 < 0)
        {
          if (*(_QWORD *)(v22 + 8) != 19)
            goto LABEL_22;
          v22 = *(_QWORD *)v22;
        }
        else if (v23 != 19)
        {
          goto LABEL_22;
        }
        if (*(_QWORD *)v22 == 0x736F695F4C4D3545
          && *(_QWORD *)(v22 + 8) == 0x736E6172742E3631
          && *(_QWORD *)(v22 + 11) == 0x726566736E617274)
        {
          v26 = *v18;
          for (i = v388; i; i = (uint64_t *)*i)
          {
            v37 = i[4];
            if ((unint64_t)v26 >= v37)
            {
              if (v37 >= (unint64_t)v26)
                goto LABEL_22;
              ++i;
            }
          }
          BYTE7(v330) = 6;
          strcpy((char *)v329, "values");
          NumArguments = MIL::Builder::OperationBuilder::GetNumArguments();
          if (SBYTE7(v330) < 0)
            operator delete(v329[0]);
          if (NumArguments >= 2)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Transfer Op has more than 1 input.");
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          BYTE7(v330) = 6;
          strcpy((char *)v329, "values");
          ArgumentForParameter = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
          if (SBYTE7(v330) < 0)
            operator delete(v329[0]);
          v381 = 0;
          __p = 0;
          v382 = 0;
          v30 = (char *)operator new(0x10uLL);
          *(_QWORD *)v30 = *v18;
          v31 = v18[1];
          *((_QWORD *)v30 + 1) = v31;
          if (v31)
          {
            v32 = (unint64_t *)((char *)v31 + 8);
            do
              v33 = __ldxr(v32);
            while (__stxr(v33 + 1, v32));
            if (v381)
            {
              v321 = v30 - 16;
              for (j = v381 - 16; ; j -= 16)
              {
                *(_OWORD *)v321 = *(_OWORD *)j;
                v321 -= 16;
                *(_QWORD *)j = 0;
                *((_QWORD *)j + 1) = 0;
              }
            }
          }
          __p = v30;
          v381 = v30 + 16;
          v382 = v30 + 16;
          MIL::Builder::OperationBuilder::GetOutputName(*v18);
          OperationsByInput = MIL::Builder::BlockBuilder::GetOperationsByInput();
          v35 = OperationsByInput;
          *(_OWORD *)v329 = 0u;
          v330 = 0u;
          v331 = *(float *)(OperationsByInput + 32);
          prime = *(_QWORD *)(OperationsByInput + 8);
          if (prime == 1)
          {
            prime = 2;
            goto LABEL_69;
          }
          if ((prime & (prime - 1)) != 0)
          {
            prime = std::__next_prime(*(_QWORD *)(OperationsByInput + 8));
            v38 = v329[1];
            v39 = (void *)prime >= v329[1];
            if ((void *)prime > v329[1])
              goto LABEL_68;
          }
          else
          {
            v38 = 0;
            v39 = 1;
            if (prime)
            {
LABEL_68:
              if (prime >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
LABEL_69:
              v43 = operator new(8 * prime);
              v44 = v329[0];
              v329[0] = v43;
              if (v44)
                operator delete(v44);
              v45 = 0;
              v329[1] = (void *)prime;
              do
                *((_QWORD *)v329[0] + v45++) = 0;
              while (prime != v45);
              v46 = (_QWORD **)v330;
              if ((_QWORD)v330)
              {
                v47 = *(_QWORD *)(v330 + 8);
                v48 = prime - 1;
                if ((prime & (prime - 1)) == 0)
                {
                  v49 = v47 & v48;
                  *((_QWORD *)v329[0] + v49) = &v330;
                  while (1)
                  {
                    v50 = *v46;
                    if (!*v46)
                      break;
                    v51 = v50[1] & v48;
                    if (v51 == v49)
                    {
                      v46 = (_QWORD **)*v46;
                    }
                    else if (*((_QWORD *)v329[0] + v51))
                    {
                      *v46 = (_QWORD *)*v50;
                      v52 = 8 * v51;
                      *v50 = **(_QWORD **)((char *)v329[0] + v52);
                      **(_QWORD **)((char *)v329[0] + v52) = v50;
                    }
                    else
                    {
                      *((_QWORD *)v329[0] + v51) = v46;
                      v46 = (_QWORD **)v50;
                      v49 = v51;
                    }
                  }
                  goto LABEL_93;
                }
                if (v47 >= prime)
                  v47 %= prime;
                *((_QWORD *)v329[0] + v47) = &v330;
                v53 = *v46;
                if (!*v46)
                  goto LABEL_93;
                while (1)
                {
LABEL_88:
                  v55 = v53[1];
                  if (v55 >= prime)
                    v55 %= prime;
                  if (v55 == v47)
                    goto LABEL_87;
                  if (*((_QWORD *)v329[0] + v55))
                    break;
                  *((_QWORD *)v329[0] + v55) = v46;
                  v46 = (_QWORD **)v53;
                  v53 = (_QWORD *)*v53;
                  v47 = v55;
                  if (!v53)
                    goto LABEL_93;
                }
                *v46 = (_QWORD *)*v53;
                v54 = 8 * v55;
                *v53 = **(_QWORD **)((char *)v329[0] + v54);
                **(_QWORD **)((char *)v329[0] + v54) = v53;
                v53 = v46;
LABEL_87:
                v46 = (_QWORD **)v53;
                v53 = (_QWORD *)*v53;
                if (!v53)
                  goto LABEL_93;
                goto LABEL_88;
              }
LABEL_93:
              v56 = *(_QWORD **)(v35 + 16);
              if (!v56)
                goto LABEL_131;
              do
              {
LABEL_94:
                std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder> const&>((uint64_t)v329, v56 + 2, v56 + 2);
                v56 = (_QWORD *)*v56;
              }
              while (v56);
              goto LABEL_131;
            }
          }
          if (v39)
            goto LABEL_93;
          v40 = vcvtps_u32_f32((float)*((unint64_t *)&v330 + 1) / v331);
          if ((unint64_t)v38 < 3
            || (v41 = (uint8x8_t)vcnt_s8((int8x8_t)v38), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
          {
            v40 = std::__next_prime(v40);
          }
          else
          {
            v42 = 1 << -(char)__clz(v40 - 1);
            if (v40 >= 2)
              v40 = v42;
          }
          if (prime <= v40)
            prime = v40;
          if (prime >= (unint64_t)v38)
            goto LABEL_93;
          if (prime)
            goto LABEL_68;
          v57 = v329[0];
          v329[0] = 0;
          if (v57)
            operator delete(v57);
          v329[1] = 0;
          v56 = *(_QWORD **)(v35 + 16);
          if (v56)
            goto LABEL_94;
LABEL_131:
          while (*((_QWORD *)&v330 + 1) == 1)
          {
            v80 = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)(v330 + 16));
            v81 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v80 + 16))(v80);
            v82 = *(char *)(v81 + 23);
            if (v82 < 0)
            {
              if (*(_QWORD *)(v81 + 8) != 19)
                break;
              v81 = *(_QWORD *)v81;
            }
            else if (v82 != 19)
            {
              break;
            }
            v83 = *(_QWORD *)v81 == 0x736F695F4C4D3545 && *(_QWORD *)(v81 + 8) == 0x736E6172742E3631;
            if (!v83 || *(_QWORD *)(v81 + 11) != 0x726566736E617274)
              break;
            v58 = v330;
            v59 = v381;
            if (v381 >= v382)
            {
              v64 = (char *)__p;
              v65 = (v381 - (_BYTE *)__p) >> 4;
              v66 = v65 + 1;
              if ((unint64_t)(v65 + 1) >> 60)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v67 = v382 - (_BYTE *)__p;
              if ((v382 - (_BYTE *)__p) >> 3 > v66)
                v66 = v67 >> 3;
              if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF0)
                v68 = 0xFFFFFFFFFFFFFFFLL;
              else
                v68 = v66;
              if (v68 >> 60)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v69 = (char *)operator new(16 * v68);
              v70 = &v69[16 * v65];
              v71 = *(_OWORD *)(v58 + 16);
              *(_OWORD *)v70 = v71;
              if (*((_QWORD *)&v71 + 1))
              {
                v72 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
                do
                  v73 = __ldxr(v72);
                while (__stxr(v73 + 1, v72));
                v59 = v381;
              }
              v63 = v70 + 16;
              if (v59 == v64)
              {
                __p = &v69[16 * v65];
                v381 = v70 + 16;
                v382 = &v69[16 * v68];
              }
              else
              {
                do
                {
                  v74 = *((_OWORD *)v59 - 1);
                  v59 -= 16;
                  *((_OWORD *)v70 - 1) = v74;
                  v70 -= 16;
                  *(_QWORD *)v59 = 0;
                  *((_QWORD *)v59 + 1) = 0;
                }
                while (v59 != v64);
                v64 = (char *)__p;
                v75 = v381;
                __p = v70;
                v381 = v63;
                v382 = &v69[16 * v68];
                while (v75 != v64)
                {
                  v76 = (std::__shared_weak_count *)*((_QWORD *)v75 - 1);
                  if (v76)
                  {
                    v77 = (unint64_t *)&v76->__shared_owners_;
                    do
                      v78 = __ldaxr(v77);
                    while (__stlxr(v78 - 1, v77));
                    if (!v78)
                    {
                      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                      std::__shared_weak_count::__release_weak(v76);
                    }
                  }
                  v75 -= 16;
                }
              }
              if (v64)
                operator delete(v64);
            }
            else
            {
              *(_QWORD *)v381 = *(_QWORD *)(v330 + 16);
              v60 = *(_QWORD *)(v58 + 24);
              *((_QWORD *)v59 + 1) = v60;
              if (v60)
              {
                v61 = (unint64_t *)(v60 + 8);
                do
                  v62 = __ldxr(v61);
                while (__stxr(v62 + 1, v61));
              }
              v63 = v59 + 16;
            }
            v381 = v63;
            MIL::Builder::OperationBuilder::GetOutputName(*(MIL::Builder::OperationBuilder **)(v330 + 16));
            v79 = MIL::Builder::BlockBuilder::GetOperationsByInput();
            if (v329 != (void **)v79)
            {
              v331 = *(float *)(v79 + 32);
              std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *> *>>(v329, *(_QWORD **)(v79 + 16), 0);
            }
          }
          Output = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetOutput(*((MIL::Builder::OperationBuilder **)v381
                                                                                       - 2));
          Name = MIL::Builder::Variable::GetName(ArgumentForParameter);
          if (*(char *)(Name + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v379, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
          }
          else
          {
            v87 = *(_OWORD *)Name;
            v379.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
            *(_OWORD *)&v379.__r_.__value_.__l.__data_ = v87;
          }
          v88 = MIL::Builder::Variable::GetName(Output);
          if (*(char *)(v88 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v378, *(const std::string::value_type **)v88, *(_QWORD *)(v88 + 8));
          }
          else
          {
            v89 = *(_OWORD *)v88;
            v378.__r_.__value_.__r.__words[2] = *(_QWORD *)(v88 + 16);
            *(_OWORD *)&v378.__r_.__value_.__l.__data_ = v89;
          }
          Type = (E5Common::Utils *)MIL::Builder::Variable::TryGetType(ArgumentForParameter);
          v91 = (E5Common::Utils *)MIL::Builder::Variable::TryGetType(Output);
          IsTensor = E5Common::Utils::IsTensor((uint64_t)Type);
          if (IsTensor != E5Common::Utils::IsTensor((uint64_t)v91))
            goto LABEL_523;
          IsTensorBuffer = E5Common::Utils::IsTensorBuffer(Type, v93);
          if (IsTensorBuffer != E5Common::Utils::IsTensorBuffer(v91, v95))
            goto LABEL_523;
          IsPixelBuffer = E5Common::Utils::IsPixelBuffer(Type, v96);
          if (IsPixelBuffer != E5Common::Utils::IsPixelBuffer(v91, v98))
            goto LABEL_523;
          if (Type != v91)
          {
            if ((unint64_t)(v381 - (_BYTE *)__p) < 0x11)
              goto LABEL_523;
            (*(void (**)(MIL::Builder::OperationBuilder **__return_ptr))(*(_QWORD *)v326 + 48))(&v370);
            MIL::MILContext::GetOpset();
            *((_BYTE *)&v377.__r_.__value_.__s + 23) = 8;
            strcpy((char *)&v377, "transfer");
            MIL::IROpset::TryGetOperatorSharedPtr();
            MIL::Builder::OperationBuilder::Make();
            v99 = v365;
            if (!v365)
              goto LABEL_159;
            v100 = (unint64_t *)&v365->__shared_owners_;
            do
              v101 = __ldaxr(v100);
            while (__stlxr(v101 - 1, v100));
            if (!v101)
            {
              ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
              std::__shared_weak_count::__release_weak(v99);
              if (SHIBYTE(v377.__r_.__value_.__r.__words[2]) < 0)
LABEL_160:
                operator delete(v377.__r_.__value_.__l.__data_);
            }
            else
            {
LABEL_159:
              if (SHIBYTE(v377.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_160;
            }
            v102 = v371;
            if (v371)
            {
              v103 = (unint64_t *)&v371->__shared_owners_;
              do
                v104 = __ldaxr(v103);
              while (__stlxr(v104 - 1, v103));
              if (!v104)
              {
                ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                std::__shared_weak_count::__release_weak(v102);
              }
            }
            (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v326 + 48))(&v377);
            MIL::IRTensorValueType::MakeScalar();
            size = (std::__shared_weak_count *)v377.__r_.__value_.__l.__size_;
            if (v377.__r_.__value_.__l.__size_)
            {
              v106 = (unint64_t *)(v377.__r_.__value_.__l.__size_ + 8);
              do
                v107 = __ldaxr(v106);
              while (__stlxr(v107 - 1, v106));
              if (!v107)
              {
                ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                std::__shared_weak_count::__release_weak(size);
              }
            }
            v363 = 4;
            strcpy((char *)v362, "from");
            v359 = 9;
            strcpy((char *)v358, "cast_only");
            MIL::IRTensorValueType::MakeStringValue();
            v360 = v377.__r_.__value_.__r.__words[0];
            if (v377.__r_.__value_.__r.__words[0])
            {
              v108 = (std::__shared_weak_count *)operator new();
              v109 = v377.__r_.__value_.__r.__words[0];
              v108->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
              v108->__shared_owners_ = 0;
              v108->__shared_weak_owners_ = 0;
              v108[1].__vftable = (std::__shared_weak_count_vtbl *)v109;
            }
            else
            {
              v108 = 0;
            }
            v361 = v108;
            v377.__r_.__value_.__r.__words[0] = 0;
            MIL::Builder::OperationBuilder::AddInput();
            v193 = v364;
            if (v364)
            {
              v194 = (unint64_t *)&v364->__shared_owners_;
              do
                v195 = __ldaxr(v194);
              while (__stlxr(v195 - 1, v194));
              if (!v195)
              {
                ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
                std::__shared_weak_count::__release_weak(v193);
              }
            }
            v196 = v361;
            if (v361)
            {
              v197 = (unint64_t *)&v361->__shared_owners_;
              do
                v198 = __ldaxr(v197);
              while (__stlxr(v198 - 1, v197));
              if (!v198)
              {
                ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
                std::__shared_weak_count::__release_weak(v196);
              }
            }
            v199 = v377.__r_.__value_.__r.__words[0];
            v377.__r_.__value_.__r.__words[0] = 0;
            if (v199)
              (*(void (**)(std::string::size_type))(*(_QWORD *)v199 + 8))(v199);
            if (v359 < 0)
            {
              operator delete(v358[0]);
              if (v363 < 0)
                goto LABEL_351;
            }
            else
            {
              if ((v363 & 0x80000000) == 0)
                goto LABEL_348;
LABEL_351:
              operator delete(v362[0]);
            }
LABEL_348:
            v356 = 2;
            strcpy((char *)v355, "to");
            v352 = 9;
            strcpy((char *)v351, "cast_only");
            MIL::IRTensorValueType::MakeStringValue();
            v353 = v377.__r_.__value_.__r.__words[0];
            if (v377.__r_.__value_.__r.__words[0])
            {
              v200 = (std::__shared_weak_count *)operator new();
              v201 = v377.__r_.__value_.__r.__words[0];
              v200->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
              v200->__shared_owners_ = 0;
              v200->__shared_weak_owners_ = 0;
              v200[1].__vftable = (std::__shared_weak_count_vtbl *)v201;
            }
            else
            {
              v200 = 0;
            }
            v354 = v200;
            v377.__r_.__value_.__r.__words[0] = 0;
            MIL::Builder::OperationBuilder::AddInput();
            v202 = v357;
            if (v357)
            {
              v203 = (unint64_t *)&v357->__shared_owners_;
              do
                v204 = __ldaxr(v203);
              while (__stlxr(v204 - 1, v203));
              if (!v204)
              {
                ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                std::__shared_weak_count::__release_weak(v202);
              }
            }
            v205 = v354;
            if (v354)
            {
              v206 = (unint64_t *)&v354->__shared_owners_;
              do
                v207 = __ldaxr(v206);
              while (__stlxr(v207 - 1, v206));
              if (!v207)
              {
                ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                std::__shared_weak_count::__release_weak(v205);
              }
            }
            v208 = v377.__r_.__value_.__r.__words[0];
            v377.__r_.__value_.__r.__words[0] = 0;
            if (v208)
              (*(void (**)(std::string::size_type))(*(_QWORD *)v208 + 8))(v208);
            if (v352 < 0)
            {
              operator delete(v351[0]);
              if (v356 < 0)
                goto LABEL_370;
            }
            else
            {
              if ((v356 & 0x80000000) == 0)
                goto LABEL_367;
LABEL_370:
              operator delete(v355[0]);
            }
LABEL_367:
            v349 = 6;
            strcpy((char *)v348, "values");
            if (SHIBYTE(v379.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v347, v379.__r_.__value_.__l.__data_, v379.__r_.__value_.__l.__size_);
            else
              v347 = v379;
            MIL::Builder::OperationBuilder::AddInput();
            v209 = v350;
            if (!v350)
              goto LABEL_376;
            v210 = (unint64_t *)&v350->__shared_owners_;
            do
              v211 = __ldaxr(v210);
            while (__stlxr(v211 - 1, v210));
            if (!v211)
            {
              ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
              std::__shared_weak_count::__release_weak(v209);
              if (SHIBYTE(v347.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_411;
LABEL_377:
              if (v349 < 0)
LABEL_412:
                operator delete(v348[0]);
            }
            else
            {
LABEL_376:
              if ((SHIBYTE(v347.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_377;
LABEL_411:
              operator delete(v347.__r_.__value_.__l.__data_);
              if (v349 < 0)
                goto LABEL_412;
            }
            v212 = SHIBYTE(v378.__r_.__value_.__r.__words[2]);
            if ((v378.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v213 = HIBYTE(v378.__r_.__value_.__r.__words[2]);
            else
              v213 = v378.__r_.__value_.__l.__size_;
            v214 = v213 + 4;
            if (v213 + 4 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            if (v214 >= 0x17)
            {
              v216 = (v214 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v214 | 7) != 0x17)
                v216 = v214 | 7;
              v217 = v216 + 1;
              v215 = operator new(v216 + 1);
              v344 = v213 + 4;
              v345 = v217 | 0x8000000000000000;
              v343 = v215;
            }
            else
            {
              v344 = 0;
              v345 = 0;
              v343 = 0;
              v215 = &v343;
              HIBYTE(v345) = v213 + 4;
              if (!v213)
                goto LABEL_392;
            }
            if (v212 >= 0)
              v218 = &v378;
            else
              v218 = (std::string *)v378.__r_.__value_.__r.__words[0];
            memmove(v215, v218, v213);
LABEL_392:
            strcpy((char *)v215 + v213, "_old");
            MIL::Builder::OperationBuilder::RenameOutput();
            v219 = v346;
            if (!v346)
              goto LABEL_396;
            v220 = (unint64_t *)&v346->__shared_owners_;
            do
              v221 = __ldaxr(v220);
            while (__stlxr(v221 - 1, v220));
            if (!v221)
            {
              ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
              std::__shared_weak_count::__release_weak(v219);
              if (SHIBYTE(v345) < 0)
                goto LABEL_414;
LABEL_397:
              if ((SHIBYTE(v378.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_398;
LABEL_415:
              std::string::__init_copy_ctor_external(&v341, v378.__r_.__value_.__l.__data_, v378.__r_.__value_.__l.__size_);
            }
            else
            {
LABEL_396:
              if ((SHIBYTE(v345) & 0x80000000) == 0)
                goto LABEL_397;
LABEL_414:
              operator delete(v343);
              if (SHIBYTE(v378.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_415;
LABEL_398:
              v341 = v378;
            }
            MIL::Builder::OperationBuilder::GetOutputType(*((MIL::Builder::OperationBuilder **)v381 - 2));
            MIL::Builder::OperationBuilder::AddOutput();
            v227 = v342;
            if (!v342)
              goto LABEL_420;
            v228 = (unint64_t *)&v342->__shared_owners_;
            do
              v229 = __ldaxr(v228);
            while (__stlxr(v229 - 1, v228));
            if (!v229)
            {
              ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
              std::__shared_weak_count::__release_weak(v227);
              if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
LABEL_421:
                operator delete(v341.__r_.__value_.__l.__data_);
            }
            else
            {
LABEL_420:
              if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_421;
            }
            v339 = v374;
            v340 = (std::__shared_weak_count *)v375;
            if (v375)
            {
              v230 = (unint64_t *)((char *)v375 + 8);
              do
                v231 = __ldxr(v230);
              while (__stxr(v231 + 1, v230));
            }
            v232 = (std::__shared_weak_count *)*((_QWORD *)__p + 1);
            v337 = *(_QWORD *)__p;
            v338 = v232;
            if (v232)
            {
              v233 = (unint64_t *)&v232->__shared_owners_;
              do
                v234 = __ldxr(v233);
              while (__stxr(v234 + 1, v233));
            }
            MIL::Builder::BlockBuilder::AddOperation();
            v235 = v338;
            if (v338)
            {
              v236 = (unint64_t *)&v338->__shared_owners_;
              do
                v237 = __ldaxr(v236);
              while (__stlxr(v237 - 1, v236));
              if (!v237)
              {
                ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
                std::__shared_weak_count::__release_weak(v235);
              }
            }
            v238 = v340;
            if (v340)
            {
              v239 = (unint64_t *)&v340->__shared_owners_;
              do
                v240 = __ldaxr(v239);
              while (__stlxr(v240 - 1, v239));
              if (!v240)
              {
                ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
                std::__shared_weak_count::__release_weak(v238);
              }
            }
            v241 = SHIBYTE(v378.__r_.__value_.__r.__words[2]);
            v242 = v378.__r_.__value_.__l.__size_;
            if ((v378.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v243 = HIBYTE(v378.__r_.__value_.__r.__words[2]);
            else
              v243 = v378.__r_.__value_.__l.__size_;
            v244 = v243 + 4;
            if (v243 + 4 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            if (v244 >= 0x17)
            {
              v246 = (v244 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v244 | 7) != 0x17)
                v246 = v244 | 7;
              v247 = v246 + 1;
              v245 = operator new(v246 + 1);
              v377.__r_.__value_.__r.__words[2] = v247 | 0x8000000000000000;
              v377.__r_.__value_.__r.__words[0] = (std::string::size_type)v245;
              v377.__r_.__value_.__l.__size_ = v243 + 4;
            }
            else
            {
              memset(&v377, 0, sizeof(v377));
              v245 = &v377;
              *((_BYTE *)&v377.__r_.__value_.__s + 23) = v243 + 4;
              if (!v243)
              {
                strcpy((char *)&v377, "_old");
                if ((SHIBYTE(v378.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_445;
LABEL_453:
                std::string::__init_copy_ctor_external(&v336, v378.__r_.__value_.__l.__data_, v242);
                goto LABEL_454;
              }
            }
            if (v241 >= 0)
              v248 = &v378;
            else
              v248 = (std::string *)v378.__r_.__value_.__r.__words[0];
            memmove(v245, v248, v243);
            strcpy((char *)v245 + v243, "_old");
            if (v241 < 0)
              goto LABEL_453;
LABEL_445:
            v336 = v378;
LABEL_454:
            v334 = 0;
            v335 = 0;
            MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable();
            v249 = v335;
            if (!v335)
              goto LABEL_458;
            v250 = (unint64_t *)&v335->__shared_owners_;
            do
              v251 = __ldaxr(v250);
            while (__stlxr(v251 - 1, v250));
            if (!v251)
            {
              ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
              std::__shared_weak_count::__release_weak(v249);
              if (SHIBYTE(v336.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_516;
LABEL_459:
              if (SHIBYTE(v377.__r_.__value_.__r.__words[2]) < 0)
LABEL_517:
                operator delete(v377.__r_.__value_.__l.__data_);
            }
            else
            {
LABEL_458:
              if ((SHIBYTE(v336.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_459;
LABEL_516:
              operator delete(v336.__r_.__value_.__l.__data_);
              if (SHIBYTE(v377.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_517;
            }
            v252 = (unint64_t *)__p;
            v253 = (unint64_t *)v381;
            while (v252 != v253)
            {
              v254 = *v252;
              v255 = v388;
              v256 = &v388;
              v257 = &v388;
              if (v388)
              {
                while (1)
                {
                  while (1)
                  {
                    v257 = (uint64_t **)v255;
                    v258 = v255[4];
                    if (v254 >= v258)
                      break;
                    v255 = *v257;
                    v256 = v257;
                    if (!*v257)
                      goto LABEL_470;
                  }
                  if (v258 >= v254)
                    break;
                  v255 = v257[1];
                  if (!v255)
                  {
                    v256 = v257 + 1;
                    goto LABEL_470;
                  }
                }
              }
              else
              {
LABEL_470:
                v259 = (uint64_t *)operator new(0x28uLL);
                v259[4] = v254;
                *v259 = 0;
                v259[1] = 0;
                v259[2] = (uint64_t)v257;
                *v256 = v259;
                if (*v387)
                {
                  v387 = (uint64_t **)*v387;
                  v259 = *v256;
                }
                v260 = v388;
                *((_BYTE *)v259 + 24) = v259 == v388;
                if (v259 != v260)
                {
                  do
                  {
                    v261 = v259[2];
                    if (*(_BYTE *)(v261 + 24))
                      break;
                    v262 = *(uint64_t **)(v261 + 16);
                    v263 = *v262;
                    if (*v262 == v261)
                    {
                      v266 = v262[1];
                      if (!v266 || (v267 = *(unsigned __int8 *)(v266 + 24), v264 = (_BYTE *)(v266 + 24), v267))
                      {
                        if (*(uint64_t **)v261 == v259)
                        {
                          *(_BYTE *)(v261 + 24) = 1;
                          *((_BYTE *)v262 + 24) = 0;
                          v270 = *(_QWORD *)(v261 + 8);
                          *v262 = v270;
                          if (v270)
                            goto LABEL_486;
                        }
                        else
                        {
                          v268 = *(uint64_t **)(v261 + 8);
                          v269 = *v268;
                          *(_QWORD *)(v261 + 8) = *v268;
                          if (v269)
                          {
                            *(_QWORD *)(v269 + 16) = v261;
                            v262 = *(uint64_t **)(v261 + 16);
                          }
                          v268[2] = (uint64_t)v262;
                          *(_QWORD *)(*(_QWORD *)(v261 + 16) + 8 * (**(_QWORD **)(v261 + 16) != v261)) = v268;
                          *v268 = v261;
                          *(_QWORD *)(v261 + 16) = v268;
                          v262 = (uint64_t *)v268[2];
                          v261 = *v262;
                          *((_BYTE *)v268 + 24) = 1;
                          *((_BYTE *)v262 + 24) = 0;
                          v270 = *(_QWORD *)(v261 + 8);
                          *v262 = v270;
                          if (v270)
LABEL_486:
                            *(_QWORD *)(v270 + 16) = v262;
                        }
                        *(_QWORD *)(v261 + 16) = v262[2];
                        *(_QWORD *)(v262[2] + 8 * (*(_QWORD *)v262[2] != (_QWORD)v262)) = v261;
                        *(_QWORD *)(v261 + 8) = v262;
LABEL_492:
                        v262[2] = v261;
                        break;
                      }
                    }
                    else if (!v263 || (v265 = *(unsigned __int8 *)(v263 + 24), v264 = (_BYTE *)(v263 + 24), v265))
                    {
                      if (*(uint64_t **)v261 == v259)
                      {
                        v278 = v259[1];
                        *(_QWORD *)v261 = v278;
                        if (v278)
                        {
                          *(_QWORD *)(v278 + 16) = v261;
                          v262 = *(uint64_t **)(v261 + 16);
                        }
                        v259[2] = (uint64_t)v262;
                        *(_QWORD *)(*(_QWORD *)(v261 + 16) + 8 * (**(_QWORD **)(v261 + 16) != v261)) = v259;
                        v259[1] = v261;
                        *(_QWORD *)(v261 + 16) = v259;
                        v262 = (uint64_t *)v259[2];
                        *((_BYTE *)v259 + 24) = 1;
                        *((_BYTE *)v262 + 24) = 0;
                        v261 = v262[1];
                        v271 = *(uint64_t **)v261;
                        v262[1] = *(_QWORD *)v261;
                        if (v271)
LABEL_490:
                          v271[2] = (uint64_t)v262;
                      }
                      else
                      {
                        *(_BYTE *)(v261 + 24) = 1;
                        *((_BYTE *)v262 + 24) = 0;
                        v261 = v262[1];
                        v271 = *(uint64_t **)v261;
                        v262[1] = *(_QWORD *)v261;
                        if (v271)
                          goto LABEL_490;
                      }
                      *(_QWORD *)(v261 + 16) = v262[2];
                      *(_QWORD *)(v262[2] + 8 * (*(_QWORD *)v262[2] != (_QWORD)v262)) = v261;
                      *(_QWORD *)v261 = v262;
                      goto LABEL_492;
                    }
                    *(_BYTE *)(v261 + 24) = 1;
                    v259 = v262;
                    *((_BYTE *)v262 + 24) = v262 == v260;
                    *v264 = 1;
                  }
                  while (v262 != v260);
                }
                ++v389;
                v254 = *v252;
              }
              v272 = (std::__shared_weak_count *)v252[1];
              v332 = v254;
              v333 = v272;
              if (v272)
              {
                v273 = (unint64_t *)&v272->__shared_owners_;
                do
                  v274 = __ldxr(v273);
                while (__stxr(v274 + 1, v273));
              }
              MIL::Builder::BlockBuilder::RemoveOperation();
              v275 = v333;
              if (v333)
              {
                v276 = (unint64_t *)&v333->__shared_owners_;
                do
                  v277 = __ldaxr(v276);
                while (__stlxr(v277 - 1, v276));
                if (!v277)
                {
                  ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
                  std::__shared_weak_count::__release_weak(v275);
                }
              }
              v252 += 2;
            }
            v279 = (std::__shared_weak_count *)v375;
            if (v375)
            {
              v280 = (unint64_t *)((char *)v375 + 8);
              do
                v281 = __ldaxr(v280);
              while (__stlxr(v281 - 1, v280));
              if (!v281)
              {
                ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
                std::__shared_weak_count::__release_weak(v279);
              }
            }
            goto LABEL_523;
          }
          v110 = MIL::Builder::BlockBuilder::GetOperationsByInput();
          std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>::unordered_set((uint64_t)&v377, v110);
          v111 = (_QWORD *)v377.__r_.__value_.__r.__words[2];
          if (v377.__r_.__value_.__r.__words[2])
          {
            do
            {
              if (SHIBYTE(v379.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v376, v379.__r_.__value_.__l.__data_, v379.__r_.__value_.__l.__size_);
              else
                v376 = v379;
              MIL::Builder::OperationBuilder::RenameArgument();
              if (SHIBYTE(v376.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v376.__r_.__value_.__l.__data_);
              v111 = (_QWORD *)*v111;
            }
            while (v111);
          }
          v112 = 0;
          while (2)
          {
            MIL::Builder::BlockBuilder::GetOutputNames(v390);
            v114 = v375;
            v115 = (void **)v374;
            if (v374)
            {
              if (v375 == v374)
              {
                v117 = v375;
              }
              else
              {
                v116 = (void **)v375;
                do
                {
                  if (*((char *)v116 - 1) < 0)
                    operator delete(*(v116 - 3));
                  v116 -= 3;
                }
                while (v116 != v115);
                v117 = v374;
              }
              v375 = v115;
              operator delete(v117);
            }
            if (v112 < 0xAAAAAAAAAAAAAAABLL * ((v114 - (_BYTE *)v115) >> 3))
            {
              MIL::Builder::BlockBuilder::GetOutputNames(v390);
              v118 = v374;
              v119 = (char *)v374 + 24 * v112;
              if ((v378.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v120 = HIBYTE(v378.__r_.__value_.__r.__words[2]);
              else
                v120 = v378.__r_.__value_.__l.__size_;
              v121 = v119[23];
              v122 = (char)v121;
              if ((v121 & 0x80u) != 0)
                v121 = *((_QWORD *)v119 + 1);
              if (v120 == v121)
              {
                if (v122 >= 0)
                  v123 = (unsigned __int8 *)v374 + 24 * v112;
                else
                  v123 = *(unsigned __int8 **)v119;
                if ((*((_BYTE *)&v378.__r_.__value_.__s + 23) & 0x80) != 0)
                {
                  v131 = memcmp(v378.__r_.__value_.__l.__data_, v123, v378.__r_.__value_.__l.__size_) == 0;
                  v132 = (void **)v375;
                  v113 = v118;
                  if (v375 == v118)
                    goto LABEL_182;
                }
                else if (*((_BYTE *)&v378.__r_.__value_.__s + 23))
                {
                  v124 = HIBYTE(v378.__r_.__value_.__r.__words[2]) - 1;
                  v125 = &v378;
                  do
                  {
                    v127 = v125->__r_.__value_.__s.__data_[0];
                    v125 = (std::string *)((char *)v125 + 1);
                    v126 = v127;
                    v129 = *v123++;
                    v128 = v129;
                    v39 = v124-- != 0;
                    v130 = v39;
                    v131 = v126 == v128;
                  }
                  while (v126 == v128 && (v130 & 1) != 0);
                  if (!v374)
                  {
                    if (v126 == v128)
                    {
LABEL_224:
                      MIL::Builder::BlockBuilder::ReplaceOutput();
                      v133 = (unint64_t *)__p;
                      v134 = (unint64_t *)v381;
                      while (v133 != v134)
                      {
                        v135 = *v133;
                        v136 = v388;
                        v137 = &v388;
                        v138 = &v388;
                        if (v388)
                        {
                          while (1)
                          {
                            while (1)
                            {
                              v138 = (uint64_t **)v136;
                              v139 = v136[4];
                              if (v135 >= v139)
                                break;
                              v136 = *v138;
                              v137 = v138;
                              if (!*v138)
                                goto LABEL_234;
                            }
                            if (v139 >= v135)
                              break;
                            v136 = v138[1];
                            if (!v136)
                            {
                              v137 = v138 + 1;
                              goto LABEL_234;
                            }
                          }
                        }
                        else
                        {
LABEL_234:
                          v140 = (uint64_t *)operator new(0x28uLL);
                          v140[4] = v135;
                          *v140 = 0;
                          v140[1] = 0;
                          v140[2] = (uint64_t)v138;
                          *v137 = v140;
                          if (*v387)
                          {
                            v387 = (uint64_t **)*v387;
                            v140 = *v137;
                          }
                          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v388, v140);
                          ++v389;
                          v135 = *v133;
                        }
                        v141 = (std::__shared_weak_count *)v133[1];
                        v372 = v135;
                        v373 = v141;
                        if (v141)
                        {
                          v142 = (unint64_t *)&v141->__shared_owners_;
                          do
                            v143 = __ldxr(v142);
                          while (__stxr(v143 + 1, v142));
                        }
                        MIL::Builder::BlockBuilder::RemoveOperation();
                        v144 = v373;
                        if (v373)
                        {
                          v145 = (unint64_t *)&v373->__shared_owners_;
                          do
                            v146 = __ldaxr(v145);
                          while (__stlxr(v146 - 1, v145));
                          if (!v146)
                          {
                            ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                            std::__shared_weak_count::__release_weak(v144);
                          }
                        }
                        v133 += 2;
                      }
                      MIL::Builder::BlockBuilder::GetOperations(v390);
                      v174 = (MIL::Builder::OperationBuilder **)v374;
                      v175 = (MIL::Builder::OperationBuilder **)v375;
                      if (v374 == v375)
                      {
                        if (v374)
                          goto LABEL_400;
                        goto LABEL_520;
                      }
                      while (2)
                      {
                        v176 = *v174;
                        v177 = (std::__shared_weak_count *)v174[1];
                        v370 = *v174;
                        v371 = v177;
                        if (v177)
                        {
                          v178 = (unint64_t *)&v177->__shared_owners_;
                          do
                            v179 = __ldxr(v178);
                          while (__stxr(v179 + 1, v178));
                        }
                        v180 = 0;
LABEL_303:
                        if (v180 >= MIL::Builder::OperationBuilder::GetNumOutputs(v176))
                        {
                          v190 = v371;
                          if (v371)
                          {
                            v191 = (unint64_t *)&v371->__shared_owners_;
                            do
                              v192 = __ldaxr(v191);
                            while (__stlxr(v192 - 1, v191));
                            if (!v192)
                            {
                              ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                              std::__shared_weak_count::__release_weak(v190);
                            }
                          }
                          v174 += 2;
                          if (v174 != v175)
                            continue;
                          v174 = (MIL::Builder::OperationBuilder **)v374;
                          if (v374)
                          {
LABEL_400:
                            v222 = (MIL::Builder::OperationBuilder **)v375;
                            v223 = v174;
                            if (v375 != v174)
                            {
                              do
                              {
                                v224 = (std::__shared_weak_count *)*(v222 - 1);
                                if (v224)
                                {
                                  v225 = (unint64_t *)&v224->__shared_owners_;
                                  do
                                    v226 = __ldaxr(v225);
                                  while (__stlxr(v226 - 1, v225));
                                  if (!v226)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                                    std::__shared_weak_count::__release_weak(v224);
                                  }
                                }
                                v222 -= 2;
                              }
                              while (v222 != v174);
                              v223 = v374;
                            }
                            v375 = v174;
                            operator delete(v223);
                          }
LABEL_520:
                          v282 = (_QWORD *)v377.__r_.__value_.__r.__words[2];
                          if (v377.__r_.__value_.__r.__words[2])
                          {
                            do
                            {
                              v285 = v282;
                              v282 = (_QWORD *)*v282;
                              v286 = (std::__shared_weak_count *)v285[3];
                              if (v286)
                              {
                                v287 = (unint64_t *)&v286->__shared_owners_;
                                do
                                  v288 = __ldaxr(v287);
                                while (__stlxr(v288 - 1, v287));
                                if (!v288)
                                {
                                  ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
                                  std::__shared_weak_count::__release_weak(v286);
                                }
                              }
                              operator delete(v285);
                            }
                            while (v282);
                          }
                          v283 = (void *)v377.__r_.__value_.__r.__words[0];
                          v377.__r_.__value_.__r.__words[0] = 0;
                          if (v283)
                            operator delete(v283);
LABEL_523:
                          if ((SHIBYTE(v378.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                          {
                            if ((SHIBYTE(v379.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                              goto LABEL_525;
LABEL_534:
                            operator delete(v379.__r_.__value_.__l.__data_);
                            v284 = (_QWORD *)v330;
                            if (!(_QWORD)v330)
                              goto LABEL_535;
                            do
                            {
LABEL_541:
                              v292 = v284;
                              v284 = (_QWORD *)*v284;
                              v293 = (std::__shared_weak_count *)v292[3];
                              if (v293)
                              {
                                v294 = (unint64_t *)&v293->__shared_owners_;
                                do
                                  v295 = __ldaxr(v294);
                                while (__stlxr(v295 - 1, v294));
                                if (!v295)
                                {
                                  ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
                                  std::__shared_weak_count::__release_weak(v293);
                                }
                              }
                              operator delete(v292);
                            }
                            while (v284);
                            goto LABEL_535;
                          }
                          operator delete(v378.__r_.__value_.__l.__data_);
                          if (SHIBYTE(v379.__r_.__value_.__r.__words[2]) < 0)
                            goto LABEL_534;
LABEL_525:
                          v284 = (_QWORD *)v330;
                          if ((_QWORD)v330)
                            goto LABEL_541;
LABEL_535:
                          v289 = v329[0];
                          v329[0] = 0;
                          if (v289)
                            operator delete(v289);
                          v290 = (char *)__p;
                          if (__p)
                          {
                            v291 = v381;
                            v20 = __p;
                            if (v381 != __p)
                            {
                              do
                              {
                                v296 = (std::__shared_weak_count *)*((_QWORD *)v291 - 1);
                                if (v296)
                                {
                                  v297 = (unint64_t *)&v296->__shared_owners_;
                                  do
                                    v298 = __ldaxr(v297);
                                  while (__stlxr(v298 - 1, v297));
                                  if (!v298)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
                                    std::__shared_weak_count::__release_weak(v296);
                                  }
                                }
                                v291 -= 16;
                              }
                              while (v291 != v290);
                              v20 = __p;
                            }
                            v381 = v290;
                            operator delete(v20);
                          }
                          goto LABEL_22;
                        }
                        break;
                      }
                      v181 = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetOutput(v370);
                      v182 = (unsigned __int8 *)MIL::Builder::Variable::GetName(v181);
                      v183 = v182[23];
                      if ((v183 & 0x80u) == 0)
                        v184 = v182[23];
                      else
                        v184 = *((_QWORD *)v182 + 1);
                      v185 = HIBYTE(v379.__r_.__value_.__r.__words[2]);
                      if ((v379.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                        v185 = v379.__r_.__value_.__l.__size_;
                      if (v184 == v185)
                      {
                        if ((v379.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v186 = &v379;
                        else
                          v186 = (std::string *)v379.__r_.__value_.__r.__words[0];
                        if ((v183 & 0x80) != 0)
                        {
                          if (!memcmp(*(const void **)v182, v186, *((_QWORD *)v182 + 1)))
                            goto LABEL_317;
                        }
                        else
                        {
                          if (v182[23])
                          {
                            while (*v182 == v186->__r_.__value_.__s.__data_[0])
                            {
                              ++v182;
                              v186 = (std::string *)((char *)v186 + 1);
                              if (!--v183)
                                goto LABEL_317;
                            }
                            goto LABEL_302;
                          }
LABEL_317:
                          if (SHIBYTE(v378.__r_.__value_.__r.__words[2]) < 0)
                            std::string::__init_copy_ctor_external(&v368, v378.__r_.__value_.__l.__data_, v378.__r_.__value_.__l.__size_);
                          else
                            v368 = v378;
                          MIL::Builder::OperationBuilder::RenameOutput();
                          v187 = v369;
                          if (!v369)
                            goto LABEL_324;
                          v188 = (unint64_t *)&v369->__shared_owners_;
                          do
                            v189 = __ldaxr(v188);
                          while (__stlxr(v189 - 1, v188));
                          if (!v189)
                          {
                            ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
                            std::__shared_weak_count::__release_weak(v187);
                            if (SHIBYTE(v368.__r_.__value_.__r.__words[2]) < 0)
LABEL_325:
                              operator delete(v368.__r_.__value_.__l.__data_);
                          }
                          else
                          {
LABEL_324:
                            if (SHIBYTE(v368.__r_.__value_.__r.__words[2]) < 0)
                              goto LABEL_325;
                          }
                        }
                      }
LABEL_302:
                      ++v180;
                      v176 = v370;
                      goto LABEL_303;
                    }
                    goto LABEL_183;
                  }
                  v132 = (void **)v375;
                  v113 = v374;
                  if (v375 == v374)
                  {
LABEL_182:
                    v375 = v118;
                    operator delete(v113);
                    if (v131)
                      goto LABEL_224;
LABEL_183:
                    ++v112;
                    continue;
                  }
                }
                else
                {
                  v131 = 1;
                  v132 = (void **)v375;
                  v113 = v374;
                  if (v375 == v374)
                    goto LABEL_182;
                }
              }
              else
              {
                v131 = 0;
                v132 = (void **)v375;
                v113 = v374;
                if (v375 == v374)
                  goto LABEL_182;
              }
              do
              {
                if (*((char *)v132 - 1) < 0)
                  operator delete(*(v132 - 3));
                v132 -= 3;
              }
              while (v132 != v118);
              v113 = v374;
              goto LABEL_182;
            }
            break;
          }
          v147 = (unint64_t *)__p;
          v148 = (unint64_t *)v381;
LABEL_247:
          if (v147 == v148)
            goto LABEL_520;
          v149 = *v147;
          v150 = v388;
          v151 = &v388;
          v152 = &v388;
          if (v388)
          {
            do
            {
              while (1)
              {
                v152 = (uint64_t **)v150;
                v153 = v150[4];
                if (v149 >= v153)
                  break;
                v150 = *v152;
                v151 = v152;
                if (!*v152)
                  goto LABEL_255;
              }
              if (v153 >= v149)
                goto LABEL_279;
              v150 = v152[1];
            }
            while (v150);
            v151 = v152 + 1;
          }
LABEL_255:
          v154 = (uint64_t *)operator new(0x28uLL);
          v154[4] = v149;
          *v154 = 0;
          v154[1] = 0;
          v154[2] = (uint64_t)v152;
          *v151 = v154;
          if (*v387)
          {
            v387 = (uint64_t **)*v387;
            v154 = *v151;
          }
          v155 = v388;
          *((_BYTE *)v154 + 24) = v154 == v388;
          if (v154 == v155)
            goto LABEL_278;
          while (1)
          {
            v156 = v154[2];
            if (*(_BYTE *)(v156 + 24))
              goto LABEL_278;
            v157 = *(uint64_t **)(v156 + 16);
            v158 = *v157;
            if (*v157 == v156)
            {
              v161 = v157[1];
              if (!v161 || (v162 = *(unsigned __int8 *)(v161 + 24), v159 = (_BYTE *)(v161 + 24), v162))
              {
                if (*(uint64_t **)v156 == v154)
                {
                  *(_BYTE *)(v156 + 24) = 1;
                  *((_BYTE *)v157 + 24) = 0;
                  v165 = *(_QWORD *)(v156 + 8);
                  *v157 = v165;
                  if (v165)
                    goto LABEL_271;
                }
                else
                {
                  v163 = *(uint64_t **)(v156 + 8);
                  v164 = *v163;
                  *(_QWORD *)(v156 + 8) = *v163;
                  if (v164)
                  {
                    *(_QWORD *)(v164 + 16) = v156;
                    v157 = *(uint64_t **)(v156 + 16);
                  }
                  v163[2] = (uint64_t)v157;
                  *(_QWORD *)(*(_QWORD *)(v156 + 16) + 8 * (**(_QWORD **)(v156 + 16) != v156)) = v163;
                  *v163 = v156;
                  *(_QWORD *)(v156 + 16) = v163;
                  v157 = (uint64_t *)v163[2];
                  v156 = *v157;
                  *((_BYTE *)v163 + 24) = 1;
                  *((_BYTE *)v157 + 24) = 0;
                  v165 = *(_QWORD *)(v156 + 8);
                  *v157 = v165;
                  if (v165)
LABEL_271:
                    *(_QWORD *)(v165 + 16) = v157;
                }
                *(_QWORD *)(v156 + 16) = v157[2];
                *(_QWORD *)(v157[2] + 8 * (*(_QWORD *)v157[2] != (_QWORD)v157)) = v156;
                *(_QWORD *)(v156 + 8) = v157;
LABEL_277:
                v157[2] = v156;
LABEL_278:
                ++v389;
                v149 = *v147;
LABEL_279:
                v167 = (std::__shared_weak_count *)v147[1];
                v366 = v149;
                v367 = v167;
                if (v167)
                {
                  v168 = (unint64_t *)&v167->__shared_owners_;
                  do
                    v169 = __ldxr(v168);
                  while (__stxr(v169 + 1, v168));
                }
                MIL::Builder::BlockBuilder::RemoveOperation();
                v170 = v367;
                if (v367)
                {
                  v171 = (unint64_t *)&v367->__shared_owners_;
                  do
                    v172 = __ldaxr(v171);
                  while (__stlxr(v172 - 1, v171));
                  if (!v172)
                  {
                    ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                    std::__shared_weak_count::__release_weak(v170);
                  }
                }
                v147 += 2;
                goto LABEL_247;
              }
            }
            else if (!v158 || (v160 = *(unsigned __int8 *)(v158 + 24), v159 = (_BYTE *)(v158 + 24), v160))
            {
              if (*(uint64_t **)v156 == v154)
              {
                v173 = v154[1];
                *(_QWORD *)v156 = v173;
                if (v173)
                {
                  *(_QWORD *)(v173 + 16) = v156;
                  v157 = *(uint64_t **)(v156 + 16);
                }
                v154[2] = (uint64_t)v157;
                *(_QWORD *)(*(_QWORD *)(v156 + 16) + 8 * (**(_QWORD **)(v156 + 16) != v156)) = v154;
                v154[1] = v156;
                *(_QWORD *)(v156 + 16) = v154;
                v157 = (uint64_t *)v154[2];
                *((_BYTE *)v154 + 24) = 1;
                *((_BYTE *)v157 + 24) = 0;
                v156 = v157[1];
                v166 = *(uint64_t **)v156;
                v157[1] = *(_QWORD *)v156;
                if (v166)
LABEL_275:
                  v166[2] = (uint64_t)v157;
              }
              else
              {
                *(_BYTE *)(v156 + 24) = 1;
                *((_BYTE *)v157 + 24) = 0;
                v156 = v157[1];
                v166 = *(uint64_t **)v156;
                v157[1] = *(_QWORD *)v156;
                if (v166)
                  goto LABEL_275;
              }
              *(_QWORD *)(v156 + 16) = v157[2];
              *(_QWORD *)(v157[2] + 8 * (*(_QWORD *)v157[2] != (_QWORD)v157)) = v156;
              *(_QWORD *)v156 = v157;
              goto LABEL_277;
            }
            *(_BYTE *)(v156 + 24) = 1;
            v154 = v157;
            *((_BYTE *)v157 + 24) = v157 == v155;
            *v159 = 1;
            if (v157 == v155)
              goto LABEL_278;
          }
        }
LABEL_22:
        v18 += 2;
      }
      while (v18 != v19);
      v18 = v383;
      if (v383)
      {
LABEL_553:
        v299 = v384;
        v300 = v18;
        if (v384 != v18)
        {
          do
          {
            v301 = (std::__shared_weak_count *)*(v299 - 1);
            if (v301)
            {
              v302 = (unint64_t *)&v301->__shared_owners_;
              do
                v303 = __ldaxr(v302);
              while (__stlxr(v303 - 1, v302));
              if (!v303)
              {
                ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
                std::__shared_weak_count::__release_weak(v301);
              }
            }
            v299 -= 2;
          }
          while (v299 != v18);
          v300 = v383;
        }
        v384 = v18;
        operator delete(v300);
      }
LABEL_563:
      MIL::Builder::BlockBuilder::GetOutputNames(v390);
      v305 = (void **)v329[0];
      v304 = (void **)v329[1];
      if (v329[0] != v329[1])
      {
        do
        {
          MIL::Builder::BlockBuilder::RemoveOutput();
          v305 += 3;
        }
        while (v305 != v304);
        v305 = (void **)v329[0];
      }
      if (v305)
      {
        v306 = (void **)v329[1];
        v307 = v305;
        if (v329[1] != v305)
        {
          do
          {
            if (*((char *)v306 - 1) < 0)
              operator delete(*(v306 - 3));
            v306 -= 3;
          }
          while (v306 != v305);
          v307 = (void **)v329[0];
        }
        v329[1] = v305;
        operator delete(v307);
      }
      v309 = (void **)v385;
      v308 = v386;
      if (v385 != (char *)v386)
      {
        do
        {
          MIL::Builder::BlockBuilder::AddOutput();
          v309 += 3;
        }
        while (v309 != v308);
        v309 = (void **)v385;
      }
      if (v309)
      {
        v310 = v386;
        v311 = v309;
        if (v386 != v309)
        {
          do
          {
            if (*((char *)v310 - 1) < 0)
              operator delete(*(v310 - 3));
            v310 -= 3;
          }
          while (v310 != v309);
          v311 = v385;
        }
        v386 = v309;
        operator delete(v311);
      }
      std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v387, v388);
      v312 = v391;
      if (!v391)
        goto LABEL_589;
      v313 = (unint64_t *)&v391->__shared_owners_;
      do
        v314 = __ldaxr(v313);
      while (__stlxr(v314 - 1, v313));
      if (!v314)
      {
        ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
        std::__shared_weak_count::__release_weak(v312);
        v315 = v392;
        if (v392)
        {
LABEL_590:
          v316 = (unint64_t *)&v315->__shared_owners_;
          do
            v317 = __ldaxr(v316);
          while (__stlxr(v317 - 1, v316));
          if (!v317)
          {
            ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
            std::__shared_weak_count::__release_weak(v315);
          }
        }
      }
      else
      {
LABEL_589:
        v315 = v392;
        if (v392)
          goto LABEL_590;
      }
      v15 = v328 + 24;
    }
    while (v328 + 24 != v327);
  }
LABEL_596:
  MIL::Builder::ProgramBuilder::CreateProgram(v397);
  if (((*((uint64_t (**)(void **))v329[1] + 2))(&v329[1]) & 1) == 0)
  {
    v324 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    MIL::MILResult::GetMessage((MIL::MILResult *)&v329[1]);
    std::operator+<char>();
    std::runtime_error::runtime_error(v324, &v377);
    __cxa_throw(v324, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v318 = v329[0];
  v329[0] = 0;
  *v325 = v318;
  MEMORY[0x19401B338](&v329[1]);
  v319 = v329[0];
  v329[0] = 0;
  if (v319)
    (*(void (**)(void *))(*(_QWORD *)v319 + 8))(v319);
  if (SHIBYTE(v394) < 0)
    operator delete(__dst[0]);
  result = v397;
  v397 = 0;
  if (result)
    return (MIL::Builder::ProgramBuilder *)(*(uint64_t (**)(MIL::Builder::ProgramBuilder *))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1910A6754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  uint64_t v20;

  if (SLOBYTE(STACK[0x2AF]) < 0)
  {
    operator delete((void *)STACK[0x298]);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      MEMORY[0x19401B338](v15);
      if (a15)
        (*(void (**)(void *))(*(_QWORD *)a15 + 8))(a15);
      if (*(char *)(v18 - 113) < 0)
      {
        operator delete(*(void **)(v18 - 136));
        v20 = *(_QWORD *)(v18 - 96);
        *(_QWORD *)(v18 - 96) = 0;
        if (v20)
          goto LABEL_10;
      }
      else
      {
        v20 = *(_QWORD *)(v18 - 96);
        *(_QWORD *)(v18 - 96) = 0;
        if (v20)
        {
LABEL_10:
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          _Unwind_Resume(a1);
        }
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

BOOL Espresso::AOT::HasFlexibleShape()
{
  unint64_t *p_shared_owners;
  unint64_t v1;
  char *__p;
  uint64_t v4;
  std::__shared_weak_count *v5;

  __p = (char *)operator new(0x20uLL);
  strcpy(__p, "FlexibleShapeInformation");
  MIL::IRObject::TryGetAttributeSharedPtr();
  operator delete(__p);
  if (!v5)
    return v4 != 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v1 = __ldaxr(p_shared_owners);
  while (__stlxr(v1 - 1, p_shared_owners));
  if (v1)
    return v4 != 0;
  ((void (*)())v5->__on_zero_shared)();
  std::__shared_weak_count::__release_weak(v5);
  return v4 != 0;
}

void sub_1910A6F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL Espresso::AOT::HasFlexibleShapeWithEnumeratedConfig(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  MIL::Attributes::FlexibleShapeInfo *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  if (!Espresso::AOT::HasFlexibleShape())
    return 0;
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v2 + 48))(&v9);
  MIL::Attributes::FlexibleShapeInfo::Make();
  v3 = *(_QWORD *)(MIL::Attributes::FlexibleShapeInfo::GetEnumeratedShapes(v8) + 24) != 0;
  if (v8)
  {
    MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v8);
    MEMORY[0x19401CD90]();
  }
  v4 = v10;
  if (!v10)
    return v3;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return v3;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v3;
}

void sub_1910A705C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  MIL::Attributes::FlexibleShapeInfo *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, MIL::Attributes::FlexibleShapeInfo *);
  std::unique_ptr<MIL::Attributes::FlexibleShapeInfo>::~unique_ptr[abi:ne180100]((MIL::Attributes::FlexibleShapeInfo **)va);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1910A7078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL Espresso::AOT::HasFlexibleShapeWithRangeConfig(uint64_t a1)
{
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;
  MIL::Attributes::FlexibleShapeInfo *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  if (!Espresso::AOT::HasFlexibleShape())
    return 0;
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v2 + 48))(&v12);
  MIL::Attributes::FlexibleShapeInfo::Make();
  MIL::Attributes::FlexibleShapeInfo::TryGetRangeShapes(v11);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)())v10->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v11);
    MEMORY[0x19401CD90]();
  }
  v5 = v13;
  if (!v13)
    return v9 != 0;
  v6 = (unint64_t *)&v13->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return v9 != 0;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return v9 != 0;
}

void sub_1910A71C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  MIL::Attributes::FlexibleShapeInfo *v5;
  va_list va;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, MIL::Attributes::FlexibleShapeInfo *);
  std::unique_ptr<MIL::Attributes::FlexibleShapeInfo>::~unique_ptr[abi:ne180100]((MIL::Attributes::FlexibleShapeInfo **)va);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1910A71DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

MIL::Builder::ProgramBuilder *Espresso::AOT::AddTotalSizeAttr@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *OpsetName;
  unint64_t v10;
  void *v11;
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  unint64_t v17;
  size_t v18;
  const char *v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t Function;
  uint64_t v24;
  uint64_t v25;
  MIL::IRObject **v26;
  MIL::IRObject **v27;
  MIL::IRObject *v28;
  uint64_t v29;
  _QWORD *Attributes;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  unsigned __int16 *v37;
  int v38;
  uint64_t v39;
  unsigned __int16 *v40;
  int v41;
  int v42;
  BOOL v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t i;
  MIL::IRValueType *v49;
  const MIL::IRValueType *v50;
  MIL::IRTensorValueType *v51;
  unint64_t v52;
  MIL::IRMemoryLayoutValueType *v53;
  MIL::IRTensorBufferValueType *v54;
  int64_t v55;
  _QWORD *v56;
  uint64_t Name;
  __int128 v58;
  MIL::IRValueType *v59;
  const MIL::IRValueType *v60;
  MIL::IRTensorValueType *v61;
  unint64_t Rank;
  MIL::IRMemoryLayoutValueType *v63;
  MIL::IRTensorBufferValueType *v64;
  int64_t v65;
  uint64_t ArgumentName;
  __int128 v67;
  _QWORD *v68;
  _QWORD *v69;
  const char *v70;
  unint64_t v71;
  size_t v72;
  const char *v73;
  void **v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  char *v80;
  unint64_t NumOperations;
  unint64_t v82;
  uint64_t v83;
  int64x2_t *v84;
  uint64_t v85;
  uint64_t *v86;
  char *v87;
  char **v88;
  _OWORD *v89;
  _anonymous_namespace_ *v90;
  MIL::MILContext *v91;
  uint64_t *v92;
  uint64_t TypeWithTotalSizeAttr;
  char *v94;
  char **v95;
  char **v96;
  char v97;
  std::string::size_type size;
  std::string *v99;
  char *v100;
  char *v101;
  char *v102;
  int v103;
  size_t v104;
  char *v105;
  size_t v106;
  int v107;
  _BOOL4 v108;
  int v109;
  _BOOL4 v110;
  char *v111;
  std::string *v112;
  char *v113;
  _QWORD *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  _BYTE *v118;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  int64_t v125;
  char *v126;
  char **v127;
  char **v128;
  std::string::size_type v129;
  std::string *v130;
  char *v131;
  char *v132;
  char *v133;
  int v134;
  size_t v135;
  char *v136;
  size_t v137;
  int v138;
  _BOOL4 v139;
  int v140;
  _BOOL4 v141;
  char *v142;
  std::string *v143;
  char *v144;
  uint64_t v145;
  _BYTE *v146;
  int v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  char *v151;
  _QWORD *v152;
  _QWORD *v153;
  uint64_t v154;
  char **v155;
  char *v156;
  unint64_t v157;
  int64x2_t *v158;
  uint64_t v159;
  int64x2_t v160;
  _QWORD **v161;
  _QWORD *v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  MIL::IRNamedValueType **v169;
  uint64_t v170;
  __int128 **v171;
  __int128 *v172;
  __int128 *v173;
  std::__shared_weak_count *v174;
  MIL::IRNamedValueType *v175;
  MIL::IRNamedValueType **v176;
  uint64_t v177;
  _anonymous_namespace_ *v178;
  MIL::MILContext *Type;
  uint64_t *v180;
  __int128 v181;
  MIL::IRNamedValueType **v182;
  unint64_t *v183;
  unint64_t *v184;
  unint64_t v185;
  MIL::IRNamedValueType *v186;
  std::__shared_weak_count *v187;
  MIL::IRNamedValueType *v188;
  char *v189;
  MIL::IRNamedValueType **v190;
  MIL::IRNamedValueType **v191;
  char *v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  char *v197;
  MIL::IRNamedValueType **v198;
  __int128 v199;
  MIL::IRNamedValueType **v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  MIL::IRNamedValueType **v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t v208;
  char *v209;
  char *v210;
  __int128 v211;
  unint64_t *v212;
  unint64_t v213;
  char *v214;
  __int128 v215;
  MIL::IRNamedValueType **v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  MIL::IRNamedValueType *v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  MIL::IRNamedValueType *v233;
  MIL::IRNamedValueType **v234;
  MIL::IRNamedValueType **v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  void **v239;
  void **v240;
  void *v241;
  void *v242;
  MIL::Builder::ProgramBuilder *result;
  std::runtime_error *v244;
  std::runtime_error *exception;
  std::runtime_error *v246;
  int64x2_t v248;
  int64x2_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  _QWORD *v253;
  _QWORD *v254;
  _QWORD *v255;
  uint64_t v256;
  void *__p[2];
  void *v258[2];
  int v259;
  void *__dst[2];
  unint64_t v261;
  uint64_t v262;
  std::__shared_weak_count *v263;
  MIL::Builder::ProgramBuilder *v264;
  uint64_t v265;
  std::__shared_weak_count *v266;
  MIL::IRNamedValueType *v267;
  std::__shared_weak_count *v268;
  std::__shared_weak_count *v269;
  std::string v270;
  MIL::IRNamedValueType *v271;
  MIL::IRNamedValueType *v272;
  std::__shared_weak_count *v273;
  MIL::IRNamedValueType **v274;
  MIL::IRNamedValueType **v275;
  char *v276;
  int64x2_t *v277;
  int64x2_t *v278;
  __int8 *v279;
  std::string v280;
  int64_t v281;
  char **v282;
  char *v283;
  uint64_t v284;
  MIL::Builder::BlockBuilder *v285;
  std::__shared_weak_count *v286;
  std::__shared_weak_count *v287;
  void **v288;
  size_t v289;
  unint64_t v290;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 48))(&v262);
  v256 = a1;
  v5 = (E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *)MIL::Builder::ProgramBuilder::Make();
  v6 = v263;
  if (v263)
  {
    p_shared_owners = (unint64_t *)&v263->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  OpsetName = (E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *)E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::GetOpsetName(v5);
  v11 = (void *)v10;
  if (v10 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = OpsetName;
  if (v10 >= 0x17)
  {
    v14 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v14 = v10 | 7;
    v15 = v14 + 1;
    v13 = (void **)operator new(v14 + 1);
    __dst[1] = v11;
    v261 = v15 | 0x8000000000000000;
    __dst[0] = v13;
  }
  else
  {
    HIBYTE(v261) = v10;
    v13 = __dst;
    if (!v10)
    {
      LOBYTE(__dst[0]) = 0;
      v250 = a2[1];
      v251 = *a2;
      if (*a2 == v250)
        goto LABEL_373;
      goto LABEL_15;
    }
  }
  OpsetName = (E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *)memmove(v13, v12, (size_t)v11);
  *((_BYTE *)v11 + (_QWORD)v13) = 0;
  v250 = a2[1];
  v251 = *a2;
  if (*a2 == v250)
    goto LABEL_373;
LABEL_15:
  v248 = vdupq_n_s64(4uLL);
  v249 = vdupq_n_s64(2uLL);
  do
  {
    *(_OWORD *)__p = 0u;
    *(_OWORD *)v258 = 0u;
    v259 = 1065353216;
    v16 = E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::GetOpsetName(OpsetName);
    v18 = v17;
    if (v17 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v19 = v16;
    if (v17 >= 0x17)
    {
      v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17)
        v21 = v17 | 7;
      v22 = v21 + 1;
      v20 = (void **)operator new(v21 + 1);
      v289 = v18;
      v290 = v22 | 0x8000000000000000;
      v288 = v20;
    }
    else
    {
      HIBYTE(v290) = v17;
      v20 = (void **)&v288;
      if (!v17)
        goto LABEL_25;
    }
    memmove(v20, v19, v18);
LABEL_25:
    *((_BYTE *)v20 + v18) = 0;
    Function = MIL::IRProgram::GetFunction();
    v24 = (*(uint64_t (**)(uint64_t, void ***))(*(_QWORD *)Function + 64))(Function, &v288);
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 56))(v24);
    v26 = **(MIL::IRObject ****)v25;
    v27 = *(MIL::IRObject ***)(*(_QWORD *)v25 + 8);
    while (v26 != v27)
    {
      v28 = *v26;
      v29 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)*v26 + 64))(*v26);
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 128))(v29);
      if ((v25 & 1) == 0)
        goto LABEL_26;
      Attributes = (_QWORD *)MIL::IRObject::GetAttributes(v28);
      *((_BYTE *)&v280.__r_.__value_.__s + 23) = 8;
      strcpy((char *)&v280, "function");
      v31 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(Attributes, (uint64_t)&v280);
      if (!v31)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      MIL::IRValue::AsTensor((MIL::IRValue *)v31[5]);
      MIL::IRTensorValue::GetDataView<std::string>();
      if (!v32)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "index out of bounds");
        exception->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5008] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E2D352F0, MEMORY[0x1E0DE42B0]);
      }
      if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v280.__r_.__value_.__l.__data_);
      v33 = MIL::IRProgram::GetFunction();
      v34 = (_QWORD *)MIL::IRObject::GetAttributes(v28);
      *((_BYTE *)&v280.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v280, "backend");
      v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v34, (uint64_t)&v280);
      if (!v35)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      MIL::IRValue::AsTensor((MIL::IRValue *)v35[5]);
      v25 = MIL::IRTensorValue::GetDataView<std::string>();
      if (!v36)
      {
        v244 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v244, "index out of bounds");
        v244->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5008] + 16);
        __cxa_throw(v244, (struct type_info *)off_1E2D352F0, MEMORY[0x1E0DE42B0]);
      }
      v37 = (unsigned __int16 *)v25;
      if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v280.__r_.__value_.__l.__data_);
        v38 = *((char *)v37 + 23);
        if ((v38 & 0x80000000) == 0)
        {
LABEL_37:
          v39 = v38;
          v40 = v37;
          if (v39 != 3)
            goto LABEL_26;
          goto LABEL_41;
        }
      }
      else
      {
        v38 = *(char *)(v25 + 23);
        if ((v38 & 0x80000000) == 0)
          goto LABEL_37;
      }
      v40 = *(unsigned __int16 **)v37;
      if (*((_QWORD *)v37 + 1) != 3)
        goto LABEL_26;
LABEL_41:
      v41 = *v40;
      v42 = *((unsigned __int8 *)v40 + 2);
      v43 = v41 == 28257 && v42 == 101;
      if (!v43)
        goto LABEL_26;
      v44 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 128))(v33);
      v45 = v44 + 1;
      v46 = (_QWORD *)*v44;
      if ((_QWORD *)*v44 != v44 + 1)
      {
        do
        {
          v59 = (MIL::IRValueType *)v46[7];
          if (E5Common::Utils::IsTensor((uint64_t)v59))
          {
            v61 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v59);
            Rank = MIL::IRTensorValueType::Rank(v61);
          }
          else
          {
            if (!E5Common::Utils::IsTensorBuffer(v59, v60))
              goto LABEL_74;
            v63 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(v59);
            v64 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v63);
            Rank = MIL::IRTensorBufferValueType::GetRank(v64);
          }
          if (Rank > 1)
            goto LABEL_74;
          if (v65 < 1)
            goto LABEL_74;
          ArgumentName = MIL::IROperation::GetArgumentName();
          if (*(char *)(ArgumentName + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v280, *(const std::string::value_type **)ArgumentName, *(_QWORD *)(ArgumentName + 8));
          }
          else
          {
            v67 = *(_OWORD *)ArgumentName;
            v280.__r_.__value_.__r.__words[2] = *(_QWORD *)(ArgumentName + 16);
            *(_OWORD *)&v280.__r_.__value_.__l.__data_ = v67;
          }
          v281 = v65;
          std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned long long>>((uint64_t)__p, (uint64_t)&v280, (uint64_t)&v280);
          if ((SHIBYTE(v280.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_74:
            v68 = (_QWORD *)v46[1];
            if (!v68)
              goto LABEL_78;
            goto LABEL_75;
          }
          operator delete(v280.__r_.__value_.__l.__data_);
          v68 = (_QWORD *)v46[1];
          if (!v68)
          {
            do
            {
LABEL_78:
              v69 = (_QWORD *)v46[2];
              v43 = *v69 == (_QWORD)v46;
              v46 = v69;
            }
            while (!v43);
            goto LABEL_63;
          }
          do
          {
LABEL_75:
            v69 = v68;
            v68 = (_QWORD *)*v68;
          }
          while (v68);
LABEL_63:
          v46 = v69;
        }
        while (v69 != v45);
      }
      (*(void (**)(char ***__return_ptr, uint64_t))(*(_QWORD *)v33 + 160))(&v282, v33);
      v47 = 0;
      for (i = 0; i < (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)v28 + 192))(v28); ++i)
      {
        if (i >= (v283 - (char *)v282) >> 3)
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        v49 = (MIL::IRValueType *)v282[i];
        if (E5Common::Utils::IsTensor((uint64_t)v49))
        {
          v51 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v49);
          v52 = MIL::IRTensorValueType::Rank(v51);
        }
        else
        {
          if (!E5Common::Utils::IsTensorBuffer(v49, v50))
            goto LABEL_48;
          v53 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(v49);
          v54 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v53);
          v52 = MIL::IRTensorBufferValueType::GetRank(v54);
        }
        if (v52 <= 1)
        {
          if (v55 >= 1)
          {
            v56 = (_QWORD *)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)v28 + 176))(v28);
            if (i >= (uint64_t)(v56[1] - *v56) >> 4)
              std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
            Name = MIL::IRNamedValueType::GetName(*(MIL::IRNamedValueType **)(*v56 + v47));
            if (*(char *)(Name + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v280, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
            }
            else
            {
              v58 = *(_OWORD *)Name;
              v280.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
              *(_OWORD *)&v280.__r_.__value_.__l.__data_ = v58;
            }
            v281 = v55;
            std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned long long>>((uint64_t)__p, (uint64_t)&v280, (uint64_t)&v280);
            if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v280.__r_.__value_.__l.__data_);
          }
        }
LABEL_48:
        v47 += 16;
      }
      v25 = (uint64_t)v282;
      if (v282)
      {
        v283 = (char *)v282;
        operator delete(v282);
      }
LABEL_26:
      v26 += 2;
    }
    if (SHIBYTE(v290) < 0)
      operator delete(v288);
    v70 = E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::GetOpsetName((E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *)v25);
    v72 = v71;
    if (v71 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v73 = v70;
    if (v71 >= 0x17)
    {
      v75 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v71 | 7) != 0x17)
        v75 = v71 | 7;
      v76 = v75 + 1;
      v74 = (void **)operator new(v75 + 1);
      v289 = v72;
      v290 = v76 | 0x8000000000000000;
      v288 = v74;
LABEL_92:
      memmove(v74, v73, v72);
      goto LABEL_93;
    }
    HIBYTE(v290) = v71;
    v74 = (void **)&v288;
    if (v71)
      goto LABEL_92;
LABEL_93:
    *((_BYTE *)v74 + v72) = 0;
    v77 = MIL::IRProgram::GetFunction();
    v252 = (*(uint64_t (**)(uint64_t, void ***))(*(_QWORD *)v77 + 64))(v77, &v288);
    MIL::Builder::ProgramBuilder::GetFunction();
    MIL::Builder::FunctionBuilder::GetBlock();
    v283 = 0;
    v284 = 0;
    v282 = &v283;
    v78 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 128))(v77);
    v79 = (_QWORD *)*v78;
    v254 = v78 + 1;
    if ((_QWORD *)*v78 != v78 + 1)
    {
LABEL_113:
      v89 = v79 + 4;
      if (std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(__p, (uint64_t)(v79 + 4)))
      {
        v90 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v256 + 40))(v256);
        v91 = (MIL::MILContext *)v79[7];
        v92 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(__p, (uint64_t)(v79 + 4));
        if (!v92)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        if (*((char *)v79 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(&v280, (const std::string::value_type *)v79[4], v79[5]);
        }
        else
        {
          *(_OWORD *)&v280.__r_.__value_.__l.__data_ = *v89;
          v280.__r_.__value_.__r.__words[2] = v79[6];
        }
        v281 = TypeWithTotalSizeAttr;
        v94 = v283;
        v95 = &v283;
        v96 = &v283;
        if (v283)
        {
          v97 = HIBYTE(v280.__r_.__value_.__r.__words[2]);
          if ((v280.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v280.__r_.__value_.__r.__words[2]);
          else
            size = v280.__r_.__value_.__l.__size_;
          if ((v280.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v99 = &v280;
          else
            v99 = (std::string *)v280.__r_.__value_.__r.__words[0];
          while (1)
          {
            while (1)
            {
              v95 = (char **)v94;
              v102 = (char *)*((_QWORD *)v94 + 4);
              v100 = v94 + 32;
              v101 = v102;
              v103 = v100[23];
              if (v103 >= 0)
                v104 = v100[23];
              else
                v104 = *((_QWORD *)v100 + 1);
              if (v103 >= 0)
                v105 = v100;
              else
                v105 = v101;
              if (v104 >= size)
                v106 = size;
              else
                v106 = v104;
              v107 = memcmp(v99, v105, v106);
              v108 = size < v104;
              if (v107)
                v108 = v107 < 0;
              if (!v108)
                break;
              v94 = *v95;
              v96 = v95;
              if (!*v95)
                goto LABEL_145;
            }
            v109 = memcmp(v105, v99, v106);
            v110 = v104 < size;
            if (v109)
              v110 = v109 < 0;
            if (!v110)
              break;
            v94 = v95[1];
            if (!v94)
            {
              v96 = v95 + 1;
              goto LABEL_145;
            }
          }
LABEL_194:
          v114 = v254;
          if (v97 < 0)
            goto LABEL_224;
          goto LABEL_225;
        }
LABEL_145:
        v111 = (char *)operator new(0x40uLL);
        v112 = (std::string *)(v111 + 32);
        if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v112, v280.__r_.__value_.__l.__data_, v280.__r_.__value_.__l.__size_);
          TypeWithTotalSizeAttr = v281;
        }
        else
        {
          *(_OWORD *)&v112->__r_.__value_.__l.__data_ = *(_OWORD *)&v280.__r_.__value_.__l.__data_;
          *((_QWORD *)v111 + 6) = *((_QWORD *)&v280.__r_.__value_.__l + 2);
        }
        *((_QWORD *)v111 + 7) = TypeWithTotalSizeAttr;
        *(_QWORD *)v111 = 0;
        *((_QWORD *)v111 + 1) = 0;
        *((_QWORD *)v111 + 2) = v95;
        *v96 = v111;
        if (*v282)
        {
          v282 = (char **)*v282;
          v111 = *v96;
        }
        v113 = v283;
        v111[24] = v111 == v283;
        v114 = v254;
        if (v111 != v113)
        {
          do
          {
            v115 = *((_QWORD *)v111 + 2);
            if (*(_BYTE *)(v115 + 24))
              break;
            v116 = *(char **)(v115 + 16);
            v117 = *(_QWORD *)v116;
            if (*(_QWORD *)v116 == v115)
            {
              v120 = *((_QWORD *)v116 + 1);
              if (!v120 || (v121 = *(unsigned __int8 *)(v120 + 24), v118 = (_BYTE *)(v120 + 24), v121))
              {
                if (*(char **)v115 == v111)
                  goto LABEL_210;
                goto LABEL_161;
              }
            }
            else if (!v117 || (v119 = *(unsigned __int8 *)(v117 + 24), v118 = (_BYTE *)(v117 + 24), v119))
            {
              if (*(char **)v115 == v111)
              {
                v150 = *((_QWORD *)v111 + 1);
                *(_QWORD *)v115 = v150;
                if (v150)
                {
                  *(_QWORD *)(v150 + 16) = v115;
                  v116 = *(char **)(v115 + 16);
                }
                *((_QWORD *)v111 + 2) = v116;
                *(_QWORD *)(*(_QWORD *)(v115 + 16) + 8 * (**(_QWORD **)(v115 + 16) != v115)) = v111;
                *((_QWORD *)v111 + 1) = v115;
                *(_QWORD *)(v115 + 16) = v111;
                v116 = (char *)*((_QWORD *)v111 + 2);
              }
              else
              {
                v111 = (char *)*((_QWORD *)v111 + 2);
              }
              v111[24] = 1;
              v116[24] = 0;
              v115 = *((_QWORD *)v116 + 1);
              v151 = *(char **)v115;
              *((_QWORD *)v116 + 1) = *(_QWORD *)v115;
              if (v151)
                *((_QWORD *)v151 + 2) = v116;
              *(_QWORD *)(v115 + 16) = *((_QWORD *)v116 + 2);
              *(_QWORD *)(*((_QWORD *)v116 + 2) + 8 * (**((_QWORD **)v116 + 2) != (_QWORD)v116)) = v115;
              *(_QWORD *)v115 = v116;
              goto LABEL_222;
            }
            *(_BYTE *)(v115 + 24) = 1;
            v111 = v116;
            v116[24] = v116 == v113;
            *v118 = 1;
          }
          while (v116 != v113);
        }
LABEL_223:
        ++v284;
        if ((*((_BYTE *)&v280.__r_.__value_.__s + 23) & 0x80) != 0)
          goto LABEL_224;
        goto LABEL_225;
      }
      if (*((char *)v79 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(&v280, (const std::string::value_type *)v79[4], v79[5]);
      }
      else
      {
        *(_OWORD *)&v280.__r_.__value_.__l.__data_ = *v89;
        v280.__r_.__value_.__r.__words[2] = v79[6];
      }
      v125 = v79[7];
      v281 = v125;
      v126 = v283;
      v127 = &v283;
      v128 = &v283;
      if (v283)
      {
        v97 = HIBYTE(v280.__r_.__value_.__r.__words[2]);
        if ((v280.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v129 = HIBYTE(v280.__r_.__value_.__r.__words[2]);
        else
          v129 = v280.__r_.__value_.__l.__size_;
        if ((v280.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v130 = &v280;
        else
          v130 = (std::string *)v280.__r_.__value_.__r.__words[0];
        do
        {
          while (1)
          {
            v127 = (char **)v126;
            v133 = (char *)*((_QWORD *)v126 + 4);
            v131 = v126 + 32;
            v132 = v133;
            v134 = v131[23];
            if (v134 >= 0)
              v135 = v131[23];
            else
              v135 = *((_QWORD *)v131 + 1);
            if (v134 >= 0)
              v136 = v131;
            else
              v136 = v132;
            if (v135 >= v129)
              v137 = v129;
            else
              v137 = v135;
            v138 = memcmp(v130, v136, v137);
            v139 = v129 < v135;
            if (v138)
              v139 = v138 < 0;
            if (!v139)
              break;
            v126 = *v127;
            v128 = v127;
            if (!*v127)
              goto LABEL_192;
          }
          v140 = memcmp(v136, v130, v137);
          v141 = v135 < v129;
          if (v140)
            v141 = v140 < 0;
          if (!v141)
            goto LABEL_194;
          v126 = v127[1];
        }
        while (v126);
        v128 = v127 + 1;
      }
LABEL_192:
      v142 = (char *)operator new(0x40uLL);
      v143 = (std::string *)(v142 + 32);
      if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v143, v280.__r_.__value_.__l.__data_, v280.__r_.__value_.__l.__size_);
        v125 = v281;
      }
      else
      {
        *(_OWORD *)&v143->__r_.__value_.__l.__data_ = *(_OWORD *)&v280.__r_.__value_.__l.__data_;
        *((_QWORD *)v142 + 6) = *((_QWORD *)&v280.__r_.__value_.__l + 2);
      }
      v114 = v254;
      *((_QWORD *)v142 + 7) = v125;
      *(_QWORD *)v142 = 0;
      *((_QWORD *)v142 + 1) = 0;
      *((_QWORD *)v142 + 2) = v127;
      *v128 = v142;
      if (*v282)
      {
        v282 = (char **)*v282;
        v142 = *v128;
      }
      v144 = v283;
      v142[24] = v142 == v283;
      if (v142 == v144)
        goto LABEL_223;
      while (1)
      {
        v115 = *((_QWORD *)v142 + 2);
        if (*(_BYTE *)(v115 + 24))
          goto LABEL_223;
        v116 = *(char **)(v115 + 16);
        v145 = *(_QWORD *)v116;
        if (*(_QWORD *)v116 == v115)
        {
          v148 = *((_QWORD *)v116 + 1);
          if (!v148 || (v149 = *(unsigned __int8 *)(v148 + 24), v146 = (_BYTE *)(v148 + 24), v149))
          {
            if (*(char **)v115 == v142)
            {
LABEL_210:
              *(_BYTE *)(v115 + 24) = 1;
              v116[24] = 0;
              v124 = *(_QWORD *)(v115 + 8);
              *(_QWORD *)v116 = v124;
              if (!v124)
                goto LABEL_165;
            }
            else
            {
LABEL_161:
              v122 = *(uint64_t **)(v115 + 8);
              v123 = *v122;
              *(_QWORD *)(v115 + 8) = *v122;
              if (v123)
              {
                *(_QWORD *)(v123 + 16) = v115;
                v116 = *(char **)(v115 + 16);
              }
              v122[2] = (uint64_t)v116;
              *(_QWORD *)(*(_QWORD *)(v115 + 16) + 8 * (**(_QWORD **)(v115 + 16) != v115)) = v122;
              *v122 = v115;
              *(_QWORD *)(v115 + 16) = v122;
              v116 = (char *)v122[2];
              v115 = *(_QWORD *)v116;
              *((_BYTE *)v122 + 24) = 1;
              v116[24] = 0;
              v124 = *(_QWORD *)(v115 + 8);
              *(_QWORD *)v116 = v124;
              if (!v124)
              {
LABEL_165:
                *(_QWORD *)(v115 + 16) = *((_QWORD *)v116 + 2);
                *(_QWORD *)(*((_QWORD *)v116 + 2) + 8 * (**((_QWORD **)v116 + 2) != (_QWORD)v116)) = v115;
                *(_QWORD *)(v115 + 8) = v116;
LABEL_222:
                *((_QWORD *)v116 + 2) = v115;
                goto LABEL_223;
              }
            }
            *(_QWORD *)(v124 + 16) = v116;
            goto LABEL_165;
          }
        }
        else if (!v145 || (v147 = *(unsigned __int8 *)(v145 + 24), v146 = (_BYTE *)(v145 + 24), v147))
        {
          if (*(char **)v115 == v142)
          {
            v154 = *((_QWORD *)v142 + 1);
            *(_QWORD *)v115 = v154;
            if (v154)
            {
              *(_QWORD *)(v154 + 16) = v115;
              v116 = *(char **)(v115 + 16);
            }
            *((_QWORD *)v142 + 2) = v116;
            *(_QWORD *)(*(_QWORD *)(v115 + 16) + 8 * (**(_QWORD **)(v115 + 16) != v115)) = v142;
            *((_QWORD *)v142 + 1) = v115;
            *(_QWORD *)(v115 + 16) = v142;
            v116 = (char *)*((_QWORD *)v142 + 2);
          }
          else
          {
            v142 = (char *)*((_QWORD *)v142 + 2);
          }
          v142[24] = 1;
          v116[24] = 0;
          v155 = (char **)*((_QWORD *)v116 + 1);
          v156 = *v155;
          *((_QWORD *)v116 + 1) = *v155;
          if (v156)
            *((_QWORD *)v156 + 2) = v116;
          v155[2] = (char *)*((_QWORD *)v116 + 2);
          *(_QWORD *)(*((_QWORD *)v116 + 2) + 8 * (**((_QWORD **)v116 + 2) != (_QWORD)v116)) = v155;
          *v155 = v116;
          *((_QWORD *)v116 + 2) = v155;
          ++v284;
          if ((*((_BYTE *)&v280.__r_.__value_.__s + 23) & 0x80) == 0)
            goto LABEL_225;
LABEL_224:
          operator delete(v280.__r_.__value_.__l.__data_);
LABEL_225:
          MIL::Builder::FunctionBuilder::RemoveInput();
          v152 = (_QWORD *)v79[1];
          if (v152)
          {
            do
            {
              v153 = v152;
              v152 = (_QWORD *)*v152;
            }
            while (v152);
          }
          else
          {
            do
            {
              v153 = (_QWORD *)v79[2];
              v43 = *v153 == (_QWORD)v79;
              v79 = v153;
            }
            while (!v43);
          }
          v79 = v153;
          if (v153 == v114)
            break;
          goto LABEL_113;
        }
        *(_BYTE *)(v115 + 24) = 1;
        v142 = v116;
        v116[24] = v116 == v144;
        *v146 = 1;
        if (v116 == v144)
          goto LABEL_223;
      }
    }
    v80 = (char *)v282;
    if (v282 != &v283)
    {
      do
      {
        if (v80[55] < 0)
          std::string::__init_copy_ctor_external(&v280, *((const std::string::value_type **)v80 + 4), *((_QWORD *)v80 + 5));
        else
          v280 = *(std::string *)(v80 + 32);
        MIL::Builder::FunctionBuilder::AddInput();
        if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v280.__r_.__value_.__l.__data_);
          v87 = (char *)*((_QWORD *)v80 + 1);
          if (v87)
          {
            do
            {
LABEL_107:
              v88 = (char **)v87;
              v87 = *(char **)v87;
            }
            while (v87);
            goto LABEL_99;
          }
        }
        else
        {
          v87 = (char *)*((_QWORD *)v80 + 1);
          if (v87)
            goto LABEL_107;
        }
        do
        {
          v88 = (char **)*((_QWORD *)v80 + 2);
          v43 = *v88 == v80;
          v80 = (char *)v88;
        }
        while (!v43);
LABEL_99:
        v80 = (char *)v88;
      }
      while (v88 != &v283);
    }
    NumOperations = MIL::Builder::BlockBuilder::GetNumOperations(v285);
    v82 = NumOperations;
    v277 = 0;
    v278 = 0;
    v279 = 0;
    if (NumOperations)
    {
      if (NumOperations >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v83 = 8 * NumOperations;
      v84 = (int64x2_t *)operator new(8 * NumOperations);
      v277 = v84;
      v279 = &v84->i8[8 * v82];
      bzero(v84, 8 * v82);
      v278 = (int64x2_t *)((char *)v84 + v83);
      if ((unint64_t)(v83 - 8) < 0x18)
      {
        v85 = 0;
        v86 = (uint64_t *)v84;
        goto LABEL_242;
      }
      v157 = ((unint64_t)(v83 - 8) >> 3) + 1;
      v85 = v157 & 0x3FFFFFFFFFFFFFFCLL;
      v86 = &v84->i64[v157 & 0x3FFFFFFFFFFFFFFCLL];
      v158 = v84 + 1;
      v159 = v157 & 0x3FFFFFFFFFFFFFFCLL;
      v160 = (int64x2_t)xmmword_191A82A80;
      do
      {
        v158[-1] = v160;
        *v158 = vaddq_s64(v160, v249);
        v160 = vaddq_s64(v160, v248);
        v158 += 2;
        v159 -= 4;
      }
      while (v159);
      if (v157 != v85)
      {
        do
LABEL_242:
          *v86++ = v85++;
        while (v86 != (uint64_t *)&v84->i8[v83]);
      }
    }
    else
    {
      v84 = 0;
    }
    MIL::Builder::BlockBuilder::RemoveOperations();
    v161 = (_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v252 + 56))(v252);
    v162 = (_QWORD *)**v161;
    v253 = (_QWORD *)(*v161)[1];
    if (v162 == v253)
    {
      if (v84)
        goto LABEL_245;
      goto LABEL_246;
    }
    while (2)
    {
      v255 = v162;
      v170 = *v162;
      v274 = 0;
      v275 = 0;
      v276 = 0;
      v171 = (__int128 **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v170 + 176))(v170);
      v173 = *v171;
      v172 = v171[1];
      if (*v171 != v172)
      {
        while (1)
        {
          v177 = MIL::IRNamedValueType::GetName(*(MIL::IRNamedValueType **)v173);
          if (!std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(__p, v177))
          {
            v182 = v275;
            if (v275 >= (MIL::IRNamedValueType **)v276)
            {
              v204 = v274;
              v205 = ((char *)v275 - (char *)v274) >> 4;
              v206 = v205 + 1;
              if ((unint64_t)(v205 + 1) >> 60)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v207 = v276 - (char *)v274;
              if ((v276 - (char *)v274) >> 3 > v206)
                v206 = v207 >> 3;
              if ((unint64_t)v207 >= 0x7FFFFFFFFFFFFFF0)
                v208 = 0xFFFFFFFFFFFFFFFLL;
              else
                v208 = v206;
              if (v208 >> 60)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v209 = (char *)operator new(16 * v208);
              v210 = &v209[16 * v205];
              v211 = *v173;
              *(_OWORD *)v210 = *v173;
              if (*((_QWORD *)&v211 + 1))
              {
                v212 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
                do
                  v213 = __ldxr(v212);
                while (__stxr(v213 + 1, v212));
                v182 = v275;
              }
              v214 = &v209[16 * v208];
              v176 = (MIL::IRNamedValueType **)(v210 + 16);
              if (v182 == v204)
              {
                v274 = (MIL::IRNamedValueType **)&v209[16 * v205];
                v275 = (MIL::IRNamedValueType **)(v210 + 16);
                v276 = &v209[16 * v208];
              }
              else
              {
                do
                {
                  v215 = *((_OWORD *)v182 - 1);
                  v182 -= 2;
                  *((_OWORD *)v210 - 1) = v215;
                  v210 -= 16;
                  *v182 = 0;
                  v182[1] = 0;
                }
                while (v182 != v204);
                v204 = v274;
                v216 = v275;
                v274 = (MIL::IRNamedValueType **)v210;
                v275 = v176;
                v276 = v214;
                while (v216 != v204)
                {
                  v217 = (std::__shared_weak_count *)*(v216 - 1);
                  if (v217)
                  {
                    v218 = (unint64_t *)&v217->__shared_owners_;
                    do
                      v219 = __ldaxr(v218);
                    while (__stlxr(v219 - 1, v218));
                    if (!v219)
                    {
                      ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
                      std::__shared_weak_count::__release_weak(v217);
                    }
                  }
                  v216 -= 2;
                }
              }
              if (v204)
                operator delete(v204);
            }
            else
            {
              *v275 = *(MIL::IRNamedValueType **)v173;
              v183 = (unint64_t *)*((_QWORD *)v173 + 1);
              v182[1] = (MIL::IRNamedValueType *)v183;
              if (v183)
              {
                v184 = v183 + 1;
                do
                  v185 = __ldxr(v184);
                while (__stxr(v185 + 1, v184));
              }
              v176 = v182 + 2;
            }
            v275 = v176;
            goto LABEL_263;
          }
          v178 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v256 + 40))(v256);
          Type = (MIL::MILContext *)MIL::IRNamedValueType::GetType(*(MIL::IRNamedValueType **)v173);
          v180 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(__p, v177);
          if (!v180)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          if (*(char *)(v177 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v270, *(const std::string::value_type **)v177, *(_QWORD *)(v177 + 8));
          }
          else
          {
            v181 = *(_OWORD *)v177;
            v270.__r_.__value_.__r.__words[2] = *(_QWORD *)(v177 + 16);
            *(_OWORD *)&v270.__r_.__value_.__l.__data_ = v181;
          }
          MIL::IRNamedValueType::Make();
          v186 = v271;
          v272 = v271;
          if (v271)
          {
            v187 = (std::__shared_weak_count *)operator new();
            v188 = v271;
            v187->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3040;
            v187->__shared_owners_ = 0;
            v187->__shared_weak_owners_ = 0;
            v187[1].__vftable = (std::__shared_weak_count_vtbl *)v188;
            v273 = v187;
            v271 = 0;
            v190 = v275;
            v189 = v276;
            if (v275 < (MIL::IRNamedValueType **)v276)
              goto LABEL_276;
          }
          else
          {
            v187 = 0;
            v273 = 0;
            v271 = 0;
            v190 = v275;
            v189 = v276;
            if (v275 < (MIL::IRNamedValueType **)v276)
            {
LABEL_276:
              *v190 = v186;
              v190[1] = (MIL::IRNamedValueType *)v187;
              v191 = v190 + 2;
              v272 = 0;
              v273 = 0;
              goto LABEL_319;
            }
          }
          v192 = (char *)v274;
          v193 = ((char *)v190 - (char *)v274) >> 4;
          v194 = v193 + 1;
          if ((unint64_t)(v193 + 1) >> 60)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v195 = v189 - (char *)v274;
          if (v195 >> 3 > v194)
            v194 = v195 >> 3;
          if ((unint64_t)v195 >= 0x7FFFFFFFFFFFFFF0)
            v196 = 0xFFFFFFFFFFFFFFFLL;
          else
            v196 = v194;
          if (v196 >> 60)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v197 = (char *)operator new(16 * v196);
          v198 = (MIL::IRNamedValueType **)&v197[16 * v193];
          *v198 = v186;
          v191 = v198 + 2;
          *(_QWORD *)&v197[(char *)v190 - v192 + 8] = v187;
          v272 = 0;
          v273 = 0;
          if (v190 == (MIL::IRNamedValueType **)v192)
          {
            v274 = v198;
            v275 = v198 + 2;
            v276 = &v197[16 * v196];
          }
          else
          {
            do
            {
              v199 = *((_OWORD *)v190 - 1);
              v190 -= 2;
              *((_OWORD *)v198 - 1) = v199;
              v198 -= 2;
              *v190 = 0;
              v190[1] = 0;
            }
            while (v190 != (MIL::IRNamedValueType **)v192);
            v190 = v274;
            v200 = v275;
            v274 = v198;
            v275 = v191;
            v276 = &v197[16 * v196];
            while (v200 != v190)
            {
              v201 = (std::__shared_weak_count *)*(v200 - 1);
              if (v201)
              {
                v202 = (unint64_t *)&v201->__shared_owners_;
                do
                  v203 = __ldaxr(v202);
                while (__stlxr(v203 - 1, v202));
                if (!v203)
                {
                  ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
                  std::__shared_weak_count::__release_weak(v201);
                }
              }
              v200 -= 2;
            }
          }
          if (v190)
            operator delete(v190);
LABEL_319:
          v275 = v191;
          v220 = v273;
          if (v273)
          {
            v221 = (unint64_t *)&v273->__shared_owners_;
            do
              v222 = __ldaxr(v221);
            while (__stlxr(v222 - 1, v221));
            if (!v222)
            {
              ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
              std::__shared_weak_count::__release_weak(v220);
              v223 = v271;
              v271 = 0;
              if (!v223)
                goto LABEL_325;
LABEL_324:
              MIL::IRNamedValueType::~IRNamedValueType(v223);
              MEMORY[0x19401CD90]();
              goto LABEL_325;
            }
          }
          v223 = v271;
          v271 = 0;
          if (v223)
            goto LABEL_324;
LABEL_325:
          if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v270.__r_.__value_.__l.__data_);
            if (++v173 == v172)
              break;
          }
          else
          {
LABEL_263:
            if (++v173 == v172)
              break;
          }
        }
      }
      (*(void (**)(MIL::IRNamedValueType **__return_ptr, uint64_t))(*(_QWORD *)v170 + 32))(&v272, v170);
      (*(void (**)(MIL::IRNamedValueType *, MIL::IRNamedValueType ***))(*(_QWORD *)v272 + 184))(v272, &v274);
      v267 = v272;
      if (v272)
      {
        v174 = (std::__shared_weak_count *)operator new();
        v175 = v272;
        v174->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2F98;
        v174->__shared_owners_ = 0;
        v174->__shared_weak_owners_ = 0;
        v174[1].__vftable = (std::__shared_weak_count_vtbl *)v175;
      }
      else
      {
        v174 = 0;
      }
      v268 = v174;
      v272 = 0;
      MIL::Builder::OperationBuilder::Make();
      v265 = 0;
      v266 = 0;
      MIL::Builder::BlockBuilder::AddOperation();
      v224 = v266;
      if (!v266)
        goto LABEL_338;
      v225 = (unint64_t *)&v266->__shared_owners_;
      do
        v226 = __ldaxr(v225);
      while (__stlxr(v226 - 1, v225));
      if (!v226)
      {
        ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
        std::__shared_weak_count::__release_weak(v224);
        v227 = v269;
        if (v269)
        {
LABEL_339:
          v228 = (unint64_t *)&v227->__shared_owners_;
          do
            v229 = __ldaxr(v228);
          while (__stlxr(v229 - 1, v228));
          if (!v229)
          {
            ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
            std::__shared_weak_count::__release_weak(v227);
          }
        }
      }
      else
      {
LABEL_338:
        v227 = v269;
        if (v269)
          goto LABEL_339;
      }
      v230 = v268;
      if (!v268)
        goto LABEL_348;
      v231 = (unint64_t *)&v268->__shared_owners_;
      do
        v232 = __ldaxr(v231);
      while (__stlxr(v232 - 1, v231));
      if (!v232)
      {
        ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
        std::__shared_weak_count::__release_weak(v230);
        v233 = v272;
        v272 = 0;
        if (v233)
LABEL_349:
          (*(void (**)(MIL::IRNamedValueType *))(*(_QWORD *)v233 + 8))(v233);
      }
      else
      {
LABEL_348:
        v233 = v272;
        v272 = 0;
        if (v233)
          goto LABEL_349;
      }
      v234 = v274;
      if (v274)
      {
        v235 = v275;
        v169 = v274;
        if (v275 != v274)
        {
          do
          {
            v236 = (std::__shared_weak_count *)*(v235 - 1);
            if (v236)
            {
              v237 = (unint64_t *)&v236->__shared_owners_;
              do
                v238 = __ldaxr(v237);
              while (__stlxr(v238 - 1, v237));
              if (!v238)
              {
                ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
                std::__shared_weak_count::__release_weak(v236);
              }
            }
            v235 -= 2;
          }
          while (v235 != v234);
          v169 = v274;
        }
        v275 = v234;
        operator delete(v169);
      }
      v162 = v255 + 2;
      if (v255 + 2 != v253)
        continue;
      break;
    }
    v84 = v277;
    if (v277)
    {
LABEL_245:
      v278 = v84;
      operator delete(v84);
    }
LABEL_246:
    std::__tree<std::string>::destroy((uint64_t)&v282, v283);
    v163 = v286;
    if (!v286)
      goto LABEL_250;
    v164 = (unint64_t *)&v286->__shared_owners_;
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
      v166 = v287;
      if (v287)
      {
LABEL_251:
        v167 = (unint64_t *)&v166->__shared_owners_;
        do
          v168 = __ldaxr(v167);
        while (__stlxr(v168 - 1, v167));
        if (!v168)
        {
          ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
          std::__shared_weak_count::__release_weak(v166);
        }
      }
    }
    else
    {
LABEL_250:
      v166 = v287;
      if (v287)
        goto LABEL_251;
    }
    if (SHIBYTE(v290) < 0)
    {
      operator delete(v288);
      v239 = (void **)v258[0];
      if (!v258[0])
        goto LABEL_368;
    }
    else
    {
      v239 = (void **)v258[0];
      if (!v258[0])
        goto LABEL_368;
    }
    do
    {
      v240 = (void **)*v239;
      if (*((char *)v239 + 39) < 0)
        operator delete(v239[2]);
      operator delete(v239);
      v239 = v240;
    }
    while (v240);
LABEL_368:
    OpsetName = (E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *)__p[0];
    __p[0] = 0;
    if (OpsetName)
      operator delete(OpsetName);
    v251 += 24;
  }
  while (v251 != v250);
LABEL_373:
  MIL::Builder::ProgramBuilder::CreateProgram(v264);
  if (((*((uint64_t (**)(void **))__p[1] + 2))(&__p[1]) & 1) == 0)
  {
    v246 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    MIL::MILResult::GetMessage((MIL::MILResult *)&__p[1]);
    std::operator+<char>();
    std::runtime_error::runtime_error(v246, &v280);
    __cxa_throw(v246, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v241 = __p[0];
  __p[0] = 0;
  *a3 = v241;
  MEMORY[0x19401B338](&__p[1]);
  v242 = __p[0];
  __p[0] = 0;
  if (v242)
    (*(void (**)(void *))(*(_QWORD *)v242 + 8))(v242);
  if (SHIBYTE(v261) < 0)
    operator delete(__dst[0]);
  result = v264;
  v264 = 0;
  if (result)
    return (MIL::Builder::ProgramBuilder *)(*(uint64_t (**)(MIL::Builder::ProgramBuilder *))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1910A89CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,char a44,uint64_t a45,char a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,char a54,uint64_t a55)
{
  uint64_t v55;
  void *v56;
  int v57;
  uint64_t v58;
  uint64_t v60;

  if (*(char *)(v58 - 185) < 0)
  {
    operator delete(*(void **)(v58 - 208));
    if ((v57 & 1) == 0)
    {
LABEL_6:
      MEMORY[0x19401B338](v55);
      if (a25)
        (*(void (**)(void *))(*(_QWORD *)a25 + 8))(a25);
      if (a38 < 0)
      {
        operator delete(__p);
        v60 = a41;
        if (a41)
          goto LABEL_10;
      }
      else
      {
        v60 = a41;
        if (a41)
        {
LABEL_10:
          (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
          _Unwind_Resume(a1);
        }
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v57)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v56);
  goto LABEL_6;
}

void Espresso::AOT::AddBackwardCompatibilityAttributes(uint64_t *a1, uint64_t a2, std::string::size_type a3)
{
  uint64_t v3;
  uint64_t v6;
  const char *v7;
  size_t v8;
  std::string::size_type v9;
  std::string *p_dst;
  uint64_t v11;
  uint64_t v12;
  char v13;
  std::string *v14;
  uint64_t v15;
  const std::string::value_type *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  void **v27;
  void **v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::runtime_error *exception;
  uint64_t v40;
  std::__shared_weak_count *v41;
  std::string v42;
  void *v43[2];
  void *__p[2];
  int v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  std::string __dst;
  std::string v51;
  std::string *v52;
  std::__shared_weak_count *v53;
  _QWORD v54[4];

  v54[2] = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v40 = a1[1];
  if (*a1 == v40)
    return;
  while (2)
  {
    v6 = 0;
    v54[0] = "E5_FlagsEir";
    v54[1] = "E5_FlagsAne";
    do
    {
LABEL_7:
      v7 = (const char *)v54[v6];
      v8 = strlen(v7);
      if (v8 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v9 = v8;
      if (v8 >= 0x17)
      {
        v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v8 | 7) != 0x17)
          v11 = v8 | 7;
        v12 = v11 + 1;
        p_dst = (std::string *)operator new(v11 + 1);
        __dst.__r_.__value_.__l.__size_ = v9;
        __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_14:
        memmove(p_dst, v7, v9);
        goto LABEL_15;
      }
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v8;
      p_dst = &__dst;
      if (v8)
        goto LABEL_14;
LABEL_15:
      p_dst->__r_.__value_.__s.__data_[v9] = 0;
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(&v48, a2, v3);
      if (!v48)
        goto LABEL_72;
      MIL::IRObject::TryGetAttributeSharedPtr();
      if (!v46)
        goto LABEL_68;
      MIL::IRProgram::GetFunction();
      *(_OWORD *)v43 = 0u;
      *(_OWORD *)__p = 0u;
      v45 = 1065353216;
      v51.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2DB1FA8;
      v51.__r_.__value_.__l.__size_ = a3;
      v51.__r_.__value_.__r.__words[2] = (std::string::size_type)v43;
      v52 = &v51;
      v13 = MIL::Util::Walk();
      v14 = v52;
      if (v52 == &v51)
      {
        v14 = &v51;
        v15 = 4;
      }
      else
      {
        if (!v52)
          goto LABEL_24;
        v15 = 5;
      }
      (*(void (**)(void))(v14->__r_.__value_.__r.__words[0] + 8 * v15))();
LABEL_24:
      if ((v13 & 1) == 0)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Failed in walking on function to collect its callees.");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v16 = (const std::string::value_type *)__p[0];
      if (!__p[0])
        goto LABEL_66;
      do
      {
        while (1)
        {
          if (v16[39] < 0)
            std::string::__init_copy_ctor_external(&v51, *((const std::string::value_type **)v16 + 2), *((_QWORD *)v16 + 3));
          else
            v51 = *(std::string *)(v16 + 16);
          v17 = (std::__shared_weak_count *)*((_QWORD *)v16 + 6);
          v52 = (std::string *)*((_QWORD *)v16 + 5);
          v53 = v17;
          if (v17)
          {
            p_shared_owners = (unint64_t *)&v17->__shared_owners_;
            do
              v19 = __ldxr(p_shared_owners);
            while (__stxr(v19 + 1, p_shared_owners));
          }
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v42, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
          else
            v42 = __dst;
          v41 = v47;
          if (v47)
          {
            v20 = (unint64_t *)&v47->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          MIL::IRObject::SetAttribute();
          if (!v41)
            goto LABEL_84;
          v22 = (unint64_t *)&v41->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
            if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_46:
              v24 = v53;
              if (!v53)
                goto LABEL_27;
              goto LABEL_52;
            }
          }
          else
          {
LABEL_84:
            if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_46;
          }
          operator delete(v42.__r_.__value_.__l.__data_);
          v24 = v53;
          if (!v53)
            goto LABEL_27;
LABEL_52:
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
LABEL_27:
          if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
            break;
          v16 = *(const std::string::value_type **)v16;
          if (!v16)
            goto LABEL_56;
        }
        operator delete(v51.__r_.__value_.__l.__data_);
        v16 = *(const std::string::value_type **)v16;
      }
      while (v16);
LABEL_56:
      v27 = (void **)__p[0];
      if (__p[0])
      {
        do
        {
          while (1)
          {
            v28 = (void **)*v27;
            v29 = (std::__shared_weak_count *)v27[6];
            if (v29)
            {
              v30 = (unint64_t *)&v29->__shared_owners_;
              do
                v31 = __ldaxr(v30);
              while (__stlxr(v31 - 1, v30));
              if (!v31)
              {
                ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                std::__shared_weak_count::__release_weak(v29);
              }
            }
            if (*((char *)v27 + 39) < 0)
              break;
            operator delete(v27);
            v27 = v28;
            if (!v28)
              goto LABEL_66;
          }
          operator delete(v27[2]);
          operator delete(v27);
          v27 = v28;
        }
        while (v28);
      }
LABEL_66:
      v32 = v43[0];
      v43[0] = 0;
      if (v32)
        operator delete(v32);
LABEL_68:
      v33 = v47;
      if (!v47)
        goto LABEL_72;
      v34 = (unint64_t *)&v47->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
        v36 = v49;
        if (v49)
          goto LABEL_73;
      }
      else
      {
LABEL_72:
        v36 = v49;
        if (v49)
        {
LABEL_73:
          v37 = (unint64_t *)&v36->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (++v6 == 2)
          break;
        goto LABEL_7;
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
      ++v6;
    }
    while (v6 != 2);
    v3 += 24;
    if (v3 != v40)
      continue;
    break;
  }
}

void sub_1910A92FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,std::__shared_weak_count *a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;

  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a20);
  v39 = a26;
  if (a26)
  {
    p_shared_owners = (unint64_t *)&a26->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = a28;
  if (a28)
  {
    v43 = (unint64_t *)&a28->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (a34 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::AOT::InferTensorToTensorBufferOpInputsFromOutputs(Espresso::AOT *this, MIL::MILContext *a2, MIL::IROperation *a3, const MIL::IRValueType *a4)
{
  uint64_t v6;
  BOOL v7;
  _BOOL4 v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  MIL::IRValueType *ParameterType;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  int64_t v21;
  char *v22;
  char *v23;
  _QWORD *v24;
  _QWORD *v25;
  MIL::IRMemoryLayoutValueType *v26;
  MIL::IRTensorBufferValueType *v27;
  int DataType;
  uint64_t Shape;
  uint64_t v30;
  const void *v31;
  int64_t v32;
  char *v33;
  char *v34;
  uint64_t Strides;
  uint64_t v36;
  const void *v37;
  int64_t v38;
  char *v39;
  char *v40;
  const void **InterleaveFactors;
  _BYTE *v42;
  const void *v43;
  int64_t v44;
  MIL::IRProperty **v45;
  const void *v46;
  MIL::IRProperty **v47;
  size_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  MIL::IRConstantProperty *v52;
  std::logic_error *exception;
  _QWORD *v54;
  unint64_t v55;
  char *v56;
  char *v57;
  unint64_t v58;
  MIL::IRConstantProperty *v59;
  _QWORD *v60;
  char *v61;
  int v62;
  unint64_t v63;
  const void *v64;
  size_t v65;
  int v66;
  _BOOL4 v67;
  int v68;
  _BOOL4 v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count_vtbl *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count_vtbl *v75;
  std::__shared_weak_count *v76;
  char *v77;
  char *v78;
  char *v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  char *v95;
  char *v96;
  void *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  char *v106;
  char *v107;
  void *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count_vtbl *v119;
  std::__shared_weak_count_vtbl *v120;
  char *v121;
  int v122;
  std::__shared_weak_count *v123;
  std::__shared_weak_count_vtbl *v124;
  void *__p;
  char *v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  std::__shared_weak_count_vtbl *v129;
  void *v130;
  char *v131;
  void *__s1[2];
  char v133;
  char **v134;
  char *v135[2];
  std::__shared_weak_count_vtbl *v136;
  void *v137;
  void *v138;
  char *v139;
  std::__shared_weak_count_vtbl *v140;
  void *v141;
  char *v142;
  char *v143;
  void *v144;
  MIL::IRProperty **v145;
  MIL::IRProperty **v146;
  void *v147;
  char *v148;
  char *v149;
  void *v150;
  char *v151;
  char *v152;
  void *v153;
  char *v154;
  char *v155;
  char **v156;
  char *v157[2];
  std::__shared_weak_count_vtbl *v158;
  std::__shared_weak_count *v159;
  std::__shared_weak_count_vtbl *v160;
  std::__shared_weak_count *v161;
  std::string v162;
  char *v163;
  char *v164;
  void *v165[2];
  char v166;
  char *v167;
  char *v168;
  void *v169[3];
  char *v170;
  char *v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  v6 = (*(uint64_t (**)(MIL::MILContext *))(*(_QWORD *)a2 + 56))(a2);
  Espresso::AOT::GetOperatorType(v6, &v162);
  if ((SHIBYTE(v162.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) != 23)
      return;
    v7 = v162.__r_.__value_.__r.__words[0] == 0x745F726F736E6574
      && v162.__r_.__value_.__l.__size_ == 0x726F736E65745F6FLL;
    if (!v7 || *(std::string::size_type *)((char *)&v162.__r_.__value_.__r.__words[1] + 7) != 0x7265666675625F72)
      return;
LABEL_23:
    v12 = (_QWORD *)(*(uint64_t (**)(MIL::MILContext *))(*(_QWORD *)a2 + 160))(a2);
    v157[0] = 0;
    v157[1] = 0;
    v156 = v157;
    v14 = v12 + 1;
    v13 = (_QWORD *)*v12;
    if ((_QWORD *)*v12 != v12 + 1)
    {
      do
      {
        std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>> const&>((uint64_t **)&v156, v157, v13 + 4, (uint64_t)(v13 + 4));
        v24 = (_QWORD *)v13[1];
        if (v24)
        {
          do
          {
            v25 = v24;
            v24 = (_QWORD *)*v24;
          }
          while (v24);
        }
        else
        {
          do
          {
            v25 = (_QWORD *)v13[2];
            v7 = *v25 == (_QWORD)v13;
            v13 = v25;
          }
          while (!v7);
        }
        v13 = v25;
      }
      while (v25 != v14);
    }
    *((_BYTE *)&v162.__r_.__value_.__s + 23) = 5;
    strcpy((char *)&v162, "input");
    ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
    v16 = MIL::IRValueType::AsTensorType(ParameterType);
    if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v162.__r_.__value_.__l.__data_);
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 88))(v16);
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 96))(v16);
    v153 = 0;
    v154 = 0;
    v155 = 0;
    v20 = *(const void **)v18;
    v19 = *(_QWORD *)(v18 + 8);
    v21 = v19 - *(_QWORD *)v18;
    if (v19 == *(_QWORD *)v18)
    {
      v22 = 0;
      v23 = 0;
    }
    else
    {
      if (v21 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v22 = (char *)operator new(v19 - *(_QWORD *)v18);
      v23 = &v22[8 * (v21 >> 3)];
      v153 = v22;
      v155 = v23;
      memcpy(v22, v20, v21);
      v154 = v23;
    }
    v26 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a3);
    v27 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v26);
    DataType = MIL::IRTensorBufferValueType::GetDataType(v27);
    Shape = MIL::IRTensorBufferValueType::GetShape(v27);
    v150 = 0;
    v151 = 0;
    v152 = 0;
    v31 = *(const void **)Shape;
    v30 = *(_QWORD *)(Shape + 8);
    v32 = v30 - *(_QWORD *)Shape;
    if (v30 == *(_QWORD *)Shape)
    {
      v33 = 0;
      v34 = 0;
    }
    else
    {
      if (v32 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v33 = (char *)operator new(v30 - *(_QWORD *)Shape);
      v34 = &v33[8 * (v32 >> 3)];
      v150 = v33;
      v152 = v34;
      memcpy(v33, v31, v32);
      v151 = v34;
    }
    v122 = DataType;
    Strides = MIL::IRTensorBufferValueType::GetStrides(v27);
    v147 = 0;
    v148 = 0;
    v149 = 0;
    v37 = *(const void **)Strides;
    v36 = *(_QWORD *)(Strides + 8);
    v38 = v36 - *(_QWORD *)Strides;
    v121 = v23;
    if (v36 == *(_QWORD *)Strides)
    {
      v39 = 0;
      v40 = 0;
    }
    else
    {
      if (v38 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v39 = (char *)operator new(v38);
      v40 = &v39[8 * (v38 >> 3)];
      v147 = v39;
      v149 = v40;
      memcpy(v39, v37, v38);
      v148 = v40;
    }
    InterleaveFactors = (const void **)MIL::IRTensorBufferValueType::GetInterleaveFactors(v27);
    v144 = 0;
    v145 = 0;
    v146 = 0;
    v43 = *InterleaveFactors;
    v42 = InterleaveFactors[1];
    v44 = v42 - (_BYTE *)*InterleaveFactors;
    if (v42 == *InterleaveFactors)
    {
      v45 = 0;
      v47 = 0;
      if (v17 == v122)
      {
LABEL_49:
        if (v121 - v22 == v34 - v33 && !memcmp(v22, v33, v121 - v22))
        {
          v141 = 0;
          v142 = 0;
          v143 = 0;
          v48 = v40 - v39;
          v49 = (v40 - v39) >> 3;
          if (v40 != v39)
          {
            if ((v48 & 0x8000000000000000) != 0)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v141 = operator new(v40 - v39);
            v143 = (char *)v141 + 8 * v49;
            bzero(v141, v48);
            v50 = 0;
            v142 = (char *)v141 + v48;
            while (!MIL::IRProperty::TryAsUnknown(*(MIL::IRProperty **)&v39[8 * v50]))
            {
              if (++v50 >= v49)
              {
                v51 = 0;
                do
                {
                  v52 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(*(MIL::IRProperty **)&v39[8 * v51]);
                  *((_QWORD *)v141 + v51++) = MIL::IRConstantProperty::GetInt64ScalarValue(v52);
                }
                while (v51 < v49);
                goto LABEL_63;
              }
            }
            if (v142 - (_BYTE *)v141 >= 1)
              memset(v141, 255, 8 * (((unint64_t)(v142 - (_BYTE *)v141) >> 3) - ((unint64_t)(v142 - (_BYTE *)v141) > 7))+ 8);
          }
LABEL_63:
          v54 = operator new(8uLL);
          v162.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
          *v54 = v49;
          v162.__r_.__value_.__l.__size_ = (std::string::size_type)(v54 + 1);
          v162.__r_.__value_.__r.__words[2] = (std::string::size_type)(v54 + 1);
          MIL::IRTensorValueType::Make();
          if (v162.__r_.__value_.__r.__words[0])
          {
            v162.__r_.__value_.__l.__size_ = v162.__r_.__value_.__r.__words[0];
            operator delete(v162.__r_.__value_.__l.__data_);
          }
          MIL::IRTensorValueType::MakeInt64Value();
          v137 = 0;
          v138 = 0;
          v139 = 0;
          v55 = v47 - v45;
          if (v47 != v45)
          {
            if ((char *)v47 - (char *)v45 < 0)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v56 = (char *)operator new(v47 - v45);
            v57 = &v56[v55];
            v137 = v56;
            v139 = &v56[v55];
            bzero(v56, v47 - v45);
            v58 = 0;
            v138 = v57;
            do
            {
              v59 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(v45[v58]);
              *((_BYTE *)v137 + v58++) = MIL::IRConstantProperty::GetUInt8ScalarValue(v59);
            }
            while (v58 < v55);
          }
          v60 = operator new(8uLL);
          v162.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
          *v60 = v55;
          v162.__r_.__value_.__l.__size_ = (std::string::size_type)(v60 + 1);
          v162.__r_.__value_.__r.__words[2] = (std::string::size_type)(v60 + 1);
          MIL::IRTensorValueType::Make();
          if (v162.__r_.__value_.__r.__words[0])
          {
            v162.__r_.__value_.__l.__size_ = v162.__r_.__value_.__r.__words[0];
            operator delete(v162.__r_.__value_.__l.__data_);
          }
          MIL::IRTensorValueType::MakeUInt8Value();
          v133 = 5;
          strcpy((char *)__s1, "input");
          v61 = v157[0];
          if (!v157[0])
LABEL_90:
            std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
          while (1)
          {
            while (1)
            {
              v62 = v61[55];
              if (v62 >= 0)
                v63 = v61[55];
              else
                v63 = *((_QWORD *)v61 + 5);
              if (v62 >= 0)
                v64 = v61 + 32;
              else
                v64 = (const void *)*((_QWORD *)v61 + 4);
              if (v63 >= 5)
                v65 = 5;
              else
                v65 = v63;
              v66 = memcmp(__s1, v64, v65);
              v67 = v66 < 0;
              if (!v66)
                v67 = v63 > 5;
              if (!v67)
                break;
              v61 = *(char **)v61;
              if (!v61)
                goto LABEL_90;
            }
            v68 = memcmp(v64, __s1, v65);
            v69 = v63 < 5;
            if (v68)
              v69 = v68 < 0;
            if (!v69)
              break;
            v61 = (char *)*((_QWORD *)v61 + 1);
            if (!v61)
              goto LABEL_90;
          }
          std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>>::pair[abi:ne180100]<char const(&)[6],std::vector<std::shared_ptr<MIL::IRArgument>>&,0>(&v162, "input", (_QWORD **)v61 + 7);
          v127 = v140;
          if (v140)
          {
            v70 = (std::__shared_weak_count *)operator new();
            v71 = v140;
            v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
            v70->__shared_owners_ = 0;
            v70->__shared_weak_owners_ = 0;
            v70[1].__vftable = v71;
          }
          else
          {
            v70 = 0;
          }
          v128 = v70;
          v140 = 0;
          MIL::IRArgument::Make();
          v160 = v129;
          if (v129)
          {
            v72 = (std::__shared_weak_count *)operator new();
            v73 = v129;
            v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2DD8;
            v72->__shared_owners_ = 0;
            v72->__shared_weak_owners_ = 0;
            v72[1].__vftable = v73;
          }
          else
          {
            v72 = 0;
          }
          v161 = v72;
          v129 = 0;
          std::vector<std::shared_ptr<MIL::IRArgument>>::vector[abi:ne180100](&v130, &v160, 1uLL);
          v165[0] = (void *)0x73656469727473;
          v166 = 7;
          std::vector<std::shared_ptr<MIL::IRArgument>>::vector(&v167, (uint64_t)&v130);
          if (v136)
          {
            v74 = (std::__shared_weak_count *)operator new();
            v75 = v136;
            v74->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
            v74->__shared_owners_ = 0;
            v74->__shared_weak_owners_ = 0;
            v74[1].__vftable = v75;
          }
          else
          {
            v74 = 0;
          }
          v123 = v74;
          v136 = 0;
          MIL::IRArgument::Make();
          v158 = v124;
          if (v124)
          {
            v76 = (std::__shared_weak_count *)operator new();
            v76->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2DD8;
            v76->__shared_owners_ = 0;
            v76->__shared_weak_owners_ = 0;
            v76[1].__vftable = v124;
          }
          else
          {
            v76 = 0;
          }
          v159 = v76;
          std::vector<std::shared_ptr<MIL::IRArgument>>::vector[abi:ne180100](&__p, &v158, 1uLL);
          strcpy((char *)v169, "interleave_factors");
          HIBYTE(v169[2]) = 18;
          std::vector<std::shared_ptr<MIL::IRArgument>>::vector(&v170, (uint64_t)&__p);
          v135[0] = 0;
          v135[1] = 0;
          v134 = v135;
          std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>> const&>((uint64_t **)&v134, v135, &v162, (uint64_t)&v162);
          std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>> const&>((uint64_t **)&v134, v135, v165, (uint64_t)v165);
          std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>> const&>((uint64_t **)&v134, v135, v169, (uint64_t)v169);
          (*(void (**)(MIL::MILContext *, char ***))(*(_QWORD *)a2 + 168))(a2, &v134);
          std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy((uint64_t)&v134, v135[0]);
          v77 = v170;
          if (v170)
          {
            v78 = v171;
            v79 = v170;
            if (v171 != v170)
            {
              do
              {
                v80 = (std::__shared_weak_count *)*((_QWORD *)v78 - 1);
                if (v80)
                {
                  p_shared_owners = (unint64_t *)&v80->__shared_owners_;
                  do
                    v82 = __ldaxr(p_shared_owners);
                  while (__stlxr(v82 - 1, p_shared_owners));
                  if (!v82)
                  {
                    ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                    std::__shared_weak_count::__release_weak(v80);
                  }
                }
                v78 -= 16;
              }
              while (v78 != v77);
              v79 = v170;
            }
            v171 = v77;
            operator delete(v79);
          }
          if (SHIBYTE(v169[2]) < 0)
            operator delete(v169[0]);
          v83 = v167;
          if (v167)
          {
            v84 = v168;
            v85 = v167;
            if (v168 != v167)
            {
              do
              {
                v86 = (std::__shared_weak_count *)*((_QWORD *)v84 - 1);
                if (v86)
                {
                  v87 = (unint64_t *)&v86->__shared_owners_;
                  do
                    v88 = __ldaxr(v87);
                  while (__stlxr(v88 - 1, v87));
                  if (!v88)
                  {
                    ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                    std::__shared_weak_count::__release_weak(v86);
                  }
                }
                v84 -= 16;
              }
              while (v84 != v83);
              v85 = v167;
            }
            v168 = v83;
            operator delete(v85);
          }
          if (v166 < 0)
            operator delete(v165[0]);
          v89 = v163;
          if (v163)
          {
            v90 = v164;
            v91 = v163;
            if (v164 != v163)
            {
              do
              {
                v92 = (std::__shared_weak_count *)*((_QWORD *)v90 - 1);
                if (v92)
                {
                  v93 = (unint64_t *)&v92->__shared_owners_;
                  do
                    v94 = __ldaxr(v93);
                  while (__stlxr(v94 - 1, v93));
                  if (!v94)
                  {
                    ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                    std::__shared_weak_count::__release_weak(v92);
                  }
                }
                v90 -= 16;
              }
              while (v90 != v89);
              v91 = v163;
            }
            v164 = v89;
            operator delete(v91);
          }
          if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v162.__r_.__value_.__l.__data_);
          v95 = (char *)__p;
          if (__p)
          {
            v96 = v126;
            v97 = __p;
            if (v126 != __p)
            {
              do
              {
                v98 = (std::__shared_weak_count *)*((_QWORD *)v96 - 1);
                if (v98)
                {
                  v99 = (unint64_t *)&v98->__shared_owners_;
                  do
                    v100 = __ldaxr(v99);
                  while (__stlxr(v100 - 1, v99));
                  if (!v100)
                  {
                    ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                    std::__shared_weak_count::__release_weak(v98);
                  }
                }
                v96 -= 16;
              }
              while (v96 != v95);
              v97 = __p;
            }
            v126 = v95;
            operator delete(v97);
          }
          v101 = v159;
          if (v159)
          {
            v102 = (unint64_t *)&v159->__shared_owners_;
            do
              v103 = __ldaxr(v102);
            while (__stlxr(v103 - 1, v102));
            if (!v103)
            {
              ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
              std::__shared_weak_count::__release_weak(v101);
            }
          }
          if (v123)
          {
            v104 = (unint64_t *)&v123->__shared_owners_;
            do
              v105 = __ldaxr(v104);
            while (__stlxr(v105 - 1, v104));
            if (!v105)
            {
              ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
              std::__shared_weak_count::__release_weak(v123);
            }
          }
          v106 = (char *)v130;
          if (v130)
          {
            v107 = v131;
            v108 = v130;
            if (v131 != v130)
            {
              do
              {
                v109 = (std::__shared_weak_count *)*((_QWORD *)v107 - 1);
                if (v109)
                {
                  v110 = (unint64_t *)&v109->__shared_owners_;
                  do
                    v111 = __ldaxr(v110);
                  while (__stlxr(v111 - 1, v110));
                  if (!v111)
                  {
                    ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                    std::__shared_weak_count::__release_weak(v109);
                  }
                }
                v107 -= 16;
              }
              while (v107 != v106);
              v108 = v130;
            }
            v131 = v106;
            operator delete(v108);
          }
          v112 = v161;
          if (v161)
          {
            v113 = (unint64_t *)&v161->__shared_owners_;
            do
              v114 = __ldaxr(v113);
            while (__stlxr(v114 - 1, v113));
            if (!v114)
            {
              ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
              std::__shared_weak_count::__release_weak(v112);
            }
          }
          v115 = v129;
          v129 = 0;
          if (v115)
            (*((void (**)(std::__shared_weak_count_vtbl *))v115->~__shared_weak_count + 1))(v115);
          v116 = v128;
          if (v128)
          {
            v117 = (unint64_t *)&v128->__shared_owners_;
            do
              v118 = __ldaxr(v117);
            while (__stlxr(v118 - 1, v117));
            if (!v118)
            {
              ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
              std::__shared_weak_count::__release_weak(v116);
            }
          }
          if (v133 < 0)
            operator delete(__s1[0]);
          v119 = v136;
          v136 = 0;
          if (v119)
            (*((void (**)(std::__shared_weak_count_vtbl *))v119->~__shared_weak_count + 1))(v119);
          if (v137)
          {
            v138 = v137;
            operator delete(v137);
          }
          v120 = v140;
          v140 = 0;
          if (v120)
            (*((void (**)(std::__shared_weak_count_vtbl *))v120->~__shared_weak_count + 1))(v120);
          if (v141)
          {
            v142 = (char *)v141;
            operator delete(v141);
          }
          if (v144)
            operator delete(v144);
          if (v147)
            operator delete(v147);
          if (v150)
            operator delete(v150);
          if (v153)
            operator delete(v153);
          std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy((uint64_t)&v156, v157[0]);
          return;
        }
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Expected output shape should be identical the input shape.");
LABEL_207:
        __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
    }
    else
    {
      if (v44 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v45 = (MIL::IRProperty **)operator new(v42 - (_BYTE *)*InterleaveFactors);
      v144 = v45;
      v146 = &v45[v44 >> 3];
      v46 = v43;
      v47 = v146;
      memcpy(v45, v46, v44);
      v145 = v146;
      if (v17 == v122)
        goto LABEL_49;
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Expected output dtype should be identical the input dtype.");
    goto LABEL_207;
  }
  if (v162.__r_.__value_.__l.__size_ != 23)
  {
    operator delete(v162.__r_.__value_.__l.__data_);
    return;
  }
  v11 = *(_QWORD *)v162.__r_.__value_.__l.__data_ != 0x745F726F736E6574
     || *(_QWORD *)(v162.__r_.__value_.__r.__words[0] + 8) != 0x726F736E65745F6FLL
     || *(_QWORD *)(v162.__r_.__value_.__r.__words[0] + 15) != 0x7265666675625F72;
  operator delete(v162.__r_.__value_.__l.__data_);
  if (!v11)
    goto LABEL_23;
}

void sub_1910AA210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,char a53,char *a54,uint64_t a55,char a56)
{
  void *v56;
  void *v57;

  __cxa_free_exception(v56);
  if (v57)
    operator delete(v57);
  if (__p)
    operator delete(__p);
  if (a47)
    operator delete(a47);
  if (a50)
    operator delete(a50);
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy((uint64_t)&a53, a54);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::shared_ptr<MIL::IRArgument>>::vector[abi:ne180100](_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v5 = 2 * a3;
    v6 = operator new(16 * a3);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    v7 = &a2[v5];
    do
    {
      v8 = a2[1];
      *v6 = *a2;
      v6[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v6 += 2;
    }
    while (a2 != v7);
    a1[1] = v6;
  }
  return a1;
}

void sub_1910AA63C(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    std::vector<std::shared_ptr<MIL::IRArgument>>::vector[abi:ne180100]((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::MakeAneCompatibleStrides(Espresso::AOT *this@<X0>, MIL::MILContext *a2@<X1>, _QWORD *a3@<X8>)
{
  int DataType;
  uint64_t Shape;
  uint64_t v8;
  const void *v9;
  int64_t v10;
  char *v11;
  uint64_t Strides;
  uint64_t v13;
  const void *v14;
  int64_t v15;
  char *v16;
  char *v17;
  uint64_t InterleaveFactors;
  uint64_t v19;
  const void *v20;
  int64_t v21;
  char *v22;
  int64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  MIL::IRConstantProperty *v33;
  uint64_t Int64ScalarValue;
  MIL::IRConstantProperty *v35;
  unsigned int UInt8ScalarValue;
  uint64_t v37;
  uint64_t v38;
  MIL::IRConstantProperty *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t Int64Scalar;
  uint64_t v44;
  std::logic_error *exception;
  std::string *v46;
  __int128 v47;
  char *v48;
  char *v49;
  char *__p;
  unint64_t __val;
  char *v52;
  std::string v54;
  std::string v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;

  DataType = MIL::IRTensorBufferValueType::GetDataType(a2);
  __val = Espresso::AOT::IRDataTypeToByteSize(DataType);
  Shape = MIL::IRTensorBufferValueType::GetShape(a2);
  v63 = 0;
  v64 = 0;
  v62 = 0;
  v9 = *(const void **)Shape;
  v8 = *(_QWORD *)(Shape + 8);
  v10 = v8 - *(_QWORD *)Shape;
  if (v8 == *(_QWORD *)Shape)
  {
    v11 = 0;
  }
  else
  {
    if (v10 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v11 = (char *)operator new(v8 - *(_QWORD *)Shape);
    v62 = v11;
    v64 = &v11[8 * (v10 >> 3)];
    memcpy(v11, v9, v10);
    v63 = v64;
  }
  Strides = MIL::IRTensorBufferValueType::GetStrides(a2);
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v14 = *(const void **)Strides;
  v13 = *(_QWORD *)(Strides + 8);
  v15 = v13 - *(_QWORD *)Strides;
  if (v13 == *(_QWORD *)Strides)
  {
    v16 = 0;
    v17 = 0;
  }
  else
  {
    if (v15 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v16 = (char *)operator new(v13 - *(_QWORD *)Strides);
    v17 = &v16[8 * (v15 >> 3)];
    v59 = v16;
    v61 = v17;
    memcpy(v16, v14, v15);
    v60 = v17;
  }
  InterleaveFactors = MIL::IRTensorBufferValueType::GetInterleaveFactors(a2);
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v20 = *(const void **)InterleaveFactors;
  v19 = *(_QWORD *)(InterleaveFactors + 8);
  v21 = v19 - *(_QWORD *)InterleaveFactors;
  if (v19 == *(_QWORD *)InterleaveFactors)
  {
    v22 = 0;
    if (!(0x40u % __val))
      goto LABEL_12;
LABEL_27:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v54, __val);
    v46 = std::string::insert(&v54, 0, "Unexpected element size: ");
    v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v55);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  if (v21 < 0)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v22 = (char *)operator new(v19 - *(_QWORD *)InterleaveFactors);
  v56 = v22;
  v58 = &v22[8 * (v21 >> 3)];
  memcpy(v22, v20, v21);
  v57 = v58;
  if (0x40u % __val)
    goto LABEL_27;
LABEL_12:
  v23 = v17 - v16;
  if ((unint64_t)(v17 - v16) <= 0xF)
  {
    *a3 = v16;
    a3[1] = v17;
    a3[2] = v17;
    v16 = 0;
    if (v22)
      goto LABEL_14;
    goto LABEL_31;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  __p = v22;
  if (v23 < 0)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v24 = (char *)operator new(v17 - v16);
  v25 = v23 >> 3;
  *a3 = v24;
  a3[2] = &v24[8 * (v23 >> 3)];
  bzero(v24, v23);
  a3[1] = &v24[v23];
  *(_QWORD *)&v24[v23 - 8] = *(_QWORD *)&v16[v23 - 8];
  v26 = (v23 >> 3) - 1;
  if (v23 >> 3 == 1)
  {
    v22 = __p;
    if (__p)
    {
LABEL_14:
      operator delete(v22);
      if (!v16)
        goto LABEL_33;
LABEL_32:
      operator delete(v16);
      goto LABEL_33;
    }
LABEL_31:
    if (!v16)
      goto LABEL_33;
    goto LABEL_32;
  }
  v27 = v24 - 8;
  v28 = v16;
  v29 = 8 * v25;
  v48 = v28;
  v49 = v11;
  v52 = &v28[8 * v25];
  v30 = __p - 8;
  v31 = v11 - 8;
  v32 = -16;
  do
  {
    v33 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(*(MIL::IRProperty **)&v52[v32]);
    Int64ScalarValue = MIL::IRConstantProperty::GetInt64ScalarValue(v33);
    v35 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(*(MIL::IRProperty **)&v30[v29]);
    UInt8ScalarValue = MIL::IRConstantProperty::GetUInt8ScalarValue(v35);
    v37 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v31[v29] + 16))(*(_QWORD *)&v31[v29]);
    if (v37)
    {
      v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 48))(v37);
      v39 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(*(MIL::IRProperty **)&v27[v29]);
      v40 = MIL::IRConstantProperty::GetInt64ScalarValue(v39);
      v41 = (E5RT::CastToSizeT<long long>(Int64ScalarValue) + 0x40 / __val - 1) / (0x40 / __val);
      if (v40 * ((v38 - 1) / UInt8ScalarValue + 1) <= (uint64_t)(v41 * (0x40 / __val)))
        v42 = v41 * (0x40 / __val);
      else
        v42 = v40 * ((v38 - 1) / UInt8ScalarValue + 1);
      Int64Scalar = MIL::IRConstantProperty::MakeInt64Scalar(this, (MIL::MILContext *)v42);
    }
    else
    {
      v44 = E5RT::CastToSizeT<long long>(Int64ScalarValue);
      Int64Scalar = MIL::IRConstantProperty::MakeInt64Scalar(this, (MIL::MILContext *)((v44 + 0x40 / __val - 1) / (0x40 / __val) * (0x40 / __val)));
    }
    v32 -= 8;
    *(_QWORD *)&v27[v29 - 8] = Int64Scalar;
    v30 -= 8;
    v31 -= 8;
    v27 -= 8;
    --v26;
  }
  while (v26);
  v16 = v48;
  v11 = v49;
  operator delete(__p);
  if (v48)
    goto LABEL_32;
LABEL_33:
  if (v11)
    operator delete(v11);
}

void sub_1910AAA9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  int v32;
  void *v33;

  if (a29 < 0)
    operator delete(__p);
  if (a23 < 0)
  {
    operator delete(a18);
    if ((v32 & 1) == 0)
    {
LABEL_8:
      if (a13)
        operator delete(a13);
      if (a11)
        operator delete(a11);
      if (a12)
        operator delete(a12);
      _Unwind_Resume(a1);
    }
  }
  else if (!v32)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v33);
  goto LABEL_8;
}

void Espresso::AOT::ReplaceTensorBufferByTensor(uint64_t a1)
{
  MIL::Transform::ProgramTransformer *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  MIL::Builder::Variable *v5;
  uint64_t Name;
  E5Common::Utils *Type;
  const MIL::IRValueType *v8;
  uint64_t OperationsByInput;
  uint64_t v10;
  std::__shared_weak_count *v11;
  MIL::Builder::OperationBuilder *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t Operator;
  uint64_t v16;
  BOOL v17;
  _BOOL4 v21;
  uint64_t OutputName;
  MIL::IRValueType *OutputType;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  void *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  MIL::Builder::Variable *Variable;
  E5Common::Utils *v59;
  const MIL::IRValueType *v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  _BOOL4 v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  MIL::Builder::Variable *ArgumentForParameter;
  uint64_t v74;
  MIL::Builder::Variable *v75;
  __int128 v76;
  unint64_t j;
  unsigned __int8 *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  const std::string::value_type *v83;
  __int128 v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *size;
  unint64_t *v89;
  unint64_t v90;
  __int128 v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  void **v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  void **v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::runtime_error *exception;
  std::runtime_error *v121;
  std::logic_error *v122;
  std::logic_error *v123;
  std::logic_error *v124;
  std::string v125;
  std::string v126;
  void *v127;
  char v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  std::string v131;
  std::__shared_weak_count *v132;
  __int128 v133;
  std::string v134;
  std::string v135;
  void *__p;
  char v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count *v141;
  std::__shared_weak_count *v142;
  std::string v143;
  MIL::Builder::OperationBuilder *v144;
  std::__shared_weak_count *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  std::string v148;
  std::string v149;
  MIL::Builder::OperationBuilder *v150;
  std::__shared_weak_count *v151;
  std::string v152;
  __int128 v153;
  __int128 v154;
  int i;
  void *v156;
  uint64_t v157;
  MIL::Builder::BlockBuilder *v158;
  std::__shared_weak_count *v159;
  MIL::Builder::FunctionBuilder *v160;
  std::__shared_weak_count *v161;
  std::__shared_weak_count *v162;
  _BYTE v163[24];

  v1 = (MIL::Transform::ProgramTransformer *)MEMORY[0x19401BA88](v163, a1);
  MIL::Transform::ProgramTransformer::GetProgramBuilder(v1);
  MIL::Builder::ProgramBuilder::GetFunction();
  MIL::Builder::FunctionBuilder::SelectedSpecialization(v160);
  MIL::Builder::FunctionBuilder::GetBlock();
  MIL::Builder::BlockBuilder::GetOutputNames(v158);
  v3 = (uint64_t)v156;
  v2 = v157;
  v153 = 0u;
  v154 = 0u;
  for (i = 1065353216; v3 != v2; v3 += 24)
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v153, v3, v3);
  MIL::Builder::FunctionBuilder::GetInputs(v160);
  v4 = (_QWORD *)v152.__r_.__value_.__r.__words[2];
  if (v152.__r_.__value_.__r.__words[2])
  {
    while (1)
    {
      v5 = (MIL::Builder::Variable *)v4[2];
      Name = MIL::Builder::Variable::GetName(v5);
      if (!MIL::Builder::Variable::TryGetType(v5))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Failed in retrieving the type of a function input.");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      Type = (E5Common::Utils *)MIL::Builder::Variable::TryGetType(v5);
      if ((E5Common::Utils::IsTensorBuffer(Type, v8) & 1) == 0)
        goto LABEL_5;
      OperationsByInput = MIL::Builder::BlockBuilder::GetOperationsByInput();
      if (*(_QWORD *)(OperationsByInput + 24) != 1)
      {
        v122 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v122, "Only one consumer for a tensor buffer is supported.");
        v122->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(v122, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
      }
      v10 = *(_QWORD *)(OperationsByInput + 16);
      v12 = *(MIL::Builder::OperationBuilder **)(v10 + 16);
      v11 = *(std::__shared_weak_count **)(v10 + 24);
      v150 = v12;
      v151 = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
      }
      Operator = MIL::Builder::OperationBuilder::GetOperator(v12);
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Operator + 16))(Operator);
      Espresso::AOT::GetOperatorType(v16, &v149);
      if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v149.__r_.__value_.__l.__size_ != 23)
        {
          operator delete(v149.__r_.__value_.__l.__data_);
LABEL_254:
          v124 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v124, "Consumer is not tensor_buffer_to_tensor.");
          v124->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
          __cxa_throw(v124, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
        }
        v21 = *(_QWORD *)v149.__r_.__value_.__l.__data_ != 0x625F726F736E6574
           || *(_QWORD *)(v149.__r_.__value_.__r.__words[0] + 8) != 0x6F745F7265666675
           || *(_QWORD *)(v149.__r_.__value_.__r.__words[0] + 15) != 0x726F736E65745F6FLL;
        operator delete(v149.__r_.__value_.__l.__data_);
        if (v21)
          goto LABEL_254;
      }
      else
      {
        if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) != 23)
          goto LABEL_254;
        v17 = v149.__r_.__value_.__r.__words[0] == 0x625F726F736E6574
           && v149.__r_.__value_.__l.__size_ == 0x6F745F7265666675;
        if (!v17 || *(std::string::size_type *)((char *)&v149.__r_.__value_.__r.__words[1] + 7) != 0x726F736E65745F6FLL)
          goto LABEL_254;
      }
      MIL::Builder::FunctionBuilder::RemoveInput();
      OutputName = MIL::Builder::OperationBuilder::GetOutputName(v12);
      OutputType = (MIL::IRValueType *)MIL::Builder::OperationBuilder::GetOutputType(v12);
      MIL::IRValueType::AsTensorType(OutputType);
      if (*(char *)(Name + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v148, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
      }
      else
      {
        v24 = *(_OWORD *)Name;
        v148.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
        *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v24;
      }
      v146 = 0;
      v147 = 0;
      MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable();
      v25 = v147;
      if (!v147)
        goto LABEL_40;
      v26 = (unint64_t *)&v147->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
        if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_44:
          operator delete(v148.__r_.__value_.__l.__data_);
          v28 = v151;
          v144 = v150;
          v145 = v151;
          if (!v151)
            goto LABEL_47;
          goto LABEL_45;
        }
      }
      else
      {
LABEL_40:
        if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_44;
      }
      v28 = v151;
      v144 = v150;
      v145 = v151;
      if (!v151)
        goto LABEL_47;
LABEL_45:
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
LABEL_47:
      MIL::Builder::BlockBuilder::RemoveOperation();
      v31 = v145;
      if (!v145)
        goto LABEL_51;
      v32 = (unint64_t *)&v145->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
        if ((*(char *)(Name + 23) & 0x80000000) == 0)
        {
LABEL_52:
          v34 = *(_OWORD *)Name;
          v143.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
          *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v34;
          goto LABEL_55;
        }
      }
      else
      {
LABEL_51:
        if ((*(char *)(Name + 23) & 0x80000000) == 0)
          goto LABEL_52;
      }
      std::string::__init_copy_ctor_external(&v143, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
LABEL_55:
      MIL::Builder::FunctionBuilder::AddInput();
      if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v143.__r_.__value_.__l.__data_);
        if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v153, OutputName))goto LABEL_95;
      }
      else if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v153, OutputName))
      {
        goto LABEL_95;
      }
      *((_BYTE *)&v149.__r_.__value_.__s + 23) = 8;
      strcpy((char *)&v149, "identity");
      v138 = 0;
      v139 = 0;
      MIL::Builder::BlockBuilder::AddOperation();
      v137 = 1;
      LOWORD(__p) = 120;
      if (*(char *)(Name + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v135, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
      }
      else
      {
        v35 = *(_OWORD *)Name;
        v135.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
        *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v35;
      }
      MIL::Builder::OperationBuilder::AddInput();
      if (*(char *)(OutputName + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v134, *(const std::string::value_type **)OutputName, *(_QWORD *)(OutputName + 8));
      }
      else
      {
        v36 = *(_OWORD *)OutputName;
        v134.__r_.__value_.__r.__words[2] = *(_QWORD *)(OutputName + 16);
        *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v36;
      }
      MIL::Builder::OperationBuilder::AddOutput();
      if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v134.__r_.__value_.__l.__data_);
        v37 = v141;
        if (!v141)
          goto LABEL_72;
      }
      else
      {
        v37 = v141;
        if (!v141)
          goto LABEL_72;
      }
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (v39)
      {
LABEL_72:
        if ((SHIBYTE(v135.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_73;
        goto LABEL_77;
      }
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
      if ((SHIBYTE(v135.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_73:
        if ((v137 & 0x80000000) == 0)
          goto LABEL_74;
        goto LABEL_78;
      }
LABEL_77:
      operator delete(v135.__r_.__value_.__l.__data_);
      if ((v137 & 0x80000000) == 0)
      {
LABEL_74:
        v40 = v140;
        if (!v140)
          goto LABEL_82;
        goto LABEL_79;
      }
LABEL_78:
      operator delete(__p);
      v40 = v140;
      if (!v140)
        goto LABEL_82;
LABEL_79:
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
        v43 = v139;
        if (!v139)
          goto LABEL_88;
        goto LABEL_83;
      }
LABEL_82:
      v43 = v139;
      if (!v139)
        goto LABEL_88;
LABEL_83:
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
LABEL_88:
      if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v149.__r_.__value_.__l.__data_);
        v46 = v142;
        if (!v142)
          goto LABEL_95;
      }
      else
      {
        v46 = v142;
        if (!v142)
          goto LABEL_95;
      }
      v47 = (unint64_t *)&v46->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (v48)
      {
LABEL_95:
        v49 = v151;
        if (v151)
          goto LABEL_96;
        goto LABEL_5;
      }
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
      v49 = v151;
      if (v151)
      {
LABEL_96:
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
LABEL_5:
      v4 = (_QWORD *)*v4;
      if (!v4)
      {
        v52 = (_QWORD *)v152.__r_.__value_.__r.__words[2];
        if (v152.__r_.__value_.__r.__words[2])
        {
          do
          {
            v53 = (_QWORD *)*v52;
            operator delete(v52);
            v52 = v53;
          }
          while (v53);
        }
        break;
      }
    }
  }
  v54 = (void *)v152.__r_.__value_.__r.__words[0];
  v152.__r_.__value_.__r.__words[0] = 0;
  if (v54)
    operator delete(v54);
  v55 = (uint64_t)v156;
  if ((void *)v157 == v156)
    goto LABEL_219;
  v56 = 0;
  while (2)
  {
    v57 = v55 + 24 * v56;
    Variable = (MIL::Builder::Variable *)MIL::Builder::BlockBuilder::GetVariable();
    if (!MIL::Builder::Variable::TryGetType(Variable))
    {
      v121 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v121, "Failed in retrieving the type of a function output.");
      __cxa_throw(v121, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v59 = (E5Common::Utils *)MIL::Builder::Variable::TryGetType(Variable);
    if ((E5Common::Utils::IsTensorBuffer(v59, v60) & 1) == 0)
      goto LABEL_108;
    MIL::Builder::BlockBuilder::GetOperation();
    v61 = MIL::Builder::OperationBuilder::GetOperator((MIL::Builder::OperationBuilder *)v149.__r_.__value_.__l.__data_);
    v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 16))(v61);
    Espresso::AOT::GetOperatorType(v62, &v152);
    if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v152.__r_.__value_.__l.__size_ != 23)
      {
        operator delete(v152.__r_.__value_.__l.__data_);
LABEL_256:
        v123 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v123, "Producer is not tensor_to_tensor_buffer.");
LABEL_257:
        v123->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(v123, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
      }
      v67 = *(_QWORD *)v152.__r_.__value_.__l.__data_ != 0x745F726F736E6574
         || *(_QWORD *)(v152.__r_.__value_.__r.__words[0] + 8) != 0x726F736E65745F6FLL
         || *(_QWORD *)(v152.__r_.__value_.__r.__words[0] + 15) != 0x7265666675625F72;
      operator delete(v152.__r_.__value_.__l.__data_);
      if (v67)
        goto LABEL_256;
    }
    else
    {
      if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) != 23)
        goto LABEL_256;
      v63 = v152.__r_.__value_.__r.__words[0] == 0x745F726F736E6574
         && v152.__r_.__value_.__l.__size_ == 0x726F736E65745F6FLL;
      if (!v63 || *(std::string::size_type *)((char *)&v152.__r_.__value_.__r.__words[1] + 7) != 0x7265666675625F72)
        goto LABEL_256;
    }
    if (*(_QWORD *)(MIL::Builder::BlockBuilder::GetOperationsByInput() + 24))
    {
      v123 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v123, "A tensor_buffer that is a block output cannot be consumed by other operations.");
      goto LABEL_257;
    }
    v133 = *(_OWORD *)&v149.__r_.__value_.__l.__data_;
    if (v149.__r_.__value_.__l.__size_)
    {
      v68 = (unint64_t *)(v149.__r_.__value_.__l.__size_ + 8);
      do
        v69 = __ldxr(v68);
      while (__stxr(v69 + 1, v68));
    }
    MIL::Builder::BlockBuilder::RemoveOperation();
    v70 = (std::__shared_weak_count *)*((_QWORD *)&v133 + 1);
    if (*((_QWORD *)&v133 + 1))
    {
      v71 = (unint64_t *)(*((_QWORD *)&v133 + 1) + 8);
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    *((_BYTE *)&v152.__r_.__value_.__s + 23) = 5;
    strcpy((char *)&v152, "input");
    ArgumentForParameter = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
    v74 = MIL::Builder::Variable::GetName(ArgumentForParameter);
    if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v152.__r_.__value_.__l.__data_);
      if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v153, v74))
      {
LABEL_143:
        v75 = (MIL::Builder::Variable *)MIL::Builder::BlockBuilder::GetVariable();
        MIL::Builder::Variable::TryGetType(v75);
        *((_BYTE *)&v152.__r_.__value_.__s + 23) = 8;
        strcpy((char *)&v152, "identity");
        v129 = 0;
        v130 = 0;
        MIL::Builder::BlockBuilder::AddOperation();
        v128 = 1;
        LOWORD(v127) = 120;
        if (*(char *)(v74 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v126, *(const std::string::value_type **)v74, *(_QWORD *)(v74 + 8));
        }
        else
        {
          v76 = *(_OWORD *)v74;
          v126.__r_.__value_.__r.__words[2] = *(_QWORD *)(v74 + 16);
          *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v76;
        }
        MIL::Builder::OperationBuilder::AddInput();
        if (*(char *)(v57 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v125, *(const std::string::value_type **)v57, *(_QWORD *)(v57 + 8));
        }
        else
        {
          v91 = *(_OWORD *)v57;
          v125.__r_.__value_.__r.__words[2] = *(_QWORD *)(v57 + 16);
          *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v91;
        }
        MIL::Builder::OperationBuilder::AddOutput();
        if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v125.__r_.__value_.__l.__data_);
          v92 = v142;
          if (!v142)
            goto LABEL_189;
        }
        else
        {
          v92 = v142;
          if (!v142)
            goto LABEL_189;
        }
        v93 = (unint64_t *)&v92->__shared_owners_;
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
          if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_190:
            if ((v128 & 0x80000000) == 0)
              goto LABEL_191;
            goto LABEL_195;
          }
LABEL_194:
          operator delete(v126.__r_.__value_.__l.__data_);
          if ((v128 & 0x80000000) == 0)
          {
LABEL_191:
            v95 = v141;
            if (!v141)
              goto LABEL_199;
            goto LABEL_196;
          }
LABEL_195:
          operator delete(v127);
          v95 = v141;
          if (!v141)
            goto LABEL_199;
LABEL_196:
          v96 = (unint64_t *)&v95->__shared_owners_;
          do
            v97 = __ldaxr(v96);
          while (__stlxr(v97 - 1, v96));
          if (!v97)
          {
            ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
            std::__shared_weak_count::__release_weak(v95);
            v98 = v130;
            if (!v130)
              goto LABEL_205;
            goto LABEL_200;
          }
LABEL_199:
          v98 = v130;
          if (!v130)
            goto LABEL_205;
LABEL_200:
          v99 = (unint64_t *)&v98->__shared_owners_;
          do
            v100 = __ldaxr(v99);
          while (__stlxr(v100 - 1, v99));
          if (!v100)
          {
            ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
            std::__shared_weak_count::__release_weak(v98);
          }
LABEL_205:
          if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v152.__r_.__value_.__l.__data_);
            size = v151;
            if (!v151)
              goto LABEL_212;
          }
          else
          {
            size = v151;
            if (!v151)
              goto LABEL_212;
          }
          v101 = (unint64_t *)&size->__shared_owners_;
          do
            v90 = __ldaxr(v101);
          while (__stlxr(v90 - 1, v101));
          goto LABEL_211;
        }
LABEL_189:
        if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_190;
        goto LABEL_194;
      }
    }
    else if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v153, v74))
    {
      goto LABEL_143;
    }
    MIL::Builder::BlockBuilder::GetOperation();
    for (j = 0;
          j < MIL::Builder::OperationBuilder::GetNumOutputs((MIL::Builder::OperationBuilder *)v152.__r_.__value_.__l.__data_);
          ++j)
    {
      v78 = (unsigned __int8 *)MIL::Builder::OperationBuilder::GetOutputName((MIL::Builder::OperationBuilder *)v152.__r_.__value_.__l.__data_);
      v79 = v78[23];
      if ((v79 & 0x80u) == 0)
        v80 = v78[23];
      else
        v80 = *((_QWORD *)v78 + 1);
      v81 = *(unsigned __int8 *)(v74 + 23);
      v82 = (char)v81;
      if ((v81 & 0x80u) != 0)
        v81 = *(_QWORD *)(v74 + 8);
      if (v80 != v81)
        continue;
      if (v82 >= 0)
        v83 = (const std::string::value_type *)v74;
      else
        v83 = *(const std::string::value_type **)v74;
      if ((v79 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v78, v83, *((_QWORD *)v78 + 1)))
          continue;
      }
      else if (v78[23])
      {
        while (*v78 == *(unsigned __int8 *)v83)
        {
          ++v78;
          ++v83;
          if (!--v79)
            goto LABEL_163;
        }
        continue;
      }
LABEL_163:
      if (*(char *)(v57 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v131, *(const std::string::value_type **)v57, *(_QWORD *)(v57 + 8));
      }
      else
      {
        v84 = *(_OWORD *)v57;
        v131.__r_.__value_.__r.__words[2] = *(_QWORD *)(v57 + 16);
        *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v84;
      }
      MIL::Builder::OperationBuilder::RenameOutput();
      v85 = v132;
      if (!v132)
        goto LABEL_170;
      v86 = (unint64_t *)&v132->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (v87)
      {
LABEL_170:
        if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          continue;
LABEL_171:
        operator delete(v131.__r_.__value_.__l.__data_);
        continue;
      }
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
      if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_171;
    }
    size = (std::__shared_weak_count *)v152.__r_.__value_.__l.__size_;
    if (!v152.__r_.__value_.__l.__size_)
      goto LABEL_212;
    v89 = (unint64_t *)(v152.__r_.__value_.__l.__size_ + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
LABEL_211:
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
      v102 = (std::__shared_weak_count *)v149.__r_.__value_.__l.__size_;
      if (v149.__r_.__value_.__l.__size_)
      {
LABEL_213:
        v103 = (unint64_t *)&v102->__shared_owners_;
        do
          v104 = __ldaxr(v103);
        while (__stlxr(v104 - 1, v103));
        if (!v104)
        {
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
        }
      }
    }
    else
    {
LABEL_212:
      v102 = (std::__shared_weak_count *)v149.__r_.__value_.__l.__size_;
      if (v149.__r_.__value_.__l.__size_)
        goto LABEL_213;
    }
LABEL_108:
    ++v56;
    v55 = (uint64_t)v156;
    if (v56 < 0xAAAAAAAAAAAAAAABLL * ((v157 - (uint64_t)v156) >> 3))
      continue;
    break;
  }
LABEL_219:
  MIL::Transform::ProgramTransformer::GetProgram((MIL::Transform::ProgramTransformer *)v163);
  v105 = (void **)v154;
  if ((_QWORD)v154)
  {
    do
    {
      v110 = (void **)*v105;
      if (*((char *)v105 + 39) < 0)
        operator delete(v105[2]);
      operator delete(v105);
      v105 = v110;
    }
    while (v110);
  }
  v106 = (void *)v153;
  *(_QWORD *)&v153 = 0;
  if (v106)
    operator delete(v106);
  v107 = (uint64_t)v156;
  if (v156)
  {
    v108 = v157;
    v109 = v156;
    if ((void *)v157 != v156)
    {
      do
      {
        if (*(char *)(v108 - 1) < 0)
          operator delete(*(void **)(v108 - 24));
        v108 -= 24;
      }
      while (v108 != v107);
      v109 = v156;
    }
    v157 = v107;
    operator delete(v109);
  }
  v111 = v159;
  if (v159)
  {
    v112 = (unint64_t *)&v159->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = v161;
  if (v161)
  {
    v115 = (unint64_t *)&v161->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = v162;
  if (v162)
  {
    v118 = (unint64_t *)&v162->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)v163);
}

void sub_1910ABABC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1 - 224);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v1 - 176));
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 152);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 136);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 120);
  MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)(v1 - 104));
  _Unwind_Resume(a1);
}

void `anonymous namespace'::ResetBlockOutputs(MIL::Builder::BlockBuilder *a1, uint64_t *a2)
{
  char *v3;
  void **v4;
  char *v5;
  uint64_t i;
  uint64_t v7;
  char *__p;
  char *v9;

  MIL::Builder::BlockBuilder::GetOutputNames(a1);
  v3 = __p;
  if (__p != v9)
  {
    do
    {
      MIL::Builder::BlockBuilder::RemoveOutput();
      v3 += 24;
    }
    while (v3 != v9);
    v3 = __p;
  }
  if (v3)
  {
    v4 = (void **)v9;
    v5 = v3;
    if (v9 != v3)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 3;
      }
      while (v4 != (void **)v3);
      v5 = __p;
    }
    operator delete(v5);
  }
  v7 = *a2;
  for (i = a2[1]; v7 != i; v7 += 24)
    MIL::Builder::BlockBuilder::AddOutput();
}

void sub_1910ABE64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::ReplacePixelBufferByTensor(uint64_t a1)
{
  MIL::Transform::ProgramTransformer *v2;
  _QWORD *v3;
  const MIL::IRValueType *v4;
  _QWORD *v5;
  _QWORD *v6;
  _OWORD *v7;
  _QWORD **v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  _BOOL4 v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  char *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _OWORD *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  MIL::IRNamedValueType *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  MIL::IRValueType *Type;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const void *v47;
  int64_t v48;
  std::string::size_type v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t Name;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t Operator;
  uint64_t v57;
  int data;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::string *v65;
  unint64_t *v66;
  std::string *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  __int128 v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::string *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  std::string **v87;
  std::__shared_weak_count *v88;
  std::string **v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  void **v104;
  void **v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  void *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  std::string::size_type *v115;
  std::string::size_type *v116;
  std::string::size_type v117;
  std::string::size_type v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  std::string::size_type v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *size;
  unint64_t *v138;
  unint64_t v139;
  uint64_t *v140;
  unint64_t i;
  _QWORD *v142;
  uint64_t v143;
  const MIL::IRValueType *v144;
  int IsPixelBuffer;
  const std::string *v146;
  uint64_t v147;
  uint64_t v148;
  BOOL v149;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  _BOOL4 v156;
  MIL::Builder::Variable *ArgumentForParameter;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  unsigned __int8 *v164;
  uint64_t j;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  MIL::IRValueType *v177;
  uint64_t v178;
  MIL::Builder::Variable *v179;
  uint64_t v180;
  __int128 v181;
  MIL::IRValueType *OutputType;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  const void *v186;
  int64_t v187;
  std::string::size_type v188;
  uint64_t v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  void **v201;
  void **v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  void *v206;
  void *v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  unint64_t *v211;
  uint64_t v212;
  uint64_t v213;
  const void *v214;
  int64_t v215;
  std::__shared_weak_count *v216;
  uint64_t v217;
  unint64_t *v218;
  unint64_t v219;
  unint64_t *v220;
  unint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  uint64_t v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  void **v237;
  void **v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  void *v242;
  std::string::size_type v243;
  std::string::size_type v244;
  std::string::size_type v245;
  void *v246;
  std::string *v247;
  std::string *k;
  std::string *v249;
  std::string *v250;
  std::string *v251;
  std::string **v252;
  std::string **v253;
  std::string::size_type *v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  uint64_t result;
  std::logic_error *v271;
  std::logic_error *exception;
  std::logic_error *v273;
  std::logic_error *v274;
  _QWORD *v275;
  uint64_t Function;
  uint64_t v277;
  uint64_t v278;
  std::__shared_weak_count *v279;
  MIL::Builder::BlockBuilder *v280;
  std::__shared_weak_count *v281;
  char v282[8];
  std::__shared_weak_count *v283;
  __int128 v284;
  __int128 v285;
  MIL::Builder::BlockBuilder *v286;
  std::__shared_weak_count *v287;
  char v288[8];
  std::__shared_weak_count *v289;
  MIL::IRNamedValueType *v290;
  std::__shared_weak_count *v291;
  std::string::size_type v292;
  std::__shared_weak_count *v293;
  std::string::size_type v294;
  std::__shared_weak_count *v295;
  std::string *v296;
  std::string *v297;
  __int128 v298;
  std::string v299;
  std::__shared_weak_count *v300;
  std::string *v301;
  std::__shared_weak_count *v302;
  void *v303[2];
  char v304;
  std::__shared_weak_count *v305;
  void *v306;
  char v307;
  std::string v308;
  void *v309;
  char v310;
  std::__shared_weak_count *v311;
  void *v312;
  std::__shared_weak_count *v313;
  std::__shared_weak_count *v314;
  std::__shared_weak_count *v315;
  std::string *v316;
  std::__shared_weak_count *v317;
  std::string v318;
  __int128 v319;
  std::string v320;
  std::string __p;
  std::__shared_weak_count *v322;
  std::string v323;
  MIL::IRNamedValueType *v324;
  std::__shared_weak_count *v325;
  std::string::size_type *v326;
  std::string **v327;
  unint64_t v328;
  char *v329;
  char *v330;
  char *v331;
  MIL::Builder::BlockBuilder *v332;
  std::__shared_weak_count *v333;
  std::__shared_weak_count *v334;
  std::__shared_weak_count *v335;
  char v336[8];
  uint64_t v337;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  Function = MIL::IRProgram::GetFunction();
  v277 = (*(uint64_t (**)(void))(*(_QWORD *)Function + 40))();
  MIL::EdgeIndexes::BuildForBlock();
  v2 = (MIL::Transform::ProgramTransformer *)MEMORY[0x19401BA88](v336, a1);
  MIL::Transform::ProgramTransformer::GetProgramBuilder(v2);
  MIL::Builder::ProgramBuilder::GetFunction();
  (*(void (**)(uint64_t))(*(_QWORD *)Function + 32))(Function);
  MIL::Builder::FunctionBuilder::GetBlock();
  v329 = 0;
  v330 = 0;
  v331 = 0;
  v326 = 0;
  v327 = 0;
  v328 = 0;
  v3 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Function + 128))(Function);
  v6 = v3 + 1;
  v5 = (_QWORD *)*v3;
  if ((_QWORD *)*v3 != v3 + 1)
  {
    v275 = v3 + 1;
    while (1)
    {
      if ((E5Common::Utils::IsPixelBuffer((E5Common::Utils *)v5[7], v4) & 1) == 0)
        goto LABEL_184;
      v7 = v5 + 4;
      v8 = (_QWORD **)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v337 + 16))(v337, v5 + 4);
      if ((char *)v8[1] - (char *)*v8 != 16)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Found more than one edge for a pixel buffer.");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
      }
      v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**v8 + 24))(**v8);
      v10 = *(_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v277 + 56))(v277);
      if (v9 >= (unint64_t)((uint64_t)(v10[1] - *v10) >> 4))
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v11 = *(_QWORD *)(*v10 + 16 * v9);
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 56))(v11);
      Espresso::AOT::GetOperatorType(v12, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__p.__r_.__value_.__l.__size_ != 22)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
LABEL_481:
          v274 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v274, "Consumer is not pixel_buffer_to_tensor.");
          v274->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
          __cxa_throw(v274, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
        }
        v17 = *(_QWORD *)__p.__r_.__value_.__l.__data_ != 0x75625F6C65786970
           || *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8) != 0x5F6F745F72656666
           || *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 14) != 0x726F736E65745F6FLL;
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v17)
          goto LABEL_481;
      }
      else
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 22)
          goto LABEL_481;
        v13 = __p.__r_.__value_.__r.__words[0] == 0x75625F6C65786970
           && __p.__r_.__value_.__l.__size_ == 0x5F6F745F72656666;
        if (!v13 || *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) != 0x726F736E65745F6FLL)
          goto LABEL_481;
      }
      v18 = v330;
      if (v330 >= v331)
        break;
      *(_QWORD *)v330 = v9;
      v19 = v18 + 8;
LABEL_49:
      v330 = v19;
      MIL::Builder::FunctionBuilder::RemoveInput();
      v37 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 176))(v11);
      v38 = *v37;
      if (v37[1] == *v37)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v40 = *(MIL::IRNamedValueType **)v38;
      v39 = *(std::__shared_weak_count **)(v38 + 8);
      v324 = v40;
      v325 = v39;
      if (v39)
      {
        p_shared_owners = (unint64_t *)&v39->__shared_owners_;
        do
          v42 = __ldxr(p_shared_owners);
        while (__stxr(v42 + 1, p_shared_owners));
      }
      Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(v40);
      v44 = MIL::IRValueType::AsTensorType(Type);
      (*(void (**)(uint64_t))(*(_QWORD *)v44 + 88))(v44);
      v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 96))(v44);
      memset(&v323, 0, sizeof(v323));
      v47 = *(const void **)v45;
      v46 = *(_QWORD *)(v45 + 8);
      v48 = v46 - *(_QWORD *)v45;
      if (v46 != *(_QWORD *)v45)
      {
        if (v48 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v323.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(v46 - *(_QWORD *)v45);
        v323.__r_.__value_.__l.__size_ = v323.__r_.__value_.__r.__words[0];
        v49 = v323.__r_.__value_.__r.__words[0] + 8 * (v48 >> 3);
        v323.__r_.__value_.__r.__words[2] = v49;
        memcpy(v323.__r_.__value_.__l.__data_, v47, v48);
        v323.__r_.__value_.__l.__size_ = v49;
      }
      v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 80))(v44);
      std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)&__p, v50);
      MIL::IRTensorValueType::MakeWithShape();
      if (*((char *)v5 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(&v320, (const std::string::value_type *)v5[4], v5[5]);
      }
      else
      {
        *(_OWORD *)&v320.__r_.__value_.__l.__data_ = *v7;
        v320.__r_.__value_.__r.__words[2] = v5[6];
      }
      MIL::Builder::FunctionBuilder::AddInput();
      if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v320.__r_.__value_.__l.__data_);
      v51 = v337;
      Name = MIL::IRNamedValueType::GetName(v40);
      v53 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v51 + 16))(v51, Name);
      v54 = *(_QWORD **)v53;
      v55 = *(_QWORD **)(v53 + 8);
      while (v54 != v55)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)*v54 + 24))(*v54);
        MIL::Builder::BlockBuilder::GetOperation(v332);
        Operator = MIL::Builder::OperationBuilder::GetOperator((MIL::Builder::OperationBuilder *)v319);
        v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Operator + 16))(Operator);
        Espresso::AOT::GetOperatorType(v57, (std::string *)&v296);
        if (SBYTE7(v298) < 0)
        {
          if (v297 == (std::string *)4)
          {
            data = (int)v296->__r_.__value_.__l.__data_;
            operator delete(v296);
            if (data == 1953718627)
              goto LABEL_70;
          }
          else
          {
            operator delete(v296);
          }
        }
        else if (SBYTE7(v298) == 4 && (_DWORD)v296 == 1953718627)
        {
LABEL_70:
          MIL::IRNamedValueType::GetName(v324);
          if (*((char *)v5 + 55) < 0)
          {
            std::string::__init_copy_ctor_external(&v318, (const std::string::value_type *)v5[4], v5[5]);
          }
          else
          {
            *(_OWORD *)&v318.__r_.__value_.__l.__data_ = *v7;
            v318.__r_.__value_.__r.__words[2] = v5[6];
          }
          MIL::Builder::OperationBuilder::RenameArgument();
          if (SHIBYTE(v318.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v318.__r_.__value_.__l.__data_);
            v101 = (std::__shared_weak_count *)*((_QWORD *)&v319 + 1);
            if (!*((_QWORD *)&v319 + 1))
              goto LABEL_62;
            goto LABEL_160;
          }
          goto LABEL_159;
        }
        BYTE7(v298) = 5;
        strcpy((char *)&v296, "ios17");
        MIL::MILContext::GetOpset();
        HIBYTE(v314) = 4;
        strcpy((char *)&v312, "cast");
        MIL::IROpset::TryGetOperatorSharedPtr();
        MIL::Builder::OperationBuilder::Make();
        v59 = v315;
        if (!v315)
          goto LABEL_77;
        v60 = (unint64_t *)&v315->__shared_owners_;
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
          if (SHIBYTE(v314) < 0)
          {
LABEL_106:
            operator delete(v312);
            if ((SBYTE7(v298) & 0x80000000) == 0)
              goto LABEL_79;
            goto LABEL_107;
          }
        }
        else
        {
LABEL_77:
          if (SHIBYTE(v314) < 0)
            goto LABEL_106;
        }
        if ((SBYTE7(v298) & 0x80000000) == 0)
          goto LABEL_79;
LABEL_107:
        operator delete(v296);
LABEL_79:
        v310 = 1;
        LOWORD(v309) = 120;
        if (*((char *)v5 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(&v308, (const std::string::value_type *)v5[4], v5[5]);
        }
        else
        {
          *(_OWORD *)&v308.__r_.__value_.__l.__data_ = *v7;
          v308.__r_.__value_.__r.__words[2] = v5[6];
        }
        MIL::Builder::OperationBuilder::AddInput();
        v62 = v311;
        if (!v311)
          goto LABEL_86;
        v63 = (unint64_t *)&v311->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
          if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_109:
            operator delete(v308.__r_.__value_.__l.__data_);
            if ((v310 & 0x80000000) == 0)
              goto LABEL_88;
            goto LABEL_110;
          }
        }
        else
        {
LABEL_86:
          if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_109;
        }
        if ((v310 & 0x80000000) == 0)
          goto LABEL_88;
LABEL_110:
        operator delete(v309);
LABEL_88:
        MIL::IRTensorValueType::MakeScalar();
        MIL::IRDataTypeToString();
        MIL::IRTensorValueType::MakeStringValue();
        v65 = v296;
        v312 = v296;
        if (v296)
        {
          v66 = (unint64_t *)operator new();
          v67 = v296;
          *v66 = (unint64_t)&unk_1E2DC2BE0;
          v66[1] = 0;
          v66[2] = 0;
          v66[3] = (unint64_t)v67;
          v313 = (std::__shared_weak_count *)v66;
          v296 = 0;
          if ((v307 & 0x80000000) == 0)
            goto LABEL_91;
LABEL_90:
          operator delete(v306);
          goto LABEL_91;
        }
        v66 = 0;
        v313 = 0;
        v296 = 0;
        if (v307 < 0)
          goto LABEL_90;
LABEL_91:
        v304 = 5;
        strcpy((char *)v303, "dtype");
        v301 = v65;
        v302 = (std::__shared_weak_count *)v66;
        if (v66)
        {
          v68 = v66 + 1;
          do
            v69 = __ldxr(v68);
          while (__stxr(v69 + 1, v68));
        }
        MIL::Builder::OperationBuilder::AddInput();
        v70 = v305;
        if (!v305)
          goto LABEL_98;
        v71 = (unint64_t *)&v305->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
          v73 = v302;
          if (!v302)
            goto LABEL_112;
        }
        else
        {
LABEL_98:
          v73 = v302;
          if (!v302)
            goto LABEL_112;
        }
        v74 = (unint64_t *)&v73->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
LABEL_112:
        if (v304 < 0)
          operator delete(v303[0]);
        v76 = MIL::IRNamedValueType::GetName(v324);
        if (*(char *)(v76 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v299, *(const std::string::value_type **)v76, *(_QWORD *)(v76 + 8));
        }
        else
        {
          v77 = *(_OWORD *)v76;
          v299.__r_.__value_.__r.__words[2] = *(_QWORD *)(v76 + 16);
          *(_OWORD *)&v299.__r_.__value_.__l.__data_ = v77;
        }
        MIL::Builder::OperationBuilder::AddOutput();
        v78 = v300;
        if (!v300)
          goto LABEL_121;
        v79 = (unint64_t *)&v300->__shared_owners_;
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
          if ((SHIBYTE(v299.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_122:
            v81 = v316;
            v82 = v317;
            v296 = v316;
            v297 = (std::string *)v317;
            if (!v317)
              goto LABEL_128;
            goto LABEL_126;
          }
        }
        else
        {
LABEL_121:
          if ((SHIBYTE(v299.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_122;
        }
        operator delete(v299.__r_.__value_.__l.__data_);
        v81 = v316;
        v82 = v317;
        v296 = v316;
        v297 = (std::string *)v317;
        if (!v317)
          goto LABEL_128;
LABEL_126:
        v83 = (unint64_t *)&v82->__shared_owners_;
        do
          v84 = __ldxr(v83);
        while (__stxr(v84 + 1, v83));
LABEL_128:
        v298 = v319;
        if (*((_QWORD *)&v319 + 1))
        {
          v85 = (unint64_t *)(*((_QWORD *)&v319 + 1) + 8);
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
        }
        v87 = v327;
        if ((unint64_t)v327 >= v328)
        {
          v89 = (std::string **)std::vector<std::pair<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder>>>::__push_back_slow_path<std::pair<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder>>>((void **)&v326, (uint64_t)&v296);
          v90 = (std::__shared_weak_count *)*((_QWORD *)&v298 + 1);
          v327 = v89;
          if (!*((_QWORD *)&v298 + 1))
            goto LABEL_138;
          v91 = (unint64_t *)(*((_QWORD *)&v298 + 1) + 8);
          do
            v92 = __ldaxr(v91);
          while (__stlxr(v92 - 1, v91));
          if (!v92)
          {
            ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
            std::__shared_weak_count::__release_weak(v90);
            v88 = (std::__shared_weak_count *)v297;
            if (!v297)
              goto LABEL_143;
          }
          else
          {
LABEL_138:
            v88 = (std::__shared_weak_count *)v297;
            if (!v297)
              goto LABEL_143;
          }
        }
        else
        {
          *v327 = v81;
          v87[1] = v297;
          v296 = 0;
          v297 = 0;
          *((_OWORD *)v87 + 1) = v298;
          v298 = 0uLL;
          v327 = v87 + 4;
          v88 = (std::__shared_weak_count *)v297;
          if (!v297)
            goto LABEL_143;
        }
        v93 = (unint64_t *)&v88->__shared_owners_;
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
        }
LABEL_143:
        v95 = v313;
        if (!v313)
          goto LABEL_147;
        v96 = (unint64_t *)&v313->__shared_owners_;
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
          v98 = v317;
          if (!v317)
            goto LABEL_159;
        }
        else
        {
LABEL_147:
          v98 = v317;
          if (!v317)
            goto LABEL_159;
        }
        v99 = (unint64_t *)&v98->__shared_owners_;
        do
          v100 = __ldaxr(v99);
        while (__stlxr(v100 - 1, v99));
        if (!v100)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
          v101 = (std::__shared_weak_count *)*((_QWORD *)&v319 + 1);
          if (!*((_QWORD *)&v319 + 1))
            goto LABEL_62;
          goto LABEL_160;
        }
LABEL_159:
        v101 = (std::__shared_weak_count *)*((_QWORD *)&v319 + 1);
        if (!*((_QWORD *)&v319 + 1))
          goto LABEL_62;
LABEL_160:
        v102 = (unint64_t *)&v101->__shared_owners_;
        do
          v103 = __ldaxr(v102);
        while (__stlxr(v103 - 1, v102));
        if (!v103)
        {
          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
          std::__shared_weak_count::__release_weak(v101);
        }
LABEL_62:
        v54 += 2;
      }
      v104 = (void **)__p.__r_.__value_.__r.__words[2];
      v6 = v275;
      if (__p.__r_.__value_.__r.__words[2])
      {
        do
        {
          while (1)
          {
            v105 = (void **)*v104;
            v106 = (std::__shared_weak_count *)v104[6];
            if (v106)
            {
              v107 = (unint64_t *)&v106->__shared_owners_;
              do
                v108 = __ldaxr(v107);
              while (__stlxr(v108 - 1, v107));
              if (!v108)
              {
                ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                std::__shared_weak_count::__release_weak(v106);
              }
            }
            if (*((char *)v104 + 39) < 0)
              break;
            operator delete(v104);
            v104 = v105;
            if (!v105)
              goto LABEL_176;
          }
          operator delete(v104[2]);
          operator delete(v104);
          v104 = v105;
        }
        while (v105);
      }
LABEL_176:
      v109 = (void *)__p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v109)
        operator delete(v109);
      if (v323.__r_.__value_.__r.__words[0])
      {
        v323.__r_.__value_.__l.__size_ = v323.__r_.__value_.__r.__words[0];
        operator delete(v323.__r_.__value_.__l.__data_);
      }
      v110 = v325;
      if (!v325)
        goto LABEL_184;
      v111 = (unint64_t *)&v325->__shared_owners_;
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
        v113 = (_QWORD *)v5[1];
        if (v113)
          goto LABEL_185;
      }
      else
      {
LABEL_184:
        v113 = (_QWORD *)v5[1];
        if (v113)
        {
          do
          {
LABEL_185:
            v114 = v113;
            v113 = (_QWORD *)*v113;
          }
          while (v113);
          goto LABEL_3;
        }
      }
      do
      {
        v114 = (_QWORD *)v5[2];
        v13 = *v114 == (_QWORD)v5;
        v5 = v114;
      }
      while (!v13);
LABEL_3:
      v5 = v114;
      if (v114 == v6)
        goto LABEL_191;
    }
    v20 = v329;
    v21 = (v330 - v329) >> 3;
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v23 = v331 - v329;
    if ((v331 - v329) >> 2 > v22)
      v22 = v23 >> 2;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
      v24 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
    {
      if (v24 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v25 = operator new(8 * v24);
      v26 = &v25[8 * v21];
      *(_QWORD *)v26 = v9;
      v19 = v26 + 8;
      if (v18 == v20)
        goto LABEL_47;
    }
    else
    {
      v25 = 0;
      v26 = (char *)(8 * v21);
      v27 = (_QWORD *)(8 * v21);
      *v27 = v9;
      v19 = (char *)(v27 + 1);
      if (v18 == v20)
      {
LABEL_47:
        v329 = v26;
        v331 = &v25[8 * v24];
        if (v20)
          operator delete(v20);
        goto LABEL_49;
      }
    }
    v28 = v18 - 8 - v20;
    if (v28 < 0x58)
      goto LABEL_486;
    if ((unint64_t)(v20 - v25) < 0x20)
      goto LABEL_486;
    v29 = (v28 >> 3) + 1;
    v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
    v31 = &v18[-v30];
    v26 -= v30;
    v32 = &v25[v18 - v20 - 16];
    v33 = v18 - 16;
    v34 = v29 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v35 = *(_OWORD *)v33;
      *(v32 - 1) = *((_OWORD *)v33 - 1);
      *v32 = v35;
      v32 -= 2;
      v33 -= 32;
      v34 -= 4;
    }
    while (v34);
    v18 = v31;
    if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_486:
      do
      {
        v36 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v26 - 1) = v36;
        v26 -= 8;
      }
      while (v18 != v20);
    }
    goto LABEL_47;
  }
LABEL_191:
  MIL::Builder::BlockBuilder::RemoveOperations();
  v115 = v326;
  v116 = (std::string::size_type *)v327;
  while (v115 != v116)
  {
    v118 = *v115;
    v117 = v115[1];
    __p.__r_.__value_.__r.__words[0] = *v115;
    __p.__r_.__value_.__l.__size_ = v117;
    if (v117)
    {
      v119 = (unint64_t *)(v117 + 8);
      do
        v120 = __ldxr(v119);
      while (__stxr(v120 + 1, v119));
    }
    v122 = v115[2];
    v121 = (std::__shared_weak_count *)v115[3];
    __p.__r_.__value_.__r.__words[2] = v122;
    v322 = v121;
    if (v121)
    {
      v123 = (unint64_t *)&v121->__shared_owners_;
      do
        v124 = __ldxr(v123);
      while (__stxr(v124 + 1, v123));
    }
    v294 = v118;
    v295 = (std::__shared_weak_count *)v117;
    if (v117)
    {
      v125 = (unint64_t *)(v117 + 8);
      do
        v126 = __ldxr(v125);
      while (__stxr(v126 + 1, v125));
    }
    v292 = v122;
    v293 = v121;
    if (v121)
    {
      v127 = (unint64_t *)&v121->__shared_owners_;
      do
        v128 = __ldxr(v127);
      while (__stxr(v128 + 1, v127));
    }
    MIL::Builder::BlockBuilder::AddOperation();
    if (!v293)
      goto LABEL_210;
    v129 = &v293->__shared_owners_;
    do
      v130 = __ldaxr((unint64_t *)v129);
    while (__stlxr(v130 - 1, (unint64_t *)v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
      std::__shared_weak_count::__release_weak(v293);
      v131 = v295;
      if (!v295)
        goto LABEL_216;
    }
    else
    {
LABEL_210:
      v131 = v295;
      if (!v295)
        goto LABEL_216;
    }
    v132 = (unint64_t *)&v131->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
LABEL_216:
    v134 = v322;
    if (!v322)
      goto LABEL_220;
    v135 = (unint64_t *)&v322->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
      size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (!__p.__r_.__value_.__l.__size_)
        goto LABEL_192;
    }
    else
    {
LABEL_220:
      size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (!__p.__r_.__value_.__l.__size_)
        goto LABEL_192;
    }
    v138 = (unint64_t *)&size->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
LABEL_192:
    v115 += 4;
  }
  v140 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v277 + 88))(v277);
  std::vector<std::string>::vector((std::vector<std::string> *)&v296, 0xAAAAAAAAAAAAAAABLL * ((v140[1] - *v140) >> 3));
  for (i = 0; ; ++i)
  {
    v142 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v277 + 88))(v277);
    if (i >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v142[1] - *v142) >> 3))
      break;
    v143 = *v140;
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)Function + 160))(&__p);
    if (i >= (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3)
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    IsPixelBuffer = E5Common::Utils::IsPixelBuffer(*(E5Common::Utils **)(__p.__r_.__value_.__r.__words[0] + 8 * i), v144);
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    v146 = (const std::string *)(v143 + 24 * i);
    if (IsPixelBuffer)
    {
      MIL::Builder::BlockBuilder::GetOperation();
      v147 = MIL::Builder::OperationBuilder::GetOperator(v324);
      v148 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v147 + 16))(v147);
      Espresso::AOT::GetOperatorType(v148, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__p.__r_.__value_.__l.__size_ != 22)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
LABEL_478:
          v273 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v273, "Producer is not tensor_to_pixel_buffer.");
          v273->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
          __cxa_throw(v273, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
        }
        v156 = *(_QWORD *)__p.__r_.__value_.__l.__data_ != 0x745F726F736E6574
            || *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8) != 0x5F6C657869705F6FLL
            || *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 14) != 0x7265666675625F6CLL;
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v156)
          goto LABEL_478;
      }
      else
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 22)
          goto LABEL_478;
        v149 = __p.__r_.__value_.__r.__words[0] == 0x745F726F736E6574
            && __p.__r_.__value_.__l.__size_ == 0x5F6C657869705F6FLL;
        if (!v149 || *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) != 0x7265666675625F6CLL)
          goto LABEL_478;
      }
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&__p, "input");
      ArgumentForParameter = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v158 = MIL::Builder::Variable::GetName(ArgumentForParameter);
      v159 = v158;
      v161 = *v140;
      v160 = v140[1];
      if (*v140 != v160)
      {
        v162 = *(_BYTE *)(v158 + 23);
        if (v162 >= 0)
          v163 = *(unsigned __int8 *)(v158 + 23);
        else
          v163 = *(_QWORD *)(v158 + 8);
        if (v162 >= 0)
          v164 = (unsigned __int8 *)v158;
        else
          v164 = *(unsigned __int8 **)v158;
        for (j = *v140; j != v160; j += 24)
        {
          v166 = *(unsigned __int8 *)(j + 23);
          if ((v166 & 0x80u) == 0)
            v167 = *(unsigned __int8 *)(j + 23);
          else
            v167 = *(_QWORD *)(j + 8);
          if (v167 == v163)
          {
            if ((v166 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)j, v164, *(_QWORD *)(j + 8)))
                goto LABEL_283;
            }
            else
            {
              if (!*(_BYTE *)(j + 23))
              {
LABEL_283:
                if (j != v160)
                {
                  if (0xAAAAAAAAAAAAAAABLL * (((char *)v297 - (char *)v296) >> 3) <= 0xAAAAAAAAAAAAAAABLL
                                                                                    * ((j - v161) >> 3))
                    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                  std::string::operator=((std::string *)((char *)v296 + 8 * ((j - v161) >> 3)), v146);
                }
                break;
              }
              v168 = 0;
              while (*(unsigned __int8 *)(j + v168) == v164[v168])
              {
                if (v166 == ++v168)
                  goto LABEL_283;
              }
            }
          }
        }
      }
      v290 = v324;
      v291 = v325;
      if (v325)
      {
        v169 = (unint64_t *)&v325->__shared_owners_;
        do
          v170 = __ldxr(v169);
        while (__stxr(v170 + 1, v169));
      }
      MIL::Builder::BlockBuilder::RemoveOperation();
      v171 = v291;
      if (v291)
      {
        v172 = (unint64_t *)&v291->__shared_owners_;
        do
          v173 = __ldaxr(v172);
        while (__stlxr(v173 - 1, v172));
        if (!v173)
        {
          ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
          std::__shared_weak_count::__release_weak(v171);
        }
      }
      MIL::Builder::BlockBuilder::GetOperation();
      if (MIL::Builder::OperationBuilder::GetNumOutputs((MIL::Builder::OperationBuilder *)v319) != 1)
      {
        v271 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v271, "Unsupported number of outputs. Only one output is supported.");
        v271->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(v271, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
      }
      v174 = MIL::Builder::OperationBuilder::GetOperator((MIL::Builder::OperationBuilder *)v319);
      v175 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 16))(v174);
      Espresso::AOT::GetOperatorType(v175, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__p.__r_.__value_.__l.__size_ != 4)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_306;
        }
        v176 = *(_DWORD *)__p.__r_.__value_.__l.__data_;
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v176 != 1953718627)
          goto LABEL_306;
      }
      else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 4 || LODWORD(__p.__r_.__value_.__l.__data_) != 1953718627)
      {
LABEL_306:
        OutputType = (MIL::IRValueType *)MIL::Builder::OperationBuilder::GetOutputType((MIL::Builder::OperationBuilder *)v319);
        v183 = MIL::IRValueType::AsTensorType(OutputType);
        v184 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v183 + 96))(v183);
        memset(&v323, 0, sizeof(v323));
        v186 = *(const void **)v184;
        v185 = *(_QWORD *)(v184 + 8);
        v187 = v185 - *(_QWORD *)v184;
        if (v185 != *(_QWORD *)v184)
        {
          if (v187 < 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v323.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(v185 - *(_QWORD *)v184);
          v323.__r_.__value_.__l.__size_ = v323.__r_.__value_.__r.__words[0];
          v188 = v323.__r_.__value_.__r.__words[0] + 8 * (v187 >> 3);
          v323.__r_.__value_.__r.__words[2] = v188;
          memcpy(v323.__r_.__value_.__l.__data_, v186, v187);
          v323.__r_.__value_.__l.__size_ = v188;
        }
        v189 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v183 + 80))(v183);
        std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)&__p, v189);
        v280 = v332;
        v281 = v333;
        if (v333)
        {
          v190 = (unint64_t *)&v333->__shared_owners_;
          do
            v191 = __ldxr(v190);
          while (__stxr(v191 + 1, v190));
        }
        v278 = 0;
        v279 = 0;
        v192 = v283;
        if (!v283)
          goto LABEL_316;
        v193 = (unint64_t *)&v283->__shared_owners_;
        do
          v194 = __ldaxr(v193);
        while (__stlxr(v194 - 1, v193));
        if (!v194)
        {
          ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
          std::__shared_weak_count::__release_weak(v192);
          v195 = v279;
          if (v279)
          {
LABEL_317:
            v196 = (unint64_t *)&v195->__shared_owners_;
            do
              v197 = __ldaxr(v196);
            while (__stlxr(v197 - 1, v196));
            if (!v197)
            {
              ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
              std::__shared_weak_count::__release_weak(v195);
            }
          }
        }
        else
        {
LABEL_316:
          v195 = v279;
          if (v279)
            goto LABEL_317;
        }
        v198 = v281;
        if (!v281)
          goto LABEL_326;
        v199 = (unint64_t *)&v281->__shared_owners_;
        do
          v200 = __ldaxr(v199);
        while (__stlxr(v200 - 1, v199));
        if (!v200)
        {
          ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
          std::__shared_weak_count::__release_weak(v198);
          v201 = (void **)__p.__r_.__value_.__r.__words[2];
          if (__p.__r_.__value_.__r.__words[2])
            goto LABEL_332;
        }
        else
        {
LABEL_326:
          v201 = (void **)__p.__r_.__value_.__r.__words[2];
          if (__p.__r_.__value_.__r.__words[2])
          {
            do
            {
              while (1)
              {
LABEL_332:
                v202 = (void **)*v201;
                v203 = (std::__shared_weak_count *)v201[6];
                if (v203)
                {
                  v204 = (unint64_t *)&v203->__shared_owners_;
                  do
                    v205 = __ldaxr(v204);
                  while (__stlxr(v205 - 1, v204));
                  if (!v205)
                  {
                    ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                    std::__shared_weak_count::__release_weak(v203);
                  }
                }
                if (*((char *)v201 + 39) < 0)
                  break;
                operator delete(v201);
                v201 = v202;
                if (!v202)
                  goto LABEL_338;
              }
              operator delete(v201[2]);
              operator delete(v201);
              v201 = v202;
            }
            while (v202);
          }
        }
LABEL_338:
        v206 = (void *)__p.__r_.__value_.__r.__words[0];
        __p.__r_.__value_.__r.__words[0] = 0;
        if (v206)
          operator delete(v206);
        v207 = (void *)v323.__r_.__value_.__r.__words[0];
        if (v323.__r_.__value_.__r.__words[0])
        {
          v323.__r_.__value_.__l.__size_ = v323.__r_.__value_.__r.__words[0];
          goto LABEL_342;
        }
        goto LABEL_343;
      }
      v177 = (MIL::IRValueType *)MIL::Builder::OperationBuilder::GetOutputType((MIL::Builder::OperationBuilder *)v319);
      v178 = MIL::IRValueType::AsTensorType(v177);
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 1;
      LOWORD(__p.__r_.__value_.__l.__data_) = 120;
      v179 = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
      v180 = MIL::Builder::Variable::GetName(v179);
      if (*(char *)(v180 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v323, *(const std::string::value_type **)v180, *(_QWORD *)(v180 + 8));
      }
      else
      {
        v181 = *(_OWORD *)v180;
        v323.__r_.__value_.__r.__words[2] = *(_QWORD *)(v180 + 16);
        *(_OWORD *)&v323.__r_.__value_.__l.__data_ = v181;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v212 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v178 + 96))(v178);
      v312 = 0;
      v313 = 0;
      v314 = 0;
      v214 = *(const void **)v212;
      v213 = *(_QWORD *)(v212 + 8);
      v215 = v213 - *(_QWORD *)v212;
      if (v213 != *(_QWORD *)v212)
      {
        if (v215 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v312 = operator new(v213 - *(_QWORD *)v212);
        v313 = (std::__shared_weak_count *)v312;
        v216 = (std::__shared_weak_count *)((char *)v312 + 8 * (v215 >> 3));
        v314 = v216;
        memcpy(v312, v214, v215);
        v313 = v216;
      }
      v217 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v178 + 80))(v178);
      std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)&__p, v217);
      v286 = v332;
      v287 = v333;
      if (v333)
      {
        v218 = (unint64_t *)&v333->__shared_owners_;
        do
          v219 = __ldxr(v218);
        while (__stxr(v219 + 1, v218));
      }
      v285 = v319;
      if (*((_QWORD *)&v319 + 1))
      {
        v220 = (unint64_t *)(*((_QWORD *)&v319 + 1) + 8);
        do
          v221 = __ldxr(v220);
        while (__stxr(v221 + 1, v220));
      }
      v222 = v289;
      if (!v289)
        goto LABEL_372;
      v223 = (unint64_t *)&v289->__shared_owners_;
      do
        v224 = __ldaxr(v223);
      while (__stlxr(v224 - 1, v223));
      if (!v224)
      {
        ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
        std::__shared_weak_count::__release_weak(v222);
        v225 = (std::__shared_weak_count *)*((_QWORD *)&v285 + 1);
        if (*((_QWORD *)&v285 + 1))
        {
LABEL_373:
          v226 = (unint64_t *)&v225->__shared_owners_;
          do
            v227 = __ldaxr(v226);
          while (__stlxr(v227 - 1, v226));
          if (!v227)
          {
            ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
            std::__shared_weak_count::__release_weak(v225);
          }
        }
      }
      else
      {
LABEL_372:
        v225 = (std::__shared_weak_count *)*((_QWORD *)&v285 + 1);
        if (*((_QWORD *)&v285 + 1))
          goto LABEL_373;
      }
      v228 = v287;
      if (!v287)
        goto LABEL_382;
      v229 = (unint64_t *)&v287->__shared_owners_;
      do
        v230 = __ldaxr(v229);
      while (__stlxr(v230 - 1, v229));
      if (!v230)
      {
        ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
        std::__shared_weak_count::__release_weak(v228);
        v231 = *((_QWORD *)&v319 + 1);
        v284 = v319;
        if (*((_QWORD *)&v319 + 1))
          goto LABEL_383;
      }
      else
      {
LABEL_382:
        v231 = *((_QWORD *)&v319 + 1);
        v284 = v319;
        if (*((_QWORD *)&v319 + 1))
        {
LABEL_383:
          v232 = (unint64_t *)(v231 + 8);
          do
            v233 = __ldxr(v232);
          while (__stxr(v233 + 1, v232));
        }
      }
      MIL::Builder::BlockBuilder::RemoveOperation();
      v234 = (std::__shared_weak_count *)*((_QWORD *)&v284 + 1);
      if (!*((_QWORD *)&v284 + 1))
        goto LABEL_389;
      v235 = (unint64_t *)(*((_QWORD *)&v284 + 1) + 8);
      do
        v236 = __ldaxr(v235);
      while (__stlxr(v236 - 1, v235));
      if (!v236)
      {
        ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
        std::__shared_weak_count::__release_weak(v234);
        v237 = (void **)__p.__r_.__value_.__r.__words[2];
        if (__p.__r_.__value_.__r.__words[2])
          goto LABEL_397;
      }
      else
      {
LABEL_389:
        v237 = (void **)__p.__r_.__value_.__r.__words[2];
        if (__p.__r_.__value_.__r.__words[2])
        {
          do
          {
            while (1)
            {
LABEL_397:
              v238 = (void **)*v237;
              v239 = (std::__shared_weak_count *)v237[6];
              if (v239)
              {
                v240 = (unint64_t *)&v239->__shared_owners_;
                do
                  v241 = __ldaxr(v240);
                while (__stlxr(v241 - 1, v240));
                if (!v241)
                {
                  ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
                  std::__shared_weak_count::__release_weak(v239);
                }
              }
              if (*((char *)v237 + 39) < 0)
                break;
              operator delete(v237);
              v237 = v238;
              if (!v238)
                goto LABEL_403;
            }
            operator delete(v237[2]);
            operator delete(v237);
            v237 = v238;
          }
          while (v238);
        }
      }
LABEL_403:
      v242 = (void *)__p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v242)
        operator delete(v242);
      if (v312)
      {
        v313 = (std::__shared_weak_count *)v312;
        operator delete(v312);
      }
      if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0)
      {
        v207 = (void *)v323.__r_.__value_.__r.__words[0];
LABEL_342:
        operator delete(v207);
      }
LABEL_343:
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v297 - (char *)v296) >> 3) <= i)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      std::string::operator=(&v296[i], v146);
      v208 = (std::__shared_weak_count *)*((_QWORD *)&v319 + 1);
      if (!*((_QWORD *)&v319 + 1))
        goto LABEL_348;
      v209 = (unint64_t *)(*((_QWORD *)&v319 + 1) + 8);
      do
        v210 = __ldaxr(v209);
      while (__stlxr(v210 - 1, v209));
      if (!v210)
      {
        ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
        std::__shared_weak_count::__release_weak(v208);
        v151 = v325;
        if (!v325)
          continue;
      }
      else
      {
LABEL_348:
        v151 = v325;
        if (!v325)
          continue;
      }
      v211 = (unint64_t *)&v151->__shared_owners_;
      do
        v153 = __ldaxr(v211);
      while (__stlxr(v153 - 1, v211));
LABEL_351:
      if (!v153)
      {
        ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
        std::__shared_weak_count::__release_weak(v151);
      }
      continue;
    }
    MIL::Builder::BlockBuilder::TryGetOperation();
    if (__p.__r_.__value_.__r.__words[0])
    {
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v297 - (char *)v296) >> 3) <= i)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      std::string::operator=(&v296[i], v146);
    }
    v151 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v152 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v153 = __ldaxr(v152);
      while (__stlxr(v153 - 1, v152));
      goto LABEL_351;
    }
  }
  MIL::Builder::BlockBuilder::GetOutputNames(v332);
  v243 = __p.__r_.__value_.__l.__size_;
  v244 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
  {
    do
    {
      MIL::Builder::BlockBuilder::RemoveOutput();
      v244 += 24;
    }
    while (v244 != v243);
    v244 = __p.__r_.__value_.__r.__words[0];
  }
  if (v244)
  {
    v245 = __p.__r_.__value_.__l.__size_;
    v246 = (void *)v244;
    if (__p.__r_.__value_.__l.__size_ != v244)
    {
      do
      {
        if (*(char *)(v245 - 1) < 0)
          operator delete(*(void **)(v245 - 24));
        v245 -= 24;
      }
      while (v245 != v244);
      v246 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = v244;
    operator delete(v246);
  }
  v247 = v296;
  for (k = v297; v247 != k; ++v247)
    MIL::Builder::BlockBuilder::AddOutput();
  MIL::Transform::ProgramTransformer::GetProgram((MIL::Transform::ProgramTransformer *)v336);
  v249 = v296;
  if (v296)
  {
    v250 = v297;
    v251 = v296;
    if (v297 != v296)
    {
      do
      {
        if (SHIBYTE(v250[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v250[-1].__r_.__value_.__l.__data_);
        --v250;
      }
      while (v250 != v249);
      v251 = v296;
    }
    v297 = v249;
    operator delete(v251);
  }
  v252 = (std::string **)v326;
  if (v326)
  {
    v253 = v327;
    v254 = v326;
    if (v327 == (std::string **)v326)
    {
LABEL_446:
      v327 = v252;
      operator delete(v254);
      goto LABEL_447;
    }
    while (2)
    {
      v255 = (std::__shared_weak_count *)*(v253 - 1);
      if (!v255)
        goto LABEL_438;
      v256 = (unint64_t *)&v255->__shared_owners_;
      do
        v257 = __ldaxr(v256);
      while (__stlxr(v257 - 1, v256));
      if (!v257)
      {
        ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
        std::__shared_weak_count::__release_weak(v255);
        v258 = (std::__shared_weak_count *)*(v253 - 3);
        if (v258)
        {
LABEL_439:
          v259 = (unint64_t *)&v258->__shared_owners_;
          do
            v260 = __ldaxr(v259);
          while (__stlxr(v260 - 1, v259));
          if (!v260)
          {
            ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
            std::__shared_weak_count::__release_weak(v258);
          }
        }
      }
      else
      {
LABEL_438:
        v258 = (std::__shared_weak_count *)*(v253 - 3);
        if (v258)
          goto LABEL_439;
      }
      v253 -= 4;
      if (v253 == v252)
      {
        v254 = v326;
        goto LABEL_446;
      }
      continue;
    }
  }
LABEL_447:
  if (v329)
    operator delete(v329);
  v261 = v333;
  if (v333)
  {
    v262 = (unint64_t *)&v333->__shared_owners_;
    do
      v263 = __ldaxr(v262);
    while (__stlxr(v263 - 1, v262));
    if (!v263)
    {
      ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
      std::__shared_weak_count::__release_weak(v261);
    }
  }
  v264 = v334;
  if (v334)
  {
    v265 = (unint64_t *)&v334->__shared_owners_;
    do
      v266 = __ldaxr(v265);
    while (__stlxr(v266 - 1, v265));
    if (!v266)
    {
      ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
      std::__shared_weak_count::__release_weak(v264);
    }
  }
  v267 = v335;
  if (v335)
  {
    v268 = (unint64_t *)&v335->__shared_owners_;
    do
      v269 = __ldaxr(v268);
    while (__stlxr(v269 - 1, v268));
    if (!v269)
    {
      ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
      std::__shared_weak_count::__release_weak(v267);
    }
  }
  MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)v336);
  result = v337;
  v337 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1910ADAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{
  uint64_t v35;
  void *v37;
  uint64_t v38;

  std::vector<std::string>::~vector[abi:ne180100](&a35);
  std::vector<std::pair<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder>>>::~vector[abi:ne180100]((void **)(v35 - 208));
  v37 = *(void **)(v35 - 184);
  if (v37)
  {
    *(_QWORD *)(v35 - 176) = v37;
    operator delete(v37);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v35 - 160);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v35 - 144);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v35 - 128);
  MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)(v35 - 112));
  v38 = *(_QWORD *)(v35 - 104);
  *(_QWORD *)(v35 - 104) = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  _Unwind_Resume(a1);
}

std::vector<std::string> *__cdecl std::vector<std::string>::vector(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::string *v4;
  size_t v5;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v4 = (std::string *)operator new(24 * __n);
    this->__begin_ = v4;
    this->__end_cap_.__value_ = &v4[__n];
    v5 = 24 * ((24 * __n - 24) / 0x18) + 24;
    bzero(v4, v5);
    this->__end_ = (std::string *)((char *)v4 + v5);
  }
  return this;
}

{
  std::vector<std::string>::pointer end;
  size_t v5;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v5 = 24 * ((24 * __n - 24) / 0x18) + 24;
    bzero(end, v5);
    this->__end_ = (std::vector<std::string>::pointer)((char *)end + v5);
  }
  return this;
}

void sub_1910AE038(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    std::vector<std::string>::vector((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::AddFp32CastOp(uint64_t a1, MIL::Builder::BlockBuilder **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count_vtbl *v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count_vtbl *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::string v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count_vtbl *v38;
  std::__shared_weak_count *v39;
  void *v40[2];
  char v41;
  std::__shared_weak_count *v42;
  void *__p[2];
  char v44;
  std::__shared_weak_count_vtbl *v45;
  std::string v46;
  void *v47;
  char v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count_vtbl *v52;
  std::__shared_weak_count *v53;
  char v54;
  std::__shared_weak_count *v55;

  MIL::Builder::BlockBuilder::GetContext(*a2);
  v54 = 4;
  strcpy((char *)&v52, "cast");
  v10 = (std::__shared_weak_count *)a7[1];
  v50 = *a7;
  v51 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  MIL::Builder::BlockBuilder::AddOperation();
  if (!v51)
    goto LABEL_8;
  v13 = &v51->__shared_owners_;
  do
    v14 = __ldaxr((unint64_t *)v13);
  while (__stlxr(v14 - 1, (unint64_t *)v13));
  if (v14)
  {
LABEL_8:
    if ((v54 & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
  ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
  std::__shared_weak_count::__release_weak(v51);
  if (v54 < 0)
LABEL_9:
    operator delete(v52);
LABEL_10:
  v48 = 1;
  LOWORD(v47) = 120;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v46 = *(std::string *)a3;
  MIL::Builder::OperationBuilder::AddInput();
  v15 = v49;
  if (!v49)
    goto LABEL_17;
  v16 = (unint64_t *)&v49->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (v17)
  {
LABEL_17:
    if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_18;
LABEL_61:
    operator delete(v46.__r_.__value_.__l.__data_);
    if ((v48 & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_62;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_61;
LABEL_18:
  if ((v48 & 0x80000000) == 0)
    goto LABEL_19;
LABEL_62:
  operator delete(v47);
LABEL_19:
  MIL::IRTensorValueType::MakeScalar();
  v44 = 4;
  strcpy((char *)__p, "fp32");
  MIL::IRTensorValueType::MakeStringValue();
  v18 = v45;
  v52 = v45;
  if (v45)
  {
    v19 = (std::__shared_weak_count *)operator new();
    v20 = v45;
    v19->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
    v19->__shared_owners_ = 0;
    v19->__shared_weak_owners_ = 0;
    v19[1].__vftable = v20;
    v53 = v19;
    v45 = 0;
    if ((v44 & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_21;
  }
  v19 = 0;
  v53 = 0;
  v45 = 0;
  if (v44 < 0)
LABEL_21:
    operator delete(__p[0]);
LABEL_22:
  v41 = 5;
  strcpy((char *)v40, "dtype");
  v38 = v18;
  v39 = v19;
  if (v19)
  {
    v21 = (unint64_t *)&v19->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  MIL::Builder::OperationBuilder::AddInput();
  if (v42)
  {
    v23 = &v42->__shared_owners_;
    do
      v24 = __ldaxr((unint64_t *)v23);
    while (__stlxr(v24 - 1, (unint64_t *)v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (!v39)
    goto LABEL_34;
  v25 = &v39->__shared_owners_;
  do
    v26 = __ldaxr((unint64_t *)v25);
  while (__stlxr(v26 - 1, (unint64_t *)v25));
  if (v26)
  {
LABEL_34:
    if ((v41 & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_35;
  }
  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
  std::__shared_weak_count::__release_weak(v39);
  if (v41 < 0)
LABEL_35:
    operator delete(v40[0]);
LABEL_36:
  MIL::IRTensorValueType::MakeWithShape();
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v36 = *(std::string *)a4;
  MIL::Builder::OperationBuilder::AddOutput();
  v27 = v37;
  if (v37)
  {
    v28 = (unint64_t *)&v37->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
LABEL_46:
    operator delete(v36.__r_.__value_.__l.__data_);
LABEL_47:
  v30 = v53;
  if (v53)
  {
    v31 = (unint64_t *)&v53->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v55;
  if (v55)
  {
    v34 = (unint64_t *)&v55->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_1910AE4A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;
  uint64_t v47;

  if (a46 < 0)
    operator delete(__p);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v46);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v47 - 80);
  _Unwind_Resume(a1);
}

void **std::vector<std::pair<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder>>>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_17:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
      if (!v5)
        goto LABEL_9;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        v8 = (std::__shared_weak_count *)*((_QWORD *)v3 - 3);
        if (v8)
        {
LABEL_10:
          v9 = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
      else
      {
LABEL_9:
        v8 = (std::__shared_weak_count *)*((_QWORD *)v3 - 3);
        if (v8)
          goto LABEL_10;
      }
      v3 -= 32;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_17;
      }
    }
  }
  return a1;
}

void Espresso::AOT::ReplaceGatherNDWithGather(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  char __p[17];
  char v6;
  _BYTE v7[16];
  _BYTE v8[8];
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  MEMORY[0x19401BA88](v8, a1);
  v6 = 16;
  strcpy(__p, "ios18::gather_nd");
  MIL::Matching::Op();
  v9[0] = &off_1E2DB25D8;
  v10 = v9;
  MIL::Transform::ProgramTransformer::MatchAndReplace();
  v3 = v10;
  if (v10 == v9)
  {
    v4 = 4;
    v3 = v9;
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v3 + 8 * v4))(v3, v1, v2);
LABEL_6:
  MEMORY[0x19401B9BC](v7);
  if (v6 < 0)
    operator delete(*(void **)__p);
  MIL::Transform::ProgramTransformer::GetProgram((MIL::Transform::ProgramTransformer *)v8);
  MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)v8);
}

void sub_1910AE778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)va);
  _Unwind_Resume(a1);
}

void sub_1910AE78C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,__int16 *a25)
{
  __int16 *v25;
  __int16 *v27;
  uint64_t v28;

  v27 = a25;
  if (a25 == v25)
  {
    v28 = 4;
    v27 = &a20;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  MEMORY[0x19401B9BC](&a16);
  if (a14 < 0)
    operator delete(__p);
  MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)&a18);
  _Unwind_Resume(a1);
}

void Espresso::AOT::UpdateFunctionIO(MIL::Builder::FunctionBuilder *a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v5;
  _QWORD *v6;
  MIL::Builder::Variable *v7;
  uint64_t Name;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  unint64_t i;
  uint64_t OutputName;
  __int128 v14;
  std::__shared_weak_count *size;
  unint64_t *v16;
  unint64_t v17;
  void **v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  char *v25;
  uint64_t *v26;
  void **v27;
  _OWORD *v28;
  char *v29;
  char *v30;
  char v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const MIL::IRValueType *v37;
  Espresso::MILTranslator::NameGenerator *v38;
  uint64_t v39;
  MIL::IRValueType *FunctionInputType;
  const MIL::IRValueType *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  size_t v46;
  const MIL::IRValueType *v47;
  Espresso::MILTranslator::NameGenerator *v48;
  MIL::IRMemoryLayoutValueType *v49;
  MIL::IRTensorBufferValueType *v50;
  E5Common::Utils *v51;
  const MIL::IRValueType *v52;
  MIL::IRMemoryLayoutValueType *v53;
  MIL::IRTensorBufferValueType *v54;
  MIL::IRTensorBufferValueType *v55;
  uint64_t v56;
  uint64_t v57;
  size_t v58;
  uint64_t InterleaveFactors;
  uint64_t v60;
  size_t v61;
  const MIL::IRValueType *v62;
  MIL::IRMemoryLayoutValueType *v63;
  MIL::IRTensorBufferValueType *v64;
  uint64_t Shape;
  uint64_t v66;
  size_t v67;
  uint64_t OperationsByInput;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  MIL::Builder::OperationBuilder *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  MIL::IRValueType *OutputType;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  int DataType;
  uint64_t v84;
  uint64_t v85;
  int v86;
  size_t v87;
  unint64_t v88;
  std::string *v89;
  int v90;
  int v91;
  size_t v92;
  unint64_t v93;
  std::string *p_dst;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  MIL::Builder::OperationBuilder *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  MIL::IRValueType *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  const void *v107;
  int64_t v108;
  uint64_t v109;
  std::string::size_type v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  const void *v115;
  std::string *v116;
  std::string::size_type v117;
  std::string *v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  const void *v122;
  uint64_t v123;
  uint64_t v124;
  std::string *v125;
  std::string::size_type v126;
  std::string *v127;
  __int128 v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::string::size_type v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::string::size_type v143;
  std::string::size_type v144;
  void *v145;
  std::__shared_weak_count *v146;
  unint64_t *p_shared_owners;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  void **v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  __int128 v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  __int128 v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  int v197;
  int v198;
  size_t v199;
  unint64_t v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  const std::string::value_type *v204;
  const std::string::value_type *v205;
  std::string::size_type v206;
  std::string *v207;
  __int128 v208;
  char v209;
  uint64_t v210;
  const std::string::value_type *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  __int128 v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  char v220;
  uint64_t v221;
  const std::string::value_type *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  __int128 v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  unint64_t *v234;
  unint64_t v235;
  unint64_t *v236;
  unint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  __int128 v244;
  unint64_t *v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  unint64_t *v253;
  unint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  std::string::size_type v261;
  std::string::size_type v262;
  void *v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  void **v273;
  void **v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  unint64_t *v281;
  unint64_t v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  unint64_t *v289;
  unint64_t v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  void **v297;
  void **v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  void *v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  std::string::size_type v306;
  std::string::size_type v307;
  void *v308;
  std::__shared_weak_count *v309;
  unint64_t *v310;
  unint64_t v311;
  unint64_t *v312;
  MIL::Builder::FunctionBuilder *v313;
  unint64_t v314;
  uint64_t v315;
  MIL::IRValueType *v316;
  const MIL::IRValueType *v317;
  char *v318;
  Espresso::MILTranslator::NameGenerator *v319;
  uint64_t v320;
  MIL::IRValueType *FunctionOutputType;
  const MIL::IRValueType *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  size_t v327;
  int v328;
  std::string::size_type v329;
  unint64_t *v330;
  unint64_t v331;
  unint64_t *v332;
  unint64_t v333;
  std::__shared_weak_count *v334;
  const MIL::IRValueType *v335;
  Espresso::MILTranslator::NameGenerator *v336;
  MIL::IRMemoryLayoutValueType *v337;
  MIL::IRTensorBufferValueType *v338;
  E5Common::Utils *v339;
  const MIL::IRValueType *v340;
  MIL::IRMemoryLayoutValueType *v341;
  MIL::IRTensorBufferValueType *v342;
  MIL::IRTensorBufferValueType *v343;
  uint64_t v344;
  uint64_t v345;
  size_t v346;
  uint64_t v347;
  uint64_t v348;
  size_t v349;
  MIL::Builder::Variable *v350;
  uint64_t v351;
  __int128 v352;
  MIL::IRMemoryLayoutValueType *v353;
  MIL::IRTensorBufferValueType *v354;
  uint64_t v355;
  uint64_t v356;
  size_t v357;
  MIL::Builder::Variable *ArgumentForParameter;
  uint64_t v359;
  __int128 v360;
  unint64_t *v361;
  unint64_t v362;
  std::__shared_weak_count *v363;
  unint64_t *v364;
  unint64_t v365;
  int v366;
  std::string::size_type v367;
  int v368;
  size_t v369;
  unint64_t v370;
  void *v371;
  uint64_t *Strides;
  uint64_t *v373;
  const MIL::IRValueType *v374;
  __int128 v375;
  unint64_t *v376;
  unint64_t v377;
  __int128 v378;
  unint64_t *v379;
  unint64_t v380;
  std::string::size_type v381;
  unint64_t *v382;
  unint64_t v383;
  unint64_t *v384;
  unint64_t v385;
  unint64_t *v386;
  unint64_t v387;
  __int128 v388;
  std::__shared_weak_count *v389;
  unint64_t *v390;
  unint64_t v391;
  std::__shared_weak_count *v392;
  unint64_t *v393;
  unint64_t v394;
  unint64_t *v395;
  unint64_t v396;
  std::__shared_weak_count *v397;
  unint64_t *v398;
  unint64_t v399;
  std::__shared_weak_count *v400;
  unint64_t *v401;
  unint64_t v402;
  __int128 v403;
  std::__shared_weak_count *v404;
  unint64_t *v405;
  unint64_t v406;
  std::__shared_weak_count *v407;
  uint64_t v408;
  uint64_t v409;
  const void *v410;
  std::string *v411;
  std::string::size_type v412;
  std::string *v413;
  __int128 v414;
  unint64_t v415;
  unsigned __int8 *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  int v420;
  unsigned __int8 *v421;
  std::__shared_weak_count *v422;
  unint64_t *v423;
  unint64_t v424;
  std::string::size_type v425;
  std::__shared_weak_count *v426;
  unint64_t *v427;
  unint64_t v428;
  std::__shared_weak_count *v429;
  unint64_t *v430;
  unint64_t v431;
  std::__shared_weak_count *v432;
  unint64_t *v433;
  unint64_t v434;
  std::__shared_weak_count *v435;
  unint64_t *v436;
  unint64_t v437;
  std::__shared_weak_count *v438;
  unint64_t *v439;
  unint64_t v440;
  std::__shared_weak_count *v441;
  unint64_t *v442;
  unint64_t v443;
  std::__shared_weak_count *v444;
  unint64_t *v445;
  unint64_t v446;
  std::__shared_weak_count *v447;
  unint64_t *v448;
  unint64_t v449;
  uint64_t v450;
  unint64_t *v451;
  unint64_t v452;
  std::__shared_weak_count *v453;
  unint64_t *v454;
  unint64_t v455;
  uint64_t v456;
  unint64_t *v457;
  unint64_t v458;
  std::__shared_weak_count *v459;
  unint64_t *v460;
  unint64_t v461;
  std::__shared_weak_count *v462;
  unint64_t *v463;
  unint64_t v464;
  int v465;
  uint64_t v466;
  uint64_t v467;
  const void *v468;
  int64_t v469;
  uint64_t v470;
  uint64_t v471;
  size_t v472;
  std::string::size_type v473;
  unint64_t *v474;
  unint64_t v475;
  int v476;
  size_t v477;
  unint64_t v478;
  std::string *v479;
  uint64_t v480;
  uint64_t v481;
  std::string *v482;
  std::string *v483;
  std::string::size_type v484;
  std::string *v485;
  __int128 v486;
  std::string::size_type v487;
  unint64_t *v488;
  unint64_t v489;
  unint64_t *v490;
  unint64_t v491;
  std::__shared_weak_count *v492;
  unint64_t *v493;
  unint64_t v494;
  std::__shared_weak_count *v495;
  unint64_t *v496;
  unint64_t v497;
  std::__shared_weak_count *v498;
  unint64_t *v499;
  unint64_t v500;
  std::__shared_weak_count *v501;
  unint64_t *v502;
  unint64_t v503;
  std::__shared_weak_count *v504;
  unint64_t *v505;
  unint64_t v506;
  std::__shared_weak_count *v507;
  unint64_t *v508;
  unint64_t v509;
  std::__shared_weak_count *v510;
  unint64_t *v511;
  unint64_t v512;
  std::__shared_weak_count *v513;
  unint64_t *v514;
  unint64_t v515;
  unint64_t *v516;
  unint64_t v517;
  std::__shared_weak_count *v518;
  unint64_t *v519;
  unint64_t v520;
  unint64_t *v521;
  std::__shared_weak_count *v522;
  std::string::size_type v523;
  unint64_t *v524;
  unint64_t v525;
  std::__shared_weak_count *v526;
  unint64_t *v527;
  unint64_t v528;
  std::__shared_weak_count *v529;
  unint64_t *v530;
  unint64_t v531;
  unint64_t *v532;
  unint64_t v533;
  void *v534;
  std::__shared_weak_count *v535;
  unint64_t *v536;
  unint64_t v537;
  std::__shared_weak_count *v538;
  unint64_t *v539;
  unint64_t v540;
  std::__shared_weak_count *v541;
  unint64_t *v542;
  unint64_t v543;
  std::__shared_weak_count *v544;
  unint64_t *v545;
  unint64_t v546;
  std::__shared_weak_count *v547;
  unint64_t *v548;
  unint64_t v549;
  unint64_t *v550;
  std::string::size_type v551;
  unint64_t *v552;
  unint64_t v553;
  unint64_t *v554;
  unint64_t v555;
  void **v556;
  void *v557;
  void **v558;
  void **v559;
  void *v560;
  void **v561;
  Espresso::MILTranslator::NameGenerator *v562;
  std::__shared_weak_count *v563;
  unint64_t *v564;
  unint64_t v565;
  std::runtime_error *v566;
  std::logic_error *v567;
  std::logic_error *v568;
  std::logic_error *v569;
  std::logic_error *v570;
  std::logic_error *v571;
  std::logic_error *v572;
  std::runtime_error *v573;
  std::logic_error *v574;
  std::runtime_error *v575;
  std::runtime_error *v576;
  std::runtime_error *v577;
  std::logic_error *v578;
  std::runtime_error *v579;
  std::logic_error *v580;
  std::logic_error *v581;
  std::logic_error *v582;
  std::runtime_error *v583;
  std::logic_error *v584;
  std::logic_error *v585;
  std::logic_error *v586;
  std::logic_error *v587;
  std::logic_error *v588;
  std::runtime_error *exception;
  std::runtime_error *v590;
  unint64_t v591;
  char *v592;
  char *v593;
  Espresso::MILTranslator::NameGenerator *v594;
  Espresso::MILTranslator::NameGenerator *v595;
  MIL::Builder::FunctionBuilder *v597;
  void *v598;
  char *v599;
  Espresso::MILTranslator::NameGenerator *v600;
  MIL::Builder::BlockBuilder *v601;
  std::__shared_weak_count *v602;
  _BYTE v603[32];
  int v604;
  __int128 v605;
  unsigned __int8 v606;
  std::string v607;
  std::string v608;
  _BYTE __p[32];
  int v610;
  __int128 v611;
  __int128 v612;
  std::string v613;
  __int128 v614;
  __int128 v615;
  __int128 v616;
  std::string v617;
  __int128 v618;
  __int128 v619;
  MIL::Builder::BlockBuilder *v620;
  std::__shared_weak_count *v621;
  __int128 v622;
  std::string v623;
  __int128 v624;
  std::string v625;
  std::string v626;
  __int128 v627;
  __int128 v628;
  std::string v629;
  std::string __dst;
  uint64_t v631;

  v631 = *MEMORY[0x1E0C80C00];
  MIL::Builder::FunctionBuilder::SelectedSpecialization(a1);
  MIL::Builder::FunctionBuilder::GetBlock();
  v5 = 0;
  memset(__p, 0, sizeof(__p));
  v610 = 1065353216;
  v597 = a1;
  while (v5 < MIL::Builder::BlockBuilder::GetNumOperations(v601))
  {
    MIL::Builder::BlockBuilder::GetOperation(v601);
    MIL::Builder::OperationBuilder::GetInputArguments((MIL::Builder::OperationBuilder *)v626.__r_.__value_.__l.__data_);
    v6 = *(_QWORD **)&v603[16];
    if (*(_QWORD *)&v603[16])
    {
      do
      {
        v7 = (MIL::Builder::Variable *)v6[2];
        if (MIL::Builder::Variable::TryGetName(v7))
        {
          Name = MIL::Builder::Variable::GetName(v7);
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__p, Name, Name);
        }
        v6 = (_QWORD *)*v6;
      }
      while (v6);
      v9 = *(_QWORD **)&v603[16];
      if (*(_QWORD *)&v603[16])
      {
        do
        {
          v10 = (_QWORD *)*v9;
          operator delete(v9);
          v9 = v10;
        }
        while (v10);
      }
    }
    v11 = *(void **)v603;
    *(_QWORD *)v603 = 0;
    if (v11)
      operator delete(v11);
    for (i = 0;
          i < MIL::Builder::OperationBuilder::GetNumOutputs((MIL::Builder::OperationBuilder *)v626.__r_.__value_.__l.__data_);
          ++i)
    {
      OutputName = MIL::Builder::OperationBuilder::GetOutputName((MIL::Builder::OperationBuilder *)v626.__r_.__value_.__l.__data_);
      if (*(char *)(OutputName + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v603, *(const std::string::value_type **)OutputName, *(_QWORD *)(OutputName + 8));
      }
      else
      {
        v14 = *(_OWORD *)OutputName;
        *(_QWORD *)&v603[16] = *(_QWORD *)(OutputName + 16);
        *(_OWORD *)v603 = v14;
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__p, (uint64_t)v603, (uint64_t)v603);
      if ((v603[23] & 0x80000000) != 0)
        operator delete(*(void **)v603);
    }
    size = (std::__shared_weak_count *)v626.__r_.__value_.__l.__size_;
    if (v626.__r_.__value_.__l.__size_)
    {
      v16 = (unint64_t *)(v626.__r_.__value_.__l.__size_ + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    ++v5;
  }
  std::make_unique[abi:ne180100]<Espresso::MILTranslator::NameGenerator,std::unordered_set<std::string> &>((uint64_t)__p, (uint64_t *)&v600);
  v18 = *(void ***)&__p[16];
  if (*(_QWORD *)&__p[16])
  {
    do
    {
      v27 = (void **)*v18;
      if (*((char *)v18 + 39) < 0)
        operator delete(v18[2]);
      operator delete(v18);
      v18 = v27;
    }
    while (v27);
  }
  v19 = *(void **)__p;
  *(_QWORD *)__p = 0;
  if (v19)
    operator delete(v19);
  MIL::Builder::FunctionBuilder::GetInputs(v597);
  v20 = *(_QWORD *)(a2 + 24);
  v21 = *(_QWORD **)&__p[16];
  v22 = *(_QWORD *)&__p[24];
  if (*(_QWORD *)&__p[16])
  {
    do
    {
      v23 = (_QWORD *)*v21;
      operator delete(v21);
      v21 = v23;
    }
    while (v23);
  }
  v24 = *(void **)__p;
  *(_QWORD *)__p = 0;
  if (v24)
    operator delete(v24);
  if (v22 != v20)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Number of given inputs doesn't match the number of function inputs.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  MIL::Builder::BlockBuilder::GetOutputNames(v601);
  v591 = 0xAAAAAAAAAAAAAAABLL * ((v599 - (_BYTE *)v598) >> 3);
  if (v591 != (uint64_t)(a3[1] - *a3) >> 3)
  {
    v590 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v590, "Number of given outputs doesn't match the number of block outputs.");
    __cxa_throw(v590, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  memset(v603, 0, sizeof(v603));
  v604 = 1065353216;
  v593 = (char *)v598;
  if (v598 != v599)
  {
    v25 = (char *)v598;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v603, (uint64_t)v25, (uint64_t)v25);
      v25 += 24;
    }
    while (v25 != v599);
  }
  v592 = v599;
  v26 = *(uint64_t **)(a2 + 16);
  if (v26)
  {
    while (1)
    {
      v28 = v26 + 2;
      v29 = (char *)v598;
      v30 = v599;
      if (v598 != v599)
      {
        v31 = *((_BYTE *)v26 + 39);
        if (v31 >= 0)
          v32 = *((unsigned __int8 *)v26 + 39);
        else
          v32 = v26[3];
        if (v31 >= 0)
          v33 = (unsigned __int8 *)(v26 + 2);
        else
          v33 = (unsigned __int8 *)v26[2];
        while (1)
        {
          v34 = v29[23];
          if ((v34 & 0x80u) == 0)
            v35 = v29[23];
          else
            v35 = *((_QWORD *)v29 + 1);
          if (v35 == v32)
          {
            if ((v34 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v29, v33, *((_QWORD *)v29 + 1)))
                break;
            }
            else
            {
              if (!v29[23])
                break;
              v36 = 0;
              while (v29[v36] == v33[v36])
              {
                if (v34 == ++v36)
                  goto LABEL_63;
              }
            }
          }
          v29 += 24;
          if (v29 == v30)
            goto LABEL_64;
        }
      }
LABEL_63:
      if (v29 != v30)
      {
        v566 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v566, "Cannot update an input that is also an output.");
        __cxa_throw(v566, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
LABEL_64:
      if (E5Common::Utils::IsTensor(v26[5]))
      {
        v38 = v600;
        v39 = MIL::IRValueType::AsTensorType((MIL::IRValueType *)v26[5]);
        MIL::Builder::FunctionBuilder::GetContext(v597);
        MIL::Builder::FunctionBuilder::SelectedSpecialization(v597);
        MIL::Builder::FunctionBuilder::GetBlock();
        MIL::Builder::BlockBuilder::GetOutputNames((MIL::Builder::BlockBuilder *)v605);
        if (E5Common::Utils::IsTensor((uint64_t)FunctionInputType))
        {
          v42 = MIL::IRValueType::AsTensorType(FunctionInputType);
          v43 = v42;
          if (v42 == v39)
            goto LABEL_517;
          v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 96))(v42);
          v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 96))(v39);
          v46 = *(_QWORD *)(v44 + 8) - *(_QWORD *)v44;
          if (v46 != *(_QWORD *)(v45 + 8) - *(_QWORD *)v45 || memcmp(*(const void **)v44, *(const void **)v45, v46))
          {
            v569 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v569, "Changing shapes is not supported.");
            v569->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
            __cxa_throw(v569, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
          }
          MIL::Builder::FunctionBuilder::RemoveInput();
          if (*((char *)v26 + 39) < 0)
          {
            std::string::__init_copy_ctor_external(&v626, (const std::string::value_type *)v26[2], v26[3]);
          }
          else
          {
            *(_OWORD *)&v626.__r_.__value_.__l.__data_ = *v28;
            v626.__r_.__value_.__r.__words[2] = v26[4];
          }
          MIL::Builder::FunctionBuilder::AddInput();
          if (SHIBYTE(v626.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v626.__r_.__value_.__l.__data_);
          v90 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 88))(v43);
          if (v90 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v39 + 88))(v39))
            goto LABEL_517;
          v91 = *((char *)v26 + 39);
          if (v91 >= 0)
            v92 = *((unsigned __int8 *)v26 + 39);
          else
            v92 = v26[3];
          v93 = v92 + 11;
          if (v92 + 11 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v93 >= 0x17)
          {
            v113 = (v93 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v93 | 7) != 0x17)
              v113 = v93 | 7;
            v114 = v113 + 1;
            p_dst = (std::string *)operator new(v113 + 1);
            __dst.__r_.__value_.__l.__size_ = v92 + 11;
            __dst.__r_.__value_.__r.__words[2] = v114 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
          }
          else
          {
            memset(&__dst, 0, sizeof(__dst));
            p_dst = &__dst;
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v92 + 11;
            if (!v92)
              goto LABEL_147;
          }
          if (v91 >= 0)
            v115 = v26 + 2;
          else
            v115 = *(const void **)v28;
          memmove(p_dst, v115, v92);
LABEL_147:
          strcpy((char *)p_dst + v92, "_casted_to_");
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 88))(v43);
          MIL::IRDataTypeToString();
          if ((v617.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v116 = &v617;
          else
            v116 = (std::string *)v617.__r_.__value_.__r.__words[0];
          if ((v617.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v117 = HIBYTE(v617.__r_.__value_.__r.__words[2]);
          else
            v117 = v617.__r_.__value_.__l.__size_;
          v118 = std::string::append(&__dst, (const std::string::value_type *)v116, v117);
          v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
          v623.__r_.__value_.__r.__words[2] = v118->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v623.__r_.__value_.__l.__data_ = v119;
          v118->__r_.__value_.__l.__size_ = 0;
          v118->__r_.__value_.__r.__words[2] = 0;
          v118->__r_.__value_.__r.__words[0] = 0;
          Espresso::MILTranslator::NameGenerator::NameForPrefix(v38, (uint64_t)&v623, (uint64_t)&v625);
          if (SHIBYTE(v623.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v623.__r_.__value_.__l.__data_);
            if (SHIBYTE(v617.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_187;
LABEL_155:
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_156;
LABEL_188:
            operator delete(__dst.__r_.__value_.__l.__data_);
            if (SHIBYTE(v625.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_189;
LABEL_157:
            v623 = v625;
          }
          else
          {
            if ((SHIBYTE(v617.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_155;
LABEL_187:
            operator delete(v617.__r_.__value_.__l.__data_);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_188;
LABEL_156:
            if ((SHIBYTE(v625.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_157;
LABEL_189:
            std::string::__init_copy_ctor_external(&v623, v625.__r_.__value_.__l.__data_, v625.__r_.__value_.__l.__size_);
          }
          *(_OWORD *)&v617.__r_.__value_.__l.__data_ = 0uLL;
          MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable();
          v134 = (std::__shared_weak_count *)v617.__r_.__value_.__l.__size_;
          if (!v617.__r_.__value_.__l.__size_)
            goto LABEL_194;
          v135 = (unint64_t *)(v617.__r_.__value_.__l.__size_ + 8);
          do
            v136 = __ldaxr(v135);
          while (__stlxr(v136 - 1, v135));
          if (!v136)
          {
            ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
            std::__shared_weak_count::__release_weak(v134);
            if (SHIBYTE(v623.__r_.__value_.__r.__words[2]) < 0)
LABEL_195:
              operator delete(v623.__r_.__value_.__l.__data_);
          }
          else
          {
LABEL_194:
            if (SHIBYTE(v623.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_195;
          }
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 5;
          strcpy((char *)&__dst, "ios17");
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            v137 = v613.__r_.__value_.__l.__size_;
            *(_OWORD *)&v629.__r_.__value_.__l.__data_ = *(_OWORD *)&v613.__r_.__value_.__l.__data_;
            if (v613.__r_.__value_.__l.__size_)
              goto LABEL_200;
          }
          else
          {
            v137 = v613.__r_.__value_.__l.__size_;
            *(_OWORD *)&v629.__r_.__value_.__l.__data_ = *(_OWORD *)&v613.__r_.__value_.__l.__data_;
            if (!v613.__r_.__value_.__l.__size_)
              goto LABEL_202;
LABEL_200:
            v138 = (unint64_t *)(v137 + 8);
            do
              v139 = __ldxr(v138);
            while (__stxr(v139 + 1, v138));
          }
LABEL_202:
          std::vector<std::shared_ptr<MIL::Builder::OperationBuilder> const,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder> const>>::vector[abi:ne180100](&__dst, &v629, 1uLL);
          v140 = (std::__shared_weak_count *)v629.__r_.__value_.__l.__size_;
          if (v629.__r_.__value_.__l.__size_)
          {
            v141 = (unint64_t *)(v629.__r_.__value_.__l.__size_ + 8);
            do
              v142 = __ldaxr(v141);
            while (__stlxr(v142 - 1, v141));
            if (!v142)
            {
              ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
              std::__shared_weak_count::__release_weak(v140);
            }
          }
          MIL::Builder::BlockBuilder::InsertOperations();
          v143 = __dst.__r_.__value_.__r.__words[0];
          if (__dst.__r_.__value_.__r.__words[0])
          {
            v144 = __dst.__r_.__value_.__l.__size_;
            v145 = (void *)__dst.__r_.__value_.__r.__words[0];
            if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
            {
              do
              {
                v146 = *(std::__shared_weak_count **)(v144 - 8);
                if (v146)
                {
                  p_shared_owners = (unint64_t *)&v146->__shared_owners_;
                  do
                    v148 = __ldaxr(p_shared_owners);
                  while (__stlxr(v148 - 1, p_shared_owners));
                  if (!v148)
                  {
                    ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                    std::__shared_weak_count::__release_weak(v146);
                  }
                }
                v144 -= 16;
              }
              while (v144 != v143);
              v145 = (void *)__dst.__r_.__value_.__r.__words[0];
            }
            __dst.__r_.__value_.__l.__size_ = v143;
            operator delete(v145);
          }
          v149 = (std::__shared_weak_count *)v613.__r_.__value_.__l.__size_;
          if (!v613.__r_.__value_.__l.__size_)
            goto LABEL_222;
          v150 = (unint64_t *)(v613.__r_.__value_.__l.__size_ + 8);
          do
            v151 = __ldaxr(v150);
          while (__stlxr(v151 - 1, v150));
          if (!v151)
          {
            ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
            std::__shared_weak_count::__release_weak(v149);
            if ((SHIBYTE(v625.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_517;
LABEL_223:
            operator delete(v625.__r_.__value_.__l.__data_);
            v152 = *(void ***)__p;
            if (*(_QWORD *)__p)
              goto LABEL_518;
          }
          else
          {
LABEL_222:
            if (SHIBYTE(v625.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_223;
LABEL_517:
            v152 = *(void ***)__p;
            if (*(_QWORD *)__p)
            {
LABEL_518:
              v273 = *(void ***)&__p[8];
              v274 = v152;
              if (*(void ***)&__p[8] != v152)
              {
                do
                {
                  if (*((char *)v273 - 1) < 0)
                    operator delete(*(v273 - 3));
                  v273 -= 3;
                }
                while (v273 != v152);
                v274 = *(void ***)__p;
              }
              *(_QWORD *)&__p[8] = v152;
              operator delete(v274);
            }
          }
LABEL_525:
          v275 = (std::__shared_weak_count *)*((_QWORD *)&v605 + 1);
          if (!*((_QWORD *)&v605 + 1))
            goto LABEL_529;
          v276 = (unint64_t *)(*((_QWORD *)&v605 + 1) + 8);
          do
            v277 = __ldaxr(v276);
          while (__stlxr(v277 - 1, v276));
          if (!v277)
          {
            ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
            std::__shared_weak_count::__release_weak(v275);
            v278 = (std::__shared_weak_count *)v607.__r_.__value_.__l.__size_;
            if (v607.__r_.__value_.__l.__size_)
            {
LABEL_530:
              v279 = (unint64_t *)&v278->__shared_owners_;
              do
                v280 = __ldaxr(v279);
              while (__stlxr(v280 - 1, v279));
              goto LABEL_615;
            }
          }
          else
          {
LABEL_529:
            v278 = (std::__shared_weak_count *)v607.__r_.__value_.__l.__size_;
            if (v607.__r_.__value_.__l.__size_)
              goto LABEL_530;
          }
          goto LABEL_43;
        }
        if (!E5Common::Utils::IsTensorBuffer(FunctionInputType, v41))
        {
          v573 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v573, "A tensor can only replace another tensor or tensor_buffer.");
          __cxa_throw(v573, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v63 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(FunctionInputType);
        v64 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v63);
        Shape = MIL::IRTensorBufferValueType::GetShape(v64);
        v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 96))(v39);
        v67 = *(_QWORD *)(Shape + 8) - *(_QWORD *)Shape;
        if (v67 != *(_QWORD *)(v66 + 8) - *(_QWORD *)v66 || memcmp(*(const void **)Shape, *(const void **)v66, v67))
        {
          v567 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v567, "Changing shapes is not supported.");
          v567->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
          __cxa_throw(v567, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
        }
        MIL::Builder::FunctionBuilder::RemoveInput();
        if (*((char *)v26 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(&v626, (const std::string::value_type *)v26[2], v26[3]);
        }
        else
        {
          *(_OWORD *)&v626.__r_.__value_.__l.__data_ = *v28;
          v626.__r_.__value_.__r.__words[2] = v26[4];
        }
        MIL::Builder::FunctionBuilder::AddInput();
        if (SHIBYTE(v626.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v626.__r_.__value_.__l.__data_);
        OperationsByInput = MIL::Builder::BlockBuilder::GetOperationsByInput();
        v69 = *(_QWORD *)(OperationsByInput + 24);
        if (!v69)
          goto LABEL_517;
        if (v69 != 1)
        {
          v585 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v585, "Found more than one consumer for the tensor_buffer.");
          v585->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
          __cxa_throw(v585, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
        }
        v70 = *(_QWORD *)(OperationsByInput + 16);
        v72 = *(MIL::Builder::OperationBuilder **)(v70 + 16);
        v71 = *(_QWORD *)(v70 + 24);
        *(_QWORD *)&v628 = v72;
        *((_QWORD *)&v628 + 1) = v71;
        if (v71)
        {
          v73 = (unint64_t *)(v71 + 8);
          do
            v74 = __ldxr(v73);
          while (__stxr(v74 + 1, v73));
        }
        v75 = MIL::Builder::OperationBuilder::GetOutputName(v72);
        OutputType = (MIL::IRValueType *)MIL::Builder::OperationBuilder::GetOutputType(v72);
        v77 = MIL::IRValueType::AsTensorType(OutputType);
        *(_QWORD *)&v627 = v72;
        *((_QWORD *)&v627 + 1) = v71;
        if (v71)
        {
          v78 = (unint64_t *)(v71 + 8);
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
        MIL::Builder::BlockBuilder::RemoveOperation();
        v80 = (std::__shared_weak_count *)*((_QWORD *)&v627 + 1);
        if (*((_QWORD *)&v627 + 1))
        {
          v81 = (unint64_t *)(*((_QWORD *)&v627 + 1) + 8);
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
        DataType = MIL::IRTensorBufferValueType::GetDataType(v64);
        if (DataType == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v39 + 88))(v39))
        {
          if (*((char *)v26 + 39) < 0)
          {
            std::string::__init_copy_ctor_external(&v625, (const std::string::value_type *)v26[2], v26[3]);
          }
          else
          {
            *(_OWORD *)&v625.__r_.__value_.__l.__data_ = *v28;
            v625.__r_.__value_.__r.__words[2] = v26[4];
          }
          *(_OWORD *)&v629.__r_.__value_.__l.__data_ = 0uLL;
          MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable();
          v164 = (std::__shared_weak_count *)v629.__r_.__value_.__l.__size_;
          if (!v629.__r_.__value_.__l.__size_)
            goto LABEL_261;
          v165 = (unint64_t *)(v629.__r_.__value_.__l.__size_ + 8);
          do
            v166 = __ldaxr(v165);
          while (__stlxr(v166 - 1, v165));
          if (!v166)
          {
            ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
            std::__shared_weak_count::__release_weak(v164);
            if ((SHIBYTE(v625.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_262;
          }
          else
          {
LABEL_261:
            if ((SHIBYTE(v625.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_262:
              v167 = *(_QWORD *)__p;
              v168 = *(_QWORD *)&__p[8];
              if (*(_QWORD *)__p != *(_QWORD *)&__p[8])
                goto LABEL_357;
              goto LABEL_374;
            }
          }
          operator delete(v625.__r_.__value_.__l.__data_);
          v167 = *(_QWORD *)__p;
          v168 = *(_QWORD *)&__p[8];
          if (*(_QWORD *)__p != *(_QWORD *)&__p[8])
          {
LABEL_357:
            v209 = *(_BYTE *)(v75 + 23);
            if (v209 >= 0)
              v210 = *(unsigned __int8 *)(v75 + 23);
            else
              v210 = *(_QWORD *)(v75 + 8);
            if (v209 >= 0)
              v211 = (const std::string::value_type *)v75;
            else
              v211 = *(const std::string::value_type **)v75;
            while (1)
            {
              v212 = *(unsigned __int8 *)(v167 + 23);
              if ((v212 & 0x80u) == 0)
                v213 = *(unsigned __int8 *)(v167 + 23);
              else
                v213 = *(_QWORD *)(v167 + 8);
              if (v213 == v210)
              {
                if ((v212 & 0x80) != 0)
                {
                  if (!memcmp(*(const void **)v167, v211, *(_QWORD *)(v167 + 8)))
                    break;
                }
                else
                {
                  if (!*(_BYTE *)(v167 + 23))
                    break;
                  v214 = 0;
                  while (*(unsigned __int8 *)(v167 + v214) == v211[v214])
                  {
                    if (v212 == ++v214)
                      goto LABEL_374;
                  }
                }
              }
              v167 += 24;
              if (v167 == v168)
                goto LABEL_513;
            }
          }
LABEL_374:
          if (v167 != v168)
          {
            *((_BYTE *)&v623.__r_.__value_.__s + 23) = 8;
            strcpy((char *)&v623, "identity");
            v620 = 0;
            v621 = 0;
            MIL::Builder::BlockBuilder::AddOperation();
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 1;
            LOWORD(__dst.__r_.__value_.__l.__data_) = 120;
            if (*((char *)v26 + 39) < 0)
            {
              std::string::__init_copy_ctor_external(&v617, (const std::string::value_type *)v26[2], v26[3]);
            }
            else
            {
              *(_OWORD *)&v617.__r_.__value_.__l.__data_ = *v28;
              v617.__r_.__value_.__r.__words[2] = v26[4];
            }
            MIL::Builder::OperationBuilder::AddInput();
            if (*(char *)(v75 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v613, *(const std::string::value_type **)v75, *(_QWORD *)(v75 + 8));
            }
            else
            {
              v215 = *(_OWORD *)v75;
              v613.__r_.__value_.__r.__words[2] = *(_QWORD *)(v75 + 16);
              *(_OWORD *)&v613.__r_.__value_.__l.__data_ = v215;
            }
            MIL::Builder::OperationBuilder::AddOutput();
            if (SHIBYTE(v613.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v613.__r_.__value_.__l.__data_);
              v216 = (std::__shared_weak_count *)*((_QWORD *)&v624 + 1);
              if (!*((_QWORD *)&v624 + 1))
                goto LABEL_388;
            }
            else
            {
              v216 = (std::__shared_weak_count *)*((_QWORD *)&v624 + 1);
              if (!*((_QWORD *)&v624 + 1))
                goto LABEL_388;
            }
            v217 = (unint64_t *)&v216->__shared_owners_;
            do
              v218 = __ldaxr(v217);
            while (__stlxr(v218 - 1, v217));
            if (v218)
            {
LABEL_388:
              if ((SHIBYTE(v617.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_389;
LABEL_458:
              operator delete(v617.__r_.__value_.__l.__data_);
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_459;
LABEL_390:
              v219 = (std::__shared_weak_count *)*((_QWORD *)&v622 + 1);
              if (!*((_QWORD *)&v622 + 1))
                goto LABEL_463;
LABEL_460:
              v245 = (unint64_t *)&v219->__shared_owners_;
              do
                v246 = __ldaxr(v245);
              while (__stlxr(v246 - 1, v245));
              if (v246)
                goto LABEL_463;
              ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
              std::__shared_weak_count::__release_weak(v219);
              v247 = v621;
              if (!v621)
                goto LABEL_467;
LABEL_464:
              v248 = (unint64_t *)&v247->__shared_owners_;
              do
                v249 = __ldaxr(v248);
              while (__stlxr(v249 - 1, v248));
              if (v249)
                goto LABEL_467;
              ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
              std::__shared_weak_count::__release_weak(v247);
              if (SHIBYTE(v623.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_468;
            }
            else
            {
              ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
              std::__shared_weak_count::__release_weak(v216);
              if (SHIBYTE(v617.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_458;
LABEL_389:
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_390;
LABEL_459:
              operator delete(__dst.__r_.__value_.__l.__data_);
              v219 = (std::__shared_weak_count *)*((_QWORD *)&v622 + 1);
              if (*((_QWORD *)&v622 + 1))
                goto LABEL_460;
LABEL_463:
              v247 = v621;
              if (v621)
                goto LABEL_464;
LABEL_467:
              if (SHIBYTE(v623.__r_.__value_.__r.__words[2]) < 0)
LABEL_468:
                operator delete(v623.__r_.__value_.__l.__data_);
            }
            v250 = (std::__shared_weak_count *)v608.__r_.__value_.__l.__size_;
            if (v608.__r_.__value_.__l.__size_)
            {
              v251 = (unint64_t *)(v608.__r_.__value_.__l.__size_ + 8);
              do
                v252 = __ldaxr(v251);
              while (__stlxr(v252 - 1, v251));
              if (!v252)
              {
                ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
                std::__shared_weak_count::__release_weak(v250);
              }
            }
          }
LABEL_513:
          v270 = (std::__shared_weak_count *)*((_QWORD *)&v628 + 1);
          if (!*((_QWORD *)&v628 + 1))
            goto LABEL_517;
          v271 = (unint64_t *)(*((_QWORD *)&v628 + 1) + 8);
          do
            v272 = __ldaxr(v271);
          while (__stlxr(v272 - 1, v271));
          if (v272)
            goto LABEL_517;
          ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
          std::__shared_weak_count::__release_weak(v270);
          v152 = *(void ***)__p;
          if (*(_QWORD *)__p)
            goto LABEL_518;
          goto LABEL_525;
        }
        v594 = v38;
        v84 = v75;
        v85 = v77;
        v86 = *((char *)v26 + 39);
        if (v86 >= 0)
          v87 = *((unsigned __int8 *)v26 + 39);
        else
          v87 = v26[3];
        v88 = v87 + 11;
        if (v87 + 11 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v88 >= 0x17)
        {
          v120 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v88 | 7) != 0x17)
            v120 = v88 | 7;
          v121 = v120 + 1;
          v89 = (std::string *)operator new(v120 + 1);
          __dst.__r_.__value_.__l.__size_ = v87 + 11;
          __dst.__r_.__value_.__r.__words[2] = v121 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
        }
        else
        {
          memset(&__dst, 0, sizeof(__dst));
          v89 = &__dst;
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v87 + 11;
          if (!v87)
            goto LABEL_165;
        }
        if (v86 >= 0)
          v122 = v26 + 2;
        else
          v122 = *(const void **)v28;
        memmove(v89, v122, v87);
LABEL_165:
        v123 = v85;
        strcpy((char *)v89 + v87, "_casted_to_");
        MIL::IRTensorBufferValueType::GetDataType(v64);
        v124 = v84;
        MIL::IRDataTypeToString();
        if ((v617.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v125 = &v617;
        else
          v125 = (std::string *)v617.__r_.__value_.__r.__words[0];
        if ((v617.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v126 = HIBYTE(v617.__r_.__value_.__r.__words[2]);
        else
          v126 = v617.__r_.__value_.__l.__size_;
        v127 = std::string::append(&__dst, (const std::string::value_type *)v125, v126);
        v128 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
        v623.__r_.__value_.__r.__words[2] = v127->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v623.__r_.__value_.__l.__data_ = v128;
        v127->__r_.__value_.__l.__size_ = 0;
        v127->__r_.__value_.__r.__words[2] = 0;
        v127->__r_.__value_.__r.__words[0] = 0;
        Espresso::MILTranslator::NameGenerator::NameForPrefix(v594, (uint64_t)&v623, (uint64_t)&v625);
        if (SHIBYTE(v623.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v623.__r_.__value_.__l.__data_);
          if (SHIBYTE(v617.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_265;
LABEL_173:
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_266:
            operator delete(__dst.__r_.__value_.__l.__data_);
        }
        else
        {
          if ((SHIBYTE(v617.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_173;
LABEL_265:
          operator delete(v617.__r_.__value_.__l.__data_);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_266;
        }
        *((_BYTE *)&v623.__r_.__value_.__s + 23) = 5;
        strcpy((char *)&v623, "ios17");
        if (SHIBYTE(v623.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v623.__r_.__value_.__l.__data_);
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v624;
        if (*((_QWORD *)&v624 + 1))
        {
          v129 = (unint64_t *)(*((_QWORD *)&v624 + 1) + 8);
          do
            v130 = __ldxr(v129);
          while (__stxr(v130 + 1, v129));
        }
        std::vector<std::shared_ptr<MIL::Builder::OperationBuilder> const,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder> const>>::vector[abi:ne180100](&v623, &__dst, 1uLL);
        v131 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
        if (__dst.__r_.__value_.__l.__size_)
        {
          v132 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
          do
            v133 = __ldaxr(v132);
          while (__stlxr(v133 - 1, v132));
          if (!v133)
          {
            ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
            std::__shared_weak_count::__release_weak(v131);
          }
        }
        MIL::Builder::BlockBuilder::InsertOperations();
        if (SHIBYTE(v625.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&__dst, v625.__r_.__value_.__l.__data_, v625.__r_.__value_.__l.__size_);
        else
          __dst = v625;
        v622 = 0uLL;
        MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable();
        v169 = (std::__shared_weak_count *)*((_QWORD *)&v622 + 1);
        if (!*((_QWORD *)&v622 + 1))
          goto LABEL_272;
        v170 = (unint64_t *)(*((_QWORD *)&v622 + 1) + 8);
        do
          v171 = __ldaxr(v170);
        while (__stlxr(v171 - 1, v170));
        if (!v171)
        {
          ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
          std::__shared_weak_count::__release_weak(v169);
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_273;
        }
        else
        {
LABEL_272:
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_273:
            v172 = *(_QWORD *)__p;
            v173 = *(_QWORD *)&__p[8];
            if (*(_QWORD *)__p != *(_QWORD *)&__p[8])
              goto LABEL_394;
            goto LABEL_411;
          }
        }
        operator delete(__dst.__r_.__value_.__l.__data_);
        v172 = *(_QWORD *)__p;
        v173 = *(_QWORD *)&__p[8];
        if (*(_QWORD *)__p != *(_QWORD *)&__p[8])
        {
LABEL_394:
          v220 = *(_BYTE *)(v124 + 23);
          if (v220 >= 0)
            v221 = *(unsigned __int8 *)(v124 + 23);
          else
            v221 = *(_QWORD *)(v124 + 8);
          if (v220 >= 0)
            v222 = (const std::string::value_type *)v124;
          else
            v222 = *(const std::string::value_type **)v124;
          while (1)
          {
            v223 = *(unsigned __int8 *)(v172 + 23);
            if ((v223 & 0x80u) == 0)
              v224 = *(unsigned __int8 *)(v172 + 23);
            else
              v224 = *(_QWORD *)(v172 + 8);
            if (v224 == v221)
            {
              if ((v223 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v172, v222, *(_QWORD *)(v172 + 8)))
                  break;
              }
              else
              {
                if (!*(_BYTE *)(v172 + 23))
                  break;
                v225 = 0;
                while (*(unsigned __int8 *)(v172 + v225) == v222[v225])
                {
                  if (v223 == ++v225)
                    goto LABEL_411;
                }
              }
            }
            v172 += 24;
            if (v172 == v173)
              goto LABEL_495;
          }
        }
LABEL_411:
        if (v172 != v173)
        {
          *((_BYTE *)&v617.__r_.__value_.__s + 23) = 8;
          strcpy((char *)&v617, "identity");
          v616 = 0uLL;
          MIL::Builder::BlockBuilder::AddOperation();
          *((_BYTE *)&v613.__r_.__value_.__s + 23) = 1;
          LOWORD(v613.__r_.__value_.__l.__data_) = 120;
          if (SHIBYTE(v625.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v629, v625.__r_.__value_.__l.__data_, v625.__r_.__value_.__l.__size_);
          else
            v629 = v625;
          MIL::Builder::OperationBuilder::AddInput();
          if (*(char *)(v124 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v608, *(const std::string::value_type **)v124, *(_QWORD *)(v124 + 8));
          }
          else
          {
            v226 = *(_OWORD *)v124;
            v608.__r_.__value_.__r.__words[2] = *(_QWORD *)(v124 + 16);
            *(_OWORD *)&v608.__r_.__value_.__l.__data_ = v226;
          }
          MIL::Builder::OperationBuilder::AddOutput();
          if (SHIBYTE(v608.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v608.__r_.__value_.__l.__data_);
            v227 = (std::__shared_weak_count *)*((_QWORD *)&v619 + 1);
            if (!*((_QWORD *)&v619 + 1))
              goto LABEL_425;
          }
          else
          {
            v227 = (std::__shared_weak_count *)*((_QWORD *)&v619 + 1);
            if (!*((_QWORD *)&v619 + 1))
              goto LABEL_425;
          }
          v228 = (unint64_t *)&v227->__shared_owners_;
          do
            v229 = __ldaxr(v228);
          while (__stlxr(v229 - 1, v228));
          if (v229)
          {
LABEL_425:
            if ((SHIBYTE(v629.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_426;
LABEL_479:
            operator delete(v629.__r_.__value_.__l.__data_);
            if (SHIBYTE(v613.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_480;
LABEL_427:
            v230 = (std::__shared_weak_count *)*((_QWORD *)&v618 + 1);
            if (!*((_QWORD *)&v618 + 1))
              goto LABEL_484;
LABEL_481:
            v253 = (unint64_t *)&v230->__shared_owners_;
            do
              v254 = __ldaxr(v253);
            while (__stlxr(v254 - 1, v253));
            if (v254)
              goto LABEL_484;
            ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
            std::__shared_weak_count::__release_weak(v230);
            v255 = (std::__shared_weak_count *)*((_QWORD *)&v616 + 1);
            if (!*((_QWORD *)&v616 + 1))
              goto LABEL_488;
LABEL_485:
            v256 = (unint64_t *)&v255->__shared_owners_;
            do
              v257 = __ldaxr(v256);
            while (__stlxr(v257 - 1, v256));
            if (v257)
              goto LABEL_488;
            ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
            std::__shared_weak_count::__release_weak(v255);
            if (SHIBYTE(v617.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_489;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
            std::__shared_weak_count::__release_weak(v227);
            if (SHIBYTE(v629.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_479;
LABEL_426:
            if ((SHIBYTE(v613.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_427;
LABEL_480:
            operator delete(v613.__r_.__value_.__l.__data_);
            v230 = (std::__shared_weak_count *)*((_QWORD *)&v618 + 1);
            if (*((_QWORD *)&v618 + 1))
              goto LABEL_481;
LABEL_484:
            v255 = (std::__shared_weak_count *)*((_QWORD *)&v616 + 1);
            if (*((_QWORD *)&v616 + 1))
              goto LABEL_485;
LABEL_488:
            if (SHIBYTE(v617.__r_.__value_.__r.__words[2]) < 0)
LABEL_489:
              operator delete(v617.__r_.__value_.__l.__data_);
          }
          v258 = v621;
          if (v621)
          {
            v259 = (unint64_t *)&v621->__shared_owners_;
            do
              v260 = __ldaxr(v259);
            while (__stlxr(v260 - 1, v259));
            if (!v260)
            {
              ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
              std::__shared_weak_count::__release_weak(v258);
            }
          }
        }
LABEL_495:
        v261 = v623.__r_.__value_.__r.__words[0];
        if (v623.__r_.__value_.__r.__words[0])
        {
          v262 = v623.__r_.__value_.__l.__size_;
          v263 = (void *)v623.__r_.__value_.__r.__words[0];
          if (v623.__r_.__value_.__l.__size_ != v623.__r_.__value_.__r.__words[0])
          {
            do
            {
              v264 = *(std::__shared_weak_count **)(v262 - 8);
              if (v264)
              {
                v265 = (unint64_t *)&v264->__shared_owners_;
                do
                  v266 = __ldaxr(v265);
                while (__stlxr(v266 - 1, v265));
                if (!v266)
                {
                  ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
                  std::__shared_weak_count::__release_weak(v264);
                }
              }
              v262 -= 16;
            }
            while (v262 != v261);
            v263 = (void *)v623.__r_.__value_.__r.__words[0];
          }
          v623.__r_.__value_.__l.__size_ = v261;
          operator delete(v263);
        }
        v267 = (std::__shared_weak_count *)*((_QWORD *)&v624 + 1);
        if (!*((_QWORD *)&v624 + 1))
          goto LABEL_510;
        v268 = (unint64_t *)(*((_QWORD *)&v624 + 1) + 8);
        do
          v269 = __ldaxr(v268);
        while (__stlxr(v269 - 1, v268));
        if (!v269)
        {
          ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
          std::__shared_weak_count::__release_weak(v267);
          if ((SHIBYTE(v625.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_513;
        }
        else
        {
LABEL_510:
          if ((SHIBYTE(v625.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_513;
        }
        operator delete(v625.__r_.__value_.__l.__data_);
        goto LABEL_513;
      }
      if (!E5Common::Utils::IsTensorBuffer((E5Common::Utils *)v26[5], v37))
      {
        if ((E5Common::Utils::IsPixelBuffer((E5Common::Utils *)v26[5], v47) & 1) == 0
          && !E5Common::Utils::IsState((E5Common::Utils *)v26[5], v62))
        {
          v586 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v586, "Unsupported IRValueType.");
          v586->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
          __cxa_throw(v586, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
        }
        {
          v574 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v574, "Updating pixel buffers or states is not supported.");
          v574->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
          __cxa_throw(v574, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
        }
        goto LABEL_44;
      }
      v48 = v600;
      v49 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType((MIL::IRValueType *)v26[5]);
      v50 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v49);
      MIL::Builder::FunctionBuilder::GetContext(v597);
      MIL::Builder::FunctionBuilder::SelectedSpecialization(v597);
      MIL::Builder::FunctionBuilder::GetBlock();
      MIL::Builder::BlockBuilder::GetOutputNames(v620);
      if ((E5Common::Utils::IsTensorBuffer(v51, v52) & 1) == 0)
      {
        v575 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v575, "Cannot update a non-tensor_buffer type to a tensor_buffer type.");
        __cxa_throw(v575, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v53 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(v51);
      v54 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v53);
      v55 = v54;
      if (v54 != v50)
      {
        v56 = MIL::IRTensorBufferValueType::GetShape(v54);
        v57 = MIL::IRTensorBufferValueType::GetShape(v50);
        v58 = *(_QWORD *)(v56 + 8) - *(_QWORD *)v56;
        if (v58 != *(_QWORD *)(v57 + 8) - *(_QWORD *)v57 || memcmp(*(const void **)v56, *(const void **)v57, v58))
        {
          v570 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v570, "Changing shapes is not supported.");
LABEL_1108:
          v570->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
          __cxa_throw(v570, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
        }
        InterleaveFactors = MIL::IRTensorBufferValueType::GetInterleaveFactors(v55);
        v60 = MIL::IRTensorBufferValueType::GetInterleaveFactors(v50);
        v61 = *(_QWORD *)(InterleaveFactors + 8) - *(_QWORD *)InterleaveFactors;
        if (v61 != *(_QWORD *)(v60 + 8) - *(_QWORD *)v60
          || memcmp(*(const void **)InterleaveFactors, *(const void **)v60, v61))
        {
          v570 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v570, "Changing interleave factors is not supported.");
          goto LABEL_1108;
        }
        MIL::Builder::FunctionBuilder::RemoveInput();
        if (*((char *)v26 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(&v617, (const std::string::value_type *)v26[2], v26[3]);
        }
        else
        {
          *(_OWORD *)&v617.__r_.__value_.__l.__data_ = *v28;
          v617.__r_.__value_.__r.__words[2] = v26[4];
        }
        MIL::Builder::FunctionBuilder::AddInput();
        if (SHIBYTE(v617.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v617.__r_.__value_.__l.__data_);
        v95 = MIL::Builder::BlockBuilder::GetOperationsByInput();
        v96 = *(_QWORD *)(v95 + 24);
        if (v96)
          break;
      }
LABEL_600:
      v306 = __dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__r.__words[0])
      {
        v307 = __dst.__r_.__value_.__l.__size_;
        v308 = (void *)__dst.__r_.__value_.__r.__words[0];
        if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
        {
          do
          {
            if (*(char *)(v307 - 1) < 0)
              operator delete(*(void **)(v307 - 24));
            v307 -= 24;
          }
          while (v307 != v306);
          v308 = (void *)__dst.__r_.__value_.__r.__words[0];
        }
        __dst.__r_.__value_.__l.__size_ = v306;
        operator delete(v308);
      }
      v309 = v621;
      if (!v621)
        goto LABEL_612;
      v310 = (unint64_t *)&v621->__shared_owners_;
      do
        v311 = __ldaxr(v310);
      while (__stlxr(v311 - 1, v310));
      if (!v311)
      {
        ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
        std::__shared_weak_count::__release_weak(v309);
        v278 = (std::__shared_weak_count *)*((_QWORD *)&v622 + 1);
        if (*((_QWORD *)&v622 + 1))
        {
LABEL_613:
          v312 = (unint64_t *)&v278->__shared_owners_;
          do
            v280 = __ldaxr(v312);
          while (__stlxr(v280 - 1, v312));
LABEL_615:
          if (!v280)
          {
            ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
            std::__shared_weak_count::__release_weak(v278);
          }
        }
      }
      else
      {
LABEL_612:
        v278 = (std::__shared_weak_count *)*((_QWORD *)&v622 + 1);
        if (*((_QWORD *)&v622 + 1))
          goto LABEL_613;
      }
LABEL_43:
LABEL_44:
      v26 = (uint64_t *)*v26;
      if (!v26)
        goto LABEL_623;
    }
    if (v96 != 1)
    {
      v588 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v588, "Found more than one consumer for the tensor_buffer.");
      v588->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(v588, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
    }
    v97 = *(_QWORD *)(v95 + 16);
    v99 = *(MIL::Builder::OperationBuilder **)(v97 + 16);
    v98 = *(_QWORD *)(v97 + 24);
    *(_QWORD *)&v619 = v99;
    *((_QWORD *)&v619 + 1) = v98;
    if (v98)
    {
      v100 = (unint64_t *)(v98 + 8);
      do
        v101 = __ldxr(v100);
      while (__stxr(v101 + 1, v100));
    }
    v102 = MIL::Builder::OperationBuilder::GetOutputName(v99);
    v103 = (MIL::IRValueType *)MIL::Builder::OperationBuilder::GetOutputType(v99);
    v104 = MIL::IRValueType::AsTensorType(v103);
    v595 = v48;
    v105 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v104 + 96))(v104);
    memset(&v613, 0, sizeof(v613));
    v107 = *(const void **)v105;
    v106 = *(_QWORD *)(v105 + 8);
    v108 = v106 - *(_QWORD *)v105;
    if (v106 != *(_QWORD *)v105)
    {
      if (v108 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v109 = v104;
      v613.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(v106 - *(_QWORD *)v105);
      v613.__r_.__value_.__l.__size_ = v613.__r_.__value_.__r.__words[0];
      v110 = v613.__r_.__value_.__r.__words[0] + 8 * (v108 >> 3);
      v613.__r_.__value_.__r.__words[2] = v110;
      memcpy(v613.__r_.__value_.__l.__data_, v107, v108);
      v613.__r_.__value_.__l.__size_ = v110;
      v104 = v109;
    }
    v111 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v104 + 80))(v104);
    std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)__p, v111);
    MIL::IRTensorBufferValueType::GetDataType(v50);
    v112 = MIL::IRTensorValueType::MakeWithShape();
    Espresso::MILTranslator::NameGenerator::NameForPrefix(v595, v102, (uint64_t)&v629);
    if (SHIBYTE(v629.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v608, v629.__r_.__value_.__l.__data_, v629.__r_.__value_.__l.__size_);
    else
      v608 = v629;
    MIL::Builder::OperationBuilder::RenameOutput();
    v153 = (std::__shared_weak_count *)*((_QWORD *)&v618 + 1);
    if (!*((_QWORD *)&v618 + 1))
      goto LABEL_230;
    v154 = (unint64_t *)(*((_QWORD *)&v618 + 1) + 8);
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
      if ((SHIBYTE(v608.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_232:
        *((_BYTE *)&v607.__r_.__value_.__s + 23) = 5;
        strcpy((char *)&v607, "ios17");
        if (!E5Common::Utils::IsTensor(v112))
        {
          v587 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v587, "Only tensor types are supported.");
          v587->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
          __cxa_throw(v587, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
        }
        MIL::MILContext::GetOpset();
        v626.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
        *(_OWORD *)&v626.__r_.__value_.__r.__words[1] = xmmword_191A849B0;
        strcpy(v626.__r_.__value_.__l.__data_, "tensor_buffer_to_tensor");
        MIL::IROpset::TryGetOperatorSharedPtr();
        if (SHIBYTE(v626.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v626.__r_.__value_.__l.__data_);
          v156 = *((_QWORD *)&v605 + 1);
          v624 = v605;
          if (!*((_QWORD *)&v605 + 1))
            goto LABEL_239;
        }
        else
        {
          v156 = *((_QWORD *)&v605 + 1);
          v624 = v605;
          if (!*((_QWORD *)&v605 + 1))
          {
LABEL_239:
            MIL::Builder::OperationBuilder::Make();
            *((_BYTE *)&v626.__r_.__value_.__s + 23) = 5;
            strcpy((char *)&v626, "input");
            if (*((char *)v26 + 39) < 0)
            {
              std::string::__init_copy_ctor_external(&v625, (const std::string::value_type *)v26[2], v26[3]);
            }
            else
            {
              *(_OWORD *)&v625.__r_.__value_.__l.__data_ = *v28;
              v625.__r_.__value_.__r.__words[2] = v26[4];
            }
            MIL::Builder::OperationBuilder::AddInput();
            if (*(char *)(v102 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v623, *(const std::string::value_type **)v102, *(_QWORD *)(v102 + 8));
            }
            else
            {
              v159 = *(_OWORD *)v102;
              v623.__r_.__value_.__r.__words[2] = *(_QWORD *)(v102 + 16);
              *(_OWORD *)&v623.__r_.__value_.__l.__data_ = v159;
            }
            MIL::Builder::OperationBuilder::AddOutput();
            if (SHIBYTE(v623.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v623.__r_.__value_.__l.__data_);
              v160 = (std::__shared_weak_count *)*((_QWORD *)&v628 + 1);
              if (!*((_QWORD *)&v628 + 1))
                goto LABEL_252;
            }
            else
            {
              v160 = (std::__shared_weak_count *)*((_QWORD *)&v628 + 1);
              if (!*((_QWORD *)&v628 + 1))
                goto LABEL_252;
            }
            v161 = (unint64_t *)&v160->__shared_owners_;
            do
              v162 = __ldaxr(v161);
            while (__stlxr(v162 - 1, v161));
            if (!v162)
            {
              ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
              std::__shared_weak_count::__release_weak(v160);
              if ((SHIBYTE(v625.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_253:
                if ((SHIBYTE(v626.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_254;
                goto LABEL_283;
              }
LABEL_282:
              operator delete(v625.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v626.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_254:
                v163 = (std::__shared_weak_count *)*((_QWORD *)&v627 + 1);
                if (!*((_QWORD *)&v627 + 1))
                  goto LABEL_288;
LABEL_284:
                v174 = (unint64_t *)&v163->__shared_owners_;
                do
                  v175 = __ldaxr(v174);
                while (__stlxr(v175 - 1, v174));
                if (!v175)
                {
                  ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                  std::__shared_weak_count::__release_weak(v163);
                }
LABEL_288:
                v176 = (std::__shared_weak_count *)*((_QWORD *)&v624 + 1);
                if (*((_QWORD *)&v624 + 1))
                {
                  v177 = (unint64_t *)(*((_QWORD *)&v624 + 1) + 8);
                  do
                    v178 = __ldaxr(v177);
                  while (__stlxr(v178 - 1, v177));
                  if (!v178)
                  {
                    ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                    std::__shared_weak_count::__release_weak(v176);
                  }
                }
                MIL::Builder::OperationBuilder::SetSpecificationOpsetName();
                v179 = (std::__shared_weak_count *)*((_QWORD *)&v605 + 1);
                if (!*((_QWORD *)&v605 + 1))
                  goto LABEL_297;
                v180 = (unint64_t *)(*((_QWORD *)&v605 + 1) + 8);
                do
                  v181 = __ldaxr(v180);
                while (__stlxr(v181 - 1, v180));
                if (!v181)
                {
                  ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                  std::__shared_weak_count::__release_weak(v179);
                  if ((SHIBYTE(v607.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_298:
                    v182 = *((_QWORD *)&v616 + 1);
                    v628 = v616;
                    if (!*((_QWORD *)&v616 + 1))
                      goto LABEL_304;
                    goto LABEL_302;
                  }
                }
                else
                {
LABEL_297:
                  if ((SHIBYTE(v607.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_298;
                }
                operator delete(v607.__r_.__value_.__l.__data_);
                v182 = *((_QWORD *)&v616 + 1);
                v628 = v616;
                if (!*((_QWORD *)&v616 + 1))
                  goto LABEL_304;
LABEL_302:
                v183 = (unint64_t *)(v182 + 8);
                do
                  v184 = __ldxr(v183);
                while (__stxr(v184 + 1, v183));
LABEL_304:
                v627 = v619;
                if (*((_QWORD *)&v619 + 1))
                {
                  v185 = (unint64_t *)(*((_QWORD *)&v619 + 1) + 8);
                  do
                    v186 = __ldxr(v185);
                  while (__stxr(v186 + 1, v185));
                }
                MIL::Builder::BlockBuilder::AddOperation();
                v187 = (std::__shared_weak_count *)*((_QWORD *)&v627 + 1);
                if (!*((_QWORD *)&v627 + 1))
                  goto LABEL_311;
                v188 = (unint64_t *)(*((_QWORD *)&v627 + 1) + 8);
                do
                  v189 = __ldaxr(v188);
                while (__stlxr(v189 - 1, v188));
                if (!v189)
                {
                  ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
                  std::__shared_weak_count::__release_weak(v187);
                  v190 = (std::__shared_weak_count *)*((_QWORD *)&v628 + 1);
                  if (!*((_QWORD *)&v628 + 1))
                    goto LABEL_315;
                }
                else
                {
LABEL_311:
                  v190 = (std::__shared_weak_count *)*((_QWORD *)&v628 + 1);
                  if (!*((_QWORD *)&v628 + 1))
                    goto LABEL_315;
                }
                v191 = (unint64_t *)&v190->__shared_owners_;
                do
                  v192 = __ldaxr(v191);
                while (__stlxr(v192 - 1, v191));
                if (!v192)
                {
                  ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                  std::__shared_weak_count::__release_weak(v190);
                  if ((*(char *)(v102 + 23) & 0x80000000) == 0)
                    goto LABEL_316;
                  goto LABEL_320;
                }
LABEL_315:
                if ((*(char *)(v102 + 23) & 0x80000000) == 0)
                {
LABEL_316:
                  v193 = *(_OWORD *)v102;
                  v626.__r_.__value_.__r.__words[2] = *(_QWORD *)(v102 + 16);
                  *(_OWORD *)&v626.__r_.__value_.__l.__data_ = v193;
LABEL_321:
                  v624 = 0uLL;
                  MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable();
                  v194 = (std::__shared_weak_count *)*((_QWORD *)&v624 + 1);
                  if (!*((_QWORD *)&v624 + 1))
                    goto LABEL_325;
                  v195 = (unint64_t *)(*((_QWORD *)&v624 + 1) + 8);
                  do
                    v196 = __ldaxr(v195);
                  while (__stlxr(v196 - 1, v195));
                  if (!v196)
                  {
                    ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
                    std::__shared_weak_count::__release_weak(v194);
                    if ((SHIBYTE(v626.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_327:
                      v197 = MIL::IRTensorBufferValueType::GetDataType(v55);
                      if (v197 == MIL::IRTensorBufferValueType::GetDataType(v50))
                        goto LABEL_564;
                      v198 = *(char *)(v102 + 23);
                      if (v198 >= 0)
                        v199 = *(unsigned __int8 *)(v102 + 23);
                      else
                        v199 = *(_QWORD *)(v102 + 8);
                      v200 = v199 + 15;
                      if (v199 + 15 > 0x7FFFFFFFFFFFFFF7)
                        std::string::__throw_length_error[abi:ne180100]();
                      if (v200 >= 0x17)
                      {
                        v202 = (v200 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v200 | 7) != 0x17)
                          v202 = v200 | 7;
                        v203 = v202 + 1;
                        v201 = operator new(v202 + 1);
                        v607.__r_.__value_.__l.__size_ = v199 + 15;
                        v607.__r_.__value_.__r.__words[2] = v203 | 0x8000000000000000;
                        v607.__r_.__value_.__r.__words[0] = (std::string::size_type)v201;
                      }
                      else
                      {
                        memset(&v607, 0, sizeof(v607));
                        v201 = &v607;
                        *((_BYTE *)&v607.__r_.__value_.__s + 23) = v199 + 15;
                        if (!v199)
                          goto LABEL_342;
                      }
                      if (v198 >= 0)
                        v204 = (const std::string::value_type *)v102;
                      else
                        v204 = *(const std::string::value_type **)v102;
                      memmove(v201, v204, v199);
LABEL_342:
                      strcpy((char *)v201 + v199, "_pre_casted_to_");
                      MIL::IRTensorBufferValueType::GetDataType(v55);
                      MIL::IRDataTypeToString();
                      if ((v606 & 0x80u) == 0)
                        v205 = (const std::string::value_type *)&v605;
                      else
                        v205 = (const std::string::value_type *)v605;
                      if ((v606 & 0x80u) == 0)
                        v206 = v606;
                      else
                        v206 = *((_QWORD *)&v605 + 1);
                      v207 = std::string::append(&v607, v205, v206);
                      v208 = *(_OWORD *)&v207->__r_.__value_.__l.__data_;
                      v623.__r_.__value_.__r.__words[2] = v207->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v623.__r_.__value_.__l.__data_ = v208;
                      v207->__r_.__value_.__l.__size_ = 0;
                      v207->__r_.__value_.__r.__words[2] = 0;
                      v207->__r_.__value_.__r.__words[0] = 0;
                      Espresso::MILTranslator::NameGenerator::NameForPrefix(v595, (uint64_t)&v623, (uint64_t)&v625);
                      if (SHIBYTE(v623.__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(v623.__r_.__value_.__l.__data_);
                        if (((char)v606 & 0x80000000) == 0)
                        {
LABEL_350:
                          if ((SHIBYTE(v607.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                            goto LABEL_351;
                          goto LABEL_431;
                        }
                      }
                      else if (((char)v606 & 0x80000000) == 0)
                      {
                        goto LABEL_350;
                      }
                      operator delete((void *)v605);
                      if ((SHIBYTE(v607.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_351:
                        if ((SHIBYTE(v625.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        {
LABEL_352:
                          v623 = v625;
LABEL_433:
                          MIL::Builder::OperationBuilder::RenameOutput();
                          v231 = (std::__shared_weak_count *)*((_QWORD *)&v605 + 1);
                          if (!*((_QWORD *)&v605 + 1))
                            goto LABEL_437;
                          v232 = (unint64_t *)(*((_QWORD *)&v605 + 1) + 8);
                          do
                            v233 = __ldaxr(v232);
                          while (__stlxr(v233 - 1, v232));
                          if (!v233)
                          {
                            ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
                            std::__shared_weak_count::__release_weak(v231);
                            if ((SHIBYTE(v623.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                            {
LABEL_439:
                              *((_BYTE *)&v607.__r_.__value_.__s + 23) = 5;
                              strcpy((char *)&v607, "ios17");
                              if (SHIBYTE(v607.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v607.__r_.__value_.__l.__data_);
                              v614 = v615;
                              if (*((_QWORD *)&v615 + 1))
                              {
                                v234 = (unint64_t *)(*((_QWORD *)&v615 + 1) + 8);
                                do
                                  v235 = __ldxr(v234);
                                while (__stxr(v235 + 1, v234));
                              }
                              v612 = v619;
                              if (*((_QWORD *)&v619 + 1))
                              {
                                v236 = (unint64_t *)(*((_QWORD *)&v619 + 1) + 8);
                                do
                                  v237 = __ldxr(v236);
                                while (__stxr(v237 + 1, v236));
                              }
                              MIL::Builder::BlockBuilder::AddOperation();
                              v238 = (std::__shared_weak_count *)*((_QWORD *)&v612 + 1);
                              if (!*((_QWORD *)&v612 + 1))
                                goto LABEL_451;
                              v239 = (unint64_t *)(*((_QWORD *)&v612 + 1) + 8);
                              do
                                v240 = __ldaxr(v239);
                              while (__stlxr(v240 - 1, v239));
                              if (!v240)
                              {
                                ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
                                std::__shared_weak_count::__release_weak(v238);
                                v241 = (std::__shared_weak_count *)*((_QWORD *)&v614 + 1);
                                if (!*((_QWORD *)&v614 + 1))
                                  goto LABEL_455;
                              }
                              else
                              {
LABEL_451:
                                v241 = (std::__shared_weak_count *)*((_QWORD *)&v614 + 1);
                                if (!*((_QWORD *)&v614 + 1))
                                  goto LABEL_455;
                              }
                              v242 = (unint64_t *)&v241->__shared_owners_;
                              do
                                v243 = __ldaxr(v242);
                              while (__stlxr(v243 - 1, v242));
                              if (!v243)
                              {
                                ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
                                std::__shared_weak_count::__release_weak(v241);
                                if ((*(char *)(v102 + 23) & 0x80000000) == 0)
                                  goto LABEL_456;
                                goto LABEL_546;
                              }
LABEL_455:
                              if ((*(char *)(v102 + 23) & 0x80000000) == 0)
                              {
LABEL_456:
                                v244 = *(_OWORD *)v102;
                                v607.__r_.__value_.__r.__words[2] = *(_QWORD *)(v102 + 16);
                                *(_OWORD *)&v607.__r_.__value_.__l.__data_ = v244;
                                goto LABEL_547;
                              }
LABEL_546:
                              std::string::__init_copy_ctor_external(&v607, *(const std::string::value_type **)v102, *(_QWORD *)(v102 + 8));
LABEL_547:
                              v611 = v615;
                              if (*((_QWORD *)&v615 + 1))
                              {
                                v281 = (unint64_t *)(*((_QWORD *)&v615 + 1) + 8);
                                do
                                  v282 = __ldxr(v281);
                                while (__stxr(v282 + 1, v281));
                              }
                              MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable();
                              v283 = (std::__shared_weak_count *)*((_QWORD *)&v611 + 1);
                              if (!*((_QWORD *)&v611 + 1))
                                goto LABEL_554;
                              v284 = (unint64_t *)(*((_QWORD *)&v611 + 1) + 8);
                              do
                                v285 = __ldaxr(v284);
                              while (__stlxr(v285 - 1, v284));
                              if (!v285)
                              {
                                ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
                                std::__shared_weak_count::__release_weak(v283);
                                if ((SHIBYTE(v607.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                {
LABEL_555:
                                  v286 = (std::__shared_weak_count *)*((_QWORD *)&v615 + 1);
                                  if (!*((_QWORD *)&v615 + 1))
                                    goto LABEL_562;
                                  goto LABEL_559;
                                }
                              }
                              else
                              {
LABEL_554:
                                if ((SHIBYTE(v607.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                  goto LABEL_555;
                              }
                              operator delete(v607.__r_.__value_.__l.__data_);
                              v286 = (std::__shared_weak_count *)*((_QWORD *)&v615 + 1);
                              if (!*((_QWORD *)&v615 + 1))
                                goto LABEL_562;
LABEL_559:
                              v287 = (unint64_t *)&v286->__shared_owners_;
                              do
                                v288 = __ldaxr(v287);
                              while (__stlxr(v288 - 1, v287));
                              if (!v288)
                              {
                                ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
                                std::__shared_weak_count::__release_weak(v286);
                                if ((SHIBYTE(v625.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                {
LABEL_564:
                                  *(_OWORD *)&v625.__r_.__value_.__l.__data_ = v619;
                                  if (*((_QWORD *)&v619 + 1))
                                  {
                                    v289 = (unint64_t *)(*((_QWORD *)&v619 + 1) + 8);
                                    do
                                      v290 = __ldxr(v289);
                                    while (__stxr(v290 + 1, v289));
                                  }
                                  MIL::Builder::BlockBuilder::RemoveOperation();
                                  v291 = (std::__shared_weak_count *)v625.__r_.__value_.__l.__size_;
                                  if (!v625.__r_.__value_.__l.__size_)
                                    goto LABEL_571;
                                  v292 = (unint64_t *)(v625.__r_.__value_.__l.__size_ + 8);
                                  do
                                    v293 = __ldaxr(v292);
                                  while (__stlxr(v293 - 1, v292));
                                  if (!v293)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
                                    std::__shared_weak_count::__release_weak(v291);
                                    v294 = (std::__shared_weak_count *)*((_QWORD *)&v616 + 1);
                                    if (!*((_QWORD *)&v616 + 1))
                                      goto LABEL_575;
                                  }
                                  else
                                  {
LABEL_571:
                                    v294 = (std::__shared_weak_count *)*((_QWORD *)&v616 + 1);
                                    if (!*((_QWORD *)&v616 + 1))
                                      goto LABEL_575;
                                  }
                                  v295 = (unint64_t *)&v294->__shared_owners_;
                                  do
                                    v296 = __ldaxr(v295);
                                  while (__stlxr(v296 - 1, v295));
                                  if (!v296)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
                                    std::__shared_weak_count::__release_weak(v294);
                                    if ((SHIBYTE(v629.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                    {
LABEL_576:
                                      v297 = *(void ***)&__p[16];
                                      if (*(_QWORD *)&__p[16])
                                      {
                                        do
                                        {
                                          while (1)
                                          {
LABEL_585:
                                            v298 = (void **)*v297;
                                            v299 = (std::__shared_weak_count *)v297[6];
                                            if (v299)
                                            {
                                              v300 = (unint64_t *)&v299->__shared_owners_;
                                              do
                                                v301 = __ldaxr(v300);
                                              while (__stlxr(v301 - 1, v300));
                                              if (!v301)
                                              {
                                                ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
                                                std::__shared_weak_count::__release_weak(v299);
                                              }
                                            }
                                            if (*((char *)v297 + 39) < 0)
                                              break;
                                            operator delete(v297);
                                            v297 = v298;
                                            if (!v298)
                                              goto LABEL_591;
                                          }
                                          operator delete(v297[2]);
                                          operator delete(v297);
                                          v297 = v298;
                                        }
                                        while (v298);
                                      }
                                      goto LABEL_591;
                                    }
LABEL_581:
                                    operator delete(v629.__r_.__value_.__l.__data_);
                                    v297 = *(void ***)&__p[16];
                                    if (*(_QWORD *)&__p[16])
                                      goto LABEL_585;
LABEL_591:
                                    v302 = *(void **)__p;
                                    *(_QWORD *)__p = 0;
                                    if (v302)
                                      operator delete(v302);
                                    if (v613.__r_.__value_.__r.__words[0])
                                    {
                                      v613.__r_.__value_.__l.__size_ = v613.__r_.__value_.__r.__words[0];
                                      operator delete(v613.__r_.__value_.__l.__data_);
                                    }
                                    v303 = (std::__shared_weak_count *)*((_QWORD *)&v619 + 1);
                                    if (*((_QWORD *)&v619 + 1))
                                    {
                                      v304 = (unint64_t *)(*((_QWORD *)&v619 + 1) + 8);
                                      do
                                        v305 = __ldaxr(v304);
                                      while (__stlxr(v305 - 1, v304));
                                      if (!v305)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
                                        std::__shared_weak_count::__release_weak(v303);
                                      }
                                    }
                                    goto LABEL_600;
                                  }
LABEL_575:
                                  if ((SHIBYTE(v629.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                    goto LABEL_576;
                                  goto LABEL_581;
                                }
LABEL_563:
                                operator delete(v625.__r_.__value_.__l.__data_);
                                goto LABEL_564;
                              }
LABEL_562:
                              if ((SHIBYTE(v625.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                goto LABEL_564;
                              goto LABEL_563;
                            }
                          }
                          else
                          {
LABEL_437:
                            if ((SHIBYTE(v623.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                              goto LABEL_439;
                          }
                          operator delete(v623.__r_.__value_.__l.__data_);
                          goto LABEL_439;
                        }
LABEL_432:
                        std::string::__init_copy_ctor_external(&v623, v625.__r_.__value_.__l.__data_, v625.__r_.__value_.__l.__size_);
                        goto LABEL_433;
                      }
LABEL_431:
                      operator delete(v607.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v625.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        goto LABEL_352;
                      goto LABEL_432;
                    }
                  }
                  else
                  {
LABEL_325:
                    if ((SHIBYTE(v626.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_327;
                  }
                  operator delete(v626.__r_.__value_.__l.__data_);
                  goto LABEL_327;
                }
LABEL_320:
                std::string::__init_copy_ctor_external(&v626, *(const std::string::value_type **)v102, *(_QWORD *)(v102 + 8));
                goto LABEL_321;
              }
LABEL_283:
              operator delete(v626.__r_.__value_.__l.__data_);
              v163 = (std::__shared_weak_count *)*((_QWORD *)&v627 + 1);
              if (!*((_QWORD *)&v627 + 1))
                goto LABEL_288;
              goto LABEL_284;
            }
LABEL_252:
            if ((SHIBYTE(v625.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_253;
            goto LABEL_282;
          }
        }
        v157 = (unint64_t *)(v156 + 8);
        do
          v158 = __ldxr(v157);
        while (__stxr(v158 + 1, v157));
        goto LABEL_239;
      }
    }
    else
    {
LABEL_230:
      if ((SHIBYTE(v608.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_232;
    }
    operator delete(v608.__r_.__value_.__l.__data_);
    goto LABEL_232;
  }
LABEL_623:
  v313 = v597;
  if (v593 != v592)
  {
    v314 = 0;
    if (v591 <= 1)
      v315 = 1;
    else
      v315 = v591;
    do
    {
      if (0xAAAAAAAAAAAAAAABLL * ((v599 - (_BYTE *)v598) >> 3) <= v314)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v316 = *(MIL::IRValueType **)(*a3 + 8 * v314);
      v318 = (char *)v598 + 24 * v314;
      if (E5Common::Utils::IsTensor((uint64_t)v316))
      {
        v319 = v600;
        v320 = MIL::IRValueType::AsTensorType(v316);
        MIL::Builder::FunctionBuilder::GetContext(v313);
        MIL::Builder::FunctionBuilder::SelectedSpecialization(v313);
        MIL::Builder::FunctionBuilder::GetBlock();
        if (E5Common::Utils::IsTensor((uint64_t)FunctionOutputType))
        {
          v323 = MIL::IRValueType::AsTensorType(FunctionOutputType);
          v324 = v323;
          if (v323 == v320)
            goto LABEL_1009;
          v325 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v323 + 96))(v323);
          v326 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v320 + 96))(v320);
          v327 = *(_QWORD *)(v325 + 8) - *(_QWORD *)v325;
          if (v327 != *(_QWORD *)(v326 + 8) - *(_QWORD *)v326
            || memcmp(*(const void **)v325, *(const void **)v326, v327))
          {
            v572 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v572, "Changing shapes is not supported.");
            v572->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
            __cxa_throw(v572, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
          }
          v328 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v324 + 88))(v324);
          if (v328 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v320 + 88))(v320))
          {
            v329 = v613.__r_.__value_.__l.__size_;
            *(_OWORD *)__p = *(_OWORD *)&v613.__r_.__value_.__l.__data_;
            if (v613.__r_.__value_.__l.__size_)
            {
              v330 = (unint64_t *)(v613.__r_.__value_.__l.__size_ + 8);
              do
                v331 = __ldxr(v330);
              while (__stxr(v331 + 1, v330));
            }
            if (!v329)
              goto LABEL_1009;
            v332 = (unint64_t *)(v329 + 8);
            do
              v333 = __ldaxr(v332);
            while (__stlxr(v333 - 1, v332));
            if (v333)
              goto LABEL_1009;
            (*(void (**)(std::string::size_type))(*(_QWORD *)v329 + 16))(v329);
            v334 = (std::__shared_weak_count *)v329;
LABEL_1008:
            std::__shared_weak_count::__release_weak(v334);
            goto LABEL_1009;
          }
          v368 = v318[23];
          if (v368 >= 0)
            v369 = v318[23];
          else
            v369 = *((_QWORD *)v318 + 1);
          v370 = v369 + 15;
          if (v369 + 15 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v370 >= 0x17)
          {
            v408 = (v370 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v370 | 7) != 0x17)
              v408 = v370 | 7;
            v409 = v408 + 1;
            v371 = operator new(v408 + 1);
            v625.__r_.__value_.__l.__size_ = v369 + 15;
            v625.__r_.__value_.__r.__words[2] = v409 | 0x8000000000000000;
            v625.__r_.__value_.__r.__words[0] = (std::string::size_type)v371;
          }
          else
          {
            memset(&v625, 0, sizeof(v625));
            v371 = &v625;
            *((_BYTE *)&v625.__r_.__value_.__s + 23) = v369 + 15;
            if (!v369)
              goto LABEL_766;
          }
          if (v368 >= 0)
            v410 = v318;
          else
            v410 = *(const void **)v318;
          memmove(v371, v410, v369);
LABEL_766:
          v313 = v597;
          strcpy((char *)v371 + v369, "_pre_casted_to_");
          (*(void (**)(uint64_t))(*(_QWORD *)v320 + 88))(v320);
          MIL::IRDataTypeToString();
          if ((v623.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v411 = &v623;
          else
            v411 = (std::string *)v623.__r_.__value_.__r.__words[0];
          if ((v623.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v412 = HIBYTE(v623.__r_.__value_.__r.__words[2]);
          else
            v412 = v623.__r_.__value_.__l.__size_;
          v413 = std::string::append(&v625, (const std::string::value_type *)v411, v412);
          v414 = *(_OWORD *)&v413->__r_.__value_.__l.__data_;
          v626.__r_.__value_.__r.__words[2] = v413->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v626.__r_.__value_.__l.__data_ = v414;
          v413->__r_.__value_.__l.__size_ = 0;
          v413->__r_.__value_.__r.__words[2] = 0;
          v413->__r_.__value_.__r.__words[0] = 0;
          Espresso::MILTranslator::NameGenerator::NameForPrefix(v319, (uint64_t)&v626, (uint64_t)__p);
          if (SHIBYTE(v626.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v626.__r_.__value_.__l.__data_);
            if (SHIBYTE(v623.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_890;
LABEL_774:
            if (SHIBYTE(v625.__r_.__value_.__r.__words[2]) < 0)
LABEL_891:
              operator delete(v625.__r_.__value_.__l.__data_);
          }
          else
          {
            if ((SHIBYTE(v623.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_774;
LABEL_890:
            operator delete(v623.__r_.__value_.__l.__data_);
            if (SHIBYTE(v625.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_891;
          }
          MIL::Builder::BlockBuilder::GetOperation();
          v415 = 0;
          while (2)
          {
            if (v415 >= MIL::Builder::OperationBuilder::GetNumOutputs((MIL::Builder::OperationBuilder *)v623.__r_.__value_.__l.__data_))
            {
              *((_BYTE *)&v625.__r_.__value_.__s + 23) = 5;
              strcpy((char *)&v625, "ios17");
              if (SHIBYTE(v625.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v625.__r_.__value_.__l.__data_);
                v425 = v629.__r_.__value_.__l.__size_;
                *(_OWORD *)&v625.__r_.__value_.__l.__data_ = *(_OWORD *)&v629.__r_.__value_.__l.__data_;
                if (v629.__r_.__value_.__l.__size_)
                  goto LABEL_957;
              }
              else
              {
                v425 = v629.__r_.__value_.__l.__size_;
                *(_OWORD *)&v625.__r_.__value_.__l.__data_ = *(_OWORD *)&v629.__r_.__value_.__l.__data_;
                if (!v629.__r_.__value_.__l.__size_)
                  goto LABEL_959;
LABEL_957:
                v502 = (unint64_t *)(v425 + 8);
                do
                  v503 = __ldxr(v502);
                while (__stxr(v503 + 1, v502));
              }
LABEL_959:
              *(_OWORD *)&v608.__r_.__value_.__l.__data_ = 0uLL;
              MIL::Builder::BlockBuilder::AddOperation();
              v504 = (std::__shared_weak_count *)v608.__r_.__value_.__l.__size_;
              if (v608.__r_.__value_.__l.__size_)
              {
                v505 = (unint64_t *)(v608.__r_.__value_.__l.__size_ + 8);
                do
                  v506 = __ldaxr(v505);
                while (__stlxr(v506 - 1, v505));
                if (!v506)
                {
                  ((void (*)(std::__shared_weak_count *))v504->__on_zero_shared)(v504);
                  std::__shared_weak_count::__release_weak(v504);
                }
              }
              v507 = (std::__shared_weak_count *)v625.__r_.__value_.__l.__size_;
              if (v625.__r_.__value_.__l.__size_)
              {
                v508 = (unint64_t *)(v625.__r_.__value_.__l.__size_ + 8);
                do
                  v509 = __ldaxr(v508);
                while (__stlxr(v509 - 1, v508));
                if (!v509)
                {
                  ((void (*)(std::__shared_weak_count *))v507->__on_zero_shared)(v507);
                  std::__shared_weak_count::__release_weak(v507);
                }
              }
              v510 = (std::__shared_weak_count *)v629.__r_.__value_.__l.__size_;
              if (v629.__r_.__value_.__l.__size_)
              {
                v511 = (unint64_t *)(v629.__r_.__value_.__l.__size_ + 8);
                do
                  v512 = __ldaxr(v511);
                while (__stlxr(v512 - 1, v511));
                if (!v512)
                {
                  ((void (*)(std::__shared_weak_count *))v510->__on_zero_shared)(v510);
                  std::__shared_weak_count::__release_weak(v510);
                  v513 = (std::__shared_weak_count *)v623.__r_.__value_.__l.__size_;
                  if (v623.__r_.__value_.__l.__size_)
                    goto LABEL_974;
                  goto LABEL_977;
                }
              }
              v513 = (std::__shared_weak_count *)v623.__r_.__value_.__l.__size_;
              if (!v623.__r_.__value_.__l.__size_)
                goto LABEL_977;
LABEL_974:
              v514 = (unint64_t *)&v513->__shared_owners_;
              do
                v515 = __ldaxr(v514);
              while (__stlxr(v515 - 1, v514));
              if (v515)
              {
LABEL_977:
                if ((__p[23] & 0x80000000) != 0)
                  goto LABEL_978;
              }
              else
              {
                ((void (*)(std::__shared_weak_count *))v513->__on_zero_shared)(v513);
                std::__shared_weak_count::__release_weak(v513);
                if ((__p[23] & 0x80000000) != 0)
LABEL_978:
                  operator delete(*(void **)__p);
              }
              goto LABEL_1009;
            }
            v416 = (unsigned __int8 *)MIL::Builder::OperationBuilder::GetOutputName((MIL::Builder::OperationBuilder *)v623.__r_.__value_.__l.__data_);
            v417 = v416[23];
            if ((v417 & 0x80u) == 0)
              v418 = v416[23];
            else
              v418 = *((_QWORD *)v416 + 1);
            v419 = v318[23];
            v420 = (char)v419;
            if ((v419 & 0x80u) != 0)
              v419 = *((_QWORD *)v318 + 1);
            if (v418 == v419)
            {
              if (v420 >= 0)
                v421 = (unsigned __int8 *)v318;
              else
                v421 = *(unsigned __int8 **)v318;
              if ((v417 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v416, v421, *((_QWORD *)v416 + 1)))
                  goto LABEL_792;
              }
              else
              {
                if (v416[23])
                {
                  while (*v416 == *v421)
                  {
                    ++v416;
                    ++v421;
                    if (!--v417)
                      goto LABEL_792;
                  }
                  goto LABEL_777;
                }
LABEL_792:
                if ((__p[23] & 0x80000000) != 0)
                  std::string::__init_copy_ctor_external(&v626, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
                else
                  v626 = *(std::string *)__p;
                MIL::Builder::OperationBuilder::RenameOutput();
                v422 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
                if (!__dst.__r_.__value_.__l.__size_)
                  goto LABEL_799;
                v423 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
                do
                  v424 = __ldaxr(v423);
                while (__stlxr(v424 - 1, v423));
                if (!v424)
                {
                  ((void (*)(std::__shared_weak_count *))v422->__on_zero_shared)(v422);
                  std::__shared_weak_count::__release_weak(v422);
                  if (SHIBYTE(v626.__r_.__value_.__r.__words[2]) < 0)
LABEL_800:
                    operator delete(v626.__r_.__value_.__l.__data_);
                }
                else
                {
LABEL_799:
                  if (SHIBYTE(v626.__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_800;
                }
              }
            }
LABEL_777:
            ++v415;
            continue;
          }
        }
        if (!E5Common::Utils::IsTensorBuffer(FunctionOutputType, v322))
        {
          v576 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v576, "A tensor can only replace a tensor or a tensor_buffer type.");
          __cxa_throw(v576, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v353 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(FunctionOutputType);
        v354 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v353);
        if (*(_QWORD *)(MIL::Builder::BlockBuilder::GetOperationsByInput() + 24))
        {
          v568 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v568, "output of tensor_to_tensor_buffer is consumed by other operations.");
LABEL_1117:
          v568->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
          __cxa_throw(v568, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
        }
        v355 = MIL::IRTensorBufferValueType::GetShape(v354);
        v356 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v320 + 96))(v320);
        v357 = *(_QWORD *)(v355 + 8) - *(_QWORD *)v355;
        if (v357 != *(_QWORD *)(v356 + 8) - *(_QWORD *)v356 || memcmp(*(const void **)v355, *(const void **)v356, v357))
        {
          v568 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v568, "Changing shapes is not supported.");
          goto LABEL_1117;
        }
        MIL::Builder::BlockBuilder::GetOperation();
        __p[23] = 5;
        strcpy(__p, "input");
        ArgumentForParameter = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        if (!MIL::Builder::Variable::TryGetName(ArgumentForParameter))
        {
          v581 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v581, "Converting a constant tensor to a tensor_buffer is not supported.");
          v581->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
          __cxa_throw(v581, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
        }
        v359 = MIL::Builder::Variable::GetName(ArgumentForParameter);
        if (*(char *)(v359 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)v359, *(_QWORD *)(v359 + 8));
        }
        else
        {
          v360 = *(_OWORD *)v359;
          *(_QWORD *)&__p[16] = *(_QWORD *)(v359 + 16);
          *(_OWORD *)__p = v360;
        }
        if (!MIL::Builder::Variable::TryGetType(ArgumentForParameter))
        {
          v579 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v579, "Cannot find IRValueType for the input of tensor_to_tensor_buffer.");
          __cxa_throw(v579, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        *(_OWORD *)&v608.__r_.__value_.__l.__data_ = *(_OWORD *)&v629.__r_.__value_.__l.__data_;
        if (v629.__r_.__value_.__l.__size_)
        {
          v361 = (unint64_t *)(v629.__r_.__value_.__l.__size_ + 8);
          do
            v362 = __ldxr(v361);
          while (__stxr(v362 + 1, v361));
        }
        MIL::Builder::BlockBuilder::RemoveOperation();
        v363 = (std::__shared_weak_count *)v608.__r_.__value_.__l.__size_;
        if (v608.__r_.__value_.__l.__size_)
        {
          v364 = (unint64_t *)(v608.__r_.__value_.__l.__size_ + 8);
          do
            v365 = __ldaxr(v364);
          while (__stlxr(v365 - 1, v364));
          if (!v365)
          {
            ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
            std::__shared_weak_count::__release_weak(v363);
          }
        }
        v366 = MIL::IRTensorBufferValueType::GetDataType(v354);
        if (v366 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v320 + 88))(v320))
        {
          if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v603, (uint64_t)__p)|| MIL::Builder::FunctionBuilder::TryGetInput())
          {
            *((_BYTE *)&v626.__r_.__value_.__s + 23) = 8;
            strcpy((char *)&v626, "identity");
            v627 = 0uLL;
            MIL::Builder::BlockBuilder::AddOperation();
            *((_BYTE *)&v625.__r_.__value_.__s + 23) = 1;
            LOWORD(v625.__r_.__value_.__l.__data_) = 120;
            if ((__p[23] & 0x80000000) != 0)
              std::string::__init_copy_ctor_external(&v623, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
            else
              v623 = *(std::string *)__p;
            MIL::Builder::OperationBuilder::AddInput();
            if (v318[23] < 0)
            {
              std::string::__init_copy_ctor_external(&__dst, *(const std::string::value_type **)v318, *((_QWORD *)v318 + 1));
            }
            else
            {
              v403 = *(_OWORD *)v318;
              __dst.__r_.__value_.__r.__words[2] = *((_QWORD *)v318 + 2);
              *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v403;
            }
            MIL::Builder::OperationBuilder::AddOutput();
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__dst.__r_.__value_.__l.__data_);
              v404 = (std::__shared_weak_count *)*((_QWORD *)&v605 + 1);
              if (!*((_QWORD *)&v605 + 1))
                goto LABEL_755;
            }
            else
            {
              v404 = (std::__shared_weak_count *)*((_QWORD *)&v605 + 1);
              if (!*((_QWORD *)&v605 + 1))
                goto LABEL_755;
            }
            v405 = (unint64_t *)&v404->__shared_owners_;
            do
              v406 = __ldaxr(v405);
            while (__stlxr(v406 - 1, v405));
            if (v406)
            {
LABEL_755:
              if ((SHIBYTE(v623.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_756;
LABEL_980:
              operator delete(v623.__r_.__value_.__l.__data_);
              if (SHIBYTE(v625.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_981;
LABEL_757:
              v407 = (std::__shared_weak_count *)*((_QWORD *)&v628 + 1);
              if (!*((_QWORD *)&v628 + 1))
                goto LABEL_985;
LABEL_982:
              v516 = (unint64_t *)&v407->__shared_owners_;
              do
                v517 = __ldaxr(v516);
              while (__stlxr(v517 - 1, v516));
              if (v517)
                goto LABEL_985;
              ((void (*)(std::__shared_weak_count *))v407->__on_zero_shared)(v407);
              std::__shared_weak_count::__release_weak(v407);
              v518 = (std::__shared_weak_count *)*((_QWORD *)&v627 + 1);
              if (!*((_QWORD *)&v627 + 1))
                goto LABEL_991;
LABEL_986:
              v519 = (unint64_t *)&v518->__shared_owners_;
              do
                v520 = __ldaxr(v519);
              while (__stlxr(v520 - 1, v519));
              if (!v520)
              {
                ((void (*)(std::__shared_weak_count *))v518->__on_zero_shared)(v518);
                std::__shared_weak_count::__release_weak(v518);
              }
              goto LABEL_991;
            }
            ((void (*)(std::__shared_weak_count *))v404->__on_zero_shared)(v404);
            std::__shared_weak_count::__release_weak(v404);
            if (SHIBYTE(v623.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_980;
LABEL_756:
            if ((SHIBYTE(v625.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_757;
LABEL_981:
            operator delete(v625.__r_.__value_.__l.__data_);
            v407 = (std::__shared_weak_count *)*((_QWORD *)&v628 + 1);
            if (*((_QWORD *)&v628 + 1))
              goto LABEL_982;
LABEL_985:
            v518 = (std::__shared_weak_count *)*((_QWORD *)&v627 + 1);
            if (*((_QWORD *)&v627 + 1))
              goto LABEL_986;
LABEL_991:
            if (SHIBYTE(v626.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v626.__r_.__value_.__l.__data_);
              v473 = v607.__r_.__value_.__l.__size_;
              if (!v607.__r_.__value_.__l.__size_)
                goto LABEL_1000;
            }
            else
            {
              v473 = v607.__r_.__value_.__l.__size_;
              if (!v607.__r_.__value_.__l.__size_)
                goto LABEL_1000;
            }
            v521 = (unint64_t *)(v473 + 8);
            do
              v475 = __ldaxr(v521);
            while (__stlxr(v475 - 1, v521));
LABEL_997:
            if (v475)
              goto LABEL_1000;
            (*(void (**)(std::string::size_type))(*(_QWORD *)v473 + 16))(v473);
            v522 = (std::__shared_weak_count *)v473;
          }
          else
          {
            v551 = v613.__r_.__value_.__l.__size_;
            *(_OWORD *)&v626.__r_.__value_.__l.__data_ = *(_OWORD *)&v613.__r_.__value_.__l.__data_;
            if (v613.__r_.__value_.__l.__size_)
            {
              v552 = (unint64_t *)(v613.__r_.__value_.__l.__size_ + 8);
              do
                v553 = __ldxr(v552);
              while (__stxr(v553 + 1, v552));
            }
            if (!v551)
              goto LABEL_1000;
            v554 = (unint64_t *)(v551 + 8);
            do
              v555 = __ldaxr(v554);
            while (__stlxr(v555 - 1, v554));
            if (v555)
            {
LABEL_1000:
              if ((__p[23] & 0x80000000) != 0)
              {
                operator delete(*(void **)__p);
                v523 = v629.__r_.__value_.__l.__size_;
                if (!v629.__r_.__value_.__l.__size_)
                  goto LABEL_1009;
              }
              else
              {
                v523 = v629.__r_.__value_.__l.__size_;
                if (!v629.__r_.__value_.__l.__size_)
                  goto LABEL_1009;
              }
              v524 = (unint64_t *)(v523 + 8);
              do
                v525 = __ldaxr(v524);
              while (__stlxr(v525 - 1, v524));
              if (!v525)
              {
                (*(void (**)(std::string::size_type))(*(_QWORD *)v523 + 16))(v523);
                v334 = (std::__shared_weak_count *)v523;
                goto LABEL_1008;
              }
LABEL_1009:
              v526 = (std::__shared_weak_count *)v613.__r_.__value_.__l.__size_;
              if (!v613.__r_.__value_.__l.__size_)
                goto LABEL_1013;
              v527 = (unint64_t *)(v613.__r_.__value_.__l.__size_ + 8);
              do
                v528 = __ldaxr(v527);
              while (__stlxr(v528 - 1, v527));
              if (!v528)
              {
                ((void (*)(std::__shared_weak_count *))v526->__on_zero_shared)(v526);
                std::__shared_weak_count::__release_weak(v526);
                v529 = (std::__shared_weak_count *)v617.__r_.__value_.__l.__size_;
                if (v617.__r_.__value_.__l.__size_)
                {
LABEL_1014:
                  v530 = (unint64_t *)&v529->__shared_owners_;
                  do
                    v531 = __ldaxr(v530);
                  while (__stlxr(v531 - 1, v530));
                  goto LABEL_1059;
                }
              }
              else
              {
LABEL_1013:
                v529 = (std::__shared_weak_count *)v617.__r_.__value_.__l.__size_;
                if (v617.__r_.__value_.__l.__size_)
                  goto LABEL_1014;
              }
              goto LABEL_627;
            }
            (*(void (**)(std::string::size_type))(*(_QWORD *)v551 + 16))(v551);
            v522 = (std::__shared_weak_count *)v551;
          }
          std::__shared_weak_count::__release_weak(v522);
          goto LABEL_1000;
        }
        *((_BYTE *)&v626.__r_.__value_.__s + 23) = 5;
        strcpy((char *)&v626, "ios17");
        if (SHIBYTE(v626.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v626.__r_.__value_.__l.__data_);
          v367 = v625.__r_.__value_.__l.__size_;
          *(_OWORD *)&v626.__r_.__value_.__l.__data_ = *(_OWORD *)&v625.__r_.__value_.__l.__data_;
          if (v625.__r_.__value_.__l.__size_)
            goto LABEL_733;
        }
        else
        {
          v367 = v625.__r_.__value_.__l.__size_;
          *(_OWORD *)&v626.__r_.__value_.__l.__data_ = *(_OWORD *)&v625.__r_.__value_.__l.__data_;
          if (!v625.__r_.__value_.__l.__size_)
            goto LABEL_735;
LABEL_733:
          v395 = (unint64_t *)(v367 + 8);
          do
            v396 = __ldxr(v395);
          while (__stxr(v396 + 1, v395));
        }
LABEL_735:
        *(_OWORD *)&v623.__r_.__value_.__l.__data_ = 0uLL;
        MIL::Builder::BlockBuilder::AddOperation();
        v397 = (std::__shared_weak_count *)v623.__r_.__value_.__l.__size_;
        if (!v623.__r_.__value_.__l.__size_)
          goto LABEL_739;
        v398 = (unint64_t *)(v623.__r_.__value_.__l.__size_ + 8);
        do
          v399 = __ldaxr(v398);
        while (__stlxr(v399 - 1, v398));
        if (!v399)
        {
          ((void (*)(std::__shared_weak_count *))v397->__on_zero_shared)(v397);
          std::__shared_weak_count::__release_weak(v397);
          v400 = (std::__shared_weak_count *)v626.__r_.__value_.__l.__size_;
          if (v626.__r_.__value_.__l.__size_)
          {
LABEL_740:
            v401 = (unint64_t *)&v400->__shared_owners_;
            do
              v402 = __ldaxr(v401);
            while (__stlxr(v402 - 1, v401));
            if (!v402)
            {
              ((void (*)(std::__shared_weak_count *))v400->__on_zero_shared)(v400);
              std::__shared_weak_count::__release_weak(v400);
            }
          }
        }
        else
        {
LABEL_739:
          v400 = (std::__shared_weak_count *)v626.__r_.__value_.__l.__size_;
          if (v626.__r_.__value_.__l.__size_)
            goto LABEL_740;
        }
        v473 = v625.__r_.__value_.__l.__size_;
        if (!v625.__r_.__value_.__l.__size_)
          goto LABEL_1000;
        v474 = (unint64_t *)(v625.__r_.__value_.__l.__size_ + 8);
        do
          v475 = __ldaxr(v474);
        while (__stlxr(v475 - 1, v474));
        goto LABEL_997;
      }
      if (!E5Common::Utils::IsTensorBuffer(v316, v317))
      {
        if (!E5Common::Utils::IsPixelBuffer(v316, v335))
        {
          v578 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v578, "Unsupported IRValueType.");
          v578->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
          __cxa_throw(v578, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
        }
        {
          v580 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v580, "Updating pixel buffers is not supported.");
          v580->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
          __cxa_throw(v580, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
        }
        goto LABEL_628;
      }
      v336 = v600;
      v337 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(v316);
      v338 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v337);
      MIL::Builder::FunctionBuilder::GetContext(v313);
      MIL::Builder::FunctionBuilder::SelectedSpecialization(v313);
      MIL::Builder::FunctionBuilder::GetBlock();
      if ((E5Common::Utils::IsTensorBuffer(v339, v340) & 1) == 0)
      {
        v577 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v577, "Cannot update a non-tensor_buffer type to a tensor_buffer type.");
        __cxa_throw(v577, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v341 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(v339);
      v342 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v341);
      v343 = v342;
      if (v342 == v338)
        goto LABEL_1051;
      v344 = MIL::IRTensorBufferValueType::GetShape(v342);
      v345 = MIL::IRTensorBufferValueType::GetShape(v338);
      v346 = *(_QWORD *)(v344 + 8) - *(_QWORD *)v344;
      if (v346 != *(_QWORD *)(v345 + 8) - *(_QWORD *)v345 || memcmp(*(const void **)v344, *(const void **)v345, v346))
      {
        v571 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v571, "Changing shapes is not supported.");
LABEL_1111:
        v571->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(v571, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
      }
      v347 = MIL::IRTensorBufferValueType::GetInterleaveFactors(v343);
      v348 = MIL::IRTensorBufferValueType::GetInterleaveFactors(v338);
      v349 = *(_QWORD *)(v347 + 8) - *(_QWORD *)v347;
      if (v349 != *(_QWORD *)(v348 + 8) - *(_QWORD *)v348 || memcmp(*(const void **)v347, *(const void **)v348, v349))
      {
        v571 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v571, "Changing interleave factors is not supported.");
        goto LABEL_1111;
      }
      MIL::Builder::BlockBuilder::GetOperation();
      __p[23] = 5;
      strcpy(__p, "input");
      v350 = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (!MIL::Builder::Variable::TryGetName(v350))
      {
        v584 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v584, "Converting a constant tensor to a tensor_buffer is not supported.");
        v584->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(v584, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
      }
      v351 = MIL::Builder::Variable::GetName(v350);
      if (*(char *)(v351 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v617, *(const std::string::value_type **)v351, *(_QWORD *)(v351 + 8));
      }
      else
      {
        v352 = *(_OWORD *)v351;
        v617.__r_.__value_.__r.__words[2] = *(_QWORD *)(v351 + 16);
        *(_OWORD *)&v617.__r_.__value_.__l.__data_ = v352;
      }
      if (!MIL::Builder::Variable::TryGetType(v350))
      {
        v583 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v583, "Cannot find IRValueType for the input of tensor_to_tensor_buffer.");
        __cxa_throw(v583, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      Strides = (uint64_t *)MIL::IRTensorBufferValueType::GetStrides(v338);
      v373 = (uint64_t *)MIL::IRTensorBufferValueType::GetInterleaveFactors(v338);
      E5Common::Utils::MakeIRValueFromPropertyVec(Strides, &v616);
      E5Common::Utils::MakeIRValueFromPropertyVec(v373, &v615);
      *((_BYTE *)&v613.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&v613, "ios17");
      v375 = v616;
      v612 = v616;
      if (*((_QWORD *)&v616 + 1))
      {
        v376 = (unint64_t *)(*((_QWORD *)&v616 + 1) + 8);
        do
          v377 = __ldxr(v376);
        while (__stxr(v377 + 1, v376));
      }
      v378 = v615;
      v611 = v615;
      if (*((_QWORD *)&v615 + 1))
      {
        v379 = (unint64_t *)(*((_QWORD *)&v615 + 1) + 8);
        do
          v380 = __ldxr(v379);
        while (__stxr(v380 + 1, v379));
      }
      if ((E5Common::Utils::IsTensorBuffer(v338, v374) & 1) == 0)
      {
        v582 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v582, "Only tensor_buffer types are supported.");
        v582->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(v582, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
      }
      MIL::MILContext::GetOpset();
      *(_QWORD *)__p = operator new(0x19uLL);
      *(_OWORD *)&__p[8] = xmmword_191A849B0;
      strcpy(*(char **)__p, "tensor_to_tensor_buffer");
      MIL::IROpset::TryGetOperatorSharedPtr();
      if ((__p[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__p);
        v381 = v629.__r_.__value_.__l.__size_;
        v627 = *(_OWORD *)&v629.__r_.__value_.__l.__data_;
        if (v629.__r_.__value_.__l.__size_)
        {
LABEL_706:
          v382 = (unint64_t *)(v381 + 8);
          do
            v383 = __ldxr(v382);
          while (__stxr(v383 + 1, v382));
        }
      }
      else
      {
        v381 = v629.__r_.__value_.__l.__size_;
        v627 = *(_OWORD *)&v629.__r_.__value_.__l.__data_;
        if (v629.__r_.__value_.__l.__size_)
          goto LABEL_706;
      }
      MIL::Builder::OperationBuilder::Make();
      __p[23] = 5;
      strcpy(__p, "input");
      if (SHIBYTE(v617.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v626, v617.__r_.__value_.__l.__data_, v617.__r_.__value_.__l.__size_);
      else
        v626 = v617;
      MIL::Builder::OperationBuilder::AddInput();
      *((_BYTE *)&v625.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v625, "strides");
      v624 = v375;
      if (*((_QWORD *)&v375 + 1))
      {
        v384 = (unint64_t *)(*((_QWORD *)&v375 + 1) + 8);
        do
          v385 = __ldxr(v384);
        while (__stxr(v385 + 1, v384));
      }
      MIL::Builder::OperationBuilder::AddInput();
      v313 = v597;
      *((_BYTE *)&v623.__r_.__value_.__s + 23) = 18;
      strcpy((char *)&v623, "interleave_factors");
      v622 = v378;
      if (*((_QWORD *)&v378 + 1))
      {
        v386 = (unint64_t *)(*((_QWORD *)&v378 + 1) + 8);
        do
          v387 = __ldxr(v386);
        while (__stxr(v387 + 1, v386));
      }
      MIL::Builder::OperationBuilder::AddInput();
      if (v318[23] < 0)
      {
        std::string::__init_copy_ctor_external(&__dst, *(const std::string::value_type **)v318, *((_QWORD *)v318 + 1));
      }
      else
      {
        v388 = *(_OWORD *)v318;
        __dst.__r_.__value_.__r.__words[2] = *((_QWORD *)v318 + 2);
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v388;
      }
      MIL::Builder::OperationBuilder::AddOutput();
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        v389 = (std::__shared_weak_count *)v608.__r_.__value_.__l.__size_;
        if (!v608.__r_.__value_.__l.__size_)
          goto LABEL_727;
      }
      else
      {
        v389 = (std::__shared_weak_count *)v608.__r_.__value_.__l.__size_;
        if (!v608.__r_.__value_.__l.__size_)
          goto LABEL_727;
      }
      v390 = (unint64_t *)&v389->__shared_owners_;
      do
        v391 = __ldaxr(v390);
      while (__stlxr(v391 - 1, v390));
      if (!v391)
      {
        ((void (*)(std::__shared_weak_count *))v389->__on_zero_shared)(v389);
        std::__shared_weak_count::__release_weak(v389);
        v392 = (std::__shared_weak_count *)*((_QWORD *)&v622 + 1);
        if (!*((_QWORD *)&v622 + 1))
          goto LABEL_807;
        goto LABEL_728;
      }
LABEL_727:
      v392 = (std::__shared_weak_count *)*((_QWORD *)&v622 + 1);
      if (!*((_QWORD *)&v622 + 1))
        goto LABEL_807;
LABEL_728:
      v393 = (unint64_t *)&v392->__shared_owners_;
      do
        v394 = __ldaxr(v393);
      while (__stlxr(v394 - 1, v393));
      if (!v394)
      {
        ((void (*)(std::__shared_weak_count *))v392->__on_zero_shared)(v392);
        std::__shared_weak_count::__release_weak(v392);
      }
LABEL_807:
      if (SHIBYTE(v623.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v623.__r_.__value_.__l.__data_);
        v426 = (std::__shared_weak_count *)v607.__r_.__value_.__l.__size_;
        if (!v607.__r_.__value_.__l.__size_)
          goto LABEL_814;
      }
      else
      {
        v426 = (std::__shared_weak_count *)v607.__r_.__value_.__l.__size_;
        if (!v607.__r_.__value_.__l.__size_)
          goto LABEL_814;
      }
      v427 = (unint64_t *)&v426->__shared_owners_;
      do
        v428 = __ldaxr(v427);
      while (__stlxr(v428 - 1, v427));
      if (!v428)
      {
        ((void (*)(std::__shared_weak_count *))v426->__on_zero_shared)(v426);
        std::__shared_weak_count::__release_weak(v426);
        v429 = (std::__shared_weak_count *)*((_QWORD *)&v624 + 1);
        if (!*((_QWORD *)&v624 + 1))
          goto LABEL_820;
        goto LABEL_815;
      }
LABEL_814:
      v429 = (std::__shared_weak_count *)*((_QWORD *)&v624 + 1);
      if (!*((_QWORD *)&v624 + 1))
        goto LABEL_820;
LABEL_815:
      v430 = (unint64_t *)&v429->__shared_owners_;
      do
        v431 = __ldaxr(v430);
      while (__stlxr(v431 - 1, v430));
      if (!v431)
      {
        ((void (*)(std::__shared_weak_count *))v429->__on_zero_shared)(v429);
        std::__shared_weak_count::__release_weak(v429);
      }
LABEL_820:
      if (SHIBYTE(v625.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v625.__r_.__value_.__l.__data_);
        v432 = (std::__shared_weak_count *)*((_QWORD *)&v605 + 1);
        if (!*((_QWORD *)&v605 + 1))
          goto LABEL_827;
      }
      else
      {
        v432 = (std::__shared_weak_count *)*((_QWORD *)&v605 + 1);
        if (!*((_QWORD *)&v605 + 1))
          goto LABEL_827;
      }
      v433 = (unint64_t *)&v432->__shared_owners_;
      do
        v434 = __ldaxr(v433);
      while (__stlxr(v434 - 1, v433));
      if (v434)
      {
LABEL_827:
        if ((SHIBYTE(v626.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_828;
        goto LABEL_832;
      }
      ((void (*)(std::__shared_weak_count *))v432->__on_zero_shared)(v432);
      std::__shared_weak_count::__release_weak(v432);
      if ((SHIBYTE(v626.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_828:
        if ((__p[23] & 0x80000000) == 0)
          goto LABEL_829;
        goto LABEL_833;
      }
LABEL_832:
      operator delete(v626.__r_.__value_.__l.__data_);
      if ((__p[23] & 0x80000000) == 0)
      {
LABEL_829:
        v435 = (std::__shared_weak_count *)*((_QWORD *)&v628 + 1);
        if (!*((_QWORD *)&v628 + 1))
          goto LABEL_837;
        goto LABEL_834;
      }
LABEL_833:
      operator delete(*(void **)__p);
      v435 = (std::__shared_weak_count *)*((_QWORD *)&v628 + 1);
      if (!*((_QWORD *)&v628 + 1))
        goto LABEL_837;
LABEL_834:
      v436 = (unint64_t *)&v435->__shared_owners_;
      do
        v437 = __ldaxr(v436);
      while (__stlxr(v437 - 1, v436));
      if (v437)
      {
LABEL_837:
        v438 = (std::__shared_weak_count *)*((_QWORD *)&v627 + 1);
        if (!*((_QWORD *)&v627 + 1))
          goto LABEL_843;
        goto LABEL_838;
      }
      ((void (*)(std::__shared_weak_count *))v435->__on_zero_shared)(v435);
      std::__shared_weak_count::__release_weak(v435);
      v438 = (std::__shared_weak_count *)*((_QWORD *)&v627 + 1);
      if (!*((_QWORD *)&v627 + 1))
        goto LABEL_843;
LABEL_838:
      v439 = (unint64_t *)&v438->__shared_owners_;
      do
        v440 = __ldaxr(v439);
      while (__stlxr(v440 - 1, v439));
      if (!v440)
      {
        ((void (*)(std::__shared_weak_count *))v438->__on_zero_shared)(v438);
        std::__shared_weak_count::__release_weak(v438);
      }
LABEL_843:
      MIL::Builder::OperationBuilder::SetSpecificationOpsetName();
      v441 = (std::__shared_weak_count *)v629.__r_.__value_.__l.__size_;
      if (!v629.__r_.__value_.__l.__size_)
        goto LABEL_847;
      v442 = (unint64_t *)(v629.__r_.__value_.__l.__size_ + 8);
      do
        v443 = __ldaxr(v442);
      while (__stlxr(v443 - 1, v442));
      if (!v443)
      {
        ((void (*)(std::__shared_weak_count *))v441->__on_zero_shared)(v441);
        std::__shared_weak_count::__release_weak(v441);
        v444 = (std::__shared_weak_count *)*((_QWORD *)&v611 + 1);
        if (!*((_QWORD *)&v611 + 1))
          goto LABEL_853;
      }
      else
      {
LABEL_847:
        v444 = (std::__shared_weak_count *)*((_QWORD *)&v611 + 1);
        if (!*((_QWORD *)&v611 + 1))
          goto LABEL_853;
      }
      v445 = (unint64_t *)&v444->__shared_owners_;
      do
        v446 = __ldaxr(v445);
      while (__stlxr(v446 - 1, v445));
      if (!v446)
      {
        ((void (*)(std::__shared_weak_count *))v444->__on_zero_shared)(v444);
        std::__shared_weak_count::__release_weak(v444);
      }
LABEL_853:
      v447 = (std::__shared_weak_count *)*((_QWORD *)&v612 + 1);
      if (!*((_QWORD *)&v612 + 1))
        goto LABEL_857;
      v448 = (unint64_t *)(*((_QWORD *)&v612 + 1) + 8);
      do
        v449 = __ldaxr(v448);
      while (__stlxr(v449 - 1, v448));
      if (!v449)
      {
        ((void (*)(std::__shared_weak_count *))v447->__on_zero_shared)(v447);
        std::__shared_weak_count::__release_weak(v447);
        if (SHIBYTE(v613.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_861:
          operator delete(v613.__r_.__value_.__l.__data_);
          v450 = *((_QWORD *)&v618 + 1);
          *(_OWORD *)&v629.__r_.__value_.__l.__data_ = v618;
          if (!*((_QWORD *)&v618 + 1))
            goto LABEL_864;
          goto LABEL_862;
        }
      }
      else
      {
LABEL_857:
        if (SHIBYTE(v613.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_861;
      }
      v450 = *((_QWORD *)&v618 + 1);
      *(_OWORD *)&v629.__r_.__value_.__l.__data_ = v618;
      if (!*((_QWORD *)&v618 + 1))
        goto LABEL_864;
LABEL_862:
      v451 = (unint64_t *)(v450 + 8);
      do
        v452 = __ldxr(v451);
      while (__stxr(v452 + 1, v451));
LABEL_864:
      MIL::Builder::BlockBuilder::RemoveOperation();
      v453 = (std::__shared_weak_count *)v629.__r_.__value_.__l.__size_;
      if (!v629.__r_.__value_.__l.__size_)
        goto LABEL_868;
      v454 = (unint64_t *)(v629.__r_.__value_.__l.__size_ + 8);
      do
        v455 = __ldaxr(v454);
      while (__stlxr(v455 - 1, v454));
      if (!v455)
      {
        ((void (*)(std::__shared_weak_count *))v453->__on_zero_shared)(v453);
        std::__shared_weak_count::__release_weak(v453);
        v456 = *((_QWORD *)&v614 + 1);
        *(_OWORD *)&v608.__r_.__value_.__l.__data_ = v614;
        if (!*((_QWORD *)&v614 + 1))
          goto LABEL_871;
      }
      else
      {
LABEL_868:
        v456 = *((_QWORD *)&v614 + 1);
        *(_OWORD *)&v608.__r_.__value_.__l.__data_ = v614;
        if (!*((_QWORD *)&v614 + 1))
          goto LABEL_871;
      }
      v457 = (unint64_t *)(v456 + 8);
      do
        v458 = __ldxr(v457);
      while (__stxr(v458 + 1, v457));
LABEL_871:
      *(_OWORD *)&v607.__r_.__value_.__l.__data_ = 0uLL;
      MIL::Builder::BlockBuilder::AddOperation();
      v459 = (std::__shared_weak_count *)v607.__r_.__value_.__l.__size_;
      if (!v607.__r_.__value_.__l.__size_)
        goto LABEL_875;
      v460 = (unint64_t *)(v607.__r_.__value_.__l.__size_ + 8);
      do
        v461 = __ldaxr(v460);
      while (__stlxr(v461 - 1, v460));
      if (!v461)
      {
        ((void (*)(std::__shared_weak_count *))v459->__on_zero_shared)(v459);
        std::__shared_weak_count::__release_weak(v459);
        v462 = (std::__shared_weak_count *)v608.__r_.__value_.__l.__size_;
        if (!v608.__r_.__value_.__l.__size_)
          goto LABEL_883;
      }
      else
      {
LABEL_875:
        v462 = (std::__shared_weak_count *)v608.__r_.__value_.__l.__size_;
        if (!v608.__r_.__value_.__l.__size_)
          goto LABEL_883;
      }
      v463 = (unint64_t *)&v462->__shared_owners_;
      do
        v464 = __ldaxr(v463);
      while (__stlxr(v464 - 1, v463));
      if (!v464)
      {
        ((void (*)(std::__shared_weak_count *))v462->__on_zero_shared)(v462);
        std::__shared_weak_count::__release_weak(v462);
      }
LABEL_883:
      v465 = MIL::IRTensorBufferValueType::GetDataType(v343);
      if (v465 == MIL::IRTensorBufferValueType::GetDataType(v338))
        goto LABEL_1029;
      MIL::IRTensorBufferValueType::GetDataType(v338);
      v466 = MIL::IRTensorBufferValueType::GetShape(v338);
      memset(__p, 0, 24);
      v468 = *(const void **)v466;
      v467 = *(_QWORD *)(v466 + 8);
      v469 = v467 - *(_QWORD *)v466;
      if (v467 != *(_QWORD *)v466)
      {
        if (v469 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        *(_QWORD *)__p = operator new(v467 - *(_QWORD *)v466);
        *(_QWORD *)&__p[8] = *(_QWORD *)__p;
        v470 = *(_QWORD *)__p + 8 * (v469 >> 3);
        *(_QWORD *)&__p[16] = v470;
        memcpy(*(void **)__p, v468, v469);
        *(_QWORD *)&__p[8] = v470;
      }
      v471 = MIL::IRTensorValueType::MakeWithShape();
      if (SHIBYTE(v617.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v626, v617.__r_.__value_.__l.__data_, v617.__r_.__value_.__l.__size_);
        v472 = HIBYTE(v617.__r_.__value_.__r.__words[2]);
      }
      else
      {
        v472 = HIBYTE(v617.__r_.__value_.__r.__words[2]);
        v626 = v617;
      }
      v476 = (char)v472;
      if ((v472 & 0x80u) == 0)
        v477 = v472;
      else
        v477 = v617.__r_.__value_.__l.__size_;
      v478 = v477 + 11;
      if (v477 + 11 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v478 >= 0x17)
      {
        v480 = (v478 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v478 | 7) != 0x17)
          v480 = v478 | 7;
        v481 = v480 + 1;
        v479 = (std::string *)operator new(v480 + 1);
        __dst.__r_.__value_.__l.__size_ = v477 + 11;
        __dst.__r_.__value_.__r.__words[2] = v481 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v479;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        v479 = &__dst;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v477 + 11;
        if (!v477)
          goto LABEL_912;
      }
      if (v476 >= 0)
        v482 = &v617;
      else
        v482 = (std::string *)v617.__r_.__value_.__r.__words[0];
      memmove(v479, v482, v477);
LABEL_912:
      v313 = v597;
      strcpy((char *)v479 + v477, "_casted_to_");
      MIL::IRTensorBufferValueType::GetDataType(v338);
      MIL::IRDataTypeToString();
      if ((v613.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v483 = &v613;
      else
        v483 = (std::string *)v613.__r_.__value_.__r.__words[0];
      if ((v613.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v484 = HIBYTE(v613.__r_.__value_.__r.__words[2]);
      else
        v484 = v613.__r_.__value_.__l.__size_;
      v485 = std::string::append(&__dst, (const std::string::value_type *)v483, v484);
      v486 = *(_OWORD *)&v485->__r_.__value_.__l.__data_;
      v623.__r_.__value_.__r.__words[2] = v485->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v623.__r_.__value_.__l.__data_ = v486;
      v485->__r_.__value_.__l.__size_ = 0;
      v485->__r_.__value_.__r.__words[2] = 0;
      v485->__r_.__value_.__r.__words[0] = 0;
      Espresso::MILTranslator::NameGenerator::NameForPrefix(v336, (uint64_t)&v623, (uint64_t)&v625);
      if (SHIBYTE(v623.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v623.__r_.__value_.__l.__data_);
        if (SHIBYTE(v613.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_925:
          operator delete(v613.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_921;
          goto LABEL_926;
        }
      }
      else if (SHIBYTE(v613.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_925;
      }
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_921;
LABEL_926:
      operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_921:
      *((_BYTE *)&v623.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&v623, "ios17");
      if (SHIBYTE(v623.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v623.__r_.__value_.__l.__data_);
        v487 = v613.__r_.__value_.__l.__size_;
        v605 = *(_OWORD *)&v613.__r_.__value_.__l.__data_;
        if (!v613.__r_.__value_.__l.__size_)
          goto LABEL_930;
      }
      else
      {
        v487 = v613.__r_.__value_.__l.__size_;
        v605 = *(_OWORD *)&v613.__r_.__value_.__l.__data_;
        if (!v613.__r_.__value_.__l.__size_)
          goto LABEL_930;
      }
      v488 = (unint64_t *)(v487 + 8);
      do
        v489 = __ldxr(v488);
      while (__stxr(v489 + 1, v488));
LABEL_930:
      v628 = v614;
      if (*((_QWORD *)&v614 + 1))
      {
        v490 = (unint64_t *)(*((_QWORD *)&v614 + 1) + 8);
        do
          v491 = __ldxr(v490);
        while (__stxr(v491 + 1, v490));
      }
      MIL::Builder::BlockBuilder::AddOperation();
      v492 = (std::__shared_weak_count *)*((_QWORD *)&v628 + 1);
      if (*((_QWORD *)&v628 + 1))
      {
        v493 = (unint64_t *)(*((_QWORD *)&v628 + 1) + 8);
        do
          v494 = __ldaxr(v493);
        while (__stlxr(v494 - 1, v493));
        if (!v494)
        {
          ((void (*)(std::__shared_weak_count *))v492->__on_zero_shared)(v492);
          std::__shared_weak_count::__release_weak(v492);
        }
      }
      v495 = (std::__shared_weak_count *)*((_QWORD *)&v605 + 1);
      if (*((_QWORD *)&v605 + 1))
      {
        v496 = (unint64_t *)(*((_QWORD *)&v605 + 1) + 8);
        do
          v497 = __ldaxr(v496);
        while (__stlxr(v497 - 1, v496));
        if (!v497)
        {
          ((void (*)(std::__shared_weak_count *))v495->__on_zero_shared)(v495);
          std::__shared_weak_count::__release_weak(v495);
        }
      }
      *((_BYTE *)&v623.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&v623, "input");
      MIL::Builder::OperationBuilder::RemoveInputs();
      if (SHIBYTE(v623.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v623.__r_.__value_.__l.__data_);
      *((_BYTE *)&v623.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&v623, "input");
      if (SHIBYTE(v625.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__dst, v625.__r_.__value_.__l.__data_, v625.__r_.__value_.__l.__size_);
      else
        __dst = v625;
      MIL::Builder::OperationBuilder::AddInput();
      v498 = (std::__shared_weak_count *)*((_QWORD *)&v627 + 1);
      if (!*((_QWORD *)&v627 + 1))
        goto LABEL_952;
      v499 = (unint64_t *)(*((_QWORD *)&v627 + 1) + 8);
      do
        v500 = __ldaxr(v499);
      while (__stlxr(v500 - 1, v499));
      if (!v500)
      {
        ((void (*)(std::__shared_weak_count *))v498->__on_zero_shared)(v498);
        std::__shared_weak_count::__release_weak(v498);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_953:
          if ((SHIBYTE(v623.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_954;
          goto LABEL_1021;
        }
      }
      else
      {
LABEL_952:
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_953;
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v623.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_954:
        v501 = (std::__shared_weak_count *)v613.__r_.__value_.__l.__size_;
        if (!v613.__r_.__value_.__l.__size_)
          goto LABEL_1025;
        goto LABEL_1022;
      }
LABEL_1021:
      operator delete(v623.__r_.__value_.__l.__data_);
      v501 = (std::__shared_weak_count *)v613.__r_.__value_.__l.__size_;
      if (!v613.__r_.__value_.__l.__size_)
        goto LABEL_1025;
LABEL_1022:
      v532 = (unint64_t *)&v501->__shared_owners_;
      do
        v533 = __ldaxr(v532);
      while (__stlxr(v533 - 1, v532));
      if (v533)
      {
LABEL_1025:
        if (SHIBYTE(v625.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_1064;
        goto LABEL_1026;
      }
      ((void (*)(std::__shared_weak_count *))v501->__on_zero_shared)(v501);
      std::__shared_weak_count::__release_weak(v501);
      if (SHIBYTE(v625.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_1064:
        operator delete(v625.__r_.__value_.__l.__data_);
        if (SHIBYTE(v626.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_1065:
          operator delete(v626.__r_.__value_.__l.__data_);
          v534 = *(void **)__p;
          if (!*(_QWORD *)__p)
            goto LABEL_1029;
LABEL_1028:
          *(_QWORD *)&__p[8] = v534;
          operator delete(v534);
          goto LABEL_1029;
        }
        goto LABEL_1027;
      }
LABEL_1026:
      if (SHIBYTE(v626.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_1065;
LABEL_1027:
      v534 = *(void **)__p;
      if (*(_QWORD *)__p)
        goto LABEL_1028;
LABEL_1029:
      v535 = (std::__shared_weak_count *)*((_QWORD *)&v614 + 1);
      if (!*((_QWORD *)&v614 + 1))
        goto LABEL_1033;
      v536 = (unint64_t *)(*((_QWORD *)&v614 + 1) + 8);
      do
        v537 = __ldaxr(v536);
      while (__stlxr(v537 - 1, v536));
      if (!v537)
      {
        ((void (*)(std::__shared_weak_count *))v535->__on_zero_shared)(v535);
        std::__shared_weak_count::__release_weak(v535);
        v538 = (std::__shared_weak_count *)*((_QWORD *)&v615 + 1);
        if (!*((_QWORD *)&v615 + 1))
          goto LABEL_1039;
      }
      else
      {
LABEL_1033:
        v538 = (std::__shared_weak_count *)*((_QWORD *)&v615 + 1);
        if (!*((_QWORD *)&v615 + 1))
          goto LABEL_1039;
      }
      v539 = (unint64_t *)&v538->__shared_owners_;
      do
        v540 = __ldaxr(v539);
      while (__stlxr(v540 - 1, v539));
      if (!v540)
      {
        ((void (*)(std::__shared_weak_count *))v538->__on_zero_shared)(v538);
        std::__shared_weak_count::__release_weak(v538);
      }
LABEL_1039:
      v541 = (std::__shared_weak_count *)*((_QWORD *)&v616 + 1);
      if (!*((_QWORD *)&v616 + 1))
        goto LABEL_1043;
      v542 = (unint64_t *)(*((_QWORD *)&v616 + 1) + 8);
      do
        v543 = __ldaxr(v542);
      while (__stlxr(v543 - 1, v542));
      if (!v543)
      {
        ((void (*)(std::__shared_weak_count *))v541->__on_zero_shared)(v541);
        std::__shared_weak_count::__release_weak(v541);
        if ((SHIBYTE(v617.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_1044:
          v544 = (std::__shared_weak_count *)*((_QWORD *)&v618 + 1);
          if (!*((_QWORD *)&v618 + 1))
            goto LABEL_1051;
          goto LABEL_1048;
        }
      }
      else
      {
LABEL_1043:
        if ((SHIBYTE(v617.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_1044;
      }
      operator delete(v617.__r_.__value_.__l.__data_);
      v544 = (std::__shared_weak_count *)*((_QWORD *)&v618 + 1);
      if (!*((_QWORD *)&v618 + 1))
        goto LABEL_1051;
LABEL_1048:
      v545 = (unint64_t *)&v544->__shared_owners_;
      do
        v546 = __ldaxr(v545);
      while (__stlxr(v546 - 1, v545));
      if (!v546)
      {
        ((void (*)(std::__shared_weak_count *))v544->__on_zero_shared)(v544);
        std::__shared_weak_count::__release_weak(v544);
        v547 = (std::__shared_weak_count *)*((_QWORD *)&v619 + 1);
        if (!*((_QWORD *)&v619 + 1))
          goto LABEL_1056;
        goto LABEL_1052;
      }
LABEL_1051:
      v547 = (std::__shared_weak_count *)*((_QWORD *)&v619 + 1);
      if (!*((_QWORD *)&v619 + 1))
        goto LABEL_1056;
LABEL_1052:
      v548 = (unint64_t *)&v547->__shared_owners_;
      do
        v549 = __ldaxr(v548);
      while (__stlxr(v549 - 1, v548));
      if (!v549)
      {
        ((void (*)(std::__shared_weak_count *))v547->__on_zero_shared)(v547);
        std::__shared_weak_count::__release_weak(v547);
      }
LABEL_1056:
      v529 = v621;
      if (v621)
      {
        v550 = (unint64_t *)&v621->__shared_owners_;
        do
          v531 = __ldaxr(v550);
        while (__stlxr(v531 - 1, v550));
LABEL_1059:
        if (!v531)
        {
          ((void (*)(std::__shared_weak_count *))v529->__on_zero_shared)(v529);
          std::__shared_weak_count::__release_weak(v529);
        }
      }
LABEL_627:
LABEL_628:
      ++v314;
    }
    while (v314 != v315);
  }
  MIL::Builder::BlockBuilder::UpdateStateDependencyMap(v601);
  v556 = *(void ***)&v603[16];
  if (*(_QWORD *)&v603[16])
  {
    do
    {
      v561 = (void **)*v556;
      if (*((char *)v556 + 39) < 0)
        operator delete(v556[2]);
      operator delete(v556);
      v556 = v561;
    }
    while (v561);
  }
  v557 = *(void **)v603;
  *(_QWORD *)v603 = 0;
  if (v557)
    operator delete(v557);
  v558 = (void **)v598;
  if (v598)
  {
    v559 = (void **)v599;
    v560 = v598;
    if (v599 != v598)
    {
      do
      {
        if (*((char *)v559 - 1) < 0)
          operator delete(*(v559 - 3));
        v559 -= 3;
      }
      while (v559 != v558);
      v560 = v598;
    }
    v599 = (char *)v558;
    operator delete(v560);
  }
  v562 = v600;
  v600 = 0;
  if (v562)
  {
    Espresso::MILTranslator::NameGenerator::~NameGenerator(v562);
    MEMORY[0x19401CD90]();
  }
  v563 = v602;
  if (v602)
  {
    v564 = (unint64_t *)&v602->__shared_owners_;
    do
      v565 = __ldaxr(v564);
    while (__stlxr(v565 - 1, v564));
    if (!v565)
    {
      ((void (*)(std::__shared_weak_count *))v563->__on_zero_shared)(v563);
      std::__shared_weak_count::__release_weak(v563);
    }
  }
}

void sub_1910B2DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,Espresso::MILTranslator::NameGenerator *a22,__int16 a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,char a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  char a67;
  char a69;
  char a71;
  uint64_t v71;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a57);
  if (*(char *)(v71 - 233) < 0)
    operator delete(*(void **)(v71 - 256));
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a59);
  if (*(char *)(v71 - 137) < 0)
    operator delete(*(void **)(v71 - 160));
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a41);
  if (__p)
  {
    a52 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a67);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v71 - 128));
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a69);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a71);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&a25);
  std::vector<std::string>::~vector[abi:ne180100](&a19);
  std::unique_ptr<Espresso::MILTranslator::NameGenerator>::~unique_ptr[abi:ne180100](&a22);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_1910B3BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,...)
{
  uint64_t v36;
  va_list va;

  va_start(va, a36);
  if (a23 < 0)
    operator delete(__p);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v36 - 224);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)va);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1910B3C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  uint64_t v41;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v41 - 224);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](&a41);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](&a23);
  _Unwind_Resume(a1);
}

void sub_1910B3C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  uint64_t v41;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v41 - 224);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](&a41);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](&a23);
  _Unwind_Resume(a1);
}

void sub_1910B3C18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x1910B3C24);
}

uint64_t `anonymous namespace'::GetFunctionInputType()
{
  MIL::Builder::Variable *Input;
  MIL::Builder::Variable *v1;
  std::runtime_error *exception;

  Input = (MIL::Builder::Variable *)MIL::Builder::FunctionBuilder::TryGetInput();
  if (!Input)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed in accessing an intput variable of function.");
    goto LABEL_6;
  }
  v1 = Input;
  if (!MIL::Builder::Variable::TryGetType(Input))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed in getting the type of an input variable of function.");
LABEL_6:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return MIL::Builder::Variable::TryGetType(v1);
}

void sub_1910B3CC0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1910B3CD4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::GetFunctionOutputType(_anonymous_namespace_ *this, unint64_t a2)
{
  MIL::Builder::Variable *v3;
  uint64_t Type;
  std::runtime_error *exception;
  _QWORD *__p;
  uint64_t v8;

  MIL::Builder::BlockBuilder::GetOutputs(this);
  if (a2 >= (v8 - (uint64_t)__p) >> 3)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v3 = (MIL::Builder::Variable *)__p[a2];
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed in accessing an output variable of function.");
    goto LABEL_10;
  }
  if (!MIL::Builder::Variable::TryGetType(v3))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed in getting the type of an output variable of function.");
LABEL_10:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Type = MIL::Builder::Variable::TryGetType((MIL::Builder::Variable *)__p[a2]);
  if (__p)
    operator delete(__p);
  return Type;
}

void sub_1910B3DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  __cxa_free_exception(v11);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MakeDefaultStrides(MIL::IRConstantProperty *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  MIL::IRConstantProperty *v20;
  size_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned __int8 *v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  std::logic_error *exception;
  char *v30;
  uint64_t v31;
  size_t v32;
  char *v33;
  unint64_t v34;
  char *v35;
  char *v36;

  v8 = *a2;
  v7 = a2[1];
  v9 = v7 - *a2;
  if (v7 == *a2)
  {
    v11 = 0;
    v10 = 0;
    v12 = *a3;
    v13 = a3[1];
    v14 = v13 - *a3;
    if (v13 != *a3)
      goto LABEL_4;
LABEL_11:
    v36 = 0;
    v16 = 0;
    if (v7 != v8)
      goto LABEL_6;
LABEL_12:
    if (v13 == v12)
      goto LABEL_15;
    goto LABEL_13;
  }
  if (v9 < 0)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v10 = (char *)operator new(v7 - v8);
  bzero(v10, v7 - v8);
  v11 = &v10[v9];
  v12 = *a3;
  v13 = a3[1];
  v14 = v13 - *a3;
  if (v13 == *a3)
    goto LABEL_11;
LABEL_4:
  v35 = v11;
  if (v14 < 0)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v15 = v14 >> 3;
  v16 = (char *)operator new(v14 >> 3);
  bzero(v16, v15);
  v36 = &v16[v15];
  v11 = v35;
  if (v7 == v8)
    goto LABEL_12;
LABEL_6:
  v17 = 0;
  do
  {
    v18 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(v8 + 8 * v17));
    *(_QWORD *)&v10[8 * v17++] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 48))(v18);
    v8 = *a2;
  }
  while (v17 < (a2[1] - *a2) >> 3);
  v12 = *a3;
  if (a3[1] != *a3)
  {
LABEL_13:
    v19 = 0;
    do
    {
      v20 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(*(MIL::IRProperty **)(v12 + 8 * v19));
      v16[v19++] = MIL::IRConstantProperty::GetUInt8ScalarValue(v20);
      v12 = *a3;
    }
    while (v19 < (a3[1] - *a3) >> 3);
  }
LABEL_15:
  v21 = v11 - v10;
  v22 = (v11 - v10) >> 3;
  if (v22 != v36 - v16)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Length of shape and interleaveFactors must be equal.");
    goto LABEL_26;
  }
  if (v10 == v11)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    if (v16)
LABEL_36:
      operator delete(v16);
  }
  else
  {
    if (v36 != v16)
    {
      if (v22 <= 1)
        v23 = 1;
      else
        v23 = (v11 - v10) >> 3;
      v24 = 1;
      v25 = (unsigned __int8 *)v16;
      while (1)
      {
        v27 = *v25++;
        v26 = v27;
        if (v27 != 1)
        {
          v28 = v24 == 1;
          v24 = v26;
          if (!v28)
            break;
        }
        if (!--v23)
          goto LABEL_30;
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Found multiple interleave factors that are not 1.");
LABEL_26:
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
    }
    v24 = 1;
LABEL_30:
    if ((v21 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v30 = (char *)operator new(v11 - v10);
    bzero(v30, v11 - v10);
    v31 = v24;
    v32 = v21 >> 3;
    for (*(_QWORD *)&v30[v21 - 8] = v24; v32 != 1; --v32)
    {
      v31 += v31 * ((*(_QWORD *)&v10[8 * v32 - 8] - 1) / v16[v32 - 1]);
      *(_QWORD *)&v30[8 * v32 - 16] = v31;
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v33 = (char *)operator new(v11 - v10);
    *a4 = v33;
    a4[2] = &v33[8 * v22];
    bzero(v33, v21);
    v34 = 0;
    a4[1] = &v33[v21];
    do
    {
      *(_QWORD *)&v33[8 * v34] = MIL::IRConstantProperty::MakeInt64Scalar(a1, *(MIL::MILContext **)&v30[8 * v34]);
      ++v34;
    }
    while (v34 < v22);
    operator delete(v30);
    if (v16)
      goto LABEL_36;
  }
  if (v10)
    operator delete(v10);
}

void sub_1910B4168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  void *v21;
  void *v22;
  void *v23;

  __cxa_free_exception(v23);
  if (v22)
    operator delete(v22);
  if (v21)
    operator delete(v21);
  _Unwind_Resume(a1);
}

BOOL Espresso::AOT::ShapeHasUnknownDims(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  BOOL v5;

  v1 = a1[1];
  if (*a1 == v1)
    return 0;
  v2 = *a1 + 8;
  do
  {
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 - 8) + 24))(*(_QWORD *)(v2 - 8));
    v5 = v3 == 0;
    result = v3 != 0;
    v5 = !v5 || v2 == v1;
    v2 += 8;
  }
  while (!v5);
  return result;
}

void Espresso::AOT::Make64ByteAlignmentsVec(uint64_t *a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;

  v6 = *a1;
  v5 = a1[1];
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v7 = v5 - v6;
  if (v5 == v6)
  {
    v8 = 0;
    v9 = 0;
  }
  else
  {
    if (v7 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v5 - v6);
    *a3 = v8;
    v9 = &v8[8 * (v7 >> 3)];
    a3[2] = v9;
    memset_pattern16(v8, &xmmword_191A87020, v7 & 0xFFFFFFFFFFFFFFF8);
    a3[1] = v9;
  }
  if ((unint64_t)(v9 - v8) > 0x10)
    v10 = a2;
  else
    v10 = 0;
  v11 = ((v9 - v8) >> 3) - v10;
  if (v11 >= 2)
    memset_pattern16(v8, &unk_191A87030, 8 * v11 - 8);
}

void sub_1910B4344(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::ReorderOps(int a1, MIL::Builder::BlockBuilder *this, unint64_t **a3)
{
  uint64_t OpsetName;
  __int128 v6;
  _OWORD *v7;
  _OWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  size_t v23;
  int64x2_t *v24;
  unint64_t v25;
  unint64_t v26;
  int64x2_t v27;
  int64x2_t *v28;
  int64x2_t v29;
  int64x2_t v30;
  unint64_t v31;
  std::logic_error *v32;
  std::string *v33;
  __int128 v34;
  std::logic_error *exception;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  unint64_t *v40;
  unint64_t *v41;
  _OWORD *v42;
  _OWORD *v43;
  void *v44;
  __int128 v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  std::string v54;
  std::string v55;
  std::string v56;
  unint64_t __val;
  void *v58[2];
  void *__p[2];
  int v60;
  _OWORD *v61;
  _BYTE *v62;
  std::string v63;

  OpsetName = MIL::Builder::BlockBuilder::GetOpsetName(this);
  if (*(char *)(OpsetName + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)OpsetName, *(_QWORD *)(OpsetName + 8));
  }
  else
  {
    v6 = *(_OWORD *)OpsetName;
    v63.__r_.__value_.__r.__words[2] = *(_QWORD *)(OpsetName + 16);
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v6;
  }
  MIL::Builder::BlockBuilder::GetOperations(this);
  v8 = v61;
  v7 = v62;
  v9 = v62 - (_BYTE *)v61;
  v10 = (v62 - (_BYTE *)v61) >> 4;
  *(_OWORD *)v58 = 0u;
  *(_OWORD *)__p = 0u;
  v60 = 1065353216;
  v11 = *a3;
  v12 = a3[1];
  if (*a3 != v12)
  {
    do
    {
      __val = 0;
      v13 = *v11;
      __val = v13;
      if (v13 >= v10)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v54, __val);
        v36 = std::string::insert(&v54, 0, "Index ");
        v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v55.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        v38 = std::string::append(&v55, " in newOpIdxToOld is out of boundary");
        v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        v56.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, &v56);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
      }
      if (v58[1])
      {
        v14 = (uint8x8_t)vcnt_s8((int8x8_t)v58[1]);
        v14.i16[0] = vaddlv_u8(v14);
        if (v14.u32[0] > 1uLL)
        {
          v15 = v13;
          if ((void *)v13 >= v58[1])
            v15 = v13 % (unint64_t)v58[1];
        }
        else
        {
          v15 = ((unint64_t)v58[1] - 1) & v13;
        }
        v16 = (_QWORD *)*((_QWORD *)v58[0] + v15);
        if (v16)
        {
          v17 = (_QWORD *)*v16;
          if (v17)
          {
            if (v14.u32[0] < 2uLL)
            {
              while (1)
              {
                v19 = v17[1];
                if (v19 == v13)
                {
                  if (v17[2] == v13)
                    goto LABEL_42;
                }
                else if ((v19 & ((uint64_t)v58[1] - 1)) != v15)
                {
                  goto LABEL_26;
                }
                v17 = (_QWORD *)*v17;
                if (!v17)
                  goto LABEL_26;
              }
            }
            do
            {
              v18 = v17[1];
              if (v18 == v13)
              {
                if (v17[2] == v13)
                {
LABEL_42:
                  v32 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  std::to_string(&v55, __val);
                  v33 = std::string::insert(&v55, 0, "newOpIdxToOld has duplicated old op index: ");
                  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
                  v56.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v34;
                  v33->__r_.__value_.__l.__size_ = 0;
                  v33->__r_.__value_.__r.__words[2] = 0;
                  v33->__r_.__value_.__r.__words[0] = 0;
                  std::logic_error::logic_error(v32, &v56);
                  v32->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
                  __cxa_throw(v32, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
                }
              }
              else
              {
                if ((void *)v18 >= v58[1])
                  v18 %= (unint64_t)v58[1];
                if (v18 != v15)
                  break;
              }
              v17 = (_QWORD *)*v17;
            }
            while (v17);
          }
        }
      }
LABEL_26:
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v58, &__val, &__val);
      ++v11;
    }
    while (v11 != v12);
    v20 = __p[0];
    if (__p[0])
    {
      do
      {
        v21 = (_QWORD *)*v20;
        operator delete(v20);
        v20 = v21;
      }
      while (v21);
    }
  }
  v22 = v58[0];
  v58[0] = 0;
  if (v22)
    operator delete(v22);
  v58[0] = 0;
  v58[1] = 0;
  __p[0] = 0;
  if (v7 == v8)
  {
    v24 = 0;
  }
  else
  {
    if ((v9 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v23 = v9 >> 1;
    v24 = (int64x2_t *)operator new(v9 >> 1);
    v58[0] = v24;
    __p[0] = (char *)v24 + 8 * v10;
    bzero(v24, v23);
    v58[1] = &v24->i8[v23];
    if (v10 <= 1)
      v25 = 1;
    else
      v25 = v10;
    if (v25 >= 4)
    {
      v26 = v25 & 0xFFFFFFFFFFFFFFFCLL;
      v27 = (int64x2_t)xmmword_191A82A80;
      v28 = v24 + 1;
      v29 = vdupq_n_s64(2uLL);
      v30 = vdupq_n_s64(4uLL);
      v31 = v25 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v28[-1] = v27;
        *v28 = vaddq_s64(v27, v29);
        v27 = vaddq_s64(v27, v30);
        v28 += 2;
        v31 -= 4;
      }
      while (v31);
      goto LABEL_45;
    }
    v26 = 0;
    do
    {
      v24->i64[v26] = v26;
      ++v26;
LABEL_45:
      ;
    }
    while (v25 != v26);
  }
  MIL::Builder::BlockBuilder::RemoveOperations();
  v40 = *a3;
  v41 = a3[1];
  if (*a3 == v41)
  {
    if (!v24)
      goto LABEL_50;
    goto LABEL_49;
  }
  do
  {
    v45 = v61[*v40];
    v53 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
    if (*((_QWORD *)&v45 + 1))
    {
      v46 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    MIL::Builder::BlockBuilder::AddOperation();
    if (v53)
    {
      p_shared_owners = (unint64_t *)&v53->__shared_owners_;
      do
        v49 = __ldaxr(p_shared_owners);
      while (__stlxr(v49 - 1, p_shared_owners));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    ++v40;
  }
  while (v40 != v41);
  v24 = (int64x2_t *)v58[0];
  if (v58[0])
  {
LABEL_49:
    v58[1] = v24;
    operator delete(v24);
  }
LABEL_50:
  v42 = v61;
  if (v61)
  {
    v43 = v62;
    v44 = v61;
    if (v62 != (_BYTE *)v61)
    {
      do
      {
        v50 = (std::__shared_weak_count *)*((_QWORD *)v43 - 1);
        if (v50)
        {
          v51 = (unint64_t *)&v50->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        --v43;
      }
      while (v43 != v42);
      v44 = v61;
    }
    v62 = v42;
    operator delete(v44);
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
}

void sub_1910B49C8()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x1910B49ECLL);
  JUMPOUT(0x1910B47E8);
}

void Espresso::AOT::MoveFp32IOCasts(uint64_t a1, MIL::Builder::FunctionBuilder *this)
{
  unint64_t NumOperations;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *i;
  uint64_t Name;
  uint64_t *v11;
  uint64_t *v12;
  std::string::size_type v13;
  uint64_t v14;
  uint64_t Operator;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  MIL::Builder::Variable *ArgumentForParameter;
  uint64_t v20;
  unint64_t Output;
  uint64_t OperationsByInput;
  uint64_t Type;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  MIL::Builder::OperationBuilder *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  BOOL v47;
  _BOOL4 v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint8x8_t v56;
  unint64_t v57;
  _BOOL4 v60;
  MIL::Builder::Variable *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  BOOL v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint8x8_t v89;
  unint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  unint64_t v93;
  unint64_t v94;
  uint8x8_t v95;
  unint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  unint64_t v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  void *v108;
  _QWORD *v109;
  _QWORD *v110;
  void *v111;
  _QWORD *v112;
  _QWORD *v113;
  void *v114;
  void **v115;
  void *v116;
  _QWORD *v117;
  _QWORD *v118;
  void *v119;
  _QWORD *v120;
  void *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  void **v125;
  _QWORD *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  MIL::Builder::OperationBuilder *v131;
  std::__shared_weak_count *v132;
  MIL::Builder::OperationBuilder *v133;
  std::__shared_weak_count *v134;
  std::string __p;
  MIL::Builder::OperationBuilder *v136;
  std::__shared_weak_count *v137;
  void *v138[2];
  void *v139[2];
  int v140;
  __int128 v141;
  __int128 v142;
  int v143;
  void *v144;
  char *v145;
  char *v146;
  __int128 v147;
  __int128 v148;
  int v149;
  void *v150;
  uint64_t *v151;
  __int128 v152;
  __int128 v153;
  int v154;
  void *v155;
  std::__shared_weak_count *v156;
  _QWORD *v157;
  __int128 v158;
  __int128 v159;
  int v160;
  MIL::Builder::BlockBuilder *v161;
  std::__shared_weak_count *v162;

  MIL::Builder::FunctionBuilder::SelectedSpecialization(this);
  MIL::Builder::FunctionBuilder::GetBlock();
  NumOperations = MIL::Builder::BlockBuilder::GetNumOperations(v161);
  if (!NumOperations)
    goto LABEL_243;
  v5 = 0;
  v158 = 0u;
  v159 = 0u;
  v160 = 1065353216;
  do
  {
    MIL::Builder::BlockBuilder::GetOperation(v161);
    *(_QWORD *)&v152 = &v155;
    std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder> const&>,std::tuple<>>((uint64_t)&v158, (uint64_t *)&v155, (uint64_t)&std::piecewise_construct, (_QWORD **)&v152)[4] = v5;
    v6 = v156;
    if (v156)
    {
      p_shared_owners = (unint64_t *)&v156->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    ++v5;
  }
  while (v5 != NumOperations);
  MIL::Builder::FunctionBuilder::GetInputs(this);
  v152 = 0u;
  v153 = 0u;
  v154 = 1065353216;
  for (i = v157; i; i = (_QWORD *)*i)
  {
    Name = MIL::Builder::Variable::GetName((MIL::Builder::Variable *)i[2]);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v152, Name, Name);
  }
  MIL::Builder::BlockBuilder::GetOutputs(v161);
  v12 = (uint64_t *)v150;
  v11 = v151;
  v147 = 0u;
  v148 = 0u;
  v149 = 1065353216;
  if (v150 != v151)
  {
    do
    {
      std::__hash_table<MIL::Builder::Variable const*,std::hash<MIL::Builder::Variable const*>,std::equal_to<MIL::Builder::Variable const*>,std::allocator<MIL::Builder::Variable const*>>::__emplace_unique_key_args<MIL::Builder::Variable const*,MIL::Builder::Variable const*>((uint64_t)&v147, v12, v12);
      ++v12;
    }
    while (v12 != v11);
  }
  v144 = 0;
  v145 = 0;
  v146 = 0;
  if (NumOperations >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v130 = a1;
  v144 = operator new(8 * NumOperations);
  v146 = (char *)v144 + 8 * NumOperations;
  bzero(v144, 8 * NumOperations);
  v13 = 0;
  v145 = v146;
  v141 = 0u;
  v142 = 0u;
  v143 = 1065353216;
  if (NumOperations <= 1)
    v14 = 1;
  else
    v14 = NumOperations;
  *(_OWORD *)v138 = 0uLL;
  *(_OWORD *)v139 = 0uLL;
  v140 = 1065353216;
  do
  {
    MIL::Builder::BlockBuilder::GetOperation(v161);
    Operator = MIL::Builder::OperationBuilder::GetOperator(v136);
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Operator + 16))(Operator);
    Espresso::AOT::GetOperatorType(v16, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__p.__r_.__value_.__l.__size_ != 4)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        v25 = v137;
        if (!v137)
          goto LABEL_18;
        goto LABEL_127;
      }
      v18 = *(_DWORD *)__p.__r_.__value_.__l.__data_;
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v18 == 1953718627)
      {
LABEL_25:
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 1;
        LOWORD(__p.__r_.__value_.__l.__data_) = 120;
        ArgumentForParameter = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v20 = MIL::Builder::Variable::GetName(ArgumentForParameter);
        Output = MIL::Builder::OperationBuilder::GetOutput(v136);
        MIL::Builder::Variable::GetName((MIL::Builder::Variable *)Output);
        MIL::Builder::BlockBuilder::TryGetOperation();
        OperationsByInput = MIL::Builder::BlockBuilder::GetOperationsByInput();
        Type = MIL::Builder::Variable::TryGetType(ArgumentForParameter);
        if (Type
          && (v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Type + 24))(Type)) != 0
          && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 88))(v24) == 5)
        {
          if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v152, v20))
          {
            __p.__r_.__value_.__r.__words[0] = v13;
            *((_QWORD *)v144 + *((_QWORD *)&v142 + 1)) = v13;
            LODWORD(v17) = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&v141, (unint64_t *)&__p, &__p);
            goto LABEL_122;
          }
          LODWORD(v17) = (_DWORD)v133;
          if (!v133)
            goto LABEL_122;
          v31 = MIL::Builder::OperationBuilder::GetOperator(v133);
          v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
          Espresso::AOT::GetOperatorType(v32, &__p);
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 23)
              goto LABEL_122;
            v33 = __p.__r_.__value_.__r.__words[0] == 0x625F726F736E6574
               && __p.__r_.__value_.__l.__size_ == 0x6F745F7265666675;
            if (!v33
              || *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) != 0x726F736E65745F6FLL)
            {
              goto LABEL_122;
            }
LABEL_109:
            *((_BYTE *)&__p.__r_.__value_.__s + 23) = 5;
            strcpy((char *)&__p, "input");
            v61 = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            v62 = MIL::Builder::Variable::GetName(v61);
            v17 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v152, v62);
            if (v17)
            {
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v133;
              v63 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder> const&>,std::tuple<>>((uint64_t)&v158, (uint64_t *)&v133, (uint64_t)&std::piecewise_construct, &__p);
              v64 = v144;
              __p.__r_.__value_.__r.__words[0] = v63[4];
              *((_QWORD *)v144 + *((_QWORD *)&v142 + 1)) = __p.__r_.__value_.__r.__words[0];
              std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&v141, (unint64_t *)&__p, &__p);
              __p.__r_.__value_.__r.__words[0] = v13;
              v64[*((_QWORD *)&v142 + 1)] = v13;
              LODWORD(v17) = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&v141, (unint64_t *)&__p, &__p);
            }
            goto LABEL_122;
          }
          if (__p.__r_.__value_.__l.__size_ != 23)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            goto LABEL_122;
          }
          v60 = *(_QWORD *)__p.__r_.__value_.__l.__data_ != 0x625F726F736E6574
             || *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8) != 0x6F745F7265666675
             || *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 15) != 0x726F736E65745F6FLL;
          operator delete(__p.__r_.__value_.__l.__data_);
          if (!v60)
            goto LABEL_109;
        }
        else
        {
          v17 = (_QWORD *)MIL::Builder::Variable::TryGetType((MIL::Builder::Variable *)Output);
          if (!v17)
            goto LABEL_122;
          v17 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v17 + 24))(v17);
          if (!v17)
            goto LABEL_122;
          LODWORD(v17) = (*(uint64_t (**)(_QWORD *))(*v17 + 88))(v17);
          if ((_DWORD)v17 != 5)
            goto LABEL_122;
          if (*((_QWORD *)&v147 + 1))
          {
            v26 = 0x9DDFEA08EB382D69 * (((8 * Output) + 8) ^ HIDWORD(Output));
            v27 = 0x9DDFEA08EB382D69 * (HIDWORD(Output) ^ (v26 >> 47) ^ v26);
            v28 = 0x9DDFEA08EB382D69 * (v27 ^ (v27 >> 47));
            v29 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v147 + 8));
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              v30 = v28;
              if (v28 >= *((_QWORD *)&v147 + 1))
                v30 = v28 % *((_QWORD *)&v147 + 1);
            }
            else
            {
              v30 = (*((_QWORD *)&v147 + 1) - 1) & v28;
            }
            v35 = *(_QWORD **)(v147 + 8 * v30);
            if (v35)
            {
              v36 = (_QWORD *)*v35;
              if (v36)
              {
                if (v29.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v38 = v36[1];
                    if (v28 == v38)
                    {
                      if (v36[2] == Output)
                        goto LABEL_119;
                    }
                    else if ((v38 & (*((_QWORD *)&v147 + 1) - 1)) != v30)
                    {
                      goto LABEL_69;
                    }
                    v36 = (_QWORD *)*v36;
                    if (!v36)
                      goto LABEL_69;
                  }
                }
                do
                {
                  v37 = v36[1];
                  if (v28 == v37)
                  {
                    if (v36[2] == Output)
                    {
LABEL_119:
                      if (!*(_QWORD *)(OperationsByInput + 24))
                      {
                        __p.__r_.__value_.__r.__words[0] = v13;
                        *((_QWORD *)v144 + NumOperations + ~(uint64_t)v139[1]) = v13;
                        LODWORD(v17) = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v138, (unint64_t *)&__p, &__p);
                      }
                      goto LABEL_122;
                    }
                  }
                  else
                  {
                    if (v37 >= *((_QWORD *)&v147 + 1))
                      v37 %= *((_QWORD *)&v147 + 1);
                    if (v37 != v30)
                      break;
                  }
                  v36 = (_QWORD *)*v36;
                }
                while (v36);
              }
            }
          }
LABEL_69:
          if (*(_QWORD *)(OperationsByInput + 24) == 1)
          {
            v39 = *(_QWORD *)(OperationsByInput + 16);
            v40 = *(MIL::Builder::OperationBuilder **)(v39 + 16);
            v41 = *(std::__shared_weak_count **)(v39 + 24);
            v131 = v40;
            v132 = v41;
            if (v41)
            {
              v42 = (unint64_t *)&v41->__shared_owners_;
              do
                v43 = __ldxr(v42);
              while (__stxr(v43 + 1, v42));
            }
            v44 = MIL::Builder::OperationBuilder::GetOperator(v40);
            v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 16))(v44);
            Espresso::AOT::GetOperatorType(v45, &__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              if (__p.__r_.__value_.__l.__size_ != 23)
              {
                operator delete(__p.__r_.__value_.__l.__data_);
                goto LABEL_114;
              }
              v51 = *(_QWORD *)__p.__r_.__value_.__l.__data_ != 0x745F726F736E6574
                 || *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8) != 0x726F736E65745F6FLL
                 || *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 15) != 0x7265666675625F72;
              operator delete(__p.__r_.__value_.__l.__data_);
              if (v51)
                goto LABEL_114;
            }
            else
            {
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 23)
                goto LABEL_114;
              v47 = __p.__r_.__value_.__r.__words[0] == 0x745F726F736E6574
                 && __p.__r_.__value_.__l.__size_ == 0x726F736E65745F6FLL;
              if (!v47
                || *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) != 0x7265666675625F72)
              {
                goto LABEL_114;
              }
            }
            v52 = MIL::Builder::OperationBuilder::GetOutput(v131);
            v17 = (_QWORD *)MIL::Builder::Variable::GetName((MIL::Builder::Variable *)v52);
            v46 = v17;
            if (*((_QWORD *)&v147 + 1))
            {
              v53 = 0x9DDFEA08EB382D69 * (((8 * v52) + 8) ^ HIDWORD(v52));
              v54 = 0x9DDFEA08EB382D69 * (HIDWORD(v52) ^ (v53 >> 47) ^ v53);
              v55 = 0x9DDFEA08EB382D69 * (v54 ^ (v54 >> 47));
              v56 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v147 + 8));
              v56.i16[0] = vaddlv_u8(v56);
              if (v56.u32[0] > 1uLL)
              {
                v57 = v55;
                if (v55 >= *((_QWORD *)&v147 + 1))
                  v57 = v55 % *((_QWORD *)&v147 + 1);
              }
              else
              {
                v57 = (*((_QWORD *)&v147 + 1) - 1) & v55;
              }
              v73 = *(_QWORD **)(v147 + 8 * v57);
              if (v73)
              {
                v74 = (_QWORD *)*v73;
                if (v74)
                {
                  if (v56.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v76 = v74[1];
                      if (v55 == v76)
                      {
                        if (v74[2] == v52)
                          goto LABEL_151;
                      }
                      else if ((v76 & (*((_QWORD *)&v147 + 1) - 1)) != v57)
                      {
                        goto LABEL_114;
                      }
                      v74 = (_QWORD *)*v74;
                      if (!v74)
                        goto LABEL_114;
                    }
                  }
                  do
                  {
                    v75 = v74[1];
                    if (v55 == v75)
                    {
                      if (v74[2] == v52)
                      {
LABEL_151:
                        v17 = (_QWORD *)MIL::Builder::BlockBuilder::GetOperationsByInput();
                        if (!v17[3])
                        {
                          __p.__r_.__value_.__r.__words[0] = v13;
                          v77 = v144;
                          *((_QWORD *)v144 + NumOperations + ~(uint64_t)v139[1]) = v13;
                          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v138, (unint64_t *)&__p, &__p);
                          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
                          __p.__r_.__value_.__r.__words[0] = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder> const&>,std::tuple<>>((uint64_t)&v158, (uint64_t *)&v131, (uint64_t)&std::piecewise_construct, &__p)[4];
                          v77[NumOperations + ~(uint64_t)v139[1]] = __p.__r_.__value_.__r.__words[0];
                          LODWORD(v17) = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v138, (unint64_t *)&__p, &__p);
                        }
                        break;
                      }
                    }
                    else
                    {
                      if (v75 >= *((_QWORD *)&v147 + 1))
                        v75 %= *((_QWORD *)&v147 + 1);
                      if (v75 != v57)
                        break;
                    }
                    v74 = (_QWORD *)*v74;
                  }
                  while (v74);
                }
              }
            }
LABEL_114:
            v65 = v132;
            if (v132)
            {
              v66 = (unint64_t *)&v132->__shared_owners_;
              do
                v67 = __ldaxr(v66);
              while (__stlxr(v67 - 1, v66));
              if (!v67)
              {
                ((void (*)(std::__shared_weak_count *, _QWORD *))v65->__on_zero_shared)(v65, v46);
                std::__shared_weak_count::__release_weak(v65);
              }
            }
          }
        }
LABEL_122:
        v68 = v134;
        if (v134)
        {
          v69 = (unint64_t *)&v134->__shared_owners_;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
            v25 = v137;
            if (!v137)
              goto LABEL_18;
            goto LABEL_127;
          }
        }
      }
    }
    else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) == 4 && LODWORD(__p.__r_.__value_.__l.__data_) == 1953718627)
    {
      goto LABEL_25;
    }
    v25 = v137;
    if (!v137)
      goto LABEL_18;
LABEL_127:
    v71 = (unint64_t *)&v25->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
LABEL_18:
    ++v13;
  }
  while (v13 != v14);
  v78 = *((_QWORD *)&v142 + 1);
  if (*((_QWORD *)&v142 + 1) | (uint64_t)v139[1])
  {
    v79 = (_QWORD *)v142;
    if ((_QWORD)v142)
    {
      while (v79[2] < *((_QWORD *)&v142 + 1))
      {
        v79 = (_QWORD *)*v79;
        if (!v79)
          goto LABEL_157;
      }
LABEL_161:
      if ((uint64_t)v139[1] >= 2)
      {
        v81 = v145 - 8;
        v82 = (unint64_t)&v145[-8 * (uint64_t)v139[1] + 8];
        do
        {
          v83 = *(_QWORD *)(v82 - 8);
          *(_QWORD *)(v82 - 8) = *(_QWORD *)v81;
          *(_QWORD *)v81 = v83;
          v81 -= 8;
          v84 = v82 >= (unint64_t)v81;
          v82 += 8;
        }
        while (!v84);
      }
      v85 = 0;
      v86 = v138[0];
      v87 = v141;
      v88 = v144;
      do
      {
        if (v138[1])
        {
          v89 = (uint8x8_t)vcnt_s8((int8x8_t)v138[1]);
          v89.i16[0] = vaddlv_u8(v89);
          if (v89.u32[0] > 1uLL)
          {
            v90 = v85;
            if ((void *)v85 >= v138[1])
              v90 = v85 % (unint64_t)v138[1];
          }
          else
          {
            v90 = ((unint64_t)v138[1] - 1) & v85;
          }
          v91 = (_QWORD *)v86[v90];
          if (v91)
          {
            v92 = (_QWORD *)*v91;
            if (v92)
            {
              if (v89.u32[0] < 2uLL)
              {
                while (1)
                {
                  v94 = v92[1];
                  if (v94 == v85)
                  {
                    if (v92[2] == v85)
                      goto LABEL_167;
                  }
                  else if ((v94 & ((unint64_t)v138[1] - 1)) != v90)
                  {
                    goto LABEL_188;
                  }
                  v92 = (_QWORD *)*v92;
                  if (!v92)
                    goto LABEL_188;
                }
              }
              do
              {
                v93 = v92[1];
                if (v93 == v85)
                {
                  if (v92[2] == v85)
                    goto LABEL_167;
                }
                else
                {
                  if ((void *)v93 >= v138[1])
                    v93 %= (unint64_t)v138[1];
                  if (v93 != v90)
                    break;
                }
                v92 = (_QWORD *)*v92;
              }
              while (v92);
            }
          }
        }
LABEL_188:
        if (*((_QWORD *)&v141 + 1))
        {
          v95 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v141 + 8));
          v95.i16[0] = vaddlv_u8(v95);
          if (v95.u32[0] > 1uLL)
          {
            v96 = v85;
            if (v85 >= *((_QWORD *)&v141 + 1))
              v96 = v85 % *((_QWORD *)&v141 + 1);
          }
          else
          {
            v96 = (*((_QWORD *)&v141 + 1) - 1) & v85;
          }
          v97 = *(_QWORD **)(v87 + 8 * v96);
          if (v97)
          {
            v98 = (_QWORD *)*v97;
            if (v98)
            {
              if (v95.u32[0] < 2uLL)
              {
                while (1)
                {
                  v100 = v98[1];
                  if (v100 == v85)
                  {
                    if (v98[2] == v85)
                      goto LABEL_167;
                  }
                  else if ((v100 & (*((_QWORD *)&v141 + 1) - 1)) != v96)
                  {
                    goto LABEL_166;
                  }
                  v98 = (_QWORD *)*v98;
                  if (!v98)
                    goto LABEL_166;
                }
              }
              do
              {
                v99 = v98[1];
                if (v99 == v85)
                {
                  if (v98[2] == v85)
                    goto LABEL_167;
                }
                else
                {
                  if (v99 >= *((_QWORD *)&v141 + 1))
                    v99 %= *((_QWORD *)&v141 + 1);
                  if (v99 != v96)
                    break;
                }
                v98 = (_QWORD *)*v98;
              }
              while (v98);
            }
          }
        }
LABEL_166:
        v88[v78++] = v85;
LABEL_167:
        ++v85;
      }
      while (v85 != v14);
      v101 = *(std::__shared_weak_count **)(v130 + 8);
      if (v101)
      {
        v102 = (unint64_t *)&v101->__shared_owners_;
        do
          v103 = __ldxr(v102);
        while (__stxr(v103 + 1, v102));
      }
      Espresso::AOT::ReorderOps((int)v17, v161, (unint64_t **)&v144);
      if (v101)
      {
        v104 = (unint64_t *)&v101->__shared_owners_;
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
          std::__shared_weak_count::__release_weak(v101);
        }
      }
    }
    else
    {
LABEL_157:
      v80 = v139[0];
      if (v139[0])
      {
        while (v80[2] >= NumOperations - (unint64_t)v139[1])
        {
          v80 = (_QWORD *)*v80;
          if (!v80)
            goto LABEL_217;
        }
        goto LABEL_161;
      }
    }
  }
LABEL_217:
  v106 = v139[0];
  if (v139[0])
  {
    do
    {
      v107 = (_QWORD *)*v106;
      operator delete(v106);
      v106 = v107;
    }
    while (v107);
  }
  v108 = v138[0];
  v138[0] = 0;
  if (v108)
    operator delete(v108);
  v109 = (_QWORD *)v142;
  if ((_QWORD)v142)
  {
    do
    {
      v110 = (_QWORD *)*v109;
      operator delete(v109);
      v109 = v110;
    }
    while (v110);
  }
  v111 = (void *)v141;
  *(_QWORD *)&v141 = 0;
  if (v111)
    operator delete(v111);
  if (v144)
    operator delete(v144);
  v112 = (_QWORD *)v148;
  if ((_QWORD)v148)
  {
    do
    {
      v113 = (_QWORD *)*v112;
      operator delete(v112);
      v112 = v113;
    }
    while (v113);
  }
  v114 = (void *)v147;
  *(_QWORD *)&v147 = 0;
  if (v114)
    operator delete(v114);
  if (v150)
  {
    v151 = (uint64_t *)v150;
    operator delete(v150);
  }
  v115 = (void **)v153;
  if ((_QWORD)v153)
  {
    do
    {
      v125 = (void **)*v115;
      if (*((char *)v115 + 39) < 0)
        operator delete(v115[2]);
      operator delete(v115);
      v115 = v125;
    }
    while (v125);
  }
  v116 = (void *)v152;
  *(_QWORD *)&v152 = 0;
  if (v116)
    operator delete(v116);
  v117 = v157;
  if (v157)
  {
    do
    {
      v118 = (_QWORD *)*v117;
      operator delete(v117);
      v117 = v118;
    }
    while (v118);
  }
  v119 = v155;
  v155 = 0;
  if (v119)
    operator delete(v119);
  v120 = (_QWORD *)v159;
  while (v120)
  {
    v126 = v120;
    v120 = (_QWORD *)*v120;
    v127 = (std::__shared_weak_count *)v126[3];
    if (v127)
    {
      v128 = (unint64_t *)&v127->__shared_owners_;
      do
        v129 = __ldaxr(v128);
      while (__stlxr(v129 - 1, v128));
      if (!v129)
      {
        ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
        std::__shared_weak_count::__release_weak(v127);
      }
    }
    operator delete(v126);
  }
  v121 = (void *)v158;
  *(_QWORD *)&v158 = 0;
  if (v121)
    operator delete(v121);
LABEL_243:
  v122 = v162;
  if (v162)
  {
    v123 = (unint64_t *)&v162->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
}

void sub_1910B5820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44)
{
  uint64_t v44;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a24);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a30);
  if (__p)
    operator delete(__p);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a38);
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v44 - 240);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v44 - 200);
  std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::~unordered_set[abi:ne180100](v44 - 160);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v44 - 120);
  _Unwind_Resume(a1);
}

void Espresso::AOT::CoalesceOpsWithConsumers(int a1, MIL::Builder::FunctionBuilder *this, uint64_t a3)
{
  _QWORD *i;
  uint64_t Name;
  uint64_t NumOperations;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  MIL::Builder::Variable *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint8x8_t v20;
  unint64_t v21;
  uint64_t ***v22;
  uint64_t **v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t Operator;
  uint64_t v28;
  _BOOL4 v31;
  MIL::Builder::Variable *ArgumentForParameter;
  std::string::size_type size;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint8x8_t v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  void *v49;
  char *v50;
  int64_t v51;
  int64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _BYTE *v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  _OWORD *v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint8x8_t v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  int64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  char *v104;
  char *v105;
  BOOL v106;
  unint64_t *v107;
  unint64_t v108;
  char *v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  MIL::Builder::OperationBuilder *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  _QWORD *v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  _QWORD *v130;
  char *v131;
  char *v132;
  void *v133;
  void *v134;
  unint64_t v135;
  _QWORD *v136;
  unint64_t v137;
  _QWORD *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  _QWORD *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  void *v146;
  char *v147;
  char *v148;
  void *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  _QWORD *v153;
  void *v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  _QWORD *v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  char *v162;
  uint64_t v163;
  std::string::size_type v164;
  std::string::size_type v165;
  void *v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  _QWORD *v170;
  _QWORD *v171;
  void *v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  unsigned __int8 **v176;
  unsigned __int8 **v177;
  std::__shared_weak_count *v178;
  std::__shared_weak_count *v179;
  char v180;
  unsigned __int8 *v181;
  unsigned __int8 *v182;
  uint64_t shared_weak_owners_high;
  uint64_t shared_owners;
  uint64_t v185;
  std::__shared_weak_count *v186;
  std::__shared_weak_count *v187;
  void *v188;
  _QWORD *v189;
  void *v190;
  unsigned __int8 **v191;
  unsigned __int8 **v192;
  unsigned __int8 **v193;
  _QWORD *v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  void **v201;
  void *v202;
  _QWORD *v203;
  _QWORD *v204;
  void *v205;
  void **v206;
  std::runtime_error *exception;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  unint64_t v212;
  MIL::Builder::Variable *v213;
  uint64_t *v214;
  uint64_t v215;
  void *v216[2];
  __int128 v217;
  int v218;
  void *v219;
  char *v220;
  _QWORD *v221;
  MIL::Builder::OperationBuilder *v222;
  std::__shared_weak_count *v223;
  void *v224;
  char *v225;
  char *v226;
  std::string __p;
  MIL::Builder::OperationBuilder *v228;
  std::__shared_weak_count *v229;
  void *v230;
  std::__shared_weak_count *v231;
  void *v232;
  MIL::Builder::OperationBuilder *v233;
  std::__shared_weak_count *v234;
  void *v235[2];
  void *v236[2];
  int v237;
  unsigned __int8 **v238;
  unsigned __int8 **v239;
  MIL::Builder::BlockBuilder *v240;
  std::__shared_weak_count *v241;
  __int128 v242;
  __int128 v243;
  int v244;
  void *v245;
  _QWORD *v246;
  uint64_t v247;
  std::__shared_weak_count *v248;
  uint64_t *v249;

  MIL::Builder::FunctionBuilder::GetInputs(this);
  v242 = 0u;
  v243 = 0u;
  v244 = 1065353216;
  for (i = v246; i; i = (_QWORD *)*i)
  {
    Name = MIL::Builder::Variable::GetName((MIL::Builder::Variable *)i[2]);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v242, Name, Name);
  }
  MIL::Builder::FunctionBuilder::SelectedSpecialization(this);
  MIL::Builder::FunctionBuilder::GetBlock();
  MIL::Builder::BlockBuilder::GetOutputNames(v240);
  NumOperations = MIL::Builder::BlockBuilder::GetNumOperations(v240);
  if (!NumOperations)
    goto LABEL_330;
  v215 = NumOperations;
  v8 = 0;
  *(_OWORD *)v235 = 0u;
  *(_OWORD *)v236 = 0u;
  v237 = 1065353216;
  do
  {
    MIL::Builder::BlockBuilder::GetOperation(v240);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v230;
    std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder> const&>,std::tuple<>>((uint64_t)v235, (uint64_t *)&v230, (uint64_t)&std::piecewise_construct, &__p)[4] = v8;
    v9 = v231;
    if (v231)
    {
      p_shared_owners = (unint64_t *)&v231->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    ++v8;
  }
  while (v8 != v215);
  v12 = v215;
  v208 = a3;
  if (!a3)
    goto LABEL_293;
  v13 = 0;
  while (2)
  {
    v209 = v13;
    v14 = 0;
    while (2)
    {
      MIL::Builder::BlockBuilder::GetOperation(v240);
      v210 = v14;
      MIL::Builder::OperationBuilder::GetInputArguments(v233);
      v15 = (MIL::Builder::Variable *)v232;
      if (!v232)
        goto LABEL_285;
      while (2)
      {
        v16 = MIL::Builder::Variable::TryGetName(*((MIL::Builder::Variable **)v15 + 2));
        if (!v16
          || std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v242, v16))
        {
          goto LABEL_18;
        }
        MIL::Builder::BlockBuilder::GetOperation();
        if (!v235[1])
          goto LABEL_361;
        v17 = 0x9DDFEA08EB382D69 * (((8 * (_DWORD)v228) + 8) ^ ((unint64_t)v228 >> 32));
        v18 = 0x9DDFEA08EB382D69 * (((unint64_t)v228 >> 32) ^ (v17 >> 47) ^ v17);
        v19 = 0x9DDFEA08EB382D69 * (v18 ^ (v18 >> 47));
        v20 = (uint8x8_t)vcnt_s8((int8x8_t)v235[1]);
        v20.i16[0] = vaddlv_u8(v20);
        if (v20.u32[0] > 1uLL)
        {
          v21 = v19;
          if ((void *)v19 >= v235[1])
            v21 = v19 % (unint64_t)v235[1];
        }
        else
        {
          v21 = v19 & ((unint64_t)v235[1] - 1);
        }
        v22 = (uint64_t ***)*((_QWORD *)v235[0] + v21);
        if (!v22 || (v23 = *v22) == 0)
LABEL_361:
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        v213 = v15;
        if (v20.u32[0] < 2uLL)
        {
          while (1)
          {
            v25 = v23[1];
            if (v25 == (uint64_t *)v19)
            {
              if (v23[2] == (uint64_t *)v228)
                goto LABEL_41;
            }
            else if (((unint64_t)v25 & ((unint64_t)v235[1] - 1)) != v21)
            {
              goto LABEL_361;
            }
            v23 = (uint64_t **)*v23;
            if (!v23)
              goto LABEL_361;
          }
        }
        while (1)
        {
          v24 = (unint64_t)v23[1];
          if (v24 == v19)
            break;
          if ((void *)v24 >= v235[1])
            v24 %= (unint64_t)v235[1];
          if (v24 != v21)
            goto LABEL_361;
LABEL_31:
          v23 = (uint64_t **)*v23;
          if (!v23)
            goto LABEL_361;
        }
        if (v23[2] != (uint64_t *)v228)
          goto LABEL_31;
LABEL_41:
        v26 = v23[4];
        Operator = MIL::Builder::OperationBuilder::GetOperator(v228);
        v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Operator + 16))(Operator);
        Espresso::AOT::GetOperatorType(v28, &__p);
        v214 = v26;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          if (__p.__r_.__value_.__l.__size_ != 10)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            goto LABEL_113;
          }
          v31 = *(_QWORD *)__p.__r_.__value_.__l.__data_ != 0x6174735F64616572
             || *(_WORD *)(__p.__r_.__value_.__r.__words[0] + 8) != 25972;
          operator delete(__p.__r_.__value_.__l.__data_);
          if (!v31)
            goto LABEL_57;
LABEL_113:
          v211 = 0;
          v212 = v12;
        }
        else
        {
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 10)
            goto LABEL_113;
          if (__p.__r_.__value_.__r.__words[0] != 0x6174735F64616572
            || LOWORD(__p.__r_.__value_.__r.__words[1]) != 25972)
          {
            goto LABEL_113;
          }
LABEL_57:
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 5;
          strcpy((char *)&__p, "input");
          ArgumentForParameter = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          MIL::Builder::Variable::GetName(ArgumentForParameter);
          MIL::Builder::BlockBuilder::GetStateOperationsByInput();
          v216[0] = 0;
          v216[1] = 0;
          *(_QWORD *)&v217 = 0;
          size = __p.__r_.__value_.__l.__size_;
          v34 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
          if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
          {
LABEL_62:
            v35 = *v34;
            v36 = (std::__shared_weak_count *)v34[1];
            if (v36)
            {
              v37 = (unint64_t *)&v36->__shared_owners_;
              do
                v38 = __ldxr(v37);
              while (__stxr(v38 + 1, v37));
            }
            if (!v235[1])
              goto LABEL_360;
            v39 = 0x9DDFEA08EB382D69 * (((8 * v35) + 8) ^ HIDWORD(v35));
            v40 = 0x9DDFEA08EB382D69 * (HIDWORD(v35) ^ (v39 >> 47) ^ v39);
            v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v40 >> 47));
            v42 = (uint8x8_t)vcnt_s8((int8x8_t)v235[1]);
            v42.i16[0] = vaddlv_u8(v42);
            if (v42.u32[0] > 1uLL)
            {
              v43 = v41;
              if ((void *)v41 >= v235[1])
                v43 = v41 % (unint64_t)v235[1];
            }
            else
            {
              v43 = ((unint64_t)v235[1] - 1) & v41;
            }
            v44 = (_QWORD *)*((_QWORD *)v235[0] + v43);
            if (!v44 || (v45 = (_QWORD *)*v44) == 0)
LABEL_360:
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            if (v42.u32[0] < 2uLL)
            {
              while (1)
              {
                v47 = v45[1];
                if (v47 == v41)
                {
                  if (v45[2] == v35)
                    goto LABEL_85;
                }
                else if ((v47 & ((uint64_t)v235[1] - 1)) != v43)
                {
                  goto LABEL_360;
                }
                v45 = (_QWORD *)*v45;
                if (!v45)
                  goto LABEL_360;
              }
            }
            while (1)
            {
              v46 = v45[1];
              if (v46 == v41)
              {
                if (v45[2] == v35)
                {
LABEL_85:
                  v48 = (char *)v216[1];
                  if (v216[1] < (void *)v217)
                  {
                    *(_QWORD *)v216[1] = v45[4];
                    v49 = v48 + 8;
                    goto LABEL_104;
                  }
                  v50 = (char *)v216[0];
                  v51 = (char *)v216[1] - (char *)v216[0];
                  v52 = ((char *)v216[1] - (char *)v216[0]) >> 3;
                  v53 = v52 + 1;
                  if ((unint64_t)(v52 + 1) >> 61)
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  v54 = v217 - (unint64_t)v216[0];
                  if ((uint64_t)(v217 - (unint64_t)v216[0]) >> 2 > v53)
                    v53 = v54 >> 2;
                  if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
                    v55 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v55 = v53;
                  if (!v55)
                  {
                    v56 = 0;
                    v57 = (_QWORD *)(8 * v52);
                    *(_QWORD *)(8 * v52) = v45[4];
                    v49 = (void *)(8 * v52 + 8);
                    if (v48 != v50)
                      goto LABEL_96;
LABEL_110:
                    v12 = v215;
                    v216[0] = v57;
                    v216[1] = v49;
                    *(_QWORD *)&v217 = &v56[8 * v55];
                    if (!v50)
                      goto LABEL_104;
                    goto LABEL_103;
                  }
                  if (v55 >> 61)
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  v56 = operator new(8 * v55);
                  v57 = &v56[8 * v52];
                  *v57 = v45[4];
                  v49 = v57 + 1;
                  if (v48 == v50)
                    goto LABEL_110;
LABEL_96:
                  v58 = v48 - 8 - v50;
                  v12 = v215;
                  if (v58 < 0x58)
                    goto LABEL_369;
                  if ((unint64_t)(v48 - &v56[v51]) < 0x20)
                    goto LABEL_369;
                  v59 = (v58 >> 3) + 1;
                  v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
                  v61 = &v48[-v60];
                  v57 = (_QWORD *)((char *)v57 - v60);
                  v62 = &v56[v51 - 16];
                  v63 = v48 - 16;
                  v64 = v59 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v65 = *(_OWORD *)v63;
                    *(v62 - 1) = *((_OWORD *)v63 - 1);
                    *v62 = v65;
                    v62 -= 2;
                    v63 -= 32;
                    v64 -= 4;
                  }
                  while (v64);
                  v48 = v61;
                  if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_369:
                    do
                    {
                      v66 = *((_QWORD *)v48 - 1);
                      v48 -= 8;
                      *--v57 = v66;
                    }
                    while (v48 != v50);
                  }
                  v216[0] = v57;
                  v216[1] = v49;
                  *(_QWORD *)&v217 = &v56[8 * v55];
                  if (v50)
LABEL_103:
                    operator delete(v50);
LABEL_104:
                  v216[1] = v49;
                  if (v36)
                  {
                    v67 = (unint64_t *)&v36->__shared_owners_;
                    do
                      v68 = __ldaxr(v67);
                    while (__stlxr(v68 - 1, v67));
                    if (!v68)
                    {
                      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                      std::__shared_weak_count::__release_weak(v36);
                    }
                  }
                  v34 += 2;
                  if (v34 == (unint64_t *)size)
                    break;
                  goto LABEL_62;
                }
              }
              else
              {
                if ((void *)v46 >= v235[1])
                  v46 %= (unint64_t)v235[1];
                if (v46 != v43)
                  goto LABEL_360;
              }
              v45 = (_QWORD *)*v45;
              if (!v45)
                goto LABEL_360;
            }
          }
          std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
          v162 = (char *)v216[0];
          if (v216[0] != v216[1])
          {
            while (*(uint64_t **)v162 != v214)
            {
              v162 += 8;
              if (v162 == v216[1])
              {
                v162 = (char *)v216[1];
                break;
              }
            }
          }
          v163 = v162 - (char *)v216[0];
          if ((((char *)v216[1] - (char *)v216[0]) >> 3) - 1 > (unint64_t)(v163 >> 3))
          {
            v212 = *(_QWORD *)((char *)v216[0] + v163 + 8);
            goto LABEL_270;
          }
          v212 = v12;
          if (v216[0])
          {
LABEL_270:
            v216[1] = v216[0];
            operator delete(v216[0]);
          }
          v164 = __p.__r_.__value_.__r.__words[0];
          if (__p.__r_.__value_.__r.__words[0])
          {
            v165 = __p.__r_.__value_.__l.__size_;
            v166 = (void *)__p.__r_.__value_.__r.__words[0];
            if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
            {
              do
              {
                v167 = *(std::__shared_weak_count **)(v165 - 8);
                if (v167)
                {
                  v168 = (unint64_t *)&v167->__shared_owners_;
                  do
                    v169 = __ldaxr(v168);
                  while (__stlxr(v169 - 1, v168));
                  if (!v169)
                  {
                    ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                    std::__shared_weak_count::__release_weak(v167);
                  }
                }
                v165 -= 16;
              }
              while (v165 != v164);
              v166 = (void *)__p.__r_.__value_.__r.__words[0];
            }
            __p.__r_.__value_.__l.__size_ = v164;
            operator delete(v166);
          }
          v211 = 1;
        }
        MIL::Builder::OperationBuilder::GetChildOperations(v228);
        v224 = 0;
        v225 = 0;
        v226 = 0;
        v69 = (_QWORD *)__p.__r_.__value_.__r.__words[2];
        while (2)
        {
          v70 = v69[2];
          v71 = (std::__shared_weak_count *)v69[3];
          if (v71)
          {
            v72 = (unint64_t *)&v71->__shared_owners_;
            do
              v73 = __ldxr(v72);
            while (__stxr(v73 + 1, v72));
          }
          if (!v235[1])
            goto LABEL_292;
          v74 = 0x9DDFEA08EB382D69 * (((8 * v70) + 8) ^ HIDWORD(v70));
          v75 = 0x9DDFEA08EB382D69 * (HIDWORD(v70) ^ (v74 >> 47) ^ v74);
          v76 = 0x9DDFEA08EB382D69 * (v75 ^ (v75 >> 47));
          v77 = (uint8x8_t)vcnt_s8((int8x8_t)v235[1]);
          v77.i16[0] = vaddlv_u8(v77);
          if (v77.u32[0] > 1uLL)
          {
            v78 = v76;
            if ((void *)v76 >= v235[1])
              v78 = v76 % (unint64_t)v235[1];
          }
          else
          {
            v78 = ((unint64_t)v235[1] - 1) & v76;
          }
          v79 = (_QWORD *)*((_QWORD *)v235[0] + v78);
          if (!v79 || (v80 = (_QWORD *)*v79) == 0)
LABEL_292:
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          if (v77.u32[0] < 2uLL)
          {
            while (1)
            {
              v82 = v80[1];
              if (v82 == v76)
              {
                if (v80[2] == v70)
                  goto LABEL_139;
              }
              else if ((v82 & ((uint64_t)v235[1] - 1)) != v78)
              {
                goto LABEL_292;
              }
              v80 = (_QWORD *)*v80;
              if (!v80)
                goto LABEL_292;
            }
          }
          while (2)
          {
            v81 = v80[1];
            if (v81 != v76)
            {
              if ((void *)v81 >= v235[1])
                v81 %= (unint64_t)v235[1];
              if (v81 != v78)
                goto LABEL_292;
              goto LABEL_129;
            }
            if (v80[2] != v70)
            {
LABEL_129:
              v80 = (_QWORD *)*v80;
              if (!v80)
                goto LABEL_292;
              continue;
            }
            break;
          }
LABEL_139:
          v83 = v225;
          if (v225 < v226)
          {
            *(_QWORD *)v225 = v80[4];
            v84 = (uint64_t)(v83 + 8);
            goto LABEL_160;
          }
          v85 = (char *)v224;
          v86 = v225 - (_BYTE *)v224;
          v87 = (v225 - (_BYTE *)v224) >> 3;
          v88 = v87 + 1;
          if ((unint64_t)(v87 + 1) >> 61)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v89 = v226 - (_BYTE *)v224;
          if ((v226 - (_BYTE *)v224) >> 2 > v88)
            v88 = v89 >> 2;
          if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF8)
            v90 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v90 = v88;
          if (v90)
          {
            if (v90 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v91 = (char *)operator new(8 * v90);
            v92 = &v91[8 * v87];
            *(_QWORD *)v92 = v80[4];
            v84 = (uint64_t)(v92 + 8);
            if (v83 == v85)
              goto LABEL_158;
LABEL_152:
            v93 = v83 - 8 - v85;
            if (v93 < 0x58)
              goto LABEL_370;
            if ((unint64_t)(v83 - &v91[v86]) < 0x20)
              goto LABEL_370;
            v94 = (v93 >> 3) + 1;
            v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
            v96 = &v83[-v95];
            v92 -= v95;
            v97 = &v91[v86 - 16];
            v98 = v83 - 16;
            v99 = v94 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v100 = *(_OWORD *)v98;
              *((_OWORD *)v97 - 1) = *((_OWORD *)v98 - 1);
              *(_OWORD *)v97 = v100;
              v97 -= 32;
              v98 -= 32;
              v99 -= 4;
            }
            while (v99);
            v83 = v96;
            if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_370:
              do
              {
                v101 = *((_QWORD *)v83 - 1);
                v83 -= 8;
                *((_QWORD *)v92 - 1) = v101;
                v92 -= 8;
              }
              while (v83 != v85);
            }
          }
          else
          {
            v91 = 0;
            v92 = (char *)(8 * v87);
            *(_QWORD *)(8 * v87) = v80[4];
            v84 = 8 * v87 + 8;
            if (v83 != v85)
              goto LABEL_152;
          }
LABEL_158:
          v224 = v92;
          v225 = (char *)v84;
          v226 = &v91[8 * v90];
          if (v85)
            operator delete(v85);
LABEL_160:
          v225 = (char *)v84;
          if (v71)
          {
            v102 = (unint64_t *)&v71->__shared_owners_;
            do
              v103 = __ldaxr(v102);
            while (__stlxr(v103 - 1, v102));
            if (!v103)
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
            }
          }
          v69 = (_QWORD *)*v69;
          if (v69)
            continue;
          break;
        }
        v104 = (char *)v224;
        v105 = (char *)v224 + 8;
        v106 = v224 == v225 || v105 == v225;
        v107 = (unint64_t *)v224;
        if (!v106)
        {
          v108 = *(_QWORD *)v224;
          v107 = (unint64_t *)v224;
          v109 = (char *)v224 + 8;
          do
          {
            v111 = *(_QWORD *)v109;
            v109 += 8;
            v110 = v111;
            if (v111 < v108)
            {
              v108 = v110;
              v107 = (unint64_t *)v105;
            }
            v105 = v109;
          }
          while (v109 != v225);
        }
        v112 = *v107;
        if (*v107 >= v212)
          v112 = v212;
        v12 = v215;
        if (v214 != (uint64_t *)(v112 - 1))
        {
          v222 = v228;
          v223 = v229;
          if (v229)
          {
            v113 = (unint64_t *)&v229->__shared_owners_;
            do
              v114 = __ldxr(v113);
            while (__stxr(v114 + 1, v113));
          }
          MIL::Builder::BlockBuilder::RemoveOperation();
          v115 = v223;
          if (!v223)
            goto LABEL_183;
          v116 = (unint64_t *)&v223->__shared_owners_;
          do
            v117 = __ldaxr(v116);
          while (__stlxr(v117 - 1, v116));
          if (!v117)
          {
            ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
            std::__shared_weak_count::__release_weak(v115);
            v118 = v228;
            v119 = v229;
            if (v229)
              goto LABEL_184;
          }
          else
          {
LABEL_183:
            v118 = v228;
            v119 = v229;
            if (v229)
            {
LABEL_184:
              v120 = (unint64_t *)&v119->__shared_owners_;
              do
                v121 = __ldxr(v120);
              while (__stxr(v121 + 1, v120));
            }
          }
          v219 = 0;
          v220 = 0;
          v221 = 0;
          v122 = operator new(0x10uLL);
          v219 = v122;
          v220 = (char *)v122;
          v221 = v122 + 2;
          *v122 = v118;
          v122[1] = v119;
          if (v119)
          {
            v123 = (unint64_t *)&v119->__shared_owners_;
            do
              v124 = __ldxr(v123);
            while (__stxr(v124 + 1, v123));
            v220 = (char *)(v122 + 2);
            do
              v125 = __ldaxr(v123);
            while (__stlxr(v125 - 1, v123));
            if (!v125)
            {
              ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
              std::__shared_weak_count::__release_weak(v119);
            }
          }
          else
          {
            v220 = (char *)(v122 + 2);
          }
          MIL::Builder::BlockBuilder::InsertOperations();
          v126 = 0;
          *(_OWORD *)v216 = 0u;
          v217 = 0u;
          v218 = 1065353216;
          do
          {
            MIL::Builder::BlockBuilder::GetOperation(v240);
            v249 = &v247;
            std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder> const&>,std::tuple<>>((uint64_t)v216, &v247, (uint64_t)&std::piecewise_construct, &v249)[4] = v126;
            v127 = v248;
            if (v248)
            {
              v128 = (unint64_t *)&v248->__shared_owners_;
              do
                v129 = __ldaxr(v128);
              while (__stlxr(v129 - 1, v128));
              if (!v129)
              {
                ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                std::__shared_weak_count::__release_weak(v127);
              }
            }
            ++v126;
          }
          while (v126 != v215);
          if (v236[1])
          {
            v130 = v236[0];
            if (v236[0])
            {
              do
              {
                v138 = v130;
                v130 = (_QWORD *)*v130;
                v139 = (std::__shared_weak_count *)v138[3];
                if (v139)
                {
                  v140 = (unint64_t *)&v139->__shared_owners_;
                  do
                    v141 = __ldaxr(v140);
                  while (__stlxr(v141 - 1, v140));
                  if (!v141)
                  {
                    ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                    std::__shared_weak_count::__release_weak(v139);
                  }
                }
                operator delete(v138);
              }
              while (v130);
            }
            v236[0] = 0;
            v131 = (char *)v235[1];
            if (v235[1])
            {
              v132 = 0;
              do
                *((_QWORD *)v235[0] + (_QWORD)v132++) = 0;
              while (v131 != v132);
            }
            v236[1] = 0;
          }
          v133 = v216[0];
          v216[0] = 0;
          v134 = v235[0];
          v235[0] = v133;
          if (v134)
            operator delete(v134);
          v135 = (unint64_t)v216[1];
          v136 = (_QWORD *)v217;
          v216[1] = 0;
          *(_OWORD *)v236 = v217;
          v237 = v218;
          v235[1] = (void *)v135;
          if (*((_QWORD *)&v217 + 1))
          {
            v137 = *(_QWORD *)(v217 + 8);
            if ((v135 & (v135 - 1)) != 0)
            {
              if (v137 >= v135)
                v137 %= v135;
            }
            else
            {
              v137 &= v135 - 1;
            }
            *((_QWORD *)v235[0] + v137) = v236;
            v217 = 0uLL;
          }
          else if ((_QWORD)v217)
          {
            do
            {
              v142 = v136;
              v136 = (_QWORD *)*v136;
              v143 = (std::__shared_weak_count *)v142[3];
              if (v143)
              {
                v144 = (unint64_t *)&v143->__shared_owners_;
                do
                  v145 = __ldaxr(v144);
                while (__stlxr(v145 - 1, v144));
                if (!v145)
                {
                  ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                  std::__shared_weak_count::__release_weak(v143);
                }
              }
              operator delete(v142);
            }
            while (v136);
          }
          v146 = v216[0];
          v216[0] = 0;
          if (v146)
            operator delete(v146);
          if (v211)
            MIL::Builder::BlockBuilder::UpdateStateDependencyMap(v240);
          v147 = (char *)v219;
          if (v219)
          {
            v148 = v220;
            v149 = v219;
            if (v220 != v219)
            {
              do
              {
                v150 = (std::__shared_weak_count *)*((_QWORD *)v148 - 1);
                if (v150)
                {
                  v151 = (unint64_t *)&v150->__shared_owners_;
                  do
                    v152 = __ldaxr(v151);
                  while (__stlxr(v152 - 1, v151));
                  if (!v152)
                  {
                    ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                    std::__shared_weak_count::__release_weak(v150);
                  }
                }
                v148 -= 16;
              }
              while (v148 != v147);
              v149 = v219;
            }
            v220 = v147;
            operator delete(v149);
          }
          v104 = (char *)v224;
          v12 = v215;
        }
        if (v104)
        {
          v225 = v104;
          operator delete(v104);
        }
        v153 = (_QWORD *)__p.__r_.__value_.__r.__words[2];
        if (__p.__r_.__value_.__r.__words[2])
        {
          do
          {
            v158 = v153;
            v153 = (_QWORD *)*v153;
            v159 = (std::__shared_weak_count *)v158[3];
            if (v159)
            {
              v160 = (unint64_t *)&v159->__shared_owners_;
              do
                v161 = __ldaxr(v160);
              while (__stlxr(v161 - 1, v160));
              if (!v161)
              {
                ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
                std::__shared_weak_count::__release_weak(v159);
              }
            }
            operator delete(v158);
          }
          while (v153);
        }
        v154 = (void *)__p.__r_.__value_.__r.__words[0];
        __p.__r_.__value_.__r.__words[0] = 0;
        if (v154)
          operator delete(v154);
        v155 = v229;
        v15 = v213;
        if (v229)
        {
          v156 = (unint64_t *)&v229->__shared_owners_;
          do
            v157 = __ldaxr(v156);
          while (__stlxr(v157 - 1, v156));
          if (!v157)
          {
            ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
            std::__shared_weak_count::__release_weak(v155);
          }
        }
LABEL_18:
        v15 = *(MIL::Builder::Variable **)v15;
        if (v15)
          continue;
        break;
      }
      v170 = v232;
      if (v232)
      {
        do
        {
          v171 = (_QWORD *)*v170;
          operator delete(v170);
          v170 = v171;
        }
        while (v171);
      }
LABEL_285:
      v172 = v230;
      v230 = 0;
      if (v172)
        operator delete(v172);
      v173 = v234;
      if (v234)
      {
        v174 = (unint64_t *)&v234->__shared_owners_;
        do
          v175 = __ldaxr(v174);
        while (__stlxr(v175 - 1, v174));
        if (!v175)
        {
          ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
          std::__shared_weak_count::__release_weak(v173);
        }
      }
      v14 = v210 + 1;
      if (v210 + 1 != v12)
        continue;
      break;
    }
    v13 = v209 + 1;
    if (v209 + 1 != v208)
      continue;
    break;
  }
LABEL_293:
  MIL::Builder::BlockBuilder::GetOutputNames(v240);
  v176 = v238;
  v177 = v239;
  while (v176 != v177)
  {
    v178 = (std::__shared_weak_count *)v230;
    v179 = v231;
    if (v230 != v231)
    {
      v180 = *((_BYTE *)v176 + 23);
      if (v180 >= 0)
        v181 = (unsigned __int8 *)*((unsigned __int8 *)v176 + 23);
      else
        v181 = v176[1];
      if (v180 >= 0)
        v182 = (unsigned __int8 *)v176;
      else
        v182 = *v176;
      do
      {
        shared_weak_owners_high = HIBYTE(v178->__shared_weak_owners_);
        if ((shared_weak_owners_high & 0x80u) == 0)
          shared_owners = HIBYTE(v178->__shared_weak_owners_);
        else
          shared_owners = v178->__shared_owners_;
        if ((unsigned __int8 *)shared_owners == v181)
        {
          if ((shared_weak_owners_high & 0x80) != 0)
          {
            if (!memcmp(v178->__vftable, v182, v178->__shared_owners_))
              goto LABEL_314;
          }
          else
          {
            if (!HIBYTE(v178->__shared_weak_owners_))
              goto LABEL_314;
            v185 = 0;
            while (*((unsigned __int8 *)&v178->__vftable + v185) == v182[v185])
            {
              if (shared_weak_owners_high == ++v185)
                goto LABEL_314;
            }
          }
        }
        ++v178;
      }
      while (v178 != v179);
      v178 = v179;
LABEL_314:
      v12 = v215;
    }
    if (v178 == v179)
      MIL::Builder::BlockBuilder::AddOutput();
    v176 += 3;
  }
  if (MIL::Builder::BlockBuilder::GetNumOperations(v240) != v12)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Internal bug: Number of ops should not change by MakeOpsConsecutive.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v186 = (std::__shared_weak_count *)v230;
  if (v230)
  {
    v187 = v231;
    v188 = v230;
    if (v231 != v230)
    {
      do
      {
        if (SHIBYTE(v187[-1].__shared_weak_owners_) < 0)
          operator delete(v187[-1].__vftable);
        --v187;
      }
      while (v187 != v186);
      v188 = v230;
    }
    v231 = v186;
    operator delete(v188);
  }
  v189 = v236[0];
  if (v236[0])
  {
    do
    {
      v194 = v189;
      v189 = (_QWORD *)*v189;
      v195 = (std::__shared_weak_count *)v194[3];
      if (v195)
      {
        v196 = (unint64_t *)&v195->__shared_owners_;
        do
          v197 = __ldaxr(v196);
        while (__stlxr(v197 - 1, v196));
        if (!v197)
        {
          ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
          std::__shared_weak_count::__release_weak(v195);
        }
      }
      operator delete(v194);
    }
    while (v189);
  }
  v190 = v235[0];
  v235[0] = 0;
  if (v190)
    operator delete(v190);
LABEL_330:
  v191 = v238;
  if (v238)
  {
    v192 = v239;
    v193 = v238;
    if (v239 != v238)
    {
      do
      {
        if (*((char *)v192 - 1) < 0)
          operator delete(*(v192 - 3));
        v192 -= 3;
      }
      while (v192 != v191);
      v193 = v238;
    }
    v239 = v191;
    operator delete(v193);
  }
  v198 = v241;
  if (v241)
  {
    v199 = (unint64_t *)&v241->__shared_owners_;
    do
      v200 = __ldaxr(v199);
    while (__stlxr(v200 - 1, v199));
    if (!v200)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v198);
    }
  }
  v201 = (void **)v243;
  if ((_QWORD)v243)
  {
    do
    {
      v206 = (void **)*v201;
      if (*((char *)v201 + 39) < 0)
        operator delete(v201[2]);
      operator delete(v201);
      v201 = v206;
    }
    while (v206);
  }
  v202 = (void *)v242;
  *(_QWORD *)&v242 = 0;
  if (v202)
    operator delete(v202);
  v203 = v246;
  if (v246)
  {
    do
    {
      v204 = (_QWORD *)*v203;
      operator delete(v203);
      v203 = v204;
    }
    while (v204);
  }
  v205 = v245;
  v245 = 0;
  if (v205)
    operator delete(v205);
}

void sub_1910B6C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,_QWORD *__p)
{
  void *v52;
  uint64_t v53;
  _QWORD *v55;
  void *v56;
  void **v57;
  std::__shared_weak_count *v58;
  _QWORD *v59;
  std::__shared_weak_count *v60;
  unint64_t *p_shared_owners;
  unint64_t v62;
  void **v63;
  void *v64;
  unint64_t *v65;
  unint64_t v66;
  void **v67;
  void *v68;
  _QWORD *v69;
  _QWORD *v70;
  void *v71;
  void **v72;

  __cxa_free_exception(v52);
  std::vector<std::string>::~vector[abi:ne180100](&a43);
  v55 = __p;
  while (v55)
  {
    v59 = v55;
    v55 = (_QWORD *)*v55;
    v60 = (std::__shared_weak_count *)v59[3];
    if (v60)
    {
      p_shared_owners = (unint64_t *)&v60->__shared_owners_;
      do
        v62 = __ldaxr(p_shared_owners);
      while (__stlxr(v62 - 1, p_shared_owners));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    operator delete(v59);
  }
  v56 = a50;
  a50 = 0;
  if (v56)
  {
    operator delete(v56);
    v57 = *(void ***)(v53 - 248);
    if (!v57)
    {
LABEL_4:
      v58 = *(std::__shared_weak_count **)(v53 - 216);
      if (!v58)
        goto LABEL_24;
      goto LABEL_20;
    }
  }
  else
  {
    v57 = *(void ***)(v53 - 248);
    if (!v57)
      goto LABEL_4;
  }
  v63 = *(void ***)(v53 - 240);
  if (v63 == v57)
  {
    *(_QWORD *)(v53 - 240) = v57;
    operator delete(v57);
    v58 = *(std::__shared_weak_count **)(v53 - 216);
    if (!v58)
      goto LABEL_24;
  }
  else
  {
    do
    {
      if (*((char *)v63 - 1) < 0)
        operator delete(*(v63 - 3));
      v63 -= 3;
    }
    while (v63 != v57);
    v64 = *(void **)(v53 - 248);
    *(_QWORD *)(v53 - 240) = v57;
    operator delete(v64);
    v58 = *(std::__shared_weak_count **)(v53 - 216);
    if (!v58)
    {
LABEL_24:
      v67 = *(void ***)(v53 - 192);
      if (v67)
      {
        do
        {
          v72 = (void **)*v67;
          if (*((char *)v67 + 39) < 0)
            operator delete(v67[2]);
          operator delete(v67);
          v67 = v72;
        }
        while (v72);
      }
      v68 = *(void **)(v53 - 208);
      *(_QWORD *)(v53 - 208) = 0;
      if (v68)
        operator delete(v68);
      v69 = *(_QWORD **)(v53 - 144);
      if (v69)
      {
        do
        {
          v70 = (_QWORD *)*v69;
          operator delete(v69);
          v69 = v70;
        }
        while (v70);
      }
      v71 = *(void **)(v53 - 160);
      *(_QWORD *)(v53 - 160) = 0;
      if (v71)
        operator delete(v71);
      _Unwind_Resume(a1);
    }
  }
LABEL_20:
  v65 = (unint64_t *)&v58->__shared_owners_;
  do
    v66 = __ldaxr(v65);
  while (__stlxr(v66 - 1, v65));
  if (!v66)
  {
    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
    std::__shared_weak_count::__release_weak(v58);
  }
  goto LABEL_24;
}

_QWORD *std::vector<std::shared_ptr<MIL::Builder::OperationBuilder> const,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder> const>>::vector[abi:ne180100](_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v5 = 2 * a3;
    v6 = operator new(16 * a3);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    v7 = &a2[v5];
    do
    {
      v8 = a2[1];
      *v6 = *a2;
      v6[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v6 += 2;
    }
    while (a2 != v7);
    a1[1] = v6;
  }
  return a1;
}

void sub_1910B7240(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    std::vector<std::shared_ptr<MIL::IRArgument>>::vector[abi:ne180100]((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::FuncHasFlexibleInputsOrOutputs(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  std::string::size_type size;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  std::logic_error *exception;
  std::string *v20;
  __int128 v21;
  std::string v22;
  std::string __p;
  uint64_t v24;
  std::__shared_weak_count *v25;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 48))(&v24);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2);
  v5 = v4;
  if (!v4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v20 = std::string::append(&v22, " does not exist.");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &__p);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 128))(v4);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v5 + 160))(&__p, v5);
  v9 = (_QWORD *)*v6;
  v7 = v6 + 1;
  v8 = v9;
  if (v9 != v7)
  {
    do
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v8[7] + 16))(v8[7]);
      v16 = (_QWORD *)v8[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v8[2];
          v18 = *v17 == (_QWORD)v8;
          v8 = v17;
        }
        while (!v18);
      }
      v8 = v17;
    }
    while (v17 != v7);
  }
  size = __p.__r_.__value_.__l.__size_;
  v11 = (_QWORD *)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_)
  {
    if (!__p.__r_.__value_.__r.__words[0])
      goto LABEL_7;
  }
  else
  {
    do
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v11 + 16))(*v11);
      ++v11;
    }
    while (v11 != (_QWORD *)size);
    v11 = (_QWORD *)__p.__r_.__value_.__r.__words[0];
    if (!__p.__r_.__value_.__r.__words[0])
      goto LABEL_7;
  }
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
  operator delete(v11);
LABEL_7:
  v12 = v25;
  if (!v25)
    return 0;
  p_shared_owners = (unint64_t *)&v25->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return 0;
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return 0;
}

void sub_1910B7464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;
  uint64_t v23;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v23 - 48);
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v23 - 48);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::InterleaveSpan<float>(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  unint64_t *v6;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  lldiv_t v21;
  unint64_t v22;
  std::runtime_error *v23;
  std::logic_error *exception;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = *(unint64_t **)a5;
  if (*(_QWORD *)(a5 + 8) - *(_QWORD *)a5 != 16)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Only shape of size 2 is supported.");
    goto LABEL_24;
  }
  if (a2 != a4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Spans must have the same size.");
    goto LABEL_24;
  }
  v8 = *v6;
  v9 = v6[1];
  if (a2 != v9 * *v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Span size must match the product of its dims.");
LABEL_24:
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  if (v8)
    v10 = a6 == 0;
  else
    v10 = 1;
  if (!v10 && v9 != 0)
  {
    v13 = result;
    v14 = 0;
    v15 = 0;
    v16 = a6;
    v25 = v9 * a6;
    v26 = v8;
    do
    {
      v17 = 0;
      v18 = 0;
      v27 = v15;
      v28 = v14;
      v19 = v15 * v9;
      v29 = v13;
      do
      {
        v20 = 0;
        do
        {
          v21 = lldiv(v17 + v20, v9);
          result = v21.quot;
          if (a2 <= v14 + v20 || (v22 = v21.quot + v19 + v21.rem * v16, a2 <= v22))
          {
            v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::range_error::range_error[abi:ne180100](v23, "index out of bounds");
            __cxa_throw(v23, (struct type_info *)off_1E2D352F0, MEMORY[0x1E0DE42B0]);
          }
          *(_DWORD *)(a3 + 4 * v22) = *(_DWORD *)(v13 + 4 * v20++);
        }
        while (v9 != v20);
        ++v18;
        v13 += 4 * v9;
        v14 += v9;
        v17 += v9;
      }
      while (v18 != v16);
      v15 = v27 + v16;
      v13 = v29 + 4 * v25;
      v14 = v28 + v25;
    }
    while (v27 + v16 < v26);
  }
  return result;
}

{
  return __ZN8Espresso3AOT14InterleaveSpanIfEEvN3MIL4Util4SpanIKT_Lm18446744073709551615EEENS4_IS5_Lm18446744073709551615EEENSt3__16vectorIyNS9_9allocatorIyEEEEh(result, a2, a3, a4, a5, a6);
}

void sub_1910B777C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1910B7790(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1910B77A4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1910B77B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1910B77CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::InterleaveSpan<MIL::Fp16>(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  unint64_t *v6;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  lldiv_t v21;
  unint64_t v22;
  std::runtime_error *v23;
  std::logic_error *exception;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = *(unint64_t **)a5;
  if (*(_QWORD *)(a5 + 8) - *(_QWORD *)a5 != 16)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Only shape of size 2 is supported.");
    goto LABEL_24;
  }
  if (a2 != a4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Spans must have the same size.");
    goto LABEL_24;
  }
  v8 = *v6;
  v9 = v6[1];
  if (a2 != v9 * *v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Span size must match the product of its dims.");
LABEL_24:
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  if (v8)
    v10 = a6 == 0;
  else
    v10 = 1;
  if (!v10 && v9 != 0)
  {
    v13 = result;
    v14 = 0;
    v15 = 0;
    v16 = a6;
    v25 = v9 * a6;
    v26 = v8;
    do
    {
      v17 = 0;
      v18 = 0;
      v27 = v15;
      v28 = v14;
      v19 = v15 * v9;
      v29 = v13;
      do
      {
        v20 = 0;
        do
        {
          v21 = lldiv(v17 + v20, v9);
          result = v21.quot;
          if (a2 <= v14 + v20 || (v22 = v21.quot + v19 + v21.rem * v16, a2 <= v22))
          {
            v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::range_error::range_error[abi:ne180100](v23, "index out of bounds");
            __cxa_throw(v23, (struct type_info *)off_1E2D352F0, MEMORY[0x1E0DE42B0]);
          }
          *(_WORD *)(a3 + 2 * v22) = *(_WORD *)(v13 + 2 * v20++);
        }
        while (v9 != v20);
        ++v18;
        v13 += 2 * v9;
        v14 += v9;
        v17 += v9;
      }
      while (v18 != v16);
      v15 = v27 + v16;
      v13 = v29 + 2 * v25;
      v14 = v28 + v25;
    }
    while (v27 + v16 < v26);
  }
  return result;
}

{
  return __ZN8Espresso3AOT14InterleaveSpanIN3MIL4Fp16EEEvNS2_4Util4SpanIKT_Lm18446744073709551615EEENS5_IS6_Lm18446744073709551615EEENSt3__16vectorIyNSA_9allocatorIyEEEEh(result, a2, a3, a4, a5, a6);
}

void sub_1910B79D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1910B79EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1910B7A00(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1910B7A14(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1910B7A28(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::InterleaveSpan<signed char>(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  unint64_t *v6;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  lldiv_t v21;
  unint64_t v22;
  std::runtime_error *v23;
  std::logic_error *exception;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = *(unint64_t **)a5;
  if (*(_QWORD *)(a5 + 8) - *(_QWORD *)a5 != 16)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Only shape of size 2 is supported.");
    goto LABEL_24;
  }
  if (a2 != a4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Spans must have the same size.");
    goto LABEL_24;
  }
  v8 = *v6;
  v9 = v6[1];
  if (a2 != v9 * *v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Span size must match the product of its dims.");
LABEL_24:
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  if (v8)
    v10 = a6 == 0;
  else
    v10 = 1;
  if (!v10 && v9 != 0)
  {
    v13 = result;
    v14 = 0;
    v15 = 0;
    v16 = a6;
    v25 = v9 * a6;
    v26 = v8;
    do
    {
      v17 = 0;
      v18 = 0;
      v27 = v15;
      v28 = v14;
      v19 = v15 * v9;
      v29 = v13;
      do
      {
        v20 = 0;
        do
        {
          v21 = lldiv(v17 + v20, v9);
          result = v21.quot;
          if (a2 <= v14 + v20 || (v22 = v21.quot + v19 + v21.rem * v16, a2 <= v22))
          {
            v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::range_error::range_error[abi:ne180100](v23, "index out of bounds");
            __cxa_throw(v23, (struct type_info *)off_1E2D352F0, MEMORY[0x1E0DE42B0]);
          }
          *(_BYTE *)(a3 + v22) = *(_BYTE *)(v13 + v20++);
        }
        while (v9 != v20);
        ++v18;
        v13 += v9;
        v14 += v9;
        v17 += v9;
      }
      while (v18 != v16);
      v15 = v27 + v16;
      v13 = v29 + v25;
      v14 = v28 + v25;
    }
    while (v27 + v16 < v26);
  }
  return result;
}

{
  return __ZN8Espresso3AOT14InterleaveSpanIaEEvN3MIL4Util4SpanIKT_Lm18446744073709551615EEENS4_IS5_Lm18446744073709551615EEENSt3__16vectorIyNS9_9allocatorIyEEEEh(result, a2, a3, a4, a5, a6);
}

void sub_1910B7C1C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1910B7C30(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1910B7C44(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1910B7C58(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1910B7C6C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MergeFunctions(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, void **a6@<X8>)
{
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  void **v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  void **v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  void *v45;
  uint64_t *v46;
  std::string *v47;
  _QWORD *v48;
  _QWORD *v49;
  BOOL v50;
  char *v51;
  char **v52;
  _QWORD *v53;
  _QWORD *v54;
  __int128 *v55;
  __int128 v56;
  char *v57;
  char **v58;
  MIL::Builder::OperationBuilder **v59;
  MIL::Builder::OperationBuilder **v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count_vtbl *v62;
  uint64_t *v63;
  unint64_t v64;
  uint64_t *v65;
  unint64_t v66;
  MIL::Builder::OperationBuilder **v67;
  void *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  void **v73;
  std::string *v74;
  std::string *v75;
  std::string *v76;
  uint64_t v77;
  uint64_t v78;
  std::string::size_type size;
  int v80;
  std::string *v81;
  uint64_t v82;
  std::string *v83;
  std::string *v84;
  unsigned __int8 *v85;
  int v86;
  std::string *k;
  MIL::Builder::Variable *Input;
  __int128 v89;
  char *v90;
  char *v91;
  void *v92;
  _QWORD *v93;
  void *v94;
  void **v95;
  void **v96;
  void *v97;
  std::string *v98;
  std::string *v99;
  void *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  MIL::Builder::FunctionBuilder *v104;
  void **v105;
  void *v106;
  void **v107;
  void *v108;
  void **v109;
  void **v110;
  void **v111;
  void **v112;
  void **v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  MIL::Builder::FunctionBuilder *v117;
  void **v118;
  void *v119;
  void **v120;
  void **v121;
  void **v122;
  void **v123;
  std::string v124;
  uint64_t v125;
  uint64_t v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count_vtbl *v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count *v130;
  void *__p;
  MIL::Builder::OperationBuilder **v132;
  void *v133;
  void **v134;
  char **v135;
  char *v136[2];
  void *v137;
  std::string *v138;
  unint64_t v139;
  MIL::Builder::BlockBuilder *v140;
  std::__shared_weak_count *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  MIL::Builder::FunctionBuilder *v146;
  char **v147;
  char *v148[2];
  void *v149[2];
  void *v150[2];
  int v151;
  __int128 v152;
  __int128 v153;
  int j;
  void **v155;
  void **v156;
  MIL::Builder::BlockBuilder *v157;
  std::__shared_weak_count *v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  MIL::Builder::FunctionBuilder *v163;
  __int128 v164;
  __int128 v165;
  int i;
  void **v167;
  void **v168;
  uint64_t v169;

  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v12 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 88))(v11);
  v168 = 0;
  v169 = 0;
  v167 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v167, *v12, v12[1], 0xAAAAAAAAAAAAAAABLL * ((v12[1] - *v12) >> 3));
  v13 = (uint64_t)v167;
  v14 = v168;
  v164 = 0u;
  v165 = 0u;
  for (i = 1065353216; (void **)v13 != v14; v13 += 24)
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v164, v13, v13);
  v15 = (std::__shared_weak_count *)a1[1];
  v161 = *a1;
  v162 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  v18 = (std::__shared_weak_count *)a4[1];
  v159 = *a4;
  v160 = v18;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  MIL::Builder::FunctionBuilder::Make();
  if (v160)
  {
    v21 = &v160->__shared_owners_;
    do
      v22 = __ldaxr((unint64_t *)v21);
    while (__stlxr(v22 - 1, (unint64_t *)v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  if (v162)
  {
    v23 = &v162->__shared_owners_;
    do
      v24 = __ldaxr((unint64_t *)v23);
    while (__stlxr(v24 - 1, (unint64_t *)v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  MIL::Builder::FunctionBuilder::SelectedSpecialization(v163);
  MIL::Builder::FunctionBuilder::GetBlock();
  MIL::Builder::BlockBuilder::GetOutputNames(v157);
  v25 = (uint64_t)v155;
  v26 = v156;
  v152 = 0u;
  v153 = 0u;
  for (j = 1065353216; (void **)v25 != v26; v25 += 24)
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v152, v25, v25);
  *(_OWORD *)v149 = 0u;
  *(_OWORD *)v150 = 0u;
  v151 = 1065353216;
  MIL::Builder::FunctionBuilder::CreateFunction(v163);
  v27 = (_QWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v137 + 128))(v137);
  v148[0] = 0;
  v148[1] = 0;
  v147 = v148;
  v28 = v27 + 1;
  v29 = (_QWORD *)*v27;
  if ((_QWORD *)*v27 != v27 + 1)
  {
    do
    {
      std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,MIL::IRValueType const*> const&>((uint64_t **)&v147, v148, v29 + 4, (uint64_t)(v29 + 4));
      v48 = (_QWORD *)v29[1];
      if (v48)
      {
        do
        {
          v49 = v48;
          v48 = (_QWORD *)*v48;
        }
        while (v48);
      }
      else
      {
        do
        {
          v49 = (_QWORD *)v29[2];
          v50 = *v49 == (_QWORD)v29;
          v29 = v49;
        }
        while (!v50);
      }
      v29 = v49;
    }
    while (v49 != v28);
  }
  v30 = v137;
  v137 = 0;
  if (v30)
    (*(void (**)(void *))(*(_QWORD *)v30 + 8))(v30);
  v31 = (uint64_t *)v147;
  if (v147 != v148)
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v149, (uint64_t)(v31 + 4), (uint64_t)(v31 + 4));
      v51 = (char *)v31[1];
      if (v51)
      {
        do
        {
          v52 = (char **)v51;
          v51 = *(char **)v51;
        }
        while (v51);
      }
      else
      {
        do
        {
          v52 = (char **)v31[2];
          v50 = *v52 == (char *)v31;
          v31 = (uint64_t *)v52;
        }
        while (!v50);
      }
      v31 = (uint64_t *)v52;
    }
    while (v52 != v148);
  }
  v32 = (std::__shared_weak_count *)a1[1];
  v144 = *a1;
  v145 = v32;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v35 = (std::__shared_weak_count *)a5[1];
  v142 = *a5;
  v143 = v35;
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  MIL::Builder::FunctionBuilder::Make();
  if (v143)
  {
    v38 = &v143->__shared_owners_;
    do
      v39 = __ldaxr((unint64_t *)v38);
    while (__stlxr(v39 - 1, (unint64_t *)v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  if (v145)
  {
    v40 = &v145->__shared_owners_;
    do
      v41 = __ldaxr((unint64_t *)v40);
    while (__stlxr(v41 - 1, (unint64_t *)v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  MIL::Builder::FunctionBuilder::SelectedSpecialization(v146);
  MIL::Builder::FunctionBuilder::GetBlock();
  v137 = 0;
  v138 = 0;
  v139 = 0;
  MIL::Builder::FunctionBuilder::CreateFunction(v146);
  v42 = (_QWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v133 + 128))(v133);
  v136[0] = 0;
  v136[1] = 0;
  v135 = v136;
  v43 = v42 + 1;
  v44 = (_QWORD *)*v42;
  if ((_QWORD *)*v42 != v42 + 1)
  {
    do
    {
      std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,MIL::IRValueType const*> const&>((uint64_t **)&v135, v136, v44 + 4, (uint64_t)(v44 + 4));
      v53 = (_QWORD *)v44[1];
      if (v53)
      {
        do
        {
          v54 = v53;
          v53 = (_QWORD *)*v53;
        }
        while (v53);
      }
      else
      {
        do
        {
          v54 = (_QWORD *)v44[2];
          v50 = *v54 == (_QWORD)v44;
          v44 = v54;
        }
        while (!v50);
      }
      v44 = v54;
    }
    while (v54 != v43);
  }
  v45 = v133;
  v133 = 0;
  if (v45)
    (*(void (**)(void *))(*(_QWORD *)v45 + 8))(v45);
  v46 = (uint64_t *)v135;
  if (v135 != v136)
  {
    v47 = v138;
    do
    {
      v55 = (__int128 *)(v46 + 4);
      if ((unint64_t)v47 >= v139)
      {
        v47 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v137, (uint64_t)v55);
        v138 = v47;
        v57 = (char *)v46[1];
        if (v57)
          goto LABEL_75;
      }
      else if (*((char *)v46 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(v47++, (const std::string::value_type *)v46[4], v46[5]);
        v138 = v47;
        v57 = (char *)v46[1];
        if (v57)
        {
          do
          {
LABEL_75:
            v58 = (char **)v57;
            v57 = *(char **)v57;
          }
          while (v57);
          goto LABEL_67;
        }
      }
      else
      {
        v56 = *v55;
        v47->__r_.__value_.__r.__words[2] = v46[6];
        *(_OWORD *)&v47->__r_.__value_.__l.__data_ = v56;
        v138 = ++v47;
        v57 = (char *)v46[1];
        if (v57)
          goto LABEL_75;
      }
      do
      {
        v58 = (char **)v46[2];
        v50 = *v58 == (char *)v46;
        v46 = (uint64_t *)v58;
      }
      while (!v50);
LABEL_67:
      v46 = (uint64_t *)v58;
    }
    while (v58 != v136);
  }
  MIL::Builder::BlockBuilder::GetOutputNames(v140);
  MIL::Builder::BlockBuilder::GetOperations(v140);
  v59 = (MIL::Builder::OperationBuilder **)__p;
  v60 = v132;
  if (__p != v132)
  {
    do
    {
      MIL::Builder::OperationBuilder::CreateOperation(*v59);
      v128 = v127;
      if (v127)
      {
        v61 = (std::__shared_weak_count *)operator new();
        v62 = v127;
        v61->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2F98;
        v61->__shared_owners_ = 0;
        v61->__shared_weak_owners_ = 0;
        v61[1].__vftable = v62;
      }
      else
      {
        v61 = 0;
      }
      v129 = v61;
      v127 = 0;
      MIL::Builder::OperationBuilder::Make();
      v125 = 0;
      v126 = 0;
      MIL::Builder::BlockBuilder::AddOperation();
      if (v130)
      {
        v63 = &v130->__shared_owners_;
        do
          v64 = __ldaxr((unint64_t *)v63);
        while (__stlxr(v64 - 1, (unint64_t *)v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
          std::__shared_weak_count::__release_weak(v130);
        }
      }
      if (!v129)
        goto LABEL_95;
      v65 = &v129->__shared_owners_;
      do
        v66 = __ldaxr((unint64_t *)v65);
      while (__stlxr(v66 - 1, (unint64_t *)v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
        std::__shared_weak_count::__release_weak(v129);
        v127 = 0;
      }
      else
      {
LABEL_95:
        v127 = 0;
      }
      v59 += 2;
    }
    while (v59 != v60);
    v59 = (MIL::Builder::OperationBuilder **)__p;
  }
  if (v59)
  {
    v67 = v132;
    v68 = v59;
    if (v132 != v59)
    {
      do
      {
        v69 = (std::__shared_weak_count *)*(v67 - 1);
        if (v69)
        {
          v70 = (unint64_t *)&v69->__shared_owners_;
          do
            v71 = __ldaxr(v70);
          while (__stlxr(v71 - 1, v70));
          if (!v71)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        v67 -= 2;
      }
      while (v67 != v59);
      v68 = __p;
    }
    v132 = v59;
    operator delete(v68);
  }
  v72 = (uint64_t)v155;
  v73 = v156;
  v74 = v138;
  while ((void **)v72 != v73)
  {
    v75 = (std::string *)v137;
    v76 = v74;
    if (v137 != v74)
    {
      do
      {
        v77 = *(unsigned __int8 *)(v72 + 23);
        if ((v77 & 0x80u) == 0)
          v78 = *(unsigned __int8 *)(v72 + 23);
        else
          v78 = *(_QWORD *)(v72 + 8);
        size = HIBYTE(v75->__r_.__value_.__r.__words[2]);
        v80 = (char)size;
        if ((size & 0x80u) != 0)
          size = v75->__r_.__value_.__l.__size_;
        if (v78 == size)
        {
          if (v80 >= 0)
            v81 = v75;
          else
            v81 = (std::string *)v75->__r_.__value_.__r.__words[0];
          if ((v77 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v72, v81, *(_QWORD *)(v72 + 8)))
              goto LABEL_131;
          }
          else
          {
            if (!*(_BYTE *)(v72 + 23))
            {
LABEL_131:
              v83 = v75;
              if (&v75[1] != v76)
              {
                do
                {
                  if (SHIBYTE(v83->__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v83->__r_.__value_.__l.__data_);
                  *(_OWORD *)&v83->__r_.__value_.__l.__data_ = *(_OWORD *)&v83[1].__r_.__value_.__l.__data_;
                  v83->__r_.__value_.__r.__words[2] = v83[1].__r_.__value_.__r.__words[2];
                  *((_BYTE *)&v83[1].__r_.__value_.__s + 23) = 0;
                  v84 = v83 + 2;
                  v83[1].__r_.__value_.__s.__data_[0] = 0;
                  ++v83;
                }
                while (v84 != v76);
                v76 = v138;
              }
              while (v76 != v83)
              {
                if (SHIBYTE(v76[-1].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v76[-1].__r_.__value_.__l.__data_);
                --v76;
              }
              v138 = v83;
              if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v164, v72))
              {
                if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(a3, (unsigned __int8 *)v72))goto LABEL_145;
                v85 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(a3, (unsigned __int8 *)v72);
                if (!v85)
                  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                v86 = *((_DWORD *)v85 + 10) - 1;
                *((_DWORD *)v85 + 10) = v86;
                if (!v86)
LABEL_145:
                  MIL::Builder::BlockBuilder::RemoveOutput();
              }
              goto LABEL_116;
            }
            v82 = 0;
            while (*(unsigned __int8 *)(v72 + v82) == v81->__r_.__value_.__s.__data_[v82])
            {
              if (v77 == ++v82)
                goto LABEL_131;
            }
          }
        }
        ++v75;
LABEL_116:
        v76 = v138;
        v74 = v75;
      }
      while (v75 != v138);
    }
    v72 += 24;
  }
  for (k = (std::string *)v137; k != v74; ++k)
  {
    if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v149, (uint64_t)k))
    {
      Input = (MIL::Builder::Variable *)MIL::Builder::FunctionBuilder::TryGetInput();
      if (SHIBYTE(k->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v124, k->__r_.__value_.__l.__data_, k->__r_.__value_.__l.__size_);
      }
      else
      {
        v89 = *(_OWORD *)&k->__r_.__value_.__l.__data_;
        v124.__r_.__value_.__r.__words[2] = k->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v89;
      }
      MIL::Builder::Variable::TryGetType(Input);
      MIL::Builder::FunctionBuilder::AddInput();
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v124.__r_.__value_.__l.__data_);
    }
  }
  v90 = (char *)v133;
  v91 = (char *)v134;
  if (v133 != v134)
  {
    do
    {
      MIL::Builder::BlockBuilder::AddOutput();
      v90 += 24;
    }
    while (v90 != v91);
  }
  MIL::Builder::BlockBuilder::UpdateStateDependencyMap(v157);
  MIL::Builder::FunctionBuilder::CreateFunction(v163);
  v92 = __p;
  *a6 = __p;
  if (v92)
  {
    v93 = (_QWORD *)operator new();
    v94 = __p;
    *v93 = &unk_1E2DC2E10;
    v93[1] = 0;
    v93[2] = 0;
    v93[3] = v94;
    a6[1] = v93;
    v95 = (void **)v133;
    if (!v133)
      goto LABEL_168;
  }
  else
  {
    a6[1] = 0;
    v95 = (void **)v133;
    if (!v133)
      goto LABEL_168;
  }
  v96 = v134;
  v97 = v95;
  if (v134 != v95)
  {
    do
    {
      if (*((char *)v96 - 1) < 0)
        operator delete(*(v96 - 3));
      v96 -= 3;
    }
    while (v96 != v95);
    v97 = v133;
  }
  v134 = v95;
  operator delete(v97);
LABEL_168:
  std::__tree<std::string>::destroy((uint64_t)&v135, v136[0]);
  v98 = (std::string *)v137;
  if (v137)
  {
    v99 = v138;
    v100 = v137;
    if (v138 != v137)
    {
      do
      {
        if (SHIBYTE(v99[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v99[-1].__r_.__value_.__l.__data_);
        --v99;
      }
      while (v99 != v98);
      v100 = v137;
    }
    v138 = v98;
    operator delete(v100);
  }
  v101 = v141;
  if (v141)
  {
    v102 = (unint64_t *)&v141->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v146;
  v146 = 0;
  if (v104)
    (*(void (**)(MIL::Builder::FunctionBuilder *))(*(_QWORD *)v104 + 8))(v104);
  std::__tree<std::string>::destroy((uint64_t)&v147, v148[0]);
  v105 = (void **)v150[0];
  if (v150[0])
  {
    do
    {
      v112 = (void **)*v105;
      if (*((char *)v105 + 39) < 0)
        operator delete(v105[2]);
      operator delete(v105);
      v105 = v112;
    }
    while (v112);
  }
  v106 = v149[0];
  v149[0] = 0;
  if (v106)
    operator delete(v106);
  v107 = (void **)v153;
  if ((_QWORD)v153)
  {
    do
    {
      v113 = (void **)*v107;
      if (*((char *)v107 + 39) < 0)
        operator delete(v107[2]);
      operator delete(v107);
      v107 = v113;
    }
    while (v113);
  }
  v108 = (void *)v152;
  *(_QWORD *)&v152 = 0;
  if (v108)
    operator delete(v108);
  v109 = v155;
  if (v155)
  {
    v110 = v156;
    v111 = v155;
    if (v156 != v155)
    {
      do
      {
        if (*((char *)v110 - 1) < 0)
          operator delete(*(v110 - 3));
        v110 -= 3;
      }
      while (v110 != v109);
      v111 = v155;
    }
    v156 = v109;
    operator delete(v111);
  }
  v114 = v158;
  if (v158)
  {
    v115 = (unint64_t *)&v158->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = v163;
  v163 = 0;
  if (v117)
    (*(void (**)(MIL::Builder::FunctionBuilder *))(*(_QWORD *)v117 + 8))(v117);
  v118 = (void **)v165;
  if ((_QWORD)v165)
  {
    do
    {
      v123 = (void **)*v118;
      if (*((char *)v118 + 39) < 0)
        operator delete(v118[2]);
      operator delete(v118);
      v118 = v123;
    }
    while (v123);
  }
  v119 = (void *)v164;
  *(_QWORD *)&v164 = 0;
  if (v119)
    operator delete(v119);
  v120 = v167;
  if (v167)
  {
    v121 = v168;
    v122 = v167;
    if (v168 != v167)
    {
      do
      {
        if (*((char *)v121 - 1) < 0)
          operator delete(*(v121 - 3));
        v121 -= 3;
      }
      while (v121 != v120);
      v122 = v167;
    }
    v168 = v120;
    operator delete(v122);
  }
}

void sub_1910B88F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,char *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,char a41,char *a42,uint64_t a43,char a44)
{
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;

  if (a22)
    (*(void (**)(uint64_t))(*(_QWORD *)a22 + 8))(a22);
  std::vector<std::string>::~vector[abi:ne180100]((void **)&a25);
  std::__tree<std::string>::destroy((uint64_t)&a28, a29);
  std::vector<std::string>::~vector[abi:ne180100]((void **)&a31);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  v46 = a40;
  a40 = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  std::__tree<std::string>::destroy((uint64_t)&a41, a42);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&a44);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v44 - 256);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v44 - 208));
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v44 - 184);
  v47 = *(_QWORD *)(v44 - 136);
  *(_QWORD *)(v44 - 136) = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v44 - 128);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v44 - 88));
  _Unwind_Resume(a1);
}

void Espresso::AOT::RequireDecompositionForANE(uint64_t **a1@<X8>)
{
  uint64_t Function;
  uint64_t v3;
  _QWORD ***v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  _BOOL4 v17;
  MIL::IRValueType *ParameterType;
  uint64_t v19;
  uint64_t v20;
  MIL::IRValue *Attribute;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  uint64_t *v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t *v40;
  std::string __p;
  uint64_t v42;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  Function = MIL::IRProgram::GetFunction();
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Function + 40))(Function);
  v4 = (_QWORD ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
  v5 = **v4;
  v6 = (*v4)[1];
  if (v5 != v6)
  {
    v7 = 0;
    v40 = 0;
    v8 = 0;
    do
    {
      v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 56))(*v5);
      Espresso::AOT::GetOperatorType(v10, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        v9 = (void *)__p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_ != 28)
          goto LABEL_4;
        v17 = *(_QWORD *)__p.__r_.__value_.__l.__data_ != 0x645F64656C616373
           || *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8) != 0x75646F72705F746FLL
           || *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 16) != 0x6E657474615F7463
           || *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 24) != 1852795252;
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v17)
          goto LABEL_5;
      }
      else
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 28)
          goto LABEL_5;
        v11 = __p.__r_.__value_.__r.__words[0] == 0x645F64656C616373
           && __p.__r_.__value_.__l.__size_ == 0x75646F72705F746FLL;
        v12 = v11 && __p.__r_.__value_.__r.__words[2] == 0x6E657474615F7463;
        if (!v12 || v42 != 1852795252)
          goto LABEL_5;
      }
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&__p, "query");
      ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
      v19 = MIL::IRValueType::AsTensorType(ParameterType);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 88))(v19) != 4)
        goto LABEL_5;
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 96))(v19);
      if (!(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v20 + 8) - 8) + 16))(*(_QWORD *)(*(_QWORD *)(v20 + 8) - 8)))
        goto LABEL_5;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&__p, "milId");
      Attribute = (MIL::IRValue *)MIL::IRObject::GetAttribute();
      MIL::IRValue::AsTensor(Attribute);
      v22 = MIL::IRValue::GetScalar<unsigned long long>();
      v23 = v22;
      if (v8 < v40)
      {
        *v8++ = v22;
        a1[1] = v8;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_5;
        goto LABEL_3;
      }
      v24 = (char *)v8 - (char *)v7;
      v25 = v8 - v7;
      v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      if (((char *)v40 - (char *)v7) >> 2 > v26)
        v26 = ((char *)v40 - (char *)v7) >> 2;
      if ((unint64_t)((char *)v40 - (char *)v7) >= 0x7FFFFFFFFFFFFFF8)
        v27 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v27 = v26;
      if (v27)
      {
        if (v27 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v28 = operator new(8 * v27);
        v29 = (uint64_t *)&v28[8 * v25];
        *v29 = v23;
        v30 = v29 + 1;
        if (v8 != v7)
        {
LABEL_50:
          v31 = (char *)(v8 - 1) - (char *)v7;
          if (v31 < 0x168
            || &v28[v24 - 8 - (v31 & 0xFFFFFFFFFFFFFFF8)] > &v28[v24 - 8]
            || (uint64_t *)((char *)v8 - (v31 & 0xFFFFFFFFFFFFFFF8) - 8) > v8 - 1
            || (unint64_t)((char *)v7 - v28) < 0x20)
          {
            v32 = v8;
          }
          else
          {
            v34 = (v31 >> 3) + 1;
            v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
            v32 = &v8[v35 / 0xFFFFFFFFFFFFFFF8];
            v29 = (uint64_t *)((char *)v29 - v35);
            v36 = &v28[v24 - 16];
            v37 = v8 - 2;
            v38 = v34 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v39 = *(_OWORD *)v37;
              *(v36 - 1) = *((_OWORD *)v37 - 1);
              *v36 = v39;
              v36 -= 2;
              v37 -= 4;
              v38 -= 4;
            }
            while (v38);
            if (v34 == (v34 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_53:
              *a1 = v29;
              a1[1] = v30;
              v40 = (uint64_t *)&v28[8 * v27];
              a1[2] = v40;
              if (!v7)
                goto LABEL_55;
LABEL_54:
              operator delete(v7);
              goto LABEL_55;
            }
          }
          do
          {
            v33 = *--v32;
            *--v29 = v33;
          }
          while (v32 != v7);
          goto LABEL_53;
        }
      }
      else
      {
        v28 = 0;
        v29 = (uint64_t *)(8 * v25);
        *v29 = v23;
        v30 = v29 + 1;
        if (v8 != v7)
          goto LABEL_50;
      }
      *a1 = v29;
      a1[1] = v30;
      v40 = (uint64_t *)&v28[8 * v27];
      a1[2] = v40;
      if (v7)
        goto LABEL_54;
LABEL_55:
      v7 = v29;
      v8 = v30;
      a1[1] = v30;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_5;
LABEL_3:
      v9 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_4:
      operator delete(v9);
LABEL_5:
      v5 += 2;
    }
    while (v5 != v6);
  }
}

void sub_1910B8F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void *v17;

  if (a15 < 0)
  {
    operator delete(__p);
    v17 = *(void **)v15;
    if (!*(_QWORD *)v15)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v17 = *(void **)v15;
    if (!*(_QWORD *)v15)
      goto LABEL_3;
  }
  *(_QWORD *)(v15 + 8) = v17;
  operator delete(v17);
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__emplace_unique_key_args<std::string,std::string const&,MIL::IRValueType const*&>(uint64_t **a1, const void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t *v7;
  uint64_t **v8;
  int v9;
  size_t v10;
  const void *v11;
  uint64_t **v12;
  _QWORD *v13;
  const void *v14;
  const void *v15;
  int v16;
  size_t v17;
  const void *v18;
  size_t v19;
  int v20;
  _BOOL4 v21;
  int v22;
  _BOOL4 v23;
  _QWORD *v24;
  std::string *v25;
  uint64_t *v26;
  uint64_t *v27;

  v8 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    v9 = *((char *)a2 + 23);
    if (v9 >= 0)
      v10 = *((unsigned __int8 *)a2 + 23);
    else
      v10 = (size_t)a2[1];
    if (v9 >= 0)
      v11 = a2;
    else
      v11 = *a2;
    do
    {
      while (1)
      {
        v12 = (uint64_t **)v7;
        v15 = (const void *)v7[4];
        v13 = v7 + 4;
        v14 = v15;
        v16 = *((char *)v13 + 23);
        if (v16 >= 0)
          v17 = *((unsigned __int8 *)v13 + 23);
        else
          v17 = v13[1];
        if (v16 >= 0)
          v18 = v13;
        else
          v18 = v14;
        if (v17 >= v10)
          v19 = v10;
        else
          v19 = v17;
        v20 = memcmp(v11, v18, v19);
        v21 = v10 < v17;
        if (v20)
          v21 = v20 < 0;
        if (!v21)
          break;
        v7 = *v12;
        v8 = v12;
        if (!*v12)
          goto LABEL_26;
      }
      v22 = memcmp(v18, v11, v19);
      v23 = v17 < v10;
      if (v22)
        v23 = v22 < 0;
      if (!v23)
        return v12;
      v7 = v12[1];
    }
    while (v7);
    v8 = v12 + 1;
LABEL_26:
    v24 = operator new(0x40uLL);
    v25 = (std::string *)(v24 + 4);
    if (*(char *)(a3 + 23) < 0)
      goto LABEL_29;
  }
  else
  {
    v12 = a1 + 1;
    v24 = operator new(0x40uLL);
    v25 = (std::string *)(v24 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
LABEL_29:
      std::string::__init_copy_ctor_external(v25, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
      goto LABEL_30;
    }
  }
  *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
  v25->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
LABEL_30:
  v24[7] = *a4;
  *v24 = 0;
  v24[1] = 0;
  v24[2] = v12;
  *v8 = v24;
  v26 = (uint64_t *)**a1;
  v27 = v24;
  if (v26)
  {
    *a1 = v26;
    v27 = *v8;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v27);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v24;
}

void sub_1910B9184(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

MIL::IRNamedValueType **std::unique_ptr<MIL::IRNamedValueType>::~unique_ptr[abi:ne180100](MIL::IRNamedValueType **a1)
{
  MIL::IRNamedValueType *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    MIL::IRNamedValueType::~IRNamedValueType(v2);
    MEMORY[0x19401CD90]();
  }
  return a1;
}

MIL::IRNamedValueType *std::__shared_ptr_pointer<MIL::IRNamedValueType  *>::__on_zero_shared(uint64_t a1)
{
  MIL::IRNamedValueType *result;

  result = *(MIL::IRNamedValueType **)(a1 + 24);
  if (result)
  {
    MIL::IRNamedValueType::~IRNamedValueType(result);
    JUMPOUT(0x19401CD90);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRNamedValueType  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A870BELL)
    return a1 + 24;
  if (((v3 & 0x8000000191A870BELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A870BELL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A870BELL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

unint64_t `anonymous namespace'::GetVariableTotalSizes(MIL::IRProgram const&,std::string const&)::$_1::operator()(MIL::IRValueType *a1)
{
  const MIL::IRValueType *v2;
  MIL::IRTensorValueType *v3;
  _QWORD **v4;
  MIL::IRMemoryLayoutValueType *v6;
  MIL::IRTensorBufferValueType *v7;
  uint64_t Strides;
  MIL::IRConstantProperty *v9;
  uint64_t Int64ScalarValue;
  uint64_t v11;
  _QWORD **Shape;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int DataType;
  uint64_t v17;
  std::logic_error *exception;

  if (E5Common::Utils::IsTensor((uint64_t)a1))
  {
    v3 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(a1);
    if (MIL::IRTensorValueType::Rank(v3) == 1)
    {
      v4 = (_QWORD **)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v3 + 96))(v3);
      if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)**v4 + 24))(**v4))
        return -1;
    }
    v13 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v3 + 16))(v3);
    v14 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v3 + 88))(v3);
    v15 = Espresso::AOT::IRDataTypeToByteSize(v14);
    goto LABEL_16;
  }
  if (!E5Common::Utils::IsTensorBuffer(a1, v2))
    return 0;
  v6 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a1);
  v7 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v6);
  if (MIL::IRTensorBufferValueType::GetRank(v7) == 1)
  {
    Strides = MIL::IRTensorBufferValueType::GetStrides(v7);
    if (*(_QWORD *)(Strides + 8) == *(_QWORD *)Strides)
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    v9 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(**(MIL::IRProperty ***)Strides);
    Int64ScalarValue = MIL::IRConstantProperty::GetInt64ScalarValue(v9);
    if (Int64ScalarValue > 0)
    {
      v11 = Int64ScalarValue;
      Shape = (_QWORD **)MIL::IRTensorBufferValueType::GetShape(v7);
      if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)**Shape + 24))(**Shape))
        return -1;
      goto LABEL_15;
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Stride must be positive.");
LABEL_22:
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  if (MIL::IRTensorBufferValueType::GetRank(v7) >= 2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Only 0D/1D are supported.");
    goto LABEL_22;
  }
  v11 = 1;
LABEL_15:
  v15 = (*(uint64_t (**)(MIL::IRTensorBufferValueType *))(*(_QWORD *)v7 + 16))(v7) * v11;
  DataType = MIL::IRTensorBufferValueType::GetDataType(v7);
  v13 = Espresso::AOT::IRDataTypeToByteSize(DataType);
LABEL_16:
  v17 = v15 * v13 + 126;
  if (v15 * v13 >= -63)
    v17 = v15 * v13 + 63;
  return v17 & 0xFFFFFFFFFFFFFFC0;
}

void sub_1910B9478(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1910B948C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned long long>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void **v20;
  unsigned __int8 *j;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void **v25;
  unsigned __int8 *i;
  _QWORD *v27;
  std::string *v28;
  float v29;
  float v30;
  _QWORD *v31;
  _QWORD *v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  size_t prime;
  int8x8_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD v44[2];
  char v45;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v44, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v14[1];
            if (v22 == v10)
            {
              v23 = *((unsigned __int8 *)v14 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v14 + 39);
              else
                v24 = v14[3];
              if (v24 == v16)
              {
                v25 = (const void **)(v14 + 2);
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*v25, v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  for (i = v5; *(unsigned __int8 *)v25 == *i; ++i)
                  {
                    v25 = (const void **)((char *)v25 + 1);
                    if (!--v23)
                      return v14;
                  }
                }
              }
            }
            else if ((v22 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              v20 = (const void **)(v14 + 2);
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*v20, v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                for (j = v5; *(unsigned __int8 *)v20 == *j; ++j)
                {
                  v20 = (const void **)((char *)v20 + 1);
                  if (!--v18)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v27 = operator new(0x30uLL);
  v44[0] = v27;
  v44[1] = a1 + 16;
  v45 = 0;
  *v27 = 0;
  v27[1] = v10;
  v28 = (std::string *)(v27 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v28->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v27[4] = *(_QWORD *)(a3 + 16);
  }
  v27[5] = *(_QWORD *)(a3 + 24);
  v45 = 1;
  v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v30 = *(float *)(a1 + 32);
  if (!v11 || (float)(v30 * (float)v11) < v29)
  {
    v33 = 1;
    if (v11 >= 3)
      v33 = (v11 & (v11 - 1)) != 0;
    v34 = v33 | (2 * v11);
    v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35)
      prime = v35;
    else
      prime = v34;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v37)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v37)
    {
      v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v37 < 3uLL || (v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime < *(_QWORD *)&v37)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v41 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v32 = (_QWORD *)v44[0];
        if (v31)
          goto LABEL_57;
      }
      else
      {
        v3 = v10;
        v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v32 = (_QWORD *)v44[0];
        if (v31)
          goto LABEL_57;
      }
    }
    else
    {
      v3 = v41 & v10;
      v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v41 & v10));
      v32 = (_QWORD *)v44[0];
      if (v31)
        goto LABEL_57;
    }
LABEL_81:
    *v32 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v44[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v44[0])
    {
      v42 = *(_QWORD *)(*(_QWORD *)v44[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v42 >= v11)
          v42 %= v11;
      }
      else
      {
        v42 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v42) = v44[0];
    }
    goto LABEL_92;
  }
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v32 = (_QWORD *)v44[0];
  if (!v31)
    goto LABEL_81;
LABEL_57:
  *v32 = *v31;
  *v31 = v44[0];
LABEL_92:
  v14 = (uint64_t *)v44[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_1910B98EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1910B9900(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::MakeTypeWithTotalSizeAttr(_anonymous_namespace_ *this, MIL::MILContext *a2, const MIL::IRValueType *a3)
{
  const MIL::IRValueType *v4;
  uint64_t v5;
  uint64_t v6;
  MIL::IRTensorValueType *Scalar;
  std::__shared_weak_count *v8;
  MIL::IRMemoryLayoutValueType *v9;
  MIL::IRTensorBufferValueType *v10;
  _BYTE *v11;
  _BYTE *v12;
  size_t v13;
  _BYTE *v14;
  _BYTE *v15;
  size_t v16;
  _BYTE *v17;
  _BYTE *v18;
  size_t v19;
  uint64_t Attributes;
  MIL::IRTensorValueType *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  int64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void **v32;
  void **v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  void **v41;
  void **v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  void *v46;
  std::runtime_error *exception;
  std::__shared_weak_count_vtbl *v49;
  void *v50;
  void *v51;
  std::__shared_weak_count_vtbl *v52;
  void *v53;
  __int128 __p;
  char *v55;
  std::__shared_weak_count_vtbl *v56;
  std::__shared_weak_count *v57;
  _QWORD v58[2];
  void **v59;

  if (E5Common::Utils::IsTensor((uint64_t)a2))
  {
    v5 = (*(uint64_t (**)(MIL::MILContext *))(*(_QWORD *)a2 + 24))(a2);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 80))(v5);
    std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v58, v6);
    Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar();
    MIL::IRTensorValueType::MakeUInt64Value(Scalar);
    strcpy((char *)&__p, "total_size");
    HIBYTE(v55) = 10;
    v56 = v52;
    if (v52)
    {
      v8 = (std::__shared_weak_count *)operator new();
      v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
      v8->__shared_owners_ = 0;
      v8->__shared_weak_owners_ = 0;
      v8[1].__vftable = v52;
    }
    else
    {
      v8 = 0;
    }
    v57 = v8;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>>((uint64_t)v58, (uint64_t)&__p, (uint64_t)&__p);
    v23 = v57;
    if (!v57)
      goto LABEL_21;
    p_shared_owners = (unint64_t *)&v57->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      if ((SHIBYTE(v55) & 0x80000000) == 0)
      {
LABEL_23:
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5);
        v26 = *(_BYTE **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5);
        v27 = *(_BYTE **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5) + 8);
        __p = 0uLL;
        v55 = 0;
        v28 = v27 - v26;
        if (v27 != v26)
        {
          if (v28 < 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v29 = (char *)operator new(v27 - v26);
          v30 = &v29[8 * (v28 >> 3)];
          *(_QWORD *)&__p = v29;
          v55 = v30;
          memmove(v29, v26, v28);
          *((_QWORD *)&__p + 1) = v30;
        }
        v31 = MIL::IRTensorValueType::MakeWithShape();
        if ((_QWORD)__p)
        {
          *((_QWORD *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
        v32 = v59;
        if (v59)
        {
          do
          {
            while (1)
            {
              v33 = (void **)*v32;
              v34 = (std::__shared_weak_count *)v32[6];
              if (v34)
              {
                v35 = (unint64_t *)&v34->__shared_owners_;
                do
                  v36 = __ldaxr(v35);
                while (__stlxr(v36 - 1, v35));
                if (!v36)
                {
                  ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                  std::__shared_weak_count::__release_weak(v34);
                }
              }
              if (*((char *)v32 + 39) < 0)
                break;
              operator delete(v32);
              v32 = v33;
              if (!v33)
                goto LABEL_38;
            }
            operator delete(v32[2]);
            operator delete(v32);
            v32 = v33;
          }
          while (v33);
        }
LABEL_38:
        v37 = (void *)v58[0];
        v58[0] = 0;
        if (!v37)
          return v31;
LABEL_64:
        operator delete(v37);
        return v31;
      }
    }
    else
    {
LABEL_21:
      if ((SHIBYTE(v55) & 0x80000000) == 0)
        goto LABEL_23;
    }
    operator delete((void *)__p);
    goto LABEL_23;
  }
  if (!E5Common::Utils::IsTensorBuffer(a2, v4))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unexpected type.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v9 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a2);
  v10 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v9);
  v11 = *(_BYTE **)MIL::IRTensorBufferValueType::GetShape(v10);
  v12 = *(_BYTE **)(MIL::IRTensorBufferValueType::GetShape(v10) + 8);
  v53 = 0;
  v13 = v12 - v11;
  if (v12 != v11)
  {
    if ((v13 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v53 = operator new(v12 - v11);
    memmove(v53, v11, v13);
  }
  v14 = *(_BYTE **)MIL::IRTensorBufferValueType::GetStrides(v10);
  v15 = *(_BYTE **)(MIL::IRTensorBufferValueType::GetStrides(v10) + 8);
  v51 = 0;
  v16 = v15 - v14;
  if (v15 != v14)
  {
    if ((v16 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v51 = operator new(v15 - v14);
    memmove(v51, v14, v16);
  }
  v17 = *(_BYTE **)MIL::IRTensorBufferValueType::GetInterleaveFactors(v10);
  v18 = *(_BYTE **)(MIL::IRTensorBufferValueType::GetInterleaveFactors(v10) + 8);
  v50 = 0;
  v19 = v18 - v17;
  if (v18 != v17)
  {
    if ((v19 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v50 = operator new(v18 - v17);
    memmove(v50, v17, v19);
  }
  Attributes = MIL::IRTensorBufferValueType::GetAttributes(v10);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v58, Attributes);
  v21 = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRTensorValueType::MakeUInt64Value(v21);
  strcpy((char *)&__p, "total_size");
  HIBYTE(v55) = 10;
  v56 = v49;
  if (v49)
  {
    v22 = (std::__shared_weak_count *)operator new();
    v22->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
    v22->__shared_owners_ = 0;
    v22->__shared_weak_owners_ = 0;
    v22[1].__vftable = v49;
  }
  else
  {
    v22 = 0;
  }
  v57 = v22;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>>((uint64_t)v58, (uint64_t)&__p, (uint64_t)&__p);
  v38 = v57;
  if (!v57)
    goto LABEL_45;
  v39 = (unint64_t *)&v57->__shared_owners_;
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (v40)
  {
LABEL_45:
    if ((SHIBYTE(v55) & 0x80000000) == 0)
      goto LABEL_47;
    goto LABEL_46;
  }
  ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
  std::__shared_weak_count::__release_weak(v38);
  if (SHIBYTE(v55) < 0)
LABEL_46:
    operator delete((void *)__p);
LABEL_47:
  MIL::IRTensorBufferValueType::GetDataType(v10);
  v31 = MIL::IRTensorBufferValueType::MakeWithShape();
  v41 = v59;
  if (v59)
  {
    do
    {
      while (1)
      {
        v42 = (void **)*v41;
        v43 = (std::__shared_weak_count *)v41[6];
        if (v43)
        {
          v44 = (unint64_t *)&v43->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        if (*((char *)v41 + 39) < 0)
          break;
        operator delete(v41);
        v41 = v42;
        if (!v42)
          goto LABEL_57;
      }
      operator delete(v41[2]);
      operator delete(v41);
      v41 = v42;
    }
    while (v42);
  }
LABEL_57:
  v46 = (void *)v58[0];
  v58[0] = 0;
  if (v46)
    operator delete(v46);
  if (v50)
    operator delete(v50);
  if (v51)
    operator delete(v51);
  v37 = v53;
  if (v53)
    goto LABEL_64;
  return v31;
}

void sub_1910B9F38(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1910B9F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  void *v26;
  void *v27;

  if (a24 < 0)
    operator delete(__p);
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v24 - 88);
  if (a10)
  {
    operator delete(a10);
    v26 = a13;
    if (!a13)
    {
LABEL_7:
      v27 = a16;
      if (!a16)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  else
  {
    v26 = a13;
    if (!a13)
      goto LABEL_7;
  }
  operator delete(v26);
  v27 = a16;
  if (!a16)
LABEL_9:
    _Unwind_Resume(a1);
LABEL_8:
  operator delete(v27);
  goto LABEL_9;
}

void sub_1910BA080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    JUMPOUT(0x1910BA06CLL);
  JUMPOUT(0x1910BA044);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void **v20;
  unsigned __int8 *j;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void **v25;
  unsigned __int8 *i;
  char *v27;
  std::string *v28;
  float v29;
  float v30;
  _QWORD *v31;
  _QWORD *v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  size_t prime;
  int8x8_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD v44[2];
  char v45;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v44, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v14[1];
            if (v22 == v10)
            {
              v23 = *((unsigned __int8 *)v14 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v14 + 39);
              else
                v24 = v14[3];
              if (v24 == v16)
              {
                v25 = (const void **)(v14 + 2);
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*v25, v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  for (i = v5; *(unsigned __int8 *)v25 == *i; ++i)
                  {
                    v25 = (const void **)((char *)v25 + 1);
                    if (!--v23)
                      return v14;
                  }
                }
              }
            }
            else if ((v22 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              v20 = (const void **)(v14 + 2);
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*v20, v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                for (j = v5; *(unsigned __int8 *)v20 == *j; ++j)
                {
                  v20 = (const void **)((char *)v20 + 1);
                  if (!--v18)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v27 = (char *)operator new(0x38uLL);
  v44[0] = v27;
  v44[1] = a1 + 16;
  v45 = 0;
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v27 + 1) = v10;
  v28 = (std::string *)(v27 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v28->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v27 + 4) = *(_QWORD *)(a3 + 16);
  }
  *(_OWORD *)(v27 + 40) = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v45 = 1;
  v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v30 = *(float *)(a1 + 32);
  if (!v11 || (float)(v30 * (float)v11) < v29)
  {
    v33 = 1;
    if (v11 >= 3)
      v33 = (v11 & (v11 - 1)) != 0;
    v34 = v33 | (2 * v11);
    v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35)
      prime = v35;
    else
      prime = v34;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v37)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v37)
    {
      v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v37 < 3uLL || (v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime < *(_QWORD *)&v37)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v41 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v32 = (_QWORD *)v44[0];
        if (v31)
          goto LABEL_57;
      }
      else
      {
        v3 = v10;
        v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v32 = (_QWORD *)v44[0];
        if (v31)
          goto LABEL_57;
      }
    }
    else
    {
      v3 = v41 & v10;
      v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v41 & v10));
      v32 = (_QWORD *)v44[0];
      if (v31)
        goto LABEL_57;
    }
LABEL_81:
    *v32 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v44[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v44[0])
    {
      v42 = *(_QWORD *)(*(_QWORD *)v44[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v42 >= v11)
          v42 %= v11;
      }
      else
      {
        v42 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v42) = v44[0];
    }
    goto LABEL_92;
  }
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v32 = (_QWORD *)v44[0];
  if (!v31)
    goto LABEL_81;
LABEL_57:
  *v32 = *v31;
  *v31 = v44[0];
LABEL_92:
  v14 = (uint64_t *)v44[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_1910BA51C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1910BA530(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::shared_ptr<MIL::IRArgument>>::vector(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *(_QWORD **)a2;
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (uint64_t)v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD **)a2)
  {
    if (v5 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v6 = operator new((size_t)v4 - *(_QWORD *)a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[2 * (v5 >> 4)];
    do
    {
      v7 = v3[1];
      *v6 = *v3;
      v6[1] = v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v3 += 2;
      v6 += 2;
    }
    while (v3 != v4);
    a1[1] = v6;
  }
  return a1;
}

void sub_1910BA5E8(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    std::vector<std::shared_ptr<MIL::IRArgument>>::vector[abi:ne180100]((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::CreateCastOp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count_vtbl *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::logic_error *exception;
  std::string __p;
  std::__shared_weak_count_vtbl *v35;
  std::__shared_weak_count *v36;
  void *v37[2];
  char v38;
  std::string v39;
  void *v40;
  char v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  void *v46;
  char v47;
  std::__shared_weak_count_vtbl *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  char v51;
  uint64_t v52;
  std::__shared_weak_count *v53;

  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a6 + 24))(a6);
  if (!v8)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Only tensor types are supported.");
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v9 = v8;
  MIL::MILContext::GetOpset();
  v51 = 4;
  strcpy((char *)&v49, "cast");
  MIL::IROpset::TryGetOperatorSharedPtr();
  MIL::IRTensorValueType::MakeScalar();
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 88))(v9);
  MIL::IRDataTypeToString();
  MIL::IRTensorValueType::MakeStringValue();
  if (v47 < 0)
    operator delete(v46);
  v42 = v52;
  v43 = v53;
  if (v53)
  {
    p_shared_owners = (unint64_t *)&v53->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::Make();
  v41 = 1;
  LOWORD(v40) = 120;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v39 = *(std::string *)a4;
  MIL::Builder::OperationBuilder::AddInput();
  v38 = 5;
  strcpy((char *)v37, "dtype");
  v35 = v48;
  if (v48)
  {
    v12 = (std::__shared_weak_count *)operator new();
    v13 = v48;
    v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
    v12->__shared_owners_ = 0;
    v12->__shared_weak_owners_ = 0;
    v12[1].__vftable = v13;
  }
  else
  {
    v12 = 0;
  }
  v36 = v12;
  v48 = 0;
  MIL::Builder::OperationBuilder::AddInput();
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    __p = *(std::string *)a5;
  MIL::Builder::OperationBuilder::AddOutput();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v14 = v50;
  if (v50)
  {
    v15 = (unint64_t *)&v50->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v36;
  if (v36)
  {
    v18 = (unint64_t *)&v36->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      if ((v38 & 0x80000000) == 0)
        goto LABEL_29;
      goto LABEL_28;
    }
  }
  if (v38 < 0)
LABEL_28:
    operator delete(v37[0]);
LABEL_29:
  v20 = v45;
  if (!v45)
    goto LABEL_33;
  v21 = (unint64_t *)&v45->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_34:
      if ((v41 & 0x80000000) == 0)
        goto LABEL_35;
LABEL_41:
      operator delete(v40);
      v23 = v44;
      if (!v44)
        goto LABEL_46;
      goto LABEL_42;
    }
  }
  else
  {
LABEL_33:
    if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_34;
  }
  operator delete(v39.__r_.__value_.__l.__data_);
  if (v41 < 0)
    goto LABEL_41;
LABEL_35:
  v23 = v44;
  if (!v44)
    goto LABEL_46;
LABEL_42:
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
LABEL_46:
  v26 = v43;
  if (v43)
  {
    v27 = (unint64_t *)&v43->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  MIL::Builder::OperationBuilder::SetSpecificationOpsetName();
  v29 = v48;
  v48 = 0;
  if (v29)
    (*((void (**)(std::__shared_weak_count_vtbl *))v29->~__shared_weak_count + 1))(v29);
  v30 = v53;
  if (v53)
  {
    v31 = (unint64_t *)&v53->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

void sub_1910BAA40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,char a38,uint64_t a39,char a40)
{
  uint64_t v40;
  uint64_t v42;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v40 - 104);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (a22 < 0)
    operator delete(__p);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a40);
  if (a28 < 0)
    operator delete(a23);
  if (a35 < 0)
    operator delete(a30);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a38);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  v42 = *(_QWORD *)(v40 - 112);
  *(_QWORD *)(v40 - 112) = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v40 - 80);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::ReplaceProducer(uint64_t a1, _QWORD *a2, unsigned __int8 *a3, uint64_t a4)
{
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  unsigned int i;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void **v16;
  void *v17;
  std::string::size_type *v18;
  std::string::size_type size;
  std::string::size_type v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  void **v30;
  std::string::size_type v31;
  std::string::size_type *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t OutputName;
  size_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  __int128 v45;
  const std::string::value_type *v46;
  uint64_t *v47;
  unint64_t v48;
  std::string *v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  __int128 v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count *v90;
  std::string v91;
  std::string v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  uint64_t v95;
  std::string v96;
  MIL::Builder::OperationBuilder *v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count *v99;
  MIL::Builder::OperationBuilder *v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  std::string v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count *v106;
  std::__shared_weak_count *v107;
  std::string::size_type v108;
  std::__shared_weak_count *v109;
  std::string v110;
  std::__shared_weak_count *v111;
  std::string v112;
  std::string v113;
  std::__shared_weak_count *v114;

  MIL::Builder::BlockBuilder::GetOperation();
  v97 = v100;
  v98 = v101;
  if (v101)
  {
    p_shared_owners = (unint64_t *)&v101->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::TryGetOperatorSharedPtr(v100);
  MIL::Builder::OperationBuilder::Make();
  if (v114)
  {
    v9 = &v114->__shared_owners_;
    do
      v10 = __ldaxr((unint64_t *)v9);
    while (__stlxr(v10 - 1, (unint64_t *)v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  MIL::Builder::OperationBuilder::GetSpecificationOpsetName(v97);
  MIL::Builder::OperationBuilder::SetSpecificationOpsetName();
  MIL::Builder::OperationBuilder::GetParameterNames(v97);
  v11 = (uint64_t *)v113.__r_.__value_.__r.__words[2];
  if (v113.__r_.__value_.__r.__words[2])
  {
    do
    {
      while (1)
      {
        if (*((char *)v11 + 39) < 0)
          std::string::__init_copy_ctor_external(&v112, (const std::string::value_type *)v11[2], v11[3]);
        else
          v112 = *(std::string *)(v11 + 2);
        for (i = 0; MIL::Builder::OperationBuilder::GetNumArguments() > (unint64_t)i; ++i)
        {
          if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v110, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
          else
            v110 = v112;
          MIL::Builder::OperationBuilder::GetArgumentForParameter();
          MIL::Builder::OperationBuilder::AddInput();
          v13 = v111;
          if (v111)
          {
            v14 = (unint64_t *)&v111->__shared_owners_;
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 - 1, v14));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v110.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
          break;
        v11 = (uint64_t *)*v11;
        if (!v11)
          goto LABEL_30;
      }
      operator delete(v112.__r_.__value_.__l.__data_);
      v11 = (uint64_t *)*v11;
    }
    while (v11);
LABEL_30:
    v16 = (void **)v113.__r_.__value_.__r.__words[2];
    if (v113.__r_.__value_.__r.__words[2])
    {
      do
      {
        v30 = (void **)*v16;
        if (*((char *)v16 + 39) < 0)
          operator delete(v16[2]);
        operator delete(v16);
        v16 = v30;
      }
      while (v30);
    }
  }
  v17 = (void *)v113.__r_.__value_.__r.__words[0];
  v113.__r_.__value_.__r.__words[0] = 0;
  if (v17)
    operator delete(v17);
  MIL::Builder::OperationBuilder::GetBlocks(v97);
  size = v113.__r_.__value_.__l.__size_;
  v18 = (std::string::size_type *)v113.__r_.__value_.__r.__words[0];
  if (v113.__r_.__value_.__r.__words[0] == v113.__r_.__value_.__l.__size_)
  {
    if (v113.__r_.__value_.__r.__words[0])
      goto LABEL_59;
    goto LABEL_69;
  }
  do
  {
    v20 = *v18;
    v21 = (std::__shared_weak_count *)v18[1];
    v112.__r_.__value_.__r.__words[0] = *v18;
    v112.__r_.__value_.__l.__size_ = (std::string::size_type)v21;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      v109 = v21;
      do
        v24 = __ldxr(v22);
      while (__stxr(v24 + 1, v22));
    }
    else
    {
      v109 = 0;
    }
    v108 = v20;
    MIL::Builder::OperationBuilder::AddBlock();
    if (!v109)
      goto LABEL_48;
    v25 = &v109->__shared_owners_;
    do
      v26 = __ldaxr((unint64_t *)v25);
    while (__stlxr(v26 - 1, (unint64_t *)v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
      v27 = (std::__shared_weak_count *)v112.__r_.__value_.__l.__size_;
      if (!v112.__r_.__value_.__l.__size_)
        goto LABEL_36;
    }
    else
    {
LABEL_48:
      v27 = (std::__shared_weak_count *)v112.__r_.__value_.__l.__size_;
      if (!v112.__r_.__value_.__l.__size_)
        goto LABEL_36;
    }
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
LABEL_36:
    v18 += 2;
  }
  while (v18 != (std::string::size_type *)size);
  v18 = (std::string::size_type *)v113.__r_.__value_.__r.__words[0];
  if (v113.__r_.__value_.__r.__words[0])
  {
LABEL_59:
    v31 = v113.__r_.__value_.__l.__size_;
    v32 = v18;
    if ((std::string::size_type *)v113.__r_.__value_.__l.__size_ != v18)
    {
      do
      {
        v33 = *(std::__shared_weak_count **)(v31 - 8);
        if (v33)
        {
          v34 = (unint64_t *)&v33->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        v31 -= 16;
      }
      while ((std::string::size_type *)v31 != v18);
      v32 = (std::string::size_type *)v113.__r_.__value_.__r.__words[0];
    }
    v113.__r_.__value_.__l.__size_ = (std::string::size_type)v18;
    operator delete(v32);
  }
LABEL_69:
  v36 = 0;
  while (2)
  {
    if (v36 < MIL::Builder::OperationBuilder::GetNumOutputs(v97))
    {
      OutputName = MIL::Builder::OperationBuilder::GetOutputName(v97);
      v38 = *(_QWORD *)(OutputName + 8);
      if (*(char *)(OutputName + 23) >= 0)
        v39 = *(unsigned __int8 *)(OutputName + 23);
      else
        v39 = *(_QWORD *)(OutputName + 8);
      v40 = a3[23];
      v41 = (char)v40;
      if ((v40 & 0x80u) != 0)
        v40 = *((_QWORD *)a3 + 1);
      if (v39 != v40)
        goto LABEL_88;
      if (v41 >= 0)
        v42 = a3;
      else
        v42 = *(unsigned __int8 **)a3;
      if ((*(_BYTE *)(OutputName + 23) & 0x80) != 0)
      {
        v46 = *(const std::string::value_type **)OutputName;
        if (memcmp(*(const void **)OutputName, v42, v38))
          goto LABEL_92;
      }
      else if (*(_BYTE *)(OutputName + 23))
      {
        v43 = (unsigned __int8 *)OutputName;
        v44 = *(unsigned __int8 *)(OutputName + 23);
        while (*v43 == *v42)
        {
          ++v43;
          ++v42;
          if (!--v44)
            goto LABEL_99;
        }
LABEL_88:
        if ((*(_BYTE *)(OutputName + 23) & 0x80) == 0)
        {
          v45 = *(_OWORD *)OutputName;
          v112.__r_.__value_.__r.__words[2] = *(_QWORD *)(OutputName + 16);
          *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v45;
LABEL_93:
          MIL::Builder::OperationBuilder::GetOutputType(v97);
          MIL::Builder::OperationBuilder::AddOutput();
          if (!v106)
            goto LABEL_97;
          v47 = &v106->__shared_owners_;
          do
            v48 = __ldaxr((unint64_t *)v47);
          while (__stlxr(v48 - 1, (unint64_t *)v47));
          if (v48)
          {
LABEL_97:
            if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_98;
LABEL_71:
            ++v36;
            continue;
          }
          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
          std::__shared_weak_count::__release_weak(v106);
          if ((SHIBYTE(v112.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_71;
LABEL_98:
          v49 = &v112;
LABEL_70:
          operator delete(v49->__r_.__value_.__l.__data_);
          goto LABEL_71;
        }
        v46 = *(const std::string::value_type **)OutputName;
LABEL_92:
        std::string::__init_copy_ctor_external(&v112, v46, v38);
        goto LABEL_93;
      }
LABEL_99:
      if (*(char *)(a4 + 23) < 0)
        std::string::__init_copy_ctor_external(&v113, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
      else
        v113 = *(std::string *)a4;
      MIL::Builder::OperationBuilder::AddOutput();
      if (!v107)
        goto LABEL_108;
      v50 = &v107->__shared_owners_;
      do
        v51 = __ldaxr((unint64_t *)v50);
      while (__stlxr(v51 - 1, (unint64_t *)v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
        if ((SHIBYTE(v113.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_71;
      }
      else
      {
LABEL_108:
        if ((SHIBYTE(v113.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_71;
      }
      v49 = &v113;
      goto LABEL_70;
    }
    break;
  }
  v52 = *(uint64_t **)(MIL::Builder::OperationBuilder::GetAttributes(v97) + 16);
  if (v52)
  {
    while (1)
    {
      if (*((char *)v52 + 39) < 0)
        std::string::__init_copy_ctor_external(&v104, (const std::string::value_type *)v52[2], v52[3]);
      else
        v104 = *(std::string *)(v52 + 2);
      v55 = (std::__shared_weak_count *)v52[6];
      v102 = v52[5];
      v103 = v55;
      if (v55)
      {
        v56 = (unint64_t *)&v55->__shared_owners_;
        do
          v57 = __ldxr(v56);
        while (__stxr(v57 + 1, v56));
      }
      MIL::Builder::OperationBuilder::SetAttribute();
      v58 = v105;
      if (!v105)
        goto LABEL_131;
      v59 = (unint64_t *)&v105->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
        v61 = v103;
        if (v103)
        {
LABEL_132:
          v62 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
      }
      else
      {
LABEL_131:
        v61 = v103;
        if (v103)
          goto LABEL_132;
      }
      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v104.__r_.__value_.__l.__data_);
        v52 = (uint64_t *)*v52;
        if (!v52)
          goto LABEL_113;
      }
      else
      {
        v52 = (uint64_t *)*v52;
        if (!v52)
          goto LABEL_113;
      }
    }
  }
  if (!v98)
    goto LABEL_117;
LABEL_113:
  v53 = &v98->__shared_owners_;
  do
    v54 = __ldaxr((unint64_t *)v53);
  while (__stlxr(v54 - 1, (unint64_t *)v53));
  if (!v54)
  {
    ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
    std::__shared_weak_count::__release_weak(v98);
    if (*(char *)(a4 + 23) < 0)
      goto LABEL_141;
LABEL_118:
    v96 = *(std::string *)a4;
  }
  else
  {
LABEL_117:
    if ((*(char *)(a4 + 23) & 0x80000000) == 0)
      goto LABEL_118;
LABEL_141:
    std::string::__init_copy_ctor_external(&v96, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  }
  v94 = 0;
  v95 = 0;
  MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable();
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v96.__r_.__value_.__l.__data_);
  v64 = 0;
  while (2)
  {
    if (v64 < MIL::Builder::OperationBuilder::GetNumOutputs(v100))
    {
      v65 = MIL::Builder::OperationBuilder::GetOutputName(v100);
      if (*(char *)(v65 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v113, *(const std::string::value_type **)v65, *(_QWORD *)(v65 + 8));
      }
      else
      {
        v66 = *(_OWORD *)v65;
        v113.__r_.__value_.__r.__words[2] = *(_QWORD *)(v65 + 16);
        *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v66;
      }
      Espresso::MILTranslator::NameGenerator::NameForPrefix(a2, (uint64_t)&v113, (uint64_t)&v112);
      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v92, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
      else
        v92 = v112;
      MIL::Builder::OperationBuilder::RenameOutput();
      v67 = v93;
      if (!v93)
        goto LABEL_158;
      v68 = (unint64_t *)&v93->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_162;
LABEL_159:
        if ((SHIBYTE(v113.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_160;
LABEL_163:
        std::string::__init_copy_ctor_external(&v91, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
      }
      else
      {
LABEL_158:
        if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_159;
LABEL_162:
        operator delete(v92.__r_.__value_.__l.__data_);
        if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_163;
LABEL_160:
        v91 = v113;
      }
      MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable();
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v91.__r_.__value_.__l.__data_);
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_145;
      }
      else if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_145:
        operator delete(v112.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v113.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_146:
          ++v64;
          continue;
        }
LABEL_169:
        operator delete(v113.__r_.__value_.__l.__data_);
        goto LABEL_146;
      }
      if ((SHIBYTE(v113.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_146;
      goto LABEL_169;
    }
    break;
  }
  v90 = v99;
  if (v99)
  {
    v70 = (unint64_t *)&v99->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v89 = v101;
  if (v101)
  {
    v72 = (unint64_t *)&v101->__shared_owners_;
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
  }
  MIL::Builder::BlockBuilder::AddOperation();
  if (v89)
  {
    v74 = (unint64_t *)&v89->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  if (v90)
  {
    v76 = (unint64_t *)&v90->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v88 = v101;
  if (v101)
  {
    v78 = (unint64_t *)&v101->__shared_owners_;
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 1, v78));
  }
  MIL::Builder::BlockBuilder::RemoveOperation();
  if (v88)
  {
    v80 = (unint64_t *)&v88->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v82 = v99;
  if (v99)
  {
    v83 = (unint64_t *)&v99->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = v101;
  if (v101)
  {
    v86 = (unint64_t *)&v101->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
}

void sub_1910BB668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char a42,uint64_t a43,char a44,uint64_t a45,char a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a44);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a46);
  _Unwind_Resume(a1);
}

void sub_1910BB838()
{
  uint64_t v0;

  if (*(char *)(v0 - 153) < 0)
    JUMPOUT(0x1910BB848);
  JUMPOUT(0x1910BB88CLL);
}

void sub_1910BB850()
{
  JUMPOUT(0x1910BB88CLL);
}

void sub_1910BB858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v37;

  if (*(char *)(v37 - 153) < 0)
    operator delete(*(void **)(v37 - 176));
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v37 - 144);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRValue const>> const&>(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_1910BB9C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1910BB9D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<Espresso::AOT::IsFunctionSegmented(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::IsFunctionSegmented(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<Espresso::AOT::IsFunctionSegmented(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::IsFunctionSegmented(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E2DB2058;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<Espresso::AOT::IsFunctionSegmented(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::IsFunctionSegmented(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E2DB2058;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<Espresso::AOT::IsFunctionSegmented(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::IsFunctionSegmented(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::operator()(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t Function;
  int v7;
  void *__p;
  char v10;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 128))(v4))
    return 1;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v5 + 120))(&__p, v5, a2);
  Function = MIL::IRProgram::GetFunction();
  if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)Function + 200))(Function, a1[2]) & 1) != 0
    || ((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)Function + 200))(Function, a1[3]) & 1) != 0
    || ((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)Function + 200))(Function, a1[6]) & 1) != 0
    || ((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)Function + 200))(Function, a1[4]) & 1) != 0
    || ((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)Function + 200))(Function, a1[5]) & 1) != 0)
  {
    v7 = 1;
    if ((v10 & 0x80000000) == 0)
      return v7 != 0;
LABEL_11:
    operator delete(__p);
    return v7 != 0;
  }
  v7 = 0;
  if (v10 < 0)
    goto LABEL_11;
  return v7 != 0;
}

void sub_1910BBBAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::AOT::IsFunctionSegmented(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::IsFunctionSegmented(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT19IsFunctionSegmentedERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS5_11char_traitsIc"
                     "EENS5_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN8Espresso3AOT19IsFunctionSegmentedERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS5_11ch"
                                "ar_traitsIcEENS5_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT19IsFunctionSegmentedERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT19IsFunctionSegmentedERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<Espresso::AOT::IsFunctionSegmented(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::IsFunctionSegmented(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::target_type()
{
}

void std::__function::__func<Espresso::AOT::GetCallees(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::GetCallees(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<Espresso::AOT::GetCallees(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::GetCallees(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DB1FA8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::AOT::GetCallees(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::GetCallees(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DB1FA8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<Espresso::AOT::GetCallees(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::GetCallees(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::runtime_error *exception;
  std::runtime_error *v12;
  std::string *v13;
  __int128 v14;
  std::string v15;
  std::string v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v19[2];
  char v20;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 128))(v4))
    return 1;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v5 + 120))(v19, v5, a2);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, void **))(**(_QWORD **)(a1 + 8) + 64))(&v17, *(_QWORD *)(a1 + 8), v19);
  if (!v17)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v16);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(*(_QWORD **)(a1 + 16), (unsigned __int8 *)v19))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::string const&,std::shared_ptr<MIL::IRFunction>&>(*(_QWORD *)(a1 + 16), (uint64_t)v19, (uint64_t)v19, &v17);
    if (!v6)
    {
      v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v13 = std::string::append(&v15, " into function map of callees.");
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v16.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v12, &v16);
      __cxa_throw(v12, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  v7 = v18;
  if (!v18)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if ((v20 & 0x80000000) == 0)
      return 1;
  }
  else
  {
LABEL_9:
    if ((v20 & 0x80000000) == 0)
      return 1;
  }
  operator delete(v19[0]);
  return 1;
}

void sub_1910BBEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::__shared_weak_count *a23)
{
  void *v23;
  int v24;
  uint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v28;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v24)
  {
LABEL_8:
    if (a23)
    {
      p_shared_owners = (unint64_t *)&a23->__shared_owners_;
      do
        v28 = __ldaxr(p_shared_owners);
      while (__stlxr(v28 - 1, p_shared_owners));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))a23->__on_zero_shared)(a23);
        std::__shared_weak_count::__release_weak(a23);
      }
    }
    if (*(char *)(v25 - 33) < 0)
      operator delete(*(void **)(v25 - 56));
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

uint64_t std::__function::__func<Espresso::AOT::GetCallees(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::GetCallees(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT10GetCalleesERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9al"
                     "locatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN8Espresso3AOT10GetCalleesERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS5_11char_traits"
                                "IcEENS5_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT10GetCalleesERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT10GetCalleesERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<Espresso::AOT::GetCallees(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::GetCallees(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::target_type()
{
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::string const&,std::shared_ptr<MIL::IRFunction>&>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  _BYTE *v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  uint64_t **v15;
  uint64_t *v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void **v22;
  unsigned __int8 *j;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void **v27;
  unsigned __int8 *i;
  _QWORD *v29;
  std::string *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  float v34;
  float v35;
  _QWORD *v36;
  _QWORD *v37;
  _BOOL8 v38;
  unint64_t v39;
  unint64_t v40;
  size_t prime;
  int8x8_t v42;
  unint64_t v43;
  uint8x8_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD v49[2];
  char v50;

  v7 = (_BYTE *)a2;
  v9 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v10 = v9;
  }
  v11 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v49, (uint64_t *)a2, v10);
  v12 = v11;
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v4 = v11;
      if (v11 >= v13)
        v4 = v11 % v13;
    }
    else
    {
      v4 = (v13 - 1) & v11;
    }
    v15 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      v16 = *v15;
      if (*v15)
      {
        v17 = v7[23];
        if (v17 >= 0)
          v18 = v7[23];
        else
          v18 = *((_QWORD *)v7 + 1);
        if (v17 < 0)
          v7 = *(_BYTE **)v7;
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            v24 = v16[1];
            if (v24 == v12)
            {
              v25 = *((unsigned __int8 *)v16 + 39);
              if ((v25 & 0x80u) == 0)
                v26 = *((unsigned __int8 *)v16 + 39);
              else
                v26 = v16[3];
              if (v26 == v18)
              {
                v27 = (const void **)(v16 + 2);
                if ((v25 & 0x80) != 0)
                {
                  if (!memcmp(*v27, v7, v16[3]))
                    return v16;
                }
                else
                {
                  if (!*((_BYTE *)v16 + 39))
                    return v16;
                  for (i = v7; *(unsigned __int8 *)v27 == *i; ++i)
                  {
                    v27 = (const void **)((char *)v27 + 1);
                    if (!--v25)
                      return v16;
                  }
                }
              }
            }
            else if ((v24 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v16 = (uint64_t *)*v16;
            if (!v16)
              goto LABEL_51;
          }
        }
        do
        {
          v19 = v16[1];
          if (v19 == v12)
          {
            v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0)
              v21 = *((unsigned __int8 *)v16 + 39);
            else
              v21 = v16[3];
            if (v21 == v18)
            {
              v22 = (const void **)(v16 + 2);
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp(*v22, v7, v16[3]))
                  return v16;
              }
              else
              {
                if (!*((_BYTE *)v16 + 39))
                  return v16;
                for (j = v7; *(unsigned __int8 *)v22 == *j; ++j)
                {
                  v22 = (const void **)((char *)v22 + 1);
                  if (!--v20)
                    return v16;
                }
              }
            }
          }
          else
          {
            if (v19 >= v13)
              v19 %= v13;
            if (v19 != v4)
              break;
          }
          v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  v29 = operator new(0x38uLL);
  v49[0] = v29;
  v49[1] = a1 + 16;
  v50 = 0;
  *v29 = 0;
  v29[1] = v12;
  v30 = (std::string *)(v29 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v30, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v30->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v29[4] = *(_QWORD *)(a3 + 16);
  }
  v31 = a4[1];
  v29[5] = *a4;
  v29[6] = v31;
  if (v31)
  {
    v32 = (unint64_t *)(v31 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v50 = 1;
  v34 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v35 = *(float *)(a1 + 32);
  if (!v13 || (float)(v35 * (float)v13) < v34)
  {
    v38 = 1;
    if (v13 >= 3)
      v38 = (v13 & (v13 - 1)) != 0;
    v39 = v38 | (2 * v13);
    v40 = vcvtps_u32_f32(v34 / v35);
    if (v39 <= v40)
      prime = v40;
    else
      prime = v39;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v42 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v42)
      goto LABEL_71;
    if (prime < *(_QWORD *)&v42)
    {
      v43 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v42 < 3uLL || (v44 = (uint8x8_t)vcnt_s8(v42), v44.i16[0] = vaddlv_u8(v44), v44.u32[0] > 1uLL))
      {
        v43 = std::__next_prime(v43);
      }
      else
      {
        v45 = 1 << -(char)__clz(v43 - 1);
        if (v43 >= 2)
          v43 = v45;
      }
      if (prime <= v43)
        prime = v43;
      if (prime < *(_QWORD *)&v42)
LABEL_71:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v13 = *(_QWORD *)(a1 + 8);
    v46 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        v4 = v12 % v13;
        v36 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v12 % v13));
        v37 = (_QWORD *)v49[0];
        if (v36)
          goto LABEL_60;
      }
      else
      {
        v4 = v12;
        v36 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
        v37 = (_QWORD *)v49[0];
        if (v36)
          goto LABEL_60;
      }
    }
    else
    {
      v4 = v46 & v12;
      v36 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v46 & v12));
      v37 = (_QWORD *)v49[0];
      if (v36)
        goto LABEL_60;
    }
LABEL_84:
    *v37 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v49[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v49[0])
    {
      v47 = *(_QWORD *)(*(_QWORD *)v49[0] + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v47 >= v13)
          v47 %= v13;
      }
      else
      {
        v47 &= v13 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v47) = v49[0];
    }
    goto LABEL_95;
  }
  v36 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v37 = (_QWORD *)v49[0];
  if (!v36)
    goto LABEL_84;
LABEL_60:
  *v37 = *v36;
  *v36 = v49[0];
LABEL_95:
  v16 = (uint64_t *)v49[0];
  ++*(_QWORD *)(a1 + 24);
  return v16;
}

void sub_1910BC458(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1910BC46C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<Espresso::AOT::ValidateAlignmentsAttrForE5Backend(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::ValidateAlignmentsAttrForE5Backend(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::AOT::ValidateAlignmentsAttrForE5Backend(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::ValidateAlignmentsAttrForE5Backend(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB2630;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::AOT::ValidateAlignmentsAttrForE5Backend(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::ValidateAlignmentsAttrForE5Backend(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB2630;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Espresso::AOT::ValidateAlignmentsAttrForE5Backend(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::ValidateAlignmentsAttrForE5Backend(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  MIL::IRNamedValueType *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  MIL::IRValueType *Type;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t Function;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  BOOL v25;
  uint64_t *v26;
  uint64_t *v27;
  MIL::IRValueType *v28;
  uint64_t v29;
  uint64_t v30;
  std::logic_error *exception;
  std::logic_error *v33;
  std::logic_error *v34;
  void *v35[2];
  char v36;
  void *v37[2];
  char v38;
  void *__p[2];
  char v40;

  v3 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 176))(a2);
  v4 = *v3;
  v5 = v3[1];
  if (*v3 != v5)
  {
    do
    {
      v6 = *(MIL::IRNamedValueType **)v4;
      v7 = *(std::__shared_weak_count **)(v4 + 8);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(v6);
      if (E5Common::Utils::IsTensor((uint64_t)Type))
      {
        v11 = MIL::IRValueType::AsTensorType(Type);
        v40 = 10;
        strcpy((char *)__p, "alignments");
        v12 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v11 + 64))(v11, __p);
        if (v40 < 0)
          operator delete(__p[0]);
        if (!v12)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "Invalid e5backend program: operation output without alignments.");
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
          __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
        }
      }
      if (v7)
      {
        v13 = (unint64_t *)&v7->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v4 += 16;
    }
    while (v4 != v5);
  }
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 128))(v15) & 1) != 0)
  {
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v16 + 120))(__p, v16, a2);
    Function = MIL::IRProgram::GetFunction();
    v18 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Function + 128))(Function);
    v19 = v18 + 1;
    v20 = (_QWORD *)*v18;
    if ((_QWORD *)*v18 != v18 + 1)
    {
      do
      {
        if (E5Common::Utils::IsTensor(v20[7]))
        {
          v21 = MIL::IRValueType::AsTensorType((MIL::IRValueType *)v20[7]);
          v38 = 10;
          strcpy((char *)v37, "alignments");
          v22 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v21 + 64))(v21, v37);
          if (v38 < 0)
            operator delete(v37[0]);
          if (!v22)
          {
            v33 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v33, "Invalid e5backend program: callee input without alignments.");
            v33->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
            __cxa_throw(v33, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
          }
        }
        v23 = (_QWORD *)v20[1];
        if (v23)
        {
          do
          {
            v24 = v23;
            v23 = (_QWORD *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            v24 = (_QWORD *)v20[2];
            v25 = *v24 == (_QWORD)v20;
            v20 = v24;
          }
          while (!v25);
        }
        v20 = v24;
      }
      while (v24 != v19);
    }
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)Function + 160))(v37, Function);
    v26 = (uint64_t *)v37[0];
    v27 = (uint64_t *)v37[1];
    if (v37[0] != v37[1])
    {
      do
      {
        v28 = (MIL::IRValueType *)*v26;
        if (E5Common::Utils::IsTensor(*v26))
        {
          v29 = MIL::IRValueType::AsTensorType(v28);
          v36 = 10;
          strcpy((char *)v35, "alignments");
          v30 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v29 + 64))(v29, v35);
          if (v36 < 0)
            operator delete(v35[0]);
          if (!v30)
          {
            v34 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v34, "Invalid e5backend program: callee output without alignments.");
            v34->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
            __cxa_throw(v34, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
          }
        }
        ++v26;
      }
      while (v26 != v27);
      v26 = (uint64_t *)v37[0];
    }
    if (v26)
    {
      v37[1] = v26;
      operator delete(v26);
    }
    if (v40 < 0)
      operator delete(__p[0]);
  }
  return 1;
}

void sub_1910BC8B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::AOT::ValidateAlignmentsAttrForE5Backend(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::ValidateAlignmentsAttrForE5Backend(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT34ValidateAlignmentsAttrForE5BackendERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS5_"
                     "11char_traitsIcEENS5_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN8Espresso3AOT34ValidateAlignmentsAttrForE5BackendERKN3MIL9IRProgramERKNSt3__112basic_s"
                                "tringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT34ValidateAlignmentsAttrForE5BackendERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT34ValidateAlignmentsAttrForE5BackendERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<Espresso::AOT::ValidateAlignmentsAttrForE5Backend(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::ValidateAlignmentsAttrForE5Backend(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::target_type()
{
}

uint64_t std::__shared_ptr_pointer<MIL::Builder::FunctionBuilder  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Builder::FunctionBuilder  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A8751DLL)
    return a1 + 24;
  if (((v3 & 0x8000000191A8751DLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A8751DLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A8751DLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__deallocate_node(int a1, char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (!__p)
    return;
  v2 = __p;
  do
  {
    v3 = *(char **)v2;
    v4 = *((_QWORD *)v2 + 5);
    if (!v4)
      goto LABEL_15;
    v5 = *((_QWORD *)v2 + 6);
    v6 = (void *)*((_QWORD *)v2 + 5);
    if (v5 != v4)
    {
      while (1)
      {
        if (*(char *)(v5 - 1) < 0)
        {
          operator delete(*(void **)(v5 - 24));
          if (*(char *)(v5 - 25) < 0)
LABEL_12:
            operator delete(*(void **)(v5 - 48));
        }
        else if (*(char *)(v5 - 25) < 0)
        {
          goto LABEL_12;
        }
        v5 -= 48;
        if (v5 == v4)
        {
          v6 = (void *)*((_QWORD *)v2 + 5);
          break;
        }
      }
    }
    *((_QWORD *)v2 + 6) = v4;
    operator delete(v6);
LABEL_15:
    if (v2[39] < 0)
      operator delete(*((void **)v2 + 2));
    operator delete(v2);
    v2 = v3;
  }
  while (v3);
}

void std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy(a1, *((_QWORD *)a2 + 1));
    v4 = *((_QWORD *)a2 + 7);
    if (v4)
    {
      v5 = *((_QWORD *)a2 + 8);
      v6 = (void *)*((_QWORD *)a2 + 7);
      if (v5 != v4)
      {
        do
        {
          v7 = *(std::__shared_weak_count **)(v5 - 8);
          if (v7)
          {
            p_shared_owners = (unint64_t *)&v7->__shared_owners_;
            do
              v9 = __ldaxr(p_shared_owners);
            while (__stlxr(v9 - 1, p_shared_owners));
            if (!v9)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
          v5 -= 16;
        }
        while (v5 != v4);
        v6 = (void *)*((_QWORD *)a2 + 7);
      }
      *((_QWORD *)a2 + 8) = v4;
      operator delete(v6);
    }
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t std::__shared_ptr_pointer<MIL::IRArgument  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRArgument  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191AD1AF6)
    return a1 + 24;
  if (((v3 & 0x8000000191AD1AF6 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191AD1AF6))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191AD1AF6 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void **v21;
  unsigned __int8 *j;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void **v26;
  unsigned __int8 *i;
  _QWORD *v28;
  std::string *v29;
  __int128 *v30;
  __int128 v31;
  float v32;
  float v33;
  _QWORD *v34;
  _QWORD *v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  size_t prime;
  int8x8_t v40;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD v47[2];
  char v48;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v47, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v23 = v15[1];
            if (v23 == v11)
            {
              v24 = *((unsigned __int8 *)v15 + 39);
              if ((v24 & 0x80u) == 0)
                v25 = *((unsigned __int8 *)v15 + 39);
              else
                v25 = v15[3];
              if (v25 == v17)
              {
                v26 = (const void **)(v15 + 2);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  for (i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    v26 = (const void **)((char *)v26 + 1);
                    if (!--v24)
                      return v15;
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              v21 = (const void **)(v15 + 2);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                for (j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  v21 = (const void **)((char *)v21 + 1);
                  if (!--v19)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v28 = operator new(0x40uLL);
  v47[0] = v28;
  v47[1] = a1 + 16;
  v48 = 0;
  *v28 = 0;
  v28[1] = v11;
  v29 = (std::string *)(v28 + 2);
  v30 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v29, *(const std::string::value_type **)v30, *((_QWORD *)v30 + 1));
  }
  else
  {
    v31 = *v30;
    v28[4] = *((_QWORD *)v30 + 2);
    *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v31;
  }
  v28[5] = 0;
  v28[6] = 0;
  v28[7] = 0;
  v48 = 1;
  v32 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v33 = *(float *)(a1 + 32);
  if (!v12 || (float)(v33 * (float)v12) < v32)
  {
    v36 = 1;
    if (v12 >= 3)
      v36 = (v12 & (v12 - 1)) != 0;
    v37 = v36 | (2 * v12);
    v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38)
      prime = v38;
    else
      prime = v37;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v40)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v40)
    {
      v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v40 < 3uLL || (v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        v41 = std::__next_prime(v41);
      }
      else
      {
        v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2)
          v41 = v43;
      }
      if (prime <= v41)
        prime = v41;
      if (prime < *(_QWORD *)&v40)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v44 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v44 & v11;
      v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v44 & v11));
      v35 = (_QWORD *)v47[0];
      if (v34)
        goto LABEL_57;
    }
LABEL_81:
    *v35 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v47[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v47[0])
    {
      v45 = *(_QWORD *)(*(_QWORD *)v47[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v45 >= v12)
          v45 %= v12;
      }
      else
      {
        v45 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_92;
  }
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v35 = (_QWORD *)v47[0];
  if (!v34)
    goto LABEL_81;
LABEL_57:
  *v35 = *v34;
  *v34 = v47[0];
LABEL_92:
  v15 = (uint64_t *)v47[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_1910BD148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  uint64_t v10;
  char *v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>>>::operator()[abi:ne180100](v10, v11);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, char *__p)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 8))
  {
    if (!__p)
      return;
    goto LABEL_12;
  }
  v3 = *((_QWORD *)__p + 5);
  if (v3)
  {
    v4 = *((_QWORD *)__p + 6);
    v5 = (void *)*((_QWORD *)__p + 5);
    if (v4 == v3)
    {
LABEL_14:
      *((_QWORD *)__p + 6) = v3;
      operator delete(v5);
      goto LABEL_15;
    }
    while (1)
    {
      if (*(char *)(v4 - 1) < 0)
      {
        operator delete(*(void **)(v4 - 24));
        if (*(char *)(v4 - 25) < 0)
LABEL_10:
          operator delete(*(void **)(v4 - 48));
      }
      else if (*(char *)(v4 - 25) < 0)
      {
        goto LABEL_10;
      }
      v4 -= 48;
      if (v4 == v3)
      {
        v5 = (void *)*((_QWORD *)__p + 5);
        goto LABEL_14;
      }
    }
  }
LABEL_15:
  if ((__p[39] & 0x80000000) == 0)
  {
LABEL_12:
    operator delete(__p);
    return;
  }
  operator delete(*((void **)__p + 2));
  operator delete(__p);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,BOOL> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void **v20;
  unsigned __int8 *j;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void **v25;
  unsigned __int8 *i;
  char *v27;
  std::string *v28;
  float v29;
  float v30;
  _QWORD *v31;
  _QWORD *v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  size_t prime;
  int8x8_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD v44[2];
  char v45;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v44, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v14[1];
            if (v22 == v10)
            {
              v23 = *((unsigned __int8 *)v14 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v14 + 39);
              else
                v24 = v14[3];
              if (v24 == v16)
              {
                v25 = (const void **)(v14 + 2);
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*v25, v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  for (i = v5; *(unsigned __int8 *)v25 == *i; ++i)
                  {
                    v25 = (const void **)((char *)v25 + 1);
                    if (!--v23)
                      return v14;
                  }
                }
              }
            }
            else if ((v22 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              v20 = (const void **)(v14 + 2);
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*v20, v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                for (j = v5; *(unsigned __int8 *)v20 == *j; ++j)
                {
                  v20 = (const void **)((char *)v20 + 1);
                  if (!--v18)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v27 = (char *)operator new(0x30uLL);
  v44[0] = v27;
  v44[1] = a1 + 16;
  v45 = 0;
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v27 + 1) = v10;
  v28 = (std::string *)(v27 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v28->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v27 + 4) = *(_QWORD *)(a3 + 16);
  }
  v27[40] = *(_BYTE *)(a3 + 24);
  v45 = 1;
  v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v30 = *(float *)(a1 + 32);
  if (!v11 || (float)(v30 * (float)v11) < v29)
  {
    v33 = 1;
    if (v11 >= 3)
      v33 = (v11 & (v11 - 1)) != 0;
    v34 = v33 | (2 * v11);
    v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35)
      prime = v35;
    else
      prime = v34;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v37)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v37)
    {
      v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v37 < 3uLL || (v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime < *(_QWORD *)&v37)
LABEL_68:
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v41 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v32 = (_QWORD *)v44[0];
        if (v31)
          goto LABEL_57;
      }
      else
      {
        v3 = v10;
        v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v32 = (_QWORD *)v44[0];
        if (v31)
          goto LABEL_57;
      }
    }
    else
    {
      v3 = v41 & v10;
      v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v41 & v10));
      v32 = (_QWORD *)v44[0];
      if (v31)
        goto LABEL_57;
    }
LABEL_81:
    *v32 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v44[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v44[0])
    {
      v42 = *(_QWORD *)(*(_QWORD *)v44[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v42 >= v11)
          v42 %= v11;
      }
      else
      {
        v42 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v42) = v44[0];
    }
    goto LABEL_92;
  }
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v32 = (_QWORD *)v44[0];
  if (!v31)
    goto LABEL_81;
LABEL_57:
  *v32 = *v31;
  *v31 = v44[0];
LABEL_92:
  v14 = (uint64_t *)v44[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_1910BD698(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1910BD6AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>::unordered_map(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<MIL::IRDimension const*>> const&>(a1, i + 16, (__int128 *)i + 1);
  return a1;
}

void sub_1910BD7DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1910BD7F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(void **)(v2 + 40);
      if (v3)
      {
        *(_QWORD *)(v2 + 48) = v3;
        operator delete(v3);
      }
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

std::string *std::pair<std::string const,std::vector<MIL::IRDimension const*>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  _BYTE *v9;
  void *v10;
  std::string::size_type v11;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    this[1].__r_.__value_.__r.__words[0] = 0;
    this[1].__r_.__value_.__l.__size_ = 0;
    this[1].__r_.__value_.__r.__words[2] = 0;
    v6 = (_BYTE *)*((_QWORD *)a2 + 3);
    v9 = (_BYTE *)*((_QWORD *)a2 + 4);
    v7 = v9 - v6;
    if (v9 == v6)
      return this;
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    this[1].__r_.__value_.__r.__words[0] = 0;
    this[1].__r_.__value_.__l.__size_ = 0;
    this[1].__r_.__value_.__r.__words[2] = 0;
    v6 = (_BYTE *)*((_QWORD *)a2 + 3);
    v5 = (_BYTE *)*((_QWORD *)a2 + 4);
    v7 = v5 - v6;
    if (v5 == v6)
      return this;
  }
  if (v7 < 0)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v10 = operator new(v7);
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  this[1].__r_.__value_.__l.__size_ = (std::string::size_type)v10;
  v11 = (std::string::size_type)v10 + 8 * (v7 >> 3);
  this[1].__r_.__value_.__r.__words[2] = v11;
  memcpy(v10, v6, v7);
  this[1].__r_.__value_.__l.__size_ = v11;
  return this;
}

void sub_1910BD92C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  std::pair<std::string const,std::vector<MIL::IRDimension const*>>::pair[abi:ne180100]((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, unsigned __int8 **a3)
{
  unint64_t v4;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  char v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  const void **v16;
  unsigned __int8 *j;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  const void **v21;
  unsigned __int8 *i;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t prime;
  size_t v29;
  uint8x8_t v30;
  uint64_t v31;
  size_t v32;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_50;
  v6 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    if (v4 <= a2)
      v7 = a2 % v4;
    else
      v7 = a2;
    v8 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v7);
    if (!v8)
      goto LABEL_50;
  }
  else
  {
    v7 = (v4 - 1) & a2;
    v8 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v7);
    if (!v8)
      goto LABEL_50;
  }
  v9 = *v8;
  if (*v8)
  {
    v10 = *((_BYTE *)a3 + 23);
    if (v10 >= 0)
      v11 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v11 = a3[1];
    if (v10 >= 0)
      v12 = (unsigned __int8 *)a3;
    else
      v12 = *a3;
    if (v6.u32[0] < 2uLL)
    {
      while (1)
      {
        v18 = v9[1];
        if (v18 == a2)
        {
          v19 = *((unsigned __int8 *)v9 + 39);
          if ((v19 & 0x80u) == 0)
            v20 = (unsigned __int8 *)*((unsigned __int8 *)v9 + 39);
          else
            v20 = (unsigned __int8 *)v9[3];
          if (v20 == v11)
          {
            v21 = (const void **)(v9 + 2);
            if ((v19 & 0x80) != 0)
            {
              if (!memcmp(*v21, v12, v9[3]))
                return v9;
            }
            else
            {
              if (!*((_BYTE *)v9 + 39))
                return v9;
              for (i = v12; *(unsigned __int8 *)v21 == *i; ++i)
              {
                v21 = (const void **)((char *)v21 + 1);
                if (!--v19)
                  return v9;
              }
            }
          }
        }
        else if ((v18 & (v4 - 1)) != v7)
        {
          goto LABEL_50;
        }
        v9 = (uint64_t *)*v9;
        if (!v9)
          goto LABEL_50;
      }
    }
    do
    {
      v13 = v9[1];
      if (v13 == a2)
      {
        v14 = *((unsigned __int8 *)v9 + 39);
        if ((v14 & 0x80u) == 0)
          v15 = (unsigned __int8 *)*((unsigned __int8 *)v9 + 39);
        else
          v15 = (unsigned __int8 *)v9[3];
        if (v15 == v11)
        {
          v16 = (const void **)(v9 + 2);
          if ((v14 & 0x80) != 0)
          {
            if (!memcmp(*v16, v12, v9[3]))
              return v9;
          }
          else
          {
            if (!*((_BYTE *)v9 + 39))
              return v9;
            for (j = v12; *(unsigned __int8 *)v16 == *j; ++j)
            {
              v16 = (const void **)((char *)v16 + 1);
              if (!--v14)
                return v9;
            }
          }
        }
      }
      else
      {
        if (v13 >= v4)
          v13 %= v4;
        if (v13 != v7)
          break;
      }
      v9 = (uint64_t *)*v9;
    }
    while (v9);
  }
LABEL_50:
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (v4 && (float)(v24 * (float)v4) >= v23)
    return 0;
  v25 = 1;
  if (v4 >= 3)
    v25 = (v4 & (v4 - 1)) != 0;
  v26 = v25 | (2 * v4);
  v27 = vcvtps_u32_f32(v23 / v24);
  if (v26 <= v27)
    prime = v27;
  else
    prime = v26;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v4 = *(_QWORD *)(a1 + 8);
  }
  if (prime > v4)
    goto LABEL_74;
  if (prime < v4)
  {
    v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v4 < 3 || (v30 = (uint8x8_t)vcnt_s8((int8x8_t)v4), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
    {
      v32 = std::__next_prime(v29);
      if (prime <= v32)
        prime = v32;
      if (prime >= v4)
        return 0;
    }
    else
    {
      v31 = 1 << -(char)__clz(v29 - 1);
      if (v29 >= 2)
        v29 = v31;
      if (prime <= v29)
        prime = v29;
      if (prime >= v4)
        return 0;
    }
LABEL_74:
    std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
  }
  return 0;
}

uint64_t std::unordered_map<std::string,std::vector<std::pair<int,int>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  __int128 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(__int128 **)(a2 + 16); i; i = *(__int128 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::pair<int,int>>> const&>(a1, (uint64_t)(i + 1), i + 1);
  return a1;
}

void sub_1910BDD50(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1910BDD64(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::pair<int,int>>> const&>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void **v20;
  unsigned __int8 *j;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void **v25;
  unsigned __int8 *i;
  char *v27;
  float v28;
  float v29;
  _QWORD *v30;
  _QWORD *v31;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  size_t prime;
  int8x8_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD v43[2];
  char v44;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v43, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v14[1];
            if (v22 == v10)
            {
              v23 = *((unsigned __int8 *)v14 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v14 + 39);
              else
                v24 = v14[3];
              if (v24 == v16)
              {
                v25 = (const void **)(v14 + 2);
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*v25, v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  for (i = v5; *(unsigned __int8 *)v25 == *i; ++i)
                  {
                    v25 = (const void **)((char *)v25 + 1);
                    if (!--v23)
                      return v14;
                  }
                }
              }
            }
            else if ((v22 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              v20 = (const void **)(v14 + 2);
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*v20, v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                for (j = v5; *(unsigned __int8 *)v20 == *j; ++j)
                {
                  v20 = (const void **)((char *)v20 + 1);
                  if (!--v18)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v27 = (char *)operator new(0x40uLL);
  v43[0] = v27;
  v43[1] = a1 + 16;
  v44 = 0;
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v27 + 1) = v10;
  std::pair<std::string const,std::vector<std::pair<int,int>>>::pair[abi:ne180100]((std::string *)(v27 + 16), a3);
  v44 = 1;
  v28 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v29 = *(float *)(a1 + 32);
  if (!v11 || (float)(v29 * (float)v11) < v28)
  {
    v32 = 1;
    if (v11 >= 3)
      v32 = (v11 & (v11 - 1)) != 0;
    v33 = v32 | (2 * v11);
    v34 = vcvtps_u32_f32(v28 / v29);
    if (v33 <= v34)
      prime = v34;
    else
      prime = v33;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v36 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v36)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v36)
    {
      v37 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v36 < 3uLL || (v38 = (uint8x8_t)vcnt_s8(v36), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        v37 = std::__next_prime(v37);
      }
      else
      {
        v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2)
          v37 = v39;
      }
      if (prime <= v37)
        prime = v37;
      if (prime < *(_QWORD *)&v36)
LABEL_65:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v40 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v31 = (_QWORD *)v43[0];
        if (v30)
          goto LABEL_54;
      }
      else
      {
        v3 = v10;
        v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v31 = (_QWORD *)v43[0];
        if (v30)
          goto LABEL_54;
      }
    }
    else
    {
      v3 = v40 & v10;
      v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v40 & v10));
      v31 = (_QWORD *)v43[0];
      if (v30)
        goto LABEL_54;
    }
LABEL_78:
    *v31 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v43[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v43[0])
    {
      v41 = *(_QWORD *)(*(_QWORD *)v43[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v41 >= v11)
          v41 %= v11;
      }
      else
      {
        v41 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v41) = v43[0];
    }
    goto LABEL_89;
  }
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v31 = (_QWORD *)v43[0];
  if (!v30)
    goto LABEL_78;
LABEL_54:
  *v31 = *v30;
  *v30 = v43[0];
LABEL_89:
  v14 = (uint64_t *)v43[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_1910BE1A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1910BE1B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::vector<std::pair<int,int>>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  _BYTE *v9;
  void *v10;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    this[1].__r_.__value_.__r.__words[0] = 0;
    this[1].__r_.__value_.__l.__size_ = 0;
    this[1].__r_.__value_.__r.__words[2] = 0;
    v6 = (_BYTE *)*((_QWORD *)a2 + 3);
    v9 = (_BYTE *)*((_QWORD *)a2 + 4);
    v7 = v9 - v6;
    if (v9 == v6)
      return this;
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    this[1].__r_.__value_.__r.__words[0] = 0;
    this[1].__r_.__value_.__l.__size_ = 0;
    this[1].__r_.__value_.__r.__words[2] = 0;
    v6 = (_BYTE *)*((_QWORD *)a2 + 3);
    v5 = (_BYTE *)*((_QWORD *)a2 + 4);
    v7 = v5 - v6;
    if (v5 == v6)
      return this;
  }
  if (v7 < 0)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v10 = operator new(v7);
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  this[1].__r_.__value_.__l.__size_ = (std::string::size_type)v10;
  this[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v10 + 8 * (v7 >> 3);
  memcpy(v10, v6, v7 & 0xFFFFFFFFFFFFFFF8);
  this[1].__r_.__value_.__l.__size_ = (std::string::size_type)v10 + (v7 & 0xFFFFFFFFFFFFFFF8);
  return this;
}

void sub_1910BE2B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  std::pair<std::string const,std::vector<MIL::IRDimension const*>>::pair[abi:ne180100]((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>> const&>(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_1910BE3F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void sub_1910BE404(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void **v20;
  unsigned __int8 *j;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void **v25;
  unsigned __int8 *i;
  char *v27;
  char *v28;
  float v29;
  float v30;
  _QWORD *v31;
  _QWORD *v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  size_t prime;
  int8x8_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD v44[2];
  char v45;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v44, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v14[1];
            if (v22 == v10)
            {
              v23 = *((unsigned __int8 *)v14 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v14 + 39);
              else
                v24 = v14[3];
              if (v24 == v16)
              {
                v25 = (const void **)(v14 + 2);
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*v25, v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  for (i = v5; *(unsigned __int8 *)v25 == *i; ++i)
                  {
                    v25 = (const void **)((char *)v25 + 1);
                    if (!--v23)
                      return v14;
                  }
                }
              }
            }
            else if ((v22 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              v20 = (const void **)(v14 + 2);
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*v20, v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                for (j = v5; *(unsigned __int8 *)v20 == *j; ++j)
                {
                  v20 = (const void **)((char *)v20 + 1);
                  if (!--v18)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v27 = (char *)operator new(0x50uLL);
  v28 = v27;
  v44[0] = v27;
  v44[1] = a1 + 16;
  v45 = 0;
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v27 + 1) = v10;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v27 + 16), *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v27 + 1) = *(_OWORD *)a3;
    *((_QWORD *)v27 + 4) = *(_QWORD *)(a3 + 16);
  }
  std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>::unordered_map((uint64_t)(v28 + 40), a3 + 24);
  v45 = 1;
  v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v30 = *(float *)(a1 + 32);
  if (!v11 || (float)(v30 * (float)v11) < v29)
  {
    v33 = 1;
    if (v11 >= 3)
      v33 = (v11 & (v11 - 1)) != 0;
    v34 = v33 | (2 * v11);
    v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35)
      prime = v35;
    else
      prime = v34;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v37)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v37)
    {
      v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v37 < 3uLL || (v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime < *(_QWORD *)&v37)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v41 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v32 = (_QWORD *)v44[0];
        if (v31)
          goto LABEL_57;
      }
      else
      {
        v3 = v10;
        v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v32 = (_QWORD *)v44[0];
        if (v31)
          goto LABEL_57;
      }
    }
    else
    {
      v3 = v41 & v10;
      v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v41 & v10));
      v32 = (_QWORD *)v44[0];
      if (v31)
        goto LABEL_57;
    }
LABEL_81:
    *v32 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v44[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v44[0])
    {
      v42 = *(_QWORD *)(*(_QWORD *)v44[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v42 >= v11)
          v42 %= v11;
      }
      else
      {
        v42 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v42) = v44[0];
    }
    goto LABEL_92;
  }
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v32 = (_QWORD *)v44[0];
  if (!v31)
    goto LABEL_81;
LABEL_57:
  *v32 = *v31;
  *v31 = v44[0];
LABEL_92:
  v14 = (uint64_t *)v44[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_1910BE8CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1910BE8E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1910BE8F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 39) < 0)
    operator delete(*v3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,0>(uint64_t a1)
{
  char *v2;
  void *v3;
  char *v4;
  void *v5;

  v2 = *(char **)(a1 + 40);
  if (v2)
  {
    do
    {
      v4 = *(char **)v2;
      v5 = (void *)*((_QWORD *)v2 + 5);
      if (v5)
      {
        *((_QWORD *)v2 + 6) = v5;
        operator delete(v5);
      }
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
    operator delete(v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[63] < 0)
      operator delete(*((void **)a2 + 5));
    operator delete(a2);
  }
}

uint64_t std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>::unordered_set(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder> const&>(a1, i + 2, i + 2);
  return a1;
}

void sub_1910BEB68(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::~unordered_set[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1910BEB7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::~unordered_set[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = v2;
      v2 = (_QWORD *)*v2;
      v4 = (std::__shared_weak_count *)v3[3];
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      operator delete(v3);
    }
    while (v2);
  }
}

uint64_t *std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__node_insert_multi(_QWORD *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *inserted;
  int8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v5 = a2 + 2;
  v4 = a2[2];
  v6 = HIDWORD(v4);
  v7 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
  v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  *(v5 - 1) = v8;
  inserted = std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__node_insert_multi_prepare((uint64_t)a1, v8, v5);
  v10 = (int8x8_t)a1[1];
  v11 = *(v5 - 1);
  v12 = (uint8x8_t)vcnt_s8(v10);
  v12.i16[0] = vaddlv_u8(v12);
  v13 = v11 % *(_QWORD *)&v10;
  if (v11 < *(_QWORD *)&v10)
    v13 = *(v5 - 1);
  v14 = *(_QWORD *)&v10 - 1;
  v15 = (*(_QWORD *)&v10 - 1) & v11;
  if (v12.u32[0] <= 1uLL)
    v13 = v15;
  if (!inserted)
  {
    *a2 = a1[2];
    a1[2] = a2;
    *(_QWORD *)(*a1 + 8 * v13) = a1 + 2;
    if (!*a2)
      goto LABEL_19;
    v16 = *(_QWORD *)(*a2 + 8);
    if (v12.u32[0] > 1uLL)
    {
      if (v16 >= *(_QWORD *)&v10)
        v16 %= *(_QWORD *)&v10;
    }
    else
    {
      v16 &= v14;
    }
LABEL_18:
    *(_QWORD *)(*a1 + 8 * v16) = a2;
    goto LABEL_19;
  }
  *a2 = *inserted;
  *inserted = (uint64_t)a2;
  if (*a2)
  {
    v16 = *(_QWORD *)(*a2 + 8);
    if (v12.u32[0] > 1uLL)
    {
      if (v16 >= *(_QWORD *)&v10)
        v16 %= *(_QWORD *)&v10;
    }
    else
    {
      v16 &= v14;
    }
    if (v16 != v13)
      goto LABEL_18;
  }
LABEL_19:
  ++a1[3];
  return a2;
}

_QWORD *std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  unint64_t v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  char v13;
  _QWORD *result;
  uint64_t v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  size_t v20;
  uint8x8_t v21;
  uint64_t v22;
  size_t v23;
  unint64_t v24;
  _QWORD *v25;
  unsigned __int8 v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (v6 && (float)(v8 * (float)v6) >= v7)
  {
    v9 = v6 - 1;
    if ((v6 & (v6 - 1)) == 0)
      goto LABEL_4;
    goto LABEL_36;
  }
  v16 = 1;
  if (v6 >= 3)
    v16 = (v6 & (v6 - 1)) != 0;
  v17 = v16 | (2 * v6);
  v18 = vcvtps_u32_f32(v7 / v8);
  if (v17 <= v18)
    prime = v18;
  else
    prime = v17;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v6 = *(_QWORD *)(a1 + 8);
  }
  if (prime > v6)
    goto LABEL_22;
  if (prime < v6)
  {
    v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 >= 3)
    {
      v21 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] <= 1uLL)
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
        if (prime <= v20)
          prime = v20;
        if (prime >= v6)
          goto LABEL_35;
LABEL_22:
        std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__do_rehash<false>(a1, prime);
        goto LABEL_35;
      }
    }
    v23 = std::__next_prime(v20);
    if (prime <= v23)
      prime = v23;
    if (prime < v6)
      goto LABEL_22;
  }
LABEL_35:
  v6 = *(_QWORD *)(a1 + 8);
  v9 = v6 - 1;
  if ((v6 & (v6 - 1)) == 0)
  {
LABEL_4:
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 & a2));
    if (v10)
    {
      v11 = 0;
      v12 = *a3;
      while (1)
      {
        result = v10;
        v10 = (_QWORD *)*v10;
        if (!v10)
          break;
        v15 = v10[1];
        if ((v15 & v9) != (v9 & a2))
          break;
        if (v15 == a2)
        {
          v13 = v11 & (v10[2] != v12);
          v11 |= v10[2] == v12;
          if ((v13 & 1) != 0)
            return result;
        }
        else if ((v11 & 1) != 0)
        {
          return result;
        }
      }
      return result;
    }
    return 0;
  }
LABEL_36:
  v24 = a2;
  if (v6 <= a2)
    v24 = a2 % v6;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v24);
  if (!v25)
    return 0;
  v26 = 0;
  v27 = *a3;
  while (1)
  {
    result = v25;
    v25 = (_QWORD *)*v25;
    if (!v25)
      break;
    v29 = v25[1];
    v30 = v29;
    if (v29 >= v6)
      v30 = v29 % v6;
    if (v30 != v24)
      break;
    if (v29 == a2)
    {
      v28 = v26 & (v25[2] != v27);
      v26 |= v25[2] == v27;
      if (v28 == 1)
        return result;
    }
    else if ((v26 & 1) == 1)
    {
      return result;
    }
  }
  return result;
}

_OWORD *std::vector<std::pair<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder>>>::__push_back_slow_path<std::pair<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder>>>(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  _OWORD *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  char *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;

  v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
  v4 = (v3 >> 5) + 1;
  if (v4 >> 59)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v5 >> 4 > v4)
    v4 = v5 >> 4;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
  v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v4;
  if (v7 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v9 = 32 * v7;
  v10 = (char *)operator new(32 * v7);
  v11 = &v10[32 * (v3 >> 5)];
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  v13 = v11 + 32;
  v14 = &v10[v9];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)&v10[v3 + 16] = v12;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v15 = (char *)*a1;
  v16 = (char *)a1[1];
  if (v16 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v14;
    if (!v16)
      return v13;
    goto LABEL_25;
  }
  do
  {
    v17 = *((_OWORD *)v16 - 2);
    v16 -= 32;
    *((_OWORD *)v11 - 2) = v17;
    v11 -= 32;
    *(_QWORD *)v16 = 0;
    *((_QWORD *)v16 + 1) = 0;
    *((_OWORD *)v11 + 1) = *((_OWORD *)v16 + 1);
    *((_QWORD *)v16 + 2) = 0;
    *((_QWORD *)v16 + 3) = 0;
  }
  while (v16 != v15);
  v18 = (char *)*a1;
  v16 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v13;
  a1[2] = v14;
  if (v16 != v18)
  {
    while (1)
    {
      v19 = (std::__shared_weak_count *)*((_QWORD *)v16 - 1);
      if (!v19)
        goto LABEL_16;
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
        v22 = (std::__shared_weak_count *)*((_QWORD *)v16 - 3);
        if (v22)
        {
LABEL_17:
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
      }
      else
      {
LABEL_16:
        v22 = (std::__shared_weak_count *)*((_QWORD *)v16 - 3);
        if (v22)
          goto LABEL_17;
      }
      v16 -= 32;
      if (v16 == v18)
      {
        v16 = v18;
        break;
      }
    }
  }
  if (v16)
LABEL_25:
    operator delete(v16);
  return v13;
}

void std::__function::__func<Espresso::AOT::ReplaceGatherNDWithGather(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::ReplaceGatherNDWithGather(MIL::IRProgram const&,std::string const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::AOT::ReplaceGatherNDWithGather(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::ReplaceGatherNDWithGather(MIL::IRProgram const&,std::string const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB25D8;
  return result;
}

void std::__function::__func<Espresso::AOT::ReplaceGatherNDWithGather(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::ReplaceGatherNDWithGather(MIL::IRProgram const&,std::string const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB25D8;
}

void std::__function::__func<Espresso::AOT::ReplaceGatherNDWithGather(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::ReplaceGatherNDWithGather(MIL::IRProgram const&,std::string const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::operator()(uint64_t a1, MIL::Transform::MatchContext *a2)
{
  MIL::IRValue *Value;
  int v4;
  MIL::IRValue *v5;
  uint64_t v6;
  MIL::IRTensorValueType *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  MIL::IRDimension ***v11;
  uint64_t v12;
  MIL::IRValueType *Type;
  MIL::IRTensorValueType *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  std::__shared_weak_count_vtbl *v26;
  void **v27;
  void **v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t v36;
  const void *v37;
  char *v38;
  std::__shared_weak_count *v39;
  void **v40;
  char *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void **v45;
  char *v46;
  void **v47;
  char *v48;
  uint64_t ArgumentCount;
  void **v50;
  char *v51;
  void **v52;
  void **v53;
  void *v54;
  void **v55;
  char v56[8];
  std::__shared_weak_count_vtbl *v57;
  std::__shared_weak_count *v58;
  void *v59;
  void **v60;
  unint64_t v61;
  _BYTE v62[16];
  void *v63[4];
  void *__p[5];
  _BYTE v65[16];
  _BYTE v66[16];
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  MIL::Matching::MatchView::MatchView();
  strcpy((char *)__p, "batch_dims");
  if (!MIL::Matching::MatchView::GetArgumentCount())
    goto LABEL_6;
  HIBYTE(__p[2]) = 10;
  strcpy((char *)__p, "batch_dims");
  MIL::Matching::MatchView::GetArgument();
  Value = (MIL::IRValue *)MIL::Matching::ArgumentView::GetValue((MIL::Matching::ArgumentView *)v63);
  MIL::IRValue::AsTensor(Value);
  v4 = MIL::IRValue::GetScalar<int>();
  MIL::Matching::ArgumentView::~ArgumentView((MIL::Matching::ArgumentView *)v63);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if (v4)
      goto LABEL_4;
    goto LABEL_6;
  }
  if (!v4)
  {
LABEL_6:
    HIBYTE(__p[2]) = 1;
    LOWORD(__p[0]) = 120;
    MIL::Matching::MatchView::GetArgument();
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    v5 = (MIL::IRValue *)MIL::Matching::ArgumentView::TryGetValue((MIL::Matching::ArgumentView *)v66);
    if (!v5)
      goto LABEL_29;
    v6 = MIL::IRValue::AsTensor(v5);
    v7 = (MIL::IRTensorValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    if ((*(unsigned int (**)(MIL::IRTensorValueType *))(*(_QWORD *)v7 + 88))(v7) != 4
      || !(*(unsigned int (**)(MIL::IRTensorValueType *))(*(_QWORD *)v7 + 104))(v7))
    {
      goto LABEL_29;
    }
    v8 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v7 + 96))(v7);
    v9 = *(_QWORD **)v8;
    v10 = *(_QWORD **)(v8 + 8);
    if (*(_QWORD **)v8 != v10)
    {
      while (!(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v9 + 24))(*v9))
      {
        if (++v9 == v10)
          goto LABEL_14;
      }
      goto LABEL_29;
    }
LABEL_14:
    v11 = (MIL::IRDimension ***)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v7 + 96))(v7);
    if (MIL::IRTensorValueType::Rank(v7) != 3
      || (v12 = MIL::IRDimension::AsConstant((*v11)[1]),
          (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12) != 1))
    {
LABEL_29:
      MIL::Transform::MatchContext::RejectMatch(a2);
LABEL_30:
      MIL::Matching::ArgumentView::~ArgumentView((MIL::Matching::ArgumentView *)v66);
      goto LABEL_31;
    }
    HIBYTE(__p[2]) = 7;
    strcpy((char *)__p, "indices");
    MIL::Matching::MatchView::GetArgument();
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    Type = (MIL::IRValueType *)MIL::Matching::ArgumentView::GetType((MIL::Matching::ArgumentView *)v65);
    v14 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(Type);
    if (!(*(unsigned int (**)(MIL::IRTensorValueType *))(*(_QWORD *)v14 + 104))(v14))
      goto LABEL_43;
    v15 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v14 + 96))(v14);
    v16 = *(_QWORD **)v15;
    v17 = *(_QWORD **)(v15 + 8);
    if (*(_QWORD **)v15 != v17)
    {
      while (!(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v16 + 24))(*v16))
      {
        if (++v16 == v17)
          goto LABEL_22;
      }
      goto LABEL_43;
    }
LABEL_22:
    v18 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v14 + 96))(v14);
    if (MIL::IRTensorValueType::Rank(v14) != 2
      || (v19 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*(_QWORD *)v18 + 8)),
          (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 48))(v19) != 1))
    {
LABEL_43:
      MIL::Transform::MatchContext::RejectMatch(a2);
LABEL_44:
      MIL::Matching::ArgumentView::~ArgumentView((MIL::Matching::ArgumentView *)v65);
      goto LABEL_30;
    }
    MIL::Transform::MatchContext::GetMILContext(a2);
    (*(void (**)(MIL::IRTensorValueType *))(*(_QWORD *)v7 + 88))(v7);
    v20 = MIL::IRDimension::AsConstant(**v11);
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 48))(v20);
    v22 = MIL::IRDimension::AsConstant((*v11)[2]);
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 48))(v22);
    v24 = operator new(0x10uLL);
    __p[1] = v24 + 2;
    __p[2] = v24 + 2;
    *v24 = v21;
    v24[1] = v23;
    __p[0] = v24;
    MIL::IRTensorValueType::Make();
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 96))(v6);
    if (v25)
    {
      MIL::Transform::MatchContext::GetMILContext(a2);
      std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)__p, v25);
      MIL::IRTensorValueType::MakeValueFromFileProperties();
      v26 = (std::__shared_weak_count_vtbl *)v63[0];
      v63[0] = 0;
      v27 = (void **)__p[2];
      if (__p[2])
      {
        do
        {
          while (1)
          {
            v28 = (void **)*v27;
            v29 = (std::__shared_weak_count *)v27[6];
            if (v29)
            {
              p_shared_owners = (unint64_t *)&v29->__shared_owners_;
              do
                v31 = __ldaxr(p_shared_owners);
              while (__stlxr(v31 - 1, p_shared_owners));
              if (!v31)
              {
                ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                std::__shared_weak_count::__release_weak(v29);
              }
            }
            if (*((char *)v27 + 39) < 0)
              break;
            operator delete(v27);
            v27 = v28;
            if (!v28)
              goto LABEL_41;
          }
          operator delete(v27[2]);
          operator delete(v27);
          v27 = v28;
        }
        while (v28);
      }
LABEL_41:
      v32 = __p[0];
      __p[0] = 0;
      if (!v32)
        goto LABEL_51;
    }
    else
    {
      v33 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
      v35 = v34;
      memset(__p, 0, 24);
      if (v34)
      {
        v36 = 2 * v34;
        if (2 * v34 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v37 = (const void *)v33;
        __p[0] = operator new(2 * v34);
        __p[1] = __p[0];
        v38 = (char *)__p[0] + 2 * ((2 * v35) >> 1);
        __p[2] = v38;
        memcpy(__p[0], v37, v36);
        __p[1] = v38;
      }
      MIL::IRTensorValueType::MakeFloat16Value();
      v26 = (std::__shared_weak_count_vtbl *)v63[0];
      v63[0] = 0;
      v32 = __p[0];
      if (!__p[0])
        goto LABEL_51;
      __p[1] = __p[0];
    }
    operator delete(v32);
LABEL_51:
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v57 = v26;
    if (v26)
    {
      v39 = (std::__shared_weak_count *)operator new();
      v39->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
      v39->__shared_owners_ = 0;
      v39->__shared_weak_owners_ = 0;
      v39[1].__vftable = v26;
    }
    else
    {
      v39 = 0;
    }
    v58 = v39;
    MEMORY[0x19401BAA0](v63, &v57);
    __p[0] = "x";
    MEMORY[0x19401BAAC](&__p[1], v63);
    v40 = v60;
    if ((unint64_t)v60 >= v61)
    {
      v41 = std::vector<std::pair<char const*,MIL::Transform::ArgumentDescription>>::__push_back_slow_path<std::pair<char const*,MIL::Transform::ArgumentDescription>>((char **)&v59, __p);
    }
    else
    {
      *v60 = __p[0];
      MEMORY[0x19401BAAC](v40 + 1, &__p[1]);
      v41 = (char *)(v40 + 5);
    }
    v60 = (void **)v41;
    MEMORY[0x19401BADC](&__p[1]);
    MEMORY[0x19401BADC](v63);
    v42 = v58;
    if (v58)
    {
      v43 = (unint64_t *)&v58->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    __p[0] = "indices";
    MEMORY[0x19401BAB8](&__p[1], v65);
    v45 = v60;
    if ((unint64_t)v60 >= v61)
    {
      v46 = std::vector<std::pair<char const*,MIL::Transform::ArgumentDescription>>::__push_back_slow_path<std::pair<char const*,MIL::Transform::ArgumentDescription>>((char **)&v59, __p);
    }
    else
    {
      *v60 = __p[0];
      MEMORY[0x19401BAAC](v45 + 1, &__p[1]);
      v46 = (char *)(v45 + 5);
    }
    v60 = (void **)v46;
    MEMORY[0x19401BADC](&__p[1]);
    __p[0] = "axis";
    MIL::Transform::ArgumentDescription::ArgumentDescription((MIL::Transform::ArgumentDescription *)&__p[1]);
    v47 = v60;
    if ((unint64_t)v60 >= v61)
    {
      v48 = std::vector<std::pair<char const*,MIL::Transform::ArgumentDescription>>::__push_back_slow_path<std::pair<char const*,MIL::Transform::ArgumentDescription>>((char **)&v59, __p);
    }
    else
    {
      *v60 = __p[0];
      MEMORY[0x19401BAAC](v47 + 1, &__p[1]);
      v48 = (char *)(v47 + 5);
    }
    v60 = (void **)v48;
    MEMORY[0x19401BADC](&__p[1]);
    HIBYTE(__p[2]) = 16;
    strcpy((char *)__p, "validate_indices");
    ArgumentCount = MIL::Matching::MatchView::GetArgumentCount();
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    if (ArgumentCount)
    {
      HIBYTE(v63[2]) = 16;
      strcpy((char *)v63, "validate_indices");
      MIL::Matching::MatchView::GetArgument();
      __p[0] = "validate_indices";
      MEMORY[0x19401BAB8](&__p[1], v62);
      v50 = v60;
      if ((unint64_t)v60 >= v61)
      {
        v51 = std::vector<std::pair<char const*,MIL::Transform::ArgumentDescription>>::__push_back_slow_path<std::pair<char const*,MIL::Transform::ArgumentDescription>>((char **)&v59, __p);
      }
      else
      {
        *v60 = __p[0];
        MEMORY[0x19401BAAC](v50 + 1, &__p[1]);
        v51 = (char *)(v50 + 5);
      }
      v60 = (void **)v51;
      MEMORY[0x19401BADC](&__p[1]);
      MIL::Matching::ArgumentView::~ArgumentView((MIL::Matching::ArgumentView *)v62);
      if (SHIBYTE(v63[2]) < 0)
        operator delete(v63[0]);
    }
    MIL::Matching::MatchView::GetAttributes((MIL::Matching::MatchView *)v56);
    MIL::Transform::MatchContext::AddOperation();
    MIL::Transform::NewOperationOutput::~NewOperationOutput((MIL::Transform::NewOperationOutput *)__p);
    v52 = (void **)v59;
    if (v59)
    {
      v53 = v60;
      v54 = v59;
      if (v60 != v59)
      {
        do
        {
          v55 = v53 - 5;
          MEMORY[0x19401BADC](v53 - 4);
          v53 = v55;
        }
        while (v55 != v52);
        v54 = v59;
      }
      v60 = v52;
      operator delete(v54);
    }
    goto LABEL_44;
  }
LABEL_4:
  MIL::Transform::MatchContext::RejectMatch(a2);
LABEL_31:
  MIL::Matching::MatchView::~MatchView((MIL::Matching::MatchView *)v56);
}

void sub_1910BFA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14, char *a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;
  uint64_t v29;
  char *v31;
  char *v32;
  char *v33;
  char *v34;

  MEMORY[0x19401BADC](v28);
  MIL::Matching::ArgumentView::~ArgumentView((MIL::Matching::ArgumentView *)&a17);
  if (a24 < 0)
    operator delete(__p);
  v31 = a14;
  if (a14)
  {
    v32 = a15;
    v33 = a14;
    if (a15 != a14)
    {
      do
      {
        v34 = v32 - 40;
        MEMORY[0x19401BADC](v32 - 32);
        v32 = v34;
      }
      while (v34 != v31);
      v33 = a14;
    }
    a15 = v31;
    operator delete(v33);
  }
  MIL::Matching::ArgumentView::~ArgumentView((MIL::Matching::ArgumentView *)(v29 - 104));
  MIL::Matching::ArgumentView::~ArgumentView((MIL::Matching::ArgumentView *)(v29 - 88));
  MIL::Matching::MatchView::~MatchView((MIL::Matching::MatchView *)&a11);
  _Unwind_Resume(a1);
}

void sub_1910BFC7C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  JUMPOUT(0x1910BFCB8);
}

void sub_1910BFCD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  MIL::Matching::ArgumentView::~ArgumentView((MIL::Matching::ArgumentView *)va);
  JUMPOUT(0x1910BFCDCLL);
}

uint64_t std::__function::__func<Espresso::AOT::ReplaceGatherNDWithGather(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::ReplaceGatherNDWithGather(MIL::IRProgram const&,std::string const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT25ReplaceGatherNDWithGatherERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS5_11char_tr"
                     "aitsIcEENS5_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN8Espresso3AOT25ReplaceGatherNDWithGatherERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS"
                                "5_11char_traitsIcEENS5_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT25ReplaceGatherNDWithGatherERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT25ReplaceGatherNDWithGatherERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<Espresso::AOT::ReplaceGatherNDWithGather(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::ReplaceGatherNDWithGather(MIL::IRProgram const&,std::string const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::target_type()
{
}

char *std::vector<std::pair<char const*,MIL::Transform::ArgumentDescription>>::__push_back_slow_path<std::pair<char const*,MIL::Transform::ArgumentDescription>>(char **a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t i;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v18;
  __int128 v19;

  v3 = a1[1] - *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * (v3 >> 3) + 1;
  if (v4 > 0x666666666666666)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
    v6 = 0x666666666666666;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x666666666666666)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(40 * v6);
  }
  else
  {
    v7 = 0;
  }
  v18 = &v7[8 * (v3 >> 3)];
  *((_QWORD *)&v19 + 1) = &v7[40 * v6];
  *(_QWORD *)v18 = *a2;
  MEMORY[0x19401BAAC](&v7[v3 + 8], a2 + 1);
  v9 = *a1;
  v8 = a1[1];
  for (i = 48; ; i -= 40)
  {
    v11 = &v18[i];
    v12 = &v8[i];
    if (&v8[i - 48] == v9)
      break;
    *((_QWORD *)v11 - 11) = *((_QWORD *)v12 - 11);
    MEMORY[0x19401BAC4](v11 - 80, v12 - 80);
  }
  v13 = v11 - 48;
  v15 = *a1;
  v14 = a1[1];
  *a1 = v13;
  *(_QWORD *)&v19 = v18 + 40;
  *(_OWORD *)(a1 + 1) = v19;
  if (v14 != v15)
  {
    do
    {
      v16 = v14 - 40;
      MEMORY[0x19401BADC](v14 - 32);
      v14 = v16;
    }
    while (v16 != v15);
  }
  if (v15)
    operator delete(v15);
  return v18 + 40;
}

void sub_1910BFEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__split_buffer<std::pair<char const*,MIL::Transform::ArgumentDescription>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::pair<char const*,MIL::Transform::ArgumentDescription>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    MEMORY[0x19401BADC](i - 32);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder> const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD **v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  float v23;
  float v24;
  uint64_t v25;
  _QWORD *v26;
  _BOOL8 v27;
  unint64_t v28;
  unint64_t v29;
  size_t prime;
  int8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;

  v7 = *a2;
  v8 = HIDWORD(*a2);
  v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7)
                return v14;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_23;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  v17 = (_QWORD *)(a1 + 16);
  v18 = operator new(0x28uLL);
  v14 = v18;
  *v18 = 0;
  v18[1] = v10;
  v19 = *a4;
  v18[2] = **a4;
  v20 = v19[1];
  v18[3] = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v18[4] = 0;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (v11 && (float)(v24 * (float)v11) >= v23)
  {
    v25 = *(_QWORD *)a1;
    v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v26)
    {
LABEL_29:
      *v14 = *v26;
LABEL_64:
      *v26 = v14;
      goto LABEL_65;
    }
  }
  else
  {
    v27 = 1;
    if (v11 >= 3)
      v27 = (v11 & (v11 - 1)) != 0;
    v28 = v27 | (2 * v11);
    v29 = vcvtps_u32_f32(v23 / v24);
    if (v28 <= v29)
      prime = v29;
    else
      prime = v28;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v31 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v31)
      goto LABEL_40;
    if (prime < *(_QWORD *)&v31)
    {
      v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v31 < 3uLL || (v33 = (uint8x8_t)vcnt_s8(v31), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (prime <= v32)
        prime = v32;
      if (prime < *(_QWORD *)&v31)
LABEL_40:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v35 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v25 = *(_QWORD *)a1;
        v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v26)
          goto LABEL_29;
      }
      else
      {
        v4 = v10;
        v25 = *(_QWORD *)a1;
        v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v26)
          goto LABEL_29;
      }
    }
    else
    {
      v4 = v35 & v10;
      v25 = *(_QWORD *)a1;
      v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v35 & v10));
      if (v26)
        goto LABEL_29;
    }
  }
  *v14 = *v17;
  *v17 = v14;
  *(_QWORD *)(v25 + 8 * v4) = v17;
  if (*v14)
  {
    v36 = *(_QWORD *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v36 >= v11)
        v36 %= v11;
    }
    else
    {
      v36 &= v11 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v36);
    goto LABEL_64;
  }
LABEL_65:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_1910C030C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::shared_ptr<E5RT::AsyncEvent const>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<E5RT::AsyncEvent const>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<MIL::Builder::Variable const*,std::hash<MIL::Builder::Variable const*>,std::equal_to<MIL::Builder::Variable const*>,std::allocator<MIL::Builder::Variable const*>>::__emplace_unique_key_args<MIL::Builder::Variable const*,MIL::Builder::Variable const*>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v6 = *a2;
  v7 = HIDWORD(*a2);
  v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v7);
  v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == v6)
                return v13;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_23;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v6)
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  v17 = operator new(0x18uLL);
  *v17 = 0;
  v17[1] = v9;
  v17[2] = *a3;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v21)
    {
LABEL_26:
      *v17 = *v21;
LABEL_61:
      *v21 = v17;
      goto LABEL_62;
    }
  }
  else
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_37;
    if (prime < v10)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v10)
LABEL_37:
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v3 = v9 % v10;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v21)
          goto LABEL_26;
      }
      else
      {
        v3 = v9;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v21)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v29 & v9;
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v9));
      if (v21)
        goto LABEL_26;
    }
  }
  *v17 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v17;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*v17)
  {
    v30 = *(_QWORD *)(*v17 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10)
        v30 %= v10;
    }
    else
    {
      v30 &= v10 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v17;
}

void sub_1910C0664(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_2(void *__p)
{
  operator delete(__p);
}

uint64_t OUTLINED_FUNCTION_3_1(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t OUTLINED_FUNCTION_7()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
}

void OUTLINED_FUNCTION_8_0(void **a1)
{
  operator delete(*a1);
}

uint64_t OUTLINED_FUNCTION_10_0(uint64_t a1, uint64_t a2)
{
  return a2;
}

void OUTLINED_FUNCTION_12()
{
  std::__shared_weak_count *v0;

  std::__shared_weak_count::__release_weak(v0);
}

void Espresso::AOT::GetAllOpInputs(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void **v6;
  char v7;
  void **v8;

  v5 = (void *)OUTLINED_FUNCTION_10_0(a1, a2);
  if (!v7)
  {
    v8 = v6;
    do
    {
      if (*(char *)(v4 - 1) < 0)
        operator delete(*(void **)(v4 - 24));
      v4 -= 24;
    }
    while (v4 != v2);
    v5 = *v8;
  }
  *v3 = v2;
  operator delete(v5);
  OUTLINED_FUNCTION_10();
}

void std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map(uint64_t **a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  uint64_t v5;
  int v6;

  do
  {
    v2 = *a1;
    v3 = (std::__shared_weak_count *)a1[6];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        OUTLINED_FUNCTION_8(p_shared_owners);
      while (v6);
      if (!v5)
      {
        OUTLINED_FUNCTION_26();
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    if (*((char *)a1 + 39) < 0)
      OUTLINED_FUNCTION_5();
    OUTLINED_FUNCTION_50();
    a1 = (uint64_t **)v2;
  }
  while (v2);
  OUTLINED_FUNCTION_10();
}

void Espresso::AOT::AlignCalleeWithCallOp(uint64_t a1, void **a2)
{
  if (*(char *)(a1 + 39) < 0)
    operator delete(*a2);
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_2();
}

void std::vector<std::shared_ptr<MIL::IRArgument>>::vector[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void **v6;
  char v7;
  void **v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  int v12;

  v5 = (void *)OUTLINED_FUNCTION_3_1(a1, a2);
  if (!v7)
  {
    v8 = v6;
    do
    {
      v9 = *(_QWORD *)(v4 - 8);
      if (v9)
      {
        v10 = (unint64_t *)(v9 + 8);
        do
          OUTLINED_FUNCTION_8(v10);
        while (v12);
        if (!v11)
        {
          OUTLINED_FUNCTION_7();
          OUTLINED_FUNCTION_12();
        }
      }
      v4 -= 16;
    }
    while (v4 != v2);
    v5 = *v8;
  }
  *v3 = v2;
  OUTLINED_FUNCTION_0_2(v5);
}

void std::vector<std::string>::vector(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void **v6;
  char v7;
  void **v8;

  v5 = (void *)OUTLINED_FUNCTION_10_0(a1, a2);
  if (!v7)
  {
    v8 = v6;
    do
    {
      if (*(char *)(v4 - 1) < 0)
        operator delete(*(void **)(v4 - 24));
      v4 -= 24;
    }
    while (v4 != v2);
    v5 = *v8;
  }
  *v3 = v2;
  operator delete(v5);
}

void std::pair<std::string const,std::vector<MIL::IRDimension const*>>::pair[abi:ne180100](void **a1)
{
  if (*((char *)a1 + 23) < 0)
    OUTLINED_FUNCTION_8_0(a1);
}

void std::__function::__func<Espresso::AOT::ReplaceGatherNDWithGather(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::ReplaceGatherNDWithGather(MIL::IRProgram const&,std::string const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::operator()(uint64_t a1, char *a2)
{
  char *v4;
  void *v5;
  char *v6;

  v4 = *(char **)(a1 + 8);
  v5 = a2;
  if (v4 != a2)
  {
    do
    {
      v6 = v4 - 40;
      MEMORY[0x19401BADC](v4 - 32);
      v4 = v6;
    }
    while (v6 != a2);
    v5 = *(void **)a1;
  }
  *(_QWORD *)(a1 + 8) = a2;
  operator delete(v5);
  OUTLINED_FUNCTION_10();
}

_QWORD *E5AOT::Operators::E5ML_ios16::Call::Make@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  void *__p[2];
  uint64_t v11;
  _QWORD v12[3];
  _QWORD *v13;
  _BYTE v14[24];
  _BYTE *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a1;
  v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v15 = 0;
  v16[0] = &off_1E2DAEF88;
  v17 = v16;
  MIL::IROperator::Make();
  v3 = v15;
  if (v15 == v14)
  {
    v4 = 4;
    v3 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v4))(v3);
LABEL_6:
  v5 = v17;
  if (v17 == v16)
  {
    v6 = 4;
    v5 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v6))(v5);
LABEL_11:
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
  v7 = *a2;
  v12[0] = &off_1E2DAEFE0;
  v13 = v12;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 136))(v7, v12);
  result = v13;
  if (v13 == v12)
  {
    v9 = 4;
    result = v12;
  }
  else
  {
    if (!v13)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v9))(result);
}

void sub_1910C0AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,char *a24)
{
  uint64_t *v24;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v26 = a24;
  if (a24 == &a21)
  {
    v27 = 4;
    v26 = &a21;
  }
  else
  {
    if (!a24)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_6:
  v28 = *v24;
  *v24 = 0;
  if (v28)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void E5AOT::Operators::E5ML_ios16::Transfer::Make(MIL::IRUnknownDimension *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count_vtbl *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count_vtbl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  void **v37;
  void **v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  void *v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count_vtbl *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  void **v51;
  char *v52;
  char *v53;
  void *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  void *v60[2];
  uint64_t v61;
  _QWORD *v62;
  void *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  void *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count_vtbl *v77;
  _BYTE v78[24];
  _BYTE *v79;
  _BYTE v80[24];
  _BYTE *v81;
  __int128 v82;
  __int128 v83;
  int v84;
  uint64_t v85[7];

  v85[6] = *MEMORY[0x1E0C80C00];
  v77 = 0;
  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_DWORD *)(v4 + 32) = 1065353216;
  v85[0] = 0;
  v5 = (uint64_t)v77;
  v77 = (std::__shared_weak_count_vtbl *)v4;
  if (v5)
  {
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&v77, v5);
    v6 = v85[0];
    v85[0] = 0;
    if (v6)
      std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)v85, v6);
  }
  v7 = v77;
  *(_QWORD *)&v82 = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v7, "from", v85);
  v9 = v85[0];
  v85[0] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (v76)
  {
    p_shared_owners = &v76->__shared_owners_;
    do
      v11 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v11 - 1, (unint64_t *)p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8[5] + 32))(v8[5], 1);
  v12 = v77;
  *(_QWORD *)&v82 = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v12, "to", v85);
  v14 = v85[0];
  v85[0] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (v75)
  {
    v15 = &v75->__shared_owners_;
    do
      v16 = __ldaxr((unint64_t *)v15);
    while (__stlxr(v16 - 1, (unint64_t *)v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13[5] + 32))(v13[5], 1);
  v17 = v77;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v72 = operator new(8uLL);
  *v72 = v18;
  v85[0] = MIL::IRTensorValueType::MakeWithShape();
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v71 = operator new(8uLL);
  *v71 = v19;
  v20 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v70 = operator new(8uLL);
  *v70 = v20;
  v21 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v69 = operator new(8uLL);
  *v69 = v21;
  v82 = 0u;
  v83 = 0u;
  v84 = 1065353216;
  v85[1] = MIL::IRTensorBufferValueType::MakeWithShape();
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRUnknownDimension::Make(a1, 0);
  v24 = operator new(0x10uLL);
  *v24 = v22;
  v24[1] = v23;
  v68 = v24;
  v25 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v67 = operator new(8uLL);
  *v67 = v25;
  v85[2] = MIL::IRPixelBufferValueType::MakeWithShape();
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v66 = operator new(8uLL);
  *v66 = v26;
  MIL::IRTensorValueType::MakeWithShape();
  v85[3] = MIL::IRStateValueType::Make();
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v65 = operator new(8uLL);
  *v65 = v27;
  v28 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v64 = operator new(8uLL);
  *v64 = v28;
  MIL::IRTensorBufferValueType::MakeWithShape();
  v85[4] = MIL::IRStateValueType::Make();
  v29 = MIL::IRUnknownDimension::Make(a1, 0);
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = operator new(0x10uLL);
  *v31 = v29;
  v31[1] = v30;
  v63 = v31;
  v32 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v62 = operator new(8uLL);
  *v62 = v32;
  MIL::IRPixelBufferValueType::MakeWithShape();
  v85[5] = MIL::IRStateValueType::Make();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v17, "values", &v74);
  v34 = v74;
  v74 = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  if (v73)
  {
    v35 = (unint64_t *)&v73->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)())v73->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (v62)
    operator delete(v62);
  if (v63)
    operator delete(v63);
  if (v64)
    operator delete(v64);
  if (v65)
    operator delete(v65);
  if (v66)
    operator delete(v66);
  if (v67)
    operator delete(v67);
  if (v68)
    operator delete(v68);
  v37 = (void **)v83;
  if ((_QWORD)v83)
  {
    do
    {
      while (1)
      {
        v38 = (void **)*v37;
        v39 = (std::__shared_weak_count *)v37[6];
        if (v39)
        {
          v40 = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        if (*((char *)v37 + 39) < 0)
          break;
        operator delete(v37);
        v37 = v38;
        if (!v38)
          goto LABEL_49;
      }
      operator delete(v37[2]);
      operator delete(v37);
      v37 = v38;
    }
    while (v38);
  }
LABEL_49:
  v42 = (void *)v82;
  *(_QWORD *)&v82 = 0;
  if (v42)
    operator delete(v42);
  if (v69)
    operator delete(v69);
  if (v70)
    operator delete(v70);
  if (v71)
    operator delete(v71);
  if (v72)
    operator delete(v72);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33[5] + 64))(v33[5], 1);
  v85[0] = 0;
  *(_OWORD *)v60 = *(_OWORD *)a2;
  v61 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  if (v77)
  {
    v43 = (std::__shared_weak_count *)operator new();
    v44 = v77;
    v43->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC37B0;
    v43->__shared_owners_ = 0;
    v43->__shared_weak_owners_ = 0;
    v43[1].__vftable = v44;
  }
  else
  {
    v43 = 0;
  }
  v59 = v43;
  v77 = 0;
  v85[0] = 0;
  v81 = 0;
  v79 = 0;
  MIL::IROperator::Make();
  v45 = v79;
  if (v79 == v78)
  {
    v46 = 4;
    v45 = v78;
  }
  else
  {
    if (!v79)
      goto LABEL_67;
    v46 = 5;
  }
  (*(void (**)(_QWORD *))(*v45 + 8 * v46))(v45);
LABEL_67:
  v47 = v81;
  if (v81 == v80)
  {
    v48 = 4;
    v47 = v80;
    goto LABEL_71;
  }
  if (v81)
  {
    v48 = 5;
LABEL_71:
    (*(void (**)(_QWORD *))(*v47 + 8 * v48))(v47);
  }
  if (!v59)
    goto LABEL_76;
  v49 = (unint64_t *)&v59->__shared_owners_;
  do
    v50 = __ldaxr(v49);
  while (__stlxr(v50 - 1, v49));
  if (v50)
  {
LABEL_76:
    if ((SHIBYTE(v61) & 0x80000000) == 0)
      goto LABEL_78;
    goto LABEL_77;
  }
  ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
  std::__shared_weak_count::__release_weak(v59);
  if (SHIBYTE(v61) < 0)
LABEL_77:
    operator delete(v60[0]);
LABEL_78:
  v51 = (void **)v85[0];
  v85[0] = 0;
  if (v51)
  {
    v52 = (char *)*v51;
    if (*v51)
    {
      v53 = (char *)v51[1];
      v54 = *v51;
      if (v53 != v52)
      {
        do
        {
          v55 = (std::__shared_weak_count *)*((_QWORD *)v53 - 1);
          if (v55)
          {
            v56 = (unint64_t *)&v55->__shared_owners_;
            do
              v57 = __ldaxr(v56);
            while (__stlxr(v57 - 1, v56));
            if (!v57)
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
          }
          v53 -= 16;
        }
        while (v53 != v52);
        v54 = *v51;
      }
      v51[1] = v52;
      operator delete(v54);
    }
    MEMORY[0x19401CD90](v51, 0x20C40960023A9);
  }
  v58 = (uint64_t)v77;
  v77 = 0;
  if (v58)
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&v77, v58);
}

void sub_1910C1580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v22;

  if (a20 < 0)
    operator delete(__p);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::~unique_ptr[abi:ne180100]((void ***)(v20 - 120));
  v22 = *(_QWORD *)(v20 - 232);
  *(_QWORD *)(v20 - 232) = 0;
  if (!v22)
    _Unwind_Resume(a1);
  std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100](v20 - 232, v22);
  _Unwind_Resume(a1);
}

void ***std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::~unique_ptr[abi:ne180100](void ***a1)
{
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (char *)*v2;
    if (*v2)
    {
      v4 = (char *)v2[1];
      v5 = *v2;
      if (v4 != v3)
      {
        do
        {
          v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v8 = __ldaxr(p_shared_owners);
            while (__stlxr(v8 - 1, p_shared_owners));
            if (!v8)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
          v4 -= 16;
        }
        while (v4 != v3);
        v5 = *v2;
      }
      v2[1] = v3;
      operator delete(v5);
    }
    MEMORY[0x19401CD90](v2, 0x20C40960023A9);
  }
  return a1;
}

void std::__function::__func<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_0,std::allocator<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_0>,MIL::ValidationResult ()(MIL::IROperation const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_0,std::allocator<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_0>,MIL::ValidationResult ()(MIL::IROperation const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DAEF88;
  return result;
}

void std::__function::__func<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_0,std::allocator<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_0>,MIL::ValidationResult ()(MIL::IROperation const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DAEF88;
}

void std::__function::__func<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_0,std::allocator<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_0>,MIL::ValidationResult ()(MIL::IROperation const&)>::operator()(MIL::IRObject *a1@<X1>, MIL::ValidationResult *a2@<X8>)
{
  char __p[23];

  strcpy(__p, "backend");
  E5AOT::Operators::ValidationUtils::ValidateHasStringAttribute(a1, a2);
}

void sub_1910C1BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_0,std::allocator<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_0>,MIL::ValidationResult ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5E5AOT9Operators10E5ML_ios164Call4MakeERN3MIL10MILContextENSt3__112basic_stringIcNS6_11char_trait"
                     "sIcEENS6_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN5E5AOT9Operators10E5ML_ios164Call4MakeERN3MIL10MILContextENSt3__112basic_stringIcNS6_1"
                                "1char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN5E5AOT9Operators10E5ML_ios164Call4MakeERN3MIL10MILContextENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5E5AOT9Operators10E5ML_ios164Call4MakeERN3MIL10MILContextENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_0,std::allocator<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_0>,MIL::ValidationResult ()(MIL::IROperation const&)>::target_type()
{
}

void std::__function::__func<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_1,std::allocator<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_1>,std::string ()(MIL::IROperation const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_1,std::allocator<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_1>,std::string ()(MIL::IROperation const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DAEFE0;
  return result;
}

void std::__function::__func<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_1,std::allocator<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_1>,std::string ()(MIL::IROperation const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DAEFE0;
}

void std::__function::__func<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_1,std::allocator<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_1>,std::string ()(MIL::IROperation const&)>::operator()()
{
  void *__p[2];

  strcpy((char *)__p, "function");
  MIL::IRObject::GetAttribute();
  MIL::IRValue::GetScalar<std::string>();
}

void sub_1910C1D48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_1,std::allocator<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_1>,std::string ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5E5AOT9Operators10E5ML_ios164Call4MakeERN3MIL10MILContextENSt3__112basic_stringIcNS6_11char_trait"
                     "sIcEENS6_9allocatorIcEEEEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN5E5AOT9Operators10E5ML_ios164Call4MakeERN3MIL10MILContextENSt3__112basic_stringIcNS6_1"
                                "1char_traitsIcEENS6_9allocatorIcEEEEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN5E5AOT9Operators10E5ML_ios164Call4MakeERN3MIL10MILContextENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5E5AOT9Operators10E5ML_ios164Call4MakeERN3MIL10MILContextENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_1,std::allocator<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_1>,std::string ()(MIL::IROperation const&)>::target_type()
{
}

void std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v3;
  void **v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;

  if (a2)
  {
    v3 = *(void ***)(a2 + 16);
    if (v3)
    {
      do
      {
        while (1)
        {
          v4 = (void **)*v3;
          v5 = (std::__shared_weak_count *)v3[6];
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          if (*((char *)v3 + 39) < 0)
            break;
          operator delete(v3);
          v3 = v4;
          if (!v4)
            goto LABEL_12;
        }
        operator delete(v3[2]);
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
LABEL_12:
    v8 = *(void **)a2;
    *(_QWORD *)a2 = 0;
    if (v8)
      operator delete(v8);
    JUMPOUT(0x19401CD90);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  char *v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t *inserted;
  char v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  char v17;

  v6 = (char *)operator new(0x38uLL);
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  v7 = std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[5],std::unique_ptr<MIL::IRParameter>,0>((_QWORD *)v6 + 2, a2, a3);
  v8 = v6[39];
  if (v8 >= 0)
    v9 = v7;
  else
    v9 = (uint64_t *)*((_QWORD *)v6 + 2);
  if (v8 >= 0)
    v10 = v6[39];
  else
    v10 = *((_QWORD *)v6 + 3);
  *((_QWORD *)v6 + 1) = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v17, v9, v10);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, (uint64_t)v6);
  if ((v12 & 1) == 0 && v6)
  {
    v13 = (std::__shared_weak_count *)*((_QWORD *)v6 + 6);
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (v6[39] < 0)
      operator delete(*((void **)v6 + 2));
    operator delete(v6);
  }
  return inserted;
}

void sub_1910C1FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_1910C1FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 **v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *result;
  int8x8_t v11;
  unint64_t v12;
  uint8x8_t v13;
  _QWORD *v14;
  unint64_t v15;
  char v16;

  v4 = (unsigned __int8 **)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 39);
  v6 = *(_QWORD *)(a2 + 24);
  if ((v5 & 0x80u) == 0)
    v7 = (uint64_t *)(a2 + 16);
  else
    v7 = *(uint64_t **)(a2 + 16);
  if ((v5 & 0x80u) == 0)
    v8 = v5;
  else
    v8 = v6;
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v16, v7, v8);
  *(_QWORD *)(a2 + 8) = v9;
  result = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v9, v4);
  if (!result)
  {
    v11 = (int8x8_t)a1[1];
    v12 = *(_QWORD *)(a2 + 8);
    v13 = (uint8x8_t)vcnt_s8(v11);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      if (v12 >= *(_QWORD *)&v11)
        v12 %= *(_QWORD *)&v11;
    }
    else
    {
      v12 &= *(_QWORD *)&v11 - 1;
    }
    v14 = *(_QWORD **)(*a1 + 8 * v12);
    if (v14)
    {
      *(_QWORD *)a2 = *v14;
    }
    else
    {
      *(_QWORD *)a2 = a1[2];
      a1[2] = a2;
      *(_QWORD *)(*a1 + 8 * v12) = a1 + 2;
      if (!*(_QWORD *)a2)
      {
LABEL_21:
        ++a1[3];
        return (uint64_t *)a2;
      }
      v15 = *(_QWORD *)(*(_QWORD *)a2 + 8);
      if (v13.u32[0] > 1uLL)
      {
        if (v15 >= *(_QWORD *)&v11)
          v15 %= *(_QWORD *)&v11;
      }
      else
      {
        v15 &= *(_QWORD *)&v11 - 1;
      }
      v14 = (_QWORD *)(*a1 + 8 * v15);
    }
    *v14 = a2;
    goto LABEL_21;
  }
  return result;
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[5],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *__s, uint64_t *a3)
{
  size_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v12 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v12 = v6 | 7;
    v13 = v12 + 1;
    v8 = operator new(v12 + 1);
    a1[1] = v7;
    a1[2] = v13 | 0x8000000000000000;
    *a1 = v8;
LABEL_9:
    memmove(v8, __s, v7);
    *((_BYTE *)v8 + v7) = 0;
    v14 = *a3;
    a1[3] = *a3;
    if (v14)
      goto LABEL_5;
LABEL_10:
    v10 = 0;
    goto LABEL_11;
  }
  *((_BYTE *)a1 + 23) = v6;
  v8 = a1;
  if (v6)
    goto LABEL_9;
  *(_BYTE *)a1 = 0;
  v9 = *a3;
  a1[3] = *a3;
  if (!v9)
    goto LABEL_10;
LABEL_5:
  v10 = (_QWORD *)operator new();
  v11 = *a3;
  *v10 = &unk_1E2DC2FD0;
  v10[1] = 0;
  v10[2] = 0;
  v10[3] = v11;
LABEL_11:
  a1[4] = v10;
  *a3 = 0;
  return a1;
}

void sub_1910C2240(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<MIL::IRParameter  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRParameter  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A87BACLL)
    return a1 + 24;
  if (((v3 & 0x8000000191A87BACLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A87BACLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A87BACLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__shared_ptr_pointer<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>> *>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100](a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A87CCCLL)
    return a1 + 24;
  if (((v3 & 0x8000000191A87CCCLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A87CCCLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A87CCCLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t E5AOT::Operators::E5ML_ios16::Transfer::Make(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  if ((_QWORD *)*a1 == a2)
  {
    v6 = 4;
    goto LABEL_5;
  }
  if (*a1)
  {
    v6 = 5;
    a2 = (_QWORD *)*a1;
LABEL_5:
    (*(void (**)(_QWORD *))(*a2 + 8 * v6))(a2);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](a3);
  return std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](a4);
}

uint64_t Espresso::AOT::Validators::AneValidator::AneValidator(uint64_t a1, _OWORD *a2, __int128 *a3, char a4)
{
  _QWORD *v8;
  std::string *v9;
  __int128 v10;

  v8 = Espresso::AOT::AbstractValidator::AbstractValidator((_QWORD *)a1);
  *v8 = off_1E2DA0160;
  *(_OWORD *)(v8 + 1) = *a2;
  v9 = (std::string *)(v8 + 3);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v10 = *a3;
    v9->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  *(_BYTE *)(a1 + 48) = a4;
  return a1;
}

{
  _QWORD *v8;
  std::string *v9;
  __int128 v10;

  v8 = Espresso::AOT::AbstractValidator::AbstractValidator((_QWORD *)a1);
  *v8 = off_1E2DA0160;
  *(_OWORD *)(v8 + 1) = *a2;
  v9 = (std::string *)(v8 + 3);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v10 = *a3;
    v9->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  *(_BYTE *)(a1 + 48) = a4;
  return a1;
}

void sub_1910C246C(_Unwind_Exception *a1)
{
  Espresso::AOT::AbstractValidator *v1;
  E5RT::AsyncEventImpl *v2;

  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  Espresso::AOT::AbstractValidator::~AbstractValidator(v1);
  _Unwind_Resume(a1);
}

void sub_1910C2518(_Unwind_Exception *a1)
{
  Espresso::AOT::AbstractValidator *v1;
  E5RT::AsyncEventImpl *v2;

  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  Espresso::AOT::AbstractValidator::~AbstractValidator(v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::Validators::AneValidator::Validate(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  const void *v17;
  unint64_t v18;
  id v19;
  const char *v20;
  size_t v21;
  size_t v22;
  void **p_dst;
  uint64_t Function;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  size_t v29;
  uint64_t OpsetName;
  uint64_t v31;
  const void *v32;
  const void *v33;
  unint64_t v34;
  void *v35;
  char *v36;
  char *v37;
  void *v38;
  void *v39;
  void **v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  char *v44;
  char *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  Espresso::AOT::ValidationResult *v49;
  uint64_t v50;
  uint64_t v51;
  void **v52;
  void **v53;
  void *v54;
  uint64_t v55;
  void **v56;
  void *v57;
  uint64_t ValidDispatchUnits;
  uint64_t v59;
  const void *v60;
  int64_t v61;
  char *v62;
  uint64_t *ValidationMessages;
  uint64_t v64;
  void **v65;
  void **v66;
  void **v67;
  Espresso::AOT::ValidationResult *v68;
  void *__p;
  int v70[2];
  char *v71;
  void **__dst;
  void **v73;
  unint64_t v74;
  std::string v75;
  void *v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  *a4 = 0;
  if (!*(_BYTE *)(a1 + 48))
  {
    Function = MIL::IRProgram::GetFunction();
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Function + 32))(Function);
    v26 = v25;
    v27 = *(char *)(v25 + 23);
    v28 = *(_QWORD *)v25;
    if (v27 >= 0)
      v29 = *(unsigned __int8 *)(v25 + 23);
    else
      v29 = *(_QWORD *)(v25 + 8);
    OpsetName = MIL::Opsets::Train::ios16Train::ios16_trainOpset::GetOpsetName((MIL::Opsets::Train::ios16Train::ios16_trainOpset *)v25);
    if (v29 == v31)
    {
      v32 = (const void *)OpsetName;
      v33 = (const void *)(v27 >= 0 ? v26 : v28);
      if (!memcmp(v33, v32, v29))
      {
        memset(&v75, 0, sizeof(v75));
        __p = 0;
        *(_QWORD *)v70 = 0;
        v71 = 0;
        v55 = operator new();
        Espresso::AOT::ValidationResult::ValidationResult(v55, &v75, &__p);
        v68 = (Espresso::AOT::ValidationResult *)v55;
        v52 = (void **)__p;
        if (!__p)
          goto LABEL_73;
        v56 = *(void ***)v70;
        v54 = __p;
        if (*(void **)v70 == __p)
        {
LABEL_72:
          *(_QWORD *)v70 = v52;
          operator delete(v54);
LABEL_73:
          v40 = (void **)v75.__r_.__value_.__r.__words[0];
          if (v75.__r_.__value_.__r.__words[0])
          {
            v75.__r_.__value_.__l.__size_ = v75.__r_.__value_.__r.__words[0];
            goto LABEL_75;
          }
          goto LABEL_76;
        }
        do
        {
          if (*((char *)v56 - 1) < 0)
            operator delete(*(v56 - 3));
          v56 -= 4;
        }
        while (v56 != v52);
LABEL_71:
        v54 = __p;
        goto LABEL_72;
      }
    }
    v34 = ANECGetValidateNetworkSupportedVersion();
    Espresso::AOT::GetANENameForE5Platform(a1 + 8, &__dst);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[15],std::string const&,0>(&v75, "scratchPadPath", (__int128 *)(a1 + 24));
    std::unordered_map<std::string,std::string>::unordered_map((uint64_t)&__p, (uint64_t)&v75, 1);
    Espresso::AOT::Utils::MakeValidationInput(v34, a2, a3, (uint64_t *)&__dst, (uint64_t)&__p);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = v71;
    if (!v71)
    {
LABEL_29:
      v38 = __p;
      __p = 0;
      if (v38)
        operator delete(v38);
      if (v77 < 0)
      {
        operator delete(v76);
        if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_33;
      }
      else if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_33;
      }
      operator delete(v75.__r_.__value_.__l.__data_);
LABEL_33:
      v39 = (void *)ANECValidateNetworkCreate();
      Espresso::AOT::Utils::ParseValidationOutput(v34, v39, (uint64_t *)&v68);

      if (SHIBYTE(v74) < 0)
      {
        v40 = __dst;
LABEL_75:
        operator delete(v40);
      }
LABEL_76:
      v49 = v68;
      *a4 = (uint64_t)v68;
      goto LABEL_77;
    }
    while (1)
    {
      v37 = *(char **)v36;
      if (v36[63] < 0)
      {
        operator delete(*((void **)v36 + 5));
        if ((v36[39] & 0x80000000) == 0)
          goto LABEL_25;
LABEL_28:
        operator delete(*((void **)v36 + 2));
        operator delete(v36);
        v36 = v37;
        if (!v37)
          goto LABEL_29;
      }
      else
      {
        if (v36[39] < 0)
          goto LABEL_28;
LABEL_25:
        operator delete(v36);
        v36 = v37;
        if (!v37)
          goto LABEL_29;
      }
    }
  }
  v8 = MIL::IRProgram::GetFunction();
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  v10 = v9;
  v11 = *(char *)(v9 + 23);
  v12 = *(_QWORD *)v9;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(v9 + 23);
  else
    v13 = *(_QWORD *)(v9 + 8);
  v14 = MIL::Opsets::Train::ios16Train::ios16_trainOpset::GetOpsetName((MIL::Opsets::Train::ios16Train::ios16_trainOpset *)v9);
  if (v13 == v15)
  {
    v16 = (const void *)v14;
    v17 = (const void *)(v11 >= 0 ? v10 : v12);
    if (!memcmp(v17, v16, v13))
    {
      memset(&v75, 0, sizeof(v75));
      __p = 0;
      *(_QWORD *)v70 = 0;
      v71 = 0;
      v51 = operator new();
      Espresso::AOT::ValidationResult::ValidationResult(v51, &v75, &__p);
      v68 = (Espresso::AOT::ValidationResult *)v51;
      v52 = (void **)__p;
      if (!__p)
        goto LABEL_73;
      v53 = *(void ***)v70;
      v54 = __p;
      if (*(void **)v70 == __p)
        goto LABEL_72;
      do
      {
        if (*((char *)v53 - 1) < 0)
          operator delete(*(v53 - 3));
        v53 -= 4;
      }
      while (v53 != v52);
      goto LABEL_71;
    }
  }
  v18 = ANEGetValidateNetworkSupportedVersion();
  objc_msgSend(MEMORY[0x1E0CFDF48], "aneSubType");
  v19 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v20 = (const char *)objc_msgSend(v19, "UTF8String");
  v21 = strlen(v20);
  if (v21 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v22 = v21;
  if (v21 >= 0x17)
  {
    v41 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v41 = v21 | 7;
    v42 = v41 + 1;
    p_dst = (void **)operator new(v41 + 1);
    v73 = (void **)v22;
    v74 = v42 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_38;
  }
  HIBYTE(v74) = v21;
  p_dst = (void **)&__dst;
  if (v21)
LABEL_38:
    memmove(p_dst, v20, v22);
  *((_BYTE *)p_dst + v22) = 0;

  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[15],std::string const&,0>(&v75, "scratchPadPath", (__int128 *)(a1 + 24));
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)&__p, (uint64_t)&v75, 1);
  Espresso::AOT::Utils::MakeValidationInput(v18, a2, a3, (uint64_t *)&__dst, (uint64_t)&__p);
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  v44 = v71;
  if (v71)
  {
    while (1)
    {
      v45 = *(char **)v44;
      if (v44[63] < 0)
      {
        operator delete(*((void **)v44 + 5));
        if ((v44[39] & 0x80000000) == 0)
          goto LABEL_42;
LABEL_45:
        operator delete(*((void **)v44 + 2));
        operator delete(v44);
        v44 = v45;
        if (!v45)
          break;
      }
      else
      {
        if (v44[39] < 0)
          goto LABEL_45;
LABEL_42:
        operator delete(v44);
        v44 = v45;
        if (!v45)
          break;
      }
    }
  }
  v46 = __p;
  __p = 0;
  if (v46)
    operator delete(v46);
  if (v77 < 0)
  {
    operator delete(v76);
    if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_50;
LABEL_56:
    operator delete(v75.__r_.__value_.__l.__data_);
    goto LABEL_50;
  }
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_56;
LABEL_50:
  v47 = (void *)ANEValidateNetworkCreate();
  Espresso::AOT::Utils::ParseValidationOutput(v18, v47, (uint64_t *)&v68);

  if (SHIBYTE(v74) < 0)
    operator delete(__dst);
  v48 = *a4;
  v49 = v68;
  v68 = 0;
  *a4 = (uint64_t)v49;
  if (v48)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
    v50 = (uint64_t)v68;
    v68 = 0;
    if (v50)
      (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  }
LABEL_77:
  Espresso::AOT::RequireDecompositionForANE((uint64_t **)&v75);
  v57 = (void *)v75.__r_.__value_.__r.__words[0];
  if (v75.__r_.__value_.__r.__words[0] != v75.__r_.__value_.__l.__size_)
  {
    ValidDispatchUnits = Espresso::AOT::ValidationResult::GetValidDispatchUnits(v49);
    __p = 0;
    *(_QWORD *)v70 = 0;
    v71 = 0;
    v60 = *(const void **)ValidDispatchUnits;
    v59 = *(_QWORD *)(ValidDispatchUnits + 8);
    v61 = v59 - *(_QWORD *)ValidDispatchUnits;
    if (v59 != *(_QWORD *)ValidDispatchUnits)
    {
      if (v61 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      __p = operator new(v59 - *(_QWORD *)ValidDispatchUnits);
      *(_QWORD *)v70 = __p;
      v62 = (char *)__p + 8 * (v61 >> 3);
      v71 = v62;
      memcpy(__p, v60, v61);
      *(_QWORD *)v70 = v62;
    }
    ValidationMessages = (uint64_t *)Espresso::AOT::ValidationResult::GetValidationMessages(v49);
    __dst = 0;
    v73 = 0;
    v74 = 0;
    std::vector<Espresso::AOT::ValidationMessage>::__init_with_size[abi:ne180100]<Espresso::AOT::ValidationMessage*,Espresso::AOT::ValidationMessage*>(&__dst, *ValidationMessages, ValidationMessages[1], (ValidationMessages[1] - *ValidationMessages) >> 5);
    std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>((unint64_t *)&__p, *(void **)v70, v75.__r_.__value_.__l.__data_, (char *)v75.__r_.__value_.__l.__size_, (uint64_t)(v75.__r_.__value_.__l.__size_ - v75.__r_.__value_.__r.__words[0]) >> 3);
    v64 = operator new();
    Espresso::AOT::ValidationResult::ValidationResult(v64, &__p, &__dst);
    *a4 = v64;
    if (v49)
      (*(void (**)(Espresso::AOT::ValidationResult *))(*(_QWORD *)v49 + 8))(v49);
    v65 = __dst;
    if (__dst)
    {
      v66 = v73;
      v67 = __dst;
      if (v73 != __dst)
      {
        do
        {
          if (*((char *)v66 - 1) < 0)
            operator delete(*(v66 - 3));
          v66 -= 4;
        }
        while (v66 != v65);
        v67 = __dst;
      }
      v73 = v65;
      operator delete(v67);
    }
    if (__p)
    {
      *(_QWORD *)v70 = __p;
      operator delete(__p);
    }
    v57 = (void *)v75.__r_.__value_.__r.__words[0];
  }
  if (v57)
  {
    v75.__r_.__value_.__l.__size_ = (std::string::size_type)v57;
    operator delete(v57);
  }
}

void sub_1910C2C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22)
{
  _QWORD *v22;
  uint64_t v23;

  MEMORY[0x19401CD90](v23, 0x10B1C40E94733EDLL);
  std::vector<Espresso::AOT::ValidationMessage>::~vector[abi:ne180100](&a10);
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
    *v22 = 0;
    _Unwind_Resume(a1);
  }
  *v22 = 0;
  _Unwind_Resume(a1);
}

void sub_1910C2E00(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = 0;
  _Unwind_Resume(a1);
}

void **std::vector<Espresso::AOT::ValidationMessage>::~vector[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 4;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void Espresso::AOT::Validators::AneValidator::~AneValidator(void **this)
{
  *this = off_1E2DA0160;
  if (*((char *)this + 47) < 0)
  {
    operator delete(this[3]);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(this + 1));
  }
  else
  {
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(this + 1));
  }
  Espresso::AOT::AbstractValidator::~AbstractValidator((Espresso::AOT::AbstractValidator *)this);
}

{
  *this = off_1E2DA0160;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(this + 1));
  Espresso::AOT::AbstractValidator::~AbstractValidator((Espresso::AOT::AbstractValidator *)this);
  JUMPOUT(0x19401CD90);
}

uint64_t std::unordered_map<std::string,std::string>::unordered_map(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 48 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(a1, a2, a2);
      a2 += 48;
      v5 -= 48;
    }
    while (v5);
  }
  return a1;
}

void sub_1910C2FBC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v3;

  v3 = *(void ***)(v1 + 16);
  if (v3)
    std::unordered_map<std::string,std::string>::unordered_map(v3);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>::unordered_map((void **)v1);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[15],std::string const&,0>(std::string *a1, char *__s, __int128 *a3)
{
  size_t v6;
  size_t v7;
  void *v8;
  std::string *v9;
  __int128 v10;
  uint64_t v12;
  uint64_t v13;

  v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v12 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v12 = v6 | 7;
    v13 = v12 + 1;
    v8 = operator new(v12 + 1);
    a1->__r_.__value_.__l.__size_ = v7;
    a1->__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    a1->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
LABEL_9:
    memmove(v8, __s, v7);
    *((_BYTE *)v8 + v7) = 0;
    v9 = a1 + 1;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
  *((_BYTE *)&a1->__r_.__value_.__s + 23) = v6;
  v8 = a1;
  if (v6)
    goto LABEL_9;
  a1->__r_.__value_.__s.__data_[0] = 0;
  v9 = a1 + 1;
  if ((*((char *)a3 + 23) & 0x80000000) == 0)
  {
LABEL_5:
    v10 = *a3;
    v9->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
    return a1;
  }
LABEL_10:
  std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  return a1;
}

void sub_1910C30D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::vector<Espresso::AOT::ValidationMessage>::__init_with_size[abi:ne180100]<Espresso::AOT::ValidationMessage*,Espresso::AOT::ValidationMessage*>(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  const std::string::value_type **v12;

  if (a4)
  {
    if (a4 >> 59)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(32 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[32 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v10 = a2 + v9;
        *(_QWORD *)&v8[v9] = *(_QWORD *)(a2 + v9);
        v11 = (std::string *)&v8[v9 + 8];
        v12 = (const std::string::value_type **)(a2 + v9 + 8);
        if (*(char *)(a2 + v9 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v11, *v12, *(_QWORD *)(v10 + 16));
        }
        else
        {
          *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)v12;
          *(_QWORD *)&v8[v9 + 24] = *(_QWORD *)(a2 + v9 + 24);
        }
        v9 += 32;
      }
      while (v10 + 32 != a3);
      v8 += v9;
    }
    a1[1] = v8;
  }
}

void sub_1910C31DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__exception_guard_exceptions<std::vector<Espresso::AOT::ValidationMessage>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<Espresso::AOT::ValidationMessage>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0)
            operator delete(*(v4 - 3));
          v4 -= 4;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

char *std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int64_t v25;
  unint64_t v26;
  char *v27;
  size_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  __int128 *v40;
  uint64_t v41;
  __int128 v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 *v49;
  _OWORD *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  __int128 *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  char *v64;
  size_t v65;
  uint64_t v66;
  char *v67;
  unint64_t v70;

  v6 = *a1;
  v7 = (uint64_t)a2 - *a1;
  v8 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  v9 = a5 - 1;
  if (a5 < 1)
    return v8;
  v11 = __src;
  v13 = v7 >> 3;
  v15 = a1[1];
  v14 = a1[2];
  if (a5 > (uint64_t)(v14 - v15) >> 3)
  {
    v16 = a5 + ((uint64_t)(v15 - v6) >> 3);
    if (v16 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v17 = v14 - v6;
    if (v17 >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v19 = *a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
      v20 = v18;
      v21 = operator new(8 * v18);
      v18 = v20;
      v8 = (char *)v19;
      v13 = v7 >> 3;
      v11 = __src;
    }
    else
    {
      v21 = 0;
    }
    v43 = &v21[8 * v13];
    v44 = &v43[8 * a5];
    v45 = v43;
    v46 = v11;
    if ((v9 & 0x1FFFFFFFFFFFFFFFuLL) < 7)
      goto LABEL_57;
    v45 = &v21[8 * v13];
    v46 = v11;
    if ((unint64_t)(&v21[v7 & 0xFFFFFFFFFFFFFFF8] - v11) < 0x20)
      goto LABEL_57;
    v47 = (v9 & 0x1FFFFFFFFFFFFFFFLL) + 1;
    v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
    v45 = &v43[v48];
    v46 = &v11[v48];
    v49 = (__int128 *)(v11 + 16);
    v50 = &v21[8 * v13 + 16];
    v51 = v47 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v52 = *v49;
      *(v50 - 1) = *(v49 - 1);
      *v50 = v52;
      v49 += 2;
      v50 += 2;
      v51 -= 4;
    }
    while (v51);
    if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_57:
      do
      {
        v53 = *(_QWORD *)v46;
        v46 += 8;
        *(_QWORD *)v45 = v53;
        v45 += 8;
      }
      while (v45 != v44);
    }
    v54 = &v21[8 * v13];
    if ((void *)v6 != a2)
    {
      v55 = v8;
      v54 = &v21[8 * v13];
      if ((unint64_t)(v7 - 8) < 0x68)
        goto LABEL_58;
      v55 = v8;
      v54 = &v21[8 * v13];
      if ((v7 & 0xFFFFFFFFFFFFFFF8) + v6 - (unint64_t)&v21[v7 & 0xFFFFFFFFFFFFFFF8] < 0x20)
        goto LABEL_58;
      v56 = ((unint64_t)(v7 - 8) >> 3) + 1;
      v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
      v55 = &v8[-v57];
      v54 = &v43[-v57];
      v58 = 8 * v13 - 16;
      v59 = &v21[v58];
      v60 = (__int128 *)(v6 + v58);
      v61 = v56 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v62 = *v60;
        *(v59 - 1) = *(v60 - 1);
        *v59 = v62;
        v59 -= 2;
        v60 -= 2;
        v61 -= 4;
      }
      while (v61);
      if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_58:
        do
        {
          v63 = *((_QWORD *)v55 - 1);
          v55 -= 8;
          *((_QWORD *)v54 - 1) = v63;
          v54 -= 8;
        }
        while (v55 != (char *)v6);
      }
    }
    v64 = &v21[8 * v18];
    v65 = v15 - (_QWORD)v8;
    if (v65)
      memmove(&v43[8 * a5], v8, v65);
    *a1 = (unint64_t)v54;
    a1[1] = (unint64_t)&v44[v65];
    a1[2] = (unint64_t)v64;
    if (v6)
      operator delete((void *)v6);
    return v43;
  }
  v22 = v15 - (_QWORD)v8;
  v23 = (uint64_t)(v15 - (_QWORD)v8) >> 3;
  if (v23 >= a5)
  {
    v24 = &__src[8 * a5];
    v26 = a1[1];
  }
  else
  {
    v24 = &__src[8 * v23];
    v25 = a4 - v24;
    if (a4 != v24)
    {
      v70 = *a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
      memmove((void *)a1[1], &__src[8 * v23], a4 - v24);
      v13 = v7 >> 3;
      v8 = (char *)v70;
    }
    v26 = v15 + v25;
    a1[1] = v15 + v25;
    if (v22 < 1)
      return v8;
  }
  v27 = &v8[8 * a5];
  v28 = v26 - (_QWORD)v27;
  v29 = (uint64_t)(v26 - (_QWORD)v27) >> 3;
  v30 = (uint64_t *)(v26 - 8 * a5);
  v31 = (_QWORD *)v26;
  if ((unint64_t)v30 < v15)
  {
    v32 = (v7 & 0xFFFFFFFFFFFFFFF8) + v28;
    v33 = (char *)(v32 + v6);
    v34 = v32 + v6 + 8;
    if (v15 > v34)
      v34 = v15;
    v35 = v34 + ~v6 - v32;
    if (v35 < 0x58)
    {
      v31 = (_QWORD *)v26;
    }
    else
    {
      v36 = v26 - (_QWORD)v33;
      v31 = (_QWORD *)v26;
      if (v36 >= 0x20)
      {
        v37 = (v35 >> 3) + 1;
        v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
        v30 = (uint64_t *)((char *)v30 + v38);
        v31 = (_QWORD *)(v26 + v38);
        v39 = (_OWORD *)(v26 + 16);
        v40 = (__int128 *)(8 * v29 + 8 * v13 + v6 + 16);
        v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v42 = *v40;
          *(v39 - 1) = *(v40 - 1);
          *v39 = v42;
          v39 += 2;
          v40 += 2;
          v41 -= 4;
        }
        while (v41);
        if (v37 == (v37 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_47;
      }
    }
    do
    {
      v66 = *v30++;
      *v31++ = v66;
    }
    while ((unint64_t)v30 < v15);
  }
LABEL_47:
  a1[1] = (unint64_t)v31;
  if ((char *)v26 != v27)
  {
    v67 = v8;
    memmove((void *)(v26 - 8 * v29), v8, v28);
    v8 = v67;
  }
  if (v24 != v11)
  {
    v43 = v8;
    memmove(v8, v11, v24 - v11);
    return v43;
  }
  return v8;
}

void std::unordered_map<std::string,std::string>::unordered_map(void **__p)
{
  void **v2;

  do
  {
    v2 = (void **)*__p;
    if (*((char *)__p + 63) < 0)
      operator delete(__p[5]);
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
    operator delete(__p);
    __p = v2;
  }
  while (v2);
}

uint64_t *Espresso::AOT::BackendRegistry::CheckAndGetBackend(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;

  v3 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(a1, a2);
  if (!v3)
  {
    if (*(char *)(a2 + 23) >= 0)
      v5 = a2;
    else
      v5 = *(_QWORD *)a2;
    v6 = v5;
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Backend %s is not registered", &v6);
  }
  return v3 + 5;
}

void Espresso::AOT::BackendRegistry::RegisterBackend(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char v11;
  char v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v5 = (std::__shared_weak_count *)a3[1];
  v20 = *a3;
  v21 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (std::__shared_weak_count *)a4[1];
  v22 = *a4;
  v23 = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  std::__hash_table<std::__hash_value_type<std::string,std::pair<std::shared_ptr<Espresso::AOT::AbstractValidator>,std::shared_ptr<Espresso::AOT::AbstractCostEstimator>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<Espresso::AOT::AbstractValidator>,std::shared_ptr<Espresso::AOT::AbstractCostEstimator>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<Espresso::AOT::AbstractValidator>,std::shared_ptr<Espresso::AOT::AbstractCostEstimator>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::shared_ptr<Espresso::AOT::AbstractValidator>,std::shared_ptr<Espresso::AOT::AbstractCostEstimator>>>>>::__emplace_unique_key_args<std::string,std::string const&,std::pair<std::shared_ptr<Espresso::AOT::AbstractValidator>,std::shared_ptr<Espresso::AOT::AbstractCostEstimator>>>(a1, a2, a2, (uint64_t)&v20);
  v12 = v11;
  v13 = v23;
  if (v23)
  {
    v14 = (unint64_t *)&v23->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v21;
  if (v21)
  {
    v17 = (unint64_t *)&v21->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if ((v12 & 1) == 0)
  {
    if (*(char *)(a2 + 23) >= 0)
      v19 = a2;
    else
      v19 = *(_QWORD *)a2;
    v20 = v19;
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long long &>("Backend %s is already registered", &v20);
  }
}

void sub_1910C3828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *Espresso::AOT::BackendRegistry::GetBackends@<X0>(Espresso::AOT::BackendRegistry *this@<X0>, std::vector<std::string> *a2@<X8>)
{
  void *result;
  uint64_t *v5;
  uint64_t v6;

  result = std::vector<std::string>::vector(a2, *((_QWORD *)this + 3));
  v5 = (uint64_t *)*((_QWORD *)this + 2);
  if (v5)
  {
    v6 = 0;
    do
    {
      result = std::string::operator=(&a2->__begin_[v6], (const std::string *)(v5 + 2));
      v5 = (uint64_t *)*v5;
      ++v6;
    }
    while (v5);
  }
  return result;
}

void sub_1910C3898(_Unwind_Exception *a1)
{
  void **v1;

  std::vector<std::string>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *Espresso::AOT::BackendRegistry::GetValidator@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *result;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(a1, a2);
  if (!result)
  {
    if (*(char *)(a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *(_QWORD *)a2;
    v10 = v9;
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Backend %s is not registered", &v10);
  }
  v6 = result[6];
  *a3 = result[5];
  a3[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

uint64_t *Espresso::AOT::BackendRegistry::GetCostEstimator@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *result;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(a1, a2);
  if (!result)
  {
    if (*(char *)(a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *(_QWORD *)a2;
    v10 = v9;
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Backend %s is not registered", &v10);
  }
  v6 = result[8];
  *a3 = result[7];
  a3[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::pair<std::shared_ptr<Espresso::AOT::AbstractValidator>,std::shared_ptr<Espresso::AOT::AbstractCostEstimator>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<Espresso::AOT::AbstractValidator>,std::shared_ptr<Espresso::AOT::AbstractCostEstimator>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<Espresso::AOT::AbstractValidator>,std::shared_ptr<Espresso::AOT::AbstractCostEstimator>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::shared_ptr<Espresso::AOT::AbstractValidator>,std::shared_ptr<Espresso::AOT::AbstractCostEstimator>>>>>::__emplace_unique_key_args<std::string,std::string const&,std::pair<std::shared_ptr<Espresso::AOT::AbstractValidator>,std::shared_ptr<Espresso::AOT::AbstractCostEstimator>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _BYTE *v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  uint64_t **v15;
  uint64_t *v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void **v22;
  unsigned __int8 *j;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void **v27;
  unsigned __int8 *i;
  char *v29;
  std::string *v30;
  __int128 v31;
  float v32;
  float v33;
  _QWORD *v34;
  _QWORD *v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  size_t prime;
  int8x8_t v40;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD v47[2];
  char v48;

  v7 = (_BYTE *)a2;
  v9 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v10 = v9;
  }
  v11 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v47, (uint64_t *)a2, v10);
  v12 = v11;
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v4 = v11;
      if (v11 >= v13)
        v4 = v11 % v13;
    }
    else
    {
      v4 = (v13 - 1) & v11;
    }
    v15 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      v16 = *v15;
      if (*v15)
      {
        v17 = v7[23];
        if (v17 >= 0)
          v18 = v7[23];
        else
          v18 = *((_QWORD *)v7 + 1);
        if (v17 < 0)
          v7 = *(_BYTE **)v7;
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            v24 = v16[1];
            if (v24 == v12)
            {
              v25 = *((unsigned __int8 *)v16 + 39);
              if ((v25 & 0x80u) == 0)
                v26 = *((unsigned __int8 *)v16 + 39);
              else
                v26 = v16[3];
              if (v26 == v18)
              {
                v27 = (const void **)(v16 + 2);
                if ((v25 & 0x80) != 0)
                {
                  if (!memcmp(*v27, v7, v16[3]))
                    return v16;
                }
                else
                {
                  if (!*((_BYTE *)v16 + 39))
                    return v16;
                  for (i = v7; *(unsigned __int8 *)v27 == *i; ++i)
                  {
                    v27 = (const void **)((char *)v27 + 1);
                    if (!--v25)
                      return v16;
                  }
                }
              }
            }
            else if ((v24 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v16 = (uint64_t *)*v16;
            if (!v16)
              goto LABEL_51;
          }
        }
        do
        {
          v19 = v16[1];
          if (v19 == v12)
          {
            v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0)
              v21 = *((unsigned __int8 *)v16 + 39);
            else
              v21 = v16[3];
            if (v21 == v18)
            {
              v22 = (const void **)(v16 + 2);
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp(*v22, v7, v16[3]))
                  return v16;
              }
              else
              {
                if (!*((_BYTE *)v16 + 39))
                  return v16;
                for (j = v7; *(unsigned __int8 *)v22 == *j; ++j)
                {
                  v22 = (const void **)((char *)v22 + 1);
                  if (!--v20)
                    return v16;
                }
              }
            }
          }
          else
          {
            if (v19 >= v13)
              v19 %= v13;
            if (v19 != v4)
              break;
          }
          v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  v29 = (char *)operator new(0x48uLL);
  v47[0] = v29;
  v47[1] = a1 + 16;
  v48 = 0;
  *(_QWORD *)v29 = 0;
  *((_QWORD *)v29 + 1) = v12;
  v30 = (std::string *)(v29 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v30, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v30->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v29 + 4) = *(_QWORD *)(a3 + 16);
  }
  v31 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v29 + 40) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_OWORD *)(v29 + 56) = v31;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  v48 = 1;
  v32 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v33 = *(float *)(a1 + 32);
  if (!v13 || (float)(v33 * (float)v13) < v32)
  {
    v36 = 1;
    if (v13 >= 3)
      v36 = (v13 & (v13 - 1)) != 0;
    v37 = v36 | (2 * v13);
    v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38)
      prime = v38;
    else
      prime = v37;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v40)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v40)
    {
      v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v40 < 3uLL || (v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        v41 = std::__next_prime(v41);
      }
      else
      {
        v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2)
          v41 = v43;
      }
      if (prime <= v41)
        prime = v41;
      if (prime < *(_QWORD *)&v40)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v13 = *(_QWORD *)(a1 + 8);
    v44 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        v4 = v12 % v13;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v12 % v13));
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_57;
      }
      else
      {
        v4 = v12;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v44 & v12;
      v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v44 & v12));
      v35 = (_QWORD *)v47[0];
      if (v34)
        goto LABEL_57;
    }
LABEL_81:
    *v35 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v47[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v47[0])
    {
      v45 = *(_QWORD *)(*(_QWORD *)v47[0] + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v45 >= v13)
          v45 %= v13;
      }
      else
      {
        v45 &= v13 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_92;
  }
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v35 = (_QWORD *)v47[0];
  if (!v34)
    goto LABEL_81;
LABEL_57:
  *v35 = *v34;
  *v34 = v47[0];
LABEL_92:
  v16 = (uint64_t *)v47[0];
  ++*(_QWORD *)(a1 + 24);
  return v16;
}

void sub_1910C3DF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_1910C3E08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

id Espresso::AOT::Utils::MakeValidationInput(unint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  id v8;
  uint64_t *i;
  _QWORD *v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t *v17;
  void *v18;
  void *v19;
  uint64_t *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v25;
  unint64_t v26;
  _QWORD v27[4];
  _QWORD v28[5];

  v28[4] = *MEMORY[0x1E0C80C00];
  v26 = a1;
  if (a1 >= 3)
    Espresso::throw_exception_selector<Espresso::not_implemented_error,unsigned long long &>("Backend validation api version %lu", &v26);
  v25 = a2;
  v8 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  for (i = *(uint64_t **)(a5 + 16); i; i = (uint64_t *)*i)
  {
    v10 = i + 5;
    if (*((char *)i + 63) < 0)
      v10 = (_QWORD *)*v10;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = i + 2;
    if (*((char *)i + 39) < 0)
      v12 = (_QWORD *)*v12;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v11, v13);

  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", &Espresso::AOT::Utils::kMILProgram);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v27[0] = v14;
  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", &v25, 8);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v28[0] = v15;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "function");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v27[1] = v16;
  if (*((char *)a3 + 23) >= 0)
    v17 = a3;
  else
    v17 = (uint64_t *)*a3;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v28[1] = v18;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "architecture");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v27[2] = v19;
  if (*((char *)a4 + 23) >= 0)
    v20 = a4;
  else
    v20 = (uint64_t *)*a4;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v28[2] = v21;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "parameters");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v27[3] = v22;
  v28[3] = v8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v28, v27, 4);
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  return v23;
}

void sub_1910C4060(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::not_implemented_error,unsigned long long &>(char *a1, _QWORD *a2)
{
  Espresso::throw_exception_with_format<Espresso::not_implemented_error>(a1, *a2);
}

void Espresso::AOT::Utils::ParseValidationOutput(unint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  void *v4;
  void *v5;
  uint64_t Function;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  __int128 v11;
  void *v12;
  void *v13;
  std::string *v14;
  std::string::size_type v15;
  uint8_t v16;
  const char *v17;
  NSObject *v18;
  uint64_t v19;
  std::string::size_type v20;
  std::string::size_type v21;
  void *v22;
  MIL::IRValue *Attribute;
  unint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  std::string::size_type v31;
  std::string::size_type v32;
  const char *v33;
  void *v34;
  NSObject *v35;
  id v36;
  const char *v37;
  size_t v38;
  std::string::size_type v39;
  _BYTE *p_dst;
  void *v41;
  std::string::size_type v42;
  uint64_t v43;
  unint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  std::string::size_type v51;
  __int128 v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  std::string::size_type v56;
  char *v57;
  __int128 *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  char v72;
  std::string *v73;
  __int128 v74;
  std::string *v75;
  __int128 v76;
  std::string *v77;
  __int128 v78;
  std::string *v79;
  __int128 v80;
  std::string *v81;
  __int128 v82;
  std::string *v83;
  __int128 v84;
  std::string *v85;
  __int128 v86;
  std::string *v87;
  __int128 v88;
  std::string *v89;
  __int128 v90;
  std::string *v91;
  __int128 v92;
  std::string *v93;
  std::string::size_type size;
  std::string *v95;
  __int128 v96;
  __int128 v97;
  void *v99;
  void *v100;
  void *v101;
  id v102;
  std::string v103;
  uint64_t v104;
  std::string __dst;
  std::string __p;
  std::string v107;
  unint64_t v108;
  uint8_t buf[24];
  uint64_t v110;
  std::string v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  v108 = a1;
  v102 = a2;
  if (a1 >= 3)
    Espresso::throw_exception_selector<Espresso::not_implemented_error,unsigned long long &>("Backend validation api version %lu", &v108);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "resultsVersion");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v102, "objectForKeyedSubscript:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v99 = v5;
  if (!v5)
  {
    *((_BYTE *)&v107.__r_.__value_.__s + 23) = 8;
    strcpy((char *)&v107, "Missing ");
    v87 = std::string::append(&v107, "resultsVersion");
    v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
    *(_QWORD *)&buf[16] = *((_QWORD *)&v87->__r_.__value_.__l + 2);
    *(_OWORD *)buf = v88;
    v87->__r_.__value_.__l.__size_ = 0;
    v87->__r_.__value_.__r.__words[2] = 0;
    v87->__r_.__value_.__r.__words[0] = 0;
  }
  if (objc_msgSend(v5, "unsignedLongLongValue") != a1)
  {
    std::to_string(&__dst, a1);
    v89 = std::string::insert(&__dst, 0, "Unexpected result version. Expecting ");
    v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v90;
    v89->__r_.__value_.__l.__size_ = 0;
    v89->__r_.__value_.__r.__words[2] = 0;
    v89->__r_.__value_.__r.__words[0] = 0;
    v91 = std::string::append(&__p, ", got ");
    v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
    v107.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v92;
    v91->__r_.__value_.__l.__size_ = 0;
    v91->__r_.__value_.__r.__words[2] = 0;
    v91->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v111, objc_msgSend(v5, "unsignedLongLongValue"));
    if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v93 = &v111;
    else
      v93 = (std::string *)v111.__r_.__value_.__r.__words[0];
    if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v111.__r_.__value_.__r.__words[2]);
    else
      size = v111.__r_.__value_.__l.__size_;
    v95 = std::string::append(&v107, (const std::string::value_type *)v93, size);
    v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
    *(_QWORD *)&buf[16] = *((_QWORD *)&v95->__r_.__value_.__l + 2);
    *(_OWORD *)buf = v96;
    v95->__r_.__value_.__l.__size_ = 0;
    v95->__r_.__value_.__r.__words[2] = 0;
    v95->__r_.__value_.__r.__words[0] = 0;
  }
  memset(&v107, 0, sizeof(v107));
  memset(&__p, 0, sizeof(__p));
  Function = MIL::IRProgram::GetFunction();
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Function + 40))(Function);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "support");
  v101 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "errorMsg");
  v100 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0xFFFFFFFFLL);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v102, "objectForKeyedSubscript:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10
    || (objc_msgSend(v102, "objectForKeyedSubscript:", CFSTR("-1")),
        (v10 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    memset(buf, 0, sizeof(buf));
    objc_msgSend(v10, "objectForKeyedSubscript:", v100);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v12;
    if (v12)
    {
      MEMORY[0x19401C808](buf, objc_msgSend(objc_retainAutorelease(v12), "UTF8String"));
      std::operator+<char>();
      v14 = std::string::append(&__dst, ")");
      v15 = v14->__r_.__value_.__r.__words[0];
      v111.__r_.__value_.__r.__words[0] = v14->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v111.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
      v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      if ((char)buf[23] < 0)
        operator delete(*(void **)buf);
      *(_QWORD *)buf = v15;
      *(_QWORD *)&buf[8] = v111.__r_.__value_.__r.__words[0];
      *(_QWORD *)&buf[15] = *(std::string::size_type *)((char *)v111.__r_.__value_.__r.__words + 7);
      buf[23] = v16;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
    }

    Espresso::espresso_os_log_subsystem(0, v17);
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      Espresso::AOT::Utils::ParseValidationOutput((uint64_t *)buf, v18);

    v19 = operator new();
    Espresso::AOT::ValidationResult::ValidationResult(v19, &v107, &__p);
    *a3 = v19;
    if ((char)buf[23] < 0)
      operator delete(*(void **)buf);

    goto LABEL_16;
  }
  v104 = 0;
  if (*(_QWORD *)(*(_QWORD *)v8 + 8) != **(_QWORD **)v8)
  {
    *(_QWORD *)&v11 = 134218498;
    v97 = v11;
    while (1)
    {
      buf[23] = 5;
      strcpy((char *)buf, "milId");
      Attribute = (MIL::IRValue *)MIL::IRObject::GetAttribute();
      MIL::IRValue::AsTensor(Attribute);
      if ((char)buf[23] < 0)
        operator delete(*(void **)buf);
      v24 = MIL::IRValue::GetScalar<unsigned long long>();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v24);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v102, "objectForKeyedSubscript:", v25);
      v26 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v26)
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v24);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "stringValue");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v102, "objectForKeyedSubscript:", v28);
        v26 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v26)
        {
          std::to_string(&__dst, v24);
          v85 = std::string::insert(&__dst, 0, "Missing op validation result for op ");
          v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
          *(_QWORD *)&buf[16] = *((_QWORD *)&v85->__r_.__value_.__l + 2);
          *(_OWORD *)buf = v86;
          v85->__r_.__value_.__l.__size_ = 0;
          v85->__r_.__value_.__r.__words[2] = 0;
          v85->__r_.__value_.__r.__words[0] = 0;
        }
      }
      objc_msgSend(v26, "objectForKeyedSubscript:", v101, v97);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = v29;
      if (!v29)
      {
        std::to_string(&v103, v24);
        v73 = std::string::insert(&v103, 0, "Validation result for op id ");
        v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
        v111.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v74;
        v73->__r_.__value_.__l.__size_ = 0;
        v73->__r_.__value_.__r.__words[2] = 0;
        v73->__r_.__value_.__r.__words[0] = 0;
        v75 = std::string::append(&v111, " missing ");
        v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
        __dst.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v76;
        v75->__r_.__value_.__l.__size_ = 0;
        v75->__r_.__value_.__r.__words[2] = 0;
        v75->__r_.__value_.__r.__words[0] = 0;
        v77 = std::string::append(&__dst, "support");
        v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
        *(_QWORD *)&buf[16] = *((_QWORD *)&v77->__r_.__value_.__l + 2);
        *(_OWORD *)buf = v78;
        v77->__r_.__value_.__l.__size_ = 0;
        v77->__r_.__value_.__r.__words[2] = 0;
        v77->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_85;
LABEL_107:
          operator delete(v111.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_87;
        }
        else
        {
          if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_107;
LABEL_85:
          if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
LABEL_87:
        }
        operator delete(v103.__r_.__value_.__l.__data_);
        goto LABEL_87;
      }
      if (objc_msgSend(v29, "unsignedCharValue"))
      {
        v31 = v107.__r_.__value_.__l.__size_;
        if (v107.__r_.__value_.__l.__size_ < v107.__r_.__value_.__r.__words[2])
        {
          *(_QWORD *)v107.__r_.__value_.__l.__size_ = v104;
          v32 = v31 + 8;
LABEL_72:
          v107.__r_.__value_.__l.__size_ = v32;
          goto LABEL_73;
        }
        v41 = (void *)v107.__r_.__value_.__r.__words[0];
        v42 = v107.__r_.__value_.__l.__size_ - v107.__r_.__value_.__r.__words[0];
        v43 = (uint64_t)(v107.__r_.__value_.__l.__size_ - v107.__r_.__value_.__r.__words[0]) >> 3;
        v44 = v43 + 1;
        if ((unint64_t)(v43 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v45 = v107.__r_.__value_.__r.__words[2] - v107.__r_.__value_.__r.__words[0];
        if ((uint64_t)(v107.__r_.__value_.__r.__words[2] - v107.__r_.__value_.__r.__words[0]) >> 2 > v44)
          v44 = v45 >> 2;
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
          v46 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v46 = v44;
        if (v46)
        {
          if (v46 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v47 = (char *)operator new(8 * v46);
          v48 = &v47[8 * v43];
          *(_QWORD *)v48 = v104;
          v32 = (std::string::size_type)(v48 + 8);
          if ((void *)v31 == v41)
            goto LABEL_70;
LABEL_64:
          v53 = v31 - 8 - (_QWORD)v41;
          if (v53 < 0x58)
            goto LABEL_114;
          if (v31 - (unint64_t)&v47[v42] < 0x20)
            goto LABEL_114;
          v54 = (v53 >> 3) + 1;
          v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
          v56 = v31 - v55;
          v48 -= v55;
          v57 = &v47[8 * v43 - 16];
          v58 = (__int128 *)(v31 - 16);
          v59 = v54 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v60 = *v58;
            *((_OWORD *)v57 - 1) = *(v58 - 1);
            *(_OWORD *)v57 = v60;
            v57 -= 32;
            v58 -= 2;
            v59 -= 4;
          }
          while (v59);
          v31 = v56;
          if (v54 != (v54 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_114:
            do
            {
              v61 = *(_QWORD *)(v31 - 8);
              v31 -= 8;
              *((_QWORD *)v48 - 1) = v61;
              v48 -= 8;
            }
            while ((void *)v31 != v41);
          }
        }
        else
        {
          v47 = 0;
          v48 = (char *)(8 * v43);
          *(_QWORD *)(8 * v43) = v104;
          v32 = 8 * v43 + 8;
          if ((void *)v31 != v41)
            goto LABEL_64;
        }
LABEL_70:
        v107.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
        v107.__r_.__value_.__l.__size_ = v32;
        v107.__r_.__value_.__r.__words[2] = (std::string::size_type)&v47[8 * v46];
        if (v41)
          operator delete(v41);
        goto LABEL_72;
      }
      objc_msgSend(v26, "objectForKeyedSubscript:", v100);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v34)
      {
        std::to_string(&v103, v24);
        v79 = std::string::insert(&v103, 0, "Validation result for op id ");
        v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
        v111.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v80;
        v79->__r_.__value_.__l.__size_ = 0;
        v79->__r_.__value_.__r.__words[2] = 0;
        v79->__r_.__value_.__r.__words[0] = 0;
        v81 = std::string::append(&v111, " missing ");
        v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
        __dst.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v82;
        v81->__r_.__value_.__l.__size_ = 0;
        v81->__r_.__value_.__r.__words[2] = 0;
        v81->__r_.__value_.__r.__words[0] = 0;
        v83 = std::string::append(&__dst, "errorMsg");
        v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
        *(_QWORD *)&buf[16] = *((_QWORD *)&v83->__r_.__value_.__l + 2);
        *(_OWORD *)buf = v84;
        v83->__r_.__value_.__l.__size_ = 0;
        v83->__r_.__value_.__r.__words[2] = 0;
        v83->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_91;
LABEL_110:
          operator delete(v111.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_93;
        }
        else
        {
          if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_110;
LABEL_91:
          if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
LABEL_93:
        }
        operator delete(v103.__r_.__value_.__l.__data_);
        goto LABEL_93;
      }
      Espresso::espresso_os_log_subsystem(0, v33);
      v35 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
      {
        v62 = v104;
        v63 = *(_QWORD *)(**(_QWORD **)v8 + 16 * v104);
        v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 56))(v63);
        v65 = *(char *)(v64 + 23);
        v66 = *(_QWORD *)v64;
        v67 = objc_msgSend(objc_retainAutorelease(v34), "UTF8String");
        *(_DWORD *)buf = v97;
        if (v65 >= 0)
          v68 = v64;
        else
          v68 = v66;
        *(_QWORD *)&buf[4] = v62;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v68;
        *(_WORD *)&buf[22] = 2080;
        v110 = v67;
        _os_log_debug_impl(&dword_190DAF000, v35, OS_LOG_TYPE_DEBUG, "Unsupported op %zu (%s): %s", buf, 0x20u);
      }

      v36 = objc_retainAutorelease(v34);
      v37 = (const char *)objc_msgSend(v36, "UTF8String");
      v38 = strlen(v37);
      if (v38 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v39 = v38;
      if (v38 >= 0x17)
        break;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v38;
      p_dst = &__dst;
      if (v38)
        goto LABEL_56;
LABEL_57:
      p_dst[v39] = 0;
      Espresso::AOT::ValidationMessage::ValidationMessage(buf, &v104, (__int128 *)&__dst);
      v51 = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
      {
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)std::vector<Espresso::AOT::ValidationMessage>::__push_back_slow_path<Espresso::AOT::ValidationMessage>(&__p.__r_.__value_.__l.__data_, (uint64_t)buf);
        if (SHIBYTE(v110) < 0)
        {
          operator delete(*(void **)&buf[8]);
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_62;
        }
        else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_62;
        }
LABEL_59:
        operator delete(__dst.__r_.__value_.__l.__data_);
        goto LABEL_62;
      }
      *(_QWORD *)__p.__r_.__value_.__l.__size_ = *(_QWORD *)buf;
      v52 = *(_OWORD *)&buf[8];
      *(_QWORD *)(v51 + 24) = v110;
      *(_OWORD *)(v51 + 8) = v52;
      *(_QWORD *)&buf[16] = 0;
      v110 = 0;
      *(_QWORD *)&buf[8] = 0;
      __p.__r_.__value_.__l.__size_ = v51 + 32;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_59;
LABEL_62:

LABEL_73:
      if (++v104 >= (unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)v8 + 8) - **(_QWORD **)v8) >> 4))
        goto LABEL_81;
    }
    v49 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v38 | 7) != 0x17)
      v49 = v38 | 7;
    v50 = v49 + 1;
    p_dst = operator new(v49 + 1);
    __dst.__r_.__value_.__l.__size_ = v39;
    __dst.__r_.__value_.__r.__words[2] = v50 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_56:
    memmove(p_dst, v37, v39);
    goto LABEL_57;
  }
LABEL_81:
  v69 = operator new();
  Espresso::AOT::ValidationResult::ValidationResult(v69, &v107, &__p);
  *a3 = v69;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "supportOptimizedIOBuffer");
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v102, "objectForKeyedSubscript:", v70);
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  v72 = objc_msgSend(v71, "BOOLValue");

  *(_QWORD *)buf = operator new(0x20uLL);
  *(_OWORD *)&buf[8] = xmmword_191A7C2C0;
  strcpy(*(char **)buf, "NeuralEngineOptimizedIOBuffer");
  Espresso::AOT::ValidationResult::SetFeature(v69, (__int128 *)buf, v72);
  if ((char)buf[23] < 0)
    operator delete(*(void **)buf);
LABEL_16:

  v20 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    v21 = __p.__r_.__value_.__l.__size_;
    v22 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v21 - 1) < 0)
          operator delete(*(void **)(v21 - 24));
        v21 -= 32;
      }
      while (v21 != v20);
      v22 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = v20;
    operator delete(v22);
  }
  if (v107.__r_.__value_.__r.__words[0])
  {
    v107.__r_.__value_.__l.__size_ = v107.__r_.__value_.__r.__words[0];
    operator delete(v107.__r_.__value_.__l.__data_);
  }

}

void sub_1910C4CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;

  if (*(char *)(v43 - 137) < 0)
  {
    operator delete(*(void **)(v43 - 160));
    if (*(char *)(v43 - 105) < 0)
    {
LABEL_5:
      operator delete(*(void **)(v43 - 128));
      if (a43 < 0)
      {
LABEL_8:
        operator delete(__p);
        if (a36 < 0)
        {
LABEL_11:
          operator delete(a31);
          if ((a29 & 0x80000000) == 0)
          {
LABEL_15:

            _Unwind_Resume(a1);
          }
LABEL_14:
          operator delete(a24);
          goto LABEL_15;
        }
LABEL_13:
        if ((a29 & 0x80000000) == 0)
          goto LABEL_15;
        goto LABEL_14;
      }
LABEL_10:
      if (a36 < 0)
        goto LABEL_11;
      goto LABEL_13;
    }
  }
  else if (*(char *)(v43 - 105) < 0)
  {
    goto LABEL_5;
  }
  if (a43 < 0)
    goto LABEL_8;
  goto LABEL_10;
}

void `anonymous namespace'::LogValidationResultAndThrow(void *a1, uint64_t a2)
{
  id v3;
  const char *v4;
  NSObject *v5;
  id v6;
  const char *v7;
  uint8_t buf[4];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  Espresso::espresso_os_log_subsystem(0, v4);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Validation result:\n%@"), v3);
    v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    *(_DWORD *)buf = 136315138;
    v9 = objc_msgSend(v6, "UTF8String");
    _os_log_debug_impl(&dword_190DAF000, v5, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);

  }
  if (*(char *)(a2 + 23) >= 0)
    v7 = (const char *)a2;
  else
    v7 = *(const char **)a2;
  Espresso::throw_exception_selector<Espresso::invalid_state_error>(v7);
}

void sub_1910C51D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void Espresso::AOT::Utils::OpBlackListValidate(_QWORD *a1@<X2>, _QWORD *a2@<X3>, uint64_t a3@<X4>, uint64_t *a4@<X8>)
{
  uint64_t Function;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  std::string::size_type v20;
  const void *v21;
  std::string *p_p;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  __int128 v27;
  const std::string::value_type **v28;
  void **v29;
  void *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  int64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  void *v54;
  char v55;
  void *v56;
  const std::string::value_type **v57;
  std::string __p;
  void *v59;
  char *v60;
  char *v61;

  Function = MIL::IRProgram::GetFunction();
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Function + 40))(Function);
  v7 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
  v8 = **v7;
  v9 = (*v7)[1];
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v10 = v9 - v8;
  if (v10)
  {
    v11 = v7;
    v12 = 0;
    v13 = v10 >> 4;
    if (v13 <= 1)
      v14 = 1;
    else
      v14 = v13;
    while (1)
    {
      v16 = *(_QWORD *)(**v11 + 16 * v12);
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 232))(v16);
      if (!v17)
      {
        v23 = 0;
        goto LABEL_23;
      }
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
      v20 = v19;
      if (v19 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v21 = (const void *)v18;
      if (v19 >= 0x17)
        break;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v19;
      p_p = &__p;
      if (v19)
        goto LABEL_20;
LABEL_21:
      p_p->__r_.__value_.__s.__data_[v20] = 0;
      v23 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a2, (uint64_t)&__p) == 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_23:
      v26 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 56))(v16);
      v55 = 1;
      LOWORD(v54) = 46;
      E5Common::StringUtils::Split(v26, (char *)&v54, (uint64_t)&v56);
      if (*((char *)v57 - 1) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(v57 - 3), (std::string::size_type)*(v57 - 2));
      }
      else
      {
        v27 = *(_OWORD *)(v57 - 3);
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)*(v57 - 1);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v27;
      }
      v28 = (const std::string::value_type **)v56;
      if (v56)
      {
        v29 = (void **)v57;
        v30 = v56;
        if (v57 != v56)
        {
          do
          {
            if (*((char *)v29 - 1) < 0)
              operator delete(*(v29 - 3));
            v29 -= 3;
          }
          while (v29 != (void **)v28);
          v30 = v56;
        }
        v57 = v28;
        operator delete(v30);
      }
      if (v55 < 0)
      {
        operator delete(v54);
        if (*(_BYTE *)(a3 + 32))
        {
LABEL_36:
          v31 = *(_QWORD *)(a3 + 24);
          if (!v31)
            std::__throw_bad_function_call[abi:ne180100]();
          if ((((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 48))(v31, v16) ^ 1 | v23) & 1) != 0)
            goto LABEL_7;
          goto LABEL_41;
        }
      }
      else if (*(_BYTE *)(a3 + 32))
      {
        goto LABEL_36;
      }
      if (v23)
        goto LABEL_7;
LABEL_41:
      if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a1, (uint64_t)&__p))
      {
        goto LABEL_7;
      }
      v32 = v60;
      if (v60 >= v61)
      {
        v33 = (char *)v59;
        v34 = v60 - (_BYTE *)v59;
        v35 = (v60 - (_BYTE *)v59) >> 3;
        v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v37 = v61 - (_BYTE *)v59;
        if ((v61 - (_BYTE *)v59) >> 2 > v36)
          v36 = v37 >> 2;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
          v38 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v38 = v36;
        if (v38)
        {
          if (v38 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v39 = (char *)operator new(8 * v38);
          v40 = &v39[8 * v35];
          *(_QWORD *)v40 = v12;
          v15 = (uint64_t)(v40 + 8);
          if (v32 == v33)
            goto LABEL_60;
LABEL_54:
          v41 = v32 - 8 - v33;
          if (v41 < 0x58)
            goto LABEL_71;
          if ((unint64_t)(v32 - &v39[v34]) < 0x20)
            goto LABEL_71;
          v42 = (v41 >> 3) + 1;
          v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
          v44 = &v32[-v43];
          v40 -= v43;
          v45 = &v39[8 * v35 - 16];
          v46 = v32 - 16;
          v47 = v42 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v48 = *(_OWORD *)v46;
            *((_OWORD *)v45 - 1) = *((_OWORD *)v46 - 1);
            *(_OWORD *)v45 = v48;
            v45 -= 32;
            v46 -= 32;
            v47 -= 4;
          }
          while (v47);
          v32 = v44;
          if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_71:
            do
            {
              v49 = *((_QWORD *)v32 - 1);
              v32 -= 8;
              *((_QWORD *)v40 - 1) = v49;
              v40 -= 8;
            }
            while (v32 != v33);
          }
        }
        else
        {
          v39 = 0;
          v40 = (char *)(8 * v35);
          *(_QWORD *)(8 * v35) = v12;
          v15 = 8 * v35 + 8;
          if (v32 != v33)
            goto LABEL_54;
        }
LABEL_60:
        v59 = v40;
        v60 = (char *)v15;
        v61 = &v39[8 * v38];
        if (v33)
          operator delete(v33);
        goto LABEL_6;
      }
      *(_QWORD *)v60 = v12;
      v15 = (uint64_t)(v32 + 8);
LABEL_6:
      v60 = (char *)v15;
LABEL_7:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (++v12 == v14)
          goto LABEL_62;
      }
      else if (++v12 == v14)
      {
        goto LABEL_62;
      }
    }
    v24 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v24 = v19 | 7;
    v25 = v24 + 1;
    p_p = (std::string *)operator new(v24 + 1);
    __p.__r_.__value_.__l.__size_ = v20;
    __p.__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
LABEL_20:
    memmove(p_p, v21, v20);
    goto LABEL_21;
  }
LABEL_62:
  v50 = operator new();
  Espresso::AOT::ValidationResult::ValidationResult(v50, (uint64_t)&v59);
  *a4 = v50;
  if (v59)
  {
    v60 = (char *)v59;
    operator delete(v59);
  }
}

void sub_1910C5628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29)
{
  uint64_t v29;

  MEMORY[0x19401CD90](v29, 0x10B1C40E94733EDLL);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::AOT::Utils::RemoveCallOps(Espresso::AOT::ValidationResult **a1@<X0>, Espresso::AOT::ValidationResult **a2@<X8>)
{
  uint64_t Function;
  uint64_t v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t ValidDispatchUnits;
  uint64_t *ValidationMessages;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  void **v41;
  void **v42;
  void *v43;
  Espresso::AOT::ValidationResult *v44;
  uint64_t *v45;
  char *v46;
  void *__p;
  void *v48;
  char *v49;
  void *v50;
  void **v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  char *v55;
  void **p_p;

  Function = MIL::IRProgram::GetFunction();
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Function + 40))(Function);
  v6 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  v7 = **v6;
  v8 = (*v6)[1];
  v54 = 0;
  v55 = 0;
  v53 = 0;
  v9 = v8 - v7;
  if (!v9)
  {
    v12 = 0;
LABEL_59:
    v44 = *a1;
    *a1 = 0;
    *a2 = v44;
    goto LABEL_60;
  }
  v10 = v6;
  v45 = (uint64_t *)a2;
  v46 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = v9 >> 4;
  if (v17 <= 1)
    v18 = 1;
  else
    v18 = v17;
  do
  {
    v19 = *(_QWORD *)(**v10 + 16 * v16);
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 64))(v19);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v20 + 128))(v20))
      goto LABEL_6;
    if (v15 < v14)
    {
      *(_QWORD *)v15 = v16;
      v15 += 8;
      v11 = (uint64_t)v15;
      goto LABEL_6;
    }
    v21 = (v15 - v13) >> 3;
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 61)
    {
      v53 = v12;
      v54 = (_QWORD *)v11;
      v55 = v46;
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    if ((v14 - v13) >> 2 > v22)
      v22 = (v14 - v13) >> 2;
    if ((unint64_t)(v14 - v13) >= 0x7FFFFFFFFFFFFFF8)
      v23 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v23 = v22;
    if (v23)
    {
      if (v23 >> 61)
      {
        v53 = v12;
        v55 = v46;
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      v24 = operator new(8 * v23);
      v12 = &v24[8 * v21];
      *v12 = v16;
      v11 = (uint64_t)(v12 + 1);
      if (v15 == v13)
        goto LABEL_23;
    }
    else
    {
      v24 = 0;
      v12 = (_QWORD *)(8 * v21);
      *(_QWORD *)(8 * v21) = v16;
      v11 = 8 * v21 + 8;
      if (v15 == v13)
        goto LABEL_23;
    }
    v25 = v15 - 8 - v13;
    if (v25 >= 0x168)
    {
      if (&v24[v15 - v13 - 8 - (v25 & 0xFFFFFFFFFFFFFFF8)] > &v24[v15 - v13 - 8])
      {
        v26 = v15;
      }
      else if (&v15[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] > v15 - 8)
      {
        v26 = v15;
      }
      else if ((unint64_t)(v13 - v24) >= 0x20)
      {
        v28 = (v25 >> 3) + 1;
        v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
        v26 = &v15[-v29];
        v12 = (_QWORD *)((char *)v12 - v29);
        v30 = &v24[8 * v21 - 16];
        v31 = v15 - 16;
        v32 = v28 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v33 = *(_OWORD *)v31;
          *(v30 - 1) = *((_OWORD *)v31 - 1);
          *v30 = v33;
          v30 -= 2;
          v31 -= 32;
          v32 -= 4;
        }
        while (v32);
        if (v28 == (v28 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_23;
      }
      else
      {
        v26 = v15;
      }
    }
    else
    {
      v26 = v15;
    }
    do
    {
      v27 = *((_QWORD *)v26 - 1);
      v26 -= 8;
      *--v12 = v27;
    }
    while (v26 != v13);
LABEL_23:
    v14 = &v24[8 * v23];
    v46 = v14;
    if (v13)
      operator delete(v13);
    v13 = (char *)v12;
    v15 = (char *)v11;
LABEL_6:
    ++v16;
  }
  while (v16 != v18);
  v53 = v12;
  v54 = (_QWORD *)v11;
  v55 = v46;
  if ((_QWORD *)v11 == v12)
  {
    a2 = (Espresso::AOT::ValidationResult **)v45;
    goto LABEL_59;
  }
  ValidDispatchUnits = Espresso::AOT::ValidationResult::GetValidDispatchUnits(*a1);
  ValidationMessages = (uint64_t *)Espresso::AOT::ValidationResult::GetValidationMessages(*a1);
  v50 = 0;
  v51 = 0;
  v52 = 0;
  std::vector<Espresso::AOT::ValidationMessage>::__init_with_size[abi:ne180100]<Espresso::AOT::ValidationMessage*,Espresso::AOT::ValidationMessage*>(&v50, *ValidationMessages, ValidationMessages[1], (ValidationMessages[1] - *ValidationMessages) >> 5);
  v48 = 0;
  v49 = 0;
  __p = 0;
  v37 = *(_QWORD **)ValidDispatchUnits;
  v36 = *(_QWORD **)(ValidDispatchUnits + 8);
  v38 = (uint64_t)v36 - *(_QWORD *)ValidDispatchUnits;
  if (v36 != *(_QWORD **)ValidDispatchUnits)
  {
    if (v38 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    __p = operator new((size_t)v36 - *(_QWORD *)ValidDispatchUnits);
    v48 = __p;
    v49 = (char *)__p + 8 * (v38 >> 3);
    v37 = *(_QWORD **)ValidDispatchUnits;
    v36 = *(_QWORD **)(ValidDispatchUnits + 8);
  }
  p_p = &__p;
  while (v37 != v36)
  {
    v39 = v12;
    while (*v39 != *v37)
    {
      if (++v39 == (_QWORD *)v11)
      {
        v39 = (_QWORD *)v11;
        break;
      }
    }
    if (v39 == (_QWORD *)v11)
      std::back_insert_iterator<std::vector<unsigned long>>::operator=[abi:ne180100]((uint64_t *)&p_p, v37);
    ++v37;
  }
  v40 = operator new();
  Espresso::AOT::ValidationResult::ValidationResult(v40, &__p, &v50);
  *v45 = v40;
  if (__p)
  {
    v48 = __p;
    operator delete(__p);
  }
  v41 = (void **)v50;
  if (!v50)
  {
LABEL_60:
    if (!v12)
      return;
    goto LABEL_61;
  }
  v42 = v51;
  v43 = v50;
  if (v51 != v50)
  {
    do
    {
      if (*((char *)v42 - 1) < 0)
        operator delete(*(v42 - 3));
      v42 -= 4;
    }
    while (v42 != v41);
    v43 = v50;
  }
  v51 = v41;
  operator delete(v43);
  if (v12)
  {
LABEL_61:
    v54 = v12;
    operator delete(v12);
  }
}

void sub_1910C5AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  void *v21;
  uint64_t v22;

  MEMORY[0x19401CD90](v22, 0x10B1C40E94733EDLL);
  if (__p)
    operator delete(__p);
  std::vector<Espresso::AOT::ValidationMessage>::~vector[abi:ne180100](&a16);
  if (v21)
  {
    a20 = (uint64_t)v21;
    operator delete(v21);
  }
  _Unwind_Resume(a1);
}

char *std::vector<Espresso::AOT::ValidationMessage>::__push_back_slow_path<Espresso::AOT::ValidationMessage>(char **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  char *v17;

  v3 = a1[1] - *a1;
  v4 = (v3 >> 5) + 1;
  if (v4 >> 59)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v6 = a1[2] - *a1;
  if (v6 >> 4 > v4)
    v4 = v6 >> 4;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0)
    v7 = 0x7FFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  if (v7)
  {
    if (v7 >> 59)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v8 = (char *)operator new(32 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[32 * (v3 >> 5)];
  *(_QWORD *)v9 = *(_QWORD *)a2;
  v10 = v9 + 32;
  v11 = &v8[32 * v7];
  v12 = &v8[v3];
  *((_QWORD *)v12 + 3) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(v12 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v13 = *a1;
  v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v11;
    if (!v14)
      return v10;
    goto LABEL_20;
  }
  do
  {
    v15 = *((_QWORD *)v14 - 4);
    v14 -= 32;
    *((_QWORD *)v9 - 4) = v15;
    v9 -= 32;
    v16 = *(_OWORD *)(v14 + 8);
    *((_QWORD *)v9 + 3) = *((_QWORD *)v14 + 3);
    *(_OWORD *)(v9 + 8) = v16;
    *((_QWORD *)v14 + 2) = 0;
    *((_QWORD *)v14 + 3) = 0;
    *((_QWORD *)v14 + 1) = 0;
  }
  while (v14 != v13);
  v17 = *a1;
  v14 = a1[1];
  *a1 = v9;
  a1[1] = v10;
  a1[2] = v11;
  if (v14 != v17)
  {
    do
    {
      if (*(v14 - 1) < 0)
        operator delete(*((void **)v14 - 3));
      v14 -= 32;
    }
    while (v14 != v17);
    v14 = v17;
  }
  if (v14)
LABEL_20:
    operator delete(v14);
  return v10;
}

uint64_t *std::back_insert_iterator<std::vector<unsigned long>>::operator=[abi:ne180100](uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v4 = *a1;
  v6 = *(char **)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    v9 = *(char **)v4;
    v10 = (uint64_t)&v6[-*(_QWORD *)v4];
    v11 = v10 >> 3;
    v12 = (v10 >> 3) + 1;
    if (v12 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v13 = v5 - (_QWORD)v9;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v11];
    *v16 = *a2;
    v8 = v16 + 1;
    if (v6 != v9)
    {
      v17 = v6 - v9 - 8;
      if (v17 < 0x58)
        goto LABEL_27;
      if ((unint64_t)(v6 - v15 - v10) < 0x20)
        goto LABEL_27;
      v18 = (v17 >> 3) + 1;
      v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      v7 = &v6[-v19];
      v16 = (_QWORD *)((char *)v16 - v19);
      v20 = &v15[8 * v11 - 16];
      v21 = v6 - 16;
      v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 4;
      }
      while (v22);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_27:
        do
        {
          v24 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *--v16 = v24;
        }
        while (v7 != v9);
      }
    }
    *(_QWORD *)v4 = v16;
    *(_QWORD *)(v4 + 8) = v8;
    *(_QWORD *)(v4 + 16) = &v15[8 * v14];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_QWORD *)v6 = *a2;
    v8 = v6 + 8;
  }
  *(_QWORD *)(v4 + 8) = v8;
  return a1;
}

void Espresso::AOT::Utils::ParseValidationOutput(uint64_t *a1, NSObject *a2)
{
  uint64_t *v2;
  int v3;
  uint64_t *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (*((char *)a1 + 23) >= 0)
    v2 = a1;
  else
    v2 = (uint64_t *)*a1;
  v3 = 136315138;
  v4 = v2;
  _os_log_debug_impl(&dword_190DAF000, a2, OS_LOG_TYPE_DEBUG, "Unsupported function: %s", (uint8_t *)&v3, 0xCu);
}

void E5AOT::Opsets::E5ML_ios16::RegisterE5ML_ios16Opsets(E5AOT::Opsets::E5ML_ios16 *this, MIL::MILContext *a2)
{
  MIL::MILContext *v3;

  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::Register(this, a2);
  E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset::Register(this, v3);
}

void E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::Register(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *this, MIL::MILContext *a2)
{
  uint64_t v3;
  uint64_t v4;
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *v5;
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *v6;
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *v7;
  void *__p[2];
  char v9;

  v9 = 15;
  strcpy((char *)__p, "E5Backend_ios16");
  v3 = (*(uint64_t (**)(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *, void **))(*(_QWORD *)this + 16))(this, __p);
  v4 = v3;
  if (v9 < 0)
  {
    operator delete(__p[0]);
    if (v4)
      return;
  }
  else if (v3)
  {
    return;
  }
  v9 = 15;
  strcpy((char *)__p, "E5Backend_ios16");
  v5 = (E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *)operator new();
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::E5Backend_ios16Opset(v5, this);
  v7 = v5;
  (*(void (**)(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *, void **, E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset **))(*(_QWORD *)this + 32))(this, __p, &v7);
  v6 = v7;
  v7 = 0;
  if (v6)
    (*(void (**)(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *))(*(_QWORD *)v6 + 8))(v6);
  if (v9 < 0)
    operator delete(__p[0]);
}

void sub_1910C5FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, MIL::IROpset *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v18;

  v18 = a11;
  a11 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  std::unique_ptr<E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset>::~unique_ptr[abi:ne180100](&a10);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset::Register(E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset *this, MIL::MILContext *a2)
{
  uint64_t v3;
  uint64_t v4;
  E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset *v5;
  E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset *v6;
  E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset *v7;
  void *__p[2];
  char v9;

  v9 = 10;
  strcpy((char *)__p, "E5RT_ios16");
  v3 = (*(uint64_t (**)(E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset *, void **))(*(_QWORD *)this + 16))(this, __p);
  v4 = v3;
  if (v9 < 0)
  {
    operator delete(__p[0]);
    if (v4)
      return;
  }
  else if (v3)
  {
    return;
  }
  v9 = 10;
  strcpy((char *)__p, "E5RT_ios16");
  v5 = (E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset *)operator new();
  E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset::E5RT_ios16Opset(v5, this);
  v7 = v5;
  (*(void (**)(E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset *, void **, E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset **))(*(_QWORD *)this + 32))(this, __p, &v7);
  v6 = v7;
  v7 = 0;
  if (v6)
    (*(void (**)(E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset *))(*(_QWORD *)v6 + 8))(v6);
  if (v9 < 0)
    operator delete(__p[0]);
}

void sub_1910C6158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, MIL::IROpset *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v18;

  v18 = a11;
  a11 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  std::unique_ptr<E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset>::~unique_ptr[abi:ne180100](&a10);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

const char *E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::GetOpsetName(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *this)
{
  return "E5Backend_ios16";
}

MIL::IROpset **std::unique_ptr<E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset>::~unique_ptr[abi:ne180100](MIL::IROpset **a1)
{
  MIL::IROpset *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    MIL::IROpset::~IROpset(v2);
    MEMORY[0x19401CD90]();
  }
  return a1;
}

E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::E5Backend_ios16Opset(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *this, MIL::MILContext *a2)
{
  void **v3;
  void **v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  void *v10;
  void *__p;

  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::GetOps(a2, (uint64_t)&v10);
  MIL::IROpset::IROpset();
  v3 = (void **)__p;
  if (__p)
  {
    do
    {
      while (1)
      {
        v4 = (void **)*v3;
        v5 = (std::__shared_weak_count *)v3[6];
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        if (*((char *)v3 + 39) < 0)
          break;
        operator delete(v3);
        v3 = v4;
        if (!v4)
          goto LABEL_11;
      }
      operator delete(v3[2]);
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
LABEL_11:
  v8 = v10;
  v10 = 0;
  if (v8)
    operator delete(v8);
  *(_QWORD *)this = &off_1E2D5C080;
  return this;
}

void sub_1910C62FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::GetOps(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  void *v7[4];
  void *__p[2];
  char v9;
  uint64_t v10;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v9 = 15;
  strcpy((char *)__p, "E5ML_ios16.call");
  E5AOT::Operators::E5ML_ios16::Call::Make((uint64_t)__p, &v10);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "call", &v10);
  v5 = v10;
  v10 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (v9 < 0)
    operator delete(__p[0]);
  HIBYTE(v7[2]) = 19;
  strcpy((char *)v7, "E5ML_ios16.transfer");
  E5AOT::Operators::E5ML_ios16::Transfer::Make(this, (uint64_t)v7);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "transfer", &v10);
  v6 = v10;
  v10 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (SHIBYTE(v7[2]) < 0)
    operator delete(v7[0]);
}

void sub_1910C6438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v24 = *(_QWORD *)(v22 - 24);
  *(_QWORD *)(v22 - 24) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  if (a14 < 0)
    operator delete(__p);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v21);
  _Unwind_Resume(a1);
}

const char *E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::GetName(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *this)
{
  return "E5Backend_ios16";
}

const char *E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset::GetOpsetName(E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset *this)
{
  return "E5RT_ios16";
}

E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset *E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset::E5RT_ios16Opset(E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset *this, MIL::MILContext *a2)
{
  void **v3;
  void **v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  void *v10;
  void *__p;

  E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset::GetOps(a2, (uint64_t)&v10);
  MIL::IROpset::IROpset();
  v3 = (void **)__p;
  if (__p)
  {
    do
    {
      while (1)
      {
        v4 = (void **)*v3;
        v5 = (std::__shared_weak_count *)v3[6];
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        if (*((char *)v3 + 39) < 0)
          break;
        operator delete(v3);
        v3 = v4;
        if (!v4)
          goto LABEL_11;
      }
      operator delete(v3[2]);
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
LABEL_11:
  v8 = v10;
  v10 = 0;
  if (v8)
    operator delete(v8);
  *(_QWORD *)this = &off_1E2D5C058;
  return this;
}

void sub_1910C65B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset::GetOps(E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16[4];
  void *v17;
  __int128 v18;
  void *v19;
  __int128 v20;
  void *v21[4];
  void *v22;
  __int128 v23;
  void *__p;
  __int128 v25;
  void *v26[3];
  char *v27;
  __int128 v28;
  void *v29[2];
  char v30;
  char *v31;
  __int128 v32;
  char *v33;
  __int128 v34;
  uint64_t v35;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v33 = (char *)operator new(0x20uLL);
  v34 = xmmword_191A71250;
  strcpy(v33, "E5ML_ios16.ane_inference");
  E5AOT::Operators::E5ML_ios16::ANEInference::Make(this, (uint64_t)&v33, &v35);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ane_inference", &v35);
  v5 = v35;
  v35 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (SHIBYTE(v34) < 0)
    operator delete(v33);
  v31 = (char *)operator new(0x20uLL);
  v32 = xmmword_191A86860;
  strcpy(v31, "E5ML_ios16.bnns_inference");
  E5AOT::Operators::E5ML_ios16::BNNSInference::Make(this, (uint64_t)&v31, &v35);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "bnns_inference", &v35);
  v6 = v35;
  v35 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (SHIBYTE(v32) < 0)
    operator delete(v31);
  v30 = 15;
  strcpy((char *)v29, "E5ML_ios16.cast");
  E5AOT::Operators::E5ML_ios16::Cast::Make(this, (uint64_t)v29, &v35);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "cast", &v35);
  v7 = v35;
  v35 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (v30 < 0)
    operator delete(v29[0]);
  v27 = (char *)operator new(0x20uLL);
  v28 = xmmword_191A71250;
  strcpy(v27, "E5ML_ios16.cpu_inference");
  E5AOT::Operators::E5ML_ios16::CPUInference::Make((uint64_t)&v27, &v35);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "cpu_inference", &v35);
  v8 = v35;
  v35 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (SHIBYTE(v28) < 0)
    operator delete(v27);
  HIBYTE(v26[2]) = 18;
  strcpy((char *)v26, "E5ML_ios16.dequant");
  E5AOT::Operators::E5ML_ios16::Dequant::Make(this, (uint64_t)v26, &v35);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "dequant", &v35);
  v9 = v35;
  v35 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (SHIBYTE(v26[2]) < 0)
    operator delete(v26[0]);
  __p = operator new(0x20uLL);
  v25 = xmmword_191A86860;
  strcpy((char *)__p, "E5ML_ios16.e5_minimal_cpu");
  E5AOT::Operators::E5ML_ios16::E5MinimalCpu::Make((uint64_t)&__p, &v35);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "e5_minimal_cpu", &v35);
  v10 = v35;
  v35 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (SHIBYTE(v25) < 0)
    operator delete(__p);
  v22 = operator new(0x20uLL);
  v23 = xmmword_191A71250;
  strcpy((char *)v22, "E5ML_ios16.eir_inference");
  E5AOT::Operators::E5ML_ios16::EIRInference::Make((uint64_t)&v22, &v35);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "eir_inference", &v35);
  v11 = v35;
  v35 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (SHIBYTE(v23) < 0)
    operator delete(v22);
  HIBYTE(v21[2]) = 19;
  strcpy((char *)v21, "E5ML_ios16.jit_call");
  E5AOT::Operators::E5ML_ios16::JitCall::Make(this, (uint64_t)v21, &v35);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "jit_call", &v35);
  v12 = v35;
  v35 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (SHIBYTE(v21[2]) < 0)
    operator delete(v21[0]);
  v19 = operator new(0x20uLL);
  v20 = xmmword_191A71250;
  strcpy((char *)v19, "E5ML_ios16.mlc_inference");
  E5AOT::Operators::E5ML_ios16::MLCInference::Make((uint64_t)&v19, &v35);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "mlc_inference", &v35);
  v13 = v35;
  v35 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (SHIBYTE(v20) < 0)
    operator delete(v19);
  v17 = operator new(0x20uLL);
  v18 = xmmword_191A72610;
  strcpy((char *)v17, "E5ML_ios16.mps_graph_inference");
  E5AOT::Operators::E5ML_ios16::MPSGraphInference::Make(this, (uint64_t)&v17, &v35);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "mps_graph_inference", &v35);
  v14 = v35;
  v35 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (SHIBYTE(v18) < 0)
    operator delete(v17);
  HIBYTE(v16[2]) = 16;
  strcpy((char *)v16, "E5ML_ios16.quant");
  E5AOT::Operators::E5ML_ios16::Quant::Make(this, (uint64_t)v16, &v35);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "quant", &v35);
  v15 = v35;
  v35 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (SHIBYTE(v16[2]) < 0)
    operator delete(v16[0]);
}

void sub_1910C6B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;

  v53 = *(_QWORD *)(v51 - 40);
  *(_QWORD *)(v51 - 40) = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  if (a18 < 0)
    operator delete(__p);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v50);
  _Unwind_Resume(a1);
}

void sub_1910C6E18(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

const char *E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset::GetName(E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset *this)
{
  return "E5RT_ios16";
}

void E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::~E5Backend_ios16Opset(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *this)
{
  MIL::IROpset::~IROpset(this);
  JUMPOUT(0x19401CD90);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IROperator>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  char *v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t *inserted;
  char v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  char v17;

  v6 = (char *)operator new(0x38uLL);
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  v7 = std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[5],std::unique_ptr<MIL::IROperator>,0>((_QWORD *)v6 + 2, a2, a3);
  v8 = v6[39];
  if (v8 >= 0)
    v9 = v7;
  else
    v9 = (uint64_t *)*((_QWORD *)v6 + 2);
  if (v8 >= 0)
    v10 = v6[39];
  else
    v10 = *((_QWORD *)v6 + 3);
  *((_QWORD *)v6 + 1) = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v17, v9, v10);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__node_insert_unique(a1, (uint64_t)v6);
  if ((v12 & 1) == 0 && v6)
  {
    v13 = (std::__shared_weak_count *)*((_QWORD *)v6 + 6);
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (v6[39] < 0)
      operator delete(*((void **)v6 + 2));
    operator delete(v6);
  }
  return inserted;
}

void sub_1910C6F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_1910C6F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__node_insert_unique(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 **v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *result;
  int8x8_t v11;
  unint64_t v12;
  uint8x8_t v13;
  _QWORD *v14;
  unint64_t v15;
  char v16;

  v4 = (unsigned __int8 **)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 39);
  v6 = *(_QWORD *)(a2 + 24);
  if ((v5 & 0x80u) == 0)
    v7 = (uint64_t *)(a2 + 16);
  else
    v7 = *(uint64_t **)(a2 + 16);
  if ((v5 & 0x80u) == 0)
    v8 = v5;
  else
    v8 = v6;
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v16, v7, v8);
  *(_QWORD *)(a2 + 8) = v9;
  result = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v9, v4);
  if (!result)
  {
    v11 = (int8x8_t)a1[1];
    v12 = *(_QWORD *)(a2 + 8);
    v13 = (uint8x8_t)vcnt_s8(v11);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      if (v12 >= *(_QWORD *)&v11)
        v12 %= *(_QWORD *)&v11;
    }
    else
    {
      v12 &= *(_QWORD *)&v11 - 1;
    }
    v14 = *(_QWORD **)(*a1 + 8 * v12);
    if (v14)
    {
      *(_QWORD *)a2 = *v14;
    }
    else
    {
      *(_QWORD *)a2 = a1[2];
      a1[2] = a2;
      *(_QWORD *)(*a1 + 8 * v12) = a1 + 2;
      if (!*(_QWORD *)a2)
      {
LABEL_21:
        ++a1[3];
        return (uint64_t *)a2;
      }
      v15 = *(_QWORD *)(*(_QWORD *)a2 + 8);
      if (v13.u32[0] > 1uLL)
      {
        if (v15 >= *(_QWORD *)&v11)
          v15 %= *(_QWORD *)&v11;
      }
      else
      {
        v15 &= *(_QWORD *)&v11 - 1;
      }
      v14 = (_QWORD *)(*a1 + 8 * v15);
    }
    *v14 = a2;
    goto LABEL_21;
  }
  return result;
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[5],std::unique_ptr<MIL::IROperator>,0>(_QWORD *a1, char *__s, uint64_t *a3)
{
  size_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v12 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v12 = v6 | 7;
    v13 = v12 + 1;
    v8 = operator new(v12 + 1);
    a1[1] = v7;
    a1[2] = v13 | 0x8000000000000000;
    *a1 = v8;
LABEL_9:
    memmove(v8, __s, v7);
    *((_BYTE *)v8 + v7) = 0;
    v14 = *a3;
    a1[3] = *a3;
    if (v14)
      goto LABEL_5;
LABEL_10:
    v10 = 0;
    goto LABEL_11;
  }
  *((_BYTE *)a1 + 23) = v6;
  v8 = a1;
  if (v6)
    goto LABEL_9;
  *(_BYTE *)a1 = 0;
  v9 = *a3;
  a1[3] = *a3;
  if (!v9)
    goto LABEL_10;
LABEL_5:
  v10 = (_QWORD *)operator new();
  v11 = *a3;
  *v10 = &unk_1E2DC2E48;
  v10[1] = 0;
  v10[2] = 0;
  v10[3] = v11;
LABEL_11:
  a1[4] = v10;
  *a3 = 0;
  return a1;
}

void sub_1910C71FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<MIL::IROperator  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IROperator  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A87EF5)
    return a1 + 24;
  if (((v3 & 0x8000000191A87EF5 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A87EF5))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A87EF5 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

float Espresso::AOT::DTrees::mulAneFp()
{
  return 43.0;
}

float Espresso::AOT::DTrees::mulAneIp()
{
  return 41.0;
}

float Espresso::AOT::DTrees::mulAneJp()
{
  return 40.0;
}

float Espresso::AOT::DTrees::mulAneKp()
{
  return 40.0;
}

float Espresso::AOT::DTrees::mulAneGp()
{
  return 40.0;
}

float Espresso::AOT::DTrees::mulAneHp()
{
  return 40.0;
}

float Espresso::AOT::DTrees::mulCpuFp()
{
  return 10.0;
}

float Espresso::AOT::DTrees::mulCpuIp()
{
  return 10.0;
}

float Espresso::AOT::DTrees::mulCpuJp()
{
  return 10.0;
}

float Espresso::AOT::DTrees::mulCpuKp()
{
  return 10.0;
}

float Espresso::AOT::DTrees::mulCpuGp()
{
  return 10.0;
}

float Espresso::AOT::DTrees::mulCpuHp()
{
  return 10.0;
}

float Espresso::AOT::DTrees::mulGpuFp()
{
  return 30.0;
}

float Espresso::AOT::DTrees::mulGpuIp()
{
  return 20.0;
}

float Espresso::AOT::DTrees::mulGpuJp()
{
  return 110.0;
}

float Espresso::AOT::DTrees::mulGpuKp()
{
  return 55.0;
}

float Espresso::AOT::DTrees::mulGpuGp()
{
  return 100.0;
}

float Espresso::AOT::DTrees::mulGpuHp()
{
  return 55.0;
}

float Espresso::AOT::DTrees::mulAneCp()
{
  return 80.0;
}

float Espresso::AOT::DTrees::mulAneDp()
{
  return 80.0;
}

float Espresso::AOT::DTrees::mulAneEp()
{
  return 80.0;
}

float Espresso::AOT::DTrees::mulCpuCp()
{
  return 5.0;
}

float Espresso::AOT::DTrees::mulCpuDp()
{
  return 5.0;
}

float Espresso::AOT::DTrees::mulCpuEp()
{
  return 5.0;
}

float Espresso::AOT::DTrees::mulGpuCp()
{
  return 10.0;
}

float Espresso::AOT::DTrees::mulGpuDp()
{
  return 10.0;
}

float Espresso::AOT::DTrees::mulGpuEp()
{
  return 10.0;
}

void Espresso::AOT::GetOperatorType(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void **v4;
  char *v5;
  __int128 v6;
  void **v7;
  void *v8;
  void *v9;
  void *__p[2];
  char v11;
  void *v12;
  void **v13;

  v11 = 1;
  LOWORD(__p[0]) = 46;
  E5Common::StringUtils::Split((uint64_t *)a1, (char *)__p, (uint64_t)&v12);
  if (v11 < 0)
    operator delete(__p[0]);
  v4 = (void **)v12;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (_BYTE *)v12) >> 3) >= 3)
  {
    if (*(char *)(a1 + 23) >= 0)
      v9 = (void *)a1;
    else
      v9 = *(void **)a1;
    __p[0] = v9;
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long long &>("Unsupported operator name: %s", __p);
  }
  v5 = (char *)v12 + 24 * ((char *)v13 - (_BYTE *)v12 == 48);
  if (v5[23] < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
    v4 = (void **)v12;
    if (!v12)
      return;
  }
  else
  {
    v6 = *(_OWORD *)v5;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v6;
  }
  v7 = v13;
  v8 = v4;
  if (v13 != v4)
  {
    do
    {
      if (*((char *)v7 - 1) < 0)
        operator delete(*(v7 - 3));
      v7 -= 3;
    }
    while (v7 != v4);
    v8 = v12;
  }
  v13 = v4;
  operator delete(v8);
}

void sub_1910C74E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_1910C74F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::Backends::CostModel::RNNOpEstimator::EstimateComputeResources(const MIL::IROperation *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  Espresso::AOT *ParameterType;
  uint64_t v7;
  int v8;
  const MIL::IRValueType *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  Espresso::AOT *v13;
  const MIL::IRValueType *v14;
  double YDimOfTensorFromIRValueType;
  uint64_t ParameterValue;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  double FlopCountForMatMul;
  _QWORD *v21;
  _QWORD *v22;
  double v23;
  double v24;
  uint64_t v25;
  void **v26;
  void **v27;
  __int128 v28;
  const MIL::IRValueType *v29;
  double v30;
  _QWORD *v31;
  double SizeInMbForDims;
  _QWORD *v33;
  double v34;
  _QWORD *v35;
  const MIL::IRValueType *v36;
  double v37;
  _QWORD *v38;
  double v39;
  const MIL::IRValueType *v40;
  const MIL::IRValueType *v41;
  double SizeInMbForShape;
  double v43;
  double v44;
  void *v45;
  const MIL::IRValueType *v46;
  Espresso::AOT *OutputType;
  void *v48[3];
  void *v49;
  void *v50;
  _QWORD *v51;
  std::string v52;
  void *__p[2];
  char v54;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_QWORD *)(v5 + 144) = 0;
  *a2 = v5;
  v54 = 1;
  LOWORD(__p[0]) = 120;
  ParameterType = (Espresso::AOT *)MIL::IROperation::TryGetParameterType();
  v7 = (*(uint64_t (**)(Espresso::AOT *))(*(_QWORD *)ParameterType + 24))(ParameterType);
  if (v7)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);
    OutputType = (Espresso::AOT *)MIL::IROperation::GetOutputType(a1);
    Espresso::AOT::GetDimsOfTensorFromIRValueType(ParameterType, v9, __p);
    v11 = *(_QWORD *)__p[0];
    v10 = *((_QWORD *)__p[0] + 1);
    v12 = *((_QWORD *)__p[0] + 2);
    strcpy((char *)&v52, "weight_ih");
    v13 = (Espresso::AOT *)MIL::IROperation::TryGetParameterType();
    YDimOfTensorFromIRValueType = Espresso::AOT::GetYDimOfTensorFromIRValueType(v13, v14);
    strcpy((char *)&v52, "bias");
    ParameterValue = MIL::IROperation::TryGetParameterValue();
    v17 = operator new(0x10uLL);
    v52.__r_.__value_.__l.__size_ = (std::string::size_type)(v17 + 2);
    v52.__r_.__value_.__r.__words[2] = (std::string::size_type)(v17 + 2);
    *v17 = v10;
    v17[1] = v12;
    v52.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    v18 = operator new(0x10uLL);
    v19 = (unint64_t)YDimOfTensorFromIRValueType;
    v50 = v18 + 2;
    v51 = v18 + 2;
    *v18 = v12;
    v18[1] = (unint64_t)YDimOfTensorFromIRValueType;
    v49 = v18;
    FlopCountForMatMul = Espresso::AOT::GetFlopCountForMatMul(&v52.__r_.__value_.__l.__data_, 0, (char **)&v49, 0);
    if (v49)
    {
      v50 = v49;
      operator delete(v49);
    }
    if (v52.__r_.__value_.__r.__words[0])
    {
      v52.__r_.__value_.__l.__size_ = v52.__r_.__value_.__r.__words[0];
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    v21 = operator new(0x10uLL);
    v52.__r_.__value_.__l.__size_ = (std::string::size_type)(v21 + 2);
    v52.__r_.__value_.__r.__words[2] = (std::string::size_type)(v21 + 2);
    *v21 = v12;
    v21[1] = v19;
    v52.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
    v22 = operator new(0x10uLL);
    v50 = v22 + 2;
    v51 = v22 + 2;
    *v22 = v19;
    v22[1] = v19;
    v49 = v22;
    v23 = Espresso::AOT::GetFlopCountForMatMul(&v52.__r_.__value_.__l.__data_, 0, (char **)&v49, 0);
    if (v49)
    {
      v50 = v49;
      operator delete(v49);
    }
    if (v52.__r_.__value_.__r.__words[0])
    {
      v52.__r_.__value_.__l.__size_ = v52.__r_.__value_.__r.__words[0];
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    HIBYTE(v51) = 10;
    LOWORD(v50) = 28271;
    if (ParameterValue)
      v24 = (double)(v10 * v19);
    else
      v24 = 0.0;
    v49 = *(void **)"activation";
    BYTE2(v50) = 0;
    memset(v48, 0, sizeof(v48));
    v25 = MIL::IROperation::TryGetParameterValue();
    if (v25)
      v25 = MEMORY[0x19401C3DC]();
    v26 = v48;
    if (v25)
      v27 = (void **)v25;
    else
      v27 = v48;
    if (*((char *)v27 + 23) < 0)
    {
      if (v25)
        v26 = (void **)v25;
      std::string::__init_copy_ctor_external(&v52, (const std::string::value_type *)*v27, (std::string::size_type)v26[1]);
    }
    else
    {
      v28 = *(_OWORD *)v27;
      v52.__r_.__value_.__r.__words[2] = (std::string::size_type)v27[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v28;
    }
    if (SHIBYTE(v51) < 0)
      operator delete(v49);
    v30 = FlopCountForMatMul + v24 + v23 + Espresso::AOT::GetFlopCountForActivation((uint64_t *)&v52, v10 * v19);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    *(double *)v5 = (double)v11 * 0.000000001 * v30;
    *(double *)(v5 + 56) = (double)v12;
    *(double *)(v5 + 72) = Espresso::AOT::GetXDimOfTensorFromIRValueType(OutputType, v29);
    v31 = operator new(0x10uLL);
    v52.__r_.__value_.__l.__size_ = (std::string::size_type)(v31 + 2);
    v52.__r_.__value_.__r.__words[2] = (std::string::size_type)(v31 + 2);
    *v31 = v10;
    v31[1] = v19;
    v52.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
    SizeInMbForDims = Espresso::AOT::GetSizeInMbForDims(&v52.__r_.__value_.__l.__data_, v8);
    if (v52.__r_.__value_.__r.__words[0])
    {
      v52.__r_.__value_.__l.__size_ = v52.__r_.__value_.__r.__words[0];
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    v33 = operator new(0x10uLL);
    v52.__r_.__value_.__l.__size_ = (std::string::size_type)(v33 + 2);
    v52.__r_.__value_.__r.__words[2] = (std::string::size_type)(v33 + 2);
    *v33 = v19;
    v33[1] = v12;
    v52.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
    v34 = Espresso::AOT::GetSizeInMbForDims(&v52.__r_.__value_.__l.__data_, v8);
    if (v52.__r_.__value_.__r.__words[0])
    {
      v52.__r_.__value_.__l.__size_ = v52.__r_.__value_.__r.__words[0];
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    v35 = operator new(0x10uLL);
    v52.__r_.__value_.__l.__size_ = (std::string::size_type)(v35 + 2);
    v52.__r_.__value_.__r.__words[2] = (std::string::size_type)(v35 + 2);
    *v35 = v19;
    v35[1] = v19;
    v52.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
    v37 = Espresso::AOT::GetSizeInMbForDims(&v52.__r_.__value_.__l.__data_, v8);
    if (v52.__r_.__value_.__r.__words[0])
    {
      v52.__r_.__value_.__l.__size_ = v52.__r_.__value_.__r.__words[0];
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    if (ParameterValue)
    {
      v38 = operator new(8uLL);
      v52.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
      *v38 = v19;
      v52.__r_.__value_.__l.__size_ = (std::string::size_type)(v38 + 1);
      v52.__r_.__value_.__r.__words[2] = (std::string::size_type)(v38 + 1);
      v39 = Espresso::AOT::GetSizeInMbForDims(&v52.__r_.__value_.__l.__data_, v8);
      if (v52.__r_.__value_.__r.__words[0])
      {
        v52.__r_.__value_.__l.__size_ = v52.__r_.__value_.__r.__words[0];
        operator delete(v52.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      v39 = 0.0;
    }
    *(double *)(v5 + 24) = v34 + SizeInMbForDims + v37 + v39;
    *(double *)(v5 + 32) = Espresso::AOT::GetSizeInMbForShape(ParameterType, v36);
    SizeInMbForShape = Espresso::AOT::GetSizeInMbForShape(OutputType, v40);
    *(double *)(v5 + 40) = SizeInMbForShape;
    v43 = *(double *)(v5 + 32) + SizeInMbForShape + *(double *)(v5 + 24);
    *(double *)(v5 + 8) = v43;
    v44 = 0.0;
    if (v43 > 0.0)
      v44 = *(double *)v5 * 1000.0 / v43;
    *(double *)(v5 + 48) = v44;
    Espresso::AOT::GetDimsOfTensorFromIRValueType(OutputType, v41, &v52);
    v45 = (void *)v52.__r_.__value_.__r.__words[0];
    *(double *)(v5 + 88) = (double)*(unint64_t *)v52.__r_.__value_.__l.__data_;
    v52.__r_.__value_.__l.__size_ = (std::string::size_type)v45;
    operator delete(v45);
    *(double *)(v5 + 16) = *(double *)(v5 + 24) * 1024.0 / *(double *)(v5 + 88);
    *(double *)(v5 + 136) = Espresso::AOT::GetWU16EfficiencyForInputType(ParameterType, v46);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_1910C7A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _QWORD *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a26)
    operator delete(a26);
  *a9 = 0;
  MEMORY[0x19401CD90](v31, 0x1000C401CC6BE04);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::MemOptimizer::operator|(uint64_t a1, uint64_t a2)
{
  return a2 | a1;
}

uint64_t Espresso::AOT::MemOptimizer::operator&(uint64_t a1, uint64_t a2)
{
  return a2 & a1;
}

void Espresso::AOT::MemOptimizer::Optimizer::~Optimizer(Espresso::AOT::MemOptimizer::Optimizer *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E2DA0350;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    MEMORY[0x19401CD90](v2, 0x1060C40DA1CAF76);
}

Espresso::AOT::MemOptimizer::Optimizer *Espresso::AOT::MemOptimizer::Optimizer::Optimizer(Espresso::AOT::MemOptimizer::Optimizer *this)
{
  uint64_t v2;
  uint64_t v3;
  std::runtime_error *exception;

  *(_QWORD *)this = off_1E2DA0350;
  *((_QWORD *)this + 1) = 0;
  v2 = operator new();
  *(_QWORD *)v2 = this;
  *(_BYTE *)(v2 + 8) = 0;
  *(_OWORD *)(v2 + 16) = xmmword_191A87F60;
  *(_QWORD *)(v2 + 32) = 0;
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v2;
  if (v3)
  {
    MEMORY[0x19401CD90](v3, 0x1060C40DA1CAF76);
    if (!*((_QWORD *)this + 1))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Error initializing Optimizer");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  return this;
}

void sub_1910C7C68(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v3)
    MEMORY[0x19401CD90](v3, 0x1060C40DA1CAF76);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::MemOptimizer::Optimizer::SetOptimizationMode(uint64_t result, int a2)
{
  std::logic_error *exception;

  *(_BYTE *)(*(_QWORD *)(result + 8) + 8) = a2;
  if (a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unsupported optimization mode");
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  return result;
}

void sub_1910C7CFC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::MemOptimizer::Optimizer::GetOptimizationMode(Espresso::AOT::MemOptimizer::Optimizer *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 1) + 8);
}

uint64_t Espresso::AOT::MemOptimizer::Optimizer::SetOptimizationAlgos(uint64_t result, uint64_t a2)
{
  std::logic_error *exception;

  *(_QWORD *)(*(_QWORD *)(result + 8) + 16) = a2;
  if (a2 != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unsupported optimization algo(s)");
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  return result;
}

void sub_1910C7D74(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::MemOptimizer::Optimizer::GetOptimizationAlgos(Espresso::AOT::MemOptimizer::Optimizer *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 16);
}

uint64_t Espresso::AOT::MemOptimizer::Optimizer::SetAllocAlignment(uint64_t this, uint64_t a2)
{
  std::logic_error *exception;

  *(_QWORD *)(*(_QWORD *)(this + 8) + 24) = a2;
  if (!a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Invalid alloc alignment");
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  return this;
}

void sub_1910C7DE8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::MemOptimizer::Optimizer::GetAllocAlignment(Espresso::AOT::MemOptimizer::Optimizer *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 24);
}

uint64_t Espresso::AOT::MemOptimizer::Optimizer::SetMaxAllocSize(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(this + 8) + 32) = a2;
  return this;
}

uint64_t Espresso::AOT::MemOptimizer::Optimizer::GetMaxAllocSize(Espresso::AOT::MemOptimizer::Optimizer *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 32);
}

uint64_t Espresso::AOT::MemOptimizer::Optimizer::Run@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  kdebug_trace();
  Espresso::AOT::MemOptimizer::Optimizer::Impl::Run(*(_QWORD *)(a1 + 8), a2, a3);
  return kdebug_trace();
}

void sub_1910C7EB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MemOptimizer::Optimizer::Impl::Run(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *v6;
  __int128 *v7;
  uint64_t *v8;
  void **v9;
  void *v10;
  void **v11;
  std::logic_error *exception;
  void *__p[6];
  __int128 *v14;

  if (*(_BYTE *)(a1 + 8))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unsupported optimization mode");
    goto LABEL_17;
  }
  if (*(_QWORD *)(a1 + 16) != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unsupported optimization algo(s)");
    goto LABEL_17;
  }
  if (!*(_QWORD *)(a1 + 24))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Invalid alloc alignment");
LABEL_17:
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  Espresso::AOT::MemOptimizer::Optimizer::Impl::ValidateEntryPoints((_QWORD *)a1, a2);
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v6 = (__int128 *)*a2;
  v7 = (__int128 *)a2[1];
  if ((__int128 *)*a2 != v7)
  {
    do
    {
      Espresso::AOT::MemOptimizer::Optimizer::Impl::GetOptimizedAllocInfo((Espresso::AOT::MemOptimizer::Optimizer::Impl *)a1, (uint64_t)__p);
      v14 = v6;
      v8 = std::__hash_table<std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (uint64_t)v6, (uint64_t)&std::piecewise_construct, &v14);
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__move_assign((uint64_t)(v8 + 5), (uint64_t *)__p);
      v9 = (void **)__p[2];
      v8[10] = (uint64_t)__p[5];
      if (v9)
      {
        do
        {
          v11 = (void **)*v9;
          if (*((char *)v9 + 39) < 0)
            operator delete(v9[2]);
          operator delete(v9);
          v9 = v11;
        }
        while (v11);
      }
      v10 = __p[0];
      __p[0] = 0;
      if (v10)
        operator delete(v10);
      v6 = (__int128 *)((char *)v6 + 24);
    }
    while (v6 != v7);
  }
}

void sub_1910C8054(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1910C8068(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1910C807C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1910C8090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  std::unordered_map<std::string,Espresso::AOT::MemOptimizer::AllocInfo>::~unordered_map[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void sub_1910C80AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,Espresso::AOT::MemOptimizer::AllocInfo>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MemOptimizer::Optimizer::Impl::ValidateEntryPoints(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  int v9;
  size_t size;
  unint64_t v11;
  std::string *p_dst;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  char v21;
  std::logic_error *exception;
  std::logic_error *v23;
  std::string __dst;
  std::string v25;
  _QWORD v26[3];

  v26[2] = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = a2[1];
  if (v3 == *a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Empty entry points list");
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v25.__r_.__value_.__r.__words[1] = xmmword_191A71250;
  strcpy(v25.__r_.__value_.__l.__data_, "Invalid entry point(s): ");
  v5 = 1;
  do
  {
    if (((*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 16))(*a1, v2) & 1) == 0)
    {
      if ((v5 & 1) != 0)
      {
        v6 = *(char *)(v2 + 23);
        if (v6 >= 0)
          v7 = (const std::string::value_type *)v2;
        else
          v7 = *(const std::string::value_type **)v2;
        if (v6 >= 0)
          v8 = *(unsigned __int8 *)(v2 + 23);
        else
          v8 = *(_QWORD *)(v2 + 8);
        std::string::append(&v25, v7, v8);
LABEL_10:
        v5 = 0;
        goto LABEL_11;
      }
      v9 = SHIBYTE(v25.__r_.__value_.__r.__words[2]);
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
      else
        size = v25.__r_.__value_.__l.__size_;
      v11 = size + 2;
      if (size + 2 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v11 >= 0x17)
      {
        v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17)
          v13 = v11 | 7;
        v14 = v13 + 1;
        p_dst = (std::string *)operator new(v13 + 1);
        __dst.__r_.__value_.__l.__size_ = size + 2;
        __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        p_dst = &__dst;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = size + 2;
        if (!size)
        {
LABEL_28:
          strcpy((char *)p_dst + size, ", ");
          v16 = *(char *)(v2 + 23);
          if (v16 >= 0)
            v17 = (const std::string::value_type *)v2;
          else
            v17 = *(const std::string::value_type **)v2;
          if (v16 >= 0)
            v18 = *(unsigned __int8 *)(v2 + 23);
          else
            v18 = *(_QWORD *)(v2 + 8);
          v19 = std::string::append(&__dst, v17, v18);
          v20 = v19->__r_.__value_.__r.__words[0];
          v26[0] = v19->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
          v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
          v19->__r_.__value_.__l.__size_ = 0;
          v19->__r_.__value_.__r.__words[2] = 0;
          v19->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v25.__r_.__value_.__l.__data_);
          v25.__r_.__value_.__r.__words[0] = v20;
          v25.__r_.__value_.__l.__size_ = v26[0];
          *(std::string::size_type *)((char *)&v25.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v26 + 7);
          *((_BYTE *)&v25.__r_.__value_.__s + 23) = v21;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          goto LABEL_10;
        }
      }
      if (v9 >= 0)
        v15 = &v25;
      else
        v15 = (std::string *)v25.__r_.__value_.__r.__words[0];
      memmove(p_dst, v15, size);
      goto LABEL_28;
    }
LABEL_11:
    v2 += 24;
  }
  while (v2 != v3);
  if ((v5 & 1) == 0)
  {
    v23 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v23, &v25);
    v23->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v23, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void sub_1910C8378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

const Espresso::AOT::MemOptimizer::InterferenceGraph *Espresso::AOT::MemOptimizer::Optimizer::Impl::GetOptimizedAllocInfo@<X0>(Espresso::AOT::MemOptimizer::Optimizer::Impl *a1@<X0>, uint64_t a2@<X8>)
{
  void **v4;
  void *v5;
  const Espresso::AOT::MemOptimizer::InterferenceGraph *result;
  void **v7;
  std::logic_error *exception;
  void *__p[6];
  const Espresso::AOT::MemOptimizer::InterferenceGraph *v10;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  (*(void (**)(const Espresso::AOT::MemOptimizer::InterferenceGraph **__return_ptr))(**(_QWORD **)a1 + 24))(&v10);
  if (*((_BYTE *)a1 + 8))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported optimization mode encountered post mode validation");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  Espresso::AOT::MemOptimizer::Optimizer::Impl::OptimizeAllocMinMemory(a1, v10, (uint64_t)__p);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__move_assign(a2, (uint64_t *)__p);
  v4 = (void **)__p[2];
  *(void **)(a2 + 40) = __p[5];
  if (v4)
  {
    do
    {
      v7 = (void **)*v4;
      if (*((char *)v4 + 39) < 0)
        operator delete(v4[2]);
      operator delete(v4);
      v4 = v7;
    }
    while (v7);
  }
  v5 = __p[0];
  __p[0] = 0;
  if (v5)
    operator delete(v5);
  result = v10;
  v10 = 0;
  if (result)
    return (const Espresso::AOT::MemOptimizer::InterferenceGraph *)(*(uint64_t (**)(const Espresso::AOT::MemOptimizer::InterferenceGraph *))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1910C8508(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v2 - 40);
  *(_QWORD *)(v2 - 40) = 0;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1);
    _Unwind_Resume(a1);
  }
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MemOptimizer::Optimizer::Impl::OptimizeAllocMinMemory(Espresso::AOT::MemOptimizer::Optimizer::Impl *this@<X0>, const Espresso::AOT::MemOptimizer::InterferenceGraph *a2@<X1>, uint64_t a3@<X8>)
{
  void **v5;
  void *v6;
  unint64_t v7;
  void **v8;
  std::logic_error *exception;
  std::runtime_error *v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  std::string::size_type size;
  std::string *v17;
  __int128 v18;
  std::string v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;
  uint64_t v24;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  if ((*((_BYTE *)this + 16) & 1) == 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported optimization algo encountered post algo validation");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  Espresso::AOT::MemOptimizer::Algorithms::DSatur::DSatur((Espresso::AOT::MemOptimizer::Algorithms::DSatur *)&v22, a2, *((_QWORD *)this + 3));
  Espresso::AOT::MemOptimizer::Algorithms::DSatur::Optimize((Espresso::AOT::MemOptimizer::Algorithms::DSatur *)&v22, (uint64_t)&v23);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__move_assign(a3, (uint64_t *)&v23);
  v5 = (void **)v23.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a3 + 40) = v24;
  if (v5)
  {
    do
    {
      v8 = (void **)*v5;
      if (*((char *)v5 + 39) < 0)
        operator delete(v5[2]);
      operator delete(v5);
      v5 = v8;
    }
    while (v8);
  }
  v6 = (void *)v23.__r_.__value_.__r.__words[0];
  v23.__r_.__value_.__r.__words[0] = 0;
  if (v6)
    operator delete(v6);
  Espresso::AOT::MemOptimizer::Algorithms::DSatur::~DSatur((Espresso::AOT::MemOptimizer::Algorithms::DSatur *)&v22);
  v7 = *((_QWORD *)this + 4);
  if (v7 && *(_QWORD *)(a3 + 40) > v7)
  {
    v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v20, *(_QWORD *)(a3 + 40));
    v11 = std::string::insert(&v20, 0, "Optimized alloc size ");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v13 = std::string::append(&v21, " is higher than max allowed ");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v19, *((_QWORD *)this + 4));
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v19;
    else
      v15 = (std::string *)v19.__r_.__value_.__r.__words[0];
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
    else
      size = v19.__r_.__value_.__l.__size_;
    v17 = std::string::append(&v23, (const std::string::value_type *)v15, size);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v10, &v22);
    __cxa_throw(v10, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
}

void sub_1910C8744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  void *v34;
  int v35;
  uint64_t v36;

  if (a33 < 0)
  {
    operator delete(__p);
    if (a14 < 0)
    {
LABEL_5:
      operator delete(a9);
      if (*(char *)(v36 - 57) < 0)
      {
LABEL_8:
        operator delete(*(void **)(v36 - 80));
        if (a26 < 0)
        {
LABEL_11:
          operator delete(a21);
          if ((a20 & 0x80000000) == 0)
            goto LABEL_12;
          goto LABEL_15;
        }
LABEL_14:
        if ((a20 & 0x80000000) == 0)
        {
LABEL_12:
          if (!v35)
          {
LABEL_17:
            std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v33);
            _Unwind_Resume(a1);
          }
LABEL_16:
          __cxa_free_exception(v34);
          std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v33);
          _Unwind_Resume(a1);
        }
LABEL_15:
        operator delete(a15);
        if ((v35 & 1) == 0)
          goto LABEL_17;
        goto LABEL_16;
      }
LABEL_10:
      if (a26 < 0)
        goto LABEL_11;
      goto LABEL_14;
    }
  }
  else if (a14 < 0)
  {
    goto LABEL_5;
  }
  if (*(char *)(v36 - 57) < 0)
    goto LABEL_8;
  goto LABEL_10;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void **v21;
  unsigned __int8 *j;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void **v26;
  unsigned __int8 *i;
  char *v28;
  std::string *v29;
  __int128 *v30;
  __int128 v31;
  float v32;
  float v33;
  _QWORD *v34;
  _QWORD *v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  size_t prime;
  int8x8_t v40;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD v47[2];
  char v48;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v47, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v23 = v15[1];
            if (v23 == v11)
            {
              v24 = *((unsigned __int8 *)v15 + 39);
              if ((v24 & 0x80u) == 0)
                v25 = *((unsigned __int8 *)v15 + 39);
              else
                v25 = v15[3];
              if (v25 == v17)
              {
                v26 = (const void **)(v15 + 2);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  for (i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    v26 = (const void **)((char *)v26 + 1);
                    if (!--v24)
                      return v15;
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              v21 = (const void **)(v15 + 2);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                for (j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  v21 = (const void **)((char *)v21 + 1);
                  if (!--v19)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v28 = (char *)operator new(0x58uLL);
  v47[0] = v28;
  v47[1] = a1 + 16;
  v48 = 0;
  *(_QWORD *)v28 = 0;
  *((_QWORD *)v28 + 1) = v11;
  v29 = (std::string *)(v28 + 16);
  v30 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v29, *(const std::string::value_type **)v30, *((_QWORD *)v30 + 1));
  }
  else
  {
    v31 = *v30;
    *((_QWORD *)v28 + 4) = *((_QWORD *)v30 + 2);
    *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v31;
  }
  *(_OWORD *)(v28 + 72) = 0u;
  *(_OWORD *)(v28 + 56) = 0u;
  *(_OWORD *)(v28 + 40) = 0u;
  *((_DWORD *)v28 + 18) = 1065353216;
  v48 = 1;
  v32 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v33 = *(float *)(a1 + 32);
  if (!v12 || (float)(v33 * (float)v12) < v32)
  {
    v36 = 1;
    if (v12 >= 3)
      v36 = (v12 & (v12 - 1)) != 0;
    v37 = v36 | (2 * v12);
    v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38)
      prime = v38;
    else
      prime = v37;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v40)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v40)
    {
      v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v40 < 3uLL || (v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        v41 = std::__next_prime(v41);
      }
      else
      {
        v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2)
          v41 = v43;
      }
      if (prime <= v41)
        prime = v41;
      if (prime < *(_QWORD *)&v40)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v44 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v44 & v11;
      v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v44 & v11));
      v35 = (_QWORD *)v47[0];
      if (v34)
        goto LABEL_57;
    }
LABEL_81:
    *v35 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v47[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v47[0])
    {
      v45 = *(_QWORD *)(*(_QWORD *)v47[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v45 >= v12)
          v45 %= v12;
      }
      else
      {
        v45 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_92;
  }
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v35 = (_QWORD *)v47[0];
  if (!v34)
    goto LABEL_81;
LABEL_57:
  *v35 = *v34;
  *v34 = v47[0];
LABEL_92:
  v15 = (uint64_t *)v47[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_1910C8CE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_1910C8CFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  void **v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void **v16;

  if (*(_QWORD *)(a1 + 24))
  {
    v4 = *(void ***)(a1 + 16);
    if (v4)
    {
      do
      {
        v16 = (void **)*v4;
        if (*((char *)v4 + 39) < 0)
          operator delete(v4[2]);
        operator delete(v4);
        v4 = v16;
      }
      while (v16);
    }
    *(_QWORD *)(a1 + 16) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v7 = *a2;
  *a2 = 0;
  v8 = *(void **)a1;
  *(_QWORD *)a1 = v7;
  if (v8)
    operator delete(v8);
  v11 = a2[2];
  v10 = a2 + 2;
  v9 = v11;
  v12 = *(v10 - 1);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 8) = v12;
  *(v10 - 1) = 0;
  v13 = v10[1];
  *(_QWORD *)(a1 + 24) = v13;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v10 + 4);
  if (v13)
  {
    v14 = *(_QWORD *)(v9 + 8);
    v15 = *(_QWORD *)(a1 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15)
        v14 %= v15;
    }
    else
    {
      v14 &= v15 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v14) = a1 + 16;
    *v10 = 0;
    v10[1] = 0;
  }
}

float Espresso::AOT::DTrees::addAneFp()
{
  return 35.981;
}

float Espresso::AOT::DTrees::addAneIp()
{
  return 32.949;
}

float Espresso::AOT::DTrees::addAneKp()
{
  return 29.763;
}

float Espresso::AOT::DTrees::addAneGp()
{
  return 26.545;
}

float Espresso::AOT::DTrees::addAneHp()
{
  return 32.826;
}

float Espresso::AOT::DTrees::addCpuFp()
{
  return 18.364;
}

float Espresso::AOT::DTrees::addCpuIp()
{
  return 12.654;
}

float Espresso::AOT::DTrees::addCpuKp()
{
  return 15.998;
}

float Espresso::AOT::DTrees::addCpuGp()
{
  return 17.746;
}

float Espresso::AOT::DTrees::addCpuHp()
{
  return 14.539;
}

float Espresso::AOT::DTrees::addGpuFp()
{
  return 27.417;
}

float Espresso::AOT::DTrees::addGpuIp()
{
  return 20.415;
}

float Espresso::AOT::DTrees::addAneJp()
{
  return 30.0;
}

float Espresso::AOT::DTrees::addCpuJp()
{
  return 15.0;
}

float Espresso::AOT::DTrees::addGpuJp()
{
  return 90.0;
}

float Espresso::AOT::DTrees::addGpuKp()
{
  return 54.822;
}

float Espresso::AOT::DTrees::addGpuGp()
{
  return 55.045;
}

float Espresso::AOT::DTrees::addGpuHp()
{
  return 100.5;
}

float Espresso::AOT::DTrees::addAneCp()
{
  return 30.0;
}

float Espresso::AOT::DTrees::addAneDp()
{
  return 30.0;
}

float Espresso::AOT::DTrees::addAneEp()
{
  return 30.0;
}

float Espresso::AOT::DTrees::addCpuCp()
{
  return 8.0;
}

float Espresso::AOT::DTrees::addCpuDp()
{
  return 8.0;
}

float Espresso::AOT::DTrees::addCpuEp()
{
  return 8.0;
}

float Espresso::AOT::DTrees::addGpuCp()
{
  return 13.0;
}

float Espresso::AOT::DTrees::addGpuDp()
{
  return 13.0;
}

float Espresso::AOT::DTrees::addGpuEp()
{
  return 13.0;
}

void Espresso::AOT::GetToolchainInfo(uint64_t a1@<X8>)
{
  const char *version_string;
  void *v3;
  size_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char **v10;
  size_t v11;
  char *v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  void *p_p;
  int v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  __int128 **v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  const char *v32;
  size_t v33;
  std::string::size_type v34;
  std::string *v35;
  uint64_t v36;
  uint64_t v37;
  std::string::size_type v38;
  char *v39;
  std::string *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  void *__p;
  size_t v46;
  unint64_t v47;
  __int128 *__dst[2];
  int64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  std::string v53;
  std::string __str;
  void *v55[2];
  unint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v50 = 0x2B2382A000000000;
  v51 = 0u;
  v52 = 0u;
  kdebug_trace();
  version_string = espresso_get_version_string();
  strcpy((char *)&__str, "espressoc-version");
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 17;
  v3 = v55;
  v4 = strlen(version_string);
  if (v4 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = (void *)v4;
  if (v4 >= 0x17)
  {
    v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v6 = v4 | 7;
    v7 = v6 + 1;
    v3 = operator new(v6 + 1);
    v55[1] = v5;
    v56 = v7 | 0x8000000000000000;
    v55[0] = v3;
    goto LABEL_8;
  }
  HIBYTE(v56) = v4;
  if (v4)
LABEL_8:
    memmove(v3, version_string, (size_t)v5);
  *((_BYTE *)v5 + (_QWORD)v3) = 0;
  std::unordered_map<std::string,std::string>::unordered_map(a1, (uint64_t)&__str, 1);
  if (SHIBYTE(v56) < 0)
  {
    operator delete(v55[0]);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_11;
LABEL_75:
    operator delete(__str.__r_.__value_.__l.__data_);
    goto LABEL_11;
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_75;
LABEL_11:
  v8 = 0;
  v9 = 0x1E0CB3000uLL;
  do
  {
    v10 = &(&off_1E2DD1450)[v8];
    v11 = (size_t)(&off_1E2DD1450)[v8 + 3];
    if (v11 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v12 = v10[2];
    if (v11 >= 0x17)
    {
      v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17)
        v14 = v11 | 7;
      v15 = v14 + 1;
      v13 = (__int128 *)operator new(v14 + 1);
      __dst[1] = (__int128 *)v11;
      v49 = v15 | 0x8000000000000000;
      __dst[0] = v13;
LABEL_20:
      memmove(v13, v12, v11);
      goto LABEL_21;
    }
    HIBYTE(v49) = (&off_1E2DD1450)[v8 + 3];
    v13 = (__int128 *)__dst;
    if (v11)
      goto LABEL_20;
LABEL_21:
    *((_BYTE *)v13 + v11) = 0;
    v16 = (size_t)(&off_1E2DD1450)[v8 + 5];
    if (v16 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v17 = v10[4];
    if (v16 >= 0x17)
    {
      v21 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v21 = v16 | 7;
      v22 = v21 + 1;
      p_p = operator new(v21 + 1);
      v46 = v16;
      v47 = v22 | 0x8000000000000000;
      __p = p_p;
    }
    else
    {
      HIBYTE(v47) = (&off_1E2DD1450)[v8 + 5];
      p_p = &__p;
      if (!v16)
      {
        LOBYTE(__p) = 0;
        v19 = SHIBYTE(v47);
        if ((SHIBYTE(v47) & 0x80000000) == 0)
          goto LABEL_25;
        goto LABEL_31;
      }
    }
    memmove(p_p, v17, v16);
    *((_BYTE *)p_p + v16) = 0;
    v19 = SHIBYTE(v47);
    if ((SHIBYTE(v47) & 0x80000000) == 0)
    {
LABEL_25:
      if (v19)
      {
        v20 = &__p;
LABEL_33:
        v23 = *(void **)(v9 + 1232);
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v20);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "bundleWithPath:", v24);
        v25 = objc_claimAutoreleasedReturnValue();
        goto LABEL_38;
      }
      goto LABEL_34;
    }
LABEL_31:
    if (v46)
    {
      v20 = __p;
      goto LABEL_33;
    }
LABEL_34:
    v26 = *(void **)(v9 + 1232);
    if (v49 >= 0)
      v27 = __dst;
    else
      v27 = (__int128 **)__dst[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v27);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "bundleWithIdentifier:", v24);
    v25 = objc_claimAutoreleasedReturnValue();
LABEL_38:
    v28 = (void *)v25;

    if (!v28)
    {
      __str.__r_.__value_.__s.__data_[0] = 0;
      LOBYTE(v55[0]) = 0;
      goto LABEL_52;
    }
    objc_msgSend(v28, "infoDictionary");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "valueForKey:", CFSTR("CFBundleVersion"));
    v30 = (void *)objc_claimAutoreleasedReturnValue();

    if (v30)
    {
      v31 = v9;
      v32 = (const char *)objc_msgSend(objc_retainAutorelease(v30), "UTF8String");
      v33 = strlen(v32);
      if (v33 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v34 = v33;
      if (v33 >= 0x17)
      {
        v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v33 | 7) != 0x17)
          v36 = v33 | 7;
        v37 = v36 + 1;
        v35 = (std::string *)operator new(v36 + 1);
        v53.__r_.__value_.__l.__size_ = v34;
        v53.__r_.__value_.__r.__words[2] = v37 | 0x8000000000000000;
        v53.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
      }
      else
      {
        *((_BYTE *)&v53.__r_.__value_.__s + 23) = v33;
        v35 = &v53;
        if (!v33)
          goto LABEL_50;
      }
      memmove(v35, v32, v34);
LABEL_50:
      v35->__r_.__value_.__s.__data_[v34] = 0;
      __str = v53;
      LOBYTE(v55[0]) = 1;
      v9 = v31;
      goto LABEL_51;
    }
    __str.__r_.__value_.__s.__data_[0] = 0;
    LOBYTE(v55[0]) = 0;
LABEL_51:

LABEL_52:
    if (SHIBYTE(v47) < 0)
    {
      operator delete(__p);
      if (SHIBYTE(v49) < 0)
      {
LABEL_57:
        operator delete(__dst[0]);
        if (!LOBYTE(v55[0]))
          goto LABEL_12;
        goto LABEL_58;
      }
    }
    else if (SHIBYTE(v49) < 0)
    {
      goto LABEL_57;
    }
    if (!LOBYTE(v55[0]))
      goto LABEL_12;
LABEL_58:
    v38 = (std::string::size_type)(&off_1E2DD1450)[v8 + 1];
    if (v38 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v39 = (&off_1E2DD1450)[v8];
    if (v38 >= 0x17)
    {
      v41 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17)
        v41 = v38 | 7;
      v42 = v41 + 1;
      v40 = (std::string *)operator new(v41 + 1);
      v53.__r_.__value_.__l.__size_ = v38;
      v53.__r_.__value_.__r.__words[2] = v42 | 0x8000000000000000;
      v53.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
    }
    else
    {
      *((_BYTE *)&v53.__r_.__value_.__s + 23) = (&off_1E2DD1450)[v8 + 1];
      v40 = &v53;
      if (!v38)
        goto LABEL_66;
    }
    memmove(v40, v39, v38);
LABEL_66:
    v40->__r_.__value_.__s.__data_[v38] = 0;
    __dst[0] = (__int128 *)&v53;
    v43 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (uint64_t)&v53, (uint64_t)&std::piecewise_construct, __dst);
    std::string::operator=((std::string *)(v43 + 40), &__str);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
    if (LOBYTE(v55[0]) && SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
LABEL_12:
    v8 += 6;
  }
  while (v8 != 12);
  if (E5RT::g_trace_analysis_level >= v50)
    kdebug_trace();
}

void sub_1910C9518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *Espresso::AOT::AbstractMILPass::AbstractMILPass(_QWORD *this)
{
  *this = off_1E2DA0380;
  return this;
}

float Espresso::AOT::DTrees::transposeAneFp(uint64_t a1)
{
  float result;

  result = 34.437;
  if (*(double *)(a1 + 32) > 0.16393)
    return 22.857;
  return result;
}

float Espresso::AOT::DTrees::transposeAneIp(uint64_t a1)
{
  float result;

  result = 31.021;
  if (*(double *)(a1 + 32) > 0.16393)
    return 17.559;
  return result;
}

float Espresso::AOT::DTrees::transposeAneJp(uint64_t a1)
{
  float result;

  result = 30.978;
  if (*(double *)(a1 + 32) > 0.16393)
    return 14.41;
  return result;
}

float Espresso::AOT::DTrees::transposeAneKp(uint64_t a1)
{
  float result;

  result = 30.375;
  if (*(double *)(a1 + 32) > 0.16393)
    return 14.459;
  return result;
}

float Espresso::AOT::DTrees::transposeAneGp(uint64_t a1)
{
  float result;

  result = 20.63;
  if (*(double *)(a1 + 32) > 0.16393)
    return 13.592;
  return result;
}

float Espresso::AOT::DTrees::transposeAneHp(uint64_t a1)
{
  float result;

  result = 19.565;
  if (*(double *)(a1 + 32) > 0.16393)
    return 13.617;
  return result;
}

float Espresso::AOT::DTrees::transposeCpuFp(uint64_t a1)
{
  float result;

  result = 38.03;
  if (*(double *)(a1 + 32) > 0.16393)
    return 1.6305;
  return result;
}

float Espresso::AOT::DTrees::transposeCpuIp(uint64_t a1)
{
  float result;

  result = 25.358;
  if (*(double *)(a1 + 32) > 0.16393)
    return 1.0019;
  return result;
}

float Espresso::AOT::DTrees::transposeCpuJp(uint64_t a1)
{
  float result;

  result = 2.0949;
  if (*(double *)(a1 + 32) > 0.16393)
    return 1.1068;
  return result;
}

float Espresso::AOT::DTrees::transposeCpuKp(uint64_t a1)
{
  float result;

  result = 2.0949;
  if (*(double *)(a1 + 32) > 0.16393)
    return 1.1046;
  return result;
}

float Espresso::AOT::DTrees::transposeCpuGp(uint64_t a1)
{
  float result;

  result = 2.0949;
  if (*(double *)(a1 + 32) > 0.16393)
    return 1.0077;
  return result;
}

float Espresso::AOT::DTrees::transposeCpuHp(uint64_t a1)
{
  float result;

  result = 2.0949;
  if (*(double *)(a1 + 32) > 0.16393)
    return 1.0597;
  return result;
}

float Espresso::AOT::DTrees::transposeGpuFp(uint64_t a1)
{
  float result;

  result = 54.785;
  if (*(double *)(a1 + 32) > 0.16393)
    return 16.308;
  return result;
}

float Espresso::AOT::DTrees::transposeGpuIp(uint64_t a1)
{
  float result;

  result = 35.386;
  if (*(double *)(a1 + 32) > 0.16393)
    return 15.807;
  return result;
}

float Espresso::AOT::DTrees::transposeGpuJp(uint64_t a1)
{
  float result;

  result = 2.6146;
  if (*(double *)(a1 + 32) > 0.16393)
    return 20.54;
  return result;
}

float Espresso::AOT::DTrees::transposeGpuKp(uint64_t a1)
{
  float result;

  result = 2.0038;
  if (*(double *)(a1 + 32) > 0.16393)
    return 11.977;
  return result;
}

float Espresso::AOT::DTrees::transposeGpuGp(uint64_t a1)
{
  float result;

  result = 4.1833;
  if (*(double *)(a1 + 32) > 0.16393)
    return 26.228;
  return result;
}

float Espresso::AOT::DTrees::transposeGpuHp(uint64_t a1)
{
  float result;

  result = 4.1833;
  if (*(double *)(a1 + 32) > 0.16393)
    return 20.228;
  return result;
}

float Espresso::AOT::DTrees::transposeAneCp()
{
  return 25.0;
}

float Espresso::AOT::DTrees::transposeAneDp()
{
  return 25.0;
}

float Espresso::AOT::DTrees::transposeAneEp()
{
  return 25.0;
}

float Espresso::AOT::DTrees::transposeCpuCp()
{
  return 3.0;
}

float Espresso::AOT::DTrees::transposeCpuDp()
{
  return 3.0;
}

float Espresso::AOT::DTrees::transposeCpuEp()
{
  return 3.0;
}

float Espresso::AOT::DTrees::transposeGpuCp()
{
  return 9.0;
}

float Espresso::AOT::DTrees::transposeGpuDp()
{
  return 9.0;
}

float Espresso::AOT::DTrees::transposeGpuEp()
{
  return 9.0;
}

double Espresso::AOT::Backends::CostModel::GetMAC(uint64_t a1, uint64_t a2, Espresso::AOT *a3, uint64_t *a4)
{
  uint64_t *v7;
  double NumElementsSkipUnknownDims;
  void **v9;
  char *v10;
  char *v11;
  std::string *v12;
  std::string::size_type size;
  std::string *v14;
  std::string::size_type v15;
  uint64_t **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  const MIL::IRValueType *v21;
  uint64_t **v22;
  std::string::size_type v23;
  std::string::size_type v24;
  std::string::size_type v25;
  BOOL v26;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  int v31;
  int v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t **v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t **v44;
  uint64_t *v45;
  _BYTE *v46;
  uint64_t *v47;
  uint64_t *v48;
  _BYTE *v49;
  uint64_t *v50;
  uint64_t *v51;
  _BYTE *v52;
  uint64_t *v53;
  void **v54;
  uint64_t *v55;
  void *v56;
  Espresso::AOT *v58;
  uint64_t **v59;
  uint64_t *v60;
  uint64_t v61;
  std::string v62;
  std::string v63;
  void *__p;
  void **v65;
  char v66;
  void *v67;
  uint64_t *v68;
  uint64_t **v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73[2];

  v70 = 0;
  v71 = 0;
  v69 = &v70;
  v66 = 2;
  strcpy((char *)&__p, "->");
  E5Common::StringUtils::Split(a4, (char *)&__p, (uint64_t)&v67);
  if (v66 < 0)
  {
    operator delete(__p);
    v7 = (uint64_t *)v67;
    NumElementsSkipUnknownDims = 0.0;
    if ((char *)v68 - (_BYTE *)v67 != 48)
    {
LABEL_3:
      if (!v7)
        goto LABEL_119;
      goto LABEL_112;
    }
  }
  else
  {
    v7 = (uint64_t *)v67;
    NumElementsSkipUnknownDims = 0.0;
    if ((char *)v68 - (_BYTE *)v67 != 48)
      goto LABEL_3;
  }
  *((_BYTE *)&v63.__r_.__value_.__s + 23) = 1;
  LOWORD(v63.__r_.__value_.__l.__data_) = 44;
  E5Common::StringUtils::Split(v7, (char *)&v63, (uint64_t)&__p);
  if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v9 = (void **)__p;
    if ((char *)v65 - (_BYTE *)__p != 48)
      goto LABEL_8;
LABEL_12:
    if (*((char *)v9 + 47) < 0)
      std::string::__init_copy_ctor_external(&v63, (const std::string::value_type *)v9[3], (std::string::size_type)v9[4]);
    else
      v63 = *(std::string *)((_BYTE *)v9 + 1);
    if (*((char *)v67 + 47) < 0)
      std::string::__init_copy_ctor_external(&v62, *((const std::string::value_type **)v67 + 3), *((_QWORD *)v67 + 4));
    else
      v62 = *(std::string *)((_BYTE *)v67 + 1);
    v60 = 0;
    v61 = 0;
    v59 = &v60;
    if (*((char *)v9 + 23) < 0)
    {
      v11 = (char *)*v9;
      v10 = (char *)v9[1];
      if (!v10)
        goto LABEL_22;
    }
    else
    {
      v10 = (char *)*((unsigned __int8 *)v9 + 23);
      v11 = (char *)v9;
      if (!*((_BYTE *)v9 + 23))
        goto LABEL_22;
    }
    do
    {
      v45 = std::__tree<char>::__find_equal<char>(&v59, (uint64_t *)&v60, v73, &v72, v11);
      if (!*v45)
      {
        v46 = operator new(0x20uLL);
        v46[25] = *v11;
        v47 = v73[0];
        *(_QWORD *)v46 = 0;
        *((_QWORD *)v46 + 1) = 0;
        *((_QWORD *)v46 + 2) = v47;
        *v45 = (uint64_t)v46;
        if (*v59)
        {
          v59 = (uint64_t **)*v59;
          v46 = (_BYTE *)*v45;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v60, (uint64_t *)v46);
        ++v61;
      }
      ++v11;
      --v10;
    }
    while (v10);
LABEL_22:
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v63;
    else
      v12 = (std::string *)v63.__r_.__value_.__r.__words[0];
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v63.__r_.__value_.__r.__words[2]);
    else
      size = v63.__r_.__value_.__l.__size_;
    for (; size; --size)
    {
      v48 = std::__tree<char>::__find_equal<char>(&v59, (uint64_t *)&v60, v73, &v72, (char *)v12);
      if (!*v48)
      {
        v49 = operator new(0x20uLL);
        v49[25] = v12->__r_.__value_.__s.__data_[0];
        v50 = v73[0];
        *(_QWORD *)v49 = 0;
        *((_QWORD *)v49 + 1) = 0;
        *((_QWORD *)v49 + 2) = v50;
        *v48 = (uint64_t)v49;
        if (*v59)
        {
          v59 = (uint64_t **)*v59;
          v49 = (_BYTE *)*v48;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v60, (uint64_t *)v49);
        ++v61;
      }
      v12 = (std::string *)((char *)v12 + 1);
    }
    if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v62;
    else
      v14 = (std::string *)v62.__r_.__value_.__r.__words[0];
    if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
    else
      v15 = v62.__r_.__value_.__l.__size_;
    for (; v15; --v15)
    {
      v51 = std::__tree<char>::__find_equal<char>(&v59, (uint64_t *)&v60, v73, &v72, (char *)v14);
      if (!*v51)
      {
        v52 = operator new(0x20uLL);
        v52[25] = v14->__r_.__value_.__s.__data_[0];
        v53 = v73[0];
        *(_QWORD *)v52 = 0;
        *((_QWORD *)v52 + 1) = 0;
        *((_QWORD *)v52 + 2) = v53;
        *v51 = (uint64_t)v52;
        if (*v59)
        {
          v59 = (uint64_t **)*v59;
          v52 = (_BYTE *)*v51;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v60, (uint64_t *)v52);
        ++v61;
      }
      v14 = (std::string *)((char *)v14 + 1);
    }
    v58 = a3;
    v16 = v59;
    if (v59 == &v60)
    {
LABEL_37:
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      v18 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 96))(v17);
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
      v20 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 96))(v19);
      NumElementsSkipUnknownDims = (double)(unint64_t)Espresso::AOT::GetNumElementsSkipUnknownDims(v58, v21);
      v22 = v69;
      if (v69 == &v70)
      {
LABEL_38:
        std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v59, v60);
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v62.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_40:
            v9 = (void **)__p;
            if (__p)
              goto LABEL_105;
            goto LABEL_9;
          }
        }
        else if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_40;
        }
        operator delete(v63.__r_.__value_.__l.__data_);
        v9 = (void **)__p;
        if (__p)
          goto LABEL_105;
LABEL_9:
        v7 = (uint64_t *)v67;
        if (!v67)
          goto LABEL_119;
        goto LABEL_112;
      }
      while (1)
      {
        v36 = *(_QWORD *)(*v18 + 8 * *((int *)v22 + 7));
        v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
        if (v37)
          v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 48))(v37);
        else
          v38 = 1;
        v39 = *(_QWORD *)(*v20 + 8 * *((int *)v22 + 8));
        v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 16))(v39);
        if (v40)
        {
          v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 48))(v40);
          if (v38 <= v41)
            v42 = v41;
          else
            v42 = v38;
          v43 = v22[1];
          if (v43)
            goto LABEL_83;
        }
        else
        {
          if (v38 <= 1)
            v42 = 1;
          else
            v42 = v38;
          v43 = v22[1];
          if (v43)
          {
            do
            {
LABEL_83:
              v44 = (uint64_t **)v43;
              v43 = (uint64_t *)*v43;
            }
            while (v43);
            goto LABEL_69;
          }
        }
        do
        {
          v44 = (uint64_t **)v22[2];
          v26 = *v44 == (uint64_t *)v22;
          v22 = v44;
        }
        while (!v26);
LABEL_69:
        NumElementsSkipUnknownDims = NumElementsSkipUnknownDims * (double)(unint64_t)(2 * v42);
        v22 = v44;
        if (v44 == &v70)
          goto LABEL_38;
      }
    }
    while (1)
    {
      v23 = std::string::find((const std::string *)v9, *((_BYTE *)v16 + 25), 0);
      v24 = std::string::find(&v63, *((_BYTE *)v16 + 25), 0);
      v25 = std::string::find(&v62, *((_BYTE *)v16 + 25), 0);
      v26 = v23 == -1 || v24 == -1;
      if (!v26 && v25 == -1)
        break;
LABEL_63:
      v34 = v16[1];
      if (v34)
      {
        do
        {
          v35 = (uint64_t **)v34;
          v34 = (uint64_t *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          v35 = (uint64_t **)v16[2];
          v26 = *v35 == (uint64_t *)v16;
          v16 = v35;
        }
        while (!v26);
      }
      v16 = v35;
      if (v35 == &v60)
        goto LABEL_37;
    }
    v28 = v70;
    v29 = &v70;
    v30 = &v70;
    if (!v70)
    {
LABEL_60:
      v33 = (uint64_t *)operator new(0x28uLL);
      *(uint64_t *)((char *)v33 + 28) = v23 | ((unint64_t)v24 << 32);
      *v33 = 0;
      v33[1] = 0;
      v33[2] = (uint64_t)v29;
      *v30 = v33;
      if (*v69)
      {
        v69 = (uint64_t **)*v69;
        v33 = *v30;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v70, v33);
      ++v71;
      goto LABEL_63;
    }
    while (1)
    {
      v29 = (uint64_t **)v28;
      v31 = *((_DWORD *)v28 + 7);
      if (v31 > (int)v23)
        goto LABEL_53;
      if (v31 < (int)v23)
      {
LABEL_58:
        v28 = v29[1];
        if (!v28)
        {
          v30 = v29 + 1;
          goto LABEL_60;
        }
      }
      else
      {
        v32 = *((_DWORD *)v29 + 8);
        if (v32 <= (int)v24)
        {
          if (v32 >= (int)v24)
            goto LABEL_63;
          goto LABEL_58;
        }
LABEL_53:
        v28 = *v29;
        v30 = v29;
        if (!*v29)
          goto LABEL_60;
      }
    }
  }
  operator delete(v63.__r_.__value_.__l.__data_);
  v9 = (void **)__p;
  if ((char *)v65 - (_BYTE *)__p == 48)
    goto LABEL_12;
LABEL_8:
  if (!v9)
    goto LABEL_9;
LABEL_105:
  v54 = v65;
  if (v65 == v9)
  {
    v65 = v9;
    operator delete(v9);
    v7 = (uint64_t *)v67;
    if (!v67)
      goto LABEL_119;
    goto LABEL_112;
  }
  do
  {
    if (*((char *)v54 - 1) < 0)
      operator delete(*(v54 - 3));
    v54 -= 3;
  }
  while (v54 != v9);
  v65 = v9;
  operator delete(__p);
  v7 = (uint64_t *)v67;
  if (v67)
  {
LABEL_112:
    v55 = v68;
    v56 = v7;
    if (v68 != v7)
    {
      do
      {
        if (*((char *)v55 - 1) < 0)
          operator delete((void *)*(v55 - 3));
        v55 -= 3;
      }
      while (v55 != v7);
      v56 = v67;
    }
    v68 = v7;
    operator delete(v56);
  }
LABEL_119:
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v69, v70);
  return NumElementsSkipUnknownDims;
}

void sub_1910CA0D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,uint64_t a35,char a36,_QWORD *a37)
{
  if (a25 < 0)
    operator delete(__p);
  std::vector<std::string>::~vector[abi:ne180100](&a27);
  std::vector<std::string>::~vector[abi:ne180100](&a33);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&a36, a37);
  _Unwind_Resume(a1);
}

void Espresso::AOT::Backends::CostModel::EinsumOpEstimator::EstimateComputeResources(const MIL::IROperation *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  MIL::IRValue *ParameterValue;
  Espresso::AOT *ParameterType;
  Espresso::AOT *v8;
  Espresso::AOT *OutputType;
  const MIL::IRValueType *v10;
  const MIL::IRValueType *v11;
  const MIL::IRValueType *v12;
  const MIL::IRValueType *v13;
  const MIL::IRValueType *v14;
  double SizeInMbForShape;
  double v16;
  double v17;
  const MIL::IRValueType *v18;
  double ChannelDimOfTensorFromIRValueType;
  const MIL::IRValueType *v20;
  char v21[23];
  char v22;
  void *__p[2];
  char v24;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_QWORD *)(v5 + 144) = 0;
  *a2 = v5;
  v24 = 8;
  strcpy((char *)__p, "equation");
  ParameterValue = (MIL::IRValue *)MIL::IROperation::TryGetParameterValue();
  MIL::IRValue::AsTensor(ParameterValue);
  MIL::IRValue::GetScalar<std::string>();
  strcpy(v21, "values");
  ParameterType = (Espresso::AOT *)MIL::IROperation::TryGetParameterType();
  v22 = 6;
  strcpy(v21, "values");
  v8 = (Espresso::AOT *)MIL::IROperation::TryGetParameterType();
  OutputType = (Espresso::AOT *)MIL::IROperation::TryGetOutputType(a1);
  *(double *)(v5 + 56) = Espresso::AOT::GetXDimOfTensorFromIRValueType(ParameterType, v10);
  *(double *)(v5 + 72) = Espresso::AOT::GetXDimOfTensorFromIRValueType(OutputType, v11);
  *(double *)v5 = Espresso::AOT::Backends::CostModel::GetMAC((uint64_t)ParameterType, (uint64_t)v8, OutputType, (uint64_t *)__p)* 0.000000001;
  *(double *)(v5 + 24) = Espresso::AOT::GetSizeInMbForShape(v8, v12);
  *(double *)(v5 + 32) = Espresso::AOT::GetSizeInMbForShape(ParameterType, v13);
  SizeInMbForShape = Espresso::AOT::GetSizeInMbForShape(OutputType, v14);
  v16 = *(double *)(v5 + 24) + SizeInMbForShape + *(double *)(v5 + 32);
  *(double *)(v5 + 8) = v16;
  v17 = *(double *)v5 * 1000.0 / v16;
  *(double *)(v5 + 40) = SizeInMbForShape;
  *(double *)(v5 + 48) = v17;
  ChannelDimOfTensorFromIRValueType = Espresso::AOT::GetChannelDimOfTensorFromIRValueType(OutputType, v18);
  *(double *)(v5 + 88) = ChannelDimOfTensorFromIRValueType;
  *(double *)(v5 + 16) = *(double *)(v5 + 24) * 1024.0 / ChannelDimOfTensorFromIRValueType;
  *(double *)(v5 + 136) = Espresso::AOT::GetWU16EfficiencyForInputType(ParameterType, v20);
  if (v24 < 0)
    operator delete(__p[0]);
}

void sub_1910CA3D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _QWORD *v20;
  uint64_t v21;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  *v20 = 0;
  MEMORY[0x19401CD90](v21, 0x1000C401CC6BE04);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<char>::__find_equal<char>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, char *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((char *)a2 + 25), v6 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v14 = a2;
      do
      {
        v10 = (uint64_t *)v14[2];
        v15 = *v10 == (_QWORD)v14;
        v14 = v10;
      }
      while (v15);
    }
    v16 = *a5;
    if (*((char *)v10 + 25) < v16)
      goto LABEL_17;
    v18 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v19 = (uint64_t *)v18;
          v20 = *(char *)(v18 + 25);
          if (v16 >= v20)
            break;
          v18 = *v19;
          v5 = v19;
          if (!*v19)
            goto LABEL_25;
        }
        if (v20 >= v16)
          break;
        v5 = v19 + 1;
        v18 = v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  else
  {
    v11 = a2[1];
    if (v11)
    {
      v12 = (uint64_t *)a2[1];
      do
      {
        v13 = v12;
        v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      v21 = a2;
      do
      {
        v13 = (uint64_t *)v21[2];
        v15 = *v13 == (_QWORD)v21;
        v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < *((char *)v13 + 25))
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      v22 = *v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            v23 = (uint64_t *)v22;
            v24 = *(char *)(v22 + 25);
            if (v6 >= v24)
              break;
            v22 = *v23;
            v5 = v23;
            if (!*v23)
              goto LABEL_41;
          }
          if (v24 >= v6)
            break;
          v5 = v23 + 1;
          v22 = v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

void Espresso::AOT::Builder::~Builder(Espresso::AOT::Builder *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2DA0A10;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2DA0A10;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2DA0A10;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::AOT::Builder::Builder(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v6;
  uint64_t v7;
  const void *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  const void *v15;
  const void *v16;
  const void *v18;
  std::__shared_weak_count_vtbl *v19;
  std::__shared_weak_count_vtbl *v20;
  std::__shared_weak_count *v21;
  const void *v22;

  *(_QWORD *)a1 = &off_1E2DA0A10;
  v6 = (uint64_t *)(a1 + 8);
  E5RT::E5ProgramBuilder::Create((_QWORD *)(a1 + 8));
  *(_BYTE *)(a1 + 16) = a3;
  E5RT::E5BuildInfoBuilder::Create(&v22);
  (*(void (**)(const void *, uint64_t))(*(_QWORD *)v22 + 24))(v22, a2);
  v7 = *v6;
  v8 = v22;
  v22 = 0;
  v18 = v8;
  E5RT::E5BuildInfoBuilder::Finish(&v18, &v19);
  v20 = v19;
  if (v19)
  {
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v19;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2CC0;
    v9->__shared_owners_ = 0;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v10;
  }
  else
  {
    v9 = 0;
  }
  v21 = v9;
  v19 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v7 + 32))(v7, &v20);
  v11 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v19;
  v19 = 0;
  if (v14)
    (*((void (**)(std::__shared_weak_count_vtbl *))v14->~__shared_weak_count + 1))(v14);
  v15 = v18;
  v18 = 0;
  if (v15)
    (*(void (**)(const void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = v22;
  v22 = 0;
  if (v16)
    (*(void (**)(const void *))(*(_QWORD *)v16 + 8))(v16);
  return a1;
}

void sub_1910CA824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
    v16 = a10;
    if (!a10)
    {
LABEL_3:
      v17 = a14;
      if (!a14)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v16 = a10;
    if (!a10)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = a14;
  if (!a14)
  {
LABEL_4:
    v18 = *v14;
    *v14 = 0;
    if (!v18)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *v14;
  *v14 = 0;
  if (!v18)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::Builder::BuildTensorOperand@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  __int128 v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count_vtbl *v29;
  unint64_t *p_shared_owners;
  const void *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *i;
  const void *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  const void *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t result;
  const void *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  _QWORD v49[2];
  std::__shared_weak_count *v50;
  void *v51[3];
  void *v52[2];
  __int128 v53;
  uint64_t v54;
  void *__p;
  void *v56;
  uint64_t v57;
  _BYTE v58[24];
  E5RT::TensorDataType::Impl *v59[2];
  const void *v60;

  E5RT::E5OperandBuilder::Create(&v60);
  (*(void (**)(const void *, uint64_t))(*(_QWORD *)v60 + 24))(v60, a2);
  switch(*(_DWORD *)(a4 + 8))
  {
    case 0:
      v16 = *(_DWORD *)(a1 + 124);
      if (v16 == 2)
        v17 = 7;
      else
        v17 = 8;
      if (v16 == 1)
        v18 = 6;
      else
        v18 = v17;
      v19 = 4;
      break;
    case 1:
      v24 = *(_DWORD *)(a1 + 124);
      v19 = 4;
      if (v24 == 2)
        v25 = 4;
      else
        v25 = 5;
      if (v24 == 1)
        v18 = 3;
      else
        v18 = v25;
      break;
    case 2:
      v22 = *(_DWORD *)(a1 + 124);
      v19 = 1;
      if (v22 == 2)
        v23 = 1;
      else
        v23 = 2;
      goto LABEL_22;
    case 4:
      v19 = 0;
      v22 = *(_DWORD *)(a1 + 124);
      if (v22 == 2)
        v23 = 1;
      else
        v23 = 2;
LABEL_22:
      if (v22 == 1)
        v18 = 0;
      else
        v18 = v23;
      break;
    case 7:
      v20 = *(_DWORD *)(a1 + 124);
      if (v20 == 2)
        v21 = 4;
      else
        v21 = 5;
      if (v20 == 1)
        v18 = 3;
      else
        v18 = v21;
      v19 = 1;
      break;
    default:
      Espresso::throw_exception_selector<Espresso::generic_error>("Unrecognized compute path.");
  }
  E5RT::TensorDataType::TensorDataType(v59, v19, v18);
  __p = 0;
  v56 = 0;
  v57 = 0;
  v26 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)v52 = *(_OWORD *)(a1 + 8);
  v53 = v26;
  v54 = *(_QWORD *)(a1 + 40);
  if (&__p != (void **)(a1 + 48))
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&__p, *(char **)(a1 + 48), *(_QWORD *)(a1 + 56), (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 2);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v58, (const Espresso::layer_shape *)v52, 0);
  if (__p)
  {
    v56 = __p;
    operator delete(__p);
  }
  Espresso::AOT::GetTensorShape((Espresso::AOT *)v58, (const Espresso::layer_nd_shape *)*(int *)(a1 + 124), (char **)v52);
  Espresso::AOT::GetTensorAlignment((uint64_t)v58, a3, *(unsigned int *)(a1 + 32), (unint64_t *)v51);
  E5RT::TensorDescriptor::CreateTensorDescriptorWithAlignments(v59, (uint64_t *)v52, v51, v49);
  v27 = v49[0];
  v49[1] = v49[0];
  if (v49[0])
  {
    v28 = (std::__shared_weak_count *)operator new();
    v29 = (std::__shared_weak_count_vtbl *)v49[0];
    v28->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    v28->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3270;
    v28->__shared_weak_owners_ = 0;
    v28[1].__vftable = v29;
    v50 = v28;
    v31 = v60;
    v47 = v27;
    v48 = v28;
    do
      v32 = __ldxr(p_shared_owners);
    while (__stxr(v32 + 1, p_shared_owners));
  }
  else
  {
    v50 = 0;
    v31 = v60;
    v47 = 0;
    v48 = 0;
  }
  (*(void (**)(const void *, uint64_t *))(*(_QWORD *)v31 + 16))(v31, &v47);
  v33 = v48;
  if (v48)
  {
    v34 = (unint64_t *)&v48->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  (*(void (**)(const void *, uint64_t))(*(_QWORD *)v60 + 32))(v60, a5);
  (*(void (**)(const void *, uint64_t))(*(_QWORD *)v60 + 40))(v60, a6);
  for (i = (_QWORD *)(a7 + 16); ; (*(void (**)(const void *, _QWORD *))(*(_QWORD *)v60 + 48))(v60, i + 2))
  {
    i = (_QWORD *)*i;
    if (!i)
      break;
  }
  v37 = v60;
  v60 = 0;
  v46 = v37;
  E5RT::E5OperandBuilder::Finish(&v46, v49);
  v38 = v49[0];
  *a8 = v49[0];
  if (!v38)
  {
    a8[1] = 0;
    v49[0] = 0;
    v41 = v46;
    v46 = 0;
    if (!v41)
      goto LABEL_51;
    goto LABEL_50;
  }
  v39 = (_QWORD *)operator new();
  v40 = v49[0];
  *v39 = &unk_1E2DC2DA0;
  v39[1] = 0;
  v39[2] = 0;
  v39[3] = v40;
  a8[1] = v39;
  v49[0] = 0;
  v41 = v46;
  v46 = 0;
  if (v41)
LABEL_50:
    (*(void (**)(const void *))(*(_QWORD *)v41 + 8))(v41);
LABEL_51:
  v42 = v50;
  if (v50)
  {
    v43 = (unint64_t *)&v50->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (v51[0])
  {
    v51[1] = v51[0];
    operator delete(v51[0]);
  }
  if (v52[0])
  {
    v52[1] = v52[0];
    operator delete(v52[0]);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v59);
  result = (uint64_t)v60;
  v60 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1910CAD04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  uint64_t v27;

  v27 = *(_QWORD *)(v25 - 88);
  *(_QWORD *)(v25 - 88) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::Builder::BuildSurfaceOperand@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, Espresso::AOT *a6@<X5>, uint64_t a7@<X6>, std::__shared_weak_count_vtbl **a8@<X8>)
{
  __int128 v16;
  void **v17;
  uint64_t bias_g_low;
  size_t v19;
  int *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  float *p_bias_r;
  int32x4_t v26;
  uint64_t v27;
  int32x4_t v28;
  int8x16_t v29;
  uint64_t v30;
  int *v31;
  int v32;
  uint64_t v33;
  float *v34;
  int32x4_t v35;
  uint64_t v36;
  int32x4_t v37;
  int8x16_t v38;
  uint64_t v39;
  int *v40;
  int v41;
  unint64_t v42;
  unsigned int SurfaceFormatGivenBlobProperties;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  _BOOL4 IsMultiSliceFormat;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  size_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  size_t v57;
  BOOL v58;
  size_t v59;
  size_t v60;
  unint64_t v61;
  __int128 v62;
  unsigned int v63;
  char *v64;
  unsigned int *v65;
  unsigned int *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  int64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _BYTE *v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _OWORD *v83;
  char *v84;
  uint64_t v85;
  __int128 v86;
  BOOL v87;
  std::__shared_weak_count_vtbl *v88;
  const void *v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91;
  unint64_t *p_shared_owners;
  unint64_t v93;
  _QWORD *i;
  const void *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count_vtbl *v97;
  std::__shared_weak_count_vtbl *v98;
  const void *v99;
  uint64_t result;
  unint64_t v101;
  std::__shared_weak_count_vtbl **v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  const void *v108;
  std::__shared_weak_count_vtbl *v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count_vtbl *v111;
  void *v112;
  uint64_t v113;
  char *v114;
  const void *v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  void *__p;
  unsigned int *v120;
  uint64_t v121;
  vimage2espresso_param __src;

  __p = 0;
  v120 = 0;
  v121 = 0;
  v16 = *(_OWORD *)(a1 + 24);
  v116 = *(_OWORD *)(a1 + 8);
  v117 = v16;
  v118 = *(_QWORD *)(a1 + 40);
  v17 = (void **)(a1 + 48);
  if (&__p != (void **)(a1 + 48))
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&__p, *(char **)(a1 + 48), *(_QWORD *)(a1 + 56), (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 2);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&__src, (const Espresso::layer_shape *)&v116, 0);
  if (__p)
  {
    v120 = (unsigned int *)__p;
    operator delete(__p);
  }
  bias_g_low = SLODWORD(__src.bias_g);
  if (LODWORD(__src.bias_g) <= 1)
    Espresso::throw_exception_selector<Espresso::generic_error>("A surface must have at least two dimensions.");
  v105 = a7;
  v102 = a8;
  v116 = 0uLL;
  *(_QWORD *)&v117 = 0;
  if ((LODWORD(__src.bias_g) & 0x80000000) != 0)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v106 = a2;
  v19 = 4 * SLODWORD(__src.bias_g);
  v20 = (int *)operator new(v19);
  memcpy(v20, &__src, 4 * bias_g_low);
  v21 = v20[bias_g_low - 1];
  operator delete(v20);
  if (SLODWORD(__src.bias_g) < 1)
  {
    v24 = 1;
    goto LABEL_24;
  }
  if (LODWORD(__src.bias_g) >= 8)
  {
    v22 = LODWORD(__src.bias_g) & 0xFFFFFFF8;
    p_bias_r = &__src.bias_r;
    v26.i64[0] = 0x100000001;
    v26.i64[1] = 0x100000001;
    v27 = v22;
    v28.i64[0] = 0x100000001;
    v28.i64[1] = 0x100000001;
    do
    {
      v26 = vmulq_s32(*(int32x4_t *)(p_bias_r - 4), v26);
      v28 = vmulq_s32(*(int32x4_t *)p_bias_r, v28);
      p_bias_r += 8;
      v27 -= 8;
    }
    while (v27);
    v29 = (int8x16_t)vmulq_s32(v28, v26);
    *(int32x2_t *)v29.i8 = vmul_s32(*(int32x2_t *)v29.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL));
    v23 = v29.i32[0] * v29.i32[1];
    if (v22 == LODWORD(__src.bias_g))
      goto LABEL_16;
  }
  else
  {
    v22 = 0;
    v23 = 1;
  }
  v30 = LODWORD(__src.bias_g) - v22;
  v31 = (int *)(&__src.scale + v22);
  do
  {
    v32 = *v31++;
    v23 *= v32;
    --v30;
  }
  while (v30);
LABEL_16:
  if (!v23)
    Espresso::throw_exception_selector<Espresso::generic_error>("A surface may not have a 0 length dimension.");
  if (LODWORD(__src.bias_g) >= 8)
  {
    v33 = LODWORD(__src.bias_g) & 0xFFFFFFF8;
    v34 = &__src.bias_r;
    v35.i64[0] = 0x100000001;
    v35.i64[1] = 0x100000001;
    v36 = v33;
    v37.i64[0] = 0x100000001;
    v37.i64[1] = 0x100000001;
    do
    {
      v35 = vmulq_s32(*(int32x4_t *)(v34 - 4), v35);
      v37 = vmulq_s32(*(int32x4_t *)v34, v37);
      v34 += 8;
      v36 -= 8;
    }
    while (v36);
    v38 = (int8x16_t)vmulq_s32(v37, v35);
    *(int32x2_t *)v38.i8 = vmul_s32(*(int32x2_t *)v38.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL));
    v24 = v38.i32[0] * v38.i32[1];
    if (v33 == LODWORD(__src.bias_g))
      goto LABEL_24;
  }
  else
  {
    v33 = 0;
    v24 = 1;
  }
  v39 = LODWORD(__src.bias_g) - v33;
  v40 = (int *)(&__src.scale + v33);
  do
  {
    v41 = *v40++;
    v24 *= v41;
    --v39;
  }
  while (v39);
LABEL_24:
  v42 = v24 / v21;
  SurfaceFormatGivenBlobProperties = Espresso::AOT::GetSurfaceFormatGivenBlobProperties(a5, a6, &__src);
  v44 = SurfaceFormatGivenBlobProperties;
  v45 = 2;
  if (SurfaceFormatGivenBlobProperties <= 0x21)
  {
    if (((1 << SurfaceFormatGivenBlobProperties) & 0x7FC0D92D) != 0)
    {
      LODWORD(v45) = *(_DWORD *)(a1 + 16);
      if ((int)v45 <= 1)
        LODWORD(v45) = 1;
      if (v45 >= 4)
        v45 = 4;
      else
        v45 = v45;
    }
    else if (((1 << SurfaceFormatGivenBlobProperties) & 0x3003F2682) != 0)
    {
      v45 = 1;
    }
  }
  if (v45 > v42)
    Espresso::throw_exception_selector<Espresso::generic_error>("Surface has height 0.");
  v46 = v42 / v45;
  IsMultiSliceFormat = E5RT::IsMultiSliceFormat(SurfaceFormatGivenBlobProperties);
  v48 = 1;
  if (bias_g_low >= 3 && IsMultiSliceFormat)
  {
    v103 = v44;
    v49 = v21;
    v50 = SLODWORD(__src.bias_g);
    *(_QWORD *)&v117 = 0;
    v116 = 0uLL;
    if ((LODWORD(__src.bias_g) & 0x80000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v51 = a3;
    v52 = a4;
    v53 = 4 * SLODWORD(__src.bias_g);
    v54 = (char *)operator new(v53);
    v55 = v54;
    if (v50 <= 1)
      v56 = 1;
    else
      v56 = v50;
    v57 = 4 * v56;
    v58 = v53 >= 4 * v56;
    v59 = v53 - 4 * v56;
    if (v58)
      v60 = v59;
    else
      v60 = 0;
    bzero(&v54[v57], v60);
    memcpy(v55, &__src, v57);
    v61 = *(int *)&v55[v19 - 12];
    operator delete(v55);
    v48 = v61;
    v46 /= v61;
    v21 = v49;
    a4 = v52;
    a3 = v51;
    v17 = (void **)(a1 + 48);
    v44 = v103;
  }
  v101 = v48;
  E5RT::E5OperandBuilder::Create(&v115);
  (*(void (**)(const void *, uint64_t))(*(_QWORD *)v115 + 24))(v115, v106);
  (*(void (**)(const void *, uint64_t))(*(_QWORD *)v115 + 32))(v115, a3);
  (*(void (**)(const void *, uint64_t))(*(_QWORD *)v115 + 40))(v115, a4);
  __p = 0;
  v120 = 0;
  v121 = 0;
  v62 = *(_OWORD *)(a1 + 24);
  v116 = *(_OWORD *)(a1 + 8);
  v117 = v62;
  v118 = *(_QWORD *)(a1 + 40);
  v104 = v46;
  if (&__p == v17)
  {
    v63 = DWORD2(v62);
    v112 = 0;
    v113 = 0;
    v114 = 0;
    if (DWORD2(v62))
      goto LABEL_46;
  }
  else
  {
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&__p, *(char **)(a1 + 48), *(_QWORD *)(a1 + 56), (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 2);
    v63 = DWORD2(v117);
    v112 = 0;
    v113 = 0;
    v114 = 0;
    if (DWORD2(v117))
    {
LABEL_46:
      v64 = (char *)operator new(8uLL);
      *(_QWORD *)v64 = v63;
      v113 = (uint64_t)(v64 + 8);
      v114 = v64 + 8;
      v112 = v64;
      goto LABEL_47;
    }
  }
  v65 = (unsigned int *)__p;
  v66 = v120;
  if (__p == v120)
    goto LABEL_83;
  v107 = v21;
  v67 = 0;
  do
  {
    while (1)
    {
      v68 = *v65;
      if (v67 >= v114)
        break;
      *(_QWORD *)v67 = v68;
      v67 += 8;
      v113 = (uint64_t)v67;
      if (++v65 == v66)
        goto LABEL_81;
    }
    v69 = (char *)v112;
    v70 = v67 - (_BYTE *)v112;
    v71 = (v67 - (_BYTE *)v112) >> 3;
    v72 = v71 + 1;
    if ((unint64_t)(v71 + 1) >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v73 = v114 - (_BYTE *)v112;
    if ((v114 - (_BYTE *)v112) >> 2 > v72)
      v72 = v73 >> 2;
    if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8)
      v74 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v74 = v72;
    if (v74)
    {
      if (v74 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v75 = operator new(8 * v74);
      v76 = &v75[8 * v71];
      *v76 = v68;
      v77 = (uint64_t)(v76 + 1);
      if (v67 == v69)
        goto LABEL_67;
    }
    else
    {
      v75 = 0;
      v76 = (_QWORD *)(8 * v71);
      *(_QWORD *)(8 * v71) = v68;
      v77 = 8 * v71 + 8;
      if (v67 == v69)
        goto LABEL_67;
    }
    v78 = v67 - 8 - v69;
    if (v78 < 0x168)
    {
      v79 = v67;
      goto LABEL_66;
    }
    if (&v75[v70 - 8 - (v78 & 0xFFFFFFFFFFFFFFF8)] > &v75[v70 - 8])
    {
      v79 = v67;
      do
      {
LABEL_66:
        v80 = *((_QWORD *)v79 - 1);
        v79 -= 8;
        *--v76 = v80;
      }
      while (v79 != v69);
      goto LABEL_67;
    }
    if (&v67[-(v78 & 0xFFFFFFFFFFFFFFF8) - 8] > v67 - 8)
    {
      v79 = v67;
      goto LABEL_66;
    }
    if ((unint64_t)(v67 - v75 - v70) < 0x20)
    {
      v79 = v67;
      goto LABEL_66;
    }
    v81 = (v78 >> 3) + 1;
    v82 = 8 * (v81 & 0x3FFFFFFFFFFFFFFCLL);
    v79 = &v67[-v82];
    v76 = (_QWORD *)((char *)v76 - v82);
    v83 = &v75[8 * v71 - 16];
    v84 = v67 - 16;
    v85 = v81 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v86 = *(_OWORD *)v84;
      *(v83 - 1) = *((_OWORD *)v84 - 1);
      *v83 = v86;
      v83 -= 2;
      v84 -= 32;
      v85 -= 4;
    }
    while (v85);
    if (v81 != (v81 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_66;
LABEL_67:
    v112 = v76;
    v113 = v77;
    v114 = &v75[8 * v74];
    if (v69)
      operator delete(v69);
    v67 = (char *)v77;
    v113 = v77;
    ++v65;
  }
  while (v65 != v66);
LABEL_81:
  v87 = v112 == v67;
  v21 = v107;
  if (!v87)
  {
LABEL_47:
    E5RT::SurfaceDescriptor::CreateSurfaceDescriptor(v44, v21, v104, &v112, &v111);
    goto LABEL_84;
  }
LABEL_83:
  E5RT::SurfaceDescriptor::CreateSurfaceDescriptor(v44, v21, v104, v101, &v111);
LABEL_84:
  v88 = v111;
  v89 = v115;
  v109 = v111;
  if (v111)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC32A8;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = v88;
  }
  else
  {
    v90 = 0;
  }
  v110 = v90;
  (*(void (**)(const void *, std::__shared_weak_count_vtbl **))(*(_QWORD *)v89 + 16))(v89, &v109);
  v91 = v110;
  if (v110)
  {
    p_shared_owners = (unint64_t *)&v110->__shared_owners_;
    do
      v93 = __ldaxr(p_shared_owners);
    while (__stlxr(v93 - 1, p_shared_owners));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  for (i = (_QWORD *)(v105 + 16); ; (*(void (**)(const void *, _QWORD *))(*(_QWORD *)v115 + 48))(v115, i + 2))
  {
    i = (_QWORD *)*i;
    if (!i)
      break;
  }
  v95 = v115;
  v115 = 0;
  v108 = v95;
  E5RT::E5OperandBuilder::Finish(&v108, &v111);
  v96 = v111;
  *v102 = v111;
  if (v96)
  {
    v97 = (std::__shared_weak_count_vtbl *)operator new();
    v98 = v111;
    v97->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_1E2DC2DA0;
    v97->~__shared_weak_count_0 = 0;
    v97->__on_zero_shared = 0;
    v97->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v98;
    v102[1] = v97;
    v111 = 0;
    v99 = v108;
    v108 = 0;
    if (v99)
      goto LABEL_97;
  }
  else
  {
    v102[1] = 0;
    v111 = 0;
    v99 = v108;
    v108 = 0;
    if (v99)
LABEL_97:
      (*(void (**)(const void *))(*(_QWORD *)v99 + 8))(v99);
  }
  if (v112)
  {
    v113 = (uint64_t)v112;
    operator delete(v112);
  }
  if (__p)
  {
    v120 = (unsigned int *)__p;
    operator delete(__p);
  }
  result = (uint64_t)v115;
  v115 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1910CB620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  void *v30;
  uint64_t v31;

  if (__p)
  {
    operator delete(__p);
    v30 = a28;
    if (!a28)
    {
LABEL_3:
      v31 = a22;
      if (a22)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v30 = a28;
    if (!a28)
      goto LABEL_3;
  }
  operator delete(v30);
  v31 = a22;
  if (a22)
  {
LABEL_4:
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    _Unwind_Resume(exception_object);
  }
LABEL_7:
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::Builder::BuildOperand@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, Espresso::AOT *a7@<X6>, int a8@<W7>, std::__shared_weak_count_vtbl **a9@<X8>, uint64_t a10)
{
  BOOL v10;

  if (a6)
  {
    v10 = *(_QWORD *)(a6 + 16) == *(_QWORD *)(a6 + 24);
    if (a7)
      v10 = 0;
    if (!a8)
      return Espresso::AOT::Builder::BuildTensorOperand(a1, a2, a3, a6, a4, a5, a10, a9);
  }
  else
  {
    v10 = a7 == 0;
    if (!a8)
      return Espresso::AOT::Builder::BuildTensorOperand(a1, a2, a3, a6, a4, a5, a10, a9);
  }
  if (!v10)
    return Espresso::AOT::Builder::BuildSurfaceOperand(a1, a2, a4, a5, a6, a7, a10, a9);
  return Espresso::AOT::Builder::BuildTensorOperand(a1, a2, a3, a6, a4, a5, a10, a9);
}

void Espresso::AOT::Builder::BuildOperands(Espresso::AOT *a1, const Espresso::net *a2, _QWORD *a3, _QWORD *a4)
{
  Espresso::AOT *v5;
  BOOL v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  int8x8_t v11;
  uint8x8_t v12;
  unint64_t v13;
  Espresso::AOT *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  int8x8_t v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  Espresso::AOT *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  size_t v31;
  const void *v32;
  _QWORD *v33;
  int v34;
  size_t v35;
  const void *v36;
  size_t v37;
  int v38;
  _BOOL4 v39;
  BOOL v40;
  uint64_t *v41;
  const void *v42;
  _QWORD *v43;
  const void *v44;
  int v45;
  size_t v46;
  const void *v47;
  size_t v48;
  int v49;
  _BOOL4 v50;
  unsigned __int8 *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  int v55;
  size_t v56;
  const void *v57;
  int v58;
  size_t v59;
  const void *v60;
  size_t v61;
  int v62;
  _BOOL4 v63;
  BOOL v64;
  uint64_t *v65;
  const void *v66;
  _QWORD *v67;
  const void *v68;
  int v69;
  size_t v70;
  const void *v71;
  size_t v72;
  int v73;
  _BOOL4 v74;
  Espresso::AOT *v75;
  uint64_t *v76;
  uint64_t v77;
  BOOL v78;
  char v79;
  uint64_t *v80;
  uint64_t v81;
  std::__shared_weak_count_vtbl *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  size_t v100;
  const void *v101;
  _QWORD *v102;
  int v103;
  size_t v104;
  const void *v105;
  size_t v106;
  int v107;
  _BOOL4 v108;
  BOOL v109;
  uint64_t *v110;
  const void *v111;
  _QWORD *v112;
  const void *v113;
  int v114;
  size_t v115;
  const void *v116;
  size_t v117;
  int v118;
  _BOOL4 v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  unsigned __int8 *v123;
  uint64_t v124;
  unsigned __int8 *v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  int v131;
  size_t v132;
  const void *v133;
  int v134;
  size_t v135;
  const void *v136;
  size_t v137;
  int v138;
  _BOOL4 v139;
  BOOL v140;
  uint64_t *v141;
  const void *v142;
  _QWORD *v143;
  const void *v144;
  int v145;
  size_t v146;
  const void *v147;
  size_t v148;
  int v149;
  _BOOL4 v150;
  Espresso::AOT *v151;
  uint64_t *v152;
  uint64_t v153;
  BOOL v154;
  char v155;
  uint64_t *v156;
  uint64_t v157;
  std::__shared_weak_count_vtbl *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  Espresso::AOT *v167;
  int PlatformForLayer;
  int v169;
  unint64_t v170;
  uint64_t v172;
  uint64_t v173;
  char v174;
  uint64_t *v176;
  unsigned int v177;
  _QWORD *v178;
  _QWORD *v179;
  _QWORD *v180;
  _QWORD *v181;
  std::__shared_weak_count_vtbl *v182;
  std::__shared_weak_count *v183;
  __int128 *v184;

  v5 = a1;
  v6 = Espresso::AOT::AreSurfaceDescriptorsEnabled(a1, a2);
  v7 = *((_QWORD *)v5 + 4);
  if (*((_QWORD *)v5 + 5) == v7)
    return;
  v8 = 0;
  v9 = (_QWORD *)((char *)v5 + 136);
  v178 = (_QWORD *)((char *)v5 + 336);
  v179 = (_QWORD *)((char *)v5 + 136);
  v174 = !v6;
  v180 = (_QWORD *)((char *)v5 + 264);
  v181 = (_QWORD *)((char *)v5 + 240);
  v167 = v5;
  while (2)
  {
    v10 = (uint64_t *)(v7 + 16 * v8);
    PlatformForLayer = Espresso::AOT::GetPlatformForLayer(v10, 1);
    v11 = *(int8x8_t *)((char *)v5 + 64);
    if (!*(_QWORD *)&v11)
      goto LABEL_270;
    v12 = (uint8x8_t)vcnt_s8(v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v13 = v8;
      v14 = v167;
      if (v8 >= *(_QWORD *)&v11)
        v13 = v8 % *(_QWORD *)&v11;
    }
    else
    {
      v13 = (*(_QWORD *)&v11 - 1) & v8;
      v14 = v167;
    }
    v15 = *(_QWORD **)(*((_QWORD *)v14 + 7) + 8 * v13);
    if (!v15 || (v16 = (_QWORD *)*v15) == 0)
LABEL_270:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v170 = v8;
    v176 = v10;
    if (v12.u32[0] < 2uLL)
    {
      v17 = *(_QWORD *)&v11 - 1;
      while (1)
      {
        v19 = v16[1];
        if (v8 == v19)
        {
          if (v16[2] == v8)
            goto LABEL_24;
        }
        else if ((v19 & v17) != v13)
        {
          goto LABEL_270;
        }
        v16 = (_QWORD *)*v16;
        if (!v16)
          goto LABEL_270;
      }
    }
    while (1)
    {
      v18 = v16[1];
      if (v8 == v18)
        break;
      if (v18 >= *(_QWORD *)&v11)
        v18 %= *(_QWORD *)&v11;
      if (v18 != v13)
        goto LABEL_270;
LABEL_14:
      v16 = (_QWORD *)*v16;
      if (!v16)
        goto LABEL_270;
    }
    if (v16[2] != v8)
      goto LABEL_14;
LABEL_24:
    v21 = v16[3];
    for (i = v16[4]; v21 != i; v9 = v179)
    {
      v27 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v9, (unsigned __int8 *)v21);
      if (!v27)
        goto LABEL_270;
      v28 = *v181;
      if (!*v181)
        goto LABEL_28;
      v29 = *((_QWORD *)v27 + 5);
      v30 = *(char *)(v21 + 23);
      v31 = v30 >= 0 ? *(unsigned __int8 *)(v21 + 23) : *(_QWORD *)(v21 + 8);
      v32 = v30 >= 0 ? (const void *)v21 : *(const void **)v21;
      v33 = v181;
      do
      {
        v34 = *(char *)(v28 + 55);
        if (v34 >= 0)
          v35 = *(unsigned __int8 *)(v28 + 55);
        else
          v35 = *(_QWORD *)(v28 + 40);
        if (v34 >= 0)
          v36 = (const void *)(v28 + 32);
        else
          v36 = *(const void **)(v28 + 32);
        if (v31 >= v35)
          v37 = v35;
        else
          v37 = v31;
        v38 = memcmp(v36, v32, v37);
        v39 = v35 < v31;
        if (v38)
          v39 = v38 < 0;
        v40 = !v39;
        if (v39)
          v41 = (uint64_t *)(v28 + 8);
        else
          v41 = (uint64_t *)v28;
        if (v40)
          v33 = (_QWORD *)v28;
        v28 = *v41;
      }
      while (*v41);
      if (v33 == v181)
        goto LABEL_28;
      v44 = (const void *)v33[4];
      v43 = v33 + 4;
      v42 = v44;
      v45 = *((char *)v43 + 23);
      if (v45 >= 0)
        v46 = *((unsigned __int8 *)v43 + 23);
      else
        v46 = v43[1];
      if (v45 >= 0)
        v47 = v43;
      else
        v47 = v42;
      if (v46 >= v31)
        v48 = v31;
      else
        v48 = v46;
      v49 = memcmp(v32, v47, v48);
      v50 = v31 < v46;
      if (v49)
        v50 = v49 < 0;
      if (v50)
      {
LABEL_28:
        if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(a4, v21))Espresso::throw_exception_selector<Espresso::generic_error>("Cannot find operand in cache. Error in topological sort");
        goto LABEL_29;
      }
      if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(a4, v21))
      {
        v51 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v179, (unsigned __int8 *)v21);
        if (!v51)
          goto LABEL_270;
        v52 = *((_QWORD *)v51 + 5);
        v53 = v178;
        v54 = *v178;
        if (*v178)
        {
          v172 = *((_QWORD *)v51 + 5);
          v55 = *(char *)(v21 + 23);
          v56 = v55 >= 0 ? *(unsigned __int8 *)(v21 + 23) : *(_QWORD *)(v21 + 8);
          v57 = v55 >= 0 ? (const void *)v21 : *(const void **)v21;
          do
          {
            v58 = *(char *)(v54 + 55);
            if (v58 >= 0)
              v59 = *(unsigned __int8 *)(v54 + 55);
            else
              v59 = *(_QWORD *)(v54 + 40);
            if (v58 >= 0)
              v60 = (const void *)(v54 + 32);
            else
              v60 = *(const void **)(v54 + 32);
            if (v56 >= v59)
              v61 = v59;
            else
              v61 = v56;
            v62 = memcmp(v60, v57, v61);
            v63 = v59 < v56;
            if (v62)
              v63 = v62 < 0;
            v64 = !v63;
            if (v63)
              v65 = (uint64_t *)(v54 + 8);
            else
              v65 = (uint64_t *)v54;
            if (v64)
              v53 = (_QWORD *)v54;
            v54 = *v65;
          }
          while (*v65);
          if (v53 == v178)
          {
            v75 = 0;
          }
          else
          {
            v68 = (const void *)v53[4];
            v67 = v53 + 4;
            v66 = v68;
            v69 = *((char *)v67 + 23);
            if (v69 >= 0)
              v70 = *((unsigned __int8 *)v67 + 23);
            else
              v70 = v67[1];
            if (v69 >= 0)
              v71 = v67;
            else
              v71 = v66;
            if (v70 >= v56)
              v72 = v56;
            else
              v72 = v70;
            v73 = memcmp(v57, v71, v72);
            v74 = v56 < v70;
            if (v73)
              v74 = v73 < 0;
            v75 = v74 ? 0 : (Espresso::AOT *)(v67 + 3);
          }
          v52 = v172;
        }
        else
        {
          v75 = 0;
        }
        v76 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(a3, v21);
        if (!v76)
          goto LABEL_270;
        v77 = (uint64_t)(v76 + 5);
        if (v75)
          v78 = 0;
        else
          v78 = *(_QWORD *)(v29 + 128) == *(_QWORD *)(v29 + 136);
        v79 = v174;
        if (v78)
          v79 = 1;
        if ((v79 & 1) != 0)
          Espresso::AOT::Builder::BuildTensorOperand(v52, v21, PlatformForLayer, v29 + 112, 0, 0, v77, &v182);
        else
          Espresso::AOT::Builder::BuildSurfaceOperand(v52, v21, 0, 0, v29 + 112, v75, v77, &v182);
        v184 = (__int128 *)v21;
        v80 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, v21, (uint64_t)&std::piecewise_construct, &v184);
        v82 = v182;
        v81 = (uint64_t)v183;
        if (v183)
        {
          p_shared_owners = (unint64_t *)&v183->__shared_owners_;
          do
            v84 = __ldxr(p_shared_owners);
          while (__stxr(v84 + 1, p_shared_owners));
        }
        v85 = (std::__shared_weak_count *)v80[6];
        v80[5] = (uint64_t)v82;
        v80[6] = v81;
        if (!v85)
          goto LABEL_132;
        v86 = (unint64_t *)&v85->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
          v88 = v183;
          if (v183)
          {
LABEL_133:
            v89 = (unint64_t *)&v88->__shared_owners_;
            do
              v90 = __ldaxr(v89);
            while (__stlxr(v90 - 1, v89));
            if (!v90)
            {
              ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
              std::__shared_weak_count::__release_weak(v88);
            }
          }
        }
        else
        {
LABEL_132:
          v88 = v183;
          if (v183)
            goto LABEL_133;
        }
      }
LABEL_29:
      v21 += 24;
    }
    v169 = Espresso::AOT::GetPlatformForLayer(v176, 0);
    v22 = *(int8x8_t *)((char *)v167 + 104);
    v23 = v170;
    if (!*(_QWORD *)&v22)
      goto LABEL_270;
    v24 = (uint8x8_t)vcnt_s8(v22);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      v25 = v170;
      v26 = v167;
      if (v170 >= *(_QWORD *)&v22)
        v25 = v170 % *(_QWORD *)&v22;
    }
    else
    {
      v25 = (*(_QWORD *)&v22 - 1) & v170;
      v26 = v167;
    }
    v91 = *(_QWORD **)(*((_QWORD *)v26 + 12) + 8 * v25);
    if (!v91)
      goto LABEL_270;
    v92 = (_QWORD *)*v91;
    if (!v92)
      goto LABEL_270;
    if (v24.u32[0] < 2uLL)
    {
      v93 = *(_QWORD *)&v22 - 1;
      while (1)
      {
        v95 = v92[1];
        if (v170 == v95)
        {
          if (v92[2] == v170)
            goto LABEL_156;
        }
        else if ((v95 & v93) != v25)
        {
          goto LABEL_270;
        }
        v92 = (_QWORD *)*v92;
        if (!v92)
          goto LABEL_270;
      }
    }
    while (1)
    {
      v94 = v92[1];
      if (v170 == v94)
        break;
      if (v94 >= *(_QWORD *)&v22)
        v94 %= *(_QWORD *)&v22;
      if (v94 != v25)
        goto LABEL_270;
LABEL_146:
      v92 = (_QWORD *)*v92;
      if (!v92)
        goto LABEL_270;
    }
    if (v92[2] != v170)
      goto LABEL_146;
LABEL_156:
    v97 = v92[3];
    v96 = v92[4];
    v173 = v96;
    while (v97 != v96)
    {
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(a4, v97))
      {
        Espresso::throw_exception_selector<Espresso::generic_error>("Logic error: output operand already built");
      }
      v98 = *v180;
      if (!*v180)
        goto LABEL_199;
      v99 = *(char *)(v97 + 23);
      v100 = v99 >= 0 ? *(unsigned __int8 *)(v97 + 23) : *(_QWORD *)(v97 + 8);
      v101 = v99 >= 0 ? (const void *)v97 : *(const void **)v97;
      v102 = v180;
      do
      {
        v103 = *(char *)(v98 + 55);
        if (v103 >= 0)
          v104 = *(unsigned __int8 *)(v98 + 55);
        else
          v104 = *(_QWORD *)(v98 + 40);
        if (v103 >= 0)
          v105 = (const void *)(v98 + 32);
        else
          v105 = *(const void **)(v98 + 32);
        if (v100 >= v104)
          v106 = v104;
        else
          v106 = v100;
        v107 = memcmp(v105, v101, v106);
        v108 = v104 < v100;
        if (v107)
          v108 = v107 < 0;
        v109 = !v108;
        if (v108)
          v110 = (uint64_t *)(v98 + 8);
        else
          v110 = (uint64_t *)v98;
        if (v109)
          v102 = (_QWORD *)v98;
        v98 = *v110;
      }
      while (*v110);
      if (v102 == v180)
        goto LABEL_199;
      v113 = (const void *)v102[4];
      v112 = v102 + 4;
      v111 = v113;
      v114 = *((char *)v112 + 23);
      if (v114 >= 0)
        v115 = *((unsigned __int8 *)v112 + 23);
      else
        v115 = v112[1];
      if (v114 >= 0)
        v116 = v112;
      else
        v116 = v111;
      if (v115 >= v100)
        v117 = v100;
      else
        v117 = v115;
      v118 = memcmp(v101, v116, v117);
      v119 = v100 < v115;
      if (v118)
        v119 = v118 < 0;
      if (v119)
      {
LABEL_199:
        v120 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(a2, v97);
        if (!v120)
          goto LABEL_270;
        v121 = v120[5];
        v122 = 1;
        v123 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v9, (unsigned __int8 *)v97);
        if (!v123)
          goto LABEL_270;
      }
      else
      {
        v122 = 0;
        v121 = 0;
        v123 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v9, (unsigned __int8 *)v97);
        if (!v123)
          goto LABEL_270;
      }
      v124 = *((_QWORD *)v123 + 5);
      v125 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v9, (unsigned __int8 *)v97);
      if (!v125)
        goto LABEL_270;
      v126 = *((_QWORD *)v125 + 5);
      v127 = v178;
      v128 = *v178;
      if (*v178)
      {
        v177 = v122;
        v129 = v121;
        v130 = a4;
        v131 = *(char *)(v97 + 23);
        v132 = v131 >= 0 ? *(unsigned __int8 *)(v97 + 23) : *(_QWORD *)(v97 + 8);
        v133 = v131 >= 0 ? (const void *)v97 : *(const void **)v97;
        do
        {
          v134 = *(char *)(v128 + 55);
          if (v134 >= 0)
            v135 = *(unsigned __int8 *)(v128 + 55);
          else
            v135 = *(_QWORD *)(v128 + 40);
          if (v134 >= 0)
            v136 = (const void *)(v128 + 32);
          else
            v136 = *(const void **)(v128 + 32);
          if (v132 >= v135)
            v137 = v135;
          else
            v137 = v132;
          v138 = memcmp(v136, v133, v137);
          v139 = v135 < v132;
          if (v138)
            v139 = v138 < 0;
          v140 = !v139;
          if (v139)
            v141 = (uint64_t *)(v128 + 8);
          else
            v141 = (uint64_t *)v128;
          if (v140)
            v127 = (_QWORD *)v128;
          v128 = *v141;
        }
        while (*v141);
        if (v127 == v178)
        {
          v151 = 0;
        }
        else
        {
          v144 = (const void *)v127[4];
          v143 = v127 + 4;
          v142 = v144;
          v145 = *((char *)v143 + 23);
          if (v145 >= 0)
            v146 = *((unsigned __int8 *)v143 + 23);
          else
            v146 = v143[1];
          if (v145 >= 0)
            v147 = v143;
          else
            v147 = v142;
          if (v146 >= v132)
            v148 = v132;
          else
            v148 = v146;
          v149 = memcmp(v133, v147, v148);
          v150 = v132 < v146;
          if (v149)
            v150 = v149 < 0;
          v151 = v150 ? 0 : (Espresso::AOT *)(v143 + 3);
        }
        a4 = v130;
        v23 = v170;
        v121 = v129;
        v122 = v177;
      }
      else
      {
        v151 = 0;
      }
      v152 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(a3, v97);
      if (!v152)
        goto LABEL_270;
      v153 = (uint64_t)(v152 + 5);
      if (v151)
        v154 = 0;
      else
        v154 = *(_QWORD *)(v126 + 128) == *(_QWORD *)(v126 + 136);
      v155 = v174;
      if (v154)
        v155 = 1;
      if ((v155 & 1) != 0)
        Espresso::AOT::Builder::BuildTensorOperand(v124, v97, v169, v126 + 112, v122, v121, v153, &v182);
      else
        Espresso::AOT::Builder::BuildSurfaceOperand(v124, v97, v122, v121, v126 + 112, v151, v153, &v182);
      v9 = v179;
      v184 = (__int128 *)v97;
      v156 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, v97, (uint64_t)&std::piecewise_construct, &v184);
      v158 = v182;
      v157 = (uint64_t)v183;
      if (v183)
      {
        v159 = (unint64_t *)&v183->__shared_owners_;
        do
          v160 = __ldxr(v159);
        while (__stxr(v160 + 1, v159));
      }
      v161 = (std::__shared_weak_count *)v156[6];
      v156[5] = (uint64_t)v158;
      v156[6] = v157;
      if (!v161)
        goto LABEL_262;
      v162 = (unint64_t *)&v161->__shared_owners_;
      do
        v163 = __ldaxr(v162);
      while (__stlxr(v163 - 1, v162));
      if (!v163)
      {
        ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
        std::__shared_weak_count::__release_weak(v161);
        v164 = v183;
        if (!v183)
          goto LABEL_157;
      }
      else
      {
LABEL_262:
        v164 = v183;
        if (!v183)
          goto LABEL_157;
      }
      v165 = (unint64_t *)&v164->__shared_owners_;
      do
        v166 = __ldaxr(v165);
      while (__stlxr(v166 - 1, v165));
      if (!v166)
      {
        ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
        std::__shared_weak_count::__release_weak(v164);
      }
LABEL_157:
      v97 += 24;
      v96 = v173;
    }
    v8 = v23 + 1;
    v5 = v167;
    v7 = *((_QWORD *)v167 + 4);
    if (v8 < (*((_QWORD *)v167 + 5) - v7) >> 4)
      continue;
    break;
  }
}

void sub_1910CC1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1910CC1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::AOT::Builder::BuildCastOps(_QWORD *a1, const void **a2, unint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v8;
  uint64_t *v13;
  uint64_t v14;
  const void *v15;
  void *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int8x8_t v25;
  uint8x8_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int8x8_t v33;
  uint8x8_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  int v50;
  size_t v51;
  unint64_t v52;
  const void *v53;
  std::string *p_dst;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  const void *v62;
  unint64_t v63;
  std::string *v64;
  std::string::size_type size;
  std::string *v66;
  __int128 v67;
  std::string *v68;
  __int128 v69;
  char *v70;
  unint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  const void *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t *v79;
  std::string::size_type v80;
  std::string::size_type v81;
  unint64_t *v82;
  unint64_t v83;
  const void *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::string::size_type v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t *v95;
  std::string::size_type v96;
  std::string::size_type v97;
  unint64_t *v98;
  unint64_t v99;
  const void *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::string::size_type v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  const void *v111;
  std::string::size_type v112;
  std::__shared_weak_count *v113;
  std::string::size_type v114;
  const void *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  NSObject *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  const void *v139;
  unint64_t v140;
  _QWORD *v141;
  uint64_t v144;
  uint64_t v145;
  std::string::size_type v146;
  std::__shared_weak_count *v147;
  const void *v148;
  std::string::size_type v149;
  __int128 v150;
  std::string::size_type v151;
  std::__shared_weak_count *v152;
  __int128 v153;
  std::string::size_type v154;
  std::__shared_weak_count *v155;
  char *v156;
  std::__shared_weak_count *v157;
  std::string v158;
  std::string __dst;
  std::string v160;
  __int128 v161;
  std::string::size_type v162;
  const void *v163;
  void *v164;
  std::__shared_weak_count *v165;
  void *v166;
  std::__shared_weak_count *v167;

  v8 = a1[4];
  if (a3 >= (a1[5] - v8) >> 4)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v13 = (uint64_t *)(v8 + 16 * a3);
  v14 = *v13;
  v15 = *(const void **)(*v13 + 64);
  if (v15
  {
    v17 = v16;
    v18 = *(std::__shared_weak_count **)(v14 + 72);
    v166 = v16;
    v167 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
      v14 = *v13;
      v15 = *(const void **)(*v13 + 64);
      if (!v15)
        goto LABEL_15;
    }
  }
  else
  {
    v17 = 0;
    v166 = 0;
    v167 = 0;
    if (!v15)
      goto LABEL_15;
  }
  if (v21)
  {
    v22 = *(std::__shared_weak_count **)(v14 + 72);
    v164 = v21;
    v165 = v22;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    goto LABEL_16;
  }
LABEL_15:
  v22 = 0;
  v164 = 0;
  v165 = 0;
  if (!v17)
    Espresso::throw_exception_selector<Espresso::generic_error>("Cast op can be built only for ctx transfer or cast kernels.");
LABEL_16:
  v25 = (int8x8_t)a1[8];
  if (!*(_QWORD *)&v25)
    goto LABEL_194;
  v26 = (uint8x8_t)vcnt_s8(v25);
  v26.i16[0] = vaddlv_u8(v26);
  if (v26.u32[0] > 1uLL)
  {
    v27 = a3;
    if (*(_QWORD *)&v25 <= a3)
      v27 = a3 % *(_QWORD *)&v25;
  }
  else
  {
    v27 = (*(_QWORD *)&v25 - 1) & a3;
  }
  v28 = *(_QWORD **)(a1[7] + 8 * v27);
  if (!v28 || (v29 = (_QWORD *)*v28) == 0)
LABEL_194:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (v26.u32[0] < 2uLL)
  {
    v30 = *(_QWORD *)&v25 - 1;
    while (1)
    {
      v32 = v29[1];
      if (v32 == a3)
      {
        if (v29[2] == a3)
          goto LABEL_36;
      }
      else if ((v32 & v30) != v27)
      {
        goto LABEL_194;
      }
      v29 = (_QWORD *)*v29;
      if (!v29)
        goto LABEL_194;
    }
  }
  while (1)
  {
    v31 = v29[1];
    if (v31 == a3)
      break;
    if (v31 >= *(_QWORD *)&v25)
      v31 %= *(_QWORD *)&v25;
    if (v31 != v27)
      goto LABEL_194;
LABEL_26:
    v29 = (_QWORD *)*v29;
    if (!v29)
      goto LABEL_194;
  }
  if (v29[2] != a3)
    goto LABEL_26;
LABEL_36:
  v33 = (int8x8_t)a1[13];
  if (!*(_QWORD *)&v33)
    goto LABEL_195;
  v34 = (uint8x8_t)vcnt_s8(v33);
  v34.i16[0] = vaddlv_u8(v34);
  if (v34.u32[0] > 1uLL)
  {
    v35 = a3;
    if (*(_QWORD *)&v33 <= a3)
      v35 = a3 % *(_QWORD *)&v33;
  }
  else
  {
    v35 = (*(_QWORD *)&v33 - 1) & a3;
  }
  v36 = *(_QWORD **)(a1[12] + 8 * v35);
  if (!v36 || (v37 = (_QWORD *)*v36) == 0)
LABEL_195:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (v34.u32[0] < 2uLL)
  {
    v38 = *(_QWORD *)&v33 - 1;
    while (1)
    {
      v40 = v37[1];
      if (v40 == a3)
      {
        if (v37[2] == a3)
          goto LABEL_56;
      }
      else if ((v40 & v38) != v35)
      {
        goto LABEL_195;
      }
      v37 = (_QWORD *)*v37;
      if (!v37)
        goto LABEL_195;
    }
  }
  while (2)
  {
    v39 = v37[1];
    if (v39 != a3)
    {
      if (v39 >= *(_QWORD *)&v33)
        v39 %= *(_QWORD *)&v33;
      if (v39 != v35)
        goto LABEL_195;
      goto LABEL_46;
    }
    if (v37[2] != a3)
    {
LABEL_46:
      v37 = (_QWORD *)*v37;
      if (!v37)
        goto LABEL_195;
      continue;
    }
    break;
  }
LABEL_56:
  v42 = v29[3];
  v41 = v29[4];
  v43 = 0xAAAAAAAAAAAAAAABLL * ((v41 - v42) >> 3);
  if (v43 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37[4] - v37[3]) >> 3))
    Espresso::throw_exception_selector<Espresso::generic_error>("Mismatched input/output numbers for cast op");
  if (v41 != v42)
  {
    v44 = 0;
    if (v43 <= 1)
      v45 = 1;
    else
      v45 = 0xAAAAAAAAAAAAAAABLL * ((v41 - v42) >> 3);
    v140 = v45;
    v141 = v29;
    while (1)
    {
      v47 = v29[3];
      v48 = v37[3];
      v49 = E5RT::E5OperationBuilder::Create(3, &v163);
      v144 = v48;
      v145 = v44;
      (*(void (**)(const void *, uint64_t, double))(*(_QWORD *)v163 + 16))(v163, 3, v49);
      v50 = *((char *)a2 + 23);
      if (v50 >= 0)
        v51 = *((unsigned __int8 *)a2 + 23);
      else
        v51 = (size_t)a2[1];
      v52 = v51 + 4;
      if (v51 + 4 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v53 = v163;
      if (v52 >= 0x17)
      {
        v139 = v163;
        v55 = v37;
        v56 = v47;
        v57 = a5;
        v58 = a6;
        v59 = a7;
        v60 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v52 | 7) != 0x17)
          v60 = v52 | 7;
        v61 = v60 + 1;
        p_dst = (std::string *)operator new(v60 + 1);
        __dst.__r_.__value_.__l.__size_ = v51 + 4;
        __dst.__r_.__value_.__r.__words[2] = v61 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        a7 = v59;
        a6 = v58;
        a5 = v57;
        v47 = v56;
        v37 = v55;
        v53 = v139;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        p_dst = &__dst;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v51 + 4;
        if (!v51)
          goto LABEL_79;
      }
      if (v50 >= 0)
        v62 = a2;
      else
        v62 = *a2;
      memmove(p_dst, v62, v51);
LABEL_79:
      strcpy((char *)p_dst + v51, "__Op");
      v63 = (*a4)++;
      std::to_string(&v158, v63);
      if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v64 = &v158;
      else
        v64 = (std::string *)v158.__r_.__value_.__r.__words[0];
      if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v158.__r_.__value_.__r.__words[2]);
      else
        size = v158.__r_.__value_.__l.__size_;
      v66 = std::string::append(&__dst, (const std::string::value_type *)v64, size);
      v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
      v160.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v160.__r_.__value_.__l.__data_ = v67;
      v66->__r_.__value_.__l.__size_ = 0;
      v66->__r_.__value_.__r.__words[2] = 0;
      v66->__r_.__value_.__r.__words[0] = 0;
      v68 = std::string::append(&v160, "_Cast");
      v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
      v162 = v68->__r_.__value_.__r.__words[2];
      v161 = v69;
      v68->__r_.__value_.__l.__size_ = 0;
      v68->__r_.__value_.__r.__words[2] = 0;
      v68->__r_.__value_.__r.__words[0] = 0;
      (*(void (**)(const void *, __int128 *))(*(_QWORD *)v53 + 24))(v53, &v161);
      if (SHIBYTE(v162) < 0)
      {
        operator delete((void *)v161);
        if ((SHIBYTE(v160.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_87:
          if ((SHIBYTE(v158.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_88;
          goto LABEL_105;
        }
      }
      else if ((SHIBYTE(v160.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_87;
      }
      operator delete(v160.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v158.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_88:
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_106;
        goto LABEL_89;
      }
LABEL_105:
      operator delete(v158.__r_.__value_.__l.__data_);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_106:
        operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_89:
      v70 = (char *)operator new(0x38uLL);
      *((_QWORD *)v70 + 1) = 0;
      v71 = (unint64_t *)(v70 + 8);
      *((_QWORD *)v70 + 2) = 0;
      *(_QWORD *)v70 = &unk_1E2DB5970;
      v72 = v47 + 24 * v145;
      v73 = v144 + 24 * v145;
      *(_OWORD *)(v70 + 40) = 0u;
      *(_OWORD *)(v70 + 24) = 0u;
      *(_QWORD *)&v161 = v70 + 24;
      *((_QWORD *)&v161 + 1) = v70;
      *((_DWORD *)v70 + 6) = 1;
      v74 = v163;
      v156 = v70 + 24;
      v157 = (std::__shared_weak_count *)v70;
      do
        v75 = __ldxr(v71);
      while (__stxr(v75 + 1, v71));
      E5RT::E5OperationBuilder::SetOperationAttributes<CastOpT>(v74, (uint64_t *)&v156);
      v76 = v157;
      if (v157)
      {
        v77 = (unint64_t *)&v157->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      v79 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(a7, v72);
      if (!v79)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v80 = v79[5];
      v81 = v79[6];
      v160.__r_.__value_.__r.__words[0] = v80;
      v160.__r_.__value_.__l.__size_ = v81;
      if (v81)
      {
        v82 = (unint64_t *)(v81 + 8);
        do
          v83 = __ldxr(v82);
        while (__stxr(v83 + 1, v82));
        v84 = v163;
        v154 = v80;
        v155 = (std::__shared_weak_count *)v81;
        do
          v85 = __ldxr(v82);
        while (__stxr(v85 + 1, v82));
      }
      else
      {
        v84 = v163;
        v154 = v80;
        v155 = 0;
      }
      (*(void (**)(const void *, uint64_t, std::string::size_type *))(*(_QWORD *)v84 + 32))(v84, v72, &v154);
      v86 = v155;
      if (!v155)
        goto LABEL_112;
      v87 = (unint64_t *)&v155->__shared_owners_;
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
        v89 = v160.__r_.__value_.__l.__size_;
        v153 = *(_OWORD *)&v160.__r_.__value_.__l.__data_;
        if (!v160.__r_.__value_.__l.__size_)
          goto LABEL_115;
      }
      else
      {
LABEL_112:
        v89 = v160.__r_.__value_.__l.__size_;
        v153 = *(_OWORD *)&v160.__r_.__value_.__l.__data_;
        if (!v160.__r_.__value_.__l.__size_)
          goto LABEL_115;
      }
      v90 = (unint64_t *)(v89 + 8);
      do
        v91 = __ldxr(v90);
      while (__stxr(v91 + 1, v90));
LABEL_115:
      (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a6 + 64))(a6, v72, &v153);
      v92 = (std::__shared_weak_count *)*((_QWORD *)&v153 + 1);
      if (*((_QWORD *)&v153 + 1))
      {
        v93 = (unint64_t *)(*((_QWORD *)&v153 + 1) + 8);
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
      v95 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(a7, v73);
      if (!v95)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v96 = v95[5];
      v97 = v95[6];
      __dst.__r_.__value_.__r.__words[0] = v96;
      __dst.__r_.__value_.__l.__size_ = v97;
      if (v97)
      {
        v98 = (unint64_t *)(v97 + 8);
        do
          v99 = __ldxr(v98);
        while (__stxr(v99 + 1, v98));
        v100 = v163;
        v151 = v96;
        v152 = (std::__shared_weak_count *)v97;
        do
          v101 = __ldxr(v98);
        while (__stxr(v101 + 1, v98));
      }
      else
      {
        v100 = v163;
        v151 = v96;
        v152 = 0;
      }
      (*(void (**)(const void *, uint64_t, std::string::size_type *))(*(_QWORD *)v100 + 40))(v100, v73, &v151);
      v102 = v152;
      if (!v152)
        goto LABEL_132;
      v103 = (unint64_t *)&v152->__shared_owners_;
      do
        v104 = __ldaxr(v103);
      while (__stlxr(v104 - 1, v103));
      if (!v104)
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
        v105 = __dst.__r_.__value_.__l.__size_;
        v150 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
        if (!__dst.__r_.__value_.__l.__size_)
          goto LABEL_135;
      }
      else
      {
LABEL_132:
        v105 = __dst.__r_.__value_.__l.__size_;
        v150 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
        if (!__dst.__r_.__value_.__l.__size_)
          goto LABEL_135;
      }
      v106 = (unint64_t *)(v105 + 8);
      do
        v107 = __ldxr(v106);
      while (__stxr(v107 + 1, v106));
LABEL_135:
      (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a6 + 64))(a6, v73, &v150);
      v108 = (std::__shared_weak_count *)*((_QWORD *)&v150 + 1);
      if (*((_QWORD *)&v150 + 1))
      {
        v109 = (unint64_t *)(*((_QWORD *)&v150 + 1) + 8);
        do
          v110 = __ldaxr(v109);
        while (__stlxr(v110 - 1, v109));
        if (!v110)
        {
          ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
          std::__shared_weak_count::__release_weak(v108);
        }
      }
      v111 = v163;
      v163 = 0;
      v148 = v111;
      E5RT::E5OperationBuilder::Finish(&v148, &v149);
      v112 = v149;
      v158.__r_.__value_.__r.__words[0] = v149;
      if (v149)
      {
        v113 = (std::__shared_weak_count *)operator new();
        v114 = v149;
        v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2CF8;
        v113->__shared_owners_ = 0;
        v113->__shared_weak_owners_ = 0;
        v113[1].__vftable = (std::__shared_weak_count_vtbl *)v114;
        v158.__r_.__value_.__l.__size_ = (std::string::size_type)v113;
        v115 = v148;
        v148 = 0;
        v149 = 0;
        if (!v115)
          goto LABEL_143;
LABEL_142:
        (*(void (**)(const void *))(*(_QWORD *)v115 + 8))(v115);
        goto LABEL_143;
      }
      *(_OWORD *)&v158.__r_.__value_.__l.__data_ = 0uLL;
      v113 = 0;
      v115 = v148;
      v148 = 0;
      v149 = 0;
      if (v115)
        goto LABEL_142;
LABEL_143:
      v146 = v112;
      v147 = v113;
      if (v113)
      {
        v116 = (unint64_t *)&v113->__shared_owners_;
        do
          v117 = __ldxr(v116);
        while (__stxr(v117 + 1, v116));
      }
      (*(void (**)(uint64_t, std::string::size_type *))(*(_QWORD *)a5 + 16))(a5, &v146);
      v29 = v141;
      v118 = v147;
      if (!v147)
        goto LABEL_150;
      v119 = (unint64_t *)&v147->__shared_owners_;
      do
        v120 = __ldaxr(v119);
      while (__stlxr(v120 - 1, v119));
      if (!v120)
      {
        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
        std::__shared_weak_count::__release_weak(v118);
        v121 = (std::__shared_weak_count *)v158.__r_.__value_.__l.__size_;
        if (!v158.__r_.__value_.__l.__size_)
          goto LABEL_162;
      }
      else
      {
LABEL_150:
        v121 = (std::__shared_weak_count *)v158.__r_.__value_.__l.__size_;
        if (!v158.__r_.__value_.__l.__size_)
          goto LABEL_162;
      }
      v122 = (unint64_t *)&v121->__shared_owners_;
      do
        v123 = __ldaxr(v122);
      while (__stlxr(v123 - 1, v122));
      if (!v123)
      {
        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
        std::__shared_weak_count::__release_weak(v121);
      }
LABEL_162:
      v124 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
      if (!__dst.__r_.__value_.__l.__size_)
        goto LABEL_166;
      v125 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
      do
        v126 = __ldaxr(v125);
      while (__stlxr(v126 - 1, v125));
      if (!v126)
      {
        ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
        std::__shared_weak_count::__release_weak(v124);
        v127 = (std::__shared_weak_count *)v160.__r_.__value_.__l.__size_;
        if (!v160.__r_.__value_.__l.__size_)
          goto LABEL_172;
      }
      else
      {
LABEL_166:
        v127 = (std::__shared_weak_count *)v160.__r_.__value_.__l.__size_;
        if (!v160.__r_.__value_.__l.__size_)
          goto LABEL_172;
      }
      v128 = (unint64_t *)&v127->__shared_owners_;
      do
        v129 = __ldaxr(v128);
      while (__stlxr(v129 - 1, v128));
      if (!v129)
      {
        ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
        std::__shared_weak_count::__release_weak(v127);
      }
LABEL_172:
      v130 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
      if (*((_QWORD *)&v161 + 1))
      {
        v131 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
        do
          v132 = __ldaxr(v131);
        while (__stlxr(v132 - 1, v131));
        if (!v132)
        {
          ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
          std::__shared_weak_count::__release_weak(v130);
          v46 = v163;
          v163 = 0;
          if (!v46)
            goto LABEL_64;
LABEL_63:
          (*(void (**)(const void *))(*(_QWORD *)v46 + 8))(v46);
          goto LABEL_64;
        }
      }
      v46 = v163;
      v163 = 0;
      if (v46)
        goto LABEL_63;
LABEL_64:
      v44 = v145 + 1;
      if (v145 + 1 == v140)
      {
        v22 = v165;
        if (!v165)
          goto LABEL_186;
LABEL_182:
        v134 = (unint64_t *)&v22->__shared_owners_;
        do
          v135 = __ldaxr(v134);
        while (__stlxr(v135 - 1, v134));
        if (!v135)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
        goto LABEL_186;
      }
    }
  }
  Espresso::espresso_os_log_subsystem(0, (const char *)a2);
  v133 = objc_claimAutoreleasedReturnValue();
  if (!os_log_type_enabled(v133, OS_LOG_TYPE_DEBUG))
  {

    if (!v22)
      goto LABEL_186;
    goto LABEL_182;
  }
  Espresso::AOT::Builder::BuildCastOps(v133);

  if (v22)
    goto LABEL_182;
LABEL_186:
  v136 = v167;
  if (v167)
  {
    v137 = (unint64_t *)&v167->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
}

void sub_1910CCD40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v44 - 120);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v44 - 104);
  _Unwind_Resume(a1);
}

void Espresso::AOT::Builder::BuildDevOp(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, _QWORD *a7, int a8)
{
  uint64_t v9;
  uint64_t v11;
  const void *v12;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  const Espresso::dev_op_params_t *v23;
  double v24;
  const void *v25;
  int v26;
  size_t v27;
  unint64_t v28;
  std::string *v29;
  double v30;
  int v31;
  size_t v32;
  unint64_t v33;
  std::string *p_dst;
  double v35;
  int v36;
  size_t v37;
  unint64_t v38;
  std::string *v39;
  double v40;
  int v41;
  size_t v42;
  unint64_t v43;
  std::string *v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  unint64_t v48;
  std::string *v49;
  std::string::size_type v50;
  std::string *v51;
  _QWORD *v52;
  __int128 v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  unint64_t *p_size;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _DWORD *v67;
  unint64_t v68;
  std::string *v69;
  std::string::size_type size;
  std::string *v71;
  __int128 v72;
  std::string *v73;
  __int128 v74;
  char *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  unint64_t v85;
  std::string *v86;
  std::string::size_type v87;
  std::string *v88;
  __int128 v89;
  std::string *v90;
  __int128 v91;
  char *v92;
  unint64_t *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  _DWORD *v97;
  unint64_t v98;
  std::string *v99;
  std::string::size_type v100;
  std::string *v101;
  __int128 v102;
  std::string *v103;
  __int128 v104;
  char *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t *v111;
  std::string *v112;
  std::string::size_type v113;
  char v114;
  std::string::size_type v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t *v120;
  int8x8_t v121;
  uint8x8_t v122;
  unint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  std::string::size_type v132;
  std::string::size_type v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::string::size_type v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  int8x8_t v149;
  uint8x8_t v150;
  unint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  std::string::size_type v160;
  std::string::size_type v161;
  unint64_t *v162;
  unint64_t v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::string::size_type v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::string::size_type v177;
  std::__shared_weak_count *v178;
  std::string::size_type v179;
  const void *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  int v192;
  _QWORD *v193;
  _QWORD *v194;
  uint64_t v195;
  std::string::size_type v196;
  std::__shared_weak_count *v197;
  const void *v198;
  __int128 v199;
  std::string::size_type v200;
  std::__shared_weak_count *v201;
  __int128 v202;
  std::string::size_type v203;
  std::__shared_weak_count *v204;
  char *v205;
  std::__shared_weak_count *v206;
  void *v207[2];
  char v208;
  char *v209;
  std::__shared_weak_count *v210;
  char *v211;
  std::__shared_weak_count *v212;
  std::string *v213;
  std::__shared_weak_count *v214;
  std::string v215;
  std::string v216;
  std::string __p;
  _DWORD v218[16];
  std::string v219[3];
  void *v220;
  std::__shared_weak_count *v221;
  std::string __dst;
  uint64_t v223;

  v223 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a1 + 32);
  if (a3 >= (*(_QWORD *)(a1 + 40) - v9) >> 4)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v11 = *(_QWORD *)(v9 + 16 * a3);
  v12 = *(const void **)(v11 + 64);
  if (!v12
  {
    v220 = 0;
    v221 = 0;
    Espresso::throw_exception_selector<Espresso::generic_error>("Unable to cast to dev_op kernel");
  }
  v20 = *(std::__shared_weak_count **)(v11 + 72);
  v220 = v19;
  v221 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  v23 = (const Espresso::dev_op_params_t *)(*(uint64_t (**)(void *))(*(_QWORD *)v19 + 320))(v19);
  Espresso::dev_op_params_t::dev_op_params_t((Espresso::dev_op_params_t *)v218, v23);
  LODWORD(__p.__r_.__value_.__l.__data_) = v218[0];
  v194 = a4;
  v195 = a5;
  v193 = (_QWORD *)a1;
  if (!is_cpu((int *)&__p))
  {
    LODWORD(__p.__r_.__value_.__l.__data_) = v218[0];
    if (is_gpu((int *)&__p))
    {
      v30 = E5RT::E5OperationBuilder::Create(8, &__p);
      v25 = (const void *)__p.__r_.__value_.__r.__words[0];
      (*(void (**)(std::string::size_type, uint64_t, double))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16))(__p.__r_.__value_.__r.__words[0], 8, v30);
      v31 = *(char *)(a2 + 23);
      if (v31 >= 0)
        v32 = *(unsigned __int8 *)(a2 + 23);
      else
        v32 = *(_QWORD *)(a2 + 8);
      v33 = v32 + 4;
      if (v32 + 4 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v33 >= 0x17)
      {
        v65 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v33 | 7) != 0x17)
          v65 = v33 | 7;
        v66 = v65 + 1;
        p_dst = (std::string *)operator new(v65 + 1);
        __dst.__r_.__value_.__l.__size_ = v32 + 4;
        __dst.__r_.__value_.__r.__words[2] = v66 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        p_dst = &__dst;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v32 + 4;
        if (!v32)
          goto LABEL_74;
      }
      if (v31 >= 0)
        v67 = (_DWORD *)a2;
      else
        v67 = *(_DWORD **)a2;
      memmove(p_dst, v67, v32);
LABEL_74:
      strcpy((char *)p_dst + v32, "__Op");
      v68 = (*v194)++;
      std::to_string(&v215, v68);
      if ((v215.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v69 = &v215;
      else
        v69 = (std::string *)v215.__r_.__value_.__r.__words[0];
      if ((v215.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v215.__r_.__value_.__r.__words[2]);
      else
        size = v215.__r_.__value_.__l.__size_;
      v71 = std::string::append(&__dst, (const std::string::value_type *)v69, size);
      a5 = v195;
      v52 = v193;
      v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
      v216.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v216.__r_.__value_.__l.__data_ = v72;
      v71->__r_.__value_.__l.__size_ = 0;
      v71->__r_.__value_.__r.__words[2] = 0;
      v71->__r_.__value_.__r.__words[0] = 0;
      v73 = std::string::append(&v216, "_GpuInference");
      v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v74;
      v73->__r_.__value_.__l.__size_ = 0;
      v73->__r_.__value_.__r.__words[2] = 0;
      v73->__r_.__value_.__r.__words[0] = 0;
      (*(void (**)(const void *, std::string *))(*(_QWORD *)v25 + 24))(v25, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v216.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_82:
          if ((SHIBYTE(v215.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_83;
          goto LABEL_150;
        }
      }
      else if ((SHIBYTE(v216.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_82;
      }
      operator delete(v216.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v215.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_83:
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_84;
LABEL_151:
        operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_84:
        v75 = (char *)operator new(0x70uLL);
        *((_QWORD *)v75 + 1) = 0;
        v76 = (unint64_t *)(v75 + 8);
        *((_QWORD *)v75 + 2) = 0;
        *(_QWORD *)v75 = &unk_1E2DB57B0;
        *(_OWORD *)(v75 + 24) = 0u;
        *(_OWORD *)(v75 + 40) = 0u;
        *(_OWORD *)(v75 + 56) = 0u;
        *(_OWORD *)(v75 + 72) = 0u;
        *(_OWORD *)(v75 + 88) = 0u;
        *((_QWORD *)v75 + 13) = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v75 + 24);
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v75;
        std::string::operator=((std::string *)v75 + 1, v219);
        MEMORY[0x19401C808](v75 + 48, "main");
        *((_QWORD *)v75 + 9) = 0;
        v209 = v75 + 24;
        v210 = (std::__shared_weak_count *)v75;
        do
          v77 = __ldxr(v76);
        while (__stxr(v77 + 1, v76));
        E5RT::E5OperationBuilder::SetOperationAttributes<MpsGraphInferenceOpT>(v25, (uint64_t *)&v209);
        v78 = v210;
        if (v210)
        {
          v79 = (unint64_t *)&v210->__shared_owners_;
          do
            v80 = __ldaxr(v79);
          while (__stlxr(v80 - 1, v79));
          if (!v80)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
        }
        v62 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (!__p.__r_.__value_.__l.__size_)
          goto LABEL_182;
        v81 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v64 = __ldaxr(v81);
        while (__stlxr(v64 - 1, v81));
        goto LABEL_180;
      }
LABEL_150:
      operator delete(v215.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_84;
      goto LABEL_151;
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = v218[0];
    if (!is_ane(&__p))
      Espresso::throw_exception_selector<Espresso::generic_error>("Unsupported dev_op platform");
    v35 = E5RT::E5OperationBuilder::Create(1, &__p);
    v192 = a8;
    v25 = (const void *)__p.__r_.__value_.__r.__words[0];
    (*(void (**)(std::string::size_type, uint64_t, double))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16))(__p.__r_.__value_.__r.__words[0], 1, v35);
    v36 = *(char *)(a2 + 23);
    if (v36 >= 0)
      v37 = *(unsigned __int8 *)(a2 + 23);
    else
      v37 = *(_QWORD *)(a2 + 8);
    v38 = v37 + 4;
    if (v37 + 4 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v38 >= 0x17)
    {
      v82 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17)
        v82 = v38 | 7;
      v83 = v82 + 1;
      v39 = (std::string *)operator new(v82 + 1);
      __dst.__r_.__value_.__l.__size_ = v37 + 4;
      __dst.__r_.__value_.__r.__words[2] = v83 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
      a5 = v195;
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      v39 = &__dst;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v37 + 4;
      if (!v37)
        goto LABEL_102;
    }
    if (v36 >= 0)
      v84 = (_DWORD *)a2;
    else
      v84 = *(_DWORD **)a2;
    memmove(v39, v84, v37);
LABEL_102:
    strcpy((char *)v39 + v37, "__Op");
    v85 = (*v194)++;
    std::to_string(&v215, v85);
    if ((v215.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v86 = &v215;
    else
      v86 = (std::string *)v215.__r_.__value_.__r.__words[0];
    if ((v215.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v87 = HIBYTE(v215.__r_.__value_.__r.__words[2]);
    else
      v87 = v215.__r_.__value_.__l.__size_;
    v88 = std::string::append(&__dst, (const std::string::value_type *)v86, v87);
    v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
    v216.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v216.__r_.__value_.__l.__data_ = v89;
    v88->__r_.__value_.__l.__size_ = 0;
    v88->__r_.__value_.__r.__words[2] = 0;
    v88->__r_.__value_.__r.__words[0] = 0;
    v90 = std::string::append(&v216, "_AneInference");
    v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v91;
    v90->__r_.__value_.__l.__size_ = 0;
    v90->__r_.__value_.__r.__words[2] = 0;
    v90->__r_.__value_.__r.__words[0] = 0;
    (*(void (**)(const void *, std::string *))(*(_QWORD *)v25 + 24))(v25, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v216.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_110:
        if ((SHIBYTE(v215.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_111;
        goto LABEL_154;
      }
    }
    else if ((SHIBYTE(v216.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_110;
    }
    operator delete(v216.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v215.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_111:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_112;
LABEL_155:
      operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_112:
      v92 = (char *)operator new(0x68uLL);
      *((_QWORD *)v92 + 1) = 0;
      v93 = (unint64_t *)(v92 + 8);
      *((_QWORD *)v92 + 2) = 0;
      *(_QWORD *)v92 = &unk_1E2DB5580;
      *(_OWORD *)(v92 + 24) = 0u;
      *(_OWORD *)(v92 + 40) = 0u;
      *(_OWORD *)(v92 + 56) = 0u;
      *(_OWORD *)(v92 + 72) = 0u;
      *(_OWORD *)(v92 + 88) = 0u;
      v216.__r_.__value_.__r.__words[0] = (std::string::size_type)(v92 + 24);
      v216.__r_.__value_.__l.__size_ = (std::string::size_type)v92;
      std::string::operator=((std::string *)v92 + 1, v219);
      v94 = *(char *)(a2 + 23);
      if (v94 < 0)
      {
        if (*(_QWORD *)(a2 + 8) == 4 && **(_DWORD **)a2 == 1852399981)
          goto LABEL_169;
      }
      else if (v94 == 4 && *(_DWORD *)a2 == 1852399981)
      {
LABEL_169:
        MEMORY[0x19401C808](v92 + 48, "0@default");
        goto LABEL_170;
      }
      v208 = 5;
      strcpy((char *)v207, "main_");
      Espresso::AOT::E5FuncToConfigName(a2, v192, (uint64_t)v207, &__p);
      v112 = std::string::insert(&__p, 0, "0@");
      v113 = v112->__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = v112->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v112->__r_.__value_.__r.__words[1] + 7);
      v114 = HIBYTE(v112->__r_.__value_.__r.__words[2]);
      v112->__r_.__value_.__l.__size_ = 0;
      v112->__r_.__value_.__r.__words[2] = 0;
      v112->__r_.__value_.__r.__words[0] = 0;
      if (v92[71] < 0)
        operator delete(*((void **)v92 + 6));
      v115 = __dst.__r_.__value_.__r.__words[0];
      *((_QWORD *)v92 + 6) = v113;
      *((_QWORD *)v92 + 7) = v115;
      *(_QWORD *)(v92 + 63) = *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 7);
      v92[71] = v114;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        a5 = v195;
        if ((v208 & 0x80000000) == 0)
          goto LABEL_170;
      }
      else
      {
        a5 = v195;
        if ((v208 & 0x80000000) == 0)
          goto LABEL_170;
      }
      operator delete(v207[0]);
LABEL_170:
      *((_DWORD *)v92 + 18) = 0;
      v205 = v92 + 24;
      v206 = (std::__shared_weak_count *)v92;
      do
        v116 = __ldxr(v93);
      while (__stxr(v116 + 1, v93));
      E5RT::E5OperationBuilder::SetOperationAttributes<AneInferenceOpT>(v25, (uint64_t *)&v205);
      v52 = v193;
      v117 = v206;
      if (v206)
      {
        v118 = (unint64_t *)&v206->__shared_owners_;
        do
          v119 = __ldaxr(v118);
        while (__stlxr(v119 - 1, v118));
        if (!v119)
        {
          ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
          std::__shared_weak_count::__release_weak(v117);
        }
      }
      v62 = (std::__shared_weak_count *)v216.__r_.__value_.__l.__size_;
      if (!v216.__r_.__value_.__l.__size_)
        goto LABEL_182;
      v120 = (unint64_t *)(v216.__r_.__value_.__l.__size_ + 8);
      do
        v64 = __ldaxr(v120);
      while (__stlxr(v64 - 1, v120));
      goto LABEL_180;
    }
LABEL_154:
    operator delete(v215.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_112;
    goto LABEL_155;
  }
  if (!*(_BYTE *)(a1 + 1409))
  {
    v40 = E5RT::E5OperationBuilder::Create(2, &__p);
    v25 = (const void *)__p.__r_.__value_.__r.__words[0];
    (*(void (**)(std::string::size_type, uint64_t, double))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16))(__p.__r_.__value_.__r.__words[0], 2, v40);
    v41 = *(char *)(a2 + 23);
    if (v41 >= 0)
      v42 = *(unsigned __int8 *)(a2 + 23);
    else
      v42 = *(_QWORD *)(a2 + 8);
    v43 = v42 + 4;
    if (v42 + 4 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v43 >= 0x17)
    {
      v95 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v43 | 7) != 0x17)
        v95 = v43 | 7;
      v96 = v95 + 1;
      v44 = (std::string *)operator new(v95 + 1);
      __dst.__r_.__value_.__l.__size_ = v42 + 4;
      __dst.__r_.__value_.__r.__words[2] = v96 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      v44 = &__dst;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v42 + 4;
      if (!v42)
        goto LABEL_127;
    }
    if (v41 >= 0)
      v97 = (_DWORD *)a2;
    else
      v97 = *(_DWORD **)a2;
    memmove(v44, v97, v42);
LABEL_127:
    strcpy((char *)v44 + v42, "__Op");
    v98 = (*v194)++;
    std::to_string(&v215, v98);
    if ((v215.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v99 = &v215;
    else
      v99 = (std::string *)v215.__r_.__value_.__r.__words[0];
    if ((v215.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v100 = HIBYTE(v215.__r_.__value_.__r.__words[2]);
    else
      v100 = v215.__r_.__value_.__l.__size_;
    v101 = std::string::append(&__dst, (const std::string::value_type *)v99, v100);
    a5 = v195;
    v52 = v193;
    v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
    v216.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v216.__r_.__value_.__l.__data_ = v102;
    v101->__r_.__value_.__l.__size_ = 0;
    v101->__r_.__value_.__r.__words[2] = 0;
    v101->__r_.__value_.__r.__words[0] = 0;
    v103 = std::string::append(&v216, "_CpuInference");
    v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v104;
    v103->__r_.__value_.__l.__size_ = 0;
    v103->__r_.__value_.__r.__words[2] = 0;
    v103->__r_.__value_.__r.__words[0] = 0;
    (*(void (**)(const void *, std::string *))(*(_QWORD *)v25 + 24))(v25, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v216.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_135:
        if ((SHIBYTE(v215.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_136;
        goto LABEL_167;
      }
    }
    else if ((SHIBYTE(v216.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_135;
    }
    operator delete(v216.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v215.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_136:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_137;
LABEL_168:
      operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_137:
      v105 = (char *)operator new(0x48uLL);
      *((_QWORD *)v105 + 1) = 0;
      v106 = (unint64_t *)(v105 + 8);
      *((_QWORD *)v105 + 2) = 0;
      *(_QWORD *)v105 = &unk_1E2DB55B8;
      *(_OWORD *)(v105 + 24) = 0u;
      *(_OWORD *)(v105 + 40) = 0u;
      *(_OWORD *)(v105 + 56) = 0u;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v105 + 24);
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v105;
      std::string::operator=((std::string *)v105 + 1, v219);
      v211 = v105 + 24;
      v212 = (std::__shared_weak_count *)v105;
      do
        v107 = __ldxr(v106);
      while (__stxr(v107 + 1, v106));
      E5RT::E5OperationBuilder::SetOperationAttributes<CpuInferenceOpT>(v25, (uint64_t *)&v211);
      v108 = v212;
      if (v212)
      {
        v109 = (unint64_t *)&v212->__shared_owners_;
        do
          v110 = __ldaxr(v109);
        while (__stlxr(v110 - 1, v109));
        if (!v110)
        {
          ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
          std::__shared_weak_count::__release_weak(v108);
        }
      }
      v62 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (!__p.__r_.__value_.__l.__size_)
        goto LABEL_182;
      v111 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v64 = __ldaxr(v111);
      while (__stlxr(v64 - 1, v111));
      goto LABEL_180;
    }
LABEL_167:
    operator delete(v215.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_137;
    goto LABEL_168;
  }
  v24 = E5RT::E5OperationBuilder::Create(7, &__p);
  v25 = (const void *)__p.__r_.__value_.__r.__words[0];
  (*(void (**)(std::string::size_type, uint64_t, double))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16))(__p.__r_.__value_.__r.__words[0], 7, v24);
  v26 = *(char *)(a2 + 23);
  if (v26 >= 0)
    v27 = *(unsigned __int8 *)(a2 + 23);
  else
    v27 = *(_QWORD *)(a2 + 8);
  v28 = v27 + 4;
  if (v27 + 4 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v28 >= 0x17)
  {
    v45 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v45 = v28 | 7;
    v46 = v45 + 1;
    v29 = (std::string *)operator new(v45 + 1);
    __dst.__r_.__value_.__l.__size_ = v27 + 4;
    __dst.__r_.__value_.__r.__words[2] = v46 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    v29 = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v27 + 4;
    if (!v27)
      goto LABEL_46;
  }
  if (v26 >= 0)
    v47 = (_DWORD *)a2;
  else
    v47 = *(_DWORD **)a2;
  memmove(v29, v47, v27);
LABEL_46:
  strcpy((char *)v29 + v27, "__Op");
  v48 = (*v194)++;
  std::to_string(&v215, v48);
  if ((v215.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v49 = &v215;
  else
    v49 = (std::string *)v215.__r_.__value_.__r.__words[0];
  if ((v215.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v50 = HIBYTE(v215.__r_.__value_.__r.__words[2]);
  else
    v50 = v215.__r_.__value_.__l.__size_;
  v51 = std::string::append(&__dst, (const std::string::value_type *)v49, v50);
  a5 = v195;
  v52 = v193;
  v53 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
  v216.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v216.__r_.__value_.__l.__data_ = v53;
  v51->__r_.__value_.__l.__size_ = 0;
  v51->__r_.__value_.__r.__words[2] = 0;
  v51->__r_.__value_.__r.__words[0] = 0;
  v54 = std::string::append(&v216, "_MlcCpuInference");
  v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(const void *, std::string *))(*(_QWORD *)v25 + 24))(v25, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v216.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_54:
      if ((SHIBYTE(v215.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_55;
LABEL_118:
      operator delete(v215.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_56;
      goto LABEL_119;
    }
  }
  else if ((SHIBYTE(v216.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_54;
  }
  operator delete(v216.__r_.__value_.__l.__data_);
  if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_118;
LABEL_55:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_56;
LABEL_119:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_56:
  v56 = (std::string *)operator new(0x30uLL);
  v56->__r_.__value_.__l.__size_ = 0;
  p_size = &v56->__r_.__value_.__l.__size_;
  v56->__r_.__value_.__r.__words[2] = 0;
  v56->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E2DB56D0;
  v56[1].__r_.__value_.__r.__words[0] = 0;
  v56[1].__r_.__value_.__l.__size_ = 0;
  v56[1].__r_.__value_.__r.__words[2] = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v56[1];
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v56;
  std::string::operator=(v56 + 1, v219);
  v213 = v56 + 1;
  v214 = (std::__shared_weak_count *)v56;
  do
    v58 = __ldxr(p_size);
  while (__stxr(v58 + 1, p_size));
  E5RT::E5OperationBuilder::SetOperationAttributes<MlcCpuInferenceOpT>(v25, (uint64_t *)&v213);
  v59 = v214;
  if (v214)
  {
    v60 = (unint64_t *)&v214->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v62 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (!__p.__r_.__value_.__l.__size_)
    goto LABEL_182;
  v63 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
  do
    v64 = __ldaxr(v63);
  while (__stlxr(v64 - 1, v63));
LABEL_180:
  if (!v64)
  {
    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
    std::__shared_weak_count::__release_weak(v62);
  }
LABEL_182:
  v121 = (int8x8_t)v52[8];
  if (!*(_QWORD *)&v121)
    goto LABEL_308;
  v122 = (uint8x8_t)vcnt_s8(v121);
  v122.i16[0] = vaddlv_u8(v122);
  if (v122.u32[0] > 1uLL)
  {
    v123 = a3;
    if (*(_QWORD *)&v121 <= a3)
      v123 = a3 % *(_QWORD *)&v121;
  }
  else
  {
    v123 = (*(_QWORD *)&v121 - 1) & a3;
  }
  v124 = *(_QWORD **)(v52[7] + 8 * v123);
  if (!v124 || (v125 = (_QWORD *)*v124) == 0)
LABEL_308:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (v122.u32[0] < 2uLL)
  {
    v126 = *(_QWORD *)&v121 - 1;
    while (1)
    {
      v128 = v125[1];
      if (v128 == a3)
      {
        if (v125[2] == a3)
          goto LABEL_202;
      }
      else if ((v128 & v126) != v123)
      {
        goto LABEL_308;
      }
      v125 = (_QWORD *)*v125;
      if (!v125)
        goto LABEL_308;
    }
  }
  while (1)
  {
    v127 = v125[1];
    if (v127 == a3)
      break;
    if (v127 >= *(_QWORD *)&v121)
      v127 %= *(_QWORD *)&v121;
    if (v127 != v123)
      goto LABEL_308;
LABEL_192:
    v125 = (_QWORD *)*v125;
    if (!v125)
      goto LABEL_308;
  }
  if (v125[2] != a3)
    goto LABEL_192;
LABEL_202:
  v129 = v125[3];
  v130 = v125[4];
  while (v129 != v130)
  {
    v131 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(a7, v129);
    if (!v131)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v132 = v131[5];
    v133 = v131[6];
    __p.__r_.__value_.__r.__words[0] = v132;
    __p.__r_.__value_.__l.__size_ = v133;
    if (v133)
    {
      v134 = (unint64_t *)(v133 + 8);
      do
        v135 = __ldxr(v134);
      while (__stxr(v135 + 1, v134));
      v203 = v132;
      v204 = (std::__shared_weak_count *)v133;
      do
        v136 = __ldxr(v134);
      while (__stxr(v136 + 1, v134));
    }
    else
    {
      v203 = v132;
      v204 = 0;
    }
    (*(void (**)(const void *, uint64_t, std::string::size_type *))(*(_QWORD *)v25 + 32))(v25, v129, &v203);
    v137 = v204;
    if (!v204)
      goto LABEL_217;
    v138 = (unint64_t *)&v204->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
      v140 = __p.__r_.__value_.__l.__size_;
      v202 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if (!__p.__r_.__value_.__l.__size_)
        goto LABEL_220;
    }
    else
    {
LABEL_217:
      v140 = __p.__r_.__value_.__l.__size_;
      v202 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if (!__p.__r_.__value_.__l.__size_)
        goto LABEL_220;
    }
    v141 = (unint64_t *)(v140 + 8);
    do
      v142 = __ldxr(v141);
    while (__stxr(v142 + 1, v141));
LABEL_220:
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a6 + 64))(a6, v129, &v202);
    v143 = (std::__shared_weak_count *)*((_QWORD *)&v202 + 1);
    if (!*((_QWORD *)&v202 + 1))
      goto LABEL_224;
    v144 = (unint64_t *)(*((_QWORD *)&v202 + 1) + 8);
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
      v146 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (!__p.__r_.__value_.__l.__size_)
        goto LABEL_203;
    }
    else
    {
LABEL_224:
      v146 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (!__p.__r_.__value_.__l.__size_)
        goto LABEL_203;
    }
    v147 = (unint64_t *)&v146->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
LABEL_203:
    v129 += 24;
  }
  v149 = (int8x8_t)v52[13];
  if (!*(_QWORD *)&v149)
    goto LABEL_309;
  v150 = (uint8x8_t)vcnt_s8(v149);
  v150.i16[0] = vaddlv_u8(v150);
  if (v150.u32[0] > 1uLL)
  {
    v151 = a3;
    if (*(_QWORD *)&v149 <= a3)
      v151 = a3 % *(_QWORD *)&v149;
  }
  else
  {
    v151 = (*(_QWORD *)&v149 - 1) & a3;
  }
  v152 = *(_QWORD **)(v52[12] + 8 * v151);
  if (!v152 || (v153 = (_QWORD *)*v152) == 0)
LABEL_309:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (v150.u32[0] < 2uLL)
  {
    v154 = *(_QWORD *)&v149 - 1;
    while (1)
    {
      v156 = v153[1];
      if (v156 == a3)
      {
        if (v153[2] == a3)
          goto LABEL_253;
      }
      else if ((v156 & v154) != v151)
      {
        goto LABEL_309;
      }
      v153 = (_QWORD *)*v153;
      if (!v153)
        goto LABEL_309;
    }
  }
  while (2)
  {
    v155 = v153[1];
    if (v155 != a3)
    {
      if (v155 >= *(_QWORD *)&v149)
        v155 %= *(_QWORD *)&v149;
      if (v155 != v151)
        goto LABEL_309;
      goto LABEL_243;
    }
    if (v153[2] != a3)
    {
LABEL_243:
      v153 = (_QWORD *)*v153;
      if (!v153)
        goto LABEL_309;
      continue;
    }
    break;
  }
LABEL_253:
  v157 = v153[3];
  v158 = v153[4];
  while (v157 != v158)
  {
    v159 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(a7, v157);
    if (!v159)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v160 = v159[5];
    v161 = v159[6];
    __p.__r_.__value_.__r.__words[0] = v160;
    __p.__r_.__value_.__l.__size_ = v161;
    if (v161)
    {
      v162 = (unint64_t *)(v161 + 8);
      do
        v163 = __ldxr(v162);
      while (__stxr(v163 + 1, v162));
      v200 = v160;
      v201 = (std::__shared_weak_count *)v161;
      do
        v164 = __ldxr(v162);
      while (__stxr(v164 + 1, v162));
    }
    else
    {
      v200 = v160;
      v201 = 0;
    }
    (*(void (**)(const void *, uint64_t, std::string::size_type *))(*(_QWORD *)v25 + 40))(v25, v157, &v200);
    v165 = v201;
    if (!v201)
      goto LABEL_268;
    v166 = (unint64_t *)&v201->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
      v168 = __p.__r_.__value_.__l.__size_;
      v199 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if (!__p.__r_.__value_.__l.__size_)
        goto LABEL_271;
    }
    else
    {
LABEL_268:
      v168 = __p.__r_.__value_.__l.__size_;
      v199 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if (!__p.__r_.__value_.__l.__size_)
        goto LABEL_271;
    }
    v169 = (unint64_t *)(v168 + 8);
    do
      v170 = __ldxr(v169);
    while (__stxr(v170 + 1, v169));
LABEL_271:
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a6 + 64))(a6, v157, &v199);
    v171 = (std::__shared_weak_count *)*((_QWORD *)&v199 + 1);
    if (!*((_QWORD *)&v199 + 1))
      goto LABEL_275;
    v172 = (unint64_t *)(*((_QWORD *)&v199 + 1) + 8);
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
      v174 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (!__p.__r_.__value_.__l.__size_)
        goto LABEL_254;
    }
    else
    {
LABEL_275:
      v174 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (!__p.__r_.__value_.__l.__size_)
        goto LABEL_254;
    }
    v175 = (unint64_t *)&v174->__shared_owners_;
    do
      v176 = __ldaxr(v175);
    while (__stlxr(v176 - 1, v175));
    if (!v176)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
LABEL_254:
    v157 += 24;
  }
  v198 = v25;
  E5RT::E5OperationBuilder::Finish(&v198, &v216);
  v177 = v216.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = v216.__r_.__value_.__r.__words[0];
  if (v216.__r_.__value_.__r.__words[0])
  {
    v178 = (std::__shared_weak_count *)operator new();
    v179 = v216.__r_.__value_.__r.__words[0];
    v178->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2CF8;
    v178->__shared_owners_ = 0;
    v178->__shared_weak_owners_ = 0;
    v178[1].__vftable = (std::__shared_weak_count_vtbl *)v179;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v178;
    v216.__r_.__value_.__r.__words[0] = 0;
    v180 = v198;
    v198 = 0;
    if (v180)
      goto LABEL_286;
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    v178 = 0;
    v216.__r_.__value_.__r.__words[0] = 0;
    v180 = v198;
    v198 = 0;
    if (v180)
LABEL_286:
      (*(void (**)(const void *))(*(_QWORD *)v180 + 8))(v180);
  }
  v196 = v177;
  v197 = v178;
  if (v178)
  {
    v181 = (unint64_t *)&v178->__shared_owners_;
    do
      v182 = __ldxr(v181);
    while (__stxr(v182 + 1, v181));
  }
  (*(void (**)(uint64_t, std::string::size_type *))(*(_QWORD *)a5 + 16))(a5, &v196);
  v183 = v197;
  if (v197)
  {
    v184 = (unint64_t *)&v197->__shared_owners_;
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
    }
  }
  v186 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v187 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
      std::__shared_weak_count::__release_weak(v186);
    }
  }
  Espresso::dev_op_params_t::~dev_op_params_t((Espresso::dev_op_params_t *)v218);
  v189 = v221;
  if (v221)
  {
    v190 = (unint64_t *)&v221->__shared_owners_;
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
  }
}

void sub_1910CE31C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,char a58)
{
  uint64_t v58;
  uint64_t v59;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  Espresso::dev_op_params_t::~dev_op_params_t((Espresso::dev_op_params_t *)&a58);
  (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v59 - 144);
  _Unwind_Resume(a1);
}

void Espresso::AOT::Builder::BuildQuantizeOp(_QWORD *a1, const void **a2, unint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v8;
  uint64_t v10;
  const void *v11;
  void *v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  double v22;
  int v23;
  size_t v24;
  unint64_t v25;
  const void *v26;
  std::string *p_dst;
  uint64_t v28;
  uint64_t v29;
  const void *v30;
  unint64_t v31;
  std::string *v32;
  std::string::size_type size;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  int v38;
  char *v39;
  unint64_t *v40;
  _DWORD *v41;
  const void *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  int8x8_t v47;
  uint8x8_t v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int8x8_t v55;
  uint8x8_t v56;
  unint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  std::string::size_type v65;
  std::string::size_type v66;
  unint64_t *v67;
  unint64_t v68;
  const void *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  std::string::size_type v84;
  std::string::size_type v85;
  unint64_t *v86;
  unint64_t v87;
  const void *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  const void *v101;
  std::string::size_type v102;
  std::__shared_weak_count *v103;
  std::string::size_type v104;
  const void *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  const void *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t v124;
  std::string::size_type v125;
  std::__shared_weak_count *v126;
  const void *v127;
  __int128 v128;
  std::string::size_type v129;
  std::__shared_weak_count *v130;
  __int128 v131;
  std::string::size_type v132;
  std::__shared_weak_count *v133;
  char *v134;
  std::__shared_weak_count *v135;
  std::string v136;
  std::string __dst;
  std::string v138;
  __int128 v139;
  std::string::size_type v140;
  const void *v141;
  void *v142;
  std::__shared_weak_count *v143;

  v8 = a1[4];
  if (a3 >= (a1[5] - v8) >> 4)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v10 = *(_QWORD *)(v8 + 16 * a3);
  v11 = *(const void **)(v10 + 64);
  if (!v11
  {
    v142 = 0;
    v143 = 0;
    Espresso::throw_exception_selector<Espresso::generic_error>("Unable to cast to static quantize kernel");
  }
  v18 = v17;
  v19 = *(std::__shared_weak_count **)(v10 + 72);
  v142 = v17;
  v143 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  v22 = E5RT::E5OperationBuilder::Create(4, &v141);
  v121 = a5;
  (*(void (**)(const void *, uint64_t, double))(*(_QWORD *)v141 + 16))(v141, 4, v22);
  v122 = a1;
  v123 = a7;
  v124 = a6;
  v23 = *((char *)a2 + 23);
  if (v23 >= 0)
    v24 = *((unsigned __int8 *)a2 + 23);
  else
    v24 = (size_t)a2[1];
  v25 = v24 + 4;
  if (v24 + 4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v26 = v141;
  if (v25 >= 0x17)
  {
    v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v28 = v25 | 7;
    v29 = v28 + 1;
    p_dst = (std::string *)operator new(v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v24 + 4;
    __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v24 + 4;
    if (!v24)
      goto LABEL_21;
  }
  if (v23 >= 0)
    v30 = a2;
  else
    v30 = *a2;
  memmove(p_dst, v30, v24);
LABEL_21:
  strcpy((char *)p_dst + v24, "__Op");
  v31 = (*a4)++;
  std::to_string(&v136, v31);
  if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v32 = &v136;
  else
    v32 = (std::string *)v136.__r_.__value_.__r.__words[0];
  if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v136.__r_.__value_.__r.__words[2]);
  else
    size = v136.__r_.__value_.__l.__size_;
  v34 = std::string::append(&__dst, (const std::string::value_type *)v32, size);
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v138.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  v36 = std::string::append(&v138, "_Quantize");
  v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v140 = v36->__r_.__value_.__r.__words[2];
  v139 = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(const void *, __int128 *))(*(_QWORD *)v26 + 24))(v26, &v139);
  if (SHIBYTE(v140) < 0)
  {
    operator delete((void *)v139);
    if ((SHIBYTE(v138.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_29:
      if ((SHIBYTE(v136.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_30;
LABEL_89:
      operator delete(v136.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_31;
      goto LABEL_90;
    }
  }
  else if ((SHIBYTE(v138.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_29;
  }
  operator delete(v138.__r_.__value_.__l.__data_);
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_89;
LABEL_30:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_31;
LABEL_90:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_31:
  v38 = *(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v18 + 320))(v18) + 4);
  v39 = (char *)operator new(0x38uLL);
  *((_QWORD *)v39 + 1) = 0;
  v40 = (unint64_t *)(v39 + 8);
  *((_QWORD *)v39 + 2) = 0;
  *(_QWORD *)v39 = &unk_1E2DB59A8;
  *(_OWORD *)(v39 + 24) = 0u;
  *(_OWORD *)(v39 + 40) = 0u;
  *(_QWORD *)&v139 = v39 + 24;
  *((_QWORD *)&v139 + 1) = v39;
  v41 = operator new(4uLL);
  *v41 = v38;
  *((_QWORD *)v39 + 5) = v41 + 1;
  *((_QWORD *)v39 + 6) = v41 + 1;
  *((_QWORD *)v39 + 4) = v41;
  *((_DWORD *)v39 + 6) = 1;
  v42 = v141;
  v134 = v39 + 24;
  v135 = (std::__shared_weak_count *)v39;
  do
    v43 = __ldxr(v40);
  while (__stxr(v43 + 1, v40));
  E5RT::E5OperationBuilder::SetOperationAttributes<QuantOpT>(v42, (uint64_t *)&v134);
  v44 = v135;
  if (v135)
  {
    v45 = (unint64_t *)&v135->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = (int8x8_t)v122[8];
  if (!*(_QWORD *)&v47)
    goto LABEL_167;
  v48 = (uint8x8_t)vcnt_s8(v47);
  v48.i16[0] = vaddlv_u8(v48);
  if (v48.u32[0] > 1uLL)
  {
    v49 = a3;
    if (*(_QWORD *)&v47 <= a3)
      v49 = a3 % *(_QWORD *)&v47;
  }
  else
  {
    v49 = (*(_QWORD *)&v47 - 1) & a3;
  }
  v50 = *(_QWORD **)(v122[7] + 8 * v49);
  if (!v50 || (v51 = (_QWORD *)*v50) == 0)
LABEL_167:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (v48.u32[0] < 2uLL)
  {
    v52 = *(_QWORD *)&v47 - 1;
    while (1)
    {
      v54 = v51[1];
      if (v54 == a3)
      {
        if (v51[2] == a3)
          goto LABEL_58;
      }
      else if ((v54 & v52) != v49)
      {
        goto LABEL_167;
      }
      v51 = (_QWORD *)*v51;
      if (!v51)
        goto LABEL_167;
    }
  }
  while (1)
  {
    v53 = v51[1];
    if (v53 == a3)
      break;
    if (v53 >= *(_QWORD *)&v47)
      v53 %= *(_QWORD *)&v47;
    if (v53 != v49)
      goto LABEL_167;
LABEL_48:
    v51 = (_QWORD *)*v51;
    if (!v51)
      goto LABEL_167;
  }
  if (v51[2] != a3)
    goto LABEL_48;
LABEL_58:
  v55 = (int8x8_t)v122[13];
  if (!*(_QWORD *)&v55)
    goto LABEL_168;
  v56 = (uint8x8_t)vcnt_s8(v55);
  v56.i16[0] = vaddlv_u8(v56);
  if (v56.u32[0] > 1uLL)
  {
    v57 = a3;
    if (*(_QWORD *)&v55 <= a3)
      v57 = a3 % *(_QWORD *)&v55;
  }
  else
  {
    v57 = (*(_QWORD *)&v55 - 1) & a3;
  }
  v58 = *(_QWORD **)(v122[12] + 8 * v57);
  if (!v58 || (v59 = (_QWORD *)*v58) == 0)
LABEL_168:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (v56.u32[0] < 2uLL)
  {
    v60 = *(_QWORD *)&v55 - 1;
    while (1)
    {
      v62 = v59[1];
      if (v62 == a3)
      {
        if (v59[2] == a3)
          goto LABEL_78;
      }
      else if ((v62 & v60) != v57)
      {
        goto LABEL_168;
      }
      v59 = (_QWORD *)*v59;
      if (!v59)
        goto LABEL_168;
    }
  }
  while (2)
  {
    v61 = v59[1];
    if (v61 != a3)
    {
      if (v61 >= *(_QWORD *)&v55)
        v61 %= *(_QWORD *)&v55;
      if (v61 != v57)
        goto LABEL_168;
      goto LABEL_68;
    }
    if (v59[2] != a3)
    {
LABEL_68:
      v59 = (_QWORD *)*v59;
      if (!v59)
        goto LABEL_168;
      continue;
    }
    break;
  }
LABEL_78:
  v63 = v51[3];
  if (0xAAAAAAAAAAAAAAABLL * ((v51[4] - v63) >> 3) > 1 || 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v59[4] - v59[3]) >> 3) >= 2)
    Espresso::throw_exception_selector<Espresso::generic_error>("Quantize op serialization has more than one input/output pair");
  v64 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v123, v63);
  if (!v64)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v65 = v64[5];
  v66 = v64[6];
  v138.__r_.__value_.__r.__words[0] = v65;
  v138.__r_.__value_.__l.__size_ = v66;
  if (v66)
  {
    v67 = (unint64_t *)(v66 + 8);
    do
      v68 = __ldxr(v67);
    while (__stxr(v68 + 1, v67));
    v69 = v141;
    v132 = v65;
    v133 = (std::__shared_weak_count *)v66;
    do
      v70 = __ldxr(v67);
    while (__stxr(v70 + 1, v67));
  }
  else
  {
    v69 = v141;
    v132 = v65;
    v133 = 0;
  }
  (*(void (**)(const void *, uint64_t, std::string::size_type *))(*(_QWORD *)v69 + 32))(v69, v63, &v132);
  v71 = v133;
  if (v133)
  {
    v72 = (unint64_t *)&v133->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v131 = *(_OWORD *)&v138.__r_.__value_.__l.__data_;
  if (v138.__r_.__value_.__l.__size_)
  {
    v74 = (unint64_t *)(v138.__r_.__value_.__l.__size_ + 8);
    do
      v75 = __ldxr(v74);
    while (__stxr(v75 + 1, v74));
  }
  (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v124 + 64))(v124, v63, &v131);
  v76 = (std::__shared_weak_count *)*((_QWORD *)&v131 + 1);
  if (*((_QWORD *)&v131 + 1))
  {
    v77 = (unint64_t *)(*((_QWORD *)&v131 + 1) + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = (std::__shared_weak_count *)v138.__r_.__value_.__l.__size_;
  if (v138.__r_.__value_.__l.__size_)
  {
    v80 = (unint64_t *)(v138.__r_.__value_.__l.__size_ + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = v59[3];
  v83 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v123, v82);
  if (!v83)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v84 = v83[5];
  v85 = v83[6];
  v138.__r_.__value_.__r.__words[0] = v84;
  v138.__r_.__value_.__l.__size_ = v85;
  if (v85)
  {
    v86 = (unint64_t *)(v85 + 8);
    do
      v87 = __ldxr(v86);
    while (__stxr(v87 + 1, v86));
    v88 = v141;
    v129 = v84;
    v130 = (std::__shared_weak_count *)v85;
    do
      v89 = __ldxr(v86);
    while (__stxr(v89 + 1, v86));
  }
  else
  {
    v88 = v141;
    v129 = v84;
    v130 = 0;
  }
  (*(void (**)(const void *, uint64_t, std::string::size_type *))(*(_QWORD *)v88 + 40))(v88, v82, &v129);
  v90 = v130;
  if (v130)
  {
    v91 = (unint64_t *)&v130->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v128 = *(_OWORD *)&v138.__r_.__value_.__l.__data_;
  if (v138.__r_.__value_.__l.__size_)
  {
    v93 = (unint64_t *)(v138.__r_.__value_.__l.__size_ + 8);
    do
      v94 = __ldxr(v93);
    while (__stxr(v94 + 1, v93));
  }
  (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v124 + 64))(v124, v82, &v128);
  v95 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
  if (*((_QWORD *)&v128 + 1))
  {
    v96 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = (std::__shared_weak_count *)v138.__r_.__value_.__l.__size_;
  if (v138.__r_.__value_.__l.__size_)
  {
    v99 = (unint64_t *)(v138.__r_.__value_.__l.__size_ + 8);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = v141;
  v141 = 0;
  v127 = v101;
  E5RT::E5OperationBuilder::Finish(&v127, &__dst);
  v102 = __dst.__r_.__value_.__r.__words[0];
  v138.__r_.__value_.__r.__words[0] = __dst.__r_.__value_.__r.__words[0];
  if (__dst.__r_.__value_.__r.__words[0])
  {
    v103 = (std::__shared_weak_count *)operator new();
    v104 = __dst.__r_.__value_.__r.__words[0];
    v103->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2CF8;
    v103->__shared_owners_ = 0;
    v103->__shared_weak_owners_ = 0;
    v103[1].__vftable = (std::__shared_weak_count_vtbl *)v104;
    v138.__r_.__value_.__l.__size_ = (std::string::size_type)v103;
    __dst.__r_.__value_.__r.__words[0] = 0;
    v105 = v127;
    v127 = 0;
    if (v105)
      goto LABEL_138;
  }
  else
  {
    *(_OWORD *)&v138.__r_.__value_.__l.__data_ = 0uLL;
    v103 = 0;
    __dst.__r_.__value_.__r.__words[0] = 0;
    v105 = v127;
    v127 = 0;
    if (v105)
LABEL_138:
      (*(void (**)(const void *))(*(_QWORD *)v105 + 8))(v105);
  }
  v125 = v102;
  v126 = v103;
  if (v103)
  {
    v106 = (unint64_t *)&v103->__shared_owners_;
    do
      v107 = __ldxr(v106);
    while (__stxr(v107 + 1, v106));
  }
  (*(void (**)(uint64_t, std::string::size_type *))(*(_QWORD *)v121 + 16))(v121, &v125);
  v108 = v126;
  if (v126)
  {
    v109 = (unint64_t *)&v126->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = (std::__shared_weak_count *)v138.__r_.__value_.__l.__size_;
  if (v138.__r_.__value_.__l.__size_)
  {
    v112 = (unint64_t *)(v138.__r_.__value_.__l.__size_ + 8);
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
  if (*((_QWORD *)&v139 + 1))
  {
    v115 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = v141;
  v141 = 0;
  if (v117)
    (*(void (**)(const void *))(*(_QWORD *)v117 + 8))(v117);
  v118 = v143;
  if (v143)
  {
    v119 = (unint64_t *)&v143->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
}

void sub_1910CF074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;
  uint64_t v46;

  if (a33)
    (*(void (**)(void *))(*(_QWORD *)a33 + 8))(a33);
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v44 - 160);
  v46 = *(_QWORD *)(v44 - 136);
  *(_QWORD *)(v44 - 136) = 0;
  if (v46)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v44 - 128);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v44 - 128);
  _Unwind_Resume(a1);
}

void Espresso::AOT::Builder::BuildDequantizeOp(_QWORD *a1, const void **a2, unint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v8;
  uint64_t v10;
  const void *v11;
  void *v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  double v22;
  int v23;
  size_t v24;
  unint64_t v25;
  const void *v26;
  std::string *p_dst;
  uint64_t v28;
  uint64_t v29;
  const void *v30;
  unint64_t v31;
  std::string *v32;
  std::string::size_type size;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  int v38;
  char *v39;
  unint64_t *v40;
  _DWORD *v41;
  const void *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  int8x8_t v47;
  uint8x8_t v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int8x8_t v55;
  uint8x8_t v56;
  unint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  std::string::size_type v65;
  std::string::size_type v66;
  unint64_t *v67;
  unint64_t v68;
  const void *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  std::string::size_type v84;
  std::string::size_type v85;
  unint64_t *v86;
  unint64_t v87;
  const void *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  const void *v101;
  std::string::size_type v102;
  std::__shared_weak_count *v103;
  std::string::size_type v104;
  const void *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  const void *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t v124;
  std::string::size_type v125;
  std::__shared_weak_count *v126;
  const void *v127;
  __int128 v128;
  std::string::size_type v129;
  std::__shared_weak_count *v130;
  __int128 v131;
  std::string::size_type v132;
  std::__shared_weak_count *v133;
  char *v134;
  std::__shared_weak_count *v135;
  std::string v136;
  std::string __dst;
  std::string v138;
  __int128 v139;
  std::string::size_type v140;
  const void *v141;
  void *v142;
  std::__shared_weak_count *v143;

  v8 = a1[4];
  if (a3 >= (a1[5] - v8) >> 4)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v10 = *(_QWORD *)(v8 + 16 * a3);
  v11 = *(const void **)(v10 + 64);
  if (!v11
  {
    v142 = 0;
    v143 = 0;
    Espresso::throw_exception_selector<Espresso::generic_error>("Unable to cast to static dequantize kernel");
  }
  v18 = v17;
  v19 = *(std::__shared_weak_count **)(v10 + 72);
  v142 = v17;
  v143 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  v22 = E5RT::E5OperationBuilder::Create(5, &v141);
  v121 = a5;
  (*(void (**)(const void *, uint64_t, double))(*(_QWORD *)v141 + 16))(v141, 5, v22);
  v122 = a1;
  v123 = a7;
  v124 = a6;
  v23 = *((char *)a2 + 23);
  if (v23 >= 0)
    v24 = *((unsigned __int8 *)a2 + 23);
  else
    v24 = (size_t)a2[1];
  v25 = v24 + 4;
  if (v24 + 4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v26 = v141;
  if (v25 >= 0x17)
  {
    v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v28 = v25 | 7;
    v29 = v28 + 1;
    p_dst = (std::string *)operator new(v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v24 + 4;
    __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v24 + 4;
    if (!v24)
      goto LABEL_21;
  }
  if (v23 >= 0)
    v30 = a2;
  else
    v30 = *a2;
  memmove(p_dst, v30, v24);
LABEL_21:
  strcpy((char *)p_dst + v24, "__Op");
  v31 = (*a4)++;
  std::to_string(&v136, v31);
  if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v32 = &v136;
  else
    v32 = (std::string *)v136.__r_.__value_.__r.__words[0];
  if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v136.__r_.__value_.__r.__words[2]);
  else
    size = v136.__r_.__value_.__l.__size_;
  v34 = std::string::append(&__dst, (const std::string::value_type *)v32, size);
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v138.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  v36 = std::string::append(&v138, "_Dequantize");
  v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v140 = v36->__r_.__value_.__r.__words[2];
  v139 = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(const void *, __int128 *))(*(_QWORD *)v26 + 24))(v26, &v139);
  if (SHIBYTE(v140) < 0)
  {
    operator delete((void *)v139);
    if ((SHIBYTE(v138.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_29:
      if ((SHIBYTE(v136.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_30;
LABEL_89:
      operator delete(v136.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_31;
      goto LABEL_90;
    }
  }
  else if ((SHIBYTE(v138.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_29;
  }
  operator delete(v138.__r_.__value_.__l.__data_);
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_89;
LABEL_30:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_31;
LABEL_90:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_31:
  v38 = *(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v18 + 384))(v18) + 4);
  v39 = (char *)operator new(0x38uLL);
  *((_QWORD *)v39 + 1) = 0;
  v40 = (unint64_t *)(v39 + 8);
  *((_QWORD *)v39 + 2) = 0;
  *(_QWORD *)v39 = &unk_1E2DB4198;
  *(_OWORD *)(v39 + 24) = 0u;
  *(_OWORD *)(v39 + 40) = 0u;
  *(_QWORD *)&v139 = v39 + 24;
  *((_QWORD *)&v139 + 1) = v39;
  v41 = operator new(4uLL);
  *v41 = v38;
  *((_QWORD *)v39 + 5) = v41 + 1;
  *((_QWORD *)v39 + 6) = v41 + 1;
  *((_QWORD *)v39 + 4) = v41;
  *((_DWORD *)v39 + 6) = 1;
  v42 = v141;
  v134 = v39 + 24;
  v135 = (std::__shared_weak_count *)v39;
  do
    v43 = __ldxr(v40);
  while (__stxr(v43 + 1, v40));
  E5RT::E5OperationBuilder::SetOperationAttributes<DequantOpT>(v42, (uint64_t *)&v134);
  v44 = v135;
  if (v135)
  {
    v45 = (unint64_t *)&v135->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = (int8x8_t)v122[8];
  if (!*(_QWORD *)&v47)
    goto LABEL_167;
  v48 = (uint8x8_t)vcnt_s8(v47);
  v48.i16[0] = vaddlv_u8(v48);
  if (v48.u32[0] > 1uLL)
  {
    v49 = a3;
    if (*(_QWORD *)&v47 <= a3)
      v49 = a3 % *(_QWORD *)&v47;
  }
  else
  {
    v49 = (*(_QWORD *)&v47 - 1) & a3;
  }
  v50 = *(_QWORD **)(v122[7] + 8 * v49);
  if (!v50 || (v51 = (_QWORD *)*v50) == 0)
LABEL_167:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (v48.u32[0] < 2uLL)
  {
    v52 = *(_QWORD *)&v47 - 1;
    while (1)
    {
      v54 = v51[1];
      if (v54 == a3)
      {
        if (v51[2] == a3)
          goto LABEL_58;
      }
      else if ((v54 & v52) != v49)
      {
        goto LABEL_167;
      }
      v51 = (_QWORD *)*v51;
      if (!v51)
        goto LABEL_167;
    }
  }
  while (1)
  {
    v53 = v51[1];
    if (v53 == a3)
      break;
    if (v53 >= *(_QWORD *)&v47)
      v53 %= *(_QWORD *)&v47;
    if (v53 != v49)
      goto LABEL_167;
LABEL_48:
    v51 = (_QWORD *)*v51;
    if (!v51)
      goto LABEL_167;
  }
  if (v51[2] != a3)
    goto LABEL_48;
LABEL_58:
  v55 = (int8x8_t)v122[13];
  if (!*(_QWORD *)&v55)
    goto LABEL_168;
  v56 = (uint8x8_t)vcnt_s8(v55);
  v56.i16[0] = vaddlv_u8(v56);
  if (v56.u32[0] > 1uLL)
  {
    v57 = a3;
    if (*(_QWORD *)&v55 <= a3)
      v57 = a3 % *(_QWORD *)&v55;
  }
  else
  {
    v57 = (*(_QWORD *)&v55 - 1) & a3;
  }
  v58 = *(_QWORD **)(v122[12] + 8 * v57);
  if (!v58 || (v59 = (_QWORD *)*v58) == 0)
LABEL_168:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (v56.u32[0] < 2uLL)
  {
    v60 = *(_QWORD *)&v55 - 1;
    while (1)
    {
      v62 = v59[1];
      if (v62 == a3)
      {
        if (v59[2] == a3)
          goto LABEL_78;
      }
      else if ((v62 & v60) != v57)
      {
        goto LABEL_168;
      }
      v59 = (_QWORD *)*v59;
      if (!v59)
        goto LABEL_168;
    }
  }
  while (2)
  {
    v61 = v59[1];
    if (v61 != a3)
    {
      if (v61 >= *(_QWORD *)&v55)
        v61 %= *(_QWORD *)&v55;
      if (v61 != v57)
        goto LABEL_168;
      goto LABEL_68;
    }
    if (v59[2] != a3)
    {
LABEL_68:
      v59 = (_QWORD *)*v59;
      if (!v59)
        goto LABEL_168;
      continue;
    }
    break;
  }
LABEL_78:
  v63 = v51[3];
  if (0xAAAAAAAAAAAAAAABLL * ((v51[4] - v63) >> 3) > 1 || 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v59[4] - v59[3]) >> 3) >= 2)
    Espresso::throw_exception_selector<Espresso::generic_error>("Dequantize op serialization has more than one input/output pair");
  v64 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v123, v63);
  if (!v64)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v65 = v64[5];
  v66 = v64[6];
  v138.__r_.__value_.__r.__words[0] = v65;
  v138.__r_.__value_.__l.__size_ = v66;
  if (v66)
  {
    v67 = (unint64_t *)(v66 + 8);
    do
      v68 = __ldxr(v67);
    while (__stxr(v68 + 1, v67));
    v69 = v141;
    v132 = v65;
    v133 = (std::__shared_weak_count *)v66;
    do
      v70 = __ldxr(v67);
    while (__stxr(v70 + 1, v67));
  }
  else
  {
    v69 = v141;
    v132 = v65;
    v133 = 0;
  }
  (*(void (**)(const void *, uint64_t, std::string::size_type *))(*(_QWORD *)v69 + 32))(v69, v63, &v132);
  v71 = v133;
  if (v133)
  {
    v72 = (unint64_t *)&v133->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v131 = *(_OWORD *)&v138.__r_.__value_.__l.__data_;
  if (v138.__r_.__value_.__l.__size_)
  {
    v74 = (unint64_t *)(v138.__r_.__value_.__l.__size_ + 8);
    do
      v75 = __ldxr(v74);
    while (__stxr(v75 + 1, v74));
  }
  (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v124 + 64))(v124, v63, &v131);
  v76 = (std::__shared_weak_count *)*((_QWORD *)&v131 + 1);
  if (*((_QWORD *)&v131 + 1))
  {
    v77 = (unint64_t *)(*((_QWORD *)&v131 + 1) + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = (std::__shared_weak_count *)v138.__r_.__value_.__l.__size_;
  if (v138.__r_.__value_.__l.__size_)
  {
    v80 = (unint64_t *)(v138.__r_.__value_.__l.__size_ + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = v59[3];
  v83 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v123, v82);
  if (!v83)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v84 = v83[5];
  v85 = v83[6];
  v138.__r_.__value_.__r.__words[0] = v84;
  v138.__r_.__value_.__l.__size_ = v85;
  if (v85)
  {
    v86 = (unint64_t *)(v85 + 8);
    do
      v87 = __ldxr(v86);
    while (__stxr(v87 + 1, v86));
    v88 = v141;
    v129 = v84;
    v130 = (std::__shared_weak_count *)v85;
    do
      v89 = __ldxr(v86);
    while (__stxr(v89 + 1, v86));
  }
  else
  {
    v88 = v141;
    v129 = v84;
    v130 = 0;
  }
  (*(void (**)(const void *, uint64_t, std::string::size_type *))(*(_QWORD *)v88 + 40))(v88, v82, &v129);
  v90 = v130;
  if (v130)
  {
    v91 = (unint64_t *)&v130->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v128 = *(_OWORD *)&v138.__r_.__value_.__l.__data_;
  if (v138.__r_.__value_.__l.__size_)
  {
    v93 = (unint64_t *)(v138.__r_.__value_.__l.__size_ + 8);
    do
      v94 = __ldxr(v93);
    while (__stxr(v94 + 1, v93));
  }
  (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v124 + 64))(v124, v82, &v128);
  v95 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
  if (*((_QWORD *)&v128 + 1))
  {
    v96 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = (std::__shared_weak_count *)v138.__r_.__value_.__l.__size_;
  if (v138.__r_.__value_.__l.__size_)
  {
    v99 = (unint64_t *)(v138.__r_.__value_.__l.__size_ + 8);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = v141;
  v141 = 0;
  v127 = v101;
  E5RT::E5OperationBuilder::Finish(&v127, &__dst);
  v102 = __dst.__r_.__value_.__r.__words[0];
  v138.__r_.__value_.__r.__words[0] = __dst.__r_.__value_.__r.__words[0];
  if (__dst.__r_.__value_.__r.__words[0])
  {
    v103 = (std::__shared_weak_count *)operator new();
    v104 = __dst.__r_.__value_.__r.__words[0];
    v103->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2CF8;
    v103->__shared_owners_ = 0;
    v103->__shared_weak_owners_ = 0;
    v103[1].__vftable = (std::__shared_weak_count_vtbl *)v104;
    v138.__r_.__value_.__l.__size_ = (std::string::size_type)v103;
    __dst.__r_.__value_.__r.__words[0] = 0;
    v105 = v127;
    v127 = 0;
    if (v105)
      goto LABEL_138;
  }
  else
  {
    *(_OWORD *)&v138.__r_.__value_.__l.__data_ = 0uLL;
    v103 = 0;
    __dst.__r_.__value_.__r.__words[0] = 0;
    v105 = v127;
    v127 = 0;
    if (v105)
LABEL_138:
      (*(void (**)(const void *))(*(_QWORD *)v105 + 8))(v105);
  }
  v125 = v102;
  v126 = v103;
  if (v103)
  {
    v106 = (unint64_t *)&v103->__shared_owners_;
    do
      v107 = __ldxr(v106);
    while (__stxr(v107 + 1, v106));
  }
  (*(void (**)(uint64_t, std::string::size_type *))(*(_QWORD *)v121 + 16))(v121, &v125);
  v108 = v126;
  if (v126)
  {
    v109 = (unint64_t *)&v126->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = (std::__shared_weak_count *)v138.__r_.__value_.__l.__size_;
  if (v138.__r_.__value_.__l.__size_)
  {
    v112 = (unint64_t *)(v138.__r_.__value_.__l.__size_ + 8);
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
  if (*((_QWORD *)&v139 + 1))
  {
    v115 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = v141;
  v141 = 0;
  if (v117)
    (*(void (**)(const void *))(*(_QWORD *)v117 + 8))(v117);
  v118 = v143;
  if (v143)
  {
    v119 = (unint64_t *)&v143->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
}

void sub_1910CFC78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;
  uint64_t v46;

  if (a33)
    (*(void (**)(void *))(*(_QWORD *)a33 + 8))(a33);
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v44 - 160);
  v46 = *(_QWORD *)(v44 - 136);
  *(_QWORD *)(v44 - 136) = 0;
  if (v46)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v44 - 128);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v44 - 128);
  _Unwind_Resume(a1);
}

void Espresso::AOT::Builder::BuildOps(_QWORD *a1, const void **a2, uint64_t a3, uint64_t a4, _QWORD *a5, int a6)
{
  uint64_t v6;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v22;
  BOOL v23;
  uint64_t v32;

  v32 = 0;
  v6 = a1[4];
  if (a1[5] != v6)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = *(_QWORD *)(v6 + v13);
      v16 = (int *)(v15 + 40);
      v17 = *(char *)(v15 + 63);
      if ((v17 & 0x80000000) == 0)
      {
        v18 = *(unsigned __int8 *)(v15 + 63);
        switch((char)v17)
        {
          case 4:
            goto LABEL_61;
          case 6:
            v19 = *v16;
            v20 = *((unsigned __int16 *)v16 + 2);
            if (v19 != 1601594724 || v20 != 28783)
              goto LABEL_65;
            goto LABEL_40;
          case 15:
            if (*(_QWORD *)v16 != 0x715F636974617473 || *(_QWORD *)((char *)v16 + 7) != 0x657A69746E617571)
              goto LABEL_60;
            goto LABEL_3;
          case 16:
            goto LABEL_56;
          case 17:
            if (*(_QWORD *)v16 == 0x645F636974617473
              && *((_QWORD *)v16 + 1) == 0x7A69746E61757165
              && *((_BYTE *)v16 + 16) == 101)
            {
              goto LABEL_63;
            }
            if (v18 == 4)
              goto LABEL_61;
            if (v18 != 16)
              goto LABEL_65;
LABEL_56:
            if (*(_QWORD *)v16 == 0x5F747865746E6F63 && *((_QWORD *)v16 + 1) == 0x726566736E617274)
              goto LABEL_62;
LABEL_60:
            if (v18 == 4)
              goto LABEL_61;
            goto LABEL_65;
          default:
            goto LABEL_65;
        }
      }
      v22 = *(_QWORD *)(v15 + 48);
      if (v22 == 6
        && (**(_DWORD **)v16 == 1601594724 ? (v23 = *(unsigned __int16 *)(*(_QWORD *)v16 + 4) == 28783) : (v23 = 0),
            v23))
      {
LABEL_40:
        Espresso::AOT::Builder::BuildDevOp((uint64_t)a1, (uint64_t)a2, v14, &v32, a3, a4, a5, a6);
      }
      else
      {
        if (v22 != 15)
          goto LABEL_23;
        if (**(_QWORD **)v16 != 0x715F636974617473 || *(_QWORD *)(*(_QWORD *)v16 + 7) != 0x657A69746E617571)
        {
          v22 = *(_QWORD *)(v15 + 48);
LABEL_23:
          if (v22 == 17)
          {
            if (**(_QWORD **)v16 == 0x645F636974617473
              && *(_QWORD *)(*(_QWORD *)v16 + 8) == 0x7A69746E61757165
              && *(_BYTE *)(*(_QWORD *)v16 + 16) == 101)
            {
LABEL_63:
              Espresso::AOT::Builder::BuildDequantizeOp(a1, a2, v14, &v32, a3, a4, a5);
              goto LABEL_4;
            }
            v22 = *(_QWORD *)(v15 + 48);
          }
          if (v22 == 16)
          {
            if (**(_QWORD **)v16 != 0x5F747865746E6F63 || *(_QWORD *)(*(_QWORD *)v16 + 8) != 0x726566736E617274)
            {
              v22 = *(_QWORD *)(v15 + 48);
              goto LABEL_38;
            }
          }
          else
          {
LABEL_38:
            if (v22 != 4)
              goto LABEL_65;
            v16 = *(int **)v16;
LABEL_61:
            if (*v16 != 1953718627)
LABEL_65:
              Espresso::throw_exception_selector<Espresso::generic_error>("Unsupported op encountered while serializing");
          }
LABEL_62:
          Espresso::AOT::Builder::BuildCastOps(a1, a2, v14, &v32, a3, a4, a5);
          goto LABEL_4;
        }
LABEL_3:
        Espresso::AOT::Builder::BuildQuantizeOp(a1, a2, v14, &v32, a3, a4, a5);
      }
LABEL_4:
      ++v14;
      v6 = a1[4];
      v13 += 16;
    }
    while (v14 < (a1[5] - v6) >> 4);
  }
}

void Espresso::AOT::Builder::BuildFunction(uint64_t a1, int8x8_t *a2, const void **a3, _QWORD *a4)
{
  int8x8_t *v7;
  int8x8_t *v8;
  const void *v9;
  std::string::size_type v10;
  std::__shared_weak_count *v11;
  std::string::size_type v12;
  const void *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  const void *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count_vtbl *v23;
  const void *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  void *v37;
  void **v38;
  uint64_t *v39;
  std::string::size_type v40;
  std::string::size_type v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  uint64_t v49;
  std::string::size_type size;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  int8x8_t *v59;
  int8x8_t *v60;
  BOOL v61;
  void **v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  void **v69;
  void *v70;
  void **v71;
  uint64_t *v72;
  std::string::size_type v73;
  std::string::size_type v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  std::string::size_type v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  int8x8_t *v92;
  int8x8_t *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  const void *v96;
  _QWORD v97[2];
  std::__shared_weak_count *v98;
  std::string __p;
  char v100;
  std::string::size_type v101;
  std::__shared_weak_count *v102;
  const void *v103[2];
  std::__shared_weak_count *v104;
  __int128 v105;
  std::string::size_type v106;
  std::__shared_weak_count *v107;
  __int128 v108;
  std::string::size_type v109;
  std::__shared_weak_count *v110;
  void *v111[5];
  __int128 v112;
  __int128 v113;
  int v114;
  const void *v115;
  const void *v116;
  _QWORD v117[2];
  void **v118;

  Espresso::AOT::GetIntermediateBlobOffsets(a4, (uint64_t)v117);
  E5RT::E5FunctionBuilder::Create(&v116);
  E5RT::E5BlockBuilder::Create(&v115);
  (*(void (**)(const void *, const void **))(*(_QWORD *)v116 + 16))(v116, a3);
  v112 = 0u;
  v113 = 0u;
  v114 = 1065353216;
  Espresso::AOT::GetOperandAliases(a2, (uint64_t)v111);
  Espresso::AOT::Builder::BuildOperands((Espresso::AOT *)a2, (const Espresso::net *)v117, v111, &v112);
  Espresso::AOT::Builder::BuildOps(a2, a3, (uint64_t)v115, (uint64_t)v116, &v112, *(unsigned __int8 *)(a1 + 16));
  v7 = (int8x8_t *)a2[29];
  if (v7 != &a2[30])
  {
    do
    {
      v39 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(&v112, (uint64_t)&v7[4]);
      if (!v39)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v40 = v39[5];
      v41 = v39[6];
      __p.__r_.__value_.__r.__words[0] = v40;
      __p.__r_.__value_.__l.__size_ = v41;
      if (v41)
      {
        v42 = (unint64_t *)(v41 + 8);
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
        v44 = (uint64_t)v115;
        v109 = v40;
        v110 = (std::__shared_weak_count *)v41;
        do
          v45 = __ldxr(v42);
        while (__stxr(v45 + 1, v42));
      }
      else
      {
        v44 = (uint64_t)v115;
        v109 = v40;
        v110 = 0;
      }
      (*(void (**)(uint64_t, int8x8_t *, std::string::size_type *))(*(_QWORD *)v44 + 24))(v44, v7 + 4, &v109);
      v46 = v110;
      if (!v110)
        goto LABEL_57;
      p_shared_owners = (unint64_t *)&v110->__shared_owners_;
      do
        v48 = __ldaxr(p_shared_owners);
      while (__stlxr(v48 - 1, p_shared_owners));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
        v49 = (uint64_t)v116;
        size = __p.__r_.__value_.__l.__size_;
        v108 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (!__p.__r_.__value_.__l.__size_)
          goto LABEL_60;
      }
      else
      {
LABEL_57:
        v49 = (uint64_t)v116;
        size = __p.__r_.__value_.__l.__size_;
        v108 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (!__p.__r_.__value_.__l.__size_)
          goto LABEL_60;
      }
      v51 = (unint64_t *)(size + 8);
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
LABEL_60:
      (*(void (**)(uint64_t, int8x8_t *, __int128 *))(*(_QWORD *)v49 + 40))(v49, v7 + 4, &v108);
      v53 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
      if (!*((_QWORD *)&v108 + 1))
        goto LABEL_64;
      v54 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
        v56 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
LABEL_65:
          v57 = (unint64_t *)&v56->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
      }
      else
      {
LABEL_64:
        v56 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
          goto LABEL_65;
      }
      v59 = (int8x8_t *)v7[1];
      if (v59)
      {
        do
        {
          v60 = v59;
          v59 = (int8x8_t *)*v59;
        }
        while (v59);
      }
      else
      {
        do
        {
          v60 = (int8x8_t *)v7[2];
          v61 = *v60 == (_QWORD)v7;
          v7 = v60;
        }
        while (!v61);
      }
      v7 = v60;
    }
    while (v60 != &a2[30]);
  }
  v8 = (int8x8_t *)a2[32];
  if (v8 != &a2[33])
  {
    do
    {
      v72 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(&v112, (uint64_t)&v8[4]);
      if (!v72)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v73 = v72[5];
      v74 = v72[6];
      __p.__r_.__value_.__r.__words[0] = v73;
      __p.__r_.__value_.__l.__size_ = v74;
      if (v74)
      {
        v75 = (unint64_t *)(v74 + 8);
        do
          v76 = __ldxr(v75);
        while (__stxr(v76 + 1, v75));
        v77 = (uint64_t)v115;
        v106 = v73;
        v107 = (std::__shared_weak_count *)v74;
        do
          v78 = __ldxr(v75);
        while (__stxr(v78 + 1, v75));
      }
      else
      {
        v77 = (uint64_t)v115;
        v106 = v73;
        v107 = 0;
      }
      (*(void (**)(uint64_t, int8x8_t *, std::string::size_type *))(*(_QWORD *)v77 + 32))(v77, v8 + 4, &v106);
      v79 = v107;
      if (!v107)
        goto LABEL_112;
      v80 = (unint64_t *)&v107->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
        v82 = (uint64_t)v116;
        v83 = __p.__r_.__value_.__l.__size_;
        v105 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (!__p.__r_.__value_.__l.__size_)
          goto LABEL_115;
      }
      else
      {
LABEL_112:
        v82 = (uint64_t)v116;
        v83 = __p.__r_.__value_.__l.__size_;
        v105 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (!__p.__r_.__value_.__l.__size_)
          goto LABEL_115;
      }
      v84 = (unint64_t *)(v83 + 8);
      do
        v85 = __ldxr(v84);
      while (__stxr(v85 + 1, v84));
LABEL_115:
      (*(void (**)(uint64_t, int8x8_t *, __int128 *))(*(_QWORD *)v82 + 48))(v82, v8 + 4, &v105);
      v86 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
      if (!*((_QWORD *)&v105 + 1))
        goto LABEL_119;
      v87 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
        v89 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
LABEL_120:
          v90 = (unint64_t *)&v89->__shared_owners_;
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
      }
      else
      {
LABEL_119:
        v89 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
          goto LABEL_120;
      }
      v92 = (int8x8_t *)v8[1];
      if (v92)
      {
        do
        {
          v93 = v92;
          v92 = (int8x8_t *)*v92;
        }
        while (v92);
      }
      else
      {
        do
        {
          v93 = (int8x8_t *)v8[2];
          v61 = *v93 == (_QWORD)v8;
          v8 = v93;
        }
        while (!v61);
      }
      v8 = v93;
    }
    while (v93 != &a2[33]);
  }
  v9 = v115;
  v115 = 0;
  v103[0] = v9;
  E5RT::E5BlockBuilder::Finish(v103, &__p);
  v10 = __p.__r_.__value_.__r.__words[0];
  v103[1] = __p.__r_.__value_.__l.__data_;
  if (__p.__r_.__value_.__r.__words[0])
  {
    v11 = (std::__shared_weak_count *)operator new();
    v12 = __p.__r_.__value_.__r.__words[0];
    v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2D68;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = (std::__shared_weak_count_vtbl *)v12;
    v104 = v11;
    __p.__r_.__value_.__r.__words[0] = 0;
    v13 = v103[0];
    v103[0] = 0;
    if (!v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  v11 = 0;
  v104 = 0;
  __p.__r_.__value_.__r.__words[0] = 0;
  v13 = v103[0];
  v103[0] = 0;
  if (v13)
LABEL_5:
    (*(void (**)(const void *))(*(_QWORD *)v13 + 8))(v13);
LABEL_6:
  v14 = (uint64_t)v116;
  v101 = v10;
  v102 = v11;
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  (*(void (**)(uint64_t, std::string::size_type *))(*(_QWORD *)v14 + 24))(v14, &v101);
  v17 = v102;
  if (v102)
  {
    v18 = (unint64_t *)&v102->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  Espresso::AOT::GetNetworkVersionInformation((Espresso::AOT *)a2, &__p);
  if (v100)
    (*(void (**)(const void *, std::string *))(*(_QWORD *)v116 + 72))(v116, &__p);
  v20 = v116;
  v116 = 0;
  v96 = v20;
  E5RT::E5FunctionBuilder::Finish(&v96, v97);
  v21 = v97[0];
  v97[1] = v97[0];
  if (v97[0])
  {
    v22 = (std::__shared_weak_count *)operator new();
    v23 = (std::__shared_weak_count_vtbl *)v97[0];
    v22->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2C88;
    v22->__shared_owners_ = 0;
    v22->__shared_weak_owners_ = 0;
    v22[1].__vftable = v23;
    v98 = v22;
    v24 = v96;
    v96 = 0;
    v97[0] = 0;
    if (!v24)
      goto LABEL_19;
    goto LABEL_18;
  }
  v22 = 0;
  v98 = 0;
  v24 = v96;
  v96 = 0;
  v97[0] = 0;
  if (v24)
LABEL_18:
    (*(void (**)(const void *))(*(_QWORD *)v24 + 8))(v24);
LABEL_19:
  v25 = *(_QWORD *)(a1 + 8);
  v94 = v21;
  v95 = v22;
  if (v22)
  {
    v26 = (unint64_t *)&v22->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v25 + 16))(v25, &v94);
  v28 = v95;
  if (v95)
  {
    v29 = (unint64_t *)&v95->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v98;
  if (v98)
  {
    v32 = (unint64_t *)&v98->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v100 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v34 = v104;
  if (v104)
  {
    v35 = (unint64_t *)&v104->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__deallocate_node((int)v111, (char *)v111[2]);
  v37 = v111[0];
  v111[0] = 0;
  if (v37)
    operator delete(v37);
  v38 = (void **)v113;
  if ((_QWORD)v113)
  {
    do
    {
      while (1)
      {
        v62 = (void **)*v38;
        v63 = (std::__shared_weak_count *)v38[6];
        if (v63)
        {
          v64 = (unint64_t *)&v63->__shared_owners_;
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        if (*((char *)v38 + 39) < 0)
          break;
        operator delete(v38);
        v38 = v62;
        if (!v62)
          goto LABEL_86;
      }
      operator delete(v38[2]);
      operator delete(v38);
      v38 = v62;
    }
    while (v62);
  }
LABEL_86:
  v66 = (void *)v112;
  *(_QWORD *)&v112 = 0;
  if (v66)
    operator delete(v66);
  v67 = (uint64_t)v115;
  v115 = 0;
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  v68 = (uint64_t)v116;
  v116 = 0;
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  v69 = v118;
  if (v118)
  {
    do
    {
      v71 = (void **)*v69;
      if (*((char *)v69 + 39) < 0)
        operator delete(v69[2]);
      operator delete(v69);
      v69 = v71;
    }
    while (v71);
  }
  v70 = (void *)v117[0];
  v117[0] = 0;
  if (v70)
    operator delete(v70);
}

void sub_1910D09F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,char a38)
{
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  if (a12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
    v40 = a11;
    if (!a11)
    {
LABEL_3:
      if (!a21)
        goto LABEL_9;
      goto LABEL_7;
    }
  }
  else
  {
    v40 = a11;
    if (!a11)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  if (!a21)
    goto LABEL_9;
LABEL_7:
  if (a20 < 0)
    operator delete(__p);
LABEL_9:
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::unordered_map<std::string,Espresso::AOT::MemOptimizer::AllocInfo>::~unordered_map[abi:ne180100]((uint64_t)&a38);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v38 - 160);
  v41 = *(_QWORD *)(v38 - 120);
  *(_QWORD *)(v38 - 120) = 0;
  if (v41)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
    v42 = *(_QWORD *)(v38 - 112);
    *(_QWORD *)(v38 - 112) = 0;
    if (!v42)
    {
LABEL_11:
      std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v38 - 104);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v42 = *(_QWORD *)(v38 - 112);
    *(_QWORD *)(v38 - 112) = 0;
    if (!v42)
      goto LABEL_11;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v38 - 104);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::Builder::SerializeToFile(uint64_t a1, uint64_t a2, const void **a3, uint64_t a4)
{
  const void *v7;
  const void *v8;
  int v9;
  size_t v10;
  unint64_t v11;
  std::string *p_dst;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  uint64_t result;
  std::string __dst;
  std::string v25;
  void *__p[2];
  std::string::size_type v27;
  const void *v28;
  uint64_t v29;

  v7 = *(const void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  v28 = v7;
  E5RT::E5ProgramBuilder::Finish(&v28, &v29);
  v8 = v28;
  v28 = 0;
  if (v8)
    (*(void (**)(const void *))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((char *)a3 + 23);
  if (v9 >= 0)
    v10 = *((unsigned __int8 *)a3 + 23);
  else
    v10 = (size_t)a3[1];
  v11 = v10 + 1;
  if (v10 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v11 >= 0x17)
  {
    v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v13 = v11 | 7;
    v14 = v13 + 1;
    p_dst = (std::string *)operator new(v13 + 1);
    __dst.__r_.__value_.__l.__size_ = v10 + 1;
    __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v10 + 1;
    if (!v10)
      goto LABEL_17;
  }
  if (v9 >= 0)
    v15 = a3;
  else
    v15 = *a3;
  memmove(p_dst, v15, v10);
LABEL_17:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v10) = 47;
  v16 = *(char *)(a4 + 23);
  if (v16 >= 0)
    v17 = (const std::string::value_type *)a4;
  else
    v17 = *(const std::string::value_type **)a4;
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(a4 + 23);
  else
    v18 = *(_QWORD *)(a4 + 8);
  v19 = std::string::append(&__dst, v17, v18);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = std::string::append(&v25, ".e5");
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v27 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v25.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_25;
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_25;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_25:
  (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v29 + 56))(v29, a2, __p);
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
  result = v29;
  v29 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1910D0DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  uint64_t v30;

  if (a28 < 0)
    operator delete(__p);
  v30 = *(_QWORD *)(v28 - 72);
  *(_QWORD *)(v28 - 72) = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  _Unwind_Resume(exception_object);
}

void Espresso::dev_op_params_t::~dev_op_params_t(Espresso::dev_op_params_t *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = *((_QWORD *)this + 14);
  if (v2)
  {
    v3 = *((_QWORD *)this + 15);
    v4 = (void *)*((_QWORD *)this + 14);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 14);
    }
    *((_QWORD *)this + 15) = v2;
    operator delete(v4);
  }
  v5 = *((_QWORD *)this + 11);
  if (v5)
  {
    v6 = *((_QWORD *)this + 12);
    v7 = (void *)*((_QWORD *)this + 11);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0)
          operator delete(*(void **)(v6 - 24));
        v6 -= 24;
      }
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 11);
    }
    *((_QWORD *)this + 12) = v5;
    operator delete(v7);
  }
  if ((*((char *)this + 87) & 0x80000000) == 0)
  {
    v8 = (void *)*((_QWORD *)this + 5);
    if (!v8)
      goto LABEL_20;
    goto LABEL_19;
  }
  operator delete(*((void **)this + 8));
  v8 = (void *)*((_QWORD *)this + 5);
  if (v8)
  {
LABEL_19:
    *((_QWORD *)this + 6) = v8;
    operator delete(v8);
  }
LABEL_20:
  v9 = (void *)*((_QWORD *)this + 2);
  if (v9)
  {
    *((_QWORD *)this + 3) = v9;
    operator delete(v9);
  }
}

uint64_t std::__shared_ptr_pointer<E5RT::E5BuildInfo const *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::E5BuildInfo const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A8809FLL)
    return a1 + 24;
  if (((v3 & 0x8000000191A8809FLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A8809FLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A8809FLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t std::__shared_ptr_pointer<E5RT::E5Operand const *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::E5Operand const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A8812FLL)
    return a1 + 24;
  if (((v3 & 0x8000000191A8812FLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A8812FLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A8812FLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__shared_ptr_emplace<CastOpT>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB5970;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CastOpT>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB5970;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<CastOpT>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<E5RT::E5Operation const *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::E5Operation const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A881FBLL)
    return a1 + 24;
  if (((v3 & 0x8000000191A881FBLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A881FBLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A881FBLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__shared_ptr_emplace<MlcCpuInferenceOpT>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB56D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MlcCpuInferenceOpT>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB56D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<MlcCpuInferenceOpT>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void std::__shared_ptr_emplace<CpuInferenceOpT>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB55B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CpuInferenceOpT>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB55B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<CpuInferenceOpT>::__on_zero_shared(uint64_t a1)
{
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(*(void **)(a1 + 24));
    return;
  }
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_5;
}

void std::__shared_ptr_emplace<MpsGraphInferenceOpT>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB57B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MpsGraphInferenceOpT>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB57B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<MpsGraphInferenceOpT>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 88);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 96);
    v4 = *(void **)(a1 + 88);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 88);
    }
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v4);
  }
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      return;
LABEL_13:
    operator delete(*(void **)(a1 + 24));
    return;
  }
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_13;
}

void std::__shared_ptr_emplace<AneInferenceOpT>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB5580;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AneInferenceOpT>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB5580;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<AneInferenceOpT>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 80);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 88);
    v4 = *(void **)(a1 + 80);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 80);
    }
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v4);
  }
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      return;
LABEL_13:
    operator delete(*(void **)(a1 + 24));
    return;
  }
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_13;
}

void std::__shared_ptr_emplace<QuantOpT>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB59A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QuantOpT>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB59A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<QuantOpT>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<DequantOpT>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB4198;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<DequantOpT>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB4198;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<DequantOpT>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<E5RT::E5Block const *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::E5Block const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A88422)
    return a1 + 24;
  if (((v3 & 0x8000000191A88422 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A88422))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A88422 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t std::__shared_ptr_pointer<E5RT::E5Function const *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::E5Function const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A884AFLL)
    return a1 + 24;
  if (((v3 & 0x8000000191A884AFLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A884AFLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A884AFLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void Espresso::AOT::Builder::BuildCastOps(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl(&dword_190DAF000, log, OS_LOG_TYPE_DEBUG, "Ignoring empty context transfer", v1, 2u);
}

_QWORD *Espresso::AOT::Validators::MlcValidator::MlcValidator(_QWORD *a1, __int128 *a2, int a3)
{
  _QWORD *v6;
  __int128 v7;
  unsigned __int8 *v8;
  void *__p[2];
  char v11;
  void **v12;

  v6 = Espresso::AOT::AbstractValidator::AbstractValidator(a1);
  *v6 = off_1E2DA01B0;
  v7 = *a2;
  *(_OWORD *)(v6 + 3) = 0u;
  *(_OWORD *)(v6 + 1) = v7;
  *(_OWORD *)(v6 + 5) = 0u;
  *((_DWORD *)v6 + 14) = 1065353216;
  if (!a3)
    return a1;
  v11 = 10;
  strcpy((char *)__p, "bnns-graph");
  v12 = __p;
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(v6 + 3), (uint64_t)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v12);
  MEMORY[0x19401C808](v8 + 40, "true");
  if ((v11 & 0x80000000) == 0)
    return a1;
  operator delete(__p[0]);
  return a1;
}

void sub_1910D176C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  Espresso::AOT::AbstractValidator *v15;
  uint64_t v16;
  E5RT::AsyncEventImpl *v17;

  if (a15 < 0)
    operator delete(__p);
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](v16);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v17);
  Espresso::AOT::AbstractValidator::~AbstractValidator(v15);
  _Unwind_Resume(a1);
}

void Espresso::AOT::Validators::MlcValidator::Validate(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  E5Common::E5PlatformManager *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  void *v12;
  void *v13;
  std::string v14;

  v8 = (E5Common::E5PlatformManager *)mlc_services_validation_version();
  v9 = E5Common::E5PlatformManager::Instance(v8);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 24))(v9, a1 + 8);
  if (*(char *)(v10 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)v10, *(_QWORD *)(v10 + 8));
  }
  else
  {
    v11 = *(_OWORD *)v10;
    v14.__r_.__value_.__r.__words[2] = *(_QWORD *)(v10 + 16);
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v11;
  }
  Espresso::AOT::Utils::MakeValidationInput((unint64_t)v8, a2, a3, (uint64_t *)&v14, a1 + 24);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)mlc_services_validate();
  Espresso::AOT::Utils::ParseValidationOutput((unint64_t)v8, v13, a4);

  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

void sub_1910D18A0(_Unwind_Exception *a1, std::string *a2, std::string *a3, uint64_t a4, void *__p, uint64_t a6, int a7, __int16 a8, char a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__pa, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  void *v24;

  if (a23 < 0)
    operator delete(__pa);
  _Unwind_Resume(a1);
}

void Espresso::AOT::Validators::MlcValidator::~MlcValidator(Espresso::AOT::Validators::MlcValidator *this)
{
  void **v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = off_1E2DA01B0;
  v2 = (void **)*((_QWORD *)this + 5);
  if (v2)
  {
    do
    {
      v4 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0)
LABEL_10:
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_10;
      }
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    operator delete(v3);
  E5RT::AsyncEventImpl::~AsyncEventImpl((Espresso::AOT::Validators::MlcValidator *)((char *)this + 8));
  Espresso::AOT::AbstractValidator::~AbstractValidator(this);
}

{
  void **v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = off_1E2DA01B0;
  v2 = (void **)*((_QWORD *)this + 5);
  if (!v2)
  {
LABEL_2:
    v3 = (void *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v3)
      operator delete(v3);
    E5RT::AsyncEventImpl::~AsyncEventImpl((Espresso::AOT::Validators::MlcValidator *)((char *)this + 8));
    Espresso::AOT::AbstractValidator::~AbstractValidator(this);
    JUMPOUT(0x19401CD90);
  }
  while (1)
  {
    v4 = (void **)*v2;
    if (*((char *)v2 + 63) < 0)
    {
      operator delete(v2[5]);
      if (*((char *)v2 + 39) < 0)
LABEL_10:
        operator delete(v2[2]);
    }
    else if (*((char *)v2 + 39) < 0)
    {
      goto LABEL_10;
    }
    operator delete(v2);
    v2 = v4;
    if (!v4)
      goto LABEL_2;
  }
}

float Espresso::AOT::DTrees::lstmCpu()
{
  return 1.0;
}

float Espresso::AOT::DTrees::lstmGpu(uint64_t a1)
{
  float result;

  result = 5.0;
  if (*(double *)(a1 + 8) < 128.0)
    return 0.5;
  return result;
}

float Espresso::AOT::DTrees::lstmCpuFp(uint64_t a1)
{
  float result;

  result = 0.062484;
  if (*(double *)(a1 + 32) > 64.9365)
    return 1.952;
  return result;
}

float Espresso::AOT::DTrees::lstmCpuIp(uint64_t a1)
{
  float result;

  result = 0.062634;
  if (*(double *)(a1 + 32) > 64.9365)
    return 2.0062;
  return result;
}

float Espresso::AOT::DTrees::lstmCpuJp(uint64_t a1)
{
  float result;

  result = 0.060813;
  if (*(double *)(a1 + 32) > 64.9365)
    return 4.012;
  return result;
}

float Espresso::AOT::DTrees::lstmCpuKp(uint64_t a1)
{
  float result;

  result = 0.06202;
  if (*(double *)(a1 + 32) > 64.9365)
    return 3.3098;
  return result;
}

float Espresso::AOT::DTrees::lstmCpuGp(uint64_t a1)
{
  float result;

  result = 0.064678;
  if (*(double *)(a1 + 32) > 64.9365)
    return 3.7468;
  return result;
}

float Espresso::AOT::DTrees::lstmCpuHp(uint64_t a1)
{
  float result;

  result = 0.06358;
  if (*(double *)(a1 + 32) > 64.9365)
    return 4.3615;
  return result;
}

float Espresso::AOT::DTrees::lstmGpuFp(uint64_t a1)
{
  float result;

  result = 0.027114;
  if (*(double *)(a1 + 32) > 64.9365)
    return 4.5486;
  return result;
}

float Espresso::AOT::DTrees::lstmGpuIp(uint64_t a1)
{
  float result;

  result = 0.024272;
  if (*(double *)(a1 + 32) > 64.9365)
    return 4.2935;
  return result;
}

float Espresso::AOT::DTrees::lstmGpuJp(uint64_t a1)
{
  float result;

  result = 0.020839;
  if (*(double *)(a1 + 32) > 64.9365)
    return 22.943;
  return result;
}

float Espresso::AOT::DTrees::lstmGpuKp(uint64_t a1)
{
  float result;

  result = 0.02051;
  if (*(double *)(a1 + 32) > 64.9365)
    return 11.866;
  return result;
}

float Espresso::AOT::DTrees::lstmGpuGp(uint64_t a1)
{
  float result;

  result = 0.025326;
  if (*(double *)(a1 + 32) > 64.9365)
    return 12.362;
  return result;
}

float Espresso::AOT::DTrees::lstmGpuHp(uint64_t a1)
{
  float result;

  result = 0.025842;
  if (*(double *)(a1 + 32) > 64.9365)
    return 22.586;
  return result;
}

void Espresso::AOT::OpPlacementPass::Run(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t **i;
  MIL::Builder::FunctionBuilder **v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count_vtbl *v10;
  void **v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  std::__shared_weak_count *v16;
  void *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t **j;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void **v24;
  void **v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  void *__p[2];
  void *v40[2];
  int v41;
  std::__shared_weak_count_vtbl *v42;
  std::__shared_weak_count_vtbl *v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  char v46[8];
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  MIL::Builder::FunctionBuilder *v52;
  void **v53;
  MIL::Builder::FunctionBuilder **v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v49 = 0x2B23829800000000;
  v50 = 0u;
  v51 = 0u;
  kdebug_trace();
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&v47, a2);
  MEMORY[0x19401BA88](v46, a2);
  MIL::Transform::ProgramTransformer::GetProgramBuilder((MIL::Transform::ProgramTransformer *)v46);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v40 = 0u;
  v41 = 1065353216;
  for (i = *(uint64_t ***)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2) + 16); i; i = (uint64_t **)*i)
  {
    (*(void (**)(uint64_t *))(*i[5] + 48))(i[5]);
    v52 = (MIL::Builder::FunctionBuilder *)&off_1E2DAEDD0;
    v53 = __p;
    v54 = &v52;
    MIL::Util::Walk();
    v7 = v54;
    if (v54 == &v52)
    {
      v7 = &v52;
      v8 = 4;
    }
    else
    {
      if (!v54)
        continue;
      v8 = 5;
    }
    (*((void (**)(void))*v7 + v8))();
  }
  std::make_unique[abi:ne180100]<Espresso::MILTranslator::NameGenerator,std::unordered_set<std::string>>((uint64_t)__p, (uint64_t *)&v42);
  v43 = v42;
  if (v42)
  {
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v42;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3660;
    v9->__shared_owners_ = 0;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v10;
    v44 = v9;
    v42 = 0;
    v11 = (void **)v40[0];
    if (!v40[0])
      goto LABEL_13;
  }
  else
  {
    v44 = 0;
    v42 = 0;
    v11 = (void **)v40[0];
    if (!v40[0])
      goto LABEL_13;
  }
  do
  {
    v15 = (void **)*v11;
    if (*((char *)v11 + 39) < 0)
      operator delete(v11[2]);
    operator delete(v11);
    v11 = v15;
  }
  while (v15);
LABEL_13:
  v12 = __p[0];
  __p[0] = 0;
  if (v12)
    operator delete(v12);
  v13 = *a3;
  v14 = a3[1];
  if (*a3 != v14)
  {
    do
    {
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(__p, a2, v13);
      v17 = __p[0];
      v16 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        goto LABEL_25;
      v18 = (unint64_t *)((char *)__p[1] + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
        if (v17)
        {
LABEL_26:
          MIL::Builder::ProgramBuilder::GetFunction();
          for (j = *(uint64_t ***)(MIL::Builder::FunctionBuilder::GetSpecializations(v52) + 16); j; j = (uint64_t **)*j)
          {
            *(_OWORD *)__p = 0u;
            *(_OWORD *)v40 = 0u;
            v41 = 1065353216;
            Espresso::AOT::OpPlacementPass::PlaceOpsInBlock(a1, (MIL::Builder::BlockBuilder *)j[5], __p, (_QWORD **)&v43);
            v24 = (void **)v40[0];
            if (v40[0])
            {
              do
              {
                while (1)
                {
                  v25 = (void **)*v24;
                  v26 = (std::__shared_weak_count *)v24[6];
                  if (v26)
                  {
                    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
                    do
                      v28 = __ldaxr(p_shared_owners);
                    while (__stlxr(v28 - 1, p_shared_owners));
                    if (!v28)
                    {
                      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                      std::__shared_weak_count::__release_weak(v26);
                    }
                  }
                  if (*((char *)v24 + 39) < 0)
                    break;
                  operator delete(v24);
                  v24 = v25;
                  if (!v25)
                    goto LABEL_43;
                }
                operator delete(v24[2]);
                operator delete(v24);
                v24 = v25;
              }
              while (v25);
            }
LABEL_43:
            v29 = __p[0];
            __p[0] = 0;
            if (v29)
              operator delete(v29);
          }
          v21 = (std::__shared_weak_count *)v53;
          if (v53)
          {
            v22 = (unint64_t *)(v53 + 1);
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
        }
      }
      else
      {
LABEL_25:
        if (v17)
          goto LABEL_26;
      }
      v13 += 24;
    }
    while (v13 != v14);
  }
  MIL::Transform::ProgramTransformer::GetProgram((MIL::Transform::ProgramTransformer *)v46);
  v30 = v44;
  if (v44)
  {
    v31 = (unint64_t *)&v44->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v45;
  if (v45)
  {
    v34 = (unint64_t *)&v45->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)v46);
  v36 = v48;
  if (v48)
  {
    v37 = (unint64_t *)&v48->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (E5RT::g_trace_analysis_level >= v49)
    kdebug_trace();
}

void sub_1910D2200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, Espresso::MILTranslator::NameGenerator *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, int a20,char a21,uint64_t a22,char a23)
{
  std::unique_ptr<Espresso::MILTranslator::NameGenerator>::~unique_ptr[abi:ne180100](&a14);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)&a19);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a23);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<Espresso::MILTranslator::NameGenerator,std::unordered_set<std::string>>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  _QWORD *v8;
  void *v9;
  unint64_t v10;
  void **v11;
  void *v12;
  void **v13;
  void *__p[2];
  void *v15[2];
  int v16;

  v4 = operator new();
  v5 = v4;
  v6 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = *(_QWORD **)(a1 + 16);
  __p[0] = v6;
  __p[1] = (void *)v7;
  v9 = *(void **)(a1 + 24);
  v15[0] = v8;
  v15[1] = v9;
  v16 = *(_DWORD *)(a1 + 32);
  if (v9)
  {
    v10 = v8[1];
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v10 >= v7)
        v10 %= v7;
    }
    else
    {
      v10 &= v7 - 1;
    }
    *((_QWORD *)v6 + v10) = v15;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  Espresso::MILTranslator::NameGenerator::NameGenerator(v4, __p);
  *a2 = v5;
  v11 = (void **)v15[0];
  if (v15[0])
  {
    do
    {
      v13 = (void **)*v11;
      if (*((char *)v11 + 39) < 0)
        operator delete(v11[2]);
      operator delete(v11);
      v11 = v13;
    }
    while (v13);
  }
  v12 = __p[0];
  __p[0] = 0;
  if (v12)
    operator delete(v12);
}

void sub_1910D23E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)va);
  MEMORY[0x19401CD90](v2, 0x10A0C408EF24B1CLL);
  _Unwind_Resume(a1);
}

void Espresso::AOT::OpPlacementPass::PlaceOpsInBlock(uint64_t a1, MIL::Builder::BlockBuilder *a2, _QWORD *a3, _QWORD **a4)
{
  char *v8;
  char *v9;
  std::__shared_weak_count *v10;
  MIL::Builder::OperationBuilder *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t i;
  uint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  MIL::Builder::Variable *v23;
  uint64_t Name;
  __int128 v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  _QWORD *v36;
  std::string::size_type *v37;
  std::string::size_type size;
  std::string::size_type v39;
  _QWORD *v40;
  MIL::Builder::OperationBuilder *v41;
  std::string::size_type v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _QWORD *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  char *v73;
  char *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::runtime_error *exception;
  MIL::Location *Location;
  std::string *v80;
  __int128 v81;
  uint64_t v82;
  MIL::Builder::OperationBuilder *v83;
  std::__shared_weak_count *v84;
  MIL::Builder::OperationBuilder *v85;
  std::__shared_weak_count *v86;
  std::string v87;
  std::string v88;
  _BYTE v89[32];
  int v90;
  MIL::Builder::OperationBuilder *v91;
  std::__shared_weak_count *v92;
  char *v93;
  char *v94;
  std::string *v95;

  MIL::Builder::BlockBuilder::GetOperations(a2);
  v8 = v93;
  v9 = v94;
  if (v93 != v94)
  {
    while (1)
    {
      v11 = *(MIL::Builder::OperationBuilder **)v8;
      v10 = (std::__shared_weak_count *)*((_QWORD *)v8 + 1);
      v91 = *(MIL::Builder::OperationBuilder **)v8;
      v92 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      if (!(*(unsigned int (**)(uint64_t, MIL::Builder::OperationBuilder *))(*(_QWORD *)a1 + 24))(a1, v11))
        break;
      for (i = 0; i < MIL::Builder::OperationBuilder::GetNumOutputs(v11); ++i)
      {
        *(_QWORD *)v89 = MIL::Builder::OperationBuilder::GetOutputName(v11);
        v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a3, *(uint64_t *)v89, (uint64_t)&std::piecewise_construct, (__int128 **)v89);
        v16 = (uint64_t)v92;
        if (v92)
        {
          v17 = (unint64_t *)&v92->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        v19 = (std::__shared_weak_count *)v15[6];
        v15[5] = (uint64_t)v11;
        v15[6] = v16;
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        v11 = v91;
      }
      MIL::Builder::OperationBuilder::GetBlocks(v11);
      v28 = *(_QWORD *)&v89[8];
      v27 = *(_QWORD *)v89;
      if (*(_QWORD *)v89)
      {
        v29 = *(void **)v89;
        if (*(_QWORD *)v89 != *(_QWORD *)&v89[8])
        {
          v82 = *(_QWORD *)&v89[8];
          do
          {
            v30 = *(std::__shared_weak_count **)(v28 - 8);
            if (v30)
            {
              v31 = (unint64_t *)&v30->__shared_owners_;
              do
                v32 = __ldaxr(v31);
              while (__stlxr(v32 - 1, v31));
              if (!v32)
              {
                ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                std::__shared_weak_count::__release_weak(v30);
              }
            }
            v28 -= 16;
          }
          while (v28 != v27);
          v29 = *(void **)v89;
          v28 = v82;
        }
        *(_QWORD *)&v89[8] = v27;
        operator delete(v29);
      }
      if (v27 != v28)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        Location = (MIL::Location *)MIL::Builder::OperationBuilder::GetLocation(v91);
        MIL::Location::GetDescription(Location);
        v80 = std::string::insert(&v88, 0, "Found an unsupported constant at ");
        v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
        *(_QWORD *)&v89[16] = *((_QWORD *)&v80->__r_.__value_.__l + 2);
        *(_OWORD *)v89 = v81;
        v80->__r_.__value_.__l.__size_ = 0;
        v80->__r_.__value_.__r.__words[2] = 0;
        v80->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)v89);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
LABEL_100:
      v66 = v92;
      if (v92)
      {
        v67 = (unint64_t *)&v92->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      v8 += 16;
      if (v8 == v9)
      {
        v8 = v93;
        goto LABEL_112;
      }
    }
    memset(v89, 0, sizeof(v89));
    v90 = 1065353216;
    MIL::Builder::OperationBuilder::GetInputArguments(v11);
    v22 = (_QWORD *)v88.__r_.__value_.__r.__words[2];
    if (v88.__r_.__value_.__r.__words[2])
    {
      do
      {
        v23 = (MIL::Builder::Variable *)v22[2];
        if (MIL::Builder::Variable::TryGetName(v23))
        {
          Name = MIL::Builder::Variable::GetName(v23);
          if (*(char *)(Name + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v87, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
          }
          else
          {
            v25 = *(_OWORD *)Name;
            v87.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
            *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v25;
          }
          if (std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(a3, (uint64_t)&v87))
          {
            v95 = &v87;
            v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a3, (uint64_t)&v87, (uint64_t)&std::piecewise_construct, (__int128 **)&v95);
            std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder> const&>((uint64_t)v89, v26 + 5, v26 + 5);
          }
          if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v87.__r_.__value_.__l.__data_);
        }
        v22 = (_QWORD *)*v22;
      }
      while (v22);
      v33 = (_QWORD *)v88.__r_.__value_.__r.__words[2];
      if (v88.__r_.__value_.__r.__words[2])
      {
        do
        {
          v34 = (_QWORD *)*v33;
          operator delete(v33);
          v33 = v34;
        }
        while (v34);
      }
    }
    v35 = (void *)v88.__r_.__value_.__r.__words[0];
    v88.__r_.__value_.__r.__words[0] = 0;
    if (v35)
      operator delete(v35);
    v36 = *(_QWORD **)&v89[16];
    if (!*(_QWORD *)&v89[16])
    {
LABEL_44:
      MIL::Builder::OperationBuilder::GetBlocks(v91);
      size = v88.__r_.__value_.__l.__size_;
      v37 = (std::string::size_type *)v88.__r_.__value_.__r.__words[0];
      if (v88.__r_.__value_.__r.__words[0] == v88.__r_.__value_.__l.__size_)
      {
        if (v88.__r_.__value_.__r.__words[0])
          goto LABEL_46;
      }
      else
      {
        do
        {
          v57 = (std::__shared_weak_count *)v37[1];
          v87.__r_.__value_.__r.__words[0] = *v37;
          v87.__r_.__value_.__l.__size_ = (std::string::size_type)v57;
          if (v57)
          {
            v58 = (unint64_t *)&v57->__shared_owners_;
            do
              v59 = __ldxr(v58);
            while (__stxr(v59 + 1, v58));
          }
          Espresso::AOT::OpPlacementPass::PlaceOpsInBlock(a1);
          if (v57)
          {
            v60 = (unint64_t *)&v57->__shared_owners_;
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
            }
          }
          v37 += 2;
        }
        while (v37 != (std::string::size_type *)size);
        v37 = (std::string::size_type *)v88.__r_.__value_.__r.__words[0];
        if (v88.__r_.__value_.__r.__words[0])
        {
LABEL_46:
          v39 = v88.__r_.__value_.__l.__size_;
          if ((std::string::size_type *)v88.__r_.__value_.__l.__size_ == v37)
          {
            v88.__r_.__value_.__l.__size_ = (std::string::size_type)v37;
            operator delete(v37);
            v40 = *(_QWORD **)&v89[16];
            if (!*(_QWORD *)&v89[16])
              goto LABEL_98;
          }
          else
          {
            do
            {
              v62 = *(std::__shared_weak_count **)(v39 - 8);
              if (v62)
              {
                v63 = (unint64_t *)&v62->__shared_owners_;
                do
                  v64 = __ldaxr(v63);
                while (__stlxr(v64 - 1, v63));
                if (!v64)
                {
                  ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                  std::__shared_weak_count::__release_weak(v62);
                }
              }
              v39 -= 16;
            }
            while ((std::string::size_type *)v39 != v37);
            v88.__r_.__value_.__l.__size_ = (std::string::size_type)v37;
            operator delete(v88.__r_.__value_.__l.__data_);
            v40 = *(_QWORD **)&v89[16];
            if (!*(_QWORD *)&v89[16])
              goto LABEL_98;
          }
          goto LABEL_106;
        }
      }
      v40 = *(_QWORD **)&v89[16];
      if (!*(_QWORD *)&v89[16])
      {
LABEL_98:
        v65 = *(void **)v89;
        *(_QWORD *)v89 = 0;
        if (v65)
          operator delete(v65);
        goto LABEL_100;
      }
      do
      {
LABEL_106:
        v69 = v40;
        v40 = (_QWORD *)*v40;
        v70 = (std::__shared_weak_count *)v69[3];
        if (v70)
        {
          v71 = (unint64_t *)&v70->__shared_owners_;
          do
            v72 = __ldaxr(v71);
          while (__stlxr(v72 - 1, v71));
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
        operator delete(v69);
      }
      while (v40);
      goto LABEL_98;
    }
    while (1)
    {
      v41 = (MIL::Builder::OperationBuilder *)v36[2];
      v42 = v36[3];
      v88.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
      v88.__r_.__value_.__l.__size_ = v42;
      if (!v42)
        break;
      v43 = (unint64_t *)(v42 + 8);
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
      v85 = v41;
      v86 = (std::__shared_weak_count *)v42;
      do
        v45 = __ldxr(v43);
      while (__stxr(v45 + 1, v43));
      v46 = v92;
      v83 = v91;
      v84 = v92;
      if (v92)
        goto LABEL_58;
LABEL_60:
      Espresso::AOT::OpPlacementPass::AddOpCopyForConsumer(a1, &v85, (uint64_t *)&v83, (uint64_t)a2, a3, a4);
      if (!v46)
        goto LABEL_64;
      v49 = (unint64_t *)&v46->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
        v51 = v86;
        if (v86)
        {
LABEL_65:
          v52 = (unint64_t *)&v51->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
      }
      else
      {
LABEL_64:
        v51 = v86;
        if (v86)
          goto LABEL_65;
      }
      v54 = (std::__shared_weak_count *)v88.__r_.__value_.__l.__size_;
      if (v88.__r_.__value_.__l.__size_)
      {
        v55 = (unint64_t *)(v88.__r_.__value_.__l.__size_ + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v36 = (_QWORD *)*v36;
      if (!v36)
        goto LABEL_44;
    }
    v85 = v41;
    v86 = 0;
    v46 = v92;
    v83 = v91;
    v84 = v92;
    if (!v92)
      goto LABEL_60;
LABEL_58:
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
    goto LABEL_60;
  }
LABEL_112:
  if (v8)
  {
    v73 = v94;
    v74 = v8;
    if (v94 != v8)
    {
      do
      {
        v75 = (std::__shared_weak_count *)*((_QWORD *)v73 - 1);
        if (v75)
        {
          v76 = (unint64_t *)&v75->__shared_owners_;
          do
            v77 = __ldaxr(v76);
          while (__stlxr(v77 - 1, v76));
          if (!v77)
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
          }
        }
        v73 -= 16;
      }
      while (v73 != v8);
      v74 = v93;
    }
    v94 = v8;
    operator delete(v74);
  }
}

void sub_1910D2AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void *v34;
  int v35;
  uint64_t v36;

  if (a34 < 0)
    operator delete(__p);
  if (a26 < 0)
  {
    operator delete(a21);
    if ((v35 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v36 - 144);
      std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100]((void **)(v36 - 128));
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v34);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v36 - 144);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100]((void **)(v36 - 128));
  _Unwind_Resume(a1);
}

void Espresso::AOT::OpPlacementPass::AddOpCopyForConsumer(uint64_t a1, MIL::Builder::OperationBuilder **a2, uint64_t *a3, uint64_t a4, _QWORD *a5, _QWORD **a6)
{
  std::__shared_weak_count *v12;
  std::__shared_weak_count_vtbl *v13;
  uint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  uint64_t OutputName;
  __int128 v18;
  uint64_t *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  MIL::Builder::Variable *v36;
  uint64_t Name;
  __int128 v38;
  uint64_t *v39;
  _QWORD *v40;
  _QWORD *v41;
  void *v42;
  _QWORD *v43;
  std::string::size_type v44;
  std::string::size_type v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *size;
  unint64_t *v58;
  unint64_t v59;
  _QWORD *v60;
  void *v61;
  char *v62;
  _QWORD *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  char *v67;
  void *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  MIL::Builder::OperationBuilder *v72;
  std::__shared_weak_count *v73;
  std::string::size_type v74;
  std::__shared_weak_count *v75;
  std::string v76;
  std::string __p;
  _BYTE v78[32];
  int v79;
  std::string v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  MIL::Builder::OperationBuilder *v83;
  std::__shared_weak_count *v84;
  std::string v85;
  std::__shared_weak_count *v86;
  __int128 v87;
  __int128 v88;
  int v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  MIL::Builder::OperationBuilder *v92;
  std::__shared_weak_count *v93;
  std::string *v94;

  MIL::Builder::OperationBuilder::CreateOperation(*a2);
  v90 = v87;
  if ((_QWORD)v87)
  {
    v12 = (std::__shared_weak_count *)operator new();
    v13 = (std::__shared_weak_count_vtbl *)v87;
    v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2F98;
    v12->__shared_owners_ = 0;
    v12->__shared_weak_owners_ = 0;
    v12[1].__vftable = v13;
  }
  else
  {
    v12 = 0;
  }
  v91 = v12;
  *(_QWORD *)&v87 = 0;
  MIL::Builder::OperationBuilder::Make();
  if (v91)
  {
    p_shared_owners = &v91->__shared_owners_;
    do
      v15 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v15 - 1, (unint64_t *)p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v16 = 0;
  v87 = 0u;
  v88 = 0u;
  v89 = 1065353216;
  while (v16 < MIL::Builder::OperationBuilder::GetNumOutputs(*a2))
  {
    OutputName = MIL::Builder::OperationBuilder::GetOutputName(*a2);
    if (*(char *)(OutputName + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v78, *(const std::string::value_type **)OutputName, *(_QWORD *)(OutputName + 8));
    }
    else
    {
      v18 = *(_OWORD *)OutputName;
      *(_QWORD *)&v78[16] = *(_QWORD *)(OutputName + 16);
      *(_OWORD *)v78 = v18;
    }
    Espresso::MILTranslator::NameGenerator::NameForPrefix(*a6, (uint64_t)v78, (uint64_t)&__p);
    v76.__r_.__value_.__r.__words[0] = (std::string::size_type)v78;
    v19 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v87, (uint64_t)v78, (uint64_t)&std::piecewise_construct, (__int128 **)&v76);
    std::string::operator=((std::string *)(v19 + 5), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v85, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v85 = __p;
    MIL::Builder::OperationBuilder::RenameOutput();
    v20 = v86;
    if (!v86)
      goto LABEL_23;
    v21 = (unint64_t *)&v86->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
      if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_24:
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_28;
        goto LABEL_10;
      }
    }
    else
    {
LABEL_23:
      if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_24;
    }
    operator delete(v85.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_28:
      if ((v78[23] & 0x80000000) == 0)
        goto LABEL_11;
      goto LABEL_29;
    }
LABEL_10:
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v78[23] & 0x80000000) == 0)
      goto LABEL_11;
LABEL_29:
    operator delete(*(void **)v78);
LABEL_11:
    ++v16;
  }
  v83 = v92;
  v84 = v93;
  if (v93)
  {
    v23 = (unint64_t *)&v93->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = (std::__shared_weak_count *)a3[1];
  v81 = *a3;
  v82 = v25;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  MIL::Builder::BlockBuilder::AddOperation();
  v28 = v82;
  if (v82)
  {
    v29 = (unint64_t *)&v82->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      v31 = v84;
      if (v84)
        goto LABEL_41;
      goto LABEL_44;
    }
  }
  v31 = v84;
  if (!v84)
    goto LABEL_44;
LABEL_41:
  v32 = (unint64_t *)&v31->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (v33)
  {
LABEL_44:
    v34 = (uint64_t *)v88;
    if (!(_QWORD)v88)
      goto LABEL_45;
    do
    {
LABEL_117:
      if (*((char *)v34 + 63) < 0)
        std::string::__init_copy_ctor_external(&v80, (const std::string::value_type *)v34[5], v34[6]);
      else
        v80 = *(std::string *)(v34 + 5);
      MIL::Builder::OperationBuilder::RenameArgument();
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v80.__r_.__value_.__l.__data_);
      v34 = (uint64_t *)*v34;
    }
    while (v34);
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
    v34 = (uint64_t *)v88;
    if ((_QWORD)v88)
      goto LABEL_117;
  }
LABEL_45:
  memset(v78, 0, sizeof(v78));
  v79 = 1065353216;
  MIL::Builder::OperationBuilder::GetInputArguments(v92);
  v35 = (_QWORD *)__p.__r_.__value_.__r.__words[2];
  if (__p.__r_.__value_.__r.__words[2])
  {
    do
    {
      v36 = (MIL::Builder::Variable *)v35[2];
      if (MIL::Builder::Variable::TryGetName(v36))
      {
        Name = MIL::Builder::Variable::GetName(v36);
        if (*(char *)(Name + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v76, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
        }
        else
        {
          v38 = *(_OWORD *)Name;
          v76.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
          *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v38;
        }
        if (std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(a5, (uint64_t)&v76))
        {
          v94 = &v76;
          v39 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a5, (uint64_t)&v76, (uint64_t)&std::piecewise_construct, (__int128 **)&v94);
          std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder> const&>((uint64_t)v78, v39 + 5, v39 + 5);
        }
        if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v76.__r_.__value_.__l.__data_);
      }
      v35 = (_QWORD *)*v35;
    }
    while (v35);
    v40 = (_QWORD *)__p.__r_.__value_.__r.__words[2];
    if (__p.__r_.__value_.__r.__words[2])
    {
      do
      {
        v41 = (_QWORD *)*v40;
        operator delete(v40);
        v40 = v41;
      }
      while (v41);
    }
  }
  v42 = (void *)__p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = 0;
  if (v42)
    operator delete(v42);
  v43 = *(_QWORD **)&v78[16];
  if (*(_QWORD *)&v78[16])
  {
    while (1)
    {
      v44 = v43[2];
      v45 = v43[3];
      __p.__r_.__value_.__r.__words[0] = v44;
      __p.__r_.__value_.__l.__size_ = v45;
      if (!v45)
        break;
      v46 = (unint64_t *)(v45 + 8);
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
      v74 = v44;
      v75 = (std::__shared_weak_count *)v45;
      do
        v48 = __ldxr(v46);
      while (__stxr(v48 + 1, v46));
      v49 = v93;
      v72 = v92;
      v73 = v93;
      if (v93)
        goto LABEL_71;
LABEL_73:
      Espresso::AOT::OpPlacementPass::AddOpCopyForConsumer(a1, &v74, &v72, a4, a5, a6);
      if (!v49)
        goto LABEL_77;
      v52 = (unint64_t *)&v49->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
        v54 = v75;
        if (v75)
        {
LABEL_78:
          v55 = (unint64_t *)&v54->__shared_owners_;
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
      }
      else
      {
LABEL_77:
        v54 = v75;
        if (v75)
          goto LABEL_78;
      }
      size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v58 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v43 = (_QWORD *)*v43;
      if (!v43)
      {
        v60 = *(_QWORD **)&v78[16];
        if (*(_QWORD *)&v78[16])
        {
          do
          {
            v63 = v60;
            v60 = (_QWORD *)*v60;
            v64 = (std::__shared_weak_count *)v63[3];
            if (v64)
            {
              v65 = (unint64_t *)&v64->__shared_owners_;
              do
                v66 = __ldaxr(v65);
              while (__stlxr(v66 - 1, v65));
              if (!v66)
              {
                ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                std::__shared_weak_count::__release_weak(v64);
              }
            }
            operator delete(v63);
          }
          while (v60);
        }
        goto LABEL_89;
      }
    }
    v74 = v44;
    v75 = 0;
    v49 = v93;
    v72 = v92;
    v73 = v93;
    if (!v93)
      goto LABEL_73;
LABEL_71:
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
    goto LABEL_73;
  }
LABEL_89:
  v61 = *(void **)v78;
  *(_QWORD *)v78 = 0;
  if (v61)
    operator delete(v61);
  v62 = (char *)v88;
  if ((_QWORD)v88)
  {
    while (1)
    {
      v67 = *(char **)v62;
      if (v62[63] < 0)
      {
        operator delete(*((void **)v62 + 5));
        if ((v62[39] & 0x80000000) == 0)
          goto LABEL_100;
LABEL_103:
        operator delete(*((void **)v62 + 2));
        operator delete(v62);
        v62 = v67;
        if (!v67)
          break;
      }
      else
      {
        if (v62[39] < 0)
          goto LABEL_103;
LABEL_100:
        operator delete(v62);
        v62 = v67;
        if (!v67)
          break;
      }
    }
  }
  v68 = (void *)v87;
  *(_QWORD *)&v87 = 0;
  if (v68)
    operator delete(v68);
  v69 = v93;
  if (v93)
  {
    v70 = (unint64_t *)&v93->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
}

void sub_1910D3308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,char a43,uint64_t a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;
  uint64_t v54;

  v54 = *(_QWORD *)(v52 - 176);
  *(_QWORD *)(v52 - 176) = 0;
  if (v54)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::ConstantPlacementPass::MatchOp(Espresso::AOT::ConstantPlacementPass *this, MIL::Builder::OperationBuilder *a2)
{
  uint64_t Operator;

  Operator = MIL::Builder::OperationBuilder::GetOperator(a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)Operator + 104))(Operator);
}

uint64_t Espresso::AOT::TensorBufferToTensorPlacementPass::MatchOp(Espresso::AOT::TensorBufferToTensorPlacementPass *this, MIL::Builder::OperationBuilder *a2)
{
  uint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_count v7;
  __int128 v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  void *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  void *v18;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::string v22;
  void *__p;
  std::__shared_weak_count *v24;

  MIL::Builder::OperationBuilder::GetContext(a2);
  if (v24)
  {
    p_shared_owners = &v24->__shared_owners_;
    do
      v4 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v4 - 1, (unint64_t *)p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  (*(void (**)(void **__return_ptr, void *))(*(_QWORD *)__p + 24))(&__p, __p);
  v5 = (std::__shared_weak_count *)__p;
  v6 = v24;
  if (__p == v24)
  {
LABEL_27:
    if (v5)
    {
      v14 = v24;
      v15 = v5;
      if (v24 != v5)
      {
        do
        {
          if (SHIBYTE(v14[-1].__shared_weak_owners_) < 0)
            operator delete(v14[-1].__vftable);
          --v14;
        }
        while (v14 != v5);
        v15 = __p;
      }
      v24 = v5;
      operator delete(v15);
    }
    return 0;
  }
  while (1)
  {
    if (SHIBYTE(v5->__shared_weak_owners_) < 0)
    {
      std::string::__init_copy_ctor_external(&v22, (const std::string::value_type *)v5->__vftable, v5->__shared_owners_);
    }
    else
    {
      v7 = v5->std::__shared_count;
      v22.__r_.__value_.__r.__words[2] = v5->__shared_weak_owners_;
      *(std::__shared_count *)&v22.__r_.__value_.__l.__data_ = v7;
    }
    MIL::MILContext::GetOpset();
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    v22.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
    *(_OWORD *)&v22.__r_.__value_.__r.__words[1] = xmmword_191A849B0;
    strcpy(v22.__r_.__value_.__l.__data_, "tensor_buffer_to_tensor");
    MIL::IROpset::TryGetOperatorSharedPtr();
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    MIL::Builder::OperationBuilder::TryGetOperatorSharedPtr(a2);
    v8 = *(_OWORD *)&v22.__r_.__value_.__l.__data_;
    if (!v22.__r_.__value_.__l.__size_)
      goto LABEL_18;
    v9 = (unint64_t *)(v22.__r_.__value_.__l.__size_ + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v8 + 1) + 16))(*((_QWORD *)&v8 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v8 + 1));
      v11 = v21;
      if (!v21)
        goto LABEL_24;
    }
    else
    {
LABEL_18:
      v11 = v21;
      if (!v21)
        goto LABEL_24;
    }
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
LABEL_24:
    if (v20 == (_QWORD)v8)
      break;
    if (++v5 == v6)
    {
      v5 = (std::__shared_weak_count *)__p;
      goto LABEL_27;
    }
  }
  v16 = (std::__shared_weak_count *)__p;
  if (__p)
  {
    v17 = v24;
    v18 = __p;
    if (v24 != __p)
    {
      do
      {
        if (SHIBYTE(v17[-1].__shared_weak_owners_) < 0)
          operator delete(v17[-1].__vftable);
        --v17;
      }
      while (v17 != v16);
      v18 = __p;
    }
    v24 = v16;
    operator delete(v18);
  }
  return 1;
}

void sub_1910D3700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_1910D3714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va1);
  _Unwind_Resume(a1);
}

void sub_1910D3730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19)
{
  if (a18 < 0)
    operator delete(__p);
  std::vector<std::string>::~vector[abi:ne180100](&a19);
  _Unwind_Resume(a1);
}

void Espresso::AOT::ConstantPlacementPass::~ConstantPlacementPass(Espresso::AOT::ConstantPlacementPass *this)
{
  Espresso::AOT::AbstractMILPass::~AbstractMILPass(this);
  JUMPOUT(0x19401CD90);
}

void std::__function::__func<`anonymous namespace'::CollectOpnames(MIL::IRProgram const&)::$_0,std::allocator<`anonymous namespace'::CollectOpnames(MIL::IRProgram const&)::$_0>,BOOL ()(MIL::IROperation const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<`anonymous namespace'::CollectOpnames(MIL::IRProgram const&)::$_0,std::allocator<`anonymous namespace'::CollectOpnames(MIL::IRProgram const&)::$_0>,BOOL ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DAEDD0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<`anonymous namespace'::CollectOpnames(MIL::IRProgram const&)::$_0,std::allocator<`anonymous namespace'::CollectOpnames(MIL::IRProgram const&)::$_0>,BOOL ()(MIL::IROperation const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DAEDD0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<`anonymous namespace'::CollectOpnames(MIL::IRProgram const&)::$_0,std::allocator<`anonymous namespace'::CollectOpnames(MIL::IRProgram const&)::$_0>,BOOL ()(MIL::IROperation const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  void **v8;
  uint64_t v9;
  void **v10;
  void *v11;
  MIL::IRArgument **v12;
  MIL::IRArgument **v13;
  uint64_t v14;
  uint64_t Name;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  void *__p;
  void **v21;

  v4 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 160))(a2);
  v5 = v4 + 1;
  v6 = (_QWORD *)*v4;
  if ((_QWORD *)*v4 != v4 + 1)
  {
    do
    {
      v12 = (MIL::IRArgument **)v6[7];
      v13 = (MIL::IRArgument **)v6[8];
      while (v12 != v13)
      {
        if ((*(unsigned int (**)(MIL::IRArgument *))(*(_QWORD *)*v12 + 16))(*v12))
        {
          v14 = *(_QWORD *)(a1 + 8);
          Name = MIL::IRArgument::GetName(*v12);
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v14, Name, Name);
        }
        v12 += 2;
      }
      v16 = (_QWORD *)v6[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v6[2];
          v18 = *v17 == (_QWORD)v6;
          v6 = v17;
        }
        while (!v18);
      }
      v6 = v17;
    }
    while (v17 != v5);
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 200))(&__p, a2);
  v7 = (void **)__p;
  v8 = v21;
  if (__p != v21)
  {
    v9 = *(_QWORD *)(a1 + 8);
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v9, (uint64_t)v7, (uint64_t)v7);
      v7 += 3;
    }
    while (v7 != v8);
    v7 = (void **)__p;
  }
  if (v7)
  {
    v10 = v21;
    v11 = v7;
    if (v21 != v7)
    {
      do
      {
        if (*((char *)v10 - 1) < 0)
          operator delete(*(v10 - 3));
        v10 -= 3;
      }
      while (v10 != v7);
      v11 = __p;
    }
    v21 = v7;
    operator delete(v11);
  }
  return 1;
}

void sub_1910D396C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void *a11)
{
  if (a10)
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<`anonymous namespace'::CollectOpnames(MIL::IRProgram const&)::$_0,std::allocator<`anonymous namespace'::CollectOpnames(MIL::IRProgram const&)::$_0>,BOOL ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN12_GLOBAL__N_114CollectOpnamesERKN3MIL9IRProgramEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN12_GLOBAL__N_114CollectOpnamesERKN3MIL9IRProgramEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN12_GLOBAL__N_114CollectOpnamesERKN3MIL9IRProgramEE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN12_GLOBAL__N_114CollectOpnamesERKN3MIL9IRProgramEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<`anonymous namespace'::CollectOpnames(MIL::IRProgram const&)::$_0,std::allocator<`anonymous namespace'::CollectOpnames(MIL::IRProgram const&)::$_0>,BOOL ()(MIL::IROperation const&)>::target_type()
{
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void **v21;
  unsigned __int8 *j;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void **v26;
  unsigned __int8 *i;
  _QWORD *v28;
  std::string *v29;
  __int128 *v30;
  __int128 v31;
  float v32;
  float v33;
  _QWORD *v34;
  _QWORD *v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  size_t prime;
  int8x8_t v40;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD v47[2];
  char v48;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v47, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v23 = v15[1];
            if (v23 == v11)
            {
              v24 = *((unsigned __int8 *)v15 + 39);
              if ((v24 & 0x80u) == 0)
                v25 = *((unsigned __int8 *)v15 + 39);
              else
                v25 = v15[3];
              if (v25 == v17)
              {
                v26 = (const void **)(v15 + 2);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  for (i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    v26 = (const void **)((char *)v26 + 1);
                    if (!--v24)
                      return v15;
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              v21 = (const void **)(v15 + 2);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                for (j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  v21 = (const void **)((char *)v21 + 1);
                  if (!--v19)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v28 = operator new(0x38uLL);
  v47[0] = v28;
  v47[1] = a1 + 16;
  v48 = 0;
  *v28 = 0;
  v28[1] = v11;
  v29 = (std::string *)(v28 + 2);
  v30 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v29, *(const std::string::value_type **)v30, *((_QWORD *)v30 + 1));
  }
  else
  {
    v31 = *v30;
    v28[4] = *((_QWORD *)v30 + 2);
    *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v31;
  }
  v28[5] = 0;
  v28[6] = 0;
  v48 = 1;
  v32 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v33 = *(float *)(a1 + 32);
  if (!v12 || (float)(v33 * (float)v12) < v32)
  {
    v36 = 1;
    if (v12 >= 3)
      v36 = (v12 & (v12 - 1)) != 0;
    v37 = v36 | (2 * v12);
    v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38)
      prime = v38;
    else
      prime = v37;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v40)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v40)
    {
      v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v40 < 3uLL || (v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        v41 = std::__next_prime(v41);
      }
      else
      {
        v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2)
          v41 = v43;
      }
      if (prime <= v41)
        prime = v41;
      if (prime < *(_QWORD *)&v40)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v44 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v44 & v11;
      v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v44 & v11));
      v35 = (_QWORD *)v47[0];
      if (v34)
        goto LABEL_57;
    }
LABEL_81:
    *v35 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v47[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v47[0])
    {
      v45 = *(_QWORD *)(*(_QWORD *)v47[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v45 >= v12)
          v45 %= v12;
      }
      else
      {
        v45 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_92;
  }
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v35 = (_QWORD *)v47[0];
  if (!v34)
    goto LABEL_81;
LABEL_57:
  *v35 = *v34;
  *v34 = v47[0];
LABEL_92:
  v15 = (uint64_t *)v47[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_1910D3E54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1910D3E68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<`anonymous namespace'::CollectOpnames(MIL::IRProgram const&)::$_0,std::allocator<`anonymous namespace'::CollectOpnames(MIL::IRProgram const&)::$_0>,BOOL ()(MIL::IROperation const&)>::operator()(void **a1, void **a2, void **a3)
{
  void **v5;
  void *v6;

  v5 = (void **)*a1;
  v6 = a2;
  if (v5 != a2)
  {
    do
    {
      if (*((char *)v5 - 1) < 0)
        operator delete(*(v5 - 3));
      v5 -= 3;
    }
    while (v5 != a2);
    v6 = *a3;
  }
  *a1 = a2;
  operator delete(v6);
}

_QWORD *Espresso::AOT::MILCompilerForBnns::MILCompilerForBnns(_QWORD *a1, const Espresso::AOT::AOTCompilerOptions *a2, uint64_t a3)
{
  void *v6;
  unint64_t v7;
  _QWORD *v8;
  void *v9;
  unint64_t v10;
  void **v11;
  void *v12;
  void **v14;
  void *__p[2];
  void *v16[2];
  int v17;
  _BYTE v18[136];

  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v18, a2);
  v6 = *(void **)a3;
  v7 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v8 = *(_QWORD **)(a3 + 16);
  __p[0] = v6;
  __p[1] = (void *)v7;
  v9 = *(void **)(a3 + 24);
  v16[0] = v8;
  v16[1] = v9;
  v17 = *(_DWORD *)(a3 + 32);
  if (v9)
  {
    v10 = v8[1];
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v10 >= v7)
        v10 %= v7;
    }
    else
    {
      v10 &= v7 - 1;
    }
    *((_QWORD *)v6 + v10) = v16;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
  }
  Espresso::AOT::AbstractMILCompiler::AbstractMILCompiler((uint64_t)a1, (const Espresso::AOT::AOTCompilerOptions *)v18, (uint64_t)__p);
  v11 = (void **)v16[0];
  if (v16[0])
  {
    do
    {
      v14 = (void **)*v11;
      if (*((char *)v11 + 63) < 0)
      {
        operator delete(v11[5]);
        if (*((char *)v11 + 39) < 0)
LABEL_16:
          operator delete(v11[2]);
      }
      else if (*((char *)v11 + 39) < 0)
      {
        goto LABEL_16;
      }
      operator delete(v11);
      v11 = v14;
    }
    while (v14);
  }
  v12 = __p[0];
  __p[0] = 0;
  if (v12)
    operator delete(v12);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v18);
  *a1 = &off_1E2DA0610;
  Espresso::AOT::MILCompilerForBnns::ExtractOptions(a2, (uint64_t)(a1 + 33));
  a1[46] = 0;
  a1[47] = 0;
  a1[48] = 0;
  return a1;
}

void sub_1910D4018(_Unwind_Exception *a1)
{
  Espresso::AOT::AbstractMILCompiler *v1;

  Espresso::AOT::AbstractMILCompiler::~AbstractMILCompiler(v1);
  _Unwind_Resume(a1);
}

void sub_1910D402C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a14);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForBnns::ExtractOptions(Espresso::AOT::MILCompilerForBnns *this@<X0>, uint64_t a2@<X8>)
{
  Espresso::AOT::AOTCompilerOptions *v3;
  uint64_t Output;
  __int128 v6;
  char DumpIrOnly;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  E5Common::E5PlatformManager *Platforms;
  E5Common::E5PlatformManager *v13;
  uint64_t v14;
  const std::string *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  void *v20;
  char *v21;
  uint64_t *v22;
  uint64_t *v23;
  void **v24;
  void **v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  void **v29;
  void **v30;
  uint64_t v31;
  void *v32;
  std::logic_error *v33;
  std::logic_error *exception;
  Espresso::AOT::AOTCompilerOptions *v35;
  std::string v36;
  void *v37;
  void **v38;
  char v39;
  _BYTE __p[24];
  void *v41[2];
  void *v42;
  _BYTE v43[351];
  __int128 *v44;

  v3 = this;
  Espresso::AOT::CompilerOptionsForE5::CompilerOptionsForE5((Espresso::AOT::CompilerOptionsForE5 *)v43, this);
  Output = Espresso::AOT::AOTCompilerOptions::GetOutput(v3);
  if (*(char *)(Output + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)Output, *(_QWORD *)(Output + 8));
  }
  else
  {
    v6 = *(_OWORD *)Output;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(Output + 16);
    *(_OWORD *)a2 = v6;
  }
  *(_BYTE *)(a2 + 24) = 0;
  DumpIrOnly = Espresso::AOT::CompilerOptionsForE5::GetDumpIrOnly((Espresso::AOT::CompilerOptionsForE5 *)v43);
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_BYTE *)(a2 + 25) = DumpIrOnly;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 56) = 0;
  *(_DWORD *)(a2 + 96) = 1065353216;
  __p[23] = 4;
  strcpy(__p, "bnns");
  Espresso::AOT::AOTCompilerOptions::GetOptions((uint64_t)v3, (uint64_t)__p, (uint64_t)v41);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  __p[23] = 15;
  strcpy(__p, "compile-on-load");
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v41, (uint64_t)__p);
  v9 = v8;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (!v9)
      goto LABEL_12;
  }
  else if (!v8)
  {
    goto LABEL_12;
  }
  if (*((_DWORD *)v9 + 16))
    std::__throw_bad_variant_access[abi:ne180100]();
  *(_BYTE *)(a2 + 24) = *((_BYTE *)v9 + 40);
LABEL_12:
  *(_QWORD *)__p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_191A72420;
  strcpy(*(char **)__p, "experimental-target-override");
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v41, (uint64_t)__p);
  v11 = v10;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (!v11)
      goto LABEL_21;
  }
  else if (!v10)
  {
    goto LABEL_21;
  }
  if (*((_DWORD *)v11 + 16) != 3)
    std::__throw_bad_variant_access[abi:ne180100]();
  if (*((char *)v11 + 63) < 0)
  {
    if (v11[6])
      goto LABEL_19;
LABEL_21:
    Platforms = (E5Common::E5PlatformManager *)Espresso::AOT::CompilerOptionsForE5::GetPlatforms((Espresso::AOT::CompilerOptionsForE5 *)v43);
    v13 = Platforms;
    if (*((_QWORD *)Platforms + 3) != 1)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Only one platform is supported.");
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
    }
    v14 = E5Common::E5PlatformManager::Instance(Platforms);
    v15 = (const std::string *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 24))(v14, *((_QWORD *)v13 + 2) + 16);
    std::string::operator=((std::string *)(a2 + 32), v15);
    goto LABEL_23;
  }
  if (!*((_BYTE *)v11 + 63))
    goto LABEL_21;
LABEL_19:
  std::string::operator=((std::string *)(a2 + 32), (const std::string *)(v11 + 5));
LABEL_23:
  __p[23] = 7;
  strcpy(__p, "options");
  v16 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v41, (uint64_t)__p);
  v17 = v16;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (!v17)
      goto LABEL_61;
  }
  else if (!v16)
  {
    goto LABEL_61;
  }
  if (*((_DWORD *)v17 + 16) != 3)
    std::__throw_bad_variant_access[abi:ne180100]();
  v39 = 1;
  LOWORD(v37) = 44;
  E5Common::StringUtils::Split(v17 + 5, (char *)&v37, (uint64_t)__p);
  if (v39 < 0)
  {
    operator delete(v37);
    v18 = *(uint64_t **)__p;
    v19 = *(uint64_t **)&__p[8];
    if (*(_QWORD *)__p == *(_QWORD *)&__p[8])
    {
LABEL_30:
      if (v18)
        goto LABEL_54;
      goto LABEL_61;
    }
  }
  else
  {
    v18 = *(uint64_t **)__p;
    v19 = *(uint64_t **)&__p[8];
    if (*(_QWORD *)__p == *(_QWORD *)&__p[8])
      goto LABEL_30;
  }
  v35 = v3;
  do
  {
    *((_BYTE *)&v36.__r_.__value_.__s + 23) = 1;
    LOWORD(v36.__r_.__value_.__l.__data_) = 61;
    E5Common::StringUtils::Split(v18, (char *)&v36, (uint64_t)&v37);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v36.__r_.__value_.__l.__data_);
      v21 = (char *)v37;
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v38 - (_BYTE *)v37) >> 3) < 2)
      {
LABEL_42:
        memset(&v36, 0, sizeof(v36));
        goto LABEL_44;
      }
    }
    else
    {
      v21 = (char *)v37;
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v38 - (_BYTE *)v37) >> 3) < 2)
        goto LABEL_42;
    }
    if (v21[47] < 0)
    {
      std::string::__init_copy_ctor_external(&v36, *((const std::string::value_type **)v21 + 3), *((_QWORD *)v21 + 4));
      v21 = (char *)v37;
    }
    else
    {
      v36 = *(std::string *)(v21 + 1);
    }
LABEL_44:
    v44 = (__int128 *)v21;
    v22 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2 + 64, (uint64_t)v21, (uint64_t)&std::piecewise_construct, &v44);
    v23 = v22 + 5;
    if (*((char *)v22 + 63) < 0)
    {
      operator delete((void *)*v23);
      *(_OWORD *)v23 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
      v24 = (void **)v37;
      v23[2] = v36.__r_.__value_.__r.__words[2];
      if (!v24)
        goto LABEL_36;
    }
    else
    {
      *(_OWORD *)v23 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
      v24 = (void **)v37;
      v22[7] = v36.__r_.__value_.__r.__words[2];
      if (!v24)
        goto LABEL_36;
    }
    v25 = v38;
    v20 = v24;
    if (v38 != v24)
    {
      do
      {
        if (*((char *)v25 - 1) < 0)
          operator delete(*(v25 - 3));
        v25 -= 3;
      }
      while (v25 != v24);
      v20 = v37;
    }
    v38 = v24;
    operator delete(v20);
LABEL_36:
    v18 += 3;
  }
  while (v18 != v19);
  v18 = *(uint64_t **)__p;
  v3 = v35;
  if (*(_QWORD *)__p)
  {
LABEL_54:
    v26 = *(uint64_t **)&__p[8];
    v27 = v18;
    if (*(uint64_t **)&__p[8] != v18)
    {
      do
      {
        if (*((char *)v26 - 1) < 0)
          operator delete((void *)*(v26 - 3));
        v26 -= 3;
      }
      while (v26 != v18);
      v27 = *(uint64_t **)__p;
    }
    *(_QWORD *)&__p[8] = v18;
    operator delete(v27);
  }
LABEL_61:
  *(_BYTE *)(a2 + 56) = Espresso::AOT::AOTCompilerOptions::GetBuildForProfiling(v3);
  v28 = *(unsigned __int8 *)(a2 + 23);
  if ((v28 & 0x80u) != 0)
    v28 = *(_QWORD *)(a2 + 8);
  if (!v28)
  {
    v33 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v33, "--output is required and must be non-empty.");
    v33->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v33, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v29 = (void **)v42;
  if (v42)
  {
    do
    {
      v30 = (void **)*v29;
      v31 = *((unsigned int *)v29 + 16);
      if ((_DWORD)v31 != -1)
        ((void (*)(_BYTE *, void **))off_1E2DD14B0[v31])(__p, v29 + 5);
      *((_DWORD *)v29 + 16) = -1;
      if (*((char *)v29 + 39) < 0)
        operator delete(v29[2]);
      operator delete(v29);
      v29 = v30;
    }
    while (v30);
  }
  v32 = v41[0];
  v41[0] = 0;
  if (v32)
    operator delete(v32);
  Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5((Espresso::AOT::CompilerOptionsForE5 *)v43);
}

void sub_1910D45FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  Espresso::AOT::MILCompilerForBnns::Options *v34;
  void *v35;

  __cxa_free_exception(v35);
  std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>::~unordered_map[abi:ne180100]((uint64_t)&a29);
  Espresso::AOT::MILCompilerForBnns::Options::~Options(v34);
  Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5((Espresso::AOT::CompilerOptionsForE5 *)&a34);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::MILCompilerForBnns::Options::AssertValid(uint64_t this)
{
  std::logic_error *exception;

  if ((*(char *)(this + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(this + 23))
      return this;
LABEL_5:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "--output is required and must be non-empty.");
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  if (!*(_QWORD *)(this + 8))
    goto LABEL_5;
  return this;
}

void sub_1910D4788(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForBnns::Options::~Options(Espresso::AOT::MILCompilerForBnns::Options *this)
{
  void **v2;
  void *v3;
  void **v4;

  v2 = (void **)*((_QWORD *)this + 10);
  if (v2)
  {
    do
    {
      v4 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0)
LABEL_12:
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_12;
      }
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    operator delete(v3);
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    if ((*((char *)this + 23) & 0x80000000) == 0)
      return;
LABEL_14:
    operator delete(*(void **)this);
    return;
  }
  operator delete(*((void **)this + 4));
  if (*((char *)this + 23) < 0)
    goto LABEL_14;
}

void Espresso::AOT::MILCompilerForBnns::Run(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  char *v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  void **v17;
  void **v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *v22;
  char v23;
  std::string *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  signed __int8 v27;
  std::string *v28;
  uint64_t v29;
  uint64_t *i;
  _QWORD *v31;
  std::string::size_type v32;
  _QWORD *v33;
  std::string::size_type v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::string::size_type v41;
  _QWORD *v42;
  uint64_t Attribute;
  uint64_t v44;
  MIL::IRDictionaryValue *v45;
  MIL::IRDictionaryValue *v46;
  _QWORD *v47;
  uint64_t j;
  _QWORD *v49;
  std::string::size_type v50;
  std::__shared_weak_count *v51;
  std::string::size_type v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  std::string::size_type v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *size;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  _QWORD *v78;
  void *v79;
  _QWORD *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__fs::filesystem::path::__string_view v87;
  __int128 *v88;
  std::basic_string_view<_CharT, _Traits>::size_type v89;
  std::basic_string_view<_CharT, _Traits>::size_type v90;
  void **v91;
  uint64_t v92;
  unsigned __int8 v93;
  int v94;
  std::__fs::filesystem::path::__string_view v95;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v97;
  std::basic_string_view<_CharT, _Traits>::size_type v98;
  uint64_t v99;
  void *v100;
  int v101;
  std::string::size_type v102;
  uint64_t v103;
  std::__fs::filesystem::path *v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  void *v108;
  void *v109;
  _QWORD *v110;
  void *v111;
  uint64_t v112;
  void **v113;
  uint64_t v114;
  _QWORD *v115;
  void *v116;
  void **v117;
  _QWORD *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  void **v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  void *v129;
  std::runtime_error *v130;
  std::logic_error *exception;
  uint64_t v132;
  std::string v133;
  std::string v134;
  std::string v135;
  std::string pn;
  std::__fs::filesystem::path __base;
  std::__fs::filesystem::path v138;
  std::__fs::filesystem::path v139;
  uint64_t v140[2];
  std::__shared_weak_count *v141;
  void *v142[2];
  char v143;
  std::string::size_type v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  __int128 __dst;
  __int128 v149;
  int v150;
  std::string v151;
  std::string v152;
  std::__fs::filesystem::path v153;
  std::__fs::filesystem::path v154;
  _BYTE v155[32];
  int v156;
  __int128 v157;
  __int128 v158;
  int v159;
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  _QWORD v164[3];
  _QWORD v165[6];

  v165[3] = *MEMORY[0x1E0C80C00];
  v160 = 0x2B2382DC00000000;
  v161 = 0u;
  v162 = 0u;
  kdebug_trace();
  v7 = *a3;
  v6 = a3[1];
  if (v6 == *a3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "At least one entry point is needed.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v157 = 0u;
  v158 = 0u;
  v159 = 1065353216;
  do
  {
    (*(void (**)(_BYTE *__return_ptr, uint64_t, unsigned __int8 *))(*(_QWORD *)a2 + 64))(v155, a2, v7);
    *(_QWORD *)&__dst = v7;
    v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v157, v7, (uint64_t)&std::piecewise_construct, (__int128 **)&__dst);
    v9 = *(_OWORD *)v155;
    *(_OWORD *)v155 = 0uLL;
    v10 = (std::__shared_weak_count *)*((_QWORD *)v8 + 6);
    *(_OWORD *)(v8 + 40) = v9;
    if (!v10)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      v13 = *(std::__shared_weak_count **)&v155[8];
      if (!*(_QWORD *)&v155[8])
        goto LABEL_14;
    }
    else
    {
LABEL_8:
      v13 = *(std::__shared_weak_count **)&v155[8];
      if (!*(_QWORD *)&v155[8])
        goto LABEL_14;
    }
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
LABEL_14:
    Espresso::AOT::GetCallees(a2, (uint64_t)v155);
    v16 = *(_QWORD **)&v155[16];
    if (*(_QWORD *)&v155[16])
    {
      do
      {
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>> const&>((uint64_t)&v157, (uint64_t)(v16 + 2), (uint64_t)(v16 + 2));
        v16 = (_QWORD *)*v16;
      }
      while (v16);
      v17 = *(void ***)&v155[16];
      if (*(_QWORD *)&v155[16])
      {
        do
        {
          while (1)
          {
            v18 = (void **)*v17;
            v19 = (std::__shared_weak_count *)v17[6];
            if (v19)
            {
              v20 = (unint64_t *)&v19->__shared_owners_;
              do
                v21 = __ldaxr(v20);
              while (__stlxr(v21 - 1, v20));
              if (!v21)
              {
                ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
                std::__shared_weak_count::__release_weak(v19);
              }
            }
            if (*((char *)v17 + 39) < 0)
              break;
            operator delete(v17);
            v17 = v18;
            if (!v18)
              goto LABEL_26;
          }
          operator delete(v17[2]);
          operator delete(v17);
          v17 = v18;
        }
        while (v18);
      }
    }
LABEL_26:
    v22 = *(void **)v155;
    *(_QWORD *)v155 = 0;
    if (v22)
      operator delete(v22);
    v7 += 24;
  }
  while (v7 != v6);
  memset(&v154, 0, sizeof(v154));
  v23 = *(_BYTE *)(a1 + 287);
  if (v23 >= 0)
    v24 = (std::string *)(a1 + 264);
  else
    v24 = *(std::string **)(a1 + 264);
  if (v23 >= 0)
    v25 = *(unsigned __int8 *)(a1 + 287);
  else
    v25 = *(_QWORD *)(a1 + 272);
  std::string::append[abi:ne180100]<char const*,0>(&v154.__pn_, v24, (std::string *)((char *)v24 + v25));
  v26 = *a3;
  memset(v155, 0, 24);
  v27 = v26[23];
  if (v27 >= 0)
    v28 = (std::string *)v26;
  else
    v28 = *(std::string **)v26;
  if (v27 >= 0)
    v29 = v26[23];
  else
    v29 = *((_QWORD *)v26 + 1);
  std::string::append[abi:ne180100]<char const*,0>((std::string *)v155, v28, (std::string *)((char *)v28 + v29));
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)v155, (uint64_t)&v154, &v153);
  if ((v155[23] & 0x80000000) != 0)
    operator delete(*(void **)v155);
  std::__fs::filesystem::__create_directories(&v153, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  MIL::IRTensorValueType::MakeScalar();
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  MIL::IRDictionaryValueType::Make();
  memset(v155, 0, sizeof(v155));
  v156 = 1065353216;
  for (i = *(uint64_t **)(a1 + 344); i; i = (uint64_t *)*i)
  {
    if (*((char *)i + 39) < 0)
      std::string::__init_copy_ctor_external(&v152, (const std::string::value_type *)i[2], i[3]);
    else
      v152 = *(std::string *)(i + 2);
    MIL::IRTensorValueType::MakeStringValue();
    if (*((char *)i + 63) < 0)
      std::string::__init_copy_ctor_external(&v151, (const std::string::value_type *)i[5], i[6]);
    else
      v151 = *(std::string *)(i + 5);
    MIL::IRTensorValueType::MakeStringValue();
    *(_QWORD *)&__dst = v139.__pn_.__r_.__value_.__r.__words[0];
    if (v139.__pn_.__r_.__value_.__r.__words[0])
    {
      v31 = (_QWORD *)operator new();
      v32 = v139.__pn_.__r_.__value_.__r.__words[0];
      *v31 = &unk_1E2DC2BE0;
      v31[1] = 0;
      v31[2] = 0;
      v31[3] = v32;
      v139.__pn_.__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)&__dst + 1) = v31;
      *(_QWORD *)&v149 = v138.__pn_.__r_.__value_.__r.__words[0];
      if (!v138.__pn_.__r_.__value_.__r.__words[0])
        goto LABEL_55;
    }
    else
    {
      __dst = 0uLL;
      v139.__pn_.__r_.__value_.__r.__words[0] = 0;
      *(_QWORD *)&v149 = v138.__pn_.__r_.__value_.__r.__words[0];
      if (!v138.__pn_.__r_.__value_.__r.__words[0])
      {
LABEL_55:
        v33 = 0;
        goto LABEL_56;
      }
    }
    v33 = (_QWORD *)operator new();
    v34 = v138.__pn_.__r_.__value_.__r.__words[0];
    *v33 = &unk_1E2DC2BE0;
    v33[1] = 0;
    v33[2] = 0;
    v33[3] = v34;
LABEL_56:
    *((_QWORD *)&v149 + 1) = v33;
    v138.__pn_.__r_.__value_.__r.__words[0] = 0;
    std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IRValue const>,std::pair<std::shared_ptr<MIL::IRValue const> const,std::shared_ptr<MIL::IRValue const>>>((uint64_t)v155, (uint64_t)&__dst, (uint64_t)&__dst);
    v35 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
    if (!*((_QWORD *)&v149 + 1))
      goto LABEL_60;
    v36 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
      v38 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
      if (!*((_QWORD *)&__dst + 1))
        goto LABEL_66;
    }
    else
    {
LABEL_60:
      v38 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
      if (!*((_QWORD *)&__dst + 1))
        goto LABEL_66;
    }
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
LABEL_66:
    v138.__pn_.__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v151.__r_.__value_.__l.__data_);
      v41 = v139.__pn_.__r_.__value_.__r.__words[0];
      v139.__pn_.__r_.__value_.__r.__words[0] = 0;
      if (!v41)
        goto LABEL_69;
LABEL_68:
      (*(void (**)(std::string::size_type))(*(_QWORD *)v41 + 8))(v41);
      goto LABEL_69;
    }
    v41 = v139.__pn_.__r_.__value_.__r.__words[0];
    v139.__pn_.__r_.__value_.__r.__words[0] = 0;
    if (v41)
      goto LABEL_68;
LABEL_69:
    if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v152.__r_.__value_.__l.__data_);
  }
  v42 = (_QWORD *)v158;
  if (!(_QWORD)v158)
    goto LABEL_154;
  while (2)
  {
    BYTE7(v149) = 11;
    strcpy((char *)&__dst, "BNNSOptions");
    Attribute = MIL::IRObject::TryGetAttribute();
    v44 = Attribute;
    if (SBYTE7(v149) < 0)
    {
      operator delete((void *)__dst);
      if (!v44)
        goto LABEL_87;
LABEL_80:
      v45 = (MIL::IRDictionaryValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 64))(v44);
      v46 = v45;
      if (!v45)
        goto LABEL_87;
      __dst = 0u;
      v149 = 0u;
      v150 = 1065353216;
      v47 = (_QWORD *)MIL::IRDictionaryValue::begin(v45);
      for (j = MIL::IRDictionaryValue::end(v46); v47 != (_QWORD *)j; v47 = (_QWORD *)*v47)
        std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IRValue const>,std::pair<std::shared_ptr<MIL::IRValue const> const,std::shared_ptr<MIL::IRValue const>> const&>((uint64_t)&__dst, (uint64_t)(v47 + 2), v47 + 2);
      v49 = *(_QWORD **)&v155[16];
      if (*(_QWORD *)&v155[16])
      {
        do
        {
          std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IRValue const>,std::pair<std::shared_ptr<MIL::IRValue const> const,std::shared_ptr<MIL::IRValue const>> const&>((uint64_t)&__dst, (uint64_t)(v49 + 2), v49 + 2);
          v49 = (_QWORD *)*v49;
        }
        while (v49);
      }
      MIL::IRDictionaryValueType::MakeValue();
      v50 = v138.__pn_.__r_.__value_.__r.__words[0];
      v139.__pn_.__r_.__value_.__r.__words[0] = v138.__pn_.__r_.__value_.__r.__words[0];
      if (v138.__pn_.__r_.__value_.__r.__words[0])
      {
        v51 = (std::__shared_weak_count *)operator new();
        v52 = v138.__pn_.__r_.__value_.__r.__words[0];
        v51->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2C18;
        v51->__shared_owners_ = 0;
        v51->__shared_weak_owners_ = 0;
        v51[1].__vftable = (std::__shared_weak_count_vtbl *)v52;
      }
      else
      {
        v51 = 0;
      }
      v139.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v51;
      v147 = 11;
      v145 = v51;
      strcpy((char *)v146, "BNNSOptions");
      v144 = v50;
      if (v51)
      {
        v61 = (unint64_t *)&v51->__shared_owners_;
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
      }
      MIL::IRObject::SetAttribute();
      if (!v145)
        goto LABEL_108;
      v63 = &v145->__shared_owners_;
      do
        v64 = __ldaxr((unint64_t *)v63);
      while (__stlxr(v64 - 1, (unint64_t *)v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
        std::__shared_weak_count::__release_weak(v145);
        if ((v147 & 0x80000000) == 0)
        {
LABEL_109:
          size = (std::__shared_weak_count *)v139.__pn_.__r_.__value_.__l.__size_;
          if (!v139.__pn_.__r_.__value_.__l.__size_)
            goto LABEL_137;
          goto LABEL_134;
        }
      }
      else
      {
LABEL_108:
        if ((v147 & 0x80000000) == 0)
          goto LABEL_109;
      }
      operator delete(v146[0]);
      size = (std::__shared_weak_count *)v139.__pn_.__r_.__value_.__l.__size_;
      if (!v139.__pn_.__r_.__value_.__l.__size_)
        goto LABEL_137;
LABEL_134:
      v76 = (unint64_t *)&size->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
        v78 = (_QWORD *)v149;
        if ((_QWORD)v149)
          goto LABEL_143;
        goto LABEL_138;
      }
LABEL_137:
      v78 = (_QWORD *)v149;
      if (!(_QWORD)v149)
        goto LABEL_138;
      while (1)
      {
LABEL_143:
        v80 = v78;
        v78 = (_QWORD *)*v78;
        v81 = (std::__shared_weak_count *)v80[5];
        if (!v81)
          goto LABEL_147;
        v82 = (unint64_t *)&v81->__shared_owners_;
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
          v84 = (std::__shared_weak_count *)v80[3];
          if (v84)
          {
LABEL_148:
            v85 = (unint64_t *)&v84->__shared_owners_;
            do
              v86 = __ldaxr(v85);
            while (__stlxr(v86 - 1, v85));
            if (!v86)
            {
              ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
              std::__shared_weak_count::__release_weak(v84);
            }
          }
        }
        else
        {
LABEL_147:
          v84 = (std::__shared_weak_count *)v80[3];
          if (v84)
            goto LABEL_148;
        }
        operator delete(v80);
        if (!v78)
          goto LABEL_138;
      }
    }
    if (Attribute)
      goto LABEL_80;
LABEL_87:
    std::unordered_map<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>,MIL::IRValueMapHasher,MIL::IRValueMapEq,std::allocator<std::pair<std::shared_ptr<MIL::IRValue const> const,std::shared_ptr<MIL::IRValue const>>>>::unordered_map((uint64_t)&__dst, (uint64_t)v155);
    MIL::IRDictionaryValueType::MakeValue();
    v53 = v138.__pn_.__r_.__value_.__r.__words[0];
    v139.__pn_.__r_.__value_.__r.__words[0] = v138.__pn_.__r_.__value_.__r.__words[0];
    if (v138.__pn_.__r_.__value_.__r.__words[0])
    {
      v54 = (std::__shared_weak_count *)operator new();
      v55 = v138.__pn_.__r_.__value_.__r.__words[0];
      v54->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2C18;
      v54->__shared_owners_ = 0;
      v54->__shared_weak_owners_ = 0;
      v54[1].__vftable = (std::__shared_weak_count_vtbl *)v55;
    }
    else
    {
      v54 = 0;
    }
    v139.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v54;
    v143 = 11;
    v141 = v54;
    strcpy((char *)v142, "BNNSOptions");
    v140[1] = v53;
    if (v54)
    {
      v56 = (unint64_t *)&v54->__shared_owners_;
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
    }
    MIL::IRObject::SetAttribute();
    if (!v141)
      goto LABEL_97;
    v58 = &v141->__shared_owners_;
    do
      v59 = __ldaxr((unint64_t *)v58);
    while (__stlxr(v59 - 1, (unint64_t *)v58));
    if (v59)
    {
LABEL_97:
      if ((v143 & 0x80000000) == 0)
        goto LABEL_98;
LABEL_112:
      operator delete(v142[0]);
      v60 = (std::__shared_weak_count *)v139.__pn_.__r_.__value_.__l.__size_;
      if (v139.__pn_.__r_.__value_.__l.__size_)
        goto LABEL_113;
LABEL_116:
      v68 = (_QWORD *)v149;
      if (!(_QWORD)v149)
        goto LABEL_138;
LABEL_121:
      while (2)
      {
        v69 = v68;
        v68 = (_QWORD *)*v68;
        v70 = (std::__shared_weak_count *)v69[5];
        if (!v70)
          goto LABEL_125;
        v71 = (unint64_t *)&v70->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
          v73 = (std::__shared_weak_count *)v69[3];
          if (v73)
          {
LABEL_126:
            v74 = (unint64_t *)&v73->__shared_owners_;
            do
              v75 = __ldaxr(v74);
            while (__stlxr(v75 - 1, v74));
            if (!v75)
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
          }
        }
        else
        {
LABEL_125:
          v73 = (std::__shared_weak_count *)v69[3];
          if (v73)
            goto LABEL_126;
        }
        operator delete(v69);
        if (!v68)
          goto LABEL_138;
        continue;
      }
    }
    ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
    std::__shared_weak_count::__release_weak(v141);
    if (v143 < 0)
      goto LABEL_112;
LABEL_98:
    v60 = (std::__shared_weak_count *)v139.__pn_.__r_.__value_.__l.__size_;
    if (!v139.__pn_.__r_.__value_.__l.__size_)
      goto LABEL_116;
LABEL_113:
    v66 = (unint64_t *)&v60->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (v67)
      goto LABEL_116;
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
    v68 = (_QWORD *)v149;
    if ((_QWORD)v149)
      goto LABEL_121;
LABEL_138:
    v79 = (void *)__dst;
    *(_QWORD *)&__dst = 0;
    if (v79)
      operator delete(v79);
    v42 = (_QWORD *)*v42;
    if (v42)
      continue;
    break;
  }
LABEL_154:
  Espresso::AOT::MakeIRProgramWithFunctions((uint64_t)&v157, 0, v140);
  if (!*(_BYTE *)(a1 + 288) && !*(_BYTE *)(a1 + 289))
  {
    __dst = 0uLL;
    *(_QWORD *)&v149 = 0;
    std::string::append[abi:ne180100]<char const*,0>((std::string *)&__dst, (std::string *)"bnns_program.bnnsir", (std::string *)"");
    std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__dst, (uint64_t)&v153, &v139);
    if (SBYTE7(v149) < 0)
      operator delete((void *)__dst);
    v95 = std::__fs::filesystem::path::__parent_path(&v154);
    if (v95.__size_ > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v95.__size_ >= 0x17)
    {
      v97 = (v95.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v95.__size_ | 7) != 0x17)
        v97 = v95.__size_ | 7;
      v98 = v97 + 1;
      p_dst = (__int128 *)operator new(v97 + 1);
      *((_QWORD *)&__dst + 1) = v95.__size_;
      *(_QWORD *)&v149 = v98 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      BYTE7(v149) = v95.__size_;
      p_dst = &__dst;
      if (!v95.__size_)
      {
LABEL_219:
        *((_BYTE *)p_dst + v95.__size_) = 0;
        *(_OWORD *)&__base.__pn_.__r_.__value_.__l.__data_ = __dst;
        __base.__pn_.__r_.__value_.__r.__words[2] = v149;
        std::__fs::filesystem::path::lexically_relative(&v138, &v139, &__base);
        if (SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__base.__pn_.__r_.__value_.__l.__data_);
        v99 = MEMORY[0x1E0C9AAB0];
        v165[0] = MEMORY[0x1E0C9AAB0];
        v164[0] = E5Common::kBnnsGraphPrecompiledStrKey[0];
        v164[1] = E5Common::kBnnsGraphOutputPathStrKey[0];
        v100 = (void *)MEMORY[0x1E0CB3940];
        v101 = SHIBYTE(v139.__pn_.__r_.__value_.__r.__words[2]);
        v102 = v139.__pn_.__r_.__value_.__r.__words[0];
        v103 = objc_msgSend(MEMORY[0x1E0CB3940], "defaultCStringEncoding", a1);
        if (v101 >= 0)
          v104 = &v139;
        else
          v104 = (std::__fs::filesystem::path *)v102;
        objc_msgSend(v100, "stringWithCString:encoding:", v104, v103);
        v105 = objc_claimAutoreleasedReturnValue();
        v106 = (void *)v105;
        v164[2] = E5Common::kBnnsGraphGenerateDebugInfoKey;
        if (*(_BYTE *)(a1 + 320))
          v107 = v99;
        else
          v107 = MEMORY[0x1E0C9AAA0];
        v165[1] = v105;
        v165[2] = v107;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v165, v164, 3);
        v108 = (void *)objc_claimAutoreleasedReturnValue();
        v109 = (void *)objc_msgSend(v108, "mutableCopy");

        if (!Espresso::AOT::AOTCompilerBackend::IsOnDeviceCompilation((Espresso::AOT::AOTCompilerBackend *)a1))
        {
          v110 = (_QWORD *)(a1 + 296);
          if (*(char *)(a1 + 319) < 0)
            v110 = (_QWORD *)*v110;
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", v110, objc_msgSend(MEMORY[0x1E0CB3940], "defaultCStringEncoding"));
          v111 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v109, "setObject:forKeyedSubscript:", v111, E5Common::kBnnsGraphTargetStrKey[0]);

        }
        BYTE7(v149) = 0;
        LOBYTE(__dst) = 0;
        E5Common::CreateBnnsGraphProgramFromMIL(v109, &v132);
        v112 = v132;
        v132 = 0;
        if (v112)
          (*(void (**)(uint64_t))(*(_QWORD *)v112 + 8))(v112);
        if (SBYTE7(v149) < 0)
        {
          operator delete((void *)__dst);
          if ((SHIBYTE(v138.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_235;
        }
        else if ((SHIBYTE(v138.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_235:
          __dst = *(_OWORD *)&v138.__pn_.__r_.__value_.__l.__data_;
          *(_QWORD *)&v149 = *((_QWORD *)&v138.__pn_.__r_.__value_.__l + 2);
LABEL_238:
          v113 = (void **)(a1 + 368);
          if (*(char *)(a1 + 391) < 0)
            operator delete(*v113);
          *(_OWORD *)v113 = __dst;
          *(_QWORD *)(a1 + 384) = v149;

          goto LABEL_241;
        }
        std::string::__init_copy_ctor_external((std::string *)&__dst, v138.__pn_.__r_.__value_.__l.__data_, v138.__pn_.__r_.__value_.__l.__size_);
        goto LABEL_238;
      }
    }
    memmove(p_dst, v95.__data_, v95.__size_);
    goto LABEL_219;
  }
  __dst = 0uLL;
  *(_QWORD *)&v149 = 0;
  std::string::append[abi:ne180100]<char const*,0>((std::string *)&__dst, (std::string *)"bnns_program.mil", (std::string *)"");
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__dst, (uint64_t)&v153, &v139);
  if (SBYTE7(v149) < 0)
    operator delete((void *)__dst);
  v87 = std::__fs::filesystem::path::__parent_path(&v154);
  if (v87.__size_ > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v87.__size_ >= 0x17)
  {
    v89 = (v87.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v87.__size_ | 7) != 0x17)
      v89 = v87.__size_ | 7;
    v90 = v89 + 1;
    v88 = (__int128 *)operator new(v89 + 1);
    *((_QWORD *)&__dst + 1) = v87.__size_;
    *(_QWORD *)&v149 = v90 | 0x8000000000000000;
    *(_QWORD *)&__dst = v88;
    goto LABEL_165;
  }
  BYTE7(v149) = v87.__size_;
  v88 = &__dst;
  if (v87.__size_)
LABEL_165:
    memmove(v88, v87.__data_, v87.__size_);
  *((_BYTE *)v88 + v87.__size_) = 0;
  *(_OWORD *)&__base.__pn_.__r_.__value_.__l.__data_ = __dst;
  __base.__pn_.__r_.__value_.__r.__words[2] = v149;
  std::__fs::filesystem::path::lexically_relative(&v138, &v139, &__base);
  if (SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__base.__pn_.__r_.__value_.__l.__data_);
  memset(&__base, 0, sizeof(__base));
  std::string::append[abi:ne180100]<char const*,0>(&__base.__pn_, (std::string *)"weights.bin", (std::string *)"");
  std::__fs::filesystem::operator/[abi:ne180100](&__base, (uint64_t)&v153, (std::__fs::filesystem::path *)&__dst);
  if (SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__base.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v138.__pn_.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_172;
LABEL_170:
    __base = v138;
  }
  else
  {
    if ((SHIBYTE(v138.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_170;
LABEL_172:
    std::string::__init_copy_ctor_external(&__base.__pn_, v138.__pn_.__r_.__value_.__l.__data_, v138.__pn_.__r_.__value_.__l.__size_);
  }
  v91 = (void **)(a1 + 368);
  if (*(char *)(a1 + 391) < 0)
    operator delete(*v91);
  *(_OWORD *)v91 = *(_OWORD *)&__base.__pn_.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 384) = *((_QWORD *)&__base.__pn_.__r_.__value_.__l + 2);
  v92 = v140[0];
  if (SHIBYTE(v139.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&pn, v139.__pn_.__r_.__value_.__l.__data_, v139.__pn_.__r_.__value_.__l.__size_);
  else
    pn = v139.__pn_;
  if (SHIBYTE(v153.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v135, v153.__pn_.__r_.__value_.__l.__data_, v153.__pn_.__r_.__value_.__l.__size_);
  else
    v135 = v153.__pn_;
  if (Espresso::AOT::AOTCompilerBackend::IsOnDeviceCompilation((Espresso::AOT::AOTCompilerBackend *)a1))
  {
    memset(&__base, 0, sizeof(__base));
    std::string::append[abi:ne180100]<char const*,0>(&__base.__pn_, (std::string *)"", (std::string *)"");
  }
  else if (SBYTE7(v149) < 0)
  {
    std::string::__init_copy_ctor_external(&__base.__pn_, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)&__base.__pn_.__r_.__value_.__l.__data_ = __dst;
    __base.__pn_.__r_.__value_.__r.__words[2] = v149;
  }
  if (SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v134, __base.__pn_.__r_.__value_.__l.__data_, __base.__pn_.__r_.__value_.__l.__size_);
  else
    v134 = __base.__pn_;
  Espresso::MILUtil::SerializeProgram(v92, (uint64_t)&pn, (uint64_t)&v135, (uint64_t)&v134, 0x100000004, 0);
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v134.__r_.__value_.__l.__data_);
    if (SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_196;
LABEL_191:
    if ((SHIBYTE(v135.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_192;
LABEL_197:
    operator delete(v135.__r_.__value_.__l.__data_);
    if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_198;
LABEL_193:
    if ((SHIBYTE(v139.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_194;
LABEL_199:
    std::string::__init_copy_ctor_external(&v133, v139.__pn_.__r_.__value_.__l.__data_, v139.__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    if ((SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_191;
LABEL_196:
    operator delete(__base.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_197;
LABEL_192:
    if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_193;
LABEL_198:
    operator delete(pn.__r_.__value_.__l.__data_);
    if (SHIBYTE(v139.__pn_.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_199;
LABEL_194:
    v133 = v139.__pn_;
  }
  __base.__pn_ = v133;
  memset(&v133, 0, sizeof(v133));
  std::__fs::filesystem::__status(&__base, 0);
  v93 = v163;
  if ((SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v133.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_202;
LABEL_205:
    operator delete(v133.__r_.__value_.__l.__data_);
    v94 = v93;
    if (v93 != 255)
      goto LABEL_206;
LABEL_283:
    v130 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v130, "Failed in serializing BNNS MIL program on disk.");
    __cxa_throw(v130, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  operator delete(__base.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_205;
LABEL_202:
  v94 = v93;
  if (v93 == 255)
    goto LABEL_283;
LABEL_206:
  if (!v94)
    goto LABEL_283;
  if (SBYTE7(v149) < 0)
    operator delete((void *)__dst);
LABEL_241:
  if ((SHIBYTE(v138.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v139.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_243;
LABEL_281:
    operator delete(v139.__pn_.__r_.__value_.__l.__data_);
    v114 = v140[0];
    v140[0] = 0;
    if (!v114)
      goto LABEL_245;
LABEL_244:
    (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);
    goto LABEL_245;
  }
  operator delete(v138.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v139.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_281;
LABEL_243:
  v114 = v140[0];
  v140[0] = 0;
  if (v114)
    goto LABEL_244;
LABEL_245:
  v115 = *(_QWORD **)&v155[16];
  if (*(_QWORD *)&v155[16])
  {
    do
    {
      v118 = v115;
      v115 = (_QWORD *)*v115;
      v119 = (std::__shared_weak_count *)v118[5];
      if (!v119)
        goto LABEL_257;
      v120 = (unint64_t *)&v119->__shared_owners_;
      do
        v121 = __ldaxr(v120);
      while (__stlxr(v121 - 1, v120));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
        v122 = (std::__shared_weak_count *)v118[3];
        if (v122)
        {
LABEL_258:
          v123 = (unint64_t *)&v122->__shared_owners_;
          do
            v124 = __ldaxr(v123);
          while (__stlxr(v124 - 1, v123));
          if (!v124)
          {
            ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
            std::__shared_weak_count::__release_weak(v122);
          }
        }
      }
      else
      {
LABEL_257:
        v122 = (std::__shared_weak_count *)v118[3];
        if (v122)
          goto LABEL_258;
      }
      operator delete(v118);
    }
    while (v115);
  }
  v116 = *(void **)v155;
  *(_QWORD *)v155 = 0;
  if (v116)
    operator delete(v116);
  if (SHIBYTE(v153.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v153.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v154.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_250;
    goto LABEL_265;
  }
  if (SHIBYTE(v154.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_265:
    operator delete(v154.__pn_.__r_.__value_.__l.__data_);
    v117 = (void **)v158;
    if ((_QWORD)v158)
      goto LABEL_269;
    goto LABEL_275;
  }
LABEL_250:
  v117 = (void **)v158;
  if ((_QWORD)v158)
  {
    do
    {
      while (1)
      {
LABEL_269:
        v125 = (void **)*v117;
        v126 = (std::__shared_weak_count *)v117[6];
        if (v126)
        {
          v127 = (unint64_t *)&v126->__shared_owners_;
          do
            v128 = __ldaxr(v127);
          while (__stlxr(v128 - 1, v127));
          if (!v128)
          {
            ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
            std::__shared_weak_count::__release_weak(v126);
          }
        }
        if (*((char *)v117 + 39) < 0)
          break;
        operator delete(v117);
        v117 = v125;
        if (!v125)
          goto LABEL_275;
      }
      operator delete(v117[2]);
      operator delete(v117);
      v117 = v125;
    }
    while (v125);
  }
LABEL_275:
  v129 = (void *)v157;
  *(_QWORD *)&v157 = 0;
  if (v129)
    operator delete(v129);
  if (E5RT::g_trace_analysis_level >= v160)
    kdebug_trace();
}

void sub_1910D5B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,_Unwind_Exception *exception_object,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *a67;
  char a72;
  void *a73;
  char a74;
  uint64_t a75;
  void *v75;
  uint64_t v76;

  if (a35 < 0)
    operator delete(__p);
  if (a41 < 0)
    operator delete(a36);
  if (a42)
    (*(void (**)(uint64_t))(*(_QWORD *)a42 + 8))(a42);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a75);
  if (a72 < 0)
    operator delete(a67);
  if (a74 < 0)
  {
    operator delete(a73);
    std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v76 - 240);
    E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)(v76 - 200));
    _Unwind_Resume(a1);
  }
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v76 - 240);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)(v76 - 200));
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForBnns::GetOutputPaths(Espresso::AOT::MILCompilerForBnns *this@<X0>, _QWORD *a2@<X8>)
{
  std::string __p;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (*((char *)this + 391) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 46), *((_QWORD *)this + 47));
  else
    __p = *(std::string *)((char *)this + 368);
  std::vector<std::string>::vector[abi:ne180100](a2, (uint64_t)&__p, 1uLL);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1910D6058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::MILCompilerForBnns::GetOptions(Espresso::AOT::MILCompilerForBnns *this)
{
  return (uint64_t)this + 264;
}

void Espresso::AOT::MILCompilerForBnns::~MILCompilerForBnns(void **this)
{
  Espresso::AOT::MILCompilerForBnns::~MILCompilerForBnns(this);
  JUMPOUT(0x19401CD90);
}

{
  void **v2;
  void *v3;
  void **v4;
  void **v5;
  void **v6;
  void *v7;

  *this = &off_1E2DA0610;
  if (*((char *)this + 391) < 0)
  {
    operator delete(this[46]);
    v2 = (void **)this[43];
    if (!v2)
      goto LABEL_5;
    while (1)
    {
LABEL_14:
      v5 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0)
LABEL_18:
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_18;
      }
      operator delete(v2);
      v2 = v5;
      if (!v5)
        goto LABEL_5;
    }
  }
  v2 = (void **)this[43];
  if (v2)
    goto LABEL_14;
LABEL_5:
  v3 = this[41];
  this[41] = 0;
  if (v3)
    operator delete(v3);
  if (*((char *)this + 319) < 0)
  {
    operator delete(this[37]);
    if ((*((char *)this + 287) & 0x80000000) == 0)
    {
LABEL_9:
      *this = off_1E2DA0650;
      v4 = (void **)this[29];
      if (!v4)
        goto LABEL_10;
      goto LABEL_21;
    }
  }
  else if ((*((char *)this + 287) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(this[33]);
  *this = off_1E2DA0650;
  v4 = (void **)this[29];
  if (!v4)
  {
LABEL_10:
    if ((*((char *)this + 231) & 0x80000000) == 0)
      goto LABEL_11;
LABEL_28:
    operator delete(this[26]);
    if ((*((char *)this + 207) & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_21:
  v6 = (void **)this[30];
  if (v6 == v4)
  {
    this[30] = v4;
    operator delete(v4);
    if (*((char *)this + 231) < 0)
      goto LABEL_28;
  }
  else
  {
    do
    {
      if (*((char *)v6 - 1) < 0)
        operator delete(*(v6 - 3));
      v6 -= 3;
    }
    while (v6 != v4);
    v7 = this[29];
    this[30] = v4;
    operator delete(v7);
    if (*((char *)this + 231) < 0)
      goto LABEL_28;
  }
LABEL_11:
  if ((*((char *)this + 207) & 0x80000000) == 0)
  {
LABEL_12:
    Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend((Espresso::AOT::AOTCompilerBackend *)this);
    return;
  }
LABEL_29:
  operator delete(this[23]);
  Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend((Espresso::AOT::AOTCompilerBackend *)this);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IRValue const>,std::pair<std::shared_ptr<MIL::IRValue const> const,std::shared_ptr<MIL::IRValue const>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  _QWORD *v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t prime;
  int8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;

  v6 = (_QWORD *)(a1 + 24);
  v7 = MIL::IRValueMapHasher::operator()();
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == v8)
            {
              if (MIL::IRValueMapEq::operator()())
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_23;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (MIL::IRValueMapEq::operator()())
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  v15 = (_QWORD *)(a1 + 16);
  v16 = operator new(0x30uLL);
  v12 = v16;
  *v16 = 0;
  v16[1] = v8;
  v17 = *(_QWORD *)(a3 + 8);
  v16[2] = *(_QWORD *)a3;
  v16[3] = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *((_OWORD *)v16 + 2) = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (v9 && (float)(v21 * (float)v9) >= v20)
  {
    v22 = *(_QWORD *)a1;
    v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v23)
    {
LABEL_29:
      *v12 = *v23;
LABEL_64:
      *v23 = v12;
      goto LABEL_65;
    }
  }
  else
  {
    v24 = 1;
    if (v9 >= 3)
      v24 = (v9 & (v9 - 1)) != 0;
    v25 = v24 | (2 * v9);
    v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26)
      prime = v26;
    else
      prime = v25;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v28 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v28)
      goto LABEL_40;
    if (prime < *(_QWORD *)&v28)
    {
      v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v28 < 3uLL || (v30 = (uint8x8_t)vcnt_s8(v28), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        v29 = std::__next_prime(v29);
      }
      else
      {
        v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2)
          v29 = v31;
      }
      if (prime <= v29)
        prime = v29;
      if (prime < *(_QWORD *)&v28)
LABEL_40:
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    v32 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        v3 = v8 % v9;
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
        if (v23)
          goto LABEL_29;
      }
      else
      {
        v3 = v8;
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
        if (v23)
          goto LABEL_29;
      }
    }
    else
    {
      v3 = v32 & v8;
      v22 = *(_QWORD *)a1;
      v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v32 & v8));
      if (v23)
        goto LABEL_29;
    }
  }
  *v12 = *v15;
  *v15 = v12;
  *(_QWORD *)(v22 + 8 * v3) = v15;
  if (*v12)
  {
    v33 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v33 >= v9)
        v33 %= v9;
    }
    else
    {
      v33 &= v9 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_64;
  }
LABEL_65:
  ++*v6;
  return v12;
}

void sub_1910D65A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IRValue const>,std::pair<std::shared_ptr<MIL::IRValue const> const,std::shared_ptr<MIL::IRValue const>> const&>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  float v23;
  float v24;
  uint64_t v25;
  _QWORD *v26;
  _BOOL8 v27;
  unint64_t v28;
  unint64_t v29;
  size_t prime;
  int8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;

  v6 = (_QWORD *)(a1 + 24);
  v7 = MIL::IRValueMapHasher::operator()();
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == v8)
            {
              if (MIL::IRValueMapEq::operator()())
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_23;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (MIL::IRValueMapEq::operator()())
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  v15 = (_QWORD *)(a1 + 16);
  v16 = operator new(0x30uLL);
  v12 = v16;
  *v16 = 0;
  v16[1] = v8;
  v17 = a3[1];
  v16[2] = *a3;
  v16[3] = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = a3[3];
  v16[4] = a3[2];
  v16[5] = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (v9 && (float)(v24 * (float)v9) >= v23)
  {
    v25 = *(_QWORD *)a1;
    v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v26)
    {
LABEL_32:
      *v12 = *v26;
LABEL_67:
      *v26 = v12;
      goto LABEL_68;
    }
  }
  else
  {
    v27 = 1;
    if (v9 >= 3)
      v27 = (v9 & (v9 - 1)) != 0;
    v28 = v27 | (2 * v9);
    v29 = vcvtps_u32_f32(v23 / v24);
    if (v28 <= v29)
      prime = v29;
    else
      prime = v28;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v31 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v31)
      goto LABEL_43;
    if (prime < *(_QWORD *)&v31)
    {
      v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v31 < 3uLL || (v33 = (uint8x8_t)vcnt_s8(v31), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (prime <= v32)
        prime = v32;
      if (prime < *(_QWORD *)&v31)
LABEL_43:
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    v35 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        v3 = v8 % v9;
        v25 = *(_QWORD *)a1;
        v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
        if (v26)
          goto LABEL_32;
      }
      else
      {
        v3 = v8;
        v25 = *(_QWORD *)a1;
        v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
        if (v26)
          goto LABEL_32;
      }
    }
    else
    {
      v3 = v35 & v8;
      v25 = *(_QWORD *)a1;
      v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v35 & v8));
      if (v26)
        goto LABEL_32;
    }
  }
  *v12 = *v15;
  *v15 = v12;
  *(_QWORD *)(v25 + 8 * v3) = v15;
  if (*v12)
  {
    v36 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v36 >= v9)
        v36 %= v9;
    }
    else
    {
      v36 &= v9 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v36);
    goto LABEL_67;
  }
LABEL_68:
  ++*v6;
  return v12;
}

void sub_1910D692C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>,MIL::IRValueMapHasher,MIL::IRValueMapEq,std::allocator<std::pair<std::shared_ptr<MIL::IRValue const> const,std::shared_ptr<MIL::IRValue const>>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IRValue const>,std::pair<std::shared_ptr<MIL::IRValue const> const,std::shared_ptr<MIL::IRValue const>> const&>(a1, (uint64_t)(i + 2), i + 2);
  return a1;
}

void sub_1910D6A58(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void sub_1910D6A6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::Backends::CostModel::DecisionTreeModelRegistry::InitAllModels(Espresso::AOT::Backends::CostModel::DecisionTreeModelRegistry *this)
{
  unsigned __int8 v1;
  void **v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  char ***v18;
  uint64_t v19;
  uint64_t v20;
  const void ***v21;
  uint64_t v22;
  uint64_t v23;
  const void ***v24;
  uint64_t v25;
  uint64_t v26;
  const void ***v27;
  uint64_t v28;
  uint64_t v29;
  const void ***v30;
  uint64_t v31;
  uint64_t v32;
  const void ***v33;
  uint64_t v34;
  uint64_t v35;
  const void ***v36;
  uint64_t v37;
  uint64_t v38;
  const void ***v39;
  uint64_t v40;
  uint64_t v41;
  const void ***v42;
  uint64_t v43;
  void **v44;
  uint64_t v45;
  void **v46;
  uint64_t v47;
  void **v48;
  uint64_t v49;
  void **v50;
  uint64_t v51;
  void **v52;
  uint64_t v53;
  void **v54;
  uint64_t v55;
  void **v56;
  uint64_t v57;
  void **v58;
  uint64_t v59;
  char ***v60;
  uint64_t v61;
  uint64_t v62;
  const void ***v63;
  uint64_t v64;
  uint64_t v65;
  const void ***v66;
  uint64_t v67;
  void **v68;
  uint64_t v69;
  void **v70;
  uint64_t v71;
  void **v72;
  uint64_t v73;
  void **v74;
  uint64_t v75;
  void **v76;
  uint64_t v77;
  char ***v78;
  uint64_t v79;
  void **v80;
  uint64_t v81;
  void **v82;
  uint64_t v83;
  void **v84;
  uint64_t v85;
  void **v86;
  uint64_t v87;
  void **v88;
  uint64_t v89;
  void **v90;
  uint64_t v91;
  void **v92;
  uint64_t v93;
  void **v94;
  uint64_t v95;
  char ***v96;
  uint64_t v97;
  uint64_t v98;
  const void ***v99;
  uint64_t v100;
  _QWORD *v101;
  char **v102;
  const void **v103;
  const void **v104;
  const void **v105;
  const void **v106;
  const void **v107;
  const void **v108;
  const void **v109;
  const void **v110;
  const void **v111;
  const void **v112;
  const void **v113;
  const void **v114;
  const void **v115;
  const void **v116;
  const void **v117;
  const void **v118;
  const void **v119;
  const void **v120[2];
  const void **v121;
  const void **v122;
  const void **v123;
  const void **v124;
  const void **v125;
  const void **v126;
  const void **v127;
  const void **v128[2];
  const void **v129;
  const void **v130[2];
  const void **v131;
  const void **v132[2];
  _BYTE v133[24];
  char **v134;
  char *v135;
  uint64_t v136;
  uint64_t *v137;
  void *v138[2];
  char v139;
  void *v140;
  void *v141;
  void **v142;
  void *v143[2];
  char v144;
  void *v145;
  void *v146;
  void **v147;
  void *v148[2];
  char v149;
  void *v150;
  void *v151;
  void **v152;
  void *v153[2];
  char v154;
  void *v155;
  void *v156;
  void **v157;
  void *v158[2];
  char v159;
  void *v160;
  void *v161;
  void **v162;
  void *v163[2];
  char v164;
  void *v165;
  void *v166;
  void **v167;
  void *v168[2];
  char v169;
  void *v170;
  void *v171;
  void **v172;
  void *v173[2];
  char v174;
  void *v175;
  void *v176;
  void **v177;
  char v178[23];
  char v179;
  void *v180;
  void *v181;
  void **v182;
  char v183[23];
  char v184;
  void *v185;
  void *v186;
  void **v187;
  char v188[23];
  char v189;
  void *v190;
  void *v191;
  void **v192;
  char v193[23];
  char v194;
  void *v195;
  void *v196;
  void **v197;
  char v198[23];
  char v199;
  void *v200;
  void *v201;
  void **v202;
  char v203[23];
  char v204;
  void *v205;
  void *v206;
  void **v207;
  char v208[23];
  char v209;
  void *v210;
  void *v211;
  void **v212;
  char v213[23];
  char v214;
  void *v215;
  void *v216;
  void **v217;
  char v218[23];
  char v219;
  void *v220;
  void *v221;
  void **v222;
  char v223[23];
  char v224;
  void *v225;
  void *v226;
  void **v227;
  char v228[23];
  char v229;
  void *v230;
  void *v231;
  void **v232;
  char v233[23];
  char v234;
  void *v235;
  void *v236;
  void **v237;
  char v238[23];
  char v239;
  void *v240;
  void *v241;
  void **v242;
  char v243[23];
  char v244;
  void *v245;
  void *v246;
  void **v247;
  char v248[23];
  char v249;
  void *v250;
  void *v251;
  void **v252;
  char v253[23];
  char v254;
  void *v255;
  void *v256;
  void **v257;
  char v258[23];
  char v259;
  void *v260;
  void *v261;
  void **v262;
  char v263[23];
  char v264;
  void *v265;
  void *v266;
  void **v267;
  uint64_t v268;

  v268 = *MEMORY[0x1E0C80C00];
  v1 = atomic_load((unsigned __int8 *)&qword_1ECFC45C8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1ECFC45C8))
  {
    v101 = (_QWORD *)operator new();
    *v101 = 0;
    v101[1] = 0;
    v101[2] = 0;
    _MergedGlobals = (uint64_t)v101;
    __cxa_guard_release(&qword_1ECFC45C8);
  }
  v102 = (char **)_MergedGlobals;
  v133[23] = 8;
  strcpy(v133, "H13P-cpu");
  v134 = (char **)&unk_1E2DAD250;
  v135 = (char *)Espresso::AOT::DTrees::avg_poolCpuCp;
  v139 = 8;
  v137 = (uint64_t *)&v134;
  strcpy((char *)v138, "H14P-cpu");
  v140 = &unk_1E2DAD250;
  v141 = Espresso::AOT::DTrees::avg_poolCpuDp;
  v144 = 8;
  v142 = &v140;
  strcpy((char *)v143, "H15P-cpu");
  v145 = &unk_1E2DAD250;
  v146 = Espresso::AOT::DTrees::avg_poolCpuEp;
  v149 = 8;
  v147 = &v145;
  strcpy((char *)v148, "H13P-gpu");
  v150 = &unk_1E2DAD250;
  v151 = Espresso::AOT::DTrees::avg_poolGpuCp;
  v154 = 8;
  v152 = &v150;
  strcpy((char *)v153, "H14P-gpu");
  v155 = &unk_1E2DAD250;
  v156 = Espresso::AOT::DTrees::avg_poolGpuDp;
  v157 = &v155;
  v159 = 8;
  strcpy((char *)v158, "H15P-gpu");
  v160 = &unk_1E2DAD250;
  v161 = Espresso::AOT::DTrees::avg_poolGpuEp;
  v162 = &v160;
  v164 = 8;
  strcpy((char *)v163, "H13P-ane");
  v165 = &unk_1E2DAD250;
  v166 = Espresso::AOT::DTrees::avg_poolAneCp;
  v167 = &v165;
  v169 = 8;
  strcpy((char *)v168, "H14P-ane");
  v170 = &unk_1E2DAD250;
  v171 = Espresso::AOT::DTrees::avg_poolAneDp;
  v172 = &v170;
  v174 = 8;
  strcpy((char *)v173, "H15P-ane");
  v175 = &unk_1E2DAD250;
  v176 = Espresso::AOT::DTrees::avg_poolAneEp;
  v177 = &v175;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::map[abi:ne180100](&v131, (const void **)v133, 9);
  v2 = v177;
  if (v177 == &v175)
  {
    v3 = 4;
    v2 = &v175;
  }
  else
  {
    if (!v177)
      goto LABEL_7;
    v3 = 5;
  }
  (*((void (**)(void))*v2 + v3))();
LABEL_7:
  if (v174 < 0)
  {
    operator delete(v173[0]);
    v4 = v172;
    if (v172 != &v170)
      goto LABEL_9;
LABEL_12:
    v5 = 4;
    v4 = &v170;
    goto LABEL_13;
  }
  v4 = v172;
  if (v172 == &v170)
    goto LABEL_12;
LABEL_9:
  if (!v4)
    goto LABEL_14;
  v5 = 5;
LABEL_13:
  (*((void (**)(void))*v4 + v5))();
LABEL_14:
  if (v169 < 0)
  {
    operator delete(v168[0]);
    v6 = v167;
    if (v167 != &v165)
      goto LABEL_16;
LABEL_19:
    v7 = 4;
    v6 = &v165;
    goto LABEL_20;
  }
  v6 = v167;
  if (v167 == &v165)
    goto LABEL_19;
LABEL_16:
  if (!v6)
    goto LABEL_21;
  v7 = 5;
LABEL_20:
  (*((void (**)(void))*v6 + v7))();
LABEL_21:
  if (v164 < 0)
  {
    operator delete(v163[0]);
    v8 = v162;
    if (v162 != &v160)
      goto LABEL_23;
LABEL_26:
    v9 = 4;
    v8 = &v160;
    goto LABEL_27;
  }
  v8 = v162;
  if (v162 == &v160)
    goto LABEL_26;
LABEL_23:
  if (!v8)
    goto LABEL_28;
  v9 = 5;
LABEL_27:
  (*((void (**)(void))*v8 + v9))();
LABEL_28:
  if (v159 < 0)
  {
    operator delete(v158[0]);
    v10 = v157;
    if (v157 != &v155)
      goto LABEL_30;
LABEL_33:
    v11 = 4;
    v10 = &v155;
    goto LABEL_34;
  }
  v10 = v157;
  if (v157 == &v155)
    goto LABEL_33;
LABEL_30:
  if (!v10)
    goto LABEL_35;
  v11 = 5;
LABEL_34:
  (*((void (**)(void))*v10 + v11))();
LABEL_35:
  if (v154 < 0)
  {
    operator delete(v153[0]);
    v12 = v152;
    if (v152 != &v150)
      goto LABEL_37;
LABEL_40:
    v13 = 4;
    v12 = &v150;
    goto LABEL_41;
  }
  v12 = v152;
  if (v152 == &v150)
    goto LABEL_40;
LABEL_37:
  if (!v12)
    goto LABEL_42;
  v13 = 5;
LABEL_41:
  (*((void (**)(void))*v12 + v13))();
LABEL_42:
  if (v149 < 0)
  {
    operator delete(v148[0]);
    v14 = v147;
    if (v147 != &v145)
      goto LABEL_44;
LABEL_47:
    v15 = 4;
    v14 = &v145;
    goto LABEL_48;
  }
  v14 = v147;
  if (v147 == &v145)
    goto LABEL_47;
LABEL_44:
  if (!v14)
    goto LABEL_49;
  v15 = 5;
LABEL_48:
  (*((void (**)(void))*v14 + v15))();
LABEL_49:
  if (v144 < 0)
  {
    operator delete(v143[0]);
    v16 = v142;
    if (v142 != &v140)
      goto LABEL_51;
LABEL_54:
    v17 = 4;
    v16 = &v140;
    goto LABEL_55;
  }
  v16 = v142;
  if (v142 == &v140)
    goto LABEL_54;
LABEL_51:
  if (!v16)
    goto LABEL_56;
  v17 = 5;
LABEL_55:
  (*((void (**)(void))*v16 + v17))();
LABEL_56:
  if ((v139 & 0x80000000) == 0)
  {
    v18 = (char ***)v137;
    if (v137 != (uint64_t *)&v134)
      goto LABEL_58;
LABEL_61:
    v19 = 4;
    v18 = &v134;
    goto LABEL_62;
  }
  operator delete(v138[0]);
  v18 = (char ***)v137;
  if (v137 == (uint64_t *)&v134)
    goto LABEL_61;
LABEL_58:
  if (v18)
  {
    v19 = 5;
LABEL_62:
    ((void (*)(void))(*v18)[v19])();
  }
  if ((v133[23] & 0x80000000) != 0)
    operator delete(*(void **)v133);
  v133[23] = 8;
  strcpy(v133, "H13G-ane");
  v134 = (char **)&unk_1E2DAD250;
  v135 = (char *)Espresso::AOT::DTrees::convAneIp;
  v139 = 8;
  v137 = (uint64_t *)&v134;
  strcpy((char *)v138, "H14G-ane");
  v140 = &unk_1E2DAD250;
  v141 = Espresso::AOT::DTrees::convAneFp;
  v144 = 8;
  v142 = &v140;
  strcpy((char *)v143, "H13C-ane");
  v145 = &unk_1E2DAD250;
  v146 = Espresso::AOT::DTrees::convAneJp;
  v149 = 8;
  v147 = &v145;
  strcpy((char *)v148, "H14C-ane");
  v150 = &unk_1E2DAD250;
  v151 = Espresso::AOT::DTrees::convAneHp;
  v154 = 8;
  v152 = &v150;
  strcpy((char *)v153, "H13S-ane");
  v155 = &unk_1E2DAD250;
  v156 = Espresso::AOT::DTrees::convAneKp;
  v157 = &v155;
  v159 = 8;
  strcpy((char *)v158, "H14S-ane");
  v160 = &unk_1E2DAD250;
  v161 = Espresso::AOT::DTrees::convAneGp;
  v162 = &v160;
  v164 = 8;
  strcpy((char *)v163, "H13G-cpu");
  v165 = &unk_1E2DAD250;
  v166 = Espresso::AOT::DTrees::convCpuIp;
  v167 = &v165;
  v169 = 8;
  strcpy((char *)v168, "H14G-cpu");
  v170 = &unk_1E2DAD250;
  v171 = Espresso::AOT::DTrees::convCpuFp;
  v172 = &v170;
  v174 = 8;
  strcpy((char *)v173, "H13C-cpu");
  v175 = &unk_1E2DAD250;
  v176 = Espresso::AOT::DTrees::convCpuJp;
  v177 = &v175;
  v179 = 8;
  strcpy(v178, "H14C-cpu");
  v180 = &unk_1E2DAD250;
  v181 = Espresso::AOT::DTrees::convCpuHp;
  v182 = &v180;
  v184 = 8;
  strcpy(v183, "H13S-cpu");
  v185 = &unk_1E2DAD250;
  v186 = Espresso::AOT::DTrees::convCpuKp;
  v187 = &v185;
  v189 = 8;
  strcpy(v188, "H14S-cpu");
  v190 = &unk_1E2DAD250;
  v191 = Espresso::AOT::DTrees::convCpuGp;
  v192 = &v190;
  v194 = 8;
  strcpy(v193, "H13G-gpu");
  v195 = &unk_1E2DAD250;
  v196 = Espresso::AOT::DTrees::convGpuIp;
  v197 = &v195;
  v199 = 8;
  strcpy(v198, "H14G-gpu");
  v200 = &unk_1E2DAD250;
  v201 = Espresso::AOT::DTrees::convGpuFp;
  v202 = &v200;
  v204 = 8;
  strcpy(v203, "H13C-gpu");
  v205 = &unk_1E2DAD250;
  v206 = Espresso::AOT::DTrees::convGpuJp;
  v207 = &v205;
  v209 = 8;
  strcpy(v208, "H14C-gpu");
  v210 = &unk_1E2DAD250;
  v211 = Espresso::AOT::DTrees::convGpuHp;
  v212 = &v210;
  v214 = 8;
  strcpy(v213, "H13S-gpu");
  v215 = &unk_1E2DAD250;
  v216 = Espresso::AOT::DTrees::convGpuKp;
  v217 = &v215;
  v219 = 8;
  strcpy(v218, "H14S-gpu");
  v220 = &unk_1E2DAD250;
  v221 = Espresso::AOT::DTrees::convGpuGp;
  v222 = &v220;
  v224 = 8;
  strcpy(v223, "H13P-cpu");
  v226 = Espresso::AOT::DTrees::convCpuCp;
  v225 = &unk_1E2DAD250;
  v227 = &v225;
  strcpy(v228, "H14P-cpu");
  v231 = Espresso::AOT::DTrees::convCpuDp;
  v232 = &v230;
  strcpy(v233, "H15P-cpu");
  v236 = Espresso::AOT::DTrees::convCpuEp;
  v237 = &v235;
  v241 = Espresso::AOT::DTrees::convGpuCp;
  v242 = &v240;
  strcpy(v243, "H14P-gpu");
  v246 = Espresso::AOT::DTrees::convGpuDp;
  v247 = &v245;
  strcpy(v248, "H15P-gpu");
  v251 = Espresso::AOT::DTrees::convGpuEp;
  v252 = &v250;
  v256 = Espresso::AOT::DTrees::convAneCp;
  v257 = &v255;
  strcpy(v258, "H14P-ane");
  v261 = Espresso::AOT::DTrees::convAneDp;
  v262 = &v260;
  v229 = 8;
  v230 = &unk_1E2DAD250;
  v234 = 8;
  v239 = 8;
  v244 = 8;
  v249 = 8;
  v254 = 8;
  v259 = 8;
  v264 = 8;
  strcpy(v263, "H15P-ane");
  v235 = &unk_1E2DAD250;
  v240 = &unk_1E2DAD250;
  v245 = &unk_1E2DAD250;
  v250 = &unk_1E2DAD250;
  v255 = &unk_1E2DAD250;
  v260 = &unk_1E2DAD250;
  v265 = &unk_1E2DAD250;
  v266 = Espresso::AOT::DTrees::convAneEp;
  v267 = &v265;
  strcpy(v238, "H13P-gpu");
  strcpy(v253, "H13P-ane");
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::map[abi:ne180100](&v129, (const void **)v133, 27);
  v20 = 189;
  do
  {
    v21 = (const void ***)v132[v20 + 1];
    if (&v130[v20 + 1] == v21)
    {
      v21 = &v130[v20 + 1];
      v22 = 4;
    }
    else
    {
      if (!v21)
        goto LABEL_72;
      v22 = 5;
    }
    ((void (*)(void))(*v21)[v22])();
LABEL_72:
    if (SHIBYTE(v130[v20]) < 0)
      operator delete(v128[v20 + 1]);
    v20 -= 7;
  }
  while (v20 * 8);
  v133[23] = 8;
  strcpy(v133, "H13G-cpu");
  v134 = (char **)&unk_1E2DAD250;
  v135 = (char *)Espresso::AOT::DTrees::lstmCpuIp;
  v139 = 8;
  v137 = (uint64_t *)&v134;
  strcpy((char *)v138, "H14G-cpu");
  v140 = &unk_1E2DAD250;
  v141 = Espresso::AOT::DTrees::lstmCpuFp;
  v144 = 8;
  v142 = &v140;
  strcpy((char *)v143, "H13C-cpu");
  v145 = &unk_1E2DAD250;
  v146 = Espresso::AOT::DTrees::lstmCpuJp;
  v149 = 8;
  v147 = &v145;
  strcpy((char *)v148, "H14C-cpu");
  v150 = &unk_1E2DAD250;
  v151 = Espresso::AOT::DTrees::lstmCpuHp;
  v154 = 8;
  v152 = &v150;
  strcpy((char *)v153, "H13S-cpu");
  v155 = &unk_1E2DAD250;
  v156 = Espresso::AOT::DTrees::lstmCpuKp;
  v157 = &v155;
  v159 = 8;
  strcpy((char *)v158, "H14S-cpu");
  v160 = &unk_1E2DAD250;
  v161 = Espresso::AOT::DTrees::lstmCpuGp;
  v162 = &v160;
  v164 = 8;
  strcpy((char *)v163, "H13G-gpu");
  v165 = &unk_1E2DAD250;
  v166 = Espresso::AOT::DTrees::lstmGpuIp;
  v167 = &v165;
  v169 = 8;
  strcpy((char *)v168, "H14G-gpu");
  v170 = &unk_1E2DAD250;
  v171 = Espresso::AOT::DTrees::lstmGpuFp;
  v172 = &v170;
  v174 = 8;
  strcpy((char *)v173, "H13C-gpu");
  v175 = &unk_1E2DAD250;
  v176 = Espresso::AOT::DTrees::lstmGpuJp;
  v177 = &v175;
  v179 = 8;
  strcpy(v178, "H14C-gpu");
  v180 = &unk_1E2DAD250;
  v181 = Espresso::AOT::DTrees::lstmGpuHp;
  v182 = &v180;
  v184 = 8;
  strcpy(v183, "H13S-gpu");
  v185 = &unk_1E2DAD250;
  v186 = Espresso::AOT::DTrees::lstmGpuKp;
  v187 = &v185;
  v189 = 8;
  strcpy(v188, "H14S-gpu");
  v190 = &unk_1E2DAD250;
  v191 = Espresso::AOT::DTrees::lstmGpuGp;
  v192 = &v190;
  v194 = 8;
  strcpy(v193, "H13P-cpu");
  v195 = &unk_1E2DAD250;
  v196 = Espresso::AOT::DTrees::lstmCpu;
  v197 = &v195;
  v199 = 8;
  strcpy(v198, "H14P-cpu");
  v200 = &unk_1E2DAD250;
  v201 = Espresso::AOT::DTrees::lstmCpu;
  v202 = &v200;
  v204 = 8;
  strcpy(v203, "H15P-cpu");
  v205 = &unk_1E2DAD250;
  v206 = Espresso::AOT::DTrees::lstmCpu;
  v207 = &v205;
  v209 = 8;
  strcpy(v208, "H16P-cpu");
  v210 = &unk_1E2DAD250;
  v211 = Espresso::AOT::DTrees::lstmCpu;
  v212 = &v210;
  v214 = 8;
  strcpy(v213, "H13P-gpu");
  v215 = &unk_1E2DAD250;
  v217 = &v215;
  strcpy(v218, "H14P-gpu");
  v222 = &v220;
  strcpy(v223, "H15P-gpu");
  v227 = &v225;
  v216 = Espresso::AOT::DTrees::lstmGpu;
  v219 = 8;
  v224 = 8;
  v229 = 8;
  strcpy(v228, "H16P-gpu");
  v220 = &unk_1E2DAD250;
  v221 = Espresso::AOT::DTrees::lstmGpu;
  v225 = &unk_1E2DAD250;
  v230 = &unk_1E2DAD250;
  v226 = Espresso::AOT::DTrees::lstmGpu;
  v231 = Espresso::AOT::DTrees::lstmGpu;
  v232 = &v230;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::map[abi:ne180100](&v127, (const void **)v133, 20);
  v23 = 140;
  do
  {
    v24 = (const void ***)v132[v23 + 1];
    if (&v130[v23 + 1] == v24)
    {
      v24 = &v130[v23 + 1];
      v25 = 4;
    }
    else
    {
      if (!v24)
        goto LABEL_81;
      v25 = 5;
    }
    ((void (*)(void))(*v24)[v25])();
LABEL_81:
    if (SHIBYTE(v130[v23]) < 0)
      operator delete(v128[v23 + 1]);
    v23 -= 7;
  }
  while (v23 * 8);
  v133[23] = 8;
  strcpy(v133, "H13G-ane");
  v134 = (char **)&unk_1E2DAD250;
  v135 = (char *)Espresso::AOT::DTrees::reluAneIp;
  v139 = 8;
  v137 = (uint64_t *)&v134;
  strcpy((char *)v138, "H14G-ane");
  v140 = &unk_1E2DAD250;
  v141 = Espresso::AOT::DTrees::reluAneFp;
  v144 = 8;
  v142 = &v140;
  strcpy((char *)v143, "H13C-ane");
  v145 = &unk_1E2DAD250;
  v146 = Espresso::AOT::DTrees::reluAneJp;
  v149 = 8;
  v147 = &v145;
  strcpy((char *)v148, "H14C-ane");
  v150 = &unk_1E2DAD250;
  v151 = Espresso::AOT::DTrees::reluAneHp;
  v154 = 8;
  v152 = &v150;
  strcpy((char *)v153, "H13S-ane");
  v155 = &unk_1E2DAD250;
  v156 = Espresso::AOT::DTrees::reluAneKp;
  v157 = &v155;
  v159 = 8;
  strcpy((char *)v158, "H14S-ane");
  v160 = &unk_1E2DAD250;
  v161 = Espresso::AOT::DTrees::reluAneGp;
  v162 = &v160;
  v164 = 8;
  strcpy((char *)v163, "H13G-cpu");
  v165 = &unk_1E2DAD250;
  v166 = Espresso::AOT::DTrees::reluCpuIp;
  v167 = &v165;
  v169 = 8;
  strcpy((char *)v168, "H14G-cpu");
  v170 = &unk_1E2DAD250;
  v171 = Espresso::AOT::DTrees::reluCpuFp;
  v172 = &v170;
  v174 = 8;
  strcpy((char *)v173, "H13C-cpu");
  v175 = &unk_1E2DAD250;
  v176 = Espresso::AOT::DTrees::reluCpuJp;
  v177 = &v175;
  v179 = 8;
  strcpy(v178, "H14C-cpu");
  v180 = &unk_1E2DAD250;
  v181 = Espresso::AOT::DTrees::reluCpuHp;
  v182 = &v180;
  v184 = 8;
  strcpy(v183, "H13S-cpu");
  v185 = &unk_1E2DAD250;
  v186 = Espresso::AOT::DTrees::reluCpuKp;
  v187 = &v185;
  v189 = 8;
  strcpy(v188, "H14S-cpu");
  v190 = &unk_1E2DAD250;
  v191 = Espresso::AOT::DTrees::reluCpuGp;
  v192 = &v190;
  v194 = 8;
  strcpy(v193, "H13G-gpu");
  v195 = &unk_1E2DAD250;
  v196 = Espresso::AOT::DTrees::reluGpuIp;
  v197 = &v195;
  v199 = 8;
  strcpy(v198, "H14G-gpu");
  v200 = &unk_1E2DAD250;
  v201 = Espresso::AOT::DTrees::reluGpuFp;
  v202 = &v200;
  v204 = 8;
  strcpy(v203, "H13C-gpu");
  v205 = &unk_1E2DAD250;
  v206 = Espresso::AOT::DTrees::reluGpuJp;
  v207 = &v205;
  v209 = 8;
  strcpy(v208, "H14C-gpu");
  v210 = &unk_1E2DAD250;
  v211 = Espresso::AOT::DTrees::reluGpuHp;
  v212 = &v210;
  v214 = 8;
  strcpy(v213, "H13S-gpu");
  v215 = &unk_1E2DAD250;
  v216 = Espresso::AOT::DTrees::reluGpuKp;
  v217 = &v215;
  v219 = 8;
  strcpy(v218, "H14S-gpu");
  v220 = &unk_1E2DAD250;
  v221 = Espresso::AOT::DTrees::reluGpuGp;
  v222 = &v220;
  v224 = 8;
  strcpy(v223, "H13P-cpu");
  v225 = &unk_1E2DAD250;
  v226 = Espresso::AOT::DTrees::reluCpuCp;
  v227 = &v225;
  v229 = 8;
  strcpy(v228, "H14P-cpu");
  v230 = &unk_1E2DAD250;
  v231 = Espresso::AOT::DTrees::reluCpuDp;
  v232 = &v230;
  v234 = 8;
  strcpy(v233, "H15P-cpu");
  v235 = &unk_1E2DAD250;
  v236 = Espresso::AOT::DTrees::reluCpuEp;
  v237 = &v235;
  v239 = 8;
  strcpy(v238, "H13P-gpu");
  v240 = &unk_1E2DAD250;
  v241 = Espresso::AOT::DTrees::reluGpuCp;
  v242 = &v240;
  v244 = 8;
  strcpy(v243, "H14P-gpu");
  v245 = &unk_1E2DAD250;
  v246 = Espresso::AOT::DTrees::reluGpuDp;
  v247 = &v245;
  v249 = 8;
  strcpy(v248, "H15P-gpu");
  v251 = Espresso::AOT::DTrees::reluGpuEp;
  v252 = &v250;
  v256 = Espresso::AOT::DTrees::reluAneCp;
  v257 = &v255;
  strcpy(v258, "H14P-ane");
  v250 = &unk_1E2DAD250;
  v261 = Espresso::AOT::DTrees::reluAneDp;
  v262 = &v260;
  v254 = 8;
  strcpy(v253, "H13P-ane");
  v255 = &unk_1E2DAD250;
  v259 = 8;
  v264 = 8;
  strcpy(v263, "H15P-ane");
  v260 = &unk_1E2DAD250;
  v265 = &unk_1E2DAD250;
  v266 = Espresso::AOT::DTrees::reluAneEp;
  v267 = &v265;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::map[abi:ne180100](&v125, (const void **)v133, 27);
  v26 = 189;
  do
  {
    v27 = (const void ***)v132[v26 + 1];
    if (&v130[v26 + 1] == v27)
    {
      v27 = &v130[v26 + 1];
      v28 = 4;
    }
    else
    {
      if (!v27)
        goto LABEL_90;
      v28 = 5;
    }
    ((void (*)(void))(*v27)[v28])();
LABEL_90:
    if (SHIBYTE(v130[v26]) < 0)
      operator delete(v128[v26 + 1]);
    v26 -= 7;
  }
  while (v26 * 8);
  v133[23] = 8;
  strcpy(v133, "H13G-ane");
  v134 = (char **)&unk_1E2DAD250;
  v135 = (char *)Espresso::AOT::DTrees::concatAneIp;
  v139 = 8;
  v137 = (uint64_t *)&v134;
  strcpy((char *)v138, "H14G-ane");
  v140 = &unk_1E2DAD250;
  v141 = Espresso::AOT::DTrees::concatAneFp;
  v144 = 8;
  v142 = &v140;
  strcpy((char *)v143, "H13C-ane");
  v145 = &unk_1E2DAD250;
  v146 = Espresso::AOT::DTrees::concatAneJp;
  v149 = 8;
  v147 = &v145;
  strcpy((char *)v148, "H14C-ane");
  v150 = &unk_1E2DAD250;
  v151 = Espresso::AOT::DTrees::concatAneHp;
  v154 = 8;
  v152 = &v150;
  strcpy((char *)v153, "H13S-ane");
  v155 = &unk_1E2DAD250;
  v156 = Espresso::AOT::DTrees::concatAneKp;
  v157 = &v155;
  v159 = 8;
  strcpy((char *)v158, "H14S-ane");
  v160 = &unk_1E2DAD250;
  v161 = Espresso::AOT::DTrees::concatAneGp;
  v162 = &v160;
  v164 = 8;
  strcpy((char *)v163, "H13G-cpu");
  v165 = &unk_1E2DAD250;
  v166 = Espresso::AOT::DTrees::concatCpuIp;
  v167 = &v165;
  v169 = 8;
  strcpy((char *)v168, "H14G-cpu");
  v170 = &unk_1E2DAD250;
  v171 = Espresso::AOT::DTrees::concatCpuFp;
  v172 = &v170;
  v174 = 8;
  strcpy((char *)v173, "H13C-cpu");
  v175 = &unk_1E2DAD250;
  v176 = Espresso::AOT::DTrees::concatCpuJp;
  v177 = &v175;
  v179 = 8;
  strcpy(v178, "H14C-cpu");
  v180 = &unk_1E2DAD250;
  v181 = Espresso::AOT::DTrees::concatCpuHp;
  v182 = &v180;
  v184 = 8;
  strcpy(v183, "H13S-cpu");
  v185 = &unk_1E2DAD250;
  v186 = Espresso::AOT::DTrees::concatCpuKp;
  v187 = &v185;
  v189 = 8;
  strcpy(v188, "H14S-cpu");
  v190 = &unk_1E2DAD250;
  v191 = Espresso::AOT::DTrees::concatCpuGp;
  v192 = &v190;
  v194 = 8;
  strcpy(v193, "H13G-gpu");
  v195 = &unk_1E2DAD250;
  v196 = Espresso::AOT::DTrees::concatGpuIp;
  v197 = &v195;
  v199 = 8;
  strcpy(v198, "H14G-gpu");
  v200 = &unk_1E2DAD250;
  v201 = Espresso::AOT::DTrees::concatGpuFp;
  v202 = &v200;
  v204 = 8;
  strcpy(v203, "H13C-gpu");
  v205 = &unk_1E2DAD250;
  v206 = Espresso::AOT::DTrees::concatGpuJp;
  v207 = &v205;
  v209 = 8;
  strcpy(v208, "H14C-gpu");
  v210 = &unk_1E2DAD250;
  v211 = Espresso::AOT::DTrees::concatGpuHp;
  v212 = &v210;
  v214 = 8;
  strcpy(v213, "H13S-gpu");
  v215 = &unk_1E2DAD250;
  v216 = Espresso::AOT::DTrees::concatGpuKp;
  v217 = &v215;
  v219 = 8;
  strcpy(v218, "H14S-gpu");
  v220 = &unk_1E2DAD250;
  v221 = Espresso::AOT::DTrees::concatGpuGp;
  v222 = &v220;
  v224 = 8;
  strcpy(v223, "H13P-cpu");
  v225 = &unk_1E2DAD250;
  v226 = Espresso::AOT::DTrees::concatCpuCp;
  v227 = &v225;
  v229 = 8;
  strcpy(v228, "H14P-cpu");
  v230 = &unk_1E2DAD250;
  v231 = Espresso::AOT::DTrees::concatCpuDp;
  v232 = &v230;
  v234 = 8;
  strcpy(v233, "H15P-cpu");
  v235 = &unk_1E2DAD250;
  v236 = Espresso::AOT::DTrees::concatCpuEp;
  v237 = &v235;
  v239 = 8;
  strcpy(v238, "H13P-gpu");
  v240 = &unk_1E2DAD250;
  v241 = Espresso::AOT::DTrees::concatGpuCp;
  v242 = &v240;
  v244 = 8;
  strcpy(v243, "H14P-gpu");
  v245 = &unk_1E2DAD250;
  v246 = Espresso::AOT::DTrees::concatGpuDp;
  v247 = &v245;
  v249 = 8;
  strcpy(v248, "H15P-gpu");
  v251 = Espresso::AOT::DTrees::concatGpuEp;
  v252 = &v250;
  v256 = Espresso::AOT::DTrees::concatAneCp;
  v257 = &v255;
  strcpy(v258, "H14P-ane");
  v250 = &unk_1E2DAD250;
  v261 = Espresso::AOT::DTrees::concatAneDp;
  v262 = &v260;
  v254 = 8;
  strcpy(v253, "H13P-ane");
  v255 = &unk_1E2DAD250;
  v259 = 8;
  v264 = 8;
  strcpy(v263, "H15P-ane");
  v260 = &unk_1E2DAD250;
  v265 = &unk_1E2DAD250;
  v266 = Espresso::AOT::DTrees::concatAneEp;
  v267 = &v265;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::map[abi:ne180100](&v123, (const void **)v133, 27);
  v29 = 189;
  do
  {
    v30 = (const void ***)v132[v29 + 1];
    if (&v130[v29 + 1] == v30)
    {
      v30 = &v130[v29 + 1];
      v31 = 4;
    }
    else
    {
      if (!v30)
        goto LABEL_99;
      v31 = 5;
    }
    ((void (*)(void))(*v30)[v31])();
LABEL_99:
    if (SHIBYTE(v130[v29]) < 0)
      operator delete(v128[v29 + 1]);
    v29 -= 7;
  }
  while (v29 * 8);
  v133[23] = 8;
  strcpy(v133, "H13G-ane");
  v134 = (char **)&unk_1E2DAD250;
  v135 = (char *)Espresso::AOT::DTrees::linearAneIp;
  v139 = 8;
  v137 = (uint64_t *)&v134;
  strcpy((char *)v138, "H14G-ane");
  v140 = &unk_1E2DAD250;
  v141 = Espresso::AOT::DTrees::linearAneFp;
  v144 = 8;
  v142 = &v140;
  strcpy((char *)v143, "H13C-ane");
  v145 = &unk_1E2DAD250;
  v146 = Espresso::AOT::DTrees::linearAneJp;
  v149 = 8;
  v147 = &v145;
  strcpy((char *)v148, "H14C-ane");
  v150 = &unk_1E2DAD250;
  v151 = Espresso::AOT::DTrees::linearAneHp;
  v154 = 8;
  v152 = &v150;
  strcpy((char *)v153, "H13S-ane");
  v155 = &unk_1E2DAD250;
  v156 = Espresso::AOT::DTrees::linearAneKp;
  v157 = &v155;
  v159 = 8;
  strcpy((char *)v158, "H14S-ane");
  v160 = &unk_1E2DAD250;
  v161 = Espresso::AOT::DTrees::linearAneGp;
  v162 = &v160;
  v164 = 8;
  strcpy((char *)v163, "H13G-cpu");
  v165 = &unk_1E2DAD250;
  v166 = Espresso::AOT::DTrees::linearCpuIp;
  v167 = &v165;
  v169 = 8;
  strcpy((char *)v168, "H14G-cpu");
  v170 = &unk_1E2DAD250;
  v171 = Espresso::AOT::DTrees::linearCpuFp;
  v172 = &v170;
  v174 = 8;
  strcpy((char *)v173, "H13C-cpu");
  v175 = &unk_1E2DAD250;
  v176 = Espresso::AOT::DTrees::linearCpuJp;
  v177 = &v175;
  v179 = 8;
  strcpy(v178, "H14C-cpu");
  v180 = &unk_1E2DAD250;
  v181 = Espresso::AOT::DTrees::linearCpuHp;
  v182 = &v180;
  v184 = 8;
  strcpy(v183, "H13S-cpu");
  v185 = &unk_1E2DAD250;
  v186 = Espresso::AOT::DTrees::linearCpuKp;
  v187 = &v185;
  v189 = 8;
  strcpy(v188, "H14S-cpu");
  v190 = &unk_1E2DAD250;
  v191 = Espresso::AOT::DTrees::linearCpuGp;
  v192 = &v190;
  v194 = 8;
  strcpy(v193, "H13G-gpu");
  v195 = &unk_1E2DAD250;
  v196 = Espresso::AOT::DTrees::linearGpuIp;
  v197 = &v195;
  v199 = 8;
  strcpy(v198, "H14G-gpu");
  v200 = &unk_1E2DAD250;
  v201 = Espresso::AOT::DTrees::linearGpuFp;
  v202 = &v200;
  v204 = 8;
  strcpy(v203, "H13C-gpu");
  v205 = &unk_1E2DAD250;
  v206 = Espresso::AOT::DTrees::linearGpuJp;
  v207 = &v205;
  v209 = 8;
  strcpy(v208, "H14C-gpu");
  v210 = &unk_1E2DAD250;
  v211 = Espresso::AOT::DTrees::linearGpuHp;
  v212 = &v210;
  v214 = 8;
  strcpy(v213, "H13S-gpu");
  v215 = &unk_1E2DAD250;
  v216 = Espresso::AOT::DTrees::linearGpuKp;
  v217 = &v215;
  v219 = 8;
  strcpy(v218, "H14S-gpu");
  v220 = &unk_1E2DAD250;
  v221 = Espresso::AOT::DTrees::linearGpuGp;
  v222 = &v220;
  v224 = 8;
  strcpy(v223, "H13P-cpu");
  v225 = &unk_1E2DAD250;
  v226 = Espresso::AOT::DTrees::linearCpuCp;
  v227 = &v225;
  v229 = 8;
  strcpy(v228, "H14P-cpu");
  v230 = &unk_1E2DAD250;
  v231 = Espresso::AOT::DTrees::linearCpuDp;
  v232 = &v230;
  v234 = 8;
  strcpy(v233, "H15P-cpu");
  v235 = &unk_1E2DAD250;
  v236 = Espresso::AOT::DTrees::linearCpuEp;
  v237 = &v235;
  v239 = 8;
  strcpy(v238, "H13P-gpu");
  v240 = &unk_1E2DAD250;
  v241 = Espresso::AOT::DTrees::linearGpuCp;
  v242 = &v240;
  v244 = 8;
  strcpy(v243, "H14P-gpu");
  v245 = &unk_1E2DAD250;
  v246 = Espresso::AOT::DTrees::linearGpuDp;
  v247 = &v245;
  v249 = 8;
  strcpy(v248, "H15P-gpu");
  v251 = Espresso::AOT::DTrees::linearGpuEp;
  v252 = &v250;
  v256 = Espresso::AOT::DTrees::linearAneCp;
  v257 = &v255;
  strcpy(v258, "H14P-ane");
  v250 = &unk_1E2DAD250;
  v261 = Espresso::AOT::DTrees::linearAneDp;
  v262 = &v260;
  v254 = 8;
  strcpy(v253, "H13P-ane");
  v255 = &unk_1E2DAD250;
  v259 = 8;
  v264 = 8;
  strcpy(v263, "H15P-ane");
  v260 = &unk_1E2DAD250;
  v265 = &unk_1E2DAD250;
  v266 = Espresso::AOT::DTrees::linearAneEp;
  v267 = &v265;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::map[abi:ne180100](&v121, (const void **)v133, 27);
  v32 = 189;
  do
  {
    v33 = (const void ***)v132[v32 + 1];
    if (&v130[v32 + 1] == v33)
    {
      v33 = &v130[v32 + 1];
      v34 = 4;
    }
    else
    {
      if (!v33)
        goto LABEL_108;
      v34 = 5;
    }
    ((void (*)(void))(*v33)[v34])();
LABEL_108:
    if (SHIBYTE(v130[v32]) < 0)
      operator delete(v128[v32 + 1]);
    v32 -= 7;
  }
  while (v32 * 8);
  v133[23] = 8;
  strcpy(v133, "H13G-ane");
  v134 = (char **)&unk_1E2DAD250;
  v135 = (char *)Espresso::AOT::DTrees::addAneIp;
  v139 = 8;
  v137 = (uint64_t *)&v134;
  strcpy((char *)v138, "H14G-ane");
  v140 = &unk_1E2DAD250;
  v141 = Espresso::AOT::DTrees::addAneFp;
  v144 = 8;
  v142 = &v140;
  strcpy((char *)v143, "H13C-ane");
  v145 = &unk_1E2DAD250;
  v146 = Espresso::AOT::DTrees::addAneJp;
  v149 = 8;
  v147 = &v145;
  strcpy((char *)v148, "H14C-ane");
  v150 = &unk_1E2DAD250;
  v151 = Espresso::AOT::DTrees::addAneHp;
  v154 = 8;
  v152 = &v150;
  strcpy((char *)v153, "H13S-ane");
  v155 = &unk_1E2DAD250;
  v156 = Espresso::AOT::DTrees::addAneKp;
  v157 = &v155;
  v159 = 8;
  strcpy((char *)v158, "H14S-ane");
  v160 = &unk_1E2DAD250;
  v161 = Espresso::AOT::DTrees::addAneGp;
  v162 = &v160;
  v164 = 8;
  strcpy((char *)v163, "H13G-cpu");
  v165 = &unk_1E2DAD250;
  v166 = Espresso::AOT::DTrees::addCpuIp;
  v167 = &v165;
  v169 = 8;
  strcpy((char *)v168, "H14G-cpu");
  v170 = &unk_1E2DAD250;
  v171 = Espresso::AOT::DTrees::addCpuFp;
  v172 = &v170;
  v174 = 8;
  strcpy((char *)v173, "H13C-cpu");
  v175 = &unk_1E2DAD250;
  v176 = Espresso::AOT::DTrees::addCpuJp;
  v177 = &v175;
  v179 = 8;
  strcpy(v178, "H14C-cpu");
  v180 = &unk_1E2DAD250;
  v181 = Espresso::AOT::DTrees::addCpuHp;
  v182 = &v180;
  v184 = 8;
  strcpy(v183, "H13S-cpu");
  v185 = &unk_1E2DAD250;
  v186 = Espresso::AOT::DTrees::addCpuKp;
  v187 = &v185;
  v189 = 8;
  strcpy(v188, "H14S-cpu");
  v190 = &unk_1E2DAD250;
  v191 = Espresso::AOT::DTrees::addCpuGp;
  v192 = &v190;
  v194 = 8;
  strcpy(v193, "H13G-gpu");
  v195 = &unk_1E2DAD250;
  v196 = Espresso::AOT::DTrees::addGpuIp;
  v197 = &v195;
  v199 = 8;
  strcpy(v198, "H14G-gpu");
  v200 = &unk_1E2DAD250;
  v201 = Espresso::AOT::DTrees::addGpuFp;
  v202 = &v200;
  v204 = 8;
  strcpy(v203, "H13C-gpu");
  v205 = &unk_1E2DAD250;
  v206 = Espresso::AOT::DTrees::addGpuJp;
  v207 = &v205;
  v209 = 8;
  strcpy(v208, "H14C-gpu");
  v210 = &unk_1E2DAD250;
  v211 = Espresso::AOT::DTrees::addGpuHp;
  v212 = &v210;
  v214 = 8;
  strcpy(v213, "H13S-gpu");
  v215 = &unk_1E2DAD250;
  v216 = Espresso::AOT::DTrees::addGpuKp;
  v217 = &v215;
  v219 = 8;
  strcpy(v218, "H14S-gpu");
  v220 = &unk_1E2DAD250;
  v221 = Espresso::AOT::DTrees::addGpuGp;
  v222 = &v220;
  v224 = 8;
  strcpy(v223, "H13P-cpu");
  v225 = &unk_1E2DAD250;
  v226 = Espresso::AOT::DTrees::addCpuCp;
  v227 = &v225;
  v229 = 8;
  strcpy(v228, "H14P-cpu");
  v230 = &unk_1E2DAD250;
  v231 = Espresso::AOT::DTrees::addCpuDp;
  v232 = &v230;
  v234 = 8;
  strcpy(v233, "H15P-cpu");
  v235 = &unk_1E2DAD250;
  v236 = Espresso::AOT::DTrees::addCpuEp;
  v237 = &v235;
  v239 = 8;
  strcpy(v238, "H13P-gpu");
  v240 = &unk_1E2DAD250;
  v241 = Espresso::AOT::DTrees::addGpuCp;
  v242 = &v240;
  v244 = 8;
  strcpy(v243, "H14P-gpu");
  v245 = &unk_1E2DAD250;
  v246 = Espresso::AOT::DTrees::addGpuDp;
  v247 = &v245;
  v249 = 8;
  strcpy(v248, "H15P-gpu");
  v251 = Espresso::AOT::DTrees::addGpuEp;
  v252 = &v250;
  v256 = Espresso::AOT::DTrees::addAneCp;
  v257 = &v255;
  strcpy(v258, "H14P-ane");
  v250 = &unk_1E2DAD250;
  v261 = Espresso::AOT::DTrees::addAneDp;
  v262 = &v260;
  v254 = 8;
  strcpy(v253, "H13P-ane");
  v255 = &unk_1E2DAD250;
  v259 = 8;
  v264 = 8;
  strcpy(v263, "H15P-ane");
  v260 = &unk_1E2DAD250;
  v265 = &unk_1E2DAD250;
  v266 = Espresso::AOT::DTrees::addAneEp;
  v267 = &v265;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::map[abi:ne180100](&v119, (const void **)v133, 27);
  v35 = 189;
  do
  {
    v36 = (const void ***)v132[v35 + 1];
    if (&v130[v35 + 1] == v36)
    {
      v36 = &v130[v35 + 1];
      v37 = 4;
    }
    else
    {
      if (!v36)
        goto LABEL_117;
      v37 = 5;
    }
    ((void (*)(void))(*v36)[v37])();
LABEL_117:
    if (SHIBYTE(v130[v35]) < 0)
      operator delete(v128[v35 + 1]);
    v35 -= 7;
  }
  while (v35 * 8);
  v133[23] = 8;
  strcpy(v133, "H13G-ane");
  v134 = (char **)&unk_1E2DAD250;
  v135 = (char *)Espresso::AOT::DTrees::conv_transposeAneIp;
  v139 = 8;
  v137 = (uint64_t *)&v134;
  strcpy((char *)v138, "H14G-ane");
  v140 = &unk_1E2DAD250;
  v141 = Espresso::AOT::DTrees::conv_transposeAneFp;
  v144 = 8;
  v142 = &v140;
  strcpy((char *)v143, "H13C-ane");
  v145 = &unk_1E2DAD250;
  v146 = Espresso::AOT::DTrees::conv_transposeAneJp;
  v149 = 8;
  v147 = &v145;
  strcpy((char *)v148, "H14C-ane");
  v150 = &unk_1E2DAD250;
  v151 = Espresso::AOT::DTrees::conv_transposeAneHp;
  v154 = 8;
  v152 = &v150;
  strcpy((char *)v153, "H13S-ane");
  v155 = &unk_1E2DAD250;
  v156 = Espresso::AOT::DTrees::conv_transposeAneKp;
  v157 = &v155;
  v159 = 8;
  strcpy((char *)v158, "H14S-ane");
  v160 = &unk_1E2DAD250;
  v161 = Espresso::AOT::DTrees::conv_transposeAneGp;
  v162 = &v160;
  v164 = 8;
  strcpy((char *)v163, "H13G-cpu");
  v165 = &unk_1E2DAD250;
  v166 = Espresso::AOT::DTrees::conv_transposeCpuIp;
  v167 = &v165;
  v169 = 8;
  strcpy((char *)v168, "H14G-cpu");
  v170 = &unk_1E2DAD250;
  v171 = Espresso::AOT::DTrees::conv_transposeCpuFp;
  v172 = &v170;
  v174 = 8;
  strcpy((char *)v173, "H13C-cpu");
  v175 = &unk_1E2DAD250;
  v176 = Espresso::AOT::DTrees::conv_transposeCpuJp;
  v177 = &v175;
  v179 = 8;
  strcpy(v178, "H14C-cpu");
  v180 = &unk_1E2DAD250;
  v181 = Espresso::AOT::DTrees::conv_transposeCpuHp;
  v182 = &v180;
  v184 = 8;
  strcpy(v183, "H13S-cpu");
  v185 = &unk_1E2DAD250;
  v186 = Espresso::AOT::DTrees::conv_transposeCpuKp;
  v187 = &v185;
  v189 = 8;
  strcpy(v188, "H14S-cpu");
  v190 = &unk_1E2DAD250;
  v191 = Espresso::AOT::DTrees::conv_transposeCpuGp;
  v192 = &v190;
  v194 = 8;
  strcpy(v193, "H13G-gpu");
  v195 = &unk_1E2DAD250;
  v196 = Espresso::AOT::DTrees::conv_transposeGpuIp;
  v197 = &v195;
  v199 = 8;
  strcpy(v198, "H14G-gpu");
  v200 = &unk_1E2DAD250;
  v201 = Espresso::AOT::DTrees::conv_transposeGpuFp;
  v202 = &v200;
  v204 = 8;
  strcpy(v203, "H13C-gpu");
  v205 = &unk_1E2DAD250;
  v206 = Espresso::AOT::DTrees::conv_transposeGpuJp;
  v207 = &v205;
  v209 = 8;
  strcpy(v208, "H14C-gpu");
  v210 = &unk_1E2DAD250;
  v211 = Espresso::AOT::DTrees::conv_transposeGpuHp;
  v212 = &v210;
  v214 = 8;
  strcpy(v213, "H13S-gpu");
  v215 = &unk_1E2DAD250;
  v216 = Espresso::AOT::DTrees::conv_transposeGpuKp;
  v217 = &v215;
  v219 = 8;
  strcpy(v218, "H14S-gpu");
  v220 = &unk_1E2DAD250;
  v221 = Espresso::AOT::DTrees::conv_transposeGpuGp;
  v222 = &v220;
  v224 = 8;
  strcpy(v223, "H13P-cpu");
  v225 = &unk_1E2DAD250;
  v226 = Espresso::AOT::DTrees::conv_transposeCpuCp;
  v227 = &v225;
  v229 = 8;
  strcpy(v228, "H14P-cpu");
  v230 = &unk_1E2DAD250;
  v231 = Espresso::AOT::DTrees::conv_transposeCpuDp;
  v232 = &v230;
  v234 = 8;
  strcpy(v233, "H15P-cpu");
  v235 = &unk_1E2DAD250;
  v236 = Espresso::AOT::DTrees::conv_transposeCpuEp;
  v237 = &v235;
  v239 = 8;
  strcpy(v238, "H13P-gpu");
  v240 = &unk_1E2DAD250;
  v241 = Espresso::AOT::DTrees::conv_transposeGpuCp;
  v242 = &v240;
  v244 = 8;
  strcpy(v243, "H14P-gpu");
  v245 = &unk_1E2DAD250;
  v246 = Espresso::AOT::DTrees::conv_transposeGpuDp;
  v247 = &v245;
  v249 = 8;
  strcpy(v248, "H15P-gpu");
  v251 = Espresso::AOT::DTrees::conv_transposeGpuEp;
  v252 = &v250;
  v256 = Espresso::AOT::DTrees::conv_transposeAneCp;
  v257 = &v255;
  strcpy(v258, "H14P-ane");
  v250 = &unk_1E2DAD250;
  v261 = Espresso::AOT::DTrees::conv_transposeAneDp;
  v262 = &v260;
  v254 = 8;
  strcpy(v253, "H13P-ane");
  v255 = &unk_1E2DAD250;
  v259 = 8;
  v264 = 8;
  strcpy(v263, "H15P-ane");
  v260 = &unk_1E2DAD250;
  v265 = &unk_1E2DAD250;
  v266 = Espresso::AOT::DTrees::conv_transposeAneEp;
  v267 = &v265;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::map[abi:ne180100](&v117, (const void **)v133, 27);
  v38 = 189;
  do
  {
    v39 = (const void ***)v132[v38 + 1];
    if (&v130[v38 + 1] == v39)
    {
      v39 = &v130[v38 + 1];
      v40 = 4;
    }
    else
    {
      if (!v39)
        goto LABEL_126;
      v40 = 5;
    }
    ((void (*)(void))(*v39)[v40])();
LABEL_126:
    if (SHIBYTE(v130[v38]) < 0)
      operator delete(v128[v38 + 1]);
    v38 -= 7;
  }
  while (v38 * 8);
  v133[23] = 8;
  strcpy(v133, "H13G-ane");
  v134 = (char **)&unk_1E2DAD250;
  v135 = (char *)Espresso::AOT::DTrees::transposeAneIp;
  v139 = 8;
  v137 = (uint64_t *)&v134;
  strcpy((char *)v138, "H14G-ane");
  v140 = &unk_1E2DAD250;
  v141 = Espresso::AOT::DTrees::transposeAneFp;
  v144 = 8;
  v142 = &v140;
  strcpy((char *)v143, "H13C-ane");
  v145 = &unk_1E2DAD250;
  v146 = Espresso::AOT::DTrees::transposeAneJp;
  v149 = 8;
  v147 = &v145;
  strcpy((char *)v148, "H14C-ane");
  v150 = &unk_1E2DAD250;
  v151 = Espresso::AOT::DTrees::transposeAneHp;
  v154 = 8;
  v152 = &v150;
  strcpy((char *)v153, "H13S-ane");
  v155 = &unk_1E2DAD250;
  v156 = Espresso::AOT::DTrees::transposeAneKp;
  v157 = &v155;
  v159 = 8;
  strcpy((char *)v158, "H14S-ane");
  v160 = &unk_1E2DAD250;
  v161 = Espresso::AOT::DTrees::transposeAneGp;
  v162 = &v160;
  v164 = 8;
  strcpy((char *)v163, "H13G-cpu");
  v165 = &unk_1E2DAD250;
  v166 = Espresso::AOT::DTrees::transposeCpuIp;
  v167 = &v165;
  v169 = 8;
  strcpy((char *)v168, "H14G-cpu");
  v170 = &unk_1E2DAD250;
  v171 = Espresso::AOT::DTrees::transposeCpuFp;
  v172 = &v170;
  v174 = 8;
  strcpy((char *)v173, "H13C-cpu");
  v175 = &unk_1E2DAD250;
  v176 = Espresso::AOT::DTrees::transposeCpuJp;
  v177 = &v175;
  v179 = 8;
  strcpy(v178, "H14C-cpu");
  v180 = &unk_1E2DAD250;
  v181 = Espresso::AOT::DTrees::transposeCpuHp;
  v182 = &v180;
  v184 = 8;
  strcpy(v183, "H13S-cpu");
  v185 = &unk_1E2DAD250;
  v186 = Espresso::AOT::DTrees::transposeCpuKp;
  v187 = &v185;
  v189 = 8;
  strcpy(v188, "H14S-cpu");
  v190 = &unk_1E2DAD250;
  v191 = Espresso::AOT::DTrees::transposeCpuGp;
  v192 = &v190;
  v194 = 8;
  strcpy(v193, "H13G-gpu");
  v195 = &unk_1E2DAD250;
  v196 = Espresso::AOT::DTrees::transposeGpuIp;
  v197 = &v195;
  v199 = 8;
  strcpy(v198, "H14G-gpu");
  v200 = &unk_1E2DAD250;
  v201 = Espresso::AOT::DTrees::transposeGpuFp;
  v202 = &v200;
  v204 = 8;
  strcpy(v203, "H13C-gpu");
  v205 = &unk_1E2DAD250;
  v206 = Espresso::AOT::DTrees::transposeGpuJp;
  v207 = &v205;
  v209 = 8;
  strcpy(v208, "H14C-gpu");
  v210 = &unk_1E2DAD250;
  v211 = Espresso::AOT::DTrees::transposeGpuHp;
  v212 = &v210;
  v214 = 8;
  strcpy(v213, "H13S-gpu");
  v215 = &unk_1E2DAD250;
  v216 = Espresso::AOT::DTrees::transposeGpuKp;
  v217 = &v215;
  v219 = 8;
  strcpy(v218, "H14S-gpu");
  v220 = &unk_1E2DAD250;
  v221 = Espresso::AOT::DTrees::transposeGpuGp;
  v222 = &v220;
  v224 = 8;
  strcpy(v223, "H13P-cpu");
  v225 = &unk_1E2DAD250;
  v226 = Espresso::AOT::DTrees::transposeCpuCp;
  v227 = &v225;
  v229 = 8;
  strcpy(v228, "H14P-cpu");
  v230 = &unk_1E2DAD250;
  v231 = Espresso::AOT::DTrees::transposeCpuDp;
  v232 = &v230;
  v234 = 8;
  strcpy(v233, "H15P-cpu");
  v235 = &unk_1E2DAD250;
  v236 = Espresso::AOT::DTrees::transposeCpuEp;
  v237 = &v235;
  v239 = 8;
  strcpy(v238, "H13P-gpu");
  v240 = &unk_1E2DAD250;
  v241 = Espresso::AOT::DTrees::transposeGpuCp;
  v242 = &v240;
  v244 = 8;
  strcpy(v243, "H14P-gpu");
  v245 = &unk_1E2DAD250;
  v246 = Espresso::AOT::DTrees::transposeGpuDp;
  v247 = &v245;
  v249 = 8;
  strcpy(v248, "H15P-gpu");
  v251 = Espresso::AOT::DTrees::transposeGpuEp;
  v252 = &v250;
  v256 = Espresso::AOT::DTrees::transposeAneCp;
  v257 = &v255;
  strcpy(v258, "H14P-ane");
  v250 = &unk_1E2DAD250;
  v261 = Espresso::AOT::DTrees::transposeAneDp;
  v262 = &v260;
  v254 = 8;
  strcpy(v253, "H13P-ane");
  v255 = &unk_1E2DAD250;
  v259 = 8;
  v264 = 8;
  strcpy(v263, "H15P-ane");
  v260 = &unk_1E2DAD250;
  v265 = &unk_1E2DAD250;
  v266 = Espresso::AOT::DTrees::transposeAneEp;
  v267 = &v265;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::map[abi:ne180100](&v115, (const void **)v133, 27);
  v41 = 189;
  do
  {
    v42 = (const void ***)v132[v41 + 1];
    if (&v130[v41 + 1] == v42)
    {
      v42 = &v130[v41 + 1];
      v43 = 4;
    }
    else
    {
      if (!v42)
        goto LABEL_135;
      v43 = 5;
    }
    ((void (*)(void))(*v42)[v43])();
LABEL_135:
    if (SHIBYTE(v130[v41]) < 0)
      operator delete(v128[v41 + 1]);
    v41 -= 7;
  }
  while (v41 * 8);
  v133[23] = 8;
  strcpy(v133, "H13P-cpu");
  v134 = (char **)&unk_1E2DAD250;
  v135 = (char *)Espresso::AOT::DTrees::max_poolCpuCp;
  v139 = 8;
  v137 = (uint64_t *)&v134;
  strcpy((char *)v138, "H14P-cpu");
  v140 = &unk_1E2DAD250;
  v141 = Espresso::AOT::DTrees::max_poolCpuDp;
  v144 = 8;
  v142 = &v140;
  strcpy((char *)v143, "H15P-cpu");
  v145 = &unk_1E2DAD250;
  v146 = Espresso::AOT::DTrees::max_poolCpuEp;
  v149 = 8;
  v147 = &v145;
  strcpy((char *)v148, "H13P-gpu");
  v150 = &unk_1E2DAD250;
  v151 = Espresso::AOT::DTrees::max_poolGpuCp;
  v154 = 8;
  v152 = &v150;
  strcpy((char *)v153, "H14P-gpu");
  v155 = &unk_1E2DAD250;
  v156 = Espresso::AOT::DTrees::max_poolGpuDp;
  v157 = &v155;
  v159 = 8;
  strcpy((char *)v158, "H15P-gpu");
  v160 = &unk_1E2DAD250;
  v161 = Espresso::AOT::DTrees::max_poolGpuEp;
  v162 = &v160;
  v164 = 8;
  strcpy((char *)v163, "H13P-ane");
  v165 = &unk_1E2DAD250;
  v166 = Espresso::AOT::DTrees::max_poolAneCp;
  v167 = &v165;
  v169 = 8;
  strcpy((char *)v168, "H14P-ane");
  v170 = &unk_1E2DAD250;
  v171 = Espresso::AOT::DTrees::max_poolAneDp;
  v172 = &v170;
  v174 = 8;
  strcpy((char *)v173, "H15P-ane");
  v175 = &unk_1E2DAD250;
  v176 = Espresso::AOT::DTrees::max_poolAneEp;
  v177 = &v175;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::map[abi:ne180100](&v113, (const void **)v133, 9);
  v44 = v177;
  if (v177 == &v175)
  {
    v45 = 4;
    v44 = &v175;
LABEL_141:
    (*((void (**)(void))*v44 + v45))();
  }
  else if (v177)
  {
    v45 = 5;
    goto LABEL_141;
  }
  if (v174 < 0)
  {
    operator delete(v173[0]);
    v46 = v172;
    if (v172 == &v170)
      goto LABEL_147;
LABEL_144:
    if (v46)
    {
      v47 = 5;
      goto LABEL_148;
    }
  }
  else
  {
    v46 = v172;
    if (v172 != &v170)
      goto LABEL_144;
LABEL_147:
    v47 = 4;
    v46 = &v170;
LABEL_148:
    (*((void (**)(void))*v46 + v47))();
  }
  if (v169 < 0)
  {
    operator delete(v168[0]);
    v48 = v167;
    if (v167 == &v165)
      goto LABEL_154;
LABEL_151:
    if (v48)
    {
      v49 = 5;
      goto LABEL_155;
    }
  }
  else
  {
    v48 = v167;
    if (v167 != &v165)
      goto LABEL_151;
LABEL_154:
    v49 = 4;
    v48 = &v165;
LABEL_155:
    (*((void (**)(void))*v48 + v49))();
  }
  if (v164 < 0)
  {
    operator delete(v163[0]);
    v50 = v162;
    if (v162 == &v160)
      goto LABEL_161;
LABEL_158:
    if (v50)
    {
      v51 = 5;
      goto LABEL_162;
    }
  }
  else
  {
    v50 = v162;
    if (v162 != &v160)
      goto LABEL_158;
LABEL_161:
    v51 = 4;
    v50 = &v160;
LABEL_162:
    (*((void (**)(void))*v50 + v51))();
  }
  if (v159 < 0)
  {
    operator delete(v158[0]);
    v52 = v157;
    if (v157 == &v155)
      goto LABEL_168;
LABEL_165:
    if (v52)
    {
      v53 = 5;
      goto LABEL_169;
    }
  }
  else
  {
    v52 = v157;
    if (v157 != &v155)
      goto LABEL_165;
LABEL_168:
    v53 = 4;
    v52 = &v155;
LABEL_169:
    (*((void (**)(void))*v52 + v53))();
  }
  if (v154 < 0)
  {
    operator delete(v153[0]);
    v54 = v152;
    if (v152 == &v150)
      goto LABEL_175;
LABEL_172:
    if (v54)
    {
      v55 = 5;
      goto LABEL_176;
    }
  }
  else
  {
    v54 = v152;
    if (v152 != &v150)
      goto LABEL_172;
LABEL_175:
    v55 = 4;
    v54 = &v150;
LABEL_176:
    (*((void (**)(void))*v54 + v55))();
  }
  if (v149 < 0)
  {
    operator delete(v148[0]);
    v56 = v147;
    if (v147 == &v145)
      goto LABEL_182;
LABEL_179:
    if (v56)
    {
      v57 = 5;
      goto LABEL_183;
    }
  }
  else
  {
    v56 = v147;
    if (v147 != &v145)
      goto LABEL_179;
LABEL_182:
    v57 = 4;
    v56 = &v145;
LABEL_183:
    (*((void (**)(void))*v56 + v57))();
  }
  if (v144 < 0)
  {
    operator delete(v143[0]);
    v58 = v142;
    if (v142 == &v140)
      goto LABEL_189;
LABEL_186:
    if (v58)
    {
      v59 = 5;
      goto LABEL_190;
    }
  }
  else
  {
    v58 = v142;
    if (v142 != &v140)
      goto LABEL_186;
LABEL_189:
    v59 = 4;
    v58 = &v140;
LABEL_190:
    (*((void (**)(void))*v58 + v59))();
  }
  if (v139 < 0)
  {
    operator delete(v138[0]);
    v60 = (char ***)v137;
    if (v137 == (uint64_t *)&v134)
      goto LABEL_196;
LABEL_193:
    if (v60)
    {
      v61 = 5;
      goto LABEL_197;
    }
  }
  else
  {
    v60 = (char ***)v137;
    if (v137 != (uint64_t *)&v134)
      goto LABEL_193;
LABEL_196:
    v61 = 4;
    v60 = &v134;
LABEL_197:
    ((void (*)(void))(*v60)[v61])();
  }
  if ((v133[23] & 0x80000000) != 0)
    operator delete(*(void **)v133);
  v133[23] = 8;
  strcpy(v133, "H13G-ane");
  v134 = (char **)&unk_1E2DAD250;
  v135 = (char *)Espresso::AOT::DTrees::mulAneIp;
  v139 = 8;
  v137 = (uint64_t *)&v134;
  strcpy((char *)v138, "H14G-ane");
  v140 = &unk_1E2DAD250;
  v141 = Espresso::AOT::DTrees::mulAneFp;
  v144 = 8;
  v142 = &v140;
  strcpy((char *)v143, "H13C-ane");
  v145 = &unk_1E2DAD250;
  v146 = Espresso::AOT::DTrees::mulAneJp;
  v149 = 8;
  v147 = &v145;
  strcpy((char *)v148, "H14C-ane");
  v150 = &unk_1E2DAD250;
  v151 = Espresso::AOT::DTrees::mulAneHp;
  v154 = 8;
  v152 = &v150;
  strcpy((char *)v153, "H13S-ane");
  v155 = &unk_1E2DAD250;
  v156 = Espresso::AOT::DTrees::mulAneKp;
  v157 = &v155;
  v159 = 8;
  strcpy((char *)v158, "H14S-ane");
  v160 = &unk_1E2DAD250;
  v161 = Espresso::AOT::DTrees::mulAneGp;
  v162 = &v160;
  v164 = 8;
  strcpy((char *)v163, "H13G-cpu");
  v165 = &unk_1E2DAD250;
  v166 = Espresso::AOT::DTrees::mulCpuIp;
  v167 = &v165;
  v169 = 8;
  strcpy((char *)v168, "H14G-cpu");
  v170 = &unk_1E2DAD250;
  v171 = Espresso::AOT::DTrees::mulCpuFp;
  v172 = &v170;
  v174 = 8;
  strcpy((char *)v173, "H13C-cpu");
  v175 = &unk_1E2DAD250;
  v176 = Espresso::AOT::DTrees::mulCpuJp;
  v177 = &v175;
  v179 = 8;
  strcpy(v178, "H14C-cpu");
  v180 = &unk_1E2DAD250;
  v181 = Espresso::AOT::DTrees::mulCpuHp;
  v182 = &v180;
  v184 = 8;
  strcpy(v183, "H13S-cpu");
  v185 = &unk_1E2DAD250;
  v186 = Espresso::AOT::DTrees::mulCpuKp;
  v187 = &v185;
  v189 = 8;
  strcpy(v188, "H14S-cpu");
  v190 = &unk_1E2DAD250;
  v191 = Espresso::AOT::DTrees::mulCpuGp;
  v192 = &v190;
  v194 = 8;
  strcpy(v193, "H13G-gpu");
  v195 = &unk_1E2DAD250;
  v196 = Espresso::AOT::DTrees::mulGpuIp;
  v197 = &v195;
  v199 = 8;
  strcpy(v198, "H14G-gpu");
  v200 = &unk_1E2DAD250;
  v201 = Espresso::AOT::DTrees::mulGpuFp;
  v202 = &v200;
  v204 = 8;
  strcpy(v203, "H13C-gpu");
  v205 = &unk_1E2DAD250;
  v206 = Espresso::AOT::DTrees::mulGpuJp;
  v207 = &v205;
  v209 = 8;
  strcpy(v208, "H14C-gpu");
  v210 = &unk_1E2DAD250;
  v211 = Espresso::AOT::DTrees::mulGpuHp;
  v212 = &v210;
  v214 = 8;
  strcpy(v213, "H13S-gpu");
  v215 = &unk_1E2DAD250;
  v216 = Espresso::AOT::DTrees::mulGpuKp;
  v217 = &v215;
  v219 = 8;
  strcpy(v218, "H14S-gpu");
  v220 = &unk_1E2DAD250;
  v221 = Espresso::AOT::DTrees::mulGpuGp;
  v222 = &v220;
  v224 = 8;
  strcpy(v223, "H13P-cpu");
  v225 = &unk_1E2DAD250;
  v226 = Espresso::AOT::DTrees::mulCpuCp;
  v227 = &v225;
  v229 = 8;
  strcpy(v228, "H14P-cpu");
  v230 = &unk_1E2DAD250;
  v231 = Espresso::AOT::DTrees::mulCpuDp;
  v232 = &v230;
  v234 = 8;
  strcpy(v233, "H15P-cpu");
  v235 = &unk_1E2DAD250;
  v236 = Espresso::AOT::DTrees::mulCpuEp;
  v237 = &v235;
  v239 = 8;
  strcpy(v238, "H13P-gpu");
  v240 = &unk_1E2DAD250;
  v241 = Espresso::AOT::DTrees::mulGpuCp;
  v242 = &v240;
  v244 = 8;
  strcpy(v243, "H14P-gpu");
  v245 = &unk_1E2DAD250;
  v246 = Espresso::AOT::DTrees::mulGpuDp;
  v247 = &v245;
  v249 = 8;
  strcpy(v248, "H15P-gpu");
  v251 = Espresso::AOT::DTrees::mulGpuEp;
  v252 = &v250;
  v256 = Espresso::AOT::DTrees::mulAneCp;
  v257 = &v255;
  strcpy(v258, "H14P-ane");
  v250 = &unk_1E2DAD250;
  v261 = Espresso::AOT::DTrees::mulAneDp;
  v262 = &v260;
  v254 = 8;
  strcpy(v253, "H13P-ane");
  v255 = &unk_1E2DAD250;
  v259 = 8;
  v264 = 8;
  strcpy(v263, "H15P-ane");
  v260 = &unk_1E2DAD250;
  v265 = &unk_1E2DAD250;
  v266 = Espresso::AOT::DTrees::mulAneEp;
  v267 = &v265;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::map[abi:ne180100](&v111, (const void **)v133, 27);
  v62 = 189;
  while (2)
  {
    v63 = (const void ***)v132[v62 + 1];
    if (&v130[v62 + 1] == v63)
    {
      v63 = &v130[v62 + 1];
      v64 = 4;
LABEL_206:
      ((void (*)(void))(*v63)[v64])();
    }
    else if (v63)
    {
      v64 = 5;
      goto LABEL_206;
    }
    if (SHIBYTE(v130[v62]) < 0)
      operator delete(v128[v62 + 1]);
    v62 -= 7;
    if (v62 * 8)
      continue;
    break;
  }
  v133[23] = 8;
  strcpy(v133, "H13G-cpu");
  v134 = (char **)&unk_1E2DAD250;
  v135 = (char *)Espresso::AOT::DTrees::gatherCpuIp;
  v139 = 8;
  v137 = (uint64_t *)&v134;
  strcpy((char *)v138, "H14G-cpu");
  v140 = &unk_1E2DAD250;
  v141 = Espresso::AOT::DTrees::gatherCpuFp;
  v144 = 8;
  v142 = &v140;
  strcpy((char *)v143, "H13C-cpu");
  v145 = &unk_1E2DAD250;
  v146 = Espresso::AOT::DTrees::gatherCpuJp;
  v149 = 8;
  v147 = &v145;
  strcpy((char *)v148, "H14C-cpu");
  v150 = &unk_1E2DAD250;
  v151 = Espresso::AOT::DTrees::gatherCpuHp;
  v154 = 8;
  v152 = &v150;
  strcpy((char *)v153, "H13S-cpu");
  v155 = &unk_1E2DAD250;
  v156 = Espresso::AOT::DTrees::gatherCpuKp;
  v157 = &v155;
  v159 = 8;
  strcpy((char *)v158, "H14S-cpu");
  v160 = &unk_1E2DAD250;
  v161 = Espresso::AOT::DTrees::gatherCpuGp;
  v162 = &v160;
  v164 = 8;
  strcpy((char *)v163, "H13G-gpu");
  v165 = &unk_1E2DAD250;
  v166 = Espresso::AOT::DTrees::gatherGpuIp;
  v167 = &v165;
  v169 = 8;
  strcpy((char *)v168, "H14G-gpu");
  v170 = &unk_1E2DAD250;
  v171 = Espresso::AOT::DTrees::gatherGpuFp;
  v172 = &v170;
  v174 = 8;
  strcpy((char *)v173, "H13C-gpu");
  v175 = &unk_1E2DAD250;
  v176 = Espresso::AOT::DTrees::gatherGpuJp;
  v177 = &v175;
  v179 = 8;
  strcpy(v178, "H14C-gpu");
  v180 = &unk_1E2DAD250;
  v181 = Espresso::AOT::DTrees::gatherGpuHp;
  v182 = &v180;
  v184 = 8;
  strcpy(v183, "H13S-gpu");
  v185 = &unk_1E2DAD250;
  v186 = Espresso::AOT::DTrees::gatherGpuKp;
  v187 = &v185;
  v189 = 8;
  strcpy(v188, "H14S-gpu");
  v190 = &unk_1E2DAD250;
  v191 = Espresso::AOT::DTrees::gatherGpuGp;
  v192 = &v190;
  v194 = 8;
  strcpy(v193, "H13P-cpu");
  v195 = &unk_1E2DAD250;
  v196 = Espresso::AOT::DTrees::gatherCpuCp;
  v197 = &v195;
  v199 = 8;
  strcpy(v198, "H14P-cpu");
  v200 = &unk_1E2DAD250;
  v201 = Espresso::AOT::DTrees::gatherCpuDp;
  v202 = &v200;
  v204 = 8;
  strcpy(v203, "H15P-cpu");
  v205 = &unk_1E2DAD250;
  v206 = Espresso::AOT::DTrees::gatherCpuEp;
  v207 = &v205;
  v209 = 8;
  strcpy(v208, "H13P-gpu");
  v210 = &unk_1E2DAD250;
  v211 = Espresso::AOT::DTrees::gatherGpuCp;
  v212 = &v210;
  v214 = 8;
  strcpy(v213, "H14P-gpu");
  v215 = &unk_1E2DAD250;
  v216 = Espresso::AOT::DTrees::gatherGpuDp;
  v217 = &v215;
  v219 = 8;
  strcpy(v218, "H15P-gpu");
  v220 = &unk_1E2DAD250;
  v221 = Espresso::AOT::DTrees::gatherGpuEp;
  v222 = &v220;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::map[abi:ne180100](&v109, (const void **)v133, 18);
  v65 = 126;
  while (2)
  {
    v66 = (const void ***)v132[v65 + 1];
    if (&v130[v65 + 1] == v66)
    {
      v66 = &v130[v65 + 1];
      v67 = 4;
LABEL_215:
      ((void (*)(void))(*v66)[v67])();
    }
    else if (v66)
    {
      v67 = 5;
      goto LABEL_215;
    }
    if (SHIBYTE(v130[v65]) < 0)
      operator delete(v128[v65 + 1]);
    v65 -= 7;
    if (v65 * 8)
      continue;
    break;
  }
  v133[23] = 8;
  strcpy(v133, "H13P-cpu");
  v134 = (char **)&unk_1E2DAD250;
  v135 = (char *)Espresso::AOT::DTrees::reduce_argmaxCpuCp;
  v139 = 8;
  v137 = (uint64_t *)&v134;
  strcpy((char *)v138, "H14P-cpu");
  v140 = &unk_1E2DAD250;
  v141 = Espresso::AOT::DTrees::reduce_argmaxCpuDp;
  v144 = 8;
  v142 = &v140;
  strcpy((char *)v143, "H15P-cpu");
  v145 = &unk_1E2DAD250;
  v146 = Espresso::AOT::DTrees::reduce_argmaxCpuEp;
  v149 = 8;
  v147 = &v145;
  strcpy((char *)v148, "H13P-gpu");
  v150 = &unk_1E2DAD250;
  v151 = Espresso::AOT::DTrees::reduce_argmaxGpuCp;
  v154 = 8;
  v152 = &v150;
  strcpy((char *)v153, "H14P-gpu");
  v155 = &unk_1E2DAD250;
  v156 = Espresso::AOT::DTrees::reduce_argmaxGpuDp;
  v157 = &v155;
  v159 = 8;
  strcpy((char *)v158, "H15P-gpu");
  v160 = &unk_1E2DAD250;
  v161 = Espresso::AOT::DTrees::reduce_argmaxGpuEp;
  v162 = &v160;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::map[abi:ne180100](&v107, (const void **)v133, 6);
  v68 = v162;
  if (v162 == &v160)
  {
    v69 = 4;
    v68 = &v160;
LABEL_222:
    (*((void (**)(void))*v68 + v69))();
  }
  else if (v162)
  {
    v69 = 5;
    goto LABEL_222;
  }
  if (v159 < 0)
  {
    operator delete(v158[0]);
    v70 = v157;
    if (v157 == &v155)
      goto LABEL_228;
LABEL_225:
    if (v70)
    {
      v71 = 5;
      goto LABEL_229;
    }
  }
  else
  {
    v70 = v157;
    if (v157 != &v155)
      goto LABEL_225;
LABEL_228:
    v71 = 4;
    v70 = &v155;
LABEL_229:
    (*((void (**)(void))*v70 + v71))();
  }
  if (v154 < 0)
  {
    operator delete(v153[0]);
    v72 = v152;
    if (v152 == &v150)
      goto LABEL_235;
LABEL_232:
    if (v72)
    {
      v73 = 5;
      goto LABEL_236;
    }
  }
  else
  {
    v72 = v152;
    if (v152 != &v150)
      goto LABEL_232;
LABEL_235:
    v73 = 4;
    v72 = &v150;
LABEL_236:
    (*((void (**)(void))*v72 + v73))();
  }
  if (v149 < 0)
  {
    operator delete(v148[0]);
    v74 = v147;
    if (v147 == &v145)
      goto LABEL_242;
LABEL_239:
    if (v74)
    {
      v75 = 5;
      goto LABEL_243;
    }
  }
  else
  {
    v74 = v147;
    if (v147 != &v145)
      goto LABEL_239;
LABEL_242:
    v75 = 4;
    v74 = &v145;
LABEL_243:
    (*((void (**)(void))*v74 + v75))();
  }
  if (v144 < 0)
  {
    operator delete(v143[0]);
    v76 = v142;
    if (v142 == &v140)
      goto LABEL_249;
LABEL_246:
    if (v76)
    {
      v77 = 5;
      goto LABEL_250;
    }
  }
  else
  {
    v76 = v142;
    if (v142 != &v140)
      goto LABEL_246;
LABEL_249:
    v77 = 4;
    v76 = &v140;
LABEL_250:
    (*((void (**)(void))*v76 + v77))();
  }
  if (v139 < 0)
  {
    operator delete(v138[0]);
    v78 = (char ***)v137;
    if (v137 == (uint64_t *)&v134)
      goto LABEL_256;
LABEL_253:
    if (v78)
    {
      v79 = 5;
      goto LABEL_257;
    }
  }
  else
  {
    v78 = (char ***)v137;
    if (v137 != (uint64_t *)&v134)
      goto LABEL_253;
LABEL_256:
    v79 = 4;
    v78 = &v134;
LABEL_257:
    ((void (*)(void))(*v78)[v79])();
  }
  if ((v133[23] & 0x80000000) != 0)
    operator delete(*(void **)v133);
  v133[23] = 8;
  strcpy(v133, "H13P-cpu");
  v134 = (char **)&unk_1E2DAD250;
  v135 = (char *)Espresso::AOT::DTrees::reduce_sumCpuCp;
  v139 = 8;
  v137 = (uint64_t *)&v134;
  strcpy((char *)v138, "H14P-cpu");
  v140 = &unk_1E2DAD250;
  v141 = Espresso::AOT::DTrees::reduce_sumCpuDp;
  v144 = 8;
  v142 = &v140;
  strcpy((char *)v143, "H15P-cpu");
  v145 = &unk_1E2DAD250;
  v146 = Espresso::AOT::DTrees::reduce_sumCpuEp;
  v149 = 8;
  v147 = &v145;
  strcpy((char *)v148, "H13P-gpu");
  v150 = &unk_1E2DAD250;
  v151 = Espresso::AOT::DTrees::reduce_sumGpuCp;
  v154 = 8;
  v152 = &v150;
  strcpy((char *)v153, "H14P-gpu");
  v155 = &unk_1E2DAD250;
  v156 = Espresso::AOT::DTrees::reduce_sumGpuDp;
  v157 = &v155;
  v159 = 8;
  strcpy((char *)v158, "H15P-gpu");
  v160 = &unk_1E2DAD250;
  v161 = Espresso::AOT::DTrees::reduce_sumGpuEp;
  v162 = &v160;
  v164 = 8;
  strcpy((char *)v163, "H13P-ane");
  v165 = &unk_1E2DAD250;
  v166 = Espresso::AOT::DTrees::reduce_sumAneCp;
  v167 = &v165;
  v169 = 8;
  strcpy((char *)v168, "H14P-ane");
  v170 = &unk_1E2DAD250;
  v171 = Espresso::AOT::DTrees::reduce_sumAneDp;
  v172 = &v170;
  v174 = 8;
  strcpy((char *)v173, "H15P-ane");
  v175 = &unk_1E2DAD250;
  v176 = Espresso::AOT::DTrees::reduce_sumAneEp;
  v177 = &v175;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::map[abi:ne180100](&v105, (const void **)v133, 9);
  v80 = v177;
  if (v177 == &v175)
  {
    v81 = 4;
    v80 = &v175;
LABEL_264:
    (*((void (**)(void))*v80 + v81))();
  }
  else if (v177)
  {
    v81 = 5;
    goto LABEL_264;
  }
  if (v174 < 0)
  {
    operator delete(v173[0]);
    v82 = v172;
    if (v172 == &v170)
      goto LABEL_270;
LABEL_267:
    if (v82)
    {
      v83 = 5;
      goto LABEL_271;
    }
  }
  else
  {
    v82 = v172;
    if (v172 != &v170)
      goto LABEL_267;
LABEL_270:
    v83 = 4;
    v82 = &v170;
LABEL_271:
    (*((void (**)(void))*v82 + v83))();
  }
  if (v169 < 0)
  {
    operator delete(v168[0]);
    v84 = v167;
    if (v167 == &v165)
      goto LABEL_277;
LABEL_274:
    if (v84)
    {
      v85 = 5;
      goto LABEL_278;
    }
  }
  else
  {
    v84 = v167;
    if (v167 != &v165)
      goto LABEL_274;
LABEL_277:
    v85 = 4;
    v84 = &v165;
LABEL_278:
    (*((void (**)(void))*v84 + v85))();
  }
  if (v164 < 0)
  {
    operator delete(v163[0]);
    v86 = v162;
    if (v162 == &v160)
      goto LABEL_284;
LABEL_281:
    if (v86)
    {
      v87 = 5;
      goto LABEL_285;
    }
  }
  else
  {
    v86 = v162;
    if (v162 != &v160)
      goto LABEL_281;
LABEL_284:
    v87 = 4;
    v86 = &v160;
LABEL_285:
    (*((void (**)(void))*v86 + v87))();
  }
  if (v159 < 0)
  {
    operator delete(v158[0]);
    v88 = v157;
    if (v157 == &v155)
      goto LABEL_291;
LABEL_288:
    if (v88)
    {
      v89 = 5;
      goto LABEL_292;
    }
  }
  else
  {
    v88 = v157;
    if (v157 != &v155)
      goto LABEL_288;
LABEL_291:
    v89 = 4;
    v88 = &v155;
LABEL_292:
    (*((void (**)(void))*v88 + v89))();
  }
  if (v154 < 0)
  {
    operator delete(v153[0]);
    v90 = v152;
    if (v152 == &v150)
      goto LABEL_298;
LABEL_295:
    if (v90)
    {
      v91 = 5;
      goto LABEL_299;
    }
  }
  else
  {
    v90 = v152;
    if (v152 != &v150)
      goto LABEL_295;
LABEL_298:
    v91 = 4;
    v90 = &v150;
LABEL_299:
    (*((void (**)(void))*v90 + v91))();
  }
  if (v149 < 0)
  {
    operator delete(v148[0]);
    v92 = v147;
    if (v147 == &v145)
      goto LABEL_305;
LABEL_302:
    if (v92)
    {
      v93 = 5;
      goto LABEL_306;
    }
  }
  else
  {
    v92 = v147;
    if (v147 != &v145)
      goto LABEL_302;
LABEL_305:
    v93 = 4;
    v92 = &v145;
LABEL_306:
    (*((void (**)(void))*v92 + v93))();
  }
  if (v144 < 0)
  {
    operator delete(v143[0]);
    v94 = v142;
    if (v142 == &v140)
      goto LABEL_312;
LABEL_309:
    if (v94)
    {
      v95 = 5;
      goto LABEL_313;
    }
  }
  else
  {
    v94 = v142;
    if (v142 != &v140)
      goto LABEL_309;
LABEL_312:
    v95 = 4;
    v94 = &v140;
LABEL_313:
    (*((void (**)(void))*v94 + v95))();
  }
  if (v139 < 0)
  {
    operator delete(v138[0]);
    v96 = (char ***)v137;
    if (v137 == (uint64_t *)&v134)
      goto LABEL_319;
LABEL_316:
    if (v96)
    {
      v97 = 5;
      goto LABEL_320;
    }
  }
  else
  {
    v96 = (char ***)v137;
    if (v137 != (uint64_t *)&v134)
      goto LABEL_316;
LABEL_319:
    v97 = 4;
    v96 = &v134;
LABEL_320:
    ((void (*)(void))(*v96)[v97])();
  }
  if ((v133[23] & 0x80000000) != 0)
    operator delete(*(void **)v133);
  v133[23] = 8;
  strcpy(v133, "H13G-ane");
  v134 = (char **)&unk_1E2DAD250;
  v135 = (char *)Espresso::AOT::DTrees::upsample_bilinearAneIp;
  v139 = 8;
  v137 = (uint64_t *)&v134;
  strcpy((char *)v138, "H14G-ane");
  v140 = &unk_1E2DAD250;
  v141 = Espresso::AOT::DTrees::upsample_bilinearAneFp;
  v144 = 8;
  v142 = &v140;
  strcpy((char *)v143, "H13C-ane");
  v145 = &unk_1E2DAD250;
  v146 = Espresso::AOT::DTrees::upsample_bilinearAneJp;
  v149 = 8;
  v147 = &v145;
  strcpy((char *)v148, "H14C-ane");
  v150 = &unk_1E2DAD250;
  v151 = Espresso::AOT::DTrees::upsample_bilinearAneHp;
  v154 = 8;
  v152 = &v150;
  strcpy((char *)v153, "H13S-ane");
  v155 = &unk_1E2DAD250;
  v156 = Espresso::AOT::DTrees::upsample_bilinearAneKp;
  v157 = &v155;
  v159 = 8;
  strcpy((char *)v158, "H14S-ane");
  v160 = &unk_1E2DAD250;
  v161 = Espresso::AOT::DTrees::upsample_bilinearAneGp;
  v162 = &v160;
  v164 = 8;
  strcpy((char *)v163, "H13G-cpu");
  v165 = &unk_1E2DAD250;
  v166 = Espresso::AOT::DTrees::upsample_bilinearCpuIp;
  v167 = &v165;
  v169 = 8;
  strcpy((char *)v168, "H14G-cpu");
  v170 = &unk_1E2DAD250;
  v171 = Espresso::AOT::DTrees::upsample_bilinearCpuFp;
  v172 = &v170;
  v174 = 8;
  strcpy((char *)v173, "H13C-cpu");
  v175 = &unk_1E2DAD250;
  v176 = Espresso::AOT::DTrees::upsample_bilinearCpuJp;
  v177 = &v175;
  v179 = 8;
  strcpy(v178, "H14C-cpu");
  v180 = &unk_1E2DAD250;
  v181 = Espresso::AOT::DTrees::upsample_bilinearCpuHp;
  v182 = &v180;
  v184 = 8;
  strcpy(v183, "H13S-cpu");
  v185 = &unk_1E2DAD250;
  v186 = Espresso::AOT::DTrees::upsample_bilinearCpuKp;
  v187 = &v185;
  v189 = 8;
  strcpy(v188, "H14S-cpu");
  v190 = &unk_1E2DAD250;
  v191 = Espresso::AOT::DTrees::upsample_bilinearCpuGp;
  v192 = &v190;
  v194 = 8;
  strcpy(v193, "H13G-gpu");
  v195 = &unk_1E2DAD250;
  v196 = Espresso::AOT::DTrees::upsample_bilinearGpuIp;
  v197 = &v195;
  v199 = 8;
  strcpy(v198, "H14G-gpu");
  v200 = &unk_1E2DAD250;
  v201 = Espresso::AOT::DTrees::upsample_bilinearGpuFp;
  v202 = &v200;
  v204 = 8;
  strcpy(v203, "H13C-gpu");
  v205 = &unk_1E2DAD250;
  v206 = Espresso::AOT::DTrees::upsample_bilinearGpuJp;
  v207 = &v205;
  v209 = 8;
  strcpy(v208, "H14C-gpu");
  v210 = &unk_1E2DAD250;
  v211 = Espresso::AOT::DTrees::upsample_bilinearGpuHp;
  v212 = &v210;
  v214 = 8;
  strcpy(v213, "H13S-gpu");
  v215 = &unk_1E2DAD250;
  v216 = Espresso::AOT::DTrees::upsample_bilinearGpuKp;
  v217 = &v215;
  v219 = 8;
  strcpy(v218, "H14S-gpu");
  v220 = &unk_1E2DAD250;
  v221 = Espresso::AOT::DTrees::upsample_bilinearGpuGp;
  v222 = &v220;
  v224 = 8;
  strcpy(v223, "H13P-cpu");
  v225 = &unk_1E2DAD250;
  v226 = Espresso::AOT::DTrees::upsample_bilinearCpuCp;
  v227 = &v225;
  v229 = 8;
  strcpy(v228, "H14P-cpu");
  v230 = &unk_1E2DAD250;
  v231 = Espresso::AOT::DTrees::upsample_bilinearCpuDp;
  v232 = &v230;
  v234 = 8;
  strcpy(v233, "H15P-cpu");
  v235 = &unk_1E2DAD250;
  v236 = Espresso::AOT::DTrees::upsample_bilinearCpuEp;
  v237 = &v235;
  v239 = 8;
  strcpy(v238, "H13P-gpu");
  v241 = Espresso::AOT::DTrees::upsample_bilinearGpuCp;
  v240 = &unk_1E2DAD250;
  v242 = &v240;
  strcpy(v243, "H14P-gpu");
  v246 = Espresso::AOT::DTrees::upsample_bilinearGpuDp;
  v247 = &v245;
  v244 = 8;
  v245 = &unk_1E2DAD250;
  strcpy(v248, "H15P-gpu");
  v251 = Espresso::AOT::DTrees::upsample_bilinearGpuEp;
  v252 = &v250;
  v256 = Espresso::AOT::DTrees::upsample_bilinearAneCp;
  v257 = &v255;
  strcpy(v258, "H14P-ane");
  v261 = Espresso::AOT::DTrees::upsample_bilinearAneDp;
  v262 = &v260;
  v249 = 8;
  v250 = &unk_1E2DAD250;
  v254 = 8;
  v259 = 8;
  v264 = 8;
  strcpy(v253, "H13P-ane");
  v255 = &unk_1E2DAD250;
  strcpy(v263, "H15P-ane");
  v260 = &unk_1E2DAD250;
  v265 = &unk_1E2DAD250;
  v266 = Espresso::AOT::DTrees::upsample_bilinearAneEp;
  v267 = &v265;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::map[abi:ne180100](&v103, (const void **)v133, 27);
  v98 = 189;
  while (2)
  {
    v99 = (const void ***)v132[v98 + 1];
    if (&v130[v98 + 1] == v99)
    {
      v99 = &v130[v98 + 1];
      v100 = 4;
LABEL_329:
      ((void (*)(void))(*v99)[v100])();
    }
    else if (v99)
    {
      v100 = 5;
      goto LABEL_329;
    }
    if (SHIBYTE(v130[v98]) < 0)
      operator delete(v128[v98 + 1]);
    v98 -= 7;
    if (v98 * 8)
      continue;
    break;
  }
  *(_QWORD *)v133 = 6579297;
  v133[23] = 3;
  v135 = 0;
  v136 = 0;
  v134 = &v135;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>((uint64_t *)&v134, v119, v120);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v134, v135);
  if ((v133[23] & 0x80000000) != 0)
    operator delete(*(void **)v133);
  strcpy(v133, "avg_pool");
  v133[23] = 8;
  v135 = 0;
  v136 = 0;
  v134 = &v135;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>((uint64_t *)&v134, v131, v132);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v134, v135);
  if ((v133[23] & 0x80000000) != 0)
    operator delete(*(void **)v133);
  *(_QWORD *)v133 = 0x7461636E6F63;
  v133[23] = 6;
  v135 = 0;
  v136 = 0;
  v134 = &v135;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>((uint64_t *)&v134, v123, &v124);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v134, v135);
  if ((v133[23] & 0x80000000) != 0)
    operator delete(*(void **)v133);
  *(_QWORD *)v133 = 1986948963;
  v133[23] = 4;
  v135 = 0;
  v136 = 0;
  v134 = &v135;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>((uint64_t *)&v134, v129, v130);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v134, v135);
  if ((v133[23] & 0x80000000) != 0)
    operator delete(*(void **)v133);
  strcpy(v133, "conv_transpose");
  v133[23] = 14;
  v134 = &v135;
  v135 = 0;
  v136 = 0;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>((uint64_t *)&v134, v117, &v118);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v134, v135);
  if ((v133[23] & 0x80000000) != 0)
    operator delete(*(void **)v133);
  *(_QWORD *)v133 = 0x726568746167;
  v133[23] = 6;
  v135 = 0;
  v136 = 0;
  v134 = &v135;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>((uint64_t *)&v134, v109, &v110);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v134, v135);
  if ((v133[23] & 0x80000000) != 0)
    operator delete(*(void **)v133);
  *(_QWORD *)v133 = 0x7261656E696CLL;
  v133[23] = 6;
  v135 = 0;
  v136 = 0;
  v134 = &v135;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>((uint64_t *)&v134, v121, &v122);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v134, v135);
  if ((v133[23] & 0x80000000) != 0)
    operator delete(*(void **)v133);
  *(_QWORD *)v133 = 1836348268;
  v133[23] = 4;
  v135 = 0;
  v136 = 0;
  v134 = &v135;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>((uint64_t *)&v134, v127, v128);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v134, v135);
  if ((v133[23] & 0x80000000) != 0)
    operator delete(*(void **)v133);
  strcpy(v133, "max_pool");
  v133[23] = 8;
  v135 = 0;
  v136 = 0;
  v134 = &v135;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>((uint64_t *)&v134, v113, &v114);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v134, v135);
  if ((v133[23] & 0x80000000) != 0)
    operator delete(*(void **)v133);
  *(_QWORD *)v133 = 7107949;
  v133[23] = 3;
  v135 = 0;
  v136 = 0;
  v134 = &v135;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>((uint64_t *)&v134, v111, &v112);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v134, v135);
  if ((v133[23] & 0x80000000) != 0)
    operator delete(*(void **)v133);
  *(_QWORD *)v133 = 1970038130;
  v133[23] = 4;
  v135 = 0;
  v136 = 0;
  v134 = &v135;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>((uint64_t *)&v134, v125, &v126);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v134, v135);
  if ((v133[23] & 0x80000000) != 0)
    operator delete(*(void **)v133);
  *(_QWORD *)v133 = 6452595;
  v133[23] = 3;
  v135 = 0;
  v136 = 0;
  v134 = &v135;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>((uint64_t *)&v134, v119, v120);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v134, v135);
  if ((v133[23] & 0x80000000) != 0)
    operator delete(*(void **)v133);
  strcpy(v133, "reduce_argmax");
  v133[23] = 13;
  v134 = &v135;
  v135 = 0;
  v136 = 0;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>((uint64_t *)&v134, v107, &v108);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v134, v135);
  if ((v133[23] & 0x80000000) != 0)
    operator delete(*(void **)v133);
  strcpy(v133, "reduce_sum");
  v133[23] = 10;
  v134 = &v135;
  v135 = 0;
  v136 = 0;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>((uint64_t *)&v134, v105, &v106);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v134, v135);
  if ((v133[23] & 0x80000000) != 0)
    operator delete(*(void **)v133);
  strcpy(v133, "transpose");
  v133[23] = 9;
  v134 = &v135;
  v135 = 0;
  v136 = 0;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>((uint64_t *)&v134, v115, &v116);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v134, v135);
  if ((v133[23] & 0x80000000) != 0)
    operator delete(*(void **)v133);
  strcpy(v133, "upsample_bilinear");
  v133[23] = 17;
  v135 = 0;
  v136 = 0;
  v134 = &v135;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>((uint64_t *)&v134, v103, &v104);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v134, v135);
  if ((v133[23] & 0x80000000) != 0)
    operator delete(*(void **)v133);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v103, (char *)v104);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v105, (char *)v106);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v107, (char *)v108);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v109, (char *)v110);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v111, (char *)v112);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v113, (char *)v114);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v115, (char *)v116);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v117, (char *)v118);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v119, (char *)v120[0]);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v121, (char *)v122);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v123, (char *)v124);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v125, (char *)v126);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v127, (char *)v128[0]);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v129, (char *)v130[0]);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v131, (char *)v132[0]);
}

void sub_1910DBFE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,_Unwind_Exception *exception_object)
{
  __cxa_guard_abort(&qword_1ECFC45C8);
  _Unwind_Resume(a1);
}

void sub_1910DBFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,_Unwind_Exception *exception_objecta,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,char a44,char *a45,uint64_t a46,char a47,char *a48,uint64_t a49,char a50,char *a51,uint64_t a52,char a53,char *a54,uint64_t a55,char a56,char *a57,uint64_t a58,char a59,char *a60,uint64_t a61,char a62,char *a63)
{
  char a65;
  char *a66;
  char a68;
  char *a69;
  char a71;
  char *a72;

  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&a29, (char *)a30);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&a32, (char *)a33);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&a35, (char *)a36);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&a38, (char *)a39);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&a41, (char *)a42);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&a44, a45);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&a47, a48);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&a50, a51);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&a53, a54);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&a56, a57);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&a59, a60);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&a62, a63);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&a65, a66);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&a68, a69);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&a71, a72);
  _Unwind_Resume(a1);
}

void sub_1910DC188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v33);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v32);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v31);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v30);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v29);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v28);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v35);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v34);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a10);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a11);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a12);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a13);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a14);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a15);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a16);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a17);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a18);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a19);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a20);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a21);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a22);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a23);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a25);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a26);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair((uint64_t)&STACK[0x208]);
  JUMPOUT(0x1910DC0B0);
}

void sub_1910DC268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;

  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v26);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a19);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a20);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a21);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a22);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a23);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a25);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a26);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair((uint64_t)&STACK[0x208]);
  JUMPOUT(0x1910DC0BCLL);
}

void sub_1910DC2B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v29);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v28);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a26);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair((uint64_t)&STACK[0x208]);
  JUMPOUT(0x1910DC0C8);
}

void sub_1910DC2F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v33);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v32);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v31);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v30);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v29);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v28);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v35);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v34);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a19);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a20);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a21);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a22);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a23);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a25);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a26);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair((uint64_t)&STACK[0x208]);
  JUMPOUT(0x1910DC0D4);
}

void sub_1910DC388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v33);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v32);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v31);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v30);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v29);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v28);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v35);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v34);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a10);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a11);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a12);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a13);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a14);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a15);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a16);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a17);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a18);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a19);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a20);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a21);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a22);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a23);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a25);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a26);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair((uint64_t)&STACK[0x208]);
  JUMPOUT(0x1910DC0E0);
}

void sub_1910DC468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;

  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v26);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a19);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a20);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a21);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a22);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a23);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a25);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a26);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair((uint64_t)&STACK[0x208]);
  JUMPOUT(0x1910DC0F0);
}

void sub_1910DC4B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v33);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v32);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v31);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v30);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v29);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v28);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v35);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v34);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a10);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a11);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a12);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a13);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a14);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a15);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a16);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a17);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a18);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a19);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a20);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a21);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a22);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a23);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a25);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a26);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair((uint64_t)&STACK[0x208]);
  JUMPOUT(0x1910DC100);
}

void sub_1910DC598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v33);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v32);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v31);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v30);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v29);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v28);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v35);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v34);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a10);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a11);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a12);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a13);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a14);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a15);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a16);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a17);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a18);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a19);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a20);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a21);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a22);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a23);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a25);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a26);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair((uint64_t)&STACK[0x208]);
  JUMPOUT(0x1910DC110);
}

void sub_1910DC678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v33);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v32);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v31);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v30);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v29);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v28);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v35);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v34);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a10);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a11);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a12);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a13);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a14);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a15);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a16);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a17);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a18);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a19);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a20);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a21);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a22);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a23);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a25);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a26);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair((uint64_t)&STACK[0x208]);
  JUMPOUT(0x1910DC120);
}

void sub_1910DC758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v33);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v32);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v31);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v30);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v29);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v28);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v35);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v34);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a10);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a11);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a12);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a13);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a14);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a15);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a16);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a17);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a18);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a19);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a20);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a21);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a22);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a23);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a25);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a26);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair((uint64_t)&STACK[0x208]);
  JUMPOUT(0x1910DC130);
}

void sub_1910DC838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v33);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v32);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v31);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v30);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v29);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v28);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v35);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v34);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a10);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a11);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a12);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a13);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a14);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a15);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a16);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a17);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a18);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a19);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a20);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a21);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a22);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a23);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a25);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a26);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair((uint64_t)&STACK[0x208]);
  JUMPOUT(0x1910DC140);
}

void sub_1910DC918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v33);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v32);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v31);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v30);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v29);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v28);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v35);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v34);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a10);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a11);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a12);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a13);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a14);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a15);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a16);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a17);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a18);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a19);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a20);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a21);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a22);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a23);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a25);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a26);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair((uint64_t)&STACK[0x208]);
  JUMPOUT(0x1910DC150);
}

void sub_1910DC9F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v35);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v34);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v33);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v32);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v31);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v30);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v29);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v28);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a17);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a18);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a19);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a20);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a21);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a22);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a23);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a25);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a26);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair((uint64_t)&STACK[0x208]);
  JUMPOUT(0x1910DC160);
}

void sub_1910DCAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,_Unwind_Exception *exception_objecta,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;
  char *a72;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v78);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v77);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v72);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v76);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v75);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v74);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v73);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v80);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v79);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a10);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a11);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a12);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a13);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a14);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a15);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a16);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a17);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a18);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a19);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a20);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a21);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a22);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a23);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a25);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a26);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair((uint64_t)&STACK[0x208]);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&a71, a72);
  _Unwind_Resume(a1);
}

void sub_1910DCB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v25);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v24);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v23);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a19);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a20);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a21);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a22);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a23);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair((uint64_t)&STACK[0x208]);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 24);
  v3 = *(_QWORD **)(a1 + 48);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<Espresso::AOT::Backends::CostModel::`anonymous namespace'::DecisionTreeGroup>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  char *v4;
  char *v5;
  __int128 v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  std::string *v13;
  std::string *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  const std::string::value_type **v20;
  __int128 v21;
  char *v22;
  uint64_t v23;
  char *v24;

  v5 = a1[1];
  v4 = a1[2];
  if (v5 < v4)
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a1[1], *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v6 = *a2;
      *((_QWORD *)v5 + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v5 = v6;
    }
    *((_QWORD *)v5 + 4) = 0;
    *((_QWORD *)v5 + 3) = v5 + 32;
    *((_QWORD *)v5 + 5) = 0;
    std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>((uint64_t *)v5 + 3, *((const void ***)a2 + 3), (const void ***)a2 + 4);
    v14 = (std::string *)(v5 + 48);
    a1[1] = v5 + 48;
    goto LABEL_32;
  }
  v7 = v5 - *a1;
  v8 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 4);
  if (v8 + 1 > 0x555555555555555)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4);
  v10 = 2 * v9;
  if (2 * v9 <= v8 + 1)
    v10 = v8 + 1;
  if (v9 >= 0x2AAAAAAAAAAAAAALL)
    v11 = 0x555555555555555;
  else
    v11 = v10;
  if (v11)
  {
    if (v11 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v12 = (char *)operator new(48 * v11);
    v13 = (std::string *)&v12[16 * (v7 >> 4)];
    if ((*((char *)a2 + 23) & 0x80000000) == 0)
      goto LABEL_13;
LABEL_17:
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    goto LABEL_18;
  }
  v12 = 0;
  v13 = (std::string *)(16 * (v7 >> 4));
  if (*((char *)a2 + 23) < 0)
    goto LABEL_17;
LABEL_13:
  *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *a2;
  v13->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
LABEL_18:
  v15 = (uint64_t *)&v12[v7];
  v15[4] = 0;
  v15[3] = (uint64_t)(v15 + 4);
  v15 += 3;
  v15[2] = 0;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>(v15, *((const void ***)a2 + 3), (const void ***)a2 + 4);
  v16 = &v12[48 * v11];
  v14 = v13 + 2;
  v17 = *a1;
  v18 = a1[1];
  if (v18 == *a1)
  {
    *a1 = (char *)v13;
    a1[1] = (char *)v14;
    a1[2] = v16;
  }
  else
  {
    v24 = v16;
    v19 = 0;
    do
    {
      v20 = (const std::string::value_type **)&v18[v19 * 24 - 48];
      if (v18[v19 * 24 - 25] < 0)
      {
        std::string::__init_copy_ctor_external(&v13[v19 - 2], *v20, *(_QWORD *)&v18[v19 * 24 - 40]);
      }
      else
      {
        v21 = *(_OWORD *)v20;
        *((_QWORD *)&v13[v19 - 1] - 1) = *(_QWORD *)&v18[v19 * 24 - 32];
        *(_OWORD *)&v13[v19 - 2].__r_.__value_.__l.__data_ = v21;
      }
      v13[v19 - 1].__r_.__value_.__l.__size_ = 0;
      v13[v19 - 1].__r_.__value_.__r.__words[0] = (std::string::size_type)&v13[v19 - 1].__r_.__value_.__l.__size_;
      v13[v19 - 1].__r_.__value_.__r.__words[2] = 0;
      std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>((uint64_t *)&v13[v19 - 1], *(const void ***)&v18[v19 * 24 - 24], (const void ***)&v18[v19 * 24 - 16]);
      v19 -= 2;
    }
    while (&v18[v19 * 24] != v17);
    v18 = *a1;
    v22 = a1[1];
    v14 = v13 + 2;
    *a1 = (char *)&v13[v19];
    a1[1] = (char *)&v13[2];
    a1[2] = v24;
    if (v22 != v18)
    {
      v23 = (uint64_t)(v22 - 24);
      do
      {
        std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy(v23, *(char **)(v23 + 8));
        if (*(char *)(v23 - 1) < 0)
          operator delete(*(void **)(v23 - 24));
        v23 -= 48;
      }
      while ((char *)(v23 + 24) != v18);
    }
  }
  if (v18)
    operator delete(v18);
LABEL_32:
  a1[1] = (char *)v14;
}

void sub_1910DCEF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  void *v12;

  if (!v12)
    _Unwind_Resume(exception_object);
  operator delete(v12);
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::Backends::CostModel::`anonymous namespace'::DecisionTreeGroup::~DecisionTreeGroup(char **this)
{
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)(this + 3), this[4]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void Espresso::AOT::Backends::CostModel::DecisionTreeModelRegistry::GetDecisionTreeModel(uint64_t a1@<X0>, uint64_t *a2@<X1>, const void **a3@<X2>, uint64_t a4@<X8>)
{
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string::size_type size;
  int v14;
  std::string *p_p;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  _BOOL4 v20;
  std::string *v22;
  uint64_t **v23;
  uint64_t **v24;
  uint64_t **v25;
  int v26;
  std::string::size_type v27;
  uint64_t **v28;
  uint64_t **v29;
  int v30;
  size_t v31;
  uint64_t *v32;
  size_t v33;
  int v34;
  _BOOL4 v35;
  BOOL v36;
  uint64_t ***v37;
  uint64_t *v38;
  _QWORD *v39;
  uint64_t *v40;
  int v41;
  size_t v42;
  const void *v43;
  size_t v44;
  int v45;
  _BOOL4 v46;
  uint64_t v47;
  std::string::size_type v48;
  std::string::size_type v49;
  std::string *v50;
  uint64_t **v51;
  int v52;
  size_t v53;
  const void *v54;
  size_t v55;
  int v56;
  _BOOL4 v57;
  BOOL v58;
  uint64_t *v59;
  const void *v60;
  _QWORD *v61;
  uint64_t *v62;
  int v63;
  size_t v64;
  const void *v65;
  size_t v66;
  int v67;
  _BOOL4 v68;
  uint64_t v69;
  std::string::size_type v70;
  std::string::size_type v71;
  std::string *v72;
  uint64_t **v73;
  int v74;
  size_t v75;
  const void *v76;
  size_t v77;
  int v78;
  _BOOL4 v79;
  BOOL v80;
  uint64_t *v81;
  const void *v82;
  _QWORD *v83;
  uint64_t *v84;
  int v85;
  size_t v86;
  const void *v87;
  size_t v88;
  int v89;
  _BOOL4 v90;
  size_t v91;
  std::string *v92;
  int v93;
  size_t v94;
  uint64_t *v95;
  size_t v96;
  int v97;
  _BOOL4 v98;
  int v99;
  _BOOL4 v100;
  uint64_t *v101;
  _QWORD *v102;
  __int128 v103;
  uint64_t v104;
  std::string v105;
  std::string v106;
  void *v107[2];
  char v108;
  std::string __p;

  v8 = atomic_load((unsigned __int8 *)&unk_1ECFC45C8);
  if ((v8 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_1ECFC45C8))
  {
    v102 = (_QWORD *)operator new();
    *v102 = 0;
    v102[1] = 0;
    v102[2] = 0;
    _MergedGlobals = (uint64_t)v102;
    __cxa_guard_release((__guard *)&unk_1ECFC45C8);
  }
  v9 = *(_QWORD *)_MergedGlobals;
  v10 = *(_QWORD *)(_MergedGlobals + 8);
  if (*(_QWORD *)_MergedGlobals == v10)
  {
LABEL_31:
    *(_QWORD *)(a4 + 24) = 0;
    return;
  }
  while (1)
  {
    Espresso::AOT::GetOperatorType(a1, &__p);
    v11 = *(unsigned __int8 *)(v9 + 23);
    if ((v11 & 0x80u) == 0)
      v12 = *(unsigned __int8 *)(v9 + 23);
    else
      v12 = *(_QWORD *)(v9 + 8);
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v14 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (v12 != size)
    {
      v20 = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_24;
      goto LABEL_21;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((v11 & 0x80) != 0)
    {
      v20 = memcmp(*(const void **)v9, p_p, *(_QWORD *)(v9 + 8)) == 0;
      if (v14 < 0)
        goto LABEL_24;
      goto LABEL_21;
    }
    if (*(_BYTE *)(v9 + 23))
      break;
    v20 = 1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_24;
LABEL_21:
    if (v20)
      goto LABEL_32;
LABEL_25:
    v9 += 48;
    if (v9 == v10)
      goto LABEL_31;
  }
  v16 = 0;
  v17 = v11 - 1;
  do
  {
    v18 = *(unsigned __int8 *)(v9 + v16);
    v19 = p_p->__r_.__value_.__s.__data_[v16];
    v20 = v18 == v19;
  }
  while (v18 == v19 && v17 != v16++);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_21;
LABEL_24:
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v20)
    goto LABEL_25;
LABEL_32:
  v104 = a4;
  v22 = &__p;
  v25 = *(uint64_t ***)(v9 + 32);
  v23 = (uint64_t **)(v9 + 32);
  v24 = v25;
  if (!v25)
    goto LABEL_70;
  v26 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  v103 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v27 = __p.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v28 = v23;
  v29 = v24;
  do
  {
    v30 = *((char *)v29 + 55);
    if (v30 >= 0)
      v31 = *((unsigned __int8 *)v29 + 55);
    else
      v31 = (size_t)v29[5];
    if (v30 >= 0)
      v32 = (uint64_t *)(v29 + 4);
    else
      v32 = v29[4];
    if (v27 >= v31)
      v33 = v31;
    else
      v33 = v27;
    v34 = memcmp(v32, v22, v33);
    v35 = v31 < v27;
    if (v34)
      v35 = v34 < 0;
    v36 = !v35;
    if (v35)
      v37 = (uint64_t ***)(v29 + 1);
    else
      v37 = (uint64_t ***)v29;
    if (v36)
      v28 = v29;
    v29 = *v37;
  }
  while (*v37);
  if (v28 == v23)
    goto LABEL_70;
  v40 = v28[4];
  v39 = v28 + 4;
  v38 = v40;
  v41 = *((char *)v39 + 23);
  if (v41 >= 0)
    v42 = *((unsigned __int8 *)v39 + 23);
  else
    v42 = v39[1];
  if (v41 >= 0)
    v43 = v39;
  else
    v43 = v38;
  if (v42 >= v27)
    v44 = v27;
  else
    v44 = v42;
  v45 = memcmp(v22, v43, v44);
  v46 = v27 < v42;
  if (v45)
    v46 = v45 < 0;
  if (v46)
  {
LABEL_70:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      __p = v106;
      v47 = (uint64_t)*v23;
      if (!*v23)
        goto LABEL_112;
    }
    else
    {
      __p = v106;
      v47 = (uint64_t)*v23;
      if (!*v23)
        goto LABEL_112;
    }
    v26 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *((_QWORD *)&v103 + 1) = __p.__r_.__value_.__l.__size_;
    v48 = __p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v49 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v49 = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v50 = &__p;
    else
      v50 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v51 = v23;
    do
    {
      v52 = *(char *)(v47 + 55);
      if (v52 >= 0)
        v53 = *(unsigned __int8 *)(v47 + 55);
      else
        v53 = *(_QWORD *)(v47 + 40);
      if (v52 >= 0)
        v54 = (const void *)(v47 + 32);
      else
        v54 = *(const void **)(v47 + 32);
      if (v49 >= v53)
        v55 = v53;
      else
        v55 = v49;
      v56 = memcmp(v54, v50, v55);
      v57 = v53 < v49;
      if (v56)
        v57 = v56 < 0;
      v58 = !v57;
      if (v57)
        v59 = (uint64_t *)(v47 + 8);
      else
        v59 = (uint64_t *)v47;
      if (v58)
        v51 = (uint64_t **)v47;
      v47 = *v59;
    }
    while (*v59);
    if (v51 == v23)
      goto LABEL_112;
    v62 = v51[4];
    v61 = v51 + 4;
    v60 = v62;
    v63 = *((char *)v61 + 23);
    if (v63 >= 0)
      v64 = *((unsigned __int8 *)v61 + 23);
    else
      v64 = v61[1];
    if (v63 >= 0)
      v65 = v61;
    else
      v65 = v60;
    if (v64 >= v49)
      v66 = v49;
    else
      v66 = v64;
    v67 = memcmp(v50, v65, v66);
    v68 = v49 < v64;
    if (v67)
      v68 = v67 < 0;
    if (v68)
    {
LABEL_112:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        __p = v105;
        v69 = (uint64_t)*v23;
        if (!*v23)
          goto LABEL_154;
      }
      else
      {
        __p = v105;
        v69 = (uint64_t)*v23;
        if (!*v23)
          goto LABEL_154;
      }
      v26 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      v70 = __p.__r_.__value_.__l.__size_;
      v48 = __p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v71 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v71 = __p.__r_.__value_.__l.__size_;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v72 = &__p;
      else
        v72 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v73 = v23;
      do
      {
        v74 = *(char *)(v69 + 55);
        if (v74 >= 0)
          v75 = *(unsigned __int8 *)(v69 + 55);
        else
          v75 = *(_QWORD *)(v69 + 40);
        if (v74 >= 0)
          v76 = (const void *)(v69 + 32);
        else
          v76 = *(const void **)(v69 + 32);
        if (v71 >= v75)
          v77 = v75;
        else
          v77 = v71;
        v78 = memcmp(v76, v72, v77);
        v79 = v75 < v71;
        if (v78)
          v79 = v78 < 0;
        v80 = !v79;
        if (v79)
          v81 = (uint64_t *)(v69 + 8);
        else
          v81 = (uint64_t *)v69;
        if (v80)
          v73 = (uint64_t **)v69;
        v69 = *v81;
      }
      while (*v81);
      if (v73 == v23)
        goto LABEL_154;
      v84 = v73[4];
      v83 = v73 + 4;
      v82 = v84;
      v85 = *((char *)v83 + 23);
      if (v85 >= 0)
        v86 = *((unsigned __int8 *)v83 + 23);
      else
        v86 = v83[1];
      if (v85 >= 0)
        v87 = v83;
      else
        v87 = v82;
      if (v86 >= v71)
        v88 = v71;
      else
        v88 = v86;
      v89 = memcmp(v72, v87, v88);
      v90 = v71 < v86;
      if (v89)
        v90 = v89 < 0;
      if (v90)
      {
LABEL_154:
        *(_QWORD *)(v104 + 24) = 0;
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v106.__r_.__value_.__l.__data_);
        if (v108 < 0)
          operator delete(v107[0]);
        LOBYTE(v26) = *((_BYTE *)&__p.__r_.__value_.__s + 23);
        goto LABEL_194;
      }
      *((_QWORD *)&v103 + 1) = v70;
      if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v106.__r_.__value_.__l.__data_);
    }
    *(_QWORD *)&v103 = v48;
    if (v108 < 0)
      operator delete(v107[0]);
    v24 = (uint64_t **)*v23;
  }
  if (!v24)
LABEL_188:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  if (v26 >= 0)
    v91 = v26;
  else
    v91 = *((_QWORD *)&v103 + 1);
  if (v26 >= 0)
    v92 = &__p;
  else
    v92 = (std::string *)v103;
  while (1)
  {
    while (1)
    {
      v93 = *((char *)v24 + 55);
      if (v93 >= 0)
        v94 = *((unsigned __int8 *)v24 + 55);
      else
        v94 = (size_t)v24[5];
      if (v93 >= 0)
        v95 = (uint64_t *)(v24 + 4);
      else
        v95 = v24[4];
      if (v94 >= v91)
        v96 = v91;
      else
        v96 = v94;
      v97 = memcmp(v92, v95, v96);
      v98 = v91 < v94;
      if (v97)
        v98 = v97 < 0;
      if (!v98)
        break;
      v24 = (uint64_t **)*v24;
      if (!v24)
        goto LABEL_188;
    }
    v99 = memcmp(v95, v92, v96);
    v100 = v94 < v91;
    if (v99)
      v100 = v99 < 0;
    if (!v100)
      break;
    v24 = (uint64_t **)v24[1];
    if (!v24)
      goto LABEL_188;
  }
  v101 = v24[10];
  if (v101)
  {
    if (v101 == (uint64_t *)(v24 + 7))
    {
      *(_QWORD *)(v104 + 24) = v104;
      (*(void (**)(uint64_t *, uint64_t))(*v24[10] + 24))(v24[10], v104);
    }
    else
    {
      *(_QWORD *)(v104 + 24) = (*(uint64_t (**)(uint64_t *))(*v101 + 16))(v101);
    }
  }
  else
  {
    *(_QWORD *)(v104 + 24) = 0;
  }
LABEL_194:
  if ((v26 & 0x80) != 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1910DD670(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ECFC45C8);
  _Unwind_Resume(a1);
}

void sub_1910DD688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<float (*)(Espresso::AOT::DTrees::CostModelFeature const&),std::allocator<float (*)(Espresso::AOT::DTrees::CostModelFeature const&)>,float ()(Espresso::AOT::DTrees::CostModelFeature const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<float (*)(Espresso::AOT::DTrees::CostModelFeature const&),std::allocator<float (*)(Espresso::AOT::DTrees::CostModelFeature const&)>,float ()(Espresso::AOT::DTrees::CostModelFeature const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DAD250;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<float (*)(Espresso::AOT::DTrees::CostModelFeature const&),std::allocator<float (*)(Espresso::AOT::DTrees::CostModelFeature const&)>,float ()(Espresso::AOT::DTrees::CostModelFeature const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DAD250;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<float (*)(Espresso::AOT::DTrees::CostModelFeature const&),std::allocator<float (*)(Espresso::AOT::DTrees::CostModelFeature const&)>,float ()(Espresso::AOT::DTrees::CostModelFeature const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t std::__function::__func<float (*)(Espresso::AOT::DTrees::CostModelFeature const&),std::allocator<float (*)(Espresso::AOT::DTrees::CostModelFeature const&)>,float ()(Espresso::AOT::DTrees::CostModelFeature const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A88732)
    return a1 + 8;
  if (((v3 & 0x8000000191A88732 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A88732))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A88732 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<float (*)(Espresso::AOT::DTrees::CostModelFeature const&),std::allocator<float (*)(Espresso::AOT::DTrees::CostModelFeature const&)>,float ()(Espresso::AOT::DTrees::CostModelFeature const&)>::target_type()
{
}

uint64_t *std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  uint64_t *v3;
  uint64_t *v4;
  const void **v6;
  uint64_t *v7;
  uint64_t *v8;
  const void **v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  const void ***v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18[9];

  if (a2 != (const void **)a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    v6 = a2;
    v7 = result;
    v8 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__find_equal<std::string>((uint64_t **)v7, v8, v18, &v17, v6 + 4);
      if (*result)
      {
        v9 = (const void **)v6[1];
        if (v9)
          goto LABEL_10;
      }
      else
      {
        v10 = (uint64_t **)result;
        std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::__construct_node<std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>> const&>((uint64_t)v7, (uint64_t)(v6 + 4), (uint64_t)&v16);
        v11 = v18[0];
        v12 = v16;
        *v16 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v11;
        *v10 = v12;
        v13 = *(_QWORD **)*v7;
        if (v13)
        {
          *v7 = (uint64_t)v13;
          v12 = *v10;
        }
        result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v7[1], v12);
        ++v7[2];
        v9 = (const void **)v6[1];
        if (v9)
        {
          do
          {
LABEL_10:
            v14 = (const void ***)v9;
            v9 = (const void **)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v14 = (const void ***)v6[2];
        v15 = *v14 == v6;
        v6 = (const void **)v14;
      }
      while (!v15);
LABEL_3:
      v6 = (const void **)v14;
    }
    while (v14 != a3);
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::__construct_node<std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x58uLL);
  v7 = v6;
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v6 + 32), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *((_OWORD *)v6 + 2) = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  result = *(_QWORD *)(a2 + 48);
  if (!result)
    goto LABEL_7;
  if (result != a2 + 24)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
LABEL_7:
    *((_QWORD *)v7 + 10) = result;
    *(_BYTE *)(a3 + 16) = 1;
    return result;
  }
  *((_QWORD *)v7 + 10) = v7 + 56;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1910DD9B0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1910DD9C4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 55) < 0)
    operator delete(*v3);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (!*((_BYTE *)a1 + 16))
    {
LABEL_10:
      operator delete((void *)v2);
      return a1;
    }
    v3 = *(_QWORD **)(v2 + 80);
    if (v3 == (_QWORD *)(v2 + 56))
    {
      v4 = 4;
      v3 = (_QWORD *)(v2 + 56);
    }
    else
    {
      if (!v3)
        goto LABEL_8;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
    if (*(char *)(v2 + 55) < 0)
      operator delete(*(void **)(v2 + 32));
    goto LABEL_10;
  }
  return a1;
}

void std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy(uint64_t a1, char *a2)
{
  char *v4;
  uint64_t v5;

  if (!a2)
    return;
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy(a1, *(_QWORD *)a2);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy(a1, *((_QWORD *)a2 + 1));
  v4 = (char *)*((_QWORD *)a2 + 10);
  if (v4 == a2 + 56)
  {
    v5 = 4;
    v4 = a2 + 56;
    goto LABEL_7;
  }
  if (v4)
  {
    v5 = 5;
LABEL_7:
    (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
  }
  if (a2[55] < 0)
    operator delete(*((void **)a2 + 4));
  operator delete(a2);
}

void Espresso::AOT::Backends::CostModel::`anonymous namespace'::DecisionTreeGroup::GetKey(std::string *a1, uint64_t *a2, const void **a3)
{
  int v3;
  size_t v4;
  unint64_t v5;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  std::string::size_type v18;
  _DWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  __int16 v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  std::string *v29;
  void *__p[2];
  char v31;
  std::string __dst;

  v3 = *((char *)a3 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a3 + 23);
  else
    v4 = (size_t)a3[1];
  v5 = v4 + 1;
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4)
      goto LABEL_15;
  }
  if (v3 >= 0)
    v12 = a3;
  else
    v12 = *a3;
  memmove(p_dst, v12, v4);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 45;
  v13 = *((unsigned __int8 *)a2 + 23);
  v14 = (char)v13;
  if ((v13 & 0x80u) != 0)
    v13 = a2[1];
  switch(v13)
  {
    case 3:
      if (v14 >= 0)
        v15 = a2;
      else
        v15 = (uint64_t *)*a2;
      if (*(_WORD *)v15 == 27757 && *((_BYTE *)v15 + 2) == 99)
        goto LABEL_53;
      if (*(_WORD *)v15 != 28257 || *((_BYTE *)v15 + 2) != 101)
        goto LABEL_52;
      v18 = 3;
      v31 = 3;
      qmemcpy(__p, "ane", 3);
      break;
    case 4:
      if (v14 >= 0)
        v19 = a2;
      else
        v19 = (_DWORD *)*a2;
      if (*v19 != 1936617058)
        goto LABEL_52;
      goto LABEL_53;
    case 9:
      if (v14 >= 0)
        v20 = a2;
      else
        v20 = (uint64_t *)*a2;
      v21 = *v20;
      v22 = *((unsigned __int8 *)v20 + 8);
      if (v21 != 0x706172675F73706DLL || v22 != 104)
        goto LABEL_52;
      v18 = 3;
      v31 = 3;
      v24 = 28775;
      goto LABEL_54;
    case 11:
      if (v14 >= 0)
        v25 = a2;
      else
        v25 = (uint64_t *)*a2;
      v26 = *v25;
      v27 = *(uint64_t *)((char *)v25 + 3);
      if (v26 != 0x5F63697373616C63 || v27 != 0x7570635F63697373)
        goto LABEL_52;
LABEL_53:
      v18 = 3;
      v31 = 3;
      v24 = 28771;
LABEL_54:
      LOWORD(__p[0]) = v24;
      BYTE2(__p[0]) = 117;
      break;
    default:
LABEL_52:
      v18 = 11;
      v31 = 11;
      qmemcpy(__p, "unsupported", 11);
      break;
  }
  *((_BYTE *)__p + v18) = 0;
  v29 = std::string::append(&__dst, (const std::string::value_type *)__p, v18);
  *a1 = *v29;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if ((v31 & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_59:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_59;
}

void sub_1910DDDA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::Backends::CostModel::`anonymous namespace'::DecisionTreeGroup::GetFallbackCostModelIdentifier(char *a1, int *a2)
{
  std::string *v3;
  int v4;
  _DWORD *v5;
  char *v6;

  v3 = (std::string *)a1;
  if (*((char *)a2 + 23) < 0)
  {
    if (*((_QWORD *)a2 + 1) == 4)
    {
      v5 = *(_DWORD **)a2;
      if (**(_DWORD **)a2 == 1345794376)
        goto LABEL_18;
      switch(*v5)
      {
        case 0x50363148:
LABEL_19:
          a1[23] = 4;
          strcpy(a1, "H15P");
          return;
        case 0x47363148:
LABEL_20:
          a1[23] = 4;
          strcpy(a1, "H15G");
          return;
        case 0x47353148:
LABEL_17:
          a1[23] = 4;
          strcpy(a1, "H14G");
          return;
      }
      if (*v5 != 1127559496)
        goto LABEL_21;
LABEL_29:
      a1[23] = 4;
      strcpy(a1, "H14C");
      return;
    }
  }
  else if (*((_BYTE *)a2 + 23) == 4)
  {
    v4 = *a2;
    if (*a2 > 1194733895)
    {
      if (v4 != 1194733896)
      {
        if (v4 != 1345728840)
        {
          v5 = a2;
          if (v4 != 1345794376)
          {
LABEL_21:
            if (*v5 == 1395994952)
            {
              v6 = "H14S";
              goto LABEL_24;
            }
            goto LABEL_22;
          }
LABEL_18:
          a1[23] = 4;
          strcpy(a1, "H16P");
          return;
        }
        goto LABEL_19;
      }
      goto LABEL_20;
    }
    if (v4 != 1127559496)
    {
      v5 = a2;
      if (v4 != 1194668360)
        goto LABEL_21;
      goto LABEL_17;
    }
    goto LABEL_29;
  }
LABEL_22:
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "H14D"))
  {
    v6 = "H14C";
    a1 = (char *)v3;
LABEL_24:
    std::string::basic_string[abi:ne180100]<0>(a1, v6);
    return;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "H13D"))
  {
    std::string::basic_string[abi:ne180100]<0>(v3, "H13C");
  }
  else if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
  }
}

_QWORD **std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::map[abi:ne180100](_QWORD **a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;

  a1[1] = 0;
  v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = a1 + 1;
  if (a3)
  {
    v6 = 56 * a3;
    do
    {
      v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__find_equal<std::string>(a1, v4, &v14, &v13, a2);
      if (!*v7)
      {
        std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::__construct_node<std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>> const&>((uint64_t)a1, (uint64_t)a2, (uint64_t)&v12);
        v8 = v14;
        v9 = v12;
        *v12 = 0;
        v9[1] = 0;
        v9[2] = (uint64_t)v8;
        *v7 = (uint64_t)v9;
        v10 = (_QWORD *)**a1;
        if (v10)
        {
          *a1 = v10;
          v9 = (uint64_t *)*v7;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v9);
        a1[2] = (_QWORD *)((char *)a1[2] + 1);
      }
      a2 += 7;
      v6 -= 56;
    }
    while (v6);
  }
  return a1;
}

void sub_1910DE140(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void E5AOT::Operators::E5ML_ios16::CustomValidators::ValidateCast(E5AOT::Operators::E5ML_ios16::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  uint64_t Attribute;
  unsigned int *v6;
  unsigned int *v7;
  std::string::size_type *v8;
  std::string::size_type v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *size;
  unint64_t *v13;
  unint64_t v14;
  std::string::size_type *v15;
  std::string::size_type v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::string *v24;
  __int128 v25;
  unint64_t *v26;
  uint64_t ParameterType;
  uint64_t v28;
  uint64_t Type;
  uint64_t v30;
  _QWORD *v31;
  unsigned __int8 *v32;
  char v33;
  char v34;
  uint64_t v35;
  _QWORD **v36;
  uint64_t *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  std::string *v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::string *v51;
  __int128 v52;
  uint64_t *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::string *v57;
  __int128 v58;
  unint64_t *v59;
  unint64_t *v60;
  void *v61[2];
  std::string::size_type v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  void *v65[2];
  std::string::size_type v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  void *__p[2];
  std::string::size_type v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  std::string v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  std::string v76;

  *((_BYTE *)&v76.__r_.__value_.__s + 23) = 16;
  strcpy((char *)&v76, "execution_device");
  Attribute = MIL::IRObject::TryGetAttribute();
  if (Attribute)
  {
    v6 = (unsigned int *)MEMORY[0x19401C418](Attribute);
    if (v6)
    {
      v7 = v6;
      if (*v6 == 1)
      {
        MIL::ValidationResult::ValidationResult(a2);
        goto LABEL_36;
      }
      LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      v21 = (std::__shared_weak_count *)LocationPtr[1];
      v74 = *LocationPtr;
      v75 = v21;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(p_shared_owners);
        while (__stxr(v23 + 1, p_shared_owners));
      }
      std::to_string(&v73, *v7);
      v24 = std::string::insert(&v73, 0, "Unexpected value for execution_device: ");
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v76.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      MEMORY[0x19401B320](a2, &v74, 307, &v76);
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v76.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_28:
          size = v75;
          if (!v75)
            goto LABEL_36;
          goto LABEL_32;
        }
      }
      else if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_28;
      }
      operator delete(v73.__r_.__value_.__l.__data_);
      size = v75;
      if (!v75)
        goto LABEL_36;
LABEL_32:
      v26 = (unint64_t *)&size->__shared_owners_;
      do
        v14 = __ldaxr(v26);
      while (__stlxr(v14 - 1, v26));
      goto LABEL_34;
    }
    v15 = (std::string::size_type *)MIL::IRObject::GetLocationPtr(this);
    v16 = v15[1];
    v73.__r_.__value_.__r.__words[0] = *v15;
    v73.__r_.__value_.__l.__size_ = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    v76.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
    *(_OWORD *)&v76.__r_.__value_.__r.__words[1] = xmmword_191A6F790;
    strcpy(v76.__r_.__value_.__l.__data_, "Attribute execution_device must be an integer");
    MEMORY[0x19401B320](a2, &v73, 306, &v76);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v76.__r_.__value_.__l.__data_);
    size = (std::__shared_weak_count *)v73.__r_.__value_.__l.__size_;
    if (v73.__r_.__value_.__l.__size_)
    {
      v19 = (unint64_t *)(v73.__r_.__value_.__l.__size_ + 8);
      do
        v14 = __ldaxr(v19);
      while (__stlxr(v14 - 1, v19));
      goto LABEL_34;
    }
  }
  else
  {
    v8 = (std::string::size_type *)MIL::IRObject::GetLocationPtr(this);
    v9 = v8[1];
    v73.__r_.__value_.__r.__words[0] = *v8;
    v73.__r_.__value_.__l.__size_ = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v76.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
    *(_OWORD *)&v76.__r_.__value_.__r.__words[1] = xmmword_191A72430;
    strcpy(v76.__r_.__value_.__l.__data_, "Missing attribute execution_device");
    MEMORY[0x19401B320](a2, &v73, 321, &v76);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v76.__r_.__value_.__l.__data_);
    size = (std::__shared_weak_count *)v73.__r_.__value_.__l.__size_;
    if (v73.__r_.__value_.__l.__size_)
    {
      v13 = (unint64_t *)(v73.__r_.__value_.__l.__size_ + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
LABEL_34:
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
LABEL_36:
  if (!MIL::ValidationResult::IsGood(a2))
    return;
  MEMORY[0x19401B338](a2);
  if ((*(uint64_t (**)(E5AOT::Operators::E5ML_ios16::CustomValidators *))(*(_QWORD *)this + 192))(this) != 1)
  {
    v37 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v38 = (std::__shared_weak_count *)v37[1];
    v71 = *v37;
    v72 = v38;
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    v41 = (*(uint64_t (**)(E5AOT::Operators::E5ML_ios16::CustomValidators *))(*(_QWORD *)this + 192))(this);
    std::to_string(&v76, v41);
    v42 = std::string::insert(&v76, 0, "Unexpected number of outputs: ");
    v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v70 = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x19401B320](a2, &v71, 315, __p);
    if (SHIBYTE(v70) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_52:
        v44 = v72;
        if (!v72)
          return;
LABEL_56:
        v45 = (unint64_t *)&v44->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        goto LABEL_83;
      }
    }
    else if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_52;
    }
    operator delete(v76.__r_.__value_.__l.__data_);
    v44 = v72;
    if (!v72)
      return;
    goto LABEL_56;
  }
  *((_BYTE *)&v76.__r_.__value_.__s + 23) = 1;
  LOWORD(v76.__r_.__value_.__l.__data_) = 120;
  ParameterType = MIL::IROperation::GetParameterType();
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v76.__r_.__value_.__l.__data_);
  v28 = (*(uint64_t (**)(E5AOT::Operators::E5ML_ios16::CustomValidators *))(*(_QWORD *)this + 176))(this);
  if (*(_QWORD *)(v28 + 8) == *(_QWORD *)v28)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  Type = MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v28);
  v30 = (*(uint64_t (**)(E5AOT::Operators::E5ML_ios16::CustomValidators *))(*(_QWORD *)this + 64))(this);
  v31 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 64))(v30);
  *((_BYTE *)&v76.__r_.__value_.__s + 23) = 1;
  LOWORD(v76.__r_.__value_.__l.__data_) = 120;
  v32 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v31, (unsigned __int8 *)&v76);
  if (!v32)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v33 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)v32 + 5) + 72))(*((_QWORD *)v32 + 5), ParameterType);
  v34 = v33;
  if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v33 & 1) != 0)
      goto LABEL_44;
LABEL_60:
    v47 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v48 = (std::__shared_weak_count *)v47[1];
    v67 = *v47;
    v68 = v48;
    if (v48)
    {
      v49 = (unint64_t *)&v48->__shared_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)ParameterType + 56))(&v76, ParameterType);
    v51 = std::string::insert(&v76, 0, "Invalid input type '");
    v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    v66 = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)v65 = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x19401B320](a2, &v67, 315, v65);
    if (SHIBYTE(v66) < 0)
    {
      operator delete(v65[0]);
      if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_65:
        v44 = v68;
        if (!v68)
          return;
        goto LABEL_76;
      }
    }
    else if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_65;
    }
    operator delete(v76.__r_.__value_.__l.__data_);
    v44 = v68;
    if (!v68)
      return;
LABEL_76:
    v59 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(v59);
    while (__stlxr(v46 - 1, v59));
    goto LABEL_83;
  }
  operator delete(v76.__r_.__value_.__l.__data_);
  if ((v34 & 1) == 0)
    goto LABEL_60;
LABEL_44:
  v35 = (*(uint64_t (**)(E5AOT::Operators::E5ML_ios16::CustomValidators *))(*(_QWORD *)this + 64))(this);
  v36 = (_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 80))(v35);
  if (v36[1] == *v36)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  if (((*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)**v36 + 72))(**v36, Type) & 1) != 0)
  {
    MIL::ValidationResult::ValidationResult(a2);
    return;
  }
  v53 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v54 = (std::__shared_weak_count *)v53[1];
  v63 = *v53;
  v64 = v54;
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)Type + 56))(&v76, Type);
  v57 = std::string::insert(&v76, 0, "Invalid output type '");
  v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
  v62 = v57->__r_.__value_.__r.__words[2];
  *(_OWORD *)v61 = v58;
  v57->__r_.__value_.__l.__size_ = 0;
  v57->__r_.__value_.__r.__words[2] = 0;
  v57->__r_.__value_.__r.__words[0] = 0;
  MEMORY[0x19401B320](a2, &v63, 313, v61);
  if (SHIBYTE(v62) < 0)
  {
    operator delete(v61[0]);
    if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_72:
      v44 = v64;
      if (!v64)
        return;
      goto LABEL_81;
    }
  }
  else if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_72;
  }
  operator delete(v76.__r_.__value_.__l.__data_);
  v44 = v64;
  if (!v64)
    return;
LABEL_81:
  v60 = (unint64_t *)&v44->__shared_owners_;
  do
    v46 = __ldaxr(v60);
  while (__stlxr(v46 - 1, v60));
LABEL_83:
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
}

void sub_1910DE828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  uint64_t v33;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v33 - 57) < 0)
    operator delete(*(void **)(v33 - 80));
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1910DE97C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

void E5AOT::Operators::E5ML_ios16::Cast::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *p_shared_owners;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  _QWORD *v122;
  std::__shared_weak_count *v123;
  uint64_t v124;
  _QWORD *v125;
  char *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  std::__shared_weak_count_vtbl *v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  _QWORD *v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  _OWORD *v146;
  _OWORD *v147;
  void *v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t *v151;
  void *v152;
  uint64_t *v153;
  unint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t *v158;
  void *v159;
  uint64_t *v160;
  unint64_t v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  std::__shared_weak_count_vtbl *v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  void *v168;
  void **v169;
  char *v170;
  char *v171;
  void *v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  uint64_t v176;
  void *v177;
  std::__shared_weak_count *v178;
  std::__shared_weak_count *v179;
  std::__shared_weak_count *v180;
  std::__shared_weak_count_vtbl *v181;
  std::__shared_weak_count *v182;
  std::__shared_weak_count_vtbl *v183;
  std::__shared_weak_count *v184;
  void *v185[2];
  uint64_t v186;
  std::__shared_weak_count *v187;
  uint64_t v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  std::__shared_weak_count_vtbl *v191;
  void *__p;
  void *v193;
  _QWORD *v194;
  void *v195;
  void *v196;
  _QWORD *v197;
  void *v198;
  void *v199;
  _QWORD *v200;
  void *v201;
  void *v202;
  _QWORD *v203;
  void *v204;
  void *v205;
  _QWORD *v206;
  void *v207;
  void *v208;
  _QWORD *v209;
  void *v210;
  void *v211;
  _QWORD *v212;
  void *v213;
  void *v214;
  _QWORD *v215;
  void *v216;
  void *v217;
  _QWORD *v218;
  void *v219;
  void *v220;
  _QWORD *v221;
  void *v222;
  void *v223;
  _QWORD *v224;
  void *v225;
  void *v226;
  _QWORD *v227;
  void *v228;
  void *v229;
  _QWORD *v230;
  void *v231;
  void *v232;
  _QWORD *v233;
  void *v234;
  void *v235;
  _QWORD *v236;
  void *v237;
  void *v238;
  _QWORD *v239;
  void *v240;
  void *v241;
  _QWORD *v242;
  void *v243;
  void *v244;
  _QWORD *v245;
  void *v246;
  void *v247;
  _QWORD *v248;
  void *v249;
  void *v250;
  _QWORD *v251;
  void *v252;
  void *v253;
  _QWORD *v254;
  void *v255;
  void *v256;
  _QWORD *v257;
  void *v258;
  void *v259;
  _QWORD *v260;
  void *v261;
  void *v262;
  _QWORD *v263;
  void *v264;
  void *v265;
  _QWORD *v266;
  std::__shared_weak_count *v267;
  std::__shared_weak_count_vtbl *v268;
  _BYTE v269[24];
  _BYTE *v270;
  _QWORD v271[3];
  _QWORD *v272;
  void *v273;
  void *v274;
  _QWORD *v275;
  void *Scalar;
  void *v277;
  _QWORD *v278;
  void *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;

  v297 = *MEMORY[0x1E0C80C00];
  v268 = 0;
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v279 = 0;
  v7 = (uint64_t)v268;
  v268 = (std::__shared_weak_count_vtbl *)v6;
  if (v7)
  {
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&v268, v7);
    v8 = (uint64_t)v279;
    v279 = 0;
    if (v8)
      std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&v279, v8);
  }
  v9 = v268;
  v10 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v11 = operator new(8uLL);
  v264 = v11;
  *v11 = v10;
  v266 = v11 + 1;
  v265 = v11 + 1;
  v279 = (void *)MIL::IRTensorValueType::MakeWithShape();
  v12 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v13 = operator new(8uLL);
  Scalar = v13;
  *v13 = v12;
  v277 = v13 + 1;
  v278 = v13 + 1;
  v280 = MIL::IRTensorValueType::MakeWithShape();
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(8uLL);
  v273 = v15;
  *v15 = v14;
  v274 = v15 + 1;
  v275 = v15 + 1;
  v281 = MIL::IRTensorValueType::MakeWithShape();
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = operator new(8uLL);
  v261 = v17;
  *v17 = v16;
  v263 = v17 + 1;
  v262 = v17 + 1;
  v282 = MIL::IRTensorValueType::MakeWithShape();
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = operator new(8uLL);
  v258 = v19;
  *v19 = v18;
  v260 = v19 + 1;
  v259 = v19 + 1;
  v283 = MIL::IRTensorValueType::MakeWithShape();
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v255 = v21;
  *v21 = v20;
  v257 = v21 + 1;
  v256 = v21 + 1;
  v284 = MIL::IRTensorValueType::MakeWithShape();
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  v252 = v23;
  *v23 = v22;
  v254 = v23 + 1;
  v253 = v23 + 1;
  v285 = MIL::IRTensorValueType::MakeWithShape();
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = operator new(8uLL);
  v249 = v25;
  *v25 = v24;
  v251 = v25 + 1;
  v250 = v25 + 1;
  v286 = MIL::IRTensorValueType::MakeWithShape();
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(8uLL);
  v246 = v27;
  *v27 = v26;
  v248 = v27 + 1;
  v247 = v27 + 1;
  v287 = MIL::IRTensorValueType::MakeWithShape();
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = operator new(8uLL);
  v243 = v29;
  *v29 = v28;
  v245 = v29 + 1;
  v244 = v29 + 1;
  v30 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  v240 = v31;
  *v31 = v30;
  v242 = v31 + 1;
  v241 = v31 + 1;
  v288 = MIL::IRTensorBufferValueType::MakeWithShape();
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  v237 = v33;
  *v33 = v32;
  v239 = v33 + 1;
  v238 = v33 + 1;
  v34 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  v234 = v35;
  *v35 = v34;
  v235 = v35 + 1;
  v236 = v35 + 1;
  v289 = MIL::IRTensorBufferValueType::MakeWithShape();
  v36 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v37 = operator new(8uLL);
  v231 = v37;
  *v37 = v36;
  v232 = v37 + 1;
  v233 = v37 + 1;
  v38 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v39 = operator new(8uLL);
  v228 = v39;
  *v39 = v38;
  v229 = v39 + 1;
  v230 = v39 + 1;
  v290 = MIL::IRTensorBufferValueType::MakeWithShape();
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(8uLL);
  v225 = v41;
  *v41 = v40;
  v226 = v41 + 1;
  v227 = v41 + 1;
  v42 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v43 = operator new(8uLL);
  v222 = v43;
  *v43 = v42;
  v223 = v43 + 1;
  v224 = v43 + 1;
  v291 = MIL::IRTensorBufferValueType::MakeWithShape();
  v44 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v45 = operator new(8uLL);
  v219 = v45;
  *v45 = v44;
  v220 = v45 + 1;
  v221 = v45 + 1;
  v46 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v47 = operator new(8uLL);
  v216 = v47;
  *v47 = v46;
  v217 = v47 + 1;
  v218 = v47 + 1;
  v292 = MIL::IRTensorBufferValueType::MakeWithShape();
  v48 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v49 = operator new(8uLL);
  v213 = v49;
  *v49 = v48;
  v214 = v49 + 1;
  v215 = v49 + 1;
  v50 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v51 = operator new(8uLL);
  v210 = v51;
  *v51 = v50;
  v211 = v51 + 1;
  v212 = v51 + 1;
  v293 = MIL::IRTensorBufferValueType::MakeWithShape();
  v52 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v53 = operator new(8uLL);
  v207 = v53;
  *v53 = v52;
  v208 = v53 + 1;
  v209 = v53 + 1;
  v54 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v55 = operator new(8uLL);
  v204 = v55;
  *v55 = v54;
  v205 = v55 + 1;
  v206 = v55 + 1;
  v294 = MIL::IRTensorBufferValueType::MakeWithShape();
  v56 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v57 = operator new(8uLL);
  v201 = v57;
  *v57 = v56;
  v202 = v57 + 1;
  v203 = v57 + 1;
  v58 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v59 = operator new(8uLL);
  v198 = v59;
  *v59 = v58;
  v199 = v59 + 1;
  v200 = v59 + 1;
  v295 = MIL::IRTensorBufferValueType::MakeWithShape();
  v60 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v61 = operator new(8uLL);
  v195 = v61;
  *v61 = v60;
  v196 = v61 + 1;
  v197 = v61 + 1;
  v62 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v63 = operator new(8uLL);
  __p = v63;
  *v63 = v62;
  v193 = v63 + 1;
  v194 = v63 + 1;
  v296 = MIL::IRTensorBufferValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v9, "x", &v189);
  v64 = v189;
  v189 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  v65 = v267;
  if (v267)
  {
    p_shared_owners = (unint64_t *)&v267->__shared_owners_;
    do
      v67 = __ldaxr(p_shared_owners);
    while (__stlxr(v67 - 1, p_shared_owners));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (__p)
  {
    v193 = __p;
    operator delete(__p);
  }
  if (v195)
  {
    v196 = v195;
    operator delete(v195);
  }
  if (v198)
  {
    v199 = v198;
    operator delete(v198);
  }
  if (v201)
  {
    v202 = v201;
    operator delete(v201);
  }
  if (v204)
  {
    v205 = v204;
    operator delete(v204);
  }
  if (v207)
  {
    v208 = v207;
    operator delete(v207);
  }
  if (v210)
  {
    v211 = v210;
    operator delete(v210);
  }
  if (v213)
  {
    v214 = v213;
    operator delete(v213);
  }
  if (v216)
  {
    v217 = v216;
    operator delete(v216);
  }
  if (v219)
  {
    v220 = v219;
    operator delete(v219);
  }
  if (v222)
  {
    v223 = v222;
    operator delete(v222);
  }
  if (v225)
  {
    v226 = v225;
    operator delete(v225);
  }
  if (v228)
  {
    v229 = v228;
    operator delete(v228);
  }
  if (v231)
  {
    v232 = v231;
    operator delete(v231);
  }
  if (v234)
  {
    v235 = v234;
    operator delete(v234);
  }
  if (v237)
  {
    v238 = v237;
    operator delete(v237);
  }
  if (v240)
  {
    v241 = v240;
    operator delete(v240);
  }
  if (v243)
  {
    v244 = v243;
    operator delete(v243);
  }
  if (v246)
  {
    v247 = v246;
    operator delete(v246);
  }
  if (v249)
  {
    v250 = v249;
    operator delete(v249);
  }
  if (v252)
  {
    v253 = v252;
    operator delete(v252);
  }
  if (v255)
  {
    v256 = v255;
    operator delete(v255);
  }
  if (v258)
  {
    v259 = v258;
    operator delete(v258);
  }
  if (v261)
  {
    v262 = v261;
    operator delete(v261);
  }
  if (v273)
  {
    v274 = v273;
    operator delete(v273);
  }
  if (Scalar)
  {
    v277 = Scalar;
    operator delete(Scalar);
  }
  if (v264)
  {
    v265 = v264;
    operator delete(v264);
  }
  v191 = 0;
  v68 = operator new();
  *(_QWORD *)v68 = 0;
  *(_QWORD *)(v68 + 8) = 0;
  *(_QWORD *)(v68 + 16) = 0;
  v191 = (std::__shared_weak_count_vtbl *)v68;
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v68, 1uLL);
  v69 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v70 = operator new(8uLL);
  v264 = v70;
  *v70 = v69;
  v266 = v70 + 1;
  v265 = v70 + 1;
  v279 = (void *)MIL::IRTensorValueType::MakeWithShape();
  v71 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v72 = operator new(8uLL);
  Scalar = v72;
  *v72 = v71;
  v277 = v72 + 1;
  v278 = v72 + 1;
  v280 = MIL::IRTensorValueType::MakeWithShape();
  v73 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v74 = operator new(8uLL);
  v273 = v74;
  *v74 = v73;
  v274 = v74 + 1;
  v275 = v74 + 1;
  v281 = MIL::IRTensorValueType::MakeWithShape();
  v75 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v76 = operator new(8uLL);
  v261 = v76;
  *v76 = v75;
  v263 = v76 + 1;
  v262 = v76 + 1;
  v282 = MIL::IRTensorValueType::MakeWithShape();
  v77 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v78 = operator new(8uLL);
  v258 = v78;
  *v78 = v77;
  v260 = v78 + 1;
  v259 = v78 + 1;
  v283 = MIL::IRTensorValueType::MakeWithShape();
  v79 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v80 = operator new(8uLL);
  v255 = v80;
  *v80 = v79;
  v257 = v80 + 1;
  v256 = v80 + 1;
  v284 = MIL::IRTensorValueType::MakeWithShape();
  v81 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v82 = operator new(8uLL);
  v252 = v82;
  *v82 = v81;
  v254 = v82 + 1;
  v253 = v82 + 1;
  v285 = MIL::IRTensorValueType::MakeWithShape();
  v83 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v84 = operator new(8uLL);
  v249 = v84;
  *v84 = v83;
  v251 = v84 + 1;
  v250 = v84 + 1;
  v286 = MIL::IRTensorValueType::MakeWithShape();
  v85 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v86 = operator new(8uLL);
  v246 = v86;
  *v86 = v85;
  v248 = v86 + 1;
  v247 = v86 + 1;
  v287 = MIL::IRTensorValueType::MakeWithShape();
  v87 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v88 = operator new(8uLL);
  v243 = v88;
  *v88 = v87;
  v245 = v88 + 1;
  v244 = v88 + 1;
  v89 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v90 = operator new(8uLL);
  v240 = v90;
  *v90 = v89;
  v242 = v90 + 1;
  v241 = v90 + 1;
  v288 = MIL::IRTensorBufferValueType::MakeWithShape();
  v91 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v92 = operator new(8uLL);
  v237 = v92;
  *v92 = v91;
  v239 = v92 + 1;
  v238 = v92 + 1;
  v93 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v94 = operator new(8uLL);
  v234 = v94;
  *v94 = v93;
  v235 = v94 + 1;
  v236 = v94 + 1;
  v289 = MIL::IRTensorBufferValueType::MakeWithShape();
  v95 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v96 = operator new(8uLL);
  v231 = v96;
  *v96 = v95;
  v232 = v96 + 1;
  v233 = v96 + 1;
  v97 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v98 = operator new(8uLL);
  v228 = v98;
  *v98 = v97;
  v229 = v98 + 1;
  v230 = v98 + 1;
  v290 = MIL::IRTensorBufferValueType::MakeWithShape();
  v99 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v100 = operator new(8uLL);
  v225 = v100;
  *v100 = v99;
  v226 = v100 + 1;
  v227 = v100 + 1;
  v101 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v102 = operator new(8uLL);
  v222 = v102;
  *v102 = v101;
  v223 = v102 + 1;
  v224 = v102 + 1;
  v291 = MIL::IRTensorBufferValueType::MakeWithShape();
  v103 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v104 = operator new(8uLL);
  v219 = v104;
  *v104 = v103;
  v220 = v104 + 1;
  v221 = v104 + 1;
  v105 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v106 = operator new(8uLL);
  v216 = v106;
  *v106 = v105;
  v217 = v106 + 1;
  v218 = v106 + 1;
  v292 = MIL::IRTensorBufferValueType::MakeWithShape();
  v107 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v108 = operator new(8uLL);
  v213 = v108;
  *v108 = v107;
  v214 = v108 + 1;
  v215 = v108 + 1;
  v109 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v110 = operator new(8uLL);
  v210 = v110;
  *v110 = v109;
  v211 = v110 + 1;
  v212 = v110 + 1;
  v293 = MIL::IRTensorBufferValueType::MakeWithShape();
  v111 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v112 = operator new(8uLL);
  v207 = v112;
  *v112 = v111;
  v208 = v112 + 1;
  v209 = v112 + 1;
  v113 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v114 = operator new(8uLL);
  v204 = v114;
  *v114 = v113;
  v205 = v114 + 1;
  v206 = v114 + 1;
  v294 = MIL::IRTensorBufferValueType::MakeWithShape();
  v115 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v116 = operator new(8uLL);
  v201 = v116;
  *v116 = v115;
  v202 = v116 + 1;
  v203 = v116 + 1;
  v117 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v118 = operator new(8uLL);
  v198 = v118;
  *v118 = v117;
  v199 = v118 + 1;
  v200 = v118 + 1;
  v295 = MIL::IRTensorBufferValueType::MakeWithShape();
  v119 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v120 = operator new(8uLL);
  v195 = v120;
  *v120 = v119;
  v196 = v120 + 1;
  v197 = v120 + 1;
  v121 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v122 = operator new(8uLL);
  __p = v122;
  *v122 = v121;
  v193 = v122 + 1;
  v194 = v122 + 1;
  v296 = MIL::IRTensorBufferValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v189 = v188;
  if (v188)
  {
    v123 = (std::__shared_weak_count *)operator new();
    v124 = v188;
    v123->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2FD0;
    v123->__shared_owners_ = 0;
    v123->__shared_weak_owners_ = 0;
    v123[1].__vftable = (std::__shared_weak_count_vtbl *)v124;
    v190 = v123;
    v188 = 0;
    v125 = *(_QWORD **)(v68 + 8);
    if ((unint64_t)v125 < *(_QWORD *)(v68 + 16))
    {
LABEL_67:
      *v125 = v189;
      v125[1] = v123;
      v189 = 0;
      v190 = 0;
      *(_QWORD *)(v68 + 8) = v125 + 2;
      goto LABEL_74;
    }
  }
  else
  {
    v123 = 0;
    v190 = 0;
    v188 = 0;
    v125 = *(_QWORD **)(v68 + 8);
    if ((unint64_t)v125 < *(_QWORD *)(v68 + 16))
      goto LABEL_67;
  }
  v126 = std::vector<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>::__push_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>((char **)v68, (uint64_t)&v189);
  v127 = v190;
  *(_QWORD *)(v68 + 8) = v126;
  if (v127)
  {
    v128 = (unint64_t *)&v127->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
LABEL_74:
  v130 = v188;
  v188 = 0;
  if (v130)
    (*(void (**)(uint64_t))(*(_QWORD *)v130 + 8))(v130);
  if (v187)
  {
    v131 = &v187->__shared_owners_;
    do
      v132 = __ldaxr((unint64_t *)v131);
    while (__stlxr(v132 - 1, (unint64_t *)v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
      std::__shared_weak_count::__release_weak(v187);
    }
  }
  if (__p)
  {
    v193 = __p;
    operator delete(__p);
  }
  if (v195)
  {
    v196 = v195;
    operator delete(v195);
  }
  if (v198)
  {
    v199 = v198;
    operator delete(v198);
  }
  if (v201)
  {
    v202 = v201;
    operator delete(v201);
  }
  if (v204)
  {
    v205 = v204;
    operator delete(v204);
  }
  if (v207)
  {
    v208 = v207;
    operator delete(v207);
  }
  if (v210)
  {
    v211 = v210;
    operator delete(v210);
  }
  if (v213)
  {
    v214 = v213;
    operator delete(v213);
  }
  if (v216)
  {
    v217 = v216;
    operator delete(v216);
  }
  if (v219)
  {
    v220 = v219;
    operator delete(v219);
  }
  if (v222)
  {
    v223 = v222;
    operator delete(v222);
  }
  if (v225)
  {
    v226 = v225;
    operator delete(v225);
  }
  if (v228)
  {
    v229 = v228;
    operator delete(v228);
  }
  if (v231)
  {
    v232 = v231;
    operator delete(v231);
  }
  if (v234)
  {
    v235 = v234;
    operator delete(v234);
  }
  if (v237)
  {
    v238 = v237;
    operator delete(v237);
  }
  if (v240)
  {
    v241 = v240;
    operator delete(v240);
  }
  if (v243)
  {
    v244 = v243;
    operator delete(v243);
  }
  if (v246)
  {
    v247 = v246;
    operator delete(v246);
  }
  if (v249)
  {
    v250 = v249;
    operator delete(v249);
  }
  if (v252)
  {
    v253 = v252;
    operator delete(v252);
  }
  if (v255)
  {
    v256 = v255;
    operator delete(v255);
  }
  if (v258)
  {
    v259 = v258;
    operator delete(v258);
  }
  if (v261)
  {
    v262 = v261;
    operator delete(v261);
  }
  if (v273)
  {
    v274 = v273;
    operator delete(v273);
  }
  if (Scalar)
  {
    v277 = Scalar;
    operator delete(Scalar);
  }
  if (v264)
  {
    v265 = v264;
    operator delete(v264);
  }
  *(_OWORD *)v185 = *(_OWORD *)a2;
  v186 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v183 = v268;
  if (v268)
  {
    v133 = (std::__shared_weak_count *)operator new();
    v134 = v268;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC37B0;
    v133->__shared_owners_ = 0;
    v133->__shared_weak_owners_ = 0;
    v133[1].__vftable = v134;
    v184 = v133;
    v268 = 0;
    v135 = v191;
    v181 = v191;
    if (v191)
    {
LABEL_137:
      v136 = (std::__shared_weak_count *)operator new();
      v136->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC37E8;
      v136->__shared_owners_ = 0;
      v136->__shared_weak_owners_ = 0;
      v136[1].__vftable = v135;
      goto LABEL_140;
    }
  }
  else
  {
    v184 = 0;
    v268 = 0;
    v135 = v191;
    v181 = v191;
    if (v191)
      goto LABEL_137;
  }
  v136 = 0;
LABEL_140:
  v182 = v136;
  v191 = 0;
  v271[0] = &unk_1E2DACA10;
  v271[1] = E5AOT::Operators::E5ML_ios16::CustomValidators::ValidateCast;
  v272 = v271;
  v270 = 0;
  MIL::IROperator::Make();
  v137 = v270;
  if (v270 == v269)
  {
    v138 = 4;
    v137 = v269;
  }
  else
  {
    if (!v270)
      goto LABEL_145;
    v138 = 5;
  }
  (*(void (**)(void))(*v137 + 8 * v138))();
LABEL_145:
  v139 = v272;
  if (v272 == v271)
  {
    v140 = 4;
    v139 = v271;
    goto LABEL_149;
  }
  if (v272)
  {
    v140 = 5;
LABEL_149:
    (*(void (**)(void))(*v139 + 8 * v140))();
  }
  if (!v182)
    goto LABEL_154;
  v141 = &v182->__shared_owners_;
  do
    v142 = __ldaxr((unint64_t *)v141);
  while (__stlxr(v142 - 1, (unint64_t *)v141));
  if (!v142)
  {
    ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
    std::__shared_weak_count::__release_weak(v182);
    v143 = v184;
    if (!v184)
      goto LABEL_158;
  }
  else
  {
LABEL_154:
    v143 = v184;
    if (!v184)
      goto LABEL_158;
  }
  v144 = (unint64_t *)&v143->__shared_owners_;
  do
    v145 = __ldaxr(v144);
  while (__stlxr(v145 - 1, v144));
  if (!v145)
  {
    ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
    std::__shared_weak_count::__release_weak(v143);
    if ((SHIBYTE(v186) & 0x80000000) == 0)
      goto LABEL_160;
    goto LABEL_159;
  }
LABEL_158:
  if (SHIBYTE(v186) < 0)
LABEL_159:
    operator delete(v185[0]);
LABEL_160:
  v146 = (_OWORD *)operator new();
  *v146 = 0u;
  v146[1] = 0u;
  *((_DWORD *)v146 + 8) = 1065353216;
  v264 = v146;
  v147 = (_OWORD *)operator new();
  *v147 = 0u;
  v147[1] = 0u;
  *((_DWORD *)v147 + 8) = 1065353216;
  v279 = 0;
  v148 = v264;
  v264 = v147;
  if (v148)
  {
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&v264, (uint64_t)v148);
    v149 = (uint64_t)v279;
    v279 = 0;
    if (v149)
      std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&v279, v149);
  }
  v150 = v264;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v151 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v150, "execution_device", (uint64_t *)&v279);
  v152 = v279;
  v279 = 0;
  if (v152)
    (*(void (**)(void *))(*(_QWORD *)v152 + 8))(v152);
  if (v180)
  {
    v153 = &v180->__shared_owners_;
    do
      v154 = __ldaxr((unint64_t *)v153);
    while (__stlxr(v154 - 1, (unint64_t *)v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v151[5] + 32))(v151[5], 1);
  v155 = v264;
  v156 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v157 = operator new(8uLL);
  v279 = v157;
  *v157 = v156;
  v280 = (uint64_t)(v157 + 1);
  v281 = (uint64_t)(v157 + 1);
  v273 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v158 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v155, "output_alignments", (uint64_t *)&Scalar);
  v159 = Scalar;
  Scalar = 0;
  if (v159)
    (*(void (**)(void *))(*(_QWORD *)v159 + 8))(v159);
  if (v179)
  {
    v160 = &v179->__shared_owners_;
    do
      v161 = __ldaxr((unint64_t *)v160);
    while (__stlxr(v161 - 1, (unint64_t *)v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
      std::__shared_weak_count::__release_weak(v179);
    }
  }
  if (v279)
  {
    v280 = (uint64_t)v279;
    operator delete(v279);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v158[5] + 32))(v158[5], 1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v158[5] + 48))(v158[5], 1);
  v162 = *a3;
  v177 = v264;
  if (v264)
  {
    v163 = (std::__shared_weak_count *)operator new();
    v164 = (std::__shared_weak_count_vtbl *)v264;
    v163->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC37B0;
    v163->__shared_owners_ = 0;
    v163->__shared_weak_owners_ = 0;
    v163[1].__vftable = v164;
  }
  else
  {
    v163 = 0;
  }
  v178 = v163;
  v264 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v162 + 184))(v162, &v177);
  v165 = v178;
  if (v178)
  {
    v166 = (unint64_t *)&v178->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }
  v168 = v264;
  v264 = 0;
  if (v168)
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&v264, (uint64_t)v168);
  v169 = (void **)&v191->~__shared_weak_count;
  v191 = 0;
  if (v169)
  {
    v170 = (char *)*v169;
    if (*v169)
    {
      v171 = (char *)v169[1];
      v172 = *v169;
      if (v171 != v170)
      {
        do
        {
          v173 = (std::__shared_weak_count *)*((_QWORD *)v171 - 1);
          if (v173)
          {
            v174 = (unint64_t *)&v173->__shared_owners_;
            do
              v175 = __ldaxr(v174);
            while (__stlxr(v175 - 1, v174));
            if (!v175)
            {
              ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
              std::__shared_weak_count::__release_weak(v173);
            }
          }
          v171 -= 16;
        }
        while (v171 != v170);
        v172 = *v169;
      }
      v169[1] = v170;
      operator delete(v172);
    }
    MEMORY[0x19401CD90](v169, 0x20C40960023A9);
  }
  v176 = (uint64_t)v268;
  v268 = 0;
  if (v176)
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&v268, v176);
}

void sub_1910E0008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _Unwind_Exception *exception_object, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27,void *__p,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  uint64_t a65;
  void *a67;
  uint64_t a68;
  void *a70;
  uint64_t a71;
  uint64_t v71;
  uint64_t v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  uint64_t v100;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  v73 = a24;
  a24 = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
    v74 = a31;
    if (!a31)
    {
LABEL_5:
      v75 = a34;
      if (!a34)
        goto LABEL_6;
      goto LABEL_33;
    }
  }
  else
  {
    v74 = a31;
    if (!a31)
      goto LABEL_5;
  }
  a32 = (uint64_t)v74;
  operator delete(v74);
  v75 = a34;
  if (!a34)
  {
LABEL_6:
    v76 = a37;
    if (!a37)
      goto LABEL_7;
    goto LABEL_34;
  }
LABEL_33:
  a35 = (uint64_t)v75;
  operator delete(v75);
  v76 = a37;
  if (!a37)
  {
LABEL_7:
    v77 = a40;
    if (!a40)
      goto LABEL_8;
    goto LABEL_35;
  }
LABEL_34:
  a38 = (uint64_t)v76;
  operator delete(v76);
  v77 = a40;
  if (!a40)
  {
LABEL_8:
    v78 = a43;
    if (!a43)
      goto LABEL_9;
    goto LABEL_36;
  }
LABEL_35:
  a41 = (uint64_t)v77;
  operator delete(v77);
  v78 = a43;
  if (!a43)
  {
LABEL_9:
    v79 = a46;
    if (!a46)
      goto LABEL_10;
    goto LABEL_37;
  }
LABEL_36:
  a44 = (uint64_t)v78;
  operator delete(v78);
  v79 = a46;
  if (!a46)
  {
LABEL_10:
    v80 = a49;
    if (!a49)
      goto LABEL_11;
    goto LABEL_38;
  }
LABEL_37:
  a47 = (uint64_t)v79;
  operator delete(v79);
  v80 = a49;
  if (!a49)
  {
LABEL_11:
    v81 = a52;
    if (!a52)
      goto LABEL_12;
    goto LABEL_39;
  }
LABEL_38:
  a50 = (uint64_t)v80;
  operator delete(v80);
  v81 = a52;
  if (!a52)
  {
LABEL_12:
    v82 = a55;
    if (!a55)
      goto LABEL_13;
    goto LABEL_40;
  }
LABEL_39:
  a53 = (uint64_t)v81;
  operator delete(v81);
  v82 = a55;
  if (!a55)
  {
LABEL_13:
    v83 = a58;
    if (!a58)
      goto LABEL_14;
    goto LABEL_41;
  }
LABEL_40:
  a56 = (uint64_t)v82;
  operator delete(v82);
  v83 = a58;
  if (!a58)
  {
LABEL_14:
    v84 = a61;
    if (!a61)
      goto LABEL_15;
    goto LABEL_42;
  }
LABEL_41:
  a59 = (uint64_t)v83;
  operator delete(v83);
  v84 = a61;
  if (!a61)
  {
LABEL_15:
    v85 = a64;
    if (!a64)
      goto LABEL_16;
    goto LABEL_43;
  }
LABEL_42:
  a62 = (uint64_t)v84;
  operator delete(v84);
  v85 = a64;
  if (!a64)
  {
LABEL_16:
    v86 = a67;
    if (!a67)
      goto LABEL_17;
    goto LABEL_44;
  }
LABEL_43:
  a65 = (uint64_t)v85;
  operator delete(v85);
  v86 = a67;
  if (!a67)
  {
LABEL_17:
    v87 = a70;
    if (!a70)
      goto LABEL_18;
    goto LABEL_45;
  }
LABEL_44:
  a68 = (uint64_t)v86;
  operator delete(v86);
  v87 = a70;
  if (!a70)
  {
LABEL_18:
    v88 = (void *)STACK[0x200];
    if (!STACK[0x200])
      goto LABEL_19;
    goto LABEL_46;
  }
LABEL_45:
  a71 = (uint64_t)v87;
  operator delete(v87);
  v88 = (void *)STACK[0x200];
  if (!STACK[0x200])
  {
LABEL_19:
    v89 = (void *)STACK[0x218];
    if (!STACK[0x218])
      goto LABEL_20;
    goto LABEL_47;
  }
LABEL_46:
  STACK[0x208] = (unint64_t)v88;
  operator delete(v88);
  v89 = (void *)STACK[0x218];
  if (!STACK[0x218])
  {
LABEL_20:
    v90 = (void *)STACK[0x230];
    if (!STACK[0x230])
      goto LABEL_21;
    goto LABEL_48;
  }
LABEL_47:
  STACK[0x220] = (unint64_t)v89;
  operator delete(v89);
  v90 = (void *)STACK[0x230];
  if (!STACK[0x230])
  {
LABEL_21:
    v91 = (void *)STACK[0x248];
    if (!STACK[0x248])
      goto LABEL_22;
    goto LABEL_49;
  }
LABEL_48:
  STACK[0x238] = (unint64_t)v90;
  operator delete(v90);
  v91 = (void *)STACK[0x248];
  if (!STACK[0x248])
  {
LABEL_22:
    v92 = (void *)STACK[0x260];
    if (!STACK[0x260])
      goto LABEL_23;
    goto LABEL_50;
  }
LABEL_49:
  STACK[0x250] = (unint64_t)v91;
  operator delete(v91);
  v92 = (void *)STACK[0x260];
  if (!STACK[0x260])
  {
LABEL_23:
    v93 = (void *)STACK[0x278];
    if (!STACK[0x278])
      goto LABEL_24;
    goto LABEL_51;
  }
LABEL_50:
  STACK[0x268] = (unint64_t)v92;
  operator delete(v92);
  v93 = (void *)STACK[0x278];
  if (!STACK[0x278])
  {
LABEL_24:
    v94 = (void *)STACK[0x290];
    if (!STACK[0x290])
      goto LABEL_25;
    goto LABEL_52;
  }
LABEL_51:
  STACK[0x280] = (unint64_t)v93;
  operator delete(v93);
  v94 = (void *)STACK[0x290];
  if (!STACK[0x290])
  {
LABEL_25:
    v95 = (void *)STACK[0x2A8];
    if (!STACK[0x2A8])
      goto LABEL_26;
    goto LABEL_53;
  }
LABEL_52:
  STACK[0x298] = (unint64_t)v94;
  operator delete(v94);
  v95 = (void *)STACK[0x2A8];
  if (!STACK[0x2A8])
  {
LABEL_26:
    v96 = (void *)STACK[0x2C0];
    if (!STACK[0x2C0])
      goto LABEL_27;
    goto LABEL_54;
  }
LABEL_53:
  STACK[0x2B0] = (unint64_t)v95;
  operator delete(v95);
  v96 = (void *)STACK[0x2C0];
  if (!STACK[0x2C0])
  {
LABEL_27:
    v97 = *(void **)(v71 - 248);
    if (!v97)
      goto LABEL_28;
    goto LABEL_55;
  }
LABEL_54:
  STACK[0x2C8] = (unint64_t)v96;
  operator delete(v96);
  v97 = *(void **)(v71 - 248);
  if (!v97)
  {
LABEL_28:
    v98 = *(void **)(v71 - 224);
    if (!v98)
      goto LABEL_29;
    goto LABEL_56;
  }
LABEL_55:
  *(_QWORD *)(v71 - 240) = v97;
  operator delete(v97);
  v98 = *(void **)(v71 - 224);
  if (!v98)
  {
LABEL_29:
    v99 = (void *)STACK[0x2D8];
    if (!STACK[0x2D8])
      goto LABEL_58;
LABEL_57:
    STACK[0x2E0] = (unint64_t)v99;
    operator delete(v99);
LABEL_58:
    std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::~unique_ptr[abi:ne180100](&a27);
    v100 = STACK[0x300];
    STACK[0x300] = 0;
    if (v100)
    {
      std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&STACK[0x300], v100);
      _Unwind_Resume(a1);
    }
    _Unwind_Resume(a1);
  }
LABEL_56:
  *(_QWORD *)(v71 - 216) = v98;
  operator delete(v98);
  v99 = (void *)STACK[0x2D8];
  if (!STACK[0x2D8])
    goto LABEL_58;
  goto LABEL_57;
}

void std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v4 = *(char **)(a1 + 8);
    v5 = 16 * a2;
    v6 = (char *)operator new(16 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2)
LABEL_16:
        operator delete(v2);
    }
    else
    {
      v9 = &v6[v4 - v2];
      do
      {
        v10 = *((_OWORD *)v4 - 1);
        v4 -= 16;
        *((_OWORD *)v9 - 1) = v10;
        v9 -= 16;
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
      }
      while (v4 != v2);
      v11 = *(char **)a1;
      v2 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2 != v11)
      {
        do
        {
          v12 = (std::__shared_weak_count *)*((_QWORD *)v2 - 1);
          if (v12)
          {
            p_shared_owners = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldaxr(p_shared_owners);
            while (__stlxr(v14 - 1, p_shared_owners));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          v2 -= 16;
        }
        while (v2 != v11);
        v2 = v11;
      }
      if (v2)
        goto LABEL_16;
    }
  }
}

uint64_t std::__shared_ptr_pointer<std::vector<std::shared_ptr<MIL::IRParameter>> *>::__on_zero_shared(uint64_t result)
{
  void **v1;
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v1 = *(void ***)(result + 24);
  if (v1)
  {
    v2 = (char *)*v1;
    if (*v1)
    {
      v3 = (char *)v1[1];
      v4 = *v1;
      if (v3 != v2)
      {
        do
        {
          v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          v3 -= 16;
        }
        while (v3 != v2);
        v4 = *v1;
      }
      v1[1] = v2;
      operator delete(v4);
    }
    JUMPOUT(0x19401CD90);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::vector<std::shared_ptr<MIL::IRParameter>> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A88819)
    return a1 + 24;
  if (((v3 & 0x8000000191A88819 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A88819))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A88819 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

_QWORD *std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DACA10;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DACA10;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A888DCLL)
    return a1 + 8;
  if (((v3 & 0x8000000191A888DCLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A888DCLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A888DCLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::target_type()
{
}

uint64_t E5AOT::Operators::E5ML_ios16::Cast::Make(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  if ((_QWORD *)*a1 == a2)
  {
    v4 = 4;
    goto LABEL_5;
  }
  if (*a1)
  {
    v4 = 5;
    a2 = (_QWORD *)*a1;
LABEL_5:
    (*(void (**)(_QWORD *))(*a2 + 8 * v4))(a2);
  }
  return std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](a3);
}

uint64_t Espresso::AOT::Utils::IsDefaultsWritePresent(uint64_t *a1)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    if (*((char *)a1 + 23) >= 0)
      v4 = a1;
    else
      v4 = (uint64_t *)*a1;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "objectForKeyedSubscript:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "BOOLValue");

    return v7;
  }
  else
  {

    return 0;
  }
}

void sub_1910E1508(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1910E1520(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1910E1534(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1910E1544(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  v2 = v1;

  _Unwind_Resume(a1);
}

float Espresso::AOT::DTrees::reduce_sumAneCp()
{
  return 22.0;
}

float Espresso::AOT::DTrees::reduce_sumAneDp()
{
  return 22.0;
}

float Espresso::AOT::DTrees::reduce_sumAneEp()
{
  return 22.0;
}

float Espresso::AOT::DTrees::reduce_sumCpuCp()
{
  return 12.0;
}

float Espresso::AOT::DTrees::reduce_sumCpuDp()
{
  return 12.0;
}

float Espresso::AOT::DTrees::reduce_sumCpuEp()
{
  return 12.0;
}

float Espresso::AOT::DTrees::reduce_sumGpuCp()
{
  return 18.0;
}

float Espresso::AOT::DTrees::reduce_sumGpuDp()
{
  return 18.0;
}

float Espresso::AOT::DTrees::reduce_sumGpuEp()
{
  return 18.0;
}

void Espresso::AOT::AOTCompilerOptionsManager::~AOTCompilerOptionsManager(cxxopts::Options **this)
{
  cxxopts::Options *v1;

  v1 = *this;
  *this = 0;
  if (v1)
    std::default_delete<Espresso::AOT::AOTCompilerOptionsManager::Impl>::operator()[abi:ne180100]((int)this, v1);
}

{
  cxxopts::Options *v1;

  v1 = *this;
  *this = 0;
  if (v1)
    std::default_delete<Espresso::AOT::AOTCompilerOptionsManager::Impl>::operator()[abi:ne180100]((int)this, v1);
}

char **Espresso::AOT::AOTCompilerOptionsManager::AOTCompilerOptionsManager(char **a1, uint64_t a2, uint64_t a3)
{
  std::make_unique[abi:ne180100]<Espresso::AOT::AOTCompilerOptionsManager::Impl,std::string,std::string>(a2, a3, a1);
  return a1;
}

{
  std::make_unique[abi:ne180100]<Espresso::AOT::AOTCompilerOptionsManager::Impl,std::string,std::string>(a2, a3, a1);
  return a1;
}

void std::make_unique[abi:ne180100]<Espresso::AOT::AOTCompilerOptionsManager::Impl,std::string,std::string>(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  char *v6;
  void *__p[2];
  uint64_t v8;
  void *v9[2];
  uint64_t v10;

  v6 = (char *)operator new();
  *(_OWORD *)v9 = *(_OWORD *)a1;
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)__p = *(_OWORD *)a2;
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(v6, (uint64_t *)v9, (uint64_t)__p);
  *a3 = v6;
  if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v10) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v9[0]);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v10) < 0)
    goto LABEL_5;
}

void sub_1910E1704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  nitro::ir::NodeMixin<nitro::ir::UNARYOPERATOR>::copy((uint64_t)&a16);
  MEMORY[0x19401CD90](v16, 0x10B2C4059EA387FLL);
  _Unwind_Resume(a1);
}

void Espresso::AOT::AOTCompilerOptionsManager::AddOption(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOption(*a1, a2, a3, a4, a5);
}

void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOption(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  void **v5;
  void *v6;
  char v7;
  char v8;
  _BYTE v9[24];
  char v10;
  void *v11;
  char v12;
  char v13;
  _BYTE v14[24];
  char v15;
  void *__p;
  char v17;
  char v18;
  _BYTE v19[24];
  char v20;
  void *v21;
  char v22;
  char v23;
  char v24[23];
  __int16 v25;

  switch(a4)
  {
    case 0:
      v25 = 261;
      strcpy(v24, "false");
      LOBYTE(v21) = 0;
      v23 = 0;
      Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(a1, a2, a3, 0, (uint64_t)v24, (uint64_t)&v21, a5);
      if (v23 && v22 < 0)
        operator delete(v21);
      if (HIBYTE(v25) && (char)v25 < 0)
      {
        v5 = (void **)v24;
        goto LABEL_26;
      }
      break;
    case 1:
      v19[0] = 0;
      v20 = 0;
      LOBYTE(__p) = 0;
      v18 = 0;
      Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(a1, a2, a3, 1, (uint64_t)v19, (uint64_t)&__p, a5);
      if (v18 && v17 < 0)
        operator delete(__p);
      if (v20 && (v19[23] & 0x80000000) != 0)
      {
        v5 = (void **)v19;
        goto LABEL_26;
      }
      break;
    case 2:
      v14[0] = 0;
      v15 = 0;
      LOBYTE(v11) = 0;
      v13 = 0;
      Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(a1, a2, a3, 2, (uint64_t)v14, (uint64_t)&v11, a5);
      if (v13 && v12 < 0)
        operator delete(v11);
      if (v15 && (v14[23] & 0x80000000) != 0)
      {
        v5 = (void **)v14;
        goto LABEL_26;
      }
      break;
    case 3:
      v9[0] = 0;
      v10 = 0;
      LOBYTE(v6) = 0;
      v8 = 0;
      Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(a1, a2, a3, 3, (uint64_t)v9, (uint64_t)&v6, a5);
      if (v8 && v7 < 0)
        operator delete(v6);
      if (v10 && (v9[23] & 0x80000000) != 0)
      {
        v5 = (void **)v9;
LABEL_26:
        operator delete(*v5);
      }
      break;
    default:
      return;
  }
}

void sub_1910E1918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47)
{
  if (a15 && a14 < 0)
    operator delete(__p);
  if (a23)
  {
    if (a22 < 0)
      operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *__p;
  char v8;
  char v9;

  v6 = *a1;
  LOBYTE(__p) = 0;
  v9 = 0;
  Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionWithDefaultAndImplicit(v6, a2, a3, a4, a5, (uint64_t)&__p, a6);
  if (v9)
  {
    if (v8 < 0)
      operator delete(__p);
  }
}

void sub_1910E1A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionWithDefaultAndImplicit(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  std::string *v12;
  std::string __p;
  char v14;
  std::string v15;
  char v16;
  std::string v17;
  char v18;
  std::string v19;
  char v20;
  std::string v21;
  char v22;
  std::string v23;
  char v24;
  std::string v25;
  char v26;
  std::string v27;
  char v28;

  switch(a4)
  {
    case 0:
      if (*(char *)(a5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
        v28 = 1;
        v25.__r_.__value_.__s.__data_[0] = 0;
        v26 = 0;
        if (!*(_BYTE *)(a6 + 24))
          goto LABEL_44;
      }
      else
      {
        v27 = *(std::string *)a5;
        v28 = 1;
        v25.__r_.__value_.__s.__data_[0] = 0;
        v26 = 0;
        if (!*(_BYTE *)(a6 + 24))
          goto LABEL_44;
      }
      if (*(char *)(a6 + 23) < 0)
        std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
      else
        v25 = *(std::string *)a6;
      v26 = 1;
LABEL_44:
      Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(a1, a2, a3, 0, (uint64_t)&v27, (uint64_t)&v25, a7);
      if (v26 && SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      if (v28 && SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      {
        v12 = &v27;
        goto LABEL_58;
      }
      return;
    case 1:
      if (*(char *)(a5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
        v24 = 1;
        v21.__r_.__value_.__s.__data_[0] = 0;
        v22 = 0;
        if (!*(_BYTE *)(a6 + 24))
          goto LABEL_52;
      }
      else
      {
        v23 = *(std::string *)a5;
        v24 = 1;
        v21.__r_.__value_.__s.__data_[0] = 0;
        v22 = 0;
        if (!*(_BYTE *)(a6 + 24))
          goto LABEL_52;
      }
      if (*(char *)(a6 + 23) < 0)
        std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
      else
        v21 = *(std::string *)a6;
      v22 = 1;
LABEL_52:
      Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(a1, a2, a3, 1, (uint64_t)&v23, (uint64_t)&v21, a7);
      if (v22 && SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v21.__r_.__value_.__l.__data_);
      if (v24 && SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      {
        v12 = &v23;
        goto LABEL_58;
      }
      return;
    case 2:
      if (*(char *)(a5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
        v20 = 1;
        v17.__r_.__value_.__s.__data_[0] = 0;
        v18 = 0;
        if (!*(_BYTE *)(a6 + 24))
          goto LABEL_28;
      }
      else
      {
        v19 = *(std::string *)a5;
        v20 = 1;
        v17.__r_.__value_.__s.__data_[0] = 0;
        v18 = 0;
        if (!*(_BYTE *)(a6 + 24))
          goto LABEL_28;
      }
      if (*(char *)(a6 + 23) < 0)
        std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
      else
        v17 = *(std::string *)a6;
      v18 = 1;
LABEL_28:
      Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(a1, a2, a3, 2, (uint64_t)&v19, (uint64_t)&v17, a7);
      if (v18 && SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v17.__r_.__value_.__l.__data_);
      if (v20 && SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      {
        v12 = &v19;
        goto LABEL_58;
      }
      return;
    case 3:
      if (*(char *)(a5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
        v16 = 1;
        __p.__r_.__value_.__s.__data_[0] = 0;
        v14 = 0;
        if (!*(_BYTE *)(a6 + 24))
          goto LABEL_36;
      }
      else
      {
        v15 = *(std::string *)a5;
        v16 = 1;
        __p.__r_.__value_.__s.__data_[0] = 0;
        v14 = 0;
        if (!*(_BYTE *)(a6 + 24))
          goto LABEL_36;
      }
      if (*(char *)(a6 + 23) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
      else
        __p = *(std::string *)a6;
      v14 = 1;
LABEL_36:
      Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(a1, a2, a3, 3, (uint64_t)&v15, (uint64_t)&__p, a7);
      if (v14 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v16 && SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      {
        v12 = &v15;
LABEL_58:
        operator delete(v12->__r_.__value_.__l.__data_);
      }
      return;
    default:
      return;
  }
}

void sub_1910E1E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49)
{
  uint64_t v49;

  if (a49 && a48 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v49 - 120))
  {
    if (*(char *)(v49 - 121) < 0)
      operator delete(*(void **)(v49 - 144));
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefaultAndImplicit(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  std::string __p;
  char v14;

  v12 = *a1;
  if (*(char *)(a6 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
  else
    __p = *(std::string *)a6;
  v14 = 1;
  Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionWithDefaultAndImplicit(v12, a2, a3, a4, a5, (uint64_t)&__p, a7);
  if (v14)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1910E1FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::AOTCompilerOptionsManager::Parse(Espresso::AOT::AOTCompilerOptionsManager::Impl **a1@<X0>, uint64_t *a2@<X1>, Espresso::AOT::AOTCompilerOptions *a3@<X8>)
{
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  char **v26;
  char *v27;
  unint64_t v28;
  char **v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  void **v37;
  void **v38;
  void *v39;
  Espresso::AOT::AOTCompilerOptions *v40;
  char **__p;
  char *v42;
  void *v43;
  void **v44;
  uint64_t v45;

  v43 = 0;
  v44 = 0;
  v45 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v43, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  v5 = (char *)v43;
  v6 = (char *)v44;
  v7 = (char *)v44 - (_BYTE *)v43;
  v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v44 - (_BYTE *)v43) >> 3);
  v9 = v8 + 1;
  if (v8 == -1)
  {
    v10 = 0;
    v11 = 0;
  }
  else
  {
    if (v9 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v12 = (char *)operator new(8 * v9);
    v10 = v12;
    v11 = (uint64_t)&v12[8 * v8 + 8];
    __p = (char **)v12;
    v42 = (char *)v11;
    if (v7 >= -23)
    {
      *(_QWORD *)v12 = 0;
      v13 = v12 + 8;
      goto LABEL_14;
    }
  }
  v14 = v11 - (_QWORD)v10;
  v15 = v14 >> 2;
  if ((unint64_t)(v14 >> 2) <= 1)
    v15 = 1;
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
    v16 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v16 = v15;
  if (v16 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v17 = operator new(8 * v16);
  *v17 = 0;
  v13 = (char *)(v17 + 1);
  __p = (char **)v17;
  v42 = (char *)&v17[v16];
  if (v10)
  {
    operator delete(v10);
    v5 = (char *)v43;
    v6 = (char *)v44;
  }
LABEL_14:
  v40 = a3;
  if (v5 != v6)
  {
    while (1)
    {
      v19 = v5;
      if (v5[23] < 0)
      {
        v19 = *(char **)v5;
        v20 = v42;
        if (v13 >= v42)
        {
LABEL_22:
          v21 = (v13 - (char *)__p) >> 3;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 61)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v23 = v20 - (char *)__p;
          if (v23 >> 2 > v22)
            v22 = v23 >> 2;
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
            v24 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v24 = v22;
          if (v24)
          {
            if (v24 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v25 = operator new(8 * v24);
            v26 = (char **)&v25[8 * v21];
            v27 = &v25[8 * v24];
            *v26 = v19;
            v18 = (uint64_t)(v26 + 1);
            if (v13 != (char *)__p)
            {
LABEL_31:
              v28 = v13 - 8 - (char *)__p;
              if (v28 < 0x168)
              {
                v29 = (char **)v13;
                goto LABEL_33;
              }
              if (&v25[v13 - (char *)__p - 8 - (v28 & 0xFFFFFFFFFFFFFFF8)] > &v25[v13 - (char *)__p - 8])
              {
                v29 = (char **)v13;
                goto LABEL_33;
              }
              if (&v13[-(v28 & 0xFFFFFFFFFFFFFFF8) - 8] > v13 - 8)
              {
                v29 = (char **)v13;
                goto LABEL_33;
              }
              if ((unint64_t)((char *)__p - v25) < 0x20)
              {
                v29 = (char **)v13;
                goto LABEL_33;
              }
              v31 = (v28 >> 3) + 1;
              v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
              v29 = (char **)&v13[-v32];
              v26 = (char **)((char *)v26 - v32);
              v33 = &v25[8 * v21 - 16];
              v34 = v13 - 16;
              v35 = v31 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v36 = *(_OWORD *)v34;
                *(v33 - 1) = *((_OWORD *)v34 - 1);
                *v33 = v36;
                v33 -= 2;
                v34 -= 32;
                v35 -= 4;
              }
              while (v35);
              if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_33:
                  v30 = *--v29;
                  *--v26 = v30;
                }
                while (v29 != __p);
              }
              v13 = (char *)__p;
              __p = v26;
              v42 = v27;
              if (!v13)
                goto LABEL_17;
LABEL_38:
              operator delete(v13);
              goto LABEL_17;
            }
          }
          else
          {
            v25 = 0;
            v26 = (char **)(8 * v21);
            v27 = 0;
            *(_QWORD *)(8 * v21) = v19;
            v18 = 8 * v21 + 8;
            if (v13 != (char *)__p)
              goto LABEL_31;
          }
          __p = v26;
          v42 = v27;
          goto LABEL_38;
        }
      }
      else
      {
        v20 = v42;
        if (v13 >= v42)
          goto LABEL_22;
      }
      *(_QWORD *)v13 = v19;
      v18 = (uint64_t)(v13 + 8);
LABEL_17:
      v5 += 24;
      v13 = (char *)v18;
      if (v5 == v6)
        goto LABEL_50;
    }
  }
  v18 = (uint64_t)v13;
LABEL_50:
  Espresso::AOT::AOTCompilerOptionsManager::Impl::Parse(*a1, __p, (unint64_t)(v18 - (_QWORD)__p) >> 3, v40);
  if (__p)
    operator delete(__p);
  v37 = (void **)v43;
  if (v43)
  {
    v38 = v44;
    v39 = v43;
    if (v44 != v43)
    {
      do
      {
        if (*((char *)v38 - 1) < 0)
          operator delete(*(v38 - 3));
        v38 -= 3;
      }
      while (v38 != v37);
      v39 = v43;
    }
    v44 = v37;
    operator delete(v39);
  }
}

void sub_1910E2384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14)
{
  if (__p)
    operator delete(__p);
  std::vector<std::string>::~vector[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void Espresso::AOT::AOTCompilerOptionsManager::Parse(Espresso::AOT::AOTCompilerOptionsManager::Impl **this@<X0>, char **a2@<X2>, int a3@<W1>, Espresso::AOT::AOTCompilerOptions *a4@<X8>)
{
  Espresso::AOT::AOTCompilerOptionsManager::Impl::Parse(*this, a2, a3, a4);
}

void Espresso::AOT::AOTCompilerOptionsManager::Impl::Parse(Espresso::AOT::AOTCompilerOptionsManager::Impl *this@<X0>, char **a2@<X2>, int a3@<W1>, Espresso::AOT::AOTCompilerOptions *a4@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  void *exception;
  _QWORD *v13[11];
  _QWORD v14[9];
  std::string v15;
  char **v16;
  int v17;

  v17 = a3;
  v16 = a2;
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions(a4);
  cxxopts::Options::Options(&v15, this);
  cxxopts::Options::parse((cxxopts::Options *)&v15, &v17, &v16, (uint64_t)v13);
  v6 = (uint64_t *)*((_QWORD *)this + 29);
  if (v6)
  {
    while (1)
    {
      v7 = (uint64_t)(v6 + 2);
      v8 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v13[0], (uint64_t)(v6 + 2));
      if (v8)
      {
        if (std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::find<E5RT::AsyncEvent const*>(v14, v8 + 5)[6])break;
      }
      if (*((_BYTE *)v6 + 45))
      {
        v9 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v13[0], (uint64_t)(v6 + 2));
        if (!v9)
        {
LABEL_14:
          exception = __cxa_allocate_exception(0x20uLL);
          cxxopts::option_not_present_exception::option_not_present_exception((uint64_t)exception, v7);
        }
        goto LABEL_10;
      }
LABEL_3:
      v6 = (uint64_t *)*v6;
      if (!v6)
        goto LABEL_12;
    }
    v9 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v13[0], (uint64_t)(v6 + 2));
    if (!v9)
      goto LABEL_14;
LABEL_10:
    v10 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::find<E5RT::AsyncEvent const*>(v14, v9 + 5);
    v11 = v6[9];
    if (!v11)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, Espresso::AOT::AOTCompilerOptions *, _QWORD *))(*(_QWORD *)v11 + 48))(v6[9], a4, v10 + 4);
    goto LABEL_3;
  }
LABEL_12:
  cxxopts::ParseResult::~ParseResult((cxxopts::ParseResult *)v13);
  cxxopts::Options::~Options((cxxopts::Options *)&v15);
}

void sub_1910E252C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  Espresso::AOT::AOTCompilerOptions *v30;

  cxxopts::Options::~Options((cxxopts::Options *)&a30);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions(v30);
  _Unwind_Resume(a1);
}

void sub_1910E2548(_Unwind_Exception *a1)
{
  Espresso::AOT::AOTCompilerOptions *v1;

  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions(v1);
  _Unwind_Resume(a1);
}

void sub_1910E255C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  Espresso::AOT::AOTCompilerOptions *v30;
  void *v31;

  __cxa_free_exception(v31);
  cxxopts::ParseResult::~ParseResult((cxxopts::ParseResult *)&a10);
  cxxopts::Options::~Options((cxxopts::Options *)&a30);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions(v30);
  _Unwind_Resume(a1);
}

void Espresso::AOT::AOTCompilerOptionsManager::GetUsage(Espresso::AOT::AOTCompilerOptionsManager::Impl **this@<X0>, std::string *a2@<X8>)
{
  Espresso::AOT::AOTCompilerOptionsManager::Impl::GetUsage(*this, a2);
}

void Espresso::AOT::AOTCompilerOptionsManager::Impl::GetUsage(Espresso::AOT::AOTCompilerOptionsManager::Impl *this@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  std::string *v6;
  __int128 v7;
  uint64_t v8;
  const std::string::value_type *v9;
  uint64_t v10;
  int v11;
  std::string *v13;
  std::string *v14;
  void *v15;
  void **v16;
  void **v17;
  void *v18;
  void *__p;
  std::string *v20;
  unint64_t v21;
  void *v22;
  void **v23;

  cxxopts::Options::groups(this, (uint64_t)&v22);
  __p = 0;
  v20 = 0;
  v21 = 0;
  v4 = (unsigned __int8 *)v22;
  v5 = (unsigned __int8 *)v23;
  if (v22 != v23)
  {
    v6 = 0;
    do
    {
      v8 = v4[23];
      if ((char)v4[23] < 0)
      {
        v9 = *(const std::string::value_type **)v4;
        if (*((_QWORD *)v4 + 1) != 12)
          goto LABEL_16;
      }
      else
      {
        v9 = (const std::string::value_type *)v4;
        if (v8 != 12)
          goto LABEL_16;
      }
      v10 = *(_QWORD *)v9;
      v11 = *((_DWORD *)v9 + 2);
      if (v10 != 0x656D697265707865 || v11 != 1818326126)
      {
LABEL_16:
        if ((unint64_t)v6 < v21)
        {
          if ((v8 & 0x80) != 0)
          {
            std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
          }
          else
          {
            v7 = *(_OWORD *)v4;
            v6->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
            *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
          }
          ++v6;
        }
        else
        {
          v6 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&__p, (uint64_t)v4);
        }
        v20 = v6;
      }
      v4 += 24;
    }
    while (v4 != v5);
  }
  cxxopts::Options::help((uint64_t)this, (uint64_t *)&__p, a2);
  v13 = (std::string *)__p;
  if (__p)
  {
    v14 = v20;
    v15 = __p;
    if (v20 != __p)
    {
      do
      {
        if (SHIBYTE(v14[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v14[-1].__r_.__value_.__l.__data_);
        --v14;
      }
      while (v14 != v13);
      v15 = __p;
    }
    v20 = v13;
    operator delete(v15);
  }
  v16 = (void **)v22;
  if (v22)
  {
    v17 = v23;
    v18 = v22;
    if (v23 != v22)
    {
      do
      {
        if (*((char *)v17 - 1) < 0)
          operator delete(*(v17 - 3));
        v17 -= 3;
      }
      while (v17 != v16);
      v18 = v22;
    }
    v23 = v16;
    operator delete(v18);
  }
}

void sub_1910E2754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
  std::vector<std::string>::~vector[abi:ne180100](&a9);
  std::vector<std::string>::~vector[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void Espresso::AOT::AOTCompilerOptionsManager::GetVerboseUsage(Espresso::AOT::AOTCompilerOptionsManager *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  void **v3;
  void **v4;
  void *v5;
  void *__p;
  void **v7;
  uint64_t v8;

  v2 = *(_QWORD *)this;
  __p = 0;
  v7 = 0;
  v8 = 0;
  cxxopts::Options::help(v2, (uint64_t *)&__p, a2);
  v3 = (void **)__p;
  if (__p)
  {
    v4 = v7;
    v5 = __p;
    if (v7 != __p)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 3;
      }
      while (v4 != v3);
      v5 = __p;
    }
    v7 = v3;
    operator delete(v5);
  }
}

void sub_1910E2810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  if (a10)
    Espresso::AOT::AOTCompilerOptionsManager::GetVerboseUsage(&a10, a10);
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  size_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v23;
  unint64_t v24;
  const std::string::value_type *v25;
  int v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  char *v42;
  char *v43;
  std::string *v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::string v55;
  std::string v56;
  void *v57;
  char v58;
  __int128 v59;
  std::string v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  __int128 v65;
  void *__p[2];
  std::string::size_type v67;
  void **v68;
  _BYTE __dst[31];
  char v70;
  _QWORD v71[4];

  v71[2] = *MEMORY[0x1E0C80C00];
  v7 = *(char *)(a2 + 23);
  if (v7 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = v8 + 1;
  if (v8 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = a6;
  v11 = a5;
  v12 = a4;
  v13 = a3;
  v14 = a2;
  v15 = a1;
  if (v9 >= 0x17)
  {
    v17 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v17 = v9 | 7;
    v23 = v17 + 1;
    v16 = operator new(v17 + 1);
    v24 = v23 | 0x8000000000000000;
    v12 = a4;
    v11 = a5;
    v10 = a6;
    v15 = a1;
    v13 = a3;
    v14 = a2;
    *(_QWORD *)&__dst[8] = v8 + 1;
    *(_QWORD *)&__dst[16] = v24;
    *(_QWORD *)__dst = v16;
  }
  else
  {
    memset(__dst, 0, 24);
    v16 = __dst;
    __dst[23] = v8 + 1;
    if (!v8)
      goto LABEL_15;
  }
  if (v7 >= 0)
    v25 = (const std::string::value_type *)v14;
  else
    v25 = *(const std::string::value_type **)v14;
  memmove(v16, v25, v8);
LABEL_15:
  *(_WORD *)&v16[v8] = 45;
  v26 = *(char *)(v13 + 23);
  if (v26 >= 0)
    v27 = (const std::string::value_type *)v13;
  else
    v27 = *(const std::string::value_type **)v13;
  if (v26 >= 0)
    v28 = *(unsigned __int8 *)(v13 + 23);
  else
    v28 = *(_QWORD *)(v13 + 8);
  v29 = std::string::append((std::string *)__dst, v27, v28);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v67 = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>((_QWORD *)(v15 + 216), (uint64_t)__p))
  {
    _ZNSt3__115allocate_sharedB8ne180100IN7cxxopts6values14standard_valueIbEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((uint64_t *)__dst);
    v65 = *(_OWORD *)__dst;
    if (!*(_BYTE *)(v11 + 24))
      goto LABEL_32;
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, __n128))(**(_QWORD **)__dst + 80))(&v63, *(_QWORD *)__dst, v11, *(__n128 *)__dst);
    v31 = v64;
    if (!v64)
      goto LABEL_32;
    p_shared_owners = (unint64_t *)&v64->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
      if (!*(_BYTE *)(v10 + 24))
        goto LABEL_39;
    }
    else
    {
LABEL_32:
      if (!*(_BYTE *)(v10 + 24))
        goto LABEL_39;
    }
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)v65 + 88))(&v61, v65, v10);
    v34 = v62;
    if (v62)
    {
      v35 = (unint64_t *)&v62->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
LABEL_39:
    if (*(char *)(v14 + 23) < 0)
      std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)v14, *(_QWORD *)(v14 + 8));
    else
      v60 = *(std::string *)v14;
    *(_OWORD *)&__dst[8] = *(_OWORD *)&v60.__r_.__value_.__l.__data_;
    *(_QWORD *)&__dst[23] = *(std::string::size_type *)((char *)&v60.__r_.__value_.__r.__words[1] + 7);
    *(_QWORD *)__dst = v15;
    v70 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
    v59 = v65;
    memset(&v60, 0, sizeof(v60));
    if (*((_QWORD *)&v65 + 1))
    {
      v37 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    v58 = 0;
    LOBYTE(v57) = 0;
    cxxopts::OptionAdder::operator()((uint64_t)__dst, (uint64_t)__p, a7, (std::string::size_type *)&v59, (uint64_t)&v57);
    if (v58 < 0)
    {
      operator delete(v57);
      v39 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
      if (!*((_QWORD *)&v59 + 1))
        goto LABEL_52;
    }
    else
    {
      v39 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
      if (!*((_QWORD *)&v59 + 1))
        goto LABEL_52;
    }
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
      if ((v70 & 0x80000000) == 0)
      {
LABEL_53:
        if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_54;
        goto LABEL_58;
      }
LABEL_57:
      operator delete(*(void **)&__dst[8]);
      if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_54:
        *(_DWORD *)__dst = v12;
        __dst[4] = 0;
        __dst[5] = *(_BYTE *)(v11 + 24);
        if ((*(char *)(v14 + 23) & 0x80000000) == 0)
        {
LABEL_55:
          v55 = *(std::string *)v14;
          goto LABEL_60;
        }
LABEL_59:
        std::string::__init_copy_ctor_external(&v55, *(const std::string::value_type **)v14, *(_QWORD *)(v14 + 8));
LABEL_60:
        if (*(char *)(v13 + 23) < 0)
          std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)v13, *(_QWORD *)(v13 + 8));
        else
          v56 = *(std::string *)v13;
        v71[0] = 0;
        v42 = (char *)operator new(0x38uLL);
        v43 = v42;
        *(_QWORD *)v42 = &unk_1E2DB2160;
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external((std::string *)(v42 + 8), v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
        else
          *(std::string *)(v42 + 8) = v55;
        v44 = (std::string *)(v43 + 32);
        if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v44, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&v44->__r_.__value_.__l.__data_ = *(_OWORD *)&v56.__r_.__value_.__l.__data_;
          *((_QWORD *)v43 + 6) = *((_QWORD *)&v56.__r_.__value_.__l + 2);
        }
        v45 = &__dst[8];
        v71[0] = v43;
        v68 = __p;
        v47 = std::__hash_table<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v15 + 216, (uint64_t)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v68)+ 9;
        v46 = (uint64_t *)*v47;
        *((_DWORD *)v47 - 8) = *(_DWORD *)__dst;
        *((_WORD *)v47 - 14) = *(_WORD *)&__dst[4];
        *v47 = 0;
        if (v46 == v47 - 3)
        {
          v48 = 4;
          v46 = v47 - 3;
        }
        else
        {
          if (!v46)
            goto LABEL_74;
          v48 = 5;
        }
        (*(void (**)(void))(*v46 + 8 * v48))();
LABEL_74:
        if (v71[0])
        {
          if ((_BYTE *)v71[0] == &__dst[8])
          {
            *v47 = (uint64_t)(v47 - 3);
            (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)&__dst[8] + 24))(&__dst[8], v47 - 3);
LABEL_79:
            if ((_BYTE *)v71[0] == &__dst[8])
            {
              v49 = 4;
            }
            else
            {
              if (!v71[0])
                goto LABEL_84;
              v49 = 5;
              v45 = (_QWORD *)v71[0];
            }
            (*(void (**)(_QWORD *))(*v45 + 8 * v49))(v45);
LABEL_84:
            if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v56.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_86:
                v50 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
                if (!*((_QWORD *)&v65 + 1))
                  goto LABEL_24;
                goto LABEL_90;
              }
            }
            else if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_86;
            }
            operator delete(v55.__r_.__value_.__l.__data_);
            v50 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
            if (!*((_QWORD *)&v65 + 1))
              goto LABEL_24;
LABEL_90:
            v51 = (unint64_t *)&v50->__shared_owners_;
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
            goto LABEL_24;
          }
          *v47 = v71[0];
          v47 = v71;
        }
        *v47 = 0;
        goto LABEL_79;
      }
LABEL_58:
      operator delete(v60.__r_.__value_.__l.__data_);
      *(_DWORD *)__dst = v12;
      __dst[4] = 0;
      __dst[5] = *(_BYTE *)(v11 + 24);
      if ((*(char *)(v14 + 23) & 0x80000000) == 0)
        goto LABEL_55;
      goto LABEL_59;
    }
LABEL_52:
    if ((v70 & 0x80000000) == 0)
      goto LABEL_53;
    goto LABEL_57;
  }
LABEL_24:
  if (SHIBYTE(v67) < 0)
    operator delete(__p[0]);
}

void sub_1910E2E18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  size_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v23;
  unint64_t v24;
  const std::string::value_type *v25;
  int v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  char *v42;
  char *v43;
  std::string *v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::string v55;
  std::string v56;
  void *v57;
  char v58;
  __int128 v59;
  std::string v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  __int128 v65;
  void *__p[2];
  std::string::size_type v67;
  void **v68;
  _BYTE __dst[31];
  char v70;
  _QWORD v71[4];

  v71[2] = *MEMORY[0x1E0C80C00];
  v7 = *(char *)(a2 + 23);
  if (v7 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = v8 + 1;
  if (v8 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = a6;
  v11 = a5;
  v12 = a4;
  v13 = a3;
  v14 = a2;
  v15 = a1;
  if (v9 >= 0x17)
  {
    v17 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v17 = v9 | 7;
    v23 = v17 + 1;
    v16 = operator new(v17 + 1);
    v24 = v23 | 0x8000000000000000;
    v12 = a4;
    v11 = a5;
    v10 = a6;
    v15 = a1;
    v13 = a3;
    v14 = a2;
    *(_QWORD *)&__dst[8] = v8 + 1;
    *(_QWORD *)&__dst[16] = v24;
    *(_QWORD *)__dst = v16;
  }
  else
  {
    memset(__dst, 0, 24);
    v16 = __dst;
    __dst[23] = v8 + 1;
    if (!v8)
      goto LABEL_15;
  }
  if (v7 >= 0)
    v25 = (const std::string::value_type *)v14;
  else
    v25 = *(const std::string::value_type **)v14;
  memmove(v16, v25, v8);
LABEL_15:
  *(_WORD *)&v16[v8] = 45;
  v26 = *(char *)(v13 + 23);
  if (v26 >= 0)
    v27 = (const std::string::value_type *)v13;
  else
    v27 = *(const std::string::value_type **)v13;
  if (v26 >= 0)
    v28 = *(unsigned __int8 *)(v13 + 23);
  else
    v28 = *(_QWORD *)(v13 + 8);
  v29 = std::string::append((std::string *)__dst, v27, v28);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v67 = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>((_QWORD *)(v15 + 216), (uint64_t)__p))
  {
    _ZNSt3__115allocate_sharedB8ne180100IN7cxxopts6values14standard_valueIiEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__dst);
    v65 = *(_OWORD *)__dst;
    if (!*(_BYTE *)(v11 + 24))
      goto LABEL_32;
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, __n128))(**(_QWORD **)__dst + 80))(&v63, *(_QWORD *)__dst, v11, *(__n128 *)__dst);
    v31 = v64;
    if (!v64)
      goto LABEL_32;
    p_shared_owners = (unint64_t *)&v64->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
      if (!*(_BYTE *)(v10 + 24))
        goto LABEL_39;
    }
    else
    {
LABEL_32:
      if (!*(_BYTE *)(v10 + 24))
        goto LABEL_39;
    }
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)v65 + 88))(&v61, v65, v10);
    v34 = v62;
    if (v62)
    {
      v35 = (unint64_t *)&v62->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
LABEL_39:
    if (*(char *)(v14 + 23) < 0)
      std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)v14, *(_QWORD *)(v14 + 8));
    else
      v60 = *(std::string *)v14;
    *(_OWORD *)&__dst[8] = *(_OWORD *)&v60.__r_.__value_.__l.__data_;
    *(_QWORD *)&__dst[23] = *(std::string::size_type *)((char *)&v60.__r_.__value_.__r.__words[1] + 7);
    *(_QWORD *)__dst = v15;
    v70 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
    v59 = v65;
    memset(&v60, 0, sizeof(v60));
    if (*((_QWORD *)&v65 + 1))
    {
      v37 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    v58 = 0;
    LOBYTE(v57) = 0;
    cxxopts::OptionAdder::operator()((uint64_t)__dst, (uint64_t)__p, a7, (std::string::size_type *)&v59, (uint64_t)&v57);
    if (v58 < 0)
    {
      operator delete(v57);
      v39 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
      if (!*((_QWORD *)&v59 + 1))
        goto LABEL_52;
    }
    else
    {
      v39 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
      if (!*((_QWORD *)&v59 + 1))
        goto LABEL_52;
    }
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
      if ((v70 & 0x80000000) == 0)
      {
LABEL_53:
        if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_54;
        goto LABEL_58;
      }
LABEL_57:
      operator delete(*(void **)&__dst[8]);
      if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_54:
        *(_DWORD *)__dst = v12;
        __dst[4] = 0;
        __dst[5] = *(_BYTE *)(v11 + 24);
        if ((*(char *)(v14 + 23) & 0x80000000) == 0)
        {
LABEL_55:
          v55 = *(std::string *)v14;
          goto LABEL_60;
        }
LABEL_59:
        std::string::__init_copy_ctor_external(&v55, *(const std::string::value_type **)v14, *(_QWORD *)(v14 + 8));
LABEL_60:
        if (*(char *)(v13 + 23) < 0)
          std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)v13, *(_QWORD *)(v13 + 8));
        else
          v56 = *(std::string *)v13;
        v71[0] = 0;
        v42 = (char *)operator new(0x38uLL);
        v43 = v42;
        *(_QWORD *)v42 = &unk_1E2DB2210;
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external((std::string *)(v42 + 8), v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
        else
          *(std::string *)(v42 + 8) = v55;
        v44 = (std::string *)(v43 + 32);
        if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v44, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&v44->__r_.__value_.__l.__data_ = *(_OWORD *)&v56.__r_.__value_.__l.__data_;
          *((_QWORD *)v43 + 6) = *((_QWORD *)&v56.__r_.__value_.__l + 2);
        }
        v45 = &__dst[8];
        v71[0] = v43;
        v68 = __p;
        v47 = std::__hash_table<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v15 + 216, (uint64_t)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v68)+ 9;
        v46 = (uint64_t *)*v47;
        *((_DWORD *)v47 - 8) = *(_DWORD *)__dst;
        *((_WORD *)v47 - 14) = *(_WORD *)&__dst[4];
        *v47 = 0;
        if (v46 == v47 - 3)
        {
          v48 = 4;
          v46 = v47 - 3;
        }
        else
        {
          if (!v46)
            goto LABEL_74;
          v48 = 5;
        }
        (*(void (**)(void))(*v46 + 8 * v48))();
LABEL_74:
        if (v71[0])
        {
          if ((_BYTE *)v71[0] == &__dst[8])
          {
            *v47 = (uint64_t)(v47 - 3);
            (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)&__dst[8] + 24))(&__dst[8], v47 - 3);
LABEL_79:
            if ((_BYTE *)v71[0] == &__dst[8])
            {
              v49 = 4;
            }
            else
            {
              if (!v71[0])
                goto LABEL_84;
              v49 = 5;
              v45 = (_QWORD *)v71[0];
            }
            (*(void (**)(_QWORD *))(*v45 + 8 * v49))(v45);
LABEL_84:
            if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v56.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_86:
                v50 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
                if (!*((_QWORD *)&v65 + 1))
                  goto LABEL_24;
                goto LABEL_90;
              }
            }
            else if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_86;
            }
            operator delete(v55.__r_.__value_.__l.__data_);
            v50 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
            if (!*((_QWORD *)&v65 + 1))
              goto LABEL_24;
LABEL_90:
            v51 = (unint64_t *)&v50->__shared_owners_;
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
            goto LABEL_24;
          }
          *v47 = v71[0];
          v47 = v71;
        }
        *v47 = 0;
        goto LABEL_79;
      }
LABEL_58:
      operator delete(v60.__r_.__value_.__l.__data_);
      *(_DWORD *)__dst = v12;
      __dst[4] = 0;
      __dst[5] = *(_BYTE *)(v11 + 24);
      if ((*(char *)(v14 + 23) & 0x80000000) == 0)
        goto LABEL_55;
      goto LABEL_59;
    }
LABEL_52:
    if ((v70 & 0x80000000) == 0)
      goto LABEL_53;
    goto LABEL_57;
  }
LABEL_24:
  if (SHIBYTE(v67) < 0)
    operator delete(__p[0]);
}

void sub_1910E3558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  size_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v23;
  unint64_t v24;
  const std::string::value_type *v25;
  int v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  char *v42;
  char *v43;
  std::string *v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::string v55;
  std::string v56;
  void *v57;
  char v58;
  __int128 v59;
  std::string v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  __int128 v65;
  void *__p[2];
  std::string::size_type v67;
  void **v68;
  _BYTE __dst[31];
  char v70;
  _QWORD v71[4];

  v71[2] = *MEMORY[0x1E0C80C00];
  v7 = *(char *)(a2 + 23);
  if (v7 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = v8 + 1;
  if (v8 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = a6;
  v11 = a5;
  v12 = a4;
  v13 = a3;
  v14 = a2;
  v15 = a1;
  if (v9 >= 0x17)
  {
    v17 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v17 = v9 | 7;
    v23 = v17 + 1;
    v16 = operator new(v17 + 1);
    v24 = v23 | 0x8000000000000000;
    v12 = a4;
    v11 = a5;
    v10 = a6;
    v15 = a1;
    v13 = a3;
    v14 = a2;
    *(_QWORD *)&__dst[8] = v8 + 1;
    *(_QWORD *)&__dst[16] = v24;
    *(_QWORD *)__dst = v16;
  }
  else
  {
    memset(__dst, 0, 24);
    v16 = __dst;
    __dst[23] = v8 + 1;
    if (!v8)
      goto LABEL_15;
  }
  if (v7 >= 0)
    v25 = (const std::string::value_type *)v14;
  else
    v25 = *(const std::string::value_type **)v14;
  memmove(v16, v25, v8);
LABEL_15:
  *(_WORD *)&v16[v8] = 45;
  v26 = *(char *)(v13 + 23);
  if (v26 >= 0)
    v27 = (const std::string::value_type *)v13;
  else
    v27 = *(const std::string::value_type **)v13;
  if (v26 >= 0)
    v28 = *(unsigned __int8 *)(v13 + 23);
  else
    v28 = *(_QWORD *)(v13 + 8);
  v29 = std::string::append((std::string *)__dst, v27, v28);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v67 = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>((_QWORD *)(v15 + 216), (uint64_t)__p))
  {
    _ZNSt3__115allocate_sharedB8ne180100IN7cxxopts6values14standard_valueIfEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__dst);
    v65 = *(_OWORD *)__dst;
    if (!*(_BYTE *)(v11 + 24))
      goto LABEL_32;
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, __n128))(**(_QWORD **)__dst + 80))(&v63, *(_QWORD *)__dst, v11, *(__n128 *)__dst);
    v31 = v64;
    if (!v64)
      goto LABEL_32;
    p_shared_owners = (unint64_t *)&v64->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
      if (!*(_BYTE *)(v10 + 24))
        goto LABEL_39;
    }
    else
    {
LABEL_32:
      if (!*(_BYTE *)(v10 + 24))
        goto LABEL_39;
    }
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)v65 + 88))(&v61, v65, v10);
    v34 = v62;
    if (v62)
    {
      v35 = (unint64_t *)&v62->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
LABEL_39:
    if (*(char *)(v14 + 23) < 0)
      std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)v14, *(_QWORD *)(v14 + 8));
    else
      v60 = *(std::string *)v14;
    *(_OWORD *)&__dst[8] = *(_OWORD *)&v60.__r_.__value_.__l.__data_;
    *(_QWORD *)&__dst[23] = *(std::string::size_type *)((char *)&v60.__r_.__value_.__r.__words[1] + 7);
    *(_QWORD *)__dst = v15;
    v70 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
    v59 = v65;
    memset(&v60, 0, sizeof(v60));
    if (*((_QWORD *)&v65 + 1))
    {
      v37 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    v58 = 0;
    LOBYTE(v57) = 0;
    cxxopts::OptionAdder::operator()((uint64_t)__dst, (uint64_t)__p, a7, (std::string::size_type *)&v59, (uint64_t)&v57);
    if (v58 < 0)
    {
      operator delete(v57);
      v39 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
      if (!*((_QWORD *)&v59 + 1))
        goto LABEL_52;
    }
    else
    {
      v39 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
      if (!*((_QWORD *)&v59 + 1))
        goto LABEL_52;
    }
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
      if ((v70 & 0x80000000) == 0)
      {
LABEL_53:
        if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_54;
        goto LABEL_58;
      }
LABEL_57:
      operator delete(*(void **)&__dst[8]);
      if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_54:
        *(_DWORD *)__dst = v12;
        __dst[4] = 0;
        __dst[5] = *(_BYTE *)(v11 + 24);
        if ((*(char *)(v14 + 23) & 0x80000000) == 0)
        {
LABEL_55:
          v55 = *(std::string *)v14;
          goto LABEL_60;
        }
LABEL_59:
        std::string::__init_copy_ctor_external(&v55, *(const std::string::value_type **)v14, *(_QWORD *)(v14 + 8));
LABEL_60:
        if (*(char *)(v13 + 23) < 0)
          std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)v13, *(_QWORD *)(v13 + 8));
        else
          v56 = *(std::string *)v13;
        v71[0] = 0;
        v42 = (char *)operator new(0x38uLL);
        v43 = v42;
        *(_QWORD *)v42 = &unk_1E2DB21B8;
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external((std::string *)(v42 + 8), v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
        else
          *(std::string *)(v42 + 8) = v55;
        v44 = (std::string *)(v43 + 32);
        if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v44, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&v44->__r_.__value_.__l.__data_ = *(_OWORD *)&v56.__r_.__value_.__l.__data_;
          *((_QWORD *)v43 + 6) = *((_QWORD *)&v56.__r_.__value_.__l + 2);
        }
        v45 = &__dst[8];
        v71[0] = v43;
        v68 = __p;
        v47 = std::__hash_table<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v15 + 216, (uint64_t)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v68)+ 9;
        v46 = (uint64_t *)*v47;
        *((_DWORD *)v47 - 8) = *(_DWORD *)__dst;
        *((_WORD *)v47 - 14) = *(_WORD *)&__dst[4];
        *v47 = 0;
        if (v46 == v47 - 3)
        {
          v48 = 4;
          v46 = v47 - 3;
        }
        else
        {
          if (!v46)
            goto LABEL_74;
          v48 = 5;
        }
        (*(void (**)(void))(*v46 + 8 * v48))();
LABEL_74:
        if (v71[0])
        {
          if ((_BYTE *)v71[0] == &__dst[8])
          {
            *v47 = (uint64_t)(v47 - 3);
            (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)&__dst[8] + 24))(&__dst[8], v47 - 3);
LABEL_79:
            if ((_BYTE *)v71[0] == &__dst[8])
            {
              v49 = 4;
            }
            else
            {
              if (!v71[0])
                goto LABEL_84;
              v49 = 5;
              v45 = (_QWORD *)v71[0];
            }
            (*(void (**)(_QWORD *))(*v45 + 8 * v49))(v45);
LABEL_84:
            if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v56.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_86:
                v50 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
                if (!*((_QWORD *)&v65 + 1))
                  goto LABEL_24;
                goto LABEL_90;
              }
            }
            else if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_86;
            }
            operator delete(v55.__r_.__value_.__l.__data_);
            v50 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
            if (!*((_QWORD *)&v65 + 1))
              goto LABEL_24;
LABEL_90:
            v51 = (unint64_t *)&v50->__shared_owners_;
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
            goto LABEL_24;
          }
          *v47 = v71[0];
          v47 = v71;
        }
        *v47 = 0;
        goto LABEL_79;
      }
LABEL_58:
      operator delete(v60.__r_.__value_.__l.__data_);
      *(_DWORD *)__dst = v12;
      __dst[4] = 0;
      __dst[5] = *(_BYTE *)(v11 + 24);
      if ((*(char *)(v14 + 23) & 0x80000000) == 0)
        goto LABEL_55;
      goto LABEL_59;
    }
LABEL_52:
    if ((v70 & 0x80000000) == 0)
      goto LABEL_53;
    goto LABEL_57;
  }
LABEL_24:
  if (SHIBYTE(v67) < 0)
    operator delete(__p[0]);
}

void sub_1910E3C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  size_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v23;
  unint64_t v24;
  const std::string::value_type *v25;
  int v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  char *v42;
  char *v43;
  std::string *v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::string v55;
  std::string v56;
  void *v57;
  char v58;
  __int128 v59;
  std::string v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  __int128 v65;
  void *__p[2];
  std::string::size_type v67;
  void **v68;
  _BYTE __dst[31];
  char v70;
  _QWORD v71[4];

  v71[2] = *MEMORY[0x1E0C80C00];
  v7 = *(char *)(a2 + 23);
  if (v7 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = v8 + 1;
  if (v8 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = a6;
  v11 = a5;
  v12 = a4;
  v13 = a3;
  v14 = a2;
  v15 = a1;
  if (v9 >= 0x17)
  {
    v17 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v17 = v9 | 7;
    v23 = v17 + 1;
    v16 = operator new(v17 + 1);
    v24 = v23 | 0x8000000000000000;
    v12 = a4;
    v11 = a5;
    v10 = a6;
    v15 = a1;
    v13 = a3;
    v14 = a2;
    *(_QWORD *)&__dst[8] = v8 + 1;
    *(_QWORD *)&__dst[16] = v24;
    *(_QWORD *)__dst = v16;
  }
  else
  {
    memset(__dst, 0, 24);
    v16 = __dst;
    __dst[23] = v8 + 1;
    if (!v8)
      goto LABEL_15;
  }
  if (v7 >= 0)
    v25 = (const std::string::value_type *)v14;
  else
    v25 = *(const std::string::value_type **)v14;
  memmove(v16, v25, v8);
LABEL_15:
  *(_WORD *)&v16[v8] = 45;
  v26 = *(char *)(v13 + 23);
  if (v26 >= 0)
    v27 = (const std::string::value_type *)v13;
  else
    v27 = *(const std::string::value_type **)v13;
  if (v26 >= 0)
    v28 = *(unsigned __int8 *)(v13 + 23);
  else
    v28 = *(_QWORD *)(v13 + 8);
  v29 = std::string::append((std::string *)__dst, v27, v28);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v67 = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>((_QWORD *)(v15 + 216), (uint64_t)__p))
  {
    _ZNSt3__115allocate_sharedB8ne180100IN7cxxopts6values14standard_valueINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS7_ISA_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__dst);
    v65 = *(_OWORD *)__dst;
    if (!*(_BYTE *)(v11 + 24))
      goto LABEL_32;
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, __n128))(**(_QWORD **)__dst + 80))(&v63, *(_QWORD *)__dst, v11, *(__n128 *)__dst);
    v31 = v64;
    if (!v64)
      goto LABEL_32;
    p_shared_owners = (unint64_t *)&v64->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
      if (!*(_BYTE *)(v10 + 24))
        goto LABEL_39;
    }
    else
    {
LABEL_32:
      if (!*(_BYTE *)(v10 + 24))
        goto LABEL_39;
    }
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)v65 + 88))(&v61, v65, v10);
    v34 = v62;
    if (v62)
    {
      v35 = (unint64_t *)&v62->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
LABEL_39:
    if (*(char *)(v14 + 23) < 0)
      std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)v14, *(_QWORD *)(v14 + 8));
    else
      v60 = *(std::string *)v14;
    *(_OWORD *)&__dst[8] = *(_OWORD *)&v60.__r_.__value_.__l.__data_;
    *(_QWORD *)&__dst[23] = *(std::string::size_type *)((char *)&v60.__r_.__value_.__r.__words[1] + 7);
    *(_QWORD *)__dst = v15;
    v70 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
    v59 = v65;
    memset(&v60, 0, sizeof(v60));
    if (*((_QWORD *)&v65 + 1))
    {
      v37 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    v58 = 0;
    LOBYTE(v57) = 0;
    cxxopts::OptionAdder::operator()((uint64_t)__dst, (uint64_t)__p, a7, (std::string::size_type *)&v59, (uint64_t)&v57);
    if (v58 < 0)
    {
      operator delete(v57);
      v39 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
      if (!*((_QWORD *)&v59 + 1))
        goto LABEL_52;
    }
    else
    {
      v39 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
      if (!*((_QWORD *)&v59 + 1))
        goto LABEL_52;
    }
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
      if ((v70 & 0x80000000) == 0)
      {
LABEL_53:
        if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_54;
        goto LABEL_58;
      }
LABEL_57:
      operator delete(*(void **)&__dst[8]);
      if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_54:
        *(_DWORD *)__dst = v12;
        __dst[4] = 0;
        __dst[5] = *(_BYTE *)(v11 + 24);
        if ((*(char *)(v14 + 23) & 0x80000000) == 0)
        {
LABEL_55:
          v55 = *(std::string *)v14;
          goto LABEL_60;
        }
LABEL_59:
        std::string::__init_copy_ctor_external(&v55, *(const std::string::value_type **)v14, *(_QWORD *)(v14 + 8));
LABEL_60:
        if (*(char *)(v13 + 23) < 0)
          std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)v13, *(_QWORD *)(v13 + 8));
        else
          v56 = *(std::string *)v13;
        v71[0] = 0;
        v42 = (char *)operator new(0x38uLL);
        v43 = v42;
        *(_QWORD *)v42 = &unk_1E2DB2108;
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external((std::string *)(v42 + 8), v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
        else
          *(std::string *)(v42 + 8) = v55;
        v44 = (std::string *)(v43 + 32);
        if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v44, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&v44->__r_.__value_.__l.__data_ = *(_OWORD *)&v56.__r_.__value_.__l.__data_;
          *((_QWORD *)v43 + 6) = *((_QWORD *)&v56.__r_.__value_.__l + 2);
        }
        v45 = &__dst[8];
        v71[0] = v43;
        v68 = __p;
        v47 = std::__hash_table<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v15 + 216, (uint64_t)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v68)+ 9;
        v46 = (uint64_t *)*v47;
        *((_DWORD *)v47 - 8) = *(_DWORD *)__dst;
        *((_WORD *)v47 - 14) = *(_WORD *)&__dst[4];
        *v47 = 0;
        if (v46 == v47 - 3)
        {
          v48 = 4;
          v46 = v47 - 3;
        }
        else
        {
          if (!v46)
            goto LABEL_74;
          v48 = 5;
        }
        (*(void (**)(void))(*v46 + 8 * v48))();
LABEL_74:
        if (v71[0])
        {
          if ((_BYTE *)v71[0] == &__dst[8])
          {
            *v47 = (uint64_t)(v47 - 3);
            (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)&__dst[8] + 24))(&__dst[8], v47 - 3);
LABEL_79:
            if ((_BYTE *)v71[0] == &__dst[8])
            {
              v49 = 4;
            }
            else
            {
              if (!v71[0])
                goto LABEL_84;
              v49 = 5;
              v45 = (_QWORD *)v71[0];
            }
            (*(void (**)(_QWORD *))(*v45 + 8 * v49))(v45);
LABEL_84:
            if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v56.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_86:
                v50 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
                if (!*((_QWORD *)&v65 + 1))
                  goto LABEL_24;
                goto LABEL_90;
              }
            }
            else if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_86;
            }
            operator delete(v55.__r_.__value_.__l.__data_);
            v50 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
            if (!*((_QWORD *)&v65 + 1))
              goto LABEL_24;
LABEL_90:
            v51 = (unint64_t *)&v50->__shared_owners_;
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
            goto LABEL_24;
          }
          *v47 = v71[0];
          v47 = v71;
        }
        *v47 = 0;
        goto LABEL_79;
      }
LABEL_58:
      operator delete(v60.__r_.__value_.__l.__data_);
      *(_DWORD *)__dst = v12;
      __dst[4] = 0;
      __dst[5] = *(_BYTE *)(v11 + 24);
      if ((*(char *)(v14 + 23) & 0x80000000) == 0)
        goto LABEL_55;
      goto LABEL_59;
    }
LABEL_52:
    if ((v70 & 0x80000000) == 0)
      goto LABEL_53;
    goto LABEL_57;
  }
LABEL_24:
  if (SHIBYTE(v67) < 0)
    operator delete(__p[0]);
}

void sub_1910E43D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t cxxopts::OptionAdder::operator()(uint64_t a1, uint64_t a2, uint64_t a3, std::string::size_type *a4, uint64_t a5)
{
  char *v10;
  size_t v11;
  int v12;
  int v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  unsigned __int8 *v17;
  _BYTE *v18;
  int v19;
  _QWORD *v20;
  _BYTE *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v25;
  uint64_t v26;
  std::string::size_type v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  void *exception;
  void *v39;
  void *__p[2];
  uint64_t v41;
  std::string::size_type v42;
  std::__shared_weak_count *v43;
  std::string v44;
  void *v45[2];
  char v46;
  void *v47;
  char v48;
  __int128 v49;
  _BYTE v50[25];
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  std::locale v59;
  std::__shared_weak_count *v60;

  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v59, "(([[:alnum:]]),)?[ ]*([[:alnum:]][-_[:alnum:]]*)?", 0);
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v49 = 0u;
  *(_OWORD *)v50 = 0u;
  if (*(char *)(a2 + 23) >= 0)
    v10 = (char *)a2;
  else
    v10 = *(char **)a2;
  *(_OWORD *)&v50[9] = 0uLL;
  v11 = strlen(v10);
  v12 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)&v59, (std::sub_match<const char *> *)v10, (std::sub_match<const char *> *)&v10[v11], (std::vector<std::csub_match> *)&v49, 4160);
  if (v56)
    v13 = v12;
  else
    v13 = 0;
  if (v13 == 1)
  {
    *((_QWORD *)&v49 + 1) = v49;
LABEL_71:
    exception = __cxa_allocate_exception(0x20uLL);
    cxxopts::invalid_option_format_error::invalid_option_format_error((uint64_t)exception, a2);
  }
  if (*((_QWORD *)&v49 + 1) == (_QWORD)v49)
    goto LABEL_71;
  v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v49 + 1) - v49) >> 3);
  if (v14 <= 3)
    v15 = &v50[8];
  else
    v15 = (_QWORD *)(v49 + 72);
  if (v14 <= 2)
    v16 = (uint64_t *)&v50[8];
  else
    v16 = (uint64_t *)(v49 + 48);
  v17 = (unsigned __int8 *)(v49 + 64);
  v18 = &v50[24];
  if (v14 <= 2)
    v17 = &v50[24];
  v19 = *v17;
  if (!v19)
    goto LABEL_26;
  v20 = &v50[16];
  if (v14 > 2)
    v20 = (_QWORD *)(v49 + 56);
  if (*v20 == *v16)
  {
LABEL_26:
    v21 = (_BYTE *)(v49 + 88);
    if (v14 <= 3)
      v21 = &v50[24];
    if (!*v21)
      goto LABEL_72;
    v22 = (_QWORD *)(v49 + 80);
    if (v14 <= 3)
      v22 = &v50[16];
    if (*v22 == *v15)
      goto LABEL_72;
  }
  if (v14 > 3)
    v18 = (_BYTE *)(v49 + 88);
  if (*v18)
  {
    v23 = (_QWORD *)(v49 + 80);
    if (v14 <= 3)
      v23 = &v50[16];
    if (v19 && *v23 - *v15 == 1)
    {
      v25 = (_QWORD *)(v49 + 56);
      if (v14 <= 2)
        v25 = &v50[16];
      if (*v25 != *v16)
      {
LABEL_72:
        v39 = __cxa_allocate_exception(0x20uLL);
        cxxopts::invalid_option_format_error::invalid_option_format_error((uint64_t)v39, a2);
      }
    }
  }
  cxxopts::OptionAdder::operator()(std::string const&,std::string const&,std::shared_ptr<cxxopts::Value const>,std::string)::{lambda(std::sub_match<char const*> const&,std::sub_match<char const*> const&)#1}::operator()(v16, (uint64_t)v15, (uint64_t)v45);
  v26 = *(_QWORD *)a1;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v44 = *(std::string *)a3;
  v27 = a4[1];
  v42 = *a4;
  v43 = (std::__shared_weak_count *)v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  *(_OWORD *)__p = *(_OWORD *)a5;
  v41 = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = 0;
  cxxopts::Options::add_option(v26, (const void **)(a1 + 8), (uint64_t)v45, (uint64_t)&v47, &v44, &v42, (uint64_t)__p);
  if (SHIBYTE(v41) < 0)
  {
    operator delete(__p[0]);
    v30 = v43;
    if (!v43)
      goto LABEL_53;
  }
  else
  {
    v30 = v43;
    if (!v43)
      goto LABEL_53;
  }
  p_shared_owners = (unint64_t *)&v30->__shared_owners_;
  do
    v32 = __ldaxr(p_shared_owners);
  while (__stlxr(v32 - 1, p_shared_owners));
  if (v32)
  {
LABEL_53:
    if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_54;
    goto LABEL_65;
  }
  ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
  std::__shared_weak_count::__release_weak(v30);
  if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_54:
    if ((v48 & 0x80000000) == 0)
      goto LABEL_55;
    goto LABEL_66;
  }
LABEL_65:
  operator delete(v44.__r_.__value_.__l.__data_);
  if ((v48 & 0x80000000) == 0)
  {
LABEL_55:
    if ((v46 & 0x80000000) == 0)
      goto LABEL_56;
LABEL_67:
    operator delete(v45[0]);
    v33 = (void *)v49;
    if (!(_QWORD)v49)
      goto LABEL_58;
    goto LABEL_57;
  }
LABEL_66:
  operator delete(v47);
  if (v46 < 0)
    goto LABEL_67;
LABEL_56:
  v33 = (void *)v49;
  if ((_QWORD)v49)
  {
LABEL_57:
    *((_QWORD *)&v49 + 1) = v33;
    operator delete(v33);
  }
LABEL_58:
  v34 = v60;
  if (v60)
  {
    v35 = (unint64_t *)&v60->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  std::locale::~locale(&v59);
  return a1;
}

void sub_1910E4908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  void *v32;
  uint64_t v33;

  __cxa_free_exception(v32);
  if (__p)
    operator delete(__p);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)(v33 - 128));
  _Unwind_Resume(a1);
}

void _ZNSt3__115allocate_sharedB8ne180100IN7cxxopts6values14standard_valueIbEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(uint64_t *a1@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  uint64_t v4;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;

  v2 = (std::__shared_weak_count *)operator new(0x80uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB6348;
  v4 = cxxopts::values::standard_value<BOOL>::standard_value((uint64_t)&v2[1]);
  *a1 = v4;
  a1[1] = (uint64_t)v2;
  shared_weak_owners = (std::__shared_weak_count *)v2[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      return;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    v2[1].__shared_owners_ = v4;
    v2[1].__shared_weak_owners_ = (uint64_t)v2;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v10 = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v2[1].__shared_owners_ = v4;
    v2[1].__shared_weak_owners_ = (uint64_t)v2;
  }
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1910E4A88(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cxxopts::values::standard_value<BOOL>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB6348;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cxxopts::values::standard_value<BOOL>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB6348;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<cxxopts::values::standard_value<BOOL>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t cxxopts::values::standard_value<BOOL>::standard_value(uint64_t a1)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E2D5C998;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = operator new(0x20uLL);
  v2[2] = 0;
  *v2 = &unk_1E2DC2860;
  v2[1] = 0;
  *(_QWORD *)(a1 + 32) = v2;
  *((_BYTE *)v2 + 24) = 0;
  v2 += 3;
  *(_QWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 40) = v2;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = &unk_1E2D5CB78;
  *(_WORD *)(a1 + 48) = 1;
  MEMORY[0x19401C808](a1 + 56, "false");
  *(_BYTE *)(a1 + 49) = 1;
  MEMORY[0x19401C808](a1 + 80, "true");
  return a1;
}

void sub_1910E4BAC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 103) < 0)
    operator delete(*(void **)(v1 + 80));
  cxxopts::values::standard_value<BOOL>::standard_value(v1, (void **)(v1 + 56), (std::__shared_weak_count **)(v1 + 32));
  _Unwind_Resume(a1);
}

uint64_t cxxopts::values::standard_value<BOOL>::~standard_value(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)a1 = &unk_1E2D5C998;
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
    {
LABEL_3:
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (!v2)
        goto LABEL_10;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2)
    goto LABEL_10;
LABEL_7:
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return a1;
    goto LABEL_11;
  }
LABEL_10:
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_11:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void cxxopts::values::standard_value<BOOL>::~standard_value(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)a1 = &unk_1E2D5C998;
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
    {
LABEL_3:
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (!v2)
        goto LABEL_10;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2)
    goto LABEL_10;
LABEL_7:
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      goto LABEL_14;
LABEL_11:
    std::__shared_weak_count::__release_weak(v5);
LABEL_14:
    JUMPOUT(0x19401CD90);
  }
LABEL_10:
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  goto LABEL_11;
}

double cxxopts::values::standard_value<BOOL>::clone@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<cxxopts::values::standard_value<BOOL>,std::allocator<cxxopts::values::standard_value<BOOL>>,cxxopts::values::standard_value<BOOL> const&,void>(a1, (uint64_t *)v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void cxxopts::values::abstract_value<BOOL>::parse(uint64_t a1, uint64_t a2)
{
  cxxopts::values::parse_value(a2, *(_BYTE **)(a1 + 40));
}

void cxxopts::values::abstract_value<BOOL>::parse(uint64_t a1)
{
  cxxopts::values::parse_value(a1 + 56, *(_BYTE **)(a1 + 40));
}

uint64_t cxxopts::values::abstract_value<BOOL>::has_default(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

uint64_t cxxopts::values::abstract_value<BOOL>::has_implicit(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 49);
}

void cxxopts::values::abstract_value<BOOL>::get_default_value(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 56), *(_QWORD *)(a1 + 64));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 56);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 72);
  }
}

void cxxopts::values::abstract_value<BOOL>::get_implicit_value(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 103) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 80), *(_QWORD *)(a1 + 88));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 80);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 96);
  }
}

std::__shared_weak_count *cxxopts::values::abstract_value<BOOL>::default_value@<X0>(uint64_t a1@<X0>, const std::string *a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *result;

  *(_BYTE *)(a1 + 48) = 1;
  std::string::operator=((std::string *)(a1 + 56), a2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  *a3 = *(_QWORD *)(a1 + 8);
  if (!v5)
  {
    a3[1] = 0;
LABEL_5:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  result = std::__shared_weak_count::lock(v5);
  a3[1] = result;
  if (!result)
    goto LABEL_5;
  return result;
}

std::__shared_weak_count *cxxopts::values::abstract_value<BOOL>::implicit_value@<X0>(uint64_t a1@<X0>, const std::string *a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *result;

  *(_BYTE *)(a1 + 49) = 1;
  std::string::operator=((std::string *)(a1 + 80), a2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  *a3 = *(_QWORD *)(a1 + 8);
  if (!v5)
  {
    a3[1] = 0;
LABEL_5:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  result = std::__shared_weak_count::lock(v5);
  a3[1] = result;
  if (!result)
    goto LABEL_5;
  return result;
}

void std::__shared_ptr_emplace<BOOL>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2860;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BOOL>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2860;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::allocate_shared[abi:ne180100]<cxxopts::values::standard_value<BOOL>,std::allocator<cxxopts::values::standard_value<BOOL>>,cxxopts::values::standard_value<BOOL> const&,void>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  uint64_t v6;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;

  v4 = (std::__shared_weak_count *)operator new(0x80uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB6348;
  v6 = cxxopts::values::abstract_value<BOOL>::abstract_value((uint64_t)&v4[1], a1);
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2D5CB78;
  *a2 = v6;
  a2[1] = (uint64_t)v4;
  shared_weak_owners = (std::__shared_weak_count *)v4[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      return;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    v4[1].__shared_owners_ = v6;
    v4[1].__shared_weak_owners_ = (uint64_t)v4;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v12 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v4[1].__shared_owners_ = v6;
    v4[1].__shared_weak_owners_ = (uint64_t)v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_1910E5020(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t cxxopts::values::abstract_value<BOOL>::abstract_value(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  _QWORD *v5;
  char *v6;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E2D5C998;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  v4 = (std::string *)(a1 + 56);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  if (*(_QWORD *)(a2 + 24))
  {
    v5 = operator new(0x20uLL);
    v5[2] = 0;
    *v5 = &unk_1E2DC2860;
    v5[1] = 0;
    *((_BYTE *)v5 + 24) = 0;
    v6 = (char *)(v5 + 3);
    *(_QWORD *)(a1 + 24) = v5 + 3;
    *(_QWORD *)(a1 + 32) = v5;
  }
  else
  {
    v6 = *(char **)(a2 + 40);
  }
  *(_QWORD *)(a1 + 40) = v6;
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  std::string::operator=(v4, (const std::string *)(a2 + 56));
  std::string::operator=((std::string *)(a1 + 80), (const std::string *)(a2 + 80));
  return a1;
}

void sub_1910E5104(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  std::__shared_weak_count *v5;

  if (*(char *)(v1 + 79) < 0)
  {
    operator delete(*v3);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v2);
    v5 = *(std::__shared_weak_count **)(v1 + 16);
    if (!v5)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v2);
    v5 = *(std::__shared_weak_count **)(v1 + 16);
    if (!v5)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(a1);
}

void cxxopts::values::parse_value(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  std::sub_match<const char *> *v5;
  std::sub_match<std::__wrap_iter<const char *>> *v6;
  int v7;
  int v8;
  std::sub_match<std::__wrap_iter<const char *>> *begin;
  uint64_t v10;
  std::sub_match<const char *> *v11;
  std::sub_match<std::__wrap_iter<const char *>> *v12;
  int v13;
  int v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *exception;
  std::vector<std::ssub_match> v22[2];
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  std::locale v31;
  std::__shared_weak_count *v32;
  std::locale v33;
  std::__shared_weak_count *v34;
  std::vector<std::csub_match> v35[2];
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;

  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v33, "(t|T)(rue)?", 0);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v31, "((f|F)(alse)?)?", 0);
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  memset(v22, 0, 41);
  v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = (std::sub_match<const char *> *)a1;
  else
    v5 = *(std::sub_match<const char *> **)a1;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a1 + 8);
  v6 = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v5 + v4);
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  memset(v35, 0, 41);
  v7 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)&v33, v5, (std::sub_match<const char *> *)((char *)v5 + v4), v35, 4160);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v22, (uint64_t)v5, v6, (uint64_t *)v35, 0);
  if (v35[0].__begin_)
  {
    v35[0].__end_ = v35[0].__begin_;
    operator delete(v35[0].__begin_);
  }
  if (v28)
    v8 = v7;
  else
    v8 = 0;
  if (v8 == 1)
  {
    v22[0].__end_ = v22[0].__begin_;
  }
  else
  {
    begin = v22[0].__begin_;
    if (v22[0].__end_ != v22[0].__begin_)
    {
      *a2 = 1;
      if (!begin)
        goto LABEL_30;
      goto LABEL_29;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + 23);
  if ((v10 & 0x80u) == 0)
    v11 = (std::sub_match<const char *> *)a1;
  else
    v11 = *(std::sub_match<const char *> **)a1;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a1 + 8);
  v12 = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v11 + v10);
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  memset(v35, 0, 41);
  v13 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)&v31, v11, (std::sub_match<const char *> *)((char *)v11 + v10), v35, 4160);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v22, (uint64_t)v11, v12, (uint64_t *)v35, 0);
  if (v35[0].__begin_)
  {
    v35[0].__end_ = v35[0].__begin_;
    operator delete(v35[0].__begin_);
  }
  if (v28)
    v14 = v13;
  else
    v14 = 0;
  if (v14 == 1)
  {
    v22[0].__end_ = v22[0].__begin_;
LABEL_42:
    exception = __cxa_allocate_exception(0x20uLL);
    cxxopts::argument_incorrect_type::argument_incorrect_type((uint64_t)exception, a1);
  }
  begin = v22[0].__begin_;
  if (v22[0].__end_ == v22[0].__begin_)
    goto LABEL_42;
  *a2 = 0;
  if (begin)
  {
LABEL_29:
    v22[0].__end_ = begin;
    operator delete(begin);
  }
LABEL_30:
  v15 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  std::locale::~locale(&v31);
  v18 = v34;
  if (v34)
  {
    v19 = (unint64_t *)&v34->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  std::locale::~locale(&v33);
}

void sub_1910E5430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::locale a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::locale a31)
{
  if (__p)
    operator delete(__p);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a23);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a31);
  _Unwind_Resume(a1);
}

void cxxopts::argument_incorrect_type::~argument_incorrect_type(std::exception *this)
{
  std::exception *v1;

  v1 = this;
  this->__vftable = (std::exception_vtbl *)&unk_1E2D5C768;
  if (SHIBYTE(this[3].__vftable) < 0)
  {
    operator delete(this[1].__vftable);
    this = v1;
  }
  std::exception::~exception(this);
}

{
  this->__vftable = (std::exception_vtbl *)&unk_1E2D5C768;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
  JUMPOUT(0x19401CD90);
}

uint64_t cxxopts::argument_incorrect_type::argument_incorrect_type(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  std::string::size_type size;
  std::string::value_type *v15;
  int v16;
  void *__p;
  char v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;
  _DWORD v24[2];

  *((_BYTE *)&v20.__r_.__value_.__s + 23) = 3;
  LODWORD(v20.__r_.__value_.__l.__data_) = 9994466;
  v4 = std::string::insert(&v20, 0, "Argument ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a2;
  else
    v7 = *(const std::string::value_type **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::string::append(&v21, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v19 = 3;
  LODWORD(__p) = 10060002;
  v11 = std::string::append(&v22, (const std::string::value_type *)&__p, 3uLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append(&v23, " failed to parse");
  v15 = (std::string::value_type *)v13->__r_.__value_.__r.__words[0];
  size = v13->__r_.__value_.__l.__size_;
  v24[0] = v13->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v24 + 3) = *(_DWORD *)((char *)&v13->__r_.__value_.__r.__words[2] + 3);
  v16 = SHIBYTE(v13->__r_.__value_.__r.__words[2]);
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)a1 = &unk_1E2D5C768;
  if ((v16 & 0x80000000) == 0)
  {
    *(_QWORD *)(a1 + 16) = size;
    *(_DWORD *)(a1 + 24) = v24[0];
    *(_DWORD *)(a1 + 27) = *(_DWORD *)((char *)v24 + 3);
    *(_BYTE *)(a1 + 31) = v16;
    *(_QWORD *)a1 = &unk_1E2D5C7E0;
    *(_QWORD *)(a1 + 8) = v15;
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
  std::string::__init_copy_ctor_external((std::string *)(a1 + 8), v15, size);
  *(_QWORD *)a1 = &unk_1E2D5C7E0;
  operator delete(v15);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
LABEL_9:
    operator delete(v23.__r_.__value_.__l.__data_);
LABEL_10:
  if (v19 < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_13;
LABEL_19:
      operator delete(v21.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_14;
LABEL_20:
      operator delete(v20.__r_.__value_.__l.__data_);
      goto LABEL_14;
    }
  }
  else if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_19;
LABEL_13:
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_20;
LABEL_14:
  *(_QWORD *)a1 = &unk_1E2D5C808;
  return a1;
}

void sub_1910E56F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::exception *v33;
  void *v34;
  uint64_t v35;

  std::exception::~exception(v33);
  operator delete(v34);
  if (*(char *)(v35 - 41) < 0)
  {
    operator delete(*(void **)(v35 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_11:
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t cxxopts::OptionException::what(cxxopts::OptionException *this)
{
  uint64_t result;

  result = (uint64_t)this + 8;
  if (*((char *)this + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE4F80] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E28], MEMORY[0x1E0DE43F0]);
}

double cxxopts::OptionAdder::operator()(std::string const&,std::string const&,std::shared_ptr<cxxopts::Value const>,std::string)::{lambda(std::sub_match<char const*> const&,std::sub_match<char const*> const&)#1}::operator()@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  int v5;
  char *v6;
  char *v7;
  __int128 *i;
  char v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  __int128 *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  __int128 *v17;
  char *v18;
  __int128 *v19;
  _OWORD *v20;
  __int128 *v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 *v33;
  _OWORD *v34;
  __int128 *v35;
  unint64_t v36;
  __int128 v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _OWORD *v42;
  __int128 *v43;
  unint64_t v44;
  __int128 v45;
  char v46;
  double result;
  __int128 v48;
  unint64_t v49;
  __int128 v50;
  unint64_t v51;

  v5 = *(unsigned __int8 *)(a2 + 16);
  if (!*(_BYTE *)(a2 + 16) || (v6 = *(char **)a2, v7 = *(char **)(a2 + 8), &v7[-*(_QWORD *)a2] != (char *)1))
  {
    if (!*((_BYTE *)a1 + 16))
    {
      v50 = 0uLL;
      v51 = 0;
      if (!v5)
        goto LABEL_21;
LABEL_29:
      v28 = *(char **)a2;
      v27 = *(char **)(a2 + 8);
      v29 = (unint64_t)&v27[-*(_QWORD *)a2];
      if (v29 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v29 > 0x16)
      {
        v30 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v29 | 7) != 0x17)
          v30 = v29 | 7;
        v31 = v30 + 1;
        v13 = (__int128 *)operator new(v30 + 1);
        *((_QWORD *)&v48 + 1) = v29;
        v49 = v31 | 0x8000000000000000;
        *(_QWORD *)&v48 = v13;
        if (v28 == v27)
          goto LABEL_54;
      }
      else
      {
        HIBYTE(v49) = (_BYTE)v27 - *(_BYTE *)a2;
        v13 = &v48;
        if (v28 == v27)
          goto LABEL_54;
      }
      if (v29 < 0x20 || (unint64_t)((char *)v13 - v28) < 0x20)
      {
        v32 = v28;
        v33 = v13;
      }
      else
      {
        v32 = &v28[v29 & 0xFFFFFFFFFFFFFFE0];
        v33 = (__int128 *)((char *)v13 + (v29 & 0xFFFFFFFFFFFFFFE0));
        v34 = v13 + 1;
        v35 = (__int128 *)(v28 + 16);
        v36 = v29 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v37 = *v35;
          *(v34 - 1) = *(v35 - 1);
          *v34 = v37;
          v34 += 2;
          v35 += 2;
          v36 -= 32;
        }
        while (v36);
        if (v29 == (v29 & 0x7FFFFFFFFFFFFFE0))
          goto LABEL_57;
      }
      do
      {
        v38 = *v32++;
        *(_BYTE *)v33 = v38;
        v33 = (__int128 *)((char *)v33 + 1);
      }
      while (v32 != v27);
      goto LABEL_57;
    }
    v15 = *a1;
    v14 = (char *)a1[1];
    v16 = (unint64_t)&v14[-*a1];
    if (v16 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v16 > 0x16)
    {
      v24 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v24 = v16 | 7;
      v25 = v24 + 1;
      v17 = (__int128 *)operator new(v24 + 1);
      *((_QWORD *)&v50 + 1) = v16;
      v51 = v25 | 0x8000000000000000;
      *(_QWORD *)&v50 = v17;
      if ((char *)v15 != v14)
      {
LABEL_14:
        if (v16 < 0x20 || (unint64_t)v17 - v15 < 0x20)
        {
          v18 = (char *)v15;
          v19 = v17;
        }
        else
        {
          v18 = (char *)(v15 + (v16 & 0xFFFFFFFFFFFFFFE0));
          v19 = (__int128 *)((char *)v17 + (v16 & 0xFFFFFFFFFFFFFFE0));
          v20 = v17 + 1;
          v21 = (__int128 *)(v15 + 16);
          v22 = v16 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v23 = *v21;
            *(v20 - 1) = *(v21 - 1);
            *v20 = v23;
            v20 += 2;
            v21 += 2;
            v22 -= 32;
          }
          while (v22);
          if (v16 == (v16 & 0x7FFFFFFFFFFFFFE0))
          {
LABEL_28:
            *(_BYTE *)v19 = 0;
            if (!*(_BYTE *)(a2 + 16))
              goto LABEL_21;
            goto LABEL_29;
          }
        }
        do
        {
          v26 = *v18++;
          *(_BYTE *)v19 = v26;
          v19 = (__int128 *)((char *)v19 + 1);
        }
        while (v18 != v14);
        goto LABEL_28;
      }
    }
    else
    {
      HIBYTE(v51) = (_BYTE)v14 - *(_BYTE *)a1;
      v17 = &v50;
      if ((char *)v15 != v14)
        goto LABEL_14;
    }
    v19 = v17;
    goto LABEL_28;
  }
  HIBYTE(v51) = 1;
  for (i = &v50; v6 != v7; i = (__int128 *)((char *)i + 1))
  {
    v9 = *v6++;
    *(_BYTE *)i = v9;
  }
  *(_BYTE *)i = 0;
  if (*((_BYTE *)a1 + 16))
  {
    v11 = *a1;
    v10 = (char *)a1[1];
    v12 = (unint64_t)&v10[-*a1];
    if (v12 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v12 > 0x16)
    {
      v39 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17)
        v39 = v12 | 7;
      v40 = v39 + 1;
      v13 = (__int128 *)operator new(v39 + 1);
      *((_QWORD *)&v48 + 1) = v12;
      v49 = v40 | 0x8000000000000000;
      *(_QWORD *)&v48 = v13;
      if ((char *)v11 == v10)
        goto LABEL_54;
    }
    else
    {
      HIBYTE(v49) = (_BYTE)v10 - *(_BYTE *)a1;
      v13 = &v48;
      if ((char *)v11 == v10)
      {
LABEL_54:
        *(_BYTE *)v13 = 0;
        goto LABEL_58;
      }
    }
    if (v12 < 0x20 || (unint64_t)v13 - v11 < 0x20)
    {
      v41 = (char *)v11;
      v33 = v13;
    }
    else
    {
      v41 = (char *)(v11 + (v12 & 0xFFFFFFFFFFFFFFE0));
      v33 = (__int128 *)((char *)v13 + (v12 & 0xFFFFFFFFFFFFFFE0));
      v42 = v13 + 1;
      v43 = (__int128 *)(v11 + 16);
      v44 = v12 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v45 = *v43;
        *(v42 - 1) = *(v43 - 1);
        *v42 = v45;
        v42 += 2;
        v43 += 2;
        v44 -= 32;
      }
      while (v44);
      if (v12 == (v12 & 0x7FFFFFFFFFFFFFE0))
        goto LABEL_57;
    }
    do
    {
      v46 = *v41++;
      *(_BYTE *)v33 = v46;
      v33 = (__int128 *)((char *)v33 + 1);
    }
    while (v41 != v10);
LABEL_57:
    *(_BYTE *)v33 = 0;
    goto LABEL_58;
  }
LABEL_21:
  v48 = 0uLL;
  v49 = 0;
LABEL_58:
  *(_OWORD *)a3 = v50;
  *(_QWORD *)(a3 + 16) = v51;
  result = *(double *)&v48;
  *(_OWORD *)(a3 + 24) = v48;
  *(_QWORD *)(a3 + 40) = v49;
  return result;
}

void sub_1910E5BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void cxxopts::Options::add_option(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, std::string *a5, std::string::size_type *a6, uint64_t a7)
{
  std::string *v13;
  uint64_t v14;
  unint64_t *p_size;
  unint64_t v16;
  char v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  char v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t **v29;
  uint64_t *v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  void *exception;
  void *v42;
  std::string v43;
  std::string v44;
  std::string v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  char v49;
  __int128 v50;
  uint64_t v51;
  void *__p[2];
  uint64_t v53;
  __int16 v54;
  std::string *v55;
  std::__shared_weak_count *v56;
  std::string *v57;
  std::__shared_weak_count *v58;
  std::string *v59;
  std::__shared_weak_count *v60;
  std::string v61;

  v61 = *a5;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  a5->__r_.__value_.__r.__words[0] = 0;
  v13 = (std::string *)operator new(0x78uLL);
  std::__shared_ptr_emplace<cxxopts::OptionDetails>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::string&,std::shared_ptr<cxxopts::Value const> &,std::allocator<cxxopts::OptionDetails>,0>(v13, (__int128 *)a3, (__int128 *)a4, (__int128 *)&v61, a6);
  v59 = v13 + 1;
  v60 = (std::__shared_weak_count *)v13;
  v14 = *(unsigned __int8 *)(a3 + 23);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a3 + 8);
  if (!v14)
    goto LABEL_11;
  v57 = v13 + 1;
  v58 = (std::__shared_weak_count *)v13;
  p_size = &v13->__r_.__value_.__l.__size_;
  do
    v16 = __ldxr(p_size);
  while (__stxr(v16 + 1, p_size));
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::string const&,std::shared_ptr<MIL::IRFunction>&>(*(_QWORD *)(a1 + 104), a3, a3, &v57);
  if ((v17 & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    cxxopts::option_exists_error::option_exists_error((uint64_t)exception, a3);
  }
  v18 = v58;
  if (!v58)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v58->__shared_owners_;
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    v28 = *(unsigned __int8 *)(a4 + 23);
    if ((v28 & 0x80u) != 0)
      v28 = *(_QWORD *)(a4 + 8);
    if (v28)
      goto LABEL_14;
  }
  else
  {
LABEL_11:
    v21 = *(unsigned __int8 *)(a4 + 23);
    if ((v21 & 0x80u) != 0)
      v21 = *(_QWORD *)(a4 + 8);
    if (v21)
    {
LABEL_14:
      v55 = v59;
      v56 = v60;
      if (v60)
      {
        v22 = (unint64_t *)&v60->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::string const&,std::shared_ptr<MIL::IRFunction>&>(*(_QWORD *)(a1 + 104), a4, a4, &v55);
      if ((v24 & 1) == 0)
      {
        v42 = __cxa_allocate_exception(0x20uLL);
        cxxopts::option_exists_error::option_exists_error((uint64_t)v42, a4);
      }
      v25 = v56;
      if (v56)
      {
        v26 = (unint64_t *)&v56->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
  }
  v43.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  v29 = std::__tree<std::__value_type<std::string,cxxopts::HelpGroupDetails>,std::__map_value_compare<std::string,std::__value_type<std::string,cxxopts::HelpGroupDetails>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,cxxopts::HelpGroupDetails>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 192), a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v43);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v43 = *(std::string *)a3;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v44 = *(std::string *)a4;
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v45, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
  else
    v45 = v61;
  v46 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)*a6 + 40))(*a6);
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a6 + 64))(&v47);
  v49 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)*a6 + 56))(*a6);
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a6 + 72))(&v50);
  *(_OWORD *)__p = *(_OWORD *)a7;
  v53 = *(_QWORD *)(a7 + 16);
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(a7 + 16) = 0;
  *(_QWORD *)a7 = 0;
  LOBYTE(v54) = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)*a6 + 48))(*a6);
  HIBYTE(v54) = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)*a6 + 96))(*a6);
  v30 = v29[14];
  if (v30 >= v29[15])
  {
    v37 = std::vector<cxxopts::HelpOptionDetails>::__emplace_back_slow_path<cxxopts::HelpOptionDetails>((void **)v29 + 13, (uint64_t)&v43);
  }
  else
  {
    v31 = *(_OWORD *)&v43.__r_.__value_.__l.__data_;
    v30[2] = v43.__r_.__value_.__r.__words[2];
    *(_OWORD *)v30 = v31;
    memset(&v43, 0, sizeof(v43));
    v32 = v44.__r_.__value_.__r.__words[2];
    *(_OWORD *)(v30 + 3) = *(_OWORD *)&v44.__r_.__value_.__l.__data_;
    v30[5] = v32;
    memset(&v44, 0, sizeof(v44));
    v33 = *(_OWORD *)&v45.__r_.__value_.__l.__data_;
    v30[8] = v45.__r_.__value_.__r.__words[2];
    *((_OWORD *)v30 + 3) = v33;
    memset(&v45, 0, sizeof(v45));
    *((_BYTE *)v30 + 72) = v46;
    v34 = v47;
    v30[12] = v48;
    *((_OWORD *)v30 + 5) = v34;
    v48 = 0;
    v47 = 0uLL;
    *((_BYTE *)v30 + 104) = v49;
    v35 = v50;
    v30[16] = v51;
    *((_OWORD *)v30 + 7) = v35;
    v51 = 0;
    v50 = 0uLL;
    v36 = *(_OWORD *)__p;
    v30[19] = v53;
    *(_OWORD *)(v30 + 17) = v36;
    __p[1] = 0;
    v53 = 0;
    __p[0] = 0;
    *((_WORD *)v30 + 80) = v54;
    v37 = (char *)(v30 + 21);
  }
  v29[14] = (uint64_t *)v37;
  if (SHIBYTE(v53) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v51) & 0x80000000) == 0)
    {
LABEL_40:
      if ((SHIBYTE(v48) & 0x80000000) == 0)
        goto LABEL_41;
      goto LABEL_48;
    }
  }
  else if ((SHIBYTE(v51) & 0x80000000) == 0)
  {
    goto LABEL_40;
  }
  operator delete((void *)v50);
  if ((SHIBYTE(v48) & 0x80000000) == 0)
  {
LABEL_41:
    if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_42;
    goto LABEL_49;
  }
LABEL_48:
  operator delete((void *)v47);
  if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_42:
    if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_50;
  }
LABEL_49:
  operator delete(v45.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_43:
    if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_44;
LABEL_51:
    operator delete(v43.__r_.__value_.__l.__data_);
    v38 = v60;
    if (!v60)
      goto LABEL_55;
    goto LABEL_52;
  }
LABEL_50:
  operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_51;
LABEL_44:
  v38 = v60;
  if (!v60)
    goto LABEL_55;
LABEL_52:
  v39 = (unint64_t *)&v38->__shared_owners_;
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (v40)
  {
LABEL_55:
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_56;
  }
  ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
  std::__shared_weak_count::__release_weak(v38);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
LABEL_56:
    operator delete(v61.__r_.__value_.__l.__data_);
}

void sub_1910E6118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  void *v46;
  uint64_t v47;

  __cxa_free_exception(v46);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v47 - 160);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v47 - 128);
  if (*(char *)(v47 - 89) < 0)
    operator delete(*(void **)(v47 - 112));
  _Unwind_Resume(a1);
}

void sub_1910E6230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    JUMPOUT(0x1910E623CLL);
  JUMPOUT(0x1910E61CCLL);
}

void sub_1910E6250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    JUMPOUT(0x1910E625CLL);
  JUMPOUT(0x1910E61D4);
}

uint64_t cxxopts::invalid_option_format_error::invalid_option_format_error(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  std::string::size_type size;
  std::string::value_type *v13;
  int v14;
  void *__p;
  char v17;
  std::string v18;
  std::string v19;
  std::string v20;
  _DWORD v21[2];

  *((_BYTE *)&v18.__r_.__value_.__s + 23) = 3;
  LODWORD(v18.__r_.__value_.__l.__data_) = 9994466;
  v4 = std::string::insert(&v18, 0, "Invalid option format ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a2;
  else
    v7 = *(const std::string::value_type **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::string::append(&v19, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v17 = 3;
  LODWORD(__p) = 10060002;
  v11 = std::string::append(&v20, (const std::string::value_type *)&__p, 3uLL);
  v13 = (std::string::value_type *)v11->__r_.__value_.__r.__words[0];
  size = v11->__r_.__value_.__l.__size_;
  v21[0] = v11->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v21 + 3) = *(_DWORD *)((char *)&v11->__r_.__value_.__r.__words[2] + 3);
  v14 = SHIBYTE(v11->__r_.__value_.__r.__words[2]);
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)a1 = &unk_1E2D5C768;
  if ((v14 & 0x80000000) == 0)
  {
    *(_QWORD *)(a1 + 16) = size;
    *(_DWORD *)(a1 + 24) = v21[0];
    *(_DWORD *)(a1 + 27) = *(_DWORD *)((char *)v21 + 3);
    *(_BYTE *)(a1 + 31) = v14;
    *(_QWORD *)a1 = &unk_1E2D5C790;
    *(_QWORD *)(a1 + 8) = v13;
    if ((v17 & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
  std::string::__init_copy_ctor_external((std::string *)(a1 + 8), v13, size);
  *(_QWORD *)a1 = &unk_1E2D5C790;
  operator delete(v13);
  if (v17 < 0)
LABEL_9:
    operator delete(__p);
LABEL_10:
  if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_12;
LABEL_17:
    operator delete(v19.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_13;
LABEL_18:
    operator delete(v18.__r_.__value_.__l.__data_);
    goto LABEL_13;
  }
  operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_17;
LABEL_12:
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_18;
LABEL_13:
  *(_QWORD *)a1 = &unk_1E2D5C880;
  return a1;
}

void sub_1910E6440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::exception *v26;
  void *v27;
  uint64_t v28;

  std::exception::~exception(v26);
  operator delete(v27);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v28 - 41) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a26 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(char *)(v28 - 41) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v28 - 64));
  if ((a26 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a20 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0)
LABEL_5:
    _Unwind_Resume(a1);
LABEL_9:
  operator delete(a15);
  _Unwind_Resume(a1);
}

void cxxopts::HelpOptionDetails::~HelpOptionDetails(void **this)
{
  if (*((char *)this + 159) < 0)
  {
    operator delete(this[17]);
    if ((*((char *)this + 135) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 103) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((char *)this + 135) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[14]);
  if ((*((char *)this + 103) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*((char *)this + 71) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(this[10]);
  if ((*((char *)this + 71) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*((char *)this + 47) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(this[6]);
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*((char *)this + 23) & 0x80000000) == 0)
      return;
LABEL_13:
    operator delete(*this);
    return;
  }
LABEL_12:
  operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    goto LABEL_13;
}

std::string *std::__shared_ptr_emplace<cxxopts::OptionDetails>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::string&,std::shared_ptr<cxxopts::Value const> &,std::allocator<cxxopts::OptionDetails>,0>(std::string *a1, __int128 *a2, __int128 *a3, __int128 *a4, std::string::size_type *a5)
{
  std::string *v6;
  std::string::size_type v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::string::size_type v14;
  std::__shared_weak_count *v15;

  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E2DB62D8;
  a1->__r_.__value_.__l.__size_ = 0;
  v6 = a1 + 1;
  v7 = a5[1];
  v14 = *a5;
  v15 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  cxxopts::OptionDetails::OptionDetails(v6, a2, a3, a4, &v14);
  v10 = v15;
  if (!v15)
    return a1;
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
    return a1;
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return a1;
}

void sub_1910E664C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;

  if (a10)
    std::__shared_ptr_emplace<cxxopts::OptionDetails>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::string&,std::shared_ptr<cxxopts::Value const> &,std::allocator<cxxopts::OptionDetails>,0>(a10);
  std::__shared_weak_count::~__shared_weak_count(v10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cxxopts::OptionDetails>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB62D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cxxopts::OptionDetails>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB62D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<cxxopts::OptionDetails>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_6:
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
        goto LABEL_7;
      goto LABEL_11;
    }
  }
  else
  {
LABEL_5:
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
      goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 72));
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
LABEL_7:
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      return;
LABEL_12:
    operator delete(*(void **)(a1 + 24));
    return;
  }
LABEL_11:
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_12;
}

std::string *cxxopts::OptionDetails::OptionDetails(std::string *this, __int128 *a2, __int128 *a3, __int128 *a4, std::string::size_type *a5)
{
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string::size_type v14;
  unint64_t *v15;
  unint64_t v16;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v10 = this + 1;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v9 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v9;
    v10 = this + 1;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      v11 = *a3;
      v10->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
LABEL_6:
  v12 = this + 2;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v13 = *a4;
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  }
  v14 = a5[1];
  this[3].__r_.__value_.__r.__words[0] = *a5;
  this[3].__r_.__value_.__l.__size_ = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  LODWORD(this[3].__r_.__value_.__r.__words[2]) = 0;
  return this;
}

void sub_1910E6844(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
  {
    operator delete(*v2);
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t cxxopts::option_exists_error::option_exists_error(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  std::string::size_type size;
  std::string::value_type *v15;
  int v16;
  void *__p;
  char v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;
  _DWORD v24[2];

  *((_BYTE *)&v20.__r_.__value_.__s + 23) = 3;
  LODWORD(v20.__r_.__value_.__l.__data_) = 9994466;
  v4 = std::string::insert(&v20, 0, "Option ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a2;
  else
    v7 = *(const std::string::value_type **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::string::append(&v21, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v19 = 3;
  LODWORD(__p) = 10060002;
  v11 = std::string::append(&v22, (const std::string::value_type *)&__p, 3uLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append(&v23, " already exists");
  v15 = (std::string::value_type *)v13->__r_.__value_.__r.__words[0];
  size = v13->__r_.__value_.__l.__size_;
  v24[0] = v13->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v24 + 3) = *(_DWORD *)((char *)&v13->__r_.__value_.__r.__words[2] + 3);
  v16 = SHIBYTE(v13->__r_.__value_.__r.__words[2]);
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)a1 = &unk_1E2D5C768;
  if ((v16 & 0x80000000) == 0)
  {
    *(_QWORD *)(a1 + 16) = size;
    *(_DWORD *)(a1 + 24) = v24[0];
    *(_DWORD *)(a1 + 27) = *(_DWORD *)((char *)v24 + 3);
    *(_BYTE *)(a1 + 31) = v16;
    *(_QWORD *)a1 = &unk_1E2D5C790;
    *(_QWORD *)(a1 + 8) = v15;
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
  std::string::__init_copy_ctor_external((std::string *)(a1 + 8), v15, size);
  *(_QWORD *)a1 = &unk_1E2D5C790;
  operator delete(v15);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
LABEL_9:
    operator delete(v23.__r_.__value_.__l.__data_);
LABEL_10:
  if (v19 < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_13;
LABEL_19:
      operator delete(v21.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_14;
LABEL_20:
      operator delete(v20.__r_.__value_.__l.__data_);
      goto LABEL_14;
    }
  }
  else if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_19;
LABEL_13:
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_20;
LABEL_14:
  *(_QWORD *)a1 = &unk_1E2D5C7B8;
  return a1;
}

void sub_1910E6A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::exception *v33;
  void *v34;
  uint64_t v35;

  std::exception::~exception(v33);
  operator delete(v34);
  if (*(char *)(v35 - 41) < 0)
  {
    operator delete(*(void **)(v35 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_11:
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,cxxopts::HelpGroupDetails>,std::__map_value_compare<std::string,std::__value_type<std::string,cxxopts::HelpGroupDetails>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,cxxopts::HelpGroupDetails>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  size_t v9;
  const void *v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  char *v23;
  std::string *v24;
  __int128 *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t *v28;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    if (v8 >= 0)
      v10 = a2;
    else
      v10 = *a2;
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v6;
        v14 = (const void *)v6[4];
        v12 = v6 + 4;
        v13 = v14;
        v15 = *((char *)v12 + 23);
        if (v15 >= 0)
          v16 = *((unsigned __int8 *)v12 + 23);
        else
          v16 = v12[1];
        if (v15 >= 0)
          v17 = v12;
        else
          v17 = v13;
        if (v16 >= v9)
          v18 = v9;
        else
          v18 = v16;
        v19 = memcmp(v10, v17, v18);
        v20 = v9 < v16;
        if (v19)
          v20 = v19 < 0;
        if (!v20)
          break;
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_27;
      }
      v21 = memcmp(v17, v10, v18);
      v22 = v16 < v9;
      if (v21)
        v22 = v21 < 0;
      if (!v22)
        return v11;
      v6 = v11[1];
      if (!v6)
      {
        v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v11 = a1 + 1;
LABEL_27:
    v23 = (char *)operator new(0x80uLL);
    v24 = (std::string *)(v23 + 32);
    v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)v25, *((_QWORD *)v25 + 1));
    }
    else
    {
      v26 = *v25;
      *((_QWORD *)v23 + 6) = *((_QWORD *)v25 + 2);
      *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v26;
    }
    *((_QWORD *)v23 + 15) = 0;
    *(_OWORD *)(v23 + 104) = 0u;
    *(_OWORD *)(v23 + 88) = 0u;
    *(_OWORD *)(v23 + 72) = 0u;
    *(_OWORD *)(v23 + 56) = 0u;
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = 0;
    *((_QWORD *)v23 + 2) = v11;
    *v7 = (uint64_t *)v23;
    v27 = (uint64_t *)**a1;
    v28 = (uint64_t *)v23;
    if (v27)
    {
      *a1 = v27;
      v28 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_1910E6CFC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,cxxopts::HelpGroupDetails>,0>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 80);
    v4 = *(void **)(a1 + 72);
    if (v3 != v2)
    {
      do
      {
        v3 -= 168;
        std::allocator<cxxopts::HelpOptionDetails>::destroy[abi:ne180100](a1 + 88, v3);
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 72);
    }
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
    {
LABEL_8:
      if ((*(char *)(a1 + 23) & 0x80000000) == 0)
        return;
LABEL_12:
      operator delete(*(void **)a1);
      return;
    }
  }
  else if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    goto LABEL_12;
}

void std::allocator<cxxopts::HelpOptionDetails>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 159) < 0)
  {
    operator delete(*(void **)(a2 + 136));
    if ((*(char *)(a2 + 135) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a2 + 103) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(char *)(a2 + 135) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a2 + 112));
  if ((*(char *)(a2 + 103) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a2 + 71) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*(void **)(a2 + 80));
  if ((*(char *)(a2 + 71) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(a2 + 47) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*(void **)(a2 + 48));
  if ((*(char *)(a2 + 47) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      return;
LABEL_13:
    operator delete(*(void **)a2);
    return;
  }
LABEL_12:
  operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    goto LABEL_13;
}

char *std::vector<cxxopts::HelpOptionDetails>::__emplace_back_slow_path<cxxopts::HelpOptionDetails>(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char *v28;

  v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
  v4 = 0xCF3CF3CF3CF3CF3DLL * (v3 >> 3) + 1;
  if (v4 > 0x186186186186186)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  if (0x9E79E79E79E79E7ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x9E79E79E79E79E7ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xCF3CF3CF3CF3CF3DLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0xC30C30C30C30C3)
    v5 = 0x186186186186186;
  else
    v5 = v4;
  if (v5 > 0x186186186186186)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v7 = 168 * v5;
  v8 = (char *)operator new(168 * v5);
  v9 = &v8[8 * (v3 >> 3)];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  v10 = &v8[v7];
  *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v11 = &v8[v3];
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v11 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *((_QWORD *)v11 + 8) = *(_QWORD *)(a2 + 64);
  *((_OWORD *)v11 + 3) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v11[72] = *(_BYTE *)(a2 + 72);
  v12 = *(_OWORD *)(a2 + 80);
  *((_QWORD *)v11 + 12) = *(_QWORD *)(a2 + 96);
  *((_OWORD *)v11 + 5) = v12;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v11[104] = *(_BYTE *)(a2 + 104);
  v13 = *(_OWORD *)(a2 + 112);
  *((_QWORD *)v11 + 16) = *(_QWORD *)(a2 + 128);
  *((_OWORD *)v11 + 7) = v13;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  v14 = *(_OWORD *)(a2 + 136);
  *((_QWORD *)v11 + 19) = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(v11 + 136) = v14;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *((_WORD *)v11 + 80) = *(_WORD *)(a2 + 160);
  v15 = v9 + 168;
  v16 = (char *)*a1;
  v17 = (char *)a1[1];
  if (v17 == *a1)
  {
    *a1 = v9;
    a1[1] = v15;
    a1[2] = v10;
    if (!v17)
      return v15;
    goto LABEL_15;
  }
  v18 = 0;
  do
  {
    v19 = &v9[v18];
    v20 = &v17[v18];
    v21 = *(_OWORD *)&v17[v18 - 168];
    *((_QWORD *)v19 - 19) = *(_QWORD *)&v17[v18 - 152];
    *(_OWORD *)(v19 - 168) = v21;
    *((_QWORD *)v20 - 20) = 0;
    *((_QWORD *)v20 - 19) = 0;
    v22 = *(_OWORD *)&v17[v18 - 144];
    v23 = *(_QWORD *)&v17[v18 - 128];
    *((_QWORD *)v20 - 21) = 0;
    *((_QWORD *)v19 - 16) = v23;
    *((_OWORD *)v19 - 9) = v22;
    *((_QWORD *)v20 - 17) = 0;
    *((_QWORD *)v20 - 16) = 0;
    *((_QWORD *)v20 - 18) = 0;
    v24 = *(_OWORD *)&v17[v18 - 120];
    *((_QWORD *)v19 - 13) = *(_QWORD *)&v17[v18 - 104];
    *(_OWORD *)(v19 - 120) = v24;
    *((_QWORD *)v20 - 14) = 0;
    *((_QWORD *)v20 - 13) = 0;
    *((_QWORD *)v20 - 15) = 0;
    *(v19 - 96) = v17[v18 - 96];
    v25 = *(_OWORD *)&v17[v18 - 88];
    *((_QWORD *)v19 - 9) = *(_QWORD *)&v17[v18 - 72];
    *(_OWORD *)(v19 - 88) = v25;
    *((_QWORD *)v20 - 10) = 0;
    *((_QWORD *)v20 - 9) = 0;
    *((_QWORD *)v20 - 11) = 0;
    *(v19 - 64) = v17[v18 - 64];
    v26 = *(_OWORD *)&v17[v18 - 56];
    *((_QWORD *)v19 - 5) = *(_QWORD *)&v17[v18 - 40];
    *(_OWORD *)(v19 - 56) = v26;
    *((_QWORD *)v20 - 6) = 0;
    *((_QWORD *)v20 - 5) = 0;
    *((_QWORD *)v20 - 7) = 0;
    v27 = *(_OWORD *)&v17[v18 - 32];
    *((_QWORD *)v19 - 2) = *(_QWORD *)&v17[v18 - 16];
    *((_OWORD *)v19 - 2) = v27;
    *((_QWORD *)v20 - 3) = 0;
    *((_QWORD *)v20 - 2) = 0;
    *((_QWORD *)v20 - 4) = 0;
    *((_WORD *)v19 - 4) = *(_WORD *)&v17[v18 - 8];
    v18 -= 168;
  }
  while (&v17[v18] != v16);
  v28 = (char *)*a1;
  v17 = (char *)a1[1];
  *a1 = &v9[v18];
  a1[1] = v15;
  a1[2] = v10;
  if (v17 != v28)
  {
    do
    {
      v17 -= 168;
      std::allocator<cxxopts::HelpOptionDetails>::destroy[abi:ne180100]((uint64_t)(a1 + 2), (uint64_t)v17);
    }
    while (v17 != v28);
    v17 = v28;
  }
  if (v17)
LABEL_15:
    operator delete(v17);
  return v15;
}

uint64_t std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E2DB2160;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E2DB2160;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_6:
      JUMPOUT(0x19401CD90);
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 8));
  goto LABEL_6;
}

char *std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1)
{
  char *v2;
  char *v3;
  std::string *v4;

  v2 = (char *)operator new(0x38uLL);
  v3 = v2;
  *(_QWORD *)v2 = &unk_1E2DB2160;
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v2 + 8), *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
    *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  }
  v4 = (std::string *)(v3 + 32);
  if (*(char *)(a1 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 32);
    *((_QWORD *)v3 + 6) = *(_QWORD *)(a1 + 48);
  }
  return v3;
}

void sub_1910E7294(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;

  if (v1[31] < 0)
  {
    operator delete(*v2);
    operator delete(v1);
    _Unwind_Resume(a1);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;

  *a2 = &unk_1E2DB2160;
  v4 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
    v6 = (std::string *)(a2 + 4);
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 8);
    a2[3] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
    v6 = (std::string *)(a2 + 4);
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      v7 = *(_OWORD *)(a1 + 32);
      v6->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 48);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
      return;
    }
  }
  std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_1910E7374(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::destroy(uint64_t a1)
{
  if ((*(char *)(a1 + 55) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(*(void **)(a1 + 8));
    return;
  }
  operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    goto LABEL_5;
}

void std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 55) < 0)
  {
    operator delete(__p[4]);
    if ((*((char *)__p + 31) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(__p[1]);
    operator delete(__p);
    return;
  }
  if (*((char *)__p + 31) < 0)
    goto LABEL_6;
LABEL_3:
  operator delete(__p);
}

uint64_t *std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::operator()(uint64_t a1, uint64_t a2, const void **a3)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t *result;
  _BYTE v7[24];
  int v8;
  char v9;

  v4 = (__int128 *)(a1 + 8);
  v5 = (__int128 *)(a1 + 32);
  v7[0] = *(_BYTE *)cxxopts::OptionValue::as<BOOL>(a3);
  v8 = 0;
  result = Espresso::AOT::AOTCompilerOptions::SetOption(a2, v4, v5, (uint64_t)v7);
  if (v8 != -1)
    return (uint64_t *)((uint64_t (*)(char *, _BYTE *))off_1E2DD14D0[v8])(&v9, v7);
  return result;
}

void sub_1910E74B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_1E2DD14D0[a13])(v13 - 33, &a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A88F4ALL)
    return a1 + 8;
  if (((v3 & 0x8000000191A88F4ALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A88F4ALL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A88F4ALL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<BOOL>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target_type()
{
}

uint64_t cxxopts::OptionValue::as<BOOL>(const void **a1)
{
  const void *v1;
  _QWORD *v2;
  std::logic_error *exception;

  v1 = *a1;
  if (!v1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "No value");
    __cxa_throw(exception, (struct type_info *)off_1E2D35300, MEMORY[0x1E0DE42C0]);
  }
  if (!v2)
    __cxa_bad_cast();
  if (v2[5])
    return v2[5];
  else
    return v2[3];
}

void sub_1910E7604(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::domain_error::domain_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void **v21;
  unsigned __int8 *j;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void **v26;
  unsigned __int8 *i;
  char *v28;
  std::string *v29;
  __int128 *v30;
  __int128 v31;
  float v32;
  float v33;
  _QWORD *v34;
  _QWORD *v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  size_t prime;
  int8x8_t v40;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD v47[2];
  char v48;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v47, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v23 = v15[1];
            if (v23 == v11)
            {
              v24 = *((unsigned __int8 *)v15 + 39);
              if ((v24 & 0x80u) == 0)
                v25 = *((unsigned __int8 *)v15 + 39);
              else
                v25 = v15[3];
              if (v25 == v17)
              {
                v26 = (const void **)(v15 + 2);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  for (i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    v26 = (const void **)((char *)v26 + 1);
                    if (!--v24)
                      return v15;
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              v21 = (const void **)(v15 + 2);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                for (j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  v21 = (const void **)((char *)v21 + 1);
                  if (!--v19)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v28 = (char *)operator new(0x50uLL);
  v47[0] = v28;
  v47[1] = a1 + 16;
  v48 = 0;
  *(_QWORD *)v28 = 0;
  *((_QWORD *)v28 + 1) = v11;
  v29 = (std::string *)(v28 + 16);
  v30 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v29, *(const std::string::value_type **)v30, *((_QWORD *)v30 + 1));
  }
  else
  {
    v31 = *v30;
    *((_QWORD *)v28 + 4) = *((_QWORD *)v30 + 2);
    *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v31;
  }
  *((_QWORD *)v28 + 9) = 0;
  *(_OWORD *)(v28 + 56) = 0u;
  *(_OWORD *)(v28 + 40) = 0u;
  v48 = 1;
  v32 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v33 = *(float *)(a1 + 32);
  if (!v12 || (float)(v33 * (float)v12) < v32)
  {
    v36 = 1;
    if (v12 >= 3)
      v36 = (v12 & (v12 - 1)) != 0;
    v37 = v36 | (2 * v12);
    v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38)
      prime = v38;
    else
      prime = v37;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v40)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v40)
    {
      v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v40 < 3uLL || (v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        v41 = std::__next_prime(v41);
      }
      else
      {
        v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2)
          v41 = v43;
      }
      if (prime <= v41)
        prime = v41;
      if (prime < *(_QWORD *)&v40)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v44 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v44 & v11;
      v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v44 & v11));
      v35 = (_QWORD *)v47[0];
      if (v34)
        goto LABEL_57;
    }
LABEL_81:
    *v35 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v47[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v47[0])
    {
      v45 = *(_QWORD *)(*(_QWORD *)v47[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v45 >= v12)
          v45 %= v12;
      }
      else
      {
        v45 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_92;
  }
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v35 = (_QWORD *)v47[0];
  if (!v34)
    goto LABEL_81;
LABEL_57:
  *v35 = *v34;
  *v34 = v47[0];
LABEL_92:
  v15 = (uint64_t *)v47[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_1910E7A94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1910E7AA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (!*((_BYTE *)a1 + 16))
    {
LABEL_10:
      operator delete((void *)v2);
      return a1;
    }
    v3 = *(_QWORD **)(v2 + 72);
    if (v3 == (_QWORD *)(v2 + 48))
    {
      v4 = 4;
      v3 = (_QWORD *)(v2 + 48);
    }
    else
    {
      if (!v3)
        goto LABEL_8;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
    if (*(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    goto LABEL_10;
  }
  return a1;
}

void _ZNSt3__115allocate_sharedB8ne180100IN7cxxopts6values14standard_valueIiEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(_QWORD *a1@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  char *v4;
  unint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)operator new(0x80uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB63B8;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2D5CA88;
  *(_OWORD *)&v2[1].__shared_owners_ = 0u;
  v2[2].std::__shared_count = 0u;
  *(_OWORD *)&v2[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[3].__shared_owners_ = 0u;
  v2[4].std::__shared_count = 0u;
  *(_OWORD *)&v2[4].__shared_weak_owners_ = 0u;
  v4 = (char *)operator new(0x20uLL);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_1E2DC28D0;
  *((_QWORD *)v4 + 1) = 0;
  *((_DWORD *)v4 + 6) = 0;
  v2[2].__vftable = (std::__shared_weak_count_vtbl *)(v4 + 24);
  v2[2].__shared_owners_ = (uint64_t)v4;
  v2[2].__shared_weak_owners_ = (uint64_t)(v4 + 24);
  LOWORD(v2[3].__vftable) = 0;
  *(_OWORD *)&v2[3].__shared_owners_ = 0u;
  v2[4].std::__shared_count = 0u;
  *(_OWORD *)&v2[4].__shared_weak_owners_ = 0u;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2D5CC68;
  *a1 = v2 + 1;
  a1[1] = v2;
  do
    v5 = __ldxr(p_shared_owners);
  while (__stxr(v5 + 1, p_shared_owners));
  p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  v2[1].__shared_owners_ = (uint64_t)&v2[1];
  v2[1].__shared_weak_owners_ = (uint64_t)v2;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1910E7C5C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cxxopts::values::standard_value<int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB63B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cxxopts::values::standard_value<int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB63B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<cxxopts::values::standard_value<int>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t cxxopts::values::standard_value<int>::~standard_value(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)a1 = &unk_1E2D5CA88;
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
    {
LABEL_3:
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (!v2)
        goto LABEL_10;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2)
    goto LABEL_10;
LABEL_7:
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return a1;
    goto LABEL_11;
  }
LABEL_10:
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_11:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void cxxopts::values::standard_value<int>::~standard_value(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)a1 = &unk_1E2D5CA88;
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
    {
LABEL_3:
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (!v2)
        goto LABEL_10;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2)
    goto LABEL_10;
LABEL_7:
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      goto LABEL_14;
LABEL_11:
    std::__shared_weak_count::__release_weak(v5);
LABEL_14:
    JUMPOUT(0x19401CD90);
  }
LABEL_10:
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  goto LABEL_11;
}

double cxxopts::values::standard_value<int>::clone@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<cxxopts::values::standard_value<int>,std::allocator<cxxopts::values::standard_value<int>>,cxxopts::values::standard_value<int> const&,void>(a1, (uint64_t *)v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void cxxopts::values::abstract_value<int>::parse(uint64_t a1, uint64_t a2)
{
  cxxopts::values::integer_parser<int>(a2, *(int **)(a1 + 40));
}

void cxxopts::values::abstract_value<int>::parse(uint64_t a1)
{
  cxxopts::values::integer_parser<int>(a1 + 56, *(int **)(a1 + 40));
}

void std::__shared_ptr_emplace<int>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC28D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<int>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC28D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::allocate_shared[abi:ne180100]<cxxopts::values::standard_value<int>,std::allocator<cxxopts::values::standard_value<int>>,cxxopts::values::standard_value<int> const&,void>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  uint64_t v6;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;

  v4 = (std::__shared_weak_count *)operator new(0x80uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB63B8;
  v6 = cxxopts::values::abstract_value<int>::abstract_value((uint64_t)&v4[1], a1);
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2D5CC68;
  *a2 = v6;
  a2[1] = (uint64_t)v4;
  shared_weak_owners = (std::__shared_weak_count *)v4[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      return;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    v4[1].__shared_owners_ = v6;
    v4[1].__shared_weak_owners_ = (uint64_t)v4;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v12 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v4[1].__shared_owners_ = v6;
    v4[1].__shared_weak_owners_ = (uint64_t)v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_1910E8004(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t cxxopts::values::abstract_value<int>::abstract_value(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  _QWORD *v5;
  char *v6;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E2D5CA88;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  v4 = (std::string *)(a1 + 56);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  if (*(_QWORD *)(a2 + 24))
  {
    v5 = operator new(0x20uLL);
    v5[2] = 0;
    *v5 = &unk_1E2DC28D0;
    v5[1] = 0;
    *((_DWORD *)v5 + 6) = 0;
    v6 = (char *)(v5 + 3);
    *(_QWORD *)(a1 + 24) = v5 + 3;
    *(_QWORD *)(a1 + 32) = v5;
  }
  else
  {
    v6 = *(char **)(a2 + 40);
  }
  *(_QWORD *)(a1 + 40) = v6;
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  std::string::operator=(v4, (const std::string *)(a2 + 56));
  std::string::operator=((std::string *)(a1 + 80), (const std::string *)(a2 + 80));
  return a1;
}

void sub_1910E80E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  std::__shared_weak_count *v5;

  if (*(char *)(v1 + 79) < 0)
  {
    operator delete(*v3);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v2);
    v5 = *(std::__shared_weak_count **)(v1 + 16);
    if (!v5)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v2);
    v5 = *(std::__shared_weak_count **)(v1 + 16);
    if (!v5)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(a1);
}

void cxxopts::values::integer_parser<int>(uint64_t a1, int *a2)
{
  uint64_t v4;
  std::sub_match<const char *> *v5;
  std::sub_match<std::__wrap_iter<const char *>> *v6;
  char v7;
  char v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  char *v13;
  BOOL v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  _BYTE *v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  void **v23;
  void **v24;
  _BOOL4 v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 **v31;
  unsigned __int8 *v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  void *v42;
  void *exception;
  std::locale v44[6];
  std::__shared_weak_count *v45;
  void *__p[2];
  _OWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  std::vector<std::csub_match> v56[2];
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char v63;
  uint64_t v64;

  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  *(_OWORD *)__p = 0u;
  memset(v47, 0, 25);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)v44, "(-)?(0x)?([0-9a-zA-Z]+)|((0x)?0)", 0);
  v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = (std::sub_match<const char *> *)a1;
  else
    v5 = *(std::sub_match<const char *> **)a1;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a1 + 8);
  v6 = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v5 + v4);
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  memset(v56, 0, 41);
  v7 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v44, v5, (std::sub_match<const char *> *)((char *)v5 + v4), v56, 4160);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)__p, (uint64_t)v5, v6, (uint64_t *)v56, 0);
  if (v56[0].__begin_)
  {
    v56[0].__end_ = v56[0].__begin_;
    operator delete(v56[0].__begin_);
  }
  if (v53)
    v8 = v7;
  else
    v8 = 0;
  if ((v8 & 1) != 0)
  {
    __p[1] = __p[0];
    v9 = __p[0];
  }
  else
  {
    v9 = __p[1];
  }
  v10 = v9 - (char *)__p[0];
  v11 = (char *)__p[0] + 16;
  v12 = (char *)&v47[1] + 8;
  if (v9 == __p[0])
    v11 = (char *)&v47[1] + 8;
  if (!*v11
    || ((v13 = (char *)v47 + 8, v14 = v9 == __p[0], v9 != __p[0]) ? (v15 = __p[0]) : (v15 = (_QWORD *)v47 + 1),
        !v14 ? (v16 = (char *)__p[0] + 8) : (v16 = &v47[1]),
        *v16 == *v15))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    cxxopts::argument_incorrect_type::argument_incorrect_type((uint64_t)exception, a1);
  }
  v17 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 3);
  v18 = (char *)__p[0] + 112;
  if (v17 <= 4)
    v18 = (char *)&v47[1] + 8;
  if (*v18)
  {
    v19 = (char *)__p[0] + 96;
    if (v17 <= 4)
      v19 = (char *)v47 + 8;
    v20 = *(_QWORD *)v19;
    v21 = (char *)__p[0] + 104;
    if (v17 <= 4)
      v21 = &v47[1];
    if (*v21 - v20 > 0)
    {
      *a2 = 0;
      v22 = v45;
      if (!v45)
        goto LABEL_83;
      goto LABEL_79;
    }
  }
  v23 = __p;
  if (v17 <= 1)
    v24 = __p;
  else
    v24 = (void **)__p[0];
  if (!*((_BYTE *)v24 + 40))
  {
    v25 = 0;
    if (v17 > 2)
      v12 = (char *)__p[0] + 64;
    if (*v12)
      goto LABEL_43;
LABEL_51:
    v29 = 0;
    goto LABEL_52;
  }
  if (v17 > 1)
    v23 = (void **)__p[0];
  v25 = (_BYTE *)v23[4] - (_BYTE *)v23[3] > 0;
  if (v17 > 2)
    v12 = (char *)__p[0] + 64;
  if (!*v12)
    goto LABEL_51;
LABEL_43:
  v26 = (char *)__p[0] + 48;
  if (v17 <= 2)
    v26 = (char *)v47 + 8;
  v27 = *(_QWORD *)v26;
  v28 = (char *)__p[0] + 56;
  if (v17 <= 2)
    v28 = &v47[1];
  v29 = *v28 - v27;
LABEL_52:
  if (v17 > 3)
    v13 = (char *)__p[0] + 72;
  v30 = *(unsigned __int8 **)v13;
  v31 = (unsigned __int8 **)((char *)__p[0] + 80);
  if (v17 <= 3)
    v31 = (unsigned __int8 **)&v47[1];
  v32 = *v31;
  if (v32 != v30)
  {
    if (v29 <= 0)
      v33 = 10;
    else
      v33 = 16;
    v34 = 0;
    if (v29 <= 0)
    {
      while (1)
      {
        v38 = *v30;
        if ((v38 - 48) > 9 || v34 * v33 > 47 - v38)
          break;
        v34 = v38 + v34 * v33 - 48;
        if (++v30 == v32)
          goto LABEL_75;
      }
    }
    else
    {
      while (1)
      {
        v35 = *v30;
        if (v35 - 48 >= 0xA)
        {
          if ((char)v35 <= 96)
          {
            if (v35 - 65 >= 6)
              break;
            v36 = -55;
          }
          else
          {
            if (v35 > 0x66)
              break;
            v36 = -87;
          }
        }
        else
        {
          v36 = -48;
        }
        v37 = v36 + v35;
        if (__CFADD__(v37, v34 * v33))
          break;
        v34 = v37 + v34 * v33;
        if (++v30 == v32)
          goto LABEL_75;
      }
    }
    v42 = __cxa_allocate_exception(0x20uLL);
    cxxopts::argument_incorrect_type::argument_incorrect_type((uint64_t)v42, a1);
  }
  v34 = 0;
LABEL_75:
  cxxopts::values::detail::SignedCheck<int,true>::operator()<unsigned int>((uint64_t)v56, v25, v34, a1);
  if (v25)
    v39 = -v34;
  else
    v39 = v34;
  *a2 = v39;
  v22 = v45;
  if (v45)
  {
LABEL_79:
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
LABEL_83:
  std::locale::~locale(v44);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1910E8560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)&a9);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void cxxopts::values::detail::SignedCheck<int,true>::operator()<unsigned int>(uint64_t a1, int a2, unsigned int a3, uint64_t a4)
{
  void *exception;

  if (a2)
  {
    if (a3 >= 0x80000001)
    {
LABEL_6:
      exception = __cxa_allocate_exception(0x20uLL);
      cxxopts::argument_incorrect_type::argument_incorrect_type(exception, a4);
    }
  }
  else if ((a3 & 0x80000000) != 0)
  {
    goto LABEL_6;
  }
}

void sub_1910E866C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1910E8680(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E2DB2210;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E2DB2210;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_6:
      JUMPOUT(0x19401CD90);
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 8));
  goto LABEL_6;
}

char *std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1)
{
  char *v2;
  char *v3;
  std::string *v4;

  v2 = (char *)operator new(0x38uLL);
  v3 = v2;
  *(_QWORD *)v2 = &unk_1E2DB2210;
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v2 + 8), *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
    *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  }
  v4 = (std::string *)(v3 + 32);
  if (*(char *)(a1 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 32);
    *((_QWORD *)v3 + 6) = *(_QWORD *)(a1 + 48);
  }
  return v3;
}

void sub_1910E8818(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;

  if (v1[31] < 0)
  {
    operator delete(*v2);
    operator delete(v1);
    _Unwind_Resume(a1);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;

  *a2 = &unk_1E2DB2210;
  v4 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
    v6 = (std::string *)(a2 + 4);
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 8);
    a2[3] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
    v6 = (std::string *)(a2 + 4);
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      v7 = *(_OWORD *)(a1 + 32);
      v6->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 48);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
      return;
    }
  }
  std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_1910E88F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::destroy(uint64_t a1)
{
  if ((*(char *)(a1 + 55) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(*(void **)(a1 + 8));
    return;
  }
  operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    goto LABEL_5;
}

void std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 55) < 0)
  {
    operator delete(__p[4]);
    if ((*((char *)__p + 31) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(__p[1]);
    operator delete(__p);
    return;
  }
  if (*((char *)__p + 31) < 0)
    goto LABEL_6;
LABEL_3:
  operator delete(__p);
}

uint64_t *std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::operator()(uint64_t a1, uint64_t a2, const void **a3)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t *result;
  _DWORD v7[6];
  int v8;
  char v9;

  v4 = (__int128 *)(a1 + 8);
  v5 = (__int128 *)(a1 + 32);
  v7[0] = *(_DWORD *)cxxopts::OptionValue::as<int>(a3);
  v8 = 1;
  result = Espresso::AOT::AOTCompilerOptions::SetOption(a2, v4, v5, (uint64_t)v7);
  if (v8 != -1)
    return (uint64_t *)((uint64_t (*)(char *, _DWORD *))off_1E2DD14D0[v8])(&v9, v7);
  return result;
}

void sub_1910E8A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_1E2DD14D0[a13])(v13 - 33, &a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A8921ELL)
    return a1 + 8;
  if (((v3 & 0x8000000191A8921ELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A8921ELL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A8921ELL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<int>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target_type()
{
}

uint64_t cxxopts::OptionValue::as<int>(const void **a1)
{
  const void *v1;
  _QWORD *v2;
  std::logic_error *exception;

  v1 = *a1;
  if (!v1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "No value");
    __cxa_throw(exception, (struct type_info *)off_1E2D35300, MEMORY[0x1E0DE42C0]);
  }
  if (!v2)
    __cxa_bad_cast();
  if (v2[5])
    return v2[5];
  else
    return v2[3];
}

void sub_1910E8B8C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__115allocate_sharedB8ne180100IN7cxxopts6values14standard_valueIfEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(_QWORD *a1@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  char *v4;
  unint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)operator new(0x80uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB6380;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2D5CA10;
  *(_OWORD *)&v2[1].__shared_owners_ = 0u;
  v2[2].std::__shared_count = 0u;
  *(_OWORD *)&v2[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[3].__shared_owners_ = 0u;
  v2[4].std::__shared_count = 0u;
  *(_OWORD *)&v2[4].__shared_weak_owners_ = 0u;
  v4 = (char *)operator new(0x20uLL);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_1E2DC2898;
  *((_QWORD *)v4 + 1) = 0;
  *((_DWORD *)v4 + 6) = 0;
  v2[2].__vftable = (std::__shared_weak_count_vtbl *)(v4 + 24);
  v2[2].__shared_owners_ = (uint64_t)v4;
  v2[2].__shared_weak_owners_ = (uint64_t)(v4 + 24);
  LOWORD(v2[3].__vftable) = 0;
  *(_OWORD *)&v2[3].__shared_owners_ = 0u;
  v2[4].std::__shared_count = 0u;
  *(_OWORD *)&v2[4].__shared_weak_owners_ = 0u;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2D5CBF0;
  *a1 = v2 + 1;
  a1[1] = v2;
  do
    v5 = __ldxr(p_shared_owners);
  while (__stxr(v5 + 1, p_shared_owners));
  p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  v2[1].__shared_owners_ = (uint64_t)&v2[1];
  v2[1].__shared_weak_owners_ = (uint64_t)v2;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1910E8CC0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cxxopts::values::standard_value<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB6380;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cxxopts::values::standard_value<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB6380;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<cxxopts::values::standard_value<float>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t cxxopts::values::standard_value<float>::~standard_value(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)a1 = &unk_1E2D5CA10;
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
    {
LABEL_3:
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (!v2)
        goto LABEL_10;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2)
    goto LABEL_10;
LABEL_7:
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return a1;
    goto LABEL_11;
  }
LABEL_10:
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_11:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void cxxopts::values::standard_value<float>::~standard_value(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)a1 = &unk_1E2D5CA10;
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
    {
LABEL_3:
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (!v2)
        goto LABEL_10;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2)
    goto LABEL_10;
LABEL_7:
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      goto LABEL_14;
LABEL_11:
    std::__shared_weak_count::__release_weak(v5);
LABEL_14:
    JUMPOUT(0x19401CD90);
  }
LABEL_10:
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  goto LABEL_11;
}

double cxxopts::values::standard_value<float>::clone@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<cxxopts::values::standard_value<float>,std::allocator<cxxopts::values::standard_value<float>>,cxxopts::values::standard_value<float> const&,void>(a1, (uint64_t *)v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

uint64_t cxxopts::values::abstract_value<float>::parse(uint64_t a1, uint64_t a2)
{
  return cxxopts::values::stringstream_parser<float>(a2, *(_QWORD *)(a1 + 40));
}

uint64_t cxxopts::values::abstract_value<float>::parse(uint64_t a1)
{
  return cxxopts::values::stringstream_parser<float>(a1 + 56, *(_QWORD *)(a1 + 40));
}

void std::__shared_ptr_emplace<float>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2898;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<float>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2898;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::allocate_shared[abi:ne180100]<cxxopts::values::standard_value<float>,std::allocator<cxxopts::values::standard_value<float>>,cxxopts::values::standard_value<float> const&,void>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  uint64_t v6;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;

  v4 = (std::__shared_weak_count *)operator new(0x80uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB6380;
  v6 = cxxopts::values::abstract_value<float>::abstract_value((uint64_t)&v4[1], a1);
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2D5CBF0;
  *a2 = v6;
  a2[1] = (uint64_t)v4;
  shared_weak_owners = (std::__shared_weak_count *)v4[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      return;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    v4[1].__shared_owners_ = v6;
    v4[1].__shared_weak_owners_ = (uint64_t)v4;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v12 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v4[1].__shared_owners_ = v6;
    v4[1].__shared_weak_owners_ = (uint64_t)v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_1910E9068(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t cxxopts::values::abstract_value<float>::abstract_value(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  _QWORD *v5;
  char *v6;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E2D5CA10;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  v4 = (std::string *)(a1 + 56);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  if (*(_QWORD *)(a2 + 24))
  {
    v5 = operator new(0x20uLL);
    v5[2] = 0;
    *v5 = &unk_1E2DC2898;
    v5[1] = 0;
    *((_DWORD *)v5 + 6) = 0;
    v6 = (char *)(v5 + 3);
    *(_QWORD *)(a1 + 24) = v5 + 3;
    *(_QWORD *)(a1 + 32) = v5;
  }
  else
  {
    v6 = *(char **)(a2 + 40);
  }
  *(_QWORD *)(a1 + 40) = v6;
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  std::string::operator=(v4, (const std::string *)(a2 + 56));
  std::string::operator=((std::string *)(a1 + 80), (const std::string *)(a2 + 80));
  return a1;
}

void sub_1910E914C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  std::__shared_weak_count *v5;

  if (*(char *)(v1 + 79) < 0)
  {
    operator delete(*v3);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v2);
    v5 = *(std::__shared_weak_count **)(v1 + 16);
    if (!v5)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v2);
    v5 = *(std::__shared_weak_count **)(v1 + 16);
    if (!v5)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(a1);
}

uint64_t cxxopts::values::stringstream_parser<float>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *exception;
  _QWORD v7[13];
  char v8;
  uint64_t v9;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v7, a1, 24);
  MEMORY[0x19401C910](v7, a2);
  if ((*((_BYTE *)&v7[4] + *(_QWORD *)(v7[0] - 24)) & 5) != 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    cxxopts::argument_incorrect_type::argument_incorrect_type((uint64_t)exception, a1);
  }
  v7[0] = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v7[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v7[2] = v4;
  v7[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x19401CCD0](&v9);
}

void sub_1910E92B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;

  __cxa_free_exception(v10);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_1910E92D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = MEMORY[0x1E0DE4FD0];
  v6 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v5 + 64;
  v7 = a1 + 16;
  v8 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + *(_QWORD *)(v9 - 24)) = v10;
  *(_QWORD *)(a1 + 8) = 0;
  v11 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v11, (void *)(a1 + 24));
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v12 = v8[4];
  v13 = v8[5];
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v7 + *(_QWORD *)(v12 - 24)) = v13;
  v14 = v8[1];
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + *(_QWORD *)(v14 - 24)) = v8[6];
  *(_QWORD *)a1 = v5 + 24;
  *(_QWORD *)(a1 + 128) = v6;
  *(_QWORD *)(a1 + 16) = v5 + 64;
  std::streambuf::basic_streambuf();
  v15 = MEMORY[0x1E0DE4FB8];
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 24) = v15 + 16;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = a3;
  std::stringbuf::str();
  return a1;
}

void sub_1910E9408(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 111) < 0)
    operator delete(*v3);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19401CCD0](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E2DB21B8;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E2DB21B8;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_6:
      JUMPOUT(0x19401CD90);
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 8));
  goto LABEL_6;
}

char *std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1)
{
  char *v2;
  char *v3;
  std::string *v4;

  v2 = (char *)operator new(0x38uLL);
  v3 = v2;
  *(_QWORD *)v2 = &unk_1E2DB21B8;
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v2 + 8), *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
    *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  }
  v4 = (std::string *)(v3 + 32);
  if (*(char *)(a1 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 32);
    *((_QWORD *)v3 + 6) = *(_QWORD *)(a1 + 48);
  }
  return v3;
}

void sub_1910E95E0(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;

  if (v1[31] < 0)
  {
    operator delete(*v2);
    operator delete(v1);
    _Unwind_Resume(a1);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;

  *a2 = &unk_1E2DB21B8;
  v4 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
    v6 = (std::string *)(a2 + 4);
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 8);
    a2[3] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
    v6 = (std::string *)(a2 + 4);
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      v7 = *(_OWORD *)(a1 + 32);
      v6->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 48);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
      return;
    }
  }
  std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_1910E96C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::destroy(uint64_t a1)
{
  if ((*(char *)(a1 + 55) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(*(void **)(a1 + 8));
    return;
  }
  operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    goto LABEL_5;
}

void std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 55) < 0)
  {
    operator delete(__p[4]);
    if ((*((char *)__p + 31) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(__p[1]);
    operator delete(__p);
    return;
  }
  if (*((char *)__p + 31) < 0)
    goto LABEL_6;
LABEL_3:
  operator delete(__p);
}

uint64_t *std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::operator()(uint64_t a1, uint64_t a2, const void **a3)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t *result;
  _DWORD v7[6];
  int v8;
  char v9;

  v4 = (__int128 *)(a1 + 8);
  v5 = (__int128 *)(a1 + 32);
  v7[0] = *(_DWORD *)cxxopts::OptionValue::as<float>(a3);
  v8 = 2;
  result = Espresso::AOT::AOTCompilerOptions::SetOption(a2, v4, v5, (uint64_t)v7);
  if (v8 != -1)
    return (uint64_t *)((uint64_t (*)(char *, _DWORD *))off_1E2DD14D0[v8])(&v9, v7);
  return result;
}

void sub_1910E9808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_1E2DD14D0[a13])(v13 - 33, &a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A894F2)
    return a1 + 8;
  if (((v3 & 0x8000000191A894F2 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A894F2))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A894F2 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<float>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target_type()
{
}

uint64_t cxxopts::OptionValue::as<float>(const void **a1)
{
  const void *v1;
  _QWORD *v2;
  std::logic_error *exception;

  v1 = *a1;
  if (!v1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "No value");
    __cxa_throw(exception, (struct type_info *)off_1E2D35300, MEMORY[0x1E0DE42C0]);
  }
  if (!v2)
    __cxa_bad_cast();
  if (v2[5])
    return v2[5];
  else
    return v2[3];
}

void sub_1910E9954(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__115allocate_sharedB8ne180100IN7cxxopts6values14standard_valueINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS7_ISA_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(_QWORD *a1@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  _QWORD *v4;
  unint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)operator new(0x80uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB6310;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2D5C920;
  *(_OWORD *)&v2[1].__shared_owners_ = 0u;
  v2[2].std::__shared_count = 0u;
  *(_OWORD *)&v2[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[3].__shared_owners_ = 0u;
  v2[4].std::__shared_count = 0u;
  *(_OWORD *)&v2[4].__shared_weak_owners_ = 0u;
  v4 = operator new(0x30uLL);
  v4[2] = 0;
  *v4 = &unk_1E2DC26D8;
  v4[1] = 0;
  v4[4] = 0;
  v4[5] = 0;
  v4[3] = 0;
  v2[2].__vftable = (std::__shared_weak_count_vtbl *)(v4 + 3);
  v2[2].__shared_owners_ = (uint64_t)v4;
  v2[2].__shared_weak_owners_ = (uint64_t)(v4 + 3);
  LOWORD(v2[3].__vftable) = 0;
  *(_OWORD *)&v2[3].__shared_owners_ = 0u;
  v2[4].std::__shared_count = 0u;
  *(_OWORD *)&v2[4].__shared_weak_owners_ = 0u;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2D5CB00;
  *a1 = v2 + 1;
  a1[1] = v2;
  do
    v5 = __ldxr(p_shared_owners);
  while (__stxr(v5 + 1, p_shared_owners));
  p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  v2[1].__shared_owners_ = (uint64_t)&v2[1];
  v2[1].__shared_weak_owners_ = (uint64_t)v2;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1910E9A8C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cxxopts::values::standard_value<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB6310;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cxxopts::values::standard_value<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB6310;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<cxxopts::values::standard_value<std::string>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t cxxopts::values::standard_value<std::string>::~standard_value(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)a1 = &unk_1E2D5C920;
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
    {
LABEL_3:
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (!v2)
        goto LABEL_10;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2)
    goto LABEL_10;
LABEL_7:
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return a1;
    goto LABEL_11;
  }
LABEL_10:
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_11:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void cxxopts::values::standard_value<std::string>::~standard_value(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)a1 = &unk_1E2D5C920;
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
    {
LABEL_3:
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (!v2)
        goto LABEL_10;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2)
    goto LABEL_10;
LABEL_7:
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      goto LABEL_14;
LABEL_11:
    std::__shared_weak_count::__release_weak(v5);
LABEL_14:
    JUMPOUT(0x19401CD90);
  }
LABEL_10:
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  goto LABEL_11;
}

double cxxopts::values::standard_value<std::string>::clone@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<cxxopts::values::standard_value<std::string>,std::allocator<cxxopts::values::standard_value<std::string>>,cxxopts::values::standard_value<std::string> const&,void>(a1, (uint64_t *)v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

std::string *cxxopts::values::abstract_value<std::string>::parse(uint64_t a1, const std::string *a2)
{
  return std::string::operator=(*(std::string **)(a1 + 40), a2);
}

std::string *cxxopts::values::abstract_value<std::string>::parse(uint64_t a1)
{
  return std::string::operator=(*(std::string **)(a1 + 40), (const std::string *)(a1 + 56));
}

void std::__shared_ptr_emplace<std::string>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void std::allocate_shared[abi:ne180100]<cxxopts::values::standard_value<std::string>,std::allocator<cxxopts::values::standard_value<std::string>>,cxxopts::values::standard_value<std::string> const&,void>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  uint64_t v6;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;

  v4 = (std::__shared_weak_count *)operator new(0x80uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB6310;
  v6 = cxxopts::values::abstract_value<std::string>::abstract_value((uint64_t)&v4[1], a1);
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2D5CB00;
  *a2 = v6;
  a2[1] = (uint64_t)v4;
  shared_weak_owners = (std::__shared_weak_count *)v4[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      return;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    v4[1].__shared_owners_ = v6;
    v4[1].__shared_weak_owners_ = (uint64_t)v4;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v12 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v4[1].__shared_owners_ = v6;
    v4[1].__shared_weak_owners_ = (uint64_t)v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_1910E9DF0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t cxxopts::values::abstract_value<std::string>::abstract_value(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  _QWORD *v5;
  _QWORD *v6;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E2D5C920;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  v4 = (std::string *)(a1 + 56);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  if (*(_QWORD *)(a2 + 24))
  {
    v5 = operator new(0x30uLL);
    v5[2] = 0;
    *v5 = &unk_1E2DC26D8;
    v5[1] = 0;
    v5[3] = 0;
    v6 = v5 + 3;
    v5[4] = 0;
    v5[5] = 0;
    *(_QWORD *)(a1 + 24) = v5 + 3;
    *(_QWORD *)(a1 + 32) = v5;
  }
  else
  {
    v6 = *(_QWORD **)(a2 + 40);
  }
  *(_QWORD *)(a1 + 40) = v6;
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  std::string::operator=(v4, (const std::string *)(a2 + 56));
  std::string::operator=((std::string *)(a1 + 80), (const std::string *)(a2 + 80));
  return a1;
}

void sub_1910E9ED8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  std::__shared_weak_count *v5;

  if (*(char *)(v1 + 79) < 0)
  {
    operator delete(*v3);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v2);
    v5 = *(std::__shared_weak_count **)(v1 + 16);
    if (!v5)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v2);
    v5 = *(std::__shared_weak_count **)(v1 + 16);
    if (!v5)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E2DB2108;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E2DB2108;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_6:
      JUMPOUT(0x19401CD90);
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 8));
  goto LABEL_6;
}

char *std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1)
{
  char *v2;
  char *v3;
  std::string *v4;

  v2 = (char *)operator new(0x38uLL);
  v3 = v2;
  *(_QWORD *)v2 = &unk_1E2DB2108;
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v2 + 8), *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
    *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  }
  v4 = (std::string *)(v3 + 32);
  if (*(char *)(a1 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 32);
    *((_QWORD *)v3 + 6) = *(_QWORD *)(a1 + 48);
  }
  return v3;
}

void sub_1910EA0CC(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;

  if (v1[31] < 0)
  {
    operator delete(*v2);
    operator delete(v1);
    _Unwind_Resume(a1);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;

  *a2 = &unk_1E2DB2108;
  v4 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
    v6 = (std::string *)(a2 + 4);
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 8);
    a2[3] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
    v6 = (std::string *)(a2 + 4);
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      v7 = *(_OWORD *)(a1 + 32);
      v6->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 48);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
      return;
    }
  }
  std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_1910EA1AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::destroy(uint64_t a1)
{
  if ((*(char *)(a1 + 55) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(*(void **)(a1 + 8));
    return;
  }
  operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    goto LABEL_5;
}

void std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 55) < 0)
  {
    operator delete(__p[4]);
    if ((*((char *)__p + 31) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(__p[1]);
    operator delete(__p);
    return;
  }
  if (*((char *)__p + 31) < 0)
    goto LABEL_6;
LABEL_3:
  operator delete(__p);
}

uint64_t *std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::operator()(uint64_t a1, uint64_t a2, const void **a3)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1} &,Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&>((__int128 *)(a1 + 8), a2, a3);
}

uint64_t std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A89844)
    return a1 + 8;
  if (((v3 & 0x8000000191A89844 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A89844))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A89844 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target_type()
{
}

uint64_t *std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<void Espresso::AOT::AOTCompilerOptionsManager::Impl::AddOptionImpl<std::string>(std::string const&,std::string const&,Espresso::AOT::AOTCompilerOptionsManager::OptionType,std::optional<std::string const>,std::optional<std::string const>,std::string const&)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1} &,Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&>(__int128 *a1, uint64_t a2, const void **a3)
{
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t *result;
  std::string v9;
  int v10;
  char v11;

  v5 = (__int128 *)((char *)a1 + 24);
  v6 = cxxopts::OptionValue::as<std::string>(a3);
  if (*(char *)(v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
  }
  else
  {
    v7 = *(_OWORD *)v6;
    v9.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 16);
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v7;
  }
  v10 = 3;
  result = Espresso::AOT::AOTCompilerOptions::SetOption(a2, a1, v5, (uint64_t)&v9);
  if (v10 != -1)
    return (uint64_t *)((uint64_t (*)(char *, std::string *))off_1E2DD14D0[v10])(&v11, &v9);
  return result;
}

void sub_1910EA3A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12)
{
  uint64_t v12;

  if (a12 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E2DD14D0[a12])(v12 - 33, &a9);
  _Unwind_Resume(exception_object);
}

uint64_t cxxopts::OptionValue::as<std::string>(const void **a1)
{
  const void *v1;
  _QWORD *v2;
  std::logic_error *exception;

  v1 = *a1;
  if (!v1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "No value");
    __cxa_throw(exception, (struct type_info *)off_1E2D35300, MEMORY[0x1E0DE42C0]);
  }
  if (!v2)
    __cxa_bad_cast();
  if (v2[5])
    return v2[5];
  else
    return v2[3];
}

void sub_1910EA468(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void cxxopts::Options::parse(cxxopts::Options *this@<X0>, int *a2@<X1>, char ***a3@<X2>, uint64_t a4@<X8>)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void **v11;
  void **v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *__p;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  v20 = *((_QWORD *)this + 13);
  v21 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  __p = 0;
  v18 = 0;
  v19 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__p, *((_QWORD *)this + 15), *((_QWORD *)this + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 16) - *((_QWORD *)this + 15)) >> 3));
  cxxopts::ParseResult::ParseResult(a4, &v20, (uint64_t)&__p, *((_BYTE *)this + 97), a2, a3);
  v11 = (void **)__p;
  if (__p)
  {
    v12 = v18;
    v13 = __p;
    if (v18 != __p)
    {
      do
      {
        if (*((char *)v12 - 1) < 0)
          operator delete(*(v12 - 3));
        v12 -= 3;
      }
      while (v12 != v11);
      v13 = __p;
    }
    v18 = v11;
    operator delete(v13);
  }
  v14 = v21;
  if (v21)
  {
    v15 = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1910EA5AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void *);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1910EA5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *cxxopts::Options::Options(std::string *this, const cxxopts::Options *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  std::string::size_type v9;
  unint64_t *v10;
  unint64_t v11;
  const void **v12;
  char *v13;
  char *v15;
  char *v16;
  BOOL v17;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(_OWORD *)((char *)a2 + 24);
      v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
LABEL_6:
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v7 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v7;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v8 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v8;
  }
  LOWORD(this[4].__r_.__value_.__l.__data_) = *((_WORD *)a2 + 48);
  v9 = *((_QWORD *)a2 + 14);
  this[4].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 13);
  this[4].__r_.__value_.__r.__words[2] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  this[5].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this[5].__r_.__value_.__r.__words, *((_QWORD *)a2 + 15), *((_QWORD *)a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 16) - *((_QWORD *)a2 + 15)) >> 3));
  this[6].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 18);
  std::unordered_set<std::string>::unordered_set((uint64_t)&this[6].__r_.__value_.__l.__size_, (uint64_t)a2 + 152);
  this[8].__r_.__value_.__l.__size_ = 0;
  this[8].__r_.__value_.__r.__words[0] = (std::string::size_type)&this[8].__r_.__value_.__l.__size_;
  this[8].__r_.__value_.__r.__words[2] = 0;
  v12 = (const void **)*((_QWORD *)a2 + 24);
  v13 = (char *)a2 + 200;
  if (v12 != (const void **)v13)
  {
    do
    {
      std::__tree<std::__value_type<std::string,cxxopts::HelpGroupDetails>,std::__map_value_compare<std::string,std::__value_type<std::string,cxxopts::HelpGroupDetails>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,cxxopts::HelpGroupDetails>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,cxxopts::HelpGroupDetails> const&>((uint64_t **)&this[8], (uint64_t *)&this[8].__r_.__value_.__l.__size_, v12 + 4, (__int128 *)v12 + 2);
      v15 = (char *)v12[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = *(char **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (char *)v12[2];
          v17 = *(_QWORD *)v16 == (_QWORD)v12;
          v12 = (const void **)v16;
        }
        while (!v17);
      }
      v12 = (const void **)v16;
    }
    while (v16 != v13);
  }
  return this;
}

void sub_1910EA7D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;

  if (*(char *)(v10 + 71) < 0)
  {
    operator delete(*v11);
    if ((*(char *)(v10 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v10 + 23) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v10 + 47) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*a10);
  if ((*(char *)(v10 + 23) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)v10);
  _Unwind_Resume(exception_object);
}

char *std::__tree<std::__value_type<std::string,cxxopts::HelpGroupDetails>,std::__map_value_compare<std::string,std::__value_type<std::string,cxxopts::HelpGroupDetails>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,cxxopts::HelpGroupDetails>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,cxxopts::HelpGroupDetails> const&>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  uint64_t *v6;
  uint64_t *v8;
  char *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;

  v6 = std::__tree<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__find_equal<std::string>(a1, a2, &v14, &v13, a3);
  if (*v6)
    return (char *)*v6;
  v8 = v6;
  v9 = (char *)operator new(0x80uLL);
  std::pair<std::string const,cxxopts::HelpGroupDetails>::pair[abi:ne180100]((std::string *)(v9 + 32), a4);
  v10 = v14;
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = v10;
  *v8 = (uint64_t)v9;
  v11 = (uint64_t *)**a1;
  v12 = (uint64_t *)v9;
  if (v11)
  {
    *a1 = v11;
    v12 = (uint64_t *)*v8;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v9;
}

void sub_1910EA968(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,cxxopts::HelpGroupDetails>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(__int128 *)((char *)a2 + 24);
      v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
LABEL_6:
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v7 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v7;
  }
  this[3].__r_.__value_.__r.__words[0] = 0;
  this[3].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__r.__words[2] = 0;
  std::vector<cxxopts::HelpOptionDetails>::__init_with_size[abi:ne180100]<cxxopts::HelpOptionDetails*,cxxopts::HelpOptionDetails*>(this[3].__r_.__value_.__r.__words, *((_QWORD *)a2 + 9), *((_QWORD *)a2 + 10), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)) >> 3));
  return this;
}

void sub_1910EAA68(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
  {
    operator delete(*v2);
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<cxxopts::HelpOptionDetails>::__init_with_size[abi:ne180100]<cxxopts::HelpOptionDetails*,cxxopts::HelpOptionDetails*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  unint64_t v9;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0x186186186186187)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    result = operator new(168 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[21 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = cxxopts::HelpOptionDetails::HelpOptionDetails((std::string *)&v8[v9 / 8], (const cxxopts::HelpOptionDetails *)(a2 + v9));
        v9 += 168;
      }
      while (a2 + v9 != a3);
      v8 = (_QWORD *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_1910EABAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__exception_guard_exceptions<std::vector<cxxopts::HelpOptionDetails>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<cxxopts::HelpOptionDetails>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  void ***v1;
  void **v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = **result;
    if (v3)
    {
      v4 = (uint64_t)v2[1];
      v5 = **result;
      if ((void *)v4 != v3)
      {
        do
        {
          v4 -= 168;
          std::allocator<cxxopts::HelpOptionDetails>::destroy[abi:ne180100]((uint64_t)(v2 + 2), v4);
        }
        while ((void *)v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

std::string *cxxopts::HelpOptionDetails::HelpOptionDetails(std::string *this, const cxxopts::HelpOptionDetails *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(_OWORD *)((char *)a2 + 24);
      v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
LABEL_6:
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v7 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v7;
  }
  this[3].__r_.__value_.__s.__data_[0] = *((_BYTE *)a2 + 72);
  if (*((char *)a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 80), *((const std::string::value_type **)a2 + 10), *((_QWORD *)a2 + 11));
  }
  else
  {
    v8 = *((_OWORD *)a2 + 5);
    this[4].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 12);
    *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = v8;
  }
  this[4].__r_.__value_.__s.__data_[8] = *((_BYTE *)a2 + 104);
  if (*((char *)a2 + 135) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 112), *((const std::string::value_type **)a2 + 14), *((_QWORD *)a2 + 15));
  }
  else
  {
    v9 = *((_OWORD *)a2 + 7);
    this[5].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 16);
    *(_OWORD *)&this[4].__r_.__value_.__r.__words[2] = v9;
  }
  v10 = (std::string *)((char *)this + 136);
  if (*((char *)a2 + 159) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)a2 + 17), *((_QWORD *)a2 + 18));
  }
  else
  {
    v11 = *(_OWORD *)((char *)a2 + 136);
    this[6].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 19);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  LOWORD(this[6].__r_.__value_.__r.__words[2]) = *((_WORD *)a2 + 80);
  return this;
}

void sub_1910EADF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;

  if (*(char *)(v1 + 135) < 0)
  {
    operator delete(*v5);
    if ((*(char *)(v1 + 103) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 71) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(v1 + 103) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v4);
  if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(*v3);
  if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,cxxopts::HelpGroupDetails>,std::__map_value_compare<std::string,std::__value_type<std::string,cxxopts::HelpGroupDetails>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,cxxopts::HelpGroupDetails>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,cxxopts::HelpGroupDetails>,std::__map_value_compare<std::string,std::__value_type<std::string,cxxopts::HelpGroupDetails>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,cxxopts::HelpGroupDetails>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,cxxopts::HelpGroupDetails>,std::__map_value_compare<std::string,std::__value_type<std::string,cxxopts::HelpGroupDetails>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,cxxopts::HelpGroupDetails>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,cxxopts::HelpGroupDetails>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t cxxopts::ParseResult::ParseResult(uint64_t a1, _QWORD *a2, uint64_t a3, char a4, int *a5, char ***a6)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v7 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(_BYTE *)(a1 + 128) = a4;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  cxxopts::ParseResult::parse((cxxopts::ParseResult *)a1, a5, a6);
  return a1;
}

void sub_1910EAFC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void ***v2;
  uint64_t v3;
  void **v4;
  void **v5;
  void ***v6;
  void **v8;
  void *v9;
  void **v10;
  std::__shared_weak_count *v11;
  void **v12;
  void **v13;
  void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  v6 = v2;
  if (*v6)
    cxxopts::ParseResult::ParseResult(v1, *v6, (void **)(v1 + 136));
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v3);
  v8 = *(void ***)(v1 + 64);
  if (v8)
  {
    do
    {
      v12 = (void **)*v8;
      if (*((char *)v8 + 39) < 0)
        operator delete(v8[2]);
      operator delete(v8);
      v8 = v12;
    }
    while (v12);
  }
  v9 = *v5;
  *v5 = 0;
  if (v9)
  {
    operator delete(v9);
    v10 = (void **)*v4;
    if (!*v4)
    {
LABEL_6:
      v11 = *(std::__shared_weak_count **)(v1 + 8);
      if (!v11)
        goto LABEL_23;
      goto LABEL_19;
    }
  }
  else
  {
    v10 = (void **)*v4;
    if (!*v4)
      goto LABEL_6;
  }
  v13 = *(void ***)(v1 + 24);
  v14 = v10;
  if (v13 != v10)
  {
    do
    {
      if (*((char *)v13 - 1) < 0)
        operator delete(*(v13 - 3));
      v13 -= 3;
    }
    while (v13 != v10);
    v14 = *v4;
  }
  *(_QWORD *)(v1 + 24) = v10;
  operator delete(v14);
  v11 = *(std::__shared_weak_count **)(v1 + 8);
  if (!v11)
LABEL_23:
    _Unwind_Resume(a1);
LABEL_19:
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  goto LABEL_23;
}

void cxxopts::ParseResult::parse(cxxopts::ParseResult *this, int *a2, char ***a3)
{
  char v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  int v13;
  int v14;
  std::vector<std::csub_match>::pointer begin;
  unint64_t v16;
  std::__compressed_pair<std::csub_match *> *p_matched;
  std::vector<std::csub_match>::pointer v18;
  const char *first;
  std::vector<std::csub_match>::pointer *p_end;
  std::vector<std::csub_match>::pointer v21;
  unint64_t v22;
  _OWORD *v23;
  char *v24;
  size_t v25;
  void *v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  _QWORD *v34;
  char v35;
  const char *second;
  const char *v37;
  unint64_t v38;
  _OWORD *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  _BYTE *v43;
  _OWORD *v44;
  __int128 *v45;
  unint64_t v46;
  __int128 v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  unsigned __int8 v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  _BYTE *v75;
  _OWORD *v76;
  __int128 *v77;
  unint64_t v78;
  __int128 v79;
  char v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  void *v84;
  unint64_t *v85;
  unint64_t v86;
  std::vector<std::csub_match>::pointer v87;
  unint64_t v88;
  std::__compressed_pair<std::csub_match *> *p_end_cap;
  std::vector<std::csub_match>::pointer v90;
  std::sub_match<const char *> *v91;
  std::vector<std::csub_match>::pointer *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__compressed_pair<std::csub_match *> *v95;
  std::vector<std::csub_match> *v96;
  char *v97;
  std::vector<std::csub_match>::pointer *v98;
  std::vector<std::csub_match>::pointer v99;
  unint64_t v100;
  _BYTE *v101;
  char *v102;
  _BYTE *v103;
  _OWORD *v104;
  BOOL *v105;
  unint64_t v106;
  __int128 v107;
  int v108;
  uint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  unint64_t *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  _QWORD *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *end;
  unint64_t *p_second;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *p_shared_owners;
  unint64_t v135;
  int v136;
  int v137;
  const char *v138;
  size_t v139;
  void *v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t *v147;
  _QWORD *v148;
  char v149;
  int v150;
  std::__shared_weak_count *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  void *exception;
  void *v157;
  void *v158;
  void *v159;
  int v160;
  void *v161[2];
  unint64_t v162;
  __int128 v163;
  void *v164;
  std::__shared_weak_count *v165;
  void *v166;
  std::__shared_weak_count *v167;
  void *v168;
  std::__shared_weak_count *v169;
  char v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  void *v177;
  unint64_t v178;
  unint64_t v179;
  void *__dst[2];
  unint64_t v181;
  void *v182;
  unint64_t v183;
  unint64_t v184;
  std::vector<std::csub_match> __p[2];
  uint64_t v186;
  uint64_t v187;
  char v188;
  uint64_t v189;
  uint64_t v190;
  char v191;
  char v192;
  uint64_t v193;
  int v194;
  std::locale v195;
  std::__shared_weak_count *v196;

  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v195, "--([[:alnum:]][-_[:alnum:]]+)(=(.*))?|-([[:alnum:]]+)", 0);
  v6 = 1;
  v194 = 1;
  if (*a2 == 1)
  {
    v160 = 1;
    v7 = *(uint64_t **)(*(_QWORD *)this + 16);
    if (!v7)
      goto LABEL_215;
    while (1)
    {
LABEL_196:
      v123 = *(_QWORD *)(v7[5] + 72);
      __p[0].__begin_ = (std::vector<std::csub_match>::pointer)(v7 + 5);
      if (!std::__hash_table<std::__hash_value_type<std::shared_ptr<cxxopts::OptionDetails>,cxxopts::OptionValue>,std::__unordered_map_hasher<std::shared_ptr<cxxopts::OptionDetails>,std::__hash_value_type<std::shared_ptr<cxxopts::OptionDetails>,cxxopts::OptionValue>,std::hash<std::shared_ptr<cxxopts::OptionDetails>>,std::equal_to<std::shared_ptr<cxxopts::OptionDetails>>,true>,std::__unordered_map_equal<std::shared_ptr<cxxopts::OptionDetails>,std::__hash_value_type<std::shared_ptr<cxxopts::OptionDetails>,cxxopts::OptionValue>,std::equal_to<std::shared_ptr<cxxopts::OptionDetails>>,std::hash<std::shared_ptr<cxxopts::OptionDetails>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<cxxopts::OptionDetails>,cxxopts::OptionValue>>>::__emplace_unique_key_args<std::shared_ptr<cxxopts::OptionDetails>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<cxxopts::OptionDetails> const&>,std::tuple<>>((uint64_t)this + 88, v7 + 5, (uint64_t)&std::piecewise_construct, __p)[6]&& (*(unsigned int (**)(uint64_t))(*(_QWORD *)v123 + 40))(v123))
      {
        v124 = v7[6];
        *(_QWORD *)&v163 = v7[5];
        *((_QWORD *)&v163 + 1) = v124;
        if (v124)
        {
          v125 = (unint64_t *)(v124 + 8);
          do
            v126 = __ldxr(v125);
          while (__stxr(v126 + 1, v125));
        }
        __p[0].__begin_ = (std::vector<std::csub_match>::pointer)&v163;
        v127 = std::__hash_table<std::__hash_value_type<std::shared_ptr<cxxopts::OptionDetails>,cxxopts::OptionValue>,std::__unordered_map_hasher<std::shared_ptr<cxxopts::OptionDetails>,std::__hash_value_type<std::shared_ptr<cxxopts::OptionDetails>,cxxopts::OptionValue>,std::hash<std::shared_ptr<cxxopts::OptionDetails>>,std::equal_to<std::shared_ptr<cxxopts::OptionDetails>>,true>,std::__unordered_map_equal<std::shared_ptr<cxxopts::OptionDetails>,std::__hash_value_type<std::shared_ptr<cxxopts::OptionDetails>,cxxopts::OptionValue>,std::equal_to<std::shared_ptr<cxxopts::OptionDetails>>,std::hash<std::shared_ptr<cxxopts::OptionDetails>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<cxxopts::OptionDetails>,cxxopts::OptionValue>>>::__emplace_unique_key_args<std::shared_ptr<cxxopts::OptionDetails>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<cxxopts::OptionDetails> const&>,std::tuple<>>((uint64_t)this + 88, (uint64_t *)&v163, (uint64_t)&std::piecewise_construct, __p);
        *(_OWORD *)&__p[0].__begin_ = v163;
        if (*((_QWORD *)&v163 + 1))
        {
          v128 = (unint64_t *)(*((_QWORD *)&v163 + 1) + 8);
          do
            v129 = __ldxr(v128);
          while (__stxr(v129 + 1, v128));
        }
        cxxopts::OptionValue::parse_default(v127 + 4, (uint64_t *)__p);
        end = (std::__shared_weak_count *)__p[0].__end_;
        if (!__p[0].__end_)
          goto LABEL_208;
        p_second = (unint64_t *)&__p[0].__end_->second;
        do
          v132 = __ldaxr(p_second);
        while (__stlxr(v132 - 1, p_second));
        if (!v132)
        {
          ((void (*)(std::__shared_weak_count *))end->__on_zero_shared)(end);
          std::__shared_weak_count::__release_weak(end);
          v133 = (std::__shared_weak_count *)*((_QWORD *)&v163 + 1);
          if (*((_QWORD *)&v163 + 1))
          {
LABEL_209:
            p_shared_owners = (unint64_t *)&v133->__shared_owners_;
            do
              v135 = __ldaxr(p_shared_owners);
            while (__stlxr(v135 - 1, p_shared_owners));
            if (!v135)
            {
              ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
              std::__shared_weak_count::__release_weak(v133);
            }
          }
        }
        else
        {
LABEL_208:
          v133 = (std::__shared_weak_count *)*((_QWORD *)&v163 + 1);
          if (*((_QWORD *)&v163 + 1))
            goto LABEL_209;
        }
      }
      v7 = (uint64_t *)*v7;
      if (!v7)
        goto LABEL_215;
    }
  }
  v8 = 1;
  v160 = 1;
LABEL_6:
  v9 = (uint64_t)*a3;
  v10 = v8;
  if (strcmp((*a3)[v8], "--"))
  {
    v186 = 0;
    v187 = 0;
    v188 = 0;
    v189 = 0;
    v190 = 0;
    v191 = 0;
    v192 = 0;
    v193 = 0;
    memset(__p, 0, 41);
    v11 = *(char **)(v9 + 8 * v10);
    v12 = strlen(v11);
    v13 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)&v195, (std::sub_match<const char *> *)v11, (std::sub_match<const char *> *)&v11[v12], __p, 4160);
    if (v191)
      v14 = v13;
    else
      v14 = 0;
    if (v14 == 1)
    {
      __p[0].__end_ = __p[0].__begin_;
    }
    else
    {
      begin = __p[0].__begin_;
      if (__p[0].__end_ != __p[0].__begin_)
      {
        v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[0].__end_ - (char *)__p[0].__begin_) >> 3);
        p_matched = (std::__compressed_pair<std::csub_match *> *)&__p[0].__begin_[4].matched;
        if (v16 <= 4)
          p_matched = &__p[1].__end_cap_;
        if (LOBYTE(p_matched->__value_))
        {
          v18 = __p[0].__begin_ + 4;
          if (v16 <= 4)
            v18 = (std::vector<std::csub_match>::pointer)&__p[1];
          first = v18->first;
          p_end = (std::vector<std::csub_match>::pointer *)&__p[0].__begin_[4].second;
          if (v16 <= 4)
            p_end = &__p[1].__end_;
          v21 = *p_end;
          v22 = (char *)*p_end - first;
          if (*p_end != (std::vector<std::csub_match>::pointer)first)
          {
            if (v22 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            if (v22 <= 0x16)
            {
              HIBYTE(v184) = *(_BYTE *)p_end - (_BYTE)first;
              v23 = &v182;
              goto LABEL_67;
            }
            v40 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v22 | 7) != 0x17)
              v40 = v22 | 7;
            v41 = v40 + 1;
            v23 = operator new(v40 + 1);
            v183 = v22;
            v184 = v41 | 0x8000000000000000;
            v182 = v23;
            if (v22 < 0x20 || (unint64_t)((char *)v23 - first) < 0x20)
            {
LABEL_67:
              v42 = first;
              v43 = v23;
              goto LABEL_68;
            }
            v42 = &first[v22 & 0xFFFFFFFFFFFFFFE0];
            v43 = (char *)v23 + (v22 & 0xFFFFFFFFFFFFFFE0);
            v44 = v23 + 1;
            v45 = (__int128 *)(first + 16);
            v46 = v22 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v47 = *v45;
              *(v44 - 1) = *(v45 - 1);
              *v44 = v47;
              v44 += 2;
              v45 += 2;
              v46 -= 32;
            }
            while (v46);
            if (v22 != (v22 & 0x7FFFFFFFFFFFFFE0))
            {
              do
              {
LABEL_68:
                v48 = *v42++;
                *v43++ = v48;
              }
              while (v42 != (const char *)v21);
            }
            v49 = 0;
            *v43 = 0;
            while (2)
            {
              v50 = HIBYTE(v184);
              if (SHIBYTE(v184) < 0)
              {
                v51 = v182;
                if (v49 == v183)
                {
                  operator delete(v182);
                  goto LABEL_46;
                }
              }
              else
              {
                if (v49 == HIBYTE(v184))
                  goto LABEL_46;
                v51 = &v182;
              }
              v52 = v51[v49];
              HIBYTE(v179) = 1;
              LOWORD(v177) = v52;
              v53 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(*(_QWORD **)this, (uint64_t)&v177);
              if (!v53)
              {
                if (!*((_BYTE *)this + 128))
                {
                  exception = __cxa_allocate_exception(0x20uLL);
                  cxxopts::option_not_exists_exception::option_not_exists_exception((uint64_t)exception, (uint64_t)&v177);
                }
                goto LABEL_108;
              }
              v55 = v53[5];
              v54 = v53[6];
              v175 = v55;
              v176 = (std::__shared_weak_count *)v54;
              if (v54)
              {
                v56 = (unint64_t *)(v54 + 8);
                do
                  v57 = __ldxr(v56);
                while (__stxr(v57 + 1, v56));
              }
              if ((v50 & 0x80u) == 0)
                v58 = v50;
              else
                v58 = v183;
              if (v49 + 1 == v58)
              {
                v59 = *a2;
                v60 = (uint64_t)*a3;
                v173 = v55;
                v174 = (std::__shared_weak_count *)v54;
                if (v54)
                {
                  v61 = (unint64_t *)(v54 + 8);
                  do
                    v62 = __ldxr(v61);
                  while (__stxr(v62 + 1, v61));
                }
                cxxopts::ParseResult::checked_parse_arg((uint64_t)this, v59, v60, &v194, &v173, (uint64_t)&v177);
                v63 = v174;
                if (v174)
                {
                  v64 = (unint64_t *)&v174->__shared_owners_;
                  do
                    v65 = __ldaxr(v64);
                  while (__stlxr(v65 - 1, v64));
                  goto LABEL_103;
                }
                goto LABEL_104;
              }
              if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v55 + 72) + 56))(*(_QWORD *)(v55 + 72)))
              {
                v157 = __cxa_allocate_exception(0x20uLL);
                cxxopts::option_requires_argument_exception::option_requires_argument_exception((uint64_t)v157, (uint64_t)&v177);
              }
              v171 = v55;
              v172 = (std::__shared_weak_count *)v54;
              if (v54)
              {
                v66 = (unint64_t *)(v54 + 8);
                do
                  v67 = __ldxr(v66);
                while (__stxr(v67 + 1, v66));
              }
              (*(void (**)(void **__return_ptr))(**(_QWORD **)(v55 + 72) + 72))(&v168);
              cxxopts::ParseResult::parse_option((uint64_t)this, &v171, (uint64_t)&v177, (uint64_t)&v168);
              if (v170 < 0)
              {
                operator delete(v168);
                v63 = v172;
                if (!v172)
                  goto LABEL_104;
              }
              else
              {
                v63 = v172;
                if (!v172)
                  goto LABEL_104;
              }
              v68 = (unint64_t *)&v63->__shared_owners_;
              do
                v65 = __ldaxr(v68);
              while (__stlxr(v65 - 1, v68));
LABEL_103:
              if (!v65)
              {
                ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                std::__shared_weak_count::__release_weak(v63);
                v69 = v176;
                if (v176)
                  goto LABEL_105;
                goto LABEL_108;
              }
LABEL_104:
              v69 = v176;
              if (!v176)
                goto LABEL_108;
LABEL_105:
              v70 = (unint64_t *)&v69->__shared_owners_;
              do
                v71 = __ldaxr(v70);
              while (__stlxr(v71 - 1, v70));
              if (v71)
              {
LABEL_108:
                if (SHIBYTE(v179) < 0)
LABEL_109:
                  operator delete(v177);
              }
              else
              {
                ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                std::__shared_weak_count::__release_weak(v69);
                if (SHIBYTE(v179) < 0)
                  goto LABEL_109;
              }
              ++v49;
              continue;
            }
          }
        }
        if (v16 <= 1)
          begin = (std::vector<std::csub_match>::pointer)__p;
        if (!begin[1].matched)
          goto LABEL_46;
        v37 = begin[1].first;
        second = begin[1].second;
        v38 = second - v37;
        if (second == v37)
          goto LABEL_46;
        if (v38 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v38 <= 0x16)
        {
          HIBYTE(v184) = (_BYTE)second - (_BYTE)v37;
          v39 = &v182;
          goto LABEL_121;
        }
        v72 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v38 | 7) != 0x17)
          v72 = v38 | 7;
        v73 = v72 + 1;
        v39 = operator new(v72 + 1);
        v183 = second - v37;
        v184 = v73 | 0x8000000000000000;
        v182 = v39;
        if (v38 < 0x20 || (unint64_t)((char *)v39 - v37) < 0x20)
        {
LABEL_121:
          v74 = v37;
          v75 = v39;
          goto LABEL_122;
        }
        v74 = &v37[v38 & 0xFFFFFFFFFFFFFFE0];
        v75 = (char *)v39 + (v38 & 0xFFFFFFFFFFFFFFE0);
        v76 = v39 + 1;
        v77 = (__int128 *)(v37 + 16);
        v78 = v38 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v79 = *v77;
          *(v76 - 1) = *(v77 - 1);
          *v76 = v79;
          v76 += 2;
          v77 += 2;
          v78 -= 32;
        }
        while (v78);
        if (v38 != (v38 & 0x7FFFFFFFFFFFFFE0))
        {
          do
          {
LABEL_122:
            v80 = *v74++;
            *v75++ = v80;
          }
          while (v74 != second);
        }
        *v75 = 0;
        v81 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(*(_QWORD **)this, (uint64_t)&v182);
        v82 = v81;
        if (v81)
        {
          v84 = (void *)v81[5];
          v83 = v81[6];
          v168 = v84;
          v169 = (std::__shared_weak_count *)v83;
          if (v83)
          {
            v85 = (unint64_t *)(v83 + 8);
            do
              v86 = __ldxr(v85);
            while (__stxr(v86 + 1, v85));
          }
          v87 = __p[0].__begin_;
          v88 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[0].__end_ - (char *)__p[0].__begin_) >> 3);
          p_end_cap = (std::__compressed_pair<std::csub_match *> *)&__p[0].__begin_[2].matched;
          if (v88 <= 2)
            p_end_cap = &__p[1].__end_cap_;
          if (LOBYTE(p_end_cap->__value_))
          {
            v90 = __p[0].__begin_ + 2;
            if (v88 <= 2)
              v90 = (std::vector<std::csub_match>::pointer)&__p[1];
            v91 = (std::sub_match<const char *> *)v90->first;
            v92 = (std::vector<std::csub_match>::pointer *)&__p[0].__begin_[2].second;
            if (v88 <= 2)
              v92 = &__p[1].__end_;
            if (*v92 != v91)
            {
              v166 = v84;
              v167 = (std::__shared_weak_count *)v83;
              if (v83)
              {
                v93 = (unint64_t *)(v83 + 8);
                do
                  v94 = __ldxr(v93);
                while (__stxr(v94 + 1, v93));
                v88 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[0].__end_ - (char *)v87) >> 3);
              }
              v95 = (std::__compressed_pair<std::csub_match *> *)&v87[3].matched;
              if (v88 <= 3)
                v95 = &__p[1].__end_cap_;
              if (!LOBYTE(v95->__value_))
              {
                v177 = 0;
                v178 = 0;
                v179 = 0;
                goto LABEL_174;
              }
              v96 = (std::vector<std::csub_match> *)&v87[3];
              if (v88 <= 3)
                v96 = &__p[1];
              v97 = (char *)v96->__begin_;
              v98 = (std::vector<std::csub_match>::pointer *)&v87[3].second;
              if (v88 <= 3)
                v98 = &__p[1].__end_;
              v99 = *v98;
              v100 = (char *)*v98 - v97;
              if (v100 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              if (v100 <= 0x16)
              {
                HIBYTE(v179) = *(_BYTE *)v98 - (_BYTE)v97;
                v101 = &v177;
                if (v97 != (char *)v99)
                  goto LABEL_149;
LABEL_170:
                *v101 = 0;
LABEL_174:
                cxxopts::ParseResult::parse_option((uint64_t)this, (uint64_t *)&v166, (uint64_t)&v182, (uint64_t)&v177);
                if (SHIBYTE(v179) < 0)
                  operator delete(v177);
                v112 = v167;
                if (v167)
                {
                  v119 = (unint64_t *)&v167->__shared_owners_;
                  do
                    v114 = __ldaxr(v119);
                  while (__stlxr(v114 - 1, v119));
                  goto LABEL_179;
                }
                goto LABEL_180;
              }
              v116 = (v100 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v100 | 7) != 0x17)
                v116 = v100 | 7;
              v117 = v116 + 1;
              v101 = operator new(v116 + 1);
              v178 = v100;
              v179 = v117 | 0x8000000000000000;
              v177 = v101;
              if (v97 == (char *)v99)
                goto LABEL_170;
LABEL_149:
              if (v100 < 0x20 || (unint64_t)(v101 - v97) < 0x20)
              {
                v102 = v97;
                v103 = v101;
              }
              else
              {
                v102 = &v97[v100 & 0xFFFFFFFFFFFFFFE0];
                v103 = &v101[v100 & 0xFFFFFFFFFFFFFFE0];
                v104 = v101 + 16;
                v105 = (BOOL *)(v97 + 16);
                v106 = v100 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v107 = *(_OWORD *)v105;
                  *(v104 - 1) = *((_OWORD *)v105 - 1);
                  *v104 = v107;
                  v104 += 2;
                  v105 += 32;
                  v106 -= 32;
                }
                while (v106);
                if (v100 == (v100 & 0x7FFFFFFFFFFFFFE0))
                  goto LABEL_173;
              }
              do
              {
                v118 = *v102++;
                *v103++ = v118;
              }
              while (v102 != (char *)v99);
LABEL_173:
              *v103 = 0;
              goto LABEL_174;
            }
          }
          v108 = *a2;
          v109 = (uint64_t)*a3;
          v164 = v84;
          v165 = (std::__shared_weak_count *)v83;
          if (v83)
          {
            v110 = (unint64_t *)(v83 + 8);
            do
              v111 = __ldxr(v110);
            while (__stxr(v111 + 1, v110));
          }
          cxxopts::ParseResult::checked_parse_arg((uint64_t)this, v108, v109, &v194, &v164, (uint64_t)&v182);
          v112 = v165;
          if (v165)
          {
            v113 = (unint64_t *)&v165->__shared_owners_;
            do
              v114 = __ldaxr(v113);
            while (__stlxr(v114 - 1, v113));
LABEL_179:
            if (!v114)
            {
              ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
              std::__shared_weak_count::__release_weak(v112);
              v120 = v169;
              if (v169)
                goto LABEL_181;
              goto LABEL_184;
            }
          }
LABEL_180:
          v120 = v169;
          if (!v169)
            goto LABEL_184;
LABEL_181:
          v121 = (unint64_t *)&v120->__shared_owners_;
          do
            v122 = __ldaxr(v121);
          while (__stlxr(v122 - 1, v121));
          if (v122)
          {
LABEL_184:
            if ((SHIBYTE(v184) & 0x80000000) == 0)
              goto LABEL_185;
LABEL_164:
            operator delete(v182);
            if (v82)
              goto LABEL_46;
            goto LABEL_47;
          }
          ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
          std::__shared_weak_count::__release_weak(v120);
          if (SHIBYTE(v184) < 0)
            goto LABEL_164;
        }
        else
        {
          if (!*((_BYTE *)this + 128))
          {
            v159 = __cxa_allocate_exception(0x20uLL);
            cxxopts::option_not_exists_exception::option_not_exists_exception((uint64_t)v159, (uint64_t)&v182);
          }
          v115 = v194;
          (*a3)[v160++] = (*a3)[v194];
          v194 = v115 + 1;
          if (SHIBYTE(v184) < 0)
            goto LABEL_164;
        }
LABEL_185:
        if (v82)
          goto LABEL_46;
        goto LABEL_47;
      }
    }
    v24 = (*a3)[v194];
    if (*v24 == 45 && v24[1])
    {
      v158 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&v182, (*a3)[v194]);
      cxxopts::option_syntax_exception::option_syntax_exception((uint64_t)v158, (uint64_t)&v182);
    }
    v25 = strlen((*a3)[v194]);
    if (v25 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v26 = (void *)v25;
    if (v25 >= 0x17)
    {
      v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v25 | 7) != 0x17)
        v28 = v25 | 7;
      v29 = v28 + 1;
      v27 = (void **)operator new(v28 + 1);
      __dst[1] = v26;
      v181 = v29 | 0x8000000000000000;
      __dst[0] = v27;
    }
    else
    {
      HIBYTE(v181) = v25;
      v27 = __dst;
      if (!v25)
        goto LABEL_34;
    }
    memmove(v27, v24, (size_t)v26);
LABEL_34:
    *((_BYTE *)v26 + (_QWORD)v27) = 0;
    v30 = *((_QWORD *)this + 3);
    v31 = *((_QWORD *)this + 5);
    while (1)
    {
      if (v31 == v30)
      {
        v35 = 0;
        if ((SHIBYTE(v181) & 0x80000000) == 0)
          goto LABEL_44;
        goto LABEL_43;
      }
      v32 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(*(_QWORD **)this, v31);
      if (v32)
      {
        v33 = v32 + 5;
        v182 = v32 + 5;
        v34 = std::__hash_table<std::__hash_value_type<std::shared_ptr<cxxopts::OptionDetails>,cxxopts::OptionValue>,std::__unordered_map_hasher<std::shared_ptr<cxxopts::OptionDetails>,std::__hash_value_type<std::shared_ptr<cxxopts::OptionDetails>,cxxopts::OptionValue>,std::hash<std::shared_ptr<cxxopts::OptionDetails>>,std::equal_to<std::shared_ptr<cxxopts::OptionDetails>>,true>,std::__unordered_map_equal<std::shared_ptr<cxxopts::OptionDetails>,std::__hash_value_type<std::shared_ptr<cxxopts::OptionDetails>,cxxopts::OptionValue>,std::equal_to<std::shared_ptr<cxxopts::OptionDetails>>,std::hash<std::shared_ptr<cxxopts::OptionDetails>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<cxxopts::OptionDetails>,cxxopts::OptionValue>>>::__emplace_unique_key_args<std::shared_ptr<cxxopts::OptionDetails>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<cxxopts::OptionDetails> const&>,std::tuple<>>((uint64_t)this + 88, v32 + 5, (uint64_t)&std::piecewise_construct, (_QWORD **)&v182);
        if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v33 + 72) + 48))(*(_QWORD *)(*v33 + 72)) & 1) != 0)
        {
          cxxopts::ParseResult::add_to_option((_QWORD **)this, *((_QWORD *)this + 5), (uint64_t)__dst);
          v35 = 1;
          if (SHIBYTE(v181) < 0)
LABEL_43:
            operator delete(__dst[0]);
LABEL_44:
          if ((v35 & 1) == 0)
            (*a3)[v160++] = (*a3)[v194];
LABEL_46:
          ++v194;
LABEL_47:
          if (__p[0].__begin_)
          {
            __p[0].__end_ = __p[0].__begin_;
            operator delete(__p[0].__begin_);
          }
          v8 = v194;
          if (v194 == *a2)
          {
            v6 = 1;
            v7 = *(uint64_t **)(*(_QWORD *)this + 16);
            if (v7)
              goto LABEL_196;
            goto LABEL_215;
          }
          goto LABEL_6;
        }
        if (!v34[6])
        {
          cxxopts::ParseResult::add_to_option((_QWORD **)this, *((_QWORD *)this + 5), (uint64_t)__dst);
          *((_QWORD *)this + 5) += 24;
          v35 = 1;
          if ((SHIBYTE(v181) & 0x80000000) == 0)
            goto LABEL_44;
          goto LABEL_43;
        }
      }
      v31 = *((_QWORD *)this + 5) + 24;
      *((_QWORD *)this + 5) = v31;
      v30 = *((_QWORD *)this + 3);
    }
  }
  v6 = 0;
  v194 = v10 + 1;
  v7 = *(uint64_t **)(*(_QWORD *)this + 16);
  if (v7)
    goto LABEL_196;
LABEL_215:
  if ((v6 & 1) != 0)
    goto LABEL_241;
  v136 = v194;
  v137 = *a2;
  if (v194 >= *a2)
    goto LABEL_240;
  while (2)
  {
    v138 = (*a3)[v136];
    v139 = strlen(v138);
    if (v139 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v140 = (void *)v139;
    if (v139 >= 0x17)
    {
      v142 = (v139 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v139 | 7) != 0x17)
        v142 = v139 | 7;
      v143 = v142 + 1;
      v141 = operator new(v142 + 1);
      v161[1] = v140;
      v162 = v143 | 0x8000000000000000;
      v161[0] = v141;
      goto LABEL_224;
    }
    HIBYTE(v162) = v139;
    v141 = v161;
    if (v139)
LABEL_224:
      memmove(v141, v138, (size_t)v140);
    *((_BYTE *)v140 + (_QWORD)v141) = 0;
    v144 = *((_QWORD *)this + 3);
    v145 = *((_QWORD *)this + 5);
    while (1)
    {
      if (v145 == v144)
      {
        v149 = 0;
        if ((SHIBYTE(v162) & 0x80000000) == 0)
          goto LABEL_235;
        goto LABEL_234;
      }
      v146 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(*(_QWORD **)this, v145);
      if (!v146)
        goto LABEL_226;
      v147 = v146 + 5;
      __p[0].__begin_ = (std::vector<std::csub_match>::pointer)(v146 + 5);
      v148 = std::__hash_table<std::__hash_value_type<std::shared_ptr<cxxopts::OptionDetails>,cxxopts::OptionValue>,std::__unordered_map_hasher<std::shared_ptr<cxxopts::OptionDetails>,std::__hash_value_type<std::shared_ptr<cxxopts::OptionDetails>,cxxopts::OptionValue>,std::hash<std::shared_ptr<cxxopts::OptionDetails>>,std::equal_to<std::shared_ptr<cxxopts::OptionDetails>>,true>,std::__unordered_map_equal<std::shared_ptr<cxxopts::OptionDetails>,std::__hash_value_type<std::shared_ptr<cxxopts::OptionDetails>,cxxopts::OptionValue>,std::equal_to<std::shared_ptr<cxxopts::OptionDetails>>,std::hash<std::shared_ptr<cxxopts::OptionDetails>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<cxxopts::OptionDetails>,cxxopts::OptionValue>>>::__emplace_unique_key_args<std::shared_ptr<cxxopts::OptionDetails>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<cxxopts::OptionDetails> const&>,std::tuple<>>((uint64_t)this + 88, v146 + 5, (uint64_t)&std::piecewise_construct, __p);
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v147 + 72) + 48))(*(_QWORD *)(*v147 + 72)) & 1) != 0)
        break;
      if (!v148[6])
      {
        cxxopts::ParseResult::add_to_option((_QWORD **)this, *((_QWORD *)this + 5), (uint64_t)v161);
        *((_QWORD *)this + 5) += 24;
        v149 = 1;
        if ((SHIBYTE(v162) & 0x80000000) == 0)
          goto LABEL_235;
        goto LABEL_234;
      }
LABEL_226:
      v145 = *((_QWORD *)this + 5) + 24;
      *((_QWORD *)this + 5) = v145;
      v144 = *((_QWORD *)this + 3);
    }
    cxxopts::ParseResult::add_to_option((_QWORD **)this, *((_QWORD *)this + 5), (uint64_t)v161);
    v149 = 1;
    if (SHIBYTE(v162) < 0)
LABEL_234:
      operator delete(v161[0]);
LABEL_235:
    v137 = *a2;
    v136 = v194;
    if ((v149 & 1) != 0)
    {
      v136 = v194 + 1;
      v194 = v136;
      if (v136 < v137)
        continue;
    }
    break;
  }
LABEL_240:
  v150 = v137 - v136;
  if (v150)
  {
    v152 = v160;
    v153 = v136;
    do
    {
      (*a3)[v152++] = (*a3)[v153++];
      --v150;
    }
    while (v150);
    *a2 = v152;
    v151 = v196;
    if (v196)
      goto LABEL_246;
  }
  else
  {
LABEL_241:
    *a2 = v160;
    v151 = v196;
    if (!v196)
      goto LABEL_250;
LABEL_246:
    v154 = (unint64_t *)&v151->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
LABEL_250:
  std::locale::~locale(&v195);
}

void sub_1910EC01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,char a36,uint64_t a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59)
{
  uint64_t v59;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (a57 < 0)
    operator delete(__p);
  if (a58)
  {
    a59 = (uint64_t)a58;
    operator delete(a58);
  }
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)(v59 - 160));
  _Unwind_Resume(a1);
}

void cxxopts::ParseResult::checked_parse_arg(uint64_t a1, int a2, uint64_t a3, int *a4, _QWORD *a5, uint64_t a6)
{
  int v12;
  int v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  const char *v29;
  size_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void *exception;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  void *__p[2];
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;

  v12 = *a4 + 1;
  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a5 + 72) + 56))(*(_QWORD *)(*a5 + 72));
  if (v12 < a2)
  {
    v14 = *a5;
    if (v13)
    {
      v15 = (std::__shared_weak_count *)a5[1];
      v41 = *a5;
      v42 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
        v14 = *a5;
      }
      (*(void (**)(void **__return_ptr))(**(_QWORD **)(v14 + 72) + 72))(__p);
      cxxopts::ParseResult::parse_option(a1, &v41, a6, (uint64_t)__p);
      if (SHIBYTE(v44) < 0)
        operator delete(__p[0]);
      v18 = v42;
      if (v42)
      {
        v19 = (unint64_t *)&v42->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
LABEL_23:
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
        return;
      }
      return;
    }
    v26 = (std::__shared_weak_count *)a5[1];
    v39 = *a5;
    v40 = v26;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    v29 = *(const char **)(a3 + 8 * *a4 + 8);
    v30 = strlen(v29);
    if (v30 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v31 = (void *)v30;
    if (v30 >= 0x17)
    {
      v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17)
        v33 = v30 | 7;
      v34 = v33 + 1;
      v32 = operator new(v33 + 1);
      __p[1] = v31;
      v44 = v34 | 0x8000000000000000;
      __p[0] = v32;
    }
    else
    {
      HIBYTE(v44) = v30;
      v32 = __p;
      if (!v30)
        goto LABEL_36;
    }
    memmove(v32, v29, (size_t)v31);
LABEL_36:
    *((_BYTE *)v31 + (_QWORD)v32) = 0;
    cxxopts::ParseResult::parse_option(a1, &v39, a6, (uint64_t)__p);
    if (SHIBYTE(v44) < 0)
      operator delete(__p[0]);
    v35 = v40;
    if (v40)
    {
      v36 = (unint64_t *)&v40->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    ++*a4;
    return;
  }
  if (!v13)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    cxxopts::missing_argument_exception::missing_argument_exception(exception, a6);
  }
  v21 = *a5;
  v22 = (std::__shared_weak_count *)a5[1];
  v45 = *a5;
  v46 = v22;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    v21 = *a5;
  }
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(v21 + 72) + 72))(__p);
  cxxopts::ParseResult::parse_option(a1, &v45, a6, (uint64_t)__p);
  if (SHIBYTE(v44) < 0)
    operator delete(__p[0]);
  v18 = v46;
  if (v46)
  {
    v25 = (unint64_t *)&v46->__shared_owners_;
    do
      v20 = __ldaxr(v25);
    while (__stlxr(v20 - 1, v25));
    goto LABEL_23;
  }
}

void sub_1910EC528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_1910EC5AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
  {
    operator delete(__p);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

std::string *cxxopts::ParseResult::parse_option(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  std::string *v15;
  unint64_t v16;
  std::string *result;
  __int128 v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  std::string v21;
  std::string v22;

  v22.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  v7 = std::__hash_table<std::__hash_value_type<std::shared_ptr<cxxopts::OptionDetails>,cxxopts::OptionValue>,std::__unordered_map_hasher<std::shared_ptr<cxxopts::OptionDetails>,std::__hash_value_type<std::shared_ptr<cxxopts::OptionDetails>,cxxopts::OptionValue>,std::hash<std::shared_ptr<cxxopts::OptionDetails>>,std::equal_to<std::shared_ptr<cxxopts::OptionDetails>>,true>,std::__unordered_map_equal<std::shared_ptr<cxxopts::OptionDetails>,std::__hash_value_type<std::shared_ptr<cxxopts::OptionDetails>,cxxopts::OptionValue>,std::equal_to<std::shared_ptr<cxxopts::OptionDetails>>,std::hash<std::shared_ptr<cxxopts::OptionDetails>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<cxxopts::OptionDetails>,cxxopts::OptionValue>>>::__emplace_unique_key_args<std::shared_ptr<cxxopts::OptionDetails>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<cxxopts::OptionDetails> const&>,std::tuple<>>(a1 + 88, a2, (uint64_t)&std::piecewise_construct, &v22)+ 4;
  v8 = a2[1];
  v19 = *a2;
  v20 = (std::__shared_weak_count *)v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  cxxopts::OptionValue::parse(v7, &v19, a4);
  v11 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v14 = *a2;
      v15 = (std::string *)(*a2 + 24);
      v16 = *(_QWORD *)(a1 + 144);
      if (v16 < *(_QWORD *)(a1 + 152))
        goto LABEL_9;
LABEL_12:
      result = std::vector<cxxopts::KeyValue>::__emplace_back_slow_path<std::string const&,std::string const&>((std::string **)(a1 + 136), (uint64_t)v15, a4);
      *(_QWORD *)(a1 + 144) = result;
      return result;
    }
  }
  v14 = *a2;
  v15 = (std::string *)(*a2 + 24);
  v16 = *(_QWORD *)(a1 + 144);
  if (v16 >= *(_QWORD *)(a1 + 152))
    goto LABEL_12;
LABEL_9:
  if (*(char *)(v14 + 47) < 0)
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)(v14 + 24), *(_QWORD *)(v14 + 32));
  else
    v22 = *v15;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v21 = *(std::string *)a4;
  v18 = *(_OWORD *)&v22.__r_.__value_.__l.__data_;
  *(_QWORD *)(v16 + 16) = *((_QWORD *)&v22.__r_.__value_.__l + 2);
  *(_OWORD *)v16 = v18;
  *(std::string *)(v16 + 24) = v21;
  result = (std::string *)(v16 + 48);
  *(_QWORD *)(a1 + 144) = v16 + 48;
  *(_QWORD *)(a1 + 144) = v16 + 48;
  return result;
}

void sub_1910EC764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  if (a20 < 0)
  {
    operator delete(__p);
    *(_QWORD *)(v20 + 144) = v21;
    _Unwind_Resume(exception_object);
  }
  *(_QWORD *)(v20 + 144) = v21;
  _Unwind_Resume(exception_object);
}

void sub_1910EC794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t cxxopts::option_syntax_exception::option_syntax_exception(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  std::string::size_type size;
  std::string::value_type *v15;
  int v16;
  void *__p;
  char v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;
  _DWORD v24[2];

  *((_BYTE *)&v20.__r_.__value_.__s + 23) = 3;
  LODWORD(v20.__r_.__value_.__l.__data_) = 9994466;
  v4 = std::string::insert(&v20, 0, "Argument ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a2;
  else
    v7 = *(const std::string::value_type **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::string::append(&v21, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v19 = 3;
  LODWORD(__p) = 10060002;
  v11 = std::string::append(&v22, (const std::string::value_type *)&__p, 3uLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append(&v23, " starts with a - but has incorrect syntax");
  v15 = (std::string::value_type *)v13->__r_.__value_.__r.__words[0];
  size = v13->__r_.__value_.__l.__size_;
  v24[0] = v13->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v24 + 3) = *(_DWORD *)((char *)&v13->__r_.__value_.__r.__words[2] + 3);
  v16 = SHIBYTE(v13->__r_.__value_.__r.__words[2]);
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)a1 = &unk_1E2D5C768;
  if ((v16 & 0x80000000) == 0)
  {
    *(_QWORD *)(a1 + 16) = size;
    *(_DWORD *)(a1 + 24) = v24[0];
    *(_DWORD *)(a1 + 27) = *(_DWORD *)((char *)v24 + 3);
    *(_BYTE *)(a1 + 31) = v16;
    *(_QWORD *)a1 = &unk_1E2D5C7E0;
    *(_QWORD *)(a1 + 8) = v15;
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
  std::string::__init_copy_ctor_external((std::string *)(a1 + 8), v15, size);
  *(_QWORD *)a1 = &unk_1E2D5C7E0;
  operator delete(v15);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
LABEL_9:
    operator delete(v23.__r_.__value_.__l.__data_);
LABEL_10:
  if (v19 < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_13;
LABEL_19:
      operator delete(v21.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_14;
LABEL_20:
      operator delete(v20.__r_.__value_.__l.__data_);
      goto LABEL_14;
    }
  }
  else if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_19;
LABEL_13:
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_20;
LABEL_14:
  *(_QWORD *)a1 = &unk_1E2D5C830;
  return a1;
}

void sub_1910EC9AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::exception *v33;
  void *v34;
  uint64_t v35;

  std::exception::~exception(v33);
  operator delete(v34);
  if (*(char *)(v35 - 41) < 0)
  {
    operator delete(*(void **)(v35 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_11:
  operator delete(a15);
  _Unwind_Resume(a1);
}

void cxxopts::ParseResult::add_to_option(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *exception;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v6 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(*a1, a2);
  if (!v6)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    cxxopts::option_not_exists_exception::option_not_exists_exception(exception, a2);
  }
  v7 = v6[6];
  v14 = v6[5];
  v15 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  cxxopts::ParseResult::parse_option((uint64_t)a1, &v14, a2, a3);
  v10 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1910ECB64(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1910ECB78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t cxxopts::option_not_exists_exception::option_not_exists_exception(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  std::string::size_type size;
  std::string::value_type *v15;
  int v16;
  void *__p;
  char v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;
  _DWORD v24[2];

  *((_BYTE *)&v20.__r_.__value_.__s + 23) = 3;
  LODWORD(v20.__r_.__value_.__l.__data_) = 9994466;
  v4 = std::string::insert(&v20, 0, "Option ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a2;
  else
    v7 = *(const std::string::value_type **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::string::append(&v21, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v19 = 3;
  LODWORD(__p) = 10060002;
  v11 = std::string::append(&v22, (const std::string::value_type *)&__p, 3uLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append(&v23, " does not exist");
  v15 = (std::string::value_type *)v13->__r_.__value_.__r.__words[0];
  size = v13->__r_.__value_.__l.__size_;
  v24[0] = v13->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v24 + 3) = *(_DWORD *)((char *)&v13->__r_.__value_.__r.__words[2] + 3);
  v16 = SHIBYTE(v13->__r_.__value_.__r.__words[2]);
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)a1 = &unk_1E2D5C768;
  if ((v16 & 0x80000000) == 0)
  {
    *(_QWORD *)(a1 + 16) = size;
    *(_DWORD *)(a1 + 24) = v24[0];
    *(_DWORD *)(a1 + 27) = *(_DWORD *)((char *)v24 + 3);
    *(_BYTE *)(a1 + 31) = v16;
    *(_QWORD *)a1 = &unk_1E2D5C7E0;
    *(_QWORD *)(a1 + 8) = v15;
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
  std::string::__init_copy_ctor_external((std::string *)(a1 + 8), v15, size);
  *(_QWORD *)a1 = &unk_1E2D5C7E0;
  operator delete(v15);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
LABEL_9:
    operator delete(v23.__r_.__value_.__l.__data_);
LABEL_10:
  if (v19 < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_13;
LABEL_19:
      operator delete(v21.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_14;
LABEL_20:
      operator delete(v20.__r_.__value_.__l.__data_);
      goto LABEL_14;
    }
  }
  else if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_19;
LABEL_13:
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_20;
LABEL_14:
  *(_QWORD *)a1 = &unk_1E2D5C8A8;
  return a1;
}

void sub_1910ECD90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::exception *v33;
  void *v34;
  uint64_t v35;

  std::exception::~exception(v33);
  operator delete(v34);
  if (*(char *)(v35 - 41) < 0)
  {
    operator delete(*(void **)(v35 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_11:
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t cxxopts::missing_argument_exception::missing_argument_exception(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  std::string::size_type size;
  std::string::value_type *v15;
  int v16;
  void *__p;
  char v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;
  _DWORD v24[2];

  *((_BYTE *)&v20.__r_.__value_.__s + 23) = 3;
  LODWORD(v20.__r_.__value_.__l.__data_) = 9994466;
  v4 = std::string::insert(&v20, 0, "Option ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a2;
  else
    v7 = *(const std::string::value_type **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::string::append(&v21, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v19 = 3;
  LODWORD(__p) = 10060002;
  v11 = std::string::append(&v22, (const std::string::value_type *)&__p, 3uLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append(&v23, " is missing an argument");
  v15 = (std::string::value_type *)v13->__r_.__value_.__r.__words[0];
  size = v13->__r_.__value_.__l.__size_;
  v24[0] = v13->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v24 + 3) = *(_DWORD *)((char *)&v13->__r_.__value_.__r.__words[2] + 3);
  v16 = SHIBYTE(v13->__r_.__value_.__r.__words[2]);
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)a1 = &unk_1E2D5C768;
  if ((v16 & 0x80000000) == 0)
  {
    *(_QWORD *)(a1 + 16) = size;
    *(_DWORD *)(a1 + 24) = v24[0];
    *(_DWORD *)(a1 + 27) = *(_DWORD *)((char *)v24 + 3);
    *(_BYTE *)(a1 + 31) = v16;
    *(_QWORD *)a1 = &unk_1E2D5C7E0;
    *(_QWORD *)(a1 + 8) = v15;
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
  std::string::__init_copy_ctor_external((std::string *)(a1 + 8), v15, size);
  *(_QWORD *)a1 = &unk_1E2D5C7E0;
  operator delete(v15);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
LABEL_9:
    operator delete(v23.__r_.__value_.__l.__data_);
LABEL_10:
  if (v19 < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_13;
LABEL_19:
      operator delete(v21.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_14;
LABEL_20:
      operator delete(v20.__r_.__value_.__l.__data_);
      goto LABEL_14;
    }
  }
  else if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_19;
LABEL_13:
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_20;
LABEL_14:
  *(_QWORD *)a1 = &unk_1E2D5C858;
  return a1;
}

void sub_1910ED064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::exception *v33;
  void *v34;
  uint64_t v35;

  std::exception::~exception(v33);
  operator delete(v34);
  if (*(char *)(v35 - 41) < 0)
  {
    operator delete(*(void **)(v35 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_11:
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t cxxopts::OptionValue::parse(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v19;
  __int128 v20;

  v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  v19 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (!*a1)
  {
    (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(v5 + 72) + 16))(&v20);
    v9 = v20;
    v20 = 0uLL;
    v10 = (std::__shared_weak_count *)a1[1];
    *(_OWORD *)a1 = v9;
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (*((_QWORD *)&v20 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v6 = v19;
  }
  if (v6)
  {
    v16 = (unint64_t *)&v6->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  ++a1[2];
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 24))(*a1, a3);
}

void sub_1910ED270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *std::vector<cxxopts::KeyValue>::__emplace_back_slow_path<std::string const&,std::string const&>(std::string **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  __int128 v15;
  __int128 v16;
  std::string *v17;
  std::string *v18;
  BOOL v19;
  std::string *v21;
  std::string v22;
  std::string v23;

  v4 = (char *)a1[1] - (char *)*a1;
  v5 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 4) + 1;
  if (v5 > 0x555555555555555)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 4) > v5)
    v5 = 0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1[2] - (char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v8 = 0x555555555555555;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(48 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (std::string *)&v9[16 * (v4 >> 4)];
  v11 = (std::string *)&v9[48 * v8];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v23 = *(std::string *)a2;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v22 = *(std::string *)a3;
  *v10 = v23;
  *(std::string *)&v9[v4 + 24] = v22;
  v12 = v10 + 2;
  v21 = v10 + 2;
  v14 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    v17 = a1[1];
  }
  else
  {
    do
    {
      v15 = *(_OWORD *)&v13[-2].__r_.__value_.__l.__data_;
      v10[-2].__r_.__value_.__r.__words[2] = v13[-2].__r_.__value_.__r.__words[2];
      *(_OWORD *)&v10[-2].__r_.__value_.__l.__data_ = v15;
      v13[-2].__r_.__value_.__l.__size_ = 0;
      v13[-2].__r_.__value_.__r.__words[2] = 0;
      v13[-2].__r_.__value_.__r.__words[0] = 0;
      v16 = *(_OWORD *)&v13[-1].__r_.__value_.__l.__data_;
      v10[-1].__r_.__value_.__r.__words[2] = v13[-1].__r_.__value_.__r.__words[2];
      *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v16;
      v10 -= 2;
      v13[-1].__r_.__value_.__l.__size_ = 0;
      v13[-1].__r_.__value_.__r.__words[2] = 0;
      v13[-1].__r_.__value_.__r.__words[0] = 0;
      v13 -= 2;
    }
    while (v13 != v14);
    v17 = *a1;
    v13 = a1[1];
    v12 = v21;
  }
  *a1 = v10;
  a1[1] = v12;
  a1[2] = v11;
  if (v13 != v17)
  {
    v18 = v13 - 2;
    while (1)
    {
      if (SHIBYTE(v18[1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v18[1].__r_.__value_.__l.__data_);
        if (SHIBYTE(v18->__r_.__value_.__r.__words[2]) < 0)
LABEL_28:
          operator delete(v18->__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(v18->__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_28;
      }
      v19 = v18 == v17;
      v18 -= 2;
      if (v19)
      {
        v13 = v17;
        break;
      }
    }
  }
  if (v13)
    operator delete(v13);
  return v12;
}

void sub_1910ED4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    std::__split_buffer<cxxopts::KeyValue>::~__split_buffer((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  std::__split_buffer<cxxopts::KeyValue>::~__split_buffer((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<cxxopts::KeyValue>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      if ((*(char *)(i - 25) & 0x80000000) == 0)
        continue;
    }
    else if ((*(char *)(i - 25) & 0x80000000) == 0)
    {
      continue;
    }
    operator delete(*(void **)(i - 48));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t cxxopts::option_requires_argument_exception::option_requires_argument_exception(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  std::string::size_type size;
  std::string::value_type *v15;
  int v16;
  void *__p;
  char v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;
  _DWORD v24[2];

  *((_BYTE *)&v20.__r_.__value_.__s + 23) = 3;
  LODWORD(v20.__r_.__value_.__l.__data_) = 9994466;
  v4 = std::string::insert(&v20, 0, "Option ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a2;
  else
    v7 = *(const std::string::value_type **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::string::append(&v21, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v19 = 3;
  LODWORD(__p) = 10060002;
  v11 = std::string::append(&v22, (const std::string::value_type *)&__p, 3uLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append(&v23, " requires an argument");
  v15 = (std::string::value_type *)v13->__r_.__value_.__r.__words[0];
  size = v13->__r_.__value_.__l.__size_;
  v24[0] = v13->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v24 + 3) = *(_DWORD *)((char *)&v13->__r_.__value_.__r.__words[2] + 3);
  v16 = SHIBYTE(v13->__r_.__value_.__r.__words[2]);
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)a1 = &unk_1E2D5C768;
  if ((v16 & 0x80000000) == 0)
  {
    *(_QWORD *)(a1 + 16) = size;
    *(_DWORD *)(a1 + 24) = v24[0];
    *(_DWORD *)(a1 + 27) = *(_DWORD *)((char *)v24 + 3);
    *(_BYTE *)(a1 + 31) = v16;
    *(_QWORD *)a1 = &unk_1E2D5C7E0;
    *(_QWORD *)(a1 + 8) = v15;
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
  std::string::__init_copy_ctor_external((std::string *)(a1 + 8), v15, size);
  *(_QWORD *)a1 = &unk_1E2D5C7E0;
  operator delete(v15);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
LABEL_9:
    operator delete(v23.__r_.__value_.__l.__data_);
LABEL_10:
  if (v19 < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_13;
LABEL_19:
      operator delete(v21.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_14;
LABEL_20:
      operator delete(v20.__r_.__value_.__l.__data_);
      goto LABEL_14;
    }
  }
  else if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_19;
LABEL_13:
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_20;
LABEL_14:
  *(_QWORD *)a1 = &unk_1E2D5C8F8;
  return a1;
}

void sub_1910ED77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::exception *v33;
  void *v34;
  uint64_t v35;

  std::exception::~exception(v33);
  operator delete(v34);
  if (*(char *)(v35 - 41) < 0)
  {
    operator delete(*(void **)(v35 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_11:
  operator delete(a15);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::shared_ptr<cxxopts::OptionDetails>,cxxopts::OptionValue>,std::__unordered_map_hasher<std::shared_ptr<cxxopts::OptionDetails>,std::__hash_value_type<std::shared_ptr<cxxopts::OptionDetails>,cxxopts::OptionValue>,std::hash<std::shared_ptr<cxxopts::OptionDetails>>,std::equal_to<std::shared_ptr<cxxopts::OptionDetails>>,true>,std::__unordered_map_equal<std::shared_ptr<cxxopts::OptionDetails>,std::__hash_value_type<std::shared_ptr<cxxopts::OptionDetails>,cxxopts::OptionValue>,std::equal_to<std::shared_ptr<cxxopts::OptionDetails>>,std::hash<std::shared_ptr<cxxopts::OptionDetails>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<cxxopts::OptionDetails>,cxxopts::OptionValue>>>::__emplace_unique_key_args<std::shared_ptr<cxxopts::OptionDetails>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<cxxopts::OptionDetails> const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD **v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  float v23;
  float v24;
  uint64_t v25;
  _QWORD *v26;
  _BOOL8 v27;
  unint64_t v28;
  unint64_t v29;
  size_t prime;
  int8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;

  v7 = *a2;
  v8 = HIDWORD(*a2);
  v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7)
                return v14;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_23;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  v17 = (_QWORD *)(a1 + 16);
  v18 = operator new(0x38uLL);
  v14 = v18;
  *v18 = 0;
  v18[1] = v10;
  v19 = *a4;
  v18[2] = **a4;
  v20 = v19[1];
  v18[3] = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v18[4] = 0;
  v18[5] = 0;
  v18[6] = 0;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (v11 && (float)(v24 * (float)v11) >= v23)
  {
    v25 = *(_QWORD *)a1;
    v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v26)
    {
LABEL_29:
      *v14 = *v26;
LABEL_64:
      *v26 = v14;
      goto LABEL_65;
    }
  }
  else
  {
    v27 = 1;
    if (v11 >= 3)
      v27 = (v11 & (v11 - 1)) != 0;
    v28 = v27 | (2 * v11);
    v29 = vcvtps_u32_f32(v23 / v24);
    if (v28 <= v29)
      prime = v29;
    else
      prime = v28;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v31 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v31)
      goto LABEL_40;
    if (prime < *(_QWORD *)&v31)
    {
      v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v31 < 3uLL || (v33 = (uint8x8_t)vcnt_s8(v31), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (prime <= v32)
        prime = v32;
      if (prime < *(_QWORD *)&v31)
LABEL_40:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v35 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v25 = *(_QWORD *)a1;
        v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v26)
          goto LABEL_29;
      }
      else
      {
        v4 = v10;
        v25 = *(_QWORD *)a1;
        v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v26)
          goto LABEL_29;
      }
    }
    else
    {
      v4 = v35 & v10;
      v25 = *(_QWORD *)a1;
      v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v35 & v10));
      if (v26)
        goto LABEL_29;
    }
  }
  *v14 = *v17;
  *v17 = v14;
  *(_QWORD *)(v25 + 8 * v4) = v17;
  if (*v14)
  {
    v36 = *(_QWORD *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v36 >= v11)
        v36 %= v11;
    }
    else
    {
      v36 &= v11 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v36);
    goto LABEL_64;
  }
LABEL_65:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_1910EDBC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t cxxopts::OptionValue::parse_default(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  __int128 v18;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  v17 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (!*a1)
  {
    (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(v3 + 72) + 16))(&v18);
    v7 = v18;
    v18 = 0uLL;
    v8 = (std::__shared_weak_count *)a1[1];
    *(_OWORD *)a1 = v7;
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
    if (*((_QWORD *)&v18 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v4 = v17;
  }
  if (v4)
  {
    v14 = (unint64_t *)&v4->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
}

void sub_1910EDCFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t cxxopts::option_not_present_exception::option_not_present_exception(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  std::string::size_type size;
  std::string::value_type *v15;
  int v16;
  void *__p;
  char v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;
  _DWORD v24[2];

  *((_BYTE *)&v20.__r_.__value_.__s + 23) = 3;
  LODWORD(v20.__r_.__value_.__l.__data_) = 9994466;
  v4 = std::string::insert(&v20, 0, "Option ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a2;
  else
    v7 = *(const std::string::value_type **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::string::append(&v21, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v19 = 3;
  LODWORD(__p) = 10060002;
  v11 = std::string::append(&v22, (const std::string::value_type *)&__p, 3uLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append(&v23, " not present");
  v15 = (std::string::value_type *)v13->__r_.__value_.__r.__words[0];
  size = v13->__r_.__value_.__l.__size_;
  v24[0] = v13->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v24 + 3) = *(_DWORD *)((char *)&v13->__r_.__value_.__r.__words[2] + 3);
  v16 = SHIBYTE(v13->__r_.__value_.__r.__words[2]);
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)a1 = &unk_1E2D5C768;
  if ((v16 & 0x80000000) == 0)
  {
    *(_QWORD *)(a1 + 16) = size;
    *(_DWORD *)(a1 + 24) = v24[0];
    *(_DWORD *)(a1 + 27) = *(_DWORD *)((char *)v24 + 3);
    *(_BYTE *)(a1 + 31) = v16;
    *(_QWORD *)a1 = &unk_1E2D5C7E0;
    *(_QWORD *)(a1 + 8) = v15;
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
  std::string::__init_copy_ctor_external((std::string *)(a1 + 8), v15, size);
  *(_QWORD *)a1 = &unk_1E2D5C7E0;
  operator delete(v15);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
LABEL_9:
    operator delete(v23.__r_.__value_.__l.__data_);
LABEL_10:
  if (v19 < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_13;
LABEL_19:
      operator delete(v21.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_14;
LABEL_20:
      operator delete(v20.__r_.__value_.__l.__data_);
      goto LABEL_14;
    }
  }
  else if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_19;
LABEL_13:
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_20;
LABEL_14:
  *(_QWORD *)a1 = &unk_1E2D5C8D0;
  return a1;
}

void sub_1910EDF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::exception *v33;
  void *v34;
  uint64_t v35;

  std::exception::~exception(v33);
  operator delete(v34);
  if (*(char *)(v35 - 41) < 0)
  {
    operator delete(*(void **)(v35 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_11:
  operator delete(a15);
  _Unwind_Resume(a1);
}

void cxxopts::ParseResult::~ParseResult(cxxopts::ParseResult *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void **v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void **v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  v2 = *((_QWORD *)this + 17);
  if (v2)
  {
    v3 = *((_QWORD *)this + 18);
    v4 = (void *)*((_QWORD *)this + 17);
    if (v3 == v2)
    {
LABEL_11:
      *((_QWORD *)this + 18) = v2;
      operator delete(v4);
      goto LABEL_12;
    }
    while (1)
    {
      if (*(char *)(v3 - 1) < 0)
      {
        operator delete(*(void **)(v3 - 24));
        if (*(char *)(v3 - 25) < 0)
LABEL_9:
          operator delete(*(void **)(v3 - 48));
      }
      else if (*(char *)(v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 48;
      if (v3 == v2)
      {
        v4 = (void *)*((_QWORD *)this + 17);
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 88);
  v5 = (void **)*((_QWORD *)this + 8);
  if (v5)
  {
    do
    {
      v10 = (void **)*v5;
      if (*((char *)v5 + 39) < 0)
        operator delete(v5[2]);
      operator delete(v5);
      v5 = v10;
    }
    while (v10);
  }
  v6 = (void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v6)
    operator delete(v6);
  v7 = *((_QWORD *)this + 2);
  if (v7)
  {
    v8 = *((_QWORD *)this + 3);
    v9 = (void *)*((_QWORD *)this + 2);
    if (v8 != v7)
    {
      do
      {
        if (*(char *)(v8 - 1) < 0)
          operator delete(*(void **)(v8 - 24));
        v8 -= 24;
      }
      while (v8 != v7);
      v9 = (void *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 3) = v7;
    operator delete(v9);
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void cxxopts::Options::~Options(cxxopts::Options *this)
{
  void **v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void **v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  std::__tree<std::__value_type<std::string,cxxopts::HelpGroupDetails>,std::__map_value_compare<std::string,std::__value_type<std::string,cxxopts::HelpGroupDetails>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,cxxopts::HelpGroupDetails>>>::destroy((uint64_t)this + 192, *((_QWORD **)this + 25));
  v2 = (void **)*((_QWORD *)this + 21);
  if (v2)
  {
    do
    {
      v7 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v7;
    }
    while (v7);
  }
  v3 = (void *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v3)
    operator delete(v3);
  v4 = *((_QWORD *)this + 15);
  if (v4)
  {
    v5 = *((_QWORD *)this + 16);
    v6 = (void *)*((_QWORD *)this + 15);
    if (v5 != v4)
    {
      do
      {
        if (*(char *)(v5 - 1) < 0)
          operator delete(*(void **)(v5 - 24));
        v5 -= 24;
      }
      while (v5 != v4);
      v6 = (void *)*((_QWORD *)this + 15);
    }
    *((_QWORD *)this + 16) = v4;
    operator delete(v6);
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (!v8)
    goto LABEL_19;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if ((*((char *)this + 95) & 0x80000000) == 0)
    {
LABEL_20:
      if ((*((char *)this + 71) & 0x80000000) == 0)
        goto LABEL_21;
      goto LABEL_26;
    }
  }
  else
  {
LABEL_19:
    if ((*((char *)this + 95) & 0x80000000) == 0)
      goto LABEL_20;
  }
  operator delete(*((void **)this + 9));
  if ((*((char *)this + 71) & 0x80000000) == 0)
  {
LABEL_21:
    if ((*((char *)this + 47) & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_27;
  }
LABEL_26:
  operator delete(*((void **)this + 6));
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_22:
    if ((*((char *)this + 23) & 0x80000000) == 0)
      return;
LABEL_28:
    operator delete(*(void **)this);
    return;
  }
LABEL_27:
  operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    goto LABEL_28;
}

void cxxopts::Options::groups(cxxopts::Options *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  char *v3;
  unint64_t v5;
  __int128 v6;
  char *v7;
  char *v8;
  int v9;
  char *v10;
  BOOL v11;
  std::string __p;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v2 = (_QWORD *)*((_QWORD *)this + 24);
  v3 = (char *)this + 200;
  if (v2 != (_QWORD *)((char *)this + 200))
  {
    do
    {
      if (*((char *)v2 + 55) < 0)
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v2[4], v2[5]);
      else
        __p = *(std::string *)(v2 + 4);
      v5 = *(_QWORD *)(a2 + 8);
      if (v5 >= *(_QWORD *)(a2 + 16))
      {
        v8 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a2, (uint64_t)&__p);
        v9 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        *(_QWORD *)(a2 + 8) = v8;
        if (v9 < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          v7 = (char *)v2[1];
          if (v7)
          {
            do
            {
LABEL_12:
              v10 = v7;
              v7 = *(char **)v7;
            }
            while (v7);
            goto LABEL_3;
          }
        }
        else
        {
          v7 = (char *)v2[1];
          if (v7)
            goto LABEL_12;
        }
      }
      else
      {
        v6 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v5 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v5 = v6;
        *(_QWORD *)(a2 + 8) = v5 + 24;
        v7 = (char *)v2[1];
        if (v7)
          goto LABEL_12;
      }
      do
      {
        v10 = (char *)v2[2];
        v11 = *(_QWORD *)v10 == (_QWORD)v2;
        v2 = v10;
      }
      while (!v11);
LABEL_3:
      v2 = v10;
    }
    while (v10 != v3);
  }
}

void sub_1910EE3B4(_Unwind_Exception *a1)
{
  void **v1;

  std::vector<std::string>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1910EE3C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void **v14;

  if (a14 < 0)
    operator delete(__p);
  std::vector<std::string>::~vector[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

void cxxopts::Options::help(uint64_t a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>)
{
  int v4;
  size_t v5;
  unint64_t v6;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  std::string::size_type size;
  std::string __dst;
  std::string v28;
  std::string v29;
  std::string v30;

  v4 = *(char *)(a1 + 47);
  if (v4 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 47);
  else
    v5 = *(_QWORD *)(a1 + 32);
  v6 = v5 + 10;
  if (v5 + 10 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v6 >= 0x17)
  {
    v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v10 = v6 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v5 + 10;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5 + 10;
    if (!v5)
      goto LABEL_15;
  }
  if (v4 >= 0)
    v12 = (const void *)(a1 + 24);
  else
    v12 = *(const void **)(a1 + 24);
  memmove(p_dst, v12, v5);
LABEL_15:
  strcpy((char *)p_dst + v5, "\nUsage:\n  ");
  v13 = *(char *)(a1 + 23);
  if (v13 >= 0)
    v14 = (const std::string::value_type *)a1;
  else
    v14 = *(const std::string::value_type **)a1;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a1 + 23);
  else
    v15 = *(_QWORD *)(a1 + 8);
  v16 = std::string::append(&__dst, v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v28, " ");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = *(char *)(a1 + 71);
  if (v20 >= 0)
    v21 = (const std::string::value_type *)(a1 + 48);
  else
    v21 = *(const std::string::value_type **)(a1 + 48);
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(a1 + 71);
  else
    v22 = *(_QWORD *)(a1 + 56);
  v23 = std::string::append(&v29, v21, v22);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v29.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_29:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_30;
LABEL_34:
      operator delete(__dst.__r_.__value_.__l.__data_);
      if (*(_QWORD *)(a1 + 128) == *(_QWORD *)(a1 + 120))
        goto LABEL_47;
      goto LABEL_35;
    }
  }
  else if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_29;
  }
  operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_34;
LABEL_30:
  if (*(_QWORD *)(a1 + 128) == *(_QWORD *)(a1 + 120))
    goto LABEL_47;
LABEL_35:
  if (*(char *)(a1 + 95) < 0)
  {
    if (!*(_QWORD *)(a1 + 80))
      goto LABEL_47;
  }
  else if (!*(_BYTE *)(a1 + 95))
  {
    goto LABEL_47;
  }
  std::operator+<char>();
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = &v29;
  else
    v25 = (std::string *)v29.__r_.__value_.__r.__words[0];
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  else
    size = v29.__r_.__value_.__l.__size_;
  std::string::append(&v30, (const std::string::value_type *)v25, size);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
LABEL_47:
  std::string::append(&v30, "\n\n");
  if (a2[1] == *a2)
    cxxopts::Options::generate_all_groups_help(a1, &v30);
  else
    cxxopts::Options::generate_group_help(a1, &v30, a2);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a3, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
  }
  else
  {
    *a3 = v30;
  }
}

void sub_1910EE6BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

void cxxopts::Options::generate_all_groups_help(uint64_t a1, std::string *a2)
{
  _QWORD *v4;
  std::vector<std::string>::pointer end;
  __int128 *v6;
  __int128 v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  std::string *begin;
  uint64_t v12;
  unint64_t v13;
  std::string::size_type v14;
  const std::string::value_type *v15;
  std::vector<std::string> v16;
  void *__p[2];
  unsigned __int8 v18;

  memset(&v16, 0, sizeof(v16));
  std::vector<std::string>::reserve(&v16, *(_QWORD *)(a1 + 208));
  v4 = *(_QWORD **)(a1 + 192);
  if (v4 != (_QWORD *)(a1 + 200))
  {
    end = v16.__end_;
    while (1)
    {
      v6 = (__int128 *)(v4 + 4);
      if (end >= v16.__end_cap_.__value_)
      {
        end = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v16, (uint64_t)v6);
        v16.__end_ = end;
        v8 = (_QWORD *)v4[1];
        if (v8)
          goto LABEL_11;
      }
      else if (*((char *)v4 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(end++, (const std::string::value_type *)v4[4], v4[5]);
        v16.__end_ = end;
        v8 = (_QWORD *)v4[1];
        if (v8)
        {
          do
          {
LABEL_11:
            v9 = v8;
            v8 = (_QWORD *)*v8;
          }
          while (v8);
          goto LABEL_3;
        }
      }
      else
      {
        v7 = *v6;
        end->__r_.__value_.__r.__words[2] = v4[6];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v7;
        v16.__end_ = ++end;
        v8 = (_QWORD *)v4[1];
        if (v8)
          goto LABEL_11;
      }
      do
      {
        v9 = (_QWORD *)v4[2];
        v10 = *v9 == (_QWORD)v4;
        v4 = v9;
      }
      while (!v10);
LABEL_3:
      v4 = v9;
      if (v9 == (_QWORD *)(a1 + 200))
        goto LABEL_17;
    }
  }
  end = v16.__end_;
LABEL_17:
  begin = end;
  if (end != v16.__begin_)
  {
    v12 = 0;
    v13 = 0;
    begin = v16.__begin_;
    do
    {
      cxxopts::Options::help_one_group(a1, (uint64_t)&begin[v12], (uint64_t)__p);
      if ((v18 & 0x80u) == 0)
        v14 = v18;
      else
        v14 = (std::string::size_type)__p[1];
      if (v14)
      {
        v15 = (v18 & 0x80u) == 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
        std::string::append(a2, v15, v14);
        if (v13 < -1 - 0x5555555555555555 * (((char *)v16.__end_ - (char *)v16.__begin_) >> 3))
          std::string::push_back(a2, 10);
      }
      if ((char)v18 < 0)
        operator delete(__p[0]);
      ++v13;
      begin = v16.__begin_;
      end = v16.__end_;
      ++v12;
    }
    while (v13 != 0xAAAAAAAAAAAAAAABLL * (((char *)v16.__end_ - (char *)v16.__begin_) >> 3));
  }
  if (begin)
  {
    if (end != begin)
    {
      do
      {
        if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(end[-1].__r_.__value_.__l.__data_);
        --end;
      }
      while (end != begin);
      end = v16.__begin_;
    }
    v16.__end_ = begin;
    operator delete(end);
  }
}

void sub_1910EE980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::vector<std::string>::~vector[abi:ne180100]((void **)&a9);
  _Unwind_Resume(a1);
}

void cxxopts::Options::generate_group_help(uint64_t a1, std::string *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  std::string::size_type v9;
  const std::string::value_type *v10;
  void *__p[2];
  unsigned __int8 v12;

  v3 = *a3;
  if (a3[1] != *a3)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      cxxopts::Options::help_one_group(a1, v3 + v7, (uint64_t)__p);
      if ((v12 & 0x80u) == 0)
        v9 = v12;
      else
        v9 = (std::string::size_type)__p[1];
      if (v9)
      {
        v10 = (v12 & 0x80u) == 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
        std::string::append(a2, v10, v9);
        if (v8 < -1 - 0x5555555555555555 * ((a3[1] - *a3) >> 3))
          std::string::push_back(a2, 10);
      }
      if ((char)v12 < 0)
        operator delete(__p[0]);
      ++v8;
      v3 = *a3;
      v7 += 24;
    }
    while (v8 != 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  }
}

void sub_1910EEADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void cxxopts::Options::help_one_group(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  size_t v7;
  const void *v8;
  uint64_t v9;
  int v10;
  size_t v11;
  const void *v12;
  size_t v13;
  int v14;
  _BOOL4 v15;
  BOOL v16;
  uint64_t *v17;
  int v18;
  size_t v19;
  const void *v20;
  size_t v21;
  int v22;
  _BOOL4 v23;
  std::string *v24;
  std::string::size_type v25;
  std::string::size_type v26;
  std::string *p_p;
  std::string::size_type v28;
  _BYTE *v29;
  _BYTE *v30;
  unint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  std::string::size_type size;
  uint64_t v39;
  std::string *v40;
  std::string::size_type v41;
  _BYTE *v42;
  int v43;
  __int128 v44;
  std::string::size_type v45;
  std::string *v46;
  __int128 v47;
  int v48;
  const std::string::value_type *v49;
  std::string::size_type v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  std::string::size_type v56;
  std::string *p_b;
  std::string::size_type v58;
  void *v59;
  std::string::size_type v60;
  char *v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  unint64_t v68;
  std::string::size_type v69;
  uint64_t v70;
  uint64_t **v71;
  int v72;
  int v73;
  int v74;
  std::string *v76;
  std::string::size_type v77;
  std::string::size_type v78;
  std::string *v79;
  std::string::size_type v80;
  std::string::size_type v81;
  std::string *v82;
  unint64_t v83;
  char *v84;
  unint64_t v85;
  char *v86;
  std::string::size_type v87;
  std::string *v88;
  int v89;
  std::string *v90;
  int v91;
  const std::string::value_type *v92;
  std::string::size_type v93;
  unint64_t v94;
  unint64_t v95;
  BOOL v96;
  unint64_t v97;
  void *v98;
  std::string::size_type v99;
  _BYTE *v100;
  std::string *v101;
  std::string::size_type v102;
  std::string *v103;
  std::string::size_type v104;
  uint64_t v105;
  uint64_t v106;
  std::string *v107;
  std::string::size_type v108;
  char *v109;
  void *v110;
  unint64_t v111;
  size_t __sz;
  uint64_t v113;
  std::string *v114;
  _QWORD *v116;
  std::string __p;
  __int128 v118;
  uint64_t v119;
  std::string v120;
  void *v121;
  char *v122;
  unint64_t v123;
  std::string v124;
  std::string __b;
  std::string v126;
  std::string v127;
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  v4 = a1 + 200;
  v5 = *(_QWORD *)(a1 + 200);
  if (!v5)
    goto LABEL_40;
  v6 = *(char *)(a2 + 23);
  v7 = v6 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
  v8 = v6 >= 0 ? (const void *)a2 : *(const void **)a2;
  v9 = a1 + 200;
  do
  {
    v10 = *(char *)(v5 + 55);
    if (v10 >= 0)
      v11 = *(unsigned __int8 *)(v5 + 55);
    else
      v11 = *(_QWORD *)(v5 + 40);
    if (v10 >= 0)
      v12 = (const void *)(v5 + 32);
    else
      v12 = *(const void **)(v5 + 32);
    if (v7 >= v11)
      v13 = v11;
    else
      v13 = v7;
    v14 = memcmp(v12, v8, v13);
    v15 = v11 < v7;
    if (v14)
      v15 = v14 < 0;
    v16 = !v15;
    if (v15)
      v17 = (uint64_t *)(v5 + 8);
    else
      v17 = (uint64_t *)v5;
    if (v16)
      v9 = v5;
    v5 = *v17;
  }
  while (*v17);
  if (v9 == v4)
    goto LABEL_40;
  v18 = *(char *)(v9 + 55);
  if (v18 >= 0)
    v19 = *(unsigned __int8 *)(v9 + 55);
  else
    v19 = *(_QWORD *)(v9 + 40);
  if (v18 >= 0)
    v20 = (const void *)(v9 + 32);
  else
    v20 = *(const void **)(v9 + 32);
  if (v19 >= v7)
    v21 = v7;
  else
    v21 = v19;
  v22 = memcmp(v8, v20, v21);
  v23 = v7 < v19;
  if (v22)
    v23 = v22 < 0;
  if (v23)
  {
LABEL_40:
    *(_BYTE *)(a3 + 23) = 0;
    *(_BYTE *)a3 = 0;
    return;
  }
  v121 = 0;
  v122 = 0;
  v123 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v114 = (std::string *)a3;
  if (v7)
  {
    std::operator+<char>();
    v24 = std::string::append(&__b, " options:\n");
    v25 = v24->__r_.__value_.__r.__words[0];
    v127.__r_.__value_.__r.__words[0] = v24->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v127.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v24->__r_.__value_.__r.__words[1] + 7);
    v26 = HIBYTE(v24->__r_.__value_.__r.__words[2]);
    v24->__r_.__value_.__r.__words[0] = 0;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v127.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__r.__words[0] = v25;
    __p.__r_.__value_.__l.__size_ = v127.__r_.__value_.__r.__words[0];
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v26;
    if ((v26 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)v25;
    if ((v26 & 0x80u) == 0)
      v28 = v26;
    else
      v28 = v127.__r_.__value_.__r.__words[0];
    std::string::append((std::string *)a3, (const std::string::value_type *)p_p, v28);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__b.__r_.__value_.__l.__data_);
  }
  v29 = *(_BYTE **)(v9 + 104);
  v30 = *(_BYTE **)(v9 + 112);
  if (v29 == v30)
  {
LABEL_252:
    v67 = (char *)v121;
    goto LABEL_253;
  }
  v31 = 0;
  v116 = (_QWORD *)(a1 + 152);
  v32 = v29 + 161;
  do
  {
    if (!*(v32 - 1)
      || !std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v116, (uint64_t)(v32 - 137))|| *(_BYTE *)(a1 + 96))
    {
      *((_BYTE *)&v120.__r_.__value_.__s + 23) = 2;
      strcpy((char *)&v120, "  ");
      v34 = *(v32 - 138);
      if ((v34 & 0x80u) != 0)
        v34 = *(_QWORD *)(v32 - 153);
      if (!v34)
      {
        std::string::append(&v120, "   ");
        goto LABEL_75;
      }
      std::operator+<char>();
      v35 = std::string::append(&__b, ",");
      v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v37 = &__p;
      else
        v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::string::append(&v120, (const std::string::value_type *)v37, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_75;
      }
      else if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_75;
      }
      operator delete(__b.__r_.__value_.__l.__data_);
LABEL_75:
      v39 = *(v32 - 114);
      if ((v39 & 0x80u) != 0)
        v39 = *(_QWORD *)(v32 - 129);
      if (v39
        && ((std::operator+<char>(), (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          ? (v40 = &__p)
          : (v40 = (std::string *)__p.__r_.__value_.__r.__words[0]),
            (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? (v41 = HIBYTE(__p.__r_.__value_.__r.__words[2]))
          : (v41 = __p.__r_.__value_.__l.__size_),
            std::string::append(&v120, (const std::string::value_type *)v40, v41),
            SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0))
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        v42 = v32 - 25;
        v43 = (char)*(v32 - 2);
        if ((v43 & 0x80000000) == 0)
        {
LABEL_86:
          if (v43)
          {
            v44 = *(_OWORD *)v42;
            __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v42 + 2);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v44;
            if (*v32)
              goto LABEL_125;
            goto LABEL_94;
          }
          goto LABEL_93;
        }
      }
      else
      {
        v42 = v32 - 25;
        v43 = (char)*(v32 - 2);
        if ((v43 & 0x80000000) == 0)
          goto LABEL_86;
      }
      v45 = *(_QWORD *)(v32 - 17);
      if (v45)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v42, v45);
        if (*v32)
          goto LABEL_125;
        goto LABEL_94;
      }
LABEL_93:
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 3;
      LODWORD(__p.__r_.__value_.__l.__data_) = 6779489;
      if (*v32)
        goto LABEL_125;
LABEL_94:
      if (!*(v32 - 57))
      {
        std::operator+<char>();
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_b = &__b;
        else
          p_b = (std::string *)__b.__r_.__value_.__r.__words[0];
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v58 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
        else
          v58 = __b.__r_.__value_.__l.__size_;
        std::string::append(&v120, (const std::string::value_type *)p_b, v58);
        if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_125:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v60 = HIBYTE(v120.__r_.__value_.__r.__words[2]);
          if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v60 = v120.__r_.__value_.__l.__size_;
          if (v31 <= v60)
            v31 = v60;
          if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&__p, v120.__r_.__value_.__l.__data_, v120.__r_.__value_.__l.__size_);
          else
            __p = v120;
          v118 = 0uLL;
          v119 = 0;
          v61 = v122;
          if ((unint64_t)v122 >= v123)
          {
            v122 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>(&v121, (uint64_t)&__p);
            if (SHIBYTE(v119) < 0)
            {
              operator delete((void *)v118);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
LABEL_55:
                operator delete(__p.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v120.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_56;
LABEL_140:
                operator delete(v120.__r_.__value_.__l.__data_);
                goto LABEL_56;
              }
            }
            else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              goto LABEL_55;
            }
          }
          else
          {
            v62 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *((_QWORD *)v122 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
            *(_OWORD *)v61 = v62;
            memset(&__p, 0, sizeof(__p));
            v63 = v119;
            *(_OWORD *)(v61 + 24) = v118;
            *((_QWORD *)v61 + 5) = v63;
            v119 = 0;
            v118 = 0uLL;
            v122 = v61 + 48;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_55;
          }
          if ((SHIBYTE(v120.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_56;
          goto LABEL_140;
        }
        v59 = (void *)__b.__r_.__value_.__r.__words[0];
LABEL_124:
        operator delete(v59);
        goto LABEL_125;
      }
      std::operator+<char>();
      v46 = std::string::append(&v126, "(=");
      v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      v124.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v47;
      v46->__r_.__value_.__l.__size_ = 0;
      v46->__r_.__value_.__r.__words[2] = 0;
      v46->__r_.__value_.__r.__words[0] = 0;
      v48 = (char)*(v32 - 26);
      if (v48 >= 0)
        v49 = v32 - 49;
      else
        v49 = *(const std::string::value_type **)(v32 - 49);
      if (v48 >= 0)
        v50 = *(v32 - 26);
      else
        v50 = *(_QWORD *)(v32 - 41);
      v51 = std::string::append(&v124, v49, v50);
      v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      v127.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v52;
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      v53 = std::string::append(&v127, ")]");
      v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
      __b.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__b.__r_.__value_.__l.__data_ = v54;
      v53->__r_.__value_.__l.__size_ = 0;
      v53->__r_.__value_.__r.__words[2] = 0;
      v53->__r_.__value_.__r.__words[0] = 0;
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v55 = &__b;
      else
        v55 = (std::string *)__b.__r_.__value_.__r.__words[0];
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v56 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
      else
        v56 = __b.__r_.__value_.__l.__size_;
      std::string::append(&v120, (const std::string::value_type *)v55, v56);
      if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__b.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_109:
          if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_110;
          goto LABEL_122;
        }
      }
      else if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_109;
      }
      operator delete(v127.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_110:
        if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_125;
LABEL_123:
        v59 = (void *)v126.__r_.__value_.__r.__words[0];
        goto LABEL_124;
      }
LABEL_122:
      operator delete(v124.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_125;
      goto LABEL_123;
    }
LABEL_56:
    v33 = v32 + 7;
    v32 += 168;
  }
  while (v33 != v30);
  v65 = *(_QWORD *)(v9 + 104);
  v64 = *(_QWORD *)(v9 + 112);
  if (v31 >= 0x1E)
    v66 = 30;
  else
    v66 = v31;
  v67 = (char *)v121;
  v113 = v64;
  if (v65 != v64)
  {
    v68 = 74 - v66;
    v69 = v66 + 2;
    v70 = ((v66 + 2) & 0x38) + 8;
    if (((v66 + 2) | 7) != 0x17)
      v70 = (v66 + 2) | 7;
    __sz = v70 + 1;
    v111 = (v70 + 1) | 0x8000000000000000;
    while (*(_BYTE *)(v65 + 160)
         && std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v116, v65 + 24)&& !*(_BYTE *)(a1 + 96))
    {
LABEL_151:
      v65 += 168;
      if (v65 == v113)
        goto LABEL_252;
    }
    if (*(char *)(v65 + 71) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v65 + 48), *(_QWORD *)(v65 + 56));
    else
      __p = *(std::string *)(v65 + 48);
    if (*(_BYTE *)(v65 + 72))
    {
      if (!*(_BYTE *)(v65 + 161))
        goto LABEL_169;
      v71 = (uint64_t **)(v65 + 80);
      v72 = *(char *)(v65 + 103);
      if (v72 < 0)
      {
        if (*(_QWORD *)(v65 + 88) != 5)
          goto LABEL_169;
        v71 = (uint64_t **)*v71;
      }
      else if (v72 != 5)
      {
        goto LABEL_169;
      }
      v73 = *(_DWORD *)v71;
      v74 = *((unsigned __int8 *)v71 + 4);
      if (v73 != 1936482662 || v74 != 101)
      {
LABEL_169:
        std::operator+<char>();
        v76 = std::string::append(&v127, ")");
        v77 = v76->__r_.__value_.__r.__words[0];
        v126.__r_.__value_.__r.__words[0] = v76->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v126.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v76->__r_.__value_.__r.__words[1] + 7);
        v78 = HIBYTE(v76->__r_.__value_.__r.__words[2]);
        v76->__r_.__value_.__r.__words[0] = 0;
        v76->__r_.__value_.__l.__size_ = 0;
        v76->__r_.__value_.__r.__words[2] = 0;
        __b.__r_.__value_.__r.__words[0] = v77;
        *(std::string::size_type *)((char *)&__b.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v126.__r_.__value_.__r.__words + 7);
        __b.__r_.__value_.__l.__size_ = v126.__r_.__value_.__r.__words[0];
        *((_BYTE *)&__b.__r_.__value_.__s + 23) = v78;
        if ((v78 & 0x80u) == 0)
          v79 = &__b;
        else
          v79 = (std::string *)v77;
        if ((v78 & 0x80u) == 0)
          v80 = v78;
        else
          v80 = __b.__r_.__value_.__l.__size_;
        std::string::append(&__p, (const std::string::value_type *)v79, v80);
        if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__b.__r_.__value_.__l.__data_);
          if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_251;
        }
        else
        {
          if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_177;
LABEL_251:
          operator delete(v127.__r_.__value_.__l.__data_);
        }
      }
    }
LABEL_177:
    memset(&v124, 0, sizeof(v124));
    v81 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v82 = &__p;
    else
      v82 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v81 = __p.__r_.__value_.__l.__size_;
    if (v81)
    {
      v83 = 0;
      v84 = &v82->__r_.__value_.__s.__data_[1];
      v85 = (unint64_t)v82;
      v86 = (char *)v82;
      while (1)
      {
        v89 = *v86;
        if (v89 != 10)
        {
          if (v89 == 32)
            v82 = (std::string *)v86;
          if (v83 <= v68)
          {
            ++v83;
            goto LABEL_186;
          }
          if (v82 != (std::string *)v85)
          {
            std::string::append[abi:ne180100]<std::__wrap_iter<char *>,0>(&v124, v85, (char *)v82);
            *((_BYTE *)&v127.__r_.__value_.__s + 23) = 1;
            LOWORD(v127.__r_.__value_.__l.__data_) = 10;
            std::string::append(&v124, (const std::string::value_type *)&v127, 1uLL);
            if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v127.__r_.__value_.__l.__data_);
            std::string::append(&v124, v69, 32);
            v83 = 0;
            v85 = (unint64_t)v82->__r_.__value_.__r.__words + 1;
            goto LABEL_186;
          }
          std::string::append[abi:ne180100]<std::__wrap_iter<char *>,0>(&v124, v85, v84);
          *((_BYTE *)&__b.__r_.__value_.__s + 23) = 1;
          LOWORD(__b.__r_.__value_.__l.__data_) = 10;
          std::string::append(&v124, (const std::string::value_type *)&__b, 1uLL);
          if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__b.__r_.__value_.__l.__data_);
          std::string::append(&v124, v69, 32);
          v83 = 0;
        }
        v85 = (unint64_t)(v86 + 1);
        v82 = (std::string *)(v86 + 1);
LABEL_186:
        ++v86;
        v87 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v88 = &__p;
        else
          v88 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v87 = __p.__r_.__value_.__l.__size_;
        ++v84;
        if (v86 == (char *)v88 + v87)
          goto LABEL_204;
      }
    }
    v86 = (char *)v82;
    v85 = (unint64_t)v82;
LABEL_204:
    std::string::append[abi:ne180100]<std::__wrap_iter<char *>,0>(&v124, v85, v86);
    v90 = v114;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v91 = v67[23];
    if (v91 >= 0)
      v92 = v67;
    else
      v92 = *(const std::string::value_type **)v67;
    if (v91 >= 0)
      v93 = v67[23];
    else
      v93 = *((_QWORD *)v67 + 1);
    std::string::append(v114, v92, v93);
    v94 = v67[23];
    if ((v94 & 0x80u) != 0)
      v94 = *((_QWORD *)v67 + 1);
    v95 = v66;
    v96 = v66 >= v94;
    v97 = v66 - v94;
    if (!v96)
    {
      std::string::push_back(v114, 10);
      v66 = v95;
      if (v95 >= 0x15)
      {
        v98 = operator new(__sz);
        __b.__r_.__value_.__l.__size_ = v69;
        __b.__r_.__value_.__r.__words[2] = v111;
        __b.__r_.__value_.__r.__words[0] = (std::string::size_type)v98;
      }
      else
      {
        *((_BYTE *)&__b.__r_.__value_.__s + 23) = v69;
        v98 = &__b;
      }
      memset(v98, 32, v69);
      *((_BYTE *)v98 + v95 + 2) = 0;
      __p = __b;
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v101 = &__p;
      else
        v101 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v102 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v102 = __p.__r_.__value_.__l.__size_;
      std::string::append(v114, (const std::string::value_type *)v101, v102);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_229;
      goto LABEL_230;
    }
    v99 = v69 - v94;
    if (v69 - v94 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v99 >= 0x17)
    {
      v105 = (v99 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v99 | 7) != 0x17)
        v105 = v99 | 7;
      v106 = v105 + 1;
      v100 = operator new(v105 + 1);
      __b.__r_.__value_.__l.__size_ = v99;
      __b.__r_.__value_.__r.__words[2] = v106 | 0x8000000000000000;
      __b.__r_.__value_.__r.__words[0] = (std::string::size_type)v100;
      v90 = v114;
    }
    else
    {
      *((_BYTE *)&__b.__r_.__value_.__s + 23) = v69 - v94;
      v100 = &__b;
      if (v69 == v94)
      {
LABEL_242:
        v100[v97 + 2] = 0;
        __p = __b;
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v107 = &__p;
        else
          v107 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v108 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v108 = __p.__r_.__value_.__l.__size_;
        std::string::append(v90, (const std::string::value_type *)v107, v108);
        v66 = v95;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_229:
          operator delete(__p.__r_.__value_.__l.__data_);
LABEL_230:
        if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v103 = &v124;
        else
          v103 = (std::string *)v124.__r_.__value_.__r.__words[0];
        if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v104 = HIBYTE(v124.__r_.__value_.__r.__words[2]);
        else
          v104 = v124.__r_.__value_.__l.__size_;
        std::string::append(v90, (const std::string::value_type *)v103, v104);
        std::string::push_back(v90, 10);
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v124.__r_.__value_.__l.__data_);
        v67 += 48;
        goto LABEL_151;
      }
    }
    memset(v100, 32, v99);
    goto LABEL_242;
  }
LABEL_253:
  if (v67)
  {
    v109 = v122;
    v110 = v67;
    if (v122 == v67)
    {
LABEL_262:
      v122 = v67;
      operator delete(v110);
      return;
    }
    while (1)
    {
      if (*(v109 - 1) < 0)
      {
        operator delete(*((void **)v109 - 3));
        if ((*(v109 - 25) & 0x80000000) == 0)
          goto LABEL_257;
      }
      else if ((*(v109 - 25) & 0x80000000) == 0)
      {
LABEL_257:
        v109 -= 48;
        if (v109 == v67)
          goto LABEL_261;
        continue;
      }
      operator delete(*((void **)v109 - 6));
      v109 -= 48;
      if (v109 == v67)
      {
LABEL_261:
        v110 = v121;
        goto LABEL_262;
      }
    }
  }
}

void sub_1910EF6EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (a22 < 0)
    operator delete(__p);
  if (*(char *)(v40 - 153) < 0)
    operator delete(*(void **)(v40 - 176));
  if (*(char *)(a14 + 23) < 0)
    operator delete(*(void **)a14);
  std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](&a32);
  _Unwind_Resume(a1);
}

std::string *std::string::append[abi:ne180100]<std::__wrap_iter<char *>,0>(std::string *this, unint64_t a2, char *a3)
{
  unint64_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  char *p_p;
  char *v13;
  char *v14;
  __int128 *v15;
  _OWORD *v16;
  unint64_t v17;
  __int128 v18;
  std::string *v19;
  _BYTE *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  __int128 *v26;
  _OWORD *v27;
  unint64_t v28;
  __int128 v29;
  char v30;
  std::string::size_type v31;
  char v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  void *__p;
  std::string::size_type v37;
  int64_t v38;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = (unint64_t)&a3[-a2];
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == (char *)a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
    if (this->__r_.__value_.__r.__words[0] > a2)
      goto LABEL_17;
  }
  else
  {
    if (a3 == (char *)a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
    if ((unint64_t)this > a2)
    {
LABEL_17:
      if (v9 - size < v7)
      {
        std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
        this->__r_.__value_.__l.__size_ = size;
        v19 = this;
        if ((*((_BYTE *)&this->__r_.__value_.__s + 23) & 0x80) == 0)
        {
LABEL_19:
          v20 = (char *)v19 + size;
          if ((char *)a2 == a3)
            goto LABEL_34;
          goto LABEL_23;
        }
      }
      else
      {
        v19 = this;
        if ((v6 & 0x80) == 0)
          goto LABEL_19;
      }
      v19 = (std::string *)this->__r_.__value_.__r.__words[0];
      v20 = (_BYTE *)(this->__r_.__value_.__r.__words[0] + size);
      if ((char *)a2 == a3)
        goto LABEL_34;
LABEL_23:
      if (v7 >= 0x20)
      {
        v24 = (char *)v19 + size;
        v25 = (unint64_t)v19 + size - a2;
        v21 = (char *)a2;
        if (v25 >= 0x20)
        {
          v20 += v7 & 0xFFFFFFFFFFFFFFE0;
          v21 = (char *)(a2 + (v7 & 0xFFFFFFFFFFFFFFE0));
          v26 = (__int128 *)(a2 + 16);
          v27 = v24 + 16;
          v28 = v7 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v29 = *v26;
            *(v27 - 1) = *(v26 - 1);
            *v27 = v29;
            v26 += 2;
            v27 += 2;
            v28 -= 32;
          }
          while (v28);
          if (v7 == (v7 & 0xFFFFFFFFFFFFFFE0))
            goto LABEL_34;
        }
      }
      else
      {
        v21 = (char *)a2;
      }
      do
      {
        v30 = *v21++;
        *v20++ = v30;
      }
      while (v21 != a3);
LABEL_34:
      *v20 = 0;
      v31 = v7 + size;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        this->__r_.__value_.__l.__size_ = v31;
      else
        *((_BYTE *)&this->__r_.__value_.__s + 23) = v31 & 0x7F;
      return this;
    }
  }
  if ((unint64_t)v10->__r_.__value_.__r.__words + size + 1 <= a2)
    goto LABEL_17;
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v7 <= 0x16)
  {
    HIBYTE(v38) = v7;
    p_p = (char *)&__p;
    if ((char *)a2 != a3)
      goto LABEL_11;
LABEL_28:
    v13 = p_p;
    goto LABEL_39;
  }
  v22 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v7 | 7) != 0x17)
    v22 = v7 | 7;
  v23 = v22 + 1;
  p_p = (char *)operator new(v22 + 1);
  v37 = v7;
  v38 = v23 | 0x8000000000000000;
  __p = p_p;
  if ((char *)a2 == a3)
    goto LABEL_28;
LABEL_11:
  if (v7 < 0x20 || (unint64_t)&p_p[-a2] < 0x20)
  {
    v13 = p_p;
    v14 = (char *)a2;
    do
    {
LABEL_38:
      v32 = *v14++;
      *v13++ = v32;
    }
    while (v14 != a3);
    goto LABEL_39;
  }
  v13 = &p_p[v7 & 0xFFFFFFFFFFFFFFE0];
  v14 = (char *)(a2 + (v7 & 0xFFFFFFFFFFFFFFE0));
  v15 = (__int128 *)(a2 + 16);
  v16 = p_p + 16;
  v17 = v7 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v18 = *v15;
    *(v16 - 1) = *(v15 - 1);
    *v16 = v18;
    v15 += 2;
    v16 += 2;
    v17 -= 32;
  }
  while (v17);
  if (v7 != (v7 & 0x7FFFFFFFFFFFFFE0))
    goto LABEL_38;
LABEL_39:
  *v13 = 0;
  if (v38 >= 0)
    v33 = (const std::string::value_type *)&__p;
  else
    v33 = (const std::string::value_type *)__p;
  if (v38 >= 0)
    v34 = HIBYTE(v38);
  else
    v34 = v37;
  std::string::append(this, v33, v34);
  if (SHIBYTE(v38) < 0)
    operator delete(__p);
  return this;
}

void sub_1910EFBDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::default_delete<Espresso::AOT::AOTCompilerOptionsManager::Impl>::operator()[abi:ne180100](int a1, cxxopts::Options *this)
{
  char *v3;
  void *v4;
  char *v5;
  char *v6;
  uint64_t v7;

  if (this)
  {
    v3 = (char *)*((_QWORD *)this + 29);
    if (!v3)
    {
LABEL_3:
      v4 = (void *)*((_QWORD *)this + 27);
      *((_QWORD *)this + 27) = 0;
      if (v4)
        operator delete(v4);
      cxxopts::Options::~Options(this);
      JUMPOUT(0x19401CD90);
    }
    while (1)
    {
      v5 = *(char **)v3;
      v6 = (char *)*((_QWORD *)v3 + 9);
      if (v6 == v3 + 48)
        break;
      if (v6)
      {
        v7 = 5;
LABEL_11:
        (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
      }
      if (v3[39] < 0)
        operator delete(*((void **)v3 + 2));
      operator delete(v3);
      v3 = v5;
      if (!v5)
        goto LABEL_3;
    }
    v6 = v3 + 48;
    v7 = 4;
    goto LABEL_11;
  }
}

uint64_t std::unordered_map<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>::~unordered_map[abi:ne180100](uint64_t a1)
{
  char *v2;
  void *v3;
  char *v5;
  char *v6;
  uint64_t v7;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    while (1)
    {
      v5 = *(char **)v2;
      v6 = (char *)*((_QWORD *)v2 + 9);
      if (v6 == v2 + 48)
        break;
      if (v6)
      {
        v7 = 5;
LABEL_10:
        (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
      }
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v5;
      if (!v5)
        goto LABEL_2;
    }
    v6 = v2 + 48;
    v7 = 4;
    goto LABEL_10;
  }
LABEL_2:
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

char *Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(char *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  char v6;
  const std::string::value_type *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  std::vector<std::string>::pointer end;
  __int128 v14;
  __int128 *v15;
  unint64_t v16;
  uint64_t v17;
  std::string *begin;
  std::vector<std::string>::pointer v19;
  std::vector<std::string>::pointer v20;
  char *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  std::__shared_weak_count *v39;
  char *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  void **v98;
  unsigned __int8 *v99;
  unsigned __int8 *v100;
  uint64_t v101;
  void **v102;
  uint64_t v103;
  void **v104;
  unsigned __int8 *v105;
  unsigned __int8 *v106;
  uint64_t v107;
  void **v108;
  uint64_t v109;
  void **v110;
  unsigned __int8 *v111;
  unsigned __int8 *v112;
  uint64_t v113;
  void **v114;
  uint64_t v115;
  void **v116;
  unsigned __int8 *v117;
  unsigned __int8 *v118;
  uint64_t v119;
  void **v120;
  uint64_t v121;
  void **v122;
  unsigned __int8 *v123;
  unsigned __int8 *v124;
  uint64_t v125;
  void **v126;
  uint64_t v127;
  char *v128;
  void **v129;
  unsigned __int8 *v130;
  unsigned __int8 *v131;
  uint64_t v132;
  void **v133;
  uint64_t v134;
  char *v135;
  void **v136;
  unsigned __int8 *v137;
  unsigned __int8 *v138;
  uint64_t v139;
  void **v140;
  uint64_t v141;
  char *v142;
  char *v143;
  void **v144;
  unsigned __int8 *v145;
  unsigned __int8 *v146;
  uint64_t v147;
  void **v148;
  uint64_t v149;
  void **v150;
  unsigned __int8 *v151;
  unsigned __int8 *v152;
  uint64_t v153;
  void **v154;
  uint64_t v155;
  void **v156;
  unsigned __int8 *v157;
  unsigned __int8 *v158;
  uint64_t v159;
  void **v160;
  uint64_t v161;
  _OWORD v163[4];
  __int128 v164;
  std::string v165;
  std::string v166;
  std::string v167;
  void *v168;
  char v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  __int128 v172;
  void *v173;
  __int128 v174;
  void *v175[2];
  char v176;
  void *v177;
  char v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  __int128 v181;
  void *v182;
  __int128 v183;
  void *v184[2];
  char v185;
  void *v186;
  char v187;
  uint64_t v188;
  std::__shared_weak_count *v189;
  __int128 v190;
  void *v191;
  __int128 v192;
  _BYTE v193[24];
  void *v194;
  char v195;
  uint64_t v196;
  std::__shared_weak_count *v197;
  __int128 v198;
  void *v199;
  __int128 v200;
  _BYTE v201[24];
  void *v202;
  char v203;
  uint64_t v204;
  std::__shared_weak_count *v205;
  __int128 v206;
  void *v207;
  __int128 v208;
  void *v209[2];
  char v210;
  void *v211;
  char v212;
  uint64_t v213;
  std::__shared_weak_count *v214;
  __int128 v215;
  void *v216;
  __int128 v217;
  void *v218[2];
  char v219;
  void *v220;
  char v221;
  uint64_t v222;
  std::__shared_weak_count *v223;
  __int128 v224;
  void *v225;
  __int128 v226;
  void *v227[3];
  void *v228;
  char v229;
  void *v230[2];
  char v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  std::string v235;
  std::string v236;
  void *v237[2];
  char v238;
  void *v239;
  char v240;
  uint64_t v241;
  std::__shared_weak_count *v242;
  __int128 v243;
  void *v244;
  __int128 v245;
  void *v246[2];
  char v247;
  void *v248;
  char v249;
  uint64_t v250;
  std::__shared_weak_count *v251;
  __int128 v252;
  void *v253;
  char v254;
  void *__p[2];
  char v256;
  std::vector<std::string> v257;
  __int128 v258;
  _QWORD v259[2];
  void *v260;
  void *v261;
  __int128 v262;
  void **v263;
  _QWORD v264[2];
  _QWORD v265[3];

  v265[2] = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v265[0] = a2[1];
  *(_QWORD *)((char *)v265 + 7) = *(uint64_t *)((char *)a2 + 15);
  v6 = *((_BYTE *)a2 + 23);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v7 = *(const std::string::value_type **)a3;
  v264[0] = *(_QWORD *)(a3 + 8);
  *(_QWORD *)((char *)v264 + 7) = *(_QWORD *)(a3 + 15);
  v8 = *(_BYTE *)(a3 + 23);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v9 = v265[0];
  *(_QWORD *)a1 = v5;
  *((_QWORD *)a1 + 1) = v9;
  *(_QWORD *)(a1 + 15) = *(_QWORD *)((char *)v265 + 7);
  a1[23] = v6;
  v265[0] = 0;
  *(_QWORD *)((char *)v265 + 7) = 0;
  v10 = v264[0];
  *((_QWORD *)a1 + 3) = v7;
  *((_QWORD *)a1 + 4) = v10;
  *(_QWORD *)(a1 + 39) = *(_QWORD *)((char *)v264 + 7);
  a1[47] = v8;
  v264[0] = 0;
  *(_QWORD *)((char *)v264 + 7) = 0;
  a1[71] = 11;
  strcpy(a1 + 48, "[OPTION...]");
  a1[95] = 21;
  strcpy(a1 + 72, "positional parameters");
  *((_WORD *)a1 + 48) = 0;
  v11 = (char *)operator new(0x40uLL);
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = &unk_1E2DC2710;
  *((_QWORD *)v11 + 1) = 0;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *((_DWORD *)v11 + 14) = 1065353216;
  *(_OWORD *)(a1 + 216) = 0u;
  *((_QWORD *)a1 + 13) = v11 + 24;
  *((_QWORD *)a1 + 14) = v11;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *((_DWORD *)a1 + 46) = 1065353216;
  *((_QWORD *)a1 + 26) = 0;
  *((_QWORD *)a1 + 25) = 0;
  *((_QWORD *)a1 + 24) = a1 + 200;
  *(_OWORD *)(a1 + 232) = 0u;
  *((_DWORD *)a1 + 62) = 1065353216;
  Espresso::AOT::AOTCompilerDriver::MakeDefaultBackendRegistry((uint64_t)&v260);
  memset(&v257, 0, sizeof(v257));
  std::vector<std::string>::reserve(&v257, *((std::vector<std::string>::size_type *)&v262 + 1));
  v12 = (uint64_t *)v262;
  if ((_QWORD)v262)
  {
    end = v257.__end_;
    do
    {
      v15 = (__int128 *)(v12 + 2);
      if (end < v257.__end_cap_.__value_)
      {
        if (*((char *)v12 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(end, (const std::string::value_type *)v12[2], v12[3]);
        }
        else
        {
          v14 = *v15;
          end->__r_.__value_.__r.__words[2] = v12[4];
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v14;
        }
        ++end;
      }
      else
      {
        end = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v257, (uint64_t)v15);
      }
      v257.__end_ = end;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    end = v257.__end_;
  }
  v16 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v257.__begin_) >> 3));
  if (end == v257.__begin_)
    v17 = 0;
  else
    v17 = v16;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((uint64_t)v257.__begin_, (const void **)&end->__r_.__value_.__l.__data_, (uint64_t)__p, v17, 1);
  v256 = 3;
  LODWORD(__p[0]) = 2128928;
  E5Common::StringUtils::Join((uint64_t)__p, (uint64_t *)&v257);
  if (v256 < 0)
    operator delete(__p[0]);
  begin = v257.__begin_;
  if (v257.__begin_)
  {
    v19 = v257.__end_;
    v20 = v257.__begin_;
    if (v257.__end_ != v257.__begin_)
    {
      do
      {
        if (SHIBYTE(v19[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v19[-1].__r_.__value_.__l.__data_);
        --v19;
      }
      while (v19 != begin);
      v20 = v257.__begin_;
    }
    v257.__end_ = begin;
    operator delete(v20);
  }
  v21 = (char *)v262;
  if ((_QWORD)v262)
  {
    do
    {
      v40 = *(char **)v21;
      v41 = *((_QWORD *)v21 + 5);
      *((_QWORD *)v21 + 5) = 0;
      if (v41)
        (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
      if (v21[39] < 0)
        operator delete(*((void **)v21 + 2));
      operator delete(v21);
      v21 = v40;
    }
    while (v40);
  }
  v22 = v260;
  v260 = 0;
  if (v22)
    operator delete(v22);
  v261 = 0;
  *(_QWORD *)&v262 = v259[0];
  *(_QWORD *)((char *)&v262 + 7) = *(_QWORD *)((char *)v259 + 7);
  v259[0] = 0;
  *(_QWORD *)((char *)v259 + 7) = 0;
  v260 = a1;
  HIBYTE(v262) = 0;
  HIBYTE(v257.__end_cap_.__value_) = 7;
  strcpy((char *)&v257, "i,input");
  v256 = 15;
  strcpy((char *)__p, "File to compile");
  _ZNSt3__115allocate_sharedB8ne180100IN7cxxopts6values14standard_valueINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS7_ISA_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v246);
  v252 = *(_OWORD *)v246;
  v251 = 0;
  v250 = 0;
  v249 = 0;
  LOBYTE(v248) = 0;
  v23 = cxxopts::OptionAdder::operator()((uint64_t)&v260, (uint64_t)&v257, (uint64_t)__p, (std::string::size_type *)&v252, (uint64_t)&v248);
  v247 = 8;
  strcpy((char *)v246, "o,output");
  v244 = operator new(0x20uLL);
  v164 = xmmword_191A7C2C0;
  v245 = xmmword_191A7C2C0;
  strcpy((char *)v244, "Path to output file|directory");
  _ZNSt3__115allocate_sharedB8ne180100IN7cxxopts6values14standard_valueINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS7_ISA_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v237);
  v243 = *(_OWORD *)v237;
  v242 = 0;
  v241 = 0;
  v240 = 0;
  LOBYTE(v239) = 0;
  v24 = cxxopts::OptionAdder::operator()(v23, (uint64_t)v246, (uint64_t)&v244, (std::string::size_type *)&v243, (uint64_t)&v239);
  v238 = 9;
  strcpy((char *)v237, "b,backend");
  std::operator+<char>();
  std::string::push_back(&v235, 41);
  v236 = v235;
  memset(&v235, 0, sizeof(v235));
  _ZNSt3__115allocate_sharedB8ne180100IN7cxxopts6values14standard_valueINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS7_ISA_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v230);
  v25 = *(__n128 *)v230;
  v232 = *(_OWORD *)v230;
  v231 = 2;
  strcpy((char *)v230, "e5");
  (*(void (**)(__int128 *__return_ptr, _QWORD, void **, __n128))(*(_QWORD *)v232 + 80))(&v233, v232, v230, v25);
  v234 = v233;
  v233 = 0uLL;
  v229 = 0;
  LOBYTE(v228) = 0;
  v26 = cxxopts::OptionAdder::operator()(v24, (uint64_t)v237, (uint64_t)&v236, (std::string::size_type *)&v234, (uint64_t)&v228);
  HIBYTE(v227[2]) = 19;
  strcpy((char *)v227, "build-for-profiling");
  v225 = operator new(0x20uLL);
  v226 = xmmword_191A78340;
  strcpy((char *)v225, "Generate profiling metadata");
  _ZNSt3__115allocate_sharedB8ne180100IN7cxxopts6values14standard_valueIbEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((uint64_t *)v218);
  v224 = *(_OWORD *)v218;
  v223 = 0;
  v222 = 0;
  v221 = 0;
  LOBYTE(v220) = 0;
  v27 = cxxopts::OptionAdder::operator()(v26, (uint64_t)v227, (uint64_t)&v225, (std::string::size_type *)&v224, (uint64_t)&v220);
  v219 = 10;
  strcpy((char *)v218, "p,platform");
  v216 = operator new(0x28uLL);
  v217 = xmmword_191A78320;
  strcpy((char *)v216, "Deprecated alias for --e5-platforms");
  _ZNSt3__115allocate_sharedB8ne180100IN7cxxopts6values14standard_valueINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS7_ISA_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v209);
  v215 = *(_OWORD *)v209;
  v214 = 0;
  v213 = 0;
  v212 = 0;
  LOBYTE(v211) = 0;
  v28 = cxxopts::OptionAdder::operator()(v27, (uint64_t)v218, (uint64_t)&v216, (std::string::size_type *)&v215, (uint64_t)&v211);
  v210 = 7;
  strcpy((char *)v209, "version");
  v207 = operator new(0x20uLL);
  v208 = xmmword_191A86860;
  strcpy((char *)v207, "Print version information");
  _ZNSt3__115allocate_sharedB8ne180100IN7cxxopts6values14standard_valueIbEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((uint64_t *)v201);
  v206 = *(_OWORD *)v201;
  v205 = 0;
  v204 = 0;
  v203 = 0;
  LOBYTE(v202) = 0;
  v29 = cxxopts::OptionAdder::operator()(v28, (uint64_t)v209, (uint64_t)&v207, (std::string::size_type *)&v206, (uint64_t)&v202);
  v201[23] = 18;
  strcpy(v201, "query-e5-platforms");
  v199 = operator new(0x20uLL);
  v200 = xmmword_191A7C2C0;
  strcpy((char *)v199, "Print supported e5 platforms.");
  _ZNSt3__115allocate_sharedB8ne180100IN7cxxopts6values14standard_valueIbEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((uint64_t *)v193);
  v198 = *(_OWORD *)v193;
  v197 = 0;
  v196 = 0;
  v195 = 0;
  LOBYTE(v194) = 0;
  v30 = cxxopts::OptionAdder::operator()(v29, (uint64_t)v201, (uint64_t)&v199, (std::string::size_type *)&v198, (uint64_t)&v194);
  *(_QWORD *)v193 = operator new(0x20uLL);
  v164 = xmmword_191A8AA30;
  *(_OWORD *)&v193[8] = xmmword_191A8AA30;
  strcpy(*(char **)v193, "query-e5-platform-families");
  qmemcpy(v163, "latform-familiesquery-e5-platforquery-e5-platforbuild-for-profil", sizeof(v163));
  v191 = operator new(0x28uLL);
  v192 = xmmword_191A72440;
  strcpy((char *)v191, "Print supported e5 platform families.");
  _ZNSt3__115allocate_sharedB8ne180100IN7cxxopts6values14standard_valueIbEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((uint64_t *)v184);
  v190 = *(_OWORD *)v184;
  v188 = 0;
  v189 = 0;
  v187 = 0;
  LOBYTE(v186) = 0;
  v31 = cxxopts::OptionAdder::operator()(v30, (uint64_t)v193, (uint64_t)&v191, (std::string::size_type *)&v190, (uint64_t)&v186);
  v185 = 6;
  strcpy((char *)v184, "h,help");
  v182 = operator new(0x20uLL);
  v183 = xmmword_191A71250;
  strcpy((char *)v182, "Print this usage message");
  _ZNSt3__115allocate_sharedB8ne180100IN7cxxopts6values14standard_valueIbEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((uint64_t *)v175);
  v181 = *(_OWORD *)v175;
  v179 = 0;
  v180 = 0;
  v178 = 0;
  LOBYTE(v177) = 0;
  v32 = cxxopts::OptionAdder::operator()(v31, (uint64_t)v184, (uint64_t)&v182, (std::string::size_type *)&v181, (uint64_t)&v177);
  v176 = 8;
  strcpy((char *)v175, "help-all");
  v173 = operator new(0x30uLL);
  v174 = xmmword_191A6F7C0;
  strcpy((char *)v173, "Print usage message including internal options");
  _ZNSt3__115allocate_sharedB8ne180100IN7cxxopts6values14standard_valueIbEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((uint64_t *)&v258);
  v172 = v258;
  v170 = 0;
  v171 = 0;
  v169 = 0;
  LOBYTE(v168) = 0;
  cxxopts::OptionAdder::operator()(v32, (uint64_t)v175, (uint64_t)&v173, (std::string::size_type *)&v172, (uint64_t)&v168);
  if (v169 < 0)
    operator delete(v168);
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v172 + 1);
  if (!*((_QWORD *)&v172 + 1))
    goto LABEL_33;
  v34 = (unint64_t *)(*((_QWORD *)&v172 + 1) + 8);
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
    v36 = v171;
    if (!v171)
      goto LABEL_37;
  }
  else
  {
LABEL_33:
    v36 = v171;
    if (!v171)
      goto LABEL_37;
  }
  p_shared_owners = (unint64_t *)&v36->__shared_owners_;
  do
    v38 = __ldaxr(p_shared_owners);
  while (__stlxr(v38 - 1, p_shared_owners));
  if (v38)
  {
LABEL_37:
    if ((SHIBYTE(v174) & 0x80000000) == 0)
      goto LABEL_38;
    goto LABEL_50;
  }
  ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
  std::__shared_weak_count::__release_weak(v36);
  if ((SHIBYTE(v174) & 0x80000000) == 0)
  {
LABEL_38:
    if ((v176 & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_51;
  }
LABEL_50:
  operator delete(v173);
  if ((v176 & 0x80000000) == 0)
  {
LABEL_39:
    if ((v178 & 0x80000000) == 0)
      goto LABEL_40;
LABEL_52:
    operator delete(v177);
    v39 = (std::__shared_weak_count *)*((_QWORD *)&v181 + 1);
    if (!*((_QWORD *)&v181 + 1))
      goto LABEL_56;
    goto LABEL_53;
  }
LABEL_51:
  operator delete(v175[0]);
  if (v178 < 0)
    goto LABEL_52;
LABEL_40:
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v181 + 1);
  if (!*((_QWORD *)&v181 + 1))
    goto LABEL_56;
LABEL_53:
  v42 = (unint64_t *)&v39->__shared_owners_;
  do
    v43 = __ldaxr(v42);
  while (__stlxr(v43 - 1, v42));
  if (v43)
  {
LABEL_56:
    v44 = v180;
    if (!v180)
      goto LABEL_60;
    goto LABEL_57;
  }
  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
  std::__shared_weak_count::__release_weak(v39);
  v44 = v180;
  if (!v180)
    goto LABEL_60;
LABEL_57:
  v45 = (unint64_t *)&v44->__shared_owners_;
  do
    v46 = __ldaxr(v45);
  while (__stlxr(v46 - 1, v45));
  if (v46)
  {
LABEL_60:
    if ((SHIBYTE(v183) & 0x80000000) == 0)
      goto LABEL_61;
    goto LABEL_68;
  }
  ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
  std::__shared_weak_count::__release_weak(v44);
  if ((SHIBYTE(v183) & 0x80000000) == 0)
  {
LABEL_61:
    if ((v185 & 0x80000000) == 0)
      goto LABEL_62;
    goto LABEL_69;
  }
LABEL_68:
  operator delete(v182);
  if ((v185 & 0x80000000) == 0)
  {
LABEL_62:
    if ((v187 & 0x80000000) == 0)
      goto LABEL_63;
LABEL_70:
    operator delete(v186);
    v47 = (std::__shared_weak_count *)*((_QWORD *)&v190 + 1);
    if (!*((_QWORD *)&v190 + 1))
      goto LABEL_74;
    goto LABEL_71;
  }
LABEL_69:
  operator delete(v184[0]);
  if (v187 < 0)
    goto LABEL_70;
LABEL_63:
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v190 + 1);
  if (!*((_QWORD *)&v190 + 1))
    goto LABEL_74;
LABEL_71:
  v48 = (unint64_t *)&v47->__shared_owners_;
  do
    v49 = __ldaxr(v48);
  while (__stlxr(v49 - 1, v48));
  if (v49)
  {
LABEL_74:
    v50 = v189;
    if (!v189)
      goto LABEL_78;
    goto LABEL_75;
  }
  ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
  std::__shared_weak_count::__release_weak(v47);
  v50 = v189;
  if (!v189)
    goto LABEL_78;
LABEL_75:
  v51 = (unint64_t *)&v50->__shared_owners_;
  do
    v52 = __ldaxr(v51);
  while (__stlxr(v52 - 1, v51));
  if (v52)
  {
LABEL_78:
    if ((SHIBYTE(v192) & 0x80000000) == 0)
      goto LABEL_79;
    goto LABEL_86;
  }
  ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
  std::__shared_weak_count::__release_weak(v50);
  if ((SHIBYTE(v192) & 0x80000000) == 0)
  {
LABEL_79:
    if ((v193[23] & 0x80000000) == 0)
      goto LABEL_80;
    goto LABEL_87;
  }
LABEL_86:
  operator delete(v191);
  if ((v193[23] & 0x80000000) == 0)
  {
LABEL_80:
    if ((v195 & 0x80000000) == 0)
      goto LABEL_81;
LABEL_88:
    operator delete(v194);
    v53 = (std::__shared_weak_count *)*((_QWORD *)&v198 + 1);
    if (!*((_QWORD *)&v198 + 1))
      goto LABEL_92;
    goto LABEL_89;
  }
LABEL_87:
  operator delete(*(void **)v193);
  if (v195 < 0)
    goto LABEL_88;
LABEL_81:
  v53 = (std::__shared_weak_count *)*((_QWORD *)&v198 + 1);
  if (!*((_QWORD *)&v198 + 1))
    goto LABEL_92;
LABEL_89:
  v54 = (unint64_t *)&v53->__shared_owners_;
  do
    v55 = __ldaxr(v54);
  while (__stlxr(v55 - 1, v54));
  if (v55)
  {
LABEL_92:
    v56 = v197;
    if (!v197)
      goto LABEL_96;
    goto LABEL_93;
  }
  ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
  std::__shared_weak_count::__release_weak(v53);
  v56 = v197;
  if (!v197)
    goto LABEL_96;
LABEL_93:
  v57 = (unint64_t *)&v56->__shared_owners_;
  do
    v58 = __ldaxr(v57);
  while (__stlxr(v58 - 1, v57));
  if (v58)
  {
LABEL_96:
    if ((SHIBYTE(v200) & 0x80000000) == 0)
      goto LABEL_97;
    goto LABEL_104;
  }
  ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
  std::__shared_weak_count::__release_weak(v56);
  if ((SHIBYTE(v200) & 0x80000000) == 0)
  {
LABEL_97:
    if ((v201[23] & 0x80000000) == 0)
      goto LABEL_98;
    goto LABEL_105;
  }
LABEL_104:
  operator delete(v199);
  if ((v201[23] & 0x80000000) == 0)
  {
LABEL_98:
    if ((v203 & 0x80000000) == 0)
      goto LABEL_99;
LABEL_106:
    operator delete(v202);
    v59 = (std::__shared_weak_count *)*((_QWORD *)&v206 + 1);
    if (!*((_QWORD *)&v206 + 1))
      goto LABEL_110;
    goto LABEL_107;
  }
LABEL_105:
  operator delete(*(void **)v201);
  if (v203 < 0)
    goto LABEL_106;
LABEL_99:
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v206 + 1);
  if (!*((_QWORD *)&v206 + 1))
    goto LABEL_110;
LABEL_107:
  v60 = (unint64_t *)&v59->__shared_owners_;
  do
    v61 = __ldaxr(v60);
  while (__stlxr(v61 - 1, v60));
  if (v61)
  {
LABEL_110:
    v62 = v205;
    if (!v205)
      goto LABEL_114;
    goto LABEL_111;
  }
  ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
  std::__shared_weak_count::__release_weak(v59);
  v62 = v205;
  if (!v205)
    goto LABEL_114;
LABEL_111:
  v63 = (unint64_t *)&v62->__shared_owners_;
  do
    v64 = __ldaxr(v63);
  while (__stlxr(v64 - 1, v63));
  if (v64)
  {
LABEL_114:
    if ((SHIBYTE(v208) & 0x80000000) == 0)
      goto LABEL_115;
    goto LABEL_122;
  }
  ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
  std::__shared_weak_count::__release_weak(v62);
  if ((SHIBYTE(v208) & 0x80000000) == 0)
  {
LABEL_115:
    if ((v210 & 0x80000000) == 0)
      goto LABEL_116;
    goto LABEL_123;
  }
LABEL_122:
  operator delete(v207);
  if ((v210 & 0x80000000) == 0)
  {
LABEL_116:
    if ((v212 & 0x80000000) == 0)
      goto LABEL_117;
LABEL_124:
    operator delete(v211);
    v65 = (std::__shared_weak_count *)*((_QWORD *)&v215 + 1);
    if (!*((_QWORD *)&v215 + 1))
      goto LABEL_128;
    goto LABEL_125;
  }
LABEL_123:
  operator delete(v209[0]);
  if (v212 < 0)
    goto LABEL_124;
LABEL_117:
  v65 = (std::__shared_weak_count *)*((_QWORD *)&v215 + 1);
  if (!*((_QWORD *)&v215 + 1))
    goto LABEL_128;
LABEL_125:
  v66 = (unint64_t *)&v65->__shared_owners_;
  do
    v67 = __ldaxr(v66);
  while (__stlxr(v67 - 1, v66));
  if (v67)
  {
LABEL_128:
    v68 = v214;
    if (!v214)
      goto LABEL_132;
    goto LABEL_129;
  }
  ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
  std::__shared_weak_count::__release_weak(v65);
  v68 = v214;
  if (!v214)
    goto LABEL_132;
LABEL_129:
  v69 = (unint64_t *)&v68->__shared_owners_;
  do
    v70 = __ldaxr(v69);
  while (__stlxr(v70 - 1, v69));
  if (v70)
  {
LABEL_132:
    if ((SHIBYTE(v217) & 0x80000000) == 0)
      goto LABEL_133;
    goto LABEL_140;
  }
  ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
  std::__shared_weak_count::__release_weak(v68);
  if ((SHIBYTE(v217) & 0x80000000) == 0)
  {
LABEL_133:
    if ((v219 & 0x80000000) == 0)
      goto LABEL_134;
    goto LABEL_141;
  }
LABEL_140:
  operator delete(v216);
  if ((v219 & 0x80000000) == 0)
  {
LABEL_134:
    if ((v221 & 0x80000000) == 0)
      goto LABEL_135;
LABEL_142:
    operator delete(v220);
    v71 = (std::__shared_weak_count *)*((_QWORD *)&v224 + 1);
    if (!*((_QWORD *)&v224 + 1))
      goto LABEL_146;
    goto LABEL_143;
  }
LABEL_141:
  operator delete(v218[0]);
  if (v221 < 0)
    goto LABEL_142;
LABEL_135:
  v71 = (std::__shared_weak_count *)*((_QWORD *)&v224 + 1);
  if (!*((_QWORD *)&v224 + 1))
    goto LABEL_146;
LABEL_143:
  v72 = (unint64_t *)&v71->__shared_owners_;
  do
    v73 = __ldaxr(v72);
  while (__stlxr(v73 - 1, v72));
  if (v73)
  {
LABEL_146:
    v74 = v223;
    if (!v223)
      goto LABEL_150;
    goto LABEL_147;
  }
  ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
  std::__shared_weak_count::__release_weak(v71);
  v74 = v223;
  if (!v223)
    goto LABEL_150;
LABEL_147:
  v75 = (unint64_t *)&v74->__shared_owners_;
  do
    v76 = __ldaxr(v75);
  while (__stlxr(v76 - 1, v75));
  if (v76)
  {
LABEL_150:
    if ((SHIBYTE(v226) & 0x80000000) == 0)
      goto LABEL_151;
    goto LABEL_158;
  }
  ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
  std::__shared_weak_count::__release_weak(v74);
  if ((SHIBYTE(v226) & 0x80000000) == 0)
  {
LABEL_151:
    if ((SHIBYTE(v227[2]) & 0x80000000) == 0)
      goto LABEL_152;
    goto LABEL_159;
  }
LABEL_158:
  operator delete(v225);
  if ((SHIBYTE(v227[2]) & 0x80000000) == 0)
  {
LABEL_152:
    if ((v229 & 0x80000000) == 0)
      goto LABEL_153;
LABEL_160:
    operator delete(v228);
    v77 = (std::__shared_weak_count *)*((_QWORD *)&v234 + 1);
    if (!*((_QWORD *)&v234 + 1))
      goto LABEL_164;
    goto LABEL_161;
  }
LABEL_159:
  operator delete(v227[0]);
  if (v229 < 0)
    goto LABEL_160;
LABEL_153:
  v77 = (std::__shared_weak_count *)*((_QWORD *)&v234 + 1);
  if (!*((_QWORD *)&v234 + 1))
    goto LABEL_164;
LABEL_161:
  v78 = (unint64_t *)&v77->__shared_owners_;
  do
    v79 = __ldaxr(v78);
  while (__stlxr(v79 - 1, v78));
  if (v79)
  {
LABEL_164:
    v80 = (std::__shared_weak_count *)*((_QWORD *)&v233 + 1);
    if (!*((_QWORD *)&v233 + 1))
      goto LABEL_168;
    goto LABEL_165;
  }
  ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
  std::__shared_weak_count::__release_weak(v77);
  v80 = (std::__shared_weak_count *)*((_QWORD *)&v233 + 1);
  if (!*((_QWORD *)&v233 + 1))
    goto LABEL_168;
LABEL_165:
  v81 = (unint64_t *)&v80->__shared_owners_;
  do
    v82 = __ldaxr(v81);
  while (__stlxr(v82 - 1, v81));
  if (v82)
  {
LABEL_168:
    if ((v231 & 0x80000000) == 0)
      goto LABEL_169;
LABEL_174:
    operator delete(v230[0]);
    v83 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
    if (!*((_QWORD *)&v232 + 1))
      goto LABEL_178;
    goto LABEL_175;
  }
  ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
  std::__shared_weak_count::__release_weak(v80);
  if (v231 < 0)
    goto LABEL_174;
LABEL_169:
  v83 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
  if (!*((_QWORD *)&v232 + 1))
    goto LABEL_178;
LABEL_175:
  v84 = (unint64_t *)&v83->__shared_owners_;
  do
    v85 = __ldaxr(v84);
  while (__stlxr(v85 - 1, v84));
  if (v85)
  {
LABEL_178:
    if ((SHIBYTE(v236.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_179;
    goto LABEL_185;
  }
  ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
  std::__shared_weak_count::__release_weak(v83);
  if ((SHIBYTE(v236.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_179:
    if ((SHIBYTE(v235.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_180;
    goto LABEL_186;
  }
LABEL_185:
  operator delete(v236.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v235.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_180:
    if ((v238 & 0x80000000) == 0)
      goto LABEL_181;
    goto LABEL_187;
  }
LABEL_186:
  operator delete(v235.__r_.__value_.__l.__data_);
  if ((v238 & 0x80000000) == 0)
  {
LABEL_181:
    if ((v240 & 0x80000000) == 0)
      goto LABEL_182;
LABEL_188:
    operator delete(v239);
    v86 = (std::__shared_weak_count *)*((_QWORD *)&v243 + 1);
    if (!*((_QWORD *)&v243 + 1))
      goto LABEL_192;
    goto LABEL_189;
  }
LABEL_187:
  operator delete(v237[0]);
  if (v240 < 0)
    goto LABEL_188;
LABEL_182:
  v86 = (std::__shared_weak_count *)*((_QWORD *)&v243 + 1);
  if (!*((_QWORD *)&v243 + 1))
    goto LABEL_192;
LABEL_189:
  v87 = (unint64_t *)&v86->__shared_owners_;
  do
    v88 = __ldaxr(v87);
  while (__stlxr(v88 - 1, v87));
  if (v88)
  {
LABEL_192:
    v89 = v242;
    if (!v242)
      goto LABEL_196;
    goto LABEL_193;
  }
  ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
  std::__shared_weak_count::__release_weak(v86);
  v89 = v242;
  if (!v242)
    goto LABEL_196;
LABEL_193:
  v90 = (unint64_t *)&v89->__shared_owners_;
  do
    v91 = __ldaxr(v90);
  while (__stlxr(v91 - 1, v90));
  if (v91)
  {
LABEL_196:
    if ((SHIBYTE(v245) & 0x80000000) == 0)
      goto LABEL_197;
    goto LABEL_204;
  }
  ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
  std::__shared_weak_count::__release_weak(v89);
  if ((SHIBYTE(v245) & 0x80000000) == 0)
  {
LABEL_197:
    if ((v247 & 0x80000000) == 0)
      goto LABEL_198;
    goto LABEL_205;
  }
LABEL_204:
  operator delete(v244);
  if ((v247 & 0x80000000) == 0)
  {
LABEL_198:
    if ((v249 & 0x80000000) == 0)
      goto LABEL_199;
LABEL_206:
    operator delete(v248);
    v92 = (std::__shared_weak_count *)*((_QWORD *)&v252 + 1);
    if (!*((_QWORD *)&v252 + 1))
      goto LABEL_210;
    goto LABEL_207;
  }
LABEL_205:
  operator delete(v246[0]);
  if (v249 < 0)
    goto LABEL_206;
LABEL_199:
  v92 = (std::__shared_weak_count *)*((_QWORD *)&v252 + 1);
  if (!*((_QWORD *)&v252 + 1))
    goto LABEL_210;
LABEL_207:
  v93 = (unint64_t *)&v92->__shared_owners_;
  do
    v94 = __ldaxr(v93);
  while (__stlxr(v94 - 1, v93));
  if (v94)
  {
LABEL_210:
    v95 = v251;
    if (!v251)
      goto LABEL_214;
    goto LABEL_211;
  }
  ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
  std::__shared_weak_count::__release_weak(v92);
  v95 = v251;
  if (!v251)
    goto LABEL_214;
LABEL_211:
  v96 = (unint64_t *)&v95->__shared_owners_;
  do
    v97 = __ldaxr(v96);
  while (__stlxr(v97 - 1, v96));
  if (v97)
  {
LABEL_214:
    if ((v256 & 0x80000000) == 0)
      goto LABEL_215;
    goto LABEL_229;
  }
  ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
  std::__shared_weak_count::__release_weak(v95);
  if ((v256 & 0x80000000) == 0)
  {
LABEL_215:
    if ((SHIBYTE(v257.__end_cap_.__value_) & 0x80000000) == 0)
      goto LABEL_216;
LABEL_230:
    operator delete(v257.__begin_);
    if ((SHIBYTE(v262) & 0x80000000) == 0)
      goto LABEL_217;
    goto LABEL_231;
  }
LABEL_229:
  operator delete(__p[0]);
  if (SHIBYTE(v257.__end_cap_.__value_) < 0)
    goto LABEL_230;
LABEL_216:
  if ((SHIBYTE(v262) & 0x80000000) == 0)
    goto LABEL_217;
LABEL_231:
  operator delete(v261);
LABEL_217:
  LODWORD(v260) = 3;
  WORD2(v260) = 0;
  v98 = &v261;
  v261 = &unk_1E2DB2580;
  v263 = &v261;
  HIBYTE(v257.__end_cap_.__value_) = 5;
  strcpy((char *)&v257, "input");
  __p[0] = &v257;
  v100 = std::__hash_table<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(a1 + 216), (uint64_t)&v257, (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 72;
  v99 = *(unsigned __int8 **)v100;
  *((_DWORD *)v100 - 8) = (_DWORD)v260;
  *((_WORD *)v100 - 14) = WORD2(v260);
  *(_QWORD *)v100 = 0;
  if (v99 == v100 - 24)
  {
    v101 = 4;
    v99 = v100 - 24;
  }
  else
  {
    if (!v99)
      goto LABEL_222;
    v101 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v99 + 8 * v101))();
LABEL_222:
  if (!v263)
  {
LABEL_225:
    *(_QWORD *)v100 = 0;
    goto LABEL_233;
  }
  if (v263 != &v261)
  {
    *(_QWORD *)v100 = v263;
    v100 = (unsigned __int8 *)&v263;
    goto LABEL_225;
  }
  *(_QWORD *)v100 = v100 - 24;
  (*((void (**)(uint64_t, _QWORD *))v261 + 3))((uint64_t)&v261, (_QWORD *)v100 - 3);
LABEL_233:
  if (SHIBYTE(v257.__end_cap_.__value_) < 0)
  {
    operator delete(v257.__begin_);
    v102 = v263;
    if (v263 != &v261)
      goto LABEL_235;
LABEL_238:
    v103 = 4;
    goto LABEL_239;
  }
  v102 = v263;
  if (v263 == &v261)
    goto LABEL_238;
LABEL_235:
  if (!v102)
    goto LABEL_240;
  v103 = 5;
  v98 = v102;
LABEL_239:
  (*((void (**)(void **))*v98 + v103))(v98);
LABEL_240:
  LODWORD(v260) = 3;
  WORD2(v260) = 0;
  v104 = &v261;
  v261 = &unk_1E2DB2268;
  v263 = &v261;
  HIBYTE(v257.__end_cap_.__value_) = 6;
  strcpy((char *)&v257, "output");
  __p[0] = &v257;
  v106 = std::__hash_table<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(a1 + 216), (uint64_t)&v257, (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 72;
  v105 = *(unsigned __int8 **)v106;
  *((_DWORD *)v106 - 8) = (_DWORD)v260;
  *((_WORD *)v106 - 14) = WORD2(v260);
  *(_QWORD *)v106 = 0;
  if (v105 == v106 - 24)
  {
    v107 = 4;
    v105 = v106 - 24;
  }
  else
  {
    if (!v105)
      goto LABEL_245;
    v107 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v105 + 8 * v107))();
LABEL_245:
  if (!v263)
  {
LABEL_248:
    *(_QWORD *)v106 = 0;
    goto LABEL_250;
  }
  if (v263 != &v261)
  {
    *(_QWORD *)v106 = v263;
    v106 = (unsigned __int8 *)&v263;
    goto LABEL_248;
  }
  *(_QWORD *)v106 = v106 - 24;
  (*((void (**)(uint64_t, _QWORD *))v261 + 3))((uint64_t)&v261, (_QWORD *)v106 - 3);
LABEL_250:
  if (SHIBYTE(v257.__end_cap_.__value_) < 0)
  {
    operator delete(v257.__begin_);
    v108 = v263;
    if (v263 != &v261)
      goto LABEL_252;
LABEL_255:
    v109 = 4;
    goto LABEL_256;
  }
  v108 = v263;
  if (v263 == &v261)
    goto LABEL_255;
LABEL_252:
  if (!v108)
    goto LABEL_257;
  v109 = 5;
  v104 = v108;
LABEL_256:
  (*((void (**)(void **))*v104 + v109))(v104);
LABEL_257:
  LODWORD(v260) = 3;
  WORD2(v260) = 256;
  v110 = &v261;
  v261 = &unk_1E2DB22C0;
  v263 = &v261;
  HIBYTE(v257.__end_cap_.__value_) = 7;
  strcpy((char *)&v257, "backend");
  __p[0] = &v257;
  v112 = std::__hash_table<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(a1 + 216), (uint64_t)&v257, (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 72;
  v111 = *(unsigned __int8 **)v112;
  *((_DWORD *)v112 - 8) = (_DWORD)v260;
  *((_WORD *)v112 - 14) = WORD2(v260);
  *(_QWORD *)v112 = 0;
  if (v111 == v112 - 24)
  {
    v113 = 4;
    v111 = v112 - 24;
  }
  else
  {
    if (!v111)
      goto LABEL_262;
    v113 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v111 + 8 * v113))();
LABEL_262:
  if (!v263)
  {
LABEL_265:
    *(_QWORD *)v112 = 0;
    goto LABEL_267;
  }
  if (v263 != &v261)
  {
    *(_QWORD *)v112 = v263;
    v112 = (unsigned __int8 *)&v263;
    goto LABEL_265;
  }
  *(_QWORD *)v112 = v112 - 24;
  (*((void (**)(uint64_t, _QWORD *))v261 + 3))((uint64_t)&v261, (_QWORD *)v112 - 3);
LABEL_267:
  if (SHIBYTE(v257.__end_cap_.__value_) < 0)
  {
    operator delete(v257.__begin_);
    v114 = v263;
    if (v263 != &v261)
      goto LABEL_269;
LABEL_272:
    v115 = 4;
    goto LABEL_273;
  }
  v114 = v263;
  if (v263 == &v261)
    goto LABEL_272;
LABEL_269:
  if (!v114)
    goto LABEL_274;
  v115 = 5;
  v110 = v114;
LABEL_273:
  (*((void (**)(void **))*v110 + v115))(v110);
LABEL_274:
  LODWORD(v260) = 0;
  WORD2(v260) = 256;
  v116 = &v261;
  v261 = &unk_1E2DB2318;
  v263 = &v261;
  HIBYTE(v257.__end_cap_.__value_) = 19;
  strcpy((char *)&v257.__end_ + 7, "ling");
  *(_OWORD *)&v257.__begin_ = v163[3];
  __p[0] = &v257;
  v118 = std::__hash_table<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(a1 + 216), (uint64_t)&v257, (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 72;
  v117 = *(unsigned __int8 **)v118;
  *((_DWORD *)v118 - 8) = (_DWORD)v260;
  *((_WORD *)v118 - 14) = WORD2(v260);
  *(_QWORD *)v118 = 0;
  if (v117 == v118 - 24)
  {
    v119 = 4;
    v117 = v118 - 24;
  }
  else
  {
    if (!v117)
      goto LABEL_279;
    v119 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v117 + 8 * v119))();
LABEL_279:
  if (!v263)
  {
LABEL_282:
    *(_QWORD *)v118 = 0;
    goto LABEL_284;
  }
  if (v263 != &v261)
  {
    *(_QWORD *)v118 = v263;
    v118 = (unsigned __int8 *)&v263;
    goto LABEL_282;
  }
  *(_QWORD *)v118 = v118 - 24;
  (*((void (**)(uint64_t, _QWORD *))v261 + 3))((uint64_t)&v261, (_QWORD *)v118 - 3);
LABEL_284:
  if (SHIBYTE(v257.__end_cap_.__value_) < 0)
  {
    operator delete(v257.__begin_);
    v120 = v263;
    if (v263 != &v261)
      goto LABEL_286;
LABEL_289:
    v121 = 4;
    goto LABEL_290;
  }
  v120 = v263;
  if (v263 == &v261)
    goto LABEL_289;
LABEL_286:
  if (!v120)
    goto LABEL_291;
  v121 = 5;
  v116 = v120;
LABEL_290:
  (*((void (**)(void **))*v116 + v121))(v116);
LABEL_291:
  LODWORD(v260) = 3;
  WORD2(v260) = 0;
  v122 = &v261;
  v261 = &unk_1E2DB2370;
  v263 = &v261;
  HIBYTE(v257.__end_cap_.__value_) = 8;
  strcpy((char *)&v257, "platform");
  __p[0] = &v257;
  v124 = std::__hash_table<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(a1 + 216), (uint64_t)&v257, (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 72;
  v123 = *(unsigned __int8 **)v124;
  *((_DWORD *)v124 - 8) = (_DWORD)v260;
  *((_WORD *)v124 - 14) = WORD2(v260);
  *(_QWORD *)v124 = 0;
  if (v123 == v124 - 24)
  {
    v125 = 4;
    v123 = v124 - 24;
  }
  else
  {
    if (!v123)
      goto LABEL_296;
    v125 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v123 + 8 * v125))();
LABEL_296:
  if (!v263)
  {
LABEL_299:
    *(_QWORD *)v124 = 0;
    goto LABEL_301;
  }
  if (v263 != &v261)
  {
    *(_QWORD *)v124 = v263;
    v124 = (unsigned __int8 *)&v263;
    goto LABEL_299;
  }
  *(_QWORD *)v124 = v124 - 24;
  (*((void (**)(uint64_t, _QWORD *))v261 + 3))((uint64_t)&v261, (_QWORD *)v124 - 3);
LABEL_301:
  if (SHIBYTE(v257.__end_cap_.__value_) < 0)
  {
    operator delete(v257.__begin_);
    v126 = v263;
    if (v263 != &v261)
      goto LABEL_303;
LABEL_306:
    v127 = 4;
    goto LABEL_307;
  }
  v126 = v263;
  if (v263 == &v261)
    goto LABEL_306;
LABEL_303:
  if (!v126)
    goto LABEL_308;
  v127 = 5;
  v122 = v126;
LABEL_307:
  (*((void (**)(void **))*v122 + v127))(v122);
LABEL_308:
  LODWORD(v260) = 0;
  WORD2(v260) = 256;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v167, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v167 = *(std::string *)a3;
  v263 = 0;
  v128 = (char *)operator new(0x20uLL);
  *(_QWORD *)v128 = &unk_1E2DB23C8;
  v129 = &v261;
  *(std::string *)(v128 + 8) = v167;
  memset(&v167, 0, sizeof(v167));
  v263 = (void **)v128;
  HIBYTE(v257.__end_cap_.__value_) = 7;
  strcpy((char *)&v257, "version");
  __p[0] = &v257;
  v131 = std::__hash_table<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(a1 + 216), (uint64_t)&v257, (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 72;
  v130 = *(unsigned __int8 **)v131;
  *((_DWORD *)v131 - 8) = (_DWORD)v260;
  *((_WORD *)v131 - 14) = WORD2(v260);
  *(_QWORD *)v131 = 0;
  if (v130 == v131 - 24)
  {
    v132 = 4;
    v130 = v131 - 24;
  }
  else
  {
    if (!v130)
      goto LABEL_316;
    v132 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v130 + 8 * v132))();
LABEL_316:
  if (!v263)
  {
LABEL_319:
    *(_QWORD *)v131 = 0;
    goto LABEL_321;
  }
  if (v263 != &v261)
  {
    *(_QWORD *)v131 = v263;
    v131 = (unsigned __int8 *)&v263;
    goto LABEL_319;
  }
  *(_QWORD *)v131 = v131 - 24;
  (*((void (**)(uint64_t, _QWORD *))v261 + 3))((uint64_t)&v261, (_QWORD *)v131 - 3);
LABEL_321:
  if (SHIBYTE(v257.__end_cap_.__value_) < 0)
  {
    operator delete(v257.__begin_);
    v133 = v263;
    if (v263 != &v261)
      goto LABEL_323;
LABEL_326:
    v134 = 4;
    goto LABEL_327;
  }
  v133 = v263;
  if (v263 == &v261)
    goto LABEL_326;
LABEL_323:
  if (!v133)
    goto LABEL_328;
  v134 = 5;
  v129 = v133;
LABEL_327:
  (*((void (**)(void **))*v129 + v134))(v129);
LABEL_328:
  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v167.__r_.__value_.__l.__data_);
    LODWORD(v260) = 0;
    WORD2(v260) = 256;
    if ((*(char *)(a3 + 23) & 0x80000000) == 0)
      goto LABEL_330;
  }
  else
  {
    LODWORD(v260) = 0;
    WORD2(v260) = 256;
    if ((*(char *)(a3 + 23) & 0x80000000) == 0)
    {
LABEL_330:
      v166 = *(std::string *)a3;
      goto LABEL_333;
    }
  }
  std::string::__init_copy_ctor_external(&v166, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
LABEL_333:
  v263 = 0;
  v135 = (char *)operator new(0x20uLL);
  *(_QWORD *)v135 = &unk_1E2DB2420;
  v136 = &v261;
  *(std::string *)(v135 + 8) = v166;
  memset(&v166, 0, sizeof(v166));
  v263 = (void **)v135;
  HIBYTE(v257.__end_cap_.__value_) = 18;
  strcpy((char *)&v257.__end_cap_, "ms");
  *(_OWORD *)&v257.__begin_ = v163[2];
  __p[0] = &v257;
  v138 = std::__hash_table<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(a1 + 216), (uint64_t)&v257, (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 72;
  v137 = *(unsigned __int8 **)v138;
  *((_DWORD *)v138 - 8) = (_DWORD)v260;
  *((_WORD *)v138 - 14) = WORD2(v260);
  *(_QWORD *)v138 = 0;
  if (v137 == v138 - 24)
  {
    v139 = 4;
    v137 = v138 - 24;
  }
  else
  {
    if (!v137)
      goto LABEL_338;
    v139 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v137 + 8 * v139))();
LABEL_338:
  if (!v263)
  {
LABEL_341:
    *(_QWORD *)v138 = 0;
    goto LABEL_343;
  }
  if (v263 != &v261)
  {
    *(_QWORD *)v138 = v263;
    v138 = (unsigned __int8 *)&v263;
    goto LABEL_341;
  }
  *(_QWORD *)v138 = v138 - 24;
  (*((void (**)(uint64_t, _QWORD *))v261 + 3))((uint64_t)&v261, (_QWORD *)v138 - 3);
LABEL_343:
  if (SHIBYTE(v257.__end_cap_.__value_) < 0)
  {
    operator delete(v257.__begin_);
    v140 = v263;
    if (v263 != &v261)
      goto LABEL_345;
LABEL_348:
    v141 = 4;
    goto LABEL_349;
  }
  v140 = v263;
  if (v263 == &v261)
    goto LABEL_348;
LABEL_345:
  if (!v140)
    goto LABEL_350;
  v141 = 5;
  v136 = v140;
LABEL_349:
  (*((void (**)(void **))*v136 + v141))(v136);
LABEL_350:
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v166.__r_.__value_.__l.__data_);
    LODWORD(v260) = 0;
    WORD2(v260) = 256;
    if ((*(char *)(a3 + 23) & 0x80000000) == 0)
      goto LABEL_352;
  }
  else
  {
    LODWORD(v260) = 0;
    WORD2(v260) = 256;
    if ((*(char *)(a3 + 23) & 0x80000000) == 0)
    {
LABEL_352:
      v165 = *(std::string *)a3;
      goto LABEL_355;
    }
  }
  std::string::__init_copy_ctor_external(&v165, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
LABEL_355:
  v263 = 0;
  v142 = (char *)operator new(0x20uLL);
  *(_QWORD *)v142 = &unk_1E2DB2478;
  *(std::string *)(v142 + 8) = v165;
  memset(&v165, 0, sizeof(v165));
  v263 = (void **)v142;
  v143 = (char *)operator new(0x20uLL);
  v257.__begin_ = (std::vector<std::string>::pointer)v143;
  v144 = &v261;
  *(_OWORD *)&v257.__end_ = v164;
  *(_OWORD *)v143 = v163[1];
  *(_OWORD *)(v143 + 10) = v163[0];
  v143[26] = 0;
  __p[0] = &v257;
  v146 = std::__hash_table<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(a1 + 216), (uint64_t)&v257, (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 72;
  v145 = *(unsigned __int8 **)v146;
  *((_DWORD *)v146 - 8) = (_DWORD)v260;
  *((_WORD *)v146 - 14) = WORD2(v260);
  *(_QWORD *)v146 = 0;
  if (v145 == v146 - 24)
  {
    v147 = 4;
    v145 = v146 - 24;
  }
  else
  {
    if (!v145)
      goto LABEL_360;
    v147 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v145 + 8 * v147))();
LABEL_360:
  if (!v263)
  {
LABEL_363:
    *(_QWORD *)v146 = 0;
    goto LABEL_365;
  }
  if (v263 != &v261)
  {
    *(_QWORD *)v146 = v263;
    v146 = (unsigned __int8 *)&v263;
    goto LABEL_363;
  }
  *(_QWORD *)v146 = v146 - 24;
  (*((void (**)(uint64_t, _QWORD *))v261 + 3))((uint64_t)&v261, (_QWORD *)v146 - 3);
LABEL_365:
  if (SHIBYTE(v257.__end_cap_.__value_) < 0)
  {
    operator delete(v257.__begin_);
    v148 = v263;
    if (v263 != &v261)
      goto LABEL_367;
LABEL_370:
    v149 = 4;
    goto LABEL_371;
  }
  v148 = v263;
  if (v263 == &v261)
    goto LABEL_370;
LABEL_367:
  if (!v148)
    goto LABEL_372;
  v149 = 5;
  v144 = v148;
LABEL_371:
  (*((void (**)(void **))*v144 + v149))(v144);
LABEL_372:
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v165.__r_.__value_.__l.__data_);
  LODWORD(v260) = 0;
  WORD2(v260) = 256;
  v150 = &v261;
  v261 = &unk_1E2DB24D0;
  v263 = &v261;
  HIBYTE(v257.__end_cap_.__value_) = 4;
  strcpy((char *)&v257, "help");
  __p[0] = &v257;
  v152 = std::__hash_table<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(a1 + 216), (uint64_t)&v257, (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 72;
  v151 = *(unsigned __int8 **)v152;
  *((_DWORD *)v152 - 8) = (_DWORD)v260;
  *((_WORD *)v152 - 14) = WORD2(v260);
  *(_QWORD *)v152 = 0;
  if (v151 == v152 - 24)
  {
    v153 = 4;
    v151 = v152 - 24;
  }
  else
  {
    if (!v151)
      goto LABEL_379;
    v153 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v151 + 8 * v153))();
LABEL_379:
  if (!v263)
  {
LABEL_382:
    *(_QWORD *)v152 = 0;
    goto LABEL_384;
  }
  if (v263 != &v261)
  {
    *(_QWORD *)v152 = v263;
    v152 = (unsigned __int8 *)&v263;
    goto LABEL_382;
  }
  *(_QWORD *)v152 = v152 - 24;
  (*((void (**)(uint64_t, _QWORD *))v261 + 3))((uint64_t)&v261, (_QWORD *)v152 - 3);
LABEL_384:
  if (SHIBYTE(v257.__end_cap_.__value_) < 0)
  {
    operator delete(v257.__begin_);
    v154 = v263;
    if (v263 != &v261)
      goto LABEL_386;
LABEL_389:
    v155 = 4;
    goto LABEL_390;
  }
  v154 = v263;
  if (v263 == &v261)
    goto LABEL_389;
LABEL_386:
  if (!v154)
    goto LABEL_391;
  v155 = 5;
  v150 = v154;
LABEL_390:
  (*((void (**)(void **))*v150 + v155))(v150);
LABEL_391:
  LODWORD(v260) = 3;
  WORD2(v260) = 0;
  v156 = &v261;
  v261 = &unk_1E2DB2528;
  v263 = &v261;
  HIBYTE(v257.__end_cap_.__value_) = 8;
  strcpy((char *)&v257, "help-all");
  __p[0] = &v257;
  v158 = std::__hash_table<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(a1 + 216), (uint64_t)&v257, (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 72;
  v157 = *(unsigned __int8 **)v158;
  *((_DWORD *)v158 - 8) = (_DWORD)v260;
  *((_WORD *)v158 - 14) = WORD2(v260);
  *(_QWORD *)v158 = 0;
  if (v157 == v158 - 24)
  {
    v159 = 4;
    v157 = v158 - 24;
  }
  else
  {
    if (!v157)
      goto LABEL_396;
    v159 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v157 + 8 * v159))();
LABEL_396:
  if (!v263)
  {
LABEL_399:
    *(_QWORD *)v158 = 0;
    goto LABEL_401;
  }
  if (v263 != &v261)
  {
    *(_QWORD *)v158 = v263;
    v158 = (unsigned __int8 *)&v263;
    goto LABEL_399;
  }
  *(_QWORD *)v158 = v158 - 24;
  (*((void (**)(uint64_t, _QWORD *))v261 + 3))((uint64_t)&v261, (_QWORD *)v158 - 3);
LABEL_401:
  if (SHIBYTE(v257.__end_cap_.__value_) < 0)
  {
    operator delete(v257.__begin_);
    v160 = v263;
    if (v263 != &v261)
      goto LABEL_403;
LABEL_406:
    v161 = 4;
    goto LABEL_407;
  }
  v160 = v263;
  if (v263 == &v261)
    goto LABEL_406;
LABEL_403:
  if (!v160)
    goto LABEL_408;
  v161 = 5;
  v156 = v160;
LABEL_407:
  (*((void (**)(void **))*v156 + v161))(v156);
LABEL_408:
  if (v254 < 0)
    operator delete(v253);
  return a1;
}

void sub_1910F1CC8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::unordered_map<std::string,std::shared_ptr<cxxopts::OptionDetails>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2710;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::unordered_map<std::string,std::shared_ptr<cxxopts::OptionDetails>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2710;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<std::unordered_map<std::string,std::shared_ptr<cxxopts::OptionDetails>>>::__on_zero_shared(uint64_t a1)
{
  void **v2;
  void **v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;

  v2 = *(void ***)(a1 + 40);
  if (v2)
  {
    do
    {
      while (1)
      {
        v3 = (void **)*v2;
        v4 = (std::__shared_weak_count *)v2[6];
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v6 = __ldaxr(p_shared_owners);
          while (__stlxr(v6 - 1, p_shared_owners));
          if (!v6)
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
        }
        if (*((char *)v2 + 39) < 0)
          break;
        operator delete(v2);
        v2 = v3;
        if (!v3)
          goto LABEL_11;
      }
      operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
LABEL_11:
  v7 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v7)
    operator delete(v7);
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E2DB2580;
  return result;
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E2DB2580;
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::operator()(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v4;
  __int128 v5;
  std::string __p;

  v4 = cxxopts::OptionValue::as<std::string>(a3);
  if (*(char *)(v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v4, *(_QWORD *)(v4 + 8));
  }
  else
  {
    v5 = *(_OWORD *)v4;
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 16);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
  }
  Espresso::AOT::AOTCompilerOptions::SetInput(a2, (__n128 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1910F2648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A89BB2)
    return a1 + 8;
  if (((v3 & 0x8000000191A89BB2 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A89BB2))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A89BB2 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target_type()
{
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  void **v14;
  unsigned __int8 *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void **v21;
  unsigned __int8 *j;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void **v26;
  unsigned __int8 *i;
  _QWORD *v28;
  __int128 *v29;
  __int128 v30;
  float v31;
  float v32;
  uint64_t v33;
  _QWORD *v34;
  _BOOL8 v35;
  unint64_t v36;
  unint64_t v37;
  size_t prime;
  int8x8_t v39;
  unint64_t v40;
  uint8x8_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD v46[2];
  char v47;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v46, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v23 = *((_QWORD *)v15 + 1);
            if (v23 == v11)
            {
              v24 = v15[39];
              if ((v24 & 0x80u) == 0)
                v25 = v15[39];
              else
                v25 = *((_QWORD *)v15 + 3);
              if (v25 == v17)
              {
                v26 = (const void **)(v15 + 16);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, *((_QWORD *)v15 + 3)))
                    return v15;
                }
                else
                {
                  if (!v15[39])
                    return v15;
                  for (i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    v26 = (const void **)((char *)v26 + 1);
                    if (!--v24)
                      return v15;
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = *(unsigned __int8 **)v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = *((_QWORD *)v15 + 1);
          if (v18 == v11)
          {
            v19 = v15[39];
            if ((v19 & 0x80u) == 0)
              v20 = v15[39];
            else
              v20 = *((_QWORD *)v15 + 3);
            if (v20 == v17)
            {
              v21 = (const void **)(v15 + 16);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, *((_QWORD *)v15 + 3)))
                  return v15;
              }
              else
              {
                if (!v15[39])
                  return v15;
                for (j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  v21 = (const void **)((char *)v21 + 1);
                  if (!--v19)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v28 = (_QWORD *)(a1 + 16);
  v15 = (unsigned __int8 *)operator new(0x50uLL);
  v46[0] = v15;
  v46[1] = a1 + 16;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v11;
  v29 = *a4;
  v30 = **a4;
  *((_QWORD *)v15 + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v15 + 1) = v30;
  *((_QWORD *)v29 + 1) = 0;
  *((_QWORD *)v29 + 2) = 0;
  *(_QWORD *)v29 = 0;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  *((_QWORD *)v15 + 9) = 0;
  v47 = 1;
  v31 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v32 = *(float *)(a1 + 32);
  if (v12 && (float)(v32 * (float)v12) >= v31)
  {
    v33 = *(_QWORD *)a1;
    v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v34)
    {
LABEL_54:
      *(_QWORD *)v15 = *v34;
LABEL_89:
      *v34 = v15;
      goto LABEL_90;
    }
  }
  else
  {
    v35 = 1;
    if (v12 >= 3)
      v35 = (v12 & (v12 - 1)) != 0;
    v36 = v35 | (2 * v12);
    v37 = vcvtps_u32_f32(v31 / v32);
    if (v36 <= v37)
      prime = v37;
    else
      prime = v36;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v39 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v39)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v39)
    {
      v40 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v39 < 3uLL || (v41 = (uint8x8_t)vcnt_s8(v39), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        v40 = std::__next_prime(v40);
      }
      else
      {
        v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2)
          v40 = v42;
      }
      if (prime <= v40)
        prime = v40;
      if (prime < *(_QWORD *)&v39)
LABEL_65:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v43 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v33 = *(_QWORD *)a1;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        if (v34)
          goto LABEL_54;
      }
      else
      {
        v4 = v11;
        v33 = *(_QWORD *)a1;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        if (v34)
          goto LABEL_54;
      }
    }
    else
    {
      v4 = v43 & v11;
      v33 = *(_QWORD *)a1;
      v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v43 & v11));
      if (v34)
        goto LABEL_54;
    }
  }
  *(_QWORD *)v15 = *v28;
  *v28 = v15;
  *(_QWORD *)(v33 + 8 * v4) = v28;
  if (*(_QWORD *)v15)
  {
    v44 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v44 >= v12)
        v44 %= v12;
    }
    else
    {
      v44 &= v12 - 1;
    }
    v34 = (_QWORD *)(*(_QWORD *)a1 + 8 * v44);
    goto LABEL_89;
  }
LABEL_90:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_1910F2B10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#2},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#2}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E2DB2268;
  return result;
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#2},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#2}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E2DB2268;
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#2},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#2}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::operator()(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v4;
  __int128 v5;
  std::string __p;

  v4 = cxxopts::OptionValue::as<std::string>(a3);
  if (*(char *)(v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v4, *(_QWORD *)(v4 + 8));
  }
  else
  {
    v5 = *(_OWORD *)v4;
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 16);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
  }
  Espresso::AOT::AOTCompilerOptions::SetOutput(a2, (__n128 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1910F2BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#2},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#2}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A89D39)
    return a1 + 8;
  if (((v3 & 0x8000000191A89D39 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A89D39))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A89D39 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#2},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#2}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target_type()
{
}

_QWORD *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#3},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#3}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E2DB22C0;
  return result;
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#3},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#3}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E2DB22C0;
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#3},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#3}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::operator()(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v4;
  __int128 v5;
  std::string __p;

  v4 = cxxopts::OptionValue::as<std::string>(a3);
  if (*(char *)(v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v4, *(_QWORD *)(v4 + 8));
  }
  else
  {
    v5 = *(_OWORD *)v4;
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 16);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
  }
  Espresso::AOT::AOTCompilerOptions::SetBackend(a2, (__n128 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1910F2D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#3},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#3}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A89EC1)
    return a1 + 8;
  if (((v3 & 0x8000000191A89EC1 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A89EC1))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A89EC1 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#3},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#3}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target_type()
{
}

_QWORD *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#4},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#4}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E2DB2318;
  return result;
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#4},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#4}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E2DB2318;
}

uint64_t std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#4},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#4}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::operator()(uint64_t a1, uint64_t a2, const void **a3)
{
  char v4;

  v4 = *(_BYTE *)cxxopts::OptionValue::as<BOOL>(a3);
  return Espresso::AOT::AOTCompilerOptions::SetBuildForProfiling(a2, v4);
}

uint64_t std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#4},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#4}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A8A049)
    return a1 + 8;
  if (((v3 & 0x8000000191A8A049 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A8A049))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A8A049 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#4},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#4}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target_type()
{
}

_QWORD *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#5},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#5}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E2DB2370;
  return result;
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#5},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#5}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E2DB2370;
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#5},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#5}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::operator()(uint64_t a1, uint64_t a2, const void **a3)
{
  Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#5}::operator()(a1 + 8, a2, a3);
}

uint64_t std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#5},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#5}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A8A1D1)
    return a1 + 8;
  if (((v3 & 0x8000000191A8A1D1 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A8A1D1))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A8A1D1 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#5},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#5}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target_type()
{
}

void Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#5}::operator()(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v4;
  __int128 v5;
  std::string v6;
  int v7;
  void *__p[2];
  _BYTE v9[18];
  char v10;
  char v11;

  v10 = 2;
  strcpy(v9, "\te5");
  strcpy((char *)__p, "platforms");
  v4 = cxxopts::OptionValue::as<std::string>(a3);
  if (*(char *)(v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)v4, *(_QWORD *)(v4 + 8));
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v6.__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 16);
    *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v5;
  }
  v7 = 3;
  Espresso::AOT::AOTCompilerOptions::SetOption(a2, (__int128 *)&v9[1], (__int128 *)__p, (uint64_t)&v6);
  if (v7 != -1)
    ((void (*)(char *, std::string *))off_1E2DD14D0[v7])(&v11, &v6);
  v7 = -1;
  if ((v9[0] & 0x80000000) == 0)
  {
    if ((v10 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(*(void **)&v9[1]);
    return;
  }
  operator delete(__p[0]);
  if (v10 < 0)
    goto LABEL_10;
}

void sub_1910F30D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  std::variant<BOOL,int,float,std::string>::~variant[abi:ne180100]((uint64_t)&a9);
  if (a19 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v19 - 25) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((*(char *)(v19 - 25) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v19 - 48));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#6},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#6}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::~__func(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = &unk_1E2DB23C8;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#6},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#6}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E2DB23C8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#6},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#6}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = &unk_1E2DB23C8;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1910F3234(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#6},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#6}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = &unk_1E2DB23C8;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#6},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#6}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#6},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#6}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::destroy_deallocate(void **__p)
{
  void **v1;

  v1 = __p;
  if (*((char *)__p + 31) < 0)
  {
    operator delete(__p[1]);
    __p = v1;
  }
  operator delete(__p);
}

uint64_t std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#6},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#6}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::operator()(uint64_t a1, uint64_t a2, const void **a3)
{
  char v4;

  v4 = *(_BYTE *)cxxopts::OptionValue::as<BOOL>(a3);
  return Espresso::AOT::AOTCompilerOptions::SetShowVersion(a2, v4);
}

uint64_t std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#6},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#6}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A8A359)
    return a1 + 8;
  if (((v3 & 0x8000000191A8A359 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A8A359))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A8A359 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#6},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#6}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#7},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#7}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::~__func(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = &unk_1E2DB2420;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#7},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#7}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E2DB2420;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#7},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#7}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = &unk_1E2DB2420;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1910F34A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#7},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#7}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = &unk_1E2DB2420;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#7},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#7}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#7},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#7}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::destroy_deallocate(void **__p)
{
  void **v1;

  v1 = __p;
  if (*((char *)__p + 31) < 0)
  {
    operator delete(__p[1]);
    __p = v1;
  }
  operator delete(__p);
}

uint64_t std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#7},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#7}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::operator()(uint64_t a1, uint64_t a2, const void **a3)
{
  char v4;

  v4 = *(_BYTE *)cxxopts::OptionValue::as<BOOL>(a3);
  return Espresso::AOT::AOTCompilerOptions::SetQueryE5Platforms(a2, v4);
}

uint64_t std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#7},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#7}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A8A4E1)
    return a1 + 8;
  if (((v3 & 0x8000000191A8A4E1 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A8A4E1))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A8A4E1 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#7},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#7}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#8},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#8}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::~__func(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = &unk_1E2DB2478;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#8},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#8}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E2DB2478;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#8},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#8}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = &unk_1E2DB2478;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1910F370C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#8},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#8}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = &unk_1E2DB2478;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#8},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#8}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#8},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#8}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::destroy_deallocate(void **__p)
{
  void **v1;

  v1 = __p;
  if (*((char *)__p + 31) < 0)
  {
    operator delete(__p[1]);
    __p = v1;
  }
  operator delete(__p);
}

uint64_t std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#8},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#8}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::operator()(uint64_t a1, uint64_t a2, const void **a3)
{
  char v4;

  v4 = *(_BYTE *)cxxopts::OptionValue::as<BOOL>(a3);
  return Espresso::AOT::AOTCompilerOptions::SetQueryE5PlatformFamilies(a2, v4);
}

uint64_t std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#8},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#8}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A8A669)
    return a1 + 8;
  if (((v3 & 0x8000000191A8A669 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A8A669))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A8A669 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#8},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#8}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target_type()
{
}

_QWORD *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#9},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#9}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E2DB24D0;
  return result;
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#9},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#9}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E2DB24D0;
}

_BYTE *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#9},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#9}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::operator()(uint64_t a1, uint64_t a2, const void **a3)
{
  _BYTE *result;
  std::runtime_error *exception;

  result = (_BYTE *)cxxopts::OptionValue::as<BOOL>(a3);
  if (*result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Usage requested");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1910F3904(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#9},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#9}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A8A7F1)
    return a1 + 8;
  if (((v3 & 0x8000000191A8A7F1 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A8A7F1))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A8A7F1 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#9},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#9}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target_type()
{
}

_QWORD *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#10},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#10}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E2DB2528;
  return result;
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#10},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#10}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E2DB2528;
}

void std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#10},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#10}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::operator()()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Verbose usage requested");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_1910F3A20(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#10},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#10}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A8A979)
    return a1 + 8;
  if (((v3 & 0x8000000191A8A979 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A8A979))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A8A979 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#10},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#10}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target_type()
{
}

void Espresso::AOT::AOTCompilerOptionsManager::GetVerboseUsage(void ***a1, void **a2)
{
  void **v4;
  void **v5;

  v4 = a1[1];
  v5 = a2;
  if (v4 != a2)
  {
    do
    {
      if (*((char *)v4 - 1) < 0)
        operator delete(*(v4 - 3));
      v4 -= 3;
    }
    while (v4 != a2);
    v5 = *a1;
  }
  a1[1] = a2;
  operator delete(v5);
}

void cxxopts::values::standard_value<BOOL>::standard_value(uint64_t a1, void **a2, std::__shared_weak_count **a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;

  if (*(char *)(a1 + 79) < 0)
    operator delete(*a2);
  v5 = *a3;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

void cxxopts::ParseResult::ParseResult(uint64_t a1, void **a2, void **a3)
{
  void **v5;
  void *v6;

  v5 = *(void ***)(a1 + 144);
  v6 = a2;
  if (v5 != a2)
  {
    do
    {
      if (*((char *)v5 - 1) < 0)
        operator delete(*(v5 - 3));
      if (*((char *)v5 - 25) < 0)
        operator delete(*(v5 - 6));
      v5 -= 6;
    }
    while (v5 != a2);
    v6 = *a3;
  }
  *(_QWORD *)(a1 + 144) = a2;
  operator delete(v6);
}

void Espresso::AOT::E5BackendFlexibleShapeTransformer::Run(uint64_t a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t EnumeratedShapes;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned __int8 *v20;
  int v21;
  size_t size;
  unint64_t v23;
  std::string *p_dst;
  uint64_t v25;
  uint64_t v26;
  std::string *v27;
  int v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string::size_type v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count_vtbl *v39;
  uint64_t *v40;
  std::string::size_type v41;
  _QWORD *v42;
  std::string::size_type v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  std::string::size_type v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  _BYTE *v57;
  size_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  _BYTE *v67;
  unint64_t v68;
  char *v69;
  void *v70;
  void **v71;
  void **v72;
  void **v73;
  int v74;
  size_t v75;
  const void *v76;
  char *v77;
  const void *v78;
  const void *v79;
  int v80;
  size_t v81;
  const void *v82;
  size_t v83;
  int v84;
  _BOOL4 v85;
  int v86;
  _BOOL4 v87;
  _QWORD *v88;
  std::string *v89;
  __int128 v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _BYTE *v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  std::string::size_type v104;
  const void *v105;
  char *v106;
  size_t v107;
  const void *v108;
  std::__shared_weak_count_vtbl *v109;
  MIL::Builder::FunctionBuilder *v110;
  uint64_t v111;
  char *v112;
  void *v113;
  char *v114;
  void *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  unsigned __int8 *v121;
  uint64_t v122;
  char *v123;
  void *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  char *v131;
  void *v132;
  char *v133;
  std::__shared_weak_count *v134;
  char *v135;
  void *v136;
  std::string *v137;
  __int128 v138;
  char *v139;
  char *v140;
  _QWORD *v141;
  char *v142;
  char *v143;
  _BYTE *v144;
  size_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char *v150;
  char **v151;
  _BYTE *v152;
  unint64_t v153;
  char *v154;
  void *v155;
  MIL::Builder::ProgramBuilder *v156;
  MIL::Builder::ProgramBuilder **v157;
  MIL::Builder::ProgramBuilder **v158;
  int v159;
  size_t v160;
  const void *v161;
  char *v162;
  const void *v163;
  const void *v164;
  int v165;
  size_t v166;
  const void *v167;
  size_t v168;
  int v169;
  _BOOL4 v170;
  int v171;
  _BOOL4 v172;
  MIL::Builder::ProgramBuilder *v173;
  std::string *v174;
  __int128 v175;
  MIL::Builder::ProgramBuilder *v176;
  uint64_t v177;
  MIL::Builder::ProgramBuilder *v178;
  uint64_t v179;
  _BYTE *v180;
  int v181;
  uint64_t v182;
  int v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  MIL::Builder::ProgramBuilder *v187;
  uint64_t v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  MIL::Builder::ProgramBuilder *v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  uint64_t v198;
  unsigned __int8 *v199;
  std::string *v200;
  __int128 v201;
  uint64_t v202;
  char *v203;
  char *v204;
  char **v205;
  char **v206;
  int v207;
  size_t v208;
  const void *v209;
  _QWORD *v210;
  const void *v211;
  const void *v212;
  int v213;
  size_t v214;
  const void *v215;
  size_t v216;
  int v217;
  _BOOL4 v218;
  int v219;
  _BOOL4 v220;
  char *v221;
  std::string *v222;
  __int128 v223;
  char *v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  _BYTE *v228;
  int v229;
  uint64_t v230;
  int v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  unint64_t *v237;
  unint64_t v238;
  _QWORD *v239;
  std::string::size_type v240;
  uint64_t *v241;
  std::string::size_type v242;
  _QWORD *v243;
  std::string::size_type v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::string::size_type v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  int *v261;
  int *v262;
  std::string::size_type v263;
  int v264;
  MIL::MILContext *v265;
  BOOL v266;
  uint64_t v267;
  uint64_t v268;
  MIL::Builder::ProgramBuilder *v269;
  MIL::Builder::ProgramBuilder *v270;
  MIL::Builder::ProgramBuilder *v271;
  int64_t v272;
  int64_t v273;
  unint64_t v274;
  int64_t v275;
  unint64_t v276;
  _BYTE *v277;
  MIL::Builder::ProgramBuilder *v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  MIL::Builder::ProgramBuilder *v282;
  _OWORD *v283;
  __int128 *v284;
  uint64_t v285;
  __int128 v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  char *v290;
  std::string::size_type v291;
  std::string::size_type v292;
  uint64_t v293;
  unint64_t v294;
  int64_t v295;
  unint64_t v296;
  _BYTE *v297;
  uint64_t *v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  char *v302;
  _OWORD *v303;
  char *v304;
  uint64_t v305;
  __int128 v306;
  uint64_t v307;
  char *v308;
  std::string *v309;
  unsigned __int8 *on_zero_shared;
  char v311;
  char v312;
  unint64_t *v313;
  unint64_t v314;
  MIL::Builder::FunctionBuilder *v315;
  MIL::Builder::FunctionBuilder *v316;
  std::string::size_type v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  char *v321;
  const void *v322;
  char *v323;
  size_t v324;
  const void *v325;
  char *v326;
  MIL::Builder::ProgramBuilder *v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  std::string::size_type v331;
  std::__shared_weak_count_vtbl *v332;
  char *v333;
  void *v334;
  char *v335;
  void *v336;
  char *v337;
  void *v338;
  MIL::Builder::FunctionBuilder *v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  char *v343;
  char *v344;
  void *v345;
  char *v346;
  void *v347;
  char *v348;
  void *v349;
  char *v350;
  void *v351;
  unint64_t *v352;
  unint64_t v353;
  char *v354;
  void *v355;
  MIL::Attributes::FlexibleShapeInfo *v356;
  char *v357;
  char *v358;
  void *v359;
  char *v360;
  void *v361;
  char *v362;
  void *v363;
  void *v364;
  void *v365;
  uint64_t **v366;
  char *v367;
  int v368;
  size_t v369;
  uint64_t *v370;
  int v371;
  size_t v372;
  const void *v373;
  size_t v374;
  int v375;
  BOOL v376;
  int v377;
  _BOOL4 v378;
  unint64_t *v379;
  unint64_t v380;
  std::__shared_weak_count *v381;
  unint64_t *v382;
  unint64_t v383;
  uint64_t *v384;
  uint64_t v385;
  _QWORD *v386;
  uint64_t v387;
  std::__shared_weak_count *v388;
  unint64_t *v389;
  unint64_t v390;
  uint64_t v391;
  std::__shared_weak_count *v392;
  unint64_t *v393;
  unint64_t v394;
  std::__shared_weak_count *v395;
  unint64_t *v396;
  unint64_t v397;
  unint64_t *v398;
  unint64_t v399;
  std::__shared_weak_count *v400;
  unint64_t *v401;
  unint64_t v402;
  _QWORD *v403;
  _QWORD *v404;
  _QWORD *v405;
  uint64_t *j;
  std::__shared_weak_count *v407;
  unint64_t *v408;
  unint64_t v409;
  std::__shared_weak_count *v410;
  unint64_t *v411;
  unint64_t v412;
  std::__shared_weak_count *v413;
  unint64_t *v414;
  unint64_t v415;
  std::__shared_weak_count *v416;
  unint64_t *v417;
  unint64_t v418;
  std::__shared_weak_count *v419;
  unint64_t *v420;
  unint64_t v421;
  std::__shared_weak_count *v422;
  unint64_t *v423;
  unint64_t v424;
  void *v425;
  void *v426;
  MIL::Builder::ProgramBuilder *v427;
  void **v428;
  void **v429;
  std::__shared_weak_count *v430;
  unint64_t *v431;
  unint64_t v432;
  void *v433;
  void **v434;
  void **v435;
  std::__shared_weak_count *v436;
  unint64_t *v437;
  unint64_t v438;
  void *v439;
  void **v440;
  void **v441;
  std::__shared_weak_count *v442;
  unint64_t *v443;
  unint64_t v444;
  void *v445;
  std::string *v446;
  std::string *v447;
  void *v448;
  std::__shared_weak_count *v449;
  unint64_t *v450;
  unint64_t v451;
  std::__shared_weak_count *v452;
  unint64_t *v453;
  unint64_t v454;
  std::__shared_weak_count *v455;
  unint64_t *v456;
  unint64_t v457;
  std::logic_error *v458;
  std::string *v459;
  __int128 v460;
  std::logic_error *exception;
  std::string *v462;
  __int128 v463;
  std::runtime_error *v464;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t Function;
  unsigned __int8 *v470;
  MIL::IRObject *v471;
  char v472;
  uint64_t *v473;
  uint64_t *v474;
  int *i;
  void *__p[2];
  void *v477[2];
  int v478;
  uint64_t v479;
  std::__shared_weak_count *v480;
  std::string v481;
  uint64_t v482;
  std::__shared_weak_count *v483;
  uint64_t v484;
  std::__shared_weak_count *v485;
  uint64_t v486;
  std::__shared_weak_count *v487;
  uint64_t v488;
  std::__shared_weak_count *v489;
  uint64_t *v490;
  std::__shared_weak_count *v491;
  uint64_t v492;
  std::__shared_weak_count *v493;
  std::string v494;
  void *v495[2];
  void *v496[2];
  int v497;
  std::string v498;
  uint64_t v499;
  std::__shared_weak_count *v500;
  void *v501;
  void *v502;
  uint64_t v503;
  MIL::Attributes::FlexibleShapeInfo *v504;
  char **v505;
  char *v506[2];
  void *v507[2];
  void *v508[2];
  int v509;
  void *v510[2];
  void *v511[2];
  int v512;
  void *v513;
  std::string *v514;
  unint64_t v515;
  uint64_t v516;
  std::__shared_weak_count *v517;
  uint64_t v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  MIL::Builder::ProgramBuilder *v522[2];
  void *v523[2];
  int v524;
  std::__shared_weak_count_vtbl *v525;
  std::__shared_weak_count *v526;
  std::string::size_type v527;
  std::__shared_weak_count_vtbl *v528;
  std::string v529;
  std::string v530;
  std::string __dst;
  _BYTE v532[32];
  int v533;
  _BYTE v534[32];
  int v535;
  __int128 v536;
  std::string::size_type v537;
  __int128 v538;
  MIL::Builder::FunctionBuilder *v539;
  __int128 v540;

  v518 = 0x2B2382A400000000;
  v519 = 0u;
  v520 = 0u;
  v5 = kdebug_trace();
  if (!Espresso::AOT::E5BackendFlexibleShapeTransformer::HasAnEntryPointWithFlexibleShapeAttribute(v5, a1, a2))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 32))(__p, a1);
    v364 = __p[0];
    __p[0] = 0;
    *a3 = v364;
    a3[2] = 0;
    a3[3] = 0;
    a3[1] = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a3 + 1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
    v365 = __p[0];
    __p[0] = 0;
    if (v365)
      (*(void (**)(void *))(*(_QWORD *)v365 + 8))(v365);
LABEL_768:
    kdebug_trace();
    return;
  }
  v471 = (MIL::IRObject *)a1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 48))(&v516, a1);
  v514 = 0;
  v513 = 0;
  v515 = 0;
  *(_OWORD *)v510 = 0u;
  *(_OWORD *)v511 = 0u;
  v512 = 1065353216;
  *(_OWORD *)v507 = 0u;
  *(_OWORD *)v508 = 0u;
  v509 = 1065353216;
  v506[1] = 0;
  v505 = v506;
  v506[0] = 0;
  v467 = a2[1];
  if (*a2 != v467)
  {
    v6 = *a2;
    while (1)
    {
      v468 = v6;
      MIL::IRProgram::GetFunction();
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 48))(__p, a1);
      MIL::Attributes::FlexibleShapeInfo::Make();
      v7 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v8 = (unint64_t *)((char *)__p[1] + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      EnumeratedShapes = MIL::Attributes::FlexibleShapeInfo::GetEnumeratedShapes(v504);
      std::unordered_map<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>::unordered_map((uint64_t)&v501, EnumeratedShapes);
      MIL::Attributes::FlexibleShapeInfo::TryGetRangeShapes(v504);
      if (!v503)
        break;
      if (v499)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v462 = std::string::append((std::string *)v534, " has both enumerated and range shape configs which is not supported.");
        v463 = *(_OWORD *)&v462->__r_.__value_.__l.__data_;
        v477[0] = (void *)v462->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v463;
        v462->__r_.__value_.__l.__size_ = 0;
        v462->__r_.__value_.__r.__words[2] = 0;
        v462->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, (const std::string *)__p);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
      }
      memset(v532, 0, sizeof(v532));
      v533 = 1065353216;
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v505, (const void **)v468, v468);
      if (*(char *)(v468 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v498, *(const std::string::value_type **)v468, *(_QWORD *)(v468 + 8));
      }
      else
      {
        v11 = *(_OWORD *)v468;
        v498.__r_.__value_.__r.__words[2] = *(_QWORD *)(v468 + 16);
        *(_OWORD *)&v498.__r_.__value_.__l.__data_ = v11;
      }
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 48))(&v530, a1);
      Function = MIL::IRProgram::GetFunction();
      v13 = MIL::Attributes::FlexibleShapeInfo::GetEnumeratedShapes(v504);
      MIL::Attributes::FlexibleShapeInfo::TryGetDefaultShapes(v504);
      *(_OWORD *)__p = 0u;
      *(_OWORD *)v477 = 0u;
      v478 = 1065353216;
      v522[1] = 0;
      v523[0] = 0;
      v522[0] = (MIL::Builder::ProgramBuilder *)&v522[1];
      v14 = *(uint64_t **)(v13 + 16);
      if (!v14)
      {
        v472 = 0;
        goto LABEL_197;
      }
      v472 = 0;
      do
      {
        memset(v534, 0, sizeof(v534));
        v535 = 1065353216;
        v495[1] = 0;
        v496[0] = 0;
        v495[0] = &v495[1];
        v540 = *(_OWORD *)&v530.__r_.__value_.__l.__data_;
        if (v530.__r_.__value_.__l.__size_)
        {
          v15 = (unint64_t *)(v530.__r_.__value_.__l.__size_ + 8);
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
        }
        MIL::Builder::FunctionBuilder::Make();
        v17 = (std::__shared_weak_count *)*((_QWORD *)&v540 + 1);
        if (*((_QWORD *)&v540 + 1))
        {
          v18 = (unint64_t *)(*((_QWORD *)&v540 + 1) + 8);
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
            v474 = v14;
            v20 = (unsigned __int8 *)v14[7];
            if (!v20)
              goto LABEL_29;
LABEL_86:
            while (2)
            {
              *(_QWORD *)&v536 = v20 + 16;
              v54 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v534, v20 + 16, (uint64_t)&std::piecewise_construct, (__int128 **)&v536);
              v55 = v54;
              if (v20 != (unsigned __int8 *)v54)
              {
                v56 = (char *)*((_QWORD *)v20 + 5);
                v57 = (_BYTE *)*((_QWORD *)v20 + 6);
                v58 = v57 - v56;
                v59 = (v57 - v56) >> 3;
                v60 = *((_QWORD *)v54 + 7);
                v61 = (char *)*((_QWORD *)v54 + 5);
                if (v59 > (v60 - (uint64_t)v61) >> 3)
                {
                  v62 = v54 + 40;
                  if (v61)
                  {
                    *((_QWORD *)v54 + 6) = v61;
                    operator delete(v61);
                    v60 = 0;
                    *v62 = 0;
                    *((_QWORD *)v55 + 6) = 0;
                    *((_QWORD *)v55 + 7) = 0;
                  }
                  if ((v58 & 0x8000000000000000) != 0)
                    goto LABEL_781;
                  v63 = v60 >> 2;
                  if (v60 >> 2 <= v59)
                    v63 = (v57 - v56) >> 3;
                  v64 = (unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v63;
                  if (v64 >> 61)
LABEL_781:
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  v65 = (char *)operator new(8 * v64);
                  v61 = v65;
                  *((_QWORD *)v55 + 6) = v65;
                  v66 = v55 + 48;
                  *((_QWORD *)v66 - 1) = v65;
                  *((_QWORD *)v66 + 1) = &v65[8 * v64];
                  if (v57 != v56)
                    memcpy(v65, v56, v57 - v56);
                  goto LABEL_107;
                }
                v66 = v54 + 48;
                v67 = (_BYTE *)*((_QWORD *)v54 + 6);
                v68 = (v67 - v61) >> 3;
                if (v68 >= v59)
                {
                  if (v57 == v56)
                    goto LABEL_107;
                  v70 = (void *)*((_QWORD *)v54 + 5);
                  v69 = (char *)*((_QWORD *)v20 + 5);
                  goto LABEL_106;
                }
                if (v67 != v61)
                {
                  memmove(*((void **)v54 + 5), *((const void **)v20 + 5), v67 - v61);
                  v61 = *(char **)v66;
                }
                v69 = &v56[8 * v68];
                v58 = v57 - v69;
                if (v57 != v69)
                {
                  v70 = v61;
LABEL_106:
                  memmove(v70, v69, v58);
                }
LABEL_107:
                *(_QWORD *)v66 = &v61[v58];
              }
              v71 = (void **)v495[1];
              v72 = &v495[1];
              v73 = &v495[1];
              if (v495[1])
              {
                v74 = (char)v20[39];
                if (v74 >= 0)
                  v75 = v20[39];
                else
                  v75 = *((_QWORD *)v20 + 3);
                if (v74 >= 0)
                  v76 = v20 + 16;
                else
                  v76 = (const void *)*((_QWORD *)v20 + 2);
                while (1)
                {
                  while (1)
                  {
                    v72 = v71;
                    v79 = v71[4];
                    v77 = (char *)(v71 + 4);
                    v78 = v79;
                    v80 = v77[23];
                    if (v80 >= 0)
                      v81 = v77[23];
                    else
                      v81 = *((_QWORD *)v77 + 1);
                    if (v80 >= 0)
                      v82 = v77;
                    else
                      v82 = v78;
                    if (v81 >= v75)
                      v83 = v75;
                    else
                      v83 = v81;
                    v84 = memcmp(v76, v82, v83);
                    v85 = v75 < v81;
                    if (v84)
                      v85 = v84 < 0;
                    if (!v85)
                      break;
                    v71 = (void **)*v72;
                    v73 = v72;
                    if (!*v72)
                      goto LABEL_133;
                  }
                  v86 = memcmp(v82, v76, v83);
                  v87 = v81 < v75;
                  if (v86)
                    v87 = v86 < 0;
                  if (!v87)
                    break;
                  v71 = (void **)v72[1];
                  if (!v71)
                  {
                    v73 = v72 + 1;
                    goto LABEL_133;
                  }
                }
              }
              else
              {
LABEL_133:
                v88 = operator new(0x38uLL);
                v89 = (std::string *)(v88 + 4);
                if ((char)v20[39] < 0)
                {
                  std::string::__init_copy_ctor_external(v89, *((const std::string::value_type **)v20 + 2), *((_QWORD *)v20 + 3));
                }
                else
                {
                  v90 = *((_OWORD *)v20 + 1);
                  v88[6] = *((_QWORD *)v20 + 4);
                  *(_OWORD *)&v89->__r_.__value_.__l.__data_ = v90;
                }
                *v88 = 0;
                v88[1] = 0;
                v88[2] = v72;
                *v73 = v88;
                if (*(_QWORD *)v495[0])
                {
                  v495[0] = *(void **)v495[0];
                  v88 = *v73;
                }
                v91 = v495[1];
                v266 = v88 == v495[1];
                *((_BYTE *)v88 + 24) = v88 == v495[1];
                if (!v266)
                {
                  do
                  {
                    v92 = v88[2];
                    if (*(_BYTE *)(v92 + 24))
                      break;
                    v93 = *(_QWORD **)(v92 + 16);
                    v94 = *v93;
                    if (*v93 == v92)
                    {
                      v97 = v93[1];
                      if (!v97 || (v98 = *(unsigned __int8 *)(v97 + 24), v95 = (_BYTE *)(v97 + 24), v98))
                      {
                        if (*(_QWORD **)v92 == v88)
                        {
                          *(_BYTE *)(v92 + 24) = 1;
                          *((_BYTE *)v93 + 24) = 0;
                          v101 = *(_QWORD *)(v92 + 8);
                          *v93 = v101;
                          if (v101)
                            goto LABEL_153;
                        }
                        else
                        {
                          v99 = *(uint64_t **)(v92 + 8);
                          v100 = *v99;
                          *(_QWORD *)(v92 + 8) = *v99;
                          if (v100)
                          {
                            *(_QWORD *)(v100 + 16) = v92;
                            v93 = *(_QWORD **)(v92 + 16);
                          }
                          v99[2] = (uint64_t)v93;
                          *(_QWORD *)(*(_QWORD *)(v92 + 16) + 8 * (**(_QWORD **)(v92 + 16) != v92)) = v99;
                          *v99 = v92;
                          *(_QWORD *)(v92 + 16) = v99;
                          v93 = (_QWORD *)v99[2];
                          v92 = *v93;
                          *((_BYTE *)v99 + 24) = 1;
                          *((_BYTE *)v93 + 24) = 0;
                          v101 = *(_QWORD *)(v92 + 8);
                          *v93 = v101;
                          if (v101)
LABEL_153:
                            *(_QWORD *)(v101 + 16) = v93;
                        }
                        *(_QWORD *)(v92 + 16) = v93[2];
                        *(_QWORD *)(v93[2] + 8 * (*(_QWORD *)v93[2] != (_QWORD)v93)) = v92;
                        *(_QWORD *)(v92 + 8) = v93;
LABEL_83:
                        v93[2] = v92;
                        break;
                      }
                    }
                    else if (!v94 || (v96 = *(unsigned __int8 *)(v94 + 24), v95 = (_BYTE *)(v94 + 24), v96))
                    {
                      if (*(_QWORD **)v92 == v88)
                      {
                        v103 = v88[1];
                        *(_QWORD *)v92 = v103;
                        if (v103)
                        {
                          *(_QWORD *)(v103 + 16) = v92;
                          v93 = *(_QWORD **)(v92 + 16);
                        }
                        v88[2] = v93;
                        *(_QWORD *)(*(_QWORD *)(v92 + 16) + 8 * (**(_QWORD **)(v92 + 16) != v92)) = v88;
                        v88[1] = v92;
                        *(_QWORD *)(v92 + 16) = v88;
                        v93 = (_QWORD *)v88[2];
                        *((_BYTE *)v88 + 24) = 1;
                        *((_BYTE *)v93 + 24) = 0;
                        v92 = v93[1];
                        v102 = *(_QWORD **)v92;
                        v93[1] = *(_QWORD *)v92;
                        if (!v102)
                          goto LABEL_82;
                      }
                      else
                      {
                        *(_BYTE *)(v92 + 24) = 1;
                        *((_BYTE *)v93 + 24) = 0;
                        v92 = v93[1];
                        v102 = *(_QWORD **)v92;
                        v93[1] = *(_QWORD *)v92;
                        if (!v102)
                          goto LABEL_82;
                      }
                      v102[2] = v93;
LABEL_82:
                      *(_QWORD *)(v92 + 16) = v93[2];
                      *(_QWORD *)(v93[2] + 8 * (*(_QWORD *)v93[2] != (_QWORD)v93)) = v92;
                      *(_QWORD *)v92 = v93;
                      goto LABEL_83;
                    }
                    *(_BYTE *)(v92 + 24) = 1;
                    v88 = v93;
                    *((_BYTE *)v93 + 24) = v93 == v91;
                    *v95 = 1;
                  }
                  while (v93 != v91);
                }
                ++v496[0];
              }
              v20 = *(unsigned __int8 **)v20;
              if (!v20)
                goto LABEL_29;
              continue;
            }
          }
        }
        v474 = v14;
        v20 = (unsigned __int8 *)v14[7];
        if (v20)
          goto LABEL_86;
LABEL_29:
        MIL::Builder::FunctionBuilder::CreateFunction((MIL::Builder::FunctionBuilder *)v521);
        (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr))(*(_QWORD *)v539 + 232))(&v528);
        v21 = SHIBYTE(v498.__r_.__value_.__r.__words[2]);
        if ((v498.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v498.__r_.__value_.__r.__words[2]);
        else
          size = v498.__r_.__value_.__l.__size_;
        v23 = size + 1;
        if (size + 1 >= 0x7FFFFFFFFFFFFFF8)
          std::string::__throw_length_error[abi:ne180100]();
        if (v23 >= 0x17)
        {
          v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v23 | 7) != 0x17)
            v25 = v23 | 7;
          v26 = v25 + 1;
          p_dst = (std::string *)operator new(v25 + 1);
          __dst.__r_.__value_.__r.__words[2] = v26 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
          __dst.__r_.__value_.__l.__size_ = size + 1;
        }
        else
        {
          memset(&__dst, 0, sizeof(__dst));
          p_dst = &__dst;
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = size + 1;
          if (!size)
            goto LABEL_43;
        }
        if (v21 >= 0)
          v27 = &v498;
        else
          v27 = (std::string *)v498.__r_.__value_.__r.__words[0];
        memmove(p_dst, v27, size);
LABEL_43:
        *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + size) = 95;
        v28 = *((char *)v474 + 39);
        if (v28 >= 0)
          v29 = (const std::string::value_type *)(v474 + 2);
        else
          v29 = (const std::string::value_type *)v474[2];
        if (v28 >= 0)
          v30 = *((unsigned __int8 *)v474 + 39);
        else
          v30 = v474[3];
        v31 = std::string::append(&__dst, v29, v30);
        v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        v537 = v31->__r_.__value_.__r.__words[2];
        v536 = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v33 = v514;
          if ((unint64_t)v514 >= v515)
          {
LABEL_55:
            v514 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v513, (uint64_t)&v536);
            v35 = v530.__r_.__value_.__l.__size_;
            v538 = *(_OWORD *)&v530.__r_.__value_.__l.__data_;
            if (v530.__r_.__value_.__l.__size_)
              goto LABEL_56;
            goto LABEL_58;
          }
        }
        else
        {
          v33 = v514;
          if ((unint64_t)v514 >= v515)
            goto LABEL_55;
        }
        if (SHIBYTE(v537) < 0)
        {
          std::string::__init_copy_ctor_external(v33, (const std::string::value_type *)v536, *((std::string::size_type *)&v536 + 1));
          v514 = v33 + 1;
          v35 = v530.__r_.__value_.__l.__size_;
          v538 = *(_OWORD *)&v530.__r_.__value_.__l.__data_;
          if (v530.__r_.__value_.__l.__size_)
          {
LABEL_56:
            v36 = (unint64_t *)(v35 + 8);
            do
              v37 = __ldxr(v36);
            while (__stxr(v37 + 1, v36));
          }
        }
        else
        {
          v34 = v536;
          v33->__r_.__value_.__r.__words[2] = v537;
          *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v34;
          v514 = v33 + 1;
          v35 = v530.__r_.__value_.__l.__size_;
          v538 = *(_OWORD *)&v530.__r_.__value_.__l.__data_;
          if (v530.__r_.__value_.__l.__size_)
            goto LABEL_56;
        }
LABEL_58:
        v525 = v528;
        if (v528)
        {
          v38 = (std::__shared_weak_count *)operator new();
          v39 = v528;
          v38->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2E10;
          v38->__shared_owners_ = 0;
          v38->__shared_weak_owners_ = 0;
          v38[1].__vftable = v39;
        }
        else
        {
          v38 = 0;
        }
        v526 = v38;
        v528 = 0;
        MIL::Builder::FunctionBuilder::Make();
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v536;
        v40 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v510, (uint64_t)&v536, (uint64_t)&std::piecewise_construct, (__int128 **)&__dst);
        v41 = v527;
        if (v527)
        {
          v42 = (_QWORD *)operator new();
          v43 = v527;
          *v42 = &unk_1E2DC3078;
          v42[1] = 0;
          v42[2] = 0;
          v42[3] = v43;
          v527 = 0;
          v44 = (std::__shared_weak_count *)v40[6];
          v40[5] = v41;
          v40[6] = (uint64_t)v42;
          if (!v44)
            goto LABEL_68;
        }
        else
        {
          v527 = 0;
          v44 = (std::__shared_weak_count *)v40[6];
          v40[5] = 0;
          v40[6] = 0;
          if (!v44)
            goto LABEL_68;
        }
        p_shared_owners = (unint64_t *)&v44->__shared_owners_;
        do
          v46 = __ldaxr(p_shared_owners);
        while (__stlxr(v46 - 1, p_shared_owners));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
          v47 = v527;
          v527 = 0;
          if (!v47)
            goto LABEL_70;
LABEL_69:
          (*(void (**)(std::string::size_type))(*(_QWORD *)v47 + 8))(v47);
          goto LABEL_70;
        }
LABEL_68:
        v47 = v527;
        v527 = 0;
        if (v47)
          goto LABEL_69;
LABEL_70:
        v48 = v526;
        if (!v526)
          goto LABEL_74;
        v49 = (unint64_t *)&v526->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
          v51 = (std::__shared_weak_count *)*((_QWORD *)&v538 + 1);
          if (!*((_QWORD *)&v538 + 1))
            goto LABEL_167;
        }
        else
        {
LABEL_74:
          v51 = (std::__shared_weak_count *)*((_QWORD *)&v538 + 1);
          if (!*((_QWORD *)&v538 + 1))
            goto LABEL_167;
        }
        v52 = (unint64_t *)&v51->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
LABEL_167:
        if ((v529.__r_.__value_.__r.__words[0] == 0) | v472 & 1)
        {
LABEL_181:
          if ((SHIBYTE(v537) & 0x80000000) == 0)
          {
LABEL_182:
            v109 = v528;
            v528 = 0;
            if (!v109)
              goto LABEL_184;
            goto LABEL_183;
          }
        }
        else
        {
          v104 = v529.__r_.__value_.__r.__words[0] + 16;
          while (1)
          {
            v104 = *(_QWORD *)v104;
            if (!v104)
              break;
            if (!std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v534, v104 + 16))
            {
              v472 = 0;
              goto LABEL_181;
            }
            __dst.__r_.__value_.__r.__words[0] = v104 + 16;
            v106 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v534, (unsigned __int8 *)(v104 + 16), (uint64_t)&std::piecewise_construct, (__int128 **)&__dst)+ 40;
            v105 = *(const void **)v106;
            v107 = *((_QWORD *)v106 + 1) - *(_QWORD *)v106;
            v108 = *(const void **)(v104 + 40);
            if (v107 != *(_QWORD *)(v104 + 48) - (_QWORD)v108 || memcmp(v105, v108, v107))
            {
              v472 = 0;
              if ((SHIBYTE(v537) & 0x80000000) == 0)
                goto LABEL_182;
              goto LABEL_174;
            }
          }
          v478 = v535;
          std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *> *>>(__p, *(char **)&v534[16], 0);
          std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t **)v522, (_QWORD *)v495[0], &v495[1]);
          v472 = 1;
          if ((SHIBYTE(v537) & 0x80000000) == 0)
            goto LABEL_182;
        }
LABEL_174:
        operator delete((void *)v536);
        v109 = v528;
        v528 = 0;
        if (v109)
LABEL_183:
          (*((void (**)(std::__shared_weak_count_vtbl *))v109->~__shared_weak_count + 1))(v109);
LABEL_184:
        v110 = v539;
        v539 = 0;
        if (v110)
          (*(void (**)(MIL::Builder::FunctionBuilder *))(*(_QWORD *)v110 + 8))(v110);
        v111 = v521;
        *(_QWORD *)&v521 = 0;
        if (v111)
          (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
        std::__tree<std::string>::destroy((uint64_t)v495, (char *)v495[1]);
        v112 = *(char **)&v534[16];
        if (*(_QWORD *)&v534[16])
        {
          do
          {
            v114 = *(char **)v112;
            v115 = (void *)*((_QWORD *)v112 + 5);
            if (v115)
            {
              *((_QWORD *)v112 + 6) = v115;
              operator delete(v115);
            }
            if (v112[39] < 0)
              operator delete(*((void **)v112 + 2));
            operator delete(v112);
            v112 = v114;
          }
          while (v114);
        }
        v113 = *(void **)v534;
        *(_QWORD *)v534 = 0;
        if (v113)
          operator delete(v113);
        v14 = (uint64_t *)*v474;
      }
      while (*v474);
LABEL_197:
      if (!v529.__r_.__value_.__r.__words[0])
        goto LABEL_208;
      *(_OWORD *)v495 = *(_OWORD *)&v530.__r_.__value_.__l.__data_;
      if (v530.__r_.__value_.__l.__size_)
      {
        v116 = (unint64_t *)(v530.__r_.__value_.__l.__size_ + 8);
        do
          v117 = __ldxr(v116);
        while (__stxr(v117 + 1, v116));
      }
      MIL::Builder::FunctionBuilder::Make();
      v118 = (std::__shared_weak_count *)v495[1];
      if (!v495[1])
        goto LABEL_205;
      v119 = (unint64_t *)((char *)v495[1] + 8);
      do
        v120 = __ldaxr(v119);
      while (__stlxr(v120 - 1, v119));
      if (v120)
      {
LABEL_205:
        v121 = *(unsigned __int8 **)(v529.__r_.__value_.__r.__words[0] + 16);
        if (v121)
          goto LABEL_248;
        goto LABEL_206;
      }
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
      v121 = *(unsigned __int8 **)(v529.__r_.__value_.__r.__words[0] + 16);
      if (v121)
      {
LABEL_248:
        while (1)
        {
          *(_QWORD *)v534 = v121 + 16;
          v139 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__p, v121 + 16, (uint64_t)&std::piecewise_construct, (__int128 **)v534);
          v140 = v139;
          if (v121 != (unsigned __int8 *)v139)
            break;
LABEL_270:
          v156 = v522[1];
          v157 = &v522[1];
          v158 = &v522[1];
          if (v522[1])
          {
            v159 = (char)v121[39];
            if (v159 >= 0)
              v160 = v121[39];
            else
              v160 = *((_QWORD *)v121 + 3);
            if (v159 >= 0)
              v161 = v121 + 16;
            else
              v161 = (const void *)*((_QWORD *)v121 + 2);
            while (1)
            {
              while (1)
              {
                v157 = (MIL::Builder::ProgramBuilder **)v156;
                v164 = (const void *)*((_QWORD *)v156 + 4);
                v162 = (char *)v156 + 32;
                v163 = v164;
                v165 = v162[23];
                if (v165 >= 0)
                  v166 = v162[23];
                else
                  v166 = *((_QWORD *)v162 + 1);
                if (v165 >= 0)
                  v167 = v162;
                else
                  v167 = v163;
                if (v166 >= v160)
                  v168 = v160;
                else
                  v168 = v166;
                v169 = memcmp(v161, v167, v168);
                v170 = v160 < v166;
                if (v169)
                  v170 = v169 < 0;
                if (!v170)
                  break;
                v156 = *v157;
                v158 = v157;
                if (!*v157)
                  goto LABEL_295;
              }
              v171 = memcmp(v167, v161, v168);
              v172 = v166 < v160;
              if (v171)
                v172 = v171 < 0;
              if (!v172)
                break;
              v156 = v157[1];
              if (!v156)
              {
                v158 = v157 + 1;
                goto LABEL_295;
              }
            }
          }
          else
          {
LABEL_295:
            v173 = (MIL::Builder::ProgramBuilder *)operator new(0x38uLL);
            v174 = (std::string *)((char *)v173 + 32);
            if ((char)v121[39] < 0)
            {
              std::string::__init_copy_ctor_external(v174, *((const std::string::value_type **)v121 + 2), *((_QWORD *)v121 + 3));
            }
            else
            {
              v175 = *((_OWORD *)v121 + 1);
              *((_QWORD *)v173 + 6) = *((_QWORD *)v121 + 4);
              *(_OWORD *)&v174->__r_.__value_.__l.__data_ = v175;
            }
            *(_QWORD *)v173 = 0;
            *((_QWORD *)v173 + 1) = 0;
            *((_QWORD *)v173 + 2) = v157;
            *v158 = v173;
            if (*(_QWORD *)v522[0])
            {
              v522[0] = *(MIL::Builder::ProgramBuilder **)v522[0];
              v173 = *v158;
            }
            v176 = v522[1];
            v266 = v173 == v522[1];
            *((_BYTE *)v173 + 24) = v173 == v522[1];
            if (!v266)
            {
              do
              {
                v177 = *((_QWORD *)v173 + 2);
                if (*(_BYTE *)(v177 + 24))
                  break;
                v178 = *(MIL::Builder::ProgramBuilder **)(v177 + 16);
                v179 = *(_QWORD *)v178;
                if (*(_QWORD *)v178 == v177)
                {
                  v182 = *((_QWORD *)v178 + 1);
                  if (!v182 || (v183 = *(unsigned __int8 *)(v182 + 24), v180 = (_BYTE *)(v182 + 24), v183))
                  {
                    if (*(MIL::Builder::ProgramBuilder **)v177 == v173)
                    {
                      *(_BYTE *)(v177 + 24) = 1;
                      *((_BYTE *)v178 + 24) = 0;
                      v186 = *(_QWORD *)(v177 + 8);
                      *(_QWORD *)v178 = v186;
                      if (v186)
                        goto LABEL_315;
                    }
                    else
                    {
                      v184 = *(uint64_t **)(v177 + 8);
                      v185 = *v184;
                      *(_QWORD *)(v177 + 8) = *v184;
                      if (v185)
                      {
                        *(_QWORD *)(v185 + 16) = v177;
                        v178 = *(MIL::Builder::ProgramBuilder **)(v177 + 16);
                      }
                      v184[2] = (uint64_t)v178;
                      *(_QWORD *)(*(_QWORD *)(v177 + 16) + 8 * (**(_QWORD **)(v177 + 16) != v177)) = v184;
                      *v184 = v177;
                      *(_QWORD *)(v177 + 16) = v184;
                      v178 = (MIL::Builder::ProgramBuilder *)v184[2];
                      v177 = *(_QWORD *)v178;
                      *((_BYTE *)v184 + 24) = 1;
                      *((_BYTE *)v178 + 24) = 0;
                      v186 = *(_QWORD *)(v177 + 8);
                      *(_QWORD *)v178 = v186;
                      if (v186)
LABEL_315:
                        *(_QWORD *)(v186 + 16) = v178;
                    }
                    *(_QWORD *)(v177 + 16) = *((_QWORD *)v178 + 2);
                    *(_QWORD *)(*((_QWORD *)v178 + 2) + 8 * (**((_QWORD **)v178 + 2) != (_QWORD)v178)) = v177;
                    *(_QWORD *)(v177 + 8) = v178;
LABEL_245:
                    *((_QWORD *)v178 + 2) = v177;
                    break;
                  }
                }
                else if (!v179 || (v181 = *(unsigned __int8 *)(v179 + 24), v180 = (_BYTE *)(v179 + 24), v181))
                {
                  if (*(MIL::Builder::ProgramBuilder **)v177 == v173)
                  {
                    v188 = *((_QWORD *)v173 + 1);
                    *(_QWORD *)v177 = v188;
                    if (v188)
                    {
                      *(_QWORD *)(v188 + 16) = v177;
                      v178 = *(MIL::Builder::ProgramBuilder **)(v177 + 16);
                    }
                    *((_QWORD *)v173 + 2) = v178;
                    *(_QWORD *)(*(_QWORD *)(v177 + 16) + 8 * (**(_QWORD **)(v177 + 16) != v177)) = v173;
                    *((_QWORD *)v173 + 1) = v177;
                    *(_QWORD *)(v177 + 16) = v173;
                    v178 = (MIL::Builder::ProgramBuilder *)*((_QWORD *)v173 + 2);
                    *((_BYTE *)v173 + 24) = 1;
                    *((_BYTE *)v178 + 24) = 0;
                    v177 = *((_QWORD *)v178 + 1);
                    v187 = *(MIL::Builder::ProgramBuilder **)v177;
                    *((_QWORD *)v178 + 1) = *(_QWORD *)v177;
                    if (!v187)
                      goto LABEL_244;
                  }
                  else
                  {
                    *(_BYTE *)(v177 + 24) = 1;
                    *((_BYTE *)v178 + 24) = 0;
                    v177 = *((_QWORD *)v178 + 1);
                    v187 = *(MIL::Builder::ProgramBuilder **)v177;
                    *((_QWORD *)v178 + 1) = *(_QWORD *)v177;
                    if (!v187)
                      goto LABEL_244;
                  }
                  *((_QWORD *)v187 + 2) = v178;
LABEL_244:
                  *(_QWORD *)(v177 + 16) = *((_QWORD *)v178 + 2);
                  *(_QWORD *)(*((_QWORD *)v178 + 2) + 8 * (**((_QWORD **)v178 + 2) != (_QWORD)v178)) = v177;
                  *(_QWORD *)v177 = v178;
                  goto LABEL_245;
                }
                *(_BYTE *)(v177 + 24) = 1;
                v173 = v178;
                *((_BYTE *)v178 + 24) = v178 == v176;
                *v180 = 1;
              }
              while (v178 != v176);
            }
            ++v523[0];
          }
          v121 = *(unsigned __int8 **)v121;
          if (!v121)
            goto LABEL_206;
        }
        v141 = v139 + 40;
        v142 = (char *)*((_QWORD *)v139 + 5);
        v143 = (char *)*((_QWORD *)v121 + 5);
        v144 = (_BYTE *)*((_QWORD *)v121 + 6);
        v145 = v144 - v143;
        v146 = (v144 - v143) >> 3;
        v147 = *((_QWORD *)v139 + 7);
        if (v146 > (v147 - (uint64_t)v142) >> 3)
        {
          if (v142)
          {
            *((_QWORD *)v139 + 6) = v142;
            operator delete(v142);
            v147 = 0;
            *v141 = 0;
            *((_QWORD *)v140 + 6) = 0;
            *((_QWORD *)v140 + 7) = 0;
          }
          if ((v145 & 0x8000000000000000) != 0)
            goto LABEL_788;
          v148 = v147 >> 2;
          if (v147 >> 2 <= v146)
            v148 = (v144 - v143) >> 3;
          v149 = (unint64_t)v147 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v148;
          if (v149 >> 61)
LABEL_788:
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v150 = (char *)operator new(8 * v149);
          v142 = v150;
          *((_QWORD *)v140 + 6) = v150;
          v151 = (char **)(v140 + 48);
          *(v151 - 1) = v150;
          v151[1] = &v150[8 * v149];
          if (v144 != v143)
            memcpy(v150, v143, v144 - v143);
          goto LABEL_269;
        }
        v151 = (char **)(v139 + 48);
        v152 = (_BYTE *)*((_QWORD *)v139 + 6);
        v153 = (v152 - v142) >> 3;
        if (v153 >= v146)
        {
          if (v144 == v143)
          {
LABEL_269:
            *v151 = &v142[v145];
            goto LABEL_270;
          }
          v155 = (void *)*((_QWORD *)v139 + 5);
          v154 = (char *)*((_QWORD *)v121 + 5);
        }
        else
        {
          if (v152 != v142)
          {
            memmove(*((void **)v139 + 5), *((const void **)v121 + 5), v152 - v142);
            v142 = *v151;
          }
          v154 = &v143[8 * v153];
          v145 = v144 - v154;
          if (v144 == v154)
            goto LABEL_269;
          v155 = v142;
        }
        memmove(v155, v154, v145);
        goto LABEL_269;
      }
LABEL_206:
      v534[23] = 0;
      v534[0] = 0;
      v122 = v536;
      *(_QWORD *)&v536 = 0;
      if (v122)
        (*(void (**)(uint64_t))(*(_QWORD *)v122 + 8))(v122);
LABEL_208:
      std::__tree<std::string>::destroy((uint64_t)v522, (char *)v522[1]);
      v123 = (char *)v477[0];
      if (v477[0])
      {
        do
        {
          v131 = *(char **)v123;
          v132 = (void *)*((_QWORD *)v123 + 5);
          if (v132)
          {
            *((_QWORD *)v123 + 6) = v132;
            operator delete(v132);
          }
          if (v123[39] < 0)
            operator delete(*((void **)v123 + 2));
          operator delete(v123);
          v123 = v131;
        }
        while (v131);
      }
      v124 = __p[0];
      __p[0] = 0;
      if (v124)
        operator delete(v124);
      v125 = (std::__shared_weak_count *)v529.__r_.__value_.__l.__size_;
      if (!v529.__r_.__value_.__l.__size_)
        goto LABEL_215;
      v126 = (unint64_t *)(v529.__r_.__value_.__l.__size_ + 8);
      do
        v127 = __ldaxr(v126);
      while (__stlxr(v127 - 1, v126));
      if (!v127)
      {
        ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
        std::__shared_weak_count::__release_weak(v125);
        v128 = (std::__shared_weak_count *)v530.__r_.__value_.__l.__size_;
        if (!v530.__r_.__value_.__l.__size_)
          goto LABEL_226;
      }
      else
      {
LABEL_215:
        v128 = (std::__shared_weak_count *)v530.__r_.__value_.__l.__size_;
        if (!v530.__r_.__value_.__l.__size_)
          goto LABEL_226;
      }
      v129 = (unint64_t *)&v128->__shared_owners_;
      do
        v130 = __ldaxr(v129);
      while (__stlxr(v130 - 1, v129));
      if (!v130)
      {
        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
        std::__shared_weak_count::__release_weak(v128);
      }
LABEL_226:
      if (SHIBYTE(v498.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v498.__r_.__value_.__l.__data_);
        v133 = *(char **)&v532[16];
        if (!*(_QWORD *)&v532[16])
          goto LABEL_230;
      }
      else
      {
        v133 = *(char **)&v532[16];
        if (!*(_QWORD *)&v532[16])
          goto LABEL_230;
      }
      do
      {
        v135 = *(char **)v133;
        v136 = (void *)*((_QWORD *)v133 + 5);
        if (v136)
        {
          *((_QWORD *)v133 + 6) = v136;
          operator delete(v136);
        }
        if (v133[39] < 0)
          operator delete(*((void **)v133 + 2));
        operator delete(v133);
        v133 = v135;
      }
      while (v135);
LABEL_230:
      if (*(_QWORD *)v532)
      {
        operator delete(*(void **)v532);
        v134 = v500;
        if (!v500)
          goto LABEL_588;
LABEL_584:
        v352 = (unint64_t *)&v134->__shared_owners_;
        do
          v353 = __ldaxr(v352);
        while (__stlxr(v353 - 1, v352));
        if (!v353)
        {
          ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
          std::__shared_weak_count::__release_weak(v134);
        }
        goto LABEL_588;
      }
LABEL_583:
      v134 = v500;
      if (v500)
        goto LABEL_584;
LABEL_588:
      v354 = (char *)v502;
      if (v502)
      {
        do
        {
          v357 = *(char **)v354;
          v358 = (char *)*((_QWORD *)v354 + 7);
          if (v358)
          {
            do
            {
              v360 = *(char **)v358;
              v361 = (void *)*((_QWORD *)v358 + 5);
              if (v361)
              {
                *((_QWORD *)v358 + 6) = v361;
                operator delete(v361);
              }
              if (v358[39] < 0)
                operator delete(*((void **)v358 + 2));
              operator delete(v358);
              v358 = v360;
            }
            while (v360);
          }
          v359 = (void *)*((_QWORD *)v354 + 5);
          *((_QWORD *)v354 + 5) = 0;
          if (v359)
            operator delete(v359);
          if (v354[39] < 0)
            operator delete(*((void **)v354 + 2));
          operator delete(v354);
          v354 = v357;
        }
        while (v357);
      }
      v355 = v501;
      v501 = 0;
      if (v355)
        operator delete(v355);
      v356 = v504;
      v504 = 0;
      if (v356)
      {
        MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v356);
        MEMORY[0x19401CD90]();
      }
      v6 = v468 + 24;
      if (v468 + 24 == v467)
        goto LABEL_614;
    }
    if (!v499)
    {
      v137 = v514;
      if ((unint64_t)v514 >= v515)
      {
        v514 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v513, v468);
        v134 = v500;
        if (!v500)
          goto LABEL_588;
      }
      else
      {
        if (*(char *)(v468 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v514, *(const std::string::value_type **)v468, *(_QWORD *)(v468 + 8));
        }
        else
        {
          v138 = *(_OWORD *)v468;
          v514->__r_.__value_.__r.__words[2] = *(_QWORD *)(v468 + 16);
          *(_OWORD *)&v137->__r_.__value_.__l.__data_ = v138;
        }
        v514 = v137 + 1;
        v134 = v500;
        if (!v500)
          goto LABEL_588;
      }
      goto LABEL_584;
    }
    *(_OWORD *)v495 = 0u;
    *(_OWORD *)v496 = 0u;
    v497 = 1065353216;
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v505, (const void **)v468, v468);
    if (*(char *)(v468 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v494, *(const std::string::value_type **)v468, *(_QWORD *)(v468 + 8));
    }
    else
    {
      v12 = *(_OWORD *)v468;
      v494.__r_.__value_.__r.__words[2] = *(_QWORD *)(v468 + 16);
      *(_OWORD *)&v494.__r_.__value_.__l.__data_ = v12;
    }
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 48))(&v540, a1);
    v466 = MIL::IRProgram::GetFunction();
    v538 = v540;
    if (*((_QWORD *)&v540 + 1))
    {
      v189 = (unint64_t *)(*((_QWORD *)&v540 + 1) + 8);
      do
        v190 = __ldxr(v189);
      while (__stxr(v190 + 1, v189));
    }
    MIL::Builder::FunctionBuilder::Make();
    v191 = (std::__shared_weak_count *)*((_QWORD *)&v538 + 1);
    if (*((_QWORD *)&v538 + 1))
    {
      v192 = (unint64_t *)(*((_QWORD *)&v538 + 1) + 8);
      do
        v193 = __ldaxr(v192);
      while (__stlxr(v193 - 1, v192));
      if (!v193)
      {
        ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
        std::__shared_weak_count::__release_weak(v191);
      }
    }
    *(_OWORD *)__p = 0u;
    *(_OWORD *)v477 = 0u;
    v478 = 1065353216;
    *((_QWORD *)&v536 + 1) = 0;
    v537 = 0;
    *(_QWORD *)&v536 = (char *)&v536 + 8;
    memset(v534, 0, sizeof(v534));
    v535 = 1065353216;
    memset(v532, 0, sizeof(v532));
    v533 = 1065353216;
    MIL::Attributes::FlexibleShapeInfo::TryGetRangeShapes(v504);
    v194 = v522[0];
    v195 = (std::__shared_weak_count *)v522[1];
    if (!v522[1])
      goto LABEL_339;
    v196 = (unint64_t *)((char *)v522[1] + 8);
    do
      v197 = __ldaxr(v196);
    while (__stlxr(v197 - 1, v196));
    if (v197)
    {
LABEL_339:
      v198 = *((_QWORD *)v194 + 2);
      if (v198)
        goto LABEL_436;
LABEL_340:
      v199 = *(unsigned __int8 **)&v534[16];
      if (*(_QWORD *)&v534[16])
      {
        do
        {
          v522[0] = (MIL::Builder::ProgramBuilder *)(v199 + 16);
          v203 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__p, v199 + 16, (uint64_t)&std::piecewise_construct, (__int128 **)v522);
          if (v199 != (unsigned __int8 *)v203)
            std::vector<MIL::IRDimension const*>::__assign_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v203 + 40, *((char **)v199 + 5), *((_QWORD *)v199 + 6), (uint64_t)(*((_QWORD *)v199 + 6) - *((_QWORD *)v199 + 5)) >> 3);
          v204 = (char *)*((_QWORD *)&v536 + 1);
          v205 = (char **)&v536 + 1;
          v206 = (char **)&v536 + 1;
          if (*((_QWORD *)&v536 + 1))
          {
            v207 = (char)v199[39];
            if (v207 >= 0)
              v208 = v199[39];
            else
              v208 = *((_QWORD *)v199 + 3);
            if (v207 >= 0)
              v209 = v199 + 16;
            else
              v209 = (const void *)*((_QWORD *)v199 + 2);
            while (1)
            {
              while (1)
              {
                v205 = (char **)v204;
                v212 = (const void *)*((_QWORD *)v204 + 4);
                v210 = v204 + 32;
                v211 = v212;
                v213 = *((char *)v210 + 23);
                if (v213 >= 0)
                  v214 = *((unsigned __int8 *)v210 + 23);
                else
                  v214 = v210[1];
                if (v213 >= 0)
                  v215 = v210;
                else
                  v215 = v211;
                if (v214 >= v208)
                  v216 = v208;
                else
                  v216 = v214;
                v217 = memcmp(v209, v215, v216);
                v218 = v208 < v214;
                if (v217)
                  v218 = v217 < 0;
                if (!v218)
                  break;
                v204 = *v205;
                v206 = v205;
                if (!*v205)
                  goto LABEL_377;
              }
              v219 = memcmp(v215, v209, v216);
              v220 = v214 < v208;
              if (v219)
                v220 = v219 < 0;
              if (!v220)
                break;
              v204 = v205[1];
              if (!v204)
              {
                v206 = v205 + 1;
                goto LABEL_377;
              }
            }
          }
          else
          {
LABEL_377:
            v221 = (char *)operator new(0x38uLL);
            v222 = (std::string *)(v221 + 32);
            if ((char)v199[39] < 0)
            {
              std::string::__init_copy_ctor_external(v222, *((const std::string::value_type **)v199 + 2), *((_QWORD *)v199 + 3));
            }
            else
            {
              v223 = *((_OWORD *)v199 + 1);
              *((_QWORD *)v221 + 6) = *((_QWORD *)v199 + 4);
              *(_OWORD *)&v222->__r_.__value_.__l.__data_ = v223;
            }
            *(_QWORD *)v221 = 0;
            *((_QWORD *)v221 + 1) = 0;
            *((_QWORD *)v221 + 2) = v205;
            *v206 = v221;
            if (*(_QWORD *)v536)
            {
              *(_QWORD *)&v536 = *(_QWORD *)v536;
              v221 = *v206;
            }
            v224 = (char *)*((_QWORD *)&v536 + 1);
            v221[24] = v221 == *((char **)&v536 + 1);
            if (v221 != v224)
            {
              do
              {
                v225 = *((_QWORD *)v221 + 2);
                if (*(_BYTE *)(v225 + 24))
                  break;
                v226 = *(char **)(v225 + 16);
                v227 = *(_QWORD *)v226;
                if (*(_QWORD *)v226 == v225)
                {
                  v230 = *((_QWORD *)v226 + 1);
                  if (!v230 || (v231 = *(unsigned __int8 *)(v230 + 24), v228 = (_BYTE *)(v230 + 24), v231))
                  {
                    if (*(char **)v225 == v221)
                    {
                      *(_BYTE *)(v225 + 24) = 1;
                      v226[24] = 0;
                      v234 = *(_QWORD *)(v225 + 8);
                      *(_QWORD *)v226 = v234;
                      if (v234)
                        goto LABEL_396;
                    }
                    else
                    {
                      v232 = *(uint64_t **)(v225 + 8);
                      v233 = *v232;
                      *(_QWORD *)(v225 + 8) = *v232;
                      if (v233)
                      {
                        *(_QWORD *)(v233 + 16) = v225;
                        v226 = *(char **)(v225 + 16);
                      }
                      v232[2] = (uint64_t)v226;
                      *(_QWORD *)(*(_QWORD *)(v225 + 16) + 8 * (**(_QWORD **)(v225 + 16) != v225)) = v232;
                      *v232 = v225;
                      *(_QWORD *)(v225 + 16) = v232;
                      v226 = (char *)v232[2];
                      v225 = *(_QWORD *)v226;
                      *((_BYTE *)v232 + 24) = 1;
                      v226[24] = 0;
                      v234 = *(_QWORD *)(v225 + 8);
                      *(_QWORD *)v226 = v234;
                      if (v234)
LABEL_396:
                        *(_QWORD *)(v234 + 16) = v226;
                    }
                    *(_QWORD *)(v225 + 16) = *((_QWORD *)v226 + 2);
                    *(_QWORD *)(*((_QWORD *)v226 + 2) + 8 * (**((_QWORD **)v226 + 2) != (_QWORD)v226)) = v225;
                    *(_QWORD *)(v225 + 8) = v226;
LABEL_347:
                    *((_QWORD *)v226 + 2) = v225;
                    break;
                  }
                }
                else if (!v227 || (v229 = *(unsigned __int8 *)(v227 + 24), v228 = (_BYTE *)(v227 + 24), v229))
                {
                  if (*(char **)v225 == v221)
                  {
                    v236 = *((_QWORD *)v221 + 1);
                    *(_QWORD *)v225 = v236;
                    if (v236)
                    {
                      *(_QWORD *)(v236 + 16) = v225;
                      v226 = *(char **)(v225 + 16);
                    }
                    *((_QWORD *)v221 + 2) = v226;
                    *(_QWORD *)(*(_QWORD *)(v225 + 16) + 8 * (**(_QWORD **)(v225 + 16) != v225)) = v221;
                    *((_QWORD *)v221 + 1) = v225;
                    *(_QWORD *)(v225 + 16) = v221;
                    v226 = (char *)*((_QWORD *)v221 + 2);
                    v221[24] = 1;
                    v226[24] = 0;
                    v225 = *((_QWORD *)v226 + 1);
                    v235 = *(char **)v225;
                    *((_QWORD *)v226 + 1) = *(_QWORD *)v225;
                    if (!v235)
                      goto LABEL_346;
                  }
                  else
                  {
                    *(_BYTE *)(v225 + 24) = 1;
                    v226[24] = 0;
                    v225 = *((_QWORD *)v226 + 1);
                    v235 = *(char **)v225;
                    *((_QWORD *)v226 + 1) = *(_QWORD *)v225;
                    if (!v235)
                      goto LABEL_346;
                  }
                  *((_QWORD *)v235 + 2) = v226;
LABEL_346:
                  *(_QWORD *)(v225 + 16) = *((_QWORD *)v226 + 2);
                  *(_QWORD *)(*((_QWORD *)v226 + 2) + 8 * (**((_QWORD **)v226 + 2) != (_QWORD)v226)) = v225;
                  *(_QWORD *)v225 = v226;
                  goto LABEL_347;
                }
                *(_BYTE *)(v225 + 24) = 1;
                v221 = v226;
                v226[24] = v226 == v224;
                *v228 = 1;
              }
              while (v226 != v224);
            }
            ++v537;
          }
          v199 = *(unsigned __int8 **)v199;
        }
        while (v199);
      }
      HIBYTE(v523[0]) = 0;
      LOBYTE(v522[0]) = 0;
      MIL::Builder::FunctionBuilder::CreateFunction(v539);
      (*((void (**)(std::string::size_type *__return_ptr))v528->~__shared_weak_count + 29))(&v527);
      MIL::Attributes::FlexibleShapeInfo::Replace();
      v200 = v514;
      if ((unint64_t)v514 >= v515)
      {
        v514 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v513, (uint64_t)&v494);
        v202 = *((_QWORD *)&v540 + 1);
        *(_OWORD *)&v530.__r_.__value_.__l.__data_ = v540;
        if (!*((_QWORD *)&v540 + 1))
          goto LABEL_410;
      }
      else if (SHIBYTE(v494.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v514, v494.__r_.__value_.__l.__data_, v494.__r_.__value_.__l.__size_);
        v514 = v200 + 1;
        v202 = *((_QWORD *)&v540 + 1);
        *(_OWORD *)&v530.__r_.__value_.__l.__data_ = v540;
        if (!*((_QWORD *)&v540 + 1))
        {
LABEL_410:
          v529.__r_.__value_.__r.__words[0] = v527;
          if (v527)
          {
            v239 = (_QWORD *)operator new();
            v240 = v527;
            *v239 = &unk_1E2DC2E10;
            v239[1] = 0;
            v239[2] = 0;
            v239[3] = v240;
          }
          else
          {
            v239 = 0;
          }
          v529.__r_.__value_.__l.__size_ = (std::string::size_type)v239;
          v527 = 0;
          MIL::Builder::FunctionBuilder::Make();
          v522[0] = (MIL::Builder::ProgramBuilder *)&v494;
          v241 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v510, (uint64_t)&v494, (uint64_t)&std::piecewise_construct, (__int128 **)v522);
          v242 = __dst.__r_.__value_.__r.__words[0];
          if (__dst.__r_.__value_.__r.__words[0])
          {
            v243 = (_QWORD *)operator new();
            v244 = __dst.__r_.__value_.__r.__words[0];
            *v243 = &unk_1E2DC3078;
            v243[1] = 0;
            v243[2] = 0;
            v243[3] = v244;
            __dst.__r_.__value_.__r.__words[0] = 0;
            v245 = (std::__shared_weak_count *)v241[6];
            v241[5] = v242;
            v241[6] = (uint64_t)v243;
            if (!v245)
              goto LABEL_420;
          }
          else
          {
            __dst.__r_.__value_.__r.__words[0] = 0;
            v245 = (std::__shared_weak_count *)v241[6];
            v241[5] = 0;
            v241[6] = 0;
            if (!v245)
              goto LABEL_420;
          }
          v246 = (unint64_t *)&v245->__shared_owners_;
          do
            v247 = __ldaxr(v246);
          while (__stlxr(v247 - 1, v246));
          if (!v247)
          {
            ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
            std::__shared_weak_count::__release_weak(v245);
            v248 = __dst.__r_.__value_.__r.__words[0];
            __dst.__r_.__value_.__r.__words[0] = 0;
            if (!v248)
              goto LABEL_422;
            goto LABEL_421;
          }
LABEL_420:
          v248 = __dst.__r_.__value_.__r.__words[0];
          __dst.__r_.__value_.__r.__words[0] = 0;
          if (!v248)
          {
LABEL_422:
            v249 = (std::__shared_weak_count *)v529.__r_.__value_.__l.__size_;
            if (!v529.__r_.__value_.__l.__size_)
              goto LABEL_426;
            v250 = (unint64_t *)(v529.__r_.__value_.__l.__size_ + 8);
            do
              v251 = __ldaxr(v250);
            while (__stlxr(v251 - 1, v250));
            if (!v251)
            {
              ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
              std::__shared_weak_count::__release_weak(v249);
              v252 = (std::__shared_weak_count *)v530.__r_.__value_.__l.__size_;
              if (!v530.__r_.__value_.__l.__size_)
                goto LABEL_502;
            }
            else
            {
LABEL_426:
              v252 = (std::__shared_weak_count *)v530.__r_.__value_.__l.__size_;
              if (!v530.__r_.__value_.__l.__size_)
                goto LABEL_502;
            }
            v253 = (unint64_t *)&v252->__shared_owners_;
            do
              v254 = __ldaxr(v253);
            while (__stlxr(v254 - 1, v253));
            if (!v254)
            {
              ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
              std::__shared_weak_count::__release_weak(v252);
            }
LABEL_502:
            MIL::Attributes::FlexibleShapeInfo::TryGetDefaultShapes(v504);
            if (v525)
            {
              *(_OWORD *)v522 = 0u;
              *(_OWORD *)v523 = 0u;
              v524 = 1065353216;
              on_zero_shared = (unsigned __int8 *)v525->__on_zero_shared;
              if (!on_zero_shared)
                goto LABEL_524;
              v311 = 1;
              do
              {
                while (1)
                {
                  v521 = v540;
                  if (*((_QWORD *)&v540 + 1))
                  {
                    v313 = (unint64_t *)(*((_QWORD *)&v540 + 1) + 8);
                    do
                      v314 = __ldxr(v313);
                    while (__stxr(v314 + 1, v313));
                  }
                  MIL::Builder::FunctionBuilder::Make();
                  v315 = (MIL::Builder::FunctionBuilder *)__dst.__r_.__value_.__r.__words[0];
                  __dst.__r_.__value_.__r.__words[0] = 0;
                  v316 = v539;
                  v539 = v315;
                  if (v316)
                  {
                    (*(void (**)(MIL::Builder::FunctionBuilder *))(*(_QWORD *)v316 + 8))(v316);
                    v317 = __dst.__r_.__value_.__r.__words[0];
                    __dst.__r_.__value_.__r.__words[0] = 0;
                    if (v317)
                      (*(void (**)(std::string::size_type))(*(_QWORD *)v317 + 8))(v317);
                  }
                  v318 = (std::__shared_weak_count *)*((_QWORD *)&v521 + 1);
                  if (*((_QWORD *)&v521 + 1))
                  {
                    v319 = (unint64_t *)(*((_QWORD *)&v521 + 1) + 8);
                    do
                      v320 = __ldaxr(v319);
                    while (__stlxr(v320 - 1, v319));
                    if (!v320)
                    {
                      ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
                      std::__shared_weak_count::__release_weak(v318);
                    }
                  }
                  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)(on_zero_shared + 16);
                  v321 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v522, on_zero_shared + 16, (uint64_t)&std::piecewise_construct, (__int128 **)&__dst);
                  if (on_zero_shared != (unsigned __int8 *)v321)
                    std::vector<MIL::IRDimension const*>::__assign_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v321 + 40, *((char **)on_zero_shared + 5), *((_QWORD *)on_zero_shared + 6), (uint64_t)(*((_QWORD *)on_zero_shared + 6) - *((_QWORD *)on_zero_shared + 5)) >> 3);
                  if (std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(__p, (uint64_t)(on_zero_shared + 16)))
                  {
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)(on_zero_shared + 16);
                    v323 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__p, on_zero_shared + 16, (uint64_t)&std::piecewise_construct, (__int128 **)&__dst)+ 40;
                    v322 = *(const void **)v323;
                    v324 = *((_QWORD *)v323 + 1) - *(_QWORD *)v323;
                    v325 = (const void *)*((_QWORD *)on_zero_shared + 5);
                    if (v324 == *((_QWORD *)on_zero_shared + 6) - (_QWORD)v325 && !memcmp(v322, v325, v324))
                      break;
                  }
                  v311 = 0;
                  v312 = 0;
                  on_zero_shared = *(unsigned __int8 **)on_zero_shared;
                  if (!on_zero_shared)
                    goto LABEL_528;
                }
                on_zero_shared = *(unsigned __int8 **)on_zero_shared;
              }
              while (on_zero_shared);
              if ((v311 & 1) == 0)
              {
                v312 = 0;
              }
              else
              {
LABEL_524:
                v524 = v478;
                std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *> *>>(v522, (char *)v477[0], 0);
                v312 = 1;
              }
LABEL_528:
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
              __dst.__r_.__value_.__s.__data_[0] = 0;
              v326 = (char *)v523[0];
              if (v523[0])
              {
                do
                {
                  v350 = *(char **)v326;
                  v351 = (void *)*((_QWORD *)v326 + 5);
                  if (v351)
                  {
                    *((_QWORD *)v326 + 6) = v351;
                    operator delete(v351);
                  }
                  if (v326[39] < 0)
                    operator delete(*((void **)v326 + 2));
                  operator delete(v326);
                  v326 = v350;
                }
                while (v350);
              }
              v327 = v522[0];
              v522[0] = 0;
              if (v327)
                operator delete(v327);
            }
            v328 = v526;
            if (!v526)
              goto LABEL_535;
            v329 = (unint64_t *)&v526->__shared_owners_;
            do
              v330 = __ldaxr(v329);
            while (__stlxr(v330 - 1, v329));
            if (!v330)
            {
              ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
              std::__shared_weak_count::__release_weak(v328);
              v331 = v527;
              v527 = 0;
              if (!v331)
              {
LABEL_537:
                v332 = v528;
                v528 = 0;
                if (v332)
                  (*((void (**)(std::__shared_weak_count_vtbl *))v332->~__shared_weak_count + 1))(v332);
                v333 = *(char **)&v532[16];
                if (*(_QWORD *)&v532[16])
                {
                  do
                  {
                    v344 = *(char **)v333;
                    v345 = (void *)*((_QWORD *)v333 + 5);
                    if (v345)
                    {
                      *((_QWORD *)v333 + 6) = v345;
                      operator delete(v345);
                    }
                    if (v333[39] < 0)
                      operator delete(*((void **)v333 + 2));
                    operator delete(v333);
                    v333 = v344;
                  }
                  while (v344);
                }
                v334 = *(void **)v532;
                *(_QWORD *)v532 = 0;
                if (v334)
                  operator delete(v334);
                v335 = *(char **)&v534[16];
                if (*(_QWORD *)&v534[16])
                {
                  do
                  {
                    v346 = *(char **)v335;
                    v347 = (void *)*((_QWORD *)v335 + 5);
                    if (v347)
                    {
                      *((_QWORD *)v335 + 6) = v347;
                      operator delete(v347);
                    }
                    if (v335[39] < 0)
                      operator delete(*((void **)v335 + 2));
                    operator delete(v335);
                    v335 = v346;
                  }
                  while (v346);
                }
                v336 = *(void **)v534;
                *(_QWORD *)v534 = 0;
                if (v336)
                  operator delete(v336);
                std::__tree<std::string>::destroy((uint64_t)&v536, *((char **)&v536 + 1));
                v337 = (char *)v477[0];
                if (v477[0])
                {
                  do
                  {
                    v348 = *(char **)v337;
                    v349 = (void *)*((_QWORD *)v337 + 5);
                    if (v349)
                    {
                      *((_QWORD *)v337 + 6) = v349;
                      operator delete(v349);
                    }
                    if (v337[39] < 0)
                      operator delete(*((void **)v337 + 2));
                    operator delete(v337);
                    v337 = v348;
                  }
                  while (v348);
                }
                v338 = __p[0];
                __p[0] = 0;
                if (v338)
                  operator delete(v338);
                v339 = v539;
                v539 = 0;
                if (v339)
                  (*(void (**)(MIL::Builder::FunctionBuilder *))(*(_QWORD *)v339 + 8))(v339);
                v340 = (std::__shared_weak_count *)*((_QWORD *)&v540 + 1);
                if (!*((_QWORD *)&v540 + 1))
                  goto LABEL_554;
                v341 = (unint64_t *)(*((_QWORD *)&v540 + 1) + 8);
                do
                  v342 = __ldaxr(v341);
                while (__stlxr(v342 - 1, v341));
                if (!v342)
                {
                  ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
                  std::__shared_weak_count::__release_weak(v340);
                  if ((SHIBYTE(v494.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_555:
                    v343 = (char *)v496[0];
                    if (!v496[0])
                    {
LABEL_581:
                      if (v495[0])
                        operator delete(v495[0]);
                      goto LABEL_583;
                    }
                    do
                    {
LABEL_605:
                      v362 = *(char **)v343;
                      v363 = (void *)*((_QWORD *)v343 + 5);
                      if (v363)
                      {
                        *((_QWORD *)v343 + 6) = v363;
                        operator delete(v363);
                      }
                      if (v343[39] < 0)
                        operator delete(*((void **)v343 + 2));
                      operator delete(v343);
                      v343 = v362;
                    }
                    while (v362);
                    goto LABEL_581;
                  }
                }
                else
                {
LABEL_554:
                  if ((SHIBYTE(v494.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_555;
                }
                operator delete(v494.__r_.__value_.__l.__data_);
                v343 = (char *)v496[0];
                if (!v496[0])
                  goto LABEL_581;
                goto LABEL_605;
              }
            }
            else
            {
LABEL_535:
              v331 = v527;
              v527 = 0;
              if (!v331)
                goto LABEL_537;
            }
            (*(void (**)(std::string::size_type))(*(_QWORD *)v331 + 8))(v331);
            goto LABEL_537;
          }
LABEL_421:
          (*(void (**)(std::string::size_type))(*(_QWORD *)v248 + 8))(v248);
          goto LABEL_422;
        }
      }
      else
      {
        v201 = *(_OWORD *)&v494.__r_.__value_.__l.__data_;
        v514->__r_.__value_.__r.__words[2] = v494.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v200->__r_.__value_.__l.__data_ = v201;
        v514 = v200 + 1;
        v202 = *((_QWORD *)&v540 + 1);
        *(_OWORD *)&v530.__r_.__value_.__l.__data_ = v540;
        if (!*((_QWORD *)&v540 + 1))
          goto LABEL_410;
      }
      v237 = (unint64_t *)(v202 + 8);
      do
        v238 = __ldxr(v237);
      while (__stxr(v238 + 1, v237));
      goto LABEL_410;
    }
    ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
    std::__shared_weak_count::__release_weak(v195);
    v198 = *((_QWORD *)v194 + 2);
    if (!v198)
      goto LABEL_340;
LABEL_436:
    while (1)
    {
      v470 = (unsigned __int8 *)(v198 + 16);
      v522[1] = 0;
      v522[0] = 0;
      v523[0] = 0;
      memset(&__dst, 0, sizeof(__dst));
      v256 = *(_QWORD *)(v198 + 40);
      v255 = *(_QWORD *)(v198 + 48);
      v473 = (uint64_t *)v198;
      v257 = v255 - v256;
      if (v255 != v256)
      {
        if (v257 < 0)
          goto LABEL_789;
        v522[0] = (MIL::Builder::ProgramBuilder *)operator new(v255 - v256);
        v522[1] = v522[0];
        v523[0] = (char *)v522[0] + 8 * (v257 >> 3);
        v259 = v473[5];
        v258 = v473[6];
        v260 = v258 - v259;
        if (v258 != v259)
          break;
      }
LABEL_491:
      v530.__r_.__value_.__r.__words[0] = (std::string::size_type)v470;
      v308 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v534, v470, (uint64_t)&std::piecewise_construct, (__int128 **)&v530)+ 40;
      if (v308 != (char *)v522)
        std::vector<MIL::IRDimension const*>::__assign_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v308, (char *)v522[0], (uint64_t)v522[1], (v522[1] - v522[0]) >> 3);
      v530.__r_.__value_.__r.__words[0] = (std::string::size_type)v470;
      v309 = (std::string *)(std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v532, v470, (uint64_t)&std::piecewise_construct, (__int128 **)&v530)+ 40);
      if (v309 != &__dst)
        std::vector<MIL::IRDimension const*>::__assign_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>((char *)v309, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_, (uint64_t)(__dst.__r_.__value_.__l.__size_ - __dst.__r_.__value_.__r.__words[0]) >> 3);
      if (__dst.__r_.__value_.__r.__words[0])
      {
        __dst.__r_.__value_.__l.__size_ = __dst.__r_.__value_.__r.__words[0];
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      if (v522[0])
      {
        v522[1] = v522[0];
        operator delete(v522[0]);
      }
      v198 = *v473;
      if (!*v473)
        goto LABEL_340;
    }
    if (v260 < 0)
LABEL_789:
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(v258 - v259);
    __dst.__r_.__value_.__l.__size_ = __dst.__r_.__value_.__r.__words[0];
    __dst.__r_.__value_.__r.__words[2] = __dst.__r_.__value_.__r.__words[0] + 8 * (v260 >> 3);
    v262 = (int *)v473[5];
    v261 = (int *)v473[6];
    for (i = v261; ; v261 = i)
    {
      if (v262 == v261)
        goto LABEL_491;
      v264 = v262[1];
      v265 = (MIL::MILContext *)*v262;
      v266 = (_DWORD)v265 == -1 || v264 == -1;
      if (v266)
      {
        v458 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v459 = std::string::append(&v529, " has unbounded dimension which is not supported. Please consult MIL Framework or milPython on adding a bound for this dimension.");
        v460 = *(_OWORD *)&v459->__r_.__value_.__l.__data_;
        v530.__r_.__value_.__r.__words[2] = v459->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v530.__r_.__value_.__l.__data_ = v460;
        v459->__r_.__value_.__l.__size_ = 0;
        v459->__r_.__value_.__r.__words[2] = 0;
        v459->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(v458, &v530);
        v458->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(v458, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
      }
      v267 = MIL::IRConstantDimension::Make((MIL::IRConstantDimension *)v540, (MIL::MILContext *)v264);
      v268 = v267;
      v269 = v522[1];
      if (v522[1] < v523[0])
      {
        *(_QWORD *)v522[1] = v267;
        v270 = (MIL::Builder::ProgramBuilder *)((char *)v269 + 8);
        goto LABEL_470;
      }
      v271 = v522[0];
      v272 = v522[1] - v522[0];
      v273 = (v522[1] - v522[0]) >> 3;
      v274 = v273 + 1;
      if ((unint64_t)(v273 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v275 = (MIL::Builder::ProgramBuilder *)v523[0] - v522[0];
      if (((MIL::Builder::ProgramBuilder *)v523[0] - v522[0]) >> 2 > v274)
        v274 = v275 >> 2;
      if ((unint64_t)v275 >= 0x7FFFFFFFFFFFFFF8)
        v276 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v276 = v274;
      if (v276)
      {
        if (v276 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v277 = operator new(8 * v276);
        v278 = (MIL::Builder::ProgramBuilder *)&v277[8 * v273];
        *(_QWORD *)v278 = v268;
        v270 = (MIL::Builder::ProgramBuilder *)((char *)v278 + 8);
        if (v269 == v271)
        {
LABEL_468:
          v522[0] = v278;
          v522[1] = v270;
          v523[0] = &v277[8 * v276];
          if (!v269)
            goto LABEL_470;
LABEL_469:
          operator delete(v269);
          goto LABEL_470;
        }
      }
      else
      {
        v277 = 0;
        v278 = (MIL::Builder::ProgramBuilder *)(8 * v273);
        *(_QWORD *)(8 * v273) = v268;
        v270 = (MIL::Builder::ProgramBuilder *)(8 * v273 + 8);
        if (v269 == v271)
          goto LABEL_468;
      }
      v279 = (MIL::Builder::ProgramBuilder *)((char *)v269 - 8) - v271;
      if (v279 < 0x58)
        goto LABEL_794;
      if ((unint64_t)(v269 - (MIL::Builder::ProgramBuilder *)&v277[v272]) < 0x20)
        goto LABEL_794;
      v280 = (v279 >> 3) + 1;
      v281 = 8 * (v280 & 0x3FFFFFFFFFFFFFFCLL);
      v282 = (MIL::Builder::ProgramBuilder *)((char *)v269 - v281);
      v278 = (MIL::Builder::ProgramBuilder *)((char *)v278 - v281);
      v283 = &v277[8 * v273 - 16];
      v284 = (__int128 *)((char *)v269 - 16);
      v285 = v280 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v286 = *v284;
        *(v283 - 1) = *(v284 - 1);
        *v283 = v286;
        v283 -= 2;
        v284 -= 2;
        v285 -= 4;
      }
      while (v285);
      v269 = v282;
      if (v280 != (v280 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_794:
        do
        {
          v287 = *((_QWORD *)v269 - 1);
          v269 = (MIL::Builder::ProgramBuilder *)((char *)v269 - 8);
          *((_QWORD *)v278 - 1) = v287;
          v278 = (MIL::Builder::ProgramBuilder *)((char *)v278 - 8);
        }
        while (v269 != v271);
      }
      v269 = v522[0];
      v522[0] = v278;
      v522[1] = v270;
      v523[0] = &v277[8 * v276];
      if (v269)
        goto LABEL_469;
LABEL_470:
      v522[1] = v270;
      v288 = MIL::IRConstantDimension::Make((MIL::IRConstantDimension *)v540, v265);
      v289 = v288;
      v290 = (char *)__dst.__r_.__value_.__l.__size_;
      if (__dst.__r_.__value_.__l.__size_ < __dst.__r_.__value_.__r.__words[2])
      {
        *(_QWORD *)__dst.__r_.__value_.__l.__size_ = v288;
        v263 = (std::string::size_type)(v290 + 8);
        goto LABEL_442;
      }
      v291 = __dst.__r_.__value_.__r.__words[0];
      v292 = __dst.__r_.__value_.__l.__size_ - __dst.__r_.__value_.__r.__words[0];
      v293 = (uint64_t)(__dst.__r_.__value_.__l.__size_ - __dst.__r_.__value_.__r.__words[0]) >> 3;
      v294 = v293 + 1;
      if ((unint64_t)(v293 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v295 = __dst.__r_.__value_.__r.__words[2] - __dst.__r_.__value_.__r.__words[0];
      if ((uint64_t)(__dst.__r_.__value_.__r.__words[2] - __dst.__r_.__value_.__r.__words[0]) >> 2 > v294)
        v294 = v295 >> 2;
      if ((unint64_t)v295 >= 0x7FFFFFFFFFFFFFF8)
        v296 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v296 = v294;
      if (v296)
      {
        if (v296 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v297 = operator new(8 * v296);
        v298 = (uint64_t *)&v297[8 * v293];
        *v298 = v289;
        v263 = (std::string::size_type)(v298 + 1);
        if (v290 == (char *)v291)
        {
LABEL_489:
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v298;
          __dst.__r_.__value_.__l.__size_ = v263;
          __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)&v297[8 * v296];
          if (!v290)
            goto LABEL_442;
LABEL_490:
          operator delete(v290);
          goto LABEL_442;
        }
      }
      else
      {
        v297 = 0;
        v298 = (uint64_t *)(8 * v293);
        *(_QWORD *)(8 * v293) = v289;
        v263 = 8 * v293 + 8;
        if (v290 == (char *)v291)
          goto LABEL_489;
      }
      v299 = (unint64_t)&v290[-v291 - 8];
      if (v299 < 0x58)
        goto LABEL_795;
      if ((unint64_t)(v290 - &v297[v292]) < 0x20)
        goto LABEL_795;
      v300 = (v299 >> 3) + 1;
      v301 = 8 * (v300 & 0x3FFFFFFFFFFFFFFCLL);
      v302 = &v290[-v301];
      v298 = (uint64_t *)((char *)v298 - v301);
      v303 = &v297[8 * v293 - 16];
      v304 = v290 - 16;
      v305 = v300 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v306 = *(_OWORD *)v304;
        *(v303 - 1) = *((_OWORD *)v304 - 1);
        *v303 = v306;
        v303 -= 2;
        v304 -= 32;
        v305 -= 4;
      }
      while (v305);
      v290 = v302;
      if (v300 != (v300 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_795:
        do
        {
          v307 = *((_QWORD *)v290 - 1);
          v290 -= 8;
          *--v298 = v307;
        }
        while (v290 != (char *)v291);
      }
      v290 = (char *)__dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v298;
      __dst.__r_.__value_.__l.__size_ = v263;
      __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)&v297[8 * v296];
      if (v290)
        goto LABEL_490;
LABEL_442:
      __dst.__r_.__value_.__l.__size_ = v263;
      v262 += 2;
    }
  }
LABEL_614:
  memset(v534, 0, sizeof(v534));
  v535 = 1065353216;
  v366 = *(uint64_t ***)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1) + 16);
  if (v366)
  {
    while (std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v510, (uint64_t)(v366 + 2))|| std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v507, (uint64_t)(v366 + 2)))
    {
LABEL_616:
      v366 = (uint64_t **)*v366;
      if (!v366)
        goto LABEL_669;
    }
    v367 = v506[0];
    if (v506[0])
    {
      v368 = *((char *)v366 + 39);
      if (v368 >= 0)
        v369 = *((unsigned __int8 *)v366 + 39);
      else
        v369 = (size_t)v366[3];
      if (v368 >= 0)
        v370 = (uint64_t *)(v366 + 2);
      else
        v370 = v366[2];
      do
      {
        v371 = v367[55];
        if (v371 >= 0)
          v372 = v367[55];
        else
          v372 = *((_QWORD *)v367 + 5);
        if (v371 >= 0)
          v373 = v367 + 32;
        else
          v373 = (const void *)*((_QWORD *)v367 + 4);
        if (v372 >= v369)
          v374 = v369;
        else
          v374 = v372;
        v375 = memcmp(v370, v373, v374);
        v376 = v369 < v372;
        if (v375)
          v376 = v375 < 0;
        if (!v376)
        {
          v377 = memcmp(v373, v370, v374);
          v378 = v372 < v369;
          if (v377)
            v378 = v377 < 0;
          if (!v378)
            goto LABEL_616;
          v367 += 8;
        }
        v367 = *(char **)v367;
      }
      while (v367);
    }
    v492 = v516;
    v493 = v517;
    if (v517)
    {
      v379 = (unint64_t *)&v517->__shared_owners_;
      do
        v380 = __ldxr(v379);
      while (__stxr(v380 + 1, v379));
    }
    v381 = (std::__shared_weak_count *)v366[6];
    v490 = v366[5];
    v491 = v381;
    if (v381)
    {
      v382 = (unint64_t *)&v381->__shared_owners_;
      do
        v383 = __ldxr(v382);
      while (__stxr(v383 + 1, v382));
    }
    MIL::Builder::FunctionBuilder::Make();
    __p[0] = v366 + 2;
    v384 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v534, (uint64_t)(v366 + 2), (uint64_t)&std::piecewise_construct, (__int128 **)__p);
    v385 = *(_QWORD *)v532;
    if (*(_QWORD *)v532)
    {
      v386 = (_QWORD *)operator new();
      v387 = *(_QWORD *)v532;
      *v386 = &unk_1E2DC3078;
      v386[1] = 0;
      v386[2] = 0;
      v386[3] = v387;
      *(_QWORD *)v532 = 0;
      v388 = (std::__shared_weak_count *)v384[6];
      v384[5] = v385;
      v384[6] = (uint64_t)v386;
      if (!v388)
        goto LABEL_657;
    }
    else
    {
      *(_QWORD *)v532 = 0;
      v388 = (std::__shared_weak_count *)v384[6];
      v384[5] = 0;
      v384[6] = 0;
      if (!v388)
      {
LABEL_657:
        v391 = *(_QWORD *)v532;
        *(_QWORD *)v532 = 0;
        if (v391)
          (*(void (**)(uint64_t))(*(_QWORD *)v391 + 8))(v391);
        v392 = v491;
        if (v491)
        {
          v393 = (unint64_t *)&v491->__shared_owners_;
          do
            v394 = __ldaxr(v393);
          while (__stlxr(v394 - 1, v393));
          if (!v394)
          {
            ((void (*)(std::__shared_weak_count *))v392->__on_zero_shared)(v392);
            std::__shared_weak_count::__release_weak(v392);
          }
        }
        v395 = v493;
        if (v493)
        {
          v396 = (unint64_t *)&v493->__shared_owners_;
          do
            v397 = __ldaxr(v396);
          while (__stlxr(v397 - 1, v396));
          if (!v397)
          {
            ((void (*)(std::__shared_weak_count *))v395->__on_zero_shared)(v395);
            std::__shared_weak_count::__release_weak(v395);
          }
        }
        goto LABEL_616;
      }
    }
    v389 = (unint64_t *)&v388->__shared_owners_;
    do
      v390 = __ldaxr(v389);
    while (__stlxr(v390 - 1, v389));
    if (!v390)
    {
      ((void (*)(std::__shared_weak_count *))v388->__on_zero_shared)(v388);
      std::__shared_weak_count::__release_weak(v388);
    }
    goto LABEL_657;
  }
LABEL_669:
  v488 = v516;
  v489 = v517;
  if (v517)
  {
    v398 = (unint64_t *)&v517->__shared_owners_;
    do
      v399 = __ldxr(v398);
    while (__stxr(v399 + 1, v398));
  }
  MIL::Builder::ProgramBuilder::Make();
  v400 = v489;
  if (!v489)
    goto LABEL_676;
  v401 = (unint64_t *)&v489->__shared_owners_;
  do
    v402 = __ldaxr(v401);
  while (__stlxr(v402 - 1, v401));
  if (!v402)
  {
    ((void (*)(std::__shared_weak_count *))v400->__on_zero_shared)(v400);
    std::__shared_weak_count::__release_weak(v400);
    v403 = v511[0];
    if (!v511[0])
      goto LABEL_677;
  }
  else
  {
LABEL_676:
    v403 = v511[0];
    if (!v511[0])
      goto LABEL_677;
  }
  do
  {
    v452 = (std::__shared_weak_count *)v403[6];
    v486 = v403[5];
    v487 = v452;
    if (v452)
    {
      v453 = (unint64_t *)&v452->__shared_owners_;
      do
        v454 = __ldxr(v453);
      while (__stxr(v454 + 1, v453));
    }
    MIL::Builder::ProgramBuilder::AddFunction();
    v455 = v487;
    if (v487)
    {
      v456 = (unint64_t *)&v487->__shared_owners_;
      do
        v457 = __ldaxr(v456);
      while (__stlxr(v457 - 1, v456));
      if (!v457)
      {
        ((void (*)(std::__shared_weak_count *))v455->__on_zero_shared)(v455);
        std::__shared_weak_count::__release_weak(v455);
      }
    }
    v403 = (_QWORD *)*v403;
  }
  while (v403);
LABEL_677:
  v404 = v508[0];
  if (v508[0])
  {
    do
    {
      v407 = (std::__shared_weak_count *)v404[6];
      v484 = v404[5];
      v485 = v407;
      if (v407)
      {
        v408 = (unint64_t *)&v407->__shared_owners_;
        do
          v409 = __ldxr(v408);
        while (__stxr(v409 + 1, v408));
      }
      MIL::Builder::ProgramBuilder::AddFunction();
      v410 = v485;
      if (v485)
      {
        v411 = (unint64_t *)&v485->__shared_owners_;
        do
          v412 = __ldaxr(v411);
        while (__stlxr(v412 - 1, v411));
        if (!v412)
        {
          ((void (*)(std::__shared_weak_count *))v410->__on_zero_shared)(v410);
          std::__shared_weak_count::__release_weak(v410);
        }
      }
      v404 = (_QWORD *)*v404;
    }
    while (v404);
  }
  v405 = *(_QWORD **)&v534[16];
  if (*(_QWORD *)&v534[16])
  {
    do
    {
      v413 = (std::__shared_weak_count *)v405[6];
      v482 = v405[5];
      v483 = v413;
      if (v413)
      {
        v414 = (unint64_t *)&v413->__shared_owners_;
        do
          v415 = __ldxr(v414);
        while (__stxr(v415 + 1, v414));
      }
      MIL::Builder::ProgramBuilder::AddFunction();
      v416 = v483;
      if (v483)
      {
        v417 = (unint64_t *)&v483->__shared_owners_;
        do
          v418 = __ldaxr(v417);
        while (__stlxr(v418 - 1, v417));
        if (!v418)
        {
          ((void (*)(std::__shared_weak_count *))v416->__on_zero_shared)(v416);
          std::__shared_weak_count::__release_weak(v416);
        }
      }
      v405 = (_QWORD *)*v405;
    }
    while (v405);
  }
  for (j = *(uint64_t **)(MIL::IRObject::GetAttributes(v471) + 16); j; j = (uint64_t *)*j)
  {
    while (1)
    {
      if (*((char *)j + 39) < 0)
        std::string::__init_copy_ctor_external(&v481, (const std::string::value_type *)j[2], j[3]);
      else
        v481 = *(std::string *)(j + 2);
      v419 = (std::__shared_weak_count *)j[6];
      v479 = j[5];
      v480 = v419;
      if (v419)
      {
        v420 = (unint64_t *)&v419->__shared_owners_;
        do
          v421 = __ldxr(v420);
        while (__stxr(v421 + 1, v420));
      }
      MIL::Builder::ProgramBuilder::SetAttribute();
      v422 = v480;
      if (v480)
      {
        v423 = (unint64_t *)&v480->__shared_owners_;
        do
          v424 = __ldaxr(v423);
        while (__stlxr(v424 - 1, v423));
        if (!v424)
        {
          ((void (*)(std::__shared_weak_count *))v422->__on_zero_shared)(v422);
          std::__shared_weak_count::__release_weak(v422);
        }
      }
      if (SHIBYTE(v481.__r_.__value_.__r.__words[2]) < 0)
        break;
      j = (uint64_t *)*j;
      if (!j)
        goto LABEL_713;
    }
    operator delete(v481.__r_.__value_.__l.__data_);
  }
LABEL_713:
  MIL::Builder::ProgramBuilder::CreateProgram(v522[0]);
  if (((*((uint64_t (**)(void **))__p[1] + 2))(&__p[1]) & 1) == 0)
  {
    v464 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    MIL::MILResult::GetMessage((MIL::MILResult *)&__p[1]);
    std::operator+<char>();
    std::runtime_error::runtime_error(v464, (const std::string *)v532);
    __cxa_throw(v464, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v425 = __p[0];
  __p[0] = 0;
  *a3 = v425;
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a3 + 1, (uint64_t)v513, (uint64_t)v514, 0xAAAAAAAAAAAAAAABLL * (((char *)v514 - (_BYTE *)v513) >> 3));
  MEMORY[0x19401B338](&__p[1]);
  v426 = __p[0];
  __p[0] = 0;
  if (v426)
    (*(void (**)(void *))(*(_QWORD *)v426 + 8))(v426);
  v427 = v522[0];
  v522[0] = 0;
  if (v427)
    (*(void (**)(MIL::Builder::ProgramBuilder *))(*(_QWORD *)v427 + 8))(v427);
  v428 = *(void ***)&v534[16];
  if (*(_QWORD *)&v534[16])
  {
    do
    {
      while (1)
      {
        v429 = (void **)*v428;
        v430 = (std::__shared_weak_count *)v428[6];
        if (v430)
        {
          v431 = (unint64_t *)&v430->__shared_owners_;
          do
            v432 = __ldaxr(v431);
          while (__stlxr(v432 - 1, v431));
          if (!v432)
          {
            ((void (*)(std::__shared_weak_count *))v430->__on_zero_shared)(v430);
            std::__shared_weak_count::__release_weak(v430);
          }
        }
        if (*((char *)v428 + 39) < 0)
          break;
        operator delete(v428);
        v428 = v429;
        if (!v429)
          goto LABEL_728;
      }
      operator delete(v428[2]);
      operator delete(v428);
      v428 = v429;
    }
    while (v429);
  }
LABEL_728:
  v433 = *(void **)v534;
  *(_QWORD *)v534 = 0;
  if (v433)
    operator delete(v433);
  std::__tree<std::string>::destroy((uint64_t)&v505, v506[0]);
  v434 = (void **)v508[0];
  if (v508[0])
  {
    do
    {
      while (1)
      {
        v435 = (void **)*v434;
        v436 = (std::__shared_weak_count *)v434[6];
        if (v436)
        {
          v437 = (unint64_t *)&v436->__shared_owners_;
          do
            v438 = __ldaxr(v437);
          while (__stlxr(v438 - 1, v437));
          if (!v438)
          {
            ((void (*)(std::__shared_weak_count *))v436->__on_zero_shared)(v436);
            std::__shared_weak_count::__release_weak(v436);
          }
        }
        if (*((char *)v434 + 39) < 0)
          break;
        operator delete(v434);
        v434 = v435;
        if (!v435)
          goto LABEL_740;
      }
      operator delete(v434[2]);
      operator delete(v434);
      v434 = v435;
    }
    while (v435);
  }
LABEL_740:
  v439 = v507[0];
  v507[0] = 0;
  if (v439)
    operator delete(v439);
  v440 = (void **)v511[0];
  if (v511[0])
  {
    do
    {
      while (1)
      {
        v441 = (void **)*v440;
        v442 = (std::__shared_weak_count *)v440[6];
        if (v442)
        {
          v443 = (unint64_t *)&v442->__shared_owners_;
          do
            v444 = __ldaxr(v443);
          while (__stlxr(v444 - 1, v443));
          if (!v444)
          {
            ((void (*)(std::__shared_weak_count *))v442->__on_zero_shared)(v442);
            std::__shared_weak_count::__release_weak(v442);
          }
        }
        if (*((char *)v440 + 39) < 0)
          break;
        operator delete(v440);
        v440 = v441;
        if (!v441)
          goto LABEL_752;
      }
      operator delete(v440[2]);
      operator delete(v440);
      v440 = v441;
    }
    while (v441);
  }
LABEL_752:
  v445 = v510[0];
  v510[0] = 0;
  if (v445)
    operator delete(v445);
  v446 = (std::string *)v513;
  if (v513)
  {
    v447 = v514;
    v448 = v513;
    if (v514 != v513)
    {
      do
      {
        if (SHIBYTE(v447[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v447[-1].__r_.__value_.__l.__data_);
        --v447;
      }
      while (v447 != v446);
      v448 = v513;
    }
    v514 = v446;
    operator delete(v448);
  }
  v449 = v517;
  if (v517)
  {
    v450 = (unint64_t *)&v517->__shared_owners_;
    do
      v451 = __ldaxr(v450);
    while (__stlxr(v451 - 1, v450));
    if (!v451)
    {
      ((void (*)(std::__shared_weak_count *))v449->__on_zero_shared)(v449);
      std::__shared_weak_count::__release_weak(v449);
    }
  }
  if (E5RT::g_trace_analysis_level >= v518)
    goto LABEL_768;
}

void sub_1910F6A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  __int16 a72;
  void *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  unint64_t v77;

  if (SLOBYTE(STACK[0x377]) < 0)
  {
    operator delete((void *)STACK[0x360]);
    if ((v74 & 1) == 0)
    {
LABEL_6:
      MEMORY[0x19401B338](v73);
      if (a25)
        (*(void (**)(void *))(*(_QWORD *)a25 + 8))(a25);
      v77 = STACK[0x2D0];
      STACK[0x2D0] = 0;
      if (v77)
        (*(void (**)(unint64_t))(*(_QWORD *)v77 + 8))(v77);
      std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v75 - 224);
      std::__tree<std::string>::destroy((uint64_t)&a72, (char *)STACK[0x200]);
      std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&STACK[0x210]);
      std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&STACK[0x240]);
      std::vector<std::string>::~vector[abi:ne180100]((void **)&STACK[0x270]);
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x288]);
      E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&STACK[0x298]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v74)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v72);
  goto LABEL_6;
}

void sub_1910F7190()
{
  unint64_t v0;

  v0 = STACK[0x2C0];
  STACK[0x2C0] = 0;
  if (!v0)
    JUMPOUT(0x1910F70B8);
  JUMPOUT(0x1910F70ACLL);
}

void sub_1910F71A4()
{
  unint64_t v0;

  v0 = STACK[0x2C0];
  STACK[0x2C0] = 0;
  if (!v0)
    JUMPOUT(0x1910F70B8);
  JUMPOUT(0x1910F70ACLL);
}

BOOL Espresso::AOT::E5BackendFlexibleShapeTransformer::HasAnEntryPointWithFlexibleShapeAttribute(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  unint64_t *v8;
  unint64_t v9;
  MIL::Attributes::FlexibleShapeInfo *v10;
  std::__shared_weak_count *v11;
  MIL::Attributes::FlexibleShapeInfo *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  std::string *v17;
  __int128 v18;
  std::string v19;
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&v21, a2);
  v5 = *a3;
  v6 = a3[1];
  if (*a3 != v6)
  {
    while (1)
    {
      if (!(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, v5))
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v17 = std::string::append(&v19, " does not exist.");
        v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v20.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, &v20);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
      }
      MIL::IRProgram::GetFunction();
      MIL::Attributes::FlexibleShapeInfo::Make();
      if (*(_QWORD *)(MIL::Attributes::FlexibleShapeInfo::GetEnumeratedShapes((MIL::Attributes::FlexibleShapeInfo *)v19.__r_.__value_.__l.__data_)
                     + 24))
      {
        v12 = (MIL::Attributes::FlexibleShapeInfo *)v19.__r_.__value_.__r.__words[0];
        v19.__r_.__value_.__r.__words[0] = 0;
        if (v12)
        {
          MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v12);
          MEMORY[0x19401CD90]();
        }
        v7 = 1;
        v11 = v22;
        if (v22)
          goto LABEL_21;
        return v7;
      }
      MIL::Attributes::FlexibleShapeInfo::TryGetRangeShapes((MIL::Attributes::FlexibleShapeInfo *)v19.__r_.__value_.__l.__data_);
      v7 = v20.__r_.__value_.__r.__words[0] != 0;
      if (!v20.__r_.__value_.__l.__size_)
        break;
      v8 = (unint64_t *)(v20.__r_.__value_.__l.__size_ + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (v9)
        break;
      (*(void (**)(std::string::size_type))(*(_QWORD *)v20.__r_.__value_.__l.__size_ + 16))(v20.__r_.__value_.__l.__size_);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v20.__r_.__value_.__l.__size_);
      v10 = (MIL::Attributes::FlexibleShapeInfo *)v19.__r_.__value_.__r.__words[0];
      v19.__r_.__value_.__r.__words[0] = 0;
      if (v10)
        goto LABEL_9;
LABEL_10:
      if (!v20.__r_.__value_.__r.__words[0])
      {
        v5 += 24;
        if (v5 != v6)
          continue;
      }
      goto LABEL_16;
    }
    v10 = (MIL::Attributes::FlexibleShapeInfo *)v19.__r_.__value_.__r.__words[0];
    v19.__r_.__value_.__r.__words[0] = 0;
    if (!v10)
      goto LABEL_10;
LABEL_9:
    MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v10);
    MEMORY[0x19401CD90]();
    goto LABEL_10;
  }
  v7 = 0;
LABEL_16:
  v11 = v22;
  if (v22)
  {
LABEL_21:
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v7;
}

void sub_1910F73E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  void *v23;
  int v24;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void Espresso::AOT::E5BackendFlexibleShapeTransformer::AddDefaultFunction(uint64_t a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v14;
  const void *v15;
  uint64_t *v16;
  size_t v17;
  NSObject *v18;
  int v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  const char *v27;
  char IsGood;
  uint64_t Function;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  std::string::size_type v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::string::size_type v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  int v41;
  size_t v42;
  unint64_t v43;
  std::string *p_dst;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  std::string *v48;
  __int128 v49;
  std::__shared_weak_count *v50;
  std::__shared_weak_count_vtbl *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::string *v55;
  __int128 v56;
  std::__shared_weak_count_vtbl *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  MIL::Attributes::FlexibleShapeInfo *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  NSObject *v66;
  uint64_t *v67;
  uint64_t Message;
  std::string::size_type v69;
  void *v70;
  std::string::size_type v71;
  void *v72;
  void *v73;
  std::string::size_type v74;
  std::string::size_type v75;
  std::string *v76;
  std::string *v77;
  char *v78;
  char *v79;
  std::string *v80;
  char *v81;
  MIL::Builder::ProgramBuilder *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::runtime_error *exception;
  void *__p;
  _OWORD v89[3];
  std::__shared_weak_count_vtbl *v90;
  std::__shared_weak_count *v91;
  std::string __dst;
  std::string::size_type v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  std::__shared_weak_count_vtbl *v97;
  uint64_t v98;
  char v99[8];
  _QWORD *v100;
  std::__shared_weak_count *v101;
  MIL::Attributes::FlexibleShapeInfo *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  std::string *v105;
  std::string *v106;
  unint64_t v107;
  std::string *v108;
  std::string *v109;
  unint64_t v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  MIL::Builder::ProgramBuilder *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  std::string buf;
  uint8_t v117[4];
  uint64_t **v118[5];

  *(uint64_t ***)((char *)&v118[2] + 4) = *(uint64_t ***)MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 48))(&v114, a1);
  v111 = v114;
  v112 = v115;
  if (v115)
  {
    p_shared_owners = (unint64_t *)&v115->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Builder::ProgramBuilder::Make();
  if (v112)
  {
    v7 = &v112->__shared_owners_;
    do
      v8 = __ldaxr((unint64_t *)v7);
    while (__stlxr(v8 - 1, (unint64_t *)v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v108 = 0;
  v109 = 0;
  v110 = 0;
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v9 = *a2;
  v10 = a2[1];
  if (*a2 == v10)
  {
    __dst.__r_.__value_.__r.__words[0] = 0;
    goto LABEL_135;
  }
  while (1)
  {
    MIL::IRProgram::GetFunction();
    __p = operator new(0x20uLL);
    v89[0] = xmmword_191A71250;
    strcpy((char *)__p, "FlexibleShapeInformation");
    MIL::IRObject::TryGetAttributeSharedPtr();
    if (SHIBYTE(v89[0]) < 0)
    {
      operator delete(__p);
      if (!v103)
      {
LABEL_27:
        v19 = 3;
        goto LABEL_107;
      }
    }
    else if (!v103)
    {
      goto LABEL_27;
    }
    MIL::Attributes::FlexibleShapeInfo::Make();
    MIL::Attributes::FlexibleShapeInfo::TryGetDefaultShapes(v102);
    if (!v100[3])
    {
      v19 = 3;
      goto LABEL_101;
    }
    if (*(_QWORD *)(MIL::Attributes::FlexibleShapeInfo::GetEnumeratedShapes(v102) + 24))
    {
      v12 = *(_QWORD **)(MIL::Attributes::FlexibleShapeInfo::GetEnumeratedShapes(v102) + 16);
      if (!v12)
      {
LABEL_23:
        v18 = Espresso::espresso_os_log_subsystem(0, v11);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          Espresso::AOT::E5BackendFlexibleShapeTransformer::AddDefaultFunction(v117, (uint64_t **)v9, v118, v18);
        v19 = 2;
        goto LABEL_101;
      }
LABEL_17:
      v13 = v12 + 7;
      while (1)
      {
        v13 = (_QWORD *)*v13;
        if (!v13)
          break;
        v14 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v100, (uint64_t)(v13 + 2));
        if (!v14)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        v16 = v14 + 5;
        v15 = (const void *)v14[5];
        v17 = v16[1] - (_QWORD)v15;
        v11 = (const char *)v13[5];
        if (v17 != v13[6] - (_QWORD)v11 || memcmp(v15, v11, v17))
        {
          v12 = (_QWORD *)*v12;
          if (v12)
            goto LABEL_17;
          goto LABEL_23;
        }
      }
    }
    MIL::Attributes::FlexibleShapeInfo::TryGetRangeShapes(v102);
    v20 = __p;
    v21 = *(std::__shared_weak_count **)&v89[0];
    if (*(_QWORD *)&v89[0])
    {
      v22 = (unint64_t *)(*(_QWORD *)&v89[0] + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
        if (!v20)
          goto LABEL_100;
LABEL_33:
        v24 = v106;
        if ((unint64_t)v106 >= v107)
        {
          v26 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v105, v9);
        }
        else
        {
          if (*(char *)(v9 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v106, *(const std::string::value_type **)v9, *(_QWORD *)(v9 + 8));
          }
          else
          {
            v25 = *(_OWORD *)v9;
            v106->__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 16);
            *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
          }
          v26 = v24 + 1;
        }
        v106 = v26;
        MEMORY[0x19401BA88](v99, a1);
        MIL::Passes::PropagateInputTensorShapes();
        IsGood = MIL::Passes::TypeInferenceResult::IsGood((MIL::Passes::TypeInferenceResult *)&__p);
        if ((IsGood & 1) == 0)
        {
          v66 = Espresso::espresso_os_log_subsystem(0, v27);
          if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
          {
            v67 = (uint64_t *)v9;
            if (*(char *)(v9 + 23) < 0)
              v67 = *(uint64_t **)v9;
            Message = MIL::MILResult::GetMessage((MIL::MILResult *)&__p);
            if (*(char *)(Message + 23) >= 0)
              v69 = Message;
            else
              v69 = *(_QWORD *)Message;
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v67;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v69;
            _os_log_error_impl(&dword_190DAF000, v66, OS_LOG_TYPE_ERROR, "Skipped adding default_function to entry point: %s as PropagateInputTensorShapes failed when propagating default shape with error message: %s", (uint8_t *)&buf, 0x16u);
            v19 = 2;
          }
          else
          {
            v19 = 2;
          }
LABEL_99:
          MEMORY[0x19401B5D8](&__p);
          MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)v99);
          if ((IsGood & 1) == 0)
            goto LABEL_101;
          goto LABEL_100;
        }
        MIL::Transform::ProgramTransformer::GetProgram((MIL::Transform::ProgramTransformer *)v99);
        Function = MIL::IRProgram::GetFunction();
        v95 = v114;
        v96 = v115;
        if (v115)
        {
          v30 = (unint64_t *)&v115->__shared_owners_;
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
        }
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)Function + 232))(&buf);
        v93 = buf.__r_.__value_.__r.__words[0];
        if (buf.__r_.__value_.__r.__words[0])
        {
          v32 = (std::__shared_weak_count *)operator new();
          v33 = buf.__r_.__value_.__r.__words[0];
          v32->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2E10;
          v32->__shared_owners_ = 0;
          v32->__shared_weak_owners_ = 0;
          v32[1].__vftable = (std::__shared_weak_count_vtbl *)v33;
        }
        else
        {
          v32 = 0;
        }
        v94 = v32;
        buf.__r_.__value_.__r.__words[0] = 0;
        MIL::Builder::FunctionBuilder::Make();
        v34 = v94;
        if (!v94)
          goto LABEL_53;
        v35 = (unint64_t *)&v94->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
          v37 = buf.__r_.__value_.__r.__words[0];
          buf.__r_.__value_.__r.__words[0] = 0;
          if (!v37)
            goto LABEL_55;
        }
        else
        {
LABEL_53:
          v37 = buf.__r_.__value_.__r.__words[0];
          buf.__r_.__value_.__r.__words[0] = 0;
          if (!v37)
          {
LABEL_55:
            v38 = v96;
            if (v96)
            {
              v39 = (unint64_t *)&v96->__shared_owners_;
              do
                v40 = __ldaxr(v39);
              while (__stlxr(v40 - 1, v39));
              if (!v40)
              {
                ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                std::__shared_weak_count::__release_weak(v38);
              }
            }
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
            *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = xmmword_191A71250;
            strcpy(buf.__r_.__value_.__l.__data_, "FlexibleShapeInformation");
            MIL::Builder::FunctionBuilder::RemoveAttribute();
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              operator delete(buf.__r_.__value_.__l.__data_);
            v41 = *(char *)(v9 + 23);
            if (v41 >= 0)
              v42 = *(unsigned __int8 *)(v9 + 23);
            else
              v42 = *(_QWORD *)(v9 + 8);
            v43 = v42 + 1;
            if (v42 + 1 >= 0x7FFFFFFFFFFFFFF8)
              std::string::__throw_length_error[abi:ne180100]();
            if (v43 >= 0x17)
            {
              v45 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v43 | 7) != 0x17)
                v45 = v43 | 7;
              v46 = v45 + 1;
              p_dst = (std::string *)operator new(v45 + 1);
              __dst.__r_.__value_.__l.__size_ = v42 + 1;
              __dst.__r_.__value_.__r.__words[2] = v46 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
            }
            else
            {
              memset(&__dst, 0, sizeof(__dst));
              p_dst = &__dst;
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v42 + 1;
              if (!v42)
                goto LABEL_76;
            }
            if (v41 >= 0)
              v47 = (uint64_t *)v9;
            else
              v47 = *(uint64_t **)v9;
            memmove(p_dst, v47, v42);
LABEL_76:
            *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v42) = 95;
            v48 = std::string::append(&__dst, "default_function");
            v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
            buf.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
            *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v49;
            v48->__r_.__value_.__l.__size_ = 0;
            v48->__r_.__value_.__r.__words[2] = 0;
            v48->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__dst.__r_.__value_.__l.__data_);
              v90 = v97;
              if (v97)
                goto LABEL_78;
            }
            else
            {
              v90 = v97;
              if (v97)
              {
LABEL_78:
                v50 = (std::__shared_weak_count *)operator new();
                v51 = v97;
                v50->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3078;
                v50->__shared_owners_ = 0;
                v50->__shared_weak_owners_ = 0;
                v50[1].__vftable = v51;
LABEL_81:
                v91 = v50;
                v97 = 0;
                MIL::Builder::ProgramBuilder::AddFunction();
                v52 = v91;
                if (!v91)
                  goto LABEL_85;
                v53 = (unint64_t *)&v91->__shared_owners_;
                do
                  v54 = __ldaxr(v53);
                while (__stlxr(v54 - 1, v53));
                if (!v54)
                {
                  ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                  std::__shared_weak_count::__release_weak(v52);
                  v55 = v109;
                  if ((unint64_t)v109 < v110)
                    goto LABEL_86;
                }
                else
                {
LABEL_85:
                  v55 = v109;
                  if ((unint64_t)v109 < v110)
                  {
LABEL_86:
                    if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
                      v56 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
                      v55->__r_.__value_.__r.__words[2] = buf.__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v55->__r_.__value_.__l.__data_ = v56;
                      v109 = v55 + 1;
                      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                        goto LABEL_88;
LABEL_94:
                      v57 = v97;
                      v97 = 0;
                      if (!v57)
                      {
LABEL_96:
                        v58 = v98;
                        v98 = 0;
                        if (v58)
                          (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
                        v19 = 0;
                        goto LABEL_99;
                      }
LABEL_95:
                      (*((void (**)(std::__shared_weak_count_vtbl *))v57->~__shared_weak_count + 1))(v57);
                      goto LABEL_96;
                    }
                    std::string::__init_copy_ctor_external(v55, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
                    v109 = v55 + 1;
                    if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_94;
LABEL_88:
                    operator delete(buf.__r_.__value_.__l.__data_);
                    v57 = v97;
                    v97 = 0;
                    if (!v57)
                      goto LABEL_96;
                    goto LABEL_95;
                  }
                }
                v109 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v108, (uint64_t)&buf);
                if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_94;
                goto LABEL_88;
              }
            }
            v50 = 0;
            goto LABEL_81;
          }
        }
        (*(void (**)(std::string::size_type))(*(_QWORD *)v37 + 8))(v37);
        goto LABEL_55;
      }
    }
    if (v20)
      goto LABEL_33;
LABEL_100:
    v19 = 0;
LABEL_101:
    v59 = v101;
    if (v101)
    {
      v60 = (unint64_t *)&v101->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
        v62 = v102;
        v102 = 0;
        if (!v62)
          goto LABEL_107;
LABEL_106:
        MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v62);
        MEMORY[0x19401CD90]();
        goto LABEL_107;
      }
    }
    v62 = v102;
    v102 = 0;
    if (v62)
      goto LABEL_106;
LABEL_107:
    v63 = v104;
    if (v104)
    {
      v64 = (unint64_t *)&v104->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
        break;
    }
    if (v19 != 3)
      goto LABEL_112;
LABEL_11:
    v9 += 24;
    if (v9 == v10)
      goto LABEL_128;
  }
  ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
  std::__shared_weak_count::__release_weak(v63);
  if (v19 == 3)
    goto LABEL_11;
LABEL_112:
  if (!v19)
    goto LABEL_11;
LABEL_128:
  __dst.__r_.__value_.__r.__words[0] = 0;
  if (v108 == v109)
  {
LABEL_135:
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 32))(&__p, a1);
    v73 = __p;
    __p = 0;
    v74 = __dst.__r_.__value_.__r.__words[0];
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
    if (!v74)
      goto LABEL_138;
    (*(void (**)(std::string::size_type))(*(_QWORD *)v74 + 8))(v74);
    v72 = __p;
    __p = 0;
    if (!v72)
      goto LABEL_138;
LABEL_137:
    (*(void (**)(void *))(*(_QWORD *)v72 + 8))(v72);
    goto LABEL_138;
  }
  MIL::Builder::ProgramBuilder::CreateProgram(v113);
  if (((*(uint64_t (**)(_OWORD *))(*(_QWORD *)&v89[0] + 16))(v89) & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    MIL::MILResult::GetMessage((MIL::MILResult *)v89);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &buf);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v70 = __p;
  __p = 0;
  v71 = __dst.__r_.__value_.__r.__words[0];
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
  if (v71)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v71 + 8))(v71);
  MEMORY[0x19401B338](v89);
  v72 = __p;
  __p = 0;
  if (v72)
    goto LABEL_137;
LABEL_138:
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_10unique_ptrIN3MIL9IRProgramENS_14default_deleteIS5_EEEENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSD_ISF_EEEESH_EEC1B8ne180100IJLm0ELm1ELm2EEJS8_SH_SH_EJEJEJS8_RSH_SK_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSM_IJDpT2_EEEDpOT3_(a3, (uint64_t *)&__dst, (uint64_t *)&v108, (uint64_t *)&v105);
  v75 = __dst.__r_.__value_.__r.__words[0];
  __dst.__r_.__value_.__r.__words[0] = 0;
  if (v75)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v75 + 8))(v75);
  v76 = v105;
  if (v105)
  {
    v77 = v106;
    v78 = (char *)v105;
    if (v106 != v105)
    {
      do
      {
        if (SHIBYTE(v77[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v77[-1].__r_.__value_.__l.__data_);
        --v77;
      }
      while (v77 != v76);
      v78 = (char *)v105;
    }
    v106 = v76;
    operator delete(v78);
  }
  v79 = (char *)v108;
  if (v108)
  {
    v80 = v109;
    v81 = (char *)v108;
    if (v109 != v108)
    {
      do
      {
        if (SHIBYTE(v80[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v80[-1].__r_.__value_.__l.__data_);
        --v80;
      }
      while (v80 != (std::string *)v79);
      v81 = (char *)v108;
    }
    v109 = (std::string *)v79;
    operator delete(v81);
  }
  v82 = v113;
  v113 = 0;
  if (v82)
    (*(void (**)(MIL::Builder::ProgramBuilder *))(*(_QWORD *)v82 + 8))(v82);
  v83 = v115;
  if (v115)
  {
    v84 = (unint64_t *)&v115->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
}

void sub_1910F7F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,MIL::Attributes::FlexibleShapeInfo *a50,__int16 a51,char a52,char a53)
{
  uint64_t v53;
  uint64_t v55;

  MEMORY[0x19401B5D8](&__p);
  MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)&a44);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a46);
  std::unique_ptr<MIL::Attributes::FlexibleShapeInfo>::~unique_ptr[abi:ne180100](&a50);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a51);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v53 - 248));
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v53 - 224));
  v55 = *(_QWORD *)(v53 - 184);
  *(_QWORD *)(v53 - 184) = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v53 - 176);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::TraverseEntryPointFunctionAndUpdateItsBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6, uint64_t a7, int a8, char a9, _QWORD *a10)
{
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  _OWORD *v18;
  unsigned __int8 *v19;
  _BYTE *v20;
  _BYTE *v21;
  int64_t v22;
  std::string::size_type v23;
  const MIL::IRValueType *v24;
  _BOOL4 IsTensor;
  MIL::IRValueType *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  MIL::IRValueType *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  void *v36;
  MIL::IRStateValueType *v37;
  MIL::IRValueType *WrappedType;
  uint64_t v39;
  char *v40;
  char *v41;
  char **v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *v46;
  const char *OpsetName;
  unint64_t v48;
  std::string::size_type v49;
  const char *v50;
  std::string *p_dst;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  MIL::IRObject *v55;
  _QWORD *LocationPtr;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  uint64_t **v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count_vtbl *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  unint64_t *v74;
  unint64_t v75;
  BOOL v76;
  MIL::IROperation *v78;
  MIL::IRUnknownProperty *v79;
  MIL::IRUnknownProperty *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t ArgumentName;
  unsigned __int8 *v84;
  _BYTE *v85;
  _BYTE *v86;
  int64_t v87;
  std::string::size_type v88;
  MIL::IRNamedValueType ***v89;
  uint64_t Name;
  __int128 v91;
  _QWORD *v92;
  uint64_t **v93;
  int v94;
  size_t v95;
  const void *v96;
  int v97;
  size_t v98;
  uint64_t *v99;
  size_t v100;
  int v101;
  BOOL v102;
  int v103;
  _BOOL4 v104;
  MIL::IROperation *v105;
  MIL::IRValueType *OutputType;
  unint64_t *v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  __int128 *v112;
  _QWORD *size;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  char *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  unsigned __int8 *v121;
  char *v122;
  unsigned __int8 *v123;
  char *v124;
  MIL::IRNamedValueType *v125;
  void *v126;
  std::string::size_type v127;
  void *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count_vtbl *v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::logic_error *v151;
  std::string *v152;
  __int128 v153;
  std::runtime_error *v154;
  std::logic_error *exception;
  uint64_t v156;
  uint64_t v157;
  uint64_t v162;
  MIL::IROperation *v163;
  _QWORD *v165;
  std::__shared_weak_count *v166;
  std::__shared_weak_count *v167;
  std::__shared_weak_count *v168;
  std::__shared_weak_count *v169;
  std::__shared_weak_count *v170;
  uint64_t v171;
  _QWORD v172[2];
  std::__shared_weak_count *v173;
  std::string v174;
  std::__shared_weak_count *v175;
  std::string __dst;
  __int128 v177;
  char **v178;
  char *v179[2];
  MIL::IRUnknownProperty *v180;
  unint64_t *v181;
  std::string *v182;
  std::__shared_weak_count *v183;
  MIL::IRUnknownProperty *v184[2];
  std::string v185;
  __int128 *v186;
  std::string v187;
  std::string v188;
  std::string v189;

  (*(void (**)(MIL::IRUnknownProperty **__return_ptr, uint64_t))(*(_QWORD *)a3 + 48))(&v180, a3);
  v12 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
  v179[0] = 0;
  v179[1] = 0;
  v178 = v179;
  v13 = v12 + 1;
  v14 = (_QWORD *)*v12;
  if ((_QWORD *)*v12 != v12 + 1)
  {
    do
    {
      std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,MIL::IRValueType const*> const&>((uint64_t **)&v178, v179, v14 + 4, (uint64_t)(v14 + 4));
      v16 = (_QWORD *)v14[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v14[2];
          v76 = *v17 == (_QWORD)v14;
          v14 = v17;
        }
        while (!v76);
      }
      v14 = v17;
    }
    while (v17 != v13);
  }
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)a3 + 48))(&v177);
  v15 = (uint64_t *)v178;
  v165 = a5;
  if (v178 != v179)
  {
    do
    {
      v18 = v15 + 4;
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(a5, (unsigned __int8 *)v15 + 32))
      {
        v19 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(a5, (unsigned __int8 *)v15 + 32);
        if (!v19)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        memset(&v189, 0, sizeof(v189));
        v21 = (_BYTE *)*((_QWORD *)v19 + 5);
        v20 = (_BYTE *)*((_QWORD *)v19 + 6);
        v22 = v20 - v21;
        if (v20 != v21)
        {
          if (v22 < 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v189.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(v20 - v21);
          v189.__r_.__value_.__l.__size_ = v189.__r_.__value_.__r.__words[0];
          v23 = v189.__r_.__value_.__r.__words[0] + 8 * (v22 >> 3);
          v189.__r_.__value_.__r.__words[2] = v23;
          memcpy(v189.__r_.__value_.__l.__data_, v21, v22);
          v189.__r_.__value_.__l.__size_ = v23;
        }
        if (*((char *)v15 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(&v188, (const std::string::value_type *)v15[4], v15[5]);
        }
        else
        {
          *(_OWORD *)&v188.__r_.__value_.__l.__data_ = *v18;
          v188.__r_.__value_.__r.__words[2] = v15[6];
        }
        a5 = v165;
        v30 = (MIL::IRValueType *)v15[7];
        v31 = (std::__shared_weak_count *)*((_QWORD *)&v177 + 1);
        *(_OWORD *)&v185.__r_.__value_.__l.__data_ = v177;
        if (*((_QWORD *)&v177 + 1))
        {
          v32 = (unint64_t *)(*((_QWORD *)&v177 + 1) + 8);
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
        MIL::Builder::FunctionBuilder::AddInput();
        if (!v31)
          goto LABEL_29;
        p_shared_owners = (unint64_t *)&v31->__shared_owners_;
        do
          v35 = __ldaxr(p_shared_owners);
        while (__stlxr(v35 - 1, p_shared_owners));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
          if ((SHIBYTE(v188.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_30:
            v36 = (void *)v189.__r_.__value_.__r.__words[0];
            if (!v189.__r_.__value_.__r.__words[0])
              goto LABEL_46;
LABEL_41:
            v189.__r_.__value_.__l.__size_ = (std::string::size_type)v36;
LABEL_45:
            operator delete(v36);
            goto LABEL_46;
          }
        }
        else
        {
LABEL_29:
          if ((SHIBYTE(v188.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_30;
        }
        operator delete(v188.__r_.__value_.__l.__data_);
        v36 = (void *)v189.__r_.__value_.__r.__words[0];
        if (v189.__r_.__value_.__r.__words[0])
          goto LABEL_41;
      }
      else
      {
        IsTensor = E5Common::Utils::IsTensor(v15[7]);
        v26 = (MIL::IRValueType *)v15[7];
        if (IsTensor)
        {
          v27 = MIL::IRValueType::AsTensorType(v26);
          v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 96))(v27);
          v189.__r_.__value_.__r.__words[0] = (std::string::size_type)(v15 + 4);
          v29 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a5, (unsigned __int8 *)v15 + 32, (uint64_t)&std::piecewise_construct, (__int128 **)&v189);
        }
        else
        {
          if (!E5Common::Utils::IsState(v26, v24))
          {
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "Unsupported input function type.");
            goto LABEL_244;
          }
          v37 = (MIL::IRStateValueType *)MIL::IRValueType::AsStateType((MIL::IRValueType *)v15[7]);
          WrappedType = (MIL::IRValueType *)MIL::IRStateValueType::GetWrappedType(v37);
          if (!E5Common::Utils::IsTensor((uint64_t)WrappedType))
          {
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "Unsupported wrapped type in input state of a function.");
LABEL_244:
            exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
            __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
          }
          v39 = MIL::IRValueType::AsTensorType(WrappedType);
          v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 96))(v39);
          v189.__r_.__value_.__r.__words[0] = (std::string::size_type)(v15 + 4);
          v29 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a5, (unsigned __int8 *)v15 + 32, (uint64_t)&std::piecewise_construct, (__int128 **)&v189);
        }
        v40 = v29 + 40;
        if (v40 != (char *)v28)
          std::vector<MIL::IRDimension const*>::__assign_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v40, *(char **)v28, *(_QWORD *)(v28 + 8), (uint64_t)(*(_QWORD *)(v28 + 8) - *(_QWORD *)v28) >> 3);
        if (*((char *)v15 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(&v187, (const std::string::value_type *)v15[4], v15[5]);
        }
        else
        {
          *(_OWORD *)&v187.__r_.__value_.__l.__data_ = *v18;
          v187.__r_.__value_.__r.__words[2] = v15[6];
        }
        MIL::Builder::FunctionBuilder::AddInput();
        if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
        {
          v36 = (void *)v187.__r_.__value_.__r.__words[0];
          goto LABEL_45;
        }
      }
LABEL_46:
      v41 = (char *)v15[1];
      if (v41)
      {
        do
        {
          v42 = (char **)v41;
          v41 = *(char **)v41;
        }
        while (v41);
      }
      else
      {
        do
        {
          v42 = (char **)v15[2];
          v76 = *v42 == (char *)v15;
          v15 = (uint64_t *)v42;
        }
        while (!v76);
      }
      v15 = (uint64_t *)v42;
    }
    while (v42 != v179);
  }
  v43 = (std::__shared_weak_count *)*((_QWORD *)&v177 + 1);
  if (*((_QWORD *)&v177 + 1))
  {
    v44 = (unint64_t *)(*((_QWORD *)&v177 + 1) + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  std::__tree<std::string>::destroy((uint64_t)&v178, v179[0]);
  OpsetName = E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::GetOpsetName(v46);
  v49 = v48;
  if (v48 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v50 = OpsetName;
  if (v48 >= 0x17)
  {
    v52 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v48 | 7) != 0x17)
      v52 = v48 | 7;
    v53 = v52 + 1;
    p_dst = (std::string *)operator new(v52 + 1);
    __dst.__r_.__value_.__l.__size_ = v49;
    __dst.__r_.__value_.__r.__words[2] = v53 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_64;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v48;
  p_dst = &__dst;
  if (v48)
LABEL_64:
    memmove(p_dst, v50, v49);
  p_dst->__r_.__value_.__s.__data_[v49] = 0;
  v54 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 64))(a1, &__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v174, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    v174 = __dst;
  MIL::Builder::FunctionBuilder::AddBlock();
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v174.__r_.__value_.__l.__data_);
  MIL::Builder::FunctionBuilder::SetSpecialization();
  v55 = (MIL::IRObject *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  LocationPtr = (_QWORD *)MIL::IRObject::GetLocationPtr(v55);
  v57 = (std::__shared_weak_count *)LocationPtr[1];
  v172[1] = *LocationPtr;
  v173 = v57;
  if (v57)
  {
    v58 = (unint64_t *)&v57->__shared_owners_;
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }
  MIL::Builder::FunctionBuilder::SetLocation();
  if (v173)
  {
    v60 = &v173->__shared_owners_;
    do
      v61 = __ldaxr((unint64_t *)v60);
    while (__stlxr(v61 - 1, (unint64_t *)v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
      std::__shared_weak_count::__release_weak(v173);
    }
  }
  v156 = a1;
  v62 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 56))(v54);
  v64 = **v62;
  v63 = (*v62)[1];
  if (v64 != v63)
  {
    v157 = (*v62)[1];
    do
    {
      (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)v64 + 32))(v172);
      v66 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v172[0] + 64))(v172[0]);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v66 + 128))(v66))
      {
        v171 = v172[0];
        v172[0] = 0;
        v67 = v172[0];
        v172[0] = v189.__r_.__value_.__r.__words[0];
        if (v67)
          (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
        v68 = v171;
        v171 = 0;
        if (v68)
          (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
        if (v172[0])
        {
          v69 = (std::__shared_weak_count *)operator new();
          v70 = (std::__shared_weak_count_vtbl *)v172[0];
          v69->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2F98;
          v69->__shared_owners_ = 0;
          v69->__shared_weak_owners_ = 0;
          v69[1].__vftable = v70;
        }
        else
        {
          v69 = 0;
        }
        v169 = v69;
        v172[0] = 0;
        MIL::Builder::OperationBuilder::Make();
        MIL::Builder::BlockBuilder::AddOperation();
        if (v170)
        {
          v74 = (unint64_t *)&v170->__shared_owners_;
          do
            v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)())v170->__on_zero_shared)();
            std::__shared_weak_count::__release_weak(v170);
          }
        }
        v114 = v169;
        if (!v169)
          goto LABEL_215;
        v115 = (unint64_t *)&v169->__shared_owners_;
        do
          v116 = __ldaxr(v115);
        while (__stlxr(v116 - 1, v115));
        goto LABEL_214;
      }
      v71 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v172[0] + 64))(v172[0]);
      v72 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 16))(v71);
      v73 = *(char *)(v72 + 23);
      if (v73 < 0)
      {
        if (*(_QWORD *)(v72 + 8) != 19)
          goto LABEL_235;
        v72 = *(_QWORD *)v72;
      }
      else if (v73 != 19)
      {
        goto LABEL_235;
      }
      v76 = *(_QWORD *)v72 == 0x736F695F4C4D3545 && *(_QWORD *)(v72 + 8) == 0x736E6172742E3631;
      if (!v76 || *(_QWORD *)(v72 + 11) != 0x726566736E617274)
      {
LABEL_235:
        v151 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        (*(void (**)(_QWORD))(*(_QWORD *)v172[0] + 56))(v172[0]);
        std::operator+<char>();
        v152 = std::string::append(&v188, ".");
        v153 = *(_OWORD *)&v152->__r_.__value_.__l.__data_;
        v189.__r_.__value_.__r.__words[2] = v152->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v189.__r_.__value_.__l.__data_ = v153;
        v152->__r_.__value_.__l.__size_ = 0;
        v152->__r_.__value_.__r.__words[2] = 0;
        v152->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(v151, &v189);
        v151->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(v151, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
      }
      v78 = (MIL::IROperation *)v172[0];
      v172[0] = 0;
      v80 = v180;
      v79 = (MIL::IRUnknownProperty *)v181;
      v168 = (std::__shared_weak_count *)v181;
      if (v181)
      {
        v81 = v181 + 1;
        do
          v82 = __ldxr(v81);
        while (__stxr(v82 + 1, v81));
      }
      *((_BYTE *)&v189.__r_.__value_.__s + 23) = 6;
      strcpy((char *)&v189, "values");
      v163 = v78;
      ArgumentName = MIL::IROperation::GetArgumentName();
      if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v189.__r_.__value_.__l.__data_);
      if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(a5, (unsigned __int8 *)ArgumentName))
      {
        v154 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v154, "Failed to extract \"values\" shapes for transfer op: E5ML_ios16.transfer");
        __cxa_throw(v154, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v84 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(a5, (unsigned __int8 *)ArgumentName);
      v162 = v64;
      if (!v84)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      memset(&v189, 0, sizeof(v189));
      v86 = (_BYTE *)*((_QWORD *)v84 + 5);
      v85 = (_BYTE *)*((_QWORD *)v84 + 6);
      v87 = v85 - v86;
      if (v85 != v86)
      {
        if (v87 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v189.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(v85 - v86);
        v189.__r_.__value_.__l.__size_ = v189.__r_.__value_.__r.__words[0];
        v88 = v189.__r_.__value_.__r.__words[0] + 8 * (v87 >> 3);
        v189.__r_.__value_.__r.__words[2] = v88;
        memcpy(v189.__r_.__value_.__l.__data_, v86, v87);
        v189.__r_.__value_.__l.__size_ = v88;
      }
      memset(&v188, 0, sizeof(v188));
      v89 = (MIL::IRNamedValueType ***)(*(uint64_t (**)(MIL::IROperation *))(*(_QWORD *)v78 + 176))(v78);
      Name = MIL::IRNamedValueType::GetName(**v89);
      if (*(char *)(Name + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v187, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
      }
      else
      {
        v91 = *(_OWORD *)Name;
        v187.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
        *(_OWORD *)&v187.__r_.__value_.__l.__data_ = v91;
      }
      v92 = a10;
      v93 = *(uint64_t ***)(a4 + 8);
      if (v93)
      {
        v94 = *(char *)(ArgumentName + 23);
        if (v94 >= 0)
          v95 = *(unsigned __int8 *)(ArgumentName + 23);
        else
          v95 = *(_QWORD *)(ArgumentName + 8);
        if (v94 >= 0)
          v96 = (const void *)ArgumentName;
        else
          v96 = *(const void **)ArgumentName;
        do
        {
          v97 = *((char *)v93 + 55);
          if (v97 >= 0)
            v98 = *((unsigned __int8 *)v93 + 55);
          else
            v98 = (size_t)v93[5];
          if (v97 >= 0)
            v99 = (uint64_t *)(v93 + 4);
          else
            v99 = v93[4];
          if (v98 >= v95)
            v100 = v95;
          else
            v100 = v98;
          v101 = memcmp(v96, v99, v100);
          v102 = v95 < v98;
          if (v101)
            v102 = v101 < 0;
          if (!v102)
          {
            v103 = memcmp(v99, v96, v100);
            v104 = v98 < v95;
            if (v103)
              v104 = v103 < 0;
            if (!v104)
            {
              std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)a4, (const void **)&v187.__r_.__value_.__l.__data_, (uint64_t)&v187);
              break;
            }
            ++v93;
          }
          v93 = (uint64_t **)*v93;
        }
        while (v93);
      }
      a10 = v92;
      if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
      {
        v105 = v163;
        std::string::__init_copy_ctor_external(&v185, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
      }
      else
      {
        v185 = v187;
        v105 = v163;
      }
      OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(v105);
      v184[0] = v80;
      v184[1] = v79;
      a5 = v165;
      if (v79)
      {
        v107 = (unint64_t *)((char *)v79 + 8);
        do
          v108 = __ldxr(v107);
        while (__stxr(v108 + 1, v107));
      }
      MIL::IRNamedValueType::Make();
      if (!v79)
        goto LABEL_155;
      v109 = (unint64_t *)((char *)v79 + 8);
      do
        v110 = __ldaxr(v109);
      while (__stlxr(v110 - 1, v109));
      if (!v110)
      {
        (*(void (**)(MIL::IRUnknownProperty *))(*(_QWORD *)v79 + 16))(v79);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v79);
        if ((SHIBYTE(v185.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_156:
          v182 = (std::string *)v186;
          if (v186)
            goto LABEL_157;
          goto LABEL_165;
        }
      }
      else
      {
LABEL_155:
        if ((SHIBYTE(v185.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_156;
      }
      operator delete(v185.__r_.__value_.__l.__data_);
      v182 = (std::string *)v186;
      if (v186)
      {
LABEL_157:
        v111 = (std::__shared_weak_count *)operator new();
        v112 = v186;
        v111->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3040;
        v111->__shared_owners_ = 0;
        v111->__shared_weak_owners_ = 0;
        v111[1].__vftable = (std::__shared_weak_count_vtbl *)v112;
        v183 = v111;
        v186 = 0;
        size = (_QWORD *)v188.__r_.__value_.__l.__size_;
        if (v188.__r_.__value_.__l.__size_ < v188.__r_.__value_.__r.__words[2])
          goto LABEL_158;
        goto LABEL_166;
      }
LABEL_165:
      v111 = 0;
      v183 = 0;
      v186 = 0;
      size = (_QWORD *)v188.__r_.__value_.__l.__size_;
      if (v188.__r_.__value_.__l.__size_ < v188.__r_.__value_.__r.__words[2])
      {
LABEL_158:
        *size = v182;
        size[1] = v111;
        v188.__r_.__value_.__l.__size_ = (std::string::size_type)(size + 2);
        goto LABEL_171;
      }
LABEL_166:
      v117 = std::vector<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>::__push_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>(&v188.__r_.__value_.__l.__data_, (uint64_t)&v182);
      v118 = v183;
      v188.__r_.__value_.__l.__size_ = (std::string::size_type)v117;
      if (v183)
      {
        v119 = (unint64_t *)&v183->__shared_owners_;
        do
          v120 = __ldaxr(v119);
        while (__stlxr(v120 - 1, v119));
        if (!v120)
        {
          ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
          std::__shared_weak_count::__release_weak(v118);
        }
      }
LABEL_171:
      v121 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(v165, (unsigned __int8 *)ArgumentName);
      if (!v121)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v182 = &v187;
      v122 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v165, (unsigned __int8 *)&v187, (uint64_t)&std::piecewise_construct, (__int128 **)&v182);
      if (v122 != (char *)v121)
        std::vector<MIL::IRDimension const*>::__assign_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v122 + 40, *((char **)v121 + 5), *((_QWORD *)v121 + 6), (uint64_t)(*((_QWORD *)v121 + 6) - *((_QWORD *)v121 + 5)) >> 3);
      (*(void (**)(MIL::IROperation *, std::string *))(*(_QWORD *)v105 + 184))(v105, &v188);
      if (v92)
      {
        v123 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(v92, (unsigned __int8 *)ArgumentName);
        if (v123)
        {
          v182 = &v187;
          v124 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v92, (unsigned __int8 *)&v187, (uint64_t)&std::piecewise_construct, (__int128 **)&v182);
          if (v124 != (char *)v123)
            std::vector<MIL::IRDimension const*>::__assign_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v124 + 40, *((char **)v123 + 5), *((_QWORD *)v123 + 6), (uint64_t)(*((_QWORD *)v123 + 6) - *((_QWORD *)v123 + 5)) >> 3);
        }
      }
      v125 = (MIL::IRNamedValueType *)v186;
      v186 = 0;
      if (v125)
      {
        MIL::IRNamedValueType::~IRNamedValueType(v125);
        MEMORY[0x19401CD90]();
      }
      if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v187.__r_.__value_.__l.__data_);
        v126 = (void *)v188.__r_.__value_.__r.__words[0];
        if (!v188.__r_.__value_.__r.__words[0])
        {
LABEL_194:
          v128 = (void *)v189.__r_.__value_.__r.__words[0];
          if (!v189.__r_.__value_.__r.__words[0])
            goto LABEL_196;
LABEL_195:
          v189.__r_.__value_.__l.__size_ = (std::string::size_type)v128;
          operator delete(v128);
          goto LABEL_196;
        }
      }
      else
      {
        v126 = (void *)v188.__r_.__value_.__r.__words[0];
        if (!v188.__r_.__value_.__r.__words[0])
          goto LABEL_194;
      }
      v127 = v188.__r_.__value_.__l.__size_;
      if ((void *)v188.__r_.__value_.__l.__size_ == v126)
      {
        v188.__r_.__value_.__l.__size_ = (std::string::size_type)v126;
        operator delete(v126);
        v128 = (void *)v189.__r_.__value_.__r.__words[0];
        if (v189.__r_.__value_.__r.__words[0])
          goto LABEL_195;
      }
      else
      {
        do
        {
          v129 = *(std::__shared_weak_count **)(v127 - 8);
          if (v129)
          {
            v130 = (unint64_t *)&v129->__shared_owners_;
            do
              v131 = __ldaxr(v130);
            while (__stlxr(v131 - 1, v130));
            if (!v131)
            {
              ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
              std::__shared_weak_count::__release_weak(v129);
            }
          }
          v127 -= 16;
        }
        while ((void *)v127 != v126);
        v188.__r_.__value_.__l.__size_ = (std::string::size_type)v126;
        operator delete(v188.__r_.__value_.__l.__data_);
        v128 = (void *)v189.__r_.__value_.__r.__words[0];
        if (v189.__r_.__value_.__r.__words[0])
          goto LABEL_195;
      }
LABEL_196:
      v132 = v172[0];
      v172[0] = v105;
      v63 = v157;
      if (v132)
        (*(void (**)(uint64_t))(*(_QWORD *)v132 + 8))(v132);
      v64 = v162;
      if (!v168)
        goto LABEL_202;
      v133 = (unint64_t *)&v168->__shared_owners_;
      do
        v134 = __ldaxr(v133);
      while (__stlxr(v134 - 1, v133));
      if (!v134)
      {
        ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
        std::__shared_weak_count::__release_weak(v168);
        if (v172[0])
        {
LABEL_203:
          v135 = (std::__shared_weak_count *)operator new();
          v136 = (std::__shared_weak_count_vtbl *)v172[0];
          v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2F98;
          v135->__shared_owners_ = 0;
          v135->__shared_weak_owners_ = 0;
          v135[1].__vftable = v136;
          goto LABEL_206;
        }
      }
      else
      {
LABEL_202:
        if (v172[0])
          goto LABEL_203;
      }
      v135 = 0;
LABEL_206:
      v166 = v135;
      v172[0] = 0;
      MIL::Builder::OperationBuilder::Make();
      MIL::Builder::BlockBuilder::AddOperation();
      if (v167)
      {
        v137 = (unint64_t *)&v167->__shared_owners_;
        do
          v138 = __ldaxr(v137);
        while (__stlxr(v138 - 1, v137));
        if (!v138)
        {
          ((void (*)())v167->__on_zero_shared)();
          std::__shared_weak_count::__release_weak(v167);
        }
      }
      v114 = v166;
      if (!v166)
        goto LABEL_215;
      v139 = (unint64_t *)&v166->__shared_owners_;
      do
        v116 = __ldaxr(v139);
      while (__stlxr(v116 - 1, v139));
LABEL_214:
      if (!v116)
      {
        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
        std::__shared_weak_count::__release_weak(v114);
        v140 = v172[0];
        v172[0] = 0;
        if (!v140)
          goto LABEL_80;
LABEL_216:
        (*(void (**)(uint64_t))(*(_QWORD *)v140 + 8))(v140);
        goto LABEL_80;
      }
LABEL_215:
      v140 = v172[0];
      v172[0] = 0;
      if (v140)
        goto LABEL_216;
LABEL_80:
      v64 += 16;
    }
    while (v64 != v63);
  }
  v141 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v156 + 40))(v156);
  v142 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v141 + 88))(v141);
  v143 = *v142;
  v144 = v142[1];
  if (*v142 != v144)
  {
    do
    {
      MIL::Builder::BlockBuilder::AddOutput();
      v143 += 24;
    }
    while (v143 != v144);
  }
  v145 = v175;
  if (!v175)
    goto LABEL_225;
  v146 = (unint64_t *)&v175->__shared_owners_;
  do
    v147 = __ldaxr(v146);
  while (__stlxr(v147 - 1, v146));
  if (v147)
  {
LABEL_225:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_227;
    goto LABEL_226;
  }
  ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
  std::__shared_weak_count::__release_weak(v145);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_226:
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_227:
  v148 = (std::__shared_weak_count *)v181;
  if (v181)
  {
    v149 = v181 + 1;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
}

void sub_1910F92A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,char a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,char a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,char a63)
{
  if (a57 < 0)
  {
    operator delete(__p);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a63);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a63);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::TraverseCallOp(_QWORD *a1, _QWORD *a2, uint64_t a3, _QWORD *a4, _QWORD *a5, uint64_t a6, uint64_t a7, int a8, char a9, _QWORD *a10)
{
  uint64_t v13;
  uint64_t Function;
  _QWORD *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  const void *v19;
  unsigned __int8 *v20;
  char *v21;
  uint64_t **v22;
  int v23;
  size_t v24;
  int v25;
  size_t v26;
  uint64_t *v27;
  size_t v28;
  int v29;
  BOOL v30;
  int v31;
  _BOOL4 v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count_vtbl *v38;
  uint64_t v39;
  uint64_t *v40;
  MIL::Attributes::FlexibleShapeInfo *Context;
  _QWORD *v42;
  uint64_t v43;
  MIL::Attributes::FlexibleShapeInfo *v44;
  MIL::Attributes::FlexibleShapeInfo *v45;
  MIL::Attributes::FlexibleShapeInfo *v46;
  void *v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  MIL::Builder::Variable *v52;
  uint64_t Name;
  uint64_t **v54;
  unsigned __int8 *v55;
  int v56;
  size_t v57;
  const void *v58;
  int v59;
  size_t v60;
  uint64_t *v61;
  size_t v62;
  int v63;
  BOOL v64;
  int v65;
  _BOOL4 v66;
  char *v67;
  char *v68;
  _QWORD *v69;
  _QWORD *v70;
  void *v71;
  char *v72;
  void *v73;
  MIL::Builder::Variable *v74;
  char *v75;
  void *v76;
  uint64_t v77;
  uint64_t **v78;
  uint64_t v79;
  int v80;
  size_t v81;
  const void *v82;
  int v83;
  size_t v84;
  uint64_t *v85;
  size_t v86;
  int v87;
  BOOL v88;
  int v89;
  _BOOL4 v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  const char *v94;
  unsigned __int8 *v95;
  const char *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  uint64_t v99;
  int64_t v100;
  NSObject *v101;
  uint64_t v102;
  NSObject *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  int v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  void *v119;
  char *v120;
  void *v121;
  MIL::Builder::Variable *v122;
  char *v123;
  void *v124;
  uint64_t v125;
  uint64_t **v126;
  uint64_t v127;
  int v128;
  size_t v129;
  const void *v130;
  int v131;
  size_t v132;
  uint64_t *v133;
  size_t v134;
  int v135;
  BOOL v136;
  int v137;
  _BOOL4 v138;
  char *v139;
  uint64_t v140;
  unint64_t v141;
  const char *v142;
  char *v143;
  NSObject *v144;
  uint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  void *v148;
  char *v149;
  void *v150;
  unint64_t *v151;
  unint64_t v152;
  uint64_t v153;
  void *v154;
  char *v155;
  void *v156;
  uint64_t *v157;
  MIL::Builder::ProgramBuilder *v158;
  _QWORD *v159;
  MIL::Builder::ProgramBuilder *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  MIL::Builder::ProgramBuilder *v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  void *v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  MIL::Attributes::FlexibleShapeInfo *v175;
  std::__shared_weak_count *size;
  unint64_t *v177;
  unint64_t v178;
  unint64_t *v179;
  unint64_t v180;
  MIL::Transform::ProgramTransformer *v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  MIL::Builder::OperationBuilder **v185;
  std::string::size_type v186;
  uint64_t Operator;
  __int128 v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  uint64_t *v194;
  void *v195;
  _QWORD *v196;
  void *v197;
  std::__shared_weak_count *v198;
  unint64_t *p_shared_owners;
  unint64_t v200;
  void *v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  void *v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  const void **i;
  _OWORD *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  unint64_t v215;
  _QWORD *v216;
  _OWORD *v217;
  void *v218;
  _QWORD *v219;
  _QWORD *v220;
  char *v221;
  uint64_t v222;
  char *v223;
  char *v224;
  int v225;
  size_t v226;
  uint64_t *v227;
  char **v228;
  char *v229;
  char **v230;
  char *v231;
  char *v232;
  int v233;
  size_t v234;
  char *v235;
  size_t v236;
  int v237;
  _BOOL4 v238;
  char **v239;
  char *v240;
  BOOL v241;
  _QWORD *v242;
  size_t v243;
  size_t v244;
  char *v245;
  size_t v246;
  char *v247;
  size_t v248;
  int v249;
  _BOOL4 v250;
  uint64_t v251;
  std::string::size_type v252;
  std::string::size_type v253;
  void *v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  char *v264;
  void *v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  uint64_t v269;
  MIL::IRNamedValueType **v270;
  MIL::IRNamedValueType **v271;
  const void **v272;
  unsigned __int8 *v273;
  unsigned __int8 *v274;
  _BYTE *v275;
  _BYTE *v276;
  int64_t v277;
  std::__shared_weak_count *v278;
  uint64_t v279;
  __int128 v280;
  MIL::IRValueType *Type;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  unint64_t *v285;
  unint64_t v286;
  _QWORD *v287;
  uint64_t v288;
  _QWORD *v289;
  MIL::IRNamedValueType *v290;
  char *v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  char *v295;
  void *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  void *v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  char *v304;
  void *v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  char *v309;
  void *v310;
  std::runtime_error *exception;
  _QWORD *v312;
  uint64_t *v313;
  _QWORD *v316;
  _QWORD *v317;
  char v320;
  MIL::IRUnknownProperty *v322[2];
  std::string v323;
  void *v324;
  void *v325;
  MIL::IRUnknownProperty *v326;
  std::__shared_weak_count *v327;
  void *v328[2];
  void *v329[2];
  int v330;
  void *v331;
  std::__shared_weak_count *v332;
  MIL::IRUnknownProperty *v333;
  std::__shared_weak_count *v334;
  __int128 v335;
  uint64_t v336;
  MIL::IRUnknownProperty *v337;
  MIL::IRUnknownProperty *v338;
  void *v339;
  std::__shared_weak_count *v340;
  void *__p;
  MIL::Attributes::FlexibleShapeInfo *v342[3];
  void *v343;
  _BYTE *v344;
  void *v345;
  std::__shared_weak_count *v346;
  uint64_t v347;
  std::string v348;
  std::string v349;
  MIL::Builder::FunctionBuilder *v350;
  std::__shared_weak_count *v351;
  MIL::Builder::ProgramBuilder *v352;
  std::__shared_weak_count *v353;
  _BYTE v354[15];
  _BYTE v355[32];
  int v356;
  __int128 buf;
  char *v358;
  uint64_t v359;

  v359 = *MEMORY[0x1E0C80C00];
  (*(void (**)(MIL::IRUnknownProperty **__return_ptr, uint64_t))(*(_QWORD *)a3 + 48))(&v337, a3);
  v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 64))(*a2);
  (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 120))(&v335, v13, *a2);
  Function = MIL::IRProgram::GetFunction();
  if (std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(a5, (uint64_t)&v335))
  {
    goto LABEL_2;
  }
  v333 = v337;
  v334 = (std::__shared_weak_count *)v338;
  if (v338)
  {
    v35 = (unint64_t *)((char *)v338 + 8);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)Function + 232))(v328, Function);
  v331 = v328[0];
  if (v328[0])
  {
    v37 = (std::__shared_weak_count *)operator new();
    v38 = (std::__shared_weak_count_vtbl *)v328[0];
    v37->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2E10;
    v37->__shared_owners_ = 0;
    v37->__shared_weak_owners_ = 0;
    v37[1].__vftable = v38;
  }
  else
  {
    v37 = 0;
  }
  v332 = v37;
  v328[0] = 0;
  MIL::Builder::FunctionBuilder::Make();
  *(_QWORD *)v355 = &v335;
  v194 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a5, (uint64_t)&v335, (uint64_t)&std::piecewise_construct, (__int128 **)v355);
  v195 = v339;
  if (v339)
  {
    v196 = (_QWORD *)operator new();
    v197 = v339;
    *v196 = &unk_1E2DC3078;
    v196[1] = 0;
    v196[2] = 0;
    v196[3] = v197;
    v339 = 0;
    v198 = (std::__shared_weak_count *)v194[6];
    v194[5] = (uint64_t)v195;
    v194[6] = (uint64_t)v196;
    if (!v198)
      goto LABEL_322;
LABEL_318:
    p_shared_owners = (unint64_t *)&v198->__shared_owners_;
    do
      v200 = __ldaxr(p_shared_owners);
    while (__stlxr(v200 - 1, p_shared_owners));
    if (!v200)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v198);
    }
    goto LABEL_322;
  }
  v339 = 0;
  v198 = (std::__shared_weak_count *)v194[6];
  v194[5] = 0;
  v194[6] = 0;
  if (v198)
    goto LABEL_318;
LABEL_322:
  v201 = v339;
  v339 = 0;
  if (v201)
    (*(void (**)(void *))(*(_QWORD *)v201 + 8))(v201);
  v202 = v332;
  if (v332)
  {
    v203 = (unint64_t *)&v332->__shared_owners_;
    do
      v204 = __ldaxr(v203);
    while (__stlxr(v204 - 1, v203));
    if (!v204)
    {
      ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
      std::__shared_weak_count::__release_weak(v202);
    }
  }
  v205 = v328[0];
  v328[0] = 0;
  if (v205)
    (*(void (**)(void *))(*(_QWORD *)v205 + 8))(v205);
  v206 = v334;
  if (v334)
  {
    v207 = (unint64_t *)&v334->__shared_owners_;
    do
      v208 = __ldaxr(v207);
    while (__stlxr(v208 - 1, v207));
    if (!v208)
    {
      ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
      std::__shared_weak_count::__release_weak(v206);
    }
  }
LABEL_2:
  v317 = a2;
  *(_OWORD *)v328 = 0u;
  *(_OWORD *)v329 = 0u;
  v330 = 1065353216;
  v15 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Function + 128))(Function);
  v316 = a5;
  v312 = a1;
  v16 = (unsigned __int8 *)(v15 + 1);
  v17 = (unsigned __int8 *)*v15;
  if ((_QWORD *)*v15 == v15 + 1)
  {
    v320 = 0;
    v18 = a6;
  }
  else
  {
    v320 = 0;
    v18 = a6;
    do
    {
      v19 = v17 + 32;
      v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(a4, v17 + 32);
      if (!v20)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      *(_QWORD *)v355 = v17 + 32;
      v21 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v328, v17 + 32, (uint64_t)&std::piecewise_construct, (__int128 **)v355);
      if (v21 != (char *)v20)
        std::vector<MIL::IRDimension const*>::__assign_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v21 + 40, *((char **)v20 + 5), *((_QWORD *)v20 + 6), (uint64_t)(*((_QWORD *)v20 + 6) - *((_QWORD *)v20 + 5)) >> 3);
      v22 = *(uint64_t ***)(a6 + 8);
      if (v22)
      {
        v23 = (char)v17[55];
        if (v23 >= 0)
          v24 = v17[55];
        else
          v24 = *((_QWORD *)v17 + 5);
        if (v23 < 0)
          v19 = (const void *)*((_QWORD *)v17 + 4);
        do
        {
          v25 = *((char *)v22 + 55);
          if (v25 >= 0)
            v26 = *((unsigned __int8 *)v22 + 55);
          else
            v26 = (size_t)v22[5];
          if (v25 >= 0)
            v27 = (uint64_t *)(v22 + 4);
          else
            v27 = v22[4];
          if (v26 >= v24)
            v28 = v24;
          else
            v28 = v26;
          v29 = memcmp(v19, v27, v28);
          v30 = v24 < v26;
          if (v29)
            v30 = v29 < 0;
          if (!v30)
          {
            v31 = memcmp(v27, v19, v28);
            v32 = v26 < v24;
            if (v31)
              v32 = v31 < 0;
            if (!v32)
            {
              v320 = 1;
              break;
            }
            ++v22;
          }
          v22 = (uint64_t **)*v22;
        }
        while (v22);
      }
      v33 = (unsigned __int8 *)*((_QWORD *)v17 + 1);
      if (v33)
      {
        do
        {
          v34 = v33;
          v33 = *(unsigned __int8 **)v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          v34 = (unsigned __int8 *)*((_QWORD *)v17 + 2);
          v241 = *(_QWORD *)v34 == (_QWORD)v17;
          v17 = v34;
        }
        while (!v241);
      }
      v17 = v34;
    }
    while (v34 != v16);
  }
  *(_QWORD *)v355 = &v335;
  v39 = (uint64_t)a5;
  v40 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a5, (uint64_t)&v335, (uint64_t)&std::piecewise_construct, (__int128 **)v355);
  Context = (MIL::Attributes::FlexibleShapeInfo *)MIL::Builder::FunctionBuilder::GetContext((MIL::Builder::FunctionBuilder *)v40[5]);
  MIL::Attributes::FlexibleShapeInfo::Make(Context);
  v42 = v317;
  v43 = a7;
  *(_QWORD *)v355 = operator new(0x20uLL);
  *(_OWORD *)&v355[8] = xmmword_191A71250;
  strcpy(*(char **)v355, "FlexibleShapeInformation");
  MIL::Builder::FunctionBuilder::TryGetAttribute();
  if ((v355[23] & 0x80000000) == 0)
  {
    if (!v345)
      goto LABEL_54;
LABEL_49:
    MIL::Builder::FunctionBuilder::CreateFunction((MIL::Builder::FunctionBuilder *)v40[5]);
    MIL::Attributes::FlexibleShapeInfo::Make();
    v44 = *(MIL::Attributes::FlexibleShapeInfo **)v355;
    *(_QWORD *)v355 = 0;
    v45 = v342[0];
    v342[0] = v44;
    if (v45)
    {
      MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v45);
      MEMORY[0x19401CD90]();
      v46 = *(MIL::Attributes::FlexibleShapeInfo **)v355;
      *(_QWORD *)v355 = 0;
      if (v46)
      {
        MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v46);
        MEMORY[0x19401CD90]();
      }
    }
    v47 = v339;
    v339 = 0;
    if (v47)
      (*(void (**)(void *))(*(_QWORD *)v47 + 8))(v47);
    goto LABEL_54;
  }
  operator delete(*(void **)v355);
  if (v345)
    goto LABEL_49;
LABEL_54:
  v48 = *(unsigned __int8 *)(a7 + 23);
  v49 = v48;
  v50 = *(_QWORD *)(a7 + 8);
  if ((v48 & 0x80u) == 0)
    v51 = *(unsigned __int8 *)(a7 + 23);
  else
    v51 = *(_QWORD *)(a7 + 8);
  v313 = v40;
  if (!v51)
    goto LABEL_101;
  memset(v355, 0, sizeof(v355));
  v356 = 1065353216;
  MIL::Builder::FunctionBuilder::GetInputs((MIL::Builder::FunctionBuilder *)v40[5]);
  v52 = (MIL::Builder::Variable *)__p;
  if (!__p)
    goto LABEL_89;
  while (2)
  {
    Name = MIL::Builder::Variable::GetName(*((MIL::Builder::Variable **)v52 + 2));
    v54 = *(uint64_t ***)(v18 + 8);
    if (!v54)
      goto LABEL_60;
    v55 = (unsigned __int8 *)Name;
    v56 = *(char *)(Name + 23);
    if (v56 >= 0)
      v57 = *(unsigned __int8 *)(Name + 23);
    else
      v57 = *(_QWORD *)(Name + 8);
    if (v56 >= 0)
      v58 = (const void *)Name;
    else
      v58 = *(const void **)Name;
    while (1)
    {
      v59 = *((char *)v54 + 55);
      if (v59 >= 0)
        v60 = *((unsigned __int8 *)v54 + 55);
      else
        v60 = (size_t)v54[5];
      if (v59 >= 0)
        v61 = (uint64_t *)(v54 + 4);
      else
        v61 = v54[4];
      if (v60 >= v57)
        v62 = v57;
      else
        v62 = v60;
      v63 = memcmp(v58, v61, v62);
      v64 = v57 < v60;
      if (v63)
        v64 = v63 < 0;
      if (v64)
        goto LABEL_68;
      v65 = memcmp(v61, v58, v62);
      v66 = v60 < v57;
      if (v65)
        v66 = v65 < 0;
      if (!v66)
        break;
      ++v54;
LABEL_68:
      v54 = (uint64_t **)*v54;
      if (!v54)
        goto LABEL_60;
    }
    v349.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
    v67 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, v55, (uint64_t)&std::piecewise_construct, (__int128 **)&v349);
    v349.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
    v68 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v355, v55, (uint64_t)&std::piecewise_construct, (__int128 **)&v349);
    if (v68 != v67)
      std::vector<MIL::IRDimension const*>::__assign_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v68 + 40, *((char **)v67 + 5), *((_QWORD *)v67 + 6), (uint64_t)(*((_QWORD *)v67 + 6) - *((_QWORD *)v67 + 5)) >> 3);
LABEL_60:
    v52 = *(MIL::Builder::Variable **)v52;
    if (v52)
      continue;
    break;
  }
  v69 = __p;
  v39 = (uint64_t)v316;
  v40 = v313;
  v43 = a7;
  if (__p)
  {
    do
    {
      v70 = (_QWORD *)*v69;
      operator delete(v69);
      v69 = v70;
    }
    while (v70);
  }
LABEL_89:
  v71 = v339;
  v339 = 0;
  if (v71)
    operator delete(v71);
  v42 = v317;
  if (*(_QWORD *)&v355[24])
  {
    if (*(char *)(v43 + 23) < 0)
      std::string::__init_copy_ctor_external(&v349, *(const std::string::value_type **)v43, *(_QWORD *)(v43 + 8));
    else
      v349 = *(std::string *)v43;
    MIL::Attributes::FlexibleShapeInfo::AddEnumeratedShapes();
    if (SHIBYTE(v349.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v349.__r_.__value_.__l.__data_);
  }
  v72 = *(char **)&v355[16];
  if (*(_QWORD *)&v355[16])
  {
    do
    {
      v75 = *(char **)v72;
      v76 = (void *)*((_QWORD *)v72 + 5);
      if (v76)
      {
        *((_QWORD *)v72 + 6) = v76;
        operator delete(v76);
      }
      if (v72[39] < 0)
        operator delete(*((void **)v72 + 2));
      operator delete(v72);
      v72 = v75;
    }
    while (v75);
  }
  v73 = *(void **)v355;
  *(_QWORD *)v355 = 0;
  if (v73)
    operator delete(v73);
  v48 = *(unsigned __int8 *)(v43 + 23);
  v50 = *(_QWORD *)(v43 + 8);
  v49 = *(_BYTE *)(v43 + 23);
LABEL_101:
  if (v49 < 0)
    v48 = v50;
  if (v48 || (a8 & 1) != 0)
    goto LABEL_178;
  memset(v355, 0, sizeof(v355));
  v356 = 1065353216;
  MIL::Builder::FunctionBuilder::GetInputs((MIL::Builder::FunctionBuilder *)v40[5]);
  v74 = (MIL::Builder::Variable *)__p;
  if (!__p)
    goto LABEL_171;
  while (2)
  {
    v77 = MIL::Builder::Variable::GetName(*((MIL::Builder::Variable **)v74 + 2));
    v78 = *(uint64_t ***)(v18 + 8);
    if (!v78)
      goto LABEL_112;
    v79 = v77;
    v80 = *(char *)(v77 + 23);
    if (v80 >= 0)
      v81 = *(unsigned __int8 *)(v77 + 23);
    else
      v81 = *(_QWORD *)(v77 + 8);
    if (v80 >= 0)
      v82 = (const void *)v77;
    else
      v82 = *(const void **)v77;
    while (2)
    {
      v83 = *((char *)v78 + 55);
      if (v83 >= 0)
        v84 = *((unsigned __int8 *)v78 + 55);
      else
        v84 = (size_t)v78[5];
      if (v83 >= 0)
        v85 = (uint64_t *)(v78 + 4);
      else
        v85 = v78[4];
      if (v84 >= v81)
        v86 = v81;
      else
        v86 = v84;
      v87 = memcmp(v82, v85, v86);
      v88 = v81 < v84;
      if (v87)
        v88 = v87 < 0;
      if (v88)
      {
LABEL_121:
        v78 = (uint64_t **)*v78;
        if (!v78)
          goto LABEL_112;
        continue;
      }
      break;
    }
    v89 = memcmp(v85, v82, v86);
    v90 = v84 < v81;
    if (v89)
      v90 = v89 < 0;
    if (v90)
    {
      ++v78;
      goto LABEL_121;
    }
    *(_QWORD *)&buf = v79;
    v91 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, (unsigned __int8 *)v79, (uint64_t)&std::piecewise_construct, (__int128 **)&buf);
    v92 = *((_QWORD *)v91 + 5);
    if (*((_QWORD *)v91 + 6) == v92)
    {
LABEL_141:
      if (a10)
      {
        v95 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(a10, (unsigned __int8 *)v79);
        v97 = v95;
        if (!v95
          || (v97 = v95 + 40, *((_QWORD *)v95 + 6) - *((_QWORD *)v95 + 5) == *((_QWORD *)v91 + 6) - *((_QWORD *)v91 + 5)))
        {
          v99 = *((_QWORD *)v91 + 5);
          v98 = *((_QWORD *)v91 + 6);
          v358 = 0;
          buf = 0uLL;
          v100 = v98 - v99;
          if (v98 == v99)
            goto LABEL_160;
          goto LABEL_153;
        }
        v103 = Espresso::espresso_os_log_subsystem(0, v96);
        if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
        {
          if (*(char *)(v79 + 23) >= 0)
            v114 = v79;
          else
            v114 = *(_QWORD *)v79;
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v114;
          _os_log_error_impl(&dword_190DAF000, v103, OS_LOG_TYPE_ERROR, "%s tensor min shape has a different rank than max shape, so leaving the min shape to default value 1 in FlexibleShapeInfo.", (uint8_t *)&buf, 0xCu);
          v97 = 0;
          v116 = *((_QWORD *)v91 + 5);
          v115 = *((_QWORD *)v91 + 6);
          v358 = 0;
          buf = 0uLL;
          v100 = v115 - v116;
          if (v115 == v116)
            goto LABEL_160;
          goto LABEL_153;
        }
      }
      v97 = 0;
      v105 = *((_QWORD *)v91 + 5);
      v104 = *((_QWORD *)v91 + 6);
      v358 = 0;
      buf = 0uLL;
      v100 = v104 - v105;
      if (v104 == v105)
      {
LABEL_160:
        v343 = (void *)v79;
        v113 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v355, v79, (uint64_t)&std::piecewise_construct, (__int128 **)&v343)+ 5;
        if (v113 != (uint64_t *)&buf)
          std::vector<std::pair<int,int>>::__assign_with_size[abi:ne180100]<std::pair<int,int>*,std::pair<int,int>*>((uint64_t)v113, (char *)buf, *((char **)&buf + 1), (uint64_t)(*((_QWORD *)&buf + 1) - buf) >> 3);
        if ((_QWORD)buf)
        {
          *((_QWORD *)&buf + 1) = buf;
          operator delete((void *)buf);
        }
        goto LABEL_112;
      }
LABEL_153:
      if (v100 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v106 = (char *)operator new(v100);
      *(_QWORD *)&buf = v106;
      v358 = &v106[8 * (v100 >> 3)];
      bzero(v106, v100);
      *((_QWORD *)&buf + 1) = &v106[v100];
      v107 = *((_QWORD *)v91 + 5);
      if (*((_QWORD *)v91 + 6) != v107)
      {
        v108 = 0;
        do
        {
          if (v97)
          {
            v109 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*(_QWORD *)v97 + 8 * v108));
            v110 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v109 + 48))(v109);
            *(_DWORD *)(buf + 8 * v108) = v110;
            v107 = *((_QWORD *)v91 + 5);
          }
          else
          {
            *(_DWORD *)&v106[8 * v108] = 1;
          }
          v111 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(v107 + 8 * v108));
          v112 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v111 + 48))(v111);
          v106 = (char *)buf;
          *(_DWORD *)(buf + 8 * v108++ + 4) = v112;
          v107 = *((_QWORD *)v91 + 5);
        }
        while (v108 < (*((_QWORD *)v91 + 6) - v107) >> 3);
      }
      goto LABEL_160;
    }
    v93 = 0;
    while (!(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v92 + 8 * v93) + 24))(*(_QWORD *)(v92 + 8 * v93)))
    {
      ++v93;
      v92 = *((_QWORD *)v91 + 5);
      if (v93 >= (*((_QWORD *)v91 + 6) - v92) >> 3)
        goto LABEL_141;
    }
    v101 = Espresso::espresso_os_log_subsystem(0, v94);
    if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(v79 + 23) >= 0)
        v102 = v79;
      else
        v102 = *(_QWORD *)v79;
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v102;
      _os_log_error_impl(&dword_190DAF000, v101, OS_LOG_TYPE_ERROR, "%s tensor has unknown max shape, so not adding it to FlexibleShapeInfo.", (uint8_t *)&buf, 0xCu);
    }
LABEL_112:
    v74 = *(MIL::Builder::Variable **)v74;
    if (v74)
      continue;
    break;
  }
  v117 = __p;
  v39 = (uint64_t)v316;
  v42 = v317;
  v40 = v313;
  if (__p)
  {
    do
    {
      v118 = (_QWORD *)*v117;
      operator delete(v117);
      v117 = v118;
    }
    while (v118);
  }
LABEL_171:
  v119 = v339;
  v339 = 0;
  if (v119)
    operator delete(v119);
  if (*(_QWORD *)&v355[24])
    MIL::Attributes::FlexibleShapeInfo::SetRangeShapes();
  v120 = *(char **)&v355[16];
  if (*(_QWORD *)&v355[16])
  {
    do
    {
      v123 = *(char **)v120;
      v124 = (void *)*((_QWORD *)v120 + 5);
      if (v124)
      {
        *((_QWORD *)v120 + 6) = v124;
        operator delete(v124);
      }
      if (v120[39] < 0)
        operator delete(*((void **)v120 + 2));
      operator delete(v120);
      v120 = v123;
    }
    while (v123);
  }
  v121 = *(void **)v355;
  *(_QWORD *)v355 = 0;
  if (v121)
    operator delete(v121);
LABEL_178:
  if (!a8)
    goto LABEL_231;
  memset(v355, 0, sizeof(v355));
  v356 = 1065353216;
  MIL::Builder::FunctionBuilder::GetInputs((MIL::Builder::FunctionBuilder *)v40[5]);
  v122 = (MIL::Builder::Variable *)__p;
  if (!__p)
    goto LABEL_224;
  while (2)
  {
    v125 = MIL::Builder::Variable::GetName(*((MIL::Builder::Variable **)v122 + 2));
    v126 = *(uint64_t ***)(v18 + 8);
    if (!v126)
      goto LABEL_186;
    v127 = v125;
    v128 = *(char *)(v125 + 23);
    if (v128 >= 0)
      v129 = *(unsigned __int8 *)(v125 + 23);
    else
      v129 = *(_QWORD *)(v125 + 8);
    if (v128 >= 0)
      v130 = (const void *)v125;
    else
      v130 = *(const void **)v125;
    while (2)
    {
      v131 = *((char *)v126 + 55);
      if (v131 >= 0)
        v132 = *((unsigned __int8 *)v126 + 55);
      else
        v132 = (size_t)v126[5];
      if (v131 >= 0)
        v133 = (uint64_t *)(v126 + 4);
      else
        v133 = v126[4];
      if (v132 >= v129)
        v134 = v129;
      else
        v134 = v132;
      v135 = memcmp(v130, v133, v134);
      v136 = v129 < v132;
      if (v135)
        v136 = v135 < 0;
      if (v136)
      {
LABEL_195:
        v126 = (uint64_t **)*v126;
        if (!v126)
          goto LABEL_186;
        continue;
      }
      break;
    }
    v137 = memcmp(v133, v130, v134);
    v138 = v132 < v129;
    if (v137)
      v138 = v137 < 0;
    if (v138)
    {
      ++v126;
      goto LABEL_195;
    }
    *(_QWORD *)&buf = v127;
    v139 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, (unsigned __int8 *)v127, (uint64_t)&std::piecewise_construct, (__int128 **)&buf);
    v140 = *((_QWORD *)v139 + 5);
    if (*((_QWORD *)v139 + 6) == v140)
    {
LABEL_215:
      *(_QWORD *)&buf = v127;
      v143 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v355, (unsigned __int8 *)v127, (uint64_t)&std::piecewise_construct, (__int128 **)&buf);
      if (v143 != v139)
        std::vector<MIL::IRDimension const*>::__assign_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v143 + 40, *((char **)v139 + 5), *((_QWORD *)v139 + 6), (uint64_t)(*((_QWORD *)v139 + 6) - *((_QWORD *)v139 + 5)) >> 3);
    }
    else
    {
      v141 = 0;
      while (!(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v140 + 8 * v141) + 24))(*(_QWORD *)(v140 + 8 * v141)))
      {
        ++v141;
        v140 = *((_QWORD *)v139 + 5);
        if (v141 >= (*((_QWORD *)v139 + 6) - v140) >> 3)
          goto LABEL_215;
      }
      v144 = Espresso::espresso_os_log_subsystem(0, v142);
      if (os_log_type_enabled(v144, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(v127 + 23) >= 0)
          v145 = v127;
        else
          v145 = *(_QWORD *)v127;
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v145;
        _os_log_error_impl(&dword_190DAF000, v144, OS_LOG_TYPE_ERROR, "%s tensor has unknown default shape, so not adding it to FlexibleShapeInfo.", (uint8_t *)&buf, 0xCu);
      }
    }
LABEL_186:
    v122 = *(MIL::Builder::Variable **)v122;
    if (v122)
      continue;
    break;
  }
  v146 = __p;
  v39 = (uint64_t)v316;
  v40 = v313;
  if (__p)
  {
    do
    {
      v147 = (_QWORD *)*v146;
      operator delete(v146);
      v146 = v147;
    }
    while (v147);
  }
LABEL_224:
  v148 = v339;
  v339 = 0;
  if (v148)
    operator delete(v148);
  v42 = v317;
  if (*(_QWORD *)&v355[24])
    MIL::Attributes::FlexibleShapeInfo::SetDefaultShapes();
  v149 = *(char **)&v355[16];
  if (*(_QWORD *)&v355[16])
  {
    do
    {
      v155 = *(char **)v149;
      v156 = (void *)*((_QWORD *)v149 + 5);
      if (v156)
      {
        *((_QWORD *)v149 + 6) = v156;
        operator delete(v156);
      }
      if (v149[39] < 0)
        operator delete(*((void **)v149 + 2));
      operator delete(v149);
      v149 = v155;
    }
    while (v155);
  }
  v150 = *(void **)v355;
  *(_QWORD *)v355 = 0;
  if (v150)
    operator delete(v150);
LABEL_231:
  MIL::Builder::FunctionBuilder::CreateFunction((MIL::Builder::FunctionBuilder *)v40[5]);
  MIL::Attributes::FlexibleShapeInfo::Replace();
  *(_OWORD *)v355 = *(_OWORD *)&v348.__r_.__value_.__l.__data_;
  if (v348.__r_.__value_.__l.__size_)
  {
    v151 = (unint64_t *)(v348.__r_.__value_.__l.__size_ + 8);
    do
      v152 = __ldxr(v151);
    while (__stxr(v152 + 1, v151));
  }
  v339 = v343;
  if (v343)
  {
    v153 = operator new();
    v154 = v343;
    *(_QWORD *)v153 = &unk_1E2DC2E10;
    *(_QWORD *)(v153 + 8) = 0;
    *(_QWORD *)(v153 + 16) = 0;
    *(_QWORD *)(v153 + 24) = v154;
  }
  else
  {
    v153 = 0;
  }
  v340 = (std::__shared_weak_count *)v153;
  v343 = 0;
  MIL::Builder::FunctionBuilder::Make();
  *(_QWORD *)&buf = &v335;
  v157 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v39, (uint64_t)&v335, (uint64_t)&std::piecewise_construct, (__int128 **)&buf);
  v158 = v352;
  if (v352)
  {
    v159 = (_QWORD *)operator new();
    v160 = v352;
    *v159 = &unk_1E2DC3078;
    v159[1] = 0;
    v159[2] = 0;
    v159[3] = v160;
    v352 = 0;
    v161 = (std::__shared_weak_count *)v157[6];
    v157[5] = (uint64_t)v158;
    v157[6] = (uint64_t)v159;
    if (!v161)
      goto LABEL_250;
  }
  else
  {
    v352 = 0;
    v161 = (std::__shared_weak_count *)v157[6];
    v157[5] = 0;
    v157[6] = 0;
    if (!v161)
      goto LABEL_250;
  }
  v162 = (unint64_t *)&v161->__shared_owners_;
  do
    v163 = __ldaxr(v162);
  while (__stlxr(v163 - 1, v162));
  if (!v163)
  {
    ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
    std::__shared_weak_count::__release_weak(v161);
  }
LABEL_250:
  v164 = v352;
  v352 = 0;
  if (v164)
    (*(void (**)(MIL::Builder::ProgramBuilder *))(*(_QWORD *)v164 + 8))(v164);
  v165 = v340;
  if (v340)
  {
    v166 = (unint64_t *)&v340->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }
  v168 = *(std::__shared_weak_count **)&v355[8];
  if (*(_QWORD *)&v355[8])
  {
    v169 = (unint64_t *)(*(_QWORD *)&v355[8] + 8);
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  v171 = v343;
  v343 = 0;
  if (v171)
    (*(void (**)(void *))(*(_QWORD *)v171 + 8))(v171);
  v172 = v346;
  if (v346)
  {
    v173 = (unint64_t *)&v346->__shared_owners_;
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  v175 = v342[0];
  v342[0] = 0;
  if (v175)
  {
    MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v175);
    MEMORY[0x19401CD90]();
  }
  size = (std::__shared_weak_count *)v348.__r_.__value_.__l.__size_;
  if (v348.__r_.__value_.__l.__size_)
  {
    v177 = (unint64_t *)(v348.__r_.__value_.__l.__size_ + 8);
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 - 1, v177));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
      if ((a9 & 1) != 0)
        goto LABEL_442;
LABEL_276:
      v326 = v337;
      v327 = (std::__shared_weak_count *)v338;
      if (v338)
      {
        v179 = (unint64_t *)((char *)v338 + 8);
        do
          v180 = __ldxr(v179);
        while (__stxr(v180 + 1, v179));
      }
      std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>::unordered_map((uint64_t)&v324, (uint64_t)v328);
      v181 = (MIL::Transform::ProgramTransformer *)MEMORY[0x19401BA88](v354, a3);
      MIL::Transform::ProgramTransformer::GetProgramBuilder(v181);
      if (SHIBYTE(v336) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v355, (const std::string::value_type *)v335, *((std::string::size_type *)&v335 + 1));
      }
      else
      {
        *(_OWORD *)v355 = v335;
        *(_QWORD *)&v355[16] = v336;
      }
      v340 = 0;
      __p = 0;
      v339 = &v340;
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)&v339, (uint64_t *)&v340, (const void **)v355, (uint64_t)v355);
      if ((v355[23] & 0x80000000) != 0)
        operator delete(*(void **)v355);
      MIL::Builder::ProgramBuilder::GetFunction();
      MIL::Builder::FunctionBuilder::SelectedSpecialization(v350);
      MIL::Builder::FunctionBuilder::GetBlock();
      MIL::Builder::BlockBuilder::GetOperations(*(MIL::Builder::BlockBuilder **)v355);
      v182 = *(std::__shared_weak_count **)&v355[8];
      if (!*(_QWORD *)&v355[8])
        goto LABEL_290;
      v183 = (unint64_t *)(*(_QWORD *)&v355[8] + 8);
      do
        v184 = __ldaxr(v183);
      while (__stlxr(v184 - 1, v183));
      if (v184)
      {
LABEL_290:
        v186 = v349.__r_.__value_.__l.__size_;
        v185 = (MIL::Builder::OperationBuilder **)v349.__r_.__value_.__r.__words[0];
        if (v349.__r_.__value_.__r.__words[0] != v349.__r_.__value_.__l.__size_)
          goto LABEL_293;
        goto LABEL_337;
      }
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
      v186 = v349.__r_.__value_.__l.__size_;
      v185 = (MIL::Builder::OperationBuilder **)v349.__r_.__value_.__r.__words[0];
      if (v349.__r_.__value_.__r.__words[0] == v349.__r_.__value_.__l.__size_)
      {
LABEL_337:
        *((_QWORD *)&buf + 1) = 0;
        v358 = 0;
        *(_QWORD *)&buf = (char *)&buf + 8;
        for (i = *(const void ***)(MIL::Builder::ProgramBuilder::GetFunctions(v352) + 16); i; i = (const void **)*i)
        {
          v224 = (char *)v340;
          if (v340)
          {
            v225 = *((char *)i + 39);
            v226 = v225 >= 0 ? *((unsigned __int8 *)i + 39) : (size_t)i[3];
            v227 = v225 >= 0 ? (uint64_t *)(i + 2) : (uint64_t *)i[2];
            v228 = (char **)&v340;
            do
            {
              v229 = v224;
              v230 = v228;
              v232 = v224 + 32;
              v231 = (char *)*((_QWORD *)v224 + 4);
              v233 = v229[55];
              if (v233 >= 0)
                v234 = v229[55];
              else
                v234 = *((_QWORD *)v229 + 5);
              if (v233 >= 0)
                v235 = v232;
              else
                v235 = v231;
              if (v226 >= v234)
                v236 = v234;
              else
                v236 = v226;
              v237 = memcmp(v235, v227, v236);
              if (v237)
                v238 = v237 < 0;
              else
                v238 = v234 < v226;
              v239 = (char **)(v229 + 8);
              if (v238)
              {
                v228 = v230;
              }
              else
              {
                v239 = (char **)v229;
                v228 = (char **)v229;
              }
              v224 = *v239;
            }
            while (v224);
            if (v228 != (char **)&v340)
            {
              v240 = (char *)(v230 + 4);
              v241 = !v238;
              if (v238)
                v242 = v230;
              else
                v242 = v229;
              if (v241)
                v240 = v232;
              v243 = *((unsigned __int8 *)v228 + 55);
              v245 = (char *)v242[4];
              v244 = v242[5];
              if ((v243 & 0x80u) == 0)
                v246 = v243;
              else
                v246 = v244;
              if ((v243 & 0x80u) == 0)
                v247 = v240;
              else
                v247 = v245;
              if (v246 >= v226)
                v248 = v226;
              else
                v248 = v246;
              v249 = memcmp(v227, v247, v248);
              v250 = v226 < v246;
              if (v249)
                v250 = v249 < 0;
              if (!v250)
                continue;
            }
          }
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&buf, i + 2, (uint64_t)(i + 2));
        }
        v210 = (_OWORD *)buf;
        v18 = a6;
        if ((__int128 *)buf != (__int128 *)((char *)&buf + 8))
        {
          do
          {
            MIL::Builder::ProgramBuilder::RemoveFunction();
            v216 = (_QWORD *)*((_QWORD *)v210 + 1);
            if (v216)
            {
              do
              {
                v217 = v216;
                v216 = (_QWORD *)*v216;
              }
              while (v216);
            }
            else
            {
              do
              {
                v217 = (_OWORD *)*((_QWORD *)v210 + 2);
                v241 = *(_QWORD *)v217 == (_QWORD)v210;
                v210 = v217;
              }
              while (!v241);
            }
            v210 = v217;
          }
          while (v217 != (__int128 *)((char *)&buf + 8));
        }
        MIL::Passes::PropagateInputTensorShapes();
        if ((MIL::Passes::TypeInferenceResult::IsGood((MIL::Passes::TypeInferenceResult *)v355) & 1) == 0)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          MIL::MILResult::GetMessage((MIL::MILResult *)v355);
          std::operator+<char>();
          std::runtime_error::runtime_error(exception, &v348);
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        MIL::Transform::ProgramTransformer::GetProgram((MIL::Transform::ProgramTransformer *)v354);
        v211 = MIL::IRProgram::GetFunction();
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v211 + 160))(&v348);
        v212 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v211 + 40))(v211);
        v213 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v212 + 88))(v212);
        v214 = *v213;
        if (v213[1] != *v213)
        {
          v215 = 0;
          do
          {
            v218 = (void *)(v214 + 24 * v215);
            v219 = v345;
            v220 = &v346->__vftable;
            if (v345 == v346)
            {
LABEL_353:
              v343 = v218;
              v221 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, (unsigned __int8 *)v218, (uint64_t)&std::piecewise_construct, (__int128 **)&v343)+ 40;
              if (v221 != (char *)&v345)
                std::vector<MIL::IRDimension const*>::__assign_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v221, (char *)v345, (uint64_t)v346, ((char *)v346 - (_BYTE *)v345) >> 3);
            }
            else
            {
              while (!(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v219 + 24))(*v219))
              {
                if (++v219 == v220)
                  goto LABEL_353;
              }
              v222 = MIL::IRProgram::GetFunction();
              (*(void (**)(MIL::Attributes::FlexibleShapeInfo **__return_ptr))(*(_QWORD *)v222 + 160))(v342);
              if (v342[0])
              {
                v342[1] = v342[0];
                operator delete(v342[0]);
              }
              v342[0] = (MIL::Attributes::FlexibleShapeInfo *)v218;
              v223 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, (unsigned __int8 *)v218, (uint64_t)&std::piecewise_construct, (__int128 **)v342)+ 40;
              if (v223 != (char *)&v343)
                std::vector<MIL::IRDimension const*>::__assign_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v223, (char *)v343, (uint64_t)v344, (v344 - (_BYTE *)v343) >> 3);
              if (v343)
              {
                v344 = v343;
                operator delete(v343);
              }
            }
            if (v345)
            {
              v346 = (std::__shared_weak_count *)v345;
              operator delete(v345);
            }
            ++v215;
            v214 = *v213;
          }
          while (0xAAAAAAAAAAAAAAABLL * ((v213[1] - *v213) >> 3) > v215);
        }
        if (v348.__r_.__value_.__r.__words[0])
        {
          v348.__r_.__value_.__l.__size_ = v348.__r_.__value_.__r.__words[0];
          operator delete(v348.__r_.__value_.__l.__data_);
        }
        v251 = v347;
        v347 = 0;
        v42 = v317;
        if (v251)
          (*(void (**)(uint64_t))(*(_QWORD *)v251 + 8))(v251);
        MEMORY[0x19401B5D8](v355);
        std::__tree<std::string>::destroy((uint64_t)&buf, *((char **)&buf + 1));
        v252 = v349.__r_.__value_.__r.__words[0];
        if (v349.__r_.__value_.__r.__words[0])
        {
          v253 = v349.__r_.__value_.__l.__size_;
          v254 = (void *)v349.__r_.__value_.__r.__words[0];
          if (v349.__r_.__value_.__l.__size_ != v349.__r_.__value_.__r.__words[0])
          {
            do
            {
              v255 = *(std::__shared_weak_count **)(v253 - 8);
              if (v255)
              {
                v256 = (unint64_t *)&v255->__shared_owners_;
                do
                  v257 = __ldaxr(v256);
                while (__stlxr(v257 - 1, v256));
                if (!v257)
                {
                  ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
                  std::__shared_weak_count::__release_weak(v255);
                }
              }
              v253 -= 16;
            }
            while (v253 != v252);
            v254 = (void *)v349.__r_.__value_.__r.__words[0];
          }
          v349.__r_.__value_.__l.__size_ = v252;
          operator delete(v254);
        }
        v258 = v351;
        if (v351)
        {
          v259 = (unint64_t *)&v351->__shared_owners_;
          do
            v260 = __ldaxr(v259);
          while (__stlxr(v260 - 1, v259));
          if (!v260)
          {
            ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
            std::__shared_weak_count::__release_weak(v258);
          }
        }
        std::__tree<std::string>::destroy((uint64_t)&v339, (char *)v340);
        v261 = v353;
        if (v353)
        {
          v262 = (unint64_t *)&v353->__shared_owners_;
          do
            v263 = __ldaxr(v262);
          while (__stlxr(v263 - 1, v262));
          if (!v263)
          {
            ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
            std::__shared_weak_count::__release_weak(v261);
          }
        }
        MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)v354);
        v264 = (char *)v325;
        if (v325)
        {
          do
          {
            v295 = *(char **)v264;
            v296 = (void *)*((_QWORD *)v264 + 5);
            if (v296)
            {
              *((_QWORD *)v264 + 6) = v296;
              operator delete(v296);
            }
            if (v264[39] < 0)
              operator delete(*((void **)v264 + 2));
            operator delete(v264);
            v264 = v295;
          }
          while (v295);
        }
        v265 = v324;
        v324 = 0;
        if (v265)
          operator delete(v265);
        v266 = v327;
        if (v327)
        {
          v267 = (unint64_t *)&v327->__shared_owners_;
          do
            v268 = __ldaxr(v267);
          while (__stlxr(v268 - 1, v267));
          if (!v268)
          {
            ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
            std::__shared_weak_count::__release_weak(v266);
          }
        }
        goto LABEL_442;
      }
      while (1)
      {
LABEL_293:
        Operator = MIL::Builder::OperationBuilder::GetOperator(*v185);
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)Operator + 128))(Operator))
          goto LABEL_292;
        v355[23] = 8;
        strcpy(v355, "function");
        MIL::Builder::OperationBuilder::TryGetAttribute();
        v188 = buf;
        if (!*((_QWORD *)&buf + 1))
          goto LABEL_298;
        v189 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
        do
          v190 = __ldaxr(v189);
        while (__stlxr(v190 - 1, v189));
        if (!v190)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v188 + 1) + 16))(*((_QWORD *)&v188 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v188 + 1));
          if ((v355[23] & 0x80000000) == 0)
          {
LABEL_299:
            if ((_QWORD)v188)
              goto LABEL_303;
            goto LABEL_292;
          }
        }
        else
        {
LABEL_298:
          if ((v355[23] & 0x80000000) == 0)
            goto LABEL_299;
        }
        operator delete(*(void **)v355);
        if ((_QWORD)v188)
        {
LABEL_303:
          HIBYTE(v358) = 8;
          strcpy((char *)&buf, "function");
          MIL::Builder::OperationBuilder::TryGetAttribute();
          MIL::IRValue::AsTensor((MIL::IRValue *)v348.__r_.__value_.__l.__data_);
          MIL::IRValue::GetScalar<std::string>();
          v191 = (std::__shared_weak_count *)v348.__r_.__value_.__l.__size_;
          if (!v348.__r_.__value_.__l.__size_)
            goto LABEL_307;
          v192 = (unint64_t *)(v348.__r_.__value_.__l.__size_ + 8);
          do
            v193 = __ldaxr(v192);
          while (__stlxr(v193 - 1, v192));
          if (!v193)
          {
            ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
            std::__shared_weak_count::__release_weak(v191);
            if (SHIBYTE(v358) < 0)
LABEL_308:
              operator delete((void *)buf);
          }
          else
          {
LABEL_307:
            if (SHIBYTE(v358) < 0)
              goto LABEL_308;
          }
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v339, (const void **)v355, (uint64_t)v355);
          if ((v355[23] & 0x80000000) != 0)
            operator delete(*(void **)v355);
        }
LABEL_292:
        v185 += 2;
        if (v185 == (MIL::Builder::OperationBuilder **)v186)
          goto LABEL_337;
      }
    }
  }
  if ((a9 & 1) == 0)
    goto LABEL_276;
LABEL_442:
  memset(v355, 0, 24);
  v269 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v42 + 176))(*v42);
  v270 = *(MIL::IRNamedValueType ***)v269;
  v271 = *(MIL::IRNamedValueType ***)(v269 + 8);
  if (*(MIL::IRNamedValueType ***)v269 != v271)
  {
    while (2)
    {
      v272 = (const void **)MIL::IRNamedValueType::GetName(*v270);
      if ((v320 & 1) != 0)
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)v18, v272, (uint64_t)v272);
      v273 = (unsigned __int8 *)MIL::IRNamedValueType::GetName(*v270);
      v274 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(a4, v273);
      if (!v274)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v339 = 0;
      v340 = 0;
      __p = 0;
      v276 = (_BYTE *)*((_QWORD *)v274 + 5);
      v275 = (_BYTE *)*((_QWORD *)v274 + 6);
      v277 = v275 - v276;
      if (v275 != v276)
      {
        if (v277 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v339 = operator new(v275 - v276);
        v340 = (std::__shared_weak_count *)v339;
        v278 = (std::__shared_weak_count *)((char *)v339 + 8 * (v277 >> 3));
        __p = v278;
        memcpy(v339, v276, v277);
        v340 = v278;
        v18 = a6;
      }
      v279 = MIL::IRNamedValueType::GetName(*v270);
      if (*(char *)(v279 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v323, *(const std::string::value_type **)v279, *(_QWORD *)(v279 + 8));
      }
      else
      {
        v280 = *(_OWORD *)v279;
        v323.__r_.__value_.__r.__words[2] = *(_QWORD *)(v279 + 16);
        *(_OWORD *)&v323.__r_.__value_.__l.__data_ = v280;
      }
      Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(*v270);
      v282 = (std::__shared_weak_count *)v338;
      v322[0] = v337;
      v322[1] = v338;
      if (v338)
      {
        v283 = (unint64_t *)((char *)v338 + 8);
        do
          v284 = __ldxr(v283);
        while (__stxr(v284 + 1, v283));
      }
      MIL::IRNamedValueType::Make();
      if (!v282)
        goto LABEL_461;
      v285 = (unint64_t *)&v282->__shared_owners_;
      do
        v286 = __ldaxr(v285);
      while (__stlxr(v286 - 1, v285));
      if (!v286)
      {
        ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
        std::__shared_weak_count::__release_weak(v282);
        if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_467;
LABEL_462:
        v349.__r_.__value_.__r.__words[0] = buf;
        if ((_QWORD)buf)
          goto LABEL_463;
LABEL_468:
        v287 = 0;
        v349.__r_.__value_.__l.__size_ = 0;
        *(_QWORD *)&buf = 0;
        v289 = *(_QWORD **)&v355[8];
        if (*(_QWORD *)&v355[8] >= *(_QWORD *)&v355[16])
          goto LABEL_469;
LABEL_464:
        *v289 = v349.__r_.__value_.__r.__words[0];
        v289[1] = v287;
        *(_QWORD *)&v355[8] = v289 + 2;
        v290 = (MIL::IRNamedValueType *)buf;
        *(_QWORD *)&buf = 0;
        if (!v290)
          goto LABEL_475;
      }
      else
      {
LABEL_461:
        if ((SHIBYTE(v323.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_462;
LABEL_467:
        operator delete(v323.__r_.__value_.__l.__data_);
        v349.__r_.__value_.__r.__words[0] = buf;
        if (!(_QWORD)buf)
          goto LABEL_468;
LABEL_463:
        v287 = (_QWORD *)operator new();
        v288 = buf;
        *v287 = &unk_1E2DC3040;
        v287[1] = 0;
        v287[2] = 0;
        v287[3] = v288;
        v349.__r_.__value_.__l.__size_ = (std::string::size_type)v287;
        *(_QWORD *)&buf = 0;
        v289 = *(_QWORD **)&v355[8];
        if (*(_QWORD *)&v355[8] < *(_QWORD *)&v355[16])
          goto LABEL_464;
LABEL_469:
        v291 = std::vector<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>::__push_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>((char **)v355, (uint64_t)&v349);
        v292 = (std::__shared_weak_count *)v349.__r_.__value_.__l.__size_;
        *(_QWORD *)&v355[8] = v291;
        if (!v349.__r_.__value_.__l.__size_)
          goto LABEL_473;
        v293 = (unint64_t *)(v349.__r_.__value_.__l.__size_ + 8);
        do
          v294 = __ldaxr(v293);
        while (__stlxr(v294 - 1, v293));
        if (v294)
        {
LABEL_473:
          v290 = (MIL::IRNamedValueType *)buf;
          *(_QWORD *)&buf = 0;
          if (v290)
            break;
LABEL_475:
          if (v339)
          {
            v340 = (std::__shared_weak_count *)v339;
            operator delete(v339);
          }
          v270 += 2;
          if (v270 == v271)
            goto LABEL_484;
          continue;
        }
        ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
        std::__shared_weak_count::__release_weak(v292);
        v290 = (MIL::IRNamedValueType *)buf;
        *(_QWORD *)&buf = 0;
        if (!v290)
          goto LABEL_475;
      }
      break;
    }
    MIL::IRNamedValueType::~IRNamedValueType(v290);
    MEMORY[0x19401CD90]();
    goto LABEL_475;
  }
LABEL_484:
  (*(void (**)(_QWORD, _BYTE *))(*(_QWORD *)*v42 + 184))(*v42, v355);
  v297 = *v42;
  *v42 = 0;
  *v312 = v297;
  v298 = *(_QWORD *)v355;
  if (*(_QWORD *)v355)
  {
    v299 = *(_QWORD *)&v355[8];
    v300 = *(void **)v355;
    if (*(_QWORD *)&v355[8] != *(_QWORD *)v355)
    {
      do
      {
        v301 = *(std::__shared_weak_count **)(v299 - 8);
        if (v301)
        {
          v302 = (unint64_t *)&v301->__shared_owners_;
          do
            v303 = __ldaxr(v302);
          while (__stlxr(v303 - 1, v302));
          if (!v303)
          {
            ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
            std::__shared_weak_count::__release_weak(v301);
          }
        }
        v299 -= 16;
      }
      while (v299 != v298);
      v300 = *(void **)v355;
    }
    *(_QWORD *)&v355[8] = v298;
    operator delete(v300);
  }
  v304 = (char *)v329[0];
  if (v329[0])
  {
    do
    {
      v309 = *(char **)v304;
      v310 = (void *)*((_QWORD *)v304 + 5);
      if (v310)
      {
        *((_QWORD *)v304 + 6) = v310;
        operator delete(v310);
      }
      if (v304[39] < 0)
        operator delete(*((void **)v304 + 2));
      operator delete(v304);
      v304 = v309;
    }
    while (v309);
  }
  v305 = v328[0];
  v328[0] = 0;
  if (v305)
    operator delete(v305);
  if (SHIBYTE(v336) < 0)
    operator delete((void *)v335);
  v306 = (std::__shared_weak_count *)v338;
  if (v338)
  {
    v307 = (unint64_t *)((char *)v338 + 8);
    do
      v308 = __ldaxr(v307);
    while (__stlxr(v308 - 1, v307));
    if (!v308)
    {
      ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
      std::__shared_weak_count::__release_weak(v306);
    }
  }
}

void sub_1910FB34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *a67;
  uint64_t v67;

  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a52);
  std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>::~unordered_map[abi:ne180100](v67 - 192);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a63);
  std::unique_ptr<MIL::Attributes::FlexibleShapeInfo>::~unique_ptr[abi:ne180100]((MIL::Attributes::FlexibleShapeInfo **)&a57);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a67);
  std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>::~unordered_map[abi:ne180100]((uint64_t)&a35);
  if (a49 < 0)
    operator delete(__p);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a50);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::BuildIRValueTypeWithNewShape(uint64_t a1, MIL::IRValueType *a2, MIL::IRUnknownProperty **a3)
{
  const MIL::IRValueType *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  void **v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  const MIL::IRValueType *v14;
  MIL::IRMemoryLayoutValueType *v15;
  MIL::IRTensorBufferValueType *v16;
  uint64_t Strides;
  uint64_t v18;
  const void *v19;
  int64_t v20;
  void *v21;
  unint64_t v22;
  const MIL::IRValueType *v23;
  MIL::IRMemoryLayoutValueType *v24;
  MIL::IRPixelBufferValueType *v25;
  uint64_t BytesPerRow;
  uint64_t v27;
  const void *v28;
  size_t v29;
  MIL::IRStateValueType *v30;
  MIL::IRValueType *WrappedType;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  void **v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t InterleaveFactors;
  uint64_t v40;
  const void *v41;
  size_t v42;
  uint64_t Attributes;
  MIL::IRProperty **v44;
  size_t v45;
  unint64_t v46;
  MIL::IRConstantProperty *v47;
  MIL::IRConstantProperty *v48;
  MIL::MILContext *Int64ScalarValue;
  uint64_t Int64Scalar;
  void **v51;
  void **v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  void *v56;
  void *v57;
  void **v58;
  void **v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::logic_error *exception;
  std::logic_error *v65;
  std::logic_error *v66;
  void *v67;
  MIL::IRProperty **v68;
  MIL::IRProperty **v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73[2];
  void *__p;

  if (E5Common::Utils::IsTensor((uint64_t)a2))
  {
    v6 = MIL::IRValueType::AsTensorType(a2);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 88))(v6);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 80))(v6);
    std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v73, v7);
    v8 = MIL::IRTensorValueType::MakeWithShape();
    v9 = (void **)__p;
    if (__p)
    {
      do
      {
        while (1)
        {
          v10 = (void **)*v9;
          v11 = (std::__shared_weak_count *)v9[6];
          if (v11)
          {
            p_shared_owners = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldaxr(p_shared_owners);
            while (__stlxr(v13 - 1, p_shared_owners));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          if (*((char *)v9 + 39) < 0)
            break;
          operator delete(v9);
          v9 = v10;
          if (!v10)
            goto LABEL_81;
        }
        operator delete(v9[2]);
        operator delete(v9);
        v9 = v10;
      }
      while (v10);
    }
  }
  else
  {
    if (E5Common::Utils::IsTensorBuffer(a2, v5))
    {
      v15 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a2);
      v16 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v15);
      MIL::IRTensorBufferValueType::GetDataType(v16);
      Strides = MIL::IRTensorBufferValueType::GetStrides(v16);
      v71 = 0;
      v19 = *(const void **)Strides;
      v18 = *(_QWORD *)(Strides + 8);
      v20 = v18 - *(_QWORD *)Strides;
      if (v18 != *(_QWORD *)Strides)
      {
        if (v20 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v21 = operator new(v18 - *(_QWORD *)Strides);
        v71 = v21;
        memcpy(v21, v19, v20);
        v22 = 0;
        do
        {
          if (!MIL::IRProperty::TryAsUnknown(*((MIL::IRProperty **)v21 + v22)))
          {
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "tensor_buffer has known strides while the model has FlexibleShapeInfo. Strides must be unknown on all dimensions.");
            exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
            __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
          }
          ++v22;
        }
        while (v22 < v20 >> 3);
      }
      InterleaveFactors = MIL::IRTensorBufferValueType::GetInterleaveFactors(v16);
      v70 = 0;
      v41 = *(const void **)InterleaveFactors;
      v40 = *(_QWORD *)(InterleaveFactors + 8);
      v42 = v40 - *(_QWORD *)InterleaveFactors;
      if (v40 != *(_QWORD *)InterleaveFactors)
      {
        if ((v42 & 0x8000000000000000) != 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v70 = operator new(v40 - *(_QWORD *)InterleaveFactors);
        memcpy(v70, v41, v42);
      }
      Attributes = MIL::IRTensorBufferValueType::GetAttributes(v16);
      std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v73, Attributes);
      MIL::Util::GetRowAlignedStrides();
      v44 = v68;
      v67 = 0;
      v45 = (char *)v69 - (char *)v68;
      if (v69 != v68)
      {
        if ((v45 & 0x8000000000000000) != 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v67 = operator new((char *)v69 - (char *)v68);
        bzero(v67, v45);
        v46 = 0;
        do
        {
          v47 = (MIL::IRConstantProperty *)MIL::IRProperty::TryAsConstant(v44[v46]);
          if (v47)
          {
            v48 = *a3;
            Int64ScalarValue = (MIL::MILContext *)MIL::IRConstantProperty::GetInt64ScalarValue(v47);
            Int64Scalar = MIL::IRConstantProperty::MakeInt64Scalar(v48, Int64ScalarValue);
          }
          else
          {
            if (!MIL::IRProperty::TryAsUnknown(v68[v46]))
            {
              v65 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v65, "Unsupported IRProperty for strides.");
              v65->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
              __cxa_throw(v65, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
            }
            Int64Scalar = MIL::IRUnknownProperty::Make(*a3, 0);
          }
          *((_QWORD *)v67 + v46++) = Int64Scalar;
          v44 = v68;
        }
        while (v46 < v69 - v68);
      }
      v8 = MIL::IRTensorBufferValueType::MakeWithShape();
      if (v67)
        operator delete(v67);
      if (v68)
        operator delete(v68);
      v51 = (void **)__p;
      if (__p)
      {
        do
        {
          while (1)
          {
            v52 = (void **)*v51;
            v53 = (std::__shared_weak_count *)v51[6];
            if (v53)
            {
              v54 = (unint64_t *)&v53->__shared_owners_;
              do
                v55 = __ldaxr(v54);
              while (__stlxr(v55 - 1, v54));
              if (!v55)
              {
                ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                std::__shared_weak_count::__release_weak(v53);
              }
            }
            if (*((char *)v51 + 39) < 0)
              break;
            operator delete(v51);
            v51 = v52;
            if (!v52)
              goto LABEL_64;
          }
          operator delete(v51[2]);
          operator delete(v51);
          v51 = v52;
        }
        while (v52);
      }
LABEL_64:
      v56 = v73[0];
      v73[0] = 0;
      if (v56)
        operator delete(v56);
      if (v70)
        operator delete(v70);
      v57 = v71;
      if (v71)
        goto LABEL_82;
      return v8;
    }
    if (E5Common::Utils::IsPixelBuffer(a2, v14))
    {
      v24 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a2);
      v25 = (MIL::IRPixelBufferValueType *)MIL::IRMemoryLayoutValueType::AsPixelBufferType(v24);
      MIL::IRPixelBufferValueType::GetPixelFormatType(v25);
      BytesPerRow = MIL::IRPixelBufferValueType::TryGetBytesPerRow(v25);
      v27 = MIL::IRPixelBufferValueType::GetAttributes(v25);
      std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v73, v27);
      if (BytesPerRow)
      {
        v72 = 0;
        v28 = *(const void **)BytesPerRow;
        v29 = *(_QWORD *)(BytesPerRow + 8) - *(_QWORD *)BytesPerRow;
        if (v29)
        {
          if ((v29 & 0x8000000000000000) != 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v72 = operator new(v29);
          memcpy(v72, v28, v29);
        }
        v8 = MIL::IRPixelBufferValueType::MakeWithShape();
        if (v72)
          operator delete(v72);
      }
      else
      {
        MIL::IRPixelBufferValueType::GetPixelFormatType(v25);
        v8 = MIL::IRPixelBufferValueType::MakeWithShape();
      }
      v58 = (void **)__p;
      if (__p)
      {
        do
        {
          while (1)
          {
            v59 = (void **)*v58;
            v60 = (std::__shared_weak_count *)v58[6];
            if (v60)
            {
              v61 = (unint64_t *)&v60->__shared_owners_;
              do
                v62 = __ldaxr(v61);
              while (__stlxr(v62 - 1, v61));
              if (!v62)
              {
                ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                std::__shared_weak_count::__release_weak(v60);
              }
            }
            if (*((char *)v58 + 39) < 0)
              break;
            operator delete(v58);
            v58 = v59;
            if (!v59)
              goto LABEL_81;
          }
          operator delete(v58[2]);
          operator delete(v58);
          v58 = v59;
        }
        while (v59);
      }
    }
    else
    {
      if (!E5Common::Utils::IsState(a2, v23))
      {
        v66 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::invalid_argument::invalid_argument[abi:ne180100](v66, "BuildIRValueTypeWithNewShape: Unsupported IRValueType.");
        __cxa_throw(v66, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
      }
      v30 = (MIL::IRStateValueType *)MIL::IRValueType::AsStateType(a2);
      WrappedType = (MIL::IRValueType *)MIL::IRStateValueType::GetWrappedType(v30);
      v32 = MIL::IRValueType::AsTensorType(WrappedType);
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 88))(v32);
      v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 80))(v32);
      std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v73, v33);
      MIL::IRTensorValueType::MakeWithShape();
      v8 = MIL::IRStateValueType::Make();
      v34 = (void **)__p;
      if (__p)
      {
        do
        {
          while (1)
          {
            v35 = (void **)*v34;
            v36 = (std::__shared_weak_count *)v34[6];
            if (v36)
            {
              v37 = (unint64_t *)&v36->__shared_owners_;
              do
                v38 = __ldaxr(v37);
              while (__stlxr(v38 - 1, v37));
              if (!v38)
              {
                ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                std::__shared_weak_count::__release_weak(v36);
              }
            }
            if (*((char *)v34 + 39) < 0)
              break;
            operator delete(v34);
            v34 = v35;
            if (!v35)
              goto LABEL_81;
          }
          operator delete(v34[2]);
          operator delete(v34);
          v34 = v35;
        }
        while (v35);
      }
    }
  }
LABEL_81:
  v57 = v73[0];
  v73[0] = 0;
  if (v57)
LABEL_82:
    operator delete(v57);
  return v8;
}

void sub_1910FBF58(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1910FBF6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22)
{
  if (__p)
  {
    operator delete(__p);
    std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a22);
    _Unwind_Resume(a1);
  }
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_1910FBFF0()
{
  void *v0;

  __cxa_free_exception(v0);
  JUMPOUT(0x1910FC024);
}

void sub_1910FC000()
{
  JUMPOUT(0x1910FC060);
}

void sub_1910FC008()
{
  void *v0;

  __cxa_free_exception(v0);
  JUMPOUT(0x1910FC060);
}

void sub_1910FC018()
{
  JUMPOUT(0x1910FC060);
}

void sub_1910FC020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  void *v22;

  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a22);
  if (a16)
    operator delete(a16);
  if (v22)
    operator delete(v22);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void **v21;
  unsigned __int8 *j;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void **v26;
  unsigned __int8 *i;
  _QWORD *v28;
  std::string *v29;
  __int128 *v30;
  __int128 v31;
  float v32;
  float v33;
  _QWORD *v34;
  _QWORD *v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  size_t prime;
  int8x8_t v40;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD v47[2];
  char v48;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v47, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v23 = v15[1];
            if (v23 == v11)
            {
              v24 = *((unsigned __int8 *)v15 + 39);
              if ((v24 & 0x80u) == 0)
                v25 = *((unsigned __int8 *)v15 + 39);
              else
                v25 = v15[3];
              if (v25 == v17)
              {
                v26 = (const void **)(v15 + 2);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  for (i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    v26 = (const void **)((char *)v26 + 1);
                    if (!--v24)
                      return v15;
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              v21 = (const void **)(v15 + 2);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                for (j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  v21 = (const void **)((char *)v21 + 1);
                  if (!--v19)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v28 = operator new(0x40uLL);
  v47[0] = v28;
  v47[1] = a1 + 16;
  v48 = 0;
  *v28 = 0;
  v28[1] = v11;
  v29 = (std::string *)(v28 + 2);
  v30 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v29, *(const std::string::value_type **)v30, *((_QWORD *)v30 + 1));
  }
  else
  {
    v31 = *v30;
    v28[4] = *((_QWORD *)v30 + 2);
    *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v31;
  }
  v28[5] = 0;
  v28[6] = 0;
  v28[7] = 0;
  v48 = 1;
  v32 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v33 = *(float *)(a1 + 32);
  if (!v12 || (float)(v33 * (float)v12) < v32)
  {
    v36 = 1;
    if (v12 >= 3)
      v36 = (v12 & (v12 - 1)) != 0;
    v37 = v36 | (2 * v12);
    v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38)
      prime = v38;
    else
      prime = v37;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v40)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v40)
    {
      v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v40 < 3uLL || (v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        v41 = std::__next_prime(v41);
      }
      else
      {
        v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2)
          v41 = v43;
      }
      if (prime <= v41)
        prime = v41;
      if (prime < *(_QWORD *)&v40)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v44 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v44 & v11;
      v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v44 & v11));
      v35 = (_QWORD *)v47[0];
      if (v34)
        goto LABEL_57;
    }
LABEL_81:
    *v35 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v47[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v47[0])
    {
      v45 = *(_QWORD *)(*(_QWORD *)v47[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v45 >= v12)
          v45 %= v12;
      }
      else
      {
        v45 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_92;
  }
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v35 = (_QWORD *)v47[0];
  if (!v34)
    goto LABEL_81;
LABEL_57:
  *v35 = *v34;
  *v34 = v47[0];
LABEL_92:
  v15 = (uint64_t *)v47[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_1910FC4C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1910FC4D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::pair<int,int>>::__assign_with_size[abi:ne180100]<std::pair<int,int>*,std::pair<int,int>*>(uint64_t a1, char *a2, char *a3, size_t __sz)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  int64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  int64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  BOOL v43;
  char v44;
  unint64_t v46;
  uint64_t v47;
  __int128 *v48;
  _OWORD *v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  char *v55;
  unint64_t v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  BOOL v60;
  BOOL v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  __int128 *v65;
  _OWORD *v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD **)a1;
  result = v9;
  if (__sz <= (v8 - (uint64_t)v9) >> 3)
  {
    v18 = *(_QWORD **)(a1 + 8);
    v17 = (_QWORD *)(a1 + 8);
    v14 = v18;
    v19 = (char *)v18 - (char *)v9;
    v20 = v18 - v9;
    if (v20 < __sz)
    {
      v21 = &a2[8 * v20];
      if (v14 == v9)
        goto LABEL_18;
      if ((unint64_t)(v19 - 8) >= 0x78)
      {
        v38 = (char *)v9 + (v19 & 0xFFFFFFFFFFFFFFF8);
        v39 = (unint64_t)(v38 - 4);
        v40 = (unint64_t)&a2[v19 & 0xFFFFFFFFFFFFFFF8];
        v41 = v40 - 4;
        v42 = a2 + 4;
        v43 = (unint64_t)v9 + 4 >= v40 || v42 >= v38;
        v44 = !v43;
        v22 = a2;
        if ((v39 <= (unint64_t)a2 || (unint64_t)v9 >= v41) && (v44 & 1) == 0)
        {
          v46 = ((unint64_t)(v19 - 8) >> 3) + 1;
          v47 = v46 & 0x3FFFFFFFFFFFFFF8;
          result = &v9[v47];
          v22 = &a2[v47 * 8];
          v48 = (__int128 *)(a2 + 32);
          v49 = v9 + 4;
          v50 = v46 & 0x3FFFFFFFFFFFFFF8;
          do
          {
            v52 = *(v48 - 2);
            v51 = *(v48 - 1);
            v54 = *v48;
            v53 = v48[1];
            v48 += 4;
            *(v49 - 2) = v52;
            *(v49 - 1) = v51;
            *v49 = v54;
            v49[1] = v53;
            v49 += 4;
            v50 -= 8;
          }
          while (v50);
          if (v46 == (v46 & 0x3FFFFFFFFFFFFFF8))
          {
LABEL_18:
            if (v21 == a3)
            {
              v16 = 0;
              goto LABEL_68;
            }
            v24 = &a2[v19];
            v25 = a3 - &a2[v19] - 8;
            if (v25 < 0x38)
            {
              v27 = (char *)v14;
            }
            else
            {
              v26 = (char *)v14 - v24;
              v27 = (char *)v14;
              if (v26 >= 0x20)
              {
                v28 = (v25 >> 3) + 1;
                v29 = v28 & 0x3FFFFFFFFFFFFFFCLL;
                v21 += v29 * 8;
                v27 = (char *)&v14[v29];
                v30 = v14 + 2;
                v31 = &a2[8 * v20 + 16];
                v32 = v28 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v33 = *(_OWORD *)v31;
                  *(v30 - 1) = *((_OWORD *)v31 - 1);
                  *v30 = v33;
                  v30 += 2;
                  v31 += 32;
                  v32 -= 4;
                }
                while (v32);
                if (v28 == (v28 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_67;
              }
            }
            do
            {
              v72 = *(_QWORD *)v21;
              v21 += 8;
              *(_QWORD *)v27 = v72;
              v27 += 8;
            }
            while (v21 != a3);
LABEL_67:
            v16 = v27 - (char *)v14;
            goto LABEL_68;
          }
        }
      }
      else
      {
        v22 = a2;
      }
      do
      {
        v23 = *(_QWORD *)v22;
        v22 += 8;
        *result++ = v23;
      }
      while (v22 != v21);
      goto LABEL_18;
    }
    if (a2 == a3)
    {
      v35 = (char *)v9;
    }
    else
    {
      v34 = a3 - a2 - 8;
      if (v34 < 0x78)
        goto LABEL_27;
      v55 = (char *)v9 + (v34 & 0xFFFFFFFFFFFFFFF8);
      v56 = (unint64_t)(v55 + 4);
      v57 = &a2[v34 & 0xFFFFFFFFFFFFFFF8];
      v58 = (unint64_t)(v57 + 4);
      v59 = (unint64_t)(v55 + 8);
      v60 = (_QWORD *)((char *)v9 + 4) >= (_QWORD *)v57 + 1 || (unint64_t)(a2 + 4) >= v59;
      v61 = !v60;
      v62 = v56 <= (unint64_t)a2 || (unint64_t)v9 >= v58;
      if (!v62 || v61)
      {
LABEL_27:
        v35 = (char *)v9;
        v36 = a2;
      }
      else
      {
        v63 = (v34 >> 3) + 1;
        v64 = v63 & 0x3FFFFFFFFFFFFFF8;
        v35 = (char *)&v9[v64];
        v36 = &a2[v64 * 8];
        v65 = (__int128 *)(a2 + 32);
        v66 = v9 + 4;
        v67 = v63 & 0x3FFFFFFFFFFFFFF8;
        do
        {
          v69 = *(v65 - 2);
          v68 = *(v65 - 1);
          v71 = *v65;
          v70 = v65[1];
          v65 += 4;
          *(v66 - 2) = v69;
          *(v66 - 1) = v68;
          *v66 = v71;
          v66[1] = v70;
          v66 += 4;
          v67 -= 8;
        }
        while (v67);
        if (v63 == (v63 & 0x3FFFFFFFFFFFFFF8))
          goto LABEL_32;
      }
      do
      {
        v37 = *(_QWORD *)v36;
        v36 += 8;
        *(_QWORD *)v35 = v37;
        v35 += 8;
      }
      while (v36 != a3);
    }
LABEL_32:
    v16 = v35 - (char *)v9;
    v14 = v9;
    goto LABEL_68;
  }
  if (v9)
  {
    *(_QWORD *)(a1 + 8) = v9;
    operator delete(v9);
    v8 = 0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  if (__sz >> 61)
    goto LABEL_69;
  v11 = v8 >> 2;
  if (v8 >> 2 <= __sz)
    v11 = __sz;
  v43 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
  v12 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v43)
    v12 = v11;
  if (v12 >> 61)
LABEL_69:
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v13 = v12;
  result = operator new(8 * v12);
  v14 = result;
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 16) = &result[v13];
  v15 = (char *)result;
  if (a2 != a3)
  {
    result = memcpy(result, a2, ((a3 - a2 - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
    v15 = (char *)v14 + ((a3 - a2 - 8) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  v16 = v15 - (char *)v14;
  v17 = (_QWORD *)(a1 + 8);
LABEL_68:
  *v17 = (char *)v14 + v16;
  return result;
}

uint64_t `anonymous namespace'::PropagateShapesAndUpdateTensorToShape(std::shared_ptr<MIL::MILContext>,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>&,MIL::IRProgram const&,std::string const&)::$_0::operator()(_QWORD *a1, MIL::IRValueType *a2)
{
  const MIL::IRValueType *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  const void *v8;
  int64_t v9;
  const MIL::IRValueType *v10;
  MIL::IRMemoryLayoutValueType *v11;
  MIL::IRTensorBufferValueType *v12;
  MIL::IRMemoryLayoutValueType *v13;
  MIL::IRPixelBufferValueType *v14;
  char *v15;
  char *v16;
  std::logic_error *exception;

  if (E5Common::Utils::IsTensor((uint64_t)a2))
  {
    v5 = MIL::IRValueType::AsTensorType(a2);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5);
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    v8 = *(const void **)result;
    v7 = *(_QWORD *)(result + 8);
    v9 = v7 - *(_QWORD *)result;
    if (v7 == *(_QWORD *)result)
      return result;
    if (v9 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    goto LABEL_12;
  }
  if (E5Common::Utils::IsTensorBuffer(a2, v4))
  {
    v11 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a2);
    v12 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v11);
    result = MIL::IRTensorBufferValueType::GetShape(v12);
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    v8 = *(const void **)result;
    v7 = *(_QWORD *)(result + 8);
    v9 = v7 - *(_QWORD *)result;
    if (v7 == *(_QWORD *)result)
      return result;
    if (v9 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    goto LABEL_12;
  }
  if (!E5Common::Utils::IsPixelBuffer(a2, v10))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "PropagateShapesAndUpdateTensorNameToShapeMap: Unsupported type for getShape.");
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v13 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a2);
  v14 = (MIL::IRPixelBufferValueType *)MIL::IRMemoryLayoutValueType::AsPixelBufferType(v13);
  result = MIL::IRPixelBufferValueType::GetShape(v14);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v8 = *(const void **)result;
  v7 = *(_QWORD *)(result + 8);
  v9 = v7 - *(_QWORD *)result;
  if (v7 != *(_QWORD *)result)
  {
    if (v9 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
LABEL_12:
    v15 = (char *)operator new(v7 - *(_QWORD *)result);
    *a1 = v15;
    a1[1] = v15;
    v16 = &v15[8 * (v9 >> 3)];
    a1[2] = v16;
    result = (uint64_t)memcpy(v15, v8, v9);
    a1[1] = v16;
  }
  return result;
}

void sub_1910FC97C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1910FC990(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__deallocate_node(int a1, char *__p)
{
  char *v2;
  char *v3;
  void *v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = *(char **)v2;
      v4 = (void *)*((_QWORD *)v2 + 5);
      if (v4)
      {
        *((_QWORD *)v2 + 6) = v4;
        operator delete(v4);
      }
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *> *>>(_QWORD *a1, char *a2, char *a3)
{
  uint64_t v6;
  uint64_t i;
  char *v8;
  char *v9;
  char *v10;
  void *v11;

  v6 = a1[1];
  if (!v6)
    goto LABEL_11;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (char *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      std::string::operator=((std::string *)(v8 + 16), (const std::string *)(a2 + 16));
      if (v8 != a2)
        std::vector<MIL::IRDimension const*>::__assign_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v8 + 40, *((char **)a2 + 5), *((_QWORD *)a2 + 6), (uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3);
      v9 = *(char **)v8;
      std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_multi(a1, (uint64_t)v8);
      a2 = *(char **)a2;
      v8 = v9;
      if (!v9)
        goto LABEL_11;
    }
    do
    {
      v10 = *(char **)v8;
      v11 = (void *)*((_QWORD *)v8 + 5);
      if (v11)
      {
        *((_QWORD *)v8 + 6) = v11;
        operator delete(v11);
      }
      if (v8[39] < 0)
        operator delete(*((void **)v8 + 2));
      operator delete(v8);
      v8 = v10;
    }
    while (v10);
  }
  else
  {
LABEL_11:
    while (a2 != a3)
    {
      std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_multi<std::pair<std::string const,std::vector<MIL::IRDimension const*>> const&>(a1, (__int128 *)a2 + 1);
      a2 = *(char **)a2;
    }
  }
}

void sub_1910FCB10(void *a1)
{
  int v1;
  char *v2;

  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_1910FCB2C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_multi(_QWORD *a1, uint64_t a2)
{
  _BYTE *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *inserted;
  int8x8_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  char v16;

  v4 = (_BYTE *)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 39);
  v6 = *(_QWORD *)(a2 + 24);
  if ((v5 & 0x80u) == 0)
    v7 = (uint64_t *)(a2 + 16);
  else
    v7 = *(uint64_t **)(a2 + 16);
  if ((v5 & 0x80u) == 0)
    v8 = v5;
  else
    v8 = v6;
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v16, v7, v8);
  *(_QWORD *)(a2 + 8) = v9;
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__node_insert_multi_prepare((uint64_t)a1, v9, v4);
  v11 = (int8x8_t)a1[1];
  v12 = *(_QWORD *)(a2 + 8);
  v13 = (uint8x8_t)vcnt_s8(v11);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    if (v12 >= *(_QWORD *)&v11)
      v12 %= *(_QWORD *)&v11;
  }
  else
  {
    v12 &= *(_QWORD *)&v11 - 1;
  }
  if (!inserted)
  {
    *(_QWORD *)a2 = a1[2];
    a1[2] = a2;
    *(_QWORD *)(*a1 + 8 * v12) = a1 + 2;
    if (!*(_QWORD *)a2)
      goto LABEL_25;
    v14 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(_QWORD *)&v11)
        v14 %= *(_QWORD *)&v11;
    }
    else
    {
      v14 &= *(_QWORD *)&v11 - 1;
    }
LABEL_24:
    *(_QWORD *)(*a1 + 8 * v14) = a2;
    goto LABEL_25;
  }
  *(_QWORD *)a2 = *inserted;
  *inserted = a2;
  if (*(_QWORD *)a2)
  {
    v14 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(_QWORD *)&v11)
        v14 %= *(_QWORD *)&v11;
    }
    else
    {
      v14 &= *(_QWORD *)&v11 - 1;
    }
    if (v14 != v12)
      goto LABEL_24;
  }
LABEL_25:
  ++a1[3];
  return a2;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_multi<std::pair<std::string const,std::vector<MIL::IRDimension const*>> const&>(_QWORD *a1, __int128 *a2)
{
  char *v4;
  std::string *v5;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  char v10;

  v4 = (char *)operator new(0x40uLL);
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = std::pair<std::string const,std::vector<MIL::IRDimension const*>>::pair[abi:ne180100]((std::string *)(v4 + 16), a2);
  v6 = v4[39];
  if (v6 >= 0)
    v7 = (uint64_t *)v5;
  else
    v7 = (uint64_t *)*((_QWORD *)v4 + 2);
  if (v6 >= 0)
    v8 = v4[39];
  else
    v8 = *((_QWORD *)v4 + 3);
  *((_QWORD *)v4 + 1) = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v10, v7, v8);
  return std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_multi(a1, (uint64_t)v4);
}

void sub_1910FCD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_1910FCD40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t **a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t **v16;
  int v17;
  size_t v18;
  const void *v19;
  _QWORD *v20;
  const void *v21;
  const void *v22;
  int v23;
  size_t v24;
  const void *v25;
  size_t v26;
  int v27;
  _BOOL4 v28;
  uint64_t *v29;
  uint64_t *v30;
  _QWORD *v31;
  BOOL v32;
  uint64_t *v33;
  uint64_t **v34;
  uint64_t *i;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;

  v5 = a1;
  if (a1[2])
  {
    v6 = *a1;
    v8 = a1 + 1;
    v7 = a1[1];
    *a1 = (uint64_t *)(a1 + 1);
    v7[2] = 0;
    a1[1] = 0;
    a1[2] = 0;
    if (v6[1])
      v9 = (uint64_t *)v6[1];
    else
      v9 = v6;
    v39 = (uint64_t)a1;
    v41 = v9;
    if (!v9)
      goto LABEL_65;
    v10 = (uint64_t *)v9[2];
    if (v10)
    {
      v11 = (uint64_t *)*v10;
      if ((uint64_t *)*v10 == v9)
      {
        *v10 = 0;
        while (1)
        {
          v38 = (uint64_t *)v10[1];
          if (!v38)
            break;
          do
          {
            v10 = v38;
            v38 = (uint64_t *)*v38;
          }
          while (v38);
        }
      }
      else
      {
        for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
        {
          do
          {
            v10 = v11;
            v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
      }
    }
    v40 = v10;
    if (a2 == a3)
    {
      v34 = a1;
      std::__tree<std::string>::destroy((uint64_t)a1, (char *)v9);
      if (!v10)
        goto LABEL_66;
      goto LABEL_62;
    }
    v12 = a2;
    while (1)
    {
      std::string::operator=((std::string *)(v9 + 4), (const std::string *)(v12 + 4));
      v13 = v41;
      v14 = *v8;
      v15 = v5 + 1;
      v16 = v5 + 1;
      if (!*v8)
        break;
      v17 = *((char *)v41 + 55);
      if (v17 >= 0)
        v18 = *((unsigned __int8 *)v41 + 55);
      else
        v18 = v41[5];
      if (v17 >= 0)
        v19 = v41 + 4;
      else
        v19 = (const void *)v41[4];
      do
      {
        while (1)
        {
          v15 = (uint64_t **)v14;
          v22 = (const void *)v14[4];
          v20 = v14 + 4;
          v21 = v22;
          v23 = *((char *)v20 + 23);
          if (v23 >= 0)
            v24 = *((unsigned __int8 *)v20 + 23);
          else
            v24 = v20[1];
          if (v23 >= 0)
            v25 = v20;
          else
            v25 = v21;
          if (v24 >= v18)
            v26 = v18;
          else
            v26 = v24;
          v27 = memcmp(v19, v25, v26);
          v28 = v18 < v24;
          if (v27)
            v28 = v27 < 0;
          if (!v28)
            break;
          v14 = *v15;
          v16 = v15;
          if (!*v15)
            goto LABEL_34;
        }
        v14 = v15[1];
      }
      while (v14);
      v16 = v15 + 1;
      *v41 = 0;
      v41[1] = 0;
      v41[2] = (uint64_t)v15;
      v15[1] = v41;
      v29 = (uint64_t *)**v5;
      if (v29)
        goto LABEL_35;
LABEL_36:
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v5[1], v13);
      v5[2] = (uint64_t *)((char *)v5[2] + 1);
      v9 = v40;
      v41 = v40;
      if (v40)
      {
        v10 = (uint64_t *)v40[2];
        if (v10)
        {
          v30 = (uint64_t *)*v10;
          if ((uint64_t *)*v10 == v40)
          {
            *v10 = 0;
            while (1)
            {
              v33 = (uint64_t *)v10[1];
              if (!v33)
                break;
              do
              {
                v10 = v33;
                v33 = (uint64_t *)*v33;
              }
              while (v33);
            }
          }
          else
          {
            for (v10[1] = 0; v30; v30 = (uint64_t *)v10[1])
            {
              do
              {
                v10 = v30;
                v30 = (uint64_t *)*v30;
              }
              while (v30);
            }
          }
        }
        v40 = v10;
        v31 = (_QWORD *)v12[1];
        if (v31)
        {
          do
          {
LABEL_45:
            a2 = v31;
            v31 = (_QWORD *)*v31;
          }
          while (v31);
          goto LABEL_49;
        }
      }
      else
      {
        v10 = 0;
        v31 = (_QWORD *)v12[1];
        if (v31)
          goto LABEL_45;
      }
      do
      {
        a2 = (_QWORD *)v12[2];
        v32 = *a2 == (_QWORD)v12;
        v12 = a2;
      }
      while (!v32);
LABEL_49:
      if (v9)
      {
        v12 = a2;
        if (a2 != a3)
          continue;
      }
      v34 = (uint64_t **)v39;
      std::__tree<std::string>::destroy(v39, (char *)v9);
      if (!v10)
        goto LABEL_66;
LABEL_62:
      for (i = (uint64_t *)v10[2]; i; i = (uint64_t *)i[2])
        v10 = i;
      a1 = v34;
      v9 = v10;
LABEL_65:
      std::__tree<std::string>::destroy((uint64_t)a1, (char *)v9);
      goto LABEL_66;
    }
LABEL_34:
    *v41 = 0;
    v41[1] = 0;
    v41[2] = (uint64_t)v15;
    *v16 = v41;
    v29 = (uint64_t *)**v5;
    if (!v29)
      goto LABEL_36;
LABEL_35:
    *v5 = v29;
    v13 = *v16;
    goto LABEL_36;
  }
LABEL_66:
  if (a2 != a3)
  {
    do
    {
      std::__tree<std::string>::__emplace_multi<std::string const&>(v5, (uint64_t)(a2 + 4));
      v36 = (_QWORD *)a2[1];
      if (v36)
      {
        do
        {
          v37 = v36;
          v36 = (_QWORD *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          v37 = (_QWORD *)a2[2];
          v32 = *v37 == (_QWORD)a2;
          a2 = v37;
        }
        while (!v32);
      }
      a2 = v37;
    }
    while (v37 != a3);
  }
}

void sub_1910FD080(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  std::__tree<std::string>::destroy(*(_QWORD *)a1, *(char **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::string>::destroy(*(_QWORD *)a1, (char *)v2);
  }
  return a1;
}

char *std::__tree<std::string>::__emplace_multi<std::string const&>(uint64_t **a1, uint64_t a2)
{
  char *v4;
  char *v5;
  _OWORD *v6;
  uint64_t *v7;
  uint64_t **v8;
  int v9;
  size_t v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  size_t v15;
  const void *v16;
  size_t v17;
  int v18;
  _BOOL4 v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t *v22;

  v4 = (char *)operator new(0x38uLL);
  v5 = v4;
  v6 = v4 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v4 + 32), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *v6 = *(_OWORD *)a2;
    *((_QWORD *)v4 + 6) = *(_QWORD *)(a2 + 16);
  }
  v8 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    v9 = v5[55];
    if (v9 >= 0)
      v10 = v5[55];
    else
      v10 = *((_QWORD *)v5 + 5);
    if (v9 < 0)
      v6 = (_OWORD *)*((_QWORD *)v5 + 4);
    do
    {
      while (1)
      {
        v8 = (uint64_t **)v7;
        v13 = (const void *)v7[4];
        v11 = v7 + 4;
        v12 = v13;
        v14 = *((char *)v11 + 23);
        if (v14 >= 0)
          v15 = *((unsigned __int8 *)v11 + 23);
        else
          v15 = v11[1];
        if (v14 >= 0)
          v16 = v11;
        else
          v16 = v12;
        if (v15 >= v10)
          v17 = v10;
        else
          v17 = v15;
        v18 = memcmp(v6, v16, v17);
        v19 = v10 < v15;
        if (v18)
          v19 = v18 < 0;
        if (!v19)
          break;
        v7 = *v8;
        v20 = v8;
        if (!*v8)
          goto LABEL_28;
      }
      v7 = v8[1];
    }
    while (v7);
    v20 = v8 + 1;
  }
  else
  {
    v20 = a1 + 1;
  }
LABEL_28:
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = v8;
  *v20 = (uint64_t *)v5;
  v21 = (uint64_t *)**a1;
  v22 = (uint64_t *)v5;
  if (v21)
  {
    *a1 = v21;
    v22 = *v20;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v22);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v5;
}

void sub_1910FD224(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_10unique_ptrIN3MIL9IRProgramENS_14default_deleteIS5_EEEENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSD_ISF_EEEESH_EEC1B8ne180100IJLm0ELm1ELm2EEJS8_SH_SH_EJEJEJS8_RSH_SK_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSM_IJDpT2_EEEDpOT3_(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6;

  v6 = *a2;
  *a2 = 0;
  *a1 = v6;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1 + 1, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1 + 4, *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3));
  return a1;
}

void sub_1910FD2BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void ***v2;
  uint64_t v4;

  if (*v2)
    _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_10unique_ptrIN3MIL9IRProgramENS_14default_deleteIS5_EEEENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSD_ISF_EEEESH_EEC1B8ne180100IJLm0ELm1ELm2EEJS8_SH_SH_EJEJEJS8_RSH_SK_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSM_IJDpT2_EEEDpOT3__cold_1(v1, *v2, (void **)(v1 + 8));
  v4 = *(_QWORD *)v1;
  *(_QWORD *)v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::E5BackendFlexibleShapeTransformer::AddDefaultFunction(uint8_t *buf, uint64_t **a2, uint64_t ***a3, os_log_t log)
{
  if (*((char *)a2 + 23) < 0)
    a2 = (uint64_t **)*a2;
  *(_DWORD *)buf = 136315138;
  *a3 = a2;
  _os_log_error_impl(&dword_190DAF000, log, OS_LOG_TYPE_ERROR, "Default Shape is not found in the Enumerated Shapes for entry point: %s", buf, 0xCu);
}

void _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_10unique_ptrIN3MIL9IRProgramENS_14default_deleteIS5_EEEENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSD_ISF_EEEESH_EEC1B8ne180100IJLm0ELm1ELm2EEJS8_SH_SH_EJEJEJS8_RSH_SK_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSM_IJDpT2_EEEDpOT3__cold_1(uint64_t a1, void **a2, void **a3)
{
  void **v5;
  void *v6;

  v5 = *(void ***)(a1 + 16);
  v6 = a2;
  if (v5 != a2)
  {
    do
    {
      if (*((char *)v5 - 1) < 0)
        operator delete(*(v5 - 3));
      v5 -= 3;
    }
    while (v5 != a2);
    v6 = *a3;
  }
  *(_QWORD *)(a1 + 16) = a2;
  operator delete(v6);
}

double EspressoLight::espresso_aot_compiler::identify_segments(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  const void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  void **v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  double result;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  int v64;
  __int128 v65;
  __int128 v66;
  int v67;
  __int128 v68;
  uint64_t v69;
  const void *v70;
  std::__shared_weak_count *v71;
  __int128 v72;
  unint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;

  v72 = 0uLL;
  v73 = 0;
  v4 = *a2;
  v6 = *(_QWORD *)(*a2 + 32);
  v5 = *(_QWORD *)(*a2 + 40);
  if (v5 != v6)
  {
    v7 = 0;
    v8 = 0;
    v5 = *(_QWORD *)(*a2 + 32);
    while (1)
    {
      v11 = *(_QWORD *)(v5 + 16 * v7);
      v12 = *(const void **)(v11 + 64);
      v13 = *(std::__shared_weak_count **)(v11 + 72);
      v70 = v12;
      v71 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      if (!v12
      {
        goto LABEL_35;
      }
      if (v7 > v8)
        break;
LABEL_34:
      v8 = v7 + 1;
LABEL_35:
      if (v13)
      {
        v35 = (unint64_t *)&v13->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      ++v7;
      v4 = *a2;
      v5 = *(_QWORD *)(*a2 + 32);
      v9 = *(_QWORD *)(*a2 + 40);
      v10 = (v9 - v5) >> 4;
      if (v7 >= v10)
        goto LABEL_41;
    }
    v17 = *a2;
    v16 = (std::__shared_weak_count *)a2[1];
    *(_QWORD *)&v61 = v8;
    *((_QWORD *)&v61 + 1) = v7;
    v62 = 0u;
    v63 = 0u;
    v65 = 0u;
    v66 = 0u;
    v64 = 1065353216;
    v67 = 1065353216;
    v69 = 0;
    v68 = 0uLL;
    v74 = v17;
    v75 = v16;
    if (v16)
    {
      v18 = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    Espresso::net_compiler_segment_based::identify_segment_input_output((uint64_t)a1, (uint64_t)&v74, (unint64_t *)&v61);
    v20 = v75;
    if (!v75)
      goto LABEL_17;
    v21 = (unint64_t *)&v75->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
      v23 = *((_QWORD *)&v72 + 1);
      if (*((_QWORD *)&v72 + 1) < v73)
        goto LABEL_18;
    }
    else
    {
LABEL_17:
      v23 = *((_QWORD *)&v72 + 1);
      if (*((_QWORD *)&v72 + 1) < v73)
      {
LABEL_18:
        *(_OWORD *)v23 = v61;
        v24 = v62;
        *(_QWORD *)&v62 = 0;
        *(_OWORD *)(v23 + 16) = __PAIR128__(*((unint64_t *)&v62 + 1), v24);
        *((_QWORD *)&v62 + 1) = 0;
        v25 = v63;
        *(_QWORD *)(v23 + 32) = v63;
        v26 = *((_QWORD *)&v63 + 1);
        *(_QWORD *)(v23 + 40) = *((_QWORD *)&v63 + 1);
        *(_DWORD *)(v23 + 48) = v64;
        if (v26)
        {
          v27 = *(_QWORD *)(v25 + 8);
          v28 = *(_QWORD *)(v23 + 24);
          if ((v28 & (v28 - 1)) != 0)
          {
            if (v27 >= v28)
              v27 %= v28;
          }
          else
          {
            v27 &= v28 - 1;
          }
          *(_QWORD *)(v24 + 8 * v27) = v23 + 32;
          v63 = 0uLL;
        }
        v30 = v65;
        *(_QWORD *)&v65 = 0;
        *(_OWORD *)(v23 + 56) = __PAIR128__(*((unint64_t *)&v65 + 1), v30);
        *((_QWORD *)&v65 + 1) = 0;
        v31 = v66;
        *(_QWORD *)(v23 + 72) = v66;
        v32 = *((_QWORD *)&v66 + 1);
        *(_QWORD *)(v23 + 80) = *((_QWORD *)&v66 + 1);
        *(_DWORD *)(v23 + 88) = v67;
        if (v32)
        {
          v33 = *(_QWORD *)(v31 + 8);
          v34 = *(_QWORD *)(v23 + 64);
          if ((v34 & (v34 - 1)) != 0)
          {
            if (v33 >= v34)
              v33 %= v34;
          }
          else
          {
            v33 &= v34 - 1;
          }
          *(_QWORD *)(v30 + 8 * v33) = v23 + 72;
          v66 = 0uLL;
        }
        *(_QWORD *)(v23 + 96) = 0;
        *(_QWORD *)(v23 + 104) = 0;
        *(_QWORD *)(v23 + 112) = 0;
        *(_OWORD *)(v23 + 96) = v68;
        *(_QWORD *)(v23 + 112) = v69;
        v68 = 0uLL;
        v69 = 0;
        v29 = v23 + 120;
        goto LABEL_33;
      }
    }
    v29 = std::vector<Espresso::net_compiler_segment_based::segment_t>::__push_back_slow_path<Espresso::net_compiler_segment_based::segment_t>((uint64_t *)&v72, (uint64_t)&v61);
LABEL_33:
    *((_QWORD *)&v72 + 1) = v29;
    Espresso::net_compiler_segment_based::segment_t::~segment_t((Espresso::net_compiler_segment_based::segment_t *)&v61);
    v13 = v71;
    goto LABEL_34;
  }
  v8 = 0;
  v10 = (v5 - v6) >> 4;
  v9 = *(_QWORD *)(*a2 + 40);
LABEL_41:
  if (v8 + 1 <= v10)
  {
    v37 = v9 - v5;
    v38 = (std::__shared_weak_count *)a2[1];
    *(_QWORD *)&v61 = v8;
    *((_QWORD *)&v61 + 1) = v37 >> 4;
    v62 = 0u;
    v63 = 0u;
    v64 = 1065353216;
    v65 = 0u;
    v66 = 0u;
    v67 = 1065353216;
    v69 = 0;
    v68 = 0uLL;
    v74 = v4;
    v75 = v38;
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    Espresso::net_compiler_segment_based::identify_segment_input_output((uint64_t)a1, (uint64_t)&v74, (unint64_t *)&v61);
    v41 = v75;
    if (!v75)
      goto LABEL_49;
    v42 = (unint64_t *)&v75->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
      v44 = *((_QWORD *)&v72 + 1);
      if (*((_QWORD *)&v72 + 1) < v73)
        goto LABEL_50;
    }
    else
    {
LABEL_49:
      v44 = *((_QWORD *)&v72 + 1);
      if (*((_QWORD *)&v72 + 1) < v73)
      {
LABEL_50:
        *(_OWORD *)v44 = v61;
        v45 = v62;
        *(_QWORD *)&v62 = 0;
        *(_OWORD *)(v44 + 16) = __PAIR128__(*((unint64_t *)&v62 + 1), v45);
        v46 = v63;
        *(_QWORD *)(v44 + 32) = v63;
        *((_QWORD *)&v62 + 1) = 0;
        v47 = *((_QWORD *)&v63 + 1);
        *(_QWORD *)(v44 + 40) = *((_QWORD *)&v63 + 1);
        *(_DWORD *)(v44 + 48) = v64;
        if (v47)
        {
          v48 = *(_QWORD *)(v46 + 8);
          v49 = *(_QWORD *)(v44 + 24);
          if ((v49 & (v49 - 1)) != 0)
          {
            if (v48 >= v49)
              v48 %= v49;
          }
          else
          {
            v48 &= v49 - 1;
          }
          *(_QWORD *)(v45 + 8 * v48) = v44 + 32;
          v63 = 0uLL;
        }
        v51 = v65;
        *(_QWORD *)&v65 = 0;
        *(_OWORD *)(v44 + 56) = __PAIR128__(*((unint64_t *)&v65 + 1), v51);
        *((_QWORD *)&v65 + 1) = 0;
        v52 = v66;
        *(_QWORD *)(v44 + 72) = v66;
        v53 = *((_QWORD *)&v66 + 1);
        *(_QWORD *)(v44 + 80) = *((_QWORD *)&v66 + 1);
        *(_DWORD *)(v44 + 88) = v67;
        if (v53)
        {
          v54 = *(_QWORD *)(v52 + 8);
          v55 = *(_QWORD *)(v44 + 64);
          if ((v55 & (v55 - 1)) != 0)
          {
            if (v54 >= v55)
              v54 %= v55;
          }
          else
          {
            v54 &= v55 - 1;
          }
          *(_QWORD *)(v51 + 8 * v54) = v44 + 72;
          v66 = 0uLL;
        }
        *(_QWORD *)(v44 + 96) = 0;
        *(_QWORD *)(v44 + 104) = 0;
        *(_QWORD *)(v44 + 112) = 0;
        *(_OWORD *)(v44 + 96) = v68;
        *(_QWORD *)(v44 + 112) = v69;
        v68 = 0uLL;
        v69 = 0;
        v50 = v44 + 120;
        goto LABEL_65;
      }
    }
    v50 = std::vector<Espresso::net_compiler_segment_based::segment_t>::__push_back_slow_path<Espresso::net_compiler_segment_based::segment_t>((uint64_t *)&v72, (uint64_t)&v61);
LABEL_65:
    *((_QWORD *)&v72 + 1) = v50;
    Espresso::net_compiler_segment_based::segment_t::~segment_t((Espresso::net_compiler_segment_based::segment_t *)&v61);
  }
  v56 = (void **)(a1 + 4);
  v57 = a1[4];
  if (v57)
  {
    v58 = a1[5];
    v59 = (void *)a1[4];
    if (v58 != v57)
    {
      do
        Espresso::net_compiler_segment_based::segment_t::~segment_t((Espresso::net_compiler_segment_based::segment_t *)(v58 - 120));
      while (v58 != v57);
      v59 = *v56;
    }
    a1[5] = v57;
    operator delete(v59);
    *v56 = 0;
    a1[5] = 0;
    a1[6] = 0;
  }
  result = *(double *)&v72;
  *((_OWORD *)a1 + 2) = v72;
  a1[6] = v73;
  return result;
}

void sub_1910FD910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  Espresso::net_compiler_segment_based::segment_t::~segment_t((Espresso::net_compiler_segment_based::segment_t *)va);
  std::vector<Espresso::net_compiler_segment_based::segment_t>::~vector[abi:ne180100]((void **)(v4 - 128));
  _Unwind_Resume(a1);
}

void sub_1910FD93C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  Espresso::net_compiler_segment_based::segment_t::~segment_t((Espresso::net_compiler_segment_based::segment_t *)&a12);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::vector<Espresso::net_compiler_segment_based::segment_t>::~vector[abi:ne180100]((void **)(v27 - 128));
  _Unwind_Resume(a1);
}

void **std::vector<Espresso::net_compiler_segment_based::segment_t>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = v2;
    if (v3 != v2)
    {
      do
        Espresso::net_compiler_segment_based::segment_t::~segment_t((Espresso::net_compiler_segment_based::segment_t *)(v3 - 120));
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

EspressoLight::espresso_aot_plan *EspressoLight::espresso_aot_plan::espresso_aot_plan(EspressoLight::espresso_aot_plan *this, EspressoLight::espresso_context *a2, int a3)
{
  EspressoLight::espresso_plan *v4;
  _OWORD *v5;

  v4 = EspressoLight::espresso_plan::espresso_plan(this, a2, a3);
  *(_QWORD *)v4 = &off_1E2D59480;
  *(_OWORD *)((char *)v4 + 1176) = 0u;
  *(_OWORD *)((char *)v4 + 1192) = 0u;
  *((_QWORD *)v4 + 138) = 0;
  *((_QWORD *)v4 + 140) = 0;
  *((_QWORD *)v4 + 139) = 0;
  *((_BYTE *)v4 + 1128) = 0;
  *(_OWORD *)((char *)v4 + 1132) = 0u;
  *(_OWORD *)((char *)v4 + 1148) = 0u;
  *(_QWORD *)((char *)v4 + 1162) = 0;
  *((_DWORD *)v4 + 302) = 1065353216;
  v5 = (_OWORD *)operator new();
  *v5 = 0u;
  v5[1] = 0u;
  *((_QWORD *)this + 152) = v5;
  *((_QWORD *)this + 153) = 0;
  return this;
}

void sub_1910FDA5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](v2);
  if (*(char *)(v1 + 1167) < 0)
  {
    operator delete(*(void **)(v1 + 1144));
    if ((*(char *)(v1 + 1127) & 0x80000000) == 0)
    {
LABEL_3:
      EspressoLight::espresso_plan::~espresso_plan((EspressoLight::espresso_plan *)v1);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v1 + 1127) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  EspressoLight::espresso_plan::~espresso_plan((EspressoLight::espresso_plan *)v1);
  _Unwind_Resume(a1);
}

void EspressoLight::espresso_aot_plan::~espresso_aot_plan(void **this)
{
  uint64_t v2;
  void *v3;
  void ***v4;
  void **v5;
  void *v6;
  void **v7;
  std::string __p;

  *this = &off_1E2D59480;
  v2 = Espresso::ANECompilerEngine::precompilation_settings_t::shared((Espresso::ANECompilerEngine::precompilation_settings_t *)this);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  Espresso::ANECompilerEngine::precompilation_settings_t::set_ane_arch(v2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v3 = this[153];
  this[153] = 0;
  if (v3)
    (*(void (**)(void *))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void ***)this[152];
  this[152] = 0;
  if (v4)
  {
    EspressoLight::tmp_assets_manager::~tmp_assets_manager(v4);
    MEMORY[0x19401CD90]();
  }
  v5 = (void **)this[149];
  if (v5)
  {
    do
    {
      v7 = (void **)*v5;
      if (*((char *)v5 + 63) < 0)
      {
        operator delete(v5[5]);
        if (*((char *)v5 + 39) < 0)
LABEL_18:
          operator delete(v5[2]);
      }
      else if (*((char *)v5 + 39) < 0)
      {
        goto LABEL_18;
      }
      operator delete(v5);
      v5 = v7;
    }
    while (v7);
  }
  v6 = this[147];
  this[147] = 0;
  if (v6)
    operator delete(v6);
  if (*((char *)this + 1167) < 0)
  {
    operator delete(this[143]);
    if ((*((char *)this + 1127) & 0x80000000) == 0)
      goto LABEL_12;
LABEL_20:
    operator delete(this[138]);
    goto LABEL_12;
  }
  if (*((char *)this + 1127) < 0)
    goto LABEL_20;
LABEL_12:
  EspressoLight::espresso_plan::~espresso_plan((EspressoLight::espresso_plan *)this);
}

{
  EspressoLight::espresso_aot_plan::~espresso_aot_plan(this);
  JUMPOUT(0x19401CD90);
}

void EspressoLight::espresso_aot_plan::set_platform(EspressoLight::espresso_aot_plan *this, int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  std::string __p;
  _OWORD v8[3];
  __int128 v9;

  v2 = this;
  *(_QWORD *)&v9 = this;
  DWORD2(v9) = a2;
  v3 = (_QWORD *)EspressoLight::espresso_aot_plan::platf;
  if (EspressoLight::espresso_aot_plan::platf)
  {
    v4 = v9;
    *(_DWORD *)(EspressoLight::espresso_aot_plan::platf + 8) = DWORD2(v9);
    *v3 = v4;
  }
  else
  {
    this = (EspressoLight::espresso_aot_plan *)operator new();
    *(_OWORD *)this = v9;
    EspressoLight::espresso_aot_plan::platf = (uint64_t)this;
    v2 = v9;
  }
  v8[0] = xmmword_191A8AA50;
  v8[1] = xmmword_191A8AA60;
  v8[2] = xmmword_191A8AA70;
  v5 = (char *)&v9;
  switch(v2)
  {
    case 32784:
      v2 = 4;
      goto LABEL_12;
    case 32785:
      v2 = 5;
      goto LABEL_12;
    case 32786:
      v2 = 2;
      goto LABEL_12;
    case 32787:
    case 32788:
      goto LABEL_13;
    case 32789:
      v2 = 1;
      goto LABEL_12;
    default:
      if (!v2)
        goto LABEL_12;
      if (v2 == 28672)
      {
        v2 = 3;
LABEL_12:
        v5 = (char *)v8 + 8 * v2;
      }
LABEL_13:
      if (v5 - (char *)v8 == 48
        && (v6 = Espresso::ANECompilerEngine::precompilation_settings_t::shared(this),
            Espresso::AOT::GetANENameForE5Platform((uint64_t)&v9, &__p),
            Espresso::ANECompilerEngine::precompilation_settings_t::set_ane_arch(v6, &__p),
            SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0))
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v9);
      }
      else
      {
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v9);
      }
      return;
  }
}

void sub_1910FDD64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v15 - 32));
  _Unwind_Resume(a1);
}

uint64_t EspressoLight::espresso_aot_plan::set_dump_ir_only(uint64_t this, char a2)
{
  *(_BYTE *)(this + 1128) = a2;
  return this;
}

uint64_t EspressoLight::espresso_aot_plan::set_ane_residency_requirement(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1132) = a2;
  return result;
}

uint64_t EspressoLight::espresso_aot_plan::set_compute_units_requirement(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 1136) = a2;
  return result;
}

__n128 EspressoLight::espresso_aot_plan::set_ane_options_plist_path(uint64_t a1, __n128 *a2)
{
  uint64_t v3;
  __n128 result;

  v3 = a1 + 1144;
  if (*(char *)(a1 + 1167) < 0)
    operator delete(*(void **)v3);
  result = *a2;
  *(_QWORD *)(v3 + 16) = a2[1].n128_u64[0];
  *(__n128 *)v3 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  return result;
}

void EspressoLight::espresso_aot_plan::set_build_info(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__move_assign(a1 + 1176, a2);
}

uint64_t EspressoLight::espresso_aot_plan::set_mlc_compiler(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 1224);
  *(_QWORD *)(a1 + 1224) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t EspressoLight::espresso_aot_plan::set_build_for_profiling(uint64_t this, char a2)
{
  *(_BYTE *)(this + 1168) = a2;
  return this;
}

uint64_t EspressoLight::espresso_aot_plan::set_use_classic_aot_old_hw(uint64_t this, char a2)
{
  *(_BYTE *)(this + 1169) = a2;
  return this;
}

uint64_t EspressoLight::espresso_aot_plan::set_aot_options_for_net(uint64_t this, Espresso::net *a2)
{
  *((_BYTE *)a2 + 1408) = *(_BYTE *)(this + 1168);
  *((_BYTE *)a2 + 1409) = *(_QWORD *)(this + 1224) != 0;
  return this;
}

uint64_t EspressoLight::espresso_aot_plan::add_network(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v19;
  std::__shared_weak_count *v20;

  EspressoLight::espresso_plan::get_networks((EspressoLight::espresso_plan *)a1, (uint64_t)&v19);
  v7 = (std::__shared_weak_count *)v19;
  v6 = v20;
  if (v19)
  {
    if (v20 == (std::__shared_weak_count *)v19)
    {
      v12 = v20;
    }
    else
    {
      v8 = v20;
      do
      {
        shared_weak_owners = (std::__shared_weak_count *)v8[-1].__shared_weak_owners_;
        if (shared_weak_owners)
        {
          p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
            std::__shared_weak_count::__release_weak(shared_weak_owners);
          }
        }
        v8 = (std::__shared_weak_count *)((char *)v8 - 16);
      }
      while (v8 != v7);
      v12 = (std::__shared_weak_count *)v19;
    }
    v20 = v7;
    operator delete(v12);
  }
  if (v6 != v7)
    Espresso::throw_exception_selector<Espresso::generic_error>("AOT plan does not support adding multiple networks");
  EspressoLight::espresso_plan::get_context(a1, &v19);
  v13 = v19;
  *(_WORD *)(v19 + 53) = 257;
  *(_BYTE *)(v13 + 55) = 1;
  *(_QWORD *)(v13 + 128) = *(_QWORD *)(a1 + 1136);
  *(_BYTE *)(v13 + 136) = *(_BYTE *)(a1 + 1169);
  v14 = EspressoLight::espresso_plan::add_network(a1, a2, a3);
  v15 = v20;
  if (v20)
  {
    v16 = (unint64_t *)&v20->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return v14;
}

void sub_1910FDFB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void EspressoLight::espresso_aot_plan::prepare(EspressoLight::espresso_aot_plan *this)
{
  Espresso::DTypeConverter *v2;
  Espresso::net *v3;
  _QWORD *v4;
  uint64_t v5;
  Espresso::net *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  Espresso::net *v10;
  _OWORD *v11;
  char *v12;
  char *v13;
  void *v14;
  _QWORD *v15;
  char *v16;
  std::string *v17;
  __int128 *v18;
  __int128 v19;
  char *v20;
  char *v21;
  __int128 *v22;
  __int128 *v23;
  Espresso::net *v24;
  char *v25;
  char *v26;
  int v27;
  size_t v28;
  _QWORD *v29;
  char *v30;
  int v31;
  size_t v32;
  const void *v33;
  size_t v34;
  int v35;
  _BOOL4 v36;
  BOOL v37;
  char **v38;
  int v39;
  size_t v40;
  const void *v41;
  size_t v42;
  int v43;
  _BOOL4 v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  Espresso::net *v49;
  std::__shared_weak_count *v50;
  char **v51;
  __int128 *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  _BYTE *v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  __int128 *v66;
  char **v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char **v71;
  char **v72;
  int v73;
  size_t v74;
  const void *v75;
  char *v76;
  char *v77;
  char *v78;
  int v79;
  size_t v80;
  char *v81;
  size_t v82;
  int v83;
  _BOOL4 v84;
  int v85;
  _BOOL4 v86;
  char *v87;
  std::string *v88;
  __int128 v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  _BYTE *v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  __int128 v103;
  __int128 v104;
  char *v105;
  _BYTE *v106;
  char *v107;
  size_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  char **v114;
  char *v115;
  char *v116;
  size_t v117;
  unint64_t v118;
  char *v119;
  void *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  Espresso::DTypeConverter *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  int v147;
  int *v148;
  int v149;
  int v150;
  Espresso::net *v152;
  unint64_t *v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  int v160;
  uint64_t v161;
  _QWORD *v162;
  const void *v164;
  void *v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  int v173;
  __int128 v174;
  uint64_t *v175;
  uint64_t *v176;
  uint64_t v177;
  std::string::size_type size;
  std::string *v179;
  uint64_t *v180;
  uint64_t v181;
  int v182;
  size_t v183;
  const void *v184;
  size_t v185;
  int v186;
  BOOL v187;
  int v188;
  BOOL v189;
  int v190;
  int v191;
  size_t v192;
  const void *v193;
  size_t v194;
  int v195;
  BOOL v196;
  int v197;
  BOOL v198;
  int v199;
  char **v200;
  int v201;
  size_t v202;
  const void *v203;
  size_t v204;
  int v205;
  BOOL v206;
  int v207;
  BOOL v208;
  int v209;
  int v210;
  char *v211;
  int v212;
  size_t v213;
  const void *v214;
  size_t v215;
  int v216;
  BOOL v217;
  int v218;
  BOOL v219;
  int v220;
  int v221;
  char *v222;
  unint64_t v223;
  std::string *v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  _BYTE *v230;
  int v231;
  uint64_t v232;
  int v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  uint64_t v238;
  char **v239;
  std::string *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  _BYTE *v246;
  int v247;
  uint64_t v248;
  int v249;
  uint64_t *v250;
  uint64_t v251;
  uint64_t v252;
  char *v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  char *v264;
  char **v265;
  std::string::size_type v266;
  std::string::size_type v267;
  char **v268;
  char **v269;
  int v270;
  size_t v271;
  std::string::size_type *v272;
  char *v273;
  char *v274;
  char *v275;
  char *v276;
  int v277;
  size_t v278;
  char *v279;
  size_t v280;
  int v281;
  _BOOL4 v282;
  int v283;
  _BOOL4 v284;
  std::string *v285;
  char *v286;
  std::string *v287;
  __int128 v288;
  _QWORD *v289;
  char *v290;
  char *v291;
  uint64_t v292;
  char *v293;
  uint64_t v294;
  _BYTE *v295;
  int v296;
  uint64_t v297;
  int v298;
  uint64_t *v299;
  uint64_t v300;
  uint64_t v301;
  char *v302;
  std::string *v303;
  uint64_t v304;
  std::string::size_type v305;
  std::string::size_type *p_size;
  std::string::size_type *v307;
  int v308;
  size_t v309;
  const void *v310;
  std::string::size_type v311;
  const void *v312;
  const void *v313;
  int v314;
  size_t v315;
  const void *v316;
  size_t v317;
  int v318;
  _BOOL4 v319;
  int v320;
  _BOOL4 v321;
  char *v322;
  std::string *v323;
  __int128 v324;
  std::string::size_type v325;
  uint64_t v326;
  _BYTE *v327;
  uint64_t v328;
  _BYTE *v329;
  int v330;
  uint64_t v331;
  int v332;
  uint64_t *v333;
  uint64_t v334;
  uint64_t v335;
  char *v336;
  char *v337;
  char **v338;
  uint64_t v339;
  _QWORD *v340;
  std::string *v341;
  std::string *v342;
  uint64_t *v343;
  char *v344;
  char **v345;
  EspressoLight::espresso_aot_plan *v346;
  _QWORD **v347;
  unint64_t v348;
  __int128 *v349;
  char **v350;
  char **v351;
  int v352;
  size_t v353;
  char *v354;
  char *v355;
  _QWORD *v356;
  const void *v357;
  const void *v358;
  int v359;
  size_t v360;
  const void *v361;
  size_t v362;
  int v363;
  _BOOL4 v364;
  int v365;
  _BOOL4 v366;
  char *v367;
  char *v368;
  std::string *v369;
  __int128 v370;
  _QWORD *v371;
  char *v372;
  char *v373;
  uint64_t v374;
  char *v375;
  uint64_t v376;
  _BYTE *v377;
  int v378;
  uint64_t v379;
  int v380;
  uint64_t *v381;
  uint64_t v382;
  uint64_t v383;
  char *v384;
  char **v385;
  uint64_t v386;
  uint64_t *v387;
  uint64_t *v388;
  char *v389;
  char **v390;
  char **v391;
  int v392;
  size_t v393;
  const std::string::value_type *v394;
  char *v395;
  char *v396;
  char *v397;
  int v398;
  size_t v399;
  char *v400;
  size_t v401;
  int v402;
  _BOOL4 v403;
  int v404;
  _BOOL4 v405;
  char *v406;
  std::string *v407;
  __int128 v408;
  char *v409;
  uint64_t v410;
  char *v411;
  uint64_t v412;
  _BYTE *v413;
  int v414;
  uint64_t v415;
  int v416;
  uint64_t *v417;
  uint64_t v418;
  uint64_t v419;
  char *v420;
  char *v421;
  char **v422;
  uint64_t v423;
  char *v424;
  char *v425;
  void *v426;
  std::__shared_weak_count *v427;
  unint64_t *v428;
  unint64_t v429;
  const Espresso::net *v430;
  uint64_t v431;
  unint64_t *v432;
  unint64_t v433;
  std::__shared_weak_count *v434;
  unint64_t *v435;
  unint64_t v436;
  Espresso::net *v437;
  _QWORD *v438;
  std::__shared_weak_count *v439;
  unint64_t *v440;
  unint64_t v441;
  std::__shared_weak_count *v442;
  unint64_t *v443;
  unint64_t v444;
  std::__shared_weak_count *v445;
  std::__shared_weak_count *v446;
  unint64_t *v447;
  unint64_t v448;
  unint64_t v449;
  __int128 *v450;
  char *v451;
  unint64_t *v452;
  unint64_t v453;
  unint64_t v454;
  unint64_t v455;
  std::__shared_weak_count *v456;
  unint64_t *v457;
  unint64_t v458;
  _QWORD *v459;
  int v460;
  int v461;
  int v462;
  int v464;
  std::string *v465;
  std::__shared_weak_count *v466;
  unint64_t *v467;
  unint64_t v468;
  std::__shared_weak_count *v469;
  unint64_t *v470;
  unint64_t v471;
  _QWORD *v472;
  void *v473;
  id v474;
  const char *v475;
  size_t v476;
  size_t v477;
  char **p_dst;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  std::string *bundle_dir;
  std::string *v483;
  std::string *v484;
  void *v485;
  std::string *begin;
  std::vector<std::string>::pointer end;
  std::vector<std::string>::pointer v488;
  std::__shared_weak_count *v489;
  unint64_t *v490;
  unint64_t v491;
  char **v492;
  std::string *v493;
  const void **v494;
  EspressoLight::espresso_aot_plan *v495;
  __int128 v496;
  int v497;
  uint64_t v498;
  unint64_t v499;
  _QWORD *v500;
  _QWORD *v501;
  std::string *__str;
  unint64_t v503;
  _QWORD **v504;
  Espresso::net *v505;
  void *v506[2];
  char v507;
  Espresso::net *v508;
  std::__shared_weak_count *v509;
  Espresso::net *v510;
  std::__shared_weak_count *v511;
  Espresso::net *v512;
  std::__shared_weak_count *v513;
  _QWORD v514[2];
  Espresso *v515;
  std::__shared_weak_count *v516;
  Espresso::net *v517;
  std::__shared_weak_count *v518;
  _OWORD *v519[3];
  char *v520[3];
  char **v521;
  char *v522;
  uint64_t v523;
  Espresso::net *v524;
  std::__shared_weak_count *v525;
  void *v526;
  std::string *v527;
  unint64_t v528;
  void *__p[2];
  char *v530;
  _BYTE v531[24];
  std::vector<std::string> v532;
  Espresso::net *v533;
  std::__shared_weak_count *v534;
  unint64_t v535;
  char *v536;
  uint64_t v537;
  std::string v538;
  int v539;
  int v540;
  unint64_t v541;
  __int128 v542;
  __int128 v543;
  int v544;
  uint64_t *v545;
  char *v546;
  uint64_t v547;
  char *__dst;
  __int128 v549;
  uint64_t v550;

  v550 = *MEMORY[0x1E0C80C00];
  if (!EspressoLight::espresso_aot_plan::platf)
    Espresso::throw_exception_selector<Espresso::generic_error>("set_platform must be called before prepare.");
  EspressoLight::espresso_aot_plan::get_network(this, &v533);
  if (!v533)
    Espresso::throw_exception_selector<Espresso::generic_error>("Null network. Cannot prepare plan.");
  v2 = Espresso::DTypeConverter::DTypeConverter((Espresso::DTypeConverter *)&__dst, v533);
  Espresso::DTypeConverter::PrepareNetworkForConversion(v2);
  Espresso::DTypeConverter::~DTypeConverter((Espresso::DTypeConverter *)&__dst);
  EspressoLight::espresso_aot_plan::identify_segments(this);
  if (Espresso::multi_head_aot_helper_t::is_needed_for ((uint64_t)&v533))
  {
    v3 = v533;
    v4 = operator new(0x48uLL);
    v4[2] = 0;
    *v4 = &unk_1E2DBCEE8;
    v4[1] = 0;
    v5 = Espresso::multi_head_aot_helper_t::multi_head_aot_helper_t((Espresso::multi_head_aot_helper_t *)(v4 + 3), v3);
    v6 = v533;
    *((_QWORD *)v533 + 171) = v5;
    v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 172);
    *((_QWORD *)v6 + 172) = v4;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = v533;
    __dst = (char *)operator new(0x20uLL);
    v549 = xmmword_191A86860;
    strcpy(__dst, "per_network_configuration");
    v519[0] = &__dst;
    v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v10 + 59, &__dst, (uint64_t)&std::piecewise_construct, v519);
    MEMORY[0x19401C808]((char *)v11 + 56, "1");
    if (SHIBYTE(v549) < 0)
      operator delete(__dst);
  }
  EspressoLight::espresso_aot_plan::compile_segments(this, &v532);
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)__p, (uint64_t)this + 1176);
  Espresso::AOT::Builder::Builder(v531, __p, *((unsigned __int8 *)this + 1169));
  v12 = v530;
  if (v530)
  {
    while (1)
    {
      v13 = *(char **)v12;
      if (v12[63] < 0)
      {
        operator delete(*((void **)v12 + 5));
        if ((v12[39] & 0x80000000) == 0)
          goto LABEL_14;
LABEL_17:
        operator delete(*((void **)v12 + 2));
        operator delete(v12);
        v12 = v13;
        if (!v13)
          break;
      }
      else
      {
        if (v12[39] < 0)
          goto LABEL_17;
LABEL_14:
        operator delete(v12);
        v12 = v13;
        if (!v13)
          break;
      }
    }
  }
  v14 = __p[0];
  __p[0] = 0;
  if (v14)
    operator delete(v14);
  HIBYTE(v549) = 7;
  strcpy((char *)&__dst, "default");
  std::vector<std::string>::vector[abi:ne180100](&v526, (uint64_t)&__dst, 1uLL);
  if (SHIBYTE(v549) < 0)
  {
    operator delete(__dst);
    v15 = (_QWORD *)*((_QWORD *)v533 + 97);
    v16 = (char *)v533 + 784;
    if (v15 != (_QWORD *)((char *)v533 + 784))
      goto LABEL_22;
  }
  else
  {
    v15 = (_QWORD *)*((_QWORD *)v533 + 97);
    v16 = (char *)v533 + 784;
    if (v15 != (_QWORD *)((char *)v533 + 784))
    {
LABEL_22:
      v17 = v527;
      while (1)
      {
        v18 = (__int128 *)(v15 + 4);
        if ((unint64_t)v17 >= v528)
        {
          v17 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v526, (uint64_t)v18);
          v527 = v17;
          v20 = (char *)v15[1];
          if (v20)
            goto LABEL_31;
        }
        else if (*((char *)v15 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(v17++, (const std::string::value_type *)v15[4], v15[5]);
          v527 = v17;
          v20 = (char *)v15[1];
          if (v20)
          {
            do
            {
LABEL_31:
              v21 = v20;
              v20 = *(char **)v20;
            }
            while (v20);
            goto LABEL_23;
          }
        }
        else
        {
          v19 = *v18;
          v17->__r_.__value_.__r.__words[2] = v15[6];
          *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v19;
          v527 = ++v17;
          v20 = (char *)v15[1];
          if (v20)
            goto LABEL_31;
        }
        do
        {
          v21 = (char *)v15[2];
          v37 = *(_QWORD *)v21 == (_QWORD)v15;
          v15 = v21;
        }
        while (!v37);
LABEL_23:
        v15 = v21;
        if (v21 == v16)
          goto LABEL_38;
      }
    }
  }
  v17 = v527;
LABEL_38:
  v494 = (const void **)v526;
  v495 = this;
  if (v526 != v17)
  {
    v492 = v520;
    v493 = v17;
    while (1)
    {
      Espresso::net::reload_copy((uint64_t *)&v524, v533);
      v522 = 0;
      v523 = 0;
      v521 = &v522;
      v22 = (__int128 *)*((_QWORD *)v524 + 103);
      v23 = (__int128 *)((char *)v524 + 832);
      if (v22 != (__int128 *)((char *)v524 + 832))
        break;
LABEL_42:
      v24 = v533;
      v25 = (char *)*((_QWORD *)v533 + 98);
      if (!v25)
      {
        v45 = (uint64_t)v495;
        v48 = *((_QWORD *)v533 + 171);
        v49 = v524;
        if (v48)
          goto LABEL_218;
        goto LABEL_83;
      }
      v26 = (char *)v533 + 784;
      v27 = *((char *)v494 + 23);
      if (v27 >= 0)
        v28 = *((unsigned __int8 *)v494 + 23);
      else
        v28 = (size_t)v494[1];
      if (v27 >= 0)
        v29 = v494;
      else
        v29 = *v494;
      v30 = (char *)v533 + 784;
      do
      {
        v31 = v25[55];
        if (v31 >= 0)
          v32 = v25[55];
        else
          v32 = *((_QWORD *)v25 + 5);
        if (v31 >= 0)
          v33 = v25 + 32;
        else
          v33 = (const void *)*((_QWORD *)v25 + 4);
        if (v28 >= v32)
          v34 = v32;
        else
          v34 = v28;
        v35 = memcmp(v33, v29, v34);
        v36 = v32 < v28;
        if (v35)
          v36 = v35 < 0;
        v37 = !v36;
        if (v36)
          v38 = (char **)(v25 + 8);
        else
          v38 = (char **)v25;
        if (v37)
          v30 = v25;
        v25 = *v38;
      }
      while (*v38);
      if (v30 == v26)
      {
        v45 = (uint64_t)v495;
        v48 = *((_QWORD *)v24 + 171);
        v49 = v524;
        if (v48)
          goto LABEL_218;
        goto LABEL_83;
      }
      v39 = v30[55];
      if (v39 >= 0)
        v40 = v30[55];
      else
        v40 = *((_QWORD *)v30 + 5);
      if (v39 >= 0)
        v41 = v30 + 32;
      else
        v41 = (const void *)*((_QWORD *)v30 + 4);
      if (v40 >= v28)
        v42 = v28;
      else
        v42 = v40;
      v43 = memcmp(v29, v41, v42);
      v44 = v28 >= v40;
      if (v43)
        v44 = v43 >= 0;
      v45 = (uint64_t)v495;
      if (!v44 || (v46 = (char *)*((_QWORD *)v30 + 10), v47 = v30 + 88, v46 == v30 + 88))
      {
        v48 = *((_QWORD *)v24 + 171);
        v49 = v524;
        if (v48)
          goto LABEL_218;
        goto LABEL_83;
      }
      do
      {
        v70 = v522;
        v71 = &v522;
        v72 = &v522;
        if (v522)
        {
          v73 = v46[55];
          if (v73 >= 0)
            v74 = v46[55];
          else
            v74 = *((_QWORD *)v46 + 5);
          if (v73 >= 0)
            v75 = v46 + 32;
          else
            v75 = (const void *)*((_QWORD *)v46 + 4);
          while (1)
          {
            while (1)
            {
              v71 = (char **)v70;
              v78 = (char *)*((_QWORD *)v70 + 4);
              v76 = v70 + 32;
              v77 = v78;
              v79 = v76[23];
              if (v79 >= 0)
                v80 = v76[23];
              else
                v80 = *((_QWORD *)v76 + 1);
              if (v79 >= 0)
                v81 = v76;
              else
                v81 = v77;
              if (v80 >= v74)
                v82 = v74;
              else
                v82 = v80;
              v83 = memcmp(v75, v81, v82);
              v84 = v74 < v80;
              if (v83)
                v84 = v83 < 0;
              if (!v84)
                break;
              v70 = *v71;
              v72 = v71;
              if (!*v71)
                goto LABEL_150;
            }
            v85 = memcmp(v81, v75, v82);
            v86 = v80 < v74;
            if (v85)
              v86 = v85 < 0;
            if (!v86)
              break;
            v70 = v71[1];
            if (!v70)
            {
              v72 = v71 + 1;
              goto LABEL_150;
            }
          }
          v87 = (char *)v71;
          v45 = (uint64_t)v495;
        }
        else
        {
LABEL_150:
          v87 = (char *)operator new(0x78uLL);
          v88 = (std::string *)(v87 + 32);
          if (v46[55] < 0)
          {
            std::string::__init_copy_ctor_external(v88, *((const std::string::value_type **)v46 + 4), *((_QWORD *)v46 + 5));
          }
          else
          {
            v89 = *((_OWORD *)v46 + 2);
            *((_QWORD *)v87 + 6) = *((_QWORD *)v46 + 6);
            *(_OWORD *)&v88->__r_.__value_.__l.__data_ = v89;
          }
          v45 = (uint64_t)v495;
          *((_QWORD *)v87 + 14) = 0;
          *((_OWORD *)v87 + 5) = 0u;
          *((_OWORD *)v87 + 6) = 0u;
          *(_OWORD *)(v87 + 56) = xmmword_191A8AA80;
          *((_QWORD *)v87 + 9) = 0xFFFFFFFF00000001;
          *(_QWORD *)v87 = 0;
          *((_QWORD *)v87 + 1) = 0;
          *((_QWORD *)v87 + 2) = v71;
          *v72 = v87;
          v90 = v87;
          if (*v521)
          {
            v521 = (char **)*v521;
            v90 = *v72;
          }
          v91 = v522;
          v37 = v90 == v522;
          v90[24] = v90 == v522;
          if (!v37)
          {
            do
            {
              v92 = *((_QWORD *)v90 + 2);
              if (*(_BYTE *)(v92 + 24))
                break;
              v93 = *(char **)(v92 + 16);
              v94 = *(_QWORD *)v93;
              if (*(_QWORD *)v93 == v92)
              {
                v97 = *((_QWORD *)v93 + 1);
                if (!v97 || (v98 = *(unsigned __int8 *)(v97 + 24), v95 = (_BYTE *)(v97 + 24), v98))
                {
                  if (*(char **)v92 == v90)
                  {
                    *(_BYTE *)(v92 + 24) = 1;
                    v93[24] = 0;
                    v101 = *(_QWORD *)(v92 + 8);
                    *(_QWORD *)v93 = v101;
                    if (v101)
                      goto LABEL_170;
                  }
                  else
                  {
                    v99 = *(uint64_t **)(v92 + 8);
                    v100 = *v99;
                    *(_QWORD *)(v92 + 8) = *v99;
                    if (v100)
                    {
                      *(_QWORD *)(v100 + 16) = v92;
                      v93 = *(char **)(v92 + 16);
                    }
                    v99[2] = (uint64_t)v93;
                    *(_QWORD *)(*(_QWORD *)(v92 + 16) + 8 * (**(_QWORD **)(v92 + 16) != v92)) = v99;
                    *v99 = v92;
                    *(_QWORD *)(v92 + 16) = v99;
                    v93 = (char *)v99[2];
                    v92 = *(_QWORD *)v93;
                    *((_BYTE *)v99 + 24) = 1;
                    v93[24] = 0;
                    v101 = *(_QWORD *)(v92 + 8);
                    *(_QWORD *)v93 = v101;
                    if (v101)
LABEL_170:
                      *(_QWORD *)(v101 + 16) = v93;
                  }
                  *(_QWORD *)(v92 + 16) = *((_QWORD *)v93 + 2);
                  *(_QWORD *)(*((_QWORD *)v93 + 2) + 8 * (**((_QWORD **)v93 + 2) != (_QWORD)v93)) = v92;
                  *(_QWORD *)(v92 + 8) = v93;
LABEL_177:
                  *((_QWORD *)v93 + 2) = v92;
                  break;
                }
              }
              else if (!v94 || (v96 = *(unsigned __int8 *)(v94 + 24), v95 = (_BYTE *)(v94 + 24), v96))
              {
                if (*(char **)v92 == v90)
                {
                  v123 = *((_QWORD *)v90 + 1);
                  *(_QWORD *)v92 = v123;
                  if (v123)
                  {
                    *(_QWORD *)(v123 + 16) = v92;
                    v93 = *(char **)(v92 + 16);
                  }
                  *((_QWORD *)v90 + 2) = v93;
                  *(_QWORD *)(*(_QWORD *)(v92 + 16) + 8 * (**(_QWORD **)(v92 + 16) != v92)) = v90;
                  *((_QWORD *)v90 + 1) = v92;
                  *(_QWORD *)(v92 + 16) = v90;
                  v93 = (char *)*((_QWORD *)v90 + 2);
                  v90[24] = 1;
                  v93[24] = 0;
                  v92 = *((_QWORD *)v93 + 1);
                  v102 = *(char **)v92;
                  *((_QWORD *)v93 + 1) = *(_QWORD *)v92;
                  if (v102)
LABEL_175:
                    *((_QWORD *)v102 + 2) = v93;
                }
                else
                {
                  *(_BYTE *)(v92 + 24) = 1;
                  v93[24] = 0;
                  v92 = *((_QWORD *)v93 + 1);
                  v102 = *(char **)v92;
                  *((_QWORD *)v93 + 1) = *(_QWORD *)v92;
                  if (v102)
                    goto LABEL_175;
                }
                *(_QWORD *)(v92 + 16) = *((_QWORD *)v93 + 2);
                *(_QWORD *)(*((_QWORD *)v93 + 2) + 8 * (**((_QWORD **)v93 + 2) != (_QWORD)v93)) = v92;
                *(_QWORD *)v92 = v93;
                goto LABEL_177;
              }
              *(_BYTE *)(v92 + 24) = 1;
              v90 = v93;
              v93[24] = v93 == v91;
              *v95 = 1;
            }
            while (v93 != v91);
          }
          ++v523;
        }
        v103 = *(_OWORD *)(v46 + 56);
        v104 = *(_OWORD *)(v46 + 72);
        *((_QWORD *)v87 + 11) = *((_QWORD *)v46 + 11);
        *(_OWORD *)(v87 + 72) = v104;
        *(_OWORD *)(v87 + 56) = v103;
        if (v87 != v46)
        {
          v105 = (char *)*((_QWORD *)v87 + 12);
          v107 = (char *)*((_QWORD *)v46 + 12);
          v106 = (_BYTE *)*((_QWORD *)v46 + 13);
          v108 = v106 - v107;
          v109 = (v106 - v107) >> 2;
          v110 = *((_QWORD *)v87 + 14);
          if (v109 > (v110 - (uint64_t)v105) >> 2)
          {
            if (v105)
            {
              *((_QWORD *)v87 + 13) = v105;
              operator delete(v105);
              v110 = 0;
              *((_QWORD *)v87 + 12) = 0;
              *((_QWORD *)v87 + 13) = 0;
              *((_QWORD *)v87 + 14) = 0;
            }
            if ((v108 & 0x8000000000000000) != 0)
              goto LABEL_884;
            v111 = v110 >> 1;
            if (v110 >> 1 <= v109)
              v111 = (v106 - v107) >> 2;
            v112 = (unint64_t)v110 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v111;
            if (v112 >> 62)
LABEL_884:
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v113 = (char *)operator new(4 * v112);
            v105 = v113;
            *((_QWORD *)v87 + 13) = v113;
            v114 = (char **)(v87 + 104);
            *(v114 - 1) = v113;
            v114[1] = &v113[4 * v112];
            if (v106 != v107)
              memcpy(v113, v107, v106 - v107);
            goto LABEL_200;
          }
          v116 = (char *)*((_QWORD *)v87 + 13);
          v114 = (char **)(v87 + 104);
          v115 = v116;
          v117 = v116 - v105;
          v118 = (v116 - v105) >> 2;
          if (v118 >= v109)
          {
            if (v106 == v107)
            {
LABEL_200:
              v45 = (uint64_t)v495;
              *v114 = &v105[v108];
              goto LABEL_201;
            }
            v120 = v105;
            v119 = (char *)*((_QWORD *)v46 + 12);
          }
          else
          {
            if (v115 != v105)
            {
              memmove(v105, *((const void **)v46 + 12), v117);
              v105 = *v114;
            }
            v119 = &v107[4 * v118];
            v108 = v106 - v119;
            if (v106 == v119)
              goto LABEL_200;
            v120 = v105;
          }
          memmove(v120, v119, v108);
          goto LABEL_200;
        }
LABEL_201:
        v121 = (char *)*((_QWORD *)v46 + 1);
        if (v121)
        {
          do
          {
            v122 = v121;
            v121 = *(char **)v121;
          }
          while (v121);
        }
        else
        {
          do
          {
            v122 = (char *)*((_QWORD *)v46 + 2);
            v37 = *(_QWORD *)v122 == (_QWORD)v46;
            v46 = v122;
          }
          while (!v37);
        }
        v46 = v122;
      }
      while (v122 != v47);
      v48 = *((_QWORD *)v533 + 171);
      v49 = v524;
      if (v48)
      {
LABEL_218:
        Espresso::multi_head_aot_helper_t::remove_unused_layers(v48, v49, v494);
        Espresso::net::_tag_inputs_and_outputs(v524);
        v50 = v525;
        v517 = v524;
        v518 = v525;
        if (v525)
          goto LABEL_219;
        goto LABEL_221;
      }
LABEL_83:
      v50 = v525;
      v517 = v49;
      v518 = v525;
      if (v525)
      {
LABEL_219:
        v124 = (unint64_t *)&v50->__shared_owners_;
        do
          v125 = __ldxr(v124);
        while (__stxr(v125 + 1, v124));
      }
LABEL_221:
      Espresso::compute_network_shape_starting_from_data_shapes((uint64_t *)&v517, (uint64_t)&v521, (uint64_t)v519);
      v126 = v518;
      if (!v518)
        goto LABEL_225;
      v127 = (unint64_t *)&v518->__shared_owners_;
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 - 1, v127));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
        v129 = v525;
        v515 = v524;
        v516 = v525;
        if (v525)
          goto LABEL_226;
      }
      else
      {
LABEL_225:
        v129 = v525;
        v515 = v524;
        v516 = v525;
        if (v525)
        {
LABEL_226:
          v130 = (unint64_t *)&v129->__shared_owners_;
          do
            v131 = __ldxr(v130);
          while (__stxr(v131 + 1, v130));
        }
      }
      Espresso::shape_network(&v515, (Espresso::net *)v519);
      v132 = v516;
      if (v516)
      {
        v133 = (unint64_t *)&v516->__shared_owners_;
        do
          v134 = __ldaxr(v133);
        while (__stlxr(v134 - 1, v133));
        if (!v134)
        {
          ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
          std::__shared_weak_count::__release_weak(v132);
        }
      }
      v135 = Espresso::DTypeConverter::DTypeConverter((Espresso::DTypeConverter *)&__dst, v524);
      Espresso::DTypeConverter::PrepareNetworkForConversion(v135);
      v136 = v525;
      v514[0] = v524;
      v514[1] = v525;
      if (v525)
      {
        v137 = (unint64_t *)&v525->__shared_owners_;
        do
          v138 = __ldxr(v137);
        while (__stxr(v138 + 1, v137));
      }
      EspressoLight::espresso_aot_plan::identify_segments(v45, v514);
      if (!v136)
        goto LABEL_240;
      v139 = (unint64_t *)&v136->__shared_owners_;
      do
        v140 = __ldaxr(v139);
      while (__stlxr(v140 - 1, v139));
      if (!v140)
      {
        ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
        std::__shared_weak_count::__release_weak(v136);
        v141 = v525;
        v512 = v524;
        v513 = v525;
        if (v525)
          goto LABEL_241;
      }
      else
      {
LABEL_240:
        v141 = v525;
        v512 = v524;
        v513 = v525;
        if (v525)
        {
LABEL_241:
          v142 = (unint64_t *)&v141->__shared_owners_;
          do
            v143 = __ldxr(v142);
          while (__stxr(v143 + 1, v142));
        }
      }
      Espresso::compress_segments_to_dev_ops((uint64_t *)&v512, (uint64_t *)&v532);
      v144 = v513;
      if (v513)
      {
        v145 = (unint64_t *)&v513->__shared_owners_;
        do
          v146 = __ldaxr(v145);
        while (__stlxr(v146 - 1, v145));
        if (!v146)
        {
          ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
          std::__shared_weak_count::__release_weak(v144);
        }
      }
      if (!*((_QWORD *)v533 + 99))
        goto LABEL_262;
      v147 = *((char *)v494 + 23);
      if (v147 < 0)
      {
        if (v494[1] != (const void *)7)
          goto LABEL_262;
        v148 = (int *)*v494;
      }
      else
      {
        v148 = (int *)v494;
        if (v147 != 7)
          goto LABEL_262;
      }
      v149 = *v148;
      v150 = *(int *)((char *)v148 + 3);
      if (v149 == 1634100580 && v150 == 1953264993)
      {
        if (*((_QWORD *)v533 + 171))
LABEL_263:
      }
      else
      {
LABEL_262:
        if (*((_QWORD *)v533 + 171))
          goto LABEL_263;
      }
      v152 = v524;
      v510 = v524;
      v511 = v525;
      if (v525)
      {
        v153 = (unint64_t *)&v525->__shared_owners_;
        do
          v154 = __ldxr(v153);
        while (__stxr(v154 + 1, v153));
      }
      v546 = 0;
      v547 = 0;
      v545 = (uint64_t *)&v546;
      v542 = 0u;
      v543 = 0u;
      v544 = 1065353216;
      v541 = 0;
      v155 = *((_QWORD *)v152 + 4);
      if (*((_QWORD *)v152 + 5) != v155)
      {
        v156 = 0;
        while (1)
        {
          v158 = *(_QWORD *)(v155 + 16 * v156);
          v159 = (_QWORD *)(v158 + 40);
          v160 = *(char *)(v158 + 63);
          if (v160 < 0)
          {
            if (*(_QWORD *)(v158 + 48) != 16)
              goto LABEL_270;
            v159 = (_QWORD *)*v159;
          }
          else if (v160 != 16)
          {
            goto LABEL_270;
          }
          v162 = (_QWORD *)*v159;
          v161 = v159[1];
          if (v162 != (_QWORD *)0x5F747865746E6F63 || v161 != 0x726566736E617274)
            goto LABEL_270;
          v164 = *(const void **)(v158 + 64);
          if (!v164
          {
            Espresso::throw_exception_selector<Espresso::generic_error>("Unable to cast to context transfer kernel");
          }
          v166 = v165;
          v538.__r_.__value_.__r.__words[0] = (std::string::size_type)&v541;
          v501 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v152 + 56, &v541, (uint64_t)&std::piecewise_construct, (uint64_t **)&v538);
          v152 = v510;
          v538.__r_.__value_.__r.__words[0] = (std::string::size_type)&v541;
          v500 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v510 + 96, &v541, (uint64_t)&std::piecewise_construct, (uint64_t **)&v538);
          v498 = (*(uint64_t (**)(void *))(*(_QWORD *)v166 + 320))(v166);
          v168 = v501[3];
          v167 = v501[4];
          v499 = 0xAAAAAAAAAAAAAAABLL * ((v167 - v168) >> 3);
          if (v499 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v500[4] - v500[3]) >> 3))
            Espresso::throw_exception_selector<Espresso::generic_error>("Invalid context transfer op. Mismatched input/output count.");
          if (v167 == v168)
            goto LABEL_270;
          v169 = 0;
          while (2)
          {
            v170 = v501[3] + 24 * v169;
            v171 = v500[3];
            v172 = *(_DWORD *)(v498 + 20);
            v173 = *(_DWORD *)(v498 + 28);
            if (*(char *)(v170 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v538, *(const std::string::value_type **)v170, *(_QWORD *)(v170 + 8));
            }
            else
            {
              v174 = *(_OWORD *)v170;
              v538.__r_.__value_.__r.__words[2] = *(_QWORD *)(v170 + 16);
              *(_OWORD *)&v538.__r_.__value_.__l.__data_ = v174;
            }
            __str = (std::string *)(v171 + 24 * v169);
            v503 = v169;
            v539 = v172;
            v540 = v173;
            v175 = (uint64_t *)&v546;
            v176 = (uint64_t *)&v546;
            v177 = (uint64_t)v546;
            if (!v546)
            {
LABEL_389:
              v223 = v503;
              v222 = (char *)operator new(0x58uLL);
              v224 = (std::string *)(v222 + 32);
              if (SHIBYTE(v538.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(v224, v538.__r_.__value_.__l.__data_, v538.__r_.__value_.__l.__size_);
                v172 = v539;
                v173 = v540;
              }
              else
              {
                *(_OWORD *)&v224->__r_.__value_.__l.__data_ = *(_OWORD *)&v538.__r_.__value_.__l.__data_;
                *((_QWORD *)v222 + 6) = *((_QWORD *)&v538.__r_.__value_.__l + 2);
              }
              *((_DWORD *)v222 + 14) = v172;
              *((_DWORD *)v222 + 15) = v173;
              *((_QWORD *)v222 + 9) = 0;
              *((_QWORD *)v222 + 10) = 0;
              *((_QWORD *)v222 + 8) = 0;
              *(_QWORD *)v222 = 0;
              *((_QWORD *)v222 + 1) = 0;
              *((_QWORD *)v222 + 2) = v175;
              *v176 = (uint64_t)v222;
              v225 = v222;
              if (*v545)
              {
                v545 = (uint64_t *)*v545;
                v225 = (char *)*v176;
              }
              v226 = (uint64_t)v546;
              v225[24] = v225 == v546;
              if (v225 == (char *)v226)
                goto LABEL_415;
              while (1)
              {
                v227 = *((_QWORD *)v225 + 2);
                if (*(_BYTE *)(v227 + 24))
                  goto LABEL_415;
                v228 = *(char **)(v227 + 16);
                v229 = *(_QWORD *)v228;
                if (*(_QWORD *)v228 == v227)
                {
                  v232 = *((_QWORD *)v228 + 1);
                  if (!v232 || (v233 = *(unsigned __int8 *)(v232 + 24), v230 = (_BYTE *)(v232 + 24), v233))
                  {
                    if (*(char **)v227 == v225)
                    {
                      *(_BYTE *)(v227 + 24) = 1;
                      v228[24] = 0;
                      v236 = *(_QWORD *)(v227 + 8);
                      *(_QWORD *)v228 = v236;
                      if (v236)
                        goto LABEL_408;
                    }
                    else
                    {
                      v234 = *(uint64_t **)(v227 + 8);
                      v235 = *v234;
                      *(_QWORD *)(v227 + 8) = *v234;
                      if (v235)
                      {
                        *(_QWORD *)(v235 + 16) = v227;
                        v228 = *(char **)(v227 + 16);
                      }
                      v234[2] = (uint64_t)v228;
                      *(_QWORD *)(*(_QWORD *)(v227 + 16) + 8 * (**(_QWORD **)(v227 + 16) != v227)) = v234;
                      *v234 = v227;
                      *(_QWORD *)(v227 + 16) = v234;
                      v228 = (char *)v234[2];
                      v227 = *(_QWORD *)v228;
                      *((_BYTE *)v234 + 24) = 1;
                      v228[24] = 0;
                      v236 = *(_QWORD *)(v227 + 8);
                      *(_QWORD *)v228 = v236;
                      if (v236)
LABEL_408:
                        *(_QWORD *)(v236 + 16) = v228;
                    }
                    *(_QWORD *)(v227 + 16) = *((_QWORD *)v228 + 2);
                    *(_QWORD *)(*((_QWORD *)v228 + 2) + 8 * (**((_QWORD **)v228 + 2) != (_QWORD)v228)) = v227;
                    *(_QWORD *)(v227 + 8) = v228;
LABEL_414:
                    *((_QWORD *)v228 + 2) = v227;
LABEL_415:
                    ++v547;
LABEL_416:
                    std::string::operator=((std::string *)(v222 + 64), __str);
                    v169 = v223 + 1;
                    if (SHIBYTE(v538.__r_.__value_.__r.__words[2]) < 0)
                      goto LABEL_286;
                    goto LABEL_287;
                  }
                }
                else if (!v229 || (v231 = *(unsigned __int8 *)(v229 + 24), v230 = (_BYTE *)(v229 + 24), v231))
                {
                  if (*(char **)v227 == v225)
                  {
                    v238 = *((_QWORD *)v225 + 1);
                    *(_QWORD *)v227 = v238;
                    if (v238)
                    {
                      *(_QWORD *)(v238 + 16) = v227;
                      v228 = *(char **)(v227 + 16);
                    }
                    *((_QWORD *)v225 + 2) = v228;
                    *(_QWORD *)(*(_QWORD *)(v227 + 16) + 8 * (**(_QWORD **)(v227 + 16) != v227)) = v225;
                    *((_QWORD *)v225 + 1) = v227;
                    *(_QWORD *)(v227 + 16) = v225;
                    v228 = (char *)*((_QWORD *)v225 + 2);
                    v225[24] = 1;
                    v228[24] = 0;
                    v227 = *((_QWORD *)v228 + 1);
                    v237 = *(char **)v227;
                    *((_QWORD *)v228 + 1) = *(_QWORD *)v227;
                    if (v237)
LABEL_412:
                      *((_QWORD *)v237 + 2) = v228;
                  }
                  else
                  {
                    *(_BYTE *)(v227 + 24) = 1;
                    v228[24] = 0;
                    v227 = *((_QWORD *)v228 + 1);
                    v237 = *(char **)v227;
                    *((_QWORD *)v228 + 1) = *(_QWORD *)v227;
                    if (v237)
                      goto LABEL_412;
                  }
                  *(_QWORD *)(v227 + 16) = *((_QWORD *)v228 + 2);
                  *(_QWORD *)(*((_QWORD *)v228 + 2) + 8 * (**((_QWORD **)v228 + 2) != (_QWORD)v228)) = v227;
                  *(_QWORD *)v227 = v228;
                  goto LABEL_414;
                }
                *(_BYTE *)(v227 + 24) = 1;
                v225 = v228;
                v228[24] = v228 == (char *)v226;
                *v230 = 1;
                if (v228 == (char *)v226)
                  goto LABEL_415;
              }
            }
            v497 = SHIBYTE(v538.__r_.__value_.__r.__words[2]);
            v496 = *(_OWORD *)&v538.__r_.__value_.__l.__data_;
            if ((v538.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v538.__r_.__value_.__r.__words[2]);
            else
              size = v538.__r_.__value_.__l.__size_;
            if ((v538.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v179 = &v538;
            else
              v179 = (std::string *)v538.__r_.__value_.__r.__words[0];
            v180 = (uint64_t *)&v546;
            v181 = (uint64_t)v546;
            do
            {
              v182 = *(char *)(v181 + 55);
              if (v182 >= 0)
                v183 = *(unsigned __int8 *)(v181 + 55);
              else
                v183 = *(_QWORD *)(v181 + 40);
              if (v182 >= 0)
                v184 = (const void *)(v181 + 32);
              else
                v184 = *(const void **)(v181 + 32);
              if (size >= v183)
                v185 = v183;
              else
                v185 = size;
              v186 = memcmp(v184, v179, v185);
              v187 = v183 < size;
              if (v186)
                v187 = v186 < 0;
              if (v187)
              {
LABEL_299:
                v181 += 8;
                goto LABEL_300;
              }
              v188 = memcmp(v179, v184, v185);
              v189 = size < v183;
              if (v188)
                v189 = v188 < 0;
              if (v189)
                goto LABEL_316;
              v190 = *(_DWORD *)(v181 + 56);
              if (v190 < v172)
                goto LABEL_299;
              if (v172 < v190)
              {
LABEL_316:
                v180 = (uint64_t *)v181;
              }
              else if (*(_DWORD *)(v181 + 60) < v173)
              {
                v181 += 8;
              }
              else
              {
                v180 = (uint64_t *)v181;
              }
LABEL_300:
              v181 = *(_QWORD *)v181;
            }
            while (v181);
            if (v180 == (uint64_t *)&v546)
              goto LABEL_891;
            v191 = *((char *)v180 + 55);
            if (v191 >= 0)
              v192 = *((unsigned __int8 *)v180 + 55);
            else
              v192 = v180[5];
            if (v191 >= 0)
              v193 = v180 + 4;
            else
              v193 = (const void *)v180[4];
            if (v192 >= size)
              v194 = size;
            else
              v194 = v192;
            v195 = memcmp(v179, v193, v194);
            v196 = size < v192;
            if (v195)
              v196 = v195 < 0;
            if (v196)
              goto LABEL_891;
            v197 = memcmp(v193, v179, v194);
            v198 = v192 < size;
            if (v197)
              v198 = v197 < 0;
            if (!v198)
            {
              v199 = *((_DWORD *)v180 + 14);
              if (v172 < v199 || v199 >= v172 && v173 < *((_DWORD *)v180 + 15))
              {
LABEL_891:
                while (1)
                {
                  while (1)
                  {
                    v175 = (uint64_t *)v177;
                    v212 = *(char *)(v177 + 55);
                    if (v212 >= 0)
                      v213 = *(unsigned __int8 *)(v177 + 55);
                    else
                      v213 = *(_QWORD *)(v177 + 40);
                    if (v212 >= 0)
                      v214 = (const void *)(v177 + 32);
                    else
                      v214 = *(const void **)(v177 + 32);
                    if (v213 >= size)
                      v215 = size;
                    else
                      v215 = v213;
                    v216 = memcmp(v179, v214, v215);
                    v217 = size < v213;
                    if (v216)
                      v217 = v216 < 0;
                    if (!v217)
                    {
                      v218 = memcmp(v214, v179, v215);
                      v219 = v213 < size;
                      if (v218)
                        v219 = v218 < 0;
                      if (v219)
                        goto LABEL_382;
                      v220 = *(_DWORD *)(v177 + 56);
                      if (v172 >= v220)
                        break;
                    }
LABEL_366:
                    v177 = *(_QWORD *)v177;
                    v176 = v175;
                    if (!*v175)
                      goto LABEL_389;
                  }
                  if (v220 >= v172)
                  {
                    v221 = *(_DWORD *)(v177 + 60);
                    if (v173 >= v221)
                    {
                      if (v221 >= v173)
                      {
                        v222 = (char *)v177;
                        v223 = v503;
                        goto LABEL_416;
                      }
                      goto LABEL_382;
                    }
                    goto LABEL_366;
                  }
LABEL_382:
                  v177 = *(_QWORD *)(v177 + 8);
                  if (!v177)
                  {
                    v176 = v175 + 1;
                    goto LABEL_389;
                  }
                }
              }
            }
            while (1)
            {
LABEL_343:
              v200 = (char **)v177;
              v201 = *(char *)(v177 + 55);
              if (v201 >= 0)
                v202 = *(unsigned __int8 *)(v177 + 55);
              else
                v202 = *(_QWORD *)(v177 + 40);
              if (v201 >= 0)
                v203 = (const void *)(v177 + 32);
              else
                v203 = *(const void **)(v177 + 32);
              if (v202 >= size)
                v204 = size;
              else
                v204 = v202;
              v205 = memcmp(v179, v203, v204);
              v206 = size < v202;
              if (v205)
                v206 = v205 < 0;
              if (v206)
                break;
              v207 = memcmp(v203, v179, v204);
              v208 = v202 < size;
              if (v207)
                v208 = v207 < 0;
              if (!v208)
              {
                v209 = *(_DWORD *)(v177 + 56);
                if (v172 < v209)
                  break;
                if (v209 >= v172)
                {
                  v210 = *(_DWORD *)(v177 + 60);
                  if (v173 < v210)
                    break;
                  if (v210 >= v173)
                  {
                    v211 = (char *)v177;
                    v169 = v503;
                    goto LABEL_452;
                  }
                }
              }
              v177 = *(_QWORD *)(v177 + 8);
              if (!v177)
              {
                v239 = v200 + 1;
                goto LABEL_423;
              }
            }
            v177 = *(_QWORD *)v177;
            if (*v200)
              goto LABEL_343;
            v239 = v200;
LABEL_423:
            v169 = v503;
            v211 = (char *)operator new(0x58uLL);
            v240 = (std::string *)(v211 + 32);
            if (v497 < 0)
            {
              std::string::__init_copy_ctor_external(v240, (const std::string::value_type *)v496, *((std::string::size_type *)&v496 + 1));
              v172 = v539;
              v173 = v540;
            }
            else
            {
              *(_OWORD *)&v240->__r_.__value_.__l.__data_ = *(_OWORD *)&v538.__r_.__value_.__l.__data_;
              *((_QWORD *)v211 + 6) = *((_QWORD *)&v538.__r_.__value_.__l + 2);
            }
            *((_DWORD *)v211 + 14) = v172;
            *((_DWORD *)v211 + 15) = v173;
            *((_QWORD *)v211 + 9) = 0;
            *((_QWORD *)v211 + 10) = 0;
            *((_QWORD *)v211 + 8) = 0;
            *(_QWORD *)v211 = 0;
            *((_QWORD *)v211 + 1) = 0;
            *((_QWORD *)v211 + 2) = v200;
            *v239 = v211;
            v241 = v211;
            if (*v545)
            {
              v545 = (uint64_t *)*v545;
              v241 = *v239;
            }
            v242 = (uint64_t)v546;
            v241[24] = v241 == v546;
            if (v241 != (char *)v242)
            {
              do
              {
                v243 = *((_QWORD *)v241 + 2);
                if (*(_BYTE *)(v243 + 24))
                  break;
                v244 = *(char **)(v243 + 16);
                v245 = *(_QWORD *)v244;
                if (*(_QWORD *)v244 == v243)
                {
                  v248 = *((_QWORD *)v244 + 1);
                  if (!v248 || (v249 = *(unsigned __int8 *)(v248 + 24), v246 = (_BYTE *)(v248 + 24), v249))
                  {
                    if (*(char **)v243 == v241)
                    {
                      *(_BYTE *)(v243 + 24) = 1;
                      v244[24] = 0;
                      v252 = *(_QWORD *)(v243 + 8);
                      *(_QWORD *)v244 = v252;
                      if (v252)
                        goto LABEL_442;
                    }
                    else
                    {
                      v250 = *(uint64_t **)(v243 + 8);
                      v251 = *v250;
                      *(_QWORD *)(v243 + 8) = *v250;
                      if (v251)
                      {
                        *(_QWORD *)(v251 + 16) = v243;
                        v244 = *(char **)(v243 + 16);
                      }
                      v250[2] = (uint64_t)v244;
                      *(_QWORD *)(*(_QWORD *)(v243 + 16) + 8 * (**(_QWORD **)(v243 + 16) != v243)) = v250;
                      *v250 = v243;
                      *(_QWORD *)(v243 + 16) = v250;
                      v244 = (char *)v250[2];
                      v243 = *(_QWORD *)v244;
                      *((_BYTE *)v250 + 24) = 1;
                      v244[24] = 0;
                      v252 = *(_QWORD *)(v243 + 8);
                      *(_QWORD *)v244 = v252;
                      if (v252)
LABEL_442:
                        *(_QWORD *)(v252 + 16) = v244;
                    }
                    *(_QWORD *)(v243 + 16) = *((_QWORD *)v244 + 2);
                    *(_QWORD *)(*((_QWORD *)v244 + 2) + 8 * (**((_QWORD **)v244 + 2) != (_QWORD)v244)) = v243;
                    *(_QWORD *)(v243 + 8) = v244;
LABEL_450:
                    *((_QWORD *)v244 + 2) = v243;
                    break;
                  }
                }
                else if (!v245 || (v247 = *(unsigned __int8 *)(v245 + 24), v246 = (_BYTE *)(v245 + 24), v247))
                {
                  if (*(char **)v243 == v241)
                  {
                    v263 = *((_QWORD *)v241 + 1);
                    *(_QWORD *)v243 = v263;
                    if (v263)
                    {
                      *(_QWORD *)(v263 + 16) = v243;
                      v244 = *(char **)(v243 + 16);
                    }
                    *((_QWORD *)v241 + 2) = v244;
                    *(_QWORD *)(*(_QWORD *)(v243 + 16) + 8 * (**(_QWORD **)(v243 + 16) != v243)) = v241;
                    *((_QWORD *)v241 + 1) = v243;
                    *(_QWORD *)(v243 + 16) = v241;
                    v244 = (char *)*((_QWORD *)v241 + 2);
                    v241[24] = 1;
                    v244[24] = 0;
                    v243 = *((_QWORD *)v244 + 1);
                    v253 = *(char **)v243;
                    *((_QWORD *)v244 + 1) = *(_QWORD *)v243;
                    if (v253)
LABEL_448:
                      *((_QWORD *)v253 + 2) = v244;
                  }
                  else
                  {
                    *(_BYTE *)(v243 + 24) = 1;
                    v244[24] = 0;
                    v243 = *((_QWORD *)v244 + 1);
                    v253 = *(char **)v243;
                    *((_QWORD *)v244 + 1) = *(_QWORD *)v243;
                    if (v253)
                      goto LABEL_448;
                  }
                  *(_QWORD *)(v243 + 16) = *((_QWORD *)v244 + 2);
                  *(_QWORD *)(*((_QWORD *)v244 + 2) + 8 * (**((_QWORD **)v244 + 2) != (_QWORD)v244)) = v243;
                  *(_QWORD *)v243 = v244;
                  goto LABEL_450;
                }
                *(_BYTE *)(v243 + 24) = 1;
                v241 = v244;
                v244[24] = v244 == (char *)v242;
                *v246 = 1;
              }
              while (v244 != (char *)v242);
            }
            ++v547;
LABEL_452:
            v535 = (unint64_t)__str;
            v254 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v542, (uint64_t)__str, (uint64_t)&std::piecewise_construct, (__int128 **)&v535);
            std::string::operator=((std::string *)(v254 + 5), (const std::string *)(v211 + 64));
            v255 = v501[4];
            v256 = v501[3] + 24 * v169;
            v257 = v256 + 24;
            if (v256 + 24 != v255)
            {
              do
              {
                if (*(char *)(v256 + 23) < 0)
                  operator delete(*(void **)v256);
                *(_OWORD *)v256 = *(_OWORD *)(v256 + 24);
                *(_QWORD *)(v256 + 16) = *(_QWORD *)(v256 + 40);
                *(_BYTE *)(v256 + 47) = 0;
                v258 = v256 + 48;
                *(_BYTE *)(v256 + 24) = 0;
                v256 += 24;
              }
              while (v258 != v255);
              v257 = v501[4];
            }
            while (v257 != v256)
            {
              if (*(char *)(v257 - 1) < 0)
                operator delete(*(void **)(v257 - 24));
              v257 -= 24;
            }
            v501[4] = v256;
            v259 = v500[4];
            v260 = v500[3] + 24 * v169;
            v261 = v260 + 24;
            if (v260 + 24 != v259)
            {
              do
              {
                if (*(char *)(v260 + 23) < 0)
                  operator delete(*(void **)v260);
                *(_OWORD *)v260 = *(_OWORD *)(v260 + 24);
                *(_QWORD *)(v260 + 16) = *(_QWORD *)(v260 + 40);
                *(_BYTE *)(v260 + 47) = 0;
                v262 = v260 + 48;
                *(_BYTE *)(v260 + 24) = 0;
                v260 += 24;
              }
              while (v262 != v259);
              v261 = v500[4];
            }
            while (v261 != v260)
            {
              if (*(char *)(v261 - 1) < 0)
                operator delete(*(void **)(v261 - 24));
              v261 -= 24;
            }
            v500[4] = v260;
            --v499;
            if (SHIBYTE(v538.__r_.__value_.__r.__words[2]) < 0)
LABEL_286:
              operator delete(v538.__r_.__value_.__l.__data_);
LABEL_287:
            if (v169 < v499)
              continue;
            break;
          }
          v152 = v510;
LABEL_270:
          v156 = v541 + 1;
          v541 = v156;
          v155 = *((_QWORD *)v152 + 4);
          v157 = *((_QWORD *)v152 + 5);
          if (v156 >= (v157 - v155) >> 4)
          {
            v535 = 0;
            if (v157 != v155)
            {
              do
              {
                v538.__r_.__value_.__r.__words[0] = (std::string::size_type)&v535;
                v340 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v152 + 56, &v535, (uint64_t)&std::piecewise_construct, (uint64_t **)&v538);
                v341 = (std::string *)v340[3];
                v342 = (std::string *)v340[4];
                while (v341 != v342)
                {
                  if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&v542, (uint64_t)v341))
                  {
                    v343 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&v542, (uint64_t)v341);
                    if (!v343)
                      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                    std::string::operator=(v341, (const std::string *)(v343 + 5));
                  }
                  ++v341;
                }
                ++v535;
                v152 = v510;
              }
              while (v535 < (uint64_t)(*((_QWORD *)v510 + 5) - *((_QWORD *)v510 + 4)) >> 4);
            }
            break;
          }
        }
      }
      *(_OWORD *)&v538.__r_.__value_.__r.__words[1] = 0uLL;
      v538.__r_.__value_.__r.__words[0] = (std::string::size_type)&v538.__r_.__value_.__l.__size_;
      v264 = (char *)*((_QWORD *)v152 + 32);
      v265 = (char **)((char *)v152 + 264);
      if (v264 != (char *)v152 + 264)
      {
        do
        {
          if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&v542, (uint64_t)(v264 + 32)))
          {
            v305 = v538.__r_.__value_.__l.__size_;
            p_size = &v538.__r_.__value_.__l.__size_;
            v307 = &v538.__r_.__value_.__l.__size_;
            if (v538.__r_.__value_.__l.__size_)
            {
              v308 = v264[55];
              if (v308 >= 0)
                v309 = v264[55];
              else
                v309 = *((_QWORD *)v264 + 5);
              if (v308 >= 0)
                v310 = v264 + 32;
              else
                v310 = (const void *)*((_QWORD *)v264 + 4);
              while (1)
              {
                while (1)
                {
                  p_size = (std::string::size_type *)v305;
                  v313 = *(const void **)(v305 + 32);
                  v311 = v305 + 32;
                  v312 = v313;
                  v314 = *(char *)(v311 + 23);
                  if (v314 >= 0)
                    v315 = *(unsigned __int8 *)(v311 + 23);
                  else
                    v315 = *(_QWORD *)(v311 + 8);
                  if (v314 >= 0)
                    v316 = (const void *)v311;
                  else
                    v316 = v312;
                  if (v315 >= v309)
                    v317 = v309;
                  else
                    v317 = v315;
                  v318 = memcmp(v310, v316, v317);
                  v319 = v309 < v315;
                  if (v318)
                    v319 = v318 < 0;
                  if (!v319)
                    break;
                  v305 = *p_size;
                  v307 = p_size;
                  if (!*p_size)
                    goto LABEL_578;
                }
                v320 = memcmp(v316, v310, v317);
                v321 = v315 < v309;
                if (v320)
                  v321 = v320 < 0;
                if (!v321)
                  break;
                v305 = p_size[1];
                if (!v305)
                {
                  v307 = p_size + 1;
                  goto LABEL_578;
                }
              }
            }
            else
            {
LABEL_578:
              v322 = (char *)operator new(0x38uLL);
              v323 = (std::string *)(v322 + 32);
              if (v264[55] < 0)
              {
                std::string::__init_copy_ctor_external(v323, *((const std::string::value_type **)v264 + 4), *((_QWORD *)v264 + 5));
              }
              else
              {
                v324 = *((_OWORD *)v264 + 2);
                *((_QWORD *)v322 + 6) = *((_QWORD *)v264 + 6);
                *(_OWORD *)&v323->__r_.__value_.__l.__data_ = v324;
              }
              *(_QWORD *)v322 = 0;
              *((_QWORD *)v322 + 1) = 0;
              *((_QWORD *)v322 + 2) = p_size;
              *v307 = (std::string::size_type)v322;
              if (*(_QWORD *)v538.__r_.__value_.__l.__data_)
              {
                v538.__r_.__value_.__r.__words[0] = *(_QWORD *)v538.__r_.__value_.__l.__data_;
                v322 = (char *)*v307;
              }
              v325 = v538.__r_.__value_.__l.__size_;
              v37 = v322 == (char *)v538.__r_.__value_.__l.__size_;
              v322[24] = v322 == (char *)v538.__r_.__value_.__l.__size_;
              if (!v37)
              {
                do
                {
                  v326 = *((_QWORD *)v322 + 2);
                  if (*(_BYTE *)(v326 + 24))
                    break;
                  v327 = *(_BYTE **)(v326 + 16);
                  v328 = *(_QWORD *)v327;
                  if (*(_QWORD *)v327 == v326)
                  {
                    v331 = *((_QWORD *)v327 + 1);
                    if (!v331 || (v332 = *(unsigned __int8 *)(v331 + 24), v329 = (_BYTE *)(v331 + 24), v332))
                    {
                      if (*(char **)v326 == v322)
                      {
                        *(_BYTE *)(v326 + 24) = 1;
                        v327[24] = 0;
                        v335 = *(_QWORD *)(v326 + 8);
                        *(_QWORD *)v327 = v335;
                        if (v335)
                          goto LABEL_598;
                      }
                      else
                      {
                        v333 = *(uint64_t **)(v326 + 8);
                        v334 = *v333;
                        *(_QWORD *)(v326 + 8) = *v333;
                        if (v334)
                        {
                          *(_QWORD *)(v334 + 16) = v326;
                          v327 = *(_BYTE **)(v326 + 16);
                        }
                        v333[2] = (uint64_t)v327;
                        *(_QWORD *)(*(_QWORD *)(v326 + 16) + 8 * (**(_QWORD **)(v326 + 16) != v326)) = v333;
                        *v333 = v326;
                        *(_QWORD *)(v326 + 16) = v333;
                        v327 = (_BYTE *)v333[2];
                        v326 = *(_QWORD *)v327;
                        *((_BYTE *)v333 + 24) = 1;
                        v327[24] = 0;
                        v335 = *(_QWORD *)(v326 + 8);
                        *(_QWORD *)v327 = v335;
                        if (v335)
LABEL_598:
                          *(_QWORD *)(v335 + 16) = v327;
                      }
                      *(_QWORD *)(v326 + 16) = *((_QWORD *)v327 + 2);
                      *(_QWORD *)(*((_QWORD *)v327 + 2) + 8 * (**((_QWORD **)v327 + 2) != (_QWORD)v327)) = v326;
                      *(_QWORD *)(v326 + 8) = v327;
LABEL_604:
                      *((_QWORD *)v327 + 2) = v326;
                      break;
                    }
                  }
                  else if (!v328 || (v330 = *(unsigned __int8 *)(v328 + 24), v329 = (_BYTE *)(v328 + 24), v330))
                  {
                    if (*(char **)v326 == v322)
                    {
                      v339 = *((_QWORD *)v322 + 1);
                      *(_QWORD *)v326 = v339;
                      if (v339)
                      {
                        *(_QWORD *)(v339 + 16) = v326;
                        v327 = *(_BYTE **)(v326 + 16);
                      }
                      *((_QWORD *)v322 + 2) = v327;
                      *(_QWORD *)(*(_QWORD *)(v326 + 16) + 8 * (**(_QWORD **)(v326 + 16) != v326)) = v322;
                      *((_QWORD *)v322 + 1) = v326;
                      *(_QWORD *)(v326 + 16) = v322;
                      v327 = (_BYTE *)*((_QWORD *)v322 + 2);
                      v322[24] = 1;
                      v327[24] = 0;
                      v326 = *((_QWORD *)v327 + 1);
                      v336 = *(char **)v326;
                      *((_QWORD *)v327 + 1) = *(_QWORD *)v326;
                      if (v336)
LABEL_602:
                        *((_QWORD *)v336 + 2) = v327;
                    }
                    else
                    {
                      *(_BYTE *)(v326 + 24) = 1;
                      v327[24] = 0;
                      v326 = *((_QWORD *)v327 + 1);
                      v336 = *(char **)v326;
                      *((_QWORD *)v327 + 1) = *(_QWORD *)v326;
                      if (v336)
                        goto LABEL_602;
                    }
                    *(_QWORD *)(v326 + 16) = *((_QWORD *)v327 + 2);
                    *(_QWORD *)(*((_QWORD *)v327 + 2) + 8 * (**((_QWORD **)v327 + 2) != (_QWORD)v327)) = v326;
                    *(_QWORD *)v326 = v327;
                    goto LABEL_604;
                  }
                  *(_BYTE *)(v326 + 24) = 1;
                  v322 = v327;
                  v327[24] = v327 == (_BYTE *)v325;
                  *v329 = 1;
                }
                while (v327 != (_BYTE *)v325);
              }
              ++v538.__r_.__value_.__r.__words[2];
            }
          }
          v337 = (char *)*((_QWORD *)v264 + 1);
          if (v337)
          {
            do
            {
              v338 = (char **)v337;
              v337 = *(char **)v337;
            }
            while (v337);
          }
          else
          {
            do
            {
              v338 = (char **)*((_QWORD *)v264 + 2);
              v37 = *v338 == v264;
              v264 = (char *)v338;
            }
            while (!v37);
          }
          v264 = (char *)v338;
        }
        while (v338 != v265);
      }
      std::__tree<std::string>::destroy((uint64_t)v152 + 256, *((char **)v152 + 33));
      *((_QWORD *)v152 + 33) = 0;
      *((_QWORD *)v152 + 34) = 0;
      *((_QWORD *)v152 + 32) = v265;
      v266 = v538.__r_.__value_.__r.__words[0];
      if ((std::string::size_type *)v538.__r_.__value_.__l.__data_ != &v538.__r_.__value_.__r.__words[1])
      {
        v504 = (_QWORD **)((char *)v152 + 256);
        v267 = v538.__r_.__value_.__r.__words[0] + 32;
        v268 = (char **)((char *)v152 + 264);
        v269 = (char **)((char *)v152 + 264);
LABEL_510:
        v286 = (char *)operator new(0x40uLL);
        v287 = (std::string *)(v286 + 32);
        if (*(char *)(v266 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(v287, *(const std::string::value_type **)(v266 + 32), *(_QWORD *)(v266 + 40));
        }
        else
        {
          v288 = *(_OWORD *)v267;
          *((_QWORD *)v286 + 6) = *(_QWORD *)(v267 + 16);
          *(_OWORD *)&v287->__r_.__value_.__l.__data_ = v288;
        }
        v286[56] = 0;
        *(_QWORD *)v286 = 0;
        *((_QWORD *)v286 + 1) = 0;
        *((_QWORD *)v286 + 2) = v269;
        *v268 = v286;
        v289 = (_QWORD *)**v504;
        v290 = v286;
        if (v289)
        {
          *v504 = v289;
          v290 = *v268;
        }
        v291 = *v265;
        v37 = v290 == *v265;
        v290[24] = v37;
        if (!v37)
        {
          do
          {
            v292 = *((_QWORD *)v290 + 2);
            if (*(_BYTE *)(v292 + 24))
              break;
            v293 = *(char **)(v292 + 16);
            v294 = *(_QWORD *)v293;
            if (*(_QWORD *)v293 == v292)
            {
              v297 = *((_QWORD *)v293 + 1);
              if (!v297 || (v298 = *(unsigned __int8 *)(v297 + 24), v295 = (_BYTE *)(v297 + 24), v298))
              {
                if (*(char **)v292 == v290)
                {
                  *(_BYTE *)(v292 + 24) = 1;
                  v293[24] = 0;
                  v301 = *(_QWORD *)(v292 + 8);
                  *(_QWORD *)v293 = v301;
                  if (v301)
                    goto LABEL_530;
                }
                else
                {
                  v299 = *(uint64_t **)(v292 + 8);
                  v300 = *v299;
                  *(_QWORD *)(v292 + 8) = *v299;
                  if (v300)
                  {
                    *(_QWORD *)(v300 + 16) = v292;
                    v293 = *(char **)(v292 + 16);
                  }
                  v299[2] = (uint64_t)v293;
                  *(_QWORD *)(*(_QWORD *)(v292 + 16) + 8 * (**(_QWORD **)(v292 + 16) != v292)) = v299;
                  *v299 = v292;
                  *(_QWORD *)(v292 + 16) = v299;
                  v293 = (char *)v299[2];
                  v292 = *(_QWORD *)v293;
                  *((_BYTE *)v299 + 24) = 1;
                  v293[24] = 0;
                  v301 = *(_QWORD *)(v292 + 8);
                  *(_QWORD *)v293 = v301;
                  if (v301)
LABEL_530:
                    *(_QWORD *)(v301 + 16) = v293;
                }
                *(_QWORD *)(v292 + 16) = *((_QWORD *)v293 + 2);
                *(_QWORD *)(*((_QWORD *)v293 + 2) + 8 * (**((_QWORD **)v293 + 2) != (_QWORD)v293)) = v292;
                *(_QWORD *)(v292 + 8) = v293;
LABEL_536:
                *((_QWORD *)v293 + 2) = v292;
                break;
              }
            }
            else if (!v294 || (v296 = *(unsigned __int8 *)(v294 + 24), v295 = (_BYTE *)(v294 + 24), v296))
            {
              if (*(char **)v292 == v290)
              {
                v304 = *((_QWORD *)v290 + 1);
                *(_QWORD *)v292 = v304;
                if (v304)
                {
                  *(_QWORD *)(v304 + 16) = v292;
                  v293 = *(char **)(v292 + 16);
                }
                *((_QWORD *)v290 + 2) = v293;
                *(_QWORD *)(*(_QWORD *)(v292 + 16) + 8 * (**(_QWORD **)(v292 + 16) != v292)) = v290;
                *((_QWORD *)v290 + 1) = v292;
                *(_QWORD *)(v292 + 16) = v290;
                v293 = (char *)*((_QWORD *)v290 + 2);
                v290[24] = 1;
                v293[24] = 0;
                v292 = *((_QWORD *)v293 + 1);
                v302 = *(char **)v292;
                *((_QWORD *)v293 + 1) = *(_QWORD *)v292;
                if (v302)
LABEL_534:
                  *((_QWORD *)v302 + 2) = v293;
              }
              else
              {
                *(_BYTE *)(v292 + 24) = 1;
                v293[24] = 0;
                v292 = *((_QWORD *)v293 + 1);
                v302 = *(char **)v292;
                *((_QWORD *)v293 + 1) = *(_QWORD *)v292;
                if (v302)
                  goto LABEL_534;
              }
              *(_QWORD *)(v292 + 16) = *((_QWORD *)v293 + 2);
              *(_QWORD *)(*((_QWORD *)v293 + 2) + 8 * (**((_QWORD **)v293 + 2) != (_QWORD)v293)) = v292;
              *(_QWORD *)v292 = v293;
              goto LABEL_536;
            }
            *(_BYTE *)(v292 + 24) = 1;
            v290 = v293;
            v293[24] = v293 == v291;
            *v295 = 1;
          }
          while (v293 != v291);
        }
        ++*((_QWORD *)v152 + 34);
        v286[56] = 1;
        v285 = *(std::string **)(v266 + 8);
        if (v285)
        {
          do
          {
LABEL_538:
            v303 = v285;
            v285 = (std::string *)v285->__r_.__value_.__r.__words[0];
          }
          while (v285);
          goto LABEL_542;
        }
        while (1)
        {
          do
          {
            v303 = *(std::string **)(v266 + 16);
            v37 = v303->__r_.__value_.__r.__words[0] == v266;
            v266 = (std::string::size_type)v303;
          }
          while (!v37);
LABEL_542:
          if (v303 == (std::string *)&v538.__r_.__value_.__r.__words[1])
            break;
          v273 = *v265;
          v266 = (std::string::size_type)v303;
          v267 = (std::string::size_type)&v303[1].__r_.__value_.__l.__size_;
          v268 = (char **)((char *)v152 + 264);
          v269 = (char **)((char *)v152 + 264);
          if (!*v265)
            goto LABEL_510;
          v270 = v303[2].__r_.__value_.__s.__data_[7];
          if (v270 >= 0)
            v271 = v303[2].__r_.__value_.__s.__data_[7];
          else
            v271 = v303[1].__r_.__value_.__r.__words[2];
          if (v270 >= 0)
            v272 = &v303[1].__r_.__value_.__l.__size_;
          else
            v272 = (std::string::size_type *)v303[1].__r_.__value_.__l.__size_;
          while (1)
          {
            while (1)
            {
              v269 = (char **)v273;
              v276 = (char *)*((_QWORD *)v273 + 4);
              v274 = v273 + 32;
              v275 = v276;
              v277 = v274[23];
              if (v277 >= 0)
                v278 = v274[23];
              else
                v278 = *((_QWORD *)v274 + 1);
              if (v277 >= 0)
                v279 = v274;
              else
                v279 = v275;
              if (v278 >= v271)
                v280 = v271;
              else
                v280 = v278;
              v281 = memcmp(v272, v279, v280);
              v282 = v271 < v278;
              if (v281)
                v282 = v281 < 0;
              if (!v282)
                break;
              v273 = *v269;
              v268 = v269;
              if (!*v269)
                goto LABEL_510;
            }
            v283 = memcmp(v279, v272, v280);
            v284 = v278 < v271;
            if (v283)
              v284 = v283 < 0;
            if (!v284)
              break;
            v273 = v269[1];
            if (!v273)
            {
              v268 = v269 + 1;
              goto LABEL_510;
            }
          }
          *((_BYTE *)v269 + 56) = 1;
          v285 = *(std::string **)(v266 + 8);
          if (v285)
            goto LABEL_538;
        }
      }
      v536 = 0;
      v537 = 0;
      v535 = (unint64_t)&v536;
      v344 = (char *)*((_QWORD *)v510 + 38);
      v505 = v510;
      v345 = (char **)((char *)v510 + 312);
      v346 = v495;
      if (v344 != (char *)v510 + 312)
      {
        do
        {
          v387 = (uint64_t *)(v344 + 32);
          if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&v542, (uint64_t)(v344 + 32)))
          {
            v388 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&v542, (uint64_t)(v344 + 32));
            if (!v388)
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            v387 = v388 + 5;
          }
          v389 = v536;
          v390 = &v536;
          v391 = &v536;
          if (v536)
          {
            v392 = *((char *)v387 + 23);
            if (v392 >= 0)
              v393 = *((unsigned __int8 *)v387 + 23);
            else
              v393 = v387[1];
            if (v392 >= 0)
              v394 = (const std::string::value_type *)v387;
            else
              v394 = (const std::string::value_type *)*v387;
            while (1)
            {
              while (1)
              {
                v390 = (char **)v389;
                v397 = (char *)*((_QWORD *)v389 + 4);
                v395 = v389 + 32;
                v396 = v397;
                v398 = v395[23];
                if (v398 >= 0)
                  v399 = v395[23];
                else
                  v399 = *((_QWORD *)v395 + 1);
                if (v398 >= 0)
                  v400 = v395;
                else
                  v400 = v396;
                if (v399 >= v393)
                  v401 = v393;
                else
                  v401 = v399;
                v402 = memcmp(v394, v400, v401);
                v403 = v393 < v399;
                if (v402)
                  v403 = v402 < 0;
                if (!v403)
                  break;
                v389 = *v390;
                v391 = v390;
                if (!*v390)
                  goto LABEL_724;
              }
              v404 = memcmp(v400, v394, v401);
              v405 = v399 < v393;
              if (v404)
                v405 = v404 < 0;
              if (!v405)
                break;
              v389 = v390[1];
              if (!v389)
              {
                v391 = v390 + 1;
                goto LABEL_724;
              }
            }
          }
          else
          {
LABEL_724:
            v406 = (char *)operator new(0x38uLL);
            v407 = (std::string *)(v406 + 32);
            if (*((char *)v387 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v407, (const std::string::value_type *)*v387, v387[1]);
            }
            else
            {
              v408 = *(_OWORD *)v387;
              *((_QWORD *)v406 + 6) = v387[2];
              *(_OWORD *)&v407->__r_.__value_.__l.__data_ = v408;
            }
            *(_QWORD *)v406 = 0;
            *((_QWORD *)v406 + 1) = 0;
            *((_QWORD *)v406 + 2) = v390;
            *v391 = v406;
            if (*(_QWORD *)v535)
            {
              v535 = *(_QWORD *)v535;
              v406 = *v391;
            }
            v409 = v536;
            v37 = v406 == v536;
            v406[24] = v406 == v536;
            if (!v37)
            {
              do
              {
                v410 = *((_QWORD *)v406 + 2);
                if (*(_BYTE *)(v410 + 24))
                  break;
                v411 = *(char **)(v410 + 16);
                v412 = *(_QWORD *)v411;
                if (*(_QWORD *)v411 == v410)
                {
                  v415 = *((_QWORD *)v411 + 1);
                  if (!v415 || (v416 = *(unsigned __int8 *)(v415 + 24), v413 = (_BYTE *)(v415 + 24), v416))
                  {
                    if (*(char **)v410 == v406)
                    {
                      *(_BYTE *)(v410 + 24) = 1;
                      v411[24] = 0;
                      v419 = *(_QWORD *)(v410 + 8);
                      *(_QWORD *)v411 = v419;
                      if (v419)
                        goto LABEL_744;
                    }
                    else
                    {
                      v417 = *(uint64_t **)(v410 + 8);
                      v418 = *v417;
                      *(_QWORD *)(v410 + 8) = *v417;
                      if (v418)
                      {
                        *(_QWORD *)(v418 + 16) = v410;
                        v411 = *(char **)(v410 + 16);
                      }
                      v417[2] = (uint64_t)v411;
                      *(_QWORD *)(*(_QWORD *)(v410 + 16) + 8 * (**(_QWORD **)(v410 + 16) != v410)) = v417;
                      *v417 = v410;
                      *(_QWORD *)(v410 + 16) = v417;
                      v411 = (char *)v417[2];
                      v410 = *(_QWORD *)v411;
                      *((_BYTE *)v417 + 24) = 1;
                      v411[24] = 0;
                      v419 = *(_QWORD *)(v410 + 8);
                      *(_QWORD *)v411 = v419;
                      if (v419)
LABEL_744:
                        *(_QWORD *)(v419 + 16) = v411;
                    }
                    *(_QWORD *)(v410 + 16) = *((_QWORD *)v411 + 2);
                    *(_QWORD *)(*((_QWORD *)v411 + 2) + 8 * (**((_QWORD **)v411 + 2) != (_QWORD)v411)) = v410;
                    *(_QWORD *)(v410 + 8) = v411;
LABEL_750:
                    *((_QWORD *)v411 + 2) = v410;
                    break;
                  }
                }
                else if (!v412 || (v414 = *(unsigned __int8 *)(v412 + 24), v413 = (_BYTE *)(v412 + 24), v414))
                {
                  if (*(char **)v410 == v406)
                  {
                    v423 = *((_QWORD *)v406 + 1);
                    *(_QWORD *)v410 = v423;
                    if (v423)
                    {
                      *(_QWORD *)(v423 + 16) = v410;
                      v411 = *(char **)(v410 + 16);
                    }
                    *((_QWORD *)v406 + 2) = v411;
                    *(_QWORD *)(*(_QWORD *)(v410 + 16) + 8 * (**(_QWORD **)(v410 + 16) != v410)) = v406;
                    *((_QWORD *)v406 + 1) = v410;
                    *(_QWORD *)(v410 + 16) = v406;
                    v411 = (char *)*((_QWORD *)v406 + 2);
                    v406[24] = 1;
                    v411[24] = 0;
                    v410 = *((_QWORD *)v411 + 1);
                    v420 = *(char **)v410;
                    *((_QWORD *)v411 + 1) = *(_QWORD *)v410;
                    if (v420)
LABEL_748:
                      *((_QWORD *)v420 + 2) = v411;
                  }
                  else
                  {
                    *(_BYTE *)(v410 + 24) = 1;
                    v411[24] = 0;
                    v410 = *((_QWORD *)v411 + 1);
                    v420 = *(char **)v410;
                    *((_QWORD *)v411 + 1) = *(_QWORD *)v410;
                    if (v420)
                      goto LABEL_748;
                  }
                  *(_QWORD *)(v410 + 16) = *((_QWORD *)v411 + 2);
                  *(_QWORD *)(*((_QWORD *)v411 + 2) + 8 * (**((_QWORD **)v411 + 2) != (_QWORD)v411)) = v410;
                  *(_QWORD *)v410 = v411;
                  goto LABEL_750;
                }
                *(_BYTE *)(v410 + 24) = 1;
                v406 = v411;
                v411[24] = v411 == v409;
                *v413 = 1;
              }
              while (v411 != v409);
            }
            ++v537;
          }
          v421 = (char *)*((_QWORD *)v344 + 1);
          if (v421)
          {
            do
            {
              v422 = (char **)v421;
              v421 = *(char **)v421;
            }
            while (v421);
          }
          else
          {
            do
            {
              v422 = (char **)*((_QWORD *)v344 + 2);
              v37 = *v422 == v344;
              v344 = (char *)v422;
            }
            while (!v37);
          }
          v344 = (char *)v422;
        }
        while (v422 != v345);
      }
      v347 = (_QWORD **)((char *)v505 + 304);
      std::__tree<std::string>::destroy((uint64_t)v505 + 304, *((char **)v505 + 39));
      *((_QWORD *)v505 + 39) = 0;
      *((_QWORD *)v505 + 40) = 0;
      *((_QWORD *)v505 + 38) = v345;
      v348 = v535;
      if ((char **)v535 != &v536)
      {
        v349 = (__int128 *)(v535 + 32);
        v350 = v345;
        v351 = v345;
LABEL_654:
        v368 = (char *)operator new(0x40uLL);
        v369 = (std::string *)(v368 + 32);
        if (*(char *)(v348 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(v369, *(const std::string::value_type **)(v348 + 32), *(_QWORD *)(v348 + 40));
        }
        else
        {
          v370 = *v349;
          *((_QWORD *)v368 + 6) = *((_QWORD *)v349 + 2);
          *(_OWORD *)&v369->__r_.__value_.__l.__data_ = v370;
        }
        v368[56] = 0;
        *(_QWORD *)v368 = 0;
        *((_QWORD *)v368 + 1) = 0;
        *((_QWORD *)v368 + 2) = v351;
        *v350 = v368;
        v371 = (_QWORD *)**v347;
        v372 = v368;
        v346 = v495;
        if (v371)
        {
          *v347 = v371;
          v372 = *v350;
        }
        v373 = *v345;
        v37 = v372 == *v345;
        v372[24] = v37;
        if (!v37)
        {
          do
          {
            v374 = *((_QWORD *)v372 + 2);
            if (*(_BYTE *)(v374 + 24))
              break;
            v375 = *(char **)(v374 + 16);
            v376 = *(_QWORD *)v375;
            if (*(_QWORD *)v375 == v374)
            {
              v379 = *((_QWORD *)v375 + 1);
              if (!v379 || (v380 = *(unsigned __int8 *)(v379 + 24), v377 = (_BYTE *)(v379 + 24), v380))
              {
                if (*(char **)v374 == v372)
                {
                  *(_BYTE *)(v374 + 24) = 1;
                  v375[24] = 0;
                  v383 = *(_QWORD *)(v374 + 8);
                  *(_QWORD *)v375 = v383;
                  if (v383)
                    goto LABEL_674;
                }
                else
                {
                  v381 = *(uint64_t **)(v374 + 8);
                  v382 = *v381;
                  *(_QWORD *)(v374 + 8) = *v381;
                  if (v382)
                  {
                    *(_QWORD *)(v382 + 16) = v374;
                    v375 = *(char **)(v374 + 16);
                  }
                  v381[2] = (uint64_t)v375;
                  *(_QWORD *)(*(_QWORD *)(v374 + 16) + 8 * (**(_QWORD **)(v374 + 16) != v374)) = v381;
                  *v381 = v374;
                  *(_QWORD *)(v374 + 16) = v381;
                  v375 = (char *)v381[2];
                  v374 = *(_QWORD *)v375;
                  *((_BYTE *)v381 + 24) = 1;
                  v375[24] = 0;
                  v383 = *(_QWORD *)(v374 + 8);
                  *(_QWORD *)v375 = v383;
                  if (v383)
LABEL_674:
                    *(_QWORD *)(v383 + 16) = v375;
                }
                *(_QWORD *)(v374 + 16) = *((_QWORD *)v375 + 2);
                *(_QWORD *)(*((_QWORD *)v375 + 2) + 8 * (**((_QWORD **)v375 + 2) != (_QWORD)v375)) = v374;
                *(_QWORD *)(v374 + 8) = v375;
LABEL_680:
                *((_QWORD *)v375 + 2) = v374;
                break;
              }
            }
            else if (!v376 || (v378 = *(unsigned __int8 *)(v376 + 24), v377 = (_BYTE *)(v376 + 24), v378))
            {
              if (*(char **)v374 == v372)
              {
                v386 = *((_QWORD *)v372 + 1);
                *(_QWORD *)v374 = v386;
                if (v386)
                {
                  *(_QWORD *)(v386 + 16) = v374;
                  v375 = *(char **)(v374 + 16);
                }
                *((_QWORD *)v372 + 2) = v375;
                *(_QWORD *)(*(_QWORD *)(v374 + 16) + 8 * (**(_QWORD **)(v374 + 16) != v374)) = v372;
                *((_QWORD *)v372 + 1) = v374;
                *(_QWORD *)(v374 + 16) = v372;
                v375 = (char *)*((_QWORD *)v372 + 2);
                v372[24] = 1;
                v375[24] = 0;
                v374 = *((_QWORD *)v375 + 1);
                v384 = *(char **)v374;
                *((_QWORD *)v375 + 1) = *(_QWORD *)v374;
                if (v384)
LABEL_678:
                  *((_QWORD *)v384 + 2) = v375;
              }
              else
              {
                *(_BYTE *)(v374 + 24) = 1;
                v375[24] = 0;
                v374 = *((_QWORD *)v375 + 1);
                v384 = *(char **)v374;
                *((_QWORD *)v375 + 1) = *(_QWORD *)v374;
                if (v384)
                  goto LABEL_678;
              }
              *(_QWORD *)(v374 + 16) = *((_QWORD *)v375 + 2);
              *(_QWORD *)(*((_QWORD *)v375 + 2) + 8 * (**((_QWORD **)v375 + 2) != (_QWORD)v375)) = v374;
              *(_QWORD *)v374 = v375;
              goto LABEL_680;
            }
            *(_BYTE *)(v374 + 24) = 1;
            v372 = v375;
            v375[24] = v375 == v373;
            *v377 = 1;
          }
          while (v375 != v373);
        }
        ++*((_QWORD *)v505 + 40);
        v368[56] = 1;
        v367 = *(char **)(v348 + 8);
        if (v367)
        {
          do
          {
LABEL_682:
            v385 = (char **)v367;
            v367 = *(char **)v367;
          }
          while (v367);
          goto LABEL_686;
        }
        while (1)
        {
          do
          {
            v385 = *(char ***)(v348 + 16);
            v37 = *v385 == (char *)v348;
            v348 = (unint64_t)v385;
          }
          while (!v37);
LABEL_686:
          if (v385 == &v536)
            break;
          v355 = *v345;
          v348 = (unint64_t)v385;
          v349 = (__int128 *)(v385 + 4);
          v350 = v345;
          v351 = v345;
          if (!*v345)
            goto LABEL_654;
          v352 = *((char *)v385 + 55);
          if (v352 >= 0)
            v353 = *((unsigned __int8 *)v385 + 55);
          else
            v353 = (size_t)v385[5];
          if (v352 >= 0)
            v354 = (char *)(v385 + 4);
          else
            v354 = v385[4];
          while (1)
          {
            while (1)
            {
              v351 = (char **)v355;
              v358 = (const void *)*((_QWORD *)v355 + 4);
              v356 = v355 + 32;
              v357 = v358;
              v359 = *((char *)v356 + 23);
              if (v359 >= 0)
                v360 = *((unsigned __int8 *)v356 + 23);
              else
                v360 = v356[1];
              if (v359 >= 0)
                v361 = v356;
              else
                v361 = v357;
              if (v360 >= v353)
                v362 = v353;
              else
                v362 = v360;
              v363 = memcmp(v354, v361, v362);
              v364 = v353 < v360;
              if (v363)
                v364 = v363 < 0;
              if (!v364)
                break;
              v355 = *v351;
              v350 = v351;
              if (!*v351)
                goto LABEL_654;
            }
            v365 = memcmp(v361, v354, v362);
            v366 = v360 < v353;
            if (v365)
              v366 = v365 < 0;
            if (!v366)
              break;
            v355 = v351[1];
            if (!v355)
            {
              v350 = v351 + 1;
              goto LABEL_654;
            }
          }
          v346 = v495;
          *((_BYTE *)v351 + 56) = 1;
          v367 = *(char **)(v348 + 8);
          if (v367)
            goto LABEL_682;
        }
      }
      std::__tree<std::string>::destroy((uint64_t)&v535, v536);
      std::__tree<std::string>::destroy((uint64_t)&v538, (char *)v538.__r_.__value_.__l.__size_);
      v424 = (char *)v543;
      if ((_QWORD)v543)
      {
        while (1)
        {
          v425 = *(char **)v424;
          if (v424[63] < 0)
          {
            operator delete(*((void **)v424 + 5));
            if ((v424[39] & 0x80000000) == 0)
              goto LABEL_767;
LABEL_770:
            operator delete(*((void **)v424 + 2));
            operator delete(v424);
            v424 = v425;
            if (!v425)
              break;
          }
          else
          {
            if (v424[39] < 0)
              goto LABEL_770;
LABEL_767:
            operator delete(v424);
            v424 = v425;
            if (!v425)
              break;
          }
        }
      }
      v426 = (void *)v542;
      *(_QWORD *)&v542 = 0;
      if (v426)
        operator delete(v426);
      std::__tree<std::__value_type<std::tuple<std::string,int,int>,std::string>,std::__map_value_compare<std::tuple<std::string,int,int>,std::__value_type<std::tuple<std::string,int,int>,std::string>,std::less<std::tuple<std::string,int,int>>,true>,std::allocator<std::__value_type<std::tuple<std::string,int,int>,std::string>>>::destroy((uint64_t)&v545, (uint64_t)v546);
      v427 = v511;
      if (v511)
      {
        v428 = (unint64_t *)&v511->__shared_owners_;
        do
          v429 = __ldaxr(v428);
        while (__stlxr(v429 - 1, v428));
        if (!v429)
        {
          ((void (*)(std::__shared_weak_count *))v427->__on_zero_shared)(v427);
          std::__shared_weak_count::__release_weak(v427);
        }
      }
      Espresso::DTypeConverter::PerformConversions((Espresso::DTypeConverter *)&__dst);
      Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork((int8x8_t *)v524, v430);
      v431 = *((_QWORD *)v533 + 2);
      v508 = v524;
      v509 = v525;
      if (v525)
      {
        v432 = (unint64_t *)&v525->__shared_owners_;
        do
          v433 = __ldxr(v432);
        while (__stxr(v433 + 1, v432));
      }
      (*(void (**)(uint64_t, Espresso::net **))(*(_QWORD *)v431 + 88))(v431, &v508);
      v434 = v509;
      if (v509)
      {
        v435 = (unint64_t *)&v509->__shared_owners_;
        do
          v436 = __ldaxr(v435);
        while (__stlxr(v436 - 1, v435));
        if (!v436)
        {
          ((void (*)(std::__shared_weak_count *))v434->__on_zero_shared)(v434);
          std::__shared_weak_count::__release_weak(v434);
        }
      }
      v437 = v524;
      LODWORD(v541) = (***(uint64_t (****)(_QWORD))(*((_QWORD *)v524 + 2) + 8))(*(_QWORD *)(*((_QWORD *)v524 + 2) + 8));
      v542 = 0uLL;
      v538.__r_.__value_.__r.__words[0] = (std::string::size_type)&v541;
      v438 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t)v437 + 528, (unsigned int *)&v541, (uint64_t)&std::piecewise_construct, &v538);
      v542 = 0uLL;
      v439 = (std::__shared_weak_count *)v438[4];
      v438[3] = 0;
      v438[4] = 0;
      if (!v439)
        goto LABEL_790;
      v440 = (unint64_t *)&v439->__shared_owners_;
      do
        v441 = __ldaxr(v440);
      while (__stlxr(v441 - 1, v440));
      if (!v441)
      {
        ((void (*)(std::__shared_weak_count *))v439->__on_zero_shared)(v439);
        std::__shared_weak_count::__release_weak(v439);
        v442 = (std::__shared_weak_count *)*((_QWORD *)&v542 + 1);
        if (!*((_QWORD *)&v542 + 1))
          goto LABEL_796;
      }
      else
      {
LABEL_790:
        v442 = (std::__shared_weak_count *)*((_QWORD *)&v542 + 1);
        if (!*((_QWORD *)&v542 + 1))
          goto LABEL_796;
      }
      v443 = (unint64_t *)&v442->__shared_owners_;
      do
        v444 = __ldaxr(v443);
      while (__stlxr(v444 - 1, v443));
      if (!v444)
      {
        ((void (*)(std::__shared_weak_count *))v442->__on_zero_shared)(v442);
        std::__shared_weak_count::__release_weak(v442);
      }
LABEL_796:
      *((_QWORD *)&v542 + 1) = 0;
      *(_QWORD *)&v543 = 0;
      *(_QWORD *)&v542 = &off_1E2D854F0;
      v445 = (std::__shared_weak_count *)operator new(0x30uLL);
      v446 = v445;
      v445->__shared_owners_ = 0;
      v447 = (unint64_t *)&v445->__shared_owners_;
      v445->__shared_weak_owners_ = 0;
      v445->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD8F8;
      v445[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2D94720;
      v445[1].__shared_weak_owners_ = 0;
      v445[1].__shared_owners_ = 0x100000004;
      do
        v448 = __ldxr(v447);
      while (__stxr(v448 + 1, v447));
      *((_QWORD *)&v542 + 1) = v445 + 1;
      *(_QWORD *)&v543 = v445;
      do
        v449 = __ldaxr(v447);
      while (__stlxr(v449 - 1, v447));
      if (!v449)
      {
        ((void (*)(std::__shared_weak_count *))v445->__on_zero_shared)(v445);
        std::__shared_weak_count::__release_weak(v446);
      }
      Espresso::pass_graph_coloring::run_on_network((Espresso::pass_graph_coloring *)&v542, v437, (uint64_t)&v538);
      if (!v538.__r_.__value_.__l.__size_
      {
        v545 = 0;
        v546 = 0;
        Espresso::throw_exception_selector<Espresso::generic_error>("Segment-level graph coloring result not correctly generated");
      }
      v451 = (char *)v538.__r_.__value_.__r.__words[2];
      v545 = (uint64_t *)v450;
      v546 = (char *)v538.__r_.__value_.__r.__words[2];
      if (!v538.__r_.__value_.__r.__words[2])
      {
        v535 = (unint64_t)v450;
        v536 = 0;
LABEL_818:
        Espresso::net_pass::~net_pass((Espresso::net_pass *)&v542);
        v459 = v494;
        v460 = *((char *)v494 + 23);
        if ((v460 & 0x80000000) == 0)
          goto LABEL_819;
        goto LABEL_822;
      }
      v452 = (unint64_t *)(v538.__r_.__value_.__r.__words[2] + 8);
      do
        v453 = __ldxr(v452);
      while (__stxr(v453 + 1, v452));
      v535 = (unint64_t)v450;
      v536 = v451;
      do
        v454 = __ldxr(v452);
      while (__stxr(v454 + 1, v452));
      do
        v455 = __ldaxr(v452);
      while (__stlxr(v455 - 1, v452));
      if (!v455)
      {
        (*(void (**)(char *))(*(_QWORD *)v451 + 16))(v451);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v451);
      }
      v456 = (std::__shared_weak_count *)v538.__r_.__value_.__r.__words[2];
      if (!v538.__r_.__value_.__r.__words[2])
        goto LABEL_818;
      v457 = (unint64_t *)(v538.__r_.__value_.__r.__words[2] + 8);
      do
        v458 = __ldaxr(v457);
      while (__stlxr(v458 - 1, v457));
      if (v458)
        goto LABEL_818;
      ((void (*)(std::__shared_weak_count *))v456->__on_zero_shared)(v456);
      std::__shared_weak_count::__release_weak(v456);
      Espresso::net_pass::~net_pass((Espresso::net_pass *)&v542);
      v459 = v494;
      v460 = *((char *)v494 + 23);
      if ((v460 & 0x80000000) == 0)
      {
LABEL_819:
        if (v460 != 7)
          goto LABEL_828;
        goto LABEL_824;
      }
LABEL_822:
      if (v459[1] != 7)
        goto LABEL_828;
      v459 = *v494;
LABEL_824:
      v461 = *(_DWORD *)v459;
      v462 = *(_DWORD *)((char *)v459 + 3);
      if (v461 == 1634100580 && v462 == 1953264993)
      {
        BYTE7(v543) = 4;
        strcpy((char *)&v542, "main");
        v465 = v493;
        goto LABEL_831;
      }
LABEL_828:
      v464 = *((unsigned __int8 *)v346 + 1169);
      v507 = 5;
      strcpy((char *)v506, "main_");
      Espresso::AOT::ConfigToE5FuncName((uint64_t)v494, v464, (const void **)v506, (uint64_t)&v542);
      v465 = v493;
      if (v507 < 0)
        operator delete(v506[0]);
LABEL_831:
      Espresso::AOT::Builder::BuildFunction((uint64_t)v531, (int8x8_t *)v524, (const void **)&v542, (_QWORD *)v535);
      if (SBYTE7(v543) < 0)
      {
        operator delete((void *)v542);
        v466 = (std::__shared_weak_count *)v536;
        if (v536)
        {
LABEL_835:
          v467 = (unint64_t *)&v466->__shared_owners_;
          do
            v468 = __ldaxr(v467);
          while (__stlxr(v468 - 1, v467));
          if (!v468)
          {
            ((void (*)(std::__shared_weak_count *))v466->__on_zero_shared)(v466);
            std::__shared_weak_count::__release_weak(v466);
          }
        }
      }
      else
      {
        v466 = (std::__shared_weak_count *)v536;
        if (v536)
          goto LABEL_835;
      }
      Espresso::DTypeConverter::~DTypeConverter((Espresso::DTypeConverter *)&__dst);
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v520, v520[1]);
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v519, (char *)v519[1]);
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v521, v522);
      v469 = v525;
      if (v525)
      {
        v470 = (unint64_t *)&v525->__shared_owners_;
        do
          v471 = __ldaxr(v470);
        while (__stlxr(v471 - 1, v470));
        if (!v471)
        {
          ((void (*)(std::__shared_weak_count *))v469->__on_zero_shared)(v469);
          std::__shared_weak_count::__release_weak(v469);
        }
      }
      v494 += 3;
      if (v494 == (const void **)v465)
        goto LABEL_846;
    }
LABEL_86:
    v51 = (char **)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__find_equal<std::string>(&v521, &v522, &__dst, v519, (_QWORD *)v22 + 4);
    if (*v51)
    {
      v52 = (__int128 *)*((_QWORD *)v22 + 1);
      if (!v52)
        goto LABEL_115;
      goto LABEL_109;
    }
    v53 = (char *)operator new(0x78uLL);
    std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100]((std::string *)(v53 + 32), v22 + 2);
    v54 = __dst;
    *(_QWORD *)v53 = 0;
    *((_QWORD *)v53 + 1) = 0;
    *((_QWORD *)v53 + 2) = v54;
    *v51 = v53;
    if (*v521)
    {
      v521 = (char **)*v521;
      v53 = *v51;
    }
    v55 = v522;
    v37 = v53 == v522;
    v53[24] = v53 == v522;
    if (v37)
    {
LABEL_108:
      ++v523;
      v52 = (__int128 *)*((_QWORD *)v22 + 1);
      if (!v52)
        goto LABEL_115;
      goto LABEL_109;
    }
    while (1)
    {
      v56 = *((_QWORD *)v53 + 2);
      if (*(_BYTE *)(v56 + 24))
        goto LABEL_108;
      v57 = *(char **)(v56 + 16);
      v58 = *(_QWORD *)v57;
      if (*(_QWORD *)v57 == v56)
      {
        v61 = *((_QWORD *)v57 + 1);
        if (!v61 || (v62 = *(unsigned __int8 *)(v61 + 24), v59 = (_BYTE *)(v61 + 24), v62))
        {
          if (*(char **)v56 == v53)
          {
            *(_BYTE *)(v56 + 24) = 1;
            v57[24] = 0;
            v65 = *(_QWORD *)(v56 + 8);
            *(_QWORD *)v57 = v65;
            if (v65)
              goto LABEL_106;
          }
          else
          {
            v63 = *(uint64_t **)(v56 + 8);
            v64 = *v63;
            *(_QWORD *)(v56 + 8) = *v63;
            if (v64)
            {
              *(_QWORD *)(v64 + 16) = v56;
              v57 = *(char **)(v56 + 16);
            }
            v63[2] = (uint64_t)v57;
            *(_QWORD *)(*(_QWORD *)(v56 + 16) + 8 * (**(_QWORD **)(v56 + 16) != v56)) = v63;
            *v63 = v56;
            *(_QWORD *)(v56 + 16) = v63;
            v57 = (char *)v63[2];
            v56 = *(_QWORD *)v57;
            *((_BYTE *)v63 + 24) = 1;
            v57[24] = 0;
            v65 = *(_QWORD *)(v56 + 8);
            *(_QWORD *)v57 = v65;
            if (v65)
LABEL_106:
              *(_QWORD *)(v65 + 16) = v57;
          }
          *(_QWORD *)(v56 + 16) = *((_QWORD *)v57 + 2);
          *(_QWORD *)(*((_QWORD *)v57 + 2) + 8 * (**((_QWORD **)v57 + 2) != (_QWORD)v57)) = v56;
          *(_QWORD *)(v56 + 8) = v57;
          *((_QWORD *)v57 + 2) = v56;
          goto LABEL_108;
        }
      }
      else if (!v58 || (v60 = *(unsigned __int8 *)(v58 + 24), v59 = (_BYTE *)(v58 + 24), v60))
      {
        if (*(char **)v56 == v53)
        {
          v69 = *((_QWORD *)v53 + 1);
          *(_QWORD *)v56 = v69;
          if (v69)
          {
            *(_QWORD *)(v69 + 16) = v56;
            v57 = *(char **)(v56 + 16);
          }
          *((_QWORD *)v53 + 2) = v57;
          *(_QWORD *)(*(_QWORD *)(v56 + 16) + 8 * (**(_QWORD **)(v56 + 16) != v56)) = v53;
          *((_QWORD *)v53 + 1) = v56;
          *(_QWORD *)(v56 + 16) = v53;
          v57 = (char *)*((_QWORD *)v53 + 2);
          v53[24] = 1;
          v57[24] = 0;
          v67 = (char **)*((_QWORD *)v57 + 1);
          v68 = *v67;
          *((_QWORD *)v57 + 1) = *v67;
          if (v68)
LABEL_113:
            *((_QWORD *)v68 + 2) = v57;
        }
        else
        {
          *(_BYTE *)(v56 + 24) = 1;
          v57[24] = 0;
          v67 = (char **)*((_QWORD *)v57 + 1);
          v68 = *v67;
          *((_QWORD *)v57 + 1) = *v67;
          if (v68)
            goto LABEL_113;
        }
        v67[2] = (char *)*((_QWORD *)v57 + 2);
        *(_QWORD *)(*((_QWORD *)v57 + 2) + 8 * (**((_QWORD **)v57 + 2) != (_QWORD)v57)) = v67;
        *v67 = v57;
        *((_QWORD *)v57 + 2) = v67;
        ++v523;
        v52 = (__int128 *)*((_QWORD *)v22 + 1);
        if (!v52)
        {
          do
          {
LABEL_115:
            v66 = (__int128 *)*((_QWORD *)v22 + 2);
            v37 = *(_QWORD *)v66 == (_QWORD)v22;
            v22 = v66;
          }
          while (!v37);
          goto LABEL_85;
        }
        do
        {
LABEL_109:
          v66 = v52;
          v52 = *(__int128 **)v52;
        }
        while (v52);
LABEL_85:
        v22 = v66;
        if (v66 == v23)
          goto LABEL_42;
        goto LABEL_86;
      }
      *(_BYTE *)(v56 + 24) = 1;
      v53 = v57;
      v57[24] = v57 == v55;
      *v59 = 1;
      if (v57 == v55)
        goto LABEL_108;
    }
  }
LABEL_846:
  v472 = (_QWORD *)((char *)v533 + 448);
  if (*((char *)v533 + 471) < 0)
    v472 = (_QWORD *)*v472;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v472, v492);
  v473 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v473, "lastPathComponent");
  v474 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v475 = (const char *)objc_msgSend(v474, "UTF8String");
  v476 = strlen(v475);
  if (v476 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v477 = v476;
  if (v476 >= 0x17)
  {
    v479 = (v476 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v476 | 7) != 0x17)
      v479 = v476 | 7;
    v480 = v479 + 1;
    p_dst = (char **)operator new(v479 + 1);
    *(_QWORD *)&v549 = v477;
    *((_QWORD *)&v549 + 1) = v480 | 0x8000000000000000;
    __dst = (char *)p_dst;
    goto LABEL_855;
  }
  HIBYTE(v549) = v476;
  p_dst = &__dst;
  if (v476)
LABEL_855:
    memmove(p_dst, v475, v477);
  *((_BYTE *)p_dst + v477) = 0;

  v481 = *(_QWORD *)EspressoLight::espresso_aot_plan::platf;
  bundle_dir = EspressoLight::espresso_aot_plan::get_bundle_dir(v495);
  Espresso::AOT::Builder::SerializeToFile((uint64_t)v531, v481, (const void **)&bundle_dir->__r_.__value_.__l.__data_, (uint64_t)&__dst);
  if (SHIBYTE(v549) < 0)
    operator delete(__dst);
  v483 = (std::string *)v526;
  if (v526)
  {
    v484 = v527;
    v485 = v526;
    if (v527 != v526)
    {
      do
      {
        if (SHIBYTE(v484[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v484[-1].__r_.__value_.__l.__data_);
        --v484;
      }
      while (v484 != v483);
      v485 = v526;
    }
    v527 = v483;
    operator delete(v485);
  }
  Espresso::AOT::Builder::~Builder((Espresso::AOT::Builder *)v531);
  begin = v532.__begin_;
  if (v532.__begin_)
  {
    end = v532.__end_;
    v488 = v532.__begin_;
    if (v532.__end_ != v532.__begin_)
    {
      do
      {
        if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(end[-1].__r_.__value_.__l.__data_);
        --end;
      }
      while (end != begin);
      v488 = v532.__begin_;
    }
    v532.__end_ = begin;
    operator delete(v488);
  }
  v489 = v534;
  if (v534)
  {
    v490 = (unint64_t *)&v534->__shared_owners_;
    do
      v491 = __ldaxr(v490);
    while (__stlxr(v491 - 1, v490));
    if (!v491)
    {
      ((void (*)(std::__shared_weak_count *))v489->__on_zero_shared)(v489);
      std::__shared_weak_count::__release_weak(v489);
    }
  }
}

void sub_191101028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a72);
  _Unwind_Resume(a1);
}

void sub_19110103C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;
  std::__shared_weak_count *v72;
  void *v74;

  std::__shared_weak_count::~__shared_weak_count(v72);
  operator delete(v74);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a72);
  _Unwind_Resume(a1);
}

void sub_19110105C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a72);
  _Unwind_Resume(a1);
}

void sub_191101070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;
  void *a69;
  char a72;
  void *v72;

  std::vector<std::string>::~vector[abi:ne180100](&a58);
  Espresso::AOT::Builder::~Builder((Espresso::AOT::Builder *)&a66);
  std::vector<std::string>::~vector[abi:ne180100](&a69);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a72);
  _Unwind_Resume(a1);
}

void EspressoLight::espresso_aot_plan::get_network(EspressoLight::espresso_aot_plan *this@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;

  EspressoLight::espresso_plan::get_networks(this, (uint64_t)&__p);
  v3 = (char *)__p;
  v4 = v13;
  if (v13 - (_BYTE *)__p != 16)
    Espresso::throw_exception_selector<Espresso::generic_error>("AOT plan should only hold one single network");
  v5 = *((_QWORD *)__p + 1);
  *a2 = *(_QWORD *)__p;
  a2[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v4 = v13;
  }
  v8 = v3;
  if (v4 != v3)
  {
    do
    {
      v9 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v4 -= 16;
    }
    while (v4 != v3);
    v8 = __p;
  }
  v13 = v3;
  operator delete(v8);
}

{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;

  EspressoLight::espresso_plan::get_networks(this, (uint64_t *)&__p);
  v3 = (char *)__p;
  v4 = v13;
  if (v13 - (_BYTE *)__p != 16)
    Espresso::throw_exception_selector<Espresso::generic_error>("AOT plan should only hold one single network");
  v5 = *((_QWORD *)__p + 1);
  *a2 = *(_QWORD *)__p;
  a2[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v4 = v13;
  }
  v8 = v3;
  if (v4 != v3)
  {
    do
    {
      v9 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v4 -= 16;
    }
    while (v4 != v3);
    v8 = __p;
  }
  v13 = v3;
  operator delete(v8);
}

void sub_1911014E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void EspressoLight::espresso_aot_plan::identify_segments(EspressoLight::espresso_aot_plan *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v10[2];
  uint64_t v11;
  std::__shared_weak_count *v12;

  EspressoLight::espresso_aot_plan::get_network(this, &v11);
  v2 = v12;
  v10[0] = v11;
  v10[1] = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  EspressoLight::espresso_aot_plan::identify_segments((uint64_t)this, v10);
  if (!v2)
    goto LABEL_8;
  v5 = (unint64_t *)&v2->__shared_owners_;
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 - 1, v5));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v7 = v12;
    if (!v12)
      return;
  }
  else
  {
LABEL_8:
    v7 = v12;
    if (!v12)
      return;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1911015D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void EspressoLight::espresso_aot_plan::compile_segments(EspressoLight::espresso_aot_plan *this@<X0>, std::vector<std::string> *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  const void *v12;
  _QWORD *v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  const Espresso::net_compiler_segment_based::segment_t *v20;
  int v21;
  size_t size;
  unint64_t v23;
  _BYTE *v24;
  int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  std::string *v29;
  char *v30;
  std::string *v31;
  int v32;
  size_t v33;
  unint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  void **v38;
  int v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::vector<std::string> *v53;
  int8x8_t *v54;
  void **v55;
  void *v56;
  void **v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  int8x8_t v62;
  int8x8_t v63;
  int8x8_t v64;
  uint8x8_t v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int8x8_t v73;
  unint64_t v74;
  uint8x8_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  E5RT::E5BundleCacheManager *v82;
  E5RT::E5BundleCacheManager *v83;
  std::string::size_type v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unsigned __int8 *v89;
  uint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unsigned __int8 *v99;
  unsigned __int8 *v100;
  unsigned __int8 *v101;
  std::string::size_type v102;
  unsigned __int8 *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  std::string::size_type v107;
  void **v108;
  void **v109;
  Espresso::net *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  Espresso::net *v118;
  _QWORD *v119;
  int v120;
  Espresso::net *v121;
  _OWORD *v122;
  _OWORD *v123;
  Espresso::net *v124;
  uint64_t **v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t v128;
  int v129;
  size_t v130;
  uint64_t *v131;
  uint64_t v132;
  int v133;
  size_t v134;
  const void *v135;
  size_t v136;
  int v137;
  _BOOL4 v138;
  BOOL v139;
  uint64_t *v140;
  int v141;
  size_t v142;
  const void *v143;
  size_t v144;
  int v145;
  _BOOL4 v146;
  char *v147;
  uint64_t v148;
  int v149;
  size_t v150;
  uint64_t *v151;
  uint64_t v152;
  int v153;
  size_t v154;
  const void *v155;
  size_t v156;
  int v157;
  _BOOL4 v158;
  BOOL v159;
  uint64_t *v160;
  int v161;
  size_t v162;
  const void *v163;
  size_t v164;
  int v165;
  _BOOL4 v166;
  char *v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  const std::string *v172;
  Espresso::net *v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  Espresso::net *v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  Espresso::net *v189;
  Espresso::multi_head_aot_helper_t *v190;
  __int128 v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  Espresso::net *v198;
  uint64_t RootPath;
  uint64_t *v200;
  uint64_t *v201;
  _QWORD *v202;
  __n128 v203;
  std::__shared_weak_count *v204;
  E5RT::E5BundleCacheManager *v205;
  unint64_t *v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t debug_metadata;
  uint64_t *v216;
  uint64_t *v217;
  uint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  const Espresso::network_shape *v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  char *v231;
  void *v232;
  uint64_t v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  unsigned int v239;
  std::vector<std::string>::pointer end;
  __int128 v241;
  char *v242;
  void *v243;
  char *v244;
  std::string *v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  int v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  _QWORD *v259;
  std::string::size_type __sz;
  int v261;
  void *__p;
  uint64_t v263;
  char v264;
  int v266;
  unint64_t v267;
  Espresso::net *v269;
  std::__shared_weak_count *v270;
  std::string __str;
  char v272;
  Espresso::net *v273;
  std::__shared_weak_count *v274;
  uint64_t v275;
  std::__shared_weak_count *v276;
  int v277;
  _DWORD v278[2];
  void *v279[2];
  uint64_t v280;
  char v281;
  _QWORD *v282;
  std::__shared_weak_count *v283;
  uint64_t v284;
  std::__shared_weak_count *v285;
  void *v286[2];
  char v287;
  Espresso::net *v288;
  std::__shared_weak_count *v289;
  E5RT::E5BundleCacheManager *v290;
  E5RT::E5BundleCacheManager *v291;
  uint64_t v292;
  void *v293[2];
  void *v294;
  uint64_t v295;
  std::__shared_weak_count *v296;
  uint64_t v297;
  std::__shared_weak_count *v298;
  std::string v299[3];
  int8x8_t *v300;
  _BYTE __dst[40];
  uint64_t v302;
  std::string v303;

  EspressoLight::espresso_aot_plan::get_network(this, &v284);
  v2 = v284;
  v3 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(v284 + 16) + 8))(*(_QWORD *)(*(_QWORD *)(v284 + 16) + 8));
  v4 = *(_QWORD *)(v2 + 536);
  if (!v4)
    goto LABEL_524;
  v5 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = v3;
    if (v4 <= v3)
      v6 = v3 % v4;
  }
  else
  {
    v6 = ((_DWORD)v4 - 1) & v3;
  }
  v7 = *(uint64_t ***)(*(_QWORD *)(v2 + 528) + 8 * v6);
  if (!v7 || (v8 = *v7) == 0)
LABEL_524:
    Espresso::throw_exception_selector<Espresso::generic_error>("Compiler missing");
  if (v5.u32[0] < 2uLL)
  {
    v9 = v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == v3)
      {
        if (*((_DWORD *)v8 + 4) == v3)
          goto LABEL_21;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_524;
      }
      v8 = (uint64_t *)*v8;
      if (!v8)
        goto LABEL_524;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == v3)
      break;
    if (v10 >= v4)
      v10 %= v4;
    if (v10 != v6)
      goto LABEL_524;
LABEL_11:
    v8 = (uint64_t *)*v8;
    if (!v8)
      goto LABEL_524;
  }
  if (*((_DWORD *)v8 + 4) != v3)
    goto LABEL_11;
LABEL_21:
  v12 = (const void *)v8[3];
  if (!v12
  {
    v282 = 0;
    v283 = 0;
    Espresso::throw_exception_selector<Espresso::generic_error>("Error casting to AOT compiler");
  }
  v14 = v13;
  v15 = (std::__shared_weak_count *)v8[4];
  v282 = v13;
  v283 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  std::vector<std::string>::reserve(a2, 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v13[5] - v13[4]) >> 3));
  LOBYTE(v279[0]) = 0;
  v281 = 0;
  if (v14[5] == v14[4])
    goto LABEL_508;
  v18 = 0;
  v266 = 0;
  __p = 0;
  v259 = (_QWORD *)((char *)this + 1176);
  while (2)
  {
    if (v266 && v264 < 0)
      operator delete(__p);
    if (v281)
    {
      if (SHIBYTE(v280) < 0)
        operator delete(v279[0]);
      v281 = 0;
    }
    v19 = v282[4];
    v20 = (const Espresso::net_compiler_segment_based::segment_t *)(v19 + 120 * v18);
    v277 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v284 + 32) + 16 * *(_QWORD *)v20) + 8);
    if (!is_ane(&v277))
    {
      if (is_gpu(&v277))
      {
        v266 = 0;
        v25 = 50008;
        v277 = 50008;
      }
      else
      {
        if (!is_cpu(&v277))
          Espresso::throw_exception_selector<Espresso::generic_error>("Unknown platform.");
        v25 = 0;
        v266 = 0;
        v277 = 0;
      }
      goto LABEL_50;
    }
    if (v277 != 10007)
    {
      v266 = 0;
      v25 = 10008;
      v277 = 10008;
LABEL_50:
      v26 = 1;
      goto LABEL_88;
    }
    __dst[23] = 4;
    strcpy(__dst, "main");
    EspressoLight::espresso_aot_plan::get_abs_path_to_segment_assets_within_bundle(this, (const void **)__dst, v18, 10007, v299);
    v21 = SHIBYTE(v299[0].__r_.__value_.__r.__words[2]);
    if ((v299[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v299[0].__r_.__value_.__r.__words[2]);
    else
      size = v299[0].__r_.__value_.__l.__size_;
    v23 = size + 7;
    if (size + 7 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v23 >= 0x17)
    {
      v27 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v23 | 7) != 0x17)
        v27 = v23 | 7;
      v28 = v27 + 1;
      v24 = operator new(v27 + 1);
      *(_QWORD *)&__dst[8] = size + 7;
      *(_QWORD *)&__dst[16] = v28 | 0x8000000000000000;
      *(_QWORD *)__dst = v24;
    }
    else
    {
      memset(__dst, 0, 24);
      v24 = __dst;
      __dst[23] = size + 7;
      if (!size)
        goto LABEL_58;
    }
    if (v21 >= 0)
      v29 = v299;
    else
      v29 = (std::string *)v299[0].__r_.__value_.__r.__words[0];
    memmove(v24, v29, size);
LABEL_58:
    strcpy(&v24[size], "/inputs");
    if (v281)
    {
      if (SHIBYTE(v280) < 0)
      {
        operator delete(v279[0]);
        *(_OWORD *)v279 = *(_OWORD *)__dst;
        v280 = *(_QWORD *)&__dst[16];
        if (!v281)
          std::__throw_bad_optional_access[abi:ne180100]();
      }
      else
      {
        *(_OWORD *)v279 = *(_OWORD *)__dst;
        v280 = *(_QWORD *)&__dst[16];
      }
    }
    else
    {
      *(_OWORD *)v279 = *(_OWORD *)__dst;
      v280 = *(_QWORD *)&__dst[16];
      v281 = 1;
    }
    memset(__dst, 0, 24);
    v30 = (char *)HIBYTE(v280);
    if (v280 >= 0)
      v31 = (std::string *)v279;
    else
      v31 = (std::string *)v279[0];
    if (v280 < 0)
      v30 = (char *)v279[1];
    std::string::append[abi:ne180100]<char const*,0>((std::string *)__dst, v31, (std::string *)&v30[(_QWORD)v31]);
    std::__fs::filesystem::__create_directories((const std::__fs::filesystem::path *)__dst, 0);
    if ((__dst[23] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
    if (!v281)
      std::__throw_bad_optional_access[abi:ne180100]();
    v32 = SHIBYTE(v280);
    if (v280 >= 0)
      v33 = HIBYTE(v280);
    else
      v33 = (size_t)v279[1];
    v34 = v33 + 19;
    if (v33 + 19 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v34 >= 0x17)
    {
      v36 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v34 | 7) != 0x17)
        v36 = v34 | 7;
      v37 = v36 + 1;
      v35 = operator new(v36 + 1);
      *(_QWORD *)&__dst[8] = v33 + 19;
      *(_QWORD *)&__dst[16] = v37 | 0x8000000000000000;
      *(_QWORD *)__dst = v35;
    }
    else
    {
      memset(__dst, 0, 24);
      v35 = __dst;
      __dst[23] = v33 + 19;
      if (!v33)
        goto LABEL_85;
    }
    if (v32 >= 0)
      v38 = v279;
    else
      v38 = (void **)v279[0];
    memmove(v35, v38, v33);
LABEL_85:
    strcpy(&v35[v33], "/model.espresso.net");
    __sz = *(_QWORD *)&__dst[8];
    __p = *(void **)__dst;
    v278[0] = *(_DWORD *)&__dst[16];
    *(_DWORD *)((char *)v278 + 3) = *(_DWORD *)&__dst[19];
    v264 = __dst[23];
    if (SHIBYTE(v299[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v299[0].__r_.__value_.__l.__data_);
    v26 = 0;
    v266 = 1;
    v25 = v277;
    v20 = (const Espresso::net_compiler_segment_based::segment_t *)(v19 + 120 * v18);
LABEL_88:
    Espresso::create_aot_context(v25, 0xFFFFFFFFLL, &v275);
    v39 = 0;
    v40 = v284;
    v41 = *((unsigned __int8 *)this + 1169);
    __str.__r_.__value_.__s.__data_[0] = 0;
    v272 = 0;
    if ((v26 & 1) == 0)
    {
      if (v264 < 0)
      {
        std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)__p, __sz);
      }
      else
      {
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        __str.__r_.__value_.__l.__size_ = __sz;
        LODWORD(__str.__r_.__value_.__r.__words[2]) = v278[0];
        *(_DWORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v278 + 3);
        *((_BYTE *)&__str.__r_.__value_.__s + 23) = v264;
      }
      v39 = 1;
      v272 = 1;
    }
    v42 = *(_QWORD *)v20;
    v267 = v18;
    v43 = v19 + 120 * v18;
    v44 = *(_QWORD *)(v43 + 8);
    if (v44 <= *(_QWORD *)v20)
    {
      v273 = 0;
      v274 = 0;
      v53 = a2;
      if (v39)
        goto LABEL_460;
    }
    else
    {
      v297 = v275;
      v298 = v276;
      if (v276)
      {
        v45 = (unint64_t *)&v276->__shared_owners_;
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      v261 = v41;
      v295 = 0;
      v296 = 0;
      Espresso::sequential_builder::sequential_builder(v299, &v297, 0, &v295);
      v47 = v296;
      if (!v296)
        goto LABEL_101;
      v48 = (unint64_t *)&v296->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
        v50 = v298;
        if (v298)
        {
LABEL_102:
          v51 = (unint64_t *)&v50->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
      }
      else
      {
LABEL_101:
        v50 = v298;
        if (v298)
          goto LABEL_102;
      }
      v263 = v43;
      v54 = v300;
      memset(__dst, 0, 32);
      *(_DWORD *)&__dst[32] = 1065353216;
      Espresso::net::get_consumers_of_blobs((_QWORD *)v40, __dst, (uint64_t)v293);
      v55 = *(void ***)&__dst[16];
      if (*(_QWORD *)&__dst[16])
      {
        do
        {
          v57 = (void **)*v55;
          if (*((char *)v55 + 39) < 0)
            operator delete(v55[2]);
          operator delete(v55);
          v55 = v57;
        }
        while (v57);
      }
      v56 = *(void **)__dst;
      *(_QWORD *)__dst = 0;
      if (v56)
        operator delete(v56);
      while (2)
      {
        memset(__dst, 0, 24);
        Espresso::sequential_builder::copy_layer_from_network((uint64_t)v299, (_QWORD *)v40, v42, (const std::string **)__dst);
        v59 = *(_QWORD *)__dst;
        if (*(_QWORD *)__dst)
        {
          v60 = *(_QWORD *)&__dst[8];
          v61 = *(void **)__dst;
          if (*(_QWORD *)&__dst[8] == *(_QWORD *)__dst)
          {
LABEL_128:
            *(_QWORD *)&__dst[8] = v59;
            operator delete(v61);
            goto LABEL_129;
          }
          while (1)
          {
            if (*(char *)(v60 - 1) < 0)
            {
              operator delete(*(void **)(v60 - 24));
              if ((*(char *)(v60 - 25) & 0x80000000) == 0)
                goto LABEL_123;
            }
            else if ((*(char *)(v60 - 25) & 0x80000000) == 0)
            {
LABEL_123:
              v60 -= 48;
              if (v60 == v59)
                goto LABEL_127;
              continue;
            }
            operator delete(*(void **)(v60 - 48));
            v60 -= 48;
            if (v60 == v59)
            {
LABEL_127:
              v61 = *(void **)__dst;
              goto LABEL_128;
            }
          }
        }
LABEL_129:
        v63 = v54[4];
        v62 = v54[5];
        memset(__dst, 0, 24);
        v64 = *(int8x8_t *)(v40 + 104);
        if (v64)
        {
          v65 = (uint8x8_t)vcnt_s8(v64);
          v65.i16[0] = vaddlv_u8(v65);
          if (v65.u32[0] > 1uLL)
          {
            v66 = v42;
            if (v42 >= *(_QWORD *)&v64)
              v66 = v42 % *(_QWORD *)&v64;
          }
          else
          {
            v66 = (*(_QWORD *)&v64 - 1) & v42;
          }
          v67 = *(_QWORD **)(*(_QWORD *)(v40 + 96) + 8 * v66);
          if (v67)
          {
            v68 = (_QWORD *)*v67;
            if (v68)
            {
              if (v65.u32[0] < 2uLL)
              {
                v69 = *(_QWORD *)&v64 - 1;
                while (1)
                {
                  v71 = v68[1];
                  if (v42 == v71)
                  {
                    if (v68[2] == v42)
                      goto LABEL_224;
                  }
                  else if ((v71 & v69) != v66)
                  {
                    goto LABEL_149;
                  }
                  v68 = (_QWORD *)*v68;
                  if (!v68)
                    goto LABEL_149;
                }
              }
              do
              {
                v70 = v68[1];
                if (v42 == v70)
                {
                  if (v68[2] == v42)
                  {
LABEL_224:
                    memset(&v303, 0, sizeof(v303));
                    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v303, v68[3], v68[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68[4] - v68[3]) >> 3));
                    goto LABEL_150;
                  }
                }
                else
                {
                  if (v70 >= *(_QWORD *)&v64)
                    v70 %= *(_QWORD *)&v64;
                  if (v70 != v66)
                    break;
                }
                v68 = (_QWORD *)*v68;
              }
              while (v68);
            }
          }
        }
LABEL_149:
        memset(&v303, 0, sizeof(v303));
LABEL_150:
        v72 = *(_QWORD *)&v62 - *(_QWORD *)&v63;
        v73 = v54[13];
        memset(__dst, 0, 24);
        if (!*(_QWORD *)&v73)
          goto LABEL_170;
        v74 = (v72 >> 4) - 1;
        v75 = (uint8x8_t)vcnt_s8(v73);
        v75.i16[0] = vaddlv_u8(v75);
        if (v75.u32[0] > 1uLL)
        {
          v76 = (v72 >> 4) - 1;
          if (v74 >= *(_QWORD *)&v73)
            v76 = v74 % *(_QWORD *)&v73;
        }
        else
        {
          v76 = (*(_QWORD *)&v73 - 1) & v74;
        }
        v77 = *(_QWORD **)(*(_QWORD *)&v54[12] + 8 * v76);
        if (!v77 || (v78 = (_QWORD *)*v77) == 0)
        {
LABEL_170:
          v290 = 0;
          v291 = 0;
          v292 = 0;
          goto LABEL_171;
        }
        if (v75.u32[0] < 2uLL)
        {
          v79 = *(_QWORD *)&v73 - 1;
          while (1)
          {
            v81 = v78[1];
            if (v74 == v81)
            {
              if (v78[2] == v74)
                goto LABEL_225;
            }
            else if ((v81 & v79) != v76)
            {
              goto LABEL_170;
            }
            v78 = (_QWORD *)*v78;
            if (!v78)
              goto LABEL_170;
          }
        }
        while (2)
        {
          v80 = v78[1];
          if (v74 != v80)
          {
            if (v80 >= *(_QWORD *)&v73)
              v80 %= *(_QWORD *)&v73;
            if (v80 != v76)
              goto LABEL_170;
            goto LABEL_160;
          }
          if (v78[2] != v74)
          {
LABEL_160:
            v78 = (_QWORD *)*v78;
            if (!v78)
              goto LABEL_170;
            continue;
          }
          break;
        }
LABEL_225:
        v290 = 0;
        v291 = 0;
        v292 = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v290, v78[3], v78[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v78[4] - v78[3]) >> 3));
        v108 = *(void ***)__dst;
        if (*(_QWORD *)__dst)
        {
          v109 = *(void ***)&__dst[8];
          if (*(_QWORD *)&__dst[8] != *(_QWORD *)__dst)
          {
            do
            {
              if (*((char *)v109 - 1) < 0)
                operator delete(*(v109 - 3));
              v109 -= 3;
            }
            while (v109 != v108);
            v108 = *(void ***)__dst;
          }
          operator delete(v108);
        }
LABEL_171:
        v83 = v290;
        v82 = v291;
        v84 = v303.__r_.__value_.__r.__words[0];
        if (v291 - v290 != v303.__r_.__value_.__l.__size_ - v303.__r_.__value_.__r.__words[0])
          goto LABEL_522;
        while (v83 != v82)
        {
          v85 = *((unsigned __int8 *)v83 + 23);
          if ((v85 & 0x80u) == 0)
            v86 = *((unsigned __int8 *)v83 + 23);
          else
            v86 = *((_QWORD *)v83 + 1);
          v87 = *(unsigned __int8 *)(v84 + 23);
          v88 = (char)v87;
          if ((v87 & 0x80u) != 0)
            v87 = *(_QWORD *)(v84 + 8);
          if (v86 != v87)
            goto LABEL_522;
          if (v88 >= 0)
            v89 = (unsigned __int8 *)v84;
          else
            v89 = *(unsigned __int8 **)v84;
          if ((v85 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v83, v89, *((_QWORD *)v83 + 1)))
              goto LABEL_522;
          }
          else if (*((_BYTE *)v83 + 23))
          {
            v90 = 0;
            while (*((unsigned __int8 *)v83 + v90) == v89[v90])
            {
              if (v85 == ++v90)
                goto LABEL_174;
            }
LABEL_522:
            Espresso::throw_exception_selector<Espresso::generic_error>("Mismatch in newly added layer's outputs");
          }
LABEL_174:
          v83 = (E5RT::E5BundleCacheManager *)((char *)v83 + 24);
          v84 += 24;
        }
        v91 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v54[4] + v72 - 16) + 64);
        v93 = v275;
        v92 = v276;
        if (v276)
        {
          v94 = (unint64_t *)&v276->__shared_owners_;
          do
            v95 = __ldxr(v94);
          while (__stxr(v95 + 1, v94));
        }
        v96 = *(std::__shared_weak_count **)(v91 + 16);
        *(_QWORD *)(v91 + 8) = v93;
        *(_QWORD *)(v91 + 16) = v92;
        if (!v96)
          goto LABEL_198;
        v97 = (unint64_t *)&v96->__shared_owners_;
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
          v99 = (unsigned __int8 *)v290;
          v100 = (unsigned __int8 *)v291;
          if (v290 != v291)
            goto LABEL_211;
LABEL_199:
          if (v99)
            goto LABEL_200;
LABEL_218:
          v102 = v303.__r_.__value_.__r.__words[0];
          if (v303.__r_.__value_.__r.__words[0])
            goto LABEL_219;
        }
        else
        {
LABEL_198:
          v99 = (unsigned __int8 *)v290;
          v100 = (unsigned __int8 *)v291;
          if (v290 == v291)
            goto LABEL_199;
          do
          {
LABEL_211:
            if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((_QWORD *)(v263 + 56), (uint64_t)v99))
            {
              v103 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v293, v99);
              if (v103)
              {
                memset(__dst, 0, 24);
                v104 = *((_QWORD *)v103 + 5);
                v105 = *((_QWORD *)v103 + 6);
                if (v105 != v104)
                {
                  if (v105 - v104 < 0)
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  v106 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v54[4] + v72 - 16) + 64);
                  __dst[23] = 9;
                  strcpy(__dst, "is_output");
                  v286[0] = __dst;
                  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v106 + 240, __dst, (uint64_t)&std::piecewise_construct, (__int128 **)v286)+ 10) = 1;
                  if ((__dst[23] & 0x80000000) != 0)
                    operator delete(*(void **)__dst);
                }
              }
            }
            v99 += 24;
          }
          while (v99 != v100);
          v99 = (unsigned __int8 *)v290;
          if (!v290)
            goto LABEL_218;
LABEL_200:
          v101 = (unsigned __int8 *)v291;
          if (v291 == (E5RT::E5BundleCacheManager *)v99)
          {
            v291 = (E5RT::E5BundleCacheManager *)v99;
            operator delete(v99);
            v102 = v303.__r_.__value_.__r.__words[0];
            if (!v303.__r_.__value_.__r.__words[0])
              goto LABEL_118;
LABEL_219:
            v107 = v303.__r_.__value_.__l.__size_;
            v58 = (void *)v102;
            if (v303.__r_.__value_.__l.__size_ != v102)
            {
              do
              {
                if (*(char *)(v107 - 1) < 0)
                  operator delete(*(void **)(v107 - 24));
                v107 -= 24;
              }
              while (v107 != v102);
              v58 = (void *)v303.__r_.__value_.__r.__words[0];
            }
            v303.__r_.__value_.__l.__size_ = v102;
            operator delete(v58);
          }
          else
          {
            do
            {
              if ((char)*(v101 - 1) < 0)
                operator delete(*((void **)v101 - 3));
              v101 -= 24;
            }
            while (v101 != v99);
            v291 = (E5RT::E5BundleCacheManager *)v99;
            operator delete(v290);
            v102 = v303.__r_.__value_.__r.__words[0];
            if (v303.__r_.__value_.__r.__words[0])
              goto LABEL_219;
          }
        }
LABEL_118:
        if (++v42 < v44)
          continue;
        break;
      }
      v54[71].i8[0] = *(_BYTE *)(v40 + 568);
      Espresso::sequential_builder::build_from_shapes((uint64_t)v299, v40 + 184, &v273);
      v110 = v273;
      v111 = *(_QWORD *)(v40 + 576);
      v112 = *(_QWORD *)(v40 + 584);
      if (v112)
      {
        v113 = (unint64_t *)(v112 + 8);
        do
          v114 = __ldxr(v113);
        while (__stxr(v114 + 1, v113));
      }
      *((_QWORD *)v110 + 72) = v111;
      v115 = (std::__shared_weak_count *)*((_QWORD *)v110 + 73);
      *((_QWORD *)v110 + 73) = v112;
      if (!v115)
        goto LABEL_240;
      v116 = (unint64_t *)&v115->__shared_owners_;
      do
        v117 = __ldaxr(v116);
      while (__stlxr(v117 - 1, v116));
      if (!v117)
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
        v118 = v273;
        v119 = (_QWORD *)((char *)v273 + 752);
        if ((Espresso::net *)((char *)v273 + 752) == (Espresso::net *)(v263 + 96))
          goto LABEL_244;
LABEL_241:
        std::vector<E5RT::BufferType>::__assign_with_size[abi:ne180100]<E5RT::BufferType*,E5RT::BufferType*>(v119, *(char **)(v263 + 96), *(char **)(v263 + 104), (uint64_t)(*(_QWORD *)(v263 + 104) - *(_QWORD *)(v263 + 96)) >> 2);
        v120 = v261;
        v118 = v273;
        v121 = (Espresso::net *)v40;
        if (v273 != (Espresso::net *)v40)
        {
LABEL_245:
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)v118 + 59, *(__int128 **)(v40 + 472), (__int128 *)(v40 + 480));
          v121 = v273;
        }
      }
      else
      {
LABEL_240:
        v118 = v273;
        v119 = (_QWORD *)((char *)v273 + 752);
        if ((Espresso::net *)((char *)v273 + 752) != (Espresso::net *)(v263 + 96))
          goto LABEL_241;
LABEL_244:
        v120 = v261;
        v121 = (Espresso::net *)v40;
        if (v118 != (Espresso::net *)v40)
          goto LABEL_245;
      }
      *(_QWORD *)__dst = operator new(0x38uLL);
      *(_OWORD *)&__dst[8] = xmmword_191A764A0;
      strcpy(*(char **)__dst, "espresso.dispatch.fallback_only_when_unavailable");
      v303.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
      v122 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v121 + 59, __dst, (uint64_t)&std::piecewise_construct, &v303);
      MEMORY[0x19401C808]((char *)v122 + 56, "1");
      if ((__dst[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__dst);
        if (!v120)
          goto LABEL_251;
      }
      else if (!v120)
      {
LABEL_251:
        v124 = v273;
        v125 = (uint64_t **)*((_QWORD *)v273 + 19);
        if (v125)
          goto LABEL_252;
        goto LABEL_336;
      }
      __dst[23] = 18;
      strcpy(__dst, "ane_compiler_batch");
      v303.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
      v123 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v273 + 59, __dst, (uint64_t)&std::piecewise_construct, &v303);
      MEMORY[0x19401C808]((char *)v123 + 56, "1");
      if ((__dst[23] & 0x80000000) == 0)
        goto LABEL_251;
      operator delete(*(void **)__dst);
      v124 = v273;
      v125 = (uint64_t **)*((_QWORD *)v273 + 19);
      if (v125)
      {
LABEL_252:
        v126 = (uint64_t *)(v40 + 360);
        v127 = (uint64_t *)(v40 + 336);
        do
        {
          v128 = *v126;
          if (*v126)
          {
            v129 = *((char *)v125 + 39);
            if (v129 >= 0)
              v130 = *((unsigned __int8 *)v125 + 39);
            else
              v130 = (size_t)v125[3];
            if (v129 >= 0)
              v131 = (uint64_t *)(v125 + 2);
            else
              v131 = v125[2];
            v132 = v40 + 360;
            do
            {
              v133 = *(char *)(v128 + 55);
              if (v133 >= 0)
                v134 = *(unsigned __int8 *)(v128 + 55);
              else
                v134 = *(_QWORD *)(v128 + 40);
              if (v133 >= 0)
                v135 = (const void *)(v128 + 32);
              else
                v135 = *(const void **)(v128 + 32);
              if (v130 >= v134)
                v136 = v134;
              else
                v136 = v130;
              v137 = memcmp(v135, v131, v136);
              v138 = v134 < v130;
              if (v137)
                v138 = v137 < 0;
              v139 = !v138;
              if (v138)
                v140 = (uint64_t *)(v128 + 8);
              else
                v140 = (uint64_t *)v128;
              if (v139)
                v132 = v128;
              v128 = *v140;
            }
            while (*v140);
            if ((uint64_t *)v132 != v126)
            {
              v141 = *(char *)(v132 + 55);
              if (v141 >= 0)
                v142 = *(unsigned __int8 *)(v132 + 55);
              else
                v142 = *(_QWORD *)(v132 + 40);
              if (v141 >= 0)
                v143 = (const void *)(v132 + 32);
              else
                v143 = *(const void **)(v132 + 32);
              if (v142 >= v130)
                v144 = v130;
              else
                v144 = v142;
              v145 = memcmp(v131, v143, v144);
              v146 = v130 >= v142;
              if (v145)
                v146 = v145 >= 0;
              if (v146)
              {
                *(_QWORD *)__dst = v125 + 2;
                v147 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v273 + 44, v125 + 2, (uint64_t)&std::piecewise_construct, (__int128 **)__dst);
                *(_OWORD *)(v147 + 56) = *(_OWORD *)(v132 + 56);
                if ((char *)v132 != v147)
                  std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v147 + 72, *(char **)(v132 + 72), *(_QWORD *)(v132 + 80), (uint64_t)(*(_QWORD *)(v132 + 80) - *(_QWORD *)(v132 + 72)) >> 2);
              }
            }
          }
          v148 = *v127;
          if (*v127)
          {
            v149 = *((char *)v125 + 39);
            if (v149 >= 0)
              v150 = *((unsigned __int8 *)v125 + 39);
            else
              v150 = (size_t)v125[3];
            if (v149 >= 0)
              v151 = (uint64_t *)(v125 + 2);
            else
              v151 = v125[2];
            v152 = v40 + 336;
            do
            {
              v153 = *(char *)(v148 + 55);
              if (v153 >= 0)
                v154 = *(unsigned __int8 *)(v148 + 55);
              else
                v154 = *(_QWORD *)(v148 + 40);
              if (v153 >= 0)
                v155 = (const void *)(v148 + 32);
              else
                v155 = *(const void **)(v148 + 32);
              if (v150 >= v154)
                v156 = v154;
              else
                v156 = v150;
              v157 = memcmp(v155, v151, v156);
              v158 = v154 < v150;
              if (v157)
                v158 = v157 < 0;
              v159 = !v158;
              if (v158)
                v160 = (uint64_t *)(v148 + 8);
              else
                v160 = (uint64_t *)v148;
              if (v159)
                v152 = v148;
              v148 = *v160;
            }
            while (*v160);
            if ((uint64_t *)v152 != v127)
            {
              v161 = *(char *)(v152 + 55);
              if (v161 >= 0)
                v162 = *(unsigned __int8 *)(v152 + 55);
              else
                v162 = *(_QWORD *)(v152 + 40);
              if (v161 >= 0)
                v163 = (const void *)(v152 + 32);
              else
                v163 = *(const void **)(v152 + 32);
              if (v162 >= v150)
                v164 = v150;
              else
                v164 = v162;
              v165 = memcmp(v151, v163, v164);
              v166 = v150 >= v162;
              if (v165)
                v166 = v165 >= 0;
              if (v166)
              {
                *(_QWORD *)__dst = v125 + 2;
                v167 = std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v273 + 41, v125 + 2, (uint64_t)&std::piecewise_construct, (__int128 **)__dst);
                *(_OWORD *)(v167 + 56) = *(_OWORD *)(v152 + 56);
                v168 = *(_OWORD *)(v152 + 72);
                v169 = *(_OWORD *)(v152 + 88);
                v170 = *(_OWORD *)(v152 + 104);
                *(_OWORD *)(v167 + 116) = *(_OWORD *)(v152 + 116);
                *(_OWORD *)(v167 + 104) = v170;
                *(_OWORD *)(v167 + 88) = v169;
                *(_OWORD *)(v167 + 72) = v168;
              }
            }
          }
          v125 = (uint64_t **)*v125;
        }
        while (v125);
        v124 = v273;
      }
LABEL_336:
      v171 = *(unsigned __int8 *)(v40 + 615);
      if ((v171 & 0x80u) != 0)
        v171 = *(_QWORD *)(v40 + 600);
      if (v171)
        v172 = (const std::string *)(v40 + 592);
      else
        v172 = (const std::string *)(v40 + 616);
      std::string::operator=((std::string *)((char *)v124 + 616), v172);
      v18 = v267;
      v173 = (Espresso::net *)v40;
      if (v273 != (Espresso::net *)v40)
      {
        std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::net_configuration>,std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *> *,long>>((uint64_t **)v273 + 97, *(uint64_t **)(v40 + 776), (uint64_t *)(v40 + 784));
        v173 = v273;
      }
      v174 = *(_QWORD *)(v40 + 1288);
      v175 = *(_QWORD *)(v40 + 1296);
      if (v175)
      {
        v176 = (unint64_t *)(v175 + 8);
        do
          v177 = __ldxr(v176);
        while (__stxr(v177 + 1, v176));
      }
      *((_QWORD *)v173 + 161) = v174;
      v178 = (std::__shared_weak_count *)*((_QWORD *)v173 + 162);
      *((_QWORD *)v173 + 162) = v175;
      if (!v178)
        goto LABEL_350;
      v179 = (unint64_t *)&v178->__shared_owners_;
      do
        v180 = __ldaxr(v179);
      while (__stlxr(v180 - 1, v179));
      if (!v180)
      {
        ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
        std::__shared_weak_count::__release_weak(v178);
        v181 = v273;
        v182 = *(_QWORD *)(v40 + 712);
        v183 = *(_QWORD *)(v40 + 720);
        if (v183)
          goto LABEL_351;
      }
      else
      {
LABEL_350:
        v181 = v273;
        v182 = *(_QWORD *)(v40 + 712);
        v183 = *(_QWORD *)(v40 + 720);
        if (v183)
        {
LABEL_351:
          v184 = (unint64_t *)(v183 + 8);
          do
            v185 = __ldxr(v184);
          while (__stxr(v185 + 1, v184));
        }
      }
      *((_QWORD *)v181 + 89) = v182;
      v186 = (std::__shared_weak_count *)*((_QWORD *)v181 + 90);
      *((_QWORD *)v181 + 90) = v183;
      if (!v186)
        goto LABEL_357;
      v187 = (unint64_t *)&v186->__shared_owners_;
      do
        v188 = __ldaxr(v187);
      while (__stlxr(v188 - 1, v187));
      if (!v188)
      {
        ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
        std::__shared_weak_count::__release_weak(v186);
        v189 = v273;
        *((_BYTE *)v273 + 1281) = *(_BYTE *)(v40 + 1281);
        if (v189 != (Espresso::net *)v40)
        {
LABEL_358:
          *((_DWORD *)v189 + 288) = *(_DWORD *)(v40 + 1152);
          std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,void *> *>>((_QWORD *)v189 + 140, *(_QWORD **)(v40 + 1136), 0);
        }
      }
      else
      {
LABEL_357:
        v189 = v273;
        *((_BYTE *)v273 + 1281) = *(_BYTE *)(v40 + 1281);
        if (v189 != (Espresso::net *)v40)
          goto LABEL_358;
      }
      v190 = *(Espresso::multi_head_aot_helper_t **)(v40 + 1368);
      if (v190)
      {
        Espresso::multi_head_aot_helper_t::helper_for_segment(v190, v20, (uint64_t ***)__dst);
        v191 = *(_OWORD *)__dst;
        *(_OWORD *)__dst = 0uLL;
        v192 = (std::__shared_weak_count *)*((_QWORD *)v273 + 172);
        *(_OWORD *)((char *)v273 + 1368) = v191;
        if (!v192)
          goto LABEL_364;
        v193 = (unint64_t *)&v192->__shared_owners_;
        do
          v194 = __ldaxr(v193);
        while (__stlxr(v194 - 1, v193));
        if (!v194)
        {
          ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
          std::__shared_weak_count::__release_weak(v192);
          v195 = *(std::__shared_weak_count **)&__dst[8];
          if (*(_QWORD *)&__dst[8])
          {
LABEL_365:
            v196 = (unint64_t *)&v195->__shared_owners_;
            do
              v197 = __ldaxr(v196);
            while (__stlxr(v197 - 1, v196));
            if (!v197)
            {
              ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
              std::__shared_weak_count::__release_weak(v195);
            }
          }
        }
        else
        {
LABEL_364:
          v195 = *(std::__shared_weak_count **)&__dst[8];
          if (*(_QWORD *)&__dst[8])
            goto LABEL_365;
        }
      }
      v198 = v273;
      if (*((_QWORD *)this + 150))
      {
        Espresso::net::get_analysis_if_existing<Espresso::analysis_debug_metadata>((uint64_t)v273, &v290);
        if (!v290)
        {
          v202 = operator new(0xF0uLL);
          v202[2] = 0;
          *v202 = &off_1E2DBCD60;
          v202[1] = 0;
          v203.n128_f64[0] = Espresso::analysis_debug_metadata::analysis_debug_metadata((Espresso::analysis_debug_metadata *)(v202 + 3));
          v204 = (std::__shared_weak_count *)v291;
          v290 = v205;
          v291 = (E5RT::E5BundleCacheManager *)v202;
          if (v204)
          {
            v206 = (unint64_t *)&v204->__shared_owners_;
            do
              v207 = __ldaxr(v206);
            while (__stlxr(v207 - 1, v206));
            if (!v207)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v204->__on_zero_shared)(v204, v203);
              std::__shared_weak_count::__release_weak(v204);
            }
          }
        }
        RootPath = E5RT::E5BundleCacheManager::GetRootPath(v290);
        __dst[23] = 10;
        strcpy(__dst, "model-name");
        v200 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v259, (uint64_t)__dst);
        v201 = v200;
        if ((__dst[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)__dst);
          if (!v201)
            goto LABEL_391;
        }
        else if (!v200)
        {
          goto LABEL_391;
        }
        v208 = *(unsigned __int8 *)(RootPath + 47);
        if ((v208 & 0x80u) != 0)
          v208 = *(_QWORD *)(RootPath + 32);
        if (!v208)
          std::string::operator=((std::string *)(RootPath + 24), (const std::string *)(v201 + 5));
LABEL_391:
        __dst[23] = 11;
        strcpy(__dst, "model-owner");
        v209 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v259, (uint64_t)__dst);
        v210 = v209;
        if ((__dst[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)__dst);
          if (!v210)
            goto LABEL_399;
        }
        else if (!v209)
        {
          goto LABEL_399;
        }
        v211 = *(unsigned __int8 *)(RootPath + 23);
        if ((v211 & 0x80u) != 0)
          v211 = *(_QWORD *)(RootPath + 8);
        if (!v211)
          std::string::operator=((std::string *)RootPath, (const std::string *)(v210 + 5));
LABEL_399:
        __dst[23] = 10;
        strcpy(__dst, "model-path");
        v212 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v259, (uint64_t)__dst);
        v213 = v212;
        if ((__dst[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)__dst);
          if (!v213)
            goto LABEL_407;
        }
        else if (!v212)
        {
          goto LABEL_407;
        }
        v214 = *(unsigned __int8 *)(RootPath + 71);
        if ((v214 & 0x80u) != 0)
          v214 = *(_QWORD *)(RootPath + 56);
        if (!v214)
          std::string::operator=((std::string *)(RootPath + 48), (const std::string *)(v213 + 5));
LABEL_407:
        v303.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
        *(_OWORD *)&v303.__r_.__value_.__r.__words[1] = xmmword_191A78340;
        strcpy(v303.__r_.__value_.__l.__data_, "com.apple.EspressoFramework");
        debug_metadata = Espresso::analysis_debug_metadata::get_debug_metadata(v290);
        v18 = v267;
        *(_QWORD *)__dst = &v303;
        v216 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(debug_metadata, (uint64_t)&v303, (uint64_t)&std::piecewise_construct, (__int128 **)__dst);
        v217 = (uint64_t *)*((_QWORD *)this + 149);
        if (v217)
        {
          v218 = (uint64_t)(v216 + 5);
          while (1)
          {
            if (*((char *)v217 + 39) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)__dst, (const std::string::value_type *)v217[2], v217[3]);
            }
            else
            {
              *(_OWORD *)__dst = *((_OWORD *)v217 + 1);
              *(_QWORD *)&__dst[16] = v217[4];
            }
            if (*((char *)v217 + 63) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&__dst[24], (const std::string::value_type *)v217[5], v217[6]);
            }
            else
            {
              *(_OWORD *)&__dst[24] = *(_OWORD *)(v217 + 5);
              v302 = v217[7];
            }
            std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::string>>(v218, __dst, (uint64_t)__dst);
            if (SHIBYTE(v302) < 0)
            {
              operator delete(*(void **)&__dst[24]);
              if ((__dst[23] & 0x80000000) == 0)
                goto LABEL_410;
LABEL_419:
              operator delete(*(void **)__dst);
              v217 = (uint64_t *)*v217;
              if (!v217)
                break;
            }
            else
            {
              if ((__dst[23] & 0x80000000) != 0)
                goto LABEL_419;
LABEL_410:
              v217 = (uint64_t *)*v217;
              if (!v217)
                break;
            }
          }
        }
        Espresso::net::set_analysis<Espresso::analysis_debug_metadata>((uint64_t)v198, &v290);
        if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v303.__r_.__value_.__l.__data_);
          v219 = (std::__shared_weak_count *)v291;
          if (!v291)
            goto LABEL_428;
        }
        else
        {
          v219 = (std::__shared_weak_count *)v291;
          if (!v291)
            goto LABEL_428;
        }
        v220 = (unint64_t *)&v219->__shared_owners_;
        do
          v221 = __ldaxr(v220);
        while (__stlxr(v221 - 1, v220));
        if (!v221)
        {
          ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
          std::__shared_weak_count::__release_weak(v219);
        }
LABEL_428:
        v198 = v273;
      }
      *((_WORD *)v198 + 704) = *(_WORD *)(v40 + 1408);
      *(_OWORD *)&v303.__r_.__value_.__r.__words[1] = 0uLL;
      v303.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2D91FE0;
      Espresso::pass_find_shared_weights::run_on_network((Espresso::pass_find_shared_weights *)&v303, v198, (uint64_t)__dst);
      v222 = *(std::__shared_weak_count **)&__dst[16];
      if (*(_QWORD *)&__dst[16])
      {
        v223 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
        do
          v224 = __ldaxr(v223);
        while (__stlxr(v224 - 1, v223));
        if (!v224)
        {
          ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
          std::__shared_weak_count::__release_weak(v222);
        }
      }
      Espresso::net_pass::~net_pass((Espresso::net_pass *)&v303);
      Espresso::shape_network(v273, (Espresso::net *)(v40 + 184), v225);
      if (v272)
      {
        v288 = v273;
        v289 = v274;
        if (v274)
        {
          v226 = (unint64_t *)&v274->__shared_owners_;
          do
            v227 = __ldxr(v226);
          while (__stxr(v227 + 1, v226));
          if (!v272)
            std::__throw_bad_optional_access[abi:ne180100]();
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v303, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        else
          v303 = __str;
        HIBYTE(v292) = 0;
        LOBYTE(v290) = 0;
        v287 = 0;
        LOBYTE(v286[0]) = 0;
        Espresso::dump_network((uint64_t *)&v288, &v303, (uint64_t)&v290, (uint64_t)v286);
        if ((v287 & 0x80000000) == 0)
        {
          if ((SHIBYTE(v292) & 0x80000000) == 0)
            goto LABEL_444;
LABEL_448:
          operator delete(v290);
          if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_449;
LABEL_445:
          v228 = v289;
          if (!v289)
            goto LABEL_454;
LABEL_450:
          v229 = (unint64_t *)&v228->__shared_owners_;
          do
            v230 = __ldaxr(v229);
          while (__stlxr(v230 - 1, v229));
          if (!v230)
          {
            ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
            std::__shared_weak_count::__release_weak(v228);
          }
          goto LABEL_454;
        }
        operator delete(v286[0]);
        if (SHIBYTE(v292) < 0)
          goto LABEL_448;
LABEL_444:
        if ((SHIBYTE(v303.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_445;
LABEL_449:
        operator delete(v303.__r_.__value_.__l.__data_);
        v228 = v289;
        if (v289)
          goto LABEL_450;
LABEL_454:
        if (!v272)
          std::__throw_bad_optional_access[abi:ne180100]();
        std::string::operator=((std::string *)((char *)v273 + 592), &__str);
      }
      v231 = (char *)v294;
      if (v294)
      {
        do
        {
          v242 = *(char **)v231;
          v243 = (void *)*((_QWORD *)v231 + 5);
          if (v243)
          {
            *((_QWORD *)v231 + 6) = v243;
            operator delete(v243);
          }
          if (v231[39] < 0)
            operator delete(*((void **)v231 + 2));
          operator delete(v231);
          v231 = v242;
        }
        while (v242);
      }
      v232 = v293[0];
      v293[0] = 0;
      if (v232)
        operator delete(v232);
      Espresso::sequential_builder::~sequential_builder((Espresso::sequential_builder *)v299);
      v53 = a2;
      if (v272)
      {
LABEL_460:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
    if (!v273)
      Espresso::throw_exception_selector<Espresso::generic_error>("Unable to cut network into segments");
    v233 = v275;
    v269 = v273;
    v270 = v274;
    if (v274)
    {
      v234 = (unint64_t *)&v274->__shared_owners_;
      do
        v235 = __ldxr(v234);
      while (__stxr(v235 + 1, v234));
    }
    (*(void (**)(uint64_t, Espresso::net **))(*(_QWORD *)v233 + 88))(v233, &v269);
    v236 = v270;
    if (v270)
    {
      v237 = (unint64_t *)&v270->__shared_owners_;
      do
        v238 = __ldaxr(v237);
      while (__stlxr(v238 - 1, v237));
      if (!v238)
      {
        ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
        std::__shared_weak_count::__release_weak(v236);
      }
    }
    v239 = (***(uint64_t (****)(_QWORD))(v275 + 8))(*(_QWORD *)(v275 + 8));
    EspressoLight::espresso_aot_plan::compile_segment(this, v277, v239, v273, v18, (uint64_t)v299);
    end = v53->__end_;
    if (end >= v53->__end_cap_.__value_)
    {
      v53->__end_ = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)v53, (uint64_t)v299);
      if (v281)
        goto LABEL_483;
      goto LABEL_489;
    }
    if (SHIBYTE(v299[0].__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v53->__end_, v299[0].__r_.__value_.__l.__data_, v299[0].__r_.__value_.__l.__size_);
    }
    else
    {
      v241 = *(_OWORD *)&v299[0].__r_.__value_.__l.__data_;
      end->__r_.__value_.__r.__words[2] = v299[0].__r_.__value_.__r.__words[2];
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v241;
    }
    v53->__end_ = end + 1;
    v53->__end_ = end + 1;
    if (!v281)
      goto LABEL_489;
LABEL_483:
    memset(__dst, 0, 24);
    v244 = (char *)HIBYTE(v280);
    if (v280 >= 0)
      v245 = (std::string *)v279;
    else
      v245 = (std::string *)v279[0];
    if (v280 < 0)
      v244 = (char *)v279[1];
    std::string::append[abi:ne180100]<char const*,0>((std::string *)__dst, v245, (std::string *)&v244[(_QWORD)v245]);
    std::__fs::filesystem::__remove_all((const std::__fs::filesystem::path *)__dst, 0);
    if ((__dst[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__dst);
      if (SHIBYTE(v299[0].__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_493;
LABEL_490:
      v246 = v274;
      if (!v274)
        goto LABEL_497;
LABEL_494:
      v247 = (unint64_t *)&v246->__shared_owners_;
      do
        v248 = __ldaxr(v247);
      while (__stlxr(v248 - 1, v247));
      if (v248)
        goto LABEL_497;
      ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
      std::__shared_weak_count::__release_weak(v246);
      v249 = v276;
      if (v276)
      {
LABEL_498:
        v250 = (unint64_t *)&v249->__shared_owners_;
        do
          v251 = __ldaxr(v250);
        while (__stlxr(v251 - 1, v250));
        if (!v251)
        {
          ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
          std::__shared_weak_count::__release_weak(v249);
        }
      }
    }
    else
    {
LABEL_489:
      if ((SHIBYTE(v299[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_490;
LABEL_493:
      operator delete(v299[0].__r_.__value_.__l.__data_);
      v246 = v274;
      if (v274)
        goto LABEL_494;
LABEL_497:
      v249 = v276;
      if (v276)
        goto LABEL_498;
    }
    if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v282[5] - v282[4]) >> 3) > ++v18)
      continue;
    break;
  }
  v252 = v266;
  if (v264 >= 0)
    v252 = 0;
  if (v252 == 1)
    operator delete(__p);
LABEL_508:
  if (v281 && SHIBYTE(v280) < 0)
    operator delete(v279[0]);
  v253 = v283;
  if (v283)
  {
    v254 = (unint64_t *)&v283->__shared_owners_;
    do
      v255 = __ldaxr(v254);
    while (__stlxr(v255 - 1, v254));
    if (!v255)
    {
      ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
      std::__shared_weak_count::__release_weak(v253);
    }
  }
  v256 = v285;
  if (v285)
  {
    v257 = (unint64_t *)&v285->__shared_owners_;
    do
      v258 = __ldaxr(v257);
    while (__stlxr(v258 - 1, v257));
    if (!v258)
    {
      ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
      std::__shared_weak_count::__release_weak(v256);
    }
  }
}

