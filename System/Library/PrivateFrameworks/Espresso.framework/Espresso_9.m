void sub_1911672B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a14);
  MEMORY[0x19401CD90](v14, 0x10F3C40CB988097);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MLCNanoAOTCompilerBackendFactory::GetBackendName(char *a1@<X8>)
{
  a1[23] = 4;
  strcpy(a1, "nano");
}

void Espresso::AOT::MILCompilerForMLC::~MILCompilerForMLC(void **this)
{
  Espresso::AOT::MILCompilerForMLC::~MILCompilerForMLC(this);
  JUMPOUT(0x19401CD90);
}

{
  void **v2;
  void **v3;
  void *v4;

  *this = &off_1E2DA0560;
  if (*((char *)this + 543) < 0)
    operator delete(this[65]);
  Espresso::AOT::MILCompilerForMLC::Options::~Options(this + 33);
  *this = off_1E2DA0650;
  v2 = (void **)this[29];
  if (v2)
  {
    v3 = (void **)this[30];
    v4 = this[29];
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = this[29];
    }
    this[30] = v2;
    operator delete(v4);
  }
  if (*((char *)this + 231) < 0)
  {
    operator delete(this[26]);
    if ((*((char *)this + 207) & 0x80000000) == 0)
      goto LABEL_13;
LABEL_16:
    operator delete(this[23]);
    Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend((Espresso::AOT::AOTCompilerBackend *)this);
    return;
  }
  if (*((char *)this + 207) < 0)
    goto LABEL_16;
LABEL_13:
  Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend((Espresso::AOT::AOTCompilerBackend *)this);
}

void Espresso::AOT::MILCompilerForMLC::Options::~Options(void **this)
{
  if (*((char *)this + 247) < 0)
  {
    operator delete(this[28]);
    if ((*((char *)this + 223) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 199) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*((char *)this + 223) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[25]);
  if ((*((char *)this + 199) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*((char *)this + 175) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(this[22]);
  if ((*((char *)this + 175) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*((char *)this + 151) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(this[19]);
  if ((*((char *)this + 151) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*((char *)this + 119) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(this[16]);
  if ((*((char *)this + 119) & 0x80000000) == 0)
  {
LABEL_7:
    if ((*((char *)this + 95) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_16:
    operator delete(this[9]);
    if (!*((_BYTE *)this + 64))
      goto LABEL_18;
    goto LABEL_17;
  }
LABEL_15:
  operator delete(this[12]);
  if (*((char *)this + 95) < 0)
    goto LABEL_16;
LABEL_8:
  if (!*((_BYTE *)this + 64))
  {
LABEL_18:
    if ((*((char *)this + 31) & 0x80000000) == 0)
      return;
LABEL_21:
    operator delete(this[1]);
    return;
  }
LABEL_17:
  if ((*((char *)this + 63) & 0x80000000) == 0)
    goto LABEL_18;
  operator delete(this[5]);
  if (*((char *)this + 31) < 0)
    goto LABEL_21;
}

_QWORD *std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, _BYTE *a2, _BYTE *a3, unsigned __int8 __c, unsigned __int8 a5)
{
  int v10;
  std::string *v11;
  std::string::size_type size;
  _QWORD *v13;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  std::string::push_back(&v15, __c);
  for (; a2 != a3; ++a2)
  {
    v10 = *a2;
    if (v10 == a5 || v10 == __c)
    {
      std::string::push_back(&v15, a5);
      LOBYTE(v10) = *a2;
    }
    std::string::push_back(&v15, v10);
  }
  std::string::push_back(&v15, __c);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v15;
  else
    v11 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  else
    size = v15.__r_.__value_.__l.__size_;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v11, size);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v13;
}

void sub_191167604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::MILCompilerForMLC::Run(uint64_t *a1, uint64_t a2, os_log_t log)
{
  uint64_t *v3;
  int v4;
  int v5;
  uint64_t *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (*((char *)a1 + 23) >= 0)
    v3 = a1;
  else
    v3 = (uint64_t *)*a1;
  v4 = *(_DWORD *)(a2 + 4);
  v5 = 136315394;
  v6 = v3;
  v7 = 1024;
  v8 = v4;
  _os_log_debug_impl(&dword_190DAF000, log, OS_LOG_TYPE_DEBUG, "MILCompilerForMLC: Run(): Created directory @ %s. Permissions (octal) = 0%o", (uint8_t *)&v5, 0x12u);
}

void `anonymous namespace'::RunCommand(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl(&dword_190DAF000, log, OS_LOG_TYPE_DEBUG, "Invoking MLCompiler", v1, 2u);
}

BOOL Espresso::AOT::CostGraph::Edge::operator==(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
}

BOOL Espresso::AOT::CostGraph::Node::operator==(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 result;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  if (v2 - *a1 != a2[1] - *a2)
    return 0;
  if (v3 == v2)
    return 1;
  do
  {
    result = *(double *)(v3 + 8) == *(double *)(v4 + 8) && *(_QWORD *)v3 == *(_QWORD *)v4;
    v3 += 16;
    v4 += 16;
  }
  while (result && v3 != v2);
  return result;
}

uint64_t **Espresso::AOT::CostGraph::CostGraph(uint64_t **result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  *result = 0;
  result[1] = 0;
  result[2] = 0;
  *(_OWORD *)result = *(_OWORD *)a2;
  result[2] = *(uint64_t **)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v2 = *result;
  v3 = result[1];
  if (*result == v3)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Input graph cannot be empty");
  do
  {
    v4 = *v2;
    v5 = v2[1];
    if (*v2 != v5)
    {
      do
      {
        if (*(double *)(v4 + 8) < 0.0)
          Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Input graph has negative edge cost");
        v4 += 16;
      }
      while (v4 != v5);
    }
    v2 += 3;
  }
  while (v2 != v3);
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  *result = 0;
  result[1] = 0;
  result[2] = 0;
  *(_OWORD *)result = *(_OWORD *)a2;
  result[2] = *(uint64_t **)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v2 = *result;
  v3 = result[1];
  if (*result == v3)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Input graph cannot be empty");
  do
  {
    v4 = *v2;
    v5 = v2[1];
    if (*v2 != v5)
    {
      do
      {
        if (*(double *)(v4 + 8) < 0.0)
          Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Input graph has negative edge cost");
        v4 += 16;
      }
      while (v4 != v5);
    }
    v2 += 3;
  }
  while (v2 != v3);
  return result;
}

void sub_19116782C(_Unwind_Exception *a1)
{
  Espresso::AOT::CostGraph *v1;

  Espresso::AOT::CostGraph::~CostGraph(v1);
  _Unwind_Resume(a1);
}

void sub_191167840(_Unwind_Exception *a1)
{
  Espresso::AOT::CostGraph *v1;

  Espresso::AOT::CostGraph::~CostGraph(v1);
  _Unwind_Resume(a1);
}

void sub_1911678F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)v1)
    Espresso::AOT::CostGraph::CostGraph((void **)(v1 + 8), *(char **)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::CostGraph::FindShortestPath(Espresso::AOT::CostGraph *this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, char **a4@<X8>)
{
  unint64_t v4;
  unint64_t v7;
  int64x2_t *v9;
  double *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int64x2_t *v18;
  uint64_t v19;
  int64x2_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  double v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  double v31;
  double *v32;
  double v33;
  double v34;
  unint64_t v35;
  double v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint8x8_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  double v51;
  uint64_t v52;
  unint64_t v53;
  double v54;
  unint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  void *v60;
  char *v61;
  char *v62;
  char *v63;
  unint64_t v64;
  double v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  __int128 *v78;
  uint64_t v79;
  __int128 v80;
  char *v81;
  char *v83;
  uint64_t v84;
  BOOL v85;
  unint64_t v87;
  double *v88;
  unint64_t v89;
  void *v90[2];
  void *__p[2];
  int v92;
  unint64_t v93;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3);
  if (v4 <= a2 || v4 <= a3)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("src or dst node index is out of range");
  if (v4 >> 60)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v7 = a2;
  v9 = (int64x2_t *)operator new(0xAAAAAAAAAAAAAAB0 * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3));
  v10 = (double *)v9;
  v11 = (v4 - 1) & 0xFFFFFFFFFFFFFFFLL;
  v12 = (unint64_t *)v9;
  if (v11 < 3)
    goto LABEL_126;
  v13 = v11 + 1;
  v12 = (unint64_t *)&v9[v13 & 0x1FFFFFFFFFFFFFFCLL];
  v14 = vdupq_n_s64(v4);
  v15 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v16 = vzip2q_s64(v14, v15);
  v17 = vzip1q_s64(v14, v15);
  v18 = v9 + 2;
  v19 = v13 & 0x1FFFFFFFFFFFFFFCLL;
  do
  {
    v18[-2] = v17;
    v18[-1] = v16;
    *v18 = v17;
    v18[1] = v16;
    v18 += 4;
    v19 -= 4;
  }
  while (v19);
  if (v13 != (v13 & 0x1FFFFFFFFFFFFFFCLL))
  {
LABEL_126:
    do
    {
      *v12 = v4;
      v12[1] = 0x7FEFFFFFFFFFFFFFLL;
      v12 += 2;
    }
    while (v12 != (unint64_t *)&v9[v4]);
  }
  *(_OWORD *)v90 = 0u;
  *(_OWORD *)__p = 0u;
  v92 = 1065353216;
  v20 = &v9[v7];
  v20->i64[0] = v7;
  v20->i64[1] = 0;
  v88 = (double *)v9;
  v89 = v4;
  if (v4 != 1)
  {
    v21 = 0;
    if (v4 <= 1)
      v22 = 1;
    else
      v22 = v4;
    v23 = &v9->i8[8];
    do
    {
      if (v90[1])
      {
        v24 = (unint64_t)v90[1] - 1;
        if (((unint64_t)v90[1] & ((unint64_t)v90[1] - 1)) != 0)
        {
          v53 = 0;
          v54 = 1.79769313e308;
          v27 = v4;
          do
          {
            v55 = v53;
            if ((void *)v53 >= v90[1])
            {
              v55 = v53 % (unint64_t)v90[1];
              v56 = (_QWORD *)*((_QWORD *)v90[0] + v53 % (unint64_t)v90[1]);
              if (v56)
              {
LABEL_69:
                while (1)
                {
                  v56 = (_QWORD *)*v56;
                  if (!v56)
                    break;
                  v57 = v56[1];
                  if (v57 == v53)
                  {
                    if (v56[2] == v53)
                      goto LABEL_61;
                  }
                  else
                  {
                    if ((void *)v57 >= v90[1])
                      v57 %= (unint64_t)v90[1];
                    if (v57 != v55)
                      break;
                  }
                }
              }
            }
            else
            {
              v56 = (_QWORD *)*((_QWORD *)v90[0] + v53);
              if (v56)
                goto LABEL_69;
            }
            if (*(double *)&v23[16 * v53] <= v54)
            {
              v27 = v53;
              v54 = *(double *)&v23[16 * v53];
            }
LABEL_61:
            ++v53;
          }
          while (v53 != v22);
        }
        else
        {
          v25 = 0;
          v26 = 1.79769313e308;
          v27 = v4;
          do
          {
            v28 = (_QWORD *)*((_QWORD *)v90[0] + (v25 & v24));
            if (v28)
            {
              while (1)
              {
                v28 = (_QWORD *)*v28;
                if (!v28)
                  break;
                v29 = v28[1];
                if (v29 == v25)
                {
                  if (v28[2] == v25)
                    goto LABEL_21;
                }
                else if ((v29 & v24) != (v25 & v24))
                {
                  break;
                }
              }
            }
            if (*(double *)&v23[16 * v25] <= v26)
            {
              v27 = v25;
              v26 = *(double *)&v23[16 * v25];
            }
LABEL_21:
            ++v25;
          }
          while (v25 != v22);
        }
      }
      else
      {
        v30 = 0;
        v31 = 1.79769313e308;
        v32 = v10 + 1;
        v27 = v4;
        do
        {
          v33 = *v32;
          v32 += 2;
          v34 = v33;
          if (v33 <= v31)
            v27 = v30;
          v31 = fmin(v34, v31);
          ++v30;
        }
        while (v22 != v30);
      }
      v93 = v27;
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v90, &v93, &v93);
      v35 = v93;
      v36 = *(double *)&v23[16 * v93];
      if (v36 != 1.79769313e308)
      {
        v37 = (uint64_t *)(*(_QWORD *)this + 24 * v93);
        v38 = *v37;
        v39 = v37[1];
        if (v38 != v39)
        {
          v40 = v90[0];
          v41 = (unint64_t)v90[1];
          v42 = (uint8x8_t)vcnt_s8((int8x8_t)v90[1]);
          v42.i16[0] = vaddlv_u8(v42);
          v43 = v42.u32[0];
          v44 = (unint64_t)v90[1] - 1;
          do
          {
            v45 = *(_QWORD *)v38;
            if (v41)
            {
              if (v43 > 1)
              {
                v46 = *(_QWORD *)v38;
                if (v45 >= v41)
                  v46 = v45 % v41;
              }
              else
              {
                v46 = v45 & v44;
              }
              v47 = (_QWORD *)v40[v46];
              if (v47)
              {
                v48 = (_QWORD *)*v47;
                if (v48)
                {
                  if (v43 < 2)
                  {
                    while (1)
                    {
                      v49 = v48[1];
                      if (v49 == v45)
                      {
                        if (v48[2] == v45)
                          goto LABEL_37;
                      }
                      else if ((v49 & v44) != v46)
                      {
                        goto LABEL_58;
                      }
                      v48 = (_QWORD *)*v48;
                      if (!v48)
                        goto LABEL_58;
                    }
                  }
                  do
                  {
                    v50 = v48[1];
                    if (v50 == v45)
                    {
                      if (v48[2] == v45)
                        goto LABEL_37;
                    }
                    else
                    {
                      if (v50 >= v41)
                        v50 %= v41;
                      if (v50 != v46)
                        break;
                    }
                    v48 = (_QWORD *)*v48;
                  }
                  while (v48);
                }
              }
            }
LABEL_58:
            v51 = *(double *)(v38 + 8) + v36;
            v52 = 16 * v45;
            if (v51 < *(double *)&v23[v52])
            {
              *(_QWORD *)&v10[(unint64_t)v52 / 8] = v35;
              *(double *)&v23[v52] = v51;
            }
LABEL_37:
            v38 += 16;
          }
          while (v38 != v39);
        }
      }
      ++v21;
    }
    while (v21 != v4 - 1);
    v58 = __p[0];
    if (__p[0])
    {
      do
      {
        v59 = (_QWORD *)*v58;
        operator delete(v58);
        v58 = v59;
      }
      while (v59);
    }
  }
  v60 = v90[0];
  v90[0] = 0;
  if (v60)
    operator delete(v60);
  v90[0] = 0;
  v90[1] = 0;
  __p[0] = 0;
  v61 = (char *)operator new(8uLL);
  *(_QWORD *)v61 = a3;
  v62 = v61 + 8;
  v90[1] = v61 + 8;
  v63 = v61 + 8;
  v87 = v7;
  v64 = v89;
  while (1)
  {
    v65 = v10[2 * *((_QWORD *)v62 - 1)];
    if (*(_QWORD *)&v65 == v64)
      break;
    if (v62 < v63)
    {
      *(double *)v62 = v65;
      v62 += 8;
      if (*(_QWORD *)&v65 == v7)
        goto LABEL_111;
    }
    else
    {
      v66 = (v62 - v61) >> 3;
      v67 = v66 + 1;
      if ((unint64_t)(v66 + 1) >> 61)
      {
        v90[1] = v62;
        __p[0] = v63;
        v90[0] = v61;
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      if ((v63 - v61) >> 2 > v67)
        v67 = (v63 - v61) >> 2;
      if ((unint64_t)(v63 - v61) >= 0x7FFFFFFFFFFFFFF8)
        v68 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v68 = v67;
      if (v68)
      {
        if (v68 >> 61)
        {
          __p[0] = v63;
          v90[0] = v61;
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        v69 = operator new(8 * v68);
        v70 = &v69[8 * v66];
        *(double *)v70 = v65;
        v71 = (uint64_t)(v70 + 8);
        if (v62 == v61)
        {
LABEL_100:
          v64 = v89;
          v63 = &v69[8 * v68];
          if (!v61)
            goto LABEL_97;
LABEL_96:
          operator delete(v61);
          goto LABEL_97;
        }
      }
      else
      {
        v69 = 0;
        v70 = (char *)(8 * v66);
        *(double *)(8 * v66) = v65;
        v71 = 8 * v66 + 8;
        if (v62 == v61)
          goto LABEL_100;
      }
      v72 = v62 - 8 - v61;
      if (v72 < 0x168
        || &v69[v62 - v61 - 8 - (v72 & 0xFFFFFFFFFFFFFFF8)] > &v69[v62 - v61 - 8]
        || &v62[-(v72 & 0xFFFFFFFFFFFFFFF8) - 8] > v62 - 8
        || (unint64_t)(v61 - v69) < 0x20)
      {
        v73 = v62;
        v64 = v89;
        do
        {
LABEL_94:
          v74 = *((_QWORD *)v73 - 1);
          v73 -= 8;
          *((_QWORD *)v70 - 1) = v74;
          v70 -= 8;
        }
        while (v73 != v61);
        goto LABEL_95;
      }
      v75 = (v72 >> 3) + 1;
      v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
      v73 = &v62[-v76];
      v70 -= v76;
      v77 = &v69[8 * v66 - 16];
      v78 = (__int128 *)(v62 - 16);
      v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
      v64 = v89;
      do
      {
        v80 = *v78;
        *(v77 - 1) = *(v78 - 1);
        *v77 = v80;
        v77 -= 2;
        v78 -= 2;
        v79 -= 4;
      }
      while (v79);
      if (v75 != (v75 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_94;
LABEL_95:
      v63 = &v69[8 * v68];
      if (v61)
        goto LABEL_96;
LABEL_97:
      v61 = v70;
      v62 = (char *)v71;
      v7 = v87;
      v10 = v88;
      if (*(_QWORD *)&v65 == v87)
      {
LABEL_111:
        v81 = v62 - 8;
        if (v61 != v62 && v81 > v61)
        {
          v83 = v61 + 8;
          do
          {
            v84 = *((_QWORD *)v83 - 1);
            *((_QWORD *)v83 - 1) = *(_QWORD *)v81;
            *(_QWORD *)v81 = v84;
            v81 -= 8;
            v85 = v83 >= v81;
            v83 += 8;
          }
          while (!v85);
        }
        *a4 = v61;
        a4[1] = v62;
        a4[2] = v63;
        goto LABEL_120;
      }
    }
  }
  v90[1] = v62;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  if (v61)
    operator delete(v61);
LABEL_120:
  operator delete(v10);
}

void sub_191167F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_191167F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v15;

  if (v15)
  {
    operator delete(v15);
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::AOT::CostGraph::CostGraph(void **a1, char *a2, void **a3)
{
  char *v5;
  void *v6;
  char *v8;
  void *v9;
  void *v10;

  v5 = (char *)*a1;
  v6 = a2;
  if (v5 != a2)
  {
    v8 = v5;
    do
    {
      v10 = (void *)*((_QWORD *)v8 - 3);
      v8 -= 24;
      v9 = v10;
      if (v10)
      {
        *((_QWORD *)v5 - 2) = v9;
        operator delete(v9);
      }
      v5 = v8;
    }
    while (v8 != a2);
    v6 = *a3;
  }
  *a1 = a2;
  operator delete(v6);
}

void Espresso::AOT::MakeBackendValidator(Espresso::AOT::MILSegmenterOptions *this@<X2>, __n128 *a2@<X0>, unsigned int a3@<W1>, Espresso::AOT::Validators::JitCallValidator **a4@<X8>)
{
  __int128 *OutputBundlePath;
  char v8;
  Espresso::AOT::Validators::JitCallValidator *v9;
  uint64_t MlcUseBNNSGraph;
  uint64_t v11;
  char v12;
  const char *BackendName;

  switch(a3)
  {
    case 2u:
      OutputBundlePath = (__int128 *)Espresso::AOT::MILSegmenterOptions::GetOutputBundlePath(this);
      v8 = Espresso::AOT::MILSegmenterOptions::GetOnDeviceCompilation(this);
      v9 = (Espresso::AOT::Validators::JitCallValidator *)operator new();
      Espresso::AOT::Validators::AneValidator::AneValidator((uint64_t)v9, a2, OutputBundlePath, v8);
      break;
    case 3u:
    case 6u:
      v9 = (Espresso::AOT::Validators::JitCallValidator *)operator new();
      Espresso::AOT::Validators::EirValidator::EirValidator(v9, a2);
      break;
    case 4u:
      MlcUseBNNSGraph = Espresso::AOT::MILSegmenterOptions::GetMlcUseBNNSGraph(this);
      v9 = (Espresso::AOT::Validators::JitCallValidator *)operator new();
      Espresso::AOT::Validators::MlcValidator::MlcValidator(v9, a2, MlcUseBNNSGraph);
      break;
    case 5u:
      v11 = Espresso::AOT::MILSegmenterOptions::GetOnDeviceCompilation(this);
      v9 = (Espresso::AOT::Validators::JitCallValidator *)operator new();
      Espresso::AOT::Validators::MpsGraphValidator::MpsGraphValidator(v9, a2, v11);
      break;
    case 7u:
      v9 = (Espresso::AOT::Validators::JitCallValidator *)operator new();
      Espresso::AOT::Validators::JitCallValidator::JitCallValidator(v9);
      break;
    case 8u:
      v12 = Espresso::AOT::MILSegmenterOptions::GetOnDeviceCompilation(this);
      v9 = (Espresso::AOT::Validators::JitCallValidator *)operator new();
      Espresso::AOT::Validators::BnnsValidator::BnnsValidator(v9, a2, v12);
      break;
    case 9u:
      v9 = (Espresso::AOT::Validators::JitCallValidator *)operator new();
      Espresso::AOT::Validators::E5MinimalCpuValidator::E5MinimalCpuValidator(v9);
      break;
    default:
      BackendName = Espresso::AOT::GetBackendName(a3);
      Espresso::throw_exception_selector<Espresso::not_implemented_error,unsigned long long &>("Backend validation for backend %s", &BackendName);
  }
  *a4 = v9;
}

void sub_191168250(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x1081C401B66784ALL);
  _Unwind_Resume(a1);
}

void sub_191168274(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x81C40B8603338);
  _Unwind_Resume(a1);
}

void sub_191168298(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x10A1C40EA59D502);
  _Unwind_Resume(a1);
}

void sub_1911682BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x1093C40B9706223);
  _Unwind_Resume(a1);
}

void sub_19116832C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x1093C40173FB45BLL);
  _Unwind_Resume(a1);
}

void nitro::drop_hints_and_lower_to_fp(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  uint64_t v7;
  __int128 v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string *p_p;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  char v22;
  char *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::string __p;
  void *v58[2];
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  __int128 v64;
  void *v65;
  void *v66;
  char v67;
  void *v68[2];
  uint64_t v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)a1)
  {
    if (*(_BYTE *)(a1 + 40) != 9)
    {
LABEL_88:
      nitro::SExp::SExp(a3, a1);
      return;
    }
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v63, (const nitro::ndarray_container *)(*(_QWORD *)(a1 + 32) + 8));
    if ((v63 - 2) > 9)
      v6 = 1;
    else
      v6 = dword_191A8D864[v63 - 2];
    if ((a2 - 2) > 9)
    {
      if (v6 <= 1)
      {
LABEL_79:
        if (v68[0])
        {
          v68[1] = v68[0];
          operator delete(v68[0]);
        }
        if (v65)
        {
          v66 = v65;
          operator delete(v65);
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
        if (*((_QWORD *)&v64 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        goto LABEL_88;
      }
    }
    else if (v6 <= dword_191A8D864[(int)a2 - 2])
    {
      goto LABEL_79;
    }
    nitro::ndarray_container::cast_to_primitive((nitro::ndarray_container *)&v63, a2, (nitro::ndarray_container *)&__p);
    switch(*(_BYTE *)(a1 + 40))
    {
      case 2:
        v9 = *(unint64_t **)(a1 + 32);
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          v12 = *(_QWORD *)(a1 + 32);
          if (!v12)
            goto LABEL_62;
          if (*(char *)(v12 + 31) < 0)
            operator delete(*(void **)(v12 + 8));
          v13 = v12;
          v14 = 0x1012C404EF22A49;
          goto LABEL_61;
        }
        break;
      case 3:
        v25 = *(unint64_t **)(a1 + 32);
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          v28 = *(_QWORD *)(a1 + 32);
          if (!v28)
            goto LABEL_62;
          v29 = *(void **)(v28 + 8);
          if (v29)
          {
            *(_QWORD *)(v28 + 16) = v29;
            operator delete(v29);
          }
          v13 = v28;
          v14 = 0x1080C409938AC02;
          goto LABEL_61;
        }
        break;
      case 4:
        v30 = *(unint64_t **)(a1 + 32);
        do
        {
          v31 = __ldaxr(v30);
          v32 = v31 - 1;
        }
        while (__stlxr(v32, v30));
        if (!v32)
        {
          v33 = *(_QWORD *)(a1 + 32);
          if (!v33)
            goto LABEL_62;
          v13 = std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(v33);
          goto LABEL_55;
        }
        break;
      case 5:
        v34 = *(unint64_t **)(a1 + 32);
        do
        {
          v35 = __ldaxr(v34);
          v36 = v35 - 1;
        }
        while (__stlxr(v36, v34));
        if (!v36)
        {
          v37 = *(_QWORD *)(a1 + 32);
          if (!v37)
            goto LABEL_62;
          v13 = std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair(v37);
LABEL_55:
          v14 = 0x1020C405E66F15BLL;
          goto LABEL_61;
        }
        break;
      case 9:
        v38 = *(unint64_t **)(a1 + 32);
        do
        {
          v39 = __ldaxr(v38);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v38));
        if (!v40)
        {
          v41 = *(_QWORD **)(a1 + 32);
          if (v41)
          {
            v13 = (uint64_t)std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair(v41);
            v14 = 0x10B0C4002311774;
LABEL_61:
            MEMORY[0x19401CD90](v13, v14);
          }
LABEL_62:
          *(_QWORD *)(a1 + 32) = 0;
        }
        break;
      default:
        break;
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 40) = 9;
    v42 = operator new();
    *(_QWORD *)v42 = 0;
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v42 + 8));
    *(_QWORD *)(a1 + 32) = v42;
    *(_QWORD *)v42 = 1;
    *(_DWORD *)(v42 + 8) = __p.__r_.__value_.__l.__data_;
    v43 = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    v44 = *(std::__shared_weak_count **)(v42 + 24);
    *(_OWORD *)(v42 + 16) = v43;
    if (v44)
    {
      p_shared_owners = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldaxr(p_shared_owners);
      while (__stlxr(v46 - 1, p_shared_owners));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v47 = *(void **)(v42 + 32);
    if (v47)
    {
      *(_QWORD *)(v42 + 40) = v47;
      operator delete(v47);
      *(_QWORD *)(v42 + 32) = 0;
      *(_QWORD *)(v42 + 40) = 0;
      *(_QWORD *)(v42 + 48) = 0;
    }
    v48 = *(void **)(v42 + 56);
    *(_OWORD *)(v42 + 32) = *(_OWORD *)v58;
    *(_QWORD *)(v42 + 48) = v59;
    v58[1] = 0;
    v59 = 0;
    v58[0] = 0;
    if (v48)
    {
      *(_QWORD *)(v42 + 64) = v48;
      operator delete(v48);
      *(_QWORD *)(v42 + 56) = 0;
      *(_QWORD *)(v42 + 64) = 0;
      *(_QWORD *)(v42 + 72) = 0;
      v48 = v58[0];
    }
    *(_OWORD *)(v42 + 56) = v60;
    v49 = v61;
    v50 = v62;
    v61 = 0;
    v60 = 0uLL;
    *(_QWORD *)(v42 + 72) = v49;
    *(_QWORD *)(v42 + 80) = v50;
    if (v48)
    {
      v58[1] = v48;
      operator delete(v48);
    }
    v51 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
    if (__p.__r_.__value_.__r.__words[2])
    {
      v52 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    goto LABEL_79;
  }
  v7 = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)(a1 + 56) == v7)
  {
    nitro::SExp::SExp(a3, a1);
    return;
  }
  if (*(char *)(v7 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
  }
  else
  {
    v8 = *(_OWORD *)(v7 + 8);
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 24);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_ != 4)
      goto LABEL_29;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 4)
      goto LABEL_29;
    p_p = &__p;
  }
  if (LODWORD(p_p->__r_.__value_.__l.__data_) != 1414416712)
  {
LABEL_29:
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)(a3 + 64) = 0;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_BYTE *)(a3 + 40) = 0;
    *(_WORD *)a3 = 0;
    v16 = std::vector<nitro::SExp>::__push_back_slow_path<nitro::SExp const&>((void **)(a3 + 48), *(_QWORD *)(a1 + 48));
    v17 = *(_QWORD *)(a1 + 48);
    v18 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a3 + 56) = v16;
    if (0x8E38E38E38E38E39 * ((v18 - v17) >> 3) >= 2)
    {
      v19 = 1;
      v20 = 72;
      do
      {
        nitro::drop_hints_and_lower_to_fp(v17 + v20, a2);
        v24 = *(_QWORD *)(a3 + 56);
        if (v24 < *(_QWORD *)(a3 + 64))
        {
          *(_WORD *)v24 = v63;
          v21 = v64;
          *(_QWORD *)(v24 + 24) = v65;
          *(_QWORD *)(v24 + 32) = 0;
          *(_OWORD *)(v24 + 8) = v21;
          v65 = 0;
          v64 = 0uLL;
          *(_BYTE *)(v24 + 40) = 0;
          v22 = v67;
          *(_QWORD *)(v24 + 32) = v66;
          *(_BYTE *)(v24 + 40) = v22;
          *(_BYTE *)(v24 + 40) = v67;
          v67 = 0;
          *(_QWORD *)(v24 + 48) = 0;
          *(_QWORD *)(v24 + 56) = 0;
          *(_QWORD *)(v24 + 64) = 0;
          *(_OWORD *)(v24 + 48) = *(_OWORD *)v68;
          *(_QWORD *)(v24 + 64) = v69;
          v68[0] = 0;
          v68[1] = 0;
          v69 = 0;
          v23 = (char *)(v24 + 72);
        }
        else
        {
          v23 = std::vector<nitro::SExp>::__push_back_slow_path<nitro::SExp>((void **)(a3 + 48), (uint64_t)&v63);
        }
        *(_QWORD *)(a3 + 56) = v23;
        nitro::SExp::~SExp((nitro::SExp *)&v63);
        ++v19;
        v17 = *(_QWORD *)(a1 + 48);
        v20 += 72;
      }
      while (v19 < 0x8E38E38E38E38E39 * ((*(_QWORD *)(a1 + 56) - v17) >> 3));
    }
    goto LABEL_36;
  }
  nitro::drop_hints_and_lower_to_fp(*(_QWORD *)(a1 + 48) + 144, a2);
LABEL_36:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_191168954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray_container::~ndarray_container(nitro::ndarray_container *this)
{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void nitro::nitro_program::load(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v6;
  Espresso::network_ensemble *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  size_t v12;
  unint64_t v13;
  std::string *p_dst;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  const nitro::SExp *v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  nitro::nitro_class *v30;
  const nitro::ir::DEFCLASS *v31;
  uint64_t v32;
  int v33;
  size_t v34;
  unint64_t v35;
  __int128 *v36;
  uint64_t v37;
  uint64_t v38;
  const void *v39;
  const char *v40;
  DIR *v41;
  int v42;
  size_t v43;
  unint64_t v44;
  __int128 *v45;
  uint64_t v46;
  uint64_t v47;
  const void *v48;
  int v49;
  size_t v50;
  unint64_t v51;
  uint64_t *v52;
  __int128 *v53;
  uint64_t v54;
  uint64_t v55;
  const void *v56;
  uint64_t **v57;
  _BOOL4 root_network;
  _BOOL4 v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  int v64;
  size_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  __int128 *v70;
  std::string *p_src;
  std::string::size_type size;
  std::string *v73;
  __int128 v74;
  std::string *v75;
  __int128 v76;
  uint64_t *v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  __int128 **output_names;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  const char *v88;
  DIR *v89;
  dirent *v90;
  char *d_name;
  size_t v92;
  std::string::size_type v93;
  _BYTE *v94;
  uint64_t v95;
  uint64_t v96;
  std::string::size_type v97;
  std::string *v98;
  char *v99;
  BOOL v100;
  std::string::size_type v101;
  std::string *v102;
  size_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  size_t v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  __int128 *v113;
  void **v114;
  std::string::size_type v115;
  std::string *v116;
  __int128 v117;
  std::string *v118;
  __int128 v119;
  uint64_t *v120;
  int v121;
  size_t v122;
  unint64_t v123;
  uint64_t *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  __int128 *v128;
  void **v129;
  std::string::size_type v130;
  std::string *v131;
  __int128 v132;
  std::string *v133;
  __int128 v134;
  __int128 **v135;
  uint64_t v136;
  uint64_t *v137;
  int v138;
  size_t v139;
  unint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  const void *v144;
  uint64_t *v145;
  uint64_t *v146;
  int64_t v147;
  uint64_t *v148;
  uint64_t *v149;
  int64_t v150;
  uint64_t *v151;
  uint64_t *v152;
  int64_t v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  uint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  unint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t v169;
  _QWORD *v170;
  void *v171;
  unint64_t *v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  unint64_t *v178;
  unint64_t v179;
  unint64_t v180;
  _QWORD *v181;
  void *v182;
  void *v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  unint64_t *v187;
  unint64_t v188;
  unint64_t v189;
  std::string::size_type v190;
  _QWORD *v191;
  uint64_t v192;
  unint64_t *v193;
  unint64_t v194;
  unint64_t v195;
  std::string::size_type v196;
  uint64_t v197;
  uint64_t v198;
  void *v199;
  unint64_t *v200;
  unint64_t v201;
  unint64_t v202;
  std::string::size_type v203;
  void *v204;
  unint64_t *v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  void *v210;
  unint64_t *v211;
  unint64_t v212;
  unint64_t v213;
  _QWORD *v214;
  void *v215;
  void *v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  unint64_t *v220;
  unint64_t v221;
  unint64_t v222;
  std::string::size_type v223;
  _QWORD *v224;
  uint64_t v225;
  unint64_t *v226;
  unint64_t v227;
  unint64_t v228;
  std::string::size_type v229;
  uint64_t v230;
  uint64_t v231;
  void *v232;
  unint64_t *v233;
  unint64_t v234;
  unint64_t v235;
  std::string::size_type v236;
  void *v237;
  unint64_t *v238;
  unint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  void *v243;
  unint64_t *v244;
  unint64_t v245;
  unint64_t v246;
  _QWORD *v247;
  void *v248;
  void *v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  unint64_t *v253;
  unint64_t v254;
  unint64_t v255;
  std::string::size_type v256;
  _QWORD *v257;
  uint64_t v258;
  unint64_t *v259;
  unint64_t v260;
  unint64_t v261;
  std::string::size_type v262;
  uint64_t v263;
  uint64_t v264;
  void *v265;
  unint64_t *v266;
  unint64_t v267;
  unint64_t v268;
  std::string::size_type v269;
  void *v270;
  unint64_t *v271;
  unint64_t v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  void *v276;
  unint64_t *v277;
  unint64_t v278;
  unint64_t v279;
  _QWORD *v280;
  void *v281;
  void *v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  uint64_t *v286;
  __int128 v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  void *v296;
  char **v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  const void **v301;
  uint64_t **v302;
  __int128 v303;
  void *__p[2];
  int64_t v305;
  uint64_t v306;
  std::string __dst;
  uint64_t v308;
  char v309;
  std::string v310;
  std::string v311;
  std::string v312;
  __int128 v313;
  int64_t v314;
  std::string __src;
  __int128 v316;
  char v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  __int128 v321;
  unint64_t v322;
  char **v323;
  uint64_t v324[2];
  std::string *v325;
  std::string *v326;
  std::string *v327;
  std::string *v328;
  char v329;
  _QWORD v330[22];

  v330[19] = *MEMORY[0x1E0C80C00];
  v6 = (uint64_t *)operator new(0xB0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = (uint64_t)&off_1E2DB9B48;
  v7 = Espresso::network_ensemble::network_ensemble((Espresso::network_ensemble *)(v6 + 3));
  v8 = (std::__shared_weak_count *)a1[1];
  *a1 = (uint64_t *)v7;
  a1[1] = v6;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = *((char *)a2 + 23);
  if (v11 >= 0)
    v12 = *((unsigned __int8 *)a2 + 23);
  else
    v12 = (size_t)a2[1];
  v13 = v12 + 13;
  if (v12 + 13 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v13 >= 0x17)
  {
    v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v15 = v13 | 7;
    v16 = v15 + 1;
    p_dst = (std::string *)operator new(v15 + 1);
    __dst.__r_.__value_.__l.__size_ = v12 + 13;
    __dst.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v12 + 13;
    if (!v12)
      goto LABEL_20;
  }
  if (v11 >= 0)
    v17 = a2;
  else
    v17 = *a2;
  memmove(p_dst, v17, v12);
LABEL_20:
  strcpy((char *)p_dst + v12, "/code.nitroir");
  std::ifstream::basic_ifstream(&v321);
  if (*(_DWORD *)((char *)v324 + *(_QWORD *)(v321 - 24)))
    nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_0::operator()();
  __p[0] = &v321;
  __p[1] = 0;
  v305 = 0;
  v306 = 0;
  __src.__r_.__value_.__s.__data_[1] = 0;
  v319 = 0;
  v320 = 0;
  v318 = 0;
  *(_OWORD *)&__src.__r_.__value_.__r.__words[1] = 0u;
  v316 = 0u;
  v317 = 0;
  nitro::SExp::load((nitro::SExp *)&__src, (uint64_t)__p);
  nitro::drop_hints_and_lower_to_fp((uint64_t)&__src, a3, (uint64_t)&v313);
  nitro::SExp::operator=((uint64_t)&__src, (uint64_t)&v313);
  nitro::SExp::~SExp((nitro::SExp *)&v313);
  nitro::ir::parse_tree((uint64_t *)&v313, (nitro::ir *)&__src, v18);
  v19 = (char *)operator new(0x90uLL);
  v20 = (std::__shared_weak_count *)v19;
  *((_QWORD *)v19 + 1) = 0;
  v21 = (unint64_t *)(v19 + 8);
  *((_QWORD *)v19 + 2) = 0;
  *(_QWORD *)v19 = &off_1E2DB6150;
  v22 = (uint64_t *)(v19 + 24);
  *(_OWORD *)(v19 + 88) = 0u;
  *((_QWORD *)v19 + 17) = 0;
  *(_OWORD *)(v19 + 40) = 0u;
  *(_OWORD *)(v19 + 56) = 0u;
  *(_OWORD *)(v19 + 72) = 0u;
  *((_DWORD *)v19 + 24) = 1065353216;
  *(_OWORD *)(v19 + 120) = 0u;
  *(_OWORD *)(v19 + 104) = 0u;
  *((_DWORD *)v19 + 34) = 1065353216;
  do
    v23 = __ldxr(v21);
  while (__stxr(v23 + 1, v21));
  v24 = (unint64_t *)(v19 + 16);
  do
    v25 = __ldxr(v24);
  while (__stxr(v25 + 1, v24));
  *((_QWORD *)v19 + 3) = v19 + 24;
  *((_QWORD *)v19 + 4) = v19;
  do
    v26 = __ldaxr(v21);
  while (__stlxr(v26 - 1, v21));
  if (!v26)
  {
    (*(void (**)(char *))(*(_QWORD *)v19 + 16))(v19);
    std::__shared_weak_count::__release_weak(v20);
  }
  v27 = (std::__shared_weak_count *)a1[3];
  a1[2] = v22;
  a1[3] = (uint64_t *)v20;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (nitro::nitro_class *)a1[2];
  nitro::nitro_class::load_nitro_class(v30, v31);
  v32 = v313;
  *(_QWORD *)&v313 = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
  nitro::SExp::~SExp((nitro::SExp *)&__src);
  *(_QWORD *)&v321 = *MEMORY[0x1E0DE4F40];
  v299 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  v300 = v321;
  *(_QWORD *)((char *)&v321 + *(_QWORD *)(v321 - 24)) = v299;
  MEMORY[0x19401C8BC](&v322);
  std::istream::~istream();
  MEMORY[0x19401CCD0](v330);
  v33 = *((char *)a2 + 23);
  if (v33 >= 0)
    v34 = *((unsigned __int8 *)a2 + 23);
  else
    v34 = (size_t)a2[1];
  v35 = v34 + 11;
  if (v34 + 11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v35 >= 0x17)
  {
    v37 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v37 = v35 | 7;
    v38 = v37 + 1;
    v36 = (__int128 *)operator new(v37 + 1);
    *((_QWORD *)&v313 + 1) = v34 + 11;
    v314 = v38 | 0x8000000000000000;
    *(_QWORD *)&v313 = v36;
  }
  else
  {
    v314 = 0;
    v313 = 0uLL;
    v36 = &v313;
    HIBYTE(v314) = v34 + 11;
    if (!v34)
      goto LABEL_50;
  }
  if (v33 >= 0)
    v39 = a2;
  else
    v39 = *a2;
  memmove(v36, v39, v34);
LABEL_50:
  strcpy((char *)v36 + v34, "/_nespresso");
  if (v314 >= 0)
    v40 = (const char *)&v313;
  else
    v40 = (const char *)v313;
  v41 = opendir(v40);
  if (v41)
  {
    closedir(v41);
    goto LABEL_72;
  }
  v42 = *((char *)a2 + 23);
  if (v42 >= 0)
    v43 = *((unsigned __int8 *)a2 + 23);
  else
    v43 = (size_t)a2[1];
  v44 = v43 + 8;
  if (v43 + 8 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v44 >= 0x17)
  {
    v46 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17)
      v46 = v44 | 7;
    v47 = v46 + 1;
    v45 = (__int128 *)operator new(v46 + 1);
    *((_QWORD *)&v321 + 1) = v43 + 8;
    v322 = v47 | 0x8000000000000000;
    *(_QWORD *)&v321 = v45;
    goto LABEL_65;
  }
  v322 = 0;
  v321 = 0uLL;
  v45 = &v321;
  HIBYTE(v322) = v43 + 8;
  if (v43)
  {
LABEL_65:
    if (v42 >= 0)
      v48 = a2;
    else
      v48 = *a2;
    memmove(v45, v48, v43);
  }
  strcpy((char *)v45 + v43, "/_coreml");
  if (SHIBYTE(v314) < 0)
    operator delete((void *)v313);
  v313 = v321;
  v314 = v322;
LABEL_72:
  v302 = a1;
  v49 = *((char *)a2 + 23);
  if (v49 >= 0)
    v50 = *((unsigned __int8 *)a2 + 23);
  else
    v50 = (size_t)a2[1];
  v51 = v50 + 22;
  if (v50 + 22 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v52 = *v302;
  if (v51 >= 0x17)
  {
    v54 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v51 | 7) != 0x17)
      v54 = v51 | 7;
    v55 = v54 + 1;
    v53 = (__int128 *)operator new(v54 + 1);
    *((_QWORD *)&v321 + 1) = v50 + 22;
    v322 = v55 | 0x8000000000000000;
    *(_QWORD *)&v321 = v53;
  }
  else
  {
    v322 = 0;
    v321 = 0uLL;
    v53 = &v321;
    HIBYTE(v322) = v50 + 22;
    if (!v50)
      goto LABEL_86;
  }
  if (v49 >= 0)
    v56 = a2;
  else
    v56 = *a2;
  memmove(v53, v56, v50);
LABEL_86:
  v57 = v302;
  strcpy((char *)v53 + v50, "/networks.espresso.net");
  root_network = Espresso::network_ensemble::load_root_network(v52, (uint64_t)&v321);
  v59 = root_network;
  if (SHIBYTE(v322) < 0)
  {
    operator delete((void *)v321);
    v301 = a2;
    if (v59)
    {
LABEL_88:
      v60 = (*v302)[2];
      if (!v60)
        goto LABEL_241;
      while (1)
      {
        if (*(char *)(v60 + 39) < 0)
          std::string::__init_copy_ctor_external(&__src, *(const std::string::value_type **)(v60 + 16), *(_QWORD *)(v60 + 24));
        else
          __src = *(std::string *)(v60 + 16);
        v61 = *(_QWORD *)(v60 + 48);
        *(_QWORD *)&v316 = *(_QWORD *)(v60 + 40);
        *((_QWORD *)&v316 + 1) = v61;
        if (v61)
        {
          v62 = (unint64_t *)(v61 + 8);
          do
            v63 = __ldxr(v62);
          while (__stxr(v63 + 1, v62));
        }
        nitro::model_metadata::model_metadata((nitro::model_metadata *)&v321);
        v64 = SHIBYTE(v314);
        if (v314 >= 0)
          v65 = HIBYTE(v314);
        else
          v65 = *((_QWORD *)&v313 + 1);
        v66 = v65 + 1;
        if (v65 + 1 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v66 >= 0x17)
        {
          v68 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v66 | 7) != 0x17)
            v68 = v66 | 7;
          v69 = v68 + 1;
          v67 = (char *)operator new(v68 + 1);
          v311.__r_.__value_.__r.__words[2] = v69 | 0x8000000000000000;
          v311.__r_.__value_.__r.__words[0] = (std::string::size_type)v67;
          v311.__r_.__value_.__l.__size_ = v65 + 1;
        }
        else
        {
          memset(&v311, 0, sizeof(v311));
          v67 = (char *)&v311;
          *((_BYTE *)&v311.__r_.__value_.__s + 23) = v65 + 1;
          if (!v65)
            goto LABEL_112;
        }
        if (v64 >= 0)
          v70 = &v313;
        else
          v70 = (__int128 *)v313;
        memmove(v67, v70, v65);
LABEL_112:
        *(_WORD *)&v67[v65] = 47;
        if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_src = &__src;
        else
          p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
        if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__src.__r_.__value_.__r.__words[2]);
        else
          size = __src.__r_.__value_.__l.__size_;
        v73 = std::string::append(&v311, (const std::string::value_type *)p_src, size);
        v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
        v312.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v312.__r_.__value_.__l.__data_ = v74;
        v73->__r_.__value_.__l.__size_ = 0;
        v73->__r_.__value_.__r.__words[2] = 0;
        v73->__r_.__value_.__r.__words[0] = 0;
        v75 = std::string::append(&v312, ".meta");
        v57 = v302;
        v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
        v305 = v75->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v76;
        v75->__r_.__value_.__l.__size_ = 0;
        v75->__r_.__value_.__r.__words[2] = 0;
        v75->__r_.__value_.__r.__words[0] = 0;
        nitro::model_metadata::load_model_metadata((char **)&v321);
        if (SHIBYTE(v305) < 0)
        {
          operator delete(__p[0]);
          if ((SHIBYTE(v312.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_120:
            if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_138;
            goto LABEL_121;
          }
        }
        else if ((SHIBYTE(v312.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_120;
        }
        operator delete(v312.__r_.__value_.__l.__data_);
        if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
LABEL_138:
          operator delete(v311.__r_.__value_.__l.__data_);
LABEL_121:
        __p[0] = &__src;
        v77 = std::__tree<std::__value_type<std::string,nitro::model_metadata>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::model_metadata>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::model_metadata>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v302 + 6, (const void **)&__src.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
        if (v77 + 7 != (uint64_t *)&v321)
        {
          std::vector<std::vector<long long>>::__assign_with_size[abi:ne180100]<std::vector<long long>*,std::vector<long long>*>((uint64_t)(v77 + 7), (char **)v321, *((uint64_t *)&v321 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v321 + 1) - v321) >> 3));
          std::vector<std::vector<long long>>::__assign_with_size[abi:ne180100]<std::vector<long long>*,std::vector<long long>*>((uint64_t)(v77 + 10), v323, v324[0], 0xAAAAAAAAAAAAAAABLL * ((v324[0] - (uint64_t)v323) >> 3));
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v77 + 13), v325, v326, 0xAAAAAAAAAAAAAAABLL * (((char *)v326 - (char *)v325) >> 3));
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v77 + 16), v327, v328, 0xAAAAAAAAAAAAAAABLL * (((char *)v328 - (char *)v327) >> 3));
        }
        *((_BYTE *)v77 + 152) = v329;
        v78 = (uint64_t)*v302;
        v303 = v316;
        if (*((_QWORD *)&v316 + 1))
        {
          v79 = (unint64_t *)(*((_QWORD *)&v316 + 1) + 8);
          do
            v80 = __ldxr(v79);
          while (__stxr(v80 + 1, v79));
        }
        output_names = (__int128 **)nitro::model_metadata::get_output_names((nitro::model_metadata *)&v321);
        Espresso::network_ensemble::setup_network(v78, &v303, output_names);
        v82 = (std::__shared_weak_count *)*((_QWORD *)&v303 + 1);
        if (*((_QWORD *)&v303 + 1))
        {
          v83 = (unint64_t *)(*((_QWORD *)&v303 + 1) + 8);
          do
            v84 = __ldaxr(v83);
          while (__stlxr(v84 - 1, v83));
          if (!v84)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
        nitro::model_metadata::~model_metadata((nitro::model_metadata *)&v321);
        v85 = (std::__shared_weak_count *)*((_QWORD *)&v316 + 1);
        if (*((_QWORD *)&v316 + 1))
        {
          v86 = (unint64_t *)(*((_QWORD *)&v316 + 1) + 8);
          do
            v87 = __ldaxr(v86);
          while (__stlxr(v87 - 1, v86));
          if (!v87)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
        }
        if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__src.__r_.__value_.__l.__data_);
          v60 = *(_QWORD *)v60;
          if (!v60)
            goto LABEL_241;
        }
        else
        {
          v60 = *(_QWORD *)v60;
          if (!v60)
            goto LABEL_241;
        }
      }
    }
  }
  else
  {
    v301 = a2;
    if (root_network)
      goto LABEL_88;
  }
  if (v314 >= 0)
    v88 = (const char *)&v313;
  else
    v88 = (const char *)v313;
  v89 = opendir(v88);
  if (v89)
  {
    while (1)
    {
      v90 = readdir(v89);
      if (!v90)
      {
        closedir(v89);
        goto LABEL_241;
      }
      d_name = v90->d_name;
      v92 = strlen(v90->d_name);
      if (v92 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v93 = v92;
      if (v92 >= 0x17)
        break;
      *((_BYTE *)&__src.__r_.__value_.__s + 23) = v92;
      v94 = &__src;
      if (v92)
        goto LABEL_156;
LABEL_157:
      v94[v93] = 0;
      if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
      {
        v97 = __src.__r_.__value_.__l.__size_;
        if (__src.__r_.__value_.__l.__size_ <= 9)
          goto LABEL_147;
        v98 = (std::string *)__src.__r_.__value_.__r.__words[0];
        goto LABEL_162;
      }
      v97 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
      if (HIBYTE(__src.__r_.__value_.__r.__words[2]) >= 0xAu)
      {
        v98 = &__src;
LABEL_162:
        v99 = (char *)v98 + v97;
        v100 = *(_QWORD *)(v99 - 9) == 0x6C65646F6D6C6D2ELL && *(v99 - 1) == 99;
        v101 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
        if (v100)
        {
          if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
          {
            v101 = __src.__r_.__value_.__l.__size_;
            v102 = (std::string *)__src.__r_.__value_.__r.__words[0];
          }
          else
          {
            v102 = &__src;
          }
          if (v101 >= v101 - 9)
            v103 = v101 - 9;
          else
            v103 = v101;
          if (v103 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v103 >= 0x17)
          {
            v105 = (v103 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v103 | 7) != 0x17)
              v105 = v103 | 7;
            v106 = v105 + 1;
            v104 = operator new(v105 + 1);
            __p[1] = (void *)v103;
            v305 = v106 | 0x8000000000000000;
            __p[0] = v104;
LABEL_181:
            memmove(v104, v102, v103);
            goto LABEL_182;
          }
          HIBYTE(v305) = v103;
          v104 = __p;
          if (v103)
            goto LABEL_181;
LABEL_182:
          *((_BYTE *)v104 + v103) = 0;
          nitro::model_metadata::model_metadata((nitro::model_metadata *)&v321);
          v107 = SHIBYTE(v314);
          if (v314 >= 0)
            v108 = HIBYTE(v314);
          else
            v108 = *((_QWORD *)&v313 + 1);
          v109 = v108 + 1;
          if (v108 + 1 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v109 >= 0x17)
          {
            v111 = (v109 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v109 | 7) != 0x17)
              v111 = v109 | 7;
            v112 = v111 + 1;
            v110 = (char *)operator new(v111 + 1);
            v310.__r_.__value_.__l.__size_ = v108 + 1;
            v310.__r_.__value_.__r.__words[2] = v112 | 0x8000000000000000;
            v310.__r_.__value_.__r.__words[0] = (std::string::size_type)v110;
          }
          else
          {
            memset(&v310, 0, sizeof(v310));
            v110 = (char *)&v310;
            *((_BYTE *)&v310.__r_.__value_.__s + 23) = v108 + 1;
            if (!v108)
              goto LABEL_196;
          }
          if (v107 >= 0)
            v113 = &v313;
          else
            v113 = (__int128 *)v313;
          memmove(v110, v113, v108);
LABEL_196:
          *(_WORD *)&v110[v108] = 47;
          if (v305 >= 0)
            v114 = __p;
          else
            v114 = (void **)__p[0];
          if (v305 >= 0)
            v115 = HIBYTE(v305);
          else
            v115 = (std::string::size_type)__p[1];
          v116 = std::string::append(&v310, (const std::string::value_type *)v114, v115);
          v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
          v311.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v311.__r_.__value_.__l.__data_ = v117;
          v116->__r_.__value_.__l.__size_ = 0;
          v116->__r_.__value_.__r.__words[2] = 0;
          v116->__r_.__value_.__r.__words[0] = 0;
          v118 = std::string::append(&v311, ".meta");
          v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
          v312.__r_.__value_.__r.__words[2] = v118->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v312.__r_.__value_.__l.__data_ = v119;
          v118->__r_.__value_.__l.__size_ = 0;
          v118->__r_.__value_.__r.__words[2] = 0;
          v118->__r_.__value_.__r.__words[0] = 0;
          nitro::model_metadata::load_model_metadata((char **)&v321);
          if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v312.__r_.__value_.__l.__data_);
            if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
            {
LABEL_235:
              operator delete(v311.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v310.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_205;
              goto LABEL_236;
            }
          }
          else if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
          {
            goto LABEL_235;
          }
          if ((SHIBYTE(v310.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_205;
LABEL_236:
          operator delete(v310.__r_.__value_.__l.__data_);
LABEL_205:
          v312.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          v120 = std::__tree<std::__value_type<std::string,nitro::model_metadata>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::model_metadata>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::model_metadata>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v302 + 6, (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v312);
          if (v120 + 7 != (uint64_t *)&v321)
          {
            std::vector<std::vector<long long>>::__assign_with_size[abi:ne180100]<std::vector<long long>*,std::vector<long long>*>((uint64_t)(v120 + 7), (char **)v321, *((uint64_t *)&v321 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v321 + 1) - v321) >> 3));
            std::vector<std::vector<long long>>::__assign_with_size[abi:ne180100]<std::vector<long long>*,std::vector<long long>*>((uint64_t)(v120 + 10), v323, v324[0], 0xAAAAAAAAAAAAAAABLL * ((v324[0] - (uint64_t)v323) >> 3));
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v120 + 13), v325, v326, 0xAAAAAAAAAAAAAAABLL * (((char *)v326 - (char *)v325) >> 3));
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v120 + 16), v327, v328, 0xAAAAAAAAAAAAAAABLL * (((char *)v328 - (char *)v327) >> 3));
          }
          *((_BYTE *)v120 + 152) = v329;
          v121 = SHIBYTE(v314);
          if (v314 >= 0)
            v122 = HIBYTE(v314);
          else
            v122 = *((_QWORD *)&v313 + 1);
          v123 = v122 + 1;
          if (v122 + 1 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v124 = *v302;
          if (v123 >= 0x17)
          {
            v126 = (v123 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v123 | 7) != 0x17)
              v126 = v123 | 7;
            v127 = v126 + 1;
            v125 = (char *)operator new(v126 + 1);
            v310.__r_.__value_.__l.__size_ = v122 + 1;
            v310.__r_.__value_.__r.__words[2] = v127 | 0x8000000000000000;
            v310.__r_.__value_.__r.__words[0] = (std::string::size_type)v125;
          }
          else
          {
            memset(&v310, 0, sizeof(v310));
            v125 = (char *)&v310;
            *((_BYTE *)&v310.__r_.__value_.__s + 23) = v122 + 1;
            if (!v122)
              goto LABEL_221;
          }
          if (v121 >= 0)
            v128 = &v313;
          else
            v128 = (__int128 *)v313;
          memmove(v125, v128, v122);
LABEL_221:
          v57 = v302;
          *(_WORD *)&v125[v122] = 47;
          if (v305 >= 0)
            v129 = __p;
          else
            v129 = (void **)__p[0];
          if (v305 >= 0)
            v130 = HIBYTE(v305);
          else
            v130 = (std::string::size_type)__p[1];
          v131 = std::string::append(&v310, (const std::string::value_type *)v129, v130);
          v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
          v311.__r_.__value_.__r.__words[2] = v131->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v311.__r_.__value_.__l.__data_ = v132;
          v131->__r_.__value_.__l.__size_ = 0;
          v131->__r_.__value_.__r.__words[2] = 0;
          v131->__r_.__value_.__r.__words[0] = 0;
          v133 = std::string::append(&v311, ".mlmodelc/model.espresso.net");
          v134 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
          v312.__r_.__value_.__r.__words[2] = v133->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v312.__r_.__value_.__l.__data_ = v134;
          v133->__r_.__value_.__l.__size_ = 0;
          v133->__r_.__value_.__r.__words[2] = 0;
          v133->__r_.__value_.__r.__words[0] = 0;
          v135 = (__int128 **)nitro::model_metadata::get_output_names((nitro::model_metadata *)&v321);
          Espresso::network_ensemble::load_network(v124, (__int128 *)__p, (uint64_t)&v312, v135);
          if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v312.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v311.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_229:
              if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_239;
              goto LABEL_230;
            }
          }
          else if ((SHIBYTE(v311.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_229;
          }
          operator delete(v311.__r_.__value_.__l.__data_);
          if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
LABEL_239:
            operator delete(v310.__r_.__value_.__l.__data_);
LABEL_230:
          v136 = (uint64_t)*v302;
          v312.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          v137 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v136, (uint64_t)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v312);
          std::string::operator=((std::string *)(v137[5] + 424), &__dst);
          nitro::model_metadata::~model_metadata((nitro::model_metadata *)&v321);
          if (SHIBYTE(v305) < 0)
            operator delete(__p[0]);
          if ((*((_BYTE *)&__src.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_147:
            operator delete(__src.__r_.__value_.__l.__data_);
        }
        else if ((*((_BYTE *)&__src.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          goto LABEL_147;
        }
      }
    }
    v95 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v92 | 7) != 0x17)
      v95 = v92 | 7;
    v96 = v95 + 1;
    v94 = operator new(v95 + 1);
    __src.__r_.__value_.__l.__size_ = v93;
    __src.__r_.__value_.__r.__words[2] = v96 | 0x8000000000000000;
    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v94;
LABEL_156:
    memmove(v94, d_name, v93);
    goto LABEL_157;
  }
LABEL_241:
  v138 = *((char *)v301 + 23);
  if (v138 >= 0)
    v139 = *((unsigned __int8 *)v301 + 23);
  else
    v139 = (size_t)v301[1];
  v140 = v139 + 14;
  if (v139 + 14 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v140 >= 0x17)
  {
    v142 = (v140 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v140 | 7) != 0x17)
      v142 = v140 | 7;
    v143 = v142 + 1;
    v141 = operator new(v142 + 1);
    __src.__r_.__value_.__l.__size_ = v139 + 14;
    __src.__r_.__value_.__r.__words[2] = v143 | 0x8000000000000000;
    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v141;
  }
  else
  {
    memset(&__src, 0, sizeof(__src));
    v141 = &__src;
    *((_BYTE *)&__src.__r_.__value_.__s + 23) = v139 + 14;
    if (!v139)
      goto LABEL_255;
  }
  if (v138 >= 0)
    v144 = v301;
  else
    v144 = *v301;
  memmove(v141, v144, v139);
LABEL_255:
  strcpy((char *)v141 + v139, "/program.nitro");
  std::ifstream::basic_ifstream(&v321);
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__src.__r_.__value_.__l.__data_);
  __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&v321;
  *(_OWORD *)&__src.__r_.__value_.__r.__words[1] = 0uLL;
  *(_QWORD *)&v316 = 0;
  if (*(_DWORD *)((char *)v324 + *(_QWORD *)(v321 - 24)))
    nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_1::operator()();
  v312.__r_.__value_.__r.__words[0] = 0;
  v312.__r_.__value_.__s.__data_[8] = 0;
  nitro::archive_detail::deserialize_hard_or_soft_fail<nitro::iarchive,nitro::flexible_type>::exec((uint64_t)&__src, (uint64_t)&v312);
  v311.__r_.__value_.__r.__words[0] = 0;
  v311.__r_.__value_.__s.__data_[8] = 0;
  v310.__r_.__value_.__r.__words[0] = 0;
  v310.__r_.__value_.__s.__data_[8] = 0;
  v308 = 0;
  v309 = 0;
  nitro::archive_detail::deserialize_hard_or_soft_fail<nitro::iarchive,nitro::flexible_type>::exec((uint64_t)&__src, (uint64_t)&v311);
  nitro::archive_detail::deserialize_hard_or_soft_fail<nitro::iarchive,nitro::flexible_type>::exec((uint64_t)&__src, (uint64_t)&v310);
  nitro::archive_detail::deserialize_hard_or_soft_fail<nitro::iarchive,nitro::flexible_type>::exec((uint64_t)&__src, (uint64_t)&v308);
  nitro::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::get((unsigned __int8 *)&v311, (uint64_t)__p);
  v145 = (uint64_t *)(v57 + 10);
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)(v57 + 9), (char *)v57[10]);
  v146 = (uint64_t *)__p[1];
  v57[9] = (uint64_t *)__p[0];
  v57[10] = v146;
  v147 = v305;
  v57[11] = (uint64_t *)v305;
  if (v147)
  {
    v146[2] = (uint64_t)v145;
    __p[0] = &__p[1];
    __p[1] = 0;
    v305 = 0;
    v146 = 0;
  }
  else
  {
    v57[9] = v145;
  }
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)__p, (char *)v146);
  nitro::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::get((unsigned __int8 *)&v310, (uint64_t)__p);
  v148 = (uint64_t *)(v57 + 13);
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)(v57 + 12), (char *)v57[13]);
  v149 = (uint64_t *)__p[1];
  v57[12] = (uint64_t *)__p[0];
  v57[13] = v149;
  v150 = v305;
  v57[14] = (uint64_t *)v305;
  if (v150)
  {
    v149[2] = (uint64_t)v148;
    __p[0] = &__p[1];
    __p[1] = 0;
    v305 = 0;
    v149 = 0;
  }
  else
  {
    v57[12] = v148;
  }
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)__p, (char *)v149);
  nitro::flexible_type_converter<std::map<std::string,nitro::flexible_type>>::get((unsigned __int8 *)&v308, (uint64_t **)__p);
  v151 = (uint64_t *)(v57 + 16);
  std::__tree<std::__value_type<std::string,nitro::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::flexible_type>>>::destroy((uint64_t)(v57 + 15), v57[16]);
  v152 = (uint64_t *)__p[1];
  v57[15] = (uint64_t *)__p[0];
  v57[16] = v152;
  v153 = v305;
  v57[17] = (uint64_t *)v305;
  if (v153)
  {
    v152[2] = (uint64_t)v151;
    __p[0] = &__p[1];
    __p[1] = 0;
    v305 = 0;
    v152 = 0;
  }
  else
  {
    v57[15] = v151;
  }
  std::__tree<std::__value_type<std::string,nitro::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::flexible_type>>>::destroy((uint64_t)__p, v152);
  switch(v309)
  {
    case 2:
      v154 = (unint64_t *)v308;
      do
      {
        v155 = __ldaxr(v154);
        v156 = v155 - 1;
      }
      while (__stlxr(v156, v154));
      if (!v156)
      {
        v157 = (_QWORD *)v308;
        if (v308)
        {
          if (*(char *)(v308 + 31) < 0)
            operator delete(*(void **)(v308 + 8));
          v158 = v157;
          v159 = 0x1012C404EF22A49;
          goto LABEL_316;
        }
      }
      break;
    case 3:
      v167 = (unint64_t *)v308;
      do
      {
        v168 = __ldaxr(v167);
        v169 = v168 - 1;
      }
      while (__stlxr(v169, v167));
      if (!v169)
      {
        v170 = (_QWORD *)v308;
        if (v308)
        {
          v171 = *(void **)(v308 + 8);
          if (v171)
          {
            *(_QWORD *)(v308 + 16) = v171;
            operator delete(v171);
          }
          v158 = v170;
          v159 = 0x1080C409938AC02;
          goto LABEL_316;
        }
      }
      break;
    case 4:
      v160 = (unint64_t *)v308;
      do
      {
        v161 = __ldaxr(v160);
        v162 = v161 - 1;
      }
      while (__stlxr(v162, v160));
      if (!v162)
      {
        v163 = (_QWORD *)v308;
        if (v308)
        {
          v164 = *(_QWORD *)(v308 + 8);
          if (!v164)
            goto LABEL_301;
          v165 = *(_QWORD *)(v308 + 16);
          v166 = *(void **)(v308 + 8);
          if (v165 != v164)
          {
            do
            {
              v165 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v163 + 3), v165);
            }
            while (v165 != v164);
            v166 = (void *)v163[1];
          }
          v163[2] = v164;
          goto LABEL_300;
        }
      }
      break;
    case 5:
      v172 = (unint64_t *)v308;
      do
      {
        v173 = __ldaxr(v172);
        v174 = v173 - 1;
      }
      while (__stlxr(v174, v172));
      if (!v174)
      {
        v163 = (_QWORD *)v308;
        if (v308)
        {
          v175 = *(_QWORD *)(v308 + 8);
          if (v175)
          {
            v176 = *(_QWORD *)(v308 + 16);
            v177 = *(void **)(v308 + 8);
            if (v176 != v175)
            {
              do
                v176 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v176 - 32);
              while (v176 != v175);
              v177 = (void *)v163[1];
            }
            v163[2] = v175;
            v166 = v177;
LABEL_300:
            operator delete(v166);
          }
LABEL_301:
          v158 = v163;
          v159 = 0x1020C405E66F15BLL;
          goto LABEL_316;
        }
      }
      break;
    case 9:
      v178 = (unint64_t *)v308;
      do
      {
        v179 = __ldaxr(v178);
        v180 = v179 - 1;
      }
      while (__stlxr(v180, v178));
      if (!v180)
      {
        v181 = (_QWORD *)v308;
        if (v308)
        {
          v182 = *(void **)(v308 + 56);
          if (v182)
          {
            *(_QWORD *)(v308 + 64) = v182;
            operator delete(v182);
          }
          v183 = (void *)v181[4];
          if (v183)
          {
            v181[5] = v183;
            operator delete(v183);
          }
          v184 = (std::__shared_weak_count *)v181[3];
          if (v184)
          {
            v185 = (unint64_t *)&v184->__shared_owners_;
            do
              v186 = __ldaxr(v185);
            while (__stlxr(v186 - 1, v185));
            if (!v186)
            {
              ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
              std::__shared_weak_count::__release_weak(v184);
            }
          }
          v158 = v181;
          v159 = 0x10B0C4002311774;
LABEL_316:
          MEMORY[0x19401CD90](v158, v159);
        }
      }
      break;
    default:
      break;
  }
  switch(v310.__r_.__value_.__s.__data_[8])
  {
    case 2:
      v187 = (unint64_t *)v310.__r_.__value_.__r.__words[0];
      do
      {
        v188 = __ldaxr(v187);
        v189 = v188 - 1;
      }
      while (__stlxr(v189, v187));
      if (!v189)
      {
        v190 = v310.__r_.__value_.__r.__words[0];
        if (v310.__r_.__value_.__r.__words[0])
        {
          if (*(char *)(v310.__r_.__value_.__r.__words[0] + 31) < 0)
            operator delete(*(void **)(v310.__r_.__value_.__r.__words[0] + 8));
          v191 = (_QWORD *)v190;
          v192 = 0x1012C404EF22A49;
          goto LABEL_366;
        }
      }
      break;
    case 3:
      v200 = (unint64_t *)v310.__r_.__value_.__r.__words[0];
      do
      {
        v201 = __ldaxr(v200);
        v202 = v201 - 1;
      }
      while (__stlxr(v202, v200));
      if (!v202)
      {
        v203 = v310.__r_.__value_.__r.__words[0];
        if (v310.__r_.__value_.__r.__words[0])
        {
          v204 = *(void **)(v310.__r_.__value_.__r.__words[0] + 8);
          if (v204)
          {
            *(_QWORD *)(v310.__r_.__value_.__r.__words[0] + 16) = v204;
            operator delete(v204);
          }
          v191 = (_QWORD *)v203;
          v192 = 0x1080C409938AC02;
          goto LABEL_366;
        }
      }
      break;
    case 4:
      v193 = (unint64_t *)v310.__r_.__value_.__r.__words[0];
      do
      {
        v194 = __ldaxr(v193);
        v195 = v194 - 1;
      }
      while (__stlxr(v195, v193));
      if (!v195)
      {
        v196 = v310.__r_.__value_.__r.__words[0];
        if (v310.__r_.__value_.__r.__words[0])
        {
          v197 = *(_QWORD *)(v310.__r_.__value_.__r.__words[0] + 8);
          if (!v197)
            goto LABEL_351;
          v198 = *(_QWORD *)(v310.__r_.__value_.__r.__words[0] + 16);
          v199 = *(void **)(v310.__r_.__value_.__r.__words[0] + 8);
          if (v198 != v197)
          {
            do
            {
              v198 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v196 + 24, v198);
            }
            while (v198 != v197);
            v199 = *(void **)(v196 + 8);
          }
          *(_QWORD *)(v196 + 16) = v197;
          goto LABEL_350;
        }
      }
      break;
    case 5:
      v205 = (unint64_t *)v310.__r_.__value_.__r.__words[0];
      do
      {
        v206 = __ldaxr(v205);
        v207 = v206 - 1;
      }
      while (__stlxr(v207, v205));
      if (!v207)
      {
        v196 = v310.__r_.__value_.__r.__words[0];
        if (v310.__r_.__value_.__r.__words[0])
        {
          v208 = *(_QWORD *)(v310.__r_.__value_.__r.__words[0] + 8);
          if (v208)
          {
            v209 = *(_QWORD *)(v310.__r_.__value_.__r.__words[0] + 16);
            v210 = *(void **)(v310.__r_.__value_.__r.__words[0] + 8);
            if (v209 != v208)
            {
              do
                v209 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v209 - 32);
              while (v209 != v208);
              v210 = *(void **)(v196 + 8);
            }
            *(_QWORD *)(v196 + 16) = v208;
            v199 = v210;
LABEL_350:
            operator delete(v199);
          }
LABEL_351:
          v191 = (_QWORD *)v196;
          v192 = 0x1020C405E66F15BLL;
          goto LABEL_366;
        }
      }
      break;
    case 9:
      v211 = (unint64_t *)v310.__r_.__value_.__r.__words[0];
      do
      {
        v212 = __ldaxr(v211);
        v213 = v212 - 1;
      }
      while (__stlxr(v213, v211));
      if (!v213)
      {
        v214 = (_QWORD *)v310.__r_.__value_.__r.__words[0];
        if (v310.__r_.__value_.__r.__words[0])
        {
          v215 = *(void **)(v310.__r_.__value_.__r.__words[0] + 56);
          if (v215)
          {
            *(_QWORD *)(v310.__r_.__value_.__r.__words[0] + 64) = v215;
            operator delete(v215);
          }
          v216 = (void *)v214[4];
          if (v216)
          {
            v214[5] = v216;
            operator delete(v216);
          }
          v217 = (std::__shared_weak_count *)v214[3];
          if (v217)
          {
            v218 = (unint64_t *)&v217->__shared_owners_;
            do
              v219 = __ldaxr(v218);
            while (__stlxr(v219 - 1, v218));
            if (!v219)
            {
              ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
              std::__shared_weak_count::__release_weak(v217);
            }
          }
          v191 = v214;
          v192 = 0x10B0C4002311774;
LABEL_366:
          MEMORY[0x19401CD90](v191, v192);
        }
      }
      break;
    default:
      break;
  }
  switch(v311.__r_.__value_.__s.__data_[8])
  {
    case 2:
      v220 = (unint64_t *)v311.__r_.__value_.__r.__words[0];
      do
      {
        v221 = __ldaxr(v220);
        v222 = v221 - 1;
      }
      while (__stlxr(v222, v220));
      if (!v222)
      {
        v223 = v311.__r_.__value_.__r.__words[0];
        if (v311.__r_.__value_.__r.__words[0])
        {
          if (*(char *)(v311.__r_.__value_.__r.__words[0] + 31) < 0)
            operator delete(*(void **)(v311.__r_.__value_.__r.__words[0] + 8));
          v224 = (_QWORD *)v223;
          v225 = 0x1012C404EF22A49;
          goto LABEL_416;
        }
      }
      break;
    case 3:
      v233 = (unint64_t *)v311.__r_.__value_.__r.__words[0];
      do
      {
        v234 = __ldaxr(v233);
        v235 = v234 - 1;
      }
      while (__stlxr(v235, v233));
      if (!v235)
      {
        v236 = v311.__r_.__value_.__r.__words[0];
        if (v311.__r_.__value_.__r.__words[0])
        {
          v237 = *(void **)(v311.__r_.__value_.__r.__words[0] + 8);
          if (v237)
          {
            *(_QWORD *)(v311.__r_.__value_.__r.__words[0] + 16) = v237;
            operator delete(v237);
          }
          v224 = (_QWORD *)v236;
          v225 = 0x1080C409938AC02;
          goto LABEL_416;
        }
      }
      break;
    case 4:
      v226 = (unint64_t *)v311.__r_.__value_.__r.__words[0];
      do
      {
        v227 = __ldaxr(v226);
        v228 = v227 - 1;
      }
      while (__stlxr(v228, v226));
      if (!v228)
      {
        v229 = v311.__r_.__value_.__r.__words[0];
        if (v311.__r_.__value_.__r.__words[0])
        {
          v230 = *(_QWORD *)(v311.__r_.__value_.__r.__words[0] + 8);
          if (!v230)
            goto LABEL_401;
          v231 = *(_QWORD *)(v311.__r_.__value_.__r.__words[0] + 16);
          v232 = *(void **)(v311.__r_.__value_.__r.__words[0] + 8);
          if (v231 != v230)
          {
            do
            {
              v231 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v229 + 24, v231);
            }
            while (v231 != v230);
            v232 = *(void **)(v229 + 8);
          }
          *(_QWORD *)(v229 + 16) = v230;
          goto LABEL_400;
        }
      }
      break;
    case 5:
      v238 = (unint64_t *)v311.__r_.__value_.__r.__words[0];
      do
      {
        v239 = __ldaxr(v238);
        v240 = v239 - 1;
      }
      while (__stlxr(v240, v238));
      if (!v240)
      {
        v229 = v311.__r_.__value_.__r.__words[0];
        if (v311.__r_.__value_.__r.__words[0])
        {
          v241 = *(_QWORD *)(v311.__r_.__value_.__r.__words[0] + 8);
          if (v241)
          {
            v242 = *(_QWORD *)(v311.__r_.__value_.__r.__words[0] + 16);
            v243 = *(void **)(v311.__r_.__value_.__r.__words[0] + 8);
            if (v242 != v241)
            {
              do
                v242 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v242 - 32);
              while (v242 != v241);
              v243 = *(void **)(v229 + 8);
            }
            *(_QWORD *)(v229 + 16) = v241;
            v232 = v243;
LABEL_400:
            operator delete(v232);
          }
LABEL_401:
          v224 = (_QWORD *)v229;
          v225 = 0x1020C405E66F15BLL;
          goto LABEL_416;
        }
      }
      break;
    case 9:
      v244 = (unint64_t *)v311.__r_.__value_.__r.__words[0];
      do
      {
        v245 = __ldaxr(v244);
        v246 = v245 - 1;
      }
      while (__stlxr(v246, v244));
      if (!v246)
      {
        v247 = (_QWORD *)v311.__r_.__value_.__r.__words[0];
        if (v311.__r_.__value_.__r.__words[0])
        {
          v248 = *(void **)(v311.__r_.__value_.__r.__words[0] + 56);
          if (v248)
          {
            *(_QWORD *)(v311.__r_.__value_.__r.__words[0] + 64) = v248;
            operator delete(v248);
          }
          v249 = (void *)v247[4];
          if (v249)
          {
            v247[5] = v249;
            operator delete(v249);
          }
          v250 = (std::__shared_weak_count *)v247[3];
          if (v250)
          {
            v251 = (unint64_t *)&v250->__shared_owners_;
            do
              v252 = __ldaxr(v251);
            while (__stlxr(v252 - 1, v251));
            if (!v252)
            {
              ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
              std::__shared_weak_count::__release_weak(v250);
            }
          }
          v224 = v247;
          v225 = 0x10B0C4002311774;
LABEL_416:
          MEMORY[0x19401CD90](v224, v225);
        }
      }
      break;
    default:
      break;
  }
  switch(v312.__r_.__value_.__s.__data_[8])
  {
    case 2:
      v253 = (unint64_t *)v312.__r_.__value_.__r.__words[0];
      do
      {
        v254 = __ldaxr(v253);
        v255 = v254 - 1;
      }
      while (__stlxr(v255, v253));
      if (!v255)
      {
        v256 = v312.__r_.__value_.__r.__words[0];
        if (v312.__r_.__value_.__r.__words[0])
        {
          if (*(char *)(v312.__r_.__value_.__r.__words[0] + 31) < 0)
            operator delete(*(void **)(v312.__r_.__value_.__r.__words[0] + 8));
          v257 = (_QWORD *)v256;
          v258 = 0x1012C404EF22A49;
          goto LABEL_466;
        }
      }
      break;
    case 3:
      v266 = (unint64_t *)v312.__r_.__value_.__r.__words[0];
      do
      {
        v267 = __ldaxr(v266);
        v268 = v267 - 1;
      }
      while (__stlxr(v268, v266));
      if (!v268)
      {
        v269 = v312.__r_.__value_.__r.__words[0];
        if (v312.__r_.__value_.__r.__words[0])
        {
          v270 = *(void **)(v312.__r_.__value_.__r.__words[0] + 8);
          if (v270)
          {
            *(_QWORD *)(v312.__r_.__value_.__r.__words[0] + 16) = v270;
            operator delete(v270);
          }
          v257 = (_QWORD *)v269;
          v258 = 0x1080C409938AC02;
          goto LABEL_466;
        }
      }
      break;
    case 4:
      v259 = (unint64_t *)v312.__r_.__value_.__r.__words[0];
      do
      {
        v260 = __ldaxr(v259);
        v261 = v260 - 1;
      }
      while (__stlxr(v261, v259));
      if (!v261)
      {
        v262 = v312.__r_.__value_.__r.__words[0];
        if (v312.__r_.__value_.__r.__words[0])
        {
          v263 = *(_QWORD *)(v312.__r_.__value_.__r.__words[0] + 8);
          if (!v263)
            goto LABEL_451;
          v264 = *(_QWORD *)(v312.__r_.__value_.__r.__words[0] + 16);
          v265 = *(void **)(v312.__r_.__value_.__r.__words[0] + 8);
          if (v264 != v263)
          {
            do
            {
              v264 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v262 + 24, v264);
            }
            while (v264 != v263);
            v265 = *(void **)(v262 + 8);
          }
          *(_QWORD *)(v262 + 16) = v263;
          goto LABEL_450;
        }
      }
      break;
    case 5:
      v271 = (unint64_t *)v312.__r_.__value_.__r.__words[0];
      do
      {
        v272 = __ldaxr(v271);
        v273 = v272 - 1;
      }
      while (__stlxr(v273, v271));
      if (!v273)
      {
        v262 = v312.__r_.__value_.__r.__words[0];
        if (v312.__r_.__value_.__r.__words[0])
        {
          v274 = *(_QWORD *)(v312.__r_.__value_.__r.__words[0] + 8);
          if (v274)
          {
            v275 = *(_QWORD *)(v312.__r_.__value_.__r.__words[0] + 16);
            v276 = *(void **)(v312.__r_.__value_.__r.__words[0] + 8);
            if (v275 != v274)
            {
              do
                v275 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v275 - 32);
              while (v275 != v274);
              v276 = *(void **)(v262 + 8);
            }
            *(_QWORD *)(v262 + 16) = v274;
            v265 = v276;
LABEL_450:
            operator delete(v265);
          }
LABEL_451:
          v257 = (_QWORD *)v262;
          v258 = 0x1020C405E66F15BLL;
          goto LABEL_466;
        }
      }
      break;
    case 9:
      v277 = (unint64_t *)v312.__r_.__value_.__r.__words[0];
      do
      {
        v278 = __ldaxr(v277);
        v279 = v278 - 1;
      }
      while (__stlxr(v279, v277));
      if (!v279)
      {
        v280 = (_QWORD *)v312.__r_.__value_.__r.__words[0];
        if (v312.__r_.__value_.__r.__words[0])
        {
          v281 = *(void **)(v312.__r_.__value_.__r.__words[0] + 56);
          if (v281)
          {
            *(_QWORD *)(v312.__r_.__value_.__r.__words[0] + 64) = v281;
            operator delete(v281);
          }
          v282 = (void *)v280[4];
          if (v282)
          {
            v280[5] = v282;
            operator delete(v282);
          }
          v283 = (std::__shared_weak_count *)v280[3];
          if (v283)
          {
            v284 = (unint64_t *)&v283->__shared_owners_;
            do
              v285 = __ldaxr(v284);
            while (__stlxr(v285 - 1, v284));
            if (!v285)
            {
              ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
              std::__shared_weak_count::__release_weak(v283);
            }
          }
          v257 = v280;
          v258 = 0x10B0C4002311774;
LABEL_466:
          MEMORY[0x19401CD90](v257, v258);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)&v321 = v300;
  *(_QWORD *)((char *)&v321 + *(_QWORD *)(v300 - 24)) = v299;
  MEMORY[0x19401C8BC](&v322);
  std::istream::~istream();
  MEMORY[0x19401CCD0](v330);
  nitro::nitro_builtins::register_builtins((uint64_t)(v57 + 18));
  v286 = v57[2];
  v321 = 0uLL;
  v322 = 0;
  nitro::nitro_class::make_instance(v286, (uint64_t *)&v321, (nitro::nitro_instance **)&__src);
  v287 = *(_OWORD *)&__src.__r_.__value_.__l.__data_;
  *(_OWORD *)&__src.__r_.__value_.__l.__data_ = 0uLL;
  v288 = (std::__shared_weak_count *)v57[5];
  *((_OWORD *)v57 + 2) = v287;
  if (v288)
  {
    v289 = (unint64_t *)&v288->__shared_owners_;
    do
      v290 = __ldaxr(v289);
    while (__stlxr(v290 - 1, v289));
    if (!v290)
    {
      ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
      std::__shared_weak_count::__release_weak(v288);
    }
  }
  v291 = (std::__shared_weak_count *)__src.__r_.__value_.__l.__size_;
  if (__src.__r_.__value_.__l.__size_)
  {
    v292 = (unint64_t *)(__src.__r_.__value_.__l.__size_ + 8);
    do
      v293 = __ldaxr(v292);
    while (__stlxr(v293 - 1, v292));
    if (!v293)
    {
      ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
      std::__shared_weak_count::__release_weak(v291);
    }
  }
  v294 = v321;
  if ((_QWORD)v321)
  {
    v295 = *((_QWORD *)&v321 + 1);
    v296 = (void *)v321;
    if (*((_QWORD *)&v321 + 1) != (_QWORD)v321)
    {
      do
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v295 - 32));
      while (v295 != v294);
      v296 = (void *)v321;
    }
    *((_QWORD *)&v321 + 1) = v294;
    operator delete(v296);
  }
  *((_BYTE *)&__src.__r_.__value_.__s + 23) = 3;
  LODWORD(__src.__r_.__value_.__l.__data_) = 4802118;
  *(_QWORD *)&v321 = &off_1E2DAF038;
  *((_QWORD *)&v321 + 1) = v57;
  v323 = (char **)&v321;
  nitro::nitro_execution_context::register_builtin((uint64_t)(v57 + 18), &__src, &v321);
  v297 = v323;
  if (v323 == (char **)&v321)
  {
    v298 = 4;
    v297 = (char **)&v321;
  }
  else
  {
    if (!v323)
      goto LABEL_487;
    v298 = 5;
  }
  (*(void (**)(void))&(*v297)[8 * v298])();
LABEL_487:
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__src.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v314) & 0x80000000) == 0)
    {
LABEL_489:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_493:
      operator delete(__dst.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v314) & 0x80000000) == 0)
  {
    goto LABEL_489;
  }
  operator delete((void *)v313);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_493;
}

void sub_19116A638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (a45 < 0)
    operator delete(*(void **)(v45 + 64));
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", 106);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"fin.good()", 10);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", "operator()", 55, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", "operator()", 55, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19116B178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_19116B1E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

uint64_t nitro::SExp::operator=(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  uint64_t v5;
  __int128 v6;
  unint64_t **v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  void *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  void *v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  unint64_t *v41;
  void **v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;

  v4 = (__int128 *)(a2 + 8);
  *(_WORD *)a1 = *(_WORD *)a2;
  v5 = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)v5);
  v6 = *v4;
  *(_QWORD *)(v5 + 16) = *((_QWORD *)v4 + 2);
  *(_OWORD *)v5 = v6;
  *(_BYTE *)(a2 + 31) = 0;
  *(_BYTE *)(a2 + 8) = 0;
  if (a2 != a1)
  {
    v7 = (unint64_t **)(a1 + 32);
    switch(*(_BYTE *)(a1 + 40))
    {
      case 2:
        v8 = *v7;
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          v11 = *v7;
          if (!*v7)
            goto LABEL_54;
          if (*((char *)v11 + 31) < 0)
            operator delete((void *)v11[1]);
          v12 = v11;
          v13 = 0x1012C404EF22A49;
          goto LABEL_53;
        }
        break;
      case 3:
        v14 = *v7;
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
        {
          v17 = *v7;
          if (!*v7)
            goto LABEL_54;
          v18 = (void *)v17[1];
          if (v18)
          {
            v17[2] = (unint64_t)v18;
            operator delete(v18);
          }
          v12 = v17;
          v13 = 0x1080C409938AC02;
          goto LABEL_53;
        }
        break;
      case 4:
        v19 = *v7;
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          v22 = *v7;
          if (!*v7)
            goto LABEL_54;
          v23 = v22[1];
          if (v23)
          {
            v24 = v22[2];
            v25 = (void *)v22[1];
            if (v24 != v23)
            {
              do
              {
                v24 -= 16;
                std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v22 + 3), v24);
              }
              while (v24 != v23);
              v25 = (void *)v22[1];
            }
            v22[2] = v23;
            goto LABEL_37;
          }
          goto LABEL_38;
        }
        break;
      case 5:
        v26 = *v7;
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          v22 = *v7;
          if (!*v7)
            goto LABEL_54;
          v29 = v22[1];
          if (v29)
          {
            v30 = v22[2];
            v31 = (void *)v22[1];
            if (v30 != v29)
            {
              do
                v30 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v30 - 32);
              while (v30 != v29);
              v31 = (void *)v22[1];
            }
            v22[2] = v29;
            v25 = v31;
LABEL_37:
            operator delete(v25);
          }
LABEL_38:
          v12 = v22;
          v13 = 0x1020C405E66F15BLL;
          goto LABEL_53;
        }
        break;
      case 9:
        v32 = *v7;
        do
        {
          v33 = __ldaxr(v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v32));
        if (!v34)
        {
          v35 = *v7;
          if (*v7)
          {
            v36 = (void *)v35[7];
            if (v36)
            {
              v35[8] = (unint64_t)v36;
              operator delete(v36);
            }
            v37 = (void *)v35[4];
            if (v37)
            {
              v35[5] = (unint64_t)v37;
              operator delete(v37);
            }
            v38 = (std::__shared_weak_count *)v35[3];
            if (v38)
            {
              p_shared_owners = (unint64_t *)&v38->__shared_owners_;
              do
                v40 = __ldaxr(p_shared_owners);
              while (__stlxr(v40 - 1, p_shared_owners));
              if (!v40)
              {
                ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                std::__shared_weak_count::__release_weak(v38);
              }
            }
            v12 = v35;
            v13 = 0x10B0C4002311774;
LABEL_53:
            MEMORY[0x19401CD90](v12, v13);
          }
LABEL_54:
          *v7 = 0;
        }
        break;
      default:
        break;
    }
    v41 = *(unint64_t **)(a2 + 32);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *v7 = v41;
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *(_BYTE *)(a2 + 40) = 0;
  }
  v42 = (void **)(a1 + 48);
  v43 = *(_QWORD *)(a1 + 48);
  if (v43)
  {
    v44 = *(_QWORD *)(a1 + 56);
    v45 = *(void **)(a1 + 48);
    if (v44 != v43)
    {
      do
        nitro::SExp::~SExp((nitro::SExp *)(v44 - 72));
      while (v44 != v43);
      v45 = *v42;
    }
    *(_QWORD *)(a1 + 56) = v43;
    operator delete(v45);
    *v42 = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  return a1;
}

uint64_t std::pair<std::string const,std::shared_ptr<Espresso::net>>::~pair(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if ((*(char *)(a1 + 23) & 0x80000000) == 0)
        return a1;
      goto LABEL_6;
    }
  }
  if (*(char *)(a1 + 23) < 0)
LABEL_6:
    operator delete(*(void **)a1);
  return a1;
}

void nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_1::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", 106);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"fin.good()", 10);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", "operator()", 120, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", "operator()", 120, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19116B8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_19116B910(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void **std::vector<nitro::nitro_variable>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = v2;
    if (v3 != v2)
    {
      do
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v3 - 32));
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *nitro::nitro_execution_context::register_builtin(uint64_t a1, const std::string *a2, _QWORD *a3)
{
  unint64_t symbol_id;
  unint64_t v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  _QWORD *result;
  uint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  symbol_id = nitro::get_symbol_id(a2);
  v6 = symbol_id;
  v8 = (uint64_t **)(a1 + 80);
  v7 = *(uint64_t **)(a1 + 80);
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v7;
        v10 = v7[4];
        if (symbol_id >= v10)
          break;
        v7 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_8;
      }
      if (v10 >= symbol_id)
        break;
      v7 = v9[1];
      if (!v7)
      {
        v8 = v9 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v9 = (uint64_t **)(a1 + 80);
LABEL_8:
    v11 = (uint64_t *)v9;
    v9 = (uint64_t **)operator new(0x48uLL);
    v9[4] = (uint64_t *)v6;
    v9[8] = 0;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = v11;
    *v8 = (uint64_t *)v9;
    v12 = **(_QWORD **)(a1 + 72);
    v13 = (uint64_t *)v9;
    if (v12)
    {
      *(_QWORD *)(a1 + 72) = v12;
      v13 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 80), v13);
    ++*(_QWORD *)(a1 + 88);
  }
  v14 = (_QWORD *)a3[3];
  if (v14)
  {
    if (v14 == a3)
    {
      v18 = v17;
      (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v17);
    }
    else
    {
      v18 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v14 + 16))(v14);
    }
  }
  else
  {
    v18 = 0;
  }
  std::__function::__value_func<nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::swap[abi:ne180100](v17, v9 + 5);
  result = v18;
  if (v18 == v17)
  {
    v16 = 4;
    result = v17;
  }
  else
  {
    if (!v18)
      return result;
    v16 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v16))();
}

void nitro::nitro_program::run(uint64_t a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t **v4;
  uint64_t **v6;
  int v7;
  size_t v8;
  const void *v9;
  int v10;
  size_t v11;
  uint64_t *v12;
  size_t v13;
  int v14;
  BOOL v15;
  int v16;
  _BOOL4 v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t *v20;
  __int128 v21;
  uint64_t **v22;
  std::string::size_type v23;
  std::string *v24;
  int v25;
  size_t v26;
  uint64_t *v27;
  size_t v28;
  int v29;
  BOOL v30;
  int v31;
  _BOOL4 v32;
  uint64_t **v33;
  std::string::size_type v34;
  std::string *v35;
  int v36;
  size_t v37;
  uint64_t *v38;
  size_t v39;
  int v40;
  BOOL v41;
  int v42;
  _BOOL4 v43;
  uint64_t **v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  char v53;
  _QWORD *v54;
  _QWORD *v55;
  void *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::locale::__imp *v60;
  unint64_t *v61;
  unint64_t v62;
  char *v63;
  char *v64;
  void *v65;
  uint64_t v66;
  std::string::size_type v67;
  uint64_t **v68;
  uint64_t **v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t **v72;
  uint64_t v73;
  __int128 v74;
  std::__shared_weak_count *v75;
  unint64_t *p_shared_owners;
  unint64_t v77;
  void *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t **v82;
  uint64_t **v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t **v90;
  uint64_t **v91;
  uint64_t **v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t *v107;
  void *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t *v121;
  void *v122;
  void *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  void *v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t *v137;
  void *v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t *v142;
  uint64_t **v143;
  unint64_t v144;
  uint64_t v145;
  void *v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t *v150;
  void *v151;
  void *v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  uint64_t *v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t *v165;
  unint64_t v166;
  file_logger *v167;
  file_logger *started;
  _QWORD *v169;
  char *v170;
  _QWORD *v171;
  std::string *v172;
  std::string::size_type size;
  _QWORD *v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  std::ios_base *v180;
  _QWORD *v181;
  _QWORD *v182;
  _QWORD *v183;
  _QWORD *v184;
  _QWORD *v185;
  const std::locale::facet *v186;
  file_logger *v187;
  file_logger *v188;
  char *v189;
  _QWORD *v190;
  void **v191;
  uint64_t v192;
  file_logger *v193;
  file_logger *v194;
  char *v195;
  _QWORD *v196;
  void *locale;
  uint64_t v198;
  _QWORD *v199;
  void *v200;
  _QWORD *exception;
  _QWORD *v202;
  uint64_t **v205;
  uint64_t **v206;
  uint64_t v207;
  unint64_t v209;
  std::locale v210[2];
  unsigned __int8 v211;
  std::__shared_weak_count *v212;
  void *__p;
  _QWORD *v214;
  std::string v215;
  std::string v216;
  void *v217;
  char *v218;
  unint64_t v219;
  void *v220[2];
  uint64_t v221;
  _BYTE v222[24];
  __int128 v223;
  uint64_t v224;
  void *v225[2];
  uint64_t v226;
  __int128 v227;
  __int128 v228;
  int v229;
  uint64_t v230;
  uint64_t v231;

  v231 = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t ***)(a1 + 80);
  if (!v4)
LABEL_265:
    nitro::nitro_program::run(std::string,std::map<std::string,nitro::flexible_type> const&)::$_0::operator()();
  v6 = (uint64_t **)(a1 + 72);
  v7 = *(char *)(a2 + 23);
  if (v7 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  if (v7 >= 0)
    v9 = (const void *)a2;
  else
    v9 = *(const void **)a2;
  while (1)
  {
    v10 = *((char *)v4 + 55);
    if (v10 >= 0)
      v11 = *((unsigned __int8 *)v4 + 55);
    else
      v11 = (size_t)v4[5];
    if (v10 >= 0)
      v12 = (uint64_t *)(v4 + 4);
    else
      v12 = v4[4];
    if (v11 >= v8)
      v13 = v8;
    else
      v13 = v11;
    v14 = memcmp(v9, v12, v13);
    v15 = v8 < v11;
    if (v14)
      v15 = v14 < 0;
    if (v15)
      goto LABEL_8;
    v16 = memcmp(v12, v9, v13);
    v17 = v11 < v8;
    if (v16)
      v17 = v16 < 0;
    if (!v17)
      break;
    ++v4;
LABEL_8:
    v4 = (uint64_t **)*v4;
    if (!v4)
      goto LABEL_265;
  }
  v207 = a1;
  v217 = 0;
  v218 = 0;
  v219 = 0;
  *(_QWORD *)v222 = a2;
  v18 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (const void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)v222);
  v19 = v18[7];
  v20 = v18[8];
  if (v19 != v20)
  {
    v205 = (uint64_t **)(a1 + 120);
    do
    {
      if (*((char *)v19 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v216, (const std::string::value_type *)*v19, v19[1]);
      }
      else
      {
        v21 = *(_OWORD *)v19;
        v216.__r_.__value_.__r.__words[2] = v19[2];
        *(_OWORD *)&v216.__r_.__value_.__l.__data_ = v21;
      }
      v22 = *(uint64_t ***)(a3 + 8);
      if (!v22)
      {
LABEL_55:
        v33 = *(uint64_t ***)(v207 + 128);
        if (!v33)
        {
LABEL_258:
          if (*((int *)global_logger() + 169) <= 6)
          {
            v167 = (file_logger *)global_logger();
            started = file_logger::start_stream(v167, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", "run", 234, 1);
            v169 = pthread_getspecific(*((_QWORD *)started + 74));
            if (v169 && *((_BYTE *)v169 + 280))
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v169 + 2, (uint64_t)"Argument ", 9);
            if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v215, v216.__r_.__value_.__l.__data_, v216.__r_.__value_.__l.__size_);
            else
              v215 = v216;
            v170 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
            if (v170 && v170[280])
            {
              v171 = v170 + 16;
              if ((v215.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v172 = &v215;
              else
                v172 = (std::string *)v215.__r_.__value_.__r.__words[0];
              if ((v215.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v215.__r_.__value_.__r.__words[2]);
              else
                size = v215.__r_.__value_.__l.__size_;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v171, (uint64_t)v172, size);
            }
            v174 = pthread_getspecific(*((_QWORD *)started + 74));
            if (v174 && *((_BYTE *)v174 + 280))
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v174 + 2, (uint64_t)" not provided", 13);
            v175 = pthread_getspecific(*((_QWORD *)started + 74));
            if (v175)
            {
              if (*((_BYTE *)v175 + 280))
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v175 + 2, (uint64_t)"\n", 1);
                file_logger::stream_flush(started);
                if (*((_DWORD *)started + 150) == 7)
                {
                  __print_back_trace();
                  exception = __cxa_allocate_exception(8uLL);
                  *exception = "LOG_FATAL encountered";
                  __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
                }
              }
            }
            if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v215.__r_.__value_.__l.__data_);
          }
          v176 = MEMORY[0x1E0DE4FE0];
          v177 = MEMORY[0x1E0DE4FE0] + 64;
          v178 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
          v179 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
          v230 = MEMORY[0x1E0DE4FE0] + 64;
          *(_QWORD *)v222 = v178;
          *(_QWORD *)&v222[*(_QWORD *)(v178 - 24)] = v179;
          v180 = (std::ios_base *)&v222[*(_QWORD *)(*(_QWORD *)v222 - 24)];
          std::ios_base::init(v180, &v222[8]);
          v180[1].__vftable = 0;
          v180[1].__fmtflags_ = -1;
          *(_QWORD *)v222 = v176 + 24;
          v230 = v177;
          std::streambuf::basic_streambuf();
          *(_QWORD *)&v222[8] = MEMORY[0x1E0DE4FB8] + 16;
          v227 = 0u;
          v228 = 0u;
          v229 = 16;
          v181 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v222, (uint64_t)"Check failed (", 14);
          v182 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v181, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", 106);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v182, (uint64_t)":", 1);
          v183 = (_QWORD *)std::ostream::operator<<();
          v184 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v183, (uint64_t)"): ", 3);
          v185 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v184, (uint64_t)"false", 5);
          std::ios_base::getloc((const std::ios_base *)((char *)v185 + *(_QWORD *)(*v185 - 24)));
          v186 = std::locale::use_facet(v210, MEMORY[0x1E0DE4A90]);
          ((void (*)(const std::locale::facet *, uint64_t))v186->__vftable[2].~facet_0)(v186, 10);
          std::locale::~locale(v210);
          std::ostream::put();
          std::ostream::flush();
          if (*((int *)global_logger() + 169) <= 6)
          {
            v187 = (file_logger *)global_logger();
            v188 = file_logger::start_stream(v187, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", "operator()", 235, 1);
            std::stringbuf::str();
            v189 = (char *)pthread_getspecific(*((_QWORD *)v188 + 74));
            if (v189 && v189[280])
            {
              v190 = v189 + 16;
              if (v221 >= 0)
                v191 = v220;
              else
                v191 = (void **)v220[0];
              if (v221 >= 0)
                v192 = HIBYTE(v221);
              else
                v192 = (uint64_t)v220[1];
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v190, (uint64_t)v191, v192);
            }
            if (SHIBYTE(v221) < 0)
              operator delete(v220[0]);
          }
          __print_back_trace();
          if (*((int *)global_logger() + 169) <= 6)
          {
            v193 = (file_logger *)global_logger();
            v194 = file_logger::start_stream(v193, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", "operator()", 235, 1);
            std::stringbuf::str();
            v195 = (char *)pthread_getspecific(*((_QWORD *)v194 + 74));
            if (v195 && v195[280])
            {
              v196 = v195 + 16;
              if ((v211 & 0x80u) == 0)
                locale = v210;
              else
                locale = v210[0].__locale_;
              if ((v211 & 0x80u) == 0)
                v198 = v211;
              else
                v198 = (uint64_t)v210[1].__locale_;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v196, (uint64_t)locale, v198);
            }
            v199 = pthread_getspecific(*((_QWORD *)v194 + 74));
            if (v199)
            {
              if (*((_BYTE *)v199 + 280))
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199 + 2, (uint64_t)"\n", 1);
                file_logger::stream_flush(v194);
                if (*((_DWORD *)v194 + 150) == 7)
                {
                  __print_back_trace();
                  v202 = __cxa_allocate_exception(8uLL);
                  *v202 = "LOG_FATAL encountered";
                  __cxa_throw(v202, MEMORY[0x1E0DE4E50], 0);
                }
              }
            }
            if ((char)v211 < 0)
              operator delete(v210[0].__locale_);
          }
          v200 = __cxa_allocate_exception(0x18uLL);
          std::stringbuf::str();
        }
        if ((v216.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v34 = HIBYTE(v216.__r_.__value_.__r.__words[2]);
        else
          v34 = v216.__r_.__value_.__l.__size_;
        if ((v216.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v35 = &v216;
        else
          v35 = (std::string *)v216.__r_.__value_.__r.__words[0];
        while (1)
        {
          v36 = *((char *)v33 + 55);
          if (v36 >= 0)
            v37 = *((unsigned __int8 *)v33 + 55);
          else
            v37 = (size_t)v33[5];
          if (v36 >= 0)
            v38 = (uint64_t *)(v33 + 4);
          else
            v38 = v33[4];
          if (v37 >= v34)
            v39 = v34;
          else
            v39 = v37;
          v40 = memcmp(v35, v38, v39);
          v41 = v34 < v37;
          if (v40)
            v41 = v40 < 0;
          if (!v41)
          {
            v42 = memcmp(v38, v35, v39);
            v43 = v37 < v34;
            if (v42)
              v43 = v42 < 0;
            if (!v43)
            {
              v210[0].__locale_ = (std::locale::__imp *)&v216;
              v44 = std::__tree<std::__value_type<std::string,nitro::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v205, (const void **)&v216.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)v210);
              memset(v222, 0, sizeof(v222));
              LOBYTE(v223) = 0;
              if (&v222[16] != (_BYTE *)(v44 + 7))
              {
                *(_QWORD *)&v222[16] = v44[7];
                LOBYTE(v223) = *((_BYTE *)v44 + 64);
                if (v223 - 2 < 4 || v223 == 9)
                {
                  v45 = *(unint64_t **)&v222[16];
                  do
                    v46 = __ldaxr(v45);
                  while (__stlxr(v46 + 1, v45));
                }
              }
              v47 = v218;
              if ((unint64_t)v218 >= v219)
                goto LABEL_85;
LABEL_92:
              *(_OWORD *)v47 = *(_OWORD *)v222;
              *(_OWORD *)v222 = 0uLL;
              *((_QWORD *)v47 + 2) = 0;
              v47[24] = 0;
              v53 = v223;
              *((_QWORD *)v47 + 2) = *(_QWORD *)&v222[16];
              v47[24] = v53;
              v47[24] = v223;
              LOBYTE(v223) = 0;
              v48 = v47 + 32;
              goto LABEL_93;
            }
            ++v33;
          }
          v33 = (uint64_t **)*v33;
          if (!v33)
            goto LABEL_258;
        }
      }
      if ((v216.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = HIBYTE(v216.__r_.__value_.__r.__words[2]);
      else
        v23 = v216.__r_.__value_.__l.__size_;
      if ((v216.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v216;
      else
        v24 = (std::string *)v216.__r_.__value_.__r.__words[0];
      while (1)
      {
        v25 = *((char *)v22 + 55);
        if (v25 >= 0)
          v26 = *((unsigned __int8 *)v22 + 55);
        else
          v26 = (size_t)v22[5];
        if (v25 >= 0)
          v27 = (uint64_t *)(v22 + 4);
        else
          v27 = v22[4];
        if (v26 >= v23)
          v28 = v23;
        else
          v28 = v26;
        v29 = memcmp(v24, v27, v28);
        v30 = v23 < v26;
        if (v29)
          v30 = v29 < 0;
        if (v30)
          goto LABEL_38;
        v31 = memcmp(v27, v24, v28);
        v32 = v26 < v23;
        if (v31)
          v32 = v31 < 0;
        if (!v32)
          break;
        ++v22;
LABEL_38:
        v22 = (uint64_t **)*v22;
        if (!v22)
          goto LABEL_55;
      }
      v49 = std::map<std::string,nitro::flexible_type>::at(a3, (const void **)&v216.__r_.__value_.__l.__data_);
      memset(v222, 0, sizeof(v222));
      LOBYTE(v223) = 0;
      if (&v222[16] != (_BYTE *)v49)
      {
        v50 = *v49;
        LOBYTE(v223) = *((_BYTE *)v49 + 8);
        *(_QWORD *)&v222[16] = v50;
        LOBYTE(v223) = *((_BYTE *)v49 + 8);
        if (v223 - 2 < 4 || v223 == 9)
        {
          v51 = *(unint64_t **)&v222[16];
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 + 1, v51));
        }
      }
      v47 = v218;
      if ((unint64_t)v218 < v219)
        goto LABEL_92;
LABEL_85:
      v48 = std::vector<nitro::nitro_variable>::__push_back_slow_path<nitro::nitro_variable>(&v217, (uint64_t)v222);
LABEL_93:
      v218 = v48;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v222);
      if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v216.__r_.__value_.__l.__data_);
      v19 += 3;
    }
    while (v19 != v20);
  }
  nitro::nitro_instance::get_member_function(*(nitro::nitro_instance **)(v207 + 32), (const std::string *)a2, (nitro::nitro_function *)v210);
  nitro::nitro_function::run((__int128 *)v210, (uint64_t *)&v217, (unint64_t *)(v207 + 144), (uint64_t)v220);
  if (v220[0])
  {
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)a4 = a4 + 8;
  }
  else
  {
    v66 = v221;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)a4 = a4 + 8;
    v216.__r_.__value_.__r.__words[0] = (uint64_t)(*(_QWORD *)(v66 + 16) - *(_QWORD *)(v66 + 8)) >> 4;
    v67 = v216.__r_.__value_.__r.__words[0];
    v68 = (uint64_t **)(v207 + 96);
    *(_QWORD *)v222 = a2;
    v69 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v207 + 96), (const void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)v222);
    v209 = 0xAAAAAAAAAAAAAAABLL * (v69[8] - v69[7]);
    if (v67 != v209)
    {
      *(_QWORD *)v222 = &v216;
      *(_QWORD *)&v222[8] = &v209;
      nitro::nitro_program::run(std::string,std::map<std::string,nitro::flexible_type> const&)::$_2::operator()();
    }
    v70 = *(_QWORD *)(v66 + 8);
    if (*(_QWORD *)(v66 + 16) != v70)
    {
      v71 = 0;
      do
      {
        v72 = (uint64_t **)(v70 + 16 * v71);
        if (*((_BYTE *)v72 + 8) == 9)
        {
          nitro::ndarray_container::canonicalize((nitro::ndarray_container *)(*v72 + 1), (uint64_t)v222);
          v73 = operator new();
          *(_QWORD *)v73 = 0;
          nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v73 + 8));
          *(_QWORD *)v73 = 1;
          *(_DWORD *)(v73 + 8) = *(_DWORD *)v222;
          v74 = *(_OWORD *)&v222[8];
          *(_QWORD *)&v222[8] = 0;
          *(_QWORD *)&v222[16] = 0;
          v75 = *(std::__shared_weak_count **)(v73 + 24);
          *(_OWORD *)(v73 + 16) = v74;
          if (v75)
          {
            p_shared_owners = (unint64_t *)&v75->__shared_owners_;
            do
              v77 = __ldaxr(p_shared_owners);
            while (__stlxr(v77 - 1, p_shared_owners));
            if (!v77)
            {
              ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
              std::__shared_weak_count::__release_weak(v75);
            }
          }
          v78 = *(void **)(v73 + 32);
          if (v78)
          {
            *(_QWORD *)(v73 + 40) = v78;
            operator delete(v78);
            *(_QWORD *)(v73 + 32) = 0;
            *(_QWORD *)(v73 + 40) = 0;
            *(_QWORD *)(v73 + 48) = 0;
          }
          v79 = *(void **)(v73 + 56);
          *(_OWORD *)(v73 + 32) = v223;
          *(_QWORD *)(v73 + 48) = v224;
          v224 = 0;
          v223 = 0uLL;
          if (v79)
          {
            *(_QWORD *)(v73 + 64) = v79;
            operator delete(v79);
            *(_QWORD *)(v73 + 56) = 0;
            *(_QWORD *)(v73 + 64) = 0;
            *(_QWORD *)(v73 + 72) = 0;
          }
          *(_OWORD *)(v73 + 56) = *(_OWORD *)v225;
          v80 = v226;
          v81 = v227;
          v225[1] = 0;
          v226 = 0;
          v225[0] = 0;
          *(_QWORD *)(v73 + 72) = v80;
          *(_QWORD *)(v73 + 80) = v81;
          v216.__r_.__value_.__r.__words[0] = a2;
          v216.__r_.__value_.__r.__words[0] = (std::string::size_type)&std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v68, (const void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v216)[7][3 * v71];
          v82 = std::__tree<std::__value_type<std::string,nitro::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a4, (const void **)v216.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v216);
          v83 = v82;
          switch(*((_BYTE *)v82 + 64))
          {
            case 2:
              v84 = (unint64_t *)v82[7];
              do
              {
                v85 = __ldaxr(v84);
                v86 = v85 - 1;
              }
              while (__stlxr(v86, v84));
              if (!v86)
              {
                v87 = v82[7];
                if (!v87)
                  goto LABEL_176;
                if (*((char *)v87 + 31) < 0)
                  operator delete((void *)v87[1]);
                v88 = v87;
                v89 = 0x1012C404EF22A49;
                goto LABEL_175;
              }
              break;
            case 3:
              v104 = (unint64_t *)v82[7];
              do
              {
                v105 = __ldaxr(v104);
                v106 = v105 - 1;
              }
              while (__stlxr(v106, v104));
              if (!v106)
              {
                v107 = v82[7];
                if (!v107)
                  goto LABEL_176;
                v108 = (void *)v107[1];
                if (v108)
                {
                  v107[2] = (uint64_t)v108;
                  operator delete(v108);
                }
                v88 = v107;
                v89 = 0x1080C409938AC02;
                goto LABEL_175;
              }
              break;
            case 4:
              v97 = (unint64_t *)v82[7];
              do
              {
                v98 = __ldaxr(v97);
                v99 = v98 - 1;
              }
              while (__stlxr(v99, v97));
              if (!v99)
              {
                v100 = v82[7];
                if (!v100)
                  goto LABEL_176;
                v101 = v100[1];
                if (v101)
                {
                  v102 = v100[2];
                  v103 = (void *)v100[1];
                  if (v102 != v101)
                  {
                    do
                    {
                      v102 -= 16;
                      std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v100 + 3), v102);
                    }
                    while (v102 != v101);
                    v103 = (void *)v100[1];
                  }
                  v100[2] = v101;
                  operator delete(v103);
                }
                goto LABEL_174;
              }
              break;
            case 5:
              v109 = (unint64_t *)v82[7];
              do
              {
                v110 = __ldaxr(v109);
                v111 = v110 - 1;
              }
              while (__stlxr(v111, v109));
              if (!v111)
              {
                v100 = v82[7];
                if (v100)
                {
                  v112 = v100[1];
                  if (v112)
                  {
                    v113 = v100[2];
                    v114 = (void *)v100[1];
                    if (v113 != v112)
                    {
                      do
                        v113 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v113 - 32);
                      while (v113 != v112);
                      v114 = (void *)v100[1];
                    }
                    v100[2] = v112;
                    operator delete(v114);
                  }
LABEL_174:
                  v88 = v100;
                  v89 = 0x1020C405E66F15BLL;
LABEL_175:
                  MEMORY[0x19401CD90](v88, v89);
                }
                goto LABEL_176;
              }
              break;
            case 9:
              v118 = (unint64_t *)v82[7];
              do
              {
                v119 = __ldaxr(v118);
                v120 = v119 - 1;
              }
              while (__stlxr(v120, v118));
              if (!v120)
              {
                v121 = v82[7];
                if (v121)
                {
                  v122 = (void *)v121[7];
                  if (v122)
                  {
                    v121[8] = (uint64_t)v122;
                    operator delete(v122);
                  }
                  v123 = (void *)v121[4];
                  if (v123)
                  {
                    v121[5] = (uint64_t)v123;
                    operator delete(v123);
                  }
                  v124 = (std::__shared_weak_count *)v121[3];
                  if (v124)
                  {
                    v125 = (unint64_t *)&v124->__shared_owners_;
                    do
                      v126 = __ldaxr(v125);
                    while (__stlxr(v126 - 1, v125));
                    if (!v126)
                    {
                      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                      std::__shared_weak_count::__release_weak(v124);
                    }
                  }
                  MEMORY[0x19401CD90](v121, 0x10B0C4002311774);
                }
LABEL_176:
                v83[7] = 0;
              }
              break;
            default:
              break;
          }
          v83[7] = (uint64_t *)v73;
          *((_BYTE *)v83 + 64) = 9;
          if (v225[0])
          {
            v225[1] = v225[0];
            operator delete(v225[0]);
          }
          if ((_QWORD)v223)
          {
            *((_QWORD *)&v223 + 1) = v223;
            operator delete((void *)v223);
          }
          v115 = *(std::__shared_weak_count **)&v222[16];
          if (*(_QWORD *)&v222[16])
          {
            v116 = (unint64_t *)(*(_QWORD *)&v222[16] + 8);
            do
              v117 = __ldaxr(v116);
            while (__stlxr(v117 - 1, v116));
            if (!v117)
            {
              ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
              std::__shared_weak_count::__release_weak(v115);
            }
          }
        }
        else
        {
          *(_QWORD *)v222 = a2;
          *(_QWORD *)v222 = &std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v68, (const void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)v222)[7][3 * v71];
          v90 = std::__tree<std::__value_type<std::string,nitro::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a4, *(const void ***)v222, (uint64_t)&std::piecewise_construct, (__int128 **)v222);
          v91 = v90;
          v92 = v90 + 7;
          if (v72 != v90 + 7)
          {
            switch(*((_BYTE *)v90 + 64))
            {
              case 2:
                v93 = (unint64_t *)*v92;
                do
                {
                  v94 = __ldaxr(v93);
                  v95 = v94 - 1;
                }
                while (__stlxr(v95, v93));
                if (!v95)
                {
                  v96 = (unint64_t *)*v92;
                  if (*v92)
                  {
                    if (*((char *)v96 + 31) < 0)
                      operator delete((void *)v96[1]);
                    MEMORY[0x19401CD90](v96, 0x1012C404EF22A49);
                  }
                  goto LABEL_241;
                }
                break;
              case 3:
                v134 = (unint64_t *)*v92;
                do
                {
                  v135 = __ldaxr(v134);
                  v136 = v135 - 1;
                }
                while (__stlxr(v136, v134));
                if (!v136)
                {
                  v137 = (unint64_t *)*v92;
                  if (*v92)
                  {
                    v138 = (void *)v137[1];
                    if (v138)
                    {
                      v137[2] = (unint64_t)v138;
                      operator delete(v138);
                    }
                    MEMORY[0x19401CD90](v137, 0x1080C409938AC02);
                  }
                  goto LABEL_241;
                }
                break;
              case 4:
                v127 = (unint64_t *)*v92;
                do
                {
                  v128 = __ldaxr(v127);
                  v129 = v128 - 1;
                }
                while (__stlxr(v129, v127));
                if (!v129)
                {
                  v130 = (unint64_t *)*v92;
                  if (*v92)
                  {
                    v206 = v68;
                    v131 = v130[1];
                    if (v131)
                    {
                      v132 = v130[2];
                      v133 = (void *)v130[1];
                      if (v132 != v131)
                      {
                        do
                        {
                          v132 -= 16;
                          std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v130 + 3), v132);
                        }
                        while (v132 != v131);
                        v133 = (void *)v130[1];
                      }
                      v130[2] = v131;
                      operator delete(v133);
                    }
                    MEMORY[0x19401CD90](v130, 0x1020C405E66F15BLL);
                    v68 = v206;
                  }
                  goto LABEL_241;
                }
                break;
              case 5:
                v139 = (unint64_t *)*v92;
                do
                {
                  v140 = __ldaxr(v139);
                  v141 = v140 - 1;
                }
                while (__stlxr(v141, v139));
                if (!v141)
                {
                  v142 = (unint64_t *)*v92;
                  if (*v92)
                  {
                    v143 = v68;
                    v144 = v142[1];
                    if (v144)
                    {
                      v145 = v142[2];
                      v146 = (void *)v142[1];
                      if (v145 != v144)
                      {
                        do
                          v145 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v145 - 32);
                        while (v145 != v144);
                        v146 = (void *)v142[1];
                      }
                      v142[2] = v144;
                      operator delete(v146);
                    }
                    MEMORY[0x19401CD90](v142, 0x1020C405E66F15BLL);
                    v68 = v143;
                  }
                  goto LABEL_241;
                }
                break;
              case 9:
                v147 = (unint64_t *)*v92;
                do
                {
                  v148 = __ldaxr(v147);
                  v149 = v148 - 1;
                }
                while (__stlxr(v149, v147));
                if (!v149)
                {
                  v150 = (unint64_t *)*v92;
                  if (*v92)
                  {
                    v151 = (void *)v150[7];
                    if (v151)
                    {
                      v150[8] = (unint64_t)v151;
                      operator delete(v151);
                    }
                    v152 = (void *)v150[4];
                    if (v152)
                    {
                      v150[5] = (unint64_t)v152;
                      operator delete(v152);
                    }
                    v153 = (std::__shared_weak_count *)v150[3];
                    if (v153)
                    {
                      v154 = (unint64_t *)&v153->__shared_owners_;
                      do
                        v155 = __ldaxr(v154);
                      while (__stlxr(v155 - 1, v154));
                      if (!v155)
                      {
                        ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                        std::__shared_weak_count::__release_weak(v153);
                      }
                    }
                    MEMORY[0x19401CD90](v150, 0x10B0C4002311774);
                  }
LABEL_241:
                  *v92 = 0;
                }
                break;
              default:
                break;
            }
            v156 = *v72;
            *((_BYTE *)v92 + 8) = *((_BYTE *)v72 + 8);
            *v92 = v156;
            LODWORD(v156) = *((unsigned __int8 *)v72 + 8);
            *((_BYTE *)v91 + 64) = (_BYTE)v156;
            switch((int)v156)
            {
              case 2:
                v157 = (unint64_t *)*v92;
                do
                  v158 = __ldaxr(v157);
                while (__stlxr(v158 + 1, v157));
                break;
              case 3:
                v161 = (unint64_t *)*v92;
                do
                  v162 = __ldaxr(v161);
                while (__stlxr(v162 + 1, v161));
                break;
              case 4:
                v159 = (unint64_t *)*v92;
                do
                  v160 = __ldaxr(v159);
                while (__stlxr(v160 + 1, v159));
                break;
              case 5:
                v163 = (unint64_t *)*v92;
                do
                  v164 = __ldaxr(v163);
                while (__stlxr(v164 + 1, v163));
                break;
              case 9:
                v165 = (unint64_t *)*v92;
                do
                  v166 = __ldaxr(v165);
                while (__stlxr(v166 + 1, v165));
                break;
              default:
                break;
            }
          }
        }
        ++v71;
        v70 = *(_QWORD *)(v66 + 8);
      }
      while (v71 < (*(_QWORD *)(v66 + 16) - v70) >> 4);
    }
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v220);
  v54 = v214;
  if (v214)
  {
    do
    {
      v55 = (_QWORD *)*v54;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v54 + 3));
      operator delete(v54);
      v54 = v55;
    }
    while (v55);
  }
  v56 = __p;
  __p = 0;
  if (v56)
    operator delete(v56);
  v57 = v212;
  if (v212)
  {
    v58 = (unint64_t *)&v212->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = v210[1].__locale_;
  if (v210[1].__locale_)
  {
    v61 = (unint64_t *)((char *)v210[1].__locale_ + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)v60 + 16))(v60);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v60);
    }
  }
  v63 = (char *)v217;
  if (v217)
  {
    v64 = v218;
    v65 = v217;
    if (v218 != v217)
    {
      do
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v64 - 32));
      while (v64 != v63);
      v65 = v217;
    }
    v218 = v63;
    operator delete(v65);
  }
}

void sub_19116CD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;

  if (a21 < 0)
    operator delete(__p);
  a47 = *v62;
  *(uint64_t *)((char *)&a47 + *(_QWORD *)(a47 - 24)) = v62[3];
  a48 = v63 + 16;
  if (a61 < 0)
    operator delete(a56);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v61);
  if (a37 < 0)
    operator delete(a32);
  std::vector<nitro::nitro_variable>::~vector[abi:ne180100](&a39);
  _Unwind_Resume(a1);
}

void nitro::nitro_program::run(std::string,std::map<std::string,nitro::flexible_type> const&)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", 106);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"m_inputs.count(function)", 24);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", "operator()", 224, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", "operator()", 224, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19116D21C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_19116D284(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,nitro::flexible_type>::at(uint64_t a1, const void **a2)
{
  uint64_t **v2;
  int v3;
  size_t v4;
  const void *v5;
  int v6;
  size_t v7;
  uint64_t *v8;
  size_t v9;
  int v10;
  _BOOL4 v11;
  int v12;
  _BOOL4 v13;

  v2 = *(uint64_t ***)(a1 + 8);
  if (!v2)
LABEL_25:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  v3 = *((char *)a2 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a2 + 23);
  else
    v4 = (size_t)a2[1];
  if (v3 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  while (1)
  {
    while (1)
    {
      v6 = *((char *)v2 + 55);
      if (v6 >= 0)
        v7 = *((unsigned __int8 *)v2 + 55);
      else
        v7 = (size_t)v2[5];
      if (v6 >= 0)
        v8 = (uint64_t *)(v2 + 4);
      else
        v8 = v2[4];
      if (v7 >= v4)
        v9 = v4;
      else
        v9 = v7;
      v10 = memcmp(v5, v8, v9);
      v11 = v4 < v7;
      if (v10)
        v11 = v10 < 0;
      if (!v11)
        break;
      v2 = (uint64_t **)*v2;
      if (!v2)
        goto LABEL_25;
    }
    v12 = memcmp(v8, v5, v9);
    v13 = v7 < v4;
    if (v12)
      v13 = v12 < 0;
    if (!v13)
      return (uint64_t *)(v2 + 7);
    v2 = (uint64_t **)v2[1];
    if (!v2)
      goto LABEL_25;
  }
}

void nitro::nitro_program::run(std::string,std::map<std::string,nitro::flexible_type> const&)::$_2::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", 106);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"retlist.size()", 14);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"m_outputs[function].size()", 26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", "operator()", 245, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", "operator()", 245, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19116D740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_19116D7A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::nitro_function::~nitro_function(nitro::nitro_function *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (_QWORD *)*((_QWORD *)this + 6);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    operator delete(v4);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v5)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v8)
      return;
  }
  else
  {
LABEL_9:
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v8)
      return;
  }
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

uint64_t std::pair<std::string const,std::vector<std::string>>::~pair(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

double nitro::nitro_program::get_blob_shape@<D0>(uint64_t a1@<X0>, std::string *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *input_types;
  const char *v18;
  __n128 v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t output_type;
  const char *v38;
  _QWORD *v39;
  _QWORD *v40;
  void *v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  _BYTE v48[8];
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;
  void *__p;
  _QWORD *v52;

  v8 = std::map<std::string,nitro::flexible_type>::at(a1 + 72, (const void **)&a2->__r_.__value_.__l.__data_);
  v9 = *v8;
  v10 = v8[1];
  if (*v8 != v10)
  {
    v11 = a3[23];
    if (v11 >= 0)
      v12 = a3[23];
    else
      v12 = *((_QWORD *)a3 + 1);
    if (v11 >= 0)
      v13 = a3;
    else
      v13 = *(unsigned __int8 **)a3;
    while (1)
    {
      v14 = *(unsigned __int8 *)(v9 + 23);
      if ((v14 & 0x80u) == 0)
        v15 = *(unsigned __int8 *)(v9 + 23);
      else
        v15 = *(_QWORD *)(v9 + 8);
      if (v15 == v12)
      {
        if ((v14 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v9, v13, *(_QWORD *)(v9 + 8)))
            break;
        }
        else
        {
          if (!*(_BYTE *)(v9 + 23))
            break;
          v16 = 0;
          while (*(unsigned __int8 *)(v9 + v16) == v13[v16])
          {
            if (v14 == ++v16)
              goto LABEL_19;
          }
        }
      }
      v9 += 24;
      if (v9 == v10)
        goto LABEL_33;
    }
  }
LABEL_19:
  if (v10 == v9)
  {
LABEL_33:
    v29 = std::map<std::string,nitro::flexible_type>::at(a1 + 96, (const void **)&a2->__r_.__value_.__l.__data_);
    v30 = *v29;
    v31 = v29[1];
    if (*v29 != v31)
    {
      v32 = a3[23];
      if (v32 >= 0)
        v33 = a3[23];
      else
        v33 = *((_QWORD *)a3 + 1);
      if (v32 < 0)
        a3 = *(_BYTE **)a3;
      while (1)
      {
        v34 = *(unsigned __int8 *)(v30 + 23);
        if ((v34 & 0x80u) == 0)
          v35 = *(unsigned __int8 *)(v30 + 23);
        else
          v35 = *(_QWORD *)(v30 + 8);
        if (v35 == v33)
        {
          if ((v34 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v30, a3, *(_QWORD *)(v30 + 8)))
              break;
          }
          else
          {
            if (!*(_BYTE *)(v30 + 23))
              break;
            v36 = 0;
            while (*(unsigned __int8 *)(v30 + v36) == a3[v36])
            {
              if (v34 == ++v36)
                goto LABEL_51;
            }
          }
        }
        v30 += 24;
        if (v30 == v31)
          goto LABEL_67;
      }
    }
LABEL_51:
    if (v31 == v30)
    {
LABEL_67:
      *(_QWORD *)(a4 + 56) = 0;
      *(_OWORD *)(a4 + 40) = 0u;
      *(_OWORD *)(a4 + 24) = 0u;
      v46 = 0x100000001;
      v19.n128_u64[1] = 0x100000001;
      *(__n128 *)a4 = v19;
      v19.n128_u64[0] = 0xFFFFFFFF00000001;
      *(_QWORD *)(a4 + 16) = 0xFFFFFFFF00000001;
      return v19.n128_f64[0];
    }
    nitro::nitro_instance::get_member_function(*(nitro::nitro_instance **)(a1 + 32), a2, (nitro::nitro_function *)v48);
    output_type = nitro::nitro_function::get_output_type((nitro::nitro_function *)v48);
    if (*(_DWORD *)(output_type + 32) != 2)
      std::__throw_bad_variant_access[abi:ne180100]();
    v19.n128_u64[0] = (unint64_t)nitro::variable_type::get_layer_shape((nitro::variable_type *)(**(_QWORD **)output_type- 0x5555555555555548 * ((v30 - *v29) >> 3)), v38, a4);
    v39 = v52;
    if (v52)
    {
      do
      {
        v40 = (_QWORD *)*v39;
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v39 + 3));
        operator delete(v39);
        v39 = v40;
      }
      while (v40);
    }
    v41 = __p;
    __p = 0;
    if (v41)
      operator delete(v41);
    v42 = v50;
    if (v50)
    {
      p_shared_owners = (unint64_t *)&v50->__shared_owners_;
      do
        v44 = __ldaxr(p_shared_owners);
      while (__stlxr(v44 - 1, p_shared_owners));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v42->__on_zero_shared)(v42, v19);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v26 = v49;
    if (v49)
    {
      v45 = (unint64_t *)&v49->__shared_owners_;
      do
        v28 = __ldaxr(v45);
      while (__stlxr(v28 - 1, v45));
LABEL_65:
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v26->__on_zero_shared)(v26, v19);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
  else
  {
    nitro::nitro_instance::get_member_function(*(nitro::nitro_instance **)(a1 + 32), a2, (nitro::nitro_function *)v48);
    input_types = (_QWORD *)nitro::nitro_function::get_input_types((nitro::nitro_function *)v48);
    v19.n128_u64[0] = (unint64_t)nitro::variable_type::get_layer_shape((nitro::variable_type *)(*input_types- 0x5555555555555548 * ((v9 - *v8) >> 3)), v18, a4);
    v20 = v52;
    if (v52)
    {
      do
      {
        v21 = (_QWORD *)*v20;
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v20 + 3));
        operator delete(v20);
        v20 = v21;
      }
      while (v21);
    }
    v22 = __p;
    __p = 0;
    if (v22)
      operator delete(v22);
    v23 = v50;
    if (v50)
    {
      v24 = (unint64_t *)&v50->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v23->__on_zero_shared)(v23, v19);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = v49;
    if (v49)
    {
      v27 = (unint64_t *)&v49->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      goto LABEL_65;
    }
  }
  return v19.n128_f64[0];
}

void sub_19116DCB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nitro::nitro_function::~nitro_function((nitro::nitro_function *)va);
  _Unwind_Resume(a1);
}

int32x2_t nitro::variable_type::get_layer_shape@<D0>(nitro::variable_type *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  int32x4_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  int32x2_t result;
  NSObject *v11;
  __int128 v12;
  int32x4_t *v13;
  int32x4_t *v14;
  unint64_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  unint64_t v20;
  _DWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD v24[2];
  _DWORD v25[2];

  v4 = *((_DWORD *)this + 8);
  if (!v4)
  {
    *(_QWORD *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_QWORD *)&v9 = 0x100000001;
    *((_QWORD *)&v9 + 1) = 0x100000001;
    *(_OWORD *)a3 = v9;
    result = (int32x2_t)1;
LABEL_12:
    *(int32x2_t *)(a3 + 16) = result;
    return result;
  }
  if (v4 != 1)
  {
    Espresso::espresso_os_log_subsystem(0, a2);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      nitro::variable_type::get_layer_shape(v11);

    *(_QWORD *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_QWORD *)&v12 = 0x100000001;
    *((_QWORD *)&v12 + 1) = 0x100000001;
    *(_OWORD *)a3 = v12;
    result = (int32x2_t)0xFFFFFFFF00000001;
    goto LABEL_12;
  }
  v24[0] = 0;
  v24[1] = 0;
  v25[0] = 0;
  v5 = (int32x4_t *)*((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2) - (_QWORD)v5;
  if (v6)
  {
    v7 = v6 >> 3;
    if ((unint64_t)(v6 >> 3) <= 1)
      v7 = 1;
    if (v7 >= 8)
    {
      v8 = v7 & 0xFFFFFFFFFFFFFFF8;
      v13 = v5 + 2;
      v14 = (int32x4_t *)v25;
      v15 = v7 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v17 = v13[-2];
        v16 = v13[-1];
        v19 = *v13;
        v18 = v13[1];
        v13 += 4;
        v14[-1] = vuzp1q_s32(v17, v16);
        *v14 = vuzp1q_s32(v19, v18);
        v14 += 2;
        v15 -= 8;
      }
      while (v15);
      if (v7 == v8)
        goto LABEL_18;
    }
    else
    {
      v8 = 0;
    }
    v20 = v7 - v8;
    v21 = (_DWORD *)v24 + v8;
    v22 = &v5->i64[v8];
    do
    {
      v23 = *v22++;
      *v21++ = v23;
      --v20;
    }
    while (v20);
  }
LABEL_18:
  v25[1] = (unint64_t)v6 >> 3;
  return Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v24, 0, a3);
}

nitro::ndarray_container *nitro::ndarray_container::ndarray_container(nitro::ndarray_container *this, const nitro::ndarray_container *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;

  *(_DWORD *)this = *(_DWORD *)a2;
  v4 = *((_QWORD *)a2 + 2);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 2) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  v8 = (_BYTE *)*((_QWORD *)a2 + 3);
  v7 = (_BYTE *)*((_QWORD *)a2 + 4);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)operator new(v7 - v8);
    *((_QWORD *)this + 3) = v10;
    *((_QWORD *)this + 4) = v10;
    v11 = &v10[8 * (v9 >> 3)];
    *((_QWORD *)this + 5) = v11;
    memcpy(v10, v8, v9);
    *((_QWORD *)this + 4) = v11;
  }
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  v13 = (_BYTE *)*((_QWORD *)a2 + 6);
  v12 = (_BYTE *)*((_QWORD *)a2 + 7);
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v15 = (char *)operator new(v12 - v13);
    *((_QWORD *)this + 6) = v15;
    *((_QWORD *)this + 7) = v15;
    v16 = &v15[8 * (v14 >> 3)];
    *((_QWORD *)this + 8) = v16;
    memcpy(v15, v13, v14);
    *((_QWORD *)this + 7) = v16;
  }
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  return this;
}

void sub_19116DF3C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 56) = v6;
    operator delete(v6);
  }
  v7 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 32) = v7;
    operator delete(v7);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<void>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t nitro::SExp::SExp(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  unint64_t **v5;
  unint64_t *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  *(_WORD *)a1 = *(_WORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_QWORD *)(a1 + 32) = 0;
  v5 = (unint64_t **)(a1 + 32);
  *(_BYTE *)(a1 + 40) = 0;
  if (a2 != a1)
  {
    v6 = *(unint64_t **)(a2 + 32);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *v5 = v6;
    v7 = *(unsigned __int8 *)(a2 + 40);
    *(_BYTE *)(a1 + 40) = v7;
    if ((v7 - 2) < 4 || v7 == 9)
    {
      v8 = *v5;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v11 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  if (v10 != v11)
  {
    if (0x8E38E38E38E38E39 * ((v10 - v11) >> 3) >= 0x38E38E38E38E38FLL)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v12 = (char *)operator new(v10 - v11);
    v13 = 0;
    *(_QWORD *)(a1 + 48) = v12;
    *(_QWORD *)(a1 + 56) = v12;
    *(_QWORD *)(a1 + 64) = &v12[8 * ((v10 - v11) >> 3)];
    do
    {
      nitro::SExp::SExp((nitro::SExp *)&v12[v13], (const nitro::SExp *)(v11 + v13));
      v13 += 72;
    }
    while (v11 + v13 != v10);
    *(_QWORD *)(a1 + 56) = &v12[v13];
  }
  return a1;
}

void sub_19116E13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  void **v10;
  uint64_t *v11;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;

  std::__exception_guard_exceptions<std::vector<nitro::SExp>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  switch(*(_BYTE *)(v9 + 40))
  {
    case 2:
      v13 = (unint64_t *)*v11;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (v15)
        goto LABEL_34;
      v16 = *v11;
      if (!*v11)
        goto LABEL_33;
      if (*(char *)(v16 + 31) < 0)
        operator delete(*(void **)(v16 + 8));
      v17 = v16;
      v18 = 0x1012C404EF22A49;
      break;
    case 3:
      v22 = (unint64_t *)*v11;
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (v24)
        goto LABEL_34;
      v25 = *v11;
      if (!*v11)
        goto LABEL_33;
      v26 = *(void **)(v25 + 8);
      if (v26)
      {
        *(_QWORD *)(v25 + 16) = v26;
        operator delete(v26);
      }
      v17 = v25;
      v18 = 0x1080C409938AC02;
      break;
    case 4:
      v19 = (unint64_t *)*v11;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (v21)
        goto LABEL_34;
      if (!*v11)
        goto LABEL_33;
      v17 = std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(*v11);
      goto LABEL_26;
    case 5:
      v27 = (unint64_t *)*v11;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (v29)
        goto LABEL_34;
      if (!*v11)
        goto LABEL_33;
      v17 = std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair(*v11);
LABEL_26:
      v18 = 0x1020C405E66F15BLL;
      break;
    case 9:
      v30 = (unint64_t *)*v11;
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (v32)
        goto LABEL_34;
      if (!*v11)
        goto LABEL_33;
      v17 = (uint64_t)std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair((_QWORD *)*v11);
      v18 = 0x10B0C4002311774;
      break;
    default:
      goto LABEL_34;
  }
  MEMORY[0x19401CD90](v17, v18);
LABEL_33:
  *v11 = 0;
LABEL_34:
  *(_QWORD *)(v9 + 32) = 0;
  *(_BYTE *)(v9 + 40) = 0;
  if (*(char *)(v9 + 31) < 0)
    operator delete(*v10);
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<nitro::SExp>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***a1)
{
  void **v2;
  char *v3;
  char *v4;
  void *v5;

  if (!*((_BYTE *)a1 + 8))
  {
    v2 = *a1;
    v3 = (char *)**a1;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **a1;
      if (v4 != v3)
      {
        do
          nitro::SExp::~SExp((nitro::SExp *)(v4 - 72));
        while (v4 != v3);
        v5 = **a1;
      }
      v2[1] = v3;
      operator delete(v5);
    }
  }
  return a1;
}

void nitro::SExp::~SExp(nitro::SExp *this)
{
  char *v2;
  char *v3;
  char *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  void *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;

  v2 = (char *)*((_QWORD *)this + 6);
  if (v2)
  {
    v3 = (char *)*((_QWORD *)this + 7);
    v4 = v2;
    if (v3 != v2)
    {
      do
        nitro::SExp::~SExp((nitro::SExp *)(v3 - 72));
      while (v3 != v2);
      v4 = (char *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v2;
    operator delete(v4);
  }
  switch(*((_BYTE *)this + 40))
  {
    case 2:
      v5 = (unint64_t *)*((_QWORD *)this + 4);
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        v8 = *((_QWORD *)this + 4);
        if (v8)
        {
          if (*(char *)(v8 + 31) < 0)
            operator delete(*(void **)(v8 + 8));
          v9 = (_QWORD *)v8;
          v10 = 0x1012C404EF22A49;
          goto LABEL_55;
        }
      }
      break;
    case 3:
      v11 = (unint64_t *)*((_QWORD *)this + 4);
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        v14 = (_QWORD *)*((_QWORD *)this + 4);
        if (v14)
        {
          v15 = (void *)v14[1];
          if (v15)
          {
            v14[2] = v15;
            operator delete(v15);
          }
          v9 = v14;
          v10 = 0x1080C409938AC02;
          goto LABEL_55;
        }
      }
      break;
    case 4:
      v16 = (unint64_t *)*((_QWORD *)this + 4);
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        v19 = (_QWORD *)*((_QWORD *)this + 4);
        if (v19)
        {
          v20 = v19[1];
          if (!v20)
            goto LABEL_40;
          v21 = v19[2];
          v22 = (void *)v19[1];
          if (v21 != v20)
          {
            do
            {
              v21 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v19 + 3), v21);
            }
            while (v21 != v20);
            v22 = (void *)v19[1];
          }
          v19[2] = v20;
          goto LABEL_39;
        }
      }
      break;
    case 5:
      v23 = (unint64_t *)*((_QWORD *)this + 4);
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        v19 = (_QWORD *)*((_QWORD *)this + 4);
        if (v19)
        {
          v26 = v19[1];
          if (v26)
          {
            v27 = v19[2];
            v28 = (void *)v19[1];
            if (v27 != v26)
            {
              do
                v27 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v27 - 32);
              while (v27 != v26);
              v28 = (void *)v19[1];
            }
            v19[2] = v26;
            v22 = v28;
LABEL_39:
            operator delete(v22);
          }
LABEL_40:
          v9 = v19;
          v10 = 0x1020C405E66F15BLL;
          goto LABEL_55;
        }
      }
      break;
    case 9:
      v29 = (unint64_t *)*((_QWORD *)this + 4);
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (!v31)
      {
        v32 = (_QWORD *)*((_QWORD *)this + 4);
        if (v32)
        {
          v33 = (void *)v32[7];
          if (v33)
          {
            v32[8] = v33;
            operator delete(v33);
          }
          v34 = (void *)v32[4];
          if (v34)
          {
            v32[5] = v34;
            operator delete(v34);
          }
          v35 = (std::__shared_weak_count *)v32[3];
          if (v35)
          {
            p_shared_owners = (unint64_t *)&v35->__shared_owners_;
            do
              v37 = __ldaxr(p_shared_owners);
            while (__stlxr(v37 - 1, p_shared_owners));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
              std::__shared_weak_count::__release_weak(v35);
            }
          }
          v9 = v32;
          v10 = 0x10B0C4002311774;
LABEL_55:
          MEMORY[0x19401CD90](v9, v10);
        }
      }
      break;
    default:
      break;
  }
  *((_QWORD *)this + 4) = 0;
  *((_BYTE *)this + 40) = 0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t std::ostringstream::str[abi:ne180100]()
{
  return std::stringbuf::str();
}

void std::vector<std::vector<long long>>::__assign_with_size[abi:ne180100]<std::vector<long long>*,std::vector<long long>*>(uint64_t a1, char **a2, uint64_t a3, size_t __sz)
{
  char **v6;
  uint64_t v8;
  uint64_t v9;
  char **v10;
  char **v11;
  char **v12;
  char **v13;
  char *v14;
  char *v15;
  char **v16;
  uint64_t v17;
  uint64_t v18;
  char **v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  char **v26;
  char *v27;
  char *v28;

  v6 = a2;
  v9 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  v10 = *(char ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) < __sz)
  {
    if (v10)
    {
      v11 = *(char ***)(a1 + 8);
      v12 = *(char ***)a1;
      if (v11 != v10)
      {
        v13 = *(char ***)(a1 + 8);
        do
        {
          v15 = *(v13 - 3);
          v13 -= 3;
          v14 = v15;
          if (v15)
          {
            *(v11 - 2) = v14;
            operator delete(v14);
          }
          v11 = v13;
        }
        while (v13 != v10);
        v12 = *(char ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v10;
      operator delete(v12);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_40;
    v20 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v21 = 2 * v20;
    if (2 * v20 <= __sz)
      v21 = __sz;
    v22 = v20 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v21;
    if (v22 > 0xAAAAAAAAAAAAAAALL)
LABEL_40:
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v23 = 3 * v22;
    v24 = operator new(24 * v22);
    *(_QWORD *)a1 = v24;
    *(_QWORD *)(a1 + 8) = v24;
    *(_QWORD *)(a1 + 16) = &v24[v23];
    v25 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<long long>>,std::vector<long long>*,std::vector<long long>*,std::vector<long long>*>(v9, (uint64_t)v6, a3, v24);
LABEL_31:
    *(_QWORD *)(a1 + 8) = v25;
    return;
  }
  v16 = *(char ***)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (v16 - v10) < __sz)
  {
    v17 = (uint64_t)&a2[v16 - v10];
    if (v16 != v10)
    {
      v18 = 8 * (v16 - v10);
      do
      {
        if (v6 != v10)
          std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v10, *v6, v6[1], (v6[1] - *v6) >> 3);
        v6 += 3;
        v10 += 3;
        v18 -= 24;
      }
      while (v18);
      v10 = *(char ***)(a1 + 8);
    }
    v25 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<long long>>,std::vector<long long>*,std::vector<long long>*,std::vector<long long>*>(v9, v17, a3, v10);
    goto LABEL_31;
  }
  if (a2 != (char **)a3)
  {
    v19 = *(char ***)a1;
    do
    {
      if (v6 != v10)
        std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v10, *v6, v6[1], (v6[1] - *v6) >> 3);
      v6 += 3;
      v10 += 3;
      v19 += 3;
    }
    while (v6 != (char **)a3);
    v16 = *(char ***)(a1 + 8);
    if (v16 == v19)
      goto LABEL_39;
    goto LABEL_35;
  }
  v19 = *(char ***)a1;
  if (v16 != v10)
  {
LABEL_35:
    v26 = v16;
    do
    {
      v28 = *(v26 - 3);
      v26 -= 3;
      v27 = v28;
      if (v28)
      {
        *(v16 - 2) = v27;
        operator delete(v27);
      }
      v16 = v26;
    }
    while (v26 != v19);
  }
LABEL_39:
  *(_QWORD *)(a1 + 8) = v19;
}

void sub_19116E840(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_19116E848(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<long long>>,std::vector<long long>*,std::vector<long long>*,std::vector<long long>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const void *v9;
  int64_t v10;
  char *v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v9 = *(const void **)v6;
      v8 = *(_QWORD *)(v6 + 8);
      v10 = v8 - *(_QWORD *)v6;
      if (v8 != *(_QWORD *)v6)
      {
        if (v10 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v11 = (char *)operator new(v8 - *(_QWORD *)v6);
        *a4 = v11;
        a4[1] = v11;
        v7 = &v11[8 * (v10 >> 3)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_19116E918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Espresso::AOT::CostGraph::Node>,Espresso::AOT::CostGraph::Node*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(uint64_t a1, std::string *__str, std::string *a3, size_t __sz)
{
  const std::string *v6;
  uint64_t v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  uint64_t v16;
  __int128 v17;
  std::string *v18;
  char *v19;
  std::string *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  std::string *v27;
  const std::string *v28;

  v6 = __str;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) >= __sz)
  {
    v12 = *(std::string **)(a1 + 8);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v9) >> 3) >= __sz)
    {
      if (__str == a3)
      {
        v20 = *(std::string **)a1;
      }
      else
      {
        v20 = *(std::string **)a1;
        do
        {
          std::string::operator=(v9++, v6++);
          ++v20;
        }
        while (v6 != a3);
        v12 = *(std::string **)(a1 + 8);
      }
      while (v12 != v20)
      {
        if (SHIBYTE(v12[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v12[-1].__r_.__value_.__l.__data_);
        --v12;
      }
      *(_QWORD *)(a1 + 8) = v20;
    }
    else
    {
      v13 = (std::string *)((char *)__str + 8 * (((char *)v12 - (char *)v9) >> 3));
      if (v12 != v9)
      {
        v14 = 8 * (((char *)v12 - (char *)v9) >> 3);
        do
        {
          std::string::operator=(v9++, v6++);
          v14 -= 24;
        }
        while (v14);
        v9 = *(std::string **)(a1 + 8);
      }
      v15 = v9;
      if (v13 != a3)
      {
        v16 = 0;
        do
        {
          v18 = &v9[v16];
          v19 = (char *)&v13[v16];
          if (SHIBYTE(v13[v16].__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)v19, *((_QWORD *)v19 + 1));
          }
          else
          {
            v17 = *(_OWORD *)v19;
            v18->__r_.__value_.__r.__words[2] = *((_QWORD *)v19 + 2);
            *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v17;
          }
          ++v16;
        }
        while (&v13[v16] != a3);
        v15 = &v9[v16];
      }
      *(_QWORD *)(a1 + 8) = v15;
    }
  }
  else
  {
    if (v9)
    {
      v10 = *(std::string **)(a1 + 8);
      v11 = *(std::string **)a1;
      if (v10 != v9)
      {
        do
        {
          if (SHIBYTE(v10[-1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v10[-1].__r_.__value_.__l.__data_);
          --v10;
        }
        while (v10 != v9);
        v11 = *(std::string **)a1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_48;
    v21 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v22 = 2 * v21;
    if (2 * v21 <= __sz)
      v22 = __sz;
    v23 = v21 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v22;
    if (v23 > 0xAAAAAAAAAAAAAAALL)
LABEL_48:
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v24 = 24 * v23;
    v25 = (char *)operator new(24 * v23);
    *(_QWORD *)a1 = v25;
    *(_QWORD *)(a1 + 8) = v25;
    *(_QWORD *)(a1 + 16) = &v25[v24];
    if (v6 != a3)
    {
      v26 = 0;
      do
      {
        v27 = (std::string *)&v25[v26 * 24];
        v28 = &v6[v26];
        if (SHIBYTE(v6[v26].__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v27, v28->__r_.__value_.__l.__data_, v28->__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&v27->__r_.__value_.__l.__data_ = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          v27->__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
        }
        ++v26;
      }
      while (&v6[v26] != a3);
      v25 += v26 * 24;
    }
    *(_QWORD *)(a1 + 8) = v25;
  }
}

_QWORD *std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair(_QWORD *a1)
{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)a1[3];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

uint64_t std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        v3 -= 16;
        std::allocator<nitro::flexible_type>::destroy[abi:ne180100](a1 + 24, v3);
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

void **std::vector<nitro::flexible_type>::~vector[abi:ne180100](void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 16;
        std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void std::allocator<nitro::flexible_type>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  void *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  void *v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;

  switch(*(_BYTE *)(a2 + 8))
  {
    case 2:
      v3 = *(unint64_t **)a2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        v6 = *(unint64_t **)a2;
        if (*(_QWORD *)a2)
        {
          if (*((char *)v6 + 31) < 0)
            operator delete((void *)v6[1]);
          v7 = v6;
          v8 = 0x1012C404EF22A49;
          goto LABEL_50;
        }
      }
      break;
    case 3:
      v9 = *(unint64_t **)a2;
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        v12 = *(unint64_t **)a2;
        if (*(_QWORD *)a2)
        {
          v13 = (void *)v12[1];
          if (v13)
          {
            v12[2] = (unint64_t)v13;
            operator delete(v13);
          }
          v7 = v12;
          v8 = 0x1080C409938AC02;
          goto LABEL_50;
        }
      }
      break;
    case 4:
      v14 = *(unint64_t **)a2;
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        v17 = *(unint64_t **)a2;
        if (*(_QWORD *)a2)
        {
          v18 = v17[1];
          if (!v18)
            goto LABEL_35;
          v19 = v17[2];
          v20 = (void *)v17[1];
          if (v19 != v18)
          {
            do
            {
              v19 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v17 + 3, v19);
            }
            while (v19 != v18);
            v20 = (void *)v17[1];
          }
          v17[2] = v18;
          goto LABEL_34;
        }
      }
      break;
    case 5:
      v21 = *(unint64_t **)a2;
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        v17 = *(unint64_t **)a2;
        if (*(_QWORD *)a2)
        {
          v24 = v17[1];
          if (v24)
          {
            v25 = v17[2];
            v26 = (void *)v17[1];
            if (v25 != v24)
            {
              do
                v25 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v25 - 32);
              while (v25 != v24);
              v26 = (void *)v17[1];
            }
            v17[2] = v24;
            v20 = v26;
LABEL_34:
            operator delete(v20);
          }
LABEL_35:
          v7 = v17;
          v8 = 0x1020C405E66F15BLL;
          goto LABEL_50;
        }
      }
      break;
    case 9:
      v27 = *(unint64_t **)a2;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        v30 = *(unint64_t **)a2;
        if (*(_QWORD *)a2)
        {
          v31 = (void *)v30[7];
          if (v31)
          {
            v30[8] = (unint64_t)v31;
            operator delete(v31);
          }
          v32 = (void *)v30[4];
          if (v32)
          {
            v30[5] = (unint64_t)v32;
            operator delete(v32);
          }
          v33 = (std::__shared_weak_count *)v30[3];
          if (v33)
          {
            p_shared_owners = (unint64_t *)&v33->__shared_owners_;
            do
              v35 = __ldaxr(p_shared_owners);
            while (__stlxr(v35 - 1, p_shared_owners));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          v7 = v30;
          v8 = 0x10B0C4002311774;
LABEL_50:
          MEMORY[0x19401CD90](v7, v8);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
}

uint64_t std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v3 - 32);
      while ((void *)v3 != v2);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  void *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  void *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  void *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;

  switch(*(_BYTE *)(a1 + 24))
  {
    case 2:
      v2 = *(unint64_t **)(a1 + 16);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(_QWORD *)(a1 + 16);
        if (v5)
        {
          if (*(char *)(v5 + 31) < 0)
            operator delete(*(void **)(v5 + 8));
          v6 = (_QWORD *)v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_50;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)(a1 + 16);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(_QWORD **)(a1 + 16);
        if (v11)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_50;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)(a1 + 16);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(_QWORD **)(a1 + 16);
        if (v16)
        {
          v17 = v16[1];
          if (!v17)
            goto LABEL_35;
          v18 = v16[2];
          v19 = (void *)v16[1];
          if (v18 != v17)
          {
            do
            {
              v18 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v16 + 3, v18);
            }
            while (v18 != v17);
            v19 = (void *)v16[1];
          }
          v16[2] = v17;
          goto LABEL_34;
        }
      }
      break;
    case 5:
      v20 = *(unint64_t **)(a1 + 16);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v16 = *(_QWORD **)(a1 + 16);
        if (v16)
        {
          v23 = v16[1];
          if (v23)
          {
            v24 = v16[2];
            v25 = (void *)v16[1];
            if (v24 != v23)
            {
              do
                v24 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v24 - 32);
              while (v24 != v23);
              v25 = (void *)v16[1];
            }
            v16[2] = v23;
            v19 = v25;
LABEL_34:
            operator delete(v19);
          }
LABEL_35:
          v6 = v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_50;
        }
      }
      break;
    case 9:
      v26 = *(unint64_t **)(a1 + 16);
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = *(_QWORD **)(a1 + 16);
        if (v29)
        {
          v30 = (void *)v29[7];
          if (v30)
          {
            v29[8] = v30;
            operator delete(v30);
          }
          v31 = (void *)v29[4];
          if (v31)
          {
            v29[5] = v31;
            operator delete(v31);
          }
          v32 = (std::__shared_weak_count *)v29[3];
          if (v32)
          {
            p_shared_owners = (unint64_t *)&v32->__shared_owners_;
            do
              v34 = __ldaxr(p_shared_owners);
            while (__stlxr(v34 - 1, p_shared_owners));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          v6 = v29;
          v7 = 0x10B0C4002311774;
LABEL_50:
          MEMORY[0x19401CD90](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  switch(*(_BYTE *)(a1 + 8))
  {
    case 2:
      v35 = *(unint64_t **)a1;
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
      {
        v38 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          if (*((char *)v38 + 31) < 0)
            operator delete((void *)v38[1]);
          v39 = v38;
          v40 = 0x1012C404EF22A49;
          goto LABEL_100;
        }
      }
      break;
    case 3:
      v41 = *(unint64_t **)a1;
      do
      {
        v42 = __ldaxr(v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, v41));
      if (!v43)
      {
        v44 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v45 = (void *)v44[1];
          if (v45)
          {
            v44[2] = (unint64_t)v45;
            operator delete(v45);
          }
          v39 = v44;
          v40 = 0x1080C409938AC02;
          goto LABEL_100;
        }
      }
      break;
    case 4:
      v46 = *(unint64_t **)a1;
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (!v48)
      {
        v49 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v50 = v49[1];
          if (!v50)
            goto LABEL_85;
          v51 = v49[2];
          v52 = (void *)v49[1];
          if (v51 != v50)
          {
            do
            {
              v51 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v49 + 3, v51);
            }
            while (v51 != v50);
            v52 = (void *)v49[1];
          }
          v49[2] = v50;
          goto LABEL_84;
        }
      }
      break;
    case 5:
      v53 = *(unint64_t **)a1;
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (!v55)
      {
        v49 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v56 = v49[1];
          if (v56)
          {
            v57 = v49[2];
            v58 = (void *)v49[1];
            if (v57 != v56)
            {
              do
                v57 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v57 - 32);
              while (v57 != v56);
              v58 = (void *)v49[1];
            }
            v49[2] = v56;
            v52 = v58;
LABEL_84:
            operator delete(v52);
          }
LABEL_85:
          v39 = v49;
          v40 = 0x1020C405E66F15BLL;
          goto LABEL_100;
        }
      }
      break;
    case 9:
      v59 = *(unint64_t **)a1;
      do
      {
        v60 = __ldaxr(v59);
        v61 = v60 - 1;
      }
      while (__stlxr(v61, v59));
      if (!v61)
      {
        v62 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v63 = (void *)v62[7];
          if (v63)
          {
            v62[8] = (unint64_t)v63;
            operator delete(v63);
          }
          v64 = (void *)v62[4];
          if (v64)
          {
            v62[5] = (unint64_t)v64;
            operator delete(v64);
          }
          v65 = (std::__shared_weak_count *)v62[3];
          if (v65)
          {
            v66 = (unint64_t *)&v65->__shared_owners_;
            do
              v67 = __ldaxr(v66);
            while (__stlxr(v67 - 1, v66));
            if (!v67)
            {
              ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
              std::__shared_weak_count::__release_weak(v65);
            }
          }
          v39 = v62;
          v40 = 0x10B0C4002311774;
LABEL_100:
          MEMORY[0x19401CD90](v39, v40);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  return a1;
}

_QWORD *std::__function::__value_func<nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_19116F5EC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void nitro::nitro_variable::~nitro_variable(nitro::nitro_variable *this)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;

  switch(*((_BYTE *)this + 24))
  {
    case 2:
      v2 = (unint64_t *)*((_QWORD *)this + 2);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *((_QWORD *)this + 2);
        if (v5)
        {
          if (*(char *)(v5 + 31) < 0)
            operator delete(*(void **)(v5 + 8));
          v6 = (_QWORD *)v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_50;
        }
      }
      break;
    case 3:
      v8 = (unint64_t *)*((_QWORD *)this + 2);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = (_QWORD *)*((_QWORD *)this + 2);
        if (v11)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_50;
        }
      }
      break;
    case 4:
      v13 = (unint64_t *)*((_QWORD *)this + 2);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = (_QWORD *)*((_QWORD *)this + 2);
        if (v16)
        {
          v17 = v16[1];
          if (!v17)
            goto LABEL_35;
          v18 = v16[2];
          v19 = (void *)v16[1];
          if (v18 != v17)
          {
            do
            {
              v18 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v16 + 3), v18);
            }
            while (v18 != v17);
            v19 = (void *)v16[1];
          }
          v16[2] = v17;
          goto LABEL_34;
        }
      }
      break;
    case 5:
      v20 = (unint64_t *)*((_QWORD *)this + 2);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v16 = (_QWORD *)*((_QWORD *)this + 2);
        if (v16)
        {
          v23 = v16[1];
          if (v23)
          {
            v24 = v16[2];
            v25 = (void *)v16[1];
            if (v24 != v23)
            {
              do
                v24 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v24 - 32);
              while (v24 != v23);
              v25 = (void *)v16[1];
            }
            v16[2] = v23;
            v19 = v25;
LABEL_34:
            operator delete(v19);
          }
LABEL_35:
          v6 = v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_50;
        }
      }
      break;
    case 9:
      v26 = (unint64_t *)*((_QWORD *)this + 2);
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = (_QWORD *)*((_QWORD *)this + 2);
        if (v29)
        {
          v30 = (void *)v29[7];
          if (v30)
          {
            v29[8] = v30;
            operator delete(v30);
          }
          v31 = (void *)v29[4];
          if (v31)
          {
            v29[5] = v31;
            operator delete(v31);
          }
          v32 = (std::__shared_weak_count *)v29[3];
          if (v32)
          {
            p_shared_owners = (unint64_t *)&v32->__shared_owners_;
            do
              v34 = __ldaxr(p_shared_owners);
            while (__stlxr(v34 - 1, p_shared_owners));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          v6 = v29;
          v7 = 0x10B0C4002311774;
LABEL_50:
          MEMORY[0x19401CD90](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 24) = 0;
  v35 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void file_logger::stream_flush(file_logger *this)
{
  _DWORD *v2;
  _DWORD *v3;
  int v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void **v9;
  std::string __p;
  void *v11[2];
  unsigned __int8 v12;
  char *v13;
  int v14;

  v2 = pthread_getspecific(*((_QWORD *)this + 74));
  if (v2)
  {
    v3 = v2;
    v4 = v2[74];
    std::ostream::flush();
    std::stringbuf::str();
    if ((v12 & 0x80u) == 0)
      v5 = v11;
    else
      v5 = (void **)v11[0];
    file_logger::_lograw(this, *((_DWORD *)this + 150), (const char *)v5);
    if (*((_DWORD *)this + v4 + 236))
    {
      pthread_mutex_lock((pthread_mutex_t *)((char *)this + 608));
      v6 = *((_QWORD *)this + 4 * v4 + 89);
      if (v6)
      {
        if ((char)v12 < 0)
        {
          v8 = *((_QWORD *)v3 + 36);
          v9 = (void **)v11[0];
          v7 = (unint64_t)v11[1];
        }
        else
        {
          v7 = v12;
          v8 = *((_QWORD *)v3 + 36);
          v9 = v11;
        }
        v14 = v4;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v9 + v8;
        v13 = (char *)(v7 - v8);
        (*(void (**)(uint64_t, int *, std::string *, char **))(*(_QWORD *)v6 + 48))(v6, &v14, &__p, &v13);
      }
      *((_QWORD *)v3 + 36) = 0;
      pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 608));
    }
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    std::string::operator=((std::string *)(v3 + 22), &__p);
    std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)(v3 + 6));
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (((char)v12 & 0x80000000) == 0)
        return;
LABEL_16:
      operator delete(v11[0]);
      return;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((char)v12 < 0)
      goto LABEL_16;
  }
}

void sub_19116F9D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
    v6 = *(_DWORD *)(a1 + 96);
    if ((v6 & 8) == 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v4 = v2;
  v5 = *(unsigned __int8 *)(a1 + 87);
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
LABEL_3:
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
LABEL_4:
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

void nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/interpreter/nitro_variable.hpp", 54);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"m_instance == nullptr", 21);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/interpreter/nitro_variable.hpp", "operator()", 67, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::nitro_variable::value(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19116FD9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::nitro_variable::value(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/interpreter/nitro_variable.hpp", "operator()", 67, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/interpreter/nitro_variable.hpp", "operator()", 57, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19116FF40(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19116FF54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19116FF4CLL);
}

nitro::ndarray_container *nitro::ndarray_container::ndarray_container(nitro::ndarray_container *this)
{
  void *__p;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  __p = 0;
  v4 = 0;
  v5 = 0;
  nitro::ndarray_container::ndarray_container<double,(void *)0>((uint64_t)this, (uint64_t)&v9, (char **)&v6, (char **)&__p, 0);
  if (__p)
  {
    v4 = __p;
    operator delete(__p);
  }
  if (v6)
  {
    v7 = v6;
    operator delete(v6);
  }
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  return this;
}

void sub_19116FFF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  nitro::ndarray_container::ndarray_container((uint64_t)&__p, (uint64_t)&a13, v13 - 40);
  _Unwind_Resume(a1);
}

uint64_t nitro::ndarray_container::ndarray_container<double,(void *)0>(uint64_t a1, uint64_t a2, char **a3, char **a4, uint64_t a5)
{
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  std::__shared_weak_count *v27;
  void *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v38;
  void *__dst;
  std::__shared_weak_count *v40;

  *(_DWORD *)a1 = 9;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v10 = (uint64_t *)(a1 + 24);
  v11 = (uint64_t *)(a1 + 48);
  *(_QWORD *)(a1 + 72) = 0;
  v12 = (_QWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  __dst = 0;
  v40 = 0;
  v13 = operator new[]();
  std::shared_ptr<double>::reset[abi:ne180100]<double,std::default_delete<double []>,void>(&__dst, v13);
  v14 = *(_QWORD *)(a2 + 8);
  if (v14 != *(_QWORD *)a2)
    memmove(__dst, *(const void **)a2, v14 - *(_QWORD *)a2);
  *(_DWORD *)a1 = 10;
  if (v10 != (uint64_t *)a3)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v10, *a3, a3[1], (a3[1] - *a3) >> 3);
  v15 = *(char **)(a1 + 24);
  v16 = *(char **)(a1 + 32);
  v17 = v16 - v15;
  if (v16 == v15)
  {
    v18 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3;
    v19 = v18 - a5;
    if (v18 != a5)
    {
      v20 = *(_QWORD *)(a1 + 40);
      if ((unint64_t)v16 >= v20)
      {
        v22 = v17 >> 3;
        v23 = v20 - (_QWORD)v15;
        if (v23 >> 2 <= (unint64_t)((v17 >> 3) + 1))
          v24 = v22 + 1;
        else
          v24 = v23 >> 2;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        if (v24 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v38 = v24;
        v25 = (char *)operator new(8 * v24);
        v26 = &v25[8 * v22];
        *(_QWORD *)(a1 + 24) = v26;
        *(_QWORD *)v26 = v19;
        v21 = v26 + 8;
        *(_QWORD *)(a1 + 32) = v21;
        *(_QWORD *)(a1 + 40) = &v25[8 * v38];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_QWORD *)v16 = v19;
        v21 = v16 + 8;
      }
      *(_QWORD *)(a1 + 32) = v21;
    }
  }
  if (v11 != (uint64_t *)a4)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v11, *a4, a4[1], (a4[1] - *a4) >> 3);
  *v12 = a5;
  v28 = __dst;
  v27 = v40;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v30 = __ldxr(p_shared_owners);
    while (__stxr(v30 + 1, p_shared_owners));
  }
  v31 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v28;
  *(_QWORD *)(a1 + 16) = v27;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  nitro::impl::fill_shape_and_stride(v10, v11, v12);
  v34 = v40;
  if (v40)
  {
    v35 = (unint64_t *)&v40->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  return a1;
}

void sub_191170278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void **v6;
  void *v8;
  void *v9;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  v8 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v3 + 56) = v8;
    operator delete(v8);
  }
  v9 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v3 + 32) = v9;
    operator delete(v9);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v4);
  _Unwind_Resume(a1);
}

void std::shared_ptr<double>::reset[abi:ne180100]<double,std::default_delete<double []>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E2DC3820;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  v5 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = v4;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_191170354(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (v1)
    MEMORY[0x19401CD78](v1, 0x1000C8000313F17);
  __cxa_rethrow();
}

void sub_19117037C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<double  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<double  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x19401CD78);
  return result;
}

uint64_t std::__shared_ptr_pointer<double  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191ACC390
    || ((v3 & 0x8000000191ACC390 & 0x8000000000000000) != 0) != __OFSUB__(v3, 0x8000000191ACC390)
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191ACC390 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::vector<nitro::SExp>::__push_back_slow_path<nitro::SExp const&>(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;
  char *v19;

  v3 = 0x8E38E38E38E38E39 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  if (0x1C71C71C71C71C72 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x1C71C71C71C71C72 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0x8E38E38E38E38E39 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x1C71C71C71C71C7)
    v6 = 0x38E38E38E38E38ELL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x38E38E38E38E38ELL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(72 * v6);
  }
  else
  {
    v7 = 0;
  }
  v18 = (uint64_t)&v7[72 * v3];
  v19 = &v7[72 * v6];
  nitro::SExp::SExp(v18, a2);
  v8 = v18;
  v10 = (char *)*a1;
  v9 = (char *)a1[1];
  if (v9 == *a1)
  {
    v16 = (char *)a1[1];
  }
  else
  {
    v11 = 0;
    do
    {
      v12 = v18 + v11;
      v13 = &v9[v11];
      *(_WORD *)(v12 - 72) = *(_WORD *)&v9[v11 - 72];
      v14 = *(_OWORD *)&v9[v11 - 64];
      *(_QWORD *)(v12 - 48) = *(_QWORD *)&v9[v11 - 48];
      *(_OWORD *)(v12 - 64) = v14;
      *((_QWORD *)v13 - 7) = 0;
      *((_QWORD *)v13 - 6) = 0;
      *((_QWORD *)v13 - 8) = 0;
      *(_QWORD *)(v12 - 40) = 0;
      *(_BYTE *)(v12 - 32) = 0;
      v15 = *(_QWORD *)&v9[v11 - 40];
      *(_BYTE *)(v12 - 32) = v9[v11 - 32];
      *(_QWORD *)(v12 - 40) = v15;
      *(_BYTE *)(v12 - 32) = v9[v11 - 32];
      *(v13 - 32) = 0;
      *(_QWORD *)(v12 - 24) = 0;
      *(_QWORD *)(v12 - 16) = 0;
      *(_QWORD *)(v12 - 8) = 0;
      *(_OWORD *)(v12 - 24) = *(_OWORD *)&v9[v11 - 24];
      *(_QWORD *)(v12 - 8) = *(_QWORD *)&v9[v11 - 8];
      *((_QWORD *)v13 - 3) = 0;
      *((_QWORD *)v13 - 2) = 0;
      *((_QWORD *)v13 - 1) = 0;
      v11 -= 72;
    }
    while (&v9[v11] != v10);
    v16 = (char *)*a1;
    v9 = (char *)a1[1];
    v8 = v18 + v11;
  }
  *a1 = (void *)v8;
  a1[1] = (void *)(v18 + 72);
  a1[2] = v19;
  if (v9 != v16)
  {
    do
      nitro::SExp::~SExp((nitro::SExp *)(v9 - 72));
    while (v9 != v16);
    v9 = v16;
  }
  if (v9)
    operator delete(v9);
  return v18 + 72;
}

void sub_19117060C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nitro::SExp>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<nitro::SExp>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 72;
    nitro::SExp::~SExp((nitro::SExp *)(i - 72));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *std::vector<nitro::SExp>::__push_back_slow_path<nitro::SExp>(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;

  v3 = 0x8E38E38E38E38E39 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  if (0x1C71C71C71C71C72 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x1C71C71C71C71C72 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0x8E38E38E38E38E39 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x1C71C71C71C71C7)
    v5 = 0x38E38E38E38E38ELL;
  else
    v5 = v4;
  if (v5 > 0x38E38E38E38E38ELL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v7 = 72 * v5;
  v8 = (char *)operator new(72 * v5);
  v9 = &v8[72 * v3];
  *(_WORD *)v9 = *(_WORD *)a2;
  v10 = &v8[v7];
  *(_OWORD *)(v9 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 24) = 0;
  *((_QWORD *)v9 + 3) = v11;
  *((_QWORD *)v9 + 4) = v12;
  v9[40] = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a2 + 40) = 0;
  *((_OWORD *)v9 + 3) = *(_OWORD *)(a2 + 48);
  *((_QWORD *)v9 + 8) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v13 = v9 + 72;
  v15 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
    if (!v14)
      return v13;
    goto LABEL_15;
  }
  v16 = 0;
  do
  {
    v17 = &v9[v16];
    v18 = &v14[v16];
    *((_WORD *)v17 - 36) = *(_WORD *)&v14[v16 - 72];
    v19 = *(_OWORD *)&v14[v16 - 64];
    *((_QWORD *)v17 - 6) = *(_QWORD *)&v14[v16 - 48];
    *((_OWORD *)v17 - 4) = v19;
    *((_QWORD *)v18 - 7) = 0;
    *((_QWORD *)v18 - 6) = 0;
    *((_QWORD *)v18 - 8) = 0;
    *((_QWORD *)v17 - 5) = *(_QWORD *)&v14[v16 - 40];
    *(v17 - 32) = v14[v16 - 32];
    *(v18 - 32) = 0;
    *(_OWORD *)(v17 - 24) = *(_OWORD *)&v14[v16 - 24];
    *((_QWORD *)v17 - 1) = *(_QWORD *)&v14[v16 - 8];
    *((_QWORD *)v18 - 3) = 0;
    *((_QWORD *)v18 - 2) = 0;
    *((_QWORD *)v18 - 1) = 0;
    v16 -= 72;
  }
  while (&v14[v16] != v15);
  v20 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = &v9[v16];
  a1[1] = v13;
  a1[2] = v10;
  if (v14 != v20)
  {
    do
      nitro::SExp::~SExp((nitro::SExp *)(v14 - 72));
    while (v14 != v20);
    v14 = v20;
  }
  if (v14)
LABEL_15:
    operator delete(v14);
  return v13;
}

void std::__shared_ptr_emplace<Espresso::network_ensemble>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9B48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::network_ensemble>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9B48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::network_ensemble>::__on_zero_shared(uint64_t a1)
{
  Espresso::network_ensemble::~network_ensemble((Espresso::network_ensemble *)(a1 + 24));
}

void std::__shared_ptr_emplace<nitro::nitro_class>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6150;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<nitro::nitro_class>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6150;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<nitro::nitro_class>::__on_zero_shared(uint64_t a1)
{
  nitro::nitro_class::~nitro_class((nitro::nitro_class *)(a1 + 24));
}

void nitro::nitro_class::~nitro_class(nitro::nitro_class *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void **v5;
  void **v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  char v10;

  v2 = (_QWORD *)*((_QWORD *)this + 12);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long const,nitro::nitro_function>,0>(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
    operator delete(v4);
  v5 = (void **)*((_QWORD *)this + 7);
  if (v5)
  {
    do
    {
      v6 = (void **)*v5;
      v7 = *((unsigned int *)v5 + 14);
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, void **))off_1E2DD1768[v7])(&v10, v5 + 3);
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v8 = (void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v8)
    operator delete(v8);
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
}

void std::__destroy_at[abi:ne180100]<std::pair<unsigned long const,nitro::nitro_function>,0>(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (_QWORD *)a1[7];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[5];
  a1[5] = 0;
  if (v4)
    operator delete(v4);
  v5 = (std::__shared_weak_count *)a1[4];
  if (!v5)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = (std::__shared_weak_count *)a1[2];
    if (!v8)
      return;
  }
  else
  {
LABEL_9:
    v8 = (std::__shared_weak_count *)a1[2];
    if (!v8)
      return;
  }
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSL_1EJS9_SA_SD_SF_SG_SH_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)(a2 + 8);
  if (v2)
  {
    *(_QWORD *)(a2 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSL_1EJS9_SA_SD_SF_SG_SH_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSL_1EJS9_SA_SD_SF_SG_SH_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSL_1EJS9_SA_SD_SF_SG_SH_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSL_1EJS9_SA_SD_SF_SG_SH_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

uint64_t *std::__tree<std::__value_type<std::string,nitro::model_metadata>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::model_metadata>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::model_metadata>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  size_t v9;
  const void *v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  char *v23;
  uint64_t *v24;
  __int128 *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t *v28;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    if (v8 >= 0)
      v10 = a2;
    else
      v10 = *a2;
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v6;
        v14 = (const void *)v6[4];
        v12 = v6 + 4;
        v13 = v14;
        v15 = *((char *)v12 + 23);
        if (v15 >= 0)
          v16 = *((unsigned __int8 *)v12 + 23);
        else
          v16 = v12[1];
        if (v15 >= 0)
          v17 = v12;
        else
          v17 = v13;
        if (v16 >= v9)
          v18 = v9;
        else
          v18 = v16;
        v19 = memcmp(v10, v17, v18);
        v20 = v9 < v16;
        if (v19)
          v20 = v19 < 0;
        if (!v20)
          break;
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_27;
      }
      v21 = memcmp(v17, v10, v18);
      v22 = v16 < v9;
      if (v21)
        v22 = v21 < 0;
      if (!v22)
        return (uint64_t *)v11;
      v6 = v11[1];
      if (!v6)
      {
        v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v11 = a1 + 1;
LABEL_27:
    v23 = (char *)operator new(0xA0uLL);
    v24 = (uint64_t *)v23;
    v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v23 + 32), *(const std::string::value_type **)v25, *((_QWORD *)v25 + 1));
    }
    else
    {
      v26 = *v25;
      *((_QWORD *)v23 + 6) = *((_QWORD *)v25 + 2);
      *((_OWORD *)v23 + 2) = v26;
    }
    nitro::model_metadata::model_metadata((nitro::model_metadata *)(v24 + 7));
    *v24 = 0;
    v24[1] = 0;
    v24[2] = (uint64_t)v11;
    *v7 = v24;
    v27 = (uint64_t *)**a1;
    v28 = v24;
    if (v27)
    {
      *a1 = v27;
      v28 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v24;
}

void sub_191170D54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  uint64_t **v15;
  uint64_t *v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  std::string *v24;
  __int128 *v25;
  __int128 v26;
  float v27;
  float v28;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  size_t prime;
  int8x8_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD v40[2];
  char v41;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v40, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v15 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      v16 = *v15;
      if (*v15)
      {
        v17 = v6[23];
        if (v17 >= 0)
          v18 = v6[23];
        else
          v18 = *((_QWORD *)v6 + 1);
        if (v17 < 0)
          v6 = *(_BYTE **)v6;
        do
        {
          v19 = v16[1];
          if (v19 == v11)
          {
            v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0)
              v21 = *((unsigned __int8 *)v16 + 39);
            else
              v21 = v16[3];
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp((const void *)v16[2], v6, v16[3]))
                  return v16;
              }
              else
              {
                if (!*((_BYTE *)v16 + 39))
                  return v16;
                v22 = 0;
                while (*((unsigned __int8 *)v16 + v22 + 16) == v6[v22])
                {
                  if (v20 == ++v22)
                    return v16;
                }
              }
            }
          }
          else
          {
            if (v14 <= 1)
            {
              v19 &= v12 - 1;
            }
            else if (v19 >= v12)
            {
              v19 %= v12;
            }
            if (v19 != v4)
              break;
          }
          v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
  v23 = operator new(0x38uLL);
  v40[0] = v23;
  v40[1] = a1 + 16;
  v41 = 0;
  *v23 = 0;
  v23[1] = v11;
  v24 = (std::string *)(v23 + 2);
  v25 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)v25, *((_QWORD *)v25 + 1));
  }
  else
  {
    v26 = *v25;
    v23[4] = *((_QWORD *)v25 + 2);
    *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v26;
  }
  v23[5] = 0;
  v23[6] = 0;
  v41 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v12 || (float)(v28 * (float)v12) < v27)
  {
    v29 = 1;
    if (v12 >= 3)
      v29 = (v12 & (v12 - 1)) != 0;
    v30 = v29 | (2 * v12);
    v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31)
      prime = v31;
    else
      prime = v30;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v33 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v33)
      goto LABEL_52;
    if (prime < *(_QWORD *)&v33)
    {
      v34 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v33 < 3uLL || (v35 = (uint8x8_t)vcnt_s8(v33), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        v34 = std::__next_prime(v34);
      }
      else
      {
        v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2)
          v34 = v36;
      }
      if (prime <= v34)
        prime = v34;
      if (prime < *(_QWORD *)&v33)
LABEL_52:
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v37)
  {
    *(_QWORD *)v40[0] = *v37;
    *v37 = v40[0];
  }
  else
  {
    *(_QWORD *)v40[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v40[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v40[0])
    {
      v38 = *(_QWORD *)(*(_QWORD *)v40[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v38 >= v12)
          v38 %= v12;
      }
      else
      {
        v38 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = v40[0];
    }
  }
  v16 = (uint64_t *)v40[0];
  ++*(_QWORD *)(a1 + 24);
  return v16;
}

void sub_191171118(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v13 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v13 >= a2)
              v13 %= a2;
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
              goto LABEL_19;
            }
            *v7 = *v11;
            v12 = 8 * v13;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + v12);
            **(_QWORD **)(*(_QWORD *)a1 + v12) = v11;
            v11 = v7;
          }
          v13 = v8;
LABEL_19:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v13;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void nitro::archive_detail::deserialize_hard_or_soft_fail<nitro::iarchive,nitro::flexible_type>::exec(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  void *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  void *v34;
  void *v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  _QWORD *v39;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 16);
    v5 = *(unsigned __int8 *)(v3 + v4);
    *(_QWORD *)(a1 + 16) = v4 + 1;
  }
  else
  {
    std::istream::read();
    v5 = 0;
  }
  switch(*(_BYTE *)(a2 + 8))
  {
    case 2:
      v6 = *(unint64_t **)a2;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (v8)
        goto LABEL_55;
      v9 = *(unint64_t **)a2;
      if (!*(_QWORD *)a2)
        goto LABEL_54;
      if (*((char *)v9 + 31) < 0)
        operator delete((void *)v9[1]);
      v10 = v9;
      v11 = 0x1012C404EF22A49;
      goto LABEL_53;
    case 3:
      v19 = *(unint64_t **)a2;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (v21)
        goto LABEL_55;
      v22 = *(unint64_t **)a2;
      if (!*(_QWORD *)a2)
        goto LABEL_54;
      v23 = (void *)v22[1];
      if (v23)
      {
        v22[2] = (unint64_t)v23;
        operator delete(v23);
      }
      v10 = v22;
      v11 = 0x1080C409938AC02;
      goto LABEL_53;
    case 4:
      v12 = *(unint64_t **)a2;
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (v14)
        goto LABEL_55;
      v15 = *(unint64_t **)a2;
      if (!*(_QWORD *)a2)
        goto LABEL_54;
      v16 = v15[1];
      if (!v16)
        goto LABEL_38;
      v17 = v15[2];
      v18 = (void *)v15[1];
      if (v17 != v16)
      {
        do
        {
          v17 -= 16;
          std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v15 + 3), v17);
        }
        while (v17 != v16);
        v18 = (void *)v15[1];
      }
      v15[2] = v16;
      break;
    case 5:
      v24 = *(unint64_t **)a2;
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (v26)
        goto LABEL_55;
      v15 = *(unint64_t **)a2;
      if (!*(_QWORD *)a2)
        goto LABEL_54;
      v27 = v15[1];
      if (!v27)
        goto LABEL_38;
      v28 = v15[2];
      v29 = (void *)v15[1];
      if (v28 != v27)
      {
        do
          v28 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v28 - 32);
        while (v28 != v27);
        v29 = (void *)v15[1];
      }
      v15[2] = v27;
      v18 = v29;
      break;
    case 9:
      v30 = *(unint64_t **)a2;
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (v32)
        goto LABEL_55;
      v33 = *(unint64_t **)a2;
      if (!*(_QWORD *)a2)
        goto LABEL_54;
      v34 = (void *)v33[7];
      if (v34)
      {
        v33[8] = (unint64_t)v34;
        operator delete(v34);
      }
      v35 = (void *)v33[4];
      if (v35)
      {
        v33[5] = (unint64_t)v35;
        operator delete(v35);
      }
      v36 = (std::__shared_weak_count *)v33[3];
      if (v36)
      {
        p_shared_owners = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldaxr(p_shared_owners);
        while (__stlxr(v38 - 1, p_shared_owners));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      v10 = v33;
      v11 = 0x10B0C4002311774;
      goto LABEL_53;
    default:
      goto LABEL_55;
  }
  operator delete(v18);
LABEL_38:
  v10 = v15;
  v11 = 0x1020C405E66F15BLL;
LABEL_53:
  MEMORY[0x19401CD90](v10, v11);
LABEL_54:
  *(_QWORD *)a2 = 0;
LABEL_55:
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = v5;
  switch(v5)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      v39 = (_QWORD *)operator new();
      *v39 = 0;
      v39[1] = 0;
      v39[2] = 0;
      v39[3] = 0;
      goto LABEL_57;
    case 9:
      v39 = (_QWORD *)operator new();
      *v39 = 0;
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v39 + 1));
LABEL_57:
      *(_QWORD *)a2 = v39;
      *v39 = 1;
      v5 = *(unsigned __int8 *)(a2 + 8);
      break;
    default:
      break;
  }
  __asm { BR              X10 }
}

void *sub_19117160C()
{
  uint64_t v0;
  uint64_t v1;

  return nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,double,true>::exec(v0, (void **)(v1 + 8));
}

void sub_19117161C()
{
  uint64_t v0;
  uint64_t v1;

  nitro::ndarray_container::load(v1 + 8, v0);
}

void sub_191171730(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x1012C404EF22A49);
  _Unwind_Resume(a1);
}

void *nitro::archive_detail::deserialize_impl<nitro::iarchive,std::string,false,void>::exec(uint64_t a1, std::string *this)
{
  uint64_t v4;
  uint64_t v5;
  std::string::size_type v6;
  std::string *v7;
  uint64_t v8;
  void *result;
  size_t __n;

  __n = 0;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(_QWORD *)(v4 + v5);
    __n = v6;
    *(_QWORD *)(a1 + 16) = v5 + 8;
  }
  else
  {
    std::istream::read();
    v6 = 0;
  }
  std::string::resize(this, v6, 0);
  if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = this;
  else
    v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    return (void *)std::istream::read();
  result = memcpy(v7, (const void *)(v8 + *(_QWORD *)(a1 + 16)), __n);
  *(_QWORD *)(a1 + 16) += __n;
  return result;
}

void *nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,double,true>::exec(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t v10;
  void *result;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(_QWORD *)(v4 + v5);
    *(_QWORD *)(a1 + 16) = v5 + 8;
  }
  else
  {
    std::istream::read();
    v6 = 0;
  }
  v7 = *a2;
  a2[1] = *a2;
  if (v6)
  {
    std::vector<double>::__append((uint64_t)a2, v6);
    v8 = *a2;
    v7 = a2[1];
  }
  else
  {
    v8 = v7;
  }
  v9 = v7 - v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (!v10)
    return (void *)std::istream::read();
  result = memcpy(v8, (const void *)(v10 + *(_QWORD *)(a1 + 16)), v9);
  *(_QWORD *)(a1 + 16) += v9;
  return result;
}

void std::vector<double>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

void nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,nitro::flexible_type,false>::exec(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t i;
  unint64_t v12;

  v12 = 0;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 16);
    v12 = *(_QWORD *)(v4 + v5);
    *(_QWORD *)(a1 + 16) = v5 + 8;
  }
  else
  {
    std::istream::read();
  }
  v6 = *(char **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (v7 != *(_QWORD *)a2)
  {
    do
    {
      v7 -= 16;
      std::allocator<nitro::flexible_type>::destroy[abi:ne180100](a2 + 16, v7);
    }
    while ((char *)v7 != v6);
    v7 = *(_QWORD *)a2;
  }
  *(_QWORD *)(a2 + 8) = v6;
  v8 = (uint64_t)&v6[-v7] >> 4;
  if (v12 <= v8)
  {
    if (v12 < v8)
    {
      v9 = (char *)(v7 + 16 * v12);
      while (v6 != v9)
      {
        v6 -= 16;
        std::allocator<nitro::flexible_type>::destroy[abi:ne180100](a2 + 16, (uint64_t)v6);
      }
      *(_QWORD *)(a2 + 8) = v9;
    }
  }
  else
  {
    std::vector<nitro::flexible_type>::__append((char **)a2, v12 - v8);
  }
  if (v12)
  {
    v10 = 0;
    for (i = 0; i < v12; ++i)
    {
      nitro::archive_detail::deserialize_hard_or_soft_fail<nitro::iarchive,nitro::flexible_type>::exec(a1, *(_QWORD *)a2 + v10);
      v10 += 16;
    }
  }
}

void std::vector<nitro::flexible_type>::__append(char **a1, unint64_t a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;

  v5 = (uint64_t)(a1 + 2);
  v4 = a1[2];
  v6 = a1[1];
  if (a2 <= (v4 - v6) >> 4)
  {
    if (a2)
    {
      v12 = &v6[16 * a2];
      do
      {
        *(_QWORD *)v6 = 0;
        v6[8] = 0;
        v6 += 16;
      }
      while (v6 != v12);
      v6 = v12;
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (v6 - *a1) >> 4;
    v8 = v7 + a2;
    if ((v7 + a2) >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v9 = v4 - *a1;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[16 * v7];
    v14 = &v11[16 * v10];
    v15 = &v13[16 * a2];
    v16 = v13;
    do
    {
      *(_QWORD *)v16 = 0;
      v16[8] = 0;
      v16 += 16;
    }
    while (v16 != v15);
    v17 = *a1;
    v18 = a1[1];
    if (v18 == *a1)
    {
      *a1 = v13;
      a1[1] = v15;
      a1[2] = v14;
      if (v18)
LABEL_25:
        operator delete(v18);
    }
    else
    {
      do
      {
        *((_QWORD *)v13 - 2) = 0;
        v13 -= 16;
        v13[8] = 0;
        v19 = *((_QWORD *)v18 - 2);
        v18 -= 16;
        v13[8] = v18[8];
        *(_QWORD *)v13 = v19;
        v13[8] = v18[8];
        v18[8] = 0;
      }
      while (v18 != v17);
      v20 = *a1;
      v18 = a1[1];
      *a1 = v13;
      a1[1] = v15;
      a1[2] = v14;
      if (v18 != v20)
      {
        do
        {
          v18 -= 16;
          std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v5, (uint64_t)v18);
        }
        while (v18 != v20);
        v18 = v20;
      }
      if (v18)
        goto LABEL_25;
    }
  }
}

void nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,std::pair<nitro::flexible_type,nitro::flexible_type>,false>::exec(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  unint64_t v13;

  v13 = 0;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 16);
    v13 = *(_QWORD *)(v4 + v5);
    *(_QWORD *)(a1 + 16) = v5 + 8;
  }
  else
  {
    std::istream::read();
  }
  v7 = (char *)*a2;
  v6 = a2[1];
  if (v6 != *a2)
  {
    do
      v6 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v6 - 32);
    while ((char *)v6 != v7);
    v6 = *a2;
  }
  a2[1] = (uint64_t)v7;
  v8 = (uint64_t)&v7[-v6] >> 5;
  if (v13 <= v8)
  {
    if (v13 < v8)
    {
      v9 = (char *)(v6 + 32 * v13);
      while (v7 != v9)
      {
        v7 -= 32;
        std::pair<nitro::flexible_type,nitro::flexible_type>::~pair((uint64_t)v7);
      }
      a2[1] = (uint64_t)v9;
    }
  }
  else
  {
    std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__append((void **)a2, v13 - v8);
  }
  if (v13)
  {
    v10 = 0;
    for (i = 0; i < v13; ++i)
    {
      v12 = *a2 + v10;
      nitro::archive_detail::deserialize_hard_or_soft_fail<nitro::iarchive,nitro::flexible_type>::exec(a1, v12);
      nitro::archive_detail::deserialize_hard_or_soft_fail<nitro::iarchive,nitro::flexible_type>::exec(a1, v12 + 16);
      v10 += 32;
    }
  }
}

void std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__append(void **a1, unint64_t a2)
{
  char *v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;

  v4 = (char *)a1[1];
  v5 = a1[2];
  if (a2 <= (v5 - v4) >> 5)
  {
    if (a2)
    {
      v11 = &v4[32 * a2];
      do
      {
        *(_QWORD *)v4 = 0;
        v4[8] = 0;
        *((_QWORD *)v4 + 2) = 0;
        v4[24] = 0;
        v4 += 32;
      }
      while (v4 != v11);
      v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    v6 = (v4 - (_BYTE *)*a1) >> 5;
    v7 = v6 + a2;
    if ((v6 + a2) >> 59)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v8 = v5 - (_BYTE *)*a1;
    if (v8 >> 4 > v7)
      v7 = v8 >> 4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
      v9 = 0x7FFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 >> 59)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v10 = (char *)operator new(32 * v9);
    }
    else
    {
      v10 = 0;
    }
    v12 = &v10[32 * v6];
    v13 = &v10[32 * v9];
    v14 = &v12[32 * a2];
    v15 = v12;
    do
    {
      *(_QWORD *)v15 = 0;
      v15[8] = 0;
      *((_QWORD *)v15 + 2) = 0;
      v15[24] = 0;
      v15 += 32;
    }
    while (v15 != v14);
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 == *a1)
    {
      *a1 = v12;
      a1[1] = v14;
      a1[2] = v13;
      if (v16)
LABEL_26:
        operator delete(v16);
    }
    else
    {
      v18 = 0;
      do
      {
        v19 = &v12[v18];
        v20 = &v16[v18];
        *((_QWORD *)v19 - 4) = 0;
        *(v19 - 24) = 0;
        v21 = *(_QWORD *)&v16[v18 - 32];
        *(v19 - 24) = v16[v18 - 24];
        *((_QWORD *)v19 - 4) = v21;
        *(v19 - 24) = v16[v18 - 24];
        *(v20 - 24) = 0;
        *((_QWORD *)v19 - 2) = 0;
        *(v19 - 8) = 0;
        v22 = *(_QWORD *)&v16[v18 - 16];
        *(v19 - 8) = v16[v18 - 8];
        *((_QWORD *)v19 - 2) = v22;
        *(v19 - 8) = v16[v18 - 8];
        *(v20 - 8) = 0;
        v18 -= 32;
      }
      while (&v16[v18] != v17);
      v23 = (char *)*a1;
      v16 = (char *)a1[1];
      *a1 = &v12[v18];
      a1[1] = v14;
      a1[2] = v13;
      if (v16 != v23)
      {
        do
          v16 = (char *)std::pair<nitro::flexible_type,nitro::flexible_type>::~pair((uint64_t)(v16 - 32));
        while (v16 != v23);
        v16 = v23;
      }
      if (v16)
        goto LABEL_26;
    }
  }
}

void std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(a1, *((_QWORD *)a2 + 1));
    v4 = *((_QWORD *)a2 + 7);
    if (v4)
    {
      v5 = *((_QWORD *)a2 + 8);
      v6 = (void *)*((_QWORD *)a2 + 7);
      if (v5 != v4)
      {
        do
        {
          if (*(char *)(v5 - 1) < 0)
            operator delete(*(void **)(v5 - 24));
          v5 -= 24;
        }
        while (v5 != v4);
        v6 = (void *)*((_QWORD *)a2 + 7);
      }
      *((_QWORD *)a2 + 8) = v4;
      operator delete(v6);
    }
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<std::string,nitro::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::flexible_type>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,nitro::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::flexible_type>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,nitro::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::flexible_type>>>::destroy(a1, a2[1]);
    std::pair<std::string const,nitro::flexible_type>::~pair((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t std::pair<std::string const,nitro::flexible_type>::~pair(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;

  switch(*(_BYTE *)(a1 + 32))
  {
    case 2:
      v2 = *(unint64_t **)(a1 + 24);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(_QWORD *)(a1 + 24);
        if (v5)
        {
          if (*(char *)(v5 + 31) < 0)
            operator delete(*(void **)(v5 + 8));
          v6 = (_QWORD *)v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_50;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)(a1 + 24);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(_QWORD **)(a1 + 24);
        if (v11)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_50;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)(a1 + 24);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(_QWORD **)(a1 + 24);
        if (v16)
        {
          v17 = v16[1];
          if (!v17)
            goto LABEL_35;
          v18 = v16[2];
          v19 = (void *)v16[1];
          if (v18 != v17)
          {
            do
            {
              v18 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v16 + 3), v18);
            }
            while (v18 != v17);
            v19 = (void *)v16[1];
          }
          v16[2] = v17;
          goto LABEL_34;
        }
      }
      break;
    case 5:
      v20 = *(unint64_t **)(a1 + 24);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v16 = *(_QWORD **)(a1 + 24);
        if (v16)
        {
          v23 = v16[1];
          if (v23)
          {
            v24 = v16[2];
            v25 = (void *)v16[1];
            if (v24 != v23)
            {
              do
                v24 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v24 - 32);
              while (v24 != v23);
              v25 = (void *)v16[1];
            }
            v16[2] = v23;
            v19 = v25;
LABEL_34:
            operator delete(v19);
          }
LABEL_35:
          v6 = v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_50;
        }
      }
      break;
    case 9:
      v26 = *(unint64_t **)(a1 + 24);
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = *(_QWORD **)(a1 + 24);
        if (v29)
        {
          v30 = (void *)v29[7];
          if (v30)
          {
            v29[8] = v30;
            operator delete(v30);
          }
          v31 = (void *)v29[4];
          if (v31)
          {
            v29[5] = v31;
            operator delete(v31);
          }
          v32 = (std::__shared_weak_count *)v29[3];
          if (v32)
          {
            p_shared_owners = (unint64_t *)&v32->__shared_owners_;
            do
              v34 = __ldaxr(p_shared_owners);
            while (__stlxr(v34 - 1, p_shared_owners));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          v6 = v29;
          v7 = 0x10B0C4002311774;
LABEL_50:
          MEMORY[0x19401CD90](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void std::__function::__func<nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2,std::allocator<nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2,std::allocator<nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DAF038;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2,std::allocator<nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DAF038;
  a2[1] = v2;
  return result;
}

void std::__function::__func<nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2,std::allocator<nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::operator()(uint64_t a1, _QWORD **a2)
{
  nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()(a1 + 8, a2);
}

uint64_t std::__function::__func<nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2,std::allocator<nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro13nitro_program4loadERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_1"
                     "3PrimitiveTypeEE3$_2"
    || ((v3 & (unint64_t)"ZN5nitro13nitro_program4loadERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocato"
                                "rIcEEEENS_13PrimitiveTypeEE3$_2" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro13nitro_program4loadERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_13PrimitiveTypeEE3$_2")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro13nitro_program4loadERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_13PrimitiveTypeEE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2,std::allocator<nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::target_type()
{
}

void nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()(uint64_t a1, _QWORD **a2)
{
  if (!**a2)
    __asm { BR              X11 }
  nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator() const(std::vector<nitro::nitro_variable> &)::{lambda(void)#1}::operator()();
}

void sub_191174830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50)
{
  if (a48 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator() const(std::vector<nitro::nitro_variable> &)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", 106);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"params[0].is_value()", 20);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", "operator()", 137, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", "operator()", 137, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1911753FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_191175464(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

uint64_t nitro::ndarray_container::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v4;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if (a1 == a2)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  if (a1 != a2)
  {
LABEL_9:
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((_QWORD *)(a1 + 24), *(char **)(a2 + 24), *(char **)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((_QWORD *)(a1 + 48), *(char **)(a2 + 48), *(char **)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3);
  }
LABEL_10:
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

{
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v4;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = *(void **)(a1 + 24);
  if (v8)
  {
    *(_QWORD *)(a1 + 32) = v8;
    operator delete(v8);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v9 = *(void **)(a1 + 48);
  if (v9)
  {
    *(_QWORD *)(a1 + 56) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 72) = v10;
  return a1;
}

_QWORD *nitro::ndarray<float>::~ndarray(_QWORD *a1)
{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

float nitro::ndarray<float>::canonicalize@<S0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  int64x2_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64x2_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64x2_t *v36;
  uint64x2_t v37;
  unint64_t v38;
  int64x2_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  size_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BOOL4 v65;
  unint64_t v66;
  unint64_t v67;
  int64x2_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  __int32 *v76;
  __int32 *v77;
  int64x2_t *v78;
  int64x2_t *v79;
  unint64_t v80;
  int64x2_t v81;
  uint64_t v82;
  __int32 *v83;
  __int32 *v84;
  uint64_t v85;
  void *__p;
  void *v88;
  uint64_t v89;
  void *v90;
  void *v91;
  uint64_t v92;
  void *v93;
  void *v94;
  uint64_t v95;

  if (nitro::ndarray<float>::is_canonical(a1))
  {
    nitro::ndarray<float>::ndarray(a2, a1);
    return *(float *)v4.i32;
  }
  if (a1[3] - a1[2] != a1[6] - a1[5])
    nitro::ndarray<float>::canonicalize(void)const::{lambda(void)#1}::operator()();
  v93 = 0;
  v94 = 0;
  v95 = 0;
  v90 = 0;
  v91 = 0;
  v92 = 0;
  __p = 0;
  v88 = 0;
  v89 = 0;
  nitro::ndarray<float>::ndarray((uint64_t)a2, (uint64_t)&v93, (char **)&v90, (char **)&__p, 0);
  if (__p)
  {
    v88 = __p;
    operator delete(__p);
  }
  if (v90)
  {
    v91 = v90;
    operator delete(v90);
  }
  if (v93)
  {
    v94 = v93;
    operator delete(v93);
  }
  v5 = (char *)a1[2];
  v6 = (char *)a1[3];
  v7 = v6 - v5;
  if (v6 == v5 || !*a1)
  {
    v8 = 0;
    goto LABEL_19;
  }
  if ((unint64_t)(v7 - 8) < 8)
  {
    v8 = 1;
    v9 = (char *)a1[2];
    do
    {
LABEL_18:
      v15 = *(_QWORD *)v9;
      v9 += 8;
      v8 *= v15;
    }
    while (v9 != v6);
    goto LABEL_19;
  }
  v10 = ((unint64_t)(v7 - 8) >> 3) + 1;
  v9 = &v5[8 * (v10 & 0x3FFFFFFFFFFFFFFELL)];
  v11 = v5 + 8;
  v12 = 1;
  v13 = v10 & 0x3FFFFFFFFFFFFFFELL;
  v14 = 1;
  do
  {
    v12 *= *(v11 - 1);
    v14 *= *v11;
    v11 += 2;
    v13 -= 2;
  }
  while (v13);
  v8 = v14 * v12;
  if (v10 != (v10 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_18;
LABEL_19:
  a2[8] = 0;
  if (a2 != a1)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(a2 + 2, v5, v6, v7 >> 3);
  if (v8)
  {
    v16 = operator new[]();
    std::shared_ptr<float>::reset[abi:ne180100]<float,std::default_delete<float []>,void>(a2, v16);
  }
  v17 = (a1[3] - a1[2]) >> 3;
  v18 = a2[5];
  v19 = a2 + 5;
  v20 = (a2[6] - v18) >> 3;
  if (v17 <= v20)
  {
    if (v17 < v20)
      a2[6] = v18 + 8 * v17;
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)(a2 + 5), v17 - v20);
  }
  v21 = a2[2];
  v22 = a2[3];
  if (v8)
    v23 = v22 == v21;
  else
    v23 = 1;
  if (!v23)
  {
    v24 = v22 - v21;
    v25 = (v22 - v21) >> 3;
    v26 = v24 >> 3;
    v27 = (v24 << 29) - 0x100000000;
    v28 = *v19;
    *(_QWORD *)(*v19 + (v27 >> 29)) = 1;
    if ((int)v26 >= 2)
    {
      v29 = 8 * (v25 - 2);
      v30 = *(_QWORD *)(v29 + v28 + 8);
      v31 = v21 + 8;
      do
      {
        v30 *= *(_QWORD *)(v31 + v29);
        *(_QWORD *)(v28 + v29) = v30;
        v29 -= 8;
      }
      while (v29 != -8);
    }
    v32 = (uint64x2_t *)a1[2];
    if (v25 <= 1)
      v33 = 1;
    else
      v33 = v25;
    if (v33 >= 4)
    {
      v34 = v33 & 0xFFFFFFFFFFFFFFFCLL;
      v36 = v32 + 1;
      v4 = 0uLL;
      v37 = (uint64x2_t)vdupq_n_s64(1uLL);
      v38 = v33 & 0xFFFFFFFFFFFFFFFCLL;
      v39 = 0uLL;
      do
      {
        v4 = vsubq_s64(v4, (int64x2_t)vcgtq_u64(v36[-1], v37));
        v39 = vsubq_s64(v39, (int64x2_t)vcgtq_u64(*v36, v37));
        v36 += 2;
        v38 -= 4;
      }
      while (v38);
      v4.i64[0] = vaddvq_s64(vaddq_s64(v39, v4));
      v35 = v4.i64[0];
      if (v33 == v34)
      {
LABEL_46:
        if (v35 != 1)
        {
          if (v35 != 2)
          {
            v4.i32[0] = nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>::canonicalize(void)::{lambda(float &,float const&)#1}>(a2, a1).n128_u32[0];
            return *(float *)v4.i32;
          }
          v43 = 0;
          v44 = 0;
          v45 = 0;
          v46 = 0;
          while (1)
          {
            v47 = a1[2];
            v48 = *(_QWORD *)(v47 + 8 * v43);
            if (v48 >= 2)
            {
              v49 = a1[5];
              v50 = *(_QWORD *)(v49 + 8 * v43);
              if (v45)
              {
                if (v50 == 1)
                {
                  if (v46)
                  {
                    v53 = 0;
                    v54 = 0;
                    v55 = 4 * v48;
                    v56 = 4 * v44;
                    v57 = 4 * v45;
                    do
                    {
                      memmove((void *)(*a2 + v54), (const void *)(*a1 + 4 * a1[8] + v53), v55);
                      v54 += v56;
                      v53 += v57;
                      --v46;
                    }
                    while (v46);
                  }
                  return *(float *)v4.i32;
                }
LABEL_67:
                if (!v46)
                  return *(float *)v4.i32;
                v58 = 0;
                v59 = a1[8];
                v60 = *a2;
                v61 = 4 * v44;
                v62 = 4 * v59;
                v63 = 4 * v45;
                v65 = v48 > 7 && v50 == 1;
                v66 = v48 & 0xFFFFFFFFFFFFFFF8;
                v67 = (v48 & 0xFFFFFFFFFFFFFFF8) * v50;
                v68 = (int64x2_t *)(v60 + 16);
                v69 = v62 + 16;
                v70 = 4 * v50;
                while (2)
                {
                  if (v48)
                  {
                    v71 = v58 * v44;
                    v72 = *a1;
                    v73 = v59 + v58 * v45;
                    if (!v65 || (unint64_t)(v60 + v61 * v58 - (v62 + v63 * v58 + v72)) < 0x20)
                    {
                      v74 = 0;
                      goto LABEL_80;
                    }
                    v71 += v66;
                    v73 += v67;
                    v78 = (int64x2_t *)(v72 + v69);
                    v79 = v68;
                    v80 = v48 & 0xFFFFFFFFFFFFFFF8;
                    do
                    {
                      v4 = v78[-1];
                      v81 = *v78;
                      v79[-1] = v4;
                      *v79 = v81;
                      v79 += 2;
                      v78 += 2;
                      v80 -= 8;
                    }
                    while (v80);
                    v74 = v48 & 0xFFFFFFFFFFFFFFF8;
                    if (v48 != v66)
                    {
LABEL_80:
                      v75 = v48 - v74;
                      v76 = (__int32 *)(v60 + 4 * v71);
                      v77 = (__int32 *)(v72 + 4 * v73);
                      do
                      {
                        v4.i32[0] = *v77;
                        *v76++ = *v77;
                        v77 = (__int32 *)((char *)v77 + v70);
                        --v75;
                      }
                      while (v75);
                    }
                  }
                  ++v58;
                  v68 = (int64x2_t *)((char *)v68 + v61);
                  v69 += v63;
                  if (v58 == v46)
                    return *(float *)v4.i32;
                  continue;
                }
              }
              v44 = *(_QWORD *)(v28 + 8 * v43);
              v46 = *(_QWORD *)(v47 + 8 * v43);
              v45 = *(_QWORD *)(v49 + 8 * v43);
            }
            if (v33 == ++v43)
            {
              v50 = 0;
              v48 = 0;
              goto LABEL_67;
            }
          }
        }
        v51 = 0;
        while (*(_QWORD *)(a1[2] + 8 * v51) != v8)
        {
          if (v33 == ++v51)
          {
            v52 = 0;
LABEL_61:
            v82 = v8;
            v83 = (__int32 *)*a2;
            v84 = (__int32 *)(*a1 + 4 * a1[8]);
            v85 = 4 * v52;
            do
            {
              v4.i32[0] = *v84;
              *v83++ = *v84;
              v84 = (__int32 *)((char *)v84 + v85);
              --v82;
            }
            while (v82);
            return *(float *)v4.i32;
          }
        }
        v52 = *(_QWORD *)(a1[5] + 8 * v51);
        if (v52 == 1)
        {
          memmove((void *)*a2, (const void *)(*a1 + 4 * a1[8]), 4 * v8);
          return *(float *)v4.i32;
        }
        goto LABEL_61;
      }
    }
    else
    {
      v34 = 0;
      v35 = 0;
    }
    v40 = v33 - v34;
    v41 = (unint64_t *)v32 + v34;
    do
    {
      v42 = *v41++;
      if (v42 > 1)
        ++v35;
      --v40;
    }
    while (v40);
    goto LABEL_46;
  }
  return *(float *)v4.i32;
}

void sub_191175B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  _QWORD *v16;

  nitro::ndarray<float>::~ndarray(v16);
  _Unwind_Resume(a1);
}

void nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator() const(std::vector<nitro::nitro_variable> &)::{lambda(void)#2}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", 106);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"espresso_buffer_pack_tensor_shape(&buffer, rank, shape.data()) == ESPRESSO_STATUS_SUCCESS", 89);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", "operator()", 165, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", "operator()", 165, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_191175EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_191175F20(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void std::shared_ptr<float>::reset[abi:ne180100]<float,std::default_delete<float []>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E2DC3890;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  v5 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = v4;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_191175FE4(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (v1)
    MEMORY[0x19401CD78](v1, 0x1000C8052888210);
  __cxa_rethrow();
}

void sub_19117600C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v2 - 24)) = a2[8];
  v3 = a2[9];
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v3;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  return std::iostream::~basic_iostream();
}

uint64_t nitro::ndarray<float>::ndarray(uint64_t a1, uint64_t a2, char **a3, char **a4, uint64_t a5)
{
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  std::__shared_weak_count *v27;
  void *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v57;
  void *__dst;
  std::__shared_weak_count *v59;

  *(_OWORD *)(a1 + 16) = 0u;
  v10 = (uint64_t *)(a1 + 16);
  v11 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  v12 = (_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  __dst = 0;
  v59 = 0;
  v13 = operator new[]();
  std::shared_ptr<float>::reset[abi:ne180100]<float,std::default_delete<float []>,void>(&__dst, v13);
  v14 = *(_QWORD *)(a2 + 8);
  if (v14 != *(_QWORD *)a2)
    memmove(__dst, *(const void **)a2, v14 - *(_QWORD *)a2);
  if (v10 != (uint64_t *)a3)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v10, *a3, a3[1], (a3[1] - *a3) >> 3);
  v15 = *(char **)(a1 + 16);
  v16 = *(char **)(a1 + 24);
  v17 = v16 - v15;
  if (v16 == v15)
  {
    v18 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2;
    v19 = v18 - a5;
    if (v18 != a5)
    {
      v20 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)v16 >= v20)
      {
        v22 = v17 >> 3;
        v23 = v20 - (_QWORD)v15;
        if (v23 >> 2 <= (unint64_t)((v17 >> 3) + 1))
          v24 = v22 + 1;
        else
          v24 = v23 >> 2;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        if (v24 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v57 = v24;
        v25 = (char *)operator new(8 * v24);
        v26 = &v25[8 * v22];
        *(_QWORD *)(a1 + 16) = v26;
        *(_QWORD *)v26 = v19;
        v21 = v26 + 8;
        *(_QWORD *)(a1 + 24) = v21;
        *(_QWORD *)(a1 + 32) = &v25[8 * v57];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_QWORD *)v16 = v19;
        v21 = v16 + 8;
      }
      *(_QWORD *)(a1 + 24) = v21;
    }
  }
  if (v11 != (uint64_t *)a4)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v11, *a4, a4[1], (a4[1] - *a4) >> 3);
  *v12 = a5;
  v28 = __dst;
  v27 = v59;
  if (v59)
  {
    p_shared_owners = (unint64_t *)&v59->__shared_owners_;
    do
      v30 = __ldxr(p_shared_owners);
    while (__stxr(v30 + 1, p_shared_owners));
  }
  v31 = *(std::__shared_weak_count **)(a1 + 8);
  *(_QWORD *)a1 = v28;
  *(_QWORD *)(a1 + 8) = v27;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  nitro::impl::fill_shape_and_stride(v10, v11, v12);
  v34 = *(_QWORD *)(a1 + 16);
  v35 = *(_QWORD *)(a1 + 24) - v34;
  if (!v35)
  {
    v40 = 0;
    goto LABEL_40;
  }
  v36 = v35 >> 3;
  v37 = *v11;
  if (v36 <= 1)
    v36 = 1;
  if (v36 >= 2)
  {
    v41 = 0;
    v42 = 0;
    v38 = v36 & 0xFFFFFFFFFFFFFFFELL;
    v43 = (_QWORD *)(v34 + 8);
    v44 = (_QWORD *)(v37 + 8);
    v45 = v36 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v41 += *(v44 - 1) * (*(v43 - 1) - 1);
      v42 += *v44 * (*v43 - 1);
      v43 += 2;
      v44 += 2;
      v45 -= 2;
    }
    while (v45);
    v39 = v42 + v41;
    if (v36 == v38)
      goto LABEL_39;
  }
  else
  {
    v38 = 0;
    v39 = 0;
  }
  v46 = v36 - v38;
  v47 = 8 * v38;
  v48 = (uint64_t *)(v37 + v47);
  v49 = (uint64_t *)(v34 + v47);
  do
  {
    v50 = *v49++;
    v51 = v50 - 1;
    v52 = *v48++;
    v39 += v52 * v51;
    --v46;
  }
  while (v46);
LABEL_39:
  v40 = v39 + 1;
LABEL_40:
  if (*v12 + v40 > (unint64_t)((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2))
    nitro::ndarray<float>::ndarray(std::vector<float> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator()();
  v53 = v59;
  if (v59)
  {
    v54 = (unint64_t *)&v59->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  return a1;
}

void sub_1911763AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  v7 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v3 + 48) = v7;
    operator delete(v7);
  }
  v8 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v3 + 24) = v8;
    operator delete(v8);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::ndarray(std::vector<float> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"last_index() + m_start <= elements.size()", 41);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 131, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::ndarray<float>::ndarray(std::vector<float> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_191176654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::ndarray(std::vector<float> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 131, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911767F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19117680C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x191176804);
}

uint64_t nitro::ndarray_container::ndarray_container<float,(void *)0>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;

  *(_DWORD *)a1 = 9;
  v4 = a2[1];
  *(_QWORD *)(a1 + 8) = *a2;
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v8 = (_BYTE *)a2[2];
  v7 = (_BYTE *)a2[3];
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)operator new(v7 - v8);
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v10;
    v11 = &v10[8 * (v9 >> 3)];
    *(_QWORD *)(a1 + 40) = v11;
    memcpy(v10, v8, v9);
    *(_QWORD *)(a1 + 32) = v11;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v13 = (_BYTE *)a2[5];
  v12 = (_BYTE *)a2[6];
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v15 = (char *)operator new(v12 - v13);
    *(_QWORD *)(a1 + 48) = v15;
    *(_QWORD *)(a1 + 56) = v15;
    v16 = &v15[8 * (v14 >> 3)];
    *(_QWORD *)(a1 + 64) = v16;
    memcpy(v15, v13, v14);
    *(_QWORD *)(a1 + 56) = v16;
  }
  *(_QWORD *)(a1 + 72) = a2[8];
  return a1;
}

void sub_19117693C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 56) = v6;
    operator delete(v6);
  }
  v7 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 32) = v7;
    operator delete(v7);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void _ZNK5nitro17ndarray_container5visitIZNKS0_4castIfEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  float v13;
  double v14;
  int8x16_t v15;
  double v16;
  int8x16_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  void *v28[3];
  void *v29;
  void *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  void *v33[3];
  void *v34;
  void *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38[3];
  void *__p;
  void *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t *v43[3];
  void *v44;
  void *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;

  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v36, (uint64_t)a1);
      nitro::ndarray<float>::init_from_shape((uint64_t **)v38, &v46);
      _ZN5nitro7ndarrayIfE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clINS0_IiEEEEDaS5_EUlRfRKiE_EEvRKNS0_IS5_EET0_(&v46, &v36);
      nitro::ndarray_container::ndarray_container<float,(void *)0>(a2, &v46);
      if (v50)
      {
        v51 = v50;
        operator delete(v50);
      }
      if (v48)
      {
        v49 = v48;
        operator delete(v48);
      }
      v3 = v47;
      if (v47)
      {
        p_shared_owners = (unint64_t *)&v47->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      if (__p)
      {
        v40 = __p;
        operator delete(__p);
      }
      if (v38[0])
      {
        v38[1] = v38[0];
        operator delete(v38[0]);
      }
      v6 = v37;
      if (!v37)
        return;
      v7 = (unint64_t *)&v37->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v41, (uint64_t)a1);
      nitro::ndarray<float>::init_from_shape(v43, &v46);
      _ZN5nitro7ndarrayIfE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clINS0_IhEEEEDaS5_EUlRfRKhE_EEvRKNS0_IS5_EET0_(&v46, &v41, v13, v14, v15, v16, v17);
      nitro::ndarray_container::ndarray_container<float,(void *)0>(a2, &v46);
      if (v50)
      {
        v51 = v50;
        operator delete(v50);
      }
      if (v48)
      {
        v49 = v48;
        operator delete(v48);
      }
      v18 = v47;
      if (v47)
      {
        v19 = (unint64_t *)&v47->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (v44)
      {
        v45 = v44;
        operator delete(v44);
      }
      if (v43[0])
      {
        v43[1] = v43[0];
        operator delete(v43[0]);
      }
      v6 = v42;
      if (!v42)
        return;
      v21 = (unint64_t *)&v42->__shared_owners_;
      do
        v8 = __ldaxr(v21);
      while (__stlxr(v8 - 1, v21));
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v26, (uint64_t)a1);
      nitro::ndarray<float>::init_from_shape((uint64_t **)v28, &v46);
      _ZN5nitro7ndarrayIfE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clIS1_EEDaS5_EUlRfRKfE_EEvRKNS0_IS5_EET0_(&v46, &v26);
      nitro::ndarray_container::ndarray_container<float,(void *)0>(a2, &v46);
      if (v50)
      {
        v51 = v50;
        operator delete(v50);
      }
      if (v48)
      {
        v49 = v48;
        operator delete(v48);
      }
      v22 = v47;
      if (v47)
      {
        v23 = (unint64_t *)&v47->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      if (v29)
      {
        v30 = v29;
        operator delete(v29);
      }
      if (v28[0])
      {
        v28[1] = v28[0];
        operator delete(v28[0]);
      }
      v6 = v27;
      if (!v27)
        return;
      v25 = (unint64_t *)&v27->__shared_owners_;
      do
        v8 = __ldaxr(v25);
      while (__stlxr(v8 - 1, v25));
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v31, (uint64_t)a1);
      nitro::ndarray<float>::init_from_shape((uint64_t **)v33, &v46);
      _ZN5nitro7ndarrayIfE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clINS0_IDhEEEEDaS5_EUlRfRKDhE_EEvRKNS0_IS5_EET0_(&v46, &v31);
      nitro::ndarray_container::ndarray_container<float,(void *)0>(a2, &v46);
      if (v50)
      {
        v51 = v50;
        operator delete(v50);
      }
      if (v48)
      {
        v49 = v48;
        operator delete(v48);
      }
      v9 = v47;
      if (v47)
      {
        v10 = (unint64_t *)&v47->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      if (v34)
      {
        v35 = v34;
        operator delete(v34);
      }
      if (v33[0])
      {
        v33[1] = v33[0];
        operator delete(v33[0]);
      }
      v6 = v32;
      if (!v32)
        return;
      v12 = (unint64_t *)&v32->__shared_owners_;
      do
        v8 = __ldaxr(v12);
      while (__stlxr(v8 - 1, v12));
      break;
    default:
      _ZZNK5nitro17ndarray_container5visitIZNKS0_4castIfEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_ENKUlvE_clEv();
  }
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_191176D14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nitro::ndarray<float>::~ndarray(va);
  _Unwind_Resume(a1);
}

void sub_191176D50()
{
  uint64_t v0;

  nitro::ndarray<float>::~ndarray((_QWORD *)(v0 - 104));
  JUMPOUT(0x191176D5CLL);
}

void sub_191176D6C()
{
  uint64_t v0;

  nitro::ndarray<float>::~ndarray((_QWORD *)(v0 - 104));
  JUMPOUT(0x191176D78);
}

void sub_191176D88()
{
  uint64_t v0;

  nitro::ndarray<float>::~ndarray((_QWORD *)(v0 - 104));
  JUMPOUT(0x191176D94);
}

void _ZZNK5nitro17ndarray_container5visitIZNKS0_4castIfEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZNK5nitro17ndarray_container5visitIZNKS0_4castIfEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_191177008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::init_from_shape(uint64_t **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p;
  void *v21;
  uint64_t v22;
  void *v23;
  std::__shared_weak_count *v24;

  v23 = 0;
  v24 = 0;
  v5 = *a1;
  v4 = a1[1];
  if (v4 != *a1)
  {
    v6 = (char *)v4 - (char *)*a1 - 8;
    if (v6 >= 8)
    {
      v9 = (v6 >> 3) + 1;
      v8 = &v5[v9 & 0x3FFFFFFFFFFFFFFELL];
      v10 = v5 + 1;
      v11 = 1;
      v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
      v13 = 1;
      do
      {
        v11 *= *(v10 - 1);
        v13 *= *v10;
        v10 += 2;
        v12 -= 2;
      }
      while (v12);
      v7 = v13 * v11;
      if (v9 == (v9 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_8;
    }
    else
    {
      v7 = 1;
      v8 = *a1;
    }
    do
    {
      v14 = *v8++;
      v7 *= v14;
    }
    while (v8 != v4);
LABEL_8:
    v15 = 4 * v7;
    v16 = operator new[]();
    std::shared_ptr<float>::reset[abi:ne180100]<float,std::default_delete<float []>,void>(&v23, v16);
    bzero(v23, v15);
  }
  __p = 0;
  v21 = 0;
  v22 = 0;
  nitro::ndarray<float>::ndarray(a2, &v23, (uint64_t)a1, (uint64_t)&__p, 0);
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  v17 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1911771C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void _ZN5nitro7ndarrayIfE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clINS0_IhEEEEDaS5_EUlRfRKhE_EEvRKNS0_IS5_EET0_(uint64_t *a1, uint64_t *a2, float a3, double a4, int8x16_t a5, double a6, int8x16_t a7)
{
  char *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  float *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  BOOL v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint32x4_t v69;
  unint64_t v70;
  unint64_t v71;
  unsigned __int8 *v72;
  uint64_t v73;
  _DWORD *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int8x16_t v78;
  uint32x4_t v79;
  uint32x4_t v80;
  uint32x4_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  BOOL v104;
  BOOL v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint32x4_t v120;
  unint64_t v121;
  unint64_t v122;
  unsigned __int8 *v123;
  uint64_t v124;
  _DWORD *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  int8x16_t v129;
  uint32x4_t v130;
  uint32x4_t v131;
  uint32x4_t v132;
  _QWORD *v133;
  float v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t *v175;
  uint64_t v176;
  unint64_t v177;
  uint32x4_t v178;
  int8x16_t *v179;
  float32x4_t *v180;
  unint64_t v181;
  int8x16_t v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v192;
  unint64_t v193;

  v9 = (unint64_t *)a1[2];
  v8 = (char *)a1[3];
  v10 = (v8 - (char *)v9) >> 3;
  v11 = (_QWORD *)a2[2];
  if (v10 != (a2[3] - (uint64_t)v11) >> 3)
    goto LABEL_13;
  if (v8 == (char *)v9)
    return;
  v12 = v10 <= 1 ? 1 : (v8 - (char *)v9) >> 3;
  if (*v9 != *v11)
    goto LABEL_13;
  v13 = 1;
  do
  {
    v14 = v13;
    if (v12 == v13)
      break;
    v15 = v9[v13];
    v16 = v11[v13++];
  }
  while (v15 == v16);
  if (v14 < v10)
LABEL_13:
    _ZZN5nitro7ndarrayIfE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clINS0_IhEEEEDaS5_EUlRfRKhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv();
  v17 = v8 - (char *)v9;
  if (v8 == (char *)v9)
    return;
  v18 = *a1;
  if (!*a1)
    return;
  if (v17 - 8 < 8)
  {
    v19 = 1;
    v20 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v26 = *v20++;
      v19 *= v26;
    }
    while (v20 != (unint64_t *)v8);
    goto LABEL_21;
  }
  v21 = ((v17 - 8) >> 3) + 1;
  v20 = &v9[v21 & 0x3FFFFFFFFFFFFFFELL];
  v22 = v9 + 1;
  v23 = 1;
  v24 = v21 & 0x3FFFFFFFFFFFFFFELL;
  v25 = 1;
  do
  {
    v23 *= *(v22 - 1);
    v25 *= *v22;
    v22 += 2;
    v24 -= 2;
  }
  while (v24);
  v19 = v25 * v23;
  if (v21 != (v21 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v19)
    return;
  v27 = (uint64_t)v17 >> 3;
  if ((uint64_t)v17 >> 3 == 3)
  {
    v188 = *v9;
    if (!*v9)
      return;
    v82 = 0;
    v83 = a2[8];
    v84 = a1[8];
    v85 = v9[1];
    v86 = (uint64_t *)a1[5];
    v184 = (uint64_t *)a2[5];
    v186 = *v184;
    v187 = *v86;
    v190 = 4 * *v86;
    v183 = 4 * v84;
    v87 = v18 + 4 * v84;
    v185 = v84;
    while (!v85)
    {
LABEL_64:
      v84 += v187;
      v83 += v186;
      ++v82;
      v87 += v190;
      if (v82 == v188)
        return;
    }
    v88 = 0;
    v89 = v183 + v190 * v82;
    v90 = v9[2];
    v91 = *a2;
    v92 = a2[5];
    v93 = v86[1];
    v94 = 4 * v93;
    v95 = v190 * v82 + 4 * (v185 + v90);
    v96 = v184[1];
    v97 = v90 + v83;
    v192 = v90 & 0xFFFFFFFFFFFFFFF8;
    v193 = v90 & 0xFFFFFFFFFFFFFFF0;
    v189 = v82;
    v98 = v87;
    v99 = *a2;
    v100 = v83;
    v101 = v84;
    while (!v90)
    {
LABEL_67:
      v101 += v93;
      v100 += v96;
      ++v88;
      v99 += v96;
      v98 += v94;
      if (v88 == v85)
        goto LABEL_64;
    }
    v102 = v86[2];
    v103 = *(_QWORD *)(v92 + 16);
    if (v90 < 8
      || (v102 == 1 ? (v104 = v103 == 1) : (v104 = 0),
          !v104
       || (v18 + v89 + v94 * v88 < (unint64_t)(v91 + v97 + v96 * v88)
         ? (v105 = v91 + v100 >= (unint64_t)(v18 + v95 + v94 * v88))
         : (v105 = 1),
           !v105)))
    {
      v121 = 0;
      v114 = v100;
      v118 = v101;
      goto LABEL_87;
    }
    if (v90 >= 0x10)
    {
      v126 = v98;
      v127 = v99;
      v128 = v90 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v129 = *(int8x16_t *)(v127 + v83);
        v130 = (uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_191A741C0);
        v131 = (uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_191A741B0);
        v132 = (uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_191A741A0);
        a7 = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_191A74190));
        *(float32x4_t *)(v126 + 32) = vcvtq_f32_u32(v131);
        *(float32x4_t *)(v126 + 48) = vcvtq_f32_u32(v130);
        *(int8x16_t *)v126 = a7;
        *(float32x4_t *)(v126 + 16) = vcvtq_f32_u32(v132);
        v126 += 64;
        v127 += 16;
        v128 -= 16;
      }
      while (v128);
      if (v90 == v193)
        goto LABEL_67;
      v106 = v90 & 0xFFFFFFFFFFFFFFF0;
      if ((v90 & 8) == 0)
      {
        v118 = v101 + v193 * v102;
        v121 = v90 & 0xFFFFFFFFFFFFFFF0;
        v114 = v100 + v193 * v103;
LABEL_87:
        v122 = v90 - v121;
        v123 = (unsigned __int8 *)(v91 + v114);
        v124 = 4 * v102;
        v125 = (_DWORD *)(v18 + 4 * v118);
        do
        {
          a7.i8[0] = *v123;
          *(float *)a7.i32 = (float)a7.u32[0];
          *v125 = a7.i32[0];
          v123 += v103;
          v125 = (_DWORD *)((char *)v125 + v124);
          --v122;
        }
        while (v122);
        goto LABEL_67;
      }
    }
    else
    {
      v106 = 0;
    }
    v107 = v84;
    v108 = v87;
    v109 = v97;
    v110 = v9;
    v111 = v18;
    v112 = v95;
    v113 = v89;
    v114 = v100 + v192 * v103;
    v115 = v106 - (v90 & 0xFFFFFFFFFFFFFFF8);
    v116 = v83 + v106;
    v117 = 4 * v106;
    v118 = v101 + v192 * v102;
    do
    {
      v119 = v98 + v117;
      a7.i64[0] = *(_QWORD *)(v99 + v116);
      v120 = (uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_191A741A0);
      a7 = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_191A74190));
      *(int8x16_t *)v119 = a7;
      *(float32x4_t *)(v119 + 16) = vcvtq_f32_u32(v120);
      v116 += 8;
      v117 += 32;
      v115 += 8;
    }
    while (v115);
    v121 = v90 & 0xFFFFFFFFFFFFFFF8;
    v89 = v113;
    v95 = v112;
    v18 = v111;
    v9 = v110;
    v97 = v109;
    v87 = v108;
    v84 = v107;
    v82 = v189;
    if (v90 == v192)
      goto LABEL_67;
    goto LABEL_87;
  }
  if (v27 == 2)
  {
    v41 = *v9;
    if (!*v9)
      return;
    v42 = 0;
    v43 = a2[8];
    v44 = a1[8];
    v45 = v9[1];
    v46 = *a2;
    v47 = (uint64_t *)a2[5];
    v48 = (uint64_t *)a1[5];
    v49 = *v48;
    v50 = *v47;
    v51 = 4 * *v48;
    v52 = v43 + v45;
    v53 = v45 & 0xFFFFFFFFFFFFFFF0;
    v54 = v45 & 0xFFFFFFFFFFFFFFF8;
    v55 = v18 + 4 * v44;
    v56 = v18 + 4 * (v44 + v45);
    v57 = v55;
    while (!v45)
    {
LABEL_34:
      v44 += v49;
      v43 += v50;
      ++v42;
      v57 += v51;
      if (v42 == v41)
        return;
    }
    v58 = v48[1];
    v59 = v47[1];
    if (v45 < 8
      || (v58 == 1 ? (v60 = v59 == 1) : (v60 = 0),
          !v60
       || (v55 + v51 * v42 < (unint64_t)(v46 + v52 + v50 * v42)
         ? (v61 = v46 + v43 >= (unint64_t)(v56 + v51 * v42))
         : (v61 = 1),
           !v61)))
    {
      v70 = 0;
      v63 = v43;
      v67 = v44;
      goto LABEL_54;
    }
    if (v45 >= 0x10)
    {
      v75 = v57;
      v76 = v46;
      v77 = v45 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v78 = *(int8x16_t *)(v76 + v43);
        v79 = (uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_191A741C0);
        v80 = (uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_191A741B0);
        v81 = (uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_191A741A0);
        a7 = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_191A74190));
        *(float32x4_t *)(v75 + 32) = vcvtq_f32_u32(v80);
        *(float32x4_t *)(v75 + 48) = vcvtq_f32_u32(v79);
        *(int8x16_t *)v75 = a7;
        *(float32x4_t *)(v75 + 16) = vcvtq_f32_u32(v81);
        v75 += 64;
        v76 += 16;
        v77 -= 16;
      }
      while (v77);
      if (v45 == v53)
        goto LABEL_34;
      v62 = v45 & 0xFFFFFFFFFFFFFFF0;
      if ((v45 & 8) == 0)
      {
        v67 = v44 + v53 * v58;
        v70 = v45 & 0xFFFFFFFFFFFFFFF0;
        v63 = v43 + v53 * v59;
LABEL_54:
        v71 = v45 - v70;
        v72 = (unsigned __int8 *)(v46 + v63);
        v73 = 4 * v58;
        v74 = (_DWORD *)(v18 + 4 * v67);
        do
        {
          a7.i8[0] = *v72;
          *(float *)a7.i32 = (float)a7.u32[0];
          *v74 = a7.i32[0];
          v72 += v59;
          v74 = (_DWORD *)((char *)v74 + v73);
          --v71;
        }
        while (v71);
        goto LABEL_34;
      }
    }
    else
    {
      v62 = 0;
    }
    v63 = v43 + v54 * v59;
    v64 = v62 - (v45 & 0xFFFFFFFFFFFFFFF8);
    v65 = v46 + v62;
    v66 = 4 * v62;
    v67 = v44 + v54 * v58;
    do
    {
      v68 = v57 + v66;
      a7.i64[0] = *(_QWORD *)(v65 + v43);
      v69 = (uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_191A741A0);
      a7 = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_191A74190));
      *(int8x16_t *)v68 = a7;
      *(float32x4_t *)(v68 + 16) = vcvtq_f32_u32(v69);
      v65 += 8;
      v66 += 32;
      v64 += 8;
    }
    while (v64);
    v70 = v45 & 0xFFFFFFFFFFFFFFF8;
    if (v45 == v54)
      goto LABEL_34;
    goto LABEL_54;
  }
  if (v27 != 1)
  {
    if ((v17 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v133 = operator new(v17);
    bzero(v133, v17 & 0xFFFFFFFFFFFFFFF8);
    v135 = *a2;
    if (v17 >> 3 <= 1)
      v136 = 1;
    else
      v136 = v17 >> 3;
    v137 = a2[5];
    v138 = a2[8];
    v139 = v136 & 0x1FFFFFFFFFFFFFFELL;
    v140 = a1[5];
    while (v136 >= 2)
    {
      v143 = 0;
      v144 = 0;
      v145 = v136 & 0x1FFFFFFFFFFFFFFELL;
      v146 = (_QWORD *)(v140 + 8);
      v147 = v133 + 1;
      do
      {
        v143 += *(v146 - 1) * *(v147 - 1);
        v144 += *v146 * *v147;
        v147 += 2;
        v146 += 2;
        v145 -= 2;
      }
      while (v145);
      v141 = v144 + v143;
      v142 = v136 & 0x1FFFFFFFFFFFFFFELL;
      if (v136 != v139)
        goto LABEL_105;
LABEL_107:
      if (v136 < 2)
      {
        v155 = 0;
        v156 = 0;
LABEL_112:
        v162 = v136 - v156;
        v163 = v156;
        v164 = (uint64_t *)(v137 + 8 * v156);
        v165 = &v133[v163];
        do
        {
          v167 = *v165++;
          v166 = v167;
          v168 = *v164++;
          v155 += v168 * v166;
          --v162;
        }
        while (v162);
        goto LABEL_114;
      }
      v157 = 0;
      v158 = 0;
      v159 = v136 & 0x1FFFFFFFFFFFFFFELL;
      v160 = (_QWORD *)(v137 + 8);
      v161 = v133 + 1;
      do
      {
        v157 += *(v160 - 1) * *(v161 - 1);
        v158 += *v160 * *v161;
        v161 += 2;
        v160 += 2;
        v159 -= 2;
      }
      while (v159);
      v155 = v158 + v157;
      v156 = v136 & 0x1FFFFFFFFFFFFFFELL;
      if (v136 != v139)
        goto LABEL_112;
LABEL_114:
      LOBYTE(v134) = *(_BYTE *)(v135 + v138 + v155);
      v134 = (float)LODWORD(v134);
      *(float *)(v18 + 4 * v141) = v134;
      if ((int)(v17 >> 3) >= 1)
      {
        v169 = (v17 >> 3) + 1;
        v170 = v17 >> 3;
        while (1)
        {
          v171 = (v169 - 2);
          v172 = v133[v171] + 1;
          v133[v171] = v172;
          if (v172 < v9[v171])
            break;
          v133[(v169 - 2)] = 0;
          --v170;
          if ((unint64_t)--v169 <= 1)
            goto LABEL_120;
        }
        if (v170 > 0)
          continue;
      }
LABEL_120:
      operator delete(v133);
      return;
    }
    v141 = 0;
    v142 = 0;
LABEL_105:
    v148 = v136 - v142;
    v149 = v142;
    v150 = (uint64_t *)(v140 + 8 * v142);
    v151 = &v133[v149];
    do
    {
      v153 = *v151++;
      v152 = v153;
      v154 = *v150++;
      v141 += v154 * v152;
      --v148;
    }
    while (v148);
    goto LABEL_107;
  }
  v28 = *v9;
  if (!*v9)
    return;
  v29 = a2[8];
  v30 = a1[8];
  v31 = *a2;
  v32 = *(_QWORD *)a1[5];
  v33 = *(_QWORD *)a2[5];
  if (v28 < 8)
    goto LABEL_27;
  v34 = 0;
  if (v32 != 1 || v33 != 1)
    goto LABEL_28;
  if (v18 + 4 * v30 < v31 + v28 + v29 && v31 + v29 < v18 + 4 * (v28 + v30))
  {
LABEL_27:
    v34 = 0;
LABEL_28:
    v35 = a2[8];
    v36 = a1[8];
    goto LABEL_29;
  }
  if (v28 >= 0x10)
  {
    v34 = v28 & 0xFFFFFFFFFFFFFFF0;
    v179 = (int8x16_t *)(v31 + v29);
    v180 = (float32x4_t *)(v18 + 4 * v30);
    a3 = NAN;
    a5.i64[1] = 0xFFFFFF07FFFFFF06;
    v181 = v28 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v182 = *v179++;
      v180[2] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v182, (int8x16_t)xmmword_191A741B0));
      v180[3] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v182, (int8x16_t)xmmword_191A741C0));
      *v180 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v182, (int8x16_t)xmmword_191A74190));
      v180[1] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v182, (int8x16_t)xmmword_191A741A0));
      v180 += 4;
      v181 -= 16;
    }
    while (v181);
    if (v28 == v34)
      return;
    if ((v28 & 8) == 0)
    {
      v36 = v30 + v34;
      v35 = v29 + v34;
LABEL_29:
      v37 = v28 - v34;
      v38 = (_BYTE *)(v31 + v35);
      v39 = 4 * v32;
      v40 = (float *)(v18 + 4 * v36);
      do
      {
        LOBYTE(a3) = *v38;
        a3 = (float)LODWORD(a3);
        *v40 = a3;
        v38 += v33;
        v40 = (float *)((char *)v40 + v39);
        --v37;
      }
      while (v37);
      return;
    }
  }
  else
  {
    v34 = 0;
  }
  v173 = v34;
  v34 = v28 & 0xFFFFFFFFFFFFFFF8;
  v35 = v29 + (v28 & 0xFFFFFFFFFFFFFFF8);
  v36 = v30 + (v28 & 0xFFFFFFFFFFFFFFF8);
  v174 = v173 - (v28 & 0xFFFFFFFFFFFFFFF8);
  v175 = (unint64_t *)(v31 + v173 + v29);
  v176 = v18 + 4 * (v173 + v30);
  a3 = NAN;
  do
  {
    v177 = *v175++;
    a5.i64[0] = v177;
    v178 = (uint32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_191A741A0);
    a5 = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_191A74190));
    *(int8x16_t *)v176 = a5;
    *(float32x4_t *)(v176 + 16) = vcvtq_f32_u32(v178);
    v176 += 32;
    v174 += 8;
  }
  while (v174);
  if (v28 != v34)
    goto LABEL_29;
}

void sub_191177B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::ndarray<float>::ndarray(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  const void *v12;
  int64_t v13;
  char *v14;
  char *v15;
  const void *v16;
  int64_t v17;
  char *v18;
  char *v19;

  v8 = a2[1];
  *a1 = *a2;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  v12 = *(const void **)a3;
  v11 = *(_QWORD *)(a3 + 8);
  v13 = v11 - *(_QWORD *)a3;
  if (v11 != *(_QWORD *)a3)
  {
    if (v13 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v14 = (char *)operator new(v11 - *(_QWORD *)a3);
    a1[2] = v14;
    a1[3] = v14;
    v15 = &v14[8 * (v13 >> 3)];
    a1[4] = v15;
    memcpy(v14, v12, v13);
    a1[3] = v15;
  }
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  v16 = *(const void **)a4;
  v17 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
  if (v17)
  {
    if (v17 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v18 = (char *)operator new(v17);
    a1[5] = v18;
    a1[6] = v18;
    v19 = &v18[8 * (v17 >> 3)];
    a1[7] = v19;
    memcpy(v18, v16, v17);
    a1[6] = v19;
  }
  a1[8] = a5;
  nitro::impl::fill_shape_and_stride(a1 + 2, a1 + 5, a1 + 8);
  return a1;
}

void sub_191177C6C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 48) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v6;
    operator delete(v6);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void _ZZN5nitro7ndarrayIfE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clINS0_IhEEEEDaS5_EUlRfRKhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZN5nitro7ndarrayIfE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clINS0_IhEEEEDaS5_EUlRfRKhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_191177F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro7ndarrayIfE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clINS0_IhEEEEDaS5_EUlRfRKhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911780B4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911780C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911780C0);
}

uint64_t nitro::ndarray<unsigned char>::ndarray(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  *(_OWORD *)(a1 + 16) = 0u;
  v4 = (_QWORD *)(a1 + 16);
  v5 = (_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  if (*(_DWORD *)a2 != 5)
    nitro::ndarray<unsigned char>::ndarray(nitro::ndarray_container const&)::{lambda(void)#1}::operator()();
  v7 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(std::__shared_weak_count **)(a1 + 8);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v6;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v4 != (_QWORD *)(a2 + 24))
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v4, *(char **)(a2 + 24), *(char **)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  if (v5 != (_QWORD *)(a2 + 48))
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v5, *(char **)(a2 + 48), *(char **)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 72);
  return a1;
}

void sub_191178200(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 48) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v6;
    operator delete(v6);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::ndarray(nitro::ndarray_container const&)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"int(nc.m_primitive)", 19);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"int(primitive_type_to_enum<T>::value)", 37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 108, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::ndarray<unsigned char>::ndarray(nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19117852C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::ndarray(nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 108, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911786D0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911786E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911786DCLL);
}

void _ZN5nitro7ndarrayIfE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clINS0_IiEEEEDaS5_EUlRfRKiE_EEvRKNS0_IS5_EET0_(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  float *v60;
  int32x4_t *v61;
  _OWORD *v62;
  unint64_t v63;
  float32x4_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int32x4_t *v78;
  uint64_t v79;
  float32x4_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int *v90;
  uint64_t v91;
  uint64_t v92;
  float *v93;
  int32x4_t *v94;
  float32x4_t *v95;
  unint64_t v96;
  float32x4_t v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int32x4_t *v139;
  float32x4_t *v140;
  unint64_t v141;
  float32x4_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    _ZZN5nitro7ndarrayIfE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clINS0_IiEEEEDaS5_EUlRfRKiE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return;
  v13 = *a1;
  if (!*a1)
    return;
  if (v12 - 8 < 8)
  {
    v14 = 1;
    v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v16 = ((v12 - 8) >> 3) + 1;
  v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  v17 = v4 + 1;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v148 = *v4;
    if (!*v4)
      return;
    v65 = 0;
    v66 = a2[8];
    v67 = a1[8];
    v68 = v4[1];
    v69 = (uint64_t *)a1[5];
    v143 = (uint64_t *)a2[5];
    v70 = v13 + 4 * v67 + 16;
    v146 = *v143;
    v147 = *v69;
    v145 = 4 * *v69;
    v71 = 4 * v66 + 16;
    v144 = 4 * *v143;
    while (!v68)
    {
LABEL_50:
      v67 += v147;
      v66 += v146;
      ++v65;
      v70 += v145;
      v71 += v144;
      if (v65 == v148)
        return;
    }
    v72 = 0;
    v73 = v4[2];
    v74 = *a2;
    v75 = a2[5];
    v76 = v69[1];
    v77 = v73 & 0xFFFFFFFFFFFFFFF8;
    v78 = (int32x4_t *)(*a2 + v71);
    v79 = v143[1];
    v80 = (float32x4_t *)v70;
    v81 = v66;
    v82 = v67;
    while (1)
    {
      if (v73)
      {
        v83 = v69[2];
        v84 = *(_QWORD *)(v75 + 16);
        if (v73 >= 8 && (v84 == 1 ? (v85 = v83 == 1) : (v85 = 0), v85))
        {
          v87 = v81 + v77 * v84;
          v94 = v78;
          v95 = v80;
          v96 = v73 & 0xFFFFFFFFFFFFFFF8;
          v88 = v82 + v77 * v83;
          do
          {
            v97 = vcvtq_f32_s32(*v94);
            v95[-1] = vcvtq_f32_s32(v94[-1]);
            *v95 = v97;
            v95 += 2;
            v94 += 2;
            v96 -= 8;
          }
          while (v96);
          v86 = v73 & 0xFFFFFFFFFFFFFFF8;
          if (v73 == v77)
            goto LABEL_53;
        }
        else
        {
          v86 = 0;
          v87 = v81;
          v88 = v82;
        }
        v89 = v73 - v86;
        v90 = (int *)(v74 + 4 * v87);
        v91 = 4 * v84;
        v92 = 4 * v83;
        v93 = (float *)(v13 + 4 * v88);
        do
        {
          *v93 = (float)*v90;
          v90 = (int *)((char *)v90 + v91);
          v93 = (float *)((char *)v93 + v92);
          --v89;
        }
        while (v89);
      }
LABEL_53:
      v82 += v76;
      v81 += v79;
      ++v72;
      v80 = (float32x4_t *)((char *)v80 + 4 * v76);
      v78 = (int32x4_t *)((char *)v78 + 4 * v79);
      if (v72 == v68)
        goto LABEL_50;
    }
  }
  if (v22 == 2)
  {
    v35 = *v4;
    if (!*v4)
      return;
    v36 = 0;
    v37 = a2[8];
    v38 = a1[8];
    v39 = v4[1];
    v40 = *a2;
    v41 = (uint64_t *)a2[5];
    v42 = (uint64_t *)a1[5];
    v43 = *v42;
    v44 = *v41;
    v45 = v39 & 0xFFFFFFFFFFFFFFF8;
    v46 = v13 + 4 * v38 + 16;
    v47 = 4 * *v42;
    v48 = *a2 + 4 * v37 + 16;
    v49 = 4 * *v41;
    while (1)
    {
      if (v39)
      {
        v50 = v42[1];
        v51 = v41[1];
        if (v39 >= 8 && (v51 == 1 ? (v52 = v50 == 1) : (v52 = 0), v52))
        {
          v54 = v37 + v45 * v51;
          v61 = (int32x4_t *)v48;
          v62 = (_OWORD *)v46;
          v63 = v39 & 0xFFFFFFFFFFFFFFF8;
          v55 = v38 + v45 * v50;
          do
          {
            v64 = vcvtq_f32_s32(*v61);
            *(v62 - 1) = vcvtq_f32_s32(v61[-1]);
            *v62 = v64;
            v62 += 2;
            v61 += 2;
            v63 -= 8;
          }
          while (v63);
          v53 = v39 & 0xFFFFFFFFFFFFFFF8;
          if (v39 == v45)
            goto LABEL_33;
        }
        else
        {
          v53 = 0;
          v54 = v37;
          v55 = v38;
        }
        v56 = v39 - v53;
        v57 = (int *)(v40 + 4 * v54);
        v58 = 4 * v51;
        v59 = 4 * v50;
        v60 = (float *)(v13 + 4 * v55);
        do
        {
          *v60 = (float)*v57;
          v57 = (int *)((char *)v57 + v58);
          v60 = (float *)((char *)v60 + v59);
          --v56;
        }
        while (v56);
      }
LABEL_33:
      v38 += v43;
      v37 += v44;
      ++v36;
      v46 += v47;
      v48 += v49;
      if (v36 == v35)
        return;
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v98 = operator new(v12);
    bzero(v98, v12 & 0xFFFFFFFFFFFFFFF8);
    v99 = *a2;
    if (v12 >> 3 <= 1)
      v100 = 1;
    else
      v100 = v12 >> 3;
    v101 = a2[5];
    v102 = a2[8];
    v103 = v100 & 0x1FFFFFFFFFFFFFFELL;
    v104 = a1[5];
    while (v100 >= 2)
    {
      v107 = 0;
      v108 = 0;
      v109 = v100 & 0x1FFFFFFFFFFFFFFELL;
      v110 = (_QWORD *)(v104 + 8);
      v111 = v98 + 1;
      do
      {
        v107 += *(v110 - 1) * *(v111 - 1);
        v108 += *v110 * *v111;
        v111 += 2;
        v110 += 2;
        v109 -= 2;
      }
      while (v109);
      v105 = v108 + v107;
      v106 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103)
        goto LABEL_78;
LABEL_80:
      if (v100 < 2)
      {
        v119 = 0;
        v120 = 0;
LABEL_85:
        v126 = v100 - v120;
        v127 = v120;
        v128 = (uint64_t *)(v101 + 8 * v120);
        v129 = &v98[v127];
        do
        {
          v131 = *v129++;
          v130 = v131;
          v132 = *v128++;
          v119 += v132 * v130;
          --v126;
        }
        while (v126);
        goto LABEL_87;
      }
      v121 = 0;
      v122 = 0;
      v123 = v100 & 0x1FFFFFFFFFFFFFFELL;
      v124 = (_QWORD *)(v101 + 8);
      v125 = v98 + 1;
      do
      {
        v121 += *(v124 - 1) * *(v125 - 1);
        v122 += *v124 * *v125;
        v125 += 2;
        v124 += 2;
        v123 -= 2;
      }
      while (v123);
      v119 = v122 + v121;
      v120 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103)
        goto LABEL_85;
LABEL_87:
      *(float *)(v13 + 4 * v105) = (float)*(int *)(v99 + 4 * (v102 + v119));
      if ((int)(v12 >> 3) >= 1)
      {
        v133 = (v12 >> 3) + 1;
        v134 = v12 >> 3;
        while (1)
        {
          v135 = (v133 - 2);
          v136 = v98[v135] + 1;
          v98[v135] = v136;
          if (v136 < v4[v135])
            break;
          v98[(v133 - 2)] = 0;
          --v134;
          if ((unint64_t)--v133 <= 1)
            goto LABEL_93;
        }
        if (v134 > 0)
          continue;
      }
LABEL_93:
      operator delete(v98);
      return;
    }
    v105 = 0;
    v106 = 0;
LABEL_78:
    v112 = v100 - v106;
    v113 = v106;
    v114 = (uint64_t *)(v104 + 8 * v106);
    v115 = &v98[v113];
    do
    {
      v117 = *v115++;
      v116 = v117;
      v118 = *v114++;
      v105 += v118 * v116;
      --v112;
    }
    while (v112);
    goto LABEL_80;
  }
  v23 = *v4;
  if (!*v4)
    return;
  v24 = a2[8];
  v25 = a1[8];
  v26 = *a2;
  v27 = *(_QWORD *)a1[5];
  v28 = *(_QWORD *)a2[5];
  if (v23 < 8)
  {
    v29 = 0;
LABEL_28:
    v30 = v23 - v29;
    v31 = (int *)(v26 + 4 * v24);
    v32 = 4 * v28;
    v33 = 4 * v27;
    v34 = (float *)(v13 + 4 * v25);
    do
    {
      *v34 = (float)*v31;
      v31 = (int *)((char *)v31 + v32);
      v34 = (float *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  v29 = 0;
  if (v28 != 1)
    goto LABEL_28;
  if (v27 != 1)
    goto LABEL_28;
  v29 = v23 & 0xFFFFFFFFFFFFFFF8;
  v137 = v24 + (v23 & 0xFFFFFFFFFFFFFFF8);
  v138 = v25 + (v23 & 0xFFFFFFFFFFFFFFF8);
  v139 = (int32x4_t *)(v26 + 4 * v24 + 16);
  v140 = (float32x4_t *)(v13 + 4 * v25 + 16);
  v141 = v23 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v142 = vcvtq_f32_s32(*v139);
    v140[-1] = vcvtq_f32_s32(v139[-1]);
    *v140 = v142;
    v139 += 2;
    v140 += 2;
    v141 -= 8;
  }
  while (v141);
  v24 = v137;
  v25 = v138;
  if (v23 != v29)
    goto LABEL_28;
}

void sub_191178D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void _ZZN5nitro7ndarrayIfE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clINS0_IiEEEEDaS5_EUlRfRKiE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZN5nitro7ndarrayIfE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clINS0_IiEEEEDaS5_EUlRfRKiE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_19117901C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro7ndarrayIfE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clINS0_IiEEEEDaS5_EUlRfRKiE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911791C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911791D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911791CCLL);
}

uint64_t nitro::ndarray<int>::ndarray(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  *(_OWORD *)(a1 + 16) = 0u;
  v4 = (_QWORD *)(a1 + 16);
  v5 = (_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  if (*(_DWORD *)a2 != 3)
    nitro::ndarray<int>::ndarray(nitro::ndarray_container const&)::{lambda(void)#1}::operator()();
  v7 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(std::__shared_weak_count **)(a1 + 8);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v6;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v4 != (_QWORD *)(a2 + 24))
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v4, *(char **)(a2 + 24), *(char **)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  if (v5 != (_QWORD *)(a2 + 48))
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v5, *(char **)(a2 + 48), *(char **)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 72);
  return a1;
}

void sub_19117930C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 48) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v6;
    operator delete(v6);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::ndarray(nitro::ndarray_container const&)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"int(nc.m_primitive)", 19);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"int(primitive_type_to_enum<T>::value)", 37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 108, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::ndarray<int>::ndarray(nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_191179638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::ndarray(nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 108, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911797DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911797F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911797E8);
}

void _ZN5nitro7ndarrayIfE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clINS0_IDhEEEEDaS5_EUlRfRKDhE_EEvRKNS0_IS5_EET0_(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int16 *v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  __int16 *v62;
  uint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  float16x4_t *v68;
  _OWORD *v69;
  unint64_t v70;
  float16x8_t v71;
  float32x4_t v72;
  float32x4_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  float16x4_t *v87;
  uint64_t v88;
  float32x4_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  __int16 *v99;
  uint64_t v100;
  uint64_t v101;
  _DWORD *v102;
  float16x4_t *v105;
  float32x4_t *v106;
  unint64_t v107;
  float16x8_t v108;
  float32x4_t v109;
  float32x4_t v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v148;
  int v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  float16x4_t *v154;
  float32x4_t *v155;
  unint64_t v156;
  float16x8_t v157;
  float32x4_t v158;
  float32x4_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    _ZZN5nitro7ndarrayIfE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clINS0_IDhEEEEDaS5_EUlRfRKDhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return;
  v13 = *a1;
  if (!*a1)
    return;
  if (v12 - 8 < 8)
  {
    v14 = 1;
    v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v16 = ((v12 - 8) >> 3) + 1;
  v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  v17 = v4 + 1;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v165 = *v4;
    if (!*v4)
      return;
    v74 = 0;
    v75 = a2[8];
    v76 = a1[8];
    v77 = v4[1];
    v78 = (uint64_t *)a1[5];
    v160 = (uint64_t *)a2[5];
    v79 = v13 + 4 * v76 + 32;
    v163 = *v160;
    v164 = *v78;
    v162 = 4 * *v78;
    v80 = 2 * v75 + 16;
    v161 = 2 * *v160;
    while (!v77)
    {
LABEL_50:
      v76 += v164;
      v75 += v163;
      ++v74;
      v79 += v162;
      v80 += v161;
      if (v74 == v165)
        return;
    }
    v81 = 0;
    v82 = v4[2];
    v83 = *a2;
    v84 = a2[5];
    v85 = v78[1];
    v86 = v82 & 0xFFFFFFFFFFFFFFF0;
    v87 = (float16x4_t *)(*a2 + v80);
    v88 = v160[1];
    v89 = (float32x4_t *)v79;
    v90 = v75;
    v91 = v76;
    while (1)
    {
      if (v82)
      {
        v92 = v78[2];
        v93 = *(_QWORD *)(v84 + 16);
        if (v82 >= 0x10 && (v93 == 1 ? (v94 = v92 == 1) : (v94 = 0), v94))
        {
          v96 = v90 + v86 * v93;
          v105 = v87;
          v106 = v89;
          v107 = v82 & 0xFFFFFFFFFFFFFFF0;
          v97 = v91 + v86 * v92;
          do
          {
            v108 = *(float16x8_t *)v105[-2].i8;
            v109 = vcvtq_f32_f16(*v105);
            v110 = vcvt_hight_f32_f16(*(float16x8_t *)v105->i8);
            v106[-2] = vcvtq_f32_f16(*(float16x4_t *)v108.i8);
            v106[-1] = vcvt_hight_f32_f16(v108);
            *v106 = v109;
            v106[1] = v110;
            v106 += 4;
            v105 += 4;
            v107 -= 16;
          }
          while (v107);
          v95 = v82 & 0xFFFFFFFFFFFFFFF0;
          if (v82 == v86)
            goto LABEL_53;
        }
        else
        {
          v95 = 0;
          v96 = v90;
          v97 = v91;
        }
        v98 = v82 - v95;
        v99 = (__int16 *)(v83 + 2 * v96);
        v100 = 2 * v93;
        v101 = 4 * v92;
        v102 = (_DWORD *)(v13 + 4 * v97);
        do
        {
          _H0 = *v99;
          __asm { FCVT            S0, H0 }
          *v102 = _S0;
          v99 = (__int16 *)((char *)v99 + v100);
          v102 = (_DWORD *)((char *)v102 + v101);
          --v98;
        }
        while (v98);
      }
LABEL_53:
      v91 += v85;
      v90 += v88;
      ++v81;
      v89 = (float32x4_t *)((char *)v89 + 4 * v85);
      v87 = (float16x4_t *)((char *)v87 + 2 * v88);
      if (v81 == v77)
        goto LABEL_50;
    }
  }
  if (v22 == 2)
  {
    v40 = *v4;
    if (!*v4)
      return;
    v41 = 0;
    v42 = a2[8];
    v43 = a1[8];
    v44 = v4[1];
    v45 = *a2;
    v46 = (uint64_t *)a2[5];
    v47 = (uint64_t *)a1[5];
    v48 = *v47;
    v49 = *v46;
    v50 = v44 & 0xFFFFFFFFFFFFFFF0;
    v51 = v13 + 4 * v43 + 32;
    v52 = 4 * *v47;
    v53 = *a2 + 2 * v42 + 16;
    v54 = 2 * *v46;
    while (1)
    {
      if (v44)
      {
        v55 = v47[1];
        v56 = v46[1];
        if (v44 >= 0x10 && (v56 == 1 ? (_ZF = v55 == 1) : (_ZF = 0), _ZF))
        {
          v59 = v42 + v50 * v56;
          v68 = (float16x4_t *)v53;
          v69 = (_OWORD *)v51;
          v70 = v44 & 0xFFFFFFFFFFFFFFF0;
          v60 = v43 + v50 * v55;
          do
          {
            v71 = *(float16x8_t *)v68[-2].i8;
            v72 = vcvtq_f32_f16(*v68);
            v73 = vcvt_hight_f32_f16(*(float16x8_t *)v68->i8);
            *(v69 - 2) = vcvtq_f32_f16(*(float16x4_t *)v71.i8);
            *(v69 - 1) = vcvt_hight_f32_f16(v71);
            *v69 = v72;
            v69[1] = v73;
            v69 += 4;
            v68 += 4;
            v70 -= 16;
          }
          while (v70);
          v58 = v44 & 0xFFFFFFFFFFFFFFF0;
          if (v44 == v50)
            goto LABEL_33;
        }
        else
        {
          v58 = 0;
          v59 = v42;
          v60 = v43;
        }
        v61 = v44 - v58;
        v62 = (__int16 *)(v45 + 2 * v59);
        v63 = 2 * v56;
        v64 = 4 * v55;
        v65 = (_DWORD *)(v13 + 4 * v60);
        do
        {
          _H0 = *v62;
          __asm { FCVT            S0, H0 }
          *v65 = _S0;
          v62 = (__int16 *)((char *)v62 + v63);
          v65 = (_DWORD *)((char *)v65 + v64);
          --v61;
        }
        while (v61);
      }
LABEL_33:
      v43 += v48;
      v42 += v49;
      ++v41;
      v51 += v52;
      v53 += v54;
      if (v41 == v40)
        return;
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v111 = operator new(v12);
    bzero(v111, v12 & 0xFFFFFFFFFFFFFFF8);
    v112 = *a2;
    if (v12 >> 3 <= 1)
      v113 = 1;
    else
      v113 = v12 >> 3;
    v114 = a2[5];
    v115 = a2[8];
    v116 = v113 & 0x1FFFFFFFFFFFFFFELL;
    v117 = a1[5];
    while (v113 >= 2)
    {
      v120 = 0;
      v121 = 0;
      v122 = v113 & 0x1FFFFFFFFFFFFFFELL;
      v123 = (_QWORD *)(v117 + 8);
      v124 = v111 + 1;
      do
      {
        v120 += *(v123 - 1) * *(v124 - 1);
        v121 += *v123 * *v124;
        v124 += 2;
        v123 += 2;
        v122 -= 2;
      }
      while (v122);
      v118 = v121 + v120;
      v119 = v113 & 0x1FFFFFFFFFFFFFFELL;
      if (v113 != v116)
        goto LABEL_78;
LABEL_80:
      if (v113 < 2)
      {
        v132 = 0;
        v133 = 0;
LABEL_85:
        v139 = v113 - v133;
        v140 = v133;
        v141 = (uint64_t *)(v114 + 8 * v133);
        v142 = &v111[v140];
        do
        {
          v144 = *v142++;
          v143 = v144;
          v145 = *v141++;
          v132 += v145 * v143;
          --v139;
        }
        while (v139);
        goto LABEL_87;
      }
      v134 = 0;
      v135 = 0;
      v136 = v113 & 0x1FFFFFFFFFFFFFFELL;
      v137 = (_QWORD *)(v114 + 8);
      v138 = v111 + 1;
      do
      {
        v134 += *(v137 - 1) * *(v138 - 1);
        v135 += *v137 * *v138;
        v138 += 2;
        v137 += 2;
        v136 -= 2;
      }
      while (v136);
      v132 = v135 + v134;
      v133 = v113 & 0x1FFFFFFFFFFFFFFELL;
      if (v113 != v116)
        goto LABEL_85;
LABEL_87:
      _H0 = *(_WORD *)(v112 + 2 * (v115 + v132));
      __asm { FCVT            S0, H0 }
      *(_DWORD *)(v13 + 4 * v118) = _S0;
      if ((int)(v12 >> 3) >= 1)
      {
        v148 = (v12 >> 3) + 1;
        v149 = v12 >> 3;
        while (1)
        {
          v150 = (v148 - 2);
          v151 = v111[v150] + 1;
          v111[v150] = v151;
          if (v151 < v4[v150])
            break;
          v111[(v148 - 2)] = 0;
          --v149;
          if ((unint64_t)--v148 <= 1)
            goto LABEL_93;
        }
        if (v149 > 0)
          continue;
      }
LABEL_93:
      operator delete(v111);
      return;
    }
    v118 = 0;
    v119 = 0;
LABEL_78:
    v125 = v113 - v119;
    v126 = v119;
    v127 = (uint64_t *)(v117 + 8 * v119);
    v128 = &v111[v126];
    do
    {
      v130 = *v128++;
      v129 = v130;
      v131 = *v127++;
      v118 += v131 * v129;
      --v125;
    }
    while (v125);
    goto LABEL_80;
  }
  v23 = *v4;
  if (!*v4)
    return;
  v24 = a2[8];
  v25 = a1[8];
  v26 = *a2;
  v27 = *(_QWORD *)a1[5];
  v28 = *(_QWORD *)a2[5];
  if (v23 < 0x10)
  {
    v29 = 0;
LABEL_28:
    v30 = v23 - v29;
    v31 = (__int16 *)(v26 + 2 * v24);
    v32 = 2 * v28;
    v33 = 4 * v27;
    v34 = (_DWORD *)(v13 + 4 * v25);
    do
    {
      _H0 = *v31;
      __asm { FCVT            S0, H0 }
      *v34 = _S0;
      v31 = (__int16 *)((char *)v31 + v32);
      v34 = (_DWORD *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  v29 = 0;
  if (v28 != 1)
    goto LABEL_28;
  if (v27 != 1)
    goto LABEL_28;
  v29 = v23 & 0xFFFFFFFFFFFFFFF0;
  v152 = v24 + (v23 & 0xFFFFFFFFFFFFFFF0);
  v153 = v25 + (v23 & 0xFFFFFFFFFFFFFFF0);
  v154 = (float16x4_t *)(v26 + 2 * v24 + 16);
  v155 = (float32x4_t *)(v13 + 4 * v25 + 32);
  v156 = v23 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v157 = *(float16x8_t *)v154[-2].i8;
    v158 = vcvtq_f32_f16(*v154);
    v159 = vcvt_hight_f32_f16(*(float16x8_t *)v154->i8);
    v155[-2] = vcvtq_f32_f16(*(float16x4_t *)v157.i8);
    v155[-1] = vcvt_hight_f32_f16(v157);
    *v155 = v158;
    v155[1] = v159;
    v155 += 4;
    v154 += 4;
    v156 -= 16;
  }
  while (v156);
  v24 = v152;
  v25 = v153;
  if (v23 != v29)
    goto LABEL_28;
}

void sub_191179EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void _ZZN5nitro7ndarrayIfE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clINS0_IDhEEEEDaS5_EUlRfRKDhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZN5nitro7ndarrayIfE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clINS0_IDhEEEEDaS5_EUlRfRKDhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_19117A140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro7ndarrayIfE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clINS0_IDhEEEEDaS5_EUlRfRKDhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19117A2E4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19117A2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19117A2F0);
}

uint64_t nitro::ndarray<half>::ndarray(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  *(_OWORD *)(a1 + 16) = 0u;
  v4 = (_QWORD *)(a1 + 16);
  v5 = (_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  if (*(_DWORD *)a2 != 11)
    nitro::ndarray<half>::ndarray(nitro::ndarray_container const&)::{lambda(void)#1}::operator()();
  v7 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(std::__shared_weak_count **)(a1 + 8);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v6;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v4 != (_QWORD *)(a2 + 24))
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v4, *(char **)(a2 + 24), *(char **)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  if (v5 != (_QWORD *)(a2 + 48))
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v5, *(char **)(a2 + 48), *(char **)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 72);
  return a1;
}

void sub_19117A430(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 48) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v6;
    operator delete(v6);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::ndarray(nitro::ndarray_container const&)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"int(nc.m_primitive)", 19);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"int(primitive_type_to_enum<T>::value)", 37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 108, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::ndarray<half>::ndarray(nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19117A75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::ndarray(nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 108, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19117A900(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19117A914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19117A90CLL);
}

__n128 _ZN5nitro7ndarrayIfE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clIS1_EEDaS5_EUlRfRKfE_EEvRKNS0_IS5_EET0_(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int32 *v31;
  uint64_t v32;
  unsigned __int32 *v33;
  __n128 result;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  __n128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  __n128 *v50;
  __n128 *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unsigned __int32 *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int32 *v61;
  __n128 *v63;
  __n128 *v64;
  unint64_t v65;
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  __n128 *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  __n128 *v84;
  __n128 *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unsigned __int32 *v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int32 *v97;
  __n128 *v99;
  __n128 *v100;
  unint64_t v101;
  __n128 v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  unint64_t v141;
  __n128 *v142;
  __n128 *v143;
  __n128 *v144;
  __n128 *v145;
  unint64_t v146;
  __n128 v147;
  uint64_t v148;
  __n128 *v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v158;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return result;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    _ZZN5nitro7ndarrayIfE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clIS1_EEDaS5_EUlRfRKfE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv();
  v12 = v3 - (char *)v4;
  if (v3 != (char *)v4)
  {
    v13 = *a1;
    if (*a1)
    {
      if (v12 - 8 >= 8)
      {
        v16 = ((v12 - 8) >> 3) + 1;
        v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
        v17 = v4 + 1;
        v18 = 1;
        v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
        v20 = 1;
        do
        {
          v18 *= *(v17 - 1);
          v20 *= *v17;
          v17 += 2;
          v19 -= 2;
        }
        while (v19);
        v14 = v20 * v18;
        if (v16 == (v16 & 0x3FFFFFFFFFFFFFFELL))
          goto LABEL_21;
      }
      else
      {
        v14 = 1;
        v15 = (unint64_t *)a1[2];
      }
      do
      {
        v21 = *v15++;
        v14 *= v21;
      }
      while (v15 != (unint64_t *)v3);
LABEL_21:
      if (!v14)
        return result;
      v22 = (uint64_t)v12 >> 3;
      v158 = *a1;
      if ((uint64_t)v12 >> 3 != 3)
      {
        if (v22 != 2)
        {
          if (v22 == 1)
          {
            v23 = *v4;
            if (!*v4)
              return result;
            v24 = a2[8];
            v25 = a1[8];
            v26 = *a2;
            v27 = *(_QWORD *)a1[5];
            v28 = *(_QWORD *)a2[5];
            if (v23 < 0xC)
              goto LABEL_27;
            v29 = 0;
            if (v27 != 1 || v28 != 1)
              goto LABEL_28;
            v142 = (__n128 *)(4 * v25 + v13);
            v143 = (__n128 *)(4 * v24 + v26);
            if ((unint64_t)((char *)v142 - (char *)v143) < 0x20)
            {
LABEL_27:
              v29 = 0;
            }
            else
            {
              v29 = v23 & 0xFFFFFFFFFFFFFFF8;
              v24 += v23 & 0xFFFFFFFFFFFFFFF8;
              v25 += v23 & 0xFFFFFFFFFFFFFFF8;
              v144 = v143 + 1;
              v145 = v142 + 1;
              v146 = v23 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                result = v144[-1];
                v147 = *v144;
                v145[-1] = result;
                *v145 = v147;
                v144 += 2;
                v145 += 2;
                v146 -= 8;
              }
              while (v146);
              if (v23 == v29)
                return result;
            }
LABEL_28:
            v30 = v23 - v29;
            v31 = (unsigned __int32 *)(v26 + 4 * v24);
            v32 = 4 * v27;
            v33 = (unsigned __int32 *)(v13 + 4 * v25);
            do
            {
              result.n128_u32[0] = *v31;
              *v33 = *v31;
              v31 += v28;
              v33 = (unsigned __int32 *)((char *)v33 + v32);
              --v30;
            }
            while (v30);
            return result;
          }
          if ((v12 & 0x8000000000000000) != 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v103 = operator new(v12);
          bzero(v103, v12 & 0xFFFFFFFFFFFFFFF8);
          v104 = *a2;
          if (v12 >> 3 <= 1)
            v105 = 1;
          else
            v105 = v12 >> 3;
          v106 = a2[5];
          v107 = a2[8];
          v108 = v105 & 0x1FFFFFFFFFFFFFFELL;
          v109 = a1[5];
          while (v105 >= 2)
          {
            v112 = 0;
            v113 = 0;
            v114 = v105 & 0x1FFFFFFFFFFFFFFELL;
            v115 = (_QWORD *)(v109 + 8);
            v116 = v103 + 1;
            do
            {
              v112 += *(v115 - 1) * *(v116 - 1);
              v113 += *v115 * *v116;
              v116 += 2;
              v115 += 2;
              v114 -= 2;
            }
            while (v114);
            v110 = v113 + v112;
            v111 = v105 & 0x1FFFFFFFFFFFFFFELL;
            v13 = v158;
            if (v105 != v108)
              goto LABEL_84;
LABEL_86:
            if (v105 < 2)
            {
              v124 = 0;
              v125 = 0;
LABEL_91:
              v131 = v105 - v125;
              v132 = v125;
              v133 = (uint64_t *)(v106 + 8 * v125);
              v134 = &v103[v132];
              do
              {
                v136 = *v134++;
                v135 = v136;
                v137 = *v133++;
                v124 += v137 * v135;
                --v131;
              }
              while (v131);
              goto LABEL_93;
            }
            v126 = 0;
            v127 = 0;
            v128 = v105 & 0x1FFFFFFFFFFFFFFELL;
            v129 = (_QWORD *)(v106 + 8);
            v130 = v103 + 1;
            do
            {
              v126 += *(v129 - 1) * *(v130 - 1);
              v127 += *v129 * *v130;
              v130 += 2;
              v129 += 2;
              v128 -= 2;
            }
            while (v128);
            v124 = v127 + v126;
            v125 = v105 & 0x1FFFFFFFFFFFFFFELL;
            v13 = v158;
            if (v105 != v108)
              goto LABEL_91;
LABEL_93:
            *(_DWORD *)(v13 + 4 * v110) = *(_DWORD *)(v104 + 4 * (v107 + v124));
            if ((int)(v12 >> 3) >= 1)
            {
              v138 = (v12 >> 3) + 1;
              v139 = v12 >> 3;
              while (1)
              {
                v140 = (v138 - 2);
                v141 = v103[v140] + 1;
                v103[v140] = v141;
                if (v141 < v4[v140])
                  break;
                v103[(v138 - 2)] = 0;
                --v139;
                if ((unint64_t)--v138 <= 1)
                  goto LABEL_99;
              }
              if (v139 > 0)
                continue;
            }
LABEL_99:
            operator delete(v103);
            return result;
          }
          v110 = 0;
          v111 = 0;
LABEL_84:
          v117 = v105 - v111;
          v118 = v111;
          v119 = (uint64_t *)(v109 + 8 * v111);
          v120 = &v103[v118];
          do
          {
            v122 = *v120++;
            v121 = v122;
            v123 = *v119++;
            v110 += v123 * v121;
            --v117;
          }
          while (v117);
          goto LABEL_86;
        }
        v35 = *v4;
        if (!*v4)
          return result;
        v36 = 0;
        v37 = a2[8];
        v38 = a1[8];
        v39 = v4[1];
        v40 = *a2;
        v41 = (uint64_t *)a2[5];
        v42 = (uint64_t *)a1[5];
        v43 = *v42;
        v44 = (__n128 *)(v13 + 4 * v38);
        v45 = 4 * *v42;
        v46 = *a2 + 4 * v37;
        v47 = *v41;
        v48 = 4 * *v41;
        v49 = v39 & 0xFFFFFFFFFFFFFFF8;
        v50 = v44 + 1;
        v51 = (__n128 *)(v46 + 16);
        while (!v39)
        {
LABEL_33:
          v38 += v43;
          v37 += v47;
          ++v36;
          v50 = (__n128 *)((char *)v50 + v45);
          v51 = (__n128 *)((char *)v51 + v48);
          if (v36 == v35)
            return result;
        }
        v52 = v42[1];
        v53 = v41[1];
        if (v39 >= 8)
        {
          v54 = 0;
          if (v52 == 1 && v53 == 1)
          {
            v55 = v37;
            v56 = v38;
            if ((unint64_t)v44->n128_u64 + v45 * v36 - v46 - v48 * v36 >= 0x20)
            {
              v55 = v37 + v49 * v53;
              v63 = v51;
              v64 = v50;
              v65 = v39 & 0xFFFFFFFFFFFFFFF8;
              v56 = v38 + v49 * v52;
              do
              {
                result = v63[-1];
                v66 = *v63;
                v64[-1] = result;
                *v64 = v66;
                v64 += 2;
                v63 += 2;
                v65 -= 8;
              }
              while (v65);
              v54 = v39 & 0xFFFFFFFFFFFFFFF8;
              if (v39 == v49)
                goto LABEL_33;
            }
            goto LABEL_38;
          }
        }
        else
        {
          v54 = 0;
        }
        v55 = v37;
        v56 = v38;
LABEL_38:
        v57 = v39 - v54;
        v58 = (unsigned __int32 *)(v40 + 4 * v55);
        v59 = 4 * v53;
        v60 = 4 * v52;
        v61 = (unsigned __int32 *)(v158 + 4 * v56);
        do
        {
          result.n128_u32[0] = *v58;
          *v61 = *v58;
          v58 = (unsigned __int32 *)((char *)v58 + v59);
          v61 = (unsigned __int32 *)((char *)v61 + v60);
          --v57;
        }
        while (v57);
        goto LABEL_33;
      }
      v154 = *v4;
      if (!*v4)
        return result;
      v67 = 0;
      v68 = a2[8];
      v69 = a1[8];
      v70 = v4[1];
      v71 = (uint64_t *)a1[5];
      v150 = (uint64_t *)a2[5];
      v151 = a1[2];
      v152 = *v150;
      v153 = *v71;
      v156 = 4 * *v71;
      v155 = 4 * *v150;
      v148 = 4 * v68;
      v149 = (__n128 *)(v13 + 4 * v69);
      v72 = v149 + 1;
      v73 = 4 * v68 + 16;
      while (!v70)
      {
LABEL_53:
        v69 += v153;
        v68 += v152;
        ++v67;
        v72 = (__n128 *)((char *)v72 + v156);
        v73 += v155;
        if (v67 == v154)
          return result;
      }
      v74 = 0;
      v75 = *(_QWORD *)(v151 + 16);
      v76 = *a2;
      v77 = v71[1];
      v78 = v150[1];
      v79 = 4 * v77;
      v80 = v148 + v155 * v67 + *a2;
      v81 = 4 * v78;
      v82 = v75 & 0xFFFFFFFFFFFFFFF8;
      v83 = a2[5];
      v84 = (__n128 *)(*a2 + v73);
      v85 = v72;
      v86 = v68;
      v87 = v69;
      while (!v75)
      {
LABEL_56:
        v87 += v77;
        v86 += v78;
        ++v74;
        v85 = (__n128 *)((char *)v85 + v79);
        v84 = (__n128 *)((char *)v84 + v81);
        if (v74 == v70)
          goto LABEL_53;
      }
      v88 = v71[2];
      v89 = *(_QWORD *)(v83 + 16);
      if (v75 >= 8)
      {
        v90 = 0;
        if (v88 == 1 && v89 == 1)
        {
          v91 = v86;
          v92 = v87;
          if ((unint64_t)v149->n128_u64 + v156 * v67 + v79 * v74 - v80 - v81 * v74 >= 0x20)
          {
            v91 = v86 + v82 * v89;
            v99 = v84;
            v100 = v85;
            v101 = v75 & 0xFFFFFFFFFFFFFFF8;
            v92 = v87 + v82 * v88;
            do
            {
              result = v99[-1];
              v102 = *v99;
              v100[-1] = result;
              *v100 = v102;
              v100 += 2;
              v99 += 2;
              v101 -= 8;
            }
            while (v101);
            v90 = v75 & 0xFFFFFFFFFFFFFFF8;
            v13 = v158;
            if (v75 == v82)
              goto LABEL_56;
          }
          goto LABEL_61;
        }
      }
      else
      {
        v90 = 0;
      }
      v91 = v86;
      v92 = v87;
LABEL_61:
      v93 = v75 - v90;
      v94 = (unsigned __int32 *)(v76 + 4 * v91);
      v95 = 4 * v89;
      v96 = 4 * v88;
      v97 = (unsigned __int32 *)(v13 + 4 * v92);
      do
      {
        result.n128_u32[0] = *v94;
        *v97 = *v94;
        v94 = (unsigned __int32 *)((char *)v94 + v95);
        v97 = (unsigned __int32 *)((char *)v97 + v96);
        --v93;
      }
      while (v93);
      goto LABEL_56;
    }
  }
  return result;
}

void sub_19117B024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void _ZZN5nitro7ndarrayIfE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clIS1_EEDaS5_EUlRfRKfE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZN5nitro7ndarrayIfE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clIS1_EEDaS5_EUlRfRKfE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_19117B2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro7ndarrayIfE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clIS1_EEDaS5_EUlRfRKfE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19117B448(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19117B45C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19117B454);
}

uint64_t nitro::ndarray<float>::ndarray(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  *(_OWORD *)(a1 + 16) = 0u;
  v4 = (_QWORD *)(a1 + 16);
  v5 = (_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  if (*(_DWORD *)a2 != 9)
    nitro::ndarray<float>::ndarray(nitro::ndarray_container const&)::{lambda(void)#1}::operator()();
  v7 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(std::__shared_weak_count **)(a1 + 8);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v6;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v4 != (_QWORD *)(a2 + 24))
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v4, *(char **)(a2 + 24), *(char **)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  if (v5 != (_QWORD *)(a2 + 48))
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v5, *(char **)(a2 + 48), *(char **)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 72);
  return a1;
}

void sub_19117B594(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 48) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v6;
    operator delete(v6);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::ndarray(nitro::ndarray_container const&)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"int(nc.m_primitive)", 19);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"int(primitive_type_to_enum<T>::value)", 37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 108, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::ndarray<float>::ndarray(nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19117B8C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::ndarray(nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 108, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19117BA64(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19117BA78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19117BA70);
}

void _ZZZNK5nitro17ndarray_container5visitIZNKS0_4castIfEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19117BBD0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19117BBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19117BBDCLL);
}

BOOL nitro::ndarray<float>::is_canonical(uint64_t *a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;

  if (a1[8])
    return 0;
  v2 = (char *)a1[2];
  v3 = (char *)a1[3];
  v4 = v3 - v2;
  if (v3 == v2)
  {
    v7 = (unint64_t *)a1[5];
    goto LABEL_22;
  }
  v5 = *a1;
  if (*a1)
  {
    if ((unint64_t)(v4 - 8) < 8)
    {
      v5 = 1;
      v6 = (char *)a1[2];
      do
      {
LABEL_11:
        v13 = *(_QWORD *)v6;
        v6 += 8;
        v5 *= v13;
      }
      while (v6 != v3);
      goto LABEL_12;
    }
    v8 = ((unint64_t)(v4 - 8) >> 3) + 1;
    v6 = &v2[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
    v9 = v2 + 8;
    v10 = 1;
    v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
    v12 = 1;
    do
    {
      v10 *= *(v9 - 1);
      v12 *= *v9;
      v9 += 2;
      v11 -= 2;
    }
    while (v11);
    v5 = v12 * v10;
    if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
      goto LABEL_11;
  }
LABEL_12:
  v14 = v4 >> 3;
  v7 = (unint64_t *)a1[5];
  if (v14 <= 1)
    v14 = 1;
  if (v14 < 2)
  {
    v15 = 0;
    v16 = 0;
LABEL_19:
    v22 = v14 - v15;
    v23 = 8 * v15;
    v24 = (uint64_t *)&v7[v15];
    v25 = (uint64_t *)&v2[v23];
    do
    {
      v26 = *v25++;
      v27 = v26 - 1;
      v28 = *v24++;
      v16 += v28 * v27;
      --v22;
    }
    while (v22);
    goto LABEL_21;
  }
  v17 = 0;
  v18 = 0;
  v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
  v19 = v2 + 8;
  v20 = v7 + 1;
  v21 = v14 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    v17 += *(v20 - 1) * (*(v19 - 1) - 1);
    v18 += *v20 * (*v19 - 1);
    v19 += 2;
    v20 += 2;
    v21 -= 2;
  }
  while (v21);
  v16 = v18 + v17;
  if (v14 != v15)
    goto LABEL_19;
LABEL_21:
  if (v5 != v16 + 1)
    return 0;
LABEL_22:
  v29 = a1[6] - (_QWORD)v7;
  if (!v29)
    return 1;
  if (!*v7)
    return 0;
  if ((unint64_t)v29 < 0x10)
    return 1;
  v30 = v29 >> 3;
  v31 = 2;
  if (v30 > 2)
    v31 = v30;
  v32 = v7[1];
  if (!v32 || *v7 < v32)
    return 0;
  v33 = 0;
  v34 = v31 - 2;
  do
  {
    v35 = v33;
    if (v34 == v33)
      break;
    v36 = &v7[v33];
    v37 = v36[2];
    if (!v37)
      break;
    v38 = v36[1];
    v33 = v35 + 1;
  }
  while (v38 >= v37);
  return v35 + 2 >= v30;
}

void nitro::ndarray<float>::canonicalize(void)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"is_valid()", 10);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 555, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::ndarray<float>::canonicalize(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19117C028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

__n128 nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>::canonicalize(void)::{lambda(float &,float const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int32 *v31;
  uint64_t v32;
  unsigned __int32 *v33;
  __n128 result;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  __n128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  __n128 *v50;
  __n128 *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unsigned __int32 *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int32 *v61;
  __n128 *v63;
  __n128 *v64;
  unint64_t v65;
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  __n128 *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  __n128 *v84;
  __n128 *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unsigned __int32 *v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int32 *v97;
  __n128 *v99;
  __n128 *v100;
  unint64_t v101;
  __n128 v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  unint64_t v141;
  __n128 *v142;
  __n128 *v143;
  __n128 *v144;
  __n128 *v145;
  unint64_t v146;
  __n128 v147;
  uint64_t v148;
  __n128 *v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v158;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return result;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>::canonicalize(void)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>::canonicalize(void)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 != (char *)v4)
  {
    v13 = *a1;
    if (*a1)
    {
      if (v12 - 8 >= 8)
      {
        v16 = ((v12 - 8) >> 3) + 1;
        v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
        v17 = v4 + 1;
        v18 = 1;
        v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
        v20 = 1;
        do
        {
          v18 *= *(v17 - 1);
          v20 *= *v17;
          v17 += 2;
          v19 -= 2;
        }
        while (v19);
        v14 = v20 * v18;
        if (v16 == (v16 & 0x3FFFFFFFFFFFFFFELL))
          goto LABEL_21;
      }
      else
      {
        v14 = 1;
        v15 = (unint64_t *)a1[2];
      }
      do
      {
        v21 = *v15++;
        v14 *= v21;
      }
      while (v15 != (unint64_t *)v3);
LABEL_21:
      if (!v14)
        return result;
      v22 = (uint64_t)v12 >> 3;
      v158 = *a1;
      if ((uint64_t)v12 >> 3 != 3)
      {
        if (v22 != 2)
        {
          if (v22 == 1)
          {
            v23 = *v4;
            if (!*v4)
              return result;
            v24 = a2[8];
            v25 = a1[8];
            v26 = *a2;
            v27 = *(_QWORD *)a1[5];
            v28 = *(_QWORD *)a2[5];
            if (v23 < 0xC)
              goto LABEL_27;
            v29 = 0;
            if (v27 != 1 || v28 != 1)
              goto LABEL_28;
            v142 = (__n128 *)(4 * v25 + v13);
            v143 = (__n128 *)(4 * v24 + v26);
            if ((unint64_t)((char *)v142 - (char *)v143) < 0x20)
            {
LABEL_27:
              v29 = 0;
            }
            else
            {
              v29 = v23 & 0xFFFFFFFFFFFFFFF8;
              v24 += v23 & 0xFFFFFFFFFFFFFFF8;
              v25 += v23 & 0xFFFFFFFFFFFFFFF8;
              v144 = v143 + 1;
              v145 = v142 + 1;
              v146 = v23 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                result = v144[-1];
                v147 = *v144;
                v145[-1] = result;
                *v145 = v147;
                v144 += 2;
                v145 += 2;
                v146 -= 8;
              }
              while (v146);
              if (v23 == v29)
                return result;
            }
LABEL_28:
            v30 = v23 - v29;
            v31 = (unsigned __int32 *)(v26 + 4 * v24);
            v32 = 4 * v27;
            v33 = (unsigned __int32 *)(v13 + 4 * v25);
            do
            {
              result.n128_u32[0] = *v31;
              *v33 = *v31;
              v31 += v28;
              v33 = (unsigned __int32 *)((char *)v33 + v32);
              --v30;
            }
            while (v30);
            return result;
          }
          if ((v12 & 0x8000000000000000) != 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v103 = operator new(v12);
          bzero(v103, v12 & 0xFFFFFFFFFFFFFFF8);
          v104 = *a2;
          if (v12 >> 3 <= 1)
            v105 = 1;
          else
            v105 = v12 >> 3;
          v106 = a2[5];
          v107 = a2[8];
          v108 = v105 & 0x1FFFFFFFFFFFFFFELL;
          v109 = a1[5];
          while (v105 >= 2)
          {
            v112 = 0;
            v113 = 0;
            v114 = v105 & 0x1FFFFFFFFFFFFFFELL;
            v115 = (_QWORD *)(v109 + 8);
            v116 = v103 + 1;
            do
            {
              v112 += *(v115 - 1) * *(v116 - 1);
              v113 += *v115 * *v116;
              v116 += 2;
              v115 += 2;
              v114 -= 2;
            }
            while (v114);
            v110 = v113 + v112;
            v111 = v105 & 0x1FFFFFFFFFFFFFFELL;
            v13 = v158;
            if (v105 != v108)
              goto LABEL_84;
LABEL_86:
            if (v105 < 2)
            {
              v124 = 0;
              v125 = 0;
LABEL_91:
              v131 = v105 - v125;
              v132 = v125;
              v133 = (uint64_t *)(v106 + 8 * v125);
              v134 = &v103[v132];
              do
              {
                v136 = *v134++;
                v135 = v136;
                v137 = *v133++;
                v124 += v137 * v135;
                --v131;
              }
              while (v131);
              goto LABEL_93;
            }
            v126 = 0;
            v127 = 0;
            v128 = v105 & 0x1FFFFFFFFFFFFFFELL;
            v129 = (_QWORD *)(v106 + 8);
            v130 = v103 + 1;
            do
            {
              v126 += *(v129 - 1) * *(v130 - 1);
              v127 += *v129 * *v130;
              v130 += 2;
              v129 += 2;
              v128 -= 2;
            }
            while (v128);
            v124 = v127 + v126;
            v125 = v105 & 0x1FFFFFFFFFFFFFFELL;
            v13 = v158;
            if (v105 != v108)
              goto LABEL_91;
LABEL_93:
            *(_DWORD *)(v13 + 4 * v110) = *(_DWORD *)(v104 + 4 * (v107 + v124));
            if ((int)(v12 >> 3) >= 1)
            {
              v138 = (v12 >> 3) + 1;
              v139 = v12 >> 3;
              while (1)
              {
                v140 = (v138 - 2);
                v141 = v103[v140] + 1;
                v103[v140] = v141;
                if (v141 < v4[v140])
                  break;
                v103[(v138 - 2)] = 0;
                --v139;
                if ((unint64_t)--v138 <= 1)
                  goto LABEL_99;
              }
              if (v139 > 0)
                continue;
            }
LABEL_99:
            operator delete(v103);
            return result;
          }
          v110 = 0;
          v111 = 0;
LABEL_84:
          v117 = v105 - v111;
          v118 = v111;
          v119 = (uint64_t *)(v109 + 8 * v111);
          v120 = &v103[v118];
          do
          {
            v122 = *v120++;
            v121 = v122;
            v123 = *v119++;
            v110 += v123 * v121;
            --v117;
          }
          while (v117);
          goto LABEL_86;
        }
        v35 = *v4;
        if (!*v4)
          return result;
        v36 = 0;
        v37 = a2[8];
        v38 = a1[8];
        v39 = v4[1];
        v40 = *a2;
        v41 = (uint64_t *)a2[5];
        v42 = (uint64_t *)a1[5];
        v43 = *v42;
        v44 = (__n128 *)(v13 + 4 * v38);
        v45 = 4 * *v42;
        v46 = *a2 + 4 * v37;
        v47 = *v41;
        v48 = 4 * *v41;
        v49 = v39 & 0xFFFFFFFFFFFFFFF8;
        v50 = v44 + 1;
        v51 = (__n128 *)(v46 + 16);
        while (!v39)
        {
LABEL_33:
          v38 += v43;
          v37 += v47;
          ++v36;
          v50 = (__n128 *)((char *)v50 + v45);
          v51 = (__n128 *)((char *)v51 + v48);
          if (v36 == v35)
            return result;
        }
        v52 = v42[1];
        v53 = v41[1];
        if (v39 >= 8)
        {
          v54 = 0;
          if (v52 == 1 && v53 == 1)
          {
            v55 = v37;
            v56 = v38;
            if ((unint64_t)v44->n128_u64 + v45 * v36 - v46 - v48 * v36 >= 0x20)
            {
              v55 = v37 + v49 * v53;
              v63 = v51;
              v64 = v50;
              v65 = v39 & 0xFFFFFFFFFFFFFFF8;
              v56 = v38 + v49 * v52;
              do
              {
                result = v63[-1];
                v66 = *v63;
                v64[-1] = result;
                *v64 = v66;
                v64 += 2;
                v63 += 2;
                v65 -= 8;
              }
              while (v65);
              v54 = v39 & 0xFFFFFFFFFFFFFFF8;
              if (v39 == v49)
                goto LABEL_33;
            }
            goto LABEL_38;
          }
        }
        else
        {
          v54 = 0;
        }
        v55 = v37;
        v56 = v38;
LABEL_38:
        v57 = v39 - v54;
        v58 = (unsigned __int32 *)(v40 + 4 * v55);
        v59 = 4 * v53;
        v60 = 4 * v52;
        v61 = (unsigned __int32 *)(v158 + 4 * v56);
        do
        {
          result.n128_u32[0] = *v58;
          *v61 = *v58;
          v58 = (unsigned __int32 *)((char *)v58 + v59);
          v61 = (unsigned __int32 *)((char *)v61 + v60);
          --v57;
        }
        while (v57);
        goto LABEL_33;
      }
      v154 = *v4;
      if (!*v4)
        return result;
      v67 = 0;
      v68 = a2[8];
      v69 = a1[8];
      v70 = v4[1];
      v71 = (uint64_t *)a1[5];
      v150 = (uint64_t *)a2[5];
      v151 = a1[2];
      v152 = *v150;
      v153 = *v71;
      v156 = 4 * *v71;
      v155 = 4 * *v150;
      v148 = 4 * v68;
      v149 = (__n128 *)(v13 + 4 * v69);
      v72 = v149 + 1;
      v73 = 4 * v68 + 16;
      while (!v70)
      {
LABEL_53:
        v69 += v153;
        v68 += v152;
        ++v67;
        v72 = (__n128 *)((char *)v72 + v156);
        v73 += v155;
        if (v67 == v154)
          return result;
      }
      v74 = 0;
      v75 = *(_QWORD *)(v151 + 16);
      v76 = *a2;
      v77 = v71[1];
      v78 = v150[1];
      v79 = 4 * v77;
      v80 = v148 + v155 * v67 + *a2;
      v81 = 4 * v78;
      v82 = v75 & 0xFFFFFFFFFFFFFFF8;
      v83 = a2[5];
      v84 = (__n128 *)(*a2 + v73);
      v85 = v72;
      v86 = v68;
      v87 = v69;
      while (!v75)
      {
LABEL_56:
        v87 += v77;
        v86 += v78;
        ++v74;
        v85 = (__n128 *)((char *)v85 + v79);
        v84 = (__n128 *)((char *)v84 + v81);
        if (v74 == v70)
          goto LABEL_53;
      }
      v88 = v71[2];
      v89 = *(_QWORD *)(v83 + 16);
      if (v75 >= 8)
      {
        v90 = 0;
        if (v88 == 1 && v89 == 1)
        {
          v91 = v86;
          v92 = v87;
          if ((unint64_t)v149->n128_u64 + v156 * v67 + v79 * v74 - v80 - v81 * v74 >= 0x20)
          {
            v91 = v86 + v82 * v89;
            v99 = v84;
            v100 = v85;
            v101 = v75 & 0xFFFFFFFFFFFFFFF8;
            v92 = v87 + v82 * v88;
            do
            {
              result = v99[-1];
              v102 = *v99;
              v100[-1] = result;
              *v100 = v102;
              v100 += 2;
              v99 += 2;
              v101 -= 8;
            }
            while (v101);
            v90 = v75 & 0xFFFFFFFFFFFFFFF8;
            v13 = v158;
            if (v75 == v82)
              goto LABEL_56;
          }
          goto LABEL_61;
        }
      }
      else
      {
        v90 = 0;
      }
      v91 = v86;
      v92 = v87;
LABEL_61:
      v93 = v75 - v90;
      v94 = (unsigned __int32 *)(v76 + 4 * v91);
      v95 = 4 * v89;
      v96 = 4 * v88;
      v97 = (unsigned __int32 *)(v13 + 4 * v92);
      do
      {
        result.n128_u32[0] = *v94;
        *v97 = *v94;
        v94 = (unsigned __int32 *)((char *)v94 + v95);
        v97 = (unsigned __int32 *)((char *)v97 + v96);
        --v93;
      }
      while (v93);
      goto LABEL_56;
    }
  }
  return result;
}

void sub_19117C784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::ndarray<float>::ndarray(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  v8 = (_BYTE *)a2[2];
  v7 = (_BYTE *)a2[3];
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)operator new(v7 - v8);
    a1[2] = v10;
    a1[3] = v10;
    v11 = &v10[8 * (v9 >> 3)];
    a1[4] = v11;
    memcpy(v10, v8, v9);
    a1[3] = v11;
  }
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  v13 = (_BYTE *)a2[5];
  v12 = (_BYTE *)a2[6];
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v15 = (char *)operator new(v12 - v13);
    a1[5] = v15;
    a1[6] = v15;
    v16 = &v15[8 * (v14 >> 3)];
    a1[7] = v16;
    memcpy(v15, v13, v14);
    a1[6] = v16;
  }
  a1[8] = a2[8];
  return a1;
}

void sub_19117C89C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 48) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v6;
    operator delete(v6);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::canonicalize(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 555, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19117CA14(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19117CA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19117CA20);
}

void nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>::canonicalize(void)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>::canonicalize(void)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>::canonicalize(void)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>::canonicalize(void)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19117CCA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>::canonicalize(void)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>::canonicalize(void)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19117CE4C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19117CE60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19117CE58);
}

uint64_t std::vector<nitro::ndarray<float>>::__push_back_slow_path<nitro::ndarray<float> const&>(int64x2_t *a1, _QWORD *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64x2_t v15;
  char *v16;
  char *v18;
  int64x2_t v19;
  char *v20;
  int64x2_t *v21;

  v3 = 0x8E38E38E38E38E39 * ((a1->i64[1] - a1->i64[0]) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  if (0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v4)
    v4 = 0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  if (0x8E38E38E38E38E39 * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0x1C71C71C71C71C7)
    v6 = 0x38E38E38E38E38ELL;
  else
    v6 = v4;
  v21 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x38E38E38E38E38ELL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(72 * v6);
  }
  else
  {
    v7 = 0;
  }
  v18 = v7;
  v19.i64[0] = (uint64_t)&v7[72 * v3];
  v20 = &v7[72 * v6];
  nitro::ndarray<float>::ndarray(v19.i64[0], a2);
  v8 = v19.i64[0];
  v9 = v19.i64[0] + 72;
  v19.i64[1] = v19.i64[0] + 72;
  v11 = a1->i64[0];
  v10 = a1->u64[1];
  if (v10 == a1->i64[0])
  {
    v15 = vdupq_n_s64(v10);
  }
  else
  {
    v12 = 0;
    do
    {
      v13 = v8 + v12;
      v14 = v10 + v12;
      *(_OWORD *)(v13 - 72) = *(_OWORD *)(v10 + v12 - 72);
      *(_QWORD *)(v14 - 72) = 0;
      *(_QWORD *)(v14 - 64) = 0;
      *(_QWORD *)(v13 - 56) = 0;
      *(_QWORD *)(v13 - 48) = 0;
      *(_QWORD *)(v13 - 40) = 0;
      *(_OWORD *)(v13 - 56) = *(_OWORD *)(v10 + v12 - 56);
      *(_QWORD *)(v13 - 40) = *(_QWORD *)(v10 + v12 - 40);
      *(_QWORD *)(v14 - 56) = 0;
      *(_QWORD *)(v14 - 48) = 0;
      *(_QWORD *)(v14 - 40) = 0;
      *(_QWORD *)(v13 - 32) = 0;
      *(_QWORD *)(v13 - 24) = 0;
      *(_QWORD *)(v13 - 16) = 0;
      *(_OWORD *)(v13 - 32) = *(_OWORD *)(v10 + v12 - 32);
      *(_QWORD *)(v13 - 16) = *(_QWORD *)(v10 + v12 - 16);
      *(_QWORD *)(v14 - 32) = 0;
      *(_QWORD *)(v14 - 24) = 0;
      *(_QWORD *)(v14 - 16) = 0;
      *(_QWORD *)(v13 - 8) = *(_QWORD *)(v10 + v12 - 8);
      v12 -= 72;
    }
    while (v10 + v12 != v11);
    v15 = *a1;
    v9 = v19.i64[1];
    v8 += v12;
  }
  a1->i64[0] = v8;
  a1->i64[1] = v9;
  v19 = v15;
  v16 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v20;
  v20 = v16;
  v18 = (char *)v15.i64[0];
  std::__split_buffer<nitro::ndarray<float>>::~__split_buffer((uint64_t)&v18);
  return v9;
}

void sub_19117D034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nitro::ndarray<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<nitro::ndarray<float>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 72;
    v4 = *(void **)(i - 32);
    if (v4)
    {
      *(_QWORD *)(i - 24) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(i - 56);
    if (v5)
    {
      *(_QWORD *)(i - 48) = v5;
      operator delete(v5);
    }
    v6 = *(std::__shared_weak_count **)(i - 64);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *std::vector<nitro::flexible_type>::__push_back_slow_path<nitro::flexible_type>(char **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;

  v3 = (a1[1] - *a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v6 = a1[2] - *a1;
  if (v6 >> 3 > v4)
    v4 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  if (v7)
  {
    if (v7 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v8 = (char *)operator new(16 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[16 * v3];
  v10 = &v8[16 * v7];
  *(_QWORD *)v9 = *(_QWORD *)a2;
  v9[8] = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a2 + 8) = 0;
  v11 = v9 + 16;
  v12 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (!v13)
      return v11;
    goto LABEL_17;
  }
  do
  {
    *((_QWORD *)v9 - 2) = 0;
    v9 -= 16;
    v9[8] = 0;
    v14 = *((_QWORD *)v13 - 2);
    v13 -= 16;
    v9[8] = v13[8];
    *(_QWORD *)v9 = v14;
    v9[8] = v13[8];
    v13[8] = 0;
  }
  while (v13 != v12);
  v15 = *a1;
  v13 = a1[1];
  *a1 = v9;
  a1[1] = v11;
  a1[2] = v10;
  if (v13 != v15)
  {
    do
    {
      v13 -= 16;
      std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(a1 + 2), (uint64_t)v13);
    }
    while (v13 != v15);
    v13 = v15;
  }
  if (v13)
LABEL_17:
    operator delete(v13);
  return v11;
}

void std::__shared_ptr_pointer<float *,std::shared_ptr<float>::__shared_ptr_default_delete<float,float>,std::allocator<float>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<float *,std::shared_ptr<float>::__shared_ptr_default_delete<float,float>,std::allocator<float>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x19401CD90);
  return result;
}

uint64_t std::__shared_ptr_pointer<float *,std::shared_ptr<float>::__shared_ptr_default_delete<float,float>,std::allocator<float>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A8D794
    || ((v3 & 0x8000000191A8D794 & 0x8000000000000000) != 0) != __OFSUB__(v3, 0x8000000191A8D794)
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A8D794 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<float  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<float  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x19401CD78);
  return result;
}

uint64_t std::__shared_ptr_pointer<float  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A8D7CELL
    || ((v3 & 0x8000000191A8D7CELL & 0x8000000000000000) != 0) != __OFSUB__(v3, 0x8000000191A8D7CELL)
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A8D7CELL & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t nitro::ndarray_container::ndarray_container<float,(void *)0>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  const void *v12;
  int64_t v13;
  char *v14;
  char *v15;
  const void *v16;
  int64_t v17;
  char *v18;
  char *v19;

  *(_DWORD *)a1 = 9;
  v8 = a2[1];
  *(_QWORD *)(a1 + 8) = *a2;
  *(_QWORD *)(a1 + 16) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v12 = *(const void **)a3;
  v11 = *(_QWORD *)(a3 + 8);
  v13 = v11 - *(_QWORD *)a3;
  if (v11 != *(_QWORD *)a3)
  {
    if (v13 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v14 = (char *)operator new(v11 - *(_QWORD *)a3);
    *(_QWORD *)(a1 + 24) = v14;
    *(_QWORD *)(a1 + 32) = v14;
    v15 = &v14[8 * (v13 >> 3)];
    *(_QWORD *)(a1 + 40) = v15;
    memcpy(v14, v12, v13);
    *(_QWORD *)(a1 + 32) = v15;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v16 = *(const void **)a4;
  v17 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
  if (v17)
  {
    if (v17 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v18 = (char *)operator new(v17);
    *(_QWORD *)(a1 + 48) = v18;
    *(_QWORD *)(a1 + 56) = v18;
    v19 = &v18[8 * (v17 >> 3)];
    *(_QWORD *)(a1 + 64) = v19;
    memcpy(v18, v16, v17);
    *(_QWORD *)(a1 + 56) = v19;
  }
  *(_QWORD *)(a1 + 72) = a5;
  nitro::impl::fill_shape_and_stride((uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48), (_QWORD *)(a1 + 72));
  return a1;
}

{
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  const void *v12;
  int64_t v13;
  char *v14;
  char *v15;
  _QWORD *v16;

  *(_DWORD *)a1 = 9;
  v8 = a2[1];
  *(_QWORD *)(a1 + 8) = *a2;
  *(_QWORD *)(a1 + 16) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v12 = *(const void **)a4;
  v11 = *(_QWORD *)(a4 + 8);
  v13 = v11 - *(_QWORD *)a4;
  if (v11 != *(_QWORD *)a4)
  {
    if (v13 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v14 = (char *)operator new(v11 - *(_QWORD *)a4);
    *(_QWORD *)(a1 + 48) = v14;
    *(_QWORD *)(a1 + 56) = v14;
    v15 = &v14[8 * (v13 >> 3)];
    *(_QWORD *)(a1 + 64) = v15;
    memcpy(v14, v12, v13);
    *(_QWORD *)(a1 + 56) = v15;
  }
  *(_QWORD *)(a1 + 72) = a5;
  v16 = operator new(8uLL);
  *v16 = a3 - a5;
  *(_QWORD *)(a1 + 32) = v16 + 1;
  *(_QWORD *)(a1 + 40) = v16 + 1;
  *(_QWORD *)(a1 + 24) = v16;
  nitro::impl::fill_shape_and_stride((uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48), (_QWORD *)(a1 + 72));
  return a1;
}

void sub_19117D4B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v2 + 56) = v6;
    operator delete(v6);
  }
  v7 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 32) = v7;
    operator delete(v7);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19117D608(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v2 + 56) = v6;
    operator delete(v6);
  }
  v7 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 32) = v7;
    operator delete(v7);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19117D648()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x19117D628);
  JUMPOUT(0x19117D61CLL);
}

void std::vector<nitro::flexible_type>::__assign_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(uint64_t *__sz, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;

  v6 = a2;
  v9 = (uint64_t)(__sz + 2);
  v8 = __sz[2];
  v10 = *__sz;
  if (a4 <= (v8 - *__sz) >> 4)
  {
    v22 = (__sz[1] - v10) >> 4;
    if (v22 >= a4)
    {
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nitro::flexible_type *,nitro::flexible_type *,nitro::flexible_type *>((uint64_t)&v34, a2, a3, v10);
      v31 = v30;
      v32 = __sz[1];
      if (v32 != v30)
      {
        do
        {
          v32 -= 16;
          std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v9, v32);
        }
        while (v32 != v31);
      }
      __sz[1] = v31;
    }
    else
    {
      v23 = &a2[2 * v22];
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nitro::flexible_type *,nitro::flexible_type *,nitro::flexible_type *>((uint64_t)&v33, a2, v23, v10);
      v24 = __sz[1];
      while (v23 != a3)
      {
        *(_QWORD *)v24 = 0;
        *(_BYTE *)(v24 + 8) = 0;
        if (v23 != (uint64_t *)v24)
        {
          v25 = *v23;
          *(_BYTE *)(v24 + 8) = *((_BYTE *)v23 + 8);
          *(_QWORD *)v24 = v25;
          v26 = *((unsigned __int8 *)v23 + 8);
          *(_BYTE *)(v24 + 8) = v26;
          if ((v26 - 2) < 4 || v26 == 9)
          {
            v28 = *(unint64_t **)v24;
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 + 1, v28));
          }
        }
        v23 += 2;
        v24 += 16;
      }
      __sz[1] = v24;
    }
  }
  else
  {
    if (v10)
    {
      v11 = __sz[1];
      v12 = (void *)*__sz;
      if (v11 != v10)
      {
        do
        {
          v11 -= 16;
          std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v9, v11);
        }
        while (v11 != v10);
        v12 = (void *)*__sz;
      }
      __sz[1] = v10;
      operator delete(v12);
      v8 = 0;
      *__sz = 0;
      __sz[1] = 0;
      __sz[2] = 0;
    }
    if (a4 >> 60)
      goto LABEL_44;
    v13 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v13 = a4;
    v14 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v15 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v15 = v13;
    if (v15 >> 60)
LABEL_44:
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v16 = 2 * v15;
    v17 = (uint64_t *)operator new(16 * v15);
    *__sz = (uint64_t)v17;
    __sz[1] = (uint64_t)v17;
    __sz[2] = (uint64_t)&v17[v16];
    while (v6 != a3)
    {
      *v17 = 0;
      *((_BYTE *)v17 + 8) = 0;
      if (v6 != v17)
      {
        *v17 = *v6;
        v18 = *((unsigned __int8 *)v6 + 8);
        *((_BYTE *)v17 + 8) = v18;
        if ((v18 - 2) < 4 || v18 == 9)
        {
          v20 = (unint64_t *)*v17;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 + 1, v20));
        }
      }
      v6 += 2;
      v17 += 2;
    }
    __sz[1] = (uint64_t)v17;
  }
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nitro::flexible_type *,nitro::flexible_type *,nitro::flexible_type *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  void *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  void *v35;
  void *v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  uint64_t v40;
  int v41;
  unint64_t *v43;
  unint64_t v44;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != (uint64_t *)a4)
      {
        switch(*(_BYTE *)(a4 + 8))
        {
          case 2:
            v7 = *(unint64_t **)a4;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              v10 = *(unint64_t **)a4;
              if (!*(_QWORD *)a4)
                goto LABEL_55;
              if (*((char *)v10 + 31) < 0)
                operator delete((void *)v10[1]);
              v11 = v10;
              v12 = 0x1012C404EF22A49;
              goto LABEL_54;
            }
            break;
          case 3:
            v13 = *(unint64_t **)a4;
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              v16 = *(unint64_t **)a4;
              if (!*(_QWORD *)a4)
                goto LABEL_55;
              v17 = (void *)v16[1];
              if (v17)
              {
                v16[2] = (unint64_t)v17;
                operator delete(v17);
              }
              v11 = v16;
              v12 = 0x1080C409938AC02;
              goto LABEL_54;
            }
            break;
          case 4:
            v18 = *(unint64_t **)a4;
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
            {
              v21 = *(unint64_t **)a4;
              if (!*(_QWORD *)a4)
                goto LABEL_55;
              v22 = v21[1];
              if (v22)
              {
                v23 = v21[2];
                v24 = (void *)v21[1];
                if (v23 != v22)
                {
                  do
                  {
                    v23 -= 16;
                    std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v21 + 3), v23);
                  }
                  while (v23 != v22);
                  v24 = (void *)v21[1];
                }
                v21[2] = v22;
                goto LABEL_38;
              }
              goto LABEL_39;
            }
            break;
          case 5:
            v25 = *(unint64_t **)a4;
            do
            {
              v26 = __ldaxr(v25);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, v25));
            if (!v27)
            {
              v21 = *(unint64_t **)a4;
              if (!*(_QWORD *)a4)
                goto LABEL_55;
              v28 = v21[1];
              if (v28)
              {
                v29 = v21[2];
                v30 = (void *)v21[1];
                if (v29 != v28)
                {
                  do
                    v29 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v29 - 32);
                  while (v29 != v28);
                  v30 = (void *)v21[1];
                }
                v21[2] = v28;
                v24 = v30;
LABEL_38:
                operator delete(v24);
              }
LABEL_39:
              v11 = v21;
              v12 = 0x1020C405E66F15BLL;
              goto LABEL_54;
            }
            break;
          case 9:
            v31 = *(unint64_t **)a4;
            do
            {
              v32 = __ldaxr(v31);
              v33 = v32 - 1;
            }
            while (__stlxr(v33, v31));
            if (!v33)
            {
              v34 = *(unint64_t **)a4;
              if (*(_QWORD *)a4)
              {
                v35 = (void *)v34[7];
                if (v35)
                {
                  v34[8] = (unint64_t)v35;
                  operator delete(v35);
                }
                v36 = (void *)v34[4];
                if (v36)
                {
                  v34[5] = (unint64_t)v36;
                  operator delete(v36);
                }
                v37 = (std::__shared_weak_count *)v34[3];
                if (v37)
                {
                  p_shared_owners = (unint64_t *)&v37->__shared_owners_;
                  do
                    v39 = __ldaxr(p_shared_owners);
                  while (__stlxr(v39 - 1, p_shared_owners));
                  if (!v39)
                  {
                    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                    std::__shared_weak_count::__release_weak(v37);
                  }
                }
                v11 = v34;
                v12 = 0x10B0C4002311774;
LABEL_54:
                MEMORY[0x19401CD90](v11, v12);
              }
LABEL_55:
              *(_QWORD *)a4 = 0;
            }
            break;
          default:
            break;
        }
        v40 = *v5;
        *(_BYTE *)(a4 + 8) = *((_BYTE *)v5 + 8);
        *(_QWORD *)a4 = v40;
        v41 = *((unsigned __int8 *)v5 + 8);
        *(_BYTE *)(a4 + 8) = v41;
        if ((v41 - 2) < 4 || v41 == 9)
        {
          v43 = *(unint64_t **)a4;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 + 1, v43));
        }
      }
      v5 += 2;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::vector<nitro::ndarray<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 4);
        if (v6)
        {
          *((_QWORD *)v4 - 3) = v6;
          operator delete(v6);
        }
        v7 = (void *)*((_QWORD *)v4 - 7);
        if (v7)
        {
          *((_QWORD *)v4 - 6) = v7;
          operator delete(v7);
        }
        v8 = (std::__shared_weak_count *)*((_QWORD *)v4 - 8);
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v4 -= 72;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::vector<nitro::nitro_variable>::__push_back_slow_path<nitro::nitro_variable>(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v5 >> 4 > v4)
    v4 = v5 >> 4;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
  v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v4;
  if (v7 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v9 = 32 * v7;
  v10 = (char *)operator new(32 * v7);
  v11 = &v10[32 * v3];
  v12 = &v10[v9];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *((_QWORD *)v11 + 2) = *(_QWORD *)(a2 + 16);
  v11[24] = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a2 + 24) = 0;
  v13 = v11 + 32;
  v15 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    if (!v14)
      return v13;
    goto LABEL_14;
  }
  v16 = 0;
  do
  {
    v17 = &v11[v16];
    v18 = &v14[v16];
    *((_OWORD *)v17 - 2) = *(_OWORD *)&v14[v16 - 32];
    *((_QWORD *)v18 - 4) = 0;
    *((_QWORD *)v18 - 3) = 0;
    *((_QWORD *)v17 - 2) = *(_QWORD *)&v14[v16 - 16];
    *(v17 - 8) = v14[v16 - 8];
    *(v18 - 8) = 0;
    v16 -= 32;
  }
  while (&v14[v16] != v15);
  v19 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = &v11[v16];
  a1[1] = v13;
  a1[2] = v12;
  if (v14 != v19)
  {
    do
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v14 - 32));
    while (v14 != v19);
    v14 = v19;
  }
  if (v14)
LABEL_14:
    operator delete(v14);
  return v13;
}

uint64_t **std::__tree<std::__value_type<std::string,nitro::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  size_t v9;
  const void *v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  char *v23;
  std::string *v24;
  __int128 *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t *v28;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    if (v8 >= 0)
      v10 = a2;
    else
      v10 = *a2;
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v6;
        v14 = (const void *)v6[4];
        v12 = v6 + 4;
        v13 = v14;
        v15 = *((char *)v12 + 23);
        if (v15 >= 0)
          v16 = *((unsigned __int8 *)v12 + 23);
        else
          v16 = v12[1];
        if (v15 >= 0)
          v17 = v12;
        else
          v17 = v13;
        if (v16 >= v9)
          v18 = v9;
        else
          v18 = v16;
        v19 = memcmp(v10, v17, v18);
        v20 = v9 < v16;
        if (v19)
          v20 = v19 < 0;
        if (!v20)
          break;
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_27;
      }
      v21 = memcmp(v17, v10, v18);
      v22 = v16 < v9;
      if (v21)
        v22 = v21 < 0;
      if (!v22)
        return v11;
      v6 = v11[1];
      if (!v6)
      {
        v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v11 = a1 + 1;
LABEL_27:
    v23 = (char *)operator new(0x48uLL);
    v24 = (std::string *)(v23 + 32);
    v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)v25, *((_QWORD *)v25 + 1));
    }
    else
    {
      v26 = *v25;
      *((_QWORD *)v23 + 6) = *((_QWORD *)v25 + 2);
      *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v26;
    }
    *((_QWORD *)v23 + 7) = 0;
    v23[64] = 0;
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = 0;
    *((_QWORD *)v23 + 2) = v11;
    *v7 = (uint64_t *)v23;
    v27 = (uint64_t *)**a1;
    v28 = (uint64_t *)v23;
    if (v27)
    {
      *a1 = v27;
      v28 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_19117DEF0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1_0()
{
  JUMPOUT(0x19401CD90);
}

void OUTLINED_FUNCTION_3_3(unint64_t *a1@<X8>)
{
  __ldaxr(a1);
}

void OUTLINED_FUNCTION_4_2()
{
  JUMPOUT(0x19401CD90);
}

void OUTLINED_FUNCTION_5_1()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_QWORD *)v0 = v2;
  *(_DWORD *)(v0 + 8) = v1;
}

void OUTLINED_FUNCTION_6_0()
{
  JUMPOUT(0x19401CD90);
}

void OUTLINED_FUNCTION_7_1()
{
  JUMPOUT(0x19401CD90);
}

void OUTLINED_FUNCTION_9_0(void *__p)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = __p;
  operator delete(__p);
}

void OUTLINED_FUNCTION_10_1()
{
  uint64_t v0;

  operator delete(*(void **)(v0 + 8));
}

void nitro::nitro_program::run(_QWORD *a1)
{
  std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair(a1);
  OUTLINED_FUNCTION_4_2();
}

void nitro::variable_type::get_layer_shape(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_190DAF000, log, OS_LOG_TYPE_ERROR, "[Nitro]: Shape query for variable type not supported so using unknown shape", v1, 2u);
}

void nitro::ndarray_container::ndarray_container(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  void *v5;

  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v4;
    operator delete(v4);
  }
  v5 = *(void **)a3;
  if (*(_QWORD *)a3)
  {
    *(_QWORD *)(a3 + 8) = v5;
    operator delete(v5);
  }
  OUTLINED_FUNCTION_2();
}

void nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()(uint64_t a1)
{
  std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(a1);
  OUTLINED_FUNCTION_1_0();
}

void nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()(unint64_t **a1)
{
  unint64_t *v1;
  char v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v1 = *a1;
  do
    OUTLINED_FUNCTION_3_3(v1);
  while (__stlxr(v4, v1));
  if (v2)
  {
    v5 = *v3;
    if (*v3)
    {
      if (*(char *)(v5 + 31) < 0)
        operator delete(*(void **)(v5 + 8));
      OUTLINED_FUNCTION_6_0();
    }
  }
  OUTLINED_FUNCTION_2();
}

{
  unint64_t *v1;
  char v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;

  v1 = *a1;
  do
    OUTLINED_FUNCTION_3_3(v1);
  while (__stlxr(v4, v1));
  if (v2)
  {
    v5 = *v3;
    if (*v3)
    {
      v6 = *(void **)(v5 + 8);
      if (v6)
      {
        *(_QWORD *)(v5 + 16) = v6;
        operator delete(v6);
      }
      OUTLINED_FUNCTION_7_1();
    }
  }
  OUTLINED_FUNCTION_2();
}

{
  unint64_t *v1;
  char v2;
  _QWORD **v3;
  unint64_t v4;
  _QWORD *v5;

  v1 = *a1;
  do
    OUTLINED_FUNCTION_3_3(v1);
  while (__stlxr(v4, v1));
  if (v2)
  {
    v5 = *v3;
    if (v5)
    {
      std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair(v5);
      OUTLINED_FUNCTION_4_2();
    }
  }
}

{
  unint64_t *v1;
  char v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v1 = *a1;
  do
    OUTLINED_FUNCTION_3_3(v1);
  while (__stlxr(v4, v1));
  if (v2)
  {
    v5 = *v3;
    if (v5)
    {
      std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(v5);
      OUTLINED_FUNCTION_1_0();
    }
  }
}

{
  unint64_t *v1;
  char v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v1 = *a1;
  do
    OUTLINED_FUNCTION_3_3(v1);
  while (__stlxr(v4, v1));
  if (v2)
  {
    v5 = *v3;
    if (v5)
    {
      std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair(v5);
      OUTLINED_FUNCTION_1_0();
    }
  }
}

void nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()()
{
  unint64_t *v0;
  char v1;
  uint64_t v2;
  unint64_t v3;

  OUTLINED_FUNCTION_0_7();
  do
    OUTLINED_FUNCTION_3_3(v0);
  while (__stlxr(v3, v0));
  if (v1 && *(_QWORD *)v2)
  {
    if (*(char *)(*(_QWORD *)v2 + 31) < 0)
      OUTLINED_FUNCTION_10_1();
    OUTLINED_FUNCTION_6_0();
  }
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_10();
}

{
  unint64_t *v0;
  char v1;
  uint64_t v2;
  unint64_t v3;
  void *v4;

  OUTLINED_FUNCTION_0_7();
  do
    OUTLINED_FUNCTION_3_3(v0);
  while (__stlxr(v3, v0));
  if (v1 && *(_QWORD *)v2)
  {
    v4 = *(void **)(*(_QWORD *)v2 + 8);
    if (v4)
      OUTLINED_FUNCTION_9_0(v4);
    OUTLINED_FUNCTION_7_1();
  }
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_10();
}

{
  unint64_t *v0;
  char v1;
  _QWORD **v2;
  unint64_t v3;
  _QWORD *v4;

  OUTLINED_FUNCTION_0_7();
  do
    OUTLINED_FUNCTION_3_3(v0);
  while (__stlxr(v3, v0));
  if (v1)
  {
    v4 = *v2;
    if (v4)
    {
      std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair(v4);
      OUTLINED_FUNCTION_4_2();
    }
  }
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_10();
}

{
  unint64_t *v0;
  char v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_0_7();
  do
    OUTLINED_FUNCTION_3_3(v0);
  while (__stlxr(v3, v0));
  if (v1)
  {
    v4 = *v2;
    if (v4)
    {
      std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(v4);
      OUTLINED_FUNCTION_1_0();
    }
  }
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_10();
}

{
  unint64_t *v0;
  char v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_0_7();
  do
    OUTLINED_FUNCTION_3_3(v0);
  while (__stlxr(v3, v0));
  if (v1)
  {
    v4 = *v2;
    if (v4)
    {
      std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair(v4);
      OUTLINED_FUNCTION_1_0();
    }
  }
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_10();
}

void nitro::nitro_class::load_nitro_class(nitro::nitro_class *this, const nitro::ir::DEFCLASS *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  const nitro::ir::DEFMEMBERFUN **v10;
  const nitro::ir::DEFMEMBERFUN **i;
  char *v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v31;
  void *v32[2];
  __int128 v33;
  void *__p[2];
  __int128 v35;
  int v36;
  uint64_t *v37;

  std::string::operator=((std::string *)((char *)this + 16), (const std::string *)((char *)a2 + 8));
  v3 = (uint64_t *)*((_QWORD *)a2 + 4);
  v4 = (uint64_t *)*((_QWORD *)a2 + 5);
  if (v3 != v4)
  {
    while (1)
    {
      v5 = *v3;
      v32[0] = (void *)(*v3 + 8);
      v6 = std::__hash_table<std::__hash_value_type<unsigned long,nitro::variable_type>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::variable_type>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::variable_type>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::variable_type>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)this + 40, (unint64_t *)v32[0], (uint64_t)&std::piecewise_construct, (_QWORD **)v32);
      v7 = *((unsigned int *)v6 + 14);
      v8 = *(unsigned int *)(v5 + 48);
      if ((_DWORD)v7 != -1)
        break;
      if ((_DWORD)v8 != -1)
        goto LABEL_4;
LABEL_5:
      if (++v3 == v4)
        goto LABEL_9;
    }
    if ((_DWORD)v8 == -1)
    {
      v9 = v6;
      ((void (*)(void **, char *))off_1E2DD17A0[v7])(v32, v6 + 24);
      *((_DWORD *)v9 + 14) = -1;
      goto LABEL_5;
    }
LABEL_4:
    v32[0] = v6 + 24;
    ((void (*)(void **))off_1E2DD17D8[v8])(v32);
    goto LABEL_5;
  }
LABEL_9:
  v10 = (const nitro::ir::DEFMEMBERFUN **)*((_QWORD *)a2 + 7);
  for (i = (const nitro::ir::DEFMEMBERFUN **)*((_QWORD *)a2 + 8); v10 != i; ++v10)
  {
    *(_OWORD *)__p = 0u;
    v35 = 0u;
    *(_OWORD *)v32 = 0u;
    v33 = 0u;
    v36 = 1065353216;
    nitro::nitro_function::load_nitro_function((nitro::nitro_function *)v32, *v10);
    v31 = nitro::nitro_function::name((nitro::nitro_function *)v32);
    v37 = &v31;
    v12 = std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_function>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_function>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_function>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_function>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)this + 80, (unint64_t *)&v31, (uint64_t)&std::piecewise_construct, &v37);
    v13 = *(_OWORD *)v32;
    v32[0] = 0;
    v32[1] = 0;
    v14 = (std::__shared_weak_count *)*((_QWORD *)v12 + 4);
    *(_OWORD *)(v12 + 24) = v13;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = v33;
    v33 = 0uLL;
    v18 = (std::__shared_weak_count *)*((_QWORD *)v12 + 6);
    *(_OWORD *)(v12 + 40) = v17;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__move_assign((uint64_t)(v12 + 56), (uint64_t *)__p);
    v21 = (_QWORD *)v35;
    if ((_QWORD)v35)
    {
      do
      {
        v22 = (_QWORD *)*v21;
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v21 + 3));
        operator delete(v21);
        v21 = v22;
      }
      while (v22);
    }
    v23 = __p[0];
    __p[0] = 0;
    if (v23)
      operator delete(v23);
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
    if (!*((_QWORD *)&v33 + 1))
      goto LABEL_30;
    v25 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
      v27 = (std::__shared_weak_count *)v32[1];
      if (v32[1])
      {
LABEL_31:
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }
    else
    {
LABEL_30:
      v27 = (std::__shared_weak_count *)v32[1];
      if (v32[1])
        goto LABEL_31;
    }
  }
  BYTE7(v33) = 8;
  strcpy((char *)v32, "__self__");
  nitro::SELF_ID = nitro::get_symbol_id((const std::string *)v32);
  if (SBYTE7(v33) < 0)
    operator delete(v32[0]);
}

void sub_19117E5D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19117E5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  nitro::nitro_function::~nitro_function((nitro::nitro_function *)va);
  _Unwind_Resume(a1);
}

void nitro::nitro_class::make_instance(uint64_t *a1@<X0>, uint64_t *a2@<X1>, nitro::nitro_instance **a3@<X8>)
{
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  nitro::nitro_instance *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  _QWORD *i;
  uint64_t v21;
  char *v22;
  unint64_t symbol_id;
  int8x8_t v24;
  uint8x8_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  nitro::nitro_instance *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::string v41;
  _BYTE v42[32];
  void *__p[2];
  __int128 v44;
  void *v45;
  _QWORD *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v6 = (char *)operator new(0x60uLL);
  v7 = (std::__shared_weak_count *)v6;
  *((_QWORD *)v6 + 1) = 0;
  v8 = (unint64_t *)(v6 + 8);
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB61C0;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *((_QWORD *)v6 + 9) = 0;
  *((_QWORD *)v6 + 10) = 0;
  *((_DWORD *)v6 + 18) = 1065353216;
  *((_QWORD *)v6 + 11) = 0;
  *a3 = (nitro::nitro_instance *)(v6 + 24);
  a3[1] = (nitro::nitro_instance *)v6;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  v10 = (unint64_t *)(v6 + 16);
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  *((_QWORD *)v6 + 3) = v6 + 24;
  *((_QWORD *)v6 + 4) = v6;
  do
    v12 = __ldaxr(v8);
  while (__stlxr(v12 - 1, v8));
  if (!v12)
  {
    (*(void (**)(char *))(*(_QWORD *)v6 + 16))(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v13 = (std::__shared_weak_count *)a1[1];
  if (!v13 || (v14 = *a1, (v15 = std::__shared_weak_count::lock(v13)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v16 = *a3;
  v17 = (std::__shared_weak_count *)*((_QWORD *)*a3 + 8);
  *((_QWORD *)v16 + 7) = v14;
  *((_QWORD *)v16 + 8) = v15;
  if (!v17)
    goto LABEL_15;
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    for (i = (_QWORD *)a1[7]; i; i = (_QWORD *)*i)
    {
LABEL_16:
      *(_OWORD *)__p = 0u;
      v44 = 0u;
      v21 = (uint64_t)*a3 + 16;
      v41.__r_.__value_.__r.__words[0] = (std::string::size_type)(i + 2);
      v22 = std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v21, i + 2, (uint64_t)&std::piecewise_construct, &v41);
      nitro::nitro_variable::operator=((uint64_t)(v22 + 24), (__int128 *)__p);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)__p);
    }
  }
  else
  {
LABEL_15:
    i = (_QWORD *)a1[7];
    if (i)
      goto LABEL_16;
  }
  BYTE7(v44) = 8;
  strcpy((char *)__p, "__init__");
  symbol_id = nitro::get_symbol_id((const std::string *)__p);
  v24 = (int8x8_t)a1[11];
  if (!*(_QWORD *)&v24)
    goto LABEL_33;
  v25 = (uint8x8_t)vcnt_s8(v24);
  v25.i16[0] = vaddlv_u8(v25);
  if (v25.u32[0] > 1uLL)
  {
    v26 = symbol_id;
    if (symbol_id >= *(_QWORD *)&v24)
      v26 = symbol_id % *(_QWORD *)&v24;
  }
  else
  {
    v26 = (*(_QWORD *)&v24 - 1) & symbol_id;
  }
  v27 = *(_QWORD **)(a1[10] + 8 * v26);
  if (v27)
  {
    v28 = (_QWORD *)*v27;
    if (*v27)
    {
      do
      {
        v29 = v28[1];
        if (symbol_id == v29)
        {
          if (v28[2] == symbol_id)
            break;
        }
        else
        {
          if (v25.u32[0] > 1uLL)
          {
            if (v29 >= *(_QWORD *)&v24)
              v29 %= *(_QWORD *)&v24;
          }
          else
          {
            v29 &= *(_QWORD *)&v24 - 1;
          }
          if (v29 != v26)
            goto LABEL_33;
        }
        v28 = (_QWORD *)*v28;
      }
      while (v28);
    }
  }
  else
  {
LABEL_33:
    v28 = 0;
  }
  if (SBYTE7(v44) < 0)
  {
    operator delete(__p[0]);
    if (!v28)
      return;
  }
  else if (!v28)
  {
    return;
  }
  v30 = *a3;
  *((_BYTE *)&v41.__r_.__value_.__s + 23) = 8;
  strcpy((char *)&v41, "__init__");
  v31 = nitro::get_symbol_id(&v41);
  nitro::nitro_instance::get_member_function(v30, v31, (nitro::nitro_function *)__p);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  nitro::nitro_function::run((uint64_t *)__p, a2, (uint64_t)v42);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v42);
  v32 = v46;
  if (v46)
  {
    do
    {
      v33 = (_QWORD *)*v32;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v32 + 3));
      operator delete(v32);
      v32 = v33;
    }
    while (v33);
  }
  v34 = v45;
  v45 = 0;
  if (v34)
    operator delete(v34);
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v39 = (unint64_t *)((char *)__p[1] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_19117E9B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  nitro::nitro_function::~nitro_function((nitro::nitro_function *)&__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25);
  _Unwind_Resume(a1);
}

uint64_t nitro::nitro_variable::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t **v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  void *v37;
  void *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;

  v4 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v4;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (a2 != (__int128 *)a1)
  {
    v8 = (unint64_t **)(a1 + 16);
    switch(*(_BYTE *)(a1 + 24))
    {
      case 2:
        v9 = *v8;
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          v12 = *v8;
          if (!*v8)
            goto LABEL_57;
          if (*((char *)v12 + 31) < 0)
            operator delete((void *)v12[1]);
          v13 = v12;
          v14 = 0x1012C404EF22A49;
          goto LABEL_56;
        }
        break;
      case 3:
        v15 = *v8;
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          v18 = *v8;
          if (!*v8)
            goto LABEL_57;
          v19 = (void *)v18[1];
          if (v19)
          {
            v18[2] = (unint64_t)v19;
            operator delete(v19);
          }
          v13 = v18;
          v14 = 0x1080C409938AC02;
          goto LABEL_56;
        }
        break;
      case 4:
        v20 = *v8;
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          v23 = *v8;
          if (!*v8)
            goto LABEL_57;
          v24 = v23[1];
          if (v24)
          {
            v25 = v23[2];
            v26 = (void *)v23[1];
            if (v25 != v24)
            {
              do
              {
                v25 -= 16;
                std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v23 + 3), v25);
              }
              while (v25 != v24);
              v26 = (void *)v23[1];
            }
            v23[2] = v24;
            goto LABEL_40;
          }
          goto LABEL_41;
        }
        break;
      case 5:
        v27 = *v8;
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          v23 = *v8;
          if (!*v8)
            goto LABEL_57;
          v30 = v23[1];
          if (v30)
          {
            v31 = v23[2];
            v32 = (void *)v23[1];
            if (v31 != v30)
            {
              do
                v31 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v31 - 32);
              while (v31 != v30);
              v32 = (void *)v23[1];
            }
            v23[2] = v30;
            v26 = v32;
LABEL_40:
            operator delete(v26);
          }
LABEL_41:
          v13 = v23;
          v14 = 0x1020C405E66F15BLL;
          goto LABEL_56;
        }
        break;
      case 9:
        v33 = *v8;
        do
        {
          v34 = __ldaxr(v33);
          v35 = v34 - 1;
        }
        while (__stlxr(v35, v33));
        if (!v35)
        {
          v36 = *v8;
          if (*v8)
          {
            v37 = (void *)v36[7];
            if (v37)
            {
              v36[8] = (unint64_t)v37;
              operator delete(v37);
            }
            v38 = (void *)v36[4];
            if (v38)
            {
              v36[5] = (unint64_t)v38;
              operator delete(v38);
            }
            v39 = (std::__shared_weak_count *)v36[3];
            if (v39)
            {
              v40 = (unint64_t *)&v39->__shared_owners_;
              do
                v41 = __ldaxr(v40);
              while (__stlxr(v41 - 1, v40));
              if (!v41)
              {
                ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                std::__shared_weak_count::__release_weak(v39);
              }
            }
            v13 = v36;
            v14 = 0x10B0C4002311774;
LABEL_56:
            MEMORY[0x19401CD90](v13, v14);
          }
LABEL_57:
          *v8 = 0;
        }
        break;
      default:
        break;
    }
    v42 = (unint64_t *)*((_QWORD *)a2 + 2);
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    *v8 = v42;
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    *((_BYTE *)a2 + 24) = 0;
  }
  return a1;
}

void nitro::nitro_instance::get_member_function(nitro::nitro_instance *this@<X0>, unint64_t a2@<X1>, nitro::nitro_function *a3@<X8>)
{
  int8x8_t *v4;
  int8x8_t v5;
  int8x8_t *v7;
  uint8x8_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23[3];
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v22 = a2;
  v4 = (int8x8_t *)*((_QWORD *)this + 7);
  v5 = v4[11];
  if (!*(_QWORD *)&v5)
    goto LABEL_17;
  v7 = v4 + 10;
  v8 = (uint8x8_t)vcnt_s8(v5);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = a2;
    if (*(_QWORD *)&v5 <= a2)
      v9 = a2 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & a2;
  }
  v10 = *(_QWORD **)(*(_QWORD *)v7 + 8 * v9);
  if (!v10 || (v11 = (_QWORD *)*v10) == 0)
LABEL_17:
    nitro::nitro_instance::get_member_function(unsigned long)::$_0::operator()();
  while (1)
  {
    v12 = v11[1];
    if (v12 == a2)
      break;
    if (v8.u32[0] > 1uLL)
    {
      if (v12 >= *(_QWORD *)&v5)
        v12 %= *(_QWORD *)&v5;
    }
    else
    {
      v12 &= *(_QWORD *)&v5 - 1;
    }
    if (v12 != v9)
      goto LABEL_17;
LABEL_10:
    v11 = (_QWORD *)*v11;
    if (!v11)
      goto LABEL_17;
  }
  if (v11[2] != a2)
    goto LABEL_10;
  v23[0] = &v22;
  v13 = std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_function>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_function>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_function>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_function>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v7, &v22, (uint64_t)&std::piecewise_construct, v23);
  nitro::nitro_function::nitro_function(a3, (const nitro::nitro_function *)(v13 + 24));
  v14 = nitro::SELF_ID;
  v16 = *(_QWORD **)this;
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (!v15 || (v17 = std::__shared_weak_count::lock(v15)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v18 = v17;
  v23[0] = v16;
  v23[1] = &v17->__vftable;
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v20 = __ldxr(p_shared_owners);
  while (__stxr(v20 + 1, p_shared_owners));
  v23[2] = 0;
  v24 = 0;
  nitro::nitro_function::bind(a3, v14, (const nitro::nitro_variable *)v23);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v23);
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
}

void sub_19117EEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  nitro::nitro_function *v12;

  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&a12);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  nitro::nitro_function::~nitro_function(v12);
  _Unwind_Resume(a1);
}

BOOL nitro::nitro_instance::has_member_function(nitro::nitro_instance *this, unint64_t a2)
{
  int8x8_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *i;
  unint64_t v7;

  v2 = (int8x8_t *)*((_QWORD *)this + 7);
  v3 = v2[11];
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = a2;
      if (*(_QWORD *)&v3 <= a2)
        v5 = a2 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & a2;
    }
    i = *(_QWORD **)(*(_QWORD *)&v2[10] + 8 * v5);
    if (i)
    {
      for (i = (_QWORD *)*i; i; i = (_QWORD *)*i)
      {
        v7 = i[1];
        if (v7 == a2)
        {
          if (i[2] == a2)
            return i != 0;
        }
        else
        {
          if (v4.u32[0] > 1uLL)
          {
            if (v7 >= *(_QWORD *)&v3)
              v7 %= *(_QWORD *)&v3;
          }
          else
          {
            v7 &= *(_QWORD *)&v3 - 1;
          }
          if (v7 != v5)
            goto LABEL_17;
        }
      }
    }
  }
  else
  {
LABEL_17:
    i = 0;
  }
  return i != 0;
}

void nitro::nitro_instance::get_member_function(unsigned long)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_class.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"m_original_class->m_functions.count(name)", 41);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_class.cpp", "operator()", 60, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_class.cpp", "operator()", 60, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19117F2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_19117F30C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

nitro::nitro_function *nitro::nitro_function::nitro_function(nitro::nitro_function *this, const nitro::nitro_function *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *((_QWORD *)a2 + 1);
  *(_QWORD *)this = *(_QWORD *)a2;
  *((_QWORD *)this + 1) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)this + 3) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  std::unordered_map<unsigned long,nitro::nitro_variable>::unordered_map((uint64_t)this + 32, (uint64_t)a2 + 32);
  return this;
}

void sub_19117F3A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3)
    nitro::nitro_function::nitro_function(v3);
  nitro::nitro_function::nitro_function((std::__shared_weak_count **)(v1 + 8));
  _Unwind_Resume(a1);
}

void nitro::nitro_instance::get_member_function(nitro::nitro_instance *a1@<X0>, const std::string *a2@<X1>, nitro::nitro_function *a3@<X8>)
{
  unint64_t symbol_id;

  symbol_id = nitro::get_symbol_id(a2);
  nitro::nitro_instance::get_member_function(a1, symbol_id, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v5;
  char v6;

  v4 = *(_DWORD **)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, _DWORD *))off_1E2DD17A0[v5])(&v6, v4);
  }
  *v4 = *a3;
  v4[8] = 0;
  return result;
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3[2];

  if (*(_DWORD *)(*result + 32) == 1)
  {
    *(_DWORD *)a2 = *(_DWORD *)a3;
    if (a2 != a3)
      return std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((_QWORD *)(a2 + 8), *(char **)(a3 + 8), *(char **)(a3 + 16), (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 3);
  }
  else
  {
    v3[0] = *result;
    v3[1] = a3;
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<nitro::PrimitiveType,nitro::tensor_type,std::shared_ptr<nitro::tuple_type>,std::shared_ptr<nitro::list_type>,nitro::string_type,nitro::class_type,std::shared_ptr<nitro::dict_type>>>::__assign_alt[abi:ne180100]<1ul,nitro::tensor_type,nitro::tensor_type const&>(std::__variant_detail::__alt<1ul,nitro::tensor_type> &,nitro::tensor_type const&)::{unnamed type#1}::operator()[abi:ne180100](v3);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char v16;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      v7 = *a3;
      v6 = a3[1];
      if (v6)
      {
        v8 = (unint64_t *)(v6 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v10 = (std::__shared_weak_count *)a2[1];
      *a2 = v7;
      a2[1] = v6;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      return;
    }
    ((void (*)(char *, uint64_t))off_1E2DD17A0[v5])(&v16, v4);
  }
  *(_DWORD *)(v4 + 32) = -1;
  v13 = a3[1];
  *(_QWORD *)v4 = *a3;
  *(_QWORD *)(v4 + 8) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_DWORD *)(v4 + 32) = 2;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char v16;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 3)
    {
      v7 = *a3;
      v6 = a3[1];
      if (v6)
      {
        v8 = (unint64_t *)(v6 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v10 = (std::__shared_weak_count *)a2[1];
      *a2 = v7;
      a2[1] = v6;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      return;
    }
    ((void (*)(char *, uint64_t))off_1E2DD17A0[v5])(&v16, v4);
  }
  *(_DWORD *)(v4 + 32) = -1;
  v13 = a3[1];
  *(_QWORD *)v4 = *a3;
  *(_QWORD *)(v4 + 8) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_DWORD *)(v4 + 32) = 3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v2 != -1)
  {
    if ((_DWORD)v2 == 4)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E2DD17A0[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 32) = 4;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEERKS10_EEEDcSS_DpT0_(__n128 **a1, std::string *this, std::string *__str)
{
  __n128 *v3;
  unsigned __int32 v4;
  __n128 result;
  std::string v6;
  char v7;

  v3 = *a1;
  v4 = (*a1)[2].n128_u32[0];
  if (v4 == 5)
  {
    std::string::operator=(this, __str);
    return result;
  }
  if ((SHIBYTE(__str->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v6 = *__str;
    if (v4 == -1)
      goto LABEL_8;
    goto LABEL_7;
  }
  std::string::__init_copy_ctor_external(&v6, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
  v4 = v3[2].n128_u32[0];
  if (v4 != -1)
LABEL_7:
    ((void (*)(char *, __n128 *))off_1E2DD17A0[v4])(&v7, v3);
LABEL_8:
  result = *(__n128 *)&v6.__r_.__value_.__l.__data_;
  v3[1].n128_u64[0] = v6.__r_.__value_.__r.__words[2];
  *v3 = result;
  v3[2].n128_u32[0] = 5;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char v16;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 6)
    {
      v7 = *a3;
      v6 = a3[1];
      if (v6)
      {
        v8 = (unint64_t *)(v6 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v10 = (std::__shared_weak_count *)a2[1];
      *a2 = v7;
      a2[1] = v6;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      return;
    }
    ((void (*)(char *, uint64_t))off_1E2DD17A0[v5])(&v16, v4);
  }
  *(_DWORD *)(v4 + 32) = -1;
  v13 = a3[1];
  *(_QWORD *)v4 = *a3;
  *(_QWORD *)(v4 + 8) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_DWORD *)(v4 + 32) = 6;
}

uint64_t *std::__variant_detail::__assignment<std::__variant_detail::__traits<nitro::PrimitiveType,nitro::tensor_type,std::shared_ptr<nitro::tuple_type>,std::shared_ptr<nitro::list_type>,nitro::string_type,nitro::class_type,std::shared_ptr<nitro::dict_type>>>::__assign_alt[abi:ne180100]<1ul,nitro::tensor_type,nitro::tensor_type const&>(std::__variant_detail::__alt<1ul,nitro::tensor_type> &,nitro::tensor_type const&)::{unnamed type#1}::operator()[abi:ne180100](uint64_t *result)
{
  int *v1;
  uint64_t v2;
  int v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char v10;

  v2 = *result;
  v1 = (int *)result[1];
  v3 = *v1;
  v5 = (_BYTE *)*((_QWORD *)v1 + 1);
  v4 = (_BYTE *)*((_QWORD *)v1 + 2);
  v6 = v4 - v5;
  if (v4 == v5)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - v5);
    v8 = &v7[8 * (v6 >> 3)];
    result = (uint64_t *)memcpy(v7, v5, v6);
  }
  v9 = *(unsigned int *)(v2 + 32);
  if ((_DWORD)v9 != -1)
    result = (uint64_t *)((uint64_t (*)(char *, uint64_t))off_1E2DD17A0[v9])(&v10, v2);
  *(_DWORD *)v2 = v3;
  *(_QWORD *)(v2 + 8) = v7;
  *(_QWORD *)(v2 + 16) = v8;
  *(_QWORD *)(v2 + 24) = v8;
  *(_DWORD *)(v2 + 32) = 1;
  return result;
}

void sub_19117F970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  if (*(_QWORD *)(a1 + 24))
  {
    v4 = *(_QWORD **)(a1 + 16);
    if (v4)
    {
      do
      {
        v5 = (_QWORD *)*v4;
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v4 + 3));
        operator delete(v4);
        v4 = v5;
      }
      while (v5);
    }
    *(_QWORD *)(a1 + 16) = 0;
    v6 = *(_QWORD *)(a1 + 8);
    if (v6)
    {
      for (i = 0; i != v6; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v8 = *a2;
  *a2 = 0;
  v9 = *(void **)a1;
  *(_QWORD *)a1 = v8;
  if (v9)
    operator delete(v9);
  v12 = a2[2];
  v11 = a2 + 2;
  v10 = v12;
  v13 = *(v11 - 1);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 8) = v13;
  *(v11 - 1) = 0;
  v14 = v11[1];
  *(_QWORD *)(a1 + 24) = v14;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v11 + 4);
  if (v14)
  {
    v15 = *(_QWORD *)(v10 + 8);
    v16 = *(_QWORD *)(a1 + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v15 >= v16)
        v15 %= v16;
    }
    else
    {
      v15 &= v16 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = a1 + 16;
    *v11 = 0;
    v11[1] = 0;
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::unordered_map<unsigned long,nitro::nitro_variable>::unordered_map(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,nitro::nitro_variable> const&>(a1, i + 2, (unsigned __int8 *)i + 16);
  return a1;
}

void sub_19117FBF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,nitro::nitro_variable> const&>(uint64_t a1, unint64_t *a2, unsigned __int8 *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *result;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  int v18;
  unint64_t v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  int8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      result = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = result[1];
          if (v11 == v6)
          {
            if (result[2] == v6)
              return result;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
  v12 = operator new(0x38uLL);
  v33 = v12;
  *v12 = 0;
  v12[1] = v6;
  v13 = *((_QWORD *)a3 + 1);
  v12[2] = *(_QWORD *)a3;
  v14 = *((_QWORD *)a3 + 2);
  v12[3] = v13;
  v12[4] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v12[5] = 0;
  *((_BYTE *)v12 + 48) = 0;
  if (v12 + 2 != (_QWORD *)a3)
  {
    v17 = (unint64_t *)*((_QWORD *)a3 + 3);
    v12[5] = v17;
    v18 = a3[32];
    *((_BYTE *)v12 + 48) = v18;
    if ((v18 - 2) < 4 || v18 == 9)
    {
      do
        v20 = __ldaxr(v17);
      while (__stlxr(v20 + 1, v17));
    }
  }
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (!v7 || (float)(v22 * (float)v7) < v21)
  {
    v23 = 1;
    if (v7 >= 3)
      v23 = (v7 & (v7 - 1)) != 0;
    v24 = v23 | (2 * v7);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v27 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v27)
      goto LABEL_40;
    if (prime < *(_QWORD *)&v27)
    {
      v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v27 < 3uLL || (v29 = (uint8x8_t)vcnt_s8(v27), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (prime <= v28)
        prime = v28;
      if (prime < *(_QWORD *)&v27)
LABEL_40:
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  result = v33;
  if (v31)
  {
    *v33 = *v31;
LABEL_65:
    *v31 = v33;
    goto LABEL_66;
  }
  *v33 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v33;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
  if (*v33)
  {
    v32 = *(_QWORD *)(*v33 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_65;
  }
LABEL_66:
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_19117FF34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,nitro::nitro_variable>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,nitro::nitro_variable>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,nitro::nitro_variable>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,nitro::nitro_variable>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v2 + 24));
    operator delete((void *)v2);
  }
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1, uint64_t a2, int *a3)
{
  int v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v8;
  char *v9;

  v3 = *a3;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)a2 = v3;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = (_BYTE *)*((_QWORD *)a3 + 1);
  v4 = (_BYTE *)*((_QWORD *)a3 + 2);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 16) = v8;
    v9 = &v8[8 * (v6 >> 3)];
    *(_QWORD *)(a2 + 24) = v9;
    memcpy(v8, v5, v6);
    *(_QWORD *)(a2 + 16) = v9;
  }
}

void sub_191180014(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a3[1];
  *a2 = *a3;
  a2[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a3[1];
  *a2 = *a3;
  a2[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEERKS11_EEEDcST_DpT0_(int a1, std::string *this, __int128 *a3)
{
  __int128 v3;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v3 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a3[1];
  *a2 = *a3;
  a2[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
}

char *std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  char *v11;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_QWORD *)v11 + 2) == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  v11 = (char *)operator new(0x38uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  *((_QWORD *)v11 + 2) = **a4;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_30;
    if (prime < v8)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v8)
LABEL_30:
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__do_rehash<true>(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v11 = *v24;
LABEL_55:
    *v24 = v11;
    goto LABEL_56;
  }
  *(_QWORD *)v11 = *v13;
  *v13 = v11;
  *(_QWORD *)(v23 + 8 * v4) = v13;
  if (*(_QWORD *)v11)
  {
    v25 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v25 >= v8)
        v25 %= v8;
    }
    else
    {
      v25 &= v8 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_55;
  }
LABEL_56:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1911803A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,nitro::nitro_variable>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,nitro::nitro_variable>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<unsigned long,nitro::variable_type>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::variable_type>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::variable_type>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::variable_type>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  char *v11;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_QWORD *)v11 + 2) == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  v11 = (char *)operator new(0x40uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  *((_QWORD *)v11 + 2) = **a4;
  *((_QWORD *)v11 + 7) = 0;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_30;
    if (prime < v8)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v8)
LABEL_30:
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__do_rehash<true>(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v11 = *v24;
LABEL_55:
    *v24 = v11;
    goto LABEL_56;
  }
  *(_QWORD *)v11 = *v13;
  *v13 = v11;
  *(_QWORD *)(v23 + 8 * v4) = v13;
  if (*(_QWORD *)v11)
  {
    v25 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v25 >= v8)
        v25 %= v8;
    }
    else
    {
      v25 &= v8 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_55;
  }
LABEL_56:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_19118068C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,nitro::variable_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,nitro::variable_type>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,nitro::variable_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,nitro::variable_type>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  unsigned int *v2;
  uint64_t v3;
  char v5;

  v2 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = v2[14];
      if ((_DWORD)v3 != -1)
        ((void (*)(char *, unsigned int *))off_1E2DD17A0[v3])(&v5, v2 + 6);
    }
    operator delete(v2);
  }
  return a1;
}

char *std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_function>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_function>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_function>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_function>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  char *v11;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_QWORD *)v11 + 2) == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  v11 = (char *)operator new(0x60uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  *((_QWORD *)v11 + 2) = **a4;
  *((_QWORD *)v11 + 11) = 0;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *((_DWORD *)v11 + 22) = 1065353216;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_30;
    if (prime < v8)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v8)
LABEL_30:
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__do_rehash<true>(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v11 = *v24;
LABEL_55:
    *v24 = v11;
    goto LABEL_56;
  }
  *(_QWORD *)v11 = *v13;
  *v13 = v11;
  *(_QWORD *)(v23 + 8 * v4) = v13;
  if (*(_QWORD *)v11)
  {
    v25 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v25 >= v8)
        v25 %= v8;
    }
    else
    {
      v25 &= v8 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_55;
  }
LABEL_56:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1911809F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,nitro::nitro_function>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,nitro::nitro_function>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,nitro::nitro_function>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,nitro::nitro_function>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long const,nitro::nitro_function>,0>(v2 + 2);
    operator delete(v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<nitro::nitro_instance>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB61C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<nitro::nitro_instance>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB61C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<nitro::nitro_instance>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<nitro::nitro_instance>::destroy[abi:ne180100]((uint64_t)&v1, (_QWORD *)(a1 + 24));
}

void std::allocator<nitro::nitro_instance>::destroy[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  std::__shared_weak_count *v9;

  v3 = (std::__shared_weak_count *)a2[8];
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (_QWORD *)a2[4];
    if (!v6)
      goto LABEL_7;
  }
  else
  {
LABEL_5:
    v6 = (_QWORD *)a2[4];
    if (!v6)
      goto LABEL_7;
  }
  do
  {
    v7 = (_QWORD *)*v6;
    nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v6 + 3));
    operator delete(v6);
    v6 = v7;
  }
  while (v7);
LABEL_7:
  v8 = (void *)a2[2];
  a2[2] = 0;
  if (v8)
    operator delete(v8);
  v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
}

char *std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_function>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_function>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_function>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_function>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  char *v11;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_QWORD *)v11 + 2) == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  v11 = (char *)operator new(0x60uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  *((_QWORD *)v11 + 2) = **a4;
  *((_QWORD *)v11 + 11) = 0;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *((_DWORD *)v11 + 22) = 1065353216;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_30;
    if (prime < v8)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v8)
LABEL_30:
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__do_rehash<true>(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v11 = *v24;
LABEL_55:
    *v24 = v11;
    goto LABEL_56;
  }
  *(_QWORD *)v11 = *v13;
  *v13 = v11;
  *(_QWORD *)(v23 + 8 * v4) = v13;
  if (*(_QWORD *)v11)
  {
    v25 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v25 >= v8)
        v25 %= v8;
    }
    else
    {
      v25 &= v8 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_55;
  }
LABEL_56:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_191180E50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,nitro::nitro_function>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,nitro::nitro_function>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void nitro::nitro_function::nitro_function(std::__shared_weak_count **a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *a1;
  if (*a1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      OUTLINED_FUNCTION_31();
      OUTLINED_FUNCTION_0(v1);
    }
  }
}

void nitro::nitro_function::nitro_function(std::__shared_weak_count *a1)
{
  unint64_t *p_shared_owners;
  unint64_t v3;

  p_shared_owners = (unint64_t *)&a1->__shared_owners_;
  do
    v3 = __ldaxr(p_shared_owners);
  while (__stlxr(v3 - 1, p_shared_owners));
  if (!v3)
  {
    OUTLINED_FUNCTION_31();
    OUTLINED_FUNCTION_0(a1);
  }
}

void nitro::matmul<float>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  const void *v4;
  int64_t v5;
  char *v6;
  char *v7;
  void *v8;
  int64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  __int128 *v45;
  uint64_t v46;
  __int128 v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  __int128 *v58;
  uint64_t v59;
  __int128 v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  __int128 *v65;
  uint64_t v66;
  __int128 v67;
  char *v68;
  _QWORD *v69;
  char *v70;
  char *v71;
  int64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  _BYTE *v77;
  char *v78;
  char *v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  _OWORD *v84;
  __int128 *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  char *v92;
  int64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  _BYTE *v98;
  _QWORD *v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  _OWORD *v104;
  __int128 *v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  size_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  _QWORD *v145;
  uint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *p_shared_owners;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v160;
  _QWORD v161[3];
  void *__p;
  void *v163;
  _QWORD *v164;
  void *v165;
  void *v166;
  _QWORD *v167;
  void *v168;
  void *v169;
  char *v170;
  void *v171;
  _BYTE *v172;
  char *v173;
  void *v174;
  _BYTE *v175;
  char *v176;
  uint64_t v177;
  std::__shared_weak_count *v178;
  void *v179;
  _BYTE *v180;
  void *v181;
  void *v182;
  uint64_t v183;
  std::__shared_weak_count *v184;
  _BYTE *v185;
  _BYTE *v186;
  void *v187;
  void *v188;

  nitro::ndarray<float>::canonicalize(a1, &v183);
  nitro::ndarray<float>::canonicalize(a2, &v177);
  v174 = 0;
  v175 = 0;
  v176 = 0;
  v4 = v185;
  v5 = v186 - v185;
  if (v186 == v185)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v186 - v185);
    v174 = v6;
    v7 = &v6[8 * (v5 >> 3)];
    v176 = v7;
    memcpy(v6, v4, v5);
    v175 = v7;
  }
  v171 = 0;
  v172 = 0;
  v173 = 0;
  v8 = v179;
  v9 = v180 - (_BYTE *)v179;
  if (v180 == v179)
  {
    v10 = 0;
    v11 = 0;
  }
  else
  {
    if (v9 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)operator new(v180 - (_BYTE *)v179);
    v171 = v10;
    v11 = &v10[8 * (v9 >> 3)];
    v173 = v11;
    memcpy(v10, v8, v9);
    v172 = v11;
  }
  v12 = (v7 - v6) >> 3;
  v13 = (v11 - v10) >> 3;
  if (v12 <= v13)
    v14 = (v11 - v10) >> 3;
  else
    v14 = (v7 - v6) >> 3;
  if (v12 < v13)
  {
    do
    {
      v168 = (void *)1;
      std::vector<unsigned long>::insert((char **)&v174, (uint64_t)v6, &v168);
      v6 = (char *)v174;
    }
    while (v14 > (v175 - (_BYTE *)v174) >> 3);
    v10 = (char *)v171;
    v13 = (v172 - (_BYTE *)v171) >> 3;
  }
  if (v13 < v14)
  {
    do
    {
      v168 = (void *)1;
      std::vector<unsigned long>::insert((char **)&v171, (uint64_t)v10, &v168);
      v10 = (char *)v171;
    }
    while (v14 > (v172 - (_BYTE *)v171) >> 3);
  }
  v168 = 0;
  v169 = 0;
  v170 = 0;
  v15 = v14 - 2;
  v160 = v14 - 2;
  v16 = 0;
  if (v14 == 2)
  {
    v68 = 0;
    v69 = (char *)v174 + 8 * v15;
    goto LABEL_100;
  }
  v17 = 0;
  do
  {
    v18 = v174;
    v19 = *((_QWORD *)v174 + v17);
    v20 = v171;
    if (v19 == 1)
    {
      if (v16 < v170)
      {
        *(_QWORD *)v16 = *((_QWORD *)v171 + v17);
        v16 += 8;
        goto LABEL_20;
      }
      v21 = (char *)v168;
      v22 = v16 - (_BYTE *)v168;
      v23 = (v16 - (_BYTE *)v168) >> 3;
      v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 61)
        goto LABEL_211;
      v25 = v170 - (_BYTE *)v168;
      if ((v170 - (_BYTE *)v168) >> 2 > v24)
        v24 = v25 >> 2;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
        v26 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v26 = v24;
      if (v26)
      {
        if (v26 >> 61)
          goto LABEL_212;
        v27 = operator new(8 * v26);
      }
      else
      {
        v27 = 0;
      }
      v36 = &v27[8 * v23];
      *v36 = v20[v17];
      v37 = v36 + 1;
      if (v16 == v21)
        goto LABEL_79;
      v38 = v16 - v21 - 8;
      if (v38 < 0x168
        || (v41 = (v16 - 8 - v21) & 0xFFFFFFFFFFFFFFF8, &v27[v22 - 8 - v41] > &v27[v22 - 8])
        || &v16[-v41 - 8] > v16 - 8
        || (unint64_t)(v16 - v27 - v22) < 0x20)
      {
        v39 = v16;
        v15 = v14 - 2;
      }
      else
      {
        v42 = (v38 >> 3) + 1;
        v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
        v39 = &v16[-v43];
        v36 = (_QWORD *)((char *)v36 - v43);
        v44 = &v27[8 * v23 - 16];
        v45 = (__int128 *)(v16 - 16);
        v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v47 = *v45;
          *(v44 - 1) = *(v45 - 1);
          *v44 = v47;
          v44 -= 2;
          v45 -= 2;
          v46 -= 4;
        }
        while (v46);
        v15 = v14 - 2;
        if (v42 == (v42 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_80;
      }
      do
      {
        v40 = *((_QWORD *)v39 - 1);
        v39 -= 8;
        *--v36 = v40;
      }
      while (v39 != v21);
    }
    else if (*((_QWORD *)v171 + v17) == 1)
    {
      if (v16 < v170)
        goto LABEL_44;
      v21 = (char *)v168;
      v28 = v16 - (_BYTE *)v168;
      v29 = (v16 - (_BYTE *)v168) >> 3;
      v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 61)
        goto LABEL_211;
      v31 = v170 - (_BYTE *)v168;
      if ((v170 - (_BYTE *)v168) >> 2 > v30)
        v30 = v31 >> 2;
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
        v26 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v26 = v30;
      if (v26)
      {
        if (v26 >> 61)
          goto LABEL_212;
        v27 = operator new(8 * v26);
        v19 = v18[v17];
      }
      else
      {
        v27 = 0;
      }
      v36 = &v27[8 * v29];
      *v36 = v19;
      v37 = v36 + 1;
      if (v16 == v21)
        goto LABEL_79;
      v48 = v16 - v21 - 8;
      if (v48 < 0x168
        || (v54 = (v16 - 8 - v21) & 0xFFFFFFFFFFFFFFF8, &v27[v28 - 8 - v54] > &v27[v28 - 8])
        || &v16[-v54 - 8] > v16 - 8
        || (unint64_t)(v16 - v27 - v28) < 0x20)
      {
        v49 = v16;
        v15 = v14 - 2;
      }
      else
      {
        v55 = (v48 >> 3) + 1;
        v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
        v49 = &v16[-v56];
        v36 = (_QWORD *)((char *)v36 - v56);
        v57 = &v27[8 * v29 - 16];
        v58 = (__int128 *)(v16 - 16);
        v59 = v55 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v60 = *v58;
          *(v57 - 1) = *(v58 - 1);
          *v57 = v60;
          v57 -= 2;
          v58 -= 2;
          v59 -= 4;
        }
        while (v59);
        v15 = v14 - 2;
        if (v55 == (v55 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_80;
      }
      do
      {
        v50 = *((_QWORD *)v49 - 1);
        v49 -= 8;
        *--v36 = v50;
      }
      while (v49 != v21);
    }
    else
    {
      if (v16 < v170)
      {
LABEL_44:
        *(_QWORD *)v16 = v19;
        v16 += 8;
        goto LABEL_20;
      }
      v21 = (char *)v168;
      v32 = v16 - (_BYTE *)v168;
      v33 = (v16 - (_BYTE *)v168) >> 3;
      v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 61)
LABEL_211:
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v35 = v170 - (_BYTE *)v168;
      if ((v170 - (_BYTE *)v168) >> 2 > v34)
        v34 = v35 >> 2;
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
        v26 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v26 = v34;
      if (v26)
      {
        if (v26 >> 61)
LABEL_212:
          std::__throw_bad_array_new_length[abi:ne180100]();
        v27 = operator new(8 * v26);
        v19 = v18[v17];
      }
      else
      {
        v27 = 0;
      }
      v36 = &v27[8 * v33];
      *v36 = v19;
      v37 = v36 + 1;
      if (v16 == v21)
      {
LABEL_79:
        v15 = v14 - 2;
        goto LABEL_80;
      }
      v51 = v16 - v21 - 8;
      if (v51 < 0x168
        || (v61 = (v16 - 8 - v21) & 0xFFFFFFFFFFFFFFF8, &v27[v32 - 8 - v61] > &v27[v32 - 8])
        || &v16[-v61 - 8] > v16 - 8
        || (unint64_t)(v16 - v27 - v32) < 0x20)
      {
        v52 = v16;
        v15 = v14 - 2;
      }
      else
      {
        v62 = (v51 >> 3) + 1;
        v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
        v52 = &v16[-v63];
        v36 = (_QWORD *)((char *)v36 - v63);
        v64 = &v27[8 * v33 - 16];
        v65 = (__int128 *)(v16 - 16);
        v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v67 = *v65;
          *(v64 - 1) = *(v65 - 1);
          *v64 = v67;
          v64 -= 2;
          v65 -= 2;
          v66 -= 4;
        }
        while (v66);
        v15 = v14 - 2;
        if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_80;
      }
      do
      {
        v53 = *((_QWORD *)v52 - 1);
        v52 -= 8;
        *--v36 = v53;
      }
      while (v52 != v21);
    }
LABEL_80:
    v168 = v36;
    v169 = v37;
    v170 = &v27[8 * v26];
    if (v21)
      operator delete(v21);
    v16 = (char *)v37;
LABEL_20:
    v169 = v16;
    ++v17;
  }
  while (v17 != v15);
  v68 = v170;
  v69 = (char *)v174 + 8 * v15;
  if (v16 < v170)
  {
    *(_QWORD *)v16 = *v69;
    v70 = v16 + 8;
    goto LABEL_121;
  }
LABEL_100:
  v71 = (char *)v168;
  v72 = v16 - (_BYTE *)v168;
  v73 = (v16 - (_BYTE *)v168) >> 3;
  v74 = v73 + 1;
  if ((unint64_t)(v73 + 1) >> 61)
    goto LABEL_213;
  v75 = v68 - (_BYTE *)v168;
  if (v75 >> 2 > v74)
    v74 = v75 >> 2;
  if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
    v76 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v76 = v74;
  if (v76)
  {
    if (!(v76 >> 61))
    {
      v77 = operator new(8 * v76);
      goto LABEL_110;
    }
LABEL_214:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  v77 = 0;
LABEL_110:
  v78 = &v77[8 * v73];
  v79 = &v77[8 * v76];
  *(_QWORD *)v78 = *v69;
  v70 = v78 + 8;
  if (v16 != v71)
  {
    v80 = v16 - v71 - 8;
    if (v80 < 0x58)
    {
      v81 = v16;
      goto LABEL_118;
    }
    if ((unint64_t)(v16 - v77 - v72) < 0x20)
    {
      v81 = v16;
      goto LABEL_118;
    }
    v82 = (v80 >> 3) + 1;
    v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
    v81 = &v16[-v83];
    v78 -= v83;
    v84 = &v77[8 * v73 - 16];
    v85 = (__int128 *)(v16 - 16);
    v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v87 = *v85;
      *(v84 - 1) = *(v85 - 1);
      *v84 = v87;
      v84 -= 2;
      v85 -= 2;
      v86 -= 4;
    }
    while (v86);
    if (v82 != (v82 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_118:
        v88 = *((_QWORD *)v81 - 1);
        v81 -= 8;
        *((_QWORD *)v78 - 1) = v88;
        v78 -= 8;
      }
      while (v81 != v71);
    }
  }
  v168 = v78;
  v169 = v70;
  v170 = v79;
  if (v71)
    operator delete(v71);
LABEL_121:
  v169 = v70;
  v89 = v14 - 1;
  v90 = v171;
  if (v70 < v170)
  {
    *(_QWORD *)v70 = *((_QWORD *)v171 + v89);
    v91 = v70 + 8;
    goto LABEL_144;
  }
  v92 = (char *)v168;
  v93 = v70 - (_BYTE *)v168;
  v94 = (v70 - (_BYTE *)v168) >> 3;
  v95 = v94 + 1;
  if ((unint64_t)(v94 + 1) >> 61)
LABEL_213:
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v96 = v170 - (_BYTE *)v168;
  if ((v170 - (_BYTE *)v168) >> 2 > v95)
    v95 = v96 >> 2;
  if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF8)
    v97 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v97 = v95;
  if (v97)
  {
    if (v97 >> 61)
      goto LABEL_214;
    v98 = operator new(8 * v97);
  }
  else
  {
    v98 = 0;
  }
  v99 = &v98[8 * v94];
  *v99 = v90[v89];
  v91 = v99 + 1;
  if (v70 != v92)
  {
    v100 = v70 - v92 - 8;
    if (v100 < 0x58)
    {
      v101 = v70;
      goto LABEL_141;
    }
    if ((unint64_t)(v70 - v98 - v93) < 0x20)
    {
      v101 = v70;
      goto LABEL_141;
    }
    v102 = (v100 >> 3) + 1;
    v103 = 8 * (v102 & 0x3FFFFFFFFFFFFFFCLL);
    v101 = &v70[-v103];
    v99 = (_QWORD *)((char *)v99 - v103);
    v104 = &v98[8 * v94 - 16];
    v105 = (__int128 *)(v70 - 16);
    v106 = v102 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v107 = *v105;
      *(v104 - 1) = *(v105 - 1);
      *v104 = v107;
      v104 -= 2;
      v105 -= 2;
      v106 -= 4;
    }
    while (v106);
    if (v102 != (v102 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_141:
        v108 = *((_QWORD *)v101 - 1);
        v101 -= 8;
        *--v99 = v108;
      }
      while (v101 != v92);
    }
  }
  v168 = v99;
  v169 = v91;
  v170 = &v98[8 * v97];
  if (v92)
    operator delete(v92);
LABEL_144:
  v169 = v91;
  nitro::ndarray<float>::init_from_shape((uint64_t **)&v168, a3);
  if (v15)
  {
    if (v15 == 1)
    {
      v109 = 0;
      v110 = 1;
      goto LABEL_151;
    }
    v109 = v15 & 0xFFFFFFFFFFFFFFFELL;
    v111 = (char *)v168 + 8;
    v112 = 1;
    v113 = v15 & 0xFFFFFFFFFFFFFFFELL;
    v114 = 1;
    do
    {
      v112 *= *(v111 - 1);
      v114 *= *v111;
      v111 += 2;
      v113 -= 2;
    }
    while (v113);
    v110 = v114 * v112;
    if (v15 != v109)
    {
LABEL_151:
      v115 = v14 - v109 - 2;
      v116 = (uint64_t *)((char *)v168 + 8 * v109);
      do
      {
        v117 = *v116++;
        v110 *= v117;
        --v115;
      }
      while (v115);
    }
  }
  else
  {
    v110 = 1;
  }
  v118 = operator new(8uLL);
  v165 = v118;
  *v118 = 1;
  v166 = v118 + 1;
  v167 = v118 + 1;
  v119 = operator new(8uLL);
  __p = v119;
  *v119 = 1;
  v163 = v119 + 1;
  v164 = v119 + 1;
  if ((int)v14 >= 4)
  {
    v120 = 0;
    v121 = 8 * (v14 - 3);
    do
    {
      v161[0] = *(_QWORD *)((char *)v174 + v121) * *(_QWORD *)((char *)v165 + v120);
      std::vector<unsigned long>::insert((char **)&v165, (uint64_t)v165, v161);
      v161[0] = *(_QWORD *)((char *)v171 + v121) * *(_QWORD *)((char *)__p + v120);
      std::vector<unsigned long>::insert((char **)&__p, (uint64_t)__p, v161);
      v120 += 8;
      v121 -= 8;
    }
    while (v121);
  }
  v122 = 8 * v89;
  v123 = *(_QWORD *)((char *)v174 + v122);
  v124 = 8 * v15;
  v125 = v15;
  v126 = *((_QWORD *)v174 + v15);
  v127 = *(_QWORD *)((char *)v171 + v122);
  v128 = *(_QWORD *)((char *)v171 + v124);
  v129 = *(_QWORD *)((char *)v168 + v122);
  v130 = *(_QWORD *)((char *)v168 + v124);
  memset(v161, 0, sizeof(v161));
  v157 = v130;
  if (v125)
  {
    if (v125 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v131 = (char *)operator new(v124);
    v132 = &v131[8 * v160];
    bzero(v131, 8 * v14 - 16);
    if (!v110)
      goto LABEL_180;
  }
  else
  {
    v131 = 0;
    v132 = 0;
    if (!v110)
      goto LABEL_180;
  }
  v133 = v123;
  v134 = 0;
  v135 = v126 * v133;
  v136 = v128 * v127;
  v137 = v157 * v129;
  v138 = v14 - 3;
  v139 = (v132 - v131) >> 3;
  if (v139 <= 1)
    v139 = 1;
  v158 = v139;
  do
  {
    if (v132 == v131)
    {
      v141 = 0;
      v140 = 0;
    }
    else
    {
      v140 = 0;
      v141 = 0;
      v142 = v165;
      v143 = __p;
      v144 = v171;
      v145 = v131;
      v146 = (uint64_t *)v174;
      v147 = v158;
      do
      {
        v148 = *v146++;
        if (v148 != 1)
          v141 += *v142 * *v145;
        if (*v144 != 1)
          v140 += *v143 * *v145;
        ++v145;
        ++v142;
        ++v144;
        ++v143;
        --v147;
      }
      while (v147);
    }
    cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, *((_QWORD *)v174 + v160), *(_DWORD *)((char *)v171 + v122), *(_DWORD *)((char *)v174 + v122), 1.0, (const float *)(v183 + 4 * v135 * v141), *(_DWORD *)((char *)v174 + v122), (const float *)(v177 + 4 * v136 * v140), *(_DWORD *)((char *)v171 + v122), 1.0, (float *)(*a3 + 4 * v137 * v134), *(_QWORD *)((char *)v168 + v122));
    if (v132 != v131)
    {
      ++*(_QWORD *)&v131[8 * v138];
      if (v138)
      {
        v149 = v168;
        v150 = v138;
        do
        {
          while (*(_QWORD *)&v131[8 * v150] >= v149[v150])
          {
            *(_QWORD *)&v131[8 * v150--] = 0;
            ++*(_QWORD *)&v131[8 * v150];
            if (!v150)
              goto LABEL_164;
          }
          --v150;
        }
        while (v150);
      }
    }
LABEL_164:
    ++v134;
  }
  while (v134 != v110);
LABEL_180:
  if (v131)
    operator delete(v131);
  if (__p)
  {
    v163 = __p;
    operator delete(__p);
  }
  if (v165)
  {
    v166 = v165;
    operator delete(v165);
  }
  if (v168)
  {
    v169 = v168;
    operator delete(v168);
  }
  if (v171)
  {
    v172 = v171;
    operator delete(v171);
  }
  if (v174)
  {
    v175 = v174;
    operator delete(v174);
  }
  if (v181)
  {
    v182 = v181;
    operator delete(v181);
  }
  if (v179)
  {
    v180 = v179;
    operator delete(v179);
  }
  v151 = v178;
  if (v178)
  {
    p_shared_owners = (unint64_t *)&v178->__shared_owners_;
    do
      v153 = __ldaxr(p_shared_owners);
    while (__stlxr(v153 - 1, p_shared_owners));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (v185)
  {
    v186 = v185;
    operator delete(v185);
  }
  v154 = v184;
  if (v184)
  {
    v155 = (unint64_t *)&v184->__shared_owners_;
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
}

void sub_191181B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;
  void *v36;
  void *v37;

  if (__p)
    operator delete(__p);
  nitro::ndarray<float>::~ndarray(a14);
  if (a25)
  {
    operator delete(a25);
    v36 = a28;
    if (!a28)
    {
LABEL_5:
      v37 = a31;
      if (!a31)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  else
  {
    v36 = a28;
    if (!a28)
      goto LABEL_5;
  }
  operator delete(v36);
  v37 = a31;
  if (!a31)
  {
LABEL_7:
    nitro::ndarray<float>::~ndarray(&a34);
    nitro::ndarray<float>::~ndarray((_QWORD *)(v34 - 160));
    _Unwind_Resume(a1);
  }
LABEL_6:
  operator delete(v37);
  goto LABEL_7;
}

char *std::vector<unsigned long>::insert(char **a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  char *v36;
  int64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  char *v48;
  char *v49;
  void *__dst;
  char *v51;
  _QWORD *v52;

  v6 = *a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - (_QWORD)*a1;
  v8 = v7 >> 3;
  v9 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFF8];
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_QWORD *)v9 = *a3;
      a1[1] = v9 + 8;
      return v9;
    }
    v11 = v5 - (_QWORD)(v9 + 8);
    v12 = v11 >> 3;
    v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      v17 = a1[1];
    }
    else
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      v15 = (unint64_t)&v6[v14 + 8];
      if (v5 > v15)
        v15 = (unint64_t)a1[1];
      v16 = v15 + ~(unint64_t)v6 - v14;
      if (v16 >= 0x58)
      {
        v17 = a1[1];
        if ((unint64_t)(v9 + 8 - &v6[v7 & 0xFFFFFFFFFFFFFFF8]) >= 0x20)
        {
          v40 = (v16 >> 3) + 1;
          v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
          v13 = (uint64_t *)((char *)v13 + v41);
          v17 = (char *)(v5 + v41);
          v42 = (_OWORD *)(v5 + 16);
          v43 = &v6[8 * v12 + 16 + 8 * v8];
          v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v45 = *(_OWORD *)v43;
            *(v42 - 1) = *((_OWORD *)v43 - 1);
            *v42 = v45;
            v42 += 2;
            v43 += 32;
            v44 -= 4;
          }
          while (v44);
          if (v40 == (v40 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_39;
        }
      }
      else
      {
        v17 = a1[1];
      }
      do
      {
        v46 = *v13++;
        *(_QWORD *)v17 = v46;
        v17 += 8;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_39:
    a1[1] = v17;
    if ((char *)v5 != v9 + 8)
      memmove((void *)(v5 - 8 * v12), v9, v11);
    *(_QWORD *)v9 = *a3;
    return v9;
  }
  v18 = ((uint64_t)(v5 - (_QWORD)v6) >> 3) + 1;
  if (v18 >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v19 = v10 - (_QWORD)v6;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  v52 = a1 + 2;
  if (v20)
  {
    if (v20 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v21 = (char *)operator new(8 * v20);
  }
  else
  {
    v21 = 0;
  }
  v48 = v21;
  v49 = &v21[8 * v8];
  __dst = v49;
  v51 = &v21[8 * v20];
  std::__split_buffer<unsigned long>::push_back(&v48, a3);
  v22 = v49;
  v23 = *a1;
  v24 = v49;
  if (*a1 != v9)
  {
    v25 = &v6[v7 & 0xFFFFFFFFFFFFFFF8];
    v26 = v25 - v23 - 8;
    v27 = v9;
    v24 = v49;
    if (v26 < 0x58)
      goto LABEL_47;
    v27 = v9;
    v24 = v49;
    if ((unint64_t)(v25 - v49) < 0x20)
      goto LABEL_47;
    v28 = (v26 >> 3) + 1;
    v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
    v27 = &v9[-v29];
    v24 = &v49[-v29];
    v30 = v49 - 16;
    v31 = &v6[8 * v8 - 16];
    v32 = v28 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v33 = *(_OWORD *)v31;
      *((_OWORD *)v30 - 1) = *((_OWORD *)v31 - 1);
      *(_OWORD *)v30 = v33;
      v30 -= 32;
      v31 -= 32;
      v32 -= 4;
    }
    while (v32);
    if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_47:
      do
      {
        v34 = *((_QWORD *)v27 - 1);
        v27 -= 8;
        *((_QWORD *)v24 - 1) = v34;
        v24 -= 8;
      }
      while (v27 != v23);
    }
  }
  v49 = v24;
  v35 = a1[1];
  v36 = (char *)__dst;
  v37 = v35 - v9;
  if (v35 != v9)
  {
    memmove(__dst, v9, v35 - v9);
    v24 = v49;
    v9 = a1[1];
  }
  v38 = *a1;
  *a1 = v24;
  a1[1] = &v36[v37];
  v39 = a1[2];
  a1[2] = v51;
  __dst = v9;
  v51 = v39;
  v48 = v38;
  v49 = v38;
  if (v9 != v38)
    __dst = &v9[(v38 - v9 + 7) & 0xFFFFFFFFFFFFFFF8];
  if (v38)
    operator delete(v38);
  return v22;
}

void sub_191181F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v13;

  if (a12 == a11)
  {
    v13 = __p;
    if (!__p)
      goto LABEL_3;
  }
  else
  {
    v13 = __p;
    if (!__p)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray_impl::compute_slice(__int128 **a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  char *v18;
  unint64_t v19;
  __int128 *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t *v45;
  unint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  _OWORD *v58;
  unint64_t *v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  uint64_t *v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  char *v78;
  uint64_t v79;
  __int128 v80;
  unint64_t *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t *v86;
  _QWORD *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _BYTE *v93;
  _QWORD *v94;
  char *v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  _OWORD *v100;
  char *v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  _QWORD v105[2];
  _QWORD *v106;
  char *v107;
  uint64_t *v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  char *v117;
  unint64_t *v118;
  unint64_t *v119;
  unint64_t *v120;
  uint64_t v121;

  v109 = a3;
  v121 = *MEMORY[0x1E0C80C00];
  v115 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3);
  v8 = *a2;
  v7 = a2[1];
  v108 = a2;
  v9 = v7 - v8;
  v10 = (v7 - v8) >> 3;
  v110 = (_QWORD *)v10;
  if (v115 > v10)
  {
    v118 = &v115;
    v119 = (unint64_t *)&v110;
    nitro::ndarray_impl::compute_slice(std::vector<nitro::slice_range> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::$_0::operator()();
  }
  v106 = a5;
  v12 = 0;
  v118 = 0;
  v119 = 0;
  v120 = 0;
  v115 = 0;
  v116 = 0;
  v117 = 0;
  if (v9 >= 8)
  {
    if ((v9 & 0x8000000000000000) != 0)
      goto LABEL_141;
    v12 = (unint64_t *)operator new(v9);
    v118 = v12;
    v119 = v12;
    v120 = &v12[v10];
  }
  v13 = v109[1];
  v14 = v13 - *v109;
  if (v13 == *v109)
  {
    v15 = 0;
    goto LABEL_9;
  }
  if (v14 < 0)
LABEL_141:
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v15 = (char *)operator new(v13 - *v109);
  v115 = (unint64_t)v15;
  v116 = (unint64_t)v15;
  v117 = &v15[8 * (v14 >> 3)];
LABEL_9:
  v105[1] = v105;
  MEMORY[0x1E0C80A78](a6);
  v17 = (_QWORD *)((char *)v105 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v7 == v8)
  {
    v114 = a4;
    goto LABEL_34;
  }
  v18 = (char *)v105 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  do
  {
    *(_QWORD *)v18 = -1;
    *((_QWORD *)v18 + 1) = -1;
    *((_QWORD *)v18 + 2) = 1;
    v18 += 24;
  }
  while (v18 != (char *)&v17[3 * v10]);
  v19 = 0;
  v20 = *a1;
  v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3);
  v22 = *v108;
  if (v10 <= 1)
    v23 = 1;
  else
    v23 = (v7 - v8) >> 3;
  v24 = v17;
  do
  {
    if (v19 < v21)
    {
      v25 = *v20;
      v24[2] = *((_QWORD *)v20 + 2);
      *(_OWORD *)v24 = v25;
    }
    v26 = *v24;
    v27 = v24[1];
    if (*v24 != -1)
      goto LABEL_22;
    if (v27 != -1)
    {
      v26 = -1;
LABEL_22:
      if (v27 < 0)
        goto LABEL_24;
      goto LABEL_23;
    }
    v26 = 0;
    *v24 = 0;
    v27 = *(_QWORD *)(v22 + 8 * v19);
    v24[1] = v27;
    if (v27 < 0)
      goto LABEL_24;
LABEL_23:
    v113 = v27;
    v112 = *(_QWORD *)(v22 + 8 * v19);
    if (v27 > v112)
    {
      v110 = &v113;
      v111 = &v112;
      nitro::ndarray_impl::compute_slice(std::vector<nitro::slice_range> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::$_1::operator()();
    }
LABEL_24:
    if ((v26 & 0x8000000000000000) == 0)
    {
      v113 = v26;
      v112 = *(_QWORD *)(v22 + 8 * v19);
      if (v26 > v112)
      {
        v110 = &v113;
        v111 = &v112;
        nitro::ndarray_impl::compute_slice(std::vector<nitro::slice_range> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::$_2::operator()();
      }
    }
    ++v19;
    v24 += 3;
    v20 = (__int128 *)((char *)v20 + 24);
  }
  while (v23 != v19);
  v114 = a4;
  v28 = (_QWORD *)*v109;
  v29 = v17;
  do
  {
    v31 = *v29;
    v29 += 3;
    v30 = v31;
    if ((v31 & 0x8000000000000000) == 0)
    {
      a4 += *v28 * v30;
      v114 = a4;
    }
    ++v28;
    --v23;
  }
  while (v23);
LABEL_34:
  v33 = *v108;
  v32 = v108[1];
  if (v32 == *v108)
    goto LABEL_94;
  v34 = 0;
  v107 = (char *)v17;
  while (2)
  {
    v36 = (char *)&v17[3 * v34];
    v38 = *(_QWORD *)v36;
    v37 = *((_QWORD *)v36 + 1);
    if (v38 < 0 || (v37 & 0x8000000000000000) == 0)
    {
      v39 = (char *)&v17[3 * v34];
      v42 = *((_QWORD *)v39 + 2);
      v41 = (uint64_t *)(v39 + 16);
      v40 = v42;
      v43 = (v37 + ~v38) / v42 + 1;
      v44 = v119;
      if (v119 >= v120)
      {
        v46 = v118;
        v47 = v119 - v118;
        v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v49 = (char *)v120 - (char *)v118;
        if (((char *)v120 - (char *)v118) >> 2 > v48)
          v48 = v49 >> 2;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
          v50 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v50 = v48;
        if (v50)
        {
          if (v50 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v51 = v50;
          v52 = operator new(8 * v50);
          v50 = v51;
        }
        else
        {
          v52 = 0;
        }
        v53 = (uint64_t *)&v52[8 * v47];
        *v53 = v43;
        v45 = (unint64_t *)(v53 + 1);
        if (v44 != v46)
        {
          v54 = (char *)v44 - (char *)v46 - 8;
          if (v54 < 0x58)
            goto LABEL_147;
          if ((unint64_t)((char *)v46 - v52) < 0x20)
            goto LABEL_147;
          v55 = (v54 >> 3) + 1;
          v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
          v57 = &v44[v56 / 0xFFFFFFFFFFFFFFF8];
          v53 = (uint64_t *)((char *)v53 - v56);
          v58 = &v52[8 * v47 - 16];
          v59 = v44 - 2;
          v60 = v55 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v61 = *(_OWORD *)v59;
            *(v58 - 1) = *((_OWORD *)v59 - 1);
            *v58 = v61;
            v58 -= 2;
            v59 -= 4;
            v60 -= 4;
          }
          while (v60);
          v44 = v57;
          if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_147:
            do
            {
              v62 = *--v44;
              *--v53 = v62;
            }
            while (v44 != v46);
          }
        }
        v118 = (unint64_t *)v53;
        v119 = v45;
        v120 = (unint64_t *)&v52[8 * v50];
        if (v46)
        {
          operator delete(v46);
          v40 = *v41;
          v15 = (char *)v116;
        }
        v17 = (uint64_t *)v107;
      }
      else
      {
        *v119 = v43;
        v45 = v44 + 1;
      }
      v119 = v45;
      v63 = v40 * *(_QWORD *)(*v109 + 8 * v34);
      if (v15 < v117)
      {
        *(_QWORD *)v15 = v63;
        v35 = v15 + 8;
      }
      else
      {
        v64 = (char *)v115;
        v65 = (uint64_t)&v15[-v115] >> 3;
        v66 = v65 + 1;
        if ((unint64_t)(v65 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v67 = (uint64_t)&v117[-v115];
        if ((uint64_t)&v117[-v115] >> 2 > v66)
          v66 = v67 >> 2;
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8)
          v68 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v68 = v66;
        if (v68)
        {
          if (v68 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v69 = operator new(8 * v68);
        }
        else
        {
          v69 = 0;
        }
        v70 = (uint64_t *)&v69[8 * v65];
        *v70 = v63;
        v35 = (char *)(v70 + 1);
        if (v15 != v64)
        {
          v71 = v15 - v64 - 8;
          if (v71 < 0x168)
          {
            v72 = v15;
            goto LABEL_79;
          }
          v74 = (v15 - 8 - v64) & 0xFFFFFFFFFFFFFFF8;
          if (&v69[v15 - v64 - 8 - v74] > &v69[v15 - v64 - 8])
          {
            v72 = v15;
            goto LABEL_79;
          }
          if (&v15[-v74 - 8] > v15 - 8)
          {
            v72 = v15;
            goto LABEL_79;
          }
          if ((unint64_t)(v64 - v69) < 0x20)
          {
            v72 = v15;
            goto LABEL_79;
          }
          v75 = (v71 >> 3) + 1;
          v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
          v72 = &v15[-v76];
          v70 = (uint64_t *)((char *)v70 - v76);
          v77 = &v69[8 * v65 - 16];
          v78 = v15 - 16;
          v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v80 = *(_OWORD *)v78;
            *(v77 - 1) = *((_OWORD *)v78 - 1);
            *v77 = v80;
            v77 -= 2;
            v78 -= 32;
            v79 -= 4;
          }
          while (v79);
          if (v75 != (v75 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_79:
              v73 = *((_QWORD *)v72 - 1);
              v72 -= 8;
              *--v70 = v73;
            }
            while (v72 != v64);
          }
        }
        v115 = (unint64_t)v70;
        v116 = (unint64_t)v35;
        v117 = &v69[8 * v68];
        if (v64)
          operator delete(v64);
        v17 = (uint64_t *)v107;
      }
      v116 = (unint64_t)v35;
      v15 = v35;
      v33 = *v108;
      v32 = v108[1];
    }
    if (++v34 < (unint64_t)((v32 - v33) >> 3))
      continue;
    break;
  }
  v12 = v118;
  if (v119 == v118)
  {
LABEL_94:
    if (v12 >= v120)
    {
      v82 = v15;
      v83 = (char *)v120 - (char *)v12;
      if ((unint64_t)(((char *)v120 - (char *)v12) >> 2) <= 1)
        v84 = 1;
      else
        v84 = v83 >> 2;
      if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFF8)
        v85 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v85 = v84;
      if (v85 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v86 = (unint64_t *)operator new(8 * v85);
      *v86 = 1;
      v81 = v86 + 1;
      v118 = v86;
      v119 = v86 + 1;
      v120 = &v86[v85];
      if (v12)
      {
        operator delete(v12);
        v15 = (char *)v116;
      }
      else
      {
        v15 = v82;
      }
    }
    else
    {
      *v12 = 1;
      v81 = v12 + 1;
    }
    v119 = v81;
    if (v15 < v117)
    {
      *(_QWORD *)v15 = 1;
      v87 = v15 + 8;
      goto LABEL_129;
    }
    v88 = (char *)v115;
    v89 = (uint64_t)&v15[-v115] >> 3;
    v90 = v89 + 1;
    if ((unint64_t)(v89 + 1) >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v91 = (uint64_t)&v117[-v115];
    if ((uint64_t)&v117[-v115] >> 2 > v90)
      v90 = v91 >> 2;
    if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8)
      v92 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v92 = v90;
    if (v92)
    {
      if (v92 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v93 = operator new(8 * v92);
    }
    else
    {
      v93 = 0;
    }
    v94 = &v93[8 * v89];
    v95 = &v93[8 * v92];
    *v94 = 1;
    v87 = v94 + 1;
    if (v15 != v88)
    {
      v96 = v15 - v88 - 8;
      if (v96 < 0x58)
      {
        v97 = v15;
        goto LABEL_126;
      }
      if ((unint64_t)(v88 - v93) < 0x20)
      {
        v97 = v15;
        goto LABEL_126;
      }
      v98 = (v96 >> 3) + 1;
      v99 = 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
      v97 = &v15[-v99];
      v94 = (_QWORD *)((char *)v94 - v99);
      v100 = &v93[8 * v89 - 16];
      v101 = v15 - 16;
      v102 = v98 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v103 = *(_OWORD *)v101;
        *(v100 - 1) = *((_OWORD *)v101 - 1);
        *v100 = v103;
        v100 -= 2;
        v101 -= 32;
        v102 -= 4;
      }
      while (v102);
      if (v98 != (v98 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_126:
          v104 = *((_QWORD *)v97 - 1);
          v97 -= 8;
          *--v94 = v104;
        }
        while (v97 != v88);
      }
    }
    v115 = (unint64_t)v94;
    v116 = (unint64_t)v87;
    v117 = v95;
    if (v88)
      operator delete(v88);
LABEL_129:
    v116 = (unint64_t)v87;
  }
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_6vectorImNS_9allocatorImEEEES6_mEEC2B8ne180100IJLm0ELm1ELm2EEJS6_S6_mEJEJEJRS6_S9_RmEEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSC_IJDpT2_EEEDpOT3_(v106, (uint64_t)&v118, (uint64_t)&v115, &v114);
  if (v115)
  {
    v116 = v115;
    operator delete((void *)v115);
  }
  if (v118)
  {
    v119 = v118;
    operator delete(v118);
  }
}

void sub_191182800(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)(v1 - 136);
  if (v3)
  {
    *(_QWORD *)(v1 - 128) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(v1 - 112);
  if (!v4)
    _Unwind_Resume(exception_object);
  *(_QWORD *)(v1 - 104) = v4;
  operator delete(v4);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray_impl::compute_slice(std::vector<nitro::slice_range> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", 96);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"range_in.size()", 15);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"<=", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"shape.size()", 12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"<=", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", "operator()", 132, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", "operator()", 132, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_191182C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_191182C74(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray_impl::compute_slice(std::vector<nitro::slice_range> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::$_1::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", 96);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"range[i].end", 12);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"<=", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"shape[i]", 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"<=", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", "operator()", 155, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", "operator()", 155, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_191183044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1911830AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray_impl::compute_slice(std::vector<nitro::slice_range> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::$_2::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", 96);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"range[i].start", 14);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"<=", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"shape[i]", 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"<=", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", "operator()", 158, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", "operator()", 158, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19118347C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1911834E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray_impl::compute_transpose(uint64_t **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *v5;
  uint64_t *v6;
  int64_t v7;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  _BYTE *v15;
  const void *v16;
  int64_t v17;
  _QWORD *v18;
  uint64_t v19;
  const void *v20;
  int64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *__p;
  void *v28;
  _QWORD *v29;
  void *v30;
  char **v31;
  char **v32;
  char *v33;
  void **v34;
  void **p_p;
  uint64_t v36;

  v6 = *a1;
  v5 = a1[1];
  v7 = (char *)v5 - (char *)*a1;
  v30 = (void *)(v7 >> 3);
  __p = (void *)(((_BYTE *)a2[1] - (_BYTE *)*a2) >> 3);
  if ((void *)(v7 >> 3) != __p)
  {
    v34 = &v30;
    p_p = &__p;
    nitro::ndarray_impl::compute_transpose(std::vector<unsigned long>,std::vector<unsigned long> const&,std::vector<unsigned long> const&)::$_0::operator()();
  }
  v34 = 0;
  p_p = 0;
  v36 = 0;
  if (v5 == v6)
  {
    v12 = 0;
    v11 = 0;
  }
  else
  {
    if (v7 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v11 = (char *)operator new(v7);
    v12 = &v11[8 * (v7 >> 3)];
    memcpy(v11, v6, v7);
  }
  std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
  if (v12 != v11)
  {
    v13 = 0;
    v14 = (v12 - v11) >> 3;
    if (v14 <= 1)
      v14 = 1;
    do
    {
      __p = *(void **)&v11[8 * (_QWORD)v13];
      v33 = v13;
      if (v13 != __p)
      {
        v30 = &__p;
        v31 = &v33;
        nitro::ndarray_impl::compute_transpose(std::vector<unsigned long>,std::vector<unsigned long> const&,std::vector<unsigned long> const&)::$_1::operator()();
      }
      ++v13;
    }
    while ((char *)v14 != v13);
  }
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v16 = *a2;
  v15 = a2[1];
  v17 = v15 - (_BYTE *)*a2;
  if (v15 == *a2)
  {
    v18 = 0;
  }
  else
  {
    if (v17 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v18 = operator new(v15 - (_BYTE *)*a2);
    v30 = v18;
    v32 = (char **)&v18[v17 >> 3];
    memcpy(v18, v16, v17);
    v31 = v32;
  }
  __p = 0;
  v28 = 0;
  v29 = 0;
  v20 = *(const void **)a3;
  v19 = *(_QWORD *)(a3 + 8);
  v21 = v19 - *(_QWORD *)a3;
  if (v19 == *(_QWORD *)a3)
  {
    v22 = 0;
  }
  else
  {
    if (v21 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v22 = operator new(v19 - *(_QWORD *)a3);
    __p = v22;
    v29 = &v22[v21 >> 3];
    memcpy(v22, v20, v21);
    v28 = v29;
  }
  v23 = *a1;
  v24 = (char *)a1[1] - (char *)*a1;
  if (v24)
  {
    v25 = v24 >> 3;
    if (v25 <= 1)
      v25 = 1;
    do
    {
      *v18++ = *((_QWORD *)v16 + *v23);
      v26 = *v23++;
      *v22++ = *((_QWORD *)v20 + v26);
      --v25;
    }
    while (v25);
  }
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJNS_6vectorImNS_9allocatorImEEEES6_EEC2B8ne180100IJLm0ELm1EEJS6_S6_EJEJEJRS6_S9_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSB_IJDpT2_EEEDpOT3_(a4, (uint64_t)&v30, (uint64_t)&__p);
  if (__p)
  {
    v28 = __p;
    operator delete(__p);
  }
  if (v30)
  {
    v31 = (char **)v30;
    operator delete(v30);
  }
  if (v11)
    operator delete(v11);
}

void sub_191183764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  void *v17;
  void *v19;

  if (__p)
  {
    operator delete(__p);
    v19 = a12;
    if (!a12)
    {
LABEL_3:
      if (!v17)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(v17);
      goto LABEL_8;
    }
  }
  else
  {
    v19 = a12;
    if (!a12)
      goto LABEL_3;
  }
  operator delete(v19);
  if (!v17)
    goto LABEL_8;
  goto LABEL_7;
}

void nitro::ndarray_impl::compute_transpose(std::vector<unsigned long>,std::vector<unsigned long> const&,std::vector<unsigned long> const&)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", 96);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"permute.size()", 14);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"shape.size()", 12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", "operator()", 190, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", "operator()", 190, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_191183B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_191183BF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray_impl::compute_transpose(std::vector<unsigned long>,std::vector<unsigned long> const&,std::vector<unsigned long> const&)::$_1::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", 96);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"permute_sort[i]", 15);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"i", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", "operator()", 195, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", "operator()", 195, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_191183FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_191184030(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray_impl::compute_squeeze(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  _BYTE *v7;
  const void *v8;
  int64_t v9;
  char *v11;
  char *v12;
  _BYTE *v13;
  const void *v14;
  int64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  char *v21;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  char *v26;
  int64_t v27;
  char *v28;
  size_t v29;
  _QWORD *v30;
  char *v31;
  void *__p;
  void *v33;
  char *v34;
  void *v35;
  void *v36;
  char *v37;
  uint64_t v38;

  v38 = a3;
  v8 = *a1;
  v7 = a1[1];
  v9 = v7 - (_BYTE *)*a1;
  if (v7 == *a1)
  {
    _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_6vectorImNS_9allocatorImEEEES6_mEEC2B8ne180100IJLm0ELm1ELm2EEJS6_S6_mEJEJEJRKS6_SA_RmEEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSD_IJDpT2_EEEDpOT3_(a5, (uint64_t)a1, (uint64_t)a2, &v38);
  }
  else
  {
    v35 = 0;
    v36 = 0;
    v37 = 0;
    if (v9 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v11 = (char *)operator new(v9);
    v12 = &v11[8 * (v9 >> 3)];
    v35 = v11;
    v37 = v12;
    memcpy(v11, v8, v9);
    v36 = v12;
    __p = 0;
    v33 = 0;
    v34 = 0;
    v14 = *a2;
    v13 = a2[1];
    v15 = v13 - (_BYTE *)*a2;
    v30 = a5;
    if (v13 == *a2)
    {
      v16 = 0;
      v17 = 0;
    }
    else
    {
      if (v15 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v16 = (char *)operator new(v15);
      __p = v16;
      v17 = &v16[8 * (v15 >> 3)];
      v34 = v17;
      memcpy(v16, v14, v15);
    }
    if ((int)((unint64_t)v9 >> 3) < 1)
    {
      v21 = v17;
    }
    else
    {
      v31 = v16;
      v18 = (int)(v9 >> 3);
      v19 = (_QWORD *)*a4;
      v20 = (_QWORD *)a4[1];
      v21 = v17;
      do
      {
        v23 = v18 - 1;
        v24 = &v11[8 * v18 - 8];
        if (*(_QWORD *)v24 == 1 && (unint64_t)(v12 - v11) >= 9)
        {
          if (v20 == v19)
            goto LABEL_20;
          v25 = v19;
          while (*v25 != v23)
          {
            if (++v25 == v20)
            {
              v25 = v20;
              break;
            }
          }
          if (v25 != v20)
          {
LABEL_20:
            v26 = &v11[8 * v18];
            v27 = v12 - v26;
            if (v12 != v26)
              memmove(&v11[8 * v18 - 8], v26, v12 - v26);
            v28 = &v31[8 * v18];
            v29 = v21 - v28;
            if (v29)
              memmove(&v31[8 * v23], v28, v29);
            v12 = &v24[v27];
            v21 = &v31[8 * v23 + v29];
          }
        }
      }
      while (v18-- > 1);
    }
    v36 = v12;
    v33 = v21;
    _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_6vectorImNS_9allocatorImEEEES6_mEEC2B8ne180100IJLm0ELm1ELm2EEJS6_S6_mEJEJEJRS6_S9_RmEEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSC_IJDpT2_EEEDpOT3_(v30, (uint64_t)&v35, (uint64_t)&__p, &v38);
    if (__p)
    {
      v33 = __p;
      operator delete(__p);
    }
    if (v35)
    {
      v36 = v35;
      operator delete(v35);
    }
  }
}

void sub_191184270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray_impl::compute_broadcast(const void **a1, const void **a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  uint64_t v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t i;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  file_logger *v29;
  pthread_key_t *started;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::ios_base *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  const std::locale::facet *v43;
  file_logger *v44;
  file_logger *v45;
  char *v46;
  _QWORD *v47;
  void **v48;
  uint64_t v49;
  file_logger *v50;
  file_logger *v51;
  char *v52;
  _QWORD *v53;
  void *locale;
  uint64_t v55;
  _QWORD *v56;
  void *v57;
  uint64_t j;
  uint64_t v59;
  _QWORD *exception;
  _BYTE *v61;
  int64_t v62;
  char *v63;
  size_t __len;
  const void *v67;
  char *v69;
  char *v70;
  char *v71;
  void *__p[2];
  unsigned __int8 v74;
  uint64_t v75;
  uint64_t v76[8];
  __int128 v77;
  __int128 v78;
  int v79;
  uint64_t v80;
  std::locale v81;
  uint64_t v82;
  unsigned __int8 v83;

  v5 = *a1;
  v4 = a1[1];
  v6 = v4 - (_BYTE *)*a1;
  v7 = v6 >> 3;
  v9 = *a2;
  v8 = a2[1];
  v10 = v8 - (_BYTE *)*a2;
  v11 = v10 >> 3;
  if (v6 >> 3 <= (unint64_t)(v10 >> 3))
    v12 = v10 >> 3;
  else
    v12 = v6 >> 3;
  v13 = 8 * v12;
  __len = v8 - (_BYTE *)*a2;
  v67 = a2[1];
  if (v12)
  {
    v61 = a1[1];
    v62 = v4 - (_BYTE *)*a1;
    if (v12 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v14 = (char *)operator new(8 * v12);
    v15 = &v14[8 * v12];
    memset_pattern16(v14, &xmmword_191A87020, 8 * v12);
    v16 = (char *)operator new(8 * v12);
    memset_pattern16(v16, &xmmword_191A87020, 8 * v12);
    v17 = (char *)operator new(8 * v12);
    bzero(v17, 8 * v12);
    v70 = v17;
    v18 = (char *)operator new(8 * v12);
    v63 = &v16[8 * v12];
    v71 = &v17[v13];
    v19 = &v18[v13];
    v69 = v18;
    bzero(v18, 8 * v12);
    v6 = v62;
    if (v61 != v5)
      goto LABEL_7;
  }
  else
  {
    v14 = 0;
    v70 = 0;
    v71 = 0;
    v63 = 0;
    v15 = 0;
    v16 = 0;
    v69 = 0;
    v19 = 0;
    if (v4 != v5)
LABEL_7:
      memmove(&v15[-8 * v7], v5, v6);
  }
  v20 = *(_QWORD *)(a3 + 8);
  if (v20 != *(_QWORD *)a3)
    memmove(&v63[-(v20 - *(_QWORD *)a3)], *(const void **)a3, v20 - *(_QWORD *)a3);
  if (v67 != v9)
    memmove(&v71[-8 * v11], v9, __len);
  v21 = *(_QWORD *)(a4 + 8);
  v22 = v19;
  if (v21 != *(_QWORD *)a4)
    memmove(&v19[-(v21 - *(_QWORD *)a4)], *(const void **)a4, v21 - *(_QWORD *)a4);
  if (v12)
  {
    v23 = (char *)operator new(8 * v12);
    v24 = &v23[8 * v12];
    memset_pattern16(v23, &xmmword_191A87020, 8 * v12);
    for (i = 0; i != v12; ++i)
    {
      v27 = *(_QWORD *)&v14[8 * i];
      v26 = *(_QWORD *)&v16[8 * i];
      if (v27 == v26)
      {
        v26 = *(_QWORD *)&v14[8 * i];
      }
      else if (v27 != 1)
      {
        v28 = v26 == 1;
        v26 = *(_QWORD *)&v14[8 * i];
        if (!v28)
        {
          if (*((int *)global_logger() + 169) <= 6)
          {
            v29 = (file_logger *)global_logger();
            started = (pthread_key_t *)file_logger::start_stream(v29, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", "compute_broadcast", 253, 1);
            v31 = pthread_getspecific(started[74]);
            if (v31 && *((_BYTE *)v31 + 280))
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31 + 2, (uint64_t)"shapes canot be broadcasted", 27);
            v32 = pthread_getspecific(started[74]);
            if (v32 && *((_BYTE *)v32 + 280))
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32 + 2, (uint64_t)"\n", 1);
              file_logger::stream_flush((file_logger *)started);
            }
          }
          v33 = MEMORY[0x1E0DE4FE0];
          v34 = MEMORY[0x1E0DE4FE0] + 64;
          v35 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
          v36 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
          v80 = MEMORY[0x1E0DE4FE0] + 64;
          v75 = v35;
          *(uint64_t *)((char *)&v76[-1] + *(_QWORD *)(v35 - 24)) = v36;
          v37 = (std::ios_base *)((char *)&v76[-1] + *(_QWORD *)(v75 - 24));
          std::ios_base::init(v37, v76);
          v37[1].__vftable = 0;
          v37[1].__fmtflags_ = -1;
          v75 = v33 + 24;
          v80 = v34;
          std::streambuf::basic_streambuf();
          v76[0] = MEMORY[0x1E0DE4FB8] + 16;
          v77 = 0u;
          v78 = 0u;
          v79 = 16;
          v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"Check failed (", 14);
          v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", 96);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)":", 1);
          v40 = (_QWORD *)std::ostream::operator<<();
          v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"): ", 3);
          v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"false", 5);
          std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(_QWORD *)(*v42 - 24)));
          v43 = std::locale::use_facet(&v81, MEMORY[0x1E0DE4A90]);
          ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
          std::locale::~locale(&v81);
          std::ostream::put();
          std::ostream::flush();
          if (*((int *)global_logger() + 169) <= 6)
          {
            v44 = (file_logger *)global_logger();
            v45 = file_logger::start_stream(v44, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", "operator()", 255, 1);
            std::stringbuf::str();
            v46 = (char *)pthread_getspecific(*((_QWORD *)v45 + 74));
            if (v46 && v46[280])
            {
              v47 = v46 + 16;
              if ((v74 & 0x80u) == 0)
                v48 = __p;
              else
                v48 = (void **)__p[0];
              if ((v74 & 0x80u) == 0)
                v49 = v74;
              else
                v49 = (uint64_t)__p[1];
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)v48, v49);
            }
            if ((char)v74 < 0)
              operator delete(__p[0]);
          }
          __print_back_trace();
          if (*((int *)global_logger() + 169) <= 6)
          {
            v50 = (file_logger *)global_logger();
            v51 = file_logger::start_stream(v50, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", "operator()", 255, 1);
            std::stringbuf::str();
            v52 = (char *)pthread_getspecific(*((_QWORD *)v51 + 74));
            if (v52 && v52[280])
            {
              v53 = v52 + 16;
              if ((v83 & 0x80u) == 0)
                locale = &v81;
              else
                locale = v81.__locale_;
              if ((v83 & 0x80u) == 0)
                v55 = v83;
              else
                v55 = v82;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)locale, v55);
            }
            v56 = pthread_getspecific(*((_QWORD *)v51 + 74));
            if (v56)
            {
              if (*((_BYTE *)v56 + 280))
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56 + 2, (uint64_t)"\n", 1);
                file_logger::stream_flush(v51);
                if (*((_DWORD *)v51 + 150) == 7)
                {
                  __print_back_trace();
                  exception = __cxa_allocate_exception(8uLL);
                  *exception = "LOG_FATAL encountered";
                  __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
                }
              }
            }
            if ((char)v83 < 0)
              operator delete(v81.__locale_);
          }
          v57 = __cxa_allocate_exception(0x18uLL);
          std::stringbuf::str();
        }
      }
      *(_QWORD *)&v23[8 * i] = v26;
    }
    for (j = 0; j != v12; ++j)
    {
      v59 = *(_QWORD *)&v23[8 * j];
      if (*(_QWORD *)&v14[8 * j] != v59)
        *(_QWORD *)&v70[8 * j] = 0;
      if (*(_QWORD *)&v16[8 * j] != v59)
        *(_QWORD *)&v69[8 * j] = 0;
    }
  }
  else
  {
    v24 = 0;
    v23 = 0;
  }
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(a1, v23, v24, (v24 - v23) >> 3);
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((_QWORD *)a3, v23, v24, (v24 - v23) >> 3);
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(a2, v70, v71, (v71 - v70) >> 3);
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((_QWORD *)a4, v69, v22, (v22 - v69) >> 3);
  if (v23)
    operator delete(v23);
  if (v69)
    operator delete(v69);
  if (v70)
    operator delete(v70);
  if (v16)
    operator delete(v16);
  if (v14)
    operator delete(v14);
}

void sub_191184950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;

  if (*(char *)(v50 - 89) < 0)
    operator delete(*(void **)(v50 - 112));
  a31 = *v48;
  *(uint64_t *)((char *)&a31 + *(_QWORD *)(a31 - 24)) = v48[3];
  a32 = v49 + 16;
  if (a45 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v47);
  if (v46)
  {
    operator delete(v46);
    if (!a18)
    {
LABEL_7:
      if (!a19)
        goto LABEL_8;
      goto LABEL_15;
    }
  }
  else if (!a18)
  {
    goto LABEL_7;
  }
  operator delete(a18);
  if (!a19)
  {
LABEL_8:
    if (!v45)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_15:
  operator delete(a19);
  if (!v45)
  {
LABEL_10:
    if (a22)
      operator delete(a22);
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(v45);
  goto LABEL_10;
}

void nitro::ndarray_container::init_from_shape(int a1@<W0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::ios_base *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  const std::locale::facet *v20;
  file_logger *v21;
  file_logger *started;
  char *v23;
  _QWORD *v24;
  void **v25;
  uint64_t v26;
  file_logger *v27;
  file_logger *v28;
  char *v29;
  _QWORD *v30;
  void *locale;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  _QWORD *exception;
  void *v36[2];
  unsigned __int8 v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *__p;
  void *v43;
  __int128 v44;
  __int128 v45;
  int v46;
  uint64_t v47;
  std::locale v48;
  uint64_t v49;
  unsigned __int8 v50;

  switch(a1)
  {
    case 3:
      nitro::ndarray<int>::init_from_shape(a2, &v38);
      nitro::ndarray_container::ndarray_container<int,(void *)0>(a3, &v38);
      if (__p)
      {
        v43 = __p;
        operator delete(__p);
      }
      if (v40)
      {
        v41 = v40;
        operator delete(v40);
      }
      v4 = (std::__shared_weak_count *)v39;
      if (!v39)
        return;
      v5 = (unint64_t *)(v39 + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      break;
    case 5:
      nitro::ndarray<unsigned char>::init_from_shape(a2, &v38);
      nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>(a3, &v38);
      if (__p)
      {
        v43 = __p;
        operator delete(__p);
      }
      if (v40)
      {
        v41 = v40;
        operator delete(v40);
      }
      v4 = (std::__shared_weak_count *)v39;
      if (!v39)
        return;
      v9 = (unint64_t *)(v39 + 8);
      do
        v6 = __ldaxr(v9);
      while (__stlxr(v6 - 1, v9));
      break;
    case 9:
      nitro::ndarray<float>::init_from_shape(a2, &v38);
      nitro::ndarray_container::ndarray_container<float,(void *)0>(a3, &v38);
      if (__p)
      {
        v43 = __p;
        operator delete(__p);
      }
      if (v40)
      {
        v41 = v40;
        operator delete(v40);
      }
      v4 = (std::__shared_weak_count *)v39;
      if (!v39)
        return;
      v7 = (unint64_t *)(v39 + 8);
      do
        v6 = __ldaxr(v7);
      while (__stlxr(v6 - 1, v7));
      break;
    case 11:
      nitro::ndarray<half>::init_from_shape(a2, &v38);
      nitro::ndarray_container::ndarray_container<half,(void *)0>(a3, &v38);
      if (__p)
      {
        v43 = __p;
        operator delete(__p);
      }
      if (v40)
      {
        v41 = v40;
        operator delete(v40);
      }
      v4 = (std::__shared_weak_count *)v39;
      if (!v39)
        return;
      v8 = (unint64_t *)(v39 + 8);
      do
        v6 = __ldaxr(v8);
      while (__stlxr(v6 - 1, v8));
      break;
    default:
      v10 = MEMORY[0x1E0DE4FE0];
      v11 = MEMORY[0x1E0DE4FE0] + 64;
      v12 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v13 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v47 = MEMORY[0x1E0DE4FE0] + 64;
      v38 = v12;
      *(uint64_t *)((char *)&v38 + *(_QWORD *)(v12 - 24)) = v13;
      v14 = (std::ios_base *)((char *)&v38 + *(_QWORD *)(v38 - 24));
      std::ios_base::init(v14, &v39);
      v14[1].__vftable = 0;
      v14[1].__fmtflags_ = -1;
      v38 = v10 + 24;
      v47 = v11;
      std::streambuf::basic_streambuf();
      v39 = MEMORY[0x1E0DE4FB8] + 16;
      v44 = 0u;
      v45 = 0u;
      v46 = 16;
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Check failed (", 14);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", 96);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)":", 1);
      v17 = (_QWORD *)std::ostream::operator<<();
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"): ", 3);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"false", 5);
      std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(*v19 - 24)));
      v20 = std::locale::use_facet(&v48, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
      std::locale::~locale(&v48);
      std::ostream::put();
      std::ostream::flush();
      if (*((int *)global_logger() + 169) <= 6)
      {
        v21 = (file_logger *)global_logger();
        started = file_logger::start_stream(v21, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", "operator()", 306, 1);
        std::stringbuf::str();
        v23 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
        if (v23 && v23[280])
        {
          v24 = v23 + 16;
          if ((v37 & 0x80u) == 0)
            v25 = v36;
          else
            v25 = (void **)v36[0];
          if ((v37 & 0x80u) == 0)
            v26 = v37;
          else
            v26 = (uint64_t)v36[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
        }
        if ((char)v37 < 0)
          operator delete(v36[0]);
      }
      __print_back_trace();
      if (*((int *)global_logger() + 169) <= 6)
      {
        v27 = (file_logger *)global_logger();
        v28 = file_logger::start_stream(v27, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", "operator()", 306, 1);
        std::stringbuf::str();
        v29 = (char *)pthread_getspecific(*((_QWORD *)v28 + 74));
        if (v29 && v29[280])
        {
          v30 = v29 + 16;
          if ((v50 & 0x80u) == 0)
            locale = &v48;
          else
            locale = v48.__locale_;
          if ((v50 & 0x80u) == 0)
            v32 = v50;
          else
            v32 = v49;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)locale, v32);
        }
        v33 = pthread_getspecific(*((_QWORD *)v28 + 74));
        if (v33)
        {
          if (*((_BYTE *)v33 + 280))
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33 + 2, (uint64_t)"\n", 1);
            file_logger::stream_flush(v28);
            if (*((_DWORD *)v28 + 150) == 7)
            {
              __print_back_trace();
              exception = __cxa_allocate_exception(8uLL);
              *exception = "LOG_FATAL encountered";
              __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
            }
          }
        }
        if ((char)v50 < 0)
          operator delete(v48.__locale_);
      }
      v34 = __cxa_allocate_exception(0x18uLL);
      std::stringbuf::str();
  }
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_191184F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;

  if (*(char *)(v33 - 65) < 0)
    operator delete(*(void **)(v33 - 88));
  a16 = *v31;
  *(uint64_t *)((char *)&a16 + *(_QWORD *)(a16 - 24)) = v31[3];
  a17 = v32 + 16;
  if (a30 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v30);
  _Unwind_Resume(a1);
}

void sub_191185040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_191185054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_191185068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19118507C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::init_from_shape(uint64_t **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  size_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *__p;
  void *v20;
  uint64_t v21;
  void *v22;
  std::__shared_weak_count *v23;

  v22 = 0;
  v23 = 0;
  v5 = *a1;
  v4 = a1[1];
  if (v4 != *a1)
  {
    v6 = (char *)v4 - (char *)*a1 - 8;
    if (v6 >= 8)
    {
      v9 = (v6 >> 3) + 1;
      v8 = &v5[v9 & 0x3FFFFFFFFFFFFFFELL];
      v10 = v5 + 1;
      v11 = 1;
      v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
      v13 = 1;
      do
      {
        v11 *= *(v10 - 1);
        v13 *= *v10;
        v10 += 2;
        v12 -= 2;
      }
      while (v12);
      v7 = v13 * v11;
      if (v9 == (v9 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_8;
    }
    else
    {
      v7 = 1;
      v8 = *a1;
    }
    do
    {
      v14 = *v8++;
      v7 *= v14;
    }
    while (v8 != v4);
LABEL_8:
    v15 = operator new[]();
    std::shared_ptr<unsigned char>::reset[abi:ne180100]<unsigned char,std::default_delete<unsigned char []>,void>(&v22, v15);
    bzero(v22, v7);
  }
  __p = 0;
  v20 = 0;
  v21 = 0;
  nitro::ndarray<unsigned char>::ndarray(a2, &v22, (uint64_t)a1, (uint64_t)&__p, 0);
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  v16 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1911851D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::init_from_shape(uint64_t **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p;
  void *v21;
  uint64_t v22;
  void *v23;
  std::__shared_weak_count *v24;

  v23 = 0;
  v24 = 0;
  v5 = *a1;
  v4 = a1[1];
  if (v4 != *a1)
  {
    v6 = (char *)v4 - (char *)*a1 - 8;
    if (v6 >= 8)
    {
      v9 = (v6 >> 3) + 1;
      v8 = &v5[v9 & 0x3FFFFFFFFFFFFFFELL];
      v10 = v5 + 1;
      v11 = 1;
      v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
      v13 = 1;
      do
      {
        v11 *= *(v10 - 1);
        v13 *= *v10;
        v10 += 2;
        v12 -= 2;
      }
      while (v12);
      v7 = v13 * v11;
      if (v9 == (v9 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_8;
    }
    else
    {
      v7 = 1;
      v8 = *a1;
    }
    do
    {
      v14 = *v8++;
      v7 *= v14;
    }
    while (v8 != v4);
LABEL_8:
    v15 = 4 * v7;
    v16 = operator new[]();
    std::shared_ptr<int>::reset[abi:ne180100]<int,std::default_delete<int []>,void>(&v23, v16);
    bzero(v23, v15);
  }
  __p = 0;
  v21 = 0;
  v22 = 0;
  nitro::ndarray<int>::ndarray(a2, &v23, (uint64_t)a1, (uint64_t)&__p, 0);
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  v17 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_191185350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::init_from_shape(uint64_t **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p;
  void *v21;
  uint64_t v22;
  void *v23;
  std::__shared_weak_count *v24;

  v23 = 0;
  v24 = 0;
  v5 = *a1;
  v4 = a1[1];
  if (v4 != *a1)
  {
    v6 = (char *)v4 - (char *)*a1 - 8;
    if (v6 >= 8)
    {
      v9 = (v6 >> 3) + 1;
      v8 = &v5[v9 & 0x3FFFFFFFFFFFFFFELL];
      v10 = v5 + 1;
      v11 = 1;
      v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
      v13 = 1;
      do
      {
        v11 *= *(v10 - 1);
        v13 *= *v10;
        v10 += 2;
        v12 -= 2;
      }
      while (v12);
      v7 = v13 * v11;
      if (v9 == (v9 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_8;
    }
    else
    {
      v7 = 1;
      v8 = *a1;
    }
    do
    {
      v14 = *v8++;
      v7 *= v14;
    }
    while (v8 != v4);
LABEL_8:
    v15 = 2 * v7;
    v16 = operator new[]();
    std::shared_ptr<half>::reset[abi:ne180100]<half,std::default_delete<half []>,void>(&v23, v16);
    bzero(v23, v15);
  }
  __p = 0;
  v21 = 0;
  v22 = 0;
  nitro::ndarray<half>::ndarray(a2, &v23, (uint64_t)a1, (uint64_t)&__p, 0);
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  v17 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1911854C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

BOOL nitro::ndarray_container::is_contiguous(nitro::ndarray_container *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  void *v17;
  _BOOL8 v18;
  void *v19;
  void *v20;
  void *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t *v111;
  uint64_t v113;
  std::__shared_weak_count *v114;
  uint64_t *v115;
  uint64_t *v116;
  void *__p;
  void *v118;

  switch(*(_DWORD *)this)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v113, (uint64_t)this);
      v1 = v116;
      v2 = (char *)v116 - (char *)v115;
      if (v116 != v115)
      {
        v3 = v113;
        if (!v113)
          goto LABEL_30;
        if ((unint64_t)(v2 - 8) >= 8)
        {
          v22 = ((unint64_t)(v2 - 8) >> 3) + 1;
          v4 = &v115[v22 & 0x3FFFFFFFFFFFFFFELL];
          v23 = v115 + 1;
          v24 = 1;
          v25 = v22 & 0x3FFFFFFFFFFFFFFELL;
          v26 = 1;
          do
          {
            v24 *= *(v23 - 1);
            v26 *= *v23;
            v23 += 2;
            v25 -= 2;
          }
          while (v25);
          v3 = v26 * v24;
          if (v22 == (v22 & 0x3FFFFFFFFFFFFFFELL))
          {
LABEL_30:
            v28 = v2 >> 3;
            v17 = __p;
            if ((unint64_t)(v2 >> 3) <= 1)
              v28 = 1;
            if (v28 >= 2)
            {
              v31 = 0;
              v32 = 0;
              v29 = v28 & 0xFFFFFFFFFFFFFFFELL;
              v33 = v115 + 1;
              v34 = (char *)__p + 8;
              v35 = v28 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v31 += *(v34 - 1) * (*(v33 - 1) - 1);
                v32 += *v34 * (*v33 - 1);
                v33 += 2;
                v34 += 2;
                v35 -= 2;
              }
              while (v35);
              v30 = v32 + v31;
              if (v28 == v29)
                goto LABEL_39;
            }
            else
            {
              v29 = 0;
              v30 = 0;
            }
            v36 = v28 - v29;
            v37 = v29;
            v38 = (uint64_t *)((char *)__p + 8 * v29);
            v39 = &v115[v37];
            do
            {
              v40 = *v39++;
              v41 = v40 - 1;
              v42 = *v38++;
              v30 += v42 * v41;
              --v36;
            }
            while (v36);
LABEL_39:
            v18 = v3 == v30 + 1;
            goto LABEL_40;
          }
        }
        else
        {
          v3 = 1;
          v4 = v115;
        }
        do
        {
          v27 = *v4++;
          v3 *= v27;
        }
        while (v4 != v116);
        goto LABEL_30;
      }
      v17 = __p;
      v18 = 1;
      if (!__p)
        goto LABEL_41;
LABEL_40:
      v118 = v17;
      operator delete(v17);
      v1 = v115;
LABEL_41:
      if (v1)
      {
        v116 = v1;
        operator delete(v1);
      }
      v43 = v114;
      if (!v114)
        return v18;
      p_shared_owners = (unint64_t *)&v114->__shared_owners_;
      do
        v45 = __ldaxr(p_shared_owners);
      while (__stlxr(v45 - 1, p_shared_owners));
      goto LABEL_109;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v113, (uint64_t)this);
      v13 = v116;
      v14 = (char *)v116 - (char *)v115;
      if (v116 != v115)
      {
        v15 = v113;
        if (!v113)
          goto LABEL_93;
        if ((unint64_t)(v14 - 8) >= 8)
        {
          v90 = ((unint64_t)(v14 - 8) >> 3) + 1;
          v16 = &v115[v90 & 0x3FFFFFFFFFFFFFFELL];
          v91 = v115 + 1;
          v92 = 1;
          v93 = v90 & 0x3FFFFFFFFFFFFFFELL;
          v94 = 1;
          do
          {
            v92 *= *(v91 - 1);
            v94 *= *v91;
            v91 += 2;
            v93 -= 2;
          }
          while (v93);
          v15 = v94 * v92;
          if (v90 == (v90 & 0x3FFFFFFFFFFFFFFELL))
          {
LABEL_93:
            v96 = v14 >> 3;
            v21 = __p;
            if ((unint64_t)(v14 >> 3) <= 1)
              v96 = 1;
            if (v96 >= 2)
            {
              v99 = 0;
              v100 = 0;
              v97 = v96 & 0xFFFFFFFFFFFFFFFELL;
              v101 = v115 + 1;
              v102 = (char *)__p + 8;
              v103 = v96 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v99 += *(v102 - 1) * (*(v101 - 1) - 1);
                v100 += *v102 * (*v101 - 1);
                v101 += 2;
                v102 += 2;
                v103 -= 2;
              }
              while (v103);
              v98 = v100 + v99;
              if (v96 == v97)
                goto LABEL_102;
            }
            else
            {
              v97 = 0;
              v98 = 0;
            }
            v104 = v96 - v97;
            v105 = v97;
            v106 = (uint64_t *)((char *)__p + 8 * v97);
            v107 = &v115[v105];
            do
            {
              v108 = *v107++;
              v109 = v108 - 1;
              v110 = *v106++;
              v98 += v110 * v109;
              --v104;
            }
            while (v104);
LABEL_102:
            v18 = v15 == v98 + 1;
            goto LABEL_103;
          }
        }
        else
        {
          v15 = 1;
          v16 = v115;
        }
        do
        {
          v95 = *v16++;
          v15 *= v95;
        }
        while (v16 != v116);
        goto LABEL_93;
      }
      v21 = __p;
      v18 = 1;
      if (!__p)
        goto LABEL_104;
LABEL_103:
      v118 = v21;
      operator delete(v21);
      v13 = v115;
LABEL_104:
      if (v13)
      {
        v116 = v13;
        operator delete(v13);
      }
      v43 = v114;
      if (!v114)
        return v18;
      v111 = (unint64_t *)&v114->__shared_owners_;
      do
        v45 = __ldaxr(v111);
      while (__stlxr(v45 - 1, v111));
      goto LABEL_109;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v113, (uint64_t)this);
      v5 = v116;
      v6 = (char *)v116 - (char *)v115;
      if (v116 != v115)
      {
        v7 = v113;
        if (!v113)
          goto LABEL_51;
        if ((unint64_t)(v6 - 8) >= 8)
        {
          v46 = ((unint64_t)(v6 - 8) >> 3) + 1;
          v8 = &v115[v46 & 0x3FFFFFFFFFFFFFFELL];
          v47 = v115 + 1;
          v48 = 1;
          v49 = v46 & 0x3FFFFFFFFFFFFFFELL;
          v50 = 1;
          do
          {
            v48 *= *(v47 - 1);
            v50 *= *v47;
            v47 += 2;
            v49 -= 2;
          }
          while (v49);
          v7 = v50 * v48;
          if (v46 == (v46 & 0x3FFFFFFFFFFFFFFELL))
          {
LABEL_51:
            v52 = v6 >> 3;
            v19 = __p;
            if ((unint64_t)(v6 >> 3) <= 1)
              v52 = 1;
            if (v52 >= 2)
            {
              v55 = 0;
              v56 = 0;
              v53 = v52 & 0xFFFFFFFFFFFFFFFELL;
              v57 = v115 + 1;
              v58 = (char *)__p + 8;
              v59 = v52 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v55 += *(v58 - 1) * (*(v57 - 1) - 1);
                v56 += *v58 * (*v57 - 1);
                v57 += 2;
                v58 += 2;
                v59 -= 2;
              }
              while (v59);
              v54 = v56 + v55;
              if (v52 == v53)
                goto LABEL_60;
            }
            else
            {
              v53 = 0;
              v54 = 0;
            }
            v60 = v52 - v53;
            v61 = v53;
            v62 = (uint64_t *)((char *)__p + 8 * v53);
            v63 = &v115[v61];
            do
            {
              v64 = *v63++;
              v65 = v64 - 1;
              v66 = *v62++;
              v54 += v66 * v65;
              --v60;
            }
            while (v60);
LABEL_60:
            v18 = v7 == v54 + 1;
            goto LABEL_61;
          }
        }
        else
        {
          v7 = 1;
          v8 = v115;
        }
        do
        {
          v51 = *v8++;
          v7 *= v51;
        }
        while (v8 != v116);
        goto LABEL_51;
      }
      v19 = __p;
      v18 = 1;
      if (!__p)
        goto LABEL_62;
LABEL_61:
      v118 = v19;
      operator delete(v19);
      v5 = v115;
LABEL_62:
      if (v5)
      {
        v116 = v5;
        operator delete(v5);
      }
      v43 = v114;
      if (!v114)
        return v18;
      v67 = (unint64_t *)&v114->__shared_owners_;
      do
        v45 = __ldaxr(v67);
      while (__stlxr(v45 - 1, v67));
      goto LABEL_109;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v113, (uint64_t)this);
      v9 = v116;
      v10 = (char *)v116 - (char *)v115;
      if (v116 != v115)
      {
        v11 = v113;
        if (!v113)
          goto LABEL_72;
        if ((unint64_t)(v10 - 8) >= 8)
        {
          v68 = ((unint64_t)(v10 - 8) >> 3) + 1;
          v12 = &v115[v68 & 0x3FFFFFFFFFFFFFFELL];
          v69 = v115 + 1;
          v70 = 1;
          v71 = v68 & 0x3FFFFFFFFFFFFFFELL;
          v72 = 1;
          do
          {
            v70 *= *(v69 - 1);
            v72 *= *v69;
            v69 += 2;
            v71 -= 2;
          }
          while (v71);
          v11 = v72 * v70;
          if (v68 == (v68 & 0x3FFFFFFFFFFFFFFELL))
          {
LABEL_72:
            v74 = v10 >> 3;
            v20 = __p;
            if ((unint64_t)(v10 >> 3) <= 1)
              v74 = 1;
            if (v74 >= 2)
            {
              v77 = 0;
              v78 = 0;
              v75 = v74 & 0xFFFFFFFFFFFFFFFELL;
              v79 = v115 + 1;
              v80 = (char *)__p + 8;
              v81 = v74 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v77 += *(v80 - 1) * (*(v79 - 1) - 1);
                v78 += *v80 * (*v79 - 1);
                v79 += 2;
                v80 += 2;
                v81 -= 2;
              }
              while (v81);
              v76 = v78 + v77;
              if (v74 == v75)
                goto LABEL_81;
            }
            else
            {
              v75 = 0;
              v76 = 0;
            }
            v82 = v74 - v75;
            v83 = v75;
            v84 = (uint64_t *)((char *)__p + 8 * v75);
            v85 = &v115[v83];
            do
            {
              v86 = *v85++;
              v87 = v86 - 1;
              v88 = *v84++;
              v76 += v88 * v87;
              --v82;
            }
            while (v82);
LABEL_81:
            v18 = v11 == v76 + 1;
            goto LABEL_82;
          }
        }
        else
        {
          v11 = 1;
          v12 = v115;
        }
        do
        {
          v73 = *v12++;
          v11 *= v73;
        }
        while (v12 != v116);
        goto LABEL_72;
      }
      v20 = __p;
      v18 = 1;
      if (!__p)
        goto LABEL_83;
LABEL_82:
      v118 = v20;
      operator delete(v20);
      v9 = v115;
LABEL_83:
      if (v9)
      {
        v116 = v9;
        operator delete(v9);
      }
      v43 = v114;
      if (v114)
      {
        v89 = (unint64_t *)&v114->__shared_owners_;
        do
          v45 = __ldaxr(v89);
        while (__stlxr(v45 - 1, v89));
LABEL_109:
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      return v18;
    default:
      nitro::ndarray_container::visit<nitro::ndarray_container::is_contiguous(void)::$_0>(nitro::ndarray_container::is_contiguous(void)::$_0)const::{lambda(void)#1}::operator()();
  }
}

void nitro::ndarray_container::concat(nitro::ndarray_container **a1@<X0>, unint64_t a2@<X1>, nitro::ndarray_container *a3@<X8>)
{
  nitro::ndarray_container *v5;
  unint64_t v6;
  const nitro::ndarray_container *v8;
  const nitro::ndarray_container *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  const nitro::ndarray_container *v17;
  const nitro::ndarray_container *v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  const nitro::ndarray_container *v26;
  const nitro::ndarray_container *v27;
  _QWORD *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  const nitro::ndarray_container *v35;
  const nitro::ndarray_container *v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  char v62[8];
  std::__shared_weak_count *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  int64x2_t *v68;
  std::__shared_weak_count *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  __int128 __p;
  uint64_t v80;
  uint64_t v81;
  int64x2_t v82;
  unint64_t v83;

  v5 = *a1;
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  if (v6 == 1)
  {
    nitro::ndarray_container::copy(*a1, (uint64_t)a3);
  }
  else if (v6)
  {
    switch(*(_DWORD *)v5)
    {
      case 3:
        nitro::ndarray<int>::ndarray((uint64_t)v62, (uint64_t)v5);
        v82 = 0uLL;
        v83 = 0;
        v8 = *a1;
        v9 = a1[1];
        if (*a1 != v9)
        {
          do
          {
            if (*(_DWORD *)v8 == 3)
              nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v68, v8);
            else
              _ZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(v8, (uint64_t)&v68);
            nitro::ndarray<int>::ndarray((uint64_t)&v76, (uint64_t)&v68);
            v10 = (_QWORD *)v82.i64[1];
            if (v82.i64[1] >= v83)
            {
              v82.i64[1] = (uint64_t)std::vector<nitro::ndarray<unsigned char>>::__push_back_slow_path<nitro::ndarray<unsigned char>>(&v82, &v76);
              if ((_QWORD)__p)
              {
                *((_QWORD *)&__p + 1) = __p;
                operator delete((void *)__p);
              }
            }
            else
            {
              *(_OWORD *)v82.i64[1] = v76;
              v76 = 0uLL;
              v10[4] = 0;
              v10[5] = 0;
              v10[2] = 0;
              v10[3] = 0;
              *((_OWORD *)v10 + 1) = v77;
              v10[4] = v78;
              v77 = 0uLL;
              v78 = 0;
              v10[6] = 0;
              v10[7] = 0;
              *(_OWORD *)(v10 + 5) = __p;
              v10[7] = v80;
              __p = 0uLL;
              v80 = 0;
              v10[8] = v81;
              v82.i64[1] = (uint64_t)(v10 + 9);
            }
            if ((_QWORD)v77)
            {
              *((_QWORD *)&v77 + 1) = v77;
              operator delete((void *)v77);
            }
            v11 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
            if (*((_QWORD *)&v76 + 1))
            {
              v12 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
              do
                v13 = __ldaxr(v12);
              while (__stlxr(v13 - 1, v12));
              if (!v13)
              {
                ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
                std::__shared_weak_count::__release_weak(v11);
              }
            }
            if (v74)
            {
              v75 = v74;
              operator delete(v74);
            }
            if (v71)
            {
              v72 = v71;
              operator delete(v71);
            }
            v14 = (std::__shared_weak_count *)v70;
            if (v70)
            {
              v15 = (unint64_t *)((char *)v70 + 8);
              do
                v16 = __ldaxr(v15);
              while (__stlxr(v16 - 1, v15));
              if (!v16)
              {
                ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
                std::__shared_weak_count::__release_weak(v14);
              }
            }
            v8 = (const nitro::ndarray_container *)((char *)v8 + 80);
          }
          while (v8 != v9);
        }
        nitro::ndarray<int>::concat(v82.i64, a2, &v68);
        nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)a3, &v68);
        if (v73)
        {
          v74 = v73;
          operator delete(v73);
        }
        if (v70)
        {
          v71 = v70;
          operator delete(v70);
        }
        v44 = v69;
        if (v69)
        {
          p_shared_owners = (unint64_t *)&v69->__shared_owners_;
          do
            v46 = __ldaxr(p_shared_owners);
          while (__stlxr(v46 - 1, p_shared_owners));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        v68 = &v82;
        std::vector<nitro::ndarray<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
        if (v66)
        {
          v67 = v66;
          operator delete(v66);
        }
        if (v64)
        {
          v65 = v64;
          operator delete(v64);
        }
        v47 = v63;
        if (!v63)
          return;
        v48 = (unint64_t *)&v63->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        break;
      case 5:
        nitro::ndarray<unsigned char>::ndarray((uint64_t)v62, (uint64_t)v5);
        v82 = 0uLL;
        v83 = 0;
        v17 = *a1;
        v18 = a1[1];
        if (*a1 != v18)
        {
          do
          {
            if (*(_DWORD *)v17 == 5)
              nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v68, v17);
            else
              _ZNK5nitro17ndarray_container5visitIZNKS0_4castIhEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(v17, (uint64_t)&v68);
            nitro::ndarray<unsigned char>::ndarray((uint64_t)&v76, (uint64_t)&v68);
            v19 = (_QWORD *)v82.i64[1];
            if (v82.i64[1] >= v83)
            {
              v82.i64[1] = (uint64_t)std::vector<nitro::ndarray<unsigned char>>::__push_back_slow_path<nitro::ndarray<unsigned char>>(&v82, &v76);
              if ((_QWORD)__p)
              {
                *((_QWORD *)&__p + 1) = __p;
                operator delete((void *)__p);
              }
            }
            else
            {
              *(_OWORD *)v82.i64[1] = v76;
              v76 = 0uLL;
              v19[4] = 0;
              v19[5] = 0;
              v19[2] = 0;
              v19[3] = 0;
              *((_OWORD *)v19 + 1) = v77;
              v19[4] = v78;
              v77 = 0uLL;
              v78 = 0;
              v19[6] = 0;
              v19[7] = 0;
              *(_OWORD *)(v19 + 5) = __p;
              v19[7] = v80;
              __p = 0uLL;
              v80 = 0;
              v19[8] = v81;
              v82.i64[1] = (uint64_t)(v19 + 9);
            }
            if ((_QWORD)v77)
            {
              *((_QWORD *)&v77 + 1) = v77;
              operator delete((void *)v77);
            }
            v20 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
            if (*((_QWORD *)&v76 + 1))
            {
              v21 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
              do
                v22 = __ldaxr(v21);
              while (__stlxr(v22 - 1, v21));
              if (!v22)
              {
                ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                std::__shared_weak_count::__release_weak(v20);
              }
            }
            if (v74)
            {
              v75 = v74;
              operator delete(v74);
            }
            if (v71)
            {
              v72 = v71;
              operator delete(v71);
            }
            v23 = (std::__shared_weak_count *)v70;
            if (v70)
            {
              v24 = (unint64_t *)((char *)v70 + 8);
              do
                v25 = __ldaxr(v24);
              while (__stlxr(v25 - 1, v24));
              if (!v25)
              {
                ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                std::__shared_weak_count::__release_weak(v23);
              }
            }
            v17 = (const nitro::ndarray_container *)((char *)v17 + 80);
          }
          while (v17 != v18);
        }
        nitro::ndarray<unsigned char>::concat(v82.i64, a2, &v68);
        nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)a3, &v68);
        if (v73)
        {
          v74 = v73;
          operator delete(v73);
        }
        if (v70)
        {
          v71 = v70;
          operator delete(v70);
        }
        v50 = v69;
        if (v69)
        {
          v51 = (unint64_t *)&v69->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        v68 = &v82;
        std::vector<nitro::ndarray<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
        if (v66)
        {
          v67 = v66;
          operator delete(v66);
        }
        if (v64)
        {
          v65 = v64;
          operator delete(v64);
        }
        v47 = v63;
        if (!v63)
          return;
        v53 = (unint64_t *)&v63->__shared_owners_;
        do
          v49 = __ldaxr(v53);
        while (__stlxr(v49 - 1, v53));
        break;
      case 9:
        nitro::ndarray<float>::ndarray((uint64_t)v62, (uint64_t)v5);
        v82 = 0uLL;
        v83 = 0;
        v26 = *a1;
        v27 = a1[1];
        if (*a1 != v27)
        {
          do
          {
            if (*(_DWORD *)v26 == 9)
              nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v68, v26);
            else
              _ZNK5nitro17ndarray_container5visitIZNKS0_4castIfEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(v26, (uint64_t)&v68);
            nitro::ndarray<float>::ndarray((uint64_t)&v76, (uint64_t)&v68);
            v28 = (_QWORD *)v82.i64[1];
            if (v82.i64[1] >= v83)
            {
              v82.i64[1] = (uint64_t)std::vector<nitro::ndarray<unsigned char>>::__push_back_slow_path<nitro::ndarray<unsigned char>>(&v82, &v76);
              if ((_QWORD)__p)
              {
                *((_QWORD *)&__p + 1) = __p;
                operator delete((void *)__p);
              }
            }
            else
            {
              *(_OWORD *)v82.i64[1] = v76;
              v76 = 0uLL;
              v28[4] = 0;
              v28[5] = 0;
              v28[2] = 0;
              v28[3] = 0;
              *((_OWORD *)v28 + 1) = v77;
              v28[4] = v78;
              v77 = 0uLL;
              v78 = 0;
              v28[6] = 0;
              v28[7] = 0;
              *(_OWORD *)(v28 + 5) = __p;
              v28[7] = v80;
              __p = 0uLL;
              v80 = 0;
              v28[8] = v81;
              v82.i64[1] = (uint64_t)(v28 + 9);
            }
            if ((_QWORD)v77)
            {
              *((_QWORD *)&v77 + 1) = v77;
              operator delete((void *)v77);
            }
            v29 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
            if (*((_QWORD *)&v76 + 1))
            {
              v30 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
              do
                v31 = __ldaxr(v30);
              while (__stlxr(v31 - 1, v30));
              if (!v31)
              {
                ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                std::__shared_weak_count::__release_weak(v29);
              }
            }
            if (v74)
            {
              v75 = v74;
              operator delete(v74);
            }
            if (v71)
            {
              v72 = v71;
              operator delete(v71);
            }
            v32 = (std::__shared_weak_count *)v70;
            if (v70)
            {
              v33 = (unint64_t *)((char *)v70 + 8);
              do
                v34 = __ldaxr(v33);
              while (__stlxr(v34 - 1, v33));
              if (!v34)
              {
                ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                std::__shared_weak_count::__release_weak(v32);
              }
            }
            v26 = (const nitro::ndarray_container *)((char *)v26 + 80);
          }
          while (v26 != v27);
        }
        nitro::ndarray<float>::concat(v82.i64, a2, &v68);
        nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)a3, &v68);
        if (v73)
        {
          v74 = v73;
          operator delete(v73);
        }
        if (v70)
        {
          v71 = v70;
          operator delete(v70);
        }
        v54 = v69;
        if (v69)
        {
          v55 = (unint64_t *)&v69->__shared_owners_;
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v68 = &v82;
        std::vector<nitro::ndarray<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
        if (v66)
        {
          v67 = v66;
          operator delete(v66);
        }
        if (v64)
        {
          v65 = v64;
          operator delete(v64);
        }
        v47 = v63;
        if (!v63)
          return;
        v57 = (unint64_t *)&v63->__shared_owners_;
        do
          v49 = __ldaxr(v57);
        while (__stlxr(v49 - 1, v57));
        break;
      case 0xB:
        nitro::ndarray<half>::ndarray((uint64_t)v62, (uint64_t)v5);
        v82 = 0uLL;
        v83 = 0;
        v35 = *a1;
        v36 = a1[1];
        if (*a1 != v36)
        {
          do
          {
            if (*(_DWORD *)v35 == 11)
              nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v68, v35);
            else
              _ZNK5nitro17ndarray_container5visitIZNKS0_4castIDhEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(v35, (uint64_t)&v68);
            nitro::ndarray<half>::ndarray((uint64_t)&v76, (uint64_t)&v68);
            v37 = (_QWORD *)v82.i64[1];
            if (v82.i64[1] >= v83)
            {
              v82.i64[1] = (uint64_t)std::vector<nitro::ndarray<unsigned char>>::__push_back_slow_path<nitro::ndarray<unsigned char>>(&v82, &v76);
              if ((_QWORD)__p)
              {
                *((_QWORD *)&__p + 1) = __p;
                operator delete((void *)__p);
              }
            }
            else
            {
              *(_OWORD *)v82.i64[1] = v76;
              v76 = 0uLL;
              v37[4] = 0;
              v37[5] = 0;
              v37[2] = 0;
              v37[3] = 0;
              *((_OWORD *)v37 + 1) = v77;
              v37[4] = v78;
              v77 = 0uLL;
              v78 = 0;
              v37[6] = 0;
              v37[7] = 0;
              *(_OWORD *)(v37 + 5) = __p;
              v37[7] = v80;
              __p = 0uLL;
              v80 = 0;
              v37[8] = v81;
              v82.i64[1] = (uint64_t)(v37 + 9);
            }
            if ((_QWORD)v77)
            {
              *((_QWORD *)&v77 + 1) = v77;
              operator delete((void *)v77);
            }
            v38 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
            if (*((_QWORD *)&v76 + 1))
            {
              v39 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
              do
                v40 = __ldaxr(v39);
              while (__stlxr(v40 - 1, v39));
              if (!v40)
              {
                ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                std::__shared_weak_count::__release_weak(v38);
              }
            }
            if (v74)
            {
              v75 = v74;
              operator delete(v74);
            }
            if (v71)
            {
              v72 = v71;
              operator delete(v71);
            }
            v41 = (std::__shared_weak_count *)v70;
            if (v70)
            {
              v42 = (unint64_t *)((char *)v70 + 8);
              do
                v43 = __ldaxr(v42);
              while (__stlxr(v43 - 1, v42));
              if (!v43)
              {
                ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                std::__shared_weak_count::__release_weak(v41);
              }
            }
            v35 = (const nitro::ndarray_container *)((char *)v35 + 80);
          }
          while (v35 != v36);
        }
        nitro::ndarray<half>::concat(v82.i64, a2, &v68);
        nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)a3, &v68);
        if (v73)
        {
          v74 = v73;
          operator delete(v73);
        }
        if (v70)
        {
          v71 = v70;
          operator delete(v70);
        }
        v58 = v69;
        if (v69)
        {
          v59 = (unint64_t *)&v69->__shared_owners_;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        v68 = &v82;
        std::vector<nitro::ndarray<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
        if (v66)
        {
          v67 = v66;
          operator delete(v66);
        }
        if (v64)
        {
          v65 = v64;
          operator delete(v64);
        }
        v47 = v63;
        if (!v63)
          return;
        v61 = (unint64_t *)&v63->__shared_owners_;
        do
          v49 = __ldaxr(v61);
        while (__stlxr(v49 - 1, v61));
        break;
      default:
        nitro::ndarray_container::visit<nitro::ndarray_container::concat(std::vector<nitro::ndarray_container> const&,unsigned long)::$_0>(nitro::ndarray_container::concat(std::vector<nitro::ndarray_container> const&,unsigned long)::$_0)const::{lambda(void)#1}::operator()();
    }
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  else
  {
    nitro::ndarray_container::ndarray_container(a3);
  }
}

void nitro::ndarray_container::copy(nitro::ndarray_container *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  void *v29;
  void *v30;
  void *__p;
  void *v32;

  switch(*(_DWORD *)this)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v21, (uint64_t)this);
      nitro::ndarray<int>::copy((uint64_t)&v21, &v27);
      nitro::ndarray_container::ndarray_container<int,(void *)0>(a2, &v27);
      if (__p)
      {
        v32 = __p;
        operator delete(__p);
      }
      if (v29)
      {
        v30 = v29;
        operator delete(v29);
      }
      v3 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
      }
      if (v23)
      {
        v24 = v23;
        operator delete(v23);
      }
      v6 = v22;
      if (!v22)
        return;
      v7 = (unint64_t *)&v22->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v21, (uint64_t)this);
      nitro::ndarray<unsigned char>::copy((uint64_t)&v21, &v27);
      nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>(a2, &v27);
      if (__p)
      {
        v32 = __p;
        operator delete(__p);
      }
      if (v29)
      {
        v30 = v29;
        operator delete(v29);
      }
      v9 = v28;
      if (v28)
      {
        v10 = (unint64_t *)&v28->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
      }
      if (v23)
      {
        v24 = v23;
        operator delete(v23);
      }
      v6 = v22;
      if (!v22)
        return;
      v12 = (unint64_t *)&v22->__shared_owners_;
      do
        v8 = __ldaxr(v12);
      while (__stlxr(v8 - 1, v12));
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v21, (uint64_t)this);
      nitro::ndarray<float>::copy((uint64_t)&v21, &v27);
      nitro::ndarray_container::ndarray_container<float,(void *)0>(a2, &v27);
      if (__p)
      {
        v32 = __p;
        operator delete(__p);
      }
      if (v29)
      {
        v30 = v29;
        operator delete(v29);
      }
      v13 = v28;
      if (v28)
      {
        v14 = (unint64_t *)&v28->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
      }
      if (v23)
      {
        v24 = v23;
        operator delete(v23);
      }
      v6 = v22;
      if (!v22)
        return;
      v16 = (unint64_t *)&v22->__shared_owners_;
      do
        v8 = __ldaxr(v16);
      while (__stlxr(v8 - 1, v16));
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v21, (uint64_t)this);
      nitro::ndarray<half>::copy((uint64_t)&v21, &v27);
      nitro::ndarray_container::ndarray_container<half,(void *)0>(a2, &v27);
      if (__p)
      {
        v32 = __p;
        operator delete(__p);
      }
      if (v29)
      {
        v30 = v29;
        operator delete(v29);
      }
      v17 = v28;
      if (v28)
      {
        v18 = (unint64_t *)&v28->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
      }
      if (v23)
      {
        v24 = v23;
        operator delete(v23);
      }
      v6 = v22;
      if (!v22)
        return;
      v20 = (unint64_t *)&v22->__shared_owners_;
      do
        v8 = __ldaxr(v20);
      while (__stlxr(v8 - 1, v20));
      break;
    default:
      nitro::ndarray_container::visit<nitro::ndarray_container::copy(void)::$_0>(nitro::ndarray_container::copy(void)::$_0)const::{lambda(void)#1}::operator()();
  }
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

_QWORD *nitro::operator<<(_QWORD *a1, _DWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  void *v13;
  void *__p;
  void *v15;

  switch(*a2)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v10, (uint64_t)a2);
      nitro::operator<<<int>(a1, &v10);
      if (__p)
      {
        v15 = __p;
        operator delete(__p);
      }
      if (v12)
      {
        v13 = v12;
        operator delete(v12);
      }
      v3 = v11;
      if (!v11)
        return a1;
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v10, (uint64_t)a2);
      nitro::operator<<<unsigned char>(a1, &v10);
      if (__p)
      {
        v15 = __p;
        operator delete(__p);
      }
      if (v12)
      {
        v13 = v12;
        operator delete(v12);
      }
      v3 = v11;
      if (!v11)
        return a1;
      v8 = (unint64_t *)&v11->__shared_owners_;
      do
        v5 = __ldaxr(v8);
      while (__stlxr(v5 - 1, v8));
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v10, (uint64_t)a2);
      nitro::operator<<<float>(a1, &v10);
      if (__p)
      {
        v15 = __p;
        operator delete(__p);
      }
      if (v12)
      {
        v13 = v12;
        operator delete(v12);
      }
      v3 = v11;
      if (!v11)
        return a1;
      v6 = (unint64_t *)&v11->__shared_owners_;
      do
        v5 = __ldaxr(v6);
      while (__stlxr(v5 - 1, v6));
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v10, (uint64_t)a2);
      nitro::operator<<<half>(a1, &v10);
      if (__p)
      {
        v15 = __p;
        operator delete(__p);
      }
      if (v12)
      {
        v13 = v12;
        operator delete(v12);
      }
      v3 = v11;
      if (!v11)
        return a1;
      v7 = (unint64_t *)&v11->__shared_owners_;
      do
        v5 = __ldaxr(v7);
      while (__stlxr(v5 - 1, v7));
      break;
    default:
      nitro::ndarray_container::visit<nitro::operator<<(std::ostream &,nitro::ndarray_container const&)::$_0>(nitro::operator<<(std::ostream &,nitro::ndarray_container const&)::$_0)const::{lambda(void)#1}::operator()();
  }
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void sub_191187260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  nitro::ndarray_container::copy((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_191187284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  nitro::ndarray_container::copy((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_1911872A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  nitro::ndarray_container::copy((uint64_t)&a10);
  _Unwind_Resume(a1);
}

_DWORD *nitro::ndarray_container::operator+=(_DWORD *a1, _DWORD *a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t *v20;
  uint64_t *v21;
  unint64_t *v22;
  uint64_t *v23;
  unint64_t *v24;
  _QWORD *v25;
  double v26;
  float v27;
  unint64_t *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  float v36;
  double v37;
  int8x16_t v38;
  double v39;
  int8x16_t v40;
  unint64_t *v41;
  uint64_t *v42;
  unint64_t *v43;
  uint64_t *v44;
  unint64_t *v45;
  _QWORD *v46;
  double v47;
  float v48;
  unint64_t *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  uint64_t *v54;
  float v55;
  double v56;
  int8x16_t v57;
  double v58;
  int8x16_t v59;
  unint64_t *v60;
  uint64_t *v61;
  unint64_t *v62;
  _QWORD *v63;
  unint64_t *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  _QWORD *v69;
  unint64_t *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  _BYTE v79[16];
  std::__shared_weak_count *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  char *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  void *v94;
  void *v95;
  void *__p;
  void *v97;
  char v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;

  switch(*a2)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v85, (uint64_t)a2);
      v91 = &v98;
      nitro::ndarray<int>::ndarray(&v92, &v85);
      switch(*a1)
      {
        case 3:
          v3 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)&v99, (uint64_t)a1);
          nitro::ndarray<int>::operator+=<int>(v3, &v92);
          nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)v79, &v99);
          if (v103)
          {
            v104 = v103;
            operator delete(v103);
          }
          if (v101)
          {
            v102 = v101;
            operator delete(v101);
          }
          v4 = v100;
          if (!v100)
            goto LABEL_189;
          p_shared_owners = (unint64_t *)&v100->__shared_owners_;
          do
            v6 = __ldaxr(p_shared_owners);
          while (__stlxr(v6 - 1, p_shared_owners));
          break;
        case 5:
          v69 = (_QWORD *)nitro::ndarray<unsigned char>::ndarray((uint64_t)&v99, (uint64_t)a1);
          nitro::ndarray<unsigned char>::operator+=<int>(v69, &v92);
          nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)v79, &v99);
          if (v103)
          {
            v104 = v103;
            operator delete(v103);
          }
          if (v101)
          {
            v102 = v101;
            operator delete(v101);
          }
          v4 = v100;
          if (!v100)
            goto LABEL_189;
          v70 = (unint64_t *)&v100->__shared_owners_;
          do
            v6 = __ldaxr(v70);
          while (__stlxr(v6 - 1, v70));
          break;
        case 9:
          v42 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)&v99, (uint64_t)a1);
          nitro::ndarray<float>::operator+=<int>(v42, &v92);
          nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)v79, &v99);
          if (v103)
          {
            v104 = v103;
            operator delete(v103);
          }
          if (v101)
          {
            v102 = v101;
            operator delete(v101);
          }
          v4 = v100;
          if (!v100)
            goto LABEL_189;
          v43 = (unint64_t *)&v100->__shared_owners_;
          do
            v6 = __ldaxr(v43);
          while (__stlxr(v6 - 1, v43));
          break;
        case 0xB:
          v61 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)&v99, (uint64_t)a1);
          nitro::ndarray<half>::operator+=<int>(v61, &v92);
          nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)v79, &v99);
          if (v103)
          {
            v104 = v103;
            operator delete(v103);
          }
          if (v101)
          {
            v102 = v101;
            operator delete(v101);
          }
          v4 = v100;
          if (!v100)
            goto LABEL_189;
          v62 = (unint64_t *)&v100->__shared_owners_;
          do
            v6 = __ldaxr(v62);
          while (__stlxr(v6 - 1, v62));
          break;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>)::{lambda(void)#1}::operator()();
      }
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
LABEL_189:
      if (__p)
      {
        v97 = __p;
        operator delete(__p);
      }
      if (v94)
      {
        v95 = v94;
        operator delete(v94);
      }
      v71 = v93;
      if (v93)
      {
        v72 = (unint64_t *)&v93->__shared_owners_;
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      if (v89)
      {
        v90 = v89;
        operator delete(v89);
      }
      if (v87)
      {
        v88 = v87;
        operator delete(v87);
      }
      v32 = v86;
      if (!v86)
        goto LABEL_207;
      v74 = (unint64_t *)&v86->__shared_owners_;
      do
        v34 = __ldaxr(v74);
      while (__stlxr(v34 - 1, v74));
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v85, (uint64_t)a2);
      v91 = &v98;
      nitro::ndarray<unsigned char>::ndarray(&v92, &v85);
      switch(*a1)
      {
        case 3:
          v15 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)&v99, (uint64_t)a1);
          nitro::ndarray<int>::operator+=<unsigned char>(v15, &v92);
          nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)v79, &v99);
          if (v103)
          {
            v104 = v103;
            operator delete(v103);
          }
          if (v101)
          {
            v102 = v101;
            operator delete(v101);
          }
          v16 = v100;
          if (!v100)
            goto LABEL_163;
          v17 = (unint64_t *)&v100->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          break;
        case 5:
          v63 = (_QWORD *)nitro::ndarray<unsigned char>::ndarray((uint64_t)&v99, (uint64_t)a1);
          nitro::ndarray<unsigned char>::operator+=<unsigned char>(v63, &v92);
          nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)v79, &v99);
          if (v103)
          {
            v104 = v103;
            operator delete(v103);
          }
          if (v101)
          {
            v102 = v101;
            operator delete(v101);
          }
          v16 = v100;
          if (!v100)
            goto LABEL_163;
          v64 = (unint64_t *)&v100->__shared_owners_;
          do
            v18 = __ldaxr(v64);
          while (__stlxr(v18 - 1, v64));
          break;
        case 9:
          v35 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)&v99, (uint64_t)a1);
          nitro::ndarray<float>::operator+=<unsigned char>(v35, &v92, v36, v37, v38, v39, v40);
          nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)v79, &v99);
          if (v103)
          {
            v104 = v103;
            operator delete(v103);
          }
          if (v101)
          {
            v102 = v101;
            operator delete(v101);
          }
          v16 = v100;
          if (!v100)
            goto LABEL_163;
          v41 = (unint64_t *)&v100->__shared_owners_;
          do
            v18 = __ldaxr(v41);
          while (__stlxr(v18 - 1, v41));
          break;
        case 0xB:
          v54 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)&v99, (uint64_t)a1);
          nitro::ndarray<half>::operator+=<unsigned char>(v54, &v92, v55, v56, v57, v58, v59);
          nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)v79, &v99);
          if (v103)
          {
            v104 = v103;
            operator delete(v103);
          }
          if (v101)
          {
            v102 = v101;
            operator delete(v101);
          }
          v16 = v100;
          if (!v100)
            goto LABEL_163;
          v60 = (unint64_t *)&v100->__shared_owners_;
          do
            v18 = __ldaxr(v60);
          while (__stlxr(v18 - 1, v60));
          break;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>)::{lambda(void)#1}::operator()();
      }
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
LABEL_163:
      if (__p)
      {
        v97 = __p;
        operator delete(__p);
      }
      if (v94)
      {
        v95 = v94;
        operator delete(v94);
      }
      v65 = v93;
      if (v93)
      {
        v66 = (unint64_t *)&v93->__shared_owners_;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      if (v89)
      {
        v90 = v89;
        operator delete(v89);
      }
      if (v87)
      {
        v88 = v87;
        operator delete(v87);
      }
      v32 = v86;
      if (!v86)
        goto LABEL_207;
      v68 = (unint64_t *)&v86->__shared_owners_;
      do
        v34 = __ldaxr(v68);
      while (__stlxr(v34 - 1, v68));
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v85, (uint64_t)a2);
      v91 = &v98;
      nitro::ndarray<float>::ndarray(&v92, &v85);
      switch(*a1)
      {
        case 3:
          v7 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)&v99, (uint64_t)a1);
          nitro::ndarray<int>::operator+=<float>(v7, &v92);
          nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)v79, &v99);
          if (v103)
          {
            v104 = v103;
            operator delete(v103);
          }
          if (v101)
          {
            v102 = v101;
            operator delete(v101);
          }
          v8 = v100;
          if (!v100)
            goto LABEL_71;
          v9 = (unint64_t *)&v100->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          break;
        case 5:
          v25 = (_QWORD *)nitro::ndarray<unsigned char>::ndarray((uint64_t)&v99, (uint64_t)a1);
          nitro::ndarray<unsigned char>::operator+=<float>(v25, &v92, v26, v27);
          nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)v79, &v99);
          if (v103)
          {
            v104 = v103;
            operator delete(v103);
          }
          if (v101)
          {
            v102 = v101;
            operator delete(v101);
          }
          v8 = v100;
          if (!v100)
            goto LABEL_71;
          v28 = (unint64_t *)&v100->__shared_owners_;
          do
            v10 = __ldaxr(v28);
          while (__stlxr(v10 - 1, v28));
          break;
        case 9:
          v19 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)&v99, (uint64_t)a1);
          nitro::ndarray<float>::operator+=<float>(v19, &v92);
          nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)v79, &v99);
          if (v103)
          {
            v104 = v103;
            operator delete(v103);
          }
          if (v101)
          {
            v102 = v101;
            operator delete(v101);
          }
          v8 = v100;
          if (!v100)
            goto LABEL_71;
          v20 = (unint64_t *)&v100->__shared_owners_;
          do
            v10 = __ldaxr(v20);
          while (__stlxr(v10 - 1, v20));
          break;
        case 0xB:
          v21 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)&v99, (uint64_t)a1);
          nitro::ndarray<half>::operator+=<float>(v21, &v92);
          nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)v79, &v99);
          if (v103)
          {
            v104 = v103;
            operator delete(v103);
          }
          if (v101)
          {
            v102 = v101;
            operator delete(v101);
          }
          v8 = v100;
          if (!v100)
            goto LABEL_71;
          v22 = (unint64_t *)&v100->__shared_owners_;
          do
            v10 = __ldaxr(v22);
          while (__stlxr(v10 - 1, v22));
          break;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>)::{lambda(void)#1}::operator()();
      }
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_71:
      if (__p)
      {
        v97 = __p;
        operator delete(__p);
      }
      if (v94)
      {
        v95 = v94;
        operator delete(v94);
      }
      v29 = v93;
      if (v93)
      {
        v30 = (unint64_t *)&v93->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      if (v89)
      {
        v90 = v89;
        operator delete(v89);
      }
      if (v87)
      {
        v88 = v87;
        operator delete(v87);
      }
      v32 = v86;
      if (!v86)
        goto LABEL_207;
      v33 = (unint64_t *)&v86->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v85, (uint64_t)a2);
      v91 = &v98;
      nitro::ndarray<half>::ndarray(&v92, &v85);
      switch(*a1)
      {
        case 3:
          v11 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)&v99, (uint64_t)a1);
          nitro::ndarray<int>::operator+=<half>(v11, &v92);
          nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)v79, &v99);
          if (v103)
          {
            v104 = v103;
            operator delete(v103);
          }
          if (v101)
          {
            v102 = v101;
            operator delete(v101);
          }
          v12 = v100;
          if (!v100)
            goto LABEL_121;
          v13 = (unint64_t *)&v100->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          break;
        case 5:
          v46 = (_QWORD *)nitro::ndarray<unsigned char>::ndarray((uint64_t)&v99, (uint64_t)a1);
          nitro::ndarray<unsigned char>::operator+=<half>(v46, &v92, v47, v48);
          nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)v79, &v99);
          if (v103)
          {
            v104 = v103;
            operator delete(v103);
          }
          if (v101)
          {
            v102 = v101;
            operator delete(v101);
          }
          v12 = v100;
          if (!v100)
            goto LABEL_121;
          v49 = (unint64_t *)&v100->__shared_owners_;
          do
            v14 = __ldaxr(v49);
          while (__stlxr(v14 - 1, v49));
          break;
        case 9:
          v23 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)&v99, (uint64_t)a1);
          nitro::ndarray<float>::operator+=<half>(v23, &v92);
          nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)v79, &v99);
          if (v103)
          {
            v104 = v103;
            operator delete(v103);
          }
          if (v101)
          {
            v102 = v101;
            operator delete(v101);
          }
          v12 = v100;
          if (!v100)
            goto LABEL_121;
          v24 = (unint64_t *)&v100->__shared_owners_;
          do
            v14 = __ldaxr(v24);
          while (__stlxr(v14 - 1, v24));
          break;
        case 0xB:
          v44 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)&v99, (uint64_t)a1);
          nitro::ndarray<half>::operator+=<half>(v44, &v92);
          nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)v79, &v99);
          if (v103)
          {
            v104 = v103;
            operator delete(v103);
          }
          if (v101)
          {
            v102 = v101;
            operator delete(v101);
          }
          v12 = v100;
          if (!v100)
            goto LABEL_121;
          v45 = (unint64_t *)&v100->__shared_owners_;
          do
            v14 = __ldaxr(v45);
          while (__stlxr(v14 - 1, v45));
          break;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>)::{lambda(void)#1}::operator()();
      }
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_121:
      if (__p)
      {
        v97 = __p;
        operator delete(__p);
      }
      if (v94)
      {
        v95 = v94;
        operator delete(v94);
      }
      v50 = v93;
      if (v93)
      {
        v51 = (unint64_t *)&v93->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      if (v89)
      {
        v90 = v89;
        operator delete(v89);
      }
      if (v87)
      {
        v88 = v87;
        operator delete(v87);
      }
      v32 = v86;
      if (!v86)
        goto LABEL_207;
      v53 = (unint64_t *)&v86->__shared_owners_;
      do
        v34 = __ldaxr(v53);
      while (__stlxr(v34 - 1, v53));
      break;
    default:
      nitro::ndarray_container::visit<nitro::ndarray_container const,nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0,(void *)0>(nitro::ndarray_container const &,nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0)::{lambda(void)#1}::operator()();
  }
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
LABEL_207:
  nitro::ndarray_container::operator=((uint64_t)a1, (uint64_t)v79);
  if (v83)
  {
    v84 = v83;
    operator delete(v83);
  }
  if (v81)
  {
    v82 = v81;
    operator delete(v81);
  }
  v75 = v80;
  if (v80)
  {
    v76 = (unint64_t *)&v80->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  return a1;
}

void sub_191187DF4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,void *a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v36;
  void *v37;
  _Unwind_Exception *v38;
  void *v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  void *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;

  v37 = *(void **)(v36 - 80);
  if (v37)
  {
    *(_QWORD *)(v36 - 72) = v37;
    operator delete(v37);
  }
  nitro::ndarray_container::concat(v36 - 120);
  v38 = *(_Unwind_Exception **)(v36 - 48);
  if (__p)
  {
    operator delete(__p);
    v39 = a32;
    if (!a32)
    {
LABEL_5:
      v40 = a31;
      if (!a31)
        goto LABEL_13;
      goto LABEL_9;
    }
  }
  else
  {
    v39 = a32;
    if (!a32)
      goto LABEL_5;
  }
  operator delete(v39);
  v40 = a31;
  if (!a31)
    goto LABEL_13;
LABEL_9:
  p_shared_owners = (unint64_t *)&v40->__shared_owners_;
  do
    v42 = __ldaxr(p_shared_owners);
  while (__stlxr(v42 - 1, p_shared_owners));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
LABEL_13:
  if (a25)
  {
    operator delete(a25);
    v43 = a22;
    if (!a22)
    {
LABEL_15:
      v44 = a21;
      if (!a21)
        goto LABEL_23;
      goto LABEL_19;
    }
  }
  else
  {
    v43 = a22;
    if (!a22)
      goto LABEL_15;
  }
  operator delete(v43);
  v44 = a21;
  if (!a21)
    goto LABEL_23;
LABEL_19:
  v45 = (unint64_t *)&v44->__shared_owners_;
  do
    v46 = __ldaxr(v45);
  while (__stlxr(v46 - 1, v45));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
LABEL_23:
  _Unwind_Resume(v38);
}

_DWORD *nitro::ndarray_container::operator-=(_DWORD *a1, _DWORD *a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t *v20;
  uint64_t *v21;
  unint64_t *v22;
  uint64_t *v23;
  unint64_t *v24;
  _QWORD *v25;
  double v26;
  float v27;
  unint64_t *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  float v36;
  double v37;
  int8x16_t v38;
  double v39;
  int8x16_t v40;
  unint64_t *v41;
  uint64_t *v42;
  unint64_t *v43;
  uint64_t *v44;
  unint64_t *v45;
  _QWORD *v46;
  double v47;
  float v48;
  unint64_t *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  uint64_t *v54;
  float v55;
  double v56;
  int8x16_t v57;
  double v58;
  int8x16_t v59;
  unint64_t *v60;
  uint64_t *v61;
  unint64_t *v62;
  _QWORD *v63;
  unint64_t *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  _QWORD *v69;
  unint64_t *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  _BYTE v79[16];
  std::__shared_weak_count *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  char *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  void *v94;
  void *v95;
  void *__p;
  void *v97;
  char v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;

  switch(*a2)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v85, (uint64_t)a2);
      v91 = &v98;
      nitro::ndarray<int>::ndarray(&v92, &v85);
      switch(*a1)
      {
        case 3:
          v3 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)&v99, (uint64_t)a1);
          nitro::ndarray<int>::operator-=<int>(v3, &v92);
          nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)v79, &v99);
          if (v103)
          {
            v104 = v103;
            operator delete(v103);
          }
          if (v101)
          {
            v102 = v101;
            operator delete(v101);
          }
          v4 = v100;
          if (!v100)
            goto LABEL_189;
          p_shared_owners = (unint64_t *)&v100->__shared_owners_;
          do
            v6 = __ldaxr(p_shared_owners);
          while (__stlxr(v6 - 1, p_shared_owners));
          break;
        case 5:
          v69 = (_QWORD *)nitro::ndarray<unsigned char>::ndarray((uint64_t)&v99, (uint64_t)a1);
          nitro::ndarray<unsigned char>::operator-=<int>(v69, &v92);
          nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)v79, &v99);
          if (v103)
          {
            v104 = v103;
            operator delete(v103);
          }
          if (v101)
          {
            v102 = v101;
            operator delete(v101);
          }
          v4 = v100;
          if (!v100)
            goto LABEL_189;
          v70 = (unint64_t *)&v100->__shared_owners_;
          do
            v6 = __ldaxr(v70);
          while (__stlxr(v6 - 1, v70));
          break;
        case 9:
          v42 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)&v99, (uint64_t)a1);
          nitro::ndarray<float>::operator-=<int>(v42, &v92);
          nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)v79, &v99);
          if (v103)
          {
            v104 = v103;
            operator delete(v103);
          }
          if (v101)
          {
            v102 = v101;
            operator delete(v101);
          }
          v4 = v100;
          if (!v100)
            goto LABEL_189;
          v43 = (unint64_t *)&v100->__shared_owners_;
          do
            v6 = __ldaxr(v43);
          while (__stlxr(v6 - 1, v43));
          break;
        case 0xB:
          v61 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)&v99, (uint64_t)a1);
          nitro::ndarray<half>::operator-=<int>(v61, &v92);
          nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)v79, &v99);
          if (v103)
          {
            v104 = v103;
            operator delete(v103);
          }
          if (v101)
          {
            v102 = v101;
            operator delete(v101);
          }
          v4 = v100;
          if (!v100)
            goto LABEL_189;
          v62 = (unint64_t *)&v100->__shared_owners_;
          do
            v6 = __ldaxr(v62);
          while (__stlxr(v6 - 1, v62));
          break;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>)::{lambda(void)#1}::operator()();
      }
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
LABEL_189:
      if (__p)
      {
        v97 = __p;
        operator delete(__p);
      }
      if (v94)
      {
        v95 = v94;
        operator delete(v94);
      }
      v71 = v93;
      if (v93)
      {
        v72 = (unint64_t *)&v93->__shared_owners_;
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      if (v89)
      {
        v90 = v89;
        operator delete(v89);
      }
      if (v87)
      {
        v88 = v87;
        operator delete(v87);
      }
      v32 = v86;
      if (!v86)
        goto LABEL_207;
      v74 = (unint64_t *)&v86->__shared_owners_;
      do
        v34 = __ldaxr(v74);
      while (__stlxr(v34 - 1, v74));
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v85, (uint64_t)a2);
      v91 = &v98;
      nitro::ndarray<unsigned char>::ndarray(&v92, &v85);
      switch(*a1)
      {
        case 3:
          v15 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)&v99, (uint64_t)a1);
          nitro::ndarray<int>::operator-=<unsigned char>(v15, &v92);
          nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)v79, &v99);
          if (v103)
          {
            v104 = v103;
            operator delete(v103);
          }
          if (v101)
          {
            v102 = v101;
            operator delete(v101);
          }
          v16 = v100;
          if (!v100)
            goto LABEL_163;
          v17 = (unint64_t *)&v100->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          break;
        case 5:
          v63 = (_QWORD *)nitro::ndarray<unsigned char>::ndarray((uint64_t)&v99, (uint64_t)a1);
          nitro::ndarray<unsigned char>::operator-=<unsigned char>(v63, &v92);
          nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)v79, &v99);
          if (v103)
          {
            v104 = v103;
            operator delete(v103);
          }
          if (v101)
          {
            v102 = v101;
            operator delete(v101);
          }
          v16 = v100;
          if (!v100)
            goto LABEL_163;
          v64 = (unint64_t *)&v100->__shared_owners_;
          do
            v18 = __ldaxr(v64);
          while (__stlxr(v18 - 1, v64));
          break;
        case 9:
          v35 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)&v99, (uint64_t)a1);
          nitro::ndarray<float>::operator-=<unsigned char>(v35, &v92, v36, v37, v38, v39, v40);
          nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)v79, &v99);
          if (v103)
          {
            v104 = v103;
            operator delete(v103);
          }
          if (v101)
          {
            v102 = v101;
            operator delete(v101);
          }
          v16 = v100;
          if (!v100)
            goto LABEL_163;
          v41 = (unint64_t *)&v100->__shared_owners_;
          do
            v18 = __ldaxr(v41);
          while (__stlxr(v18 - 1, v41));
          break;
        case 0xB:
          v54 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)&v99, (uint64_t)a1);
          nitro::ndarray<half>::operator-=<unsigned char>(v54, &v92, v55, v56, v57, v58, v59);
          nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)v79, &v99);
          if (v103)
          {
            v104 = v103;
            operator delete(v103);
          }
          if (v101)
          {
            v102 = v101;
            operator delete(v101);
          }
          v16 = v100;
          if (!v100)
            goto LABEL_163;
          v60 = (unint64_t *)&v100->__shared_owners_;
          do
            v18 = __ldaxr(v60);
          while (__stlxr(v18 - 1, v60));
          break;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>)::{lambda(void)#1}::operator()();
      }
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
LABEL_163:
      if (__p)
      {
        v97 = __p;
        operator delete(__p);
      }
      if (v94)
      {
        v95 = v94;
        operator delete(v94);
      }
      v65 = v93;
      if (v93)
      {
        v66 = (unint64_t *)&v93->__shared_owners_;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      if (v89)
      {
        v90 = v89;
        operator delete(v89);
      }
      if (v87)
      {
        v88 = v87;
        operator delete(v87);
      }
      v32 = v86;
      if (!v86)
        goto LABEL_207;
      v68 = (unint64_t *)&v86->__shared_owners_;
      do
        v34 = __ldaxr(v68);
      while (__stlxr(v34 - 1, v68));
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v85, (uint64_t)a2);
      v91 = &v98;
      nitro::ndarray<float>::ndarray(&v92, &v85);
      switch(*a1)
      {
        case 3:
          v7 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)&v99, (uint64_t)a1);
          nitro::ndarray<int>::operator-=<float>(v7, &v92);
          nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)v79, &v99);
          if (v103)
          {
            v104 = v103;
            operator delete(v103);
          }
          if (v101)
          {
            v102 = v101;
            operator delete(v101);
          }
          v8 = v100;
          if (!v100)
            goto LABEL_71;
          v9 = (unint64_t *)&v100->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          break;
        case 5:
          v25 = (_QWORD *)nitro::ndarray<unsigned char>::ndarray((uint64_t)&v99, (uint64_t)a1);
          nitro::ndarray<unsigned char>::operator-=<float>(v25, &v92, v26, v27);
          nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)v79, &v99);
          if (v103)
          {
            v104 = v103;
            operator delete(v103);
          }
          if (v101)
          {
            v102 = v101;
            operator delete(v101);
          }
          v8 = v100;
          if (!v100)
            goto LABEL_71;
          v28 = (unint64_t *)&v100->__shared_owners_;
          do
            v10 = __ldaxr(v28);
          while (__stlxr(v10 - 1, v28));
          break;
        case 9:
          v19 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)&v99, (uint64_t)a1);
          nitro::ndarray<float>::operator-=<float>(v19, &v92);
          nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)v79, &v99);
          if (v103)
          {
            v104 = v103;
            operator delete(v103);
          }
          if (v101)
          {
            v102 = v101;
            operator delete(v101);
          }
          v8 = v100;
          if (!v100)
            goto LABEL_71;
          v20 = (unint64_t *)&v100->__shared_owners_;
          do
            v10 = __ldaxr(v20);
          while (__stlxr(v10 - 1, v20));
          break;
        case 0xB:
          v21 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)&v99, (uint64_t)a1);
          nitro::ndarray<half>::operator-=<float>(v21, &v92);
          nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)v79, &v99);
          if (v103)
          {
            v104 = v103;
            operator delete(v103);
          }
          if (v101)
          {
            v102 = v101;
            operator delete(v101);
          }
          v8 = v100;
          if (!v100)
            goto LABEL_71;
          v22 = (unint64_t *)&v100->__shared_owners_;
          do
            v10 = __ldaxr(v22);
          while (__stlxr(v10 - 1, v22));
          break;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>)::{lambda(void)#1}::operator()();
      }
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_71:
      if (__p)
      {
        v97 = __p;
        operator delete(__p);
      }
      if (v94)
      {
        v95 = v94;
        operator delete(v94);
      }
      v29 = v93;
      if (v93)
      {
        v30 = (unint64_t *)&v93->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      if (v89)
      {
        v90 = v89;
        operator delete(v89);
      }
      if (v87)
      {
        v88 = v87;
        operator delete(v87);
      }
      v32 = v86;
      if (!v86)
        goto LABEL_207;
      v33 = (unint64_t *)&v86->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v85, (uint64_t)a2);
      v91 = &v98;
      nitro::ndarray<half>::ndarray(&v92, &v85);
      switch(*a1)
      {
        case 3:
          v11 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)&v99, (uint64_t)a1);
          nitro::ndarray<int>::operator-=<half>(v11, &v92);
          nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)v79, &v99);
          if (v103)
          {
            v104 = v103;
            operator delete(v103);
          }
          if (v101)
          {
            v102 = v101;
            operator delete(v101);
          }
          v12 = v100;
          if (!v100)
            goto LABEL_121;
          v13 = (unint64_t *)&v100->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          break;
        case 5:
          v46 = (_QWORD *)nitro::ndarray<unsigned char>::ndarray((uint64_t)&v99, (uint64_t)a1);
          nitro::ndarray<unsigned char>::operator-=<half>(v46, &v92, v47, v48);
          nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)v79, &v99);
          if (v103)
          {
            v104 = v103;
            operator delete(v103);
          }
          if (v101)
          {
            v102 = v101;
            operator delete(v101);
          }
          v12 = v100;
          if (!v100)
            goto LABEL_121;
          v49 = (unint64_t *)&v100->__shared_owners_;
          do
            v14 = __ldaxr(v49);
          while (__stlxr(v14 - 1, v49));
          break;
        case 9:
          v23 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)&v99, (uint64_t)a1);
          nitro::ndarray<float>::operator-=<half>(v23, &v92);
          nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)v79, &v99);
          if (v103)
          {
            v104 = v103;
            operator delete(v103);
          }
          if (v101)
          {
            v102 = v101;
            operator delete(v101);
          }
          v12 = v100;
          if (!v100)
            goto LABEL_121;
          v24 = (unint64_t *)&v100->__shared_owners_;
          do
            v14 = __ldaxr(v24);
          while (__stlxr(v14 - 1, v24));
          break;
        case 0xB:
          v44 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)&v99, (uint64_t)a1);
          nitro::ndarray<half>::operator-=<half>(v44, &v92);
          nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)v79, &v99);
          if (v103)
          {
            v104 = v103;
            operator delete(v103);
          }
          if (v101)
          {
            v102 = v101;
            operator delete(v101);
          }
          v12 = v100;
          if (!v100)
            goto LABEL_121;
          v45 = (unint64_t *)&v100->__shared_owners_;
          do
            v14 = __ldaxr(v45);
          while (__stlxr(v14 - 1, v45));
          break;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>)::{lambda(void)#1}::operator()();
      }
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_121:
      if (__p)
      {
        v97 = __p;
        operator delete(__p);
      }
      if (v94)
      {
        v95 = v94;
        operator delete(v94);
      }
      v50 = v93;
      if (v93)
      {
        v51 = (unint64_t *)&v93->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      if (v89)
      {
        v90 = v89;
        operator delete(v89);
      }
      if (v87)
      {
        v88 = v87;
        operator delete(v87);
      }
      v32 = v86;
      if (!v86)
        goto LABEL_207;
      v53 = (unint64_t *)&v86->__shared_owners_;
      do
        v34 = __ldaxr(v53);
      while (__stlxr(v34 - 1, v53));
      break;
    default:
      nitro::ndarray_container::visit<nitro::ndarray_container const,nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0,(void *)0>(nitro::ndarray_container const &,nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0)::{lambda(void)#1}::operator()();
  }
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
LABEL_207:
  nitro::ndarray_container::operator=((uint64_t)a1, (uint64_t)v79);
  if (v83)
  {
    v84 = v83;
    operator delete(v83);
  }
  if (v81)
  {
    v82 = v81;
    operator delete(v81);
  }
  v75 = v80;
  if (v80)
  {
    v76 = (unint64_t *)&v80->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  return a1;
}

void sub_191189094(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,void *a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v36;
  void *v37;
  _Unwind_Exception *v38;
  void *v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  void *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;

  v37 = *(void **)(v36 - 80);
  if (v37)
  {
    *(_QWORD *)(v36 - 72) = v37;
    operator delete(v37);
  }
  nitro::ndarray_container::concat(v36 - 120);
  v38 = *(_Unwind_Exception **)(v36 - 48);
  if (__p)
  {
    operator delete(__p);
    v39 = a32;
    if (!a32)
    {
LABEL_5:
      v40 = a31;
      if (!a31)
        goto LABEL_13;
      goto LABEL_9;
    }
  }
  else
  {
    v39 = a32;
    if (!a32)
      goto LABEL_5;
  }
  operator delete(v39);
  v40 = a31;
  if (!a31)
    goto LABEL_13;
LABEL_9:
  p_shared_owners = (unint64_t *)&v40->__shared_owners_;
  do
    v42 = __ldaxr(p_shared_owners);
  while (__stlxr(v42 - 1, p_shared_owners));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
LABEL_13:
  if (a25)
  {
    operator delete(a25);
    v43 = a22;
    if (!a22)
    {
LABEL_15:
      v44 = a21;
      if (!a21)
        goto LABEL_23;
      goto LABEL_19;
    }
  }
  else
  {
    v43 = a22;
    if (!a22)
      goto LABEL_15;
  }
  operator delete(v43);
  v44 = a21;
  if (!a21)
    goto LABEL_23;
LABEL_19:
  v45 = (unint64_t *)&v44->__shared_owners_;
  do
    v46 = __ldaxr(v45);
  while (__stlxr(v46 - 1, v45));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
LABEL_23:
  _Unwind_Resume(v38);
}

_DWORD *nitro::ndarray_container::operator*=(_DWORD *a1, _DWORD *a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  double v16;
  double v17;
  int8x16_t v18;
  double v19;
  int8x16_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t *v25;
  uint64_t *v26;
  unint64_t *v27;
  uint64_t *v28;
  unint64_t *v29;
  _QWORD *v30;
  double v31;
  float v32;
  unint64_t *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  float v41;
  double v42;
  int8x16_t v43;
  double v44;
  int8x16_t v45;
  unint64_t *v46;
  uint64_t *v47;
  unint64_t *v48;
  uint64_t *v49;
  unint64_t *v50;
  _QWORD *v51;
  double v52;
  float v53;
  unint64_t *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  uint64_t *v59;
  float v60;
  double v61;
  int8x16_t v62;
  double v63;
  int8x16_t v64;
  unint64_t *v65;
  uint64_t *v66;
  unint64_t *v67;
  _QWORD *v68;
  unint64_t *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  _QWORD *v74;
  unint64_t *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  _BYTE v84[16];
  std::__shared_weak_count *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  char *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  void *v99;
  void *v100;
  void *__p;
  void *v102;
  char v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;

  switch(*a2)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v90, (uint64_t)a2);
      v96 = &v103;
      nitro::ndarray<int>::ndarray(&v97, &v90);
      switch(*a1)
      {
        case 3:
          v3 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)&v104, (uint64_t)a1);
          nitro::ndarray<int>::operator*=<int>(v3, &v97);
          nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)v84, &v104);
          if (v108)
          {
            v109 = v108;
            operator delete(v108);
          }
          if (v106)
          {
            v107 = v106;
            operator delete(v106);
          }
          v4 = v105;
          if (!v105)
            goto LABEL_189;
          p_shared_owners = (unint64_t *)&v105->__shared_owners_;
          do
            v6 = __ldaxr(p_shared_owners);
          while (__stlxr(v6 - 1, p_shared_owners));
          break;
        case 5:
          v74 = (_QWORD *)nitro::ndarray<unsigned char>::ndarray((uint64_t)&v104, (uint64_t)a1);
          nitro::ndarray<unsigned char>::operator*=<int>(v74, &v97);
          nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)v84, &v104);
          if (v108)
          {
            v109 = v108;
            operator delete(v108);
          }
          if (v106)
          {
            v107 = v106;
            operator delete(v106);
          }
          v4 = v105;
          if (!v105)
            goto LABEL_189;
          v75 = (unint64_t *)&v105->__shared_owners_;
          do
            v6 = __ldaxr(v75);
          while (__stlxr(v6 - 1, v75));
          break;
        case 9:
          v47 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)&v104, (uint64_t)a1);
          nitro::ndarray<float>::operator*=<int>(v47, &v97);
          nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)v84, &v104);
          if (v108)
          {
            v109 = v108;
            operator delete(v108);
          }
          if (v106)
          {
            v107 = v106;
            operator delete(v106);
          }
          v4 = v105;
          if (!v105)
            goto LABEL_189;
          v48 = (unint64_t *)&v105->__shared_owners_;
          do
            v6 = __ldaxr(v48);
          while (__stlxr(v6 - 1, v48));
          break;
        case 0xB:
          v66 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)&v104, (uint64_t)a1);
          nitro::ndarray<half>::operator*=<int>(v66, &v97);
          nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)v84, &v104);
          if (v108)
          {
            v109 = v108;
            operator delete(v108);
          }
          if (v106)
          {
            v107 = v106;
            operator delete(v106);
          }
          v4 = v105;
          if (!v105)
            goto LABEL_189;
          v67 = (unint64_t *)&v105->__shared_owners_;
          do
            v6 = __ldaxr(v67);
          while (__stlxr(v6 - 1, v67));
          break;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>)::{lambda(void)#1}::operator()();
      }
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
LABEL_189:
      if (__p)
      {
        v102 = __p;
        operator delete(__p);
      }
      if (v99)
      {
        v100 = v99;
        operator delete(v99);
      }
      v76 = v98;
      if (v98)
      {
        v77 = (unint64_t *)&v98->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      if (v94)
      {
        v95 = v94;
        operator delete(v94);
      }
      if (v92)
      {
        v93 = v92;
        operator delete(v92);
      }
      v37 = v91;
      if (!v91)
        goto LABEL_207;
      v79 = (unint64_t *)&v91->__shared_owners_;
      do
        v39 = __ldaxr(v79);
      while (__stlxr(v39 - 1, v79));
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v90, (uint64_t)a2);
      v96 = &v103;
      nitro::ndarray<unsigned char>::ndarray(&v97, &v90);
      switch(*a1)
      {
        case 3:
          v15 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)&v104, (uint64_t)a1);
          nitro::ndarray<int>::operator*=<unsigned char>(v15, &v97, v16, v17, v18, v19, v20);
          nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)v84, &v104);
          if (v108)
          {
            v109 = v108;
            operator delete(v108);
          }
          if (v106)
          {
            v107 = v106;
            operator delete(v106);
          }
          v21 = v105;
          if (!v105)
            goto LABEL_163;
          v22 = (unint64_t *)&v105->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          break;
        case 5:
          v68 = (_QWORD *)nitro::ndarray<unsigned char>::ndarray((uint64_t)&v104, (uint64_t)a1);
          nitro::ndarray<unsigned char>::operator*=<unsigned char>(v68, &v97);
          nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)v84, &v104);
          if (v108)
          {
            v109 = v108;
            operator delete(v108);
          }
          if (v106)
          {
            v107 = v106;
            operator delete(v106);
          }
          v21 = v105;
          if (!v105)
            goto LABEL_163;
          v69 = (unint64_t *)&v105->__shared_owners_;
          do
            v23 = __ldaxr(v69);
          while (__stlxr(v23 - 1, v69));
          break;
        case 9:
          v40 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)&v104, (uint64_t)a1);
          nitro::ndarray<float>::operator*=<unsigned char>(v40, &v97, v41, v42, v43, v44, v45);
          nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)v84, &v104);
          if (v108)
          {
            v109 = v108;
            operator delete(v108);
          }
          if (v106)
          {
            v107 = v106;
            operator delete(v106);
          }
          v21 = v105;
          if (!v105)
            goto LABEL_163;
          v46 = (unint64_t *)&v105->__shared_owners_;
          do
            v23 = __ldaxr(v46);
          while (__stlxr(v23 - 1, v46));
          break;
        case 0xB:
          v59 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)&v104, (uint64_t)a1);
          nitro::ndarray<half>::operator*=<unsigned char>(v59, &v97, v60, v61, v62, v63, v64);
          nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)v84, &v104);
          if (v108)
          {
            v109 = v108;
            operator delete(v108);
          }
          if (v106)
          {
            v107 = v106;
            operator delete(v106);
          }
          v21 = v105;
          if (!v105)
            goto LABEL_163;
          v65 = (unint64_t *)&v105->__shared_owners_;
          do
            v23 = __ldaxr(v65);
          while (__stlxr(v23 - 1, v65));
          break;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>)::{lambda(void)#1}::operator()();
      }
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
LABEL_163:
      if (__p)
      {
        v102 = __p;
        operator delete(__p);
      }
      if (v99)
      {
        v100 = v99;
        operator delete(v99);
      }
      v70 = v98;
      if (v98)
      {
        v71 = (unint64_t *)&v98->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      if (v94)
      {
        v95 = v94;
        operator delete(v94);
      }
      if (v92)
      {
        v93 = v92;
        operator delete(v92);
      }
      v37 = v91;
      if (!v91)
        goto LABEL_207;
      v73 = (unint64_t *)&v91->__shared_owners_;
      do
        v39 = __ldaxr(v73);
      while (__stlxr(v39 - 1, v73));
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v90, (uint64_t)a2);
      v96 = &v103;
      nitro::ndarray<float>::ndarray(&v97, &v90);
      switch(*a1)
      {
        case 3:
          v7 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)&v104, (uint64_t)a1);
          nitro::ndarray<int>::operator*=<float>(v7, &v97);
          nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)v84, &v104);
          if (v108)
          {
            v109 = v108;
            operator delete(v108);
          }
          if (v106)
          {
            v107 = v106;
            operator delete(v106);
          }
          v8 = v105;
          if (!v105)
            goto LABEL_71;
          v9 = (unint64_t *)&v105->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          break;
        case 5:
          v30 = (_QWORD *)nitro::ndarray<unsigned char>::ndarray((uint64_t)&v104, (uint64_t)a1);
          nitro::ndarray<unsigned char>::operator*=<float>(v30, &v97, v31, v32);
          nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)v84, &v104);
          if (v108)
          {
            v109 = v108;
            operator delete(v108);
          }
          if (v106)
          {
            v107 = v106;
            operator delete(v106);
          }
          v8 = v105;
          if (!v105)
            goto LABEL_71;
          v33 = (unint64_t *)&v105->__shared_owners_;
          do
            v10 = __ldaxr(v33);
          while (__stlxr(v10 - 1, v33));
          break;
        case 9:
          v24 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)&v104, (uint64_t)a1);
          nitro::ndarray<float>::operator*=<float>(v24, &v97);
          nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)v84, &v104);
          if (v108)
          {
            v109 = v108;
            operator delete(v108);
          }
          if (v106)
          {
            v107 = v106;
            operator delete(v106);
          }
          v8 = v105;
          if (!v105)
            goto LABEL_71;
          v25 = (unint64_t *)&v105->__shared_owners_;
          do
            v10 = __ldaxr(v25);
          while (__stlxr(v10 - 1, v25));
          break;
        case 0xB:
          v26 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)&v104, (uint64_t)a1);
          nitro::ndarray<half>::operator*=<float>(v26, &v97);
          nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)v84, &v104);
          if (v108)
          {
            v109 = v108;
            operator delete(v108);
          }
          if (v106)
          {
            v107 = v106;
            operator delete(v106);
          }
          v8 = v105;
          if (!v105)
            goto LABEL_71;
          v27 = (unint64_t *)&v105->__shared_owners_;
          do
            v10 = __ldaxr(v27);
          while (__stlxr(v10 - 1, v27));
          break;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>)::{lambda(void)#1}::operator()();
      }
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_71:
      if (__p)
      {
        v102 = __p;
        operator delete(__p);
      }
      if (v99)
      {
        v100 = v99;
        operator delete(v99);
      }
      v34 = v98;
      if (v98)
      {
        v35 = (unint64_t *)&v98->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      if (v94)
      {
        v95 = v94;
        operator delete(v94);
      }
      if (v92)
      {
        v93 = v92;
        operator delete(v92);
      }
      v37 = v91;
      if (!v91)
        goto LABEL_207;
      v38 = (unint64_t *)&v91->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v90, (uint64_t)a2);
      v96 = &v103;
      nitro::ndarray<half>::ndarray(&v97, &v90);
      switch(*a1)
      {
        case 3:
          v11 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)&v104, (uint64_t)a1);
          nitro::ndarray<int>::operator*=<half>(v11, &v97);
          nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)v84, &v104);
          if (v108)
          {
            v109 = v108;
            operator delete(v108);
          }
          if (v106)
          {
            v107 = v106;
            operator delete(v106);
          }
          v12 = v105;
          if (!v105)
            goto LABEL_121;
          v13 = (unint64_t *)&v105->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          break;
        case 5:
          v51 = (_QWORD *)nitro::ndarray<unsigned char>::ndarray((uint64_t)&v104, (uint64_t)a1);
          nitro::ndarray<unsigned char>::operator*=<half>(v51, &v97, v52, v53);
          nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)v84, &v104);
          if (v108)
          {
            v109 = v108;
            operator delete(v108);
          }
          if (v106)
          {
            v107 = v106;
            operator delete(v106);
          }
          v12 = v105;
          if (!v105)
            goto LABEL_121;
          v54 = (unint64_t *)&v105->__shared_owners_;
          do
            v14 = __ldaxr(v54);
          while (__stlxr(v14 - 1, v54));
          break;
        case 9:
          v28 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)&v104, (uint64_t)a1);
          nitro::ndarray<float>::operator*=<half>(v28, &v97);
          nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)v84, &v104);
          if (v108)
          {
            v109 = v108;
            operator delete(v108);
          }
          if (v106)
          {
            v107 = v106;
            operator delete(v106);
          }
          v12 = v105;
          if (!v105)
            goto LABEL_121;
          v29 = (unint64_t *)&v105->__shared_owners_;
          do
            v14 = __ldaxr(v29);
          while (__stlxr(v14 - 1, v29));
          break;
        case 0xB:
          v49 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)&v104, (uint64_t)a1);
          nitro::ndarray<half>::operator*=<half>(v49, &v97);
          nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)v84, &v104);
          if (v108)
          {
            v109 = v108;
            operator delete(v108);
          }
          if (v106)
          {
            v107 = v106;
            operator delete(v106);
          }
          v12 = v105;
          if (!v105)
            goto LABEL_121;
          v50 = (unint64_t *)&v105->__shared_owners_;
          do
            v14 = __ldaxr(v50);
          while (__stlxr(v14 - 1, v50));
          break;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>)::{lambda(void)#1}::operator()();
      }
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_121:
      if (__p)
      {
        v102 = __p;
        operator delete(__p);
      }
      if (v99)
      {
        v100 = v99;
        operator delete(v99);
      }
      v55 = v98;
      if (v98)
      {
        v56 = (unint64_t *)&v98->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      if (v94)
      {
        v95 = v94;
        operator delete(v94);
      }
      if (v92)
      {
        v93 = v92;
        operator delete(v92);
      }
      v37 = v91;
      if (!v91)
        goto LABEL_207;
      v58 = (unint64_t *)&v91->__shared_owners_;
      do
        v39 = __ldaxr(v58);
      while (__stlxr(v39 - 1, v58));
      break;
    default:
      nitro::ndarray_container::visit<nitro::ndarray_container const,nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0,(void *)0>(nitro::ndarray_container const &,nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0)::{lambda(void)#1}::operator()();
  }
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
LABEL_207:
  nitro::ndarray_container::operator=((uint64_t)a1, (uint64_t)v84);
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  v80 = v85;
  if (v85)
  {
    v81 = (unint64_t *)&v85->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  return a1;
}

void sub_19118A24C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,void *a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v36;
  void *v37;
  _Unwind_Exception *v38;
  void *v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  void *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;

  v37 = *(void **)(v36 - 80);
  if (v37)
  {
    *(_QWORD *)(v36 - 72) = v37;
    operator delete(v37);
  }
  nitro::ndarray_container::concat(v36 - 120);
  v38 = *(_Unwind_Exception **)(v36 - 48);
  if (__p)
  {
    operator delete(__p);
    v39 = a32;
    if (!a32)
    {
LABEL_5:
      v40 = a31;
      if (!a31)
        goto LABEL_13;
      goto LABEL_9;
    }
  }
  else
  {
    v39 = a32;
    if (!a32)
      goto LABEL_5;
  }
  operator delete(v39);
  v40 = a31;
  if (!a31)
    goto LABEL_13;
LABEL_9:
  p_shared_owners = (unint64_t *)&v40->__shared_owners_;
  do
    v42 = __ldaxr(p_shared_owners);
  while (__stlxr(v42 - 1, p_shared_owners));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
LABEL_13:
  if (a25)
  {
    operator delete(a25);
    v43 = a22;
    if (!a22)
    {
LABEL_15:
      v44 = a21;
      if (!a21)
        goto LABEL_23;
      goto LABEL_19;
    }
  }
  else
  {
    v43 = a22;
    if (!a22)
      goto LABEL_15;
  }
  operator delete(v43);
  v44 = a21;
  if (!a21)
    goto LABEL_23;
LABEL_19:
  v45 = (unint64_t *)&v44->__shared_owners_;
  do
    v46 = __ldaxr(v45);
  while (__stlxr(v46 - 1, v45));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
LABEL_23:
  _Unwind_Resume(v38);
}

uint64_t nitro::ndarray_container::operator==(_DWORD *a1, _DWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t *v21;
  uint64_t *v22;
  unint64_t *v23;
  uint64_t *v24;
  unint64_t *v25;
  uint64_t *v26;
  unint64_t *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t *v34;
  unint64_t *v35;
  uint64_t *v36;
  unint64_t *v37;
  uint64_t *v38;
  unint64_t *v39;
  uint64_t *v40;
  unint64_t *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  uint64_t *v46;
  unint64_t *v47;
  uint64_t *v48;
  unint64_t *v49;
  uint64_t *v50;
  unint64_t *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  uint64_t *v56;
  unint64_t *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  uint64_t v63;
  std::__shared_weak_count *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  char *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  void *v72;
  void *v73;
  void *__p;
  void *v75;
  char v76;
  _BYTE v77[8];
  std::__shared_weak_count *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;

  switch(*a2)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v63, (uint64_t)a2);
      v69 = &v76;
      nitro::ndarray<int>::ndarray(&v70, &v63);
      switch(*a1)
      {
        case 3:
          v3 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)v77, (uint64_t)a1);
          v4 = nitro::ndarray<int>::operator==<int>(v3, &v70);
          if (v81)
          {
            v82 = v81;
            operator delete(v81);
          }
          if (v79)
          {
            v80 = v79;
            operator delete(v79);
          }
          v5 = v78;
          if (!v78)
            goto LABEL_189;
          p_shared_owners = (unint64_t *)&v78->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          break;
        case 5:
          v56 = (uint64_t *)nitro::ndarray<unsigned char>::ndarray((uint64_t)v77, (uint64_t)a1);
          v4 = nitro::ndarray<unsigned char>::operator==<int>(v56, &v70);
          if (v81)
          {
            v82 = v81;
            operator delete(v81);
          }
          if (v79)
          {
            v80 = v79;
            operator delete(v79);
          }
          v5 = v78;
          if (!v78)
            goto LABEL_189;
          v57 = (unint64_t *)&v78->__shared_owners_;
          do
            v7 = __ldaxr(v57);
          while (__stlxr(v7 - 1, v57));
          break;
        case 9:
          v36 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)v77, (uint64_t)a1);
          v4 = nitro::ndarray<float>::operator==<int>(v36, &v70);
          if (v81)
          {
            v82 = v81;
            operator delete(v81);
          }
          if (v79)
          {
            v80 = v79;
            operator delete(v79);
          }
          v5 = v78;
          if (!v78)
            goto LABEL_189;
          v37 = (unint64_t *)&v78->__shared_owners_;
          do
            v7 = __ldaxr(v37);
          while (__stlxr(v7 - 1, v37));
          break;
        case 0xB:
          v48 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)v77, (uint64_t)a1);
          v4 = nitro::ndarray<half>::operator==<int>(v48, &v70);
          if (v81)
          {
            v82 = v81;
            operator delete(v81);
          }
          if (v79)
          {
            v80 = v79;
            operator delete(v79);
          }
          v5 = v78;
          if (!v78)
            goto LABEL_189;
          v49 = (unint64_t *)&v78->__shared_owners_;
          do
            v7 = __ldaxr(v49);
          while (__stlxr(v7 - 1, v49));
          break;
        default:
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>)const::{lambda(void)#1}::operator()();
      }
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
LABEL_189:
      if (__p)
      {
        v75 = __p;
        operator delete(__p);
      }
      if (v72)
      {
        v73 = v72;
        operator delete(v72);
      }
      v58 = v71;
      if (v71)
      {
        v59 = (unint64_t *)&v71->__shared_owners_;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      if (v67)
      {
        v68 = v67;
        operator delete(v67);
      }
      if (v65)
      {
        v66 = v65;
        operator delete(v65);
      }
      v31 = v64;
      if (!v64)
        return v4;
      v61 = (unint64_t *)&v64->__shared_owners_;
      do
        v33 = __ldaxr(v61);
      while (__stlxr(v33 - 1, v61));
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v63, (uint64_t)a2);
      v69 = &v76;
      nitro::ndarray<unsigned char>::ndarray(&v70, &v63);
      switch(*a1)
      {
        case 3:
          v16 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)v77, (uint64_t)a1);
          v4 = nitro::ndarray<int>::operator==<unsigned char>(v16, &v70);
          if (v81)
          {
            v82 = v81;
            operator delete(v81);
          }
          if (v79)
          {
            v80 = v79;
            operator delete(v79);
          }
          v17 = v78;
          if (!v78)
            goto LABEL_163;
          v18 = (unint64_t *)&v78->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          break;
        case 5:
          v50 = (uint64_t *)nitro::ndarray<unsigned char>::ndarray((uint64_t)v77, (uint64_t)a1);
          v4 = nitro::ndarray<unsigned char>::operator==<unsigned char>(v50, &v70);
          if (v81)
          {
            v82 = v81;
            operator delete(v81);
          }
          if (v79)
          {
            v80 = v79;
            operator delete(v79);
          }
          v17 = v78;
          if (!v78)
            goto LABEL_163;
          v51 = (unint64_t *)&v78->__shared_owners_;
          do
            v19 = __ldaxr(v51);
          while (__stlxr(v19 - 1, v51));
          break;
        case 9:
          v34 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)v77, (uint64_t)a1);
          v4 = nitro::ndarray<float>::operator==<unsigned char>(v34, &v70);
          if (v81)
          {
            v82 = v81;
            operator delete(v81);
          }
          if (v79)
          {
            v80 = v79;
            operator delete(v79);
          }
          v17 = v78;
          if (!v78)
            goto LABEL_163;
          v35 = (unint64_t *)&v78->__shared_owners_;
          do
            v19 = __ldaxr(v35);
          while (__stlxr(v19 - 1, v35));
          break;
        case 0xB:
          v46 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)v77, (uint64_t)a1);
          v4 = nitro::ndarray<half>::operator==<unsigned char>(v46, &v70);
          if (v81)
          {
            v82 = v81;
            operator delete(v81);
          }
          if (v79)
          {
            v80 = v79;
            operator delete(v79);
          }
          v17 = v78;
          if (!v78)
            goto LABEL_163;
          v47 = (unint64_t *)&v78->__shared_owners_;
          do
            v19 = __ldaxr(v47);
          while (__stlxr(v19 - 1, v47));
          break;
        default:
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>)const::{lambda(void)#1}::operator()();
      }
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
LABEL_163:
      if (__p)
      {
        v75 = __p;
        operator delete(__p);
      }
      if (v72)
      {
        v73 = v72;
        operator delete(v72);
      }
      v52 = v71;
      if (v71)
      {
        v53 = (unint64_t *)&v71->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      if (v67)
      {
        v68 = v67;
        operator delete(v67);
      }
      if (v65)
      {
        v66 = v65;
        operator delete(v65);
      }
      v31 = v64;
      if (!v64)
        return v4;
      v55 = (unint64_t *)&v64->__shared_owners_;
      do
        v33 = __ldaxr(v55);
      while (__stlxr(v33 - 1, v55));
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v63, (uint64_t)a2);
      v69 = &v76;
      nitro::ndarray<float>::ndarray(&v70, &v63);
      switch(*a1)
      {
        case 3:
          v8 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)v77, (uint64_t)a1);
          v4 = nitro::ndarray<int>::operator==<float>(v8, &v70);
          if (v81)
          {
            v82 = v81;
            operator delete(v81);
          }
          if (v79)
          {
            v80 = v79;
            operator delete(v79);
          }
          v9 = v78;
          if (!v78)
            goto LABEL_71;
          v10 = (unint64_t *)&v78->__shared_owners_;
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 - 1, v10));
          break;
        case 5:
          v26 = (uint64_t *)nitro::ndarray<unsigned char>::ndarray((uint64_t)v77, (uint64_t)a1);
          v4 = nitro::ndarray<unsigned char>::operator==<float>(v26, &v70);
          if (v81)
          {
            v82 = v81;
            operator delete(v81);
          }
          if (v79)
          {
            v80 = v79;
            operator delete(v79);
          }
          v9 = v78;
          if (!v78)
            goto LABEL_71;
          v27 = (unint64_t *)&v78->__shared_owners_;
          do
            v11 = __ldaxr(v27);
          while (__stlxr(v11 - 1, v27));
          break;
        case 9:
          v20 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)v77, (uint64_t)a1);
          v4 = nitro::ndarray<float>::operator==<float>(v20, &v70);
          if (v81)
          {
            v82 = v81;
            operator delete(v81);
          }
          if (v79)
          {
            v80 = v79;
            operator delete(v79);
          }
          v9 = v78;
          if (!v78)
            goto LABEL_71;
          v21 = (unint64_t *)&v78->__shared_owners_;
          do
            v11 = __ldaxr(v21);
          while (__stlxr(v11 - 1, v21));
          break;
        case 0xB:
          v22 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)v77, (uint64_t)a1);
          v4 = nitro::ndarray<half>::operator==<float>(v22, &v70);
          if (v81)
          {
            v82 = v81;
            operator delete(v81);
          }
          if (v79)
          {
            v80 = v79;
            operator delete(v79);
          }
          v9 = v78;
          if (!v78)
            goto LABEL_71;
          v23 = (unint64_t *)&v78->__shared_owners_;
          do
            v11 = __ldaxr(v23);
          while (__stlxr(v11 - 1, v23));
          break;
        default:
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>)const::{lambda(void)#1}::operator()();
      }
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
LABEL_71:
      if (__p)
      {
        v75 = __p;
        operator delete(__p);
      }
      if (v72)
      {
        v73 = v72;
        operator delete(v72);
      }
      v28 = v71;
      if (v71)
      {
        v29 = (unint64_t *)&v71->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      if (v67)
      {
        v68 = v67;
        operator delete(v67);
      }
      if (v65)
      {
        v66 = v65;
        operator delete(v65);
      }
      v31 = v64;
      if (!v64)
        return v4;
      v32 = (unint64_t *)&v64->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v63, (uint64_t)a2);
      v69 = &v76;
      nitro::ndarray<half>::ndarray(&v70, &v63);
      switch(*a1)
      {
        case 3:
          v12 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)v77, (uint64_t)a1);
          v4 = nitro::ndarray<int>::operator==<half>(v12, &v70);
          if (v81)
          {
            v82 = v81;
            operator delete(v81);
          }
          if (v79)
          {
            v80 = v79;
            operator delete(v79);
          }
          v13 = v78;
          if (!v78)
            goto LABEL_121;
          v14 = (unint64_t *)&v78->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          break;
        case 5:
          v40 = (uint64_t *)nitro::ndarray<unsigned char>::ndarray((uint64_t)v77, (uint64_t)a1);
          v4 = nitro::ndarray<unsigned char>::operator==<half>(v40, &v70);
          if (v81)
          {
            v82 = v81;
            operator delete(v81);
          }
          if (v79)
          {
            v80 = v79;
            operator delete(v79);
          }
          v13 = v78;
          if (!v78)
            goto LABEL_121;
          v41 = (unint64_t *)&v78->__shared_owners_;
          do
            v15 = __ldaxr(v41);
          while (__stlxr(v15 - 1, v41));
          break;
        case 9:
          v24 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)v77, (uint64_t)a1);
          v4 = nitro::ndarray<float>::operator==<half>(v24, &v70);
          if (v81)
          {
            v82 = v81;
            operator delete(v81);
          }
          if (v79)
          {
            v80 = v79;
            operator delete(v79);
          }
          v13 = v78;
          if (!v78)
            goto LABEL_121;
          v25 = (unint64_t *)&v78->__shared_owners_;
          do
            v15 = __ldaxr(v25);
          while (__stlxr(v15 - 1, v25));
          break;
        case 0xB:
          v38 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)v77, (uint64_t)a1);
          v4 = nitro::ndarray<half>::operator==<half>(v38, &v70);
          if (v81)
          {
            v82 = v81;
            operator delete(v81);
          }
          if (v79)
          {
            v80 = v79;
            operator delete(v79);
          }
          v13 = v78;
          if (!v78)
            goto LABEL_121;
          v39 = (unint64_t *)&v78->__shared_owners_;
          do
            v15 = __ldaxr(v39);
          while (__stlxr(v15 - 1, v39));
          break;
        default:
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>)const::{lambda(void)#1}::operator()();
      }
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
LABEL_121:
      if (__p)
      {
        v75 = __p;
        operator delete(__p);
      }
      if (v72)
      {
        v73 = v72;
        operator delete(v72);
      }
      v42 = v71;
      if (v71)
      {
        v43 = (unint64_t *)&v71->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      if (v67)
      {
        v68 = v67;
        operator delete(v67);
      }
      if (v65)
      {
        v66 = v65;
        operator delete(v65);
      }
      v31 = v64;
      if (!v64)
        return v4;
      v45 = (unint64_t *)&v64->__shared_owners_;
      do
        v33 = __ldaxr(v45);
      while (__stlxr(v33 - 1, v45));
      break;
    default:
      nitro::ndarray_container::visit<nitro::ndarray_container const,nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0,(void *)0>(nitro::ndarray_container const &,nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0)const::{lambda(void)#1}::operator()();
  }
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  return v4;
}

void sub_19118B2E0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  uint64_t v26;
  void *v27;
  _Unwind_Exception *v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;

  v27 = *(void **)(v26 - 80);
  if (v27)
  {
    *(_QWORD *)(v26 - 72) = v27;
    operator delete(v27);
  }
  nitro::ndarray_container::concat(v26 - 120);
  v28 = *(_Unwind_Exception **)(v26 - 48);
  if (__p)
  {
    operator delete(__p);
    v29 = a22;
    if (!a22)
    {
LABEL_5:
      v30 = a21;
      if (!a21)
        goto LABEL_13;
      goto LABEL_9;
    }
  }
  else
  {
    v29 = a22;
    if (!a22)
      goto LABEL_5;
  }
  operator delete(v29);
  v30 = a21;
  if (!a21)
    goto LABEL_13;
LABEL_9:
  p_shared_owners = (unint64_t *)&v30->__shared_owners_;
  do
    v32 = __ldaxr(p_shared_owners);
  while (__stlxr(v32 - 1, p_shared_owners));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
LABEL_13:
  if (a15)
  {
    operator delete(a15);
    v33 = a12;
    if (!a12)
    {
LABEL_15:
      v34 = a11;
      if (!a11)
        goto LABEL_23;
      goto LABEL_19;
    }
  }
  else
  {
    v33 = a12;
    if (!a12)
      goto LABEL_15;
  }
  operator delete(v33);
  v34 = a11;
  if (!a11)
    goto LABEL_23;
LABEL_19:
  v35 = (unint64_t *)&v34->__shared_owners_;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
LABEL_23:
  _Unwind_Resume(v28);
}

void nitro::ndarray_container::negate(nitro::ndarray_container *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  void *v9;
  void *v10;
  void *__p;
  void *v12;

  switch(*(_DWORD *)this)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v7, (uint64_t)this);
      nitro::ndarray<int>::negate(&v7);
      if (__p)
      {
        v12 = __p;
        operator delete(__p);
      }
      if (v9)
      {
        v10 = v9;
        operator delete(v9);
      }
      v1 = v8;
      if (!v8)
        return;
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v3 = __ldaxr(p_shared_owners);
      while (__stlxr(v3 - 1, p_shared_owners));
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v7, (uint64_t)this);
      nitro::ndarray<unsigned char>::negate(&v7);
      if (__p)
      {
        v12 = __p;
        operator delete(__p);
      }
      if (v9)
      {
        v10 = v9;
        operator delete(v9);
      }
      v1 = v8;
      if (!v8)
        return;
      v6 = (unint64_t *)&v8->__shared_owners_;
      do
        v3 = __ldaxr(v6);
      while (__stlxr(v3 - 1, v6));
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v7, (uint64_t)this);
      nitro::ndarray<float>::negate(&v7);
      if (__p)
      {
        v12 = __p;
        operator delete(__p);
      }
      if (v9)
      {
        v10 = v9;
        operator delete(v9);
      }
      v1 = v8;
      if (!v8)
        return;
      v4 = (unint64_t *)&v8->__shared_owners_;
      do
        v3 = __ldaxr(v4);
      while (__stlxr(v3 - 1, v4));
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v7, (uint64_t)this);
      nitro::ndarray<half>::negate(&v7);
      if (__p)
      {
        v12 = __p;
        operator delete(__p);
      }
      if (v9)
      {
        v10 = v9;
        operator delete(v9);
      }
      v1 = v8;
      if (!v8)
        return;
      v5 = (unint64_t *)&v8->__shared_owners_;
      do
        v3 = __ldaxr(v5);
      while (__stlxr(v3 - 1, v5));
      break;
    default:
      printf("%d\n", *(_DWORD *)this);
      nitro::ndarray_container::visit<nitro::ndarray_container::negate(void)::$_0>(nitro::ndarray_container::negate(void)::$_0)::{lambda(void)#1}::operator()();
  }
  if (!v3)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

nitro::ndarray_container *nitro::ndarray_container::assign(nitro::ndarray_container *this, const nitro::ndarray_container *a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  __n128 v12;
  float16x4_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  double v18;
  double v19;
  int8x16_t v20;
  double v21;
  int8x16_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t *v27;
  uint64_t *v28;
  unint64_t *v29;
  uint64_t *v30;
  unint64_t *v31;
  _QWORD *v32;
  unint64_t *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  float v41;
  double v42;
  int8x16_t v43;
  double v44;
  int8x16_t v45;
  unint64_t *v46;
  uint64_t *v47;
  unint64_t *v48;
  uint64_t *v49;
  unint64_t *v50;
  _QWORD *v51;
  unint64_t *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  uint64_t *v57;
  float32x4_t v58;
  unint64_t *v59;
  uint64_t *v60;
  unint64_t *v61;
  _QWORD *v62;
  unint64_t *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  _QWORD *v68;
  unint64_t *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  uint64_t v75;
  std::__shared_weak_count *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  char *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  void *v84;
  void *v85;
  void *__p;
  void *v87;
  char v88;
  _BYTE v89[8];
  std::__shared_weak_count *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;

  switch(*(_DWORD *)a2)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v75, (uint64_t)a2);
      v81 = &v88;
      nitro::ndarray<int>::ndarray(&v82, &v75);
      switch(*(_DWORD *)this)
      {
        case 3:
          v3 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)v89, (uint64_t)this);
          nitro::ndarray<int>::assign<int>(v3, &v82);
          if (v93)
          {
            v94 = v93;
            operator delete(v93);
          }
          if (v91)
          {
            v92 = v91;
            operator delete(v91);
          }
          v4 = v90;
          if (!v90)
            goto LABEL_189;
          p_shared_owners = (unint64_t *)&v90->__shared_owners_;
          do
            v6 = __ldaxr(p_shared_owners);
          while (__stlxr(v6 - 1, p_shared_owners));
          break;
        case 5:
          v68 = (_QWORD *)nitro::ndarray<unsigned char>::ndarray((uint64_t)v89, (uint64_t)this);
          nitro::ndarray<unsigned char>::assign<int>(v68, &v82);
          if (v93)
          {
            v94 = v93;
            operator delete(v93);
          }
          if (v91)
          {
            v92 = v91;
            operator delete(v91);
          }
          v4 = v90;
          if (!v90)
            goto LABEL_189;
          v69 = (unint64_t *)&v90->__shared_owners_;
          do
            v6 = __ldaxr(v69);
          while (__stlxr(v6 - 1, v69));
          break;
        case 9:
          v47 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)v89, (uint64_t)this);
          nitro::ndarray<float>::assign<int>(v47, &v82);
          if (v93)
          {
            v94 = v93;
            operator delete(v93);
          }
          if (v91)
          {
            v92 = v91;
            operator delete(v91);
          }
          v4 = v90;
          if (!v90)
            goto LABEL_189;
          v48 = (unint64_t *)&v90->__shared_owners_;
          do
            v6 = __ldaxr(v48);
          while (__stlxr(v6 - 1, v48));
          break;
        case 0xB:
          v60 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)v89, (uint64_t)this);
          nitro::ndarray<half>::assign<int>(v60, &v82);
          if (v93)
          {
            v94 = v93;
            operator delete(v93);
          }
          if (v91)
          {
            v92 = v91;
            operator delete(v91);
          }
          v4 = v90;
          if (!v90)
            goto LABEL_189;
          v61 = (unint64_t *)&v90->__shared_owners_;
          do
            v6 = __ldaxr(v61);
          while (__stlxr(v6 - 1, v61));
          break;
        default:
          printf("%d\n", *(_DWORD *)this);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>)::{lambda(void)#1}::operator()();
      }
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
LABEL_189:
      if (__p)
      {
        v87 = __p;
        operator delete(__p);
      }
      if (v84)
      {
        v85 = v84;
        operator delete(v84);
      }
      v70 = v83;
      if (v83)
      {
        v71 = (unint64_t *)&v83->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      if (v79)
      {
        v80 = v79;
        operator delete(v79);
      }
      if (v77)
      {
        v78 = v77;
        operator delete(v77);
      }
      v37 = v76;
      if (!v76)
        return this;
      v73 = (unint64_t *)&v76->__shared_owners_;
      do
        v39 = __ldaxr(v73);
      while (__stlxr(v39 - 1, v73));
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v75, (uint64_t)a2);
      v81 = &v88;
      nitro::ndarray<unsigned char>::ndarray(&v82, &v75);
      switch(*(_DWORD *)this)
      {
        case 3:
          v17 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)v89, (uint64_t)this);
          nitro::ndarray<int>::assign<unsigned char>(v17, &v82, v18, v19, v20, v21, v22);
          if (v93)
          {
            v94 = v93;
            operator delete(v93);
          }
          if (v91)
          {
            v92 = v91;
            operator delete(v91);
          }
          v23 = v90;
          if (!v90)
            goto LABEL_163;
          v24 = (unint64_t *)&v90->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          break;
        case 5:
          v62 = (_QWORD *)nitro::ndarray<unsigned char>::ndarray((uint64_t)v89, (uint64_t)this);
          nitro::ndarray<unsigned char>::assign<unsigned char>(v62, &v82);
          if (v93)
          {
            v94 = v93;
            operator delete(v93);
          }
          if (v91)
          {
            v92 = v91;
            operator delete(v91);
          }
          v23 = v90;
          if (!v90)
            goto LABEL_163;
          v63 = (unint64_t *)&v90->__shared_owners_;
          do
            v25 = __ldaxr(v63);
          while (__stlxr(v25 - 1, v63));
          break;
        case 9:
          v40 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)v89, (uint64_t)this);
          nitro::ndarray<float>::assign<unsigned char>(v40, &v82, v41, v42, v43, v44, v45);
          if (v93)
          {
            v94 = v93;
            operator delete(v93);
          }
          if (v91)
          {
            v92 = v91;
            operator delete(v91);
          }
          v23 = v90;
          if (!v90)
            goto LABEL_163;
          v46 = (unint64_t *)&v90->__shared_owners_;
          do
            v25 = __ldaxr(v46);
          while (__stlxr(v25 - 1, v46));
          break;
        case 0xB:
          v57 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)v89, (uint64_t)this);
          nitro::ndarray<half>::assign<unsigned char>(v57, &v82, v58);
          if (v93)
          {
            v94 = v93;
            operator delete(v93);
          }
          if (v91)
          {
            v92 = v91;
            operator delete(v91);
          }
          v23 = v90;
          if (!v90)
            goto LABEL_163;
          v59 = (unint64_t *)&v90->__shared_owners_;
          do
            v25 = __ldaxr(v59);
          while (__stlxr(v25 - 1, v59));
          break;
        default:
          printf("%d\n", *(_DWORD *)this);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>)::{lambda(void)#1}::operator()();
      }
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
LABEL_163:
      if (__p)
      {
        v87 = __p;
        operator delete(__p);
      }
      if (v84)
      {
        v85 = v84;
        operator delete(v84);
      }
      v64 = v83;
      if (v83)
      {
        v65 = (unint64_t *)&v83->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      if (v79)
      {
        v80 = v79;
        operator delete(v79);
      }
      if (v77)
      {
        v78 = v77;
        operator delete(v77);
      }
      v37 = v76;
      if (!v76)
        return this;
      v67 = (unint64_t *)&v76->__shared_owners_;
      do
        v39 = __ldaxr(v67);
      while (__stlxr(v39 - 1, v67));
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v75, (uint64_t)a2);
      v81 = &v88;
      nitro::ndarray<float>::ndarray(&v82, &v75);
      switch(*(_DWORD *)this)
      {
        case 3:
          v7 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)v89, (uint64_t)this);
          nitro::ndarray<int>::assign<float>(v7, &v82);
          if (v93)
          {
            v94 = v93;
            operator delete(v93);
          }
          if (v91)
          {
            v92 = v91;
            operator delete(v91);
          }
          v8 = v90;
          if (!v90)
            goto LABEL_71;
          v9 = (unint64_t *)&v90->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          break;
        case 5:
          v32 = (_QWORD *)nitro::ndarray<unsigned char>::ndarray((uint64_t)v89, (uint64_t)this);
          nitro::ndarray<unsigned char>::assign<float>(v32, &v82);
          if (v93)
          {
            v94 = v93;
            operator delete(v93);
          }
          if (v91)
          {
            v92 = v91;
            operator delete(v91);
          }
          v8 = v90;
          if (!v90)
            goto LABEL_71;
          v33 = (unint64_t *)&v90->__shared_owners_;
          do
            v10 = __ldaxr(v33);
          while (__stlxr(v10 - 1, v33));
          break;
        case 9:
          v26 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)v89, (uint64_t)this);
          nitro::ndarray<float>::assign<float>(v26, &v82);
          if (v93)
          {
            v94 = v93;
            operator delete(v93);
          }
          if (v91)
          {
            v92 = v91;
            operator delete(v91);
          }
          v8 = v90;
          if (!v90)
            goto LABEL_71;
          v27 = (unint64_t *)&v90->__shared_owners_;
          do
            v10 = __ldaxr(v27);
          while (__stlxr(v10 - 1, v27));
          break;
        case 0xB:
          v28 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)v89, (uint64_t)this);
          nitro::ndarray<half>::assign<float>(v28, &v82);
          if (v93)
          {
            v94 = v93;
            operator delete(v93);
          }
          if (v91)
          {
            v92 = v91;
            operator delete(v91);
          }
          v8 = v90;
          if (!v90)
            goto LABEL_71;
          v29 = (unint64_t *)&v90->__shared_owners_;
          do
            v10 = __ldaxr(v29);
          while (__stlxr(v10 - 1, v29));
          break;
        default:
          printf("%d\n", *(_DWORD *)this);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>)::{lambda(void)#1}::operator()();
      }
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_71:
      if (__p)
      {
        v87 = __p;
        operator delete(__p);
      }
      if (v84)
      {
        v85 = v84;
        operator delete(v84);
      }
      v34 = v83;
      if (v83)
      {
        v35 = (unint64_t *)&v83->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      if (v79)
      {
        v80 = v79;
        operator delete(v79);
      }
      if (v77)
      {
        v78 = v77;
        operator delete(v77);
      }
      v37 = v76;
      if (!v76)
        return this;
      v38 = (unint64_t *)&v76->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v75, (uint64_t)a2);
      v81 = &v88;
      nitro::ndarray<half>::ndarray(&v82, &v75);
      switch(*(_DWORD *)this)
      {
        case 3:
          v11 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)v89, (uint64_t)this);
          nitro::ndarray<int>::assign<half>(v11, &v82, v12, v13);
          if (v93)
          {
            v94 = v93;
            operator delete(v93);
          }
          if (v91)
          {
            v92 = v91;
            operator delete(v91);
          }
          v14 = v90;
          if (!v90)
            goto LABEL_121;
          v15 = (unint64_t *)&v90->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          break;
        case 5:
          v51 = (_QWORD *)nitro::ndarray<unsigned char>::ndarray((uint64_t)v89, (uint64_t)this);
          nitro::ndarray<unsigned char>::assign<half>(v51, &v82);
          if (v93)
          {
            v94 = v93;
            operator delete(v93);
          }
          if (v91)
          {
            v92 = v91;
            operator delete(v91);
          }
          v14 = v90;
          if (!v90)
            goto LABEL_121;
          v52 = (unint64_t *)&v90->__shared_owners_;
          do
            v16 = __ldaxr(v52);
          while (__stlxr(v16 - 1, v52));
          break;
        case 9:
          v30 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)v89, (uint64_t)this);
          nitro::ndarray<float>::assign<half>(v30, &v82);
          if (v93)
          {
            v94 = v93;
            operator delete(v93);
          }
          if (v91)
          {
            v92 = v91;
            operator delete(v91);
          }
          v14 = v90;
          if (!v90)
            goto LABEL_121;
          v31 = (unint64_t *)&v90->__shared_owners_;
          do
            v16 = __ldaxr(v31);
          while (__stlxr(v16 - 1, v31));
          break;
        case 0xB:
          v49 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)v89, (uint64_t)this);
          nitro::ndarray<half>::assign<half>(v49, &v82);
          if (v93)
          {
            v94 = v93;
            operator delete(v93);
          }
          if (v91)
          {
            v92 = v91;
            operator delete(v91);
          }
          v14 = v90;
          if (!v90)
            goto LABEL_121;
          v50 = (unint64_t *)&v90->__shared_owners_;
          do
            v16 = __ldaxr(v50);
          while (__stlxr(v16 - 1, v50));
          break;
        default:
          printf("%d\n", *(_DWORD *)this);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>)::{lambda(void)#1}::operator()();
      }
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
LABEL_121:
      if (__p)
      {
        v87 = __p;
        operator delete(__p);
      }
      if (v84)
      {
        v85 = v84;
        operator delete(v84);
      }
      v53 = v83;
      if (v83)
      {
        v54 = (unint64_t *)&v83->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      if (v79)
      {
        v80 = v79;
        operator delete(v79);
      }
      if (v77)
      {
        v78 = v77;
        operator delete(v77);
      }
      v37 = v76;
      if (!v76)
        return this;
      v56 = (unint64_t *)&v76->__shared_owners_;
      do
        v39 = __ldaxr(v56);
      while (__stlxr(v39 - 1, v56));
      break;
    default:
      nitro::ndarray_container::visit<nitro::ndarray_container const,nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0,(void *)0>(nitro::ndarray_container const &,nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0)::{lambda(void)#1}::operator()();
  }
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  return this;
}

void sub_19118C6AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  uint64_t v26;
  void *v27;
  _Unwind_Exception *v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;

  v27 = *(void **)(v26 - 80);
  if (v27)
  {
    *(_QWORD *)(v26 - 72) = v27;
    operator delete(v27);
  }
  nitro::ndarray_container::concat(v26 - 120);
  v28 = *(_Unwind_Exception **)(v26 - 48);
  if (__p)
  {
    operator delete(__p);
    v29 = a22;
    if (!a22)
    {
LABEL_5:
      v30 = a21;
      if (!a21)
        goto LABEL_13;
      goto LABEL_9;
    }
  }
  else
  {
    v29 = a22;
    if (!a22)
      goto LABEL_5;
  }
  operator delete(v29);
  v30 = a21;
  if (!a21)
    goto LABEL_13;
LABEL_9:
  p_shared_owners = (unint64_t *)&v30->__shared_owners_;
  do
    v32 = __ldaxr(p_shared_owners);
  while (__stlxr(v32 - 1, p_shared_owners));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
LABEL_13:
  if (a15)
  {
    operator delete(a15);
    v33 = a12;
    if (!a12)
    {
LABEL_15:
      v34 = a11;
      if (!a11)
        goto LABEL_23;
      goto LABEL_19;
    }
  }
  else
  {
    v33 = a12;
    if (!a12)
      goto LABEL_15;
  }
  operator delete(v33);
  v34 = a11;
  if (!a11)
    goto LABEL_23;
LABEL_19:
  v35 = (unint64_t *)&v34->__shared_owners_;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
LABEL_23:
  _Unwind_Resume(v28);
}

void nitro::ndarray_container::compact(nitro::ndarray_container *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  void *v29;
  void *v30;
  void *__p;
  void *v32;

  switch(*(_DWORD *)this)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v21, (uint64_t)this);
      nitro::ndarray<int>::compact(&v21, &v27);
      nitro::ndarray_container::ndarray_container<int,(void *)0>(a2, &v27);
      if (__p)
      {
        v32 = __p;
        operator delete(__p);
      }
      if (v29)
      {
        v30 = v29;
        operator delete(v29);
      }
      v3 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
      }
      if (v23)
      {
        v24 = v23;
        operator delete(v23);
      }
      v6 = v22;
      if (!v22)
        return;
      v7 = (unint64_t *)&v22->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v21, (uint64_t)this);
      nitro::ndarray<unsigned char>::compact(&v21, &v27);
      nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>(a2, &v27);
      if (__p)
      {
        v32 = __p;
        operator delete(__p);
      }
      if (v29)
      {
        v30 = v29;
        operator delete(v29);
      }
      v9 = v28;
      if (v28)
      {
        v10 = (unint64_t *)&v28->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
      }
      if (v23)
      {
        v24 = v23;
        operator delete(v23);
      }
      v6 = v22;
      if (!v22)
        return;
      v12 = (unint64_t *)&v22->__shared_owners_;
      do
        v8 = __ldaxr(v12);
      while (__stlxr(v8 - 1, v12));
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v21, (uint64_t)this);
      nitro::ndarray<float>::compact(&v21, &v27);
      nitro::ndarray_container::ndarray_container<float,(void *)0>(a2, &v27);
      if (__p)
      {
        v32 = __p;
        operator delete(__p);
      }
      if (v29)
      {
        v30 = v29;
        operator delete(v29);
      }
      v13 = v28;
      if (v28)
      {
        v14 = (unint64_t *)&v28->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
      }
      if (v23)
      {
        v24 = v23;
        operator delete(v23);
      }
      v6 = v22;
      if (!v22)
        return;
      v16 = (unint64_t *)&v22->__shared_owners_;
      do
        v8 = __ldaxr(v16);
      while (__stlxr(v8 - 1, v16));
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v21, (uint64_t)this);
      nitro::ndarray<half>::compact(&v21, &v27);
      nitro::ndarray_container::ndarray_container<half,(void *)0>(a2, &v27);
      if (__p)
      {
        v32 = __p;
        operator delete(__p);
      }
      if (v29)
      {
        v30 = v29;
        operator delete(v29);
      }
      v17 = v28;
      if (v28)
      {
        v18 = (unint64_t *)&v28->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
      }
      if (v23)
      {
        v24 = v23;
        operator delete(v23);
      }
      v6 = v22;
      if (!v22)
        return;
      v20 = (unint64_t *)&v22->__shared_owners_;
      do
        v8 = __ldaxr(v20);
      while (__stlxr(v8 - 1, v20));
      break;
    default:
      nitro::ndarray_container::visit<nitro::ndarray_container::compact(void)::$_0>(nitro::ndarray_container::compact(void)::$_0)const::{lambda(void)#1}::operator()();
  }
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void nitro::ndarray_container::canonicalize(nitro::ndarray_container *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  void *v29;
  void *v30;
  void *__p;
  void *v32;

  switch(*(_DWORD *)this)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v21, (uint64_t)this);
      nitro::ndarray<int>::canonicalize(&v21, &v27);
      nitro::ndarray_container::ndarray_container<int,(void *)0>(a2, &v27);
      if (__p)
      {
        v32 = __p;
        operator delete(__p);
      }
      if (v29)
      {
        v30 = v29;
        operator delete(v29);
      }
      v3 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
      }
      if (v23)
      {
        v24 = v23;
        operator delete(v23);
      }
      v6 = v22;
      if (!v22)
        return;
      v7 = (unint64_t *)&v22->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v21, (uint64_t)this);
      nitro::ndarray<unsigned char>::canonicalize(&v21, &v27);
      nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>(a2, &v27);
      if (__p)
      {
        v32 = __p;
        operator delete(__p);
      }
      if (v29)
      {
        v30 = v29;
        operator delete(v29);
      }
      v9 = v28;
      if (v28)
      {
        v10 = (unint64_t *)&v28->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
      }
      if (v23)
      {
        v24 = v23;
        operator delete(v23);
      }
      v6 = v22;
      if (!v22)
        return;
      v12 = (unint64_t *)&v22->__shared_owners_;
      do
        v8 = __ldaxr(v12);
      while (__stlxr(v8 - 1, v12));
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v21, (uint64_t)this);
      nitro::ndarray<float>::canonicalize(&v21, &v27);
      nitro::ndarray_container::ndarray_container<float,(void *)0>(a2, &v27);
      if (__p)
      {
        v32 = __p;
        operator delete(__p);
      }
      if (v29)
      {
        v30 = v29;
        operator delete(v29);
      }
      v13 = v28;
      if (v28)
      {
        v14 = (unint64_t *)&v28->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
      }
      if (v23)
      {
        v24 = v23;
        operator delete(v23);
      }
      v6 = v22;
      if (!v22)
        return;
      v16 = (unint64_t *)&v22->__shared_owners_;
      do
        v8 = __ldaxr(v16);
      while (__stlxr(v8 - 1, v16));
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v21, (uint64_t)this);
      nitro::ndarray<half>::canonicalize(&v21, &v27);
      nitro::ndarray_container::ndarray_container<half,(void *)0>(a2, &v27);
      if (__p)
      {
        v32 = __p;
        operator delete(__p);
      }
      if (v29)
      {
        v30 = v29;
        operator delete(v29);
      }
      v17 = v28;
      if (v28)
      {
        v18 = (unint64_t *)&v28->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
      }
      if (v23)
      {
        v24 = v23;
        operator delete(v23);
      }
      v6 = v22;
      if (!v22)
        return;
      v20 = (unint64_t *)&v22->__shared_owners_;
      do
        v8 = __ldaxr(v20);
      while (__stlxr(v8 - 1, v20));
      break;
    default:
      nitro::ndarray_container::visit<nitro::ndarray_container::canonicalize(void)::$_0>(nitro::ndarray_container::canonicalize(void)::$_0)const::{lambda(void)#1}::operator()();
  }
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void nitro::ndarray_container::load(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  void *__p;
  void *v40;
  std::__shared_weak_count *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  _DWORD v46[4];
  std::__shared_weak_count *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  unsigned __int8 v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;

  v52 = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(unsigned __int8 *)(v4 + v5);
    v52 = v6;
    *(_QWORD *)(a2 + 16) = v5 + 1;
  }
  else
  {
    std::istream::read();
    v6 = v52;
  }
  v7 = (char)v6;
  if (v6 > 0xB || (v8 = dword_191A8DCDC[(char)v6], v8 == (char)v6))
  {
    __p = 0;
    v40 = 0;
    v41 = 0;
    nitro::ndarray_container::init_from_shape((char)v6, (uint64_t **)&__p, (uint64_t)v46);
    if (__p)
    {
      v40 = __p;
      operator delete(__p);
    }
    switch(v46[0])
    {
      case 3:
        v9 = nitro::ndarray<int>::ndarray((uint64_t)&v53, (uint64_t)v46);
        nitro::ndarray<int>::load(v9, a2);
        nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)&__p, &v53);
        if (v57)
        {
          v58 = v57;
          operator delete(v57);
        }
        if (v55)
        {
          v56 = v55;
          operator delete(v55);
        }
        v10 = v54;
        if (!v54)
          goto LABEL_47;
        p_shared_owners = (unint64_t *)&v54->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        break;
      case 5:
        v18 = nitro::ndarray<unsigned char>::ndarray((uint64_t)&v53, (uint64_t)v46);
        nitro::ndarray<unsigned char>::load(v18, a2);
        nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)&__p, &v53);
        if (v57)
        {
          v58 = v57;
          operator delete(v57);
        }
        if (v55)
        {
          v56 = v55;
          operator delete(v55);
        }
        v10 = v54;
        if (!v54)
          goto LABEL_47;
        v19 = (unint64_t *)&v54->__shared_owners_;
        do
          v12 = __ldaxr(v19);
        while (__stlxr(v12 - 1, v19));
        break;
      case 9:
        v14 = nitro::ndarray<float>::ndarray((uint64_t)&v53, (uint64_t)v46);
        nitro::ndarray<float>::load(v14, a2);
        nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)&__p, &v53);
        if (v57)
        {
          v58 = v57;
          operator delete(v57);
        }
        if (v55)
        {
          v56 = v55;
          operator delete(v55);
        }
        v10 = v54;
        if (!v54)
          goto LABEL_47;
        v15 = (unint64_t *)&v54->__shared_owners_;
        do
          v12 = __ldaxr(v15);
        while (__stlxr(v12 - 1, v15));
        break;
      case 0xB:
        v16 = nitro::ndarray<half>::ndarray((uint64_t)&v53, (uint64_t)v46);
        nitro::ndarray<half>::load(v16, a2);
        nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)&__p, &v53);
        if (v57)
        {
          v58 = v57;
          operator delete(v57);
        }
        if (v55)
        {
          v56 = v55;
          operator delete(v55);
        }
        v10 = v54;
        if (!v54)
          goto LABEL_47;
        v17 = (unint64_t *)&v54->__shared_owners_;
        do
          v12 = __ldaxr(v17);
        while (__stlxr(v12 - 1, v17));
        break;
      default:
        printf("%d\n", v46[0]);
        nitro::ndarray_container::visit<nitro::ndarray_container::load(nitro::iarchive &)::$_0>(nitro::ndarray_container::load(nitro::iarchive &)::$_0)::{lambda(void)#1}::operator()();
    }
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
LABEL_47:
    nitro::ndarray_container::operator=(a1, (uint64_t)&__p);
    if (v44)
    {
      v45 = v44;
      operator delete(v44);
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    v20 = v41;
    if (v41)
    {
      v21 = (unint64_t *)&v41->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v50)
    {
      v51 = v50;
      operator delete(v50);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    v23 = v47;
    if (v47)
    {
      v24 = (unint64_t *)&v47->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
LABEL_159:
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
  else
  {
    __p = 0;
    v40 = 0;
    v41 = 0;
    nitro::ndarray_container::init_from_shape(v8, (uint64_t **)&__p, (uint64_t)v46);
    if (__p)
    {
      v40 = __p;
      operator delete(__p);
    }
    switch(v46[0])
    {
      case 3:
        v13 = nitro::ndarray<int>::ndarray((uint64_t)&v53, (uint64_t)v46);
        switch(v7)
        {
          case 0:
          case 1:
            nitro::ndarray<int>::load_cast_from<signed char>(v13, a2);
            break;
          case 2:
            nitro::ndarray<int>::load_cast_from<short>(v13, a2);
            break;
          case 3:
            nitro::ndarray<int>::load_cast_from<int>(v13, a2);
            break;
          case 4:
            nitro::ndarray<int>::load_cast_from<long long>(v13, a2);
            break;
          case 5:
            nitro::ndarray<int>::load_cast_from<unsigned char>(v13, a2);
            break;
          case 6:
            nitro::ndarray<int>::load_cast_from<unsigned short>(v13, a2);
            break;
          case 7:
            nitro::ndarray<int>::load_cast_from<unsigned int>(v13, a2);
            break;
          case 8:
            nitro::ndarray<int>::load_cast_from<unsigned long long>(v13, a2);
            break;
          case 9:
            nitro::ndarray<int>::load_cast_from<float>(v13, a2);
            break;
          case 10:
            nitro::ndarray<int>::load_cast_from<double>(v13, a2);
            break;
          case 11:
            nitro::ndarray<int>::load_cast_from<half>(v13, a2);
            break;
          default:
            break;
        }
        nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)&__p, &v53);
        if (v57)
        {
          v58 = v57;
          operator delete(v57);
        }
        if (v55)
        {
          v56 = v55;
          operator delete(v55);
        }
        v29 = v54;
        if (!v54)
          goto LABEL_143;
        v34 = (unint64_t *)&v54->__shared_owners_;
        do
          v31 = __ldaxr(v34);
        while (__stlxr(v31 - 1, v34));
        break;
      case 5:
        v28 = nitro::ndarray<unsigned char>::ndarray((uint64_t)&v53, (uint64_t)v46);
        switch(v7)
        {
          case 0:
          case 1:
            nitro::ndarray<unsigned char>::load_cast_from<signed char>(v28, a2);
            break;
          case 2:
            nitro::ndarray<unsigned char>::load_cast_from<short>(v28, a2);
            break;
          case 3:
            nitro::ndarray<unsigned char>::load_cast_from<int>(v28, a2);
            break;
          case 4:
            nitro::ndarray<unsigned char>::load_cast_from<long long>(v28, a2);
            break;
          case 5:
            nitro::ndarray<unsigned char>::load_cast_from<unsigned char>(v28, a2);
            break;
          case 6:
            nitro::ndarray<unsigned char>::load_cast_from<unsigned short>(v28, a2);
            break;
          case 7:
            nitro::ndarray<unsigned char>::load_cast_from<unsigned int>(v28, a2);
            break;
          case 8:
            nitro::ndarray<unsigned char>::load_cast_from<unsigned long long>(v28, a2);
            break;
          case 9:
            nitro::ndarray<unsigned char>::load_cast_from<float>(v28, a2);
            break;
          case 10:
            nitro::ndarray<unsigned char>::load_cast_from<double>(v28, a2);
            break;
          case 11:
            nitro::ndarray<unsigned char>::load_cast_from<half>(v28, a2);
            break;
          default:
            break;
        }
        nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)&__p, &v53);
        if (v57)
        {
          v58 = v57;
          operator delete(v57);
        }
        if (v55)
        {
          v56 = v55;
          operator delete(v55);
        }
        v29 = v54;
        if (!v54)
          goto LABEL_143;
        v33 = (unint64_t *)&v54->__shared_owners_;
        do
          v31 = __ldaxr(v33);
        while (__stlxr(v31 - 1, v33));
        break;
      case 9:
        v26 = nitro::ndarray<float>::ndarray((uint64_t)&v53, (uint64_t)v46);
        switch(v7)
        {
          case 0:
          case 1:
            nitro::ndarray<float>::load_cast_from<signed char>(v26, a2);
            break;
          case 2:
            nitro::ndarray<float>::load_cast_from<short>(v26, a2);
            break;
          case 3:
            nitro::ndarray<float>::load_cast_from<int>(v26, a2);
            break;
          case 4:
            nitro::ndarray<float>::load_cast_from<long long>(v26, a2);
            break;
          case 5:
            nitro::ndarray<float>::load_cast_from<unsigned char>(v26, a2);
            break;
          case 6:
            nitro::ndarray<float>::load_cast_from<unsigned short>(v26, a2);
            break;
          case 7:
            nitro::ndarray<float>::load_cast_from<unsigned int>(v26, a2);
            break;
          case 8:
            nitro::ndarray<float>::load_cast_from<unsigned long long>(v26, a2);
            break;
          case 9:
            nitro::ndarray<float>::load_cast_from<float>(v26, a2);
            break;
          case 10:
            nitro::ndarray<float>::load_cast_from<double>(v26, a2);
            break;
          case 11:
            nitro::ndarray<float>::load_cast_from<half>(v26, a2);
            break;
          default:
            break;
        }
        nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)&__p, &v53);
        if (v57)
        {
          v58 = v57;
          operator delete(v57);
        }
        if (v55)
        {
          v56 = v55;
          operator delete(v55);
        }
        v29 = v54;
        if (!v54)
          goto LABEL_143;
        v30 = (unint64_t *)&v54->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        break;
      case 0xB:
        v27 = nitro::ndarray<half>::ndarray((uint64_t)&v53, (uint64_t)v46);
        switch(v7)
        {
          case 0:
          case 1:
            nitro::ndarray<half>::load_cast_from<signed char>(v27, a2);
            break;
          case 2:
            nitro::ndarray<half>::load_cast_from<short>(v27, a2);
            break;
          case 3:
            nitro::ndarray<half>::load_cast_from<int>(v27, a2);
            break;
          case 4:
            nitro::ndarray<half>::load_cast_from<long long>(v27, a2);
            break;
          case 5:
            nitro::ndarray<half>::load_cast_from<unsigned char>(v27, a2);
            break;
          case 6:
            nitro::ndarray<half>::load_cast_from<unsigned short>(v27, a2);
            break;
          case 7:
            nitro::ndarray<half>::load_cast_from<unsigned int>(v27, a2);
            break;
          case 8:
            nitro::ndarray<half>::load_cast_from<unsigned long long>(v27, a2);
            break;
          case 9:
            nitro::ndarray<half>::load_cast_from<float>(v27, a2);
            break;
          case 10:
            nitro::ndarray<half>::load_cast_from<double>(v27, a2);
            break;
          case 11:
            nitro::ndarray<half>::load_cast_from<half>(v27, a2);
            break;
          default:
            break;
        }
        nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)&__p, &v53);
        if (v57)
        {
          v58 = v57;
          operator delete(v57);
        }
        if (v55)
        {
          v56 = v55;
          operator delete(v55);
        }
        v29 = v54;
        if (!v54)
          goto LABEL_143;
        v32 = (unint64_t *)&v54->__shared_owners_;
        do
          v31 = __ldaxr(v32);
        while (__stlxr(v31 - 1, v32));
        break;
      default:
        printf("%d\n", v46[0]);
        nitro::ndarray_container::visit<nitro::ndarray_container::load(nitro::iarchive &)::$_1>(nitro::ndarray_container::load(nitro::iarchive &)::$_1)::{lambda(void)#1}::operator()();
    }
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
LABEL_143:
    nitro::ndarray_container::operator=(a1, (uint64_t)&__p);
    if (v44)
    {
      v45 = v44;
      operator delete(v44);
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    v35 = v41;
    if (v41)
    {
      v36 = (unint64_t *)&v41->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    if (v50)
    {
      v51 = v50;
      operator delete(v50);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    v23 = v47;
    if (v47)
    {
      v38 = (unint64_t *)&v47->__shared_owners_;
      do
        v25 = __ldaxr(v38);
      while (__stlxr(v25 - 1, v38));
      goto LABEL_159;
    }
  }
}

void sub_19118E018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  nitro::ndarray<float>::~ndarray((_QWORD *)(v21 - 104));
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a21);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::cast_to_primitive(nitro::ndarray_container *a1@<X0>, int a2@<W1>, nitro::ndarray_container *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  file_logger *v14;
  file_logger *started;
  char *v16;
  _QWORD *v17;
  void **v18;
  uint64_t v19;
  file_logger *v20;
  file_logger *v21;
  char *v22;
  _QWORD *v23;
  void *locale;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32[8];
  __int128 v33;
  __int128 v34;
  int v35;
  uint64_t v36;
  std::locale v37;
  uint64_t v38;
  unsigned __int8 v39;

  if (a2 != 11)
  {
    if (a2 == 9)
    {
      if (*(_DWORD *)a1 != 9)
      {
        _ZNK5nitro17ndarray_container5visitIZNKS0_4castIfEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(a1, (uint64_t)a3);
        return;
      }
    }
    else
    {
      if (a2 != 3)
      {
        v3 = MEMORY[0x1E0DE4FE0];
        v4 = MEMORY[0x1E0DE4FE0] + 64;
        v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
        v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
        v36 = MEMORY[0x1E0DE4FE0] + 64;
        v31 = v5;
        *(uint64_t *)((char *)&v32[-1] + *(_QWORD *)(v5 - 24)) = v6;
        v7 = (std::ios_base *)((char *)&v32[-1] + *(_QWORD *)(v31 - 24));
        std::ios_base::init(v7, v32);
        v7[1].__vftable = 0;
        v7[1].__fmtflags_ = -1;
        v31 = v3 + 24;
        v36 = v4;
        std::streambuf::basic_streambuf();
        v32[0] = MEMORY[0x1E0DE4FB8] + 16;
        v33 = 0u;
        v34 = 0u;
        v35 = 16;
        v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"Check failed (", 14);
        v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", 96);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)":", 1);
        v10 = (_QWORD *)std::ostream::operator<<();
        v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"): ", 3);
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"false", 5);
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
        v13 = std::locale::use_facet(&v37, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale(&v37);
        std::ostream::put();
        std::ostream::flush();
        if (*((int *)global_logger() + 169) <= 6)
        {
          v14 = (file_logger *)global_logger();
          started = file_logger::start_stream(v14, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", "operator()", 517, 1);
          std::stringbuf::str();
          v16 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
          if (v16 && v16[280])
          {
            v17 = v16 + 16;
            if ((v30 & 0x80u) == 0)
              v18 = __p;
            else
              v18 = (void **)__p[0];
            if ((v30 & 0x80u) == 0)
              v19 = v30;
            else
              v19 = (uint64_t)__p[1];
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
          }
          if ((char)v30 < 0)
            operator delete(__p[0]);
        }
        __print_back_trace();
        if (*((int *)global_logger() + 169) <= 6)
        {
          v20 = (file_logger *)global_logger();
          v21 = file_logger::start_stream(v20, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", "operator()", 517, 1);
          std::stringbuf::str();
          v22 = (char *)pthread_getspecific(*((_QWORD *)v21 + 74));
          if (v22 && v22[280])
          {
            v23 = v22 + 16;
            if ((v39 & 0x80u) == 0)
              locale = &v37;
            else
              locale = v37.__locale_;
            if ((v39 & 0x80u) == 0)
              v25 = v39;
            else
              v25 = v38;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)locale, v25);
          }
          v26 = pthread_getspecific(*((_QWORD *)v21 + 74));
          if (v26)
          {
            if (*((_BYTE *)v26 + 280))
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26 + 2, (uint64_t)"\n", 1);
              file_logger::stream_flush(v21);
              if (*((_DWORD *)v21 + 150) == 7)
              {
                __print_back_trace();
                exception = __cxa_allocate_exception(8uLL);
                *exception = "LOG_FATAL encountered";
                __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
              }
            }
          }
          if ((char)v39 < 0)
            operator delete(v37.__locale_);
        }
        v27 = __cxa_allocate_exception(0x18uLL);
        std::stringbuf::str();
      }
      if (*(_DWORD *)a1 != 3)
      {
        _ZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(a1, (uint64_t)a3);
        return;
      }
    }
    goto LABEL_9;
  }
  if (*(_DWORD *)a1 == 11)
  {
LABEL_9:
    nitro::ndarray_container::ndarray_container(a3, a1);
    return;
  }
  _ZNK5nitro17ndarray_container5visitIZNKS0_4castIDhEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(a1, (uint64_t)a3);
}

void sub_19118E47C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;

  if (*(char *)(v33 - 65) < 0)
    operator delete(*(void **)(v33 - 88));
  a16 = *v31;
  *(uint64_t *)((char *)&a16 + *(_QWORD *)(a16 - 24)) = v31[3];
  a17 = v32 + 16;
  if (a30 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v30);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::slice(uint64_t a1@<X0>, __int128 **a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void *__p[2];
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v13 = 0uLL;
  v14 = 0;
  nitro::ndarray_impl::compute_slice(a2, (uint64_t *)(a1 + 24), (_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 72), &v6, a4);
  v13 = v6;
  v14 = v7;
  *(_OWORD *)__p = v8;
  v12 = v9;
  nitro::ndarray_container::ndarray_container(a3, (_QWORD *)(a1 + 8), *(_DWORD *)a1, (uint64_t)&v13, (uint64_t)__p, v10);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((_QWORD)v13)
  {
    *((_QWORD *)&v13 + 1) = v13;
    operator delete((void *)v13);
  }
}

void sub_19118E5DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;
  void *v20;

  if (__p)
  {
    operator delete(__p);
    v20 = *(void **)(v18 - 48);
    if (!v20)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v20 = *(void **)(v18 - 48);
    if (!v20)
      goto LABEL_3;
  }
  *(_QWORD *)(v18 - 40) = v20;
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray_container::transpose(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  const void *v6;
  int64_t v7;
  uint64_t *v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  void *__p[2];
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v19 = 0uLL;
  v20 = 0;
  v11 = 0;
  v12 = 0;
  v10 = 0;
  v6 = *(const void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v7 = v5 - *(_QWORD *)a2;
  if (v5 == *(_QWORD *)a2)
  {
    v8 = 0;
  }
  else
  {
    if (v7 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v8 = (uint64_t *)operator new(v5 - *(_QWORD *)a2);
    v10 = v8;
    v12 = &v8[v7 >> 3];
    memcpy(v8, v6, v7);
    v11 = v12;
  }
  nitro::ndarray_impl::compute_transpose(&v10, (const void **)(a1 + 24), a1 + 48, &v13);
  v19 = v13;
  v20 = v14;
  v13 = 0uLL;
  v9 = v15;
  v14 = 0;
  v15 = 0uLL;
  *(_OWORD *)__p = v9;
  v18 = v16;
  v16 = 0;
  if (v8)
  {
    v11 = v8;
    operator delete(v8);
  }
  nitro::ndarray_container::ndarray_container(a3, (_QWORD *)(a1 + 8), *(_DWORD *)a1, (uint64_t)&v19, (uint64_t)__p, *(_QWORD *)(a1 + 72));
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((_QWORD)v19)
  {
    *((_QWORD *)&v19 + 1) = v19;
    operator delete((void *)v19);
  }
}

void sub_19118E74C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  uint64_t v20;
  void *v22;

  if (__p)
    operator delete(__p);
  v22 = *(void **)(v20 - 80);
  if (v22)
  {
    *(_QWORD *)(v20 - 72) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray_container::squeeze(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v12 = 0uLL;
  v13 = 0;
  nitro::ndarray_impl::compute_squeeze((const void **)(a1 + 24), (const void **)(a1 + 48), *(_QWORD *)(a1 + 72), a2, &v5);
  v12 = v5;
  v13 = v6;
  *(_OWORD *)__p = v7;
  v11 = v8;
  nitro::ndarray_container::ndarray_container(a3, (_QWORD *)(a1 + 8), *(_DWORD *)a1, (uint64_t)&v12, (uint64_t)__p, v9);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((_QWORD)v12)
  {
    *((_QWORD *)&v12 + 1) = v12;
    operator delete((void *)v12);
  }
}

void sub_19118E83C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;
  void *v20;

  if (__p)
  {
    operator delete(__p);
    v20 = *(void **)(v18 - 48);
    if (!v20)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v20 = *(void **)(v18 - 48);
    if (!v20)
      goto LABEL_3;
  }
  *(_QWORD *)(v18 - 40) = v20;
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray_container::reshape(_DWORD *a1@<X0>, int64x2_t **a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *v31;
  void *v32;
  void *__p;
  void *v34;

  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v23, (uint64_t)a1);
      nitro::ndarray<int>::reshape(&v23, a2, &v29);
      nitro::ndarray_container::ndarray_container<int,(void *)0>(a3, &v29);
      if (__p)
      {
        v34 = __p;
        operator delete(__p);
      }
      if (v31)
      {
        v32 = v31;
        operator delete(v31);
      }
      v5 = v30;
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      if (v27)
      {
        v28 = v27;
        operator delete(v27);
      }
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
      }
      v8 = v24;
      if (!v24)
        return;
      v9 = (unint64_t *)&v24->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v23, (uint64_t)a1);
      nitro::ndarray<unsigned char>::reshape(&v23, a2, &v29);
      nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>(a3, &v29);
      if (__p)
      {
        v34 = __p;
        operator delete(__p);
      }
      if (v31)
      {
        v32 = v31;
        operator delete(v31);
      }
      v11 = v30;
      if (v30)
      {
        v12 = (unint64_t *)&v30->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      if (v27)
      {
        v28 = v27;
        operator delete(v27);
      }
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
      }
      v8 = v24;
      if (!v24)
        return;
      v14 = (unint64_t *)&v24->__shared_owners_;
      do
        v10 = __ldaxr(v14);
      while (__stlxr(v10 - 1, v14));
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v23, (uint64_t)a1);
      nitro::ndarray<float>::reshape(&v23, a2, &v29);
      nitro::ndarray_container::ndarray_container<float,(void *)0>(a3, &v29);
      if (__p)
      {
        v34 = __p;
        operator delete(__p);
      }
      if (v31)
      {
        v32 = v31;
        operator delete(v31);
      }
      v15 = v30;
      if (v30)
      {
        v16 = (unint64_t *)&v30->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      if (v27)
      {
        v28 = v27;
        operator delete(v27);
      }
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
      }
      v8 = v24;
      if (!v24)
        return;
      v18 = (unint64_t *)&v24->__shared_owners_;
      do
        v10 = __ldaxr(v18);
      while (__stlxr(v10 - 1, v18));
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v23, (uint64_t)a1);
      nitro::ndarray<half>::reshape(&v23, a2, &v29);
      nitro::ndarray_container::ndarray_container<half,(void *)0>(a3, &v29);
      if (__p)
      {
        v34 = __p;
        operator delete(__p);
      }
      if (v31)
      {
        v32 = v31;
        operator delete(v31);
      }
      v19 = v30;
      if (v30)
      {
        v20 = (unint64_t *)&v30->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      if (v27)
      {
        v28 = v27;
        operator delete(v27);
      }
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
      }
      v8 = v24;
      if (!v24)
        return;
      v22 = (unint64_t *)&v24->__shared_owners_;
      do
        v10 = __ldaxr(v22);
      while (__stlxr(v10 - 1, v22));
      break;
    default:
      nitro::ndarray_container::visit<nitro::ndarray_container::reshape(std::vector<long long> const&)::$_0>(nitro::ndarray_container::reshape(std::vector<long long> const&)::$_0)const::{lambda(void)#1}::operator()();
  }
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void nitro::impl::fill_shape_and_stride(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = a2[1];
  v8 = *a1;
  v7 = a1[1];
  if (v6 == *a2)
  {
    v10 = v7 - v8;
    if (v7 == v8)
    {
LABEL_13:
      a1[1] = v7;
      a2[1] = v6;
      *a3 = 0;
      return;
    }
    v11 = (v6 - *a2) >> 3;
    if (v10 >> 3 > v11)
    {
      std::vector<unsigned long long>::__append((uint64_t)a2, (v10 >> 3) - v11);
      v8 = *a1;
      v7 = a1[1];
      v6 = *a2;
      v10 = v7 - *a1;
    }
    *(_QWORD *)(v6 + (((v10 << 29) - 0x100000000) >> 29)) = 1;
    if ((int)((unint64_t)v10 >> 3) >= 2)
    {
      v12 = 8 * (((unint64_t)v10 >> 3) - 2);
      v13 = *(_QWORD *)(v12 + v6 + 8);
      do
      {
        v13 *= *(_QWORD *)(v8 + v12 + 8);
        *(_QWORD *)(v6 + v12) = v13;
        v12 -= 8;
      }
      while (v12 != -8);
    }
  }
  else
  {
    v6 = *a2;
  }
  v9 = v7 == v8;
  v7 = v8;
  if (v9)
    goto LABEL_13;
}

_QWORD *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJNS_6vectorImNS_9allocatorImEEEES6_EEC2B8ne180100IJLm0ELm1EEJS6_S6_EJEJEJRS6_S9_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSB_IJDpT2_EEEDpOT3_(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  char *v9;
  const void *v10;
  int64_t v11;
  char *v12;
  char *v13;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v6 = *(const void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v7 = v5 - *(_QWORD *)a2;
  if (v5 != *(_QWORD *)a2)
  {
    if (v7 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v5 - *(_QWORD *)a2);
    *a1 = v8;
    a1[1] = v8;
    v9 = &v8[8 * (v7 >> 3)];
    a1[2] = v9;
    memcpy(v8, v6, v7);
    a1[1] = v9;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v10 = *(const void **)a3;
  v11 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v11)
  {
    if (v11 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v12 = (char *)operator new(v11);
    a1[3] = v12;
    a1[4] = v12;
    v13 = &v12[8 * (v11 >> 3)];
    a1[5] = v13;
    memcpy(v12, v10, v11);
    a1[4] = v13;
  }
  return a1;
}

void sub_19118EF90(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_6vectorImNS_9allocatorImEEEES6_mEEC2B8ne180100IJLm0ELm1ELm2EEJS6_S6_mEJEJEJRKS6_SA_RmEEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSD_IJDpT2_EEEDpOT3_(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  const void *v8;
  int64_t v9;
  char *v10;
  char *v11;
  const void *v12;
  int64_t v13;
  char *v14;
  char *v15;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v8 = *(const void **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v9 = v7 - *(_QWORD *)a2;
  if (v7 != *(_QWORD *)a2)
  {
    if (v9 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)operator new(v7 - *(_QWORD *)a2);
    *a1 = v10;
    a1[1] = v10;
    v11 = &v10[8 * (v9 >> 3)];
    a1[2] = v11;
    memcpy(v10, v8, v9);
    a1[1] = v11;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v12 = *(const void **)a3;
  v13 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v13)
  {
    if (v13 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v14 = (char *)operator new(v13);
    a1[3] = v14;
    a1[4] = v14;
    v15 = &v14[8 * (v13 >> 3)];
    a1[5] = v15;
    memcpy(v14, v12, v13);
    a1[4] = v15;
  }
  a1[6] = *a4;
  return a1;
}

void sub_19118F0A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_6vectorImNS_9allocatorImEEEES6_mEEC2B8ne180100IJLm0ELm1ELm2EEJS6_S6_mEJEJEJRS6_S9_RmEEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSC_IJDpT2_EEEDpOT3_(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  const void *v8;
  int64_t v9;
  char *v10;
  char *v11;
  const void *v12;
  int64_t v13;
  char *v14;
  char *v15;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v8 = *(const void **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v9 = v7 - *(_QWORD *)a2;
  if (v7 != *(_QWORD *)a2)
  {
    if (v9 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)operator new(v7 - *(_QWORD *)a2);
    *a1 = v10;
    a1[1] = v10;
    v11 = &v10[8 * (v9 >> 3)];
    a1[2] = v11;
    memcpy(v10, v8, v9);
    a1[1] = v11;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v12 = *(const void **)a3;
  v13 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v13)
  {
    if (v13 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v14 = (char *)operator new(v13);
    a1[3] = v14;
    a1[4] = v14;
    v15 = &v14[8 * (v13 >> 3)];
    a1[5] = v15;
    memcpy(v14, v12, v13);
    a1[4] = v15;
  }
  a1[6] = *a4;
  return a1;
}

void sub_19118F1B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nitro::ndarray_container::ndarray_container(uint64_t a1, _QWORD *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  const void *v13;
  int64_t v14;
  char *v15;
  char *v16;
  const void *v17;
  int64_t v18;
  char *v19;
  char *v20;

  *(_DWORD *)a1 = a3;
  v9 = a2[1];
  *(_QWORD *)(a1 + 8) = *a2;
  *(_QWORD *)(a1 + 16) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v13 = *(const void **)a4;
  v12 = *(_QWORD *)(a4 + 8);
  v14 = v12 - *(_QWORD *)a4;
  if (v12 != *(_QWORD *)a4)
  {
    if (v14 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v15 = (char *)operator new(v12 - *(_QWORD *)a4);
    *(_QWORD *)(a1 + 24) = v15;
    *(_QWORD *)(a1 + 32) = v15;
    v16 = &v15[8 * (v14 >> 3)];
    *(_QWORD *)(a1 + 40) = v16;
    memcpy(v15, v13, v14);
    *(_QWORD *)(a1 + 32) = v16;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v17 = *(const void **)a5;
  v18 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v18)
  {
    if (v18 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v19 = (char *)operator new(v18);
    *(_QWORD *)(a1 + 48) = v19;
    *(_QWORD *)(a1 + 56) = v19;
    v20 = &v19[8 * (v18 >> 3)];
    *(_QWORD *)(a1 + 64) = v20;
    memcpy(v19, v17, v18);
    *(_QWORD *)(a1 + 56) = v20;
  }
  *(_QWORD *)(a1 + 72) = a6;
  return a1;
}

void sub_19118F2F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 56) = v6;
    operator delete(v6);
  }
  v7 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 32) = v7;
    operator delete(v7);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void std::__split_buffer<unsigned long>::push_back(char **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = a1[2];
  if (v4 != a1[3])
    goto LABEL_22;
  v5 = *a1;
  v6 = a1[1];
  if (v6 > *a1)
  {
    v7 = (v6 - *a1) >> 3;
    if (v7 >= -1)
      v8 = v7 + 1;
    else
      v8 = v7 + 2;
    v9 = v8 >> 1;
    v10 = -v9;
    v11 = &v6[-8 * v9];
    v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      v4 = a1[1];
    }
    v13 = &v4[8 * v10];
    v4 = &v11[v12];
    a1[1] = v13;
    goto LABEL_22;
  }
  v14 = (v4 - v5) >> 2;
  if (v4 == v5)
    v14 = 1;
  if (v14 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v15 = v14 >> 2;
  v16 = 8 * v14;
  v17 = (char *)operator new(8 * v14);
  v18 = &v17[8 * v15];
  v20 = v4 - v6;
  v19 = v4 == v6;
  v4 = v18;
  if (!v19)
  {
    v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        v31 = *(_QWORD *)v6;
        v6 += 8;
        *(_QWORD *)v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    v23 = &v17[8 * v15];
    v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20)
      goto LABEL_19;
    v24 = (v21 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v18[v25];
    v26 = &v6[v25];
    v27 = (__int128 *)(v6 + 16);
    v28 = v23 + 16;
    v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_19;
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    v4 = a1[2];
  }
LABEL_22:
  *(_QWORD *)v4 = *a2;
  a1[2] = v4 + 8;
}

uint64_t nitro::ndarray<double>::ndarray(uint64_t a1, uint64_t a2, char **a3, char **a4, uint64_t a5)
{
  char **v10;
  char **v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  std::__shared_weak_count *v27;
  void *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  void *__dst;
  std::__shared_weak_count *v66;

  *(_OWORD *)(a1 + 16) = 0u;
  v10 = (char **)(a1 + 16);
  v11 = (char **)(a1 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  __dst = 0;
  v66 = 0;
  v12 = operator new[]();
  std::shared_ptr<double>::reset[abi:ne180100]<double,std::default_delete<double []>,void>(&__dst, v12);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13 != *(_QWORD *)a2)
    memmove(__dst, *(const void **)a2, v13 - *(_QWORD *)a2);
  if (v10 != a3)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v10, *a3, a3[1], (a3[1] - *a3) >> 3);
  v14 = *(char **)(a1 + 16);
  v15 = *(char **)(a1 + 24);
  v16 = v15 - v14;
  if (v15 == v14)
  {
    v17 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3;
    v18 = v17 - a5;
    if (v17 != a5)
    {
      v19 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)v15 >= v19)
      {
        v21 = v16 >> 3;
        v22 = v19 - (_QWORD)v14;
        if (v22 >> 2 <= (unint64_t)((v16 >> 3) + 1))
          v23 = v21 + 1;
        else
          v23 = v22 >> 2;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v25 = (char *)operator new(8 * v24);
        v26 = &v25[8 * v21];
        *(_QWORD *)(a1 + 16) = v26;
        *(_QWORD *)v26 = v18;
        v20 = v26 + 8;
        *(_QWORD *)(a1 + 24) = v20;
        *(_QWORD *)(a1 + 32) = &v25[8 * v24];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *(_QWORD *)v15 = v18;
        v20 = v15 + 8;
      }
      *(_QWORD *)(a1 + 24) = v20;
    }
  }
  if (v11 != a4)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v11, *a4, a4[1], (a4[1] - *a4) >> 3);
  *(_QWORD *)(a1 + 64) = a5;
  v28 = __dst;
  v27 = v66;
  if (v66)
  {
    p_shared_owners = (unint64_t *)&v66->__shared_owners_;
    do
      v30 = __ldxr(p_shared_owners);
    while (__stxr(v30 + 1, p_shared_owners));
  }
  v31 = *(std::__shared_weak_count **)(a1 + 8);
  *(_QWORD *)a1 = v28;
  *(_QWORD *)(a1 + 8) = v27;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v35 = *(_QWORD *)(a1 + 40);
  v34 = *(_QWORD *)(a1 + 48);
  v37 = *(char **)(a1 + 16);
  v36 = *(char **)(a1 + 24);
  v38 = v34 - v35;
  if (v34 != v35)
  {
    v34 = *(_QWORD *)(a1 + 40);
    goto LABEL_31;
  }
  v40 = v36 - v37;
  if (v36 != v37)
  {
    v41 = v38 >> 3;
    if (v40 >> 3 > v41)
    {
      std::vector<unsigned long long>::__append((uint64_t)v11, (v40 >> 3) - v41);
      v37 = *(char **)(a1 + 16);
      v36 = *(char **)(a1 + 24);
      v34 = *(_QWORD *)(a1 + 40);
      v40 = v36 - v37;
    }
    *(_QWORD *)(v34 + (((v40 << 29) - 0x100000000) >> 29)) = 1;
    if ((int)((unint64_t)v40 >> 3) >= 2)
    {
      v42 = 8 * (((unint64_t)v40 >> 3) - 2);
      v43 = *(_QWORD *)(v42 + v34 + 8);
      do
      {
        v43 *= *(_QWORD *)&v37[v42 + 8];
        *(_QWORD *)(v34 + v42) = v43;
        v42 -= 8;
      }
      while (v42 != -8);
    }
LABEL_31:
    v39 = v36;
    v36 = v37;
    if (v39 != v37)
      goto LABEL_41;
  }
  *(_QWORD *)(a1 + 24) = v36;
  *(_QWORD *)(a1 + 48) = v34;
  v39 = v36;
  *(_QWORD *)(a1 + 64) = 0;
LABEL_41:
  v44 = *v10;
  if (v39 == *v10)
  {
    v48 = 0;
    goto LABEL_53;
  }
  v45 = (v39 - *v10) >> 3;
  if (v45 <= 1)
    v45 = 1;
  if (v45 >= 2)
  {
    v49 = 0;
    v50 = 0;
    v46 = v45 & 0xFFFFFFFFFFFFFFFELL;
    v51 = v44 + 8;
    v52 = (_QWORD *)(v34 + 8);
    v53 = v45 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v49 += *(v52 - 1) * (*(v51 - 1) - 1);
      v50 += *v52 * (*v51 - 1);
      v51 += 2;
      v52 += 2;
      v53 -= 2;
    }
    while (v53);
    v47 = v50 + v49;
    if (v45 == v46)
      goto LABEL_52;
  }
  else
  {
    v46 = 0;
    v47 = 0;
  }
  v54 = v45 - v46;
  v55 = 8 * v46;
  v56 = (uint64_t *)(v34 + v55);
  v57 = &v44[v55];
  do
  {
    v58 = *(_QWORD *)v57;
    v57 += 8;
    v59 = v58 - 1;
    v60 = *v56++;
    v47 += v60 * v59;
    --v54;
  }
  while (v54);
LABEL_52:
  v48 = v47 + 1;
LABEL_53:
  if (*(_QWORD *)(a1 + 64) + v48 > (unint64_t)((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3))
    nitro::ndarray<double>::ndarray(std::vector<double> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator()();
  v61 = v66;
  if (v66)
  {
    v62 = (unint64_t *)&v66->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  return a1;
}

void sub_19118F85C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  v7 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v3 + 48) = v7;
    operator delete(v7);
  }
  v8 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v3 + 24) = v8;
    operator delete(v8);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void nitro::ndarray<double>::ndarray(std::vector<double> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"last_index() + m_start <= elements.size()", 41);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 131, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::ndarray<double>::ndarray(std::vector<double> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19118FB04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<double>::ndarray(std::vector<double> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 131, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19118FCA8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19118FCBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19118FCB4);
}

void std::shared_ptr<unsigned char>::reset[abi:ne180100]<unsigned char,std::default_delete<unsigned char []>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E2DC38C8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  v5 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = v4;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_19118FD74(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (v1)
    MEMORY[0x19401CD78](v1, 0x1000C8077774924);
  __cxa_rethrow();
}

void sub_19118FD9C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<unsigned char  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<unsigned char  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x19401CD78);
  return result;
}

uint64_t std::__shared_ptr_pointer<unsigned char  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A929F6
    || ((v3 & 0x8000000191A929F6 & 0x8000000000000000) != 0) != __OFSUB__(v3, 0x8000000191A929F6)
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A929F6 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *nitro::ndarray<unsigned char>::ndarray(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  const void *v12;
  int64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  const void *v17;
  int64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v8 = a2[1];
  *a1 = *a2;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  v12 = *(const void **)a3;
  v11 = *(_QWORD *)(a3 + 8);
  v13 = v11 - *(_QWORD *)a3;
  if (v11 == *(_QWORD *)a3)
  {
    v14 = 0;
    v15 = 0;
  }
  else
  {
    if (v13 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v14 = (char *)operator new(v11 - *(_QWORD *)a3);
    a1[2] = v14;
    a1[3] = v14;
    v15 = &v14[8 * (v13 >> 3)];
    a1[4] = v15;
    memcpy(v14, v12, v13);
    a1[3] = v15;
  }
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  v17 = *(const void **)a4;
  v16 = *(_QWORD *)(a4 + 8);
  v18 = v16 - *(_QWORD *)a4;
  if (v16 == *(_QWORD *)a4)
  {
    a1[8] = a5;
    v21 = v15 - v14;
    if (v15 == v14)
    {
      v19 = 0;
LABEL_17:
      a1[3] = v14;
      a1[6] = v19;
      a1[8] = 0;
      return a1;
    }
    if (v21)
    {
      std::vector<unsigned long long>::__append((uint64_t)(a1 + 5), v21 >> 3);
      v14 = (char *)a1[2];
      v15 = (char *)a1[3];
      v19 = (char *)a1[5];
      v21 = v15 - v14;
    }
    else
    {
      v19 = 0;
    }
    *(_QWORD *)&v19[((v21 << 29) - 0x100000000) >> 29] = 1;
    if ((int)((unint64_t)v21 >> 3) >= 2)
    {
      v23 = 8 * (((unint64_t)v21 >> 3) - 2);
      v24 = *(_QWORD *)&v19[v23 + 8];
      do
      {
        v24 *= *(_QWORD *)&v14[v23 + 8];
        *(_QWORD *)&v19[v23] = v24;
        v23 -= 8;
      }
      while (v23 != -8);
    }
  }
  else
  {
    if (v18 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v19 = (char *)operator new(v16 - *(_QWORD *)a4);
    a1[5] = v19;
    a1[6] = v19;
    v20 = &v19[8 * (v18 >> 3)];
    a1[7] = v20;
    memcpy(v19, v17, v18);
    a1[6] = v20;
    a1[8] = a5;
  }
  if (v15 == v14)
    goto LABEL_17;
  return a1;
}

void sub_19119001C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 48) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v6;
    operator delete(v6);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;

  *(_DWORD *)a1 = 5;
  v4 = a2[1];
  *(_QWORD *)(a1 + 8) = *a2;
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v8 = (_BYTE *)a2[2];
  v7 = (_BYTE *)a2[3];
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)operator new(v7 - v8);
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v10;
    v11 = &v10[8 * (v9 >> 3)];
    *(_QWORD *)(a1 + 40) = v11;
    memcpy(v10, v8, v9);
    *(_QWORD *)(a1 + 32) = v11;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v13 = (_BYTE *)a2[5];
  v12 = (_BYTE *)a2[6];
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v15 = (char *)operator new(v12 - v13);
    *(_QWORD *)(a1 + 48) = v15;
    *(_QWORD *)(a1 + 56) = v15;
    v16 = &v15[8 * (v14 >> 3)];
    *(_QWORD *)(a1 + 64) = v16;
    memcpy(v15, v13, v14);
    *(_QWORD *)(a1 + 56) = v16;
  }
  *(_QWORD *)(a1 + 72) = a2[8];
  return a1;
}

void sub_191190170(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 56) = v6;
    operator delete(v6);
  }
  v7 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 32) = v7;
    operator delete(v7);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void std::shared_ptr<int>::reset[abi:ne180100]<int,std::default_delete<int []>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E2DC3900;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  v5 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = v4;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_191190248(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (v1)
    MEMORY[0x19401CD78](v1, 0x1000C8052888210);
  __cxa_rethrow();
}

void sub_191190270(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<int  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<int  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x19401CD78);
  return result;
}

uint64_t std::__shared_ptr_pointer<int  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A8DC4CLL
    || ((v3 & 0x8000000191A8DC4CLL & 0x8000000000000000) != 0) != __OFSUB__(v3, 0x8000000191A8DC4CLL)
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A8DC4CLL & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *nitro::ndarray<int>::ndarray(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  const void *v12;
  int64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  const void *v17;
  int64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v8 = a2[1];
  *a1 = *a2;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  v12 = *(const void **)a3;
  v11 = *(_QWORD *)(a3 + 8);
  v13 = v11 - *(_QWORD *)a3;
  if (v11 == *(_QWORD *)a3)
  {
    v14 = 0;
    v15 = 0;
  }
  else
  {
    if (v13 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v14 = (char *)operator new(v11 - *(_QWORD *)a3);
    a1[2] = v14;
    a1[3] = v14;
    v15 = &v14[8 * (v13 >> 3)];
    a1[4] = v15;
    memcpy(v14, v12, v13);
    a1[3] = v15;
  }
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  v17 = *(const void **)a4;
  v16 = *(_QWORD *)(a4 + 8);
  v18 = v16 - *(_QWORD *)a4;
  if (v16 == *(_QWORD *)a4)
  {
    a1[8] = a5;
    v21 = v15 - v14;
    if (v15 == v14)
    {
      v19 = 0;
LABEL_17:
      a1[3] = v14;
      a1[6] = v19;
      a1[8] = 0;
      return a1;
    }
    if (v21)
    {
      std::vector<unsigned long long>::__append((uint64_t)(a1 + 5), v21 >> 3);
      v14 = (char *)a1[2];
      v15 = (char *)a1[3];
      v19 = (char *)a1[5];
      v21 = v15 - v14;
    }
    else
    {
      v19 = 0;
    }
    *(_QWORD *)&v19[((v21 << 29) - 0x100000000) >> 29] = 1;
    if ((int)((unint64_t)v21 >> 3) >= 2)
    {
      v23 = 8 * (((unint64_t)v21 >> 3) - 2);
      v24 = *(_QWORD *)&v19[v23 + 8];
      do
      {
        v24 *= *(_QWORD *)&v14[v23 + 8];
        *(_QWORD *)&v19[v23] = v24;
        v23 -= 8;
      }
      while (v23 != -8);
    }
  }
  else
  {
    if (v18 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v19 = (char *)operator new(v16 - *(_QWORD *)a4);
    a1[5] = v19;
    a1[6] = v19;
    v20 = &v19[8 * (v18 >> 3)];
    a1[7] = v20;
    memcpy(v19, v17, v18);
    a1[6] = v20;
    a1[8] = a5;
  }
  if (v15 == v14)
    goto LABEL_17;
  return a1;
}

void sub_1911904F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 48) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v6;
    operator delete(v6);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t nitro::ndarray_container::ndarray_container<int,(void *)0>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;

  *(_DWORD *)a1 = 3;
  v4 = a2[1];
  *(_QWORD *)(a1 + 8) = *a2;
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v8 = (_BYTE *)a2[2];
  v7 = (_BYTE *)a2[3];
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)operator new(v7 - v8);
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v10;
    v11 = &v10[8 * (v9 >> 3)];
    *(_QWORD *)(a1 + 40) = v11;
    memcpy(v10, v8, v9);
    *(_QWORD *)(a1 + 32) = v11;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v13 = (_BYTE *)a2[5];
  v12 = (_BYTE *)a2[6];
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v15 = (char *)operator new(v12 - v13);
    *(_QWORD *)(a1 + 48) = v15;
    *(_QWORD *)(a1 + 56) = v15;
    v16 = &v15[8 * (v14 >> 3)];
    *(_QWORD *)(a1 + 64) = v16;
    memcpy(v15, v13, v14);
    *(_QWORD *)(a1 + 56) = v16;
  }
  *(_QWORD *)(a1 + 72) = a2[8];
  return a1;
}

void sub_191190644(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 56) = v6;
    operator delete(v6);
  }
  v7 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 32) = v7;
    operator delete(v7);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void std::shared_ptr<half>::reset[abi:ne180100]<half,std::default_delete<half []>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E2DC2B70;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  v5 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = v4;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_19119071C(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (v1)
    MEMORY[0x19401CD78](v1, 0x1000C80BDFB0063);
  __cxa_rethrow();
}

void sub_191190744(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<half  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_pointer<half  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x19401CD78);
  return result;
}

uint64_t std::__shared_ptr_pointer<half  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A8DCBALL
    || ((v3 & 0x8000000191A8DCBALL & 0x8000000000000000) != 0) != __OFSUB__(v3, 0x8000000191A8DCBALL)
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A8DCBALL & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *nitro::ndarray<half>::ndarray(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  const void *v12;
  int64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  const void *v17;
  int64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v8 = a2[1];
  *a1 = *a2;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  v12 = *(const void **)a3;
  v11 = *(_QWORD *)(a3 + 8);
  v13 = v11 - *(_QWORD *)a3;
  if (v11 == *(_QWORD *)a3)
  {
    v14 = 0;
    v15 = 0;
  }
  else
  {
    if (v13 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v14 = (char *)operator new(v11 - *(_QWORD *)a3);
    a1[2] = v14;
    a1[3] = v14;
    v15 = &v14[8 * (v13 >> 3)];
    a1[4] = v15;
    memcpy(v14, v12, v13);
    a1[3] = v15;
  }
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  v17 = *(const void **)a4;
  v16 = *(_QWORD *)(a4 + 8);
  v18 = v16 - *(_QWORD *)a4;
  if (v16 == *(_QWORD *)a4)
  {
    a1[8] = a5;
    v21 = v15 - v14;
    if (v15 == v14)
    {
      v19 = 0;
LABEL_17:
      a1[3] = v14;
      a1[6] = v19;
      a1[8] = 0;
      return a1;
    }
    if (v21)
    {
      std::vector<unsigned long long>::__append((uint64_t)(a1 + 5), v21 >> 3);
      v14 = (char *)a1[2];
      v15 = (char *)a1[3];
      v19 = (char *)a1[5];
      v21 = v15 - v14;
    }
    else
    {
      v19 = 0;
    }
    *(_QWORD *)&v19[((v21 << 29) - 0x100000000) >> 29] = 1;
    if ((int)((unint64_t)v21 >> 3) >= 2)
    {
      v23 = 8 * (((unint64_t)v21 >> 3) - 2);
      v24 = *(_QWORD *)&v19[v23 + 8];
      do
      {
        v24 *= *(_QWORD *)&v14[v23 + 8];
        *(_QWORD *)&v19[v23] = v24;
        v23 -= 8;
      }
      while (v23 != -8);
    }
  }
  else
  {
    if (v18 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v19 = (char *)operator new(v16 - *(_QWORD *)a4);
    a1[5] = v19;
    a1[6] = v19;
    v20 = &v19[8 * (v18 >> 3)];
    a1[7] = v20;
    memcpy(v19, v17, v18);
    a1[6] = v20;
    a1[8] = a5;
  }
  if (v15 == v14)
    goto LABEL_17;
  return a1;
}

void sub_1911909C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 48) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v6;
    operator delete(v6);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t nitro::ndarray_container::ndarray_container<half,(void *)0>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;

  *(_DWORD *)a1 = 11;
  v4 = a2[1];
  *(_QWORD *)(a1 + 8) = *a2;
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v8 = (_BYTE *)a2[2];
  v7 = (_BYTE *)a2[3];
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)operator new(v7 - v8);
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v10;
    v11 = &v10[8 * (v9 >> 3)];
    *(_QWORD *)(a1 + 40) = v11;
    memcpy(v10, v8, v9);
    *(_QWORD *)(a1 + 32) = v11;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v13 = (_BYTE *)a2[5];
  v12 = (_BYTE *)a2[6];
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v15 = (char *)operator new(v12 - v13);
    *(_QWORD *)(a1 + 48) = v15;
    *(_QWORD *)(a1 + 56) = v15;
    v16 = &v15[8 * (v14 >> 3)];
    *(_QWORD *)(a1 + 64) = v16;
    memcpy(v15, v13, v14);
    *(_QWORD *)(a1 + 56) = v16;
  }
  *(_QWORD *)(a1 + 72) = a2[8];
  return a1;
}

void sub_191190B18(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 56) = v6;
    operator delete(v6);
  }
  v7 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 32) = v7;
    operator delete(v7);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::ndarray_container::is_contiguous(void)::$_0>(nitro::ndarray_container::is_contiguous(void)::$_0)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_191190E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_191190ED0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::ndarray_container::concat(std::vector<nitro::ndarray_container> const&,unsigned long)::$_0>(nitro::ndarray_container::concat(std::vector<nitro::ndarray_container> const&,unsigned long)::$_0)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19119120C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_191191274(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::concat(uint64_t *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t *v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  __n128 v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64x2_t *v63;
  int64x2_t v64;
  uint64x2_t v65;
  unint64_t v66;
  int64x2_t v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  size_t v75;
  char *v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t *v89;
  std::__shared_weak_count *v90;
  unint64_t *p_shared_owners;
  unint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  std::__shared_weak_count *v108;
  int64_t v109;
  uint64_t v110;
  unint64_t v111;
  int64_t v112;
  unint64_t v113;
  unint64_t v114;
  _BYTE *v115;
  uint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  uint64_t shared_weak_owners;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _OWORD *v123;
  uint64_t *v124;
  uint64_t v125;
  __int128 v126;
  char *v127;
  char *v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  size_t v138;
  uint64_t *v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  unint64_t v146;
  char *v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t *v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  _QWORD *v162;
  size_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  size_t v167;
  uint64_t v168;
  void *p_p;
  std::__shared_weak_count *v171;
  void *v172;
  void *v173;
  void *v174;
  void *v175;
  void *__p;
  char *v177;
  char *v178;
  void *v179;
  _BYTE *v180;
  char *v181;
  unint64_t v182;
  _QWORD v183[2];

  v3 = *a1;
  v4 = a1[1];
  v5 = 0x8E38E38E38E38E39 * ((v4 - *a1) >> 3);
  if (v5 == 1)
  {
    nitro::ndarray<unsigned char>::copy(*a1, a3);
    return;
  }
  if (!v5)
  {
    p_p = 0;
    v171 = 0;
    v172 = 0;
    v179 = 0;
    v180 = 0;
    v181 = 0;
    __p = 0;
    v177 = 0;
    v178 = 0;
    nitro::ndarray<unsigned char>::ndarray((uint64_t)a3, (uint64_t)&p_p, (char **)&v179, (char **)&__p, 0);
    if (__p)
    {
      v177 = (char *)__p;
      operator delete(__p);
    }
    if (v179)
    {
      v180 = v179;
      operator delete(v179);
    }
    v6 = p_p;
    if (p_p)
    {
      v171 = (std::__shared_weak_count *)p_p;
      goto LABEL_202;
    }
    return;
  }
  v8 = a1;
  v180 = 0;
  v181 = 0;
  v179 = 0;
  v10 = *(_BYTE **)(v3 + 16);
  v9 = *(_BYTE **)(v3 + 24);
  v11 = v9 - v10;
  if (v9 == v10)
  {
    v13 = 0;
    v12 = 0;
  }
  else
  {
    if (v11 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v12 = (char *)operator new(v9 - v10);
    v13 = &v12[8 * (v11 >> 3)];
    v179 = v12;
    v181 = v13;
    memcpy(v12, v10, v11);
    v180 = v13;
  }
  *(_QWORD *)&v12[8 * a2] = 0;
  if (v3 != v4)
  {
    v14 = v13;
    do
    {
      __p = (void *)((uint64_t)(*(_QWORD *)(v3 + 24) - *(_QWORD *)(v3 + 16)) >> 3);
      v183[0] = (v14 - v12) >> 3;
      if (__p != (void *)v183[0])
      {
        p_p = &__p;
        v171 = (std::__shared_weak_count *)v183;
        nitro::ndarray<unsigned char>::concat(std::vector<nitro::ndarray<unsigned char>> const&,unsigned long)::{lambda(void)#1}::operator()();
      }
      if (v14 == v12)
      {
        v14 = v12;
      }
      else
      {
        v15 = 0;
        do
        {
          if (a2 == v15)
          {
            *(_QWORD *)&v12[8 * a2] += *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * a2);
          }
          else
          {
            __p = 0;
            __p = *(void **)(*(_QWORD *)(v3 + 16) + 8 * v15);
            v183[0] = 0;
            v183[0] = *(_QWORD *)&v12[8 * v15];
            if (__p != (void *)v183[0])
            {
              p_p = &__p;
              v171 = (std::__shared_weak_count *)v183;
              nitro::ndarray<unsigned char>::concat(std::vector<nitro::ndarray<unsigned char>> const&,unsigned long)::{lambda(void)#2}::operator()();
            }
          }
          ++v15;
          v14 = v13;
        }
        while (v15 < (v13 - v12) >> 3);
      }
      v3 += 72;
    }
    while (v3 != v4);
  }
  nitro::ndarray<unsigned char>::init_from_shape((uint64_t **)&v179, a3);
  v17 = (uint64_t *)*v8;
  v18 = (uint64_t *)v8[1];
  if ((uint64_t *)*v8 == v18)
  {
LABEL_63:
    v57 = 1;
    goto LABEL_65;
  }
  v19 = (uint64_t *)*v8;
  while (1)
  {
    v20 = (char *)v19[2];
    v21 = (char *)v19[3];
    v22 = v21 - v20;
    if (v21 == v20)
    {
      v25 = (unint64_t *)v19[5];
      goto LABEL_50;
    }
    v23 = *v19;
    if (*v19)
    {
      if ((unint64_t)(v22 - 8) < 8)
      {
        v23 = 1;
        v24 = (char *)v19[2];
        do
        {
LABEL_39:
          v31 = *(_QWORD *)v24;
          v24 += 8;
          v23 *= v31;
        }
        while (v24 != v21);
        goto LABEL_40;
      }
      v26 = ((unint64_t)(v22 - 8) >> 3) + 1;
      v24 = &v20[8 * (v26 & 0x3FFFFFFFFFFFFFFELL)];
      v27 = v20 + 8;
      v28 = v26 & 0x3FFFFFFFFFFFFFFELL;
      v29 = 1;
      v30 = 1;
      do
      {
        v29 *= *(v27 - 1);
        v30 *= *v27;
        v27 += 2;
        v28 -= 2;
      }
      while (v28);
      v23 = v30 * v29;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_39;
    }
LABEL_40:
    v32 = v22 >> 3;
    v25 = (unint64_t *)v19[5];
    if (v32 <= 1)
      v32 = 1;
    if (v32 < 2)
    {
      v33 = 0;
      v34 = 0;
LABEL_47:
      v40 = v32 - v33;
      v41 = 8 * v33;
      v42 = (uint64_t *)&v25[v33];
      v43 = (uint64_t *)&v20[v41];
      do
      {
        v44 = *v43++;
        v45 = v44 - 1;
        v46 = *v42++;
        v34 += v46 * v45;
        --v40;
      }
      while (v40);
      goto LABEL_49;
    }
    v35 = 0;
    v36 = 0;
    v33 = v32 & 0xFFFFFFFFFFFFFFFELL;
    v37 = v20 + 8;
    v38 = v25 + 1;
    v39 = v32 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v35 += *(v38 - 1) * (*(v37 - 1) - 1);
      v36 += *v38 * (*v37 - 1);
      v37 += 2;
      v38 += 2;
      v39 -= 2;
    }
    while (v39);
    v34 = v36 + v35;
    if (v32 != v33)
      goto LABEL_47;
LABEL_49:
    if (v23 != v34 + 1)
      break;
LABEL_50:
    v47 = v19[6] - (_QWORD)v25;
    if (v47)
    {
      if (!*v25)
        break;
      if ((unint64_t)v47 >= 0x10)
      {
        v48 = v47 >> 3;
        v49 = v48 <= 2 ? 2 : v48;
        v50 = v25[1];
        if (!v50 || *v25 < v50)
          break;
        v51 = 0;
        v52 = v49 - 2;
        do
        {
          v53 = v51;
          if (v52 == v51)
            break;
          v54 = &v25[v51];
          v55 = v54[2];
          if (!v55)
            break;
          v56 = v54[1];
          v51 = v53 + 1;
        }
        while (v56 >= v55);
        if (v53 + 2 < v48)
          break;
      }
    }
    v19 += 9;
    if (v19 == v18)
      goto LABEL_63;
  }
  v57 = 0;
LABEL_65:
  v58 = v180 - (_BYTE *)v179;
  if (v180 == v179)
  {
    if ((v57 & 1) != 0)
    {
      v61 = 0;
      goto LABEL_81;
    }
    v72 = 0;
    __p = 0;
    v177 = 0;
    v178 = 0;
    if (v17 == v18)
      goto LABEL_121;
LABEL_107:
    v86 = 0;
    do
    {
      v87 = *(_QWORD *)(v17[2] + 8 * a2);
      v88 = v87 + v86;
      v182 = v86;
      v183[0] = v87 + v86;
      if (v87 + v86 <= v86)
      {
        p_p = v183;
        v171 = (std::__shared_weak_count *)&v182;
        nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long,unsigned long)::{lambda(void)#2}::operator()();
      }
      v89 = (unint64_t *)((char *)__p + 24 * a2);
      *v89 = v86;
      v89[1] = v88;
      v89[2] = 1;
      nitro::ndarray<unsigned char>::slice(a3, (__int128 **)&__p, &p_p, v16);
      nitro::ndarray<unsigned char>::assign<unsigned char>(&p_p, v17);
      if (v174)
      {
        v175 = v174;
        operator delete(v174);
      }
      if (v172)
      {
        v173 = v172;
        operator delete(v172);
      }
      v90 = v171;
      if (v171)
      {
        p_shared_owners = (unint64_t *)&v171->__shared_owners_;
        do
          v92 = __ldaxr(p_shared_owners);
        while (__stlxr(v92 - 1, p_shared_owners));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      v86 += *(_QWORD *)(v17[2] + 8 * a2);
      v17 += 9;
    }
    while (v17 != v18);
    v72 = (char *)__p;
    goto LABEL_121;
  }
  v59 = v58 >> 3;
  if ((unint64_t)(v58 >> 3) <= 1)
    v60 = 1;
  else
    v60 = v58 >> 3;
  if (v60 >= 4)
  {
    v62 = v60 & 0xFFFFFFFFFFFFFFFCLL;
    v63 = (uint64x2_t *)((char *)v179 + 16);
    v64 = 0uLL;
    v65 = (uint64x2_t)vdupq_n_s64(1uLL);
    v66 = v60 & 0xFFFFFFFFFFFFFFFCLL;
    v67 = 0uLL;
    do
    {
      v64 = vsubq_s64(v64, (int64x2_t)vcgtq_u64(v63[-1], v65));
      v67 = vsubq_s64(v67, (int64x2_t)vcgtq_u64(*v63, v65));
      v63 += 2;
      v66 -= 4;
    }
    while (v66);
    v61 = vaddvq_s64(vaddq_s64(v67, v64));
    if (v60 != v62)
      goto LABEL_76;
  }
  else
  {
    v61 = 0;
    v62 = 0;
LABEL_76:
    v68 = v60 - v62;
    v69 = (unint64_t *)((char *)v179 + 8 * v62);
    do
    {
      v70 = *v69++;
      if (v70 > 1)
        ++v61;
      --v68;
    }
    while (v68);
  }
  if ((v57 & 1) != 0)
  {
LABEL_81:
    if (a2 && v61 != 1)
    {
      p_p = 0;
      v171 = 0;
      v172 = 0;
      if (v18 == v17)
        goto LABEL_163;
      if ((0x8E38E38E38E38E39 * (v18 - v17)) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v71 = (std::__shared_weak_count *)operator new(0x71C71C71C71C71C8 * (v18 - v17));
      p_p = v71;
      v171 = v71;
      v172 = &v71[0x4BDA12F684BDA13 * (v18 - v17)];
      if (v17 == v18)
      {
LABEL_163:
        v128 = (char *)v17[2];
        v127 = (char *)v17[3];
        if (v127 == v128 || !*v17)
        {
          v130 = 0;
        }
        else
        {
          v129 = v127 - v128 - 8;
          if (v129 < 8)
          {
            v130 = 1;
            v131 = (char *)v17[2];
            goto LABEL_171;
          }
          v132 = (v129 >> 3) + 1;
          v131 = &v128[8 * (v132 & 0x3FFFFFFFFFFFFFFELL)];
          v133 = v128 + 8;
          v134 = 1;
          v135 = v132 & 0x3FFFFFFFFFFFFFFELL;
          v136 = 1;
          do
          {
            v134 *= *(v133 - 1);
            v136 *= *v133;
            v133 += 2;
            v135 -= 2;
          }
          while (v135);
          v130 = v136 * v134;
          if (v132 != (v132 & 0x3FFFFFFFFFFFFFFELL))
          {
            do
            {
LABEL_171:
              v137 = *(_QWORD *)v131;
              v131 += 8;
              v130 *= v137;
            }
            while (v131 != v127);
          }
        }
        v138 = *(_QWORD *)p_p;
        v139 = (uint64_t *)v8[1];
        v140 = v130 / *(_QWORD *)p_p;
        v141 = 0;
        if (v139 == v17)
        {
          v154 = 0x8E38E38E38E38E39 * (v139 - v17);
          __p = 0;
          v177 = 0;
          v178 = 0;
          v139 = v17;
          goto LABEL_191;
        }
        while (2)
        {
          v183[0] = 0;
          v142 = &v17[9 * v141];
          v144 = (char *)v142[2];
          v143 = (char *)v142[3];
          if (v143 == v144)
          {
            v145 = 0;
          }
          else
          {
            v145 = v17[9 * v141];
            if (v145)
            {
              v146 = v143 - v144 - 8;
              if (v146 < 8)
              {
                v145 = 1;
                v147 = v144;
                goto LABEL_181;
              }
              v148 = (v146 >> 3) + 1;
              v147 = &v144[8 * (v148 & 0x3FFFFFFFFFFFFFFELL)];
              v149 = v144 + 8;
              v150 = v148 & 0x3FFFFFFFFFFFFFFELL;
              v151 = 1;
              v152 = 1;
              do
              {
                v151 *= *(v149 - 1);
                v152 *= *v149;
                v149 += 2;
                v150 -= 2;
              }
              while (v150);
              v145 = v152 * v151;
              if (v148 != (v148 & 0x3FFFFFFFFFFFFFFELL))
              {
                do
                {
LABEL_181:
                  v153 = *(_QWORD *)v147;
                  v147 += 8;
                  v145 *= v153;
                }
                while (v147 != v143);
              }
            }
          }
          v182 = 0;
          v183[0] = v145;
          v182 = *((_QWORD *)p_p + v141) * v140;
          if (v145 != v182)
          {
            __p = v183;
            v177 = (char *)&v182;
            nitro::ndarray<unsigned char>::concat(std::vector<nitro::ndarray<unsigned char>> const&,unsigned long)::{lambda(void)#3}::operator()();
          }
          ++v141;
          v154 = 0x8E38E38E38E38E39 * (v139 - v17);
          if (v141 >= v154)
          {
            __p = 0;
            v177 = 0;
            v178 = 0;
            if (v139 == v17)
            {
              v141 = 0;
            }
            else
            {
              if (v154 >> 61)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v141 = (unint64_t)operator new(0x71C71C71C71C71C8 * (v139 - v17));
              v178 = (char *)(v141 + 0x71C71C71C71C71C8 * (v139 - v17));
              bzero((void *)v141, 0x71C71C71C71C71C8 * (v139 - v17));
            }
LABEL_191:
            if (v154)
            {
              v155 = v17 + 8;
              v156 = (_QWORD *)v141;
              do
              {
                v157 = *v155;
                v155 += 9;
                *v156++ = v157;
                --v154;
              }
              while (v154);
            }
            if (v138 <= v130)
            {
              v158 = 0;
              v159 = 0;
              if (v140 <= 1)
                v160 = 1;
              else
                v160 = v140;
              v161 = v139;
              v168 = v160;
              do
              {
                if (v161 == v17)
                {
                  v161 = v17;
                }
                else
                {
                  v162 = p_p;
                  if (*(_QWORD *)p_p)
                  {
                    memmove((void *)(*a3 + v159), (const void *)(*v17 + *(_QWORD *)v141), *(_QWORD *)p_p);
                    v162 = p_p;
                    v163 = *(_QWORD *)p_p;
                    v17 = (uint64_t *)*v8;
                    v139 = (uint64_t *)v8[1];
                  }
                  else
                  {
                    v163 = 0;
                  }
                  v159 += v163;
                  *(_QWORD *)v141 += v163;
                  if (0x8E38E38E38E38E39 * (v139 - v17) < 2)
                  {
                    v161 = v139;
                  }
                  else
                  {
                    v164 = 9;
                    v165 = 1;
                    do
                    {
                      v167 = v162[v165];
                      if (v167)
                      {
                        memmove((void *)(*a3 + v159), (const void *)(v17[v164] + *(_QWORD *)(v141 + 8 * v165)), v167);
                        v162 = p_p;
                        v166 = *((_QWORD *)p_p + v165);
                        v17 = (uint64_t *)*v8;
                        v139 = (uint64_t *)v8[1];
                      }
                      else
                      {
                        v166 = 0;
                      }
                      v159 += v166;
                      *(_QWORD *)(v141 + 8 * v165++) += v166;
                      v164 += 9;
                    }
                    while (v165 < 0x8E38E38E38E38E39 * (v139 - v17));
                    v161 = v139;
                    v160 = v168;
                  }
                }
                ++v158;
              }
              while (v158 != v160);
            }
            if (v141)
            {
              v177 = (char *)v141;
              operator delete((void *)v141);
            }
            v72 = (char *)p_p;
            if (p_p)
            {
              v171 = (std::__shared_weak_count *)p_p;
LABEL_199:
              operator delete(v72);
            }
            goto LABEL_200;
          }
          continue;
        }
      }
      while (2)
      {
        v94 = v17[2];
        v95 = (v17[3] - v94) >> 3;
        v96 = v95 - a2;
        if (v95 <= a2)
        {
          v98 = 1;
        }
        else
        {
          if (v96 < 2)
          {
            v97 = a2;
            v98 = 1;
            goto LABEL_134;
          }
          v97 = (v96 & 0xFFFFFFFFFFFFFFFELL) + a2;
          v99 = (_QWORD *)(v94 + 8 * a2 + 8);
          v100 = v96 & 0xFFFFFFFFFFFFFFFELL;
          v101 = 1;
          v102 = 1;
          do
          {
            v101 *= *(v99 - 1);
            v102 *= *v99;
            v99 += 2;
            v100 -= 2;
          }
          while (v100);
          v98 = v102 * v101;
          if (v96 != (v96 & 0xFFFFFFFFFFFFFFFELL))
          {
LABEL_134:
            v103 = v95 - v97;
            v104 = (uint64_t *)(v94 + 8 * v97);
            do
            {
              v105 = *v104++;
              v98 *= v105;
              --v103;
            }
            while (v103);
          }
        }
        if (v71 < v172)
        {
          v71->__vftable = (std::__shared_weak_count_vtbl *)v98;
          v93 = (std::__shared_weak_count *)&v71->__shared_owners_;
        }
        else
        {
          v106 = v8;
          v107 = v18;
          v108 = (std::__shared_weak_count *)p_p;
          v109 = (char *)v71 - (_BYTE *)p_p;
          v110 = ((char *)v71 - (_BYTE *)p_p) >> 3;
          v111 = v110 + 1;
          if ((unint64_t)(v110 + 1) >> 61)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v112 = (_BYTE *)v172 - (_BYTE *)p_p;
          if (((_BYTE *)v172 - (_BYTE *)p_p) >> 2 > v111)
            v111 = v112 >> 2;
          if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFF8)
            v113 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v113 = v111;
          if (v113)
          {
            if (v113 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v114 = v113;
            v115 = operator new(8 * v113);
            v113 = v114;
          }
          else
          {
            v115 = 0;
          }
          v116 = (uint64_t *)&v115[8 * v110];
          *v116 = v98;
          v93 = (std::__shared_weak_count *)(v116 + 1);
          if (v71 == v108)
          {
            v18 = v107;
            v8 = v106;
          }
          else
          {
            v117 = (char *)v71 - (char *)v108 - 8;
            if (v117 < 0x168
              || (v120 = ((char *)&v71[-1].__shared_weak_owners_ - (char *)v108) & 0xFFFFFFFFFFFFFFF8,
                  &v115[v109 - 8 - v120] > &v115[v109 - 8])
              || (uint64_t *)((char *)&v71[-1].__shared_weak_owners_ - v120) > &v71[-1].__shared_weak_owners_
              || (unint64_t)((char *)v71 - &v115[v109]) < 0x20)
            {
              v118 = v71;
              v18 = v107;
              v8 = v106;
            }
            else
            {
              v121 = (v117 >> 3) + 1;
              v122 = 8 * (v121 & 0x3FFFFFFFFFFFFFFCLL);
              v118 = (std::__shared_weak_count *)((char *)v71 - v122);
              v116 = (uint64_t *)((char *)v116 - v122);
              v123 = &v115[8 * v110 - 16];
              v124 = &v71[-1].__shared_owners_;
              v125 = v121 & 0x3FFFFFFFFFFFFFFCLL;
              v18 = v107;
              do
              {
                v126 = *(_OWORD *)v124;
                *(v123 - 1) = *((_OWORD *)v124 - 1);
                *v123 = v126;
                v123 -= 2;
                v124 -= 4;
                v125 -= 4;
              }
              while (v125);
              v8 = v106;
              if (v121 == (v121 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_153;
            }
            do
            {
              shared_weak_owners = v118[-1].__shared_weak_owners_;
              v118 = (std::__shared_weak_count *)((char *)v118 - 8);
              *--v116 = shared_weak_owners;
            }
            while (v118 != v108);
          }
LABEL_153:
          p_p = v116;
          v171 = v93;
          v172 = &v115[8 * v113];
          if (v108)
            operator delete(v108);
        }
        v171 = v93;
        v17 += 9;
        v71 = v93;
        if (v17 == v18)
        {
          v17 = (uint64_t *)*v8;
          goto LABEL_163;
        }
        continue;
      }
    }
    if (v17 == v18)
      goto LABEL_200;
    v74 = 0;
    while (2)
    {
      v77 = (char *)v17[2];
      v76 = (char *)v17[3];
      if (v76 == v77 || !*v17)
      {
        v75 = 0;
      }
      else
      {
        v78 = v76 - v77 - 8;
        if (v78 < 8)
        {
          v75 = 1;
          v79 = (char *)v17[2];
          goto LABEL_103;
        }
        v80 = (v78 >> 3) + 1;
        v79 = &v77[8 * (v80 & 0x3FFFFFFFFFFFFFFELL)];
        v81 = v77 + 8;
        v82 = v80 & 0x3FFFFFFFFFFFFFFELL;
        v83 = 1;
        v84 = 1;
        do
        {
          v83 *= *(v81 - 1);
          v84 *= *v81;
          v81 += 2;
          v82 -= 2;
        }
        while (v82);
        v75 = v84 * v83;
        if (v80 != (v80 & 0x3FFFFFFFFFFFFFFELL))
        {
          do
          {
LABEL_103:
            v85 = *(_QWORD *)v79;
            v79 += 8;
            v75 *= v85;
          }
          while (v79 != v76);
        }
        if (v75)
          memmove((void *)(*a3 + v74), (const void *)(*v17 + v17[8]), v75);
      }
      v74 += v75;
      v17 += 9;
      if (v17 == v18)
        goto LABEL_200;
      continue;
    }
  }
  __p = 0;
  v177 = 0;
  v178 = 0;
  if ((unint64_t)v58 >= 0x5555555555555551)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v72 = (char *)operator new(24 * v59);
  __p = v72;
  v178 = &v72[24 * v59];
  v73 = v72;
  do
  {
    *(_QWORD *)v73 = -1;
    *((_QWORD *)v73 + 1) = -1;
    *((_QWORD *)v73 + 2) = 1;
    v73 += 24;
  }
  while (v73 != &v72[24 * v59]);
  v177 = &v72[24 * v59];
  if (v17 != v18)
    goto LABEL_107;
LABEL_121:
  if (v72)
  {
    v177 = v72;
    goto LABEL_199;
  }
LABEL_200:
  v6 = v179;
  if (v179)
  {
    v180 = v179;
LABEL_202:
    operator delete(v6);
  }
}

void sub_191191FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  nitro::ndarray<float>::~ndarray(a10);
  if (a23)
    operator delete(a23);
  _Unwind_Resume(a1);
}

char *std::vector<nitro::ndarray<unsigned char>>::__push_back_slow_path<nitro::ndarray<unsigned char>>(int64x2_t *a1, __int128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char *v7;
  __int128 v8;
  __int128 v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int64x2_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;
  int64x2_t v25;
  uint64_t v26;
  int64x2_t *v27;

  v3 = 0x8E38E38E38E38E39 * ((a1->i64[1] - a1->i64[0]) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  if (0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v4)
    v4 = 0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  if (0x8E38E38E38E38E39 * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0x1C71C71C71C71C7)
    v5 = 0x38E38E38E38E38ELL;
  else
    v5 = v4;
  v26 = 0;
  v27 = a1 + 1;
  if (v5 > 0x38E38E38E38E38ELL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v7 = (char *)operator new(72 * v5);
  v8 = *a2;
  v9 = a2[1];
  v10 = &v7[72 * v3];
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *(_OWORD *)v10 = v8;
  *((_OWORD *)v10 + 1) = v9;
  *((_QWORD *)v10 + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 3) = 0;
  v11 = *(__int128 *)((char *)a2 + 40);
  v12 = *((_QWORD *)a2 + 7);
  v13 = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  v25.i64[1] = (uint64_t)v10;
  *(_OWORD *)(v10 + 40) = v11;
  *((_QWORD *)v10 + 7) = v12;
  *((_QWORD *)v10 + 8) = v13;
  v15 = a1->i64[0];
  v14 = a1->u64[1];
  if (v14 == a1->i64[0])
  {
    v19 = vdupq_n_s64(v14);
    v20 = &v7[72 * v3];
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v10[v16];
      v18 = v14 + v16;
      *(_OWORD *)(v17 - 72) = *(_OWORD *)(v14 + v16 - 72);
      *(_QWORD *)(v18 - 72) = 0;
      *(_QWORD *)(v18 - 64) = 0;
      *((_QWORD *)v17 - 7) = 0;
      *((_QWORD *)v17 - 6) = 0;
      *((_QWORD *)v17 - 5) = 0;
      *(_OWORD *)(v17 - 56) = *(_OWORD *)(v14 + v16 - 56);
      *((_QWORD *)v17 - 5) = *(_QWORD *)(v14 + v16 - 40);
      *(_QWORD *)(v18 - 56) = 0;
      *(_QWORD *)(v18 - 48) = 0;
      *(_QWORD *)(v18 - 40) = 0;
      *((_QWORD *)v17 - 4) = 0;
      *((_QWORD *)v17 - 3) = 0;
      *((_QWORD *)v17 - 2) = 0;
      *((_OWORD *)v17 - 2) = *(_OWORD *)(v14 + v16 - 32);
      *((_QWORD *)v17 - 2) = *(_QWORD *)(v14 + v16 - 16);
      *(_QWORD *)(v18 - 32) = 0;
      *(_QWORD *)(v18 - 24) = 0;
      *(_QWORD *)(v18 - 16) = 0;
      *((_QWORD *)v17 - 1) = *(_QWORD *)(v14 + v16 - 8);
      v16 -= 72;
    }
    while (v14 + v16 != v15);
    v19 = *a1;
    v20 = &v10[v16];
  }
  v21 = v10 + 72;
  a1->i64[0] = (uint64_t)v20;
  a1->i64[1] = (uint64_t)(v10 + 72);
  v25 = v19;
  v22 = a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)&v7[72 * v5];
  v26 = v22;
  v24 = v19.i64[0];
  std::__split_buffer<nitro::ndarray<float>>::~__split_buffer((uint64_t)&v24);
  return v21;
}

void _ZNK5nitro17ndarray_container5visitIZNKS0_4castIhEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  void *v23[3];
  void *v24;
  void *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  void *v28[3];
  void *v29;
  void *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  void *v33[3];
  void *__p;
  void *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t *v38[3];
  void *v39;
  void *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;

  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v31, (uint64_t)a1);
      nitro::ndarray<unsigned char>::init_from_shape((uint64_t **)v33, &v41);
      _ZN5nitro7ndarrayIhE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clINS0_IiEEEEDaS5_EUlRhRKiE_EEvRKNS0_IS5_EET0_(&v41, &v31);
      nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>(a2, &v41);
      if (v45)
      {
        v46 = v45;
        operator delete(v45);
      }
      if (v43)
      {
        v44 = v43;
        operator delete(v43);
      }
      v3 = v42;
      if (v42)
      {
        p_shared_owners = (unint64_t *)&v42->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      if (__p)
      {
        v35 = __p;
        operator delete(__p);
      }
      if (v33[0])
      {
        v33[1] = v33[0];
        operator delete(v33[0]);
      }
      v6 = v32;
      if (!v32)
        return;
      v7 = (unint64_t *)&v32->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v36, (uint64_t)a1);
      nitro::ndarray<unsigned char>::init_from_shape(v38, &v41);
      _ZN5nitro7ndarrayIhE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clIS1_EEDaS5_EUlRhRKhE_EEvRKNS0_IS5_EET0_(&v41, &v36);
      nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>(a2, &v41);
      if (v45)
      {
        v46 = v45;
        operator delete(v45);
      }
      if (v43)
      {
        v44 = v43;
        operator delete(v43);
      }
      v13 = v42;
      if (v42)
      {
        v14 = (unint64_t *)&v42->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if (v39)
      {
        v40 = v39;
        operator delete(v39);
      }
      if (v38[0])
      {
        v38[1] = v38[0];
        operator delete(v38[0]);
      }
      v6 = v37;
      if (!v37)
        return;
      v16 = (unint64_t *)&v37->__shared_owners_;
      do
        v8 = __ldaxr(v16);
      while (__stlxr(v8 - 1, v16));
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v21, (uint64_t)a1);
      nitro::ndarray<unsigned char>::init_from_shape((uint64_t **)v23, &v41);
      _ZN5nitro7ndarrayIhE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clINS0_IfEEEEDaS5_EUlRhRKfE_EEvRKNS0_IS5_EET0_(&v41, &v21);
      nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>(a2, &v41);
      if (v45)
      {
        v46 = v45;
        operator delete(v45);
      }
      if (v43)
      {
        v44 = v43;
        operator delete(v43);
      }
      v17 = v42;
      if (v42)
      {
        v18 = (unint64_t *)&v42->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if (v24)
      {
        v25 = v24;
        operator delete(v24);
      }
      if (v23[0])
      {
        v23[1] = v23[0];
        operator delete(v23[0]);
      }
      v6 = v22;
      if (!v22)
        return;
      v20 = (unint64_t *)&v22->__shared_owners_;
      do
        v8 = __ldaxr(v20);
      while (__stlxr(v8 - 1, v20));
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v26, (uint64_t)a1);
      nitro::ndarray<unsigned char>::init_from_shape((uint64_t **)v28, &v41);
      _ZN5nitro7ndarrayIhE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clINS0_IDhEEEEDaS5_EUlRhRKDhE_EEvRKNS0_IS5_EET0_(&v41, &v26);
      nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>(a2, &v41);
      if (v45)
      {
        v46 = v45;
        operator delete(v45);
      }
      if (v43)
      {
        v44 = v43;
        operator delete(v43);
      }
      v9 = v42;
      if (v42)
      {
        v10 = (unint64_t *)&v42->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      if (v29)
      {
        v30 = v29;
        operator delete(v29);
      }
      if (v28[0])
      {
        v28[1] = v28[0];
        operator delete(v28[0]);
      }
      v6 = v27;
      if (!v27)
        return;
      v12 = (unint64_t *)&v27->__shared_owners_;
      do
        v8 = __ldaxr(v12);
      while (__stlxr(v8 - 1, v12));
      break;
    default:
      _ZZNK5nitro17ndarray_container5visitIZNKS0_4castIhEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_ENKUlvE_clEv();
  }
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_191192620(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nitro::ndarray<float>::~ndarray(va);
  _Unwind_Resume(a1);
}

void sub_19119265C()
{
  uint64_t v0;

  nitro::ndarray<float>::~ndarray((_QWORD *)(v0 - 104));
  JUMPOUT(0x191192668);
}

void sub_191192678()
{
  uint64_t v0;

  nitro::ndarray<float>::~ndarray((_QWORD *)(v0 - 104));
  JUMPOUT(0x191192684);
}

void sub_191192694()
{
  uint64_t v0;

  nitro::ndarray<float>::~ndarray((_QWORD *)(v0 - 104));
  JUMPOUT(0x1911926A0);
}

void _ZZNK5nitro17ndarray_container5visitIZNKS0_4castIhEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZNK5nitro17ndarray_container5visitIZNKS0_4castIhEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_191192914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZN5nitro7ndarrayIhE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clIS1_EEDaS5_EUlRhRKhE_EEvRKNS0_IS5_EET0_(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;

  v4 = (char *)a1[2];
  v5 = (char *)a1[3];
  v6 = (v5 - v4) >> 3;
  v7 = (_QWORD *)a2[2];
  if (v6 != (uint64_t)(a2[3] - (_QWORD)v7) >> 3)
    goto LABEL_13;
  if (v5 == v4)
    return;
  v8 = v6 <= 1 ? 1 : (v5 - v4) >> 3;
  if (*(_QWORD *)v4 != *v7)
    goto LABEL_13;
  v9 = 1;
  do
  {
    v10 = v9;
    if (v8 == v9)
      break;
    v11 = *(_QWORD *)&v4[8 * v9];
    v12 = v7[v9++];
  }
  while (v11 == v12);
  if (v10 < v6)
LABEL_13:
    _ZZN5nitro7ndarrayIhE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clIS1_EEDaS5_EUlRhRKhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv();
  v13 = v5 - v4;
  if (v5 == v4 || !*a1)
    return;
  if ((unint64_t)(v13 - 8) < 8)
  {
    v14 = 1;
    v15 = (char *)a1[2];
    do
    {
LABEL_20:
      v21 = *(_QWORD *)v15;
      v15 += 8;
      v14 *= v21;
    }
    while (v15 != v5);
    goto LABEL_21;
  }
  v16 = ((unint64_t)(v13 - 8) >> 3) + 1;
  v15 = &v4[8 * (v16 & 0x3FFFFFFFFFFFFFFELL)];
  v17 = v4 + 8;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = v13 >> 3;
  if (v13 >> 3 == 3)
  {
    v35 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      v36 = 0;
      v37 = a2[8];
      v38 = a1[8];
      do
      {
        if (*((_QWORD *)v4 + 1))
        {
          v39 = 0;
          v40 = v37;
          v41 = v38;
          do
          {
            if (*((_QWORD *)v4 + 2))
            {
              v44 = 0;
              v45 = v40;
              v46 = v41;
              do
              {
                *(_BYTE *)(*a1 + v46) = *(_BYTE *)(*a2 + v45);
                v42 = (_QWORD *)a1[5];
                v46 += v42[2];
                v43 = (_QWORD *)a2[5];
                v45 += v43[2];
                ++v44;
                v4 = (char *)a1[2];
              }
              while (v44 < *((_QWORD *)v4 + 2));
            }
            else
            {
              v42 = (_QWORD *)a1[5];
              v43 = (_QWORD *)a2[5];
            }
            v41 += v42[1];
            v40 += v43[1];
            ++v39;
          }
          while (v39 < *((_QWORD *)v4 + 1));
          v35 = *(_QWORD *)v4;
        }
        else
        {
          v42 = (_QWORD *)a1[5];
          v43 = (_QWORD *)a2[5];
        }
        v38 += *v42;
        v37 += *v43;
        ++v36;
      }
      while (v36 < v35);
    }
  }
  else
  {
    if (v22 != 2)
    {
      if (v22 == 1)
      {
        if (*(_QWORD *)v4)
        {
          v23 = 0;
          v24 = a2[8];
          v25 = a1[8];
          do
          {
            *(_BYTE *)(*a1 + v25) = *(_BYTE *)(*a2 + v24);
            v25 += *(_QWORD *)a1[5];
            v24 += *(_QWORD *)a2[5];
            ++v23;
          }
          while (v23 < *(_QWORD *)a1[2]);
        }
        return;
      }
      if (v13 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v47 = operator new(v13);
      bzero(v47, v13 & 0xFFFFFFFFFFFFFFF8);
      if (v22 <= 1)
        v48 = 1;
      else
        v48 = v13 >> 3;
      v49 = v48 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        v50 = a1[5];
        if (v48 < 2)
          break;
        v53 = 0;
        v54 = 0;
        v55 = (_QWORD *)(v50 + 8);
        v56 = v48 & 0xFFFFFFFFFFFFFFFELL;
        v57 = v47 + 1;
        do
        {
          v53 += *(v55 - 1) * *(v57 - 1);
          v54 += *v55 * *v57;
          v57 += 2;
          v55 += 2;
          v56 -= 2;
        }
        while (v56);
        v51 = v54 + v53;
        v52 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49)
          goto LABEL_60;
LABEL_62:
        v65 = a2[5];
        if (v48 < 2)
        {
          v66 = 0;
          v67 = 0;
LABEL_67:
          v73 = v48 - v67;
          v74 = v67;
          v75 = (uint64_t *)(v65 + v74 * 8);
          v76 = &v47[v74];
          do
          {
            v78 = *v76++;
            v77 = v78;
            v79 = *v75++;
            v66 += v79 * v77;
            --v73;
          }
          while (v73);
          goto LABEL_69;
        }
        v68 = 0;
        v69 = 0;
        v70 = (_QWORD *)(v65 + 8);
        v71 = v48 & 0xFFFFFFFFFFFFFFFELL;
        v72 = v47 + 1;
        do
        {
          v68 += *(v70 - 1) * *(v72 - 1);
          v69 += *v70 * *v72;
          v72 += 2;
          v70 += 2;
          v71 -= 2;
        }
        while (v71);
        v66 = v69 + v68;
        v67 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49)
          goto LABEL_67;
LABEL_69:
        *(_BYTE *)(*a1 + v51) = *(_BYTE *)(*a2 + a2[8] + v66);
        if ((int)((unint64_t)v13 >> 3) >= 1)
        {
          v80 = a1[2];
          v81 = ((unint64_t)v13 >> 3) + 1;
          v82 = (unint64_t)v13 >> 3;
          while (1)
          {
            v83 = (v81 - 2);
            v84 = v47[v83] + 1;
            v47[v83] = v84;
            if (v84 < *(_QWORD *)(v80 + v83 * 8))
              break;
            v47[(v81 - 2)] = 0;
            LODWORD(v82) = v82 - 1;
            if ((unint64_t)--v81 <= 1)
              goto LABEL_75;
          }
          if ((int)v82 > 0)
            continue;
        }
LABEL_75:
        operator delete(v47);
        return;
      }
      v51 = 0;
      v52 = 0;
LABEL_60:
      v58 = v48 - v52;
      v59 = v52;
      v60 = (uint64_t *)(v50 + v59 * 8);
      v61 = &v47[v59];
      do
      {
        v63 = *v61++;
        v62 = v63;
        v64 = *v60++;
        v51 += v64 * v62;
        --v58;
      }
      while (v58);
      goto LABEL_62;
    }
    v26 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      v27 = 0;
      v28 = a2[8];
      v29 = a1[8];
      do
      {
        if (*((_QWORD *)v4 + 1))
        {
          v32 = 0;
          v33 = v28;
          v34 = v29;
          do
          {
            *(_BYTE *)(*a1 + v34) = *(_BYTE *)(*a2 + v33);
            v30 = (_QWORD *)a1[5];
            v34 += v30[1];
            v31 = (_QWORD *)a2[5];
            v33 += v31[1];
            ++v32;
            v4 = (char *)a1[2];
          }
          while (v32 < *((_QWORD *)v4 + 1));
          v26 = *(_QWORD *)v4;
        }
        else
        {
          v30 = (_QWORD *)a1[5];
          v31 = (_QWORD *)a2[5];
        }
        v29 += *v30;
        v28 += *v31;
        ++v27;
      }
      while (v27 < v26);
    }
  }
}

void sub_191192E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void _ZZN5nitro7ndarrayIhE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clIS1_EEDaS5_EUlRhRKhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZN5nitro7ndarrayIhE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clIS1_EEDaS5_EUlRhRKhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1911930D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro7ndarrayIhE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clIS1_EEDaS5_EUlRhRKhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_191193274(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191193288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x191193280);
}

void _ZN5nitro7ndarrayIhE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clINS0_IiEEEEDaS5_EUlRhRKiE_EEvRKNS0_IS5_EET0_(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;

  v4 = (char *)a1[2];
  v5 = (char *)a1[3];
  v6 = (v5 - v4) >> 3;
  v7 = (_QWORD *)a2[2];
  if (v6 != (uint64_t)(a2[3] - (_QWORD)v7) >> 3)
    goto LABEL_13;
  if (v5 == v4)
    return;
  v8 = v6 <= 1 ? 1 : (v5 - v4) >> 3;
  if (*(_QWORD *)v4 != *v7)
    goto LABEL_13;
  v9 = 1;
  do
  {
    v10 = v9;
    if (v8 == v9)
      break;
    v11 = *(_QWORD *)&v4[8 * v9];
    v12 = v7[v9++];
  }
  while (v11 == v12);
  if (v10 < v6)
LABEL_13:
    _ZZN5nitro7ndarrayIhE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clINS0_IiEEEEDaS5_EUlRhRKiE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv();
  v13 = v5 - v4;
  if (v5 == v4 || !*a1)
    return;
  if ((unint64_t)(v13 - 8) < 8)
  {
    v14 = 1;
    v15 = (char *)a1[2];
    do
    {
LABEL_20:
      v21 = *(_QWORD *)v15;
      v15 += 8;
      v14 *= v21;
    }
    while (v15 != v5);
    goto LABEL_21;
  }
  v16 = ((unint64_t)(v13 - 8) >> 3) + 1;
  v15 = &v4[8 * (v16 & 0x3FFFFFFFFFFFFFFELL)];
  v17 = v4 + 8;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = v13 >> 3;
  if (v13 >> 3 == 3)
  {
    v35 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      v36 = 0;
      v37 = a2[8];
      v38 = a1[8];
      do
      {
        if (*((_QWORD *)v4 + 1))
        {
          v39 = 0;
          v40 = v37;
          v41 = v38;
          do
          {
            if (*((_QWORD *)v4 + 2))
            {
              v44 = 0;
              v45 = v40;
              v46 = v41;
              do
              {
                *(_BYTE *)(*a1 + v46) = *(_DWORD *)(*a2 + 4 * v45);
                v42 = (_QWORD *)a1[5];
                v46 += v42[2];
                v43 = (_QWORD *)a2[5];
                v45 += v43[2];
                ++v44;
                v4 = (char *)a1[2];
              }
              while (v44 < *((_QWORD *)v4 + 2));
            }
            else
            {
              v42 = (_QWORD *)a1[5];
              v43 = (_QWORD *)a2[5];
            }
            v41 += v42[1];
            v40 += v43[1];
            ++v39;
          }
          while (v39 < *((_QWORD *)v4 + 1));
          v35 = *(_QWORD *)v4;
        }
        else
        {
          v42 = (_QWORD *)a1[5];
          v43 = (_QWORD *)a2[5];
        }
        v38 += *v42;
        v37 += *v43;
        ++v36;
      }
      while (v36 < v35);
    }
  }
  else
  {
    if (v22 != 2)
    {
      if (v22 == 1)
      {
        if (*(_QWORD *)v4)
        {
          v23 = 0;
          v24 = a2[8];
          v25 = a1[8];
          do
          {
            *(_BYTE *)(*a1 + v25) = *(_DWORD *)(*a2 + 4 * v24);
            v25 += *(_QWORD *)a1[5];
            v24 += *(_QWORD *)a2[5];
            ++v23;
          }
          while (v23 < *(_QWORD *)a1[2]);
        }
        return;
      }
      if (v13 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v47 = operator new(v13);
      bzero(v47, v13 & 0xFFFFFFFFFFFFFFF8);
      if (v22 <= 1)
        v48 = 1;
      else
        v48 = v13 >> 3;
      v49 = v48 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        v50 = a1[5];
        if (v48 < 2)
          break;
        v53 = 0;
        v54 = 0;
        v55 = (_QWORD *)(v50 + 8);
        v56 = v48 & 0xFFFFFFFFFFFFFFFELL;
        v57 = v47 + 1;
        do
        {
          v53 += *(v55 - 1) * *(v57 - 1);
          v54 += *v55 * *v57;
          v57 += 2;
          v55 += 2;
          v56 -= 2;
        }
        while (v56);
        v51 = v54 + v53;
        v52 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49)
          goto LABEL_60;
LABEL_62:
        v65 = a2[5];
        if (v48 < 2)
        {
          v66 = 0;
          v67 = 0;
LABEL_67:
          v73 = v48 - v67;
          v74 = v67;
          v75 = (uint64_t *)(v65 + v74 * 8);
          v76 = &v47[v74];
          do
          {
            v78 = *v76++;
            v77 = v78;
            v79 = *v75++;
            v66 += v79 * v77;
            --v73;
          }
          while (v73);
          goto LABEL_69;
        }
        v68 = 0;
        v69 = 0;
        v70 = (_QWORD *)(v65 + 8);
        v71 = v48 & 0xFFFFFFFFFFFFFFFELL;
        v72 = v47 + 1;
        do
        {
          v68 += *(v70 - 1) * *(v72 - 1);
          v69 += *v70 * *v72;
          v72 += 2;
          v70 += 2;
          v71 -= 2;
        }
        while (v71);
        v66 = v69 + v68;
        v67 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49)
          goto LABEL_67;
LABEL_69:
        *(_BYTE *)(*a1 + v51) = *(_DWORD *)(*a2 + 4 * (a2[8] + v66));
        if ((int)((unint64_t)v13 >> 3) >= 1)
        {
          v80 = a1[2];
          v81 = ((unint64_t)v13 >> 3) + 1;
          v82 = (unint64_t)v13 >> 3;
          while (1)
          {
            v83 = (v81 - 2);
            v84 = v47[v83] + 1;
            v47[v83] = v84;
            if (v84 < *(_QWORD *)(v80 + v83 * 8))
              break;
            v47[(v81 - 2)] = 0;
            LODWORD(v82) = v82 - 1;
            if ((unint64_t)--v81 <= 1)
              goto LABEL_75;
          }
          if ((int)v82 > 0)
            continue;
        }
LABEL_75:
        operator delete(v47);
        return;
      }
      v51 = 0;
      v52 = 0;
LABEL_60:
      v58 = v48 - v52;
      v59 = v52;
      v60 = (uint64_t *)(v50 + v59 * 8);
      v61 = &v47[v59];
      do
      {
        v63 = *v61++;
        v62 = v63;
        v64 = *v60++;
        v51 += v64 * v62;
        --v58;
      }
      while (v58);
      goto LABEL_62;
    }
    v26 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      v27 = 0;
      v28 = a2[8];
      v29 = a1[8];
      do
      {
        if (*((_QWORD *)v4 + 1))
        {
          v32 = 0;
          v33 = v28;
          v34 = v29;
          do
          {
            *(_BYTE *)(*a1 + v34) = *(_DWORD *)(*a2 + 4 * v33);
            v30 = (_QWORD *)a1[5];
            v34 += v30[1];
            v31 = (_QWORD *)a2[5];
            v33 += v31[1];
            ++v32;
            v4 = (char *)a1[2];
          }
          while (v32 < *((_QWORD *)v4 + 1));
          v26 = *(_QWORD *)v4;
        }
        else
        {
          v30 = (_QWORD *)a1[5];
          v31 = (_QWORD *)a2[5];
        }
        v29 += *v30;
        v28 += *v31;
        ++v27;
      }
      while (v27 < v26);
    }
  }
}

void sub_191193778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void _ZZN5nitro7ndarrayIhE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clINS0_IiEEEEDaS5_EUlRhRKiE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZN5nitro7ndarrayIhE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clINS0_IiEEEEDaS5_EUlRhRKiE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1911939F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro7ndarrayIhE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clINS0_IiEEEEDaS5_EUlRhRKiE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_191193B9C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191193BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x191193BA8);
}

void _ZN5nitro7ndarrayIhE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clINS0_IDhEEEEDaS5_EUlRhRKDhE_EEvRKNS0_IS5_EET0_(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  _QWORD *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;

  v4 = (char *)a1[2];
  v5 = (char *)a1[3];
  v6 = (v5 - v4) >> 3;
  v7 = (_QWORD *)a2[2];
  if (v6 != (uint64_t)(a2[3] - (_QWORD)v7) >> 3)
    goto LABEL_13;
  if (v5 == v4)
    return;
  v8 = v6 <= 1 ? 1 : (v5 - v4) >> 3;
  if (*(_QWORD *)v4 != *v7)
    goto LABEL_13;
  v9 = 1;
  do
  {
    v10 = v9;
    if (v8 == v9)
      break;
    v11 = *(_QWORD *)&v4[8 * v9];
    v12 = v7[v9++];
  }
  while (v11 == v12);
  if (v10 < v6)
LABEL_13:
    _ZZN5nitro7ndarrayIhE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clINS0_IDhEEEEDaS5_EUlRhRKDhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv();
  v13 = v5 - v4;
  if (v5 == v4 || !*a1)
    return;
  if ((unint64_t)(v13 - 8) < 8)
  {
    v14 = 1;
    v15 = (char *)a1[2];
    do
    {
LABEL_20:
      v21 = *(_QWORD *)v15;
      v15 += 8;
      v14 *= v21;
    }
    while (v15 != v5);
    goto LABEL_21;
  }
  v16 = ((unint64_t)(v13 - 8) >> 3) + 1;
  v15 = &v4[8 * (v16 & 0x3FFFFFFFFFFFFFFELL)];
  v17 = v4 + 8;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = v13 >> 3;
  if (v13 >> 3 == 3)
  {
    v43 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      v44 = 0;
      v45 = a2[8];
      v46 = a1[8];
      do
      {
        if (*((_QWORD *)v4 + 1))
        {
          v47 = 0;
          v48 = v45;
          v49 = v46;
          do
          {
            if (*((_QWORD *)v4 + 2))
            {
              v52 = 0;
              v53 = v48;
              v54 = v49;
              do
              {
                _H0 = *(_WORD *)(*a2 + 2 * v53);
                __asm { FCVT            S0, H0 }
                *(_BYTE *)(*a1 + v54) = (int)_S0;
                v50 = (_QWORD *)a1[5];
                v54 += v50[2];
                v51 = (_QWORD *)a2[5];
                v53 += v51[2];
                ++v52;
                v4 = (char *)a1[2];
              }
              while (v52 < *((_QWORD *)v4 + 2));
            }
            else
            {
              v50 = (_QWORD *)a1[5];
              v51 = (_QWORD *)a2[5];
            }
            v49 += v50[1];
            v48 += v51[1];
            ++v47;
          }
          while (v47 < *((_QWORD *)v4 + 1));
          v43 = *(_QWORD *)v4;
        }
        else
        {
          v50 = (_QWORD *)a1[5];
          v51 = (_QWORD *)a2[5];
        }
        v46 += *v50;
        v45 += *v51;
        ++v44;
      }
      while (v44 < v43);
    }
  }
  else
  {
    if (v22 != 2)
    {
      if (v22 == 1)
      {
        if (*(_QWORD *)v4)
        {
          v23 = 0;
          v24 = a2[8];
          v25 = a1[8];
          do
          {
            _H0 = *(_WORD *)(*a2 + 2 * v24);
            __asm { FCVT            S0, H0 }
            *(_BYTE *)(*a1 + v25) = (int)_S0;
            v25 += *(_QWORD *)a1[5];
            v24 += *(_QWORD *)a2[5];
            ++v23;
          }
          while (v23 < *(_QWORD *)a1[2]);
        }
        return;
      }
      if (v13 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v57 = operator new(v13);
      bzero(v57, v13 & 0xFFFFFFFFFFFFFFF8);
      if (v22 <= 1)
        v58 = 1;
      else
        v58 = v13 >> 3;
      v59 = v58 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        v60 = a1[5];
        if (v58 < 2)
          break;
        v63 = 0;
        v64 = 0;
        v65 = (_QWORD *)(v60 + 8);
        v66 = v58 & 0xFFFFFFFFFFFFFFFELL;
        v67 = v57 + 1;
        do
        {
          v63 += *(v65 - 1) * *(v67 - 1);
          v64 += *v65 * *v67;
          v67 += 2;
          v65 += 2;
          v66 -= 2;
        }
        while (v66);
        v61 = v64 + v63;
        v62 = v58 & 0xFFFFFFFFFFFFFFFELL;
        if (v58 != v59)
          goto LABEL_60;
LABEL_62:
        v75 = a2[5];
        if (v58 < 2)
        {
          v76 = 0;
          v77 = 0;
LABEL_67:
          v83 = v58 - v77;
          v84 = v77;
          v85 = (uint64_t *)(v75 + v84 * 8);
          v86 = &v57[v84];
          do
          {
            v88 = *v86++;
            v87 = v88;
            v89 = *v85++;
            v76 += v89 * v87;
            --v83;
          }
          while (v83);
          goto LABEL_69;
        }
        v78 = 0;
        v79 = 0;
        v80 = (_QWORD *)(v75 + 8);
        v81 = v58 & 0xFFFFFFFFFFFFFFFELL;
        v82 = v57 + 1;
        do
        {
          v78 += *(v80 - 1) * *(v82 - 1);
          v79 += *v80 * *v82;
          v82 += 2;
          v80 += 2;
          v81 -= 2;
        }
        while (v81);
        v76 = v79 + v78;
        v77 = v58 & 0xFFFFFFFFFFFFFFFELL;
        if (v58 != v59)
          goto LABEL_67;
LABEL_69:
        _H0 = *(_WORD *)(*a2 + 2 * (a2[8] + v76));
        __asm { FCVT            S0, H0 }
        *(_BYTE *)(*a1 + v61) = (int)_S0;
        if ((int)((unint64_t)v13 >> 3) >= 1)
        {
          v92 = a1[2];
          v93 = ((unint64_t)v13 >> 3) + 1;
          v94 = (unint64_t)v13 >> 3;
          while (1)
          {
            v95 = (v93 - 2);
            v96 = v57[v95] + 1;
            v57[v95] = v96;
            if (v96 < *(_QWORD *)(v92 + v95 * 8))
              break;
            v57[(v93 - 2)] = 0;
            LODWORD(v94) = v94 - 1;
            if ((unint64_t)--v93 <= 1)
              goto LABEL_75;
          }
          if ((int)v94 > 0)
            continue;
        }
LABEL_75:
        operator delete(v57);
        return;
      }
      v61 = 0;
      v62 = 0;
LABEL_60:
      v68 = v58 - v62;
      v69 = v62;
      v70 = (uint64_t *)(v60 + v69 * 8);
      v71 = &v57[v69];
      do
      {
        v73 = *v71++;
        v72 = v73;
        v74 = *v70++;
        v61 += v74 * v72;
        --v68;
      }
      while (v68);
      goto LABEL_62;
    }
    v32 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      v33 = 0;
      v34 = a2[8];
      v35 = a1[8];
      do
      {
        if (*((_QWORD *)v4 + 1))
        {
          v38 = 0;
          v39 = v34;
          v40 = v35;
          do
          {
            _H0 = *(_WORD *)(*a2 + 2 * v39);
            __asm { FCVT            S0, H0 }
            *(_BYTE *)(*a1 + v40) = (int)_S0;
            v36 = (_QWORD *)a1[5];
            v40 += v36[1];
            v37 = (_QWORD *)a2[5];
            v39 += v37[1];
            ++v38;
            v4 = (char *)a1[2];
          }
          while (v38 < *((_QWORD *)v4 + 1));
          v32 = *(_QWORD *)v4;
        }
        else
        {
          v36 = (_QWORD *)a1[5];
          v37 = (_QWORD *)a2[5];
        }
        v35 += *v36;
        v34 += *v37;
        ++v33;
      }
      while (v33 < v32);
    }
  }
}

void sub_1911940C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void _ZZN5nitro7ndarrayIhE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clINS0_IDhEEEEDaS5_EUlRhRKDhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZN5nitro7ndarrayIhE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clINS0_IDhEEEEDaS5_EUlRhRKDhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_191194340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro7ndarrayIhE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clINS0_IDhEEEEDaS5_EUlRhRKDhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911944E4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911944F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911944F0);
}

void _ZN5nitro7ndarrayIhE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clINS0_IfEEEEDaS5_EUlRhRKfE_EEvRKNS0_IS5_EET0_(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;

  v4 = (char *)a1[2];
  v5 = (char *)a1[3];
  v6 = (v5 - v4) >> 3;
  v7 = (_QWORD *)a2[2];
  if (v6 != (uint64_t)(a2[3] - (_QWORD)v7) >> 3)
    goto LABEL_13;
  if (v5 == v4)
    return;
  v8 = v6 <= 1 ? 1 : (v5 - v4) >> 3;
  if (*(_QWORD *)v4 != *v7)
    goto LABEL_13;
  v9 = 1;
  do
  {
    v10 = v9;
    if (v8 == v9)
      break;
    v11 = *(_QWORD *)&v4[8 * v9];
    v12 = v7[v9++];
  }
  while (v11 == v12);
  if (v10 < v6)
LABEL_13:
    _ZZN5nitro7ndarrayIhE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clINS0_IfEEEEDaS5_EUlRhRKfE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv();
  v13 = v5 - v4;
  if (v5 == v4 || !*a1)
    return;
  if ((unint64_t)(v13 - 8) < 8)
  {
    v14 = 1;
    v15 = (char *)a1[2];
    do
    {
LABEL_20:
      v21 = *(_QWORD *)v15;
      v15 += 8;
      v14 *= v21;
    }
    while (v15 != v5);
    goto LABEL_21;
  }
  v16 = ((unint64_t)(v13 - 8) >> 3) + 1;
  v15 = &v4[8 * (v16 & 0x3FFFFFFFFFFFFFFELL)];
  v17 = v4 + 8;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = v13 >> 3;
  if (v13 >> 3 == 3)
  {
    v35 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      v36 = 0;
      v37 = a2[8];
      v38 = a1[8];
      do
      {
        if (*((_QWORD *)v4 + 1))
        {
          v39 = 0;
          v40 = v37;
          v41 = v38;
          do
          {
            if (*((_QWORD *)v4 + 2))
            {
              v44 = 0;
              v45 = v40;
              v46 = v41;
              do
              {
                *(_BYTE *)(*a1 + v46) = (int)*(float *)(*a2 + 4 * v45);
                v42 = (_QWORD *)a1[5];
                v46 += v42[2];
                v43 = (_QWORD *)a2[5];
                v45 += v43[2];
                ++v44;
                v4 = (char *)a1[2];
              }
              while (v44 < *((_QWORD *)v4 + 2));
            }
            else
            {
              v42 = (_QWORD *)a1[5];
              v43 = (_QWORD *)a2[5];
            }
            v41 += v42[1];
            v40 += v43[1];
            ++v39;
          }
          while (v39 < *((_QWORD *)v4 + 1));
          v35 = *(_QWORD *)v4;
        }
        else
        {
          v42 = (_QWORD *)a1[5];
          v43 = (_QWORD *)a2[5];
        }
        v38 += *v42;
        v37 += *v43;
        ++v36;
      }
      while (v36 < v35);
    }
  }
  else
  {
    if (v22 != 2)
    {
      if (v22 == 1)
      {
        if (*(_QWORD *)v4)
        {
          v23 = 0;
          v24 = a2[8];
          v25 = a1[8];
          do
          {
            *(_BYTE *)(*a1 + v25) = (int)*(float *)(*a2 + 4 * v24);
            v25 += *(_QWORD *)a1[5];
            v24 += *(_QWORD *)a2[5];
            ++v23;
          }
          while (v23 < *(_QWORD *)a1[2]);
        }
        return;
      }
      if (v13 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v47 = operator new(v13);
      bzero(v47, v13 & 0xFFFFFFFFFFFFFFF8);
      if (v22 <= 1)
        v48 = 1;
      else
        v48 = v13 >> 3;
      v49 = v48 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        v50 = a1[5];
        if (v48 < 2)
          break;
        v53 = 0;
        v54 = 0;
        v55 = (_QWORD *)(v50 + 8);
        v56 = v48 & 0xFFFFFFFFFFFFFFFELL;
        v57 = v47 + 1;
        do
        {
          v53 += *(v55 - 1) * *(v57 - 1);
          v54 += *v55 * *v57;
          v57 += 2;
          v55 += 2;
          v56 -= 2;
        }
        while (v56);
        v51 = v54 + v53;
        v52 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49)
          goto LABEL_60;
LABEL_62:
        v65 = a2[5];
        if (v48 < 2)
        {
          v66 = 0;
          v67 = 0;
LABEL_67:
          v73 = v48 - v67;
          v74 = v67;
          v75 = (uint64_t *)(v65 + v74 * 8);
          v76 = &v47[v74];
          do
          {
            v78 = *v76++;
            v77 = v78;
            v79 = *v75++;
            v66 += v79 * v77;
            --v73;
          }
          while (v73);
          goto LABEL_69;
        }
        v68 = 0;
        v69 = 0;
        v70 = (_QWORD *)(v65 + 8);
        v71 = v48 & 0xFFFFFFFFFFFFFFFELL;
        v72 = v47 + 1;
        do
        {
          v68 += *(v70 - 1) * *(v72 - 1);
          v69 += *v70 * *v72;
          v72 += 2;
          v70 += 2;
          v71 -= 2;
        }
        while (v71);
        v66 = v69 + v68;
        v67 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49)
          goto LABEL_67;
LABEL_69:
        *(_BYTE *)(*a1 + v51) = (int)*(float *)(*a2 + 4 * (a2[8] + v66));
        if ((int)((unint64_t)v13 >> 3) >= 1)
        {
          v80 = a1[2];
          v81 = ((unint64_t)v13 >> 3) + 1;
          v82 = (unint64_t)v13 >> 3;
          while (1)
          {
            v83 = (v81 - 2);
            v84 = v47[v83] + 1;
            v47[v83] = v84;
            if (v84 < *(_QWORD *)(v80 + v83 * 8))
              break;
            v47[(v81 - 2)] = 0;
            LODWORD(v82) = v82 - 1;
            if ((unint64_t)--v81 <= 1)
              goto LABEL_75;
          }
          if ((int)v82 > 0)
            continue;
        }
LABEL_75:
        operator delete(v47);
        return;
      }
      v51 = 0;
      v52 = 0;
LABEL_60:
      v58 = v48 - v52;
      v59 = v52;
      v60 = (uint64_t *)(v50 + v59 * 8);
      v61 = &v47[v59];
      do
      {
        v63 = *v61++;
        v62 = v63;
        v64 = *v60++;
        v51 += v64 * v62;
        --v58;
      }
      while (v58);
      goto LABEL_62;
    }
    v26 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      v27 = 0;
      v28 = a2[8];
      v29 = a1[8];
      do
      {
        if (*((_QWORD *)v4 + 1))
        {
          v32 = 0;
          v33 = v28;
          v34 = v29;
          do
          {
            *(_BYTE *)(*a1 + v34) = (int)*(float *)(*a2 + 4 * v33);
            v30 = (_QWORD *)a1[5];
            v34 += v30[1];
            v31 = (_QWORD *)a2[5];
            v33 += v31[1];
            ++v32;
            v4 = (char *)a1[2];
          }
          while (v32 < *((_QWORD *)v4 + 1));
          v26 = *(_QWORD *)v4;
        }
        else
        {
          v30 = (_QWORD *)a1[5];
          v31 = (_QWORD *)a2[5];
        }
        v29 += *v30;
        v28 += *v31;
        ++v27;
      }
      while (v27 < v26);
    }
  }
}

void sub_1911949F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void _ZZN5nitro7ndarrayIhE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clINS0_IfEEEEDaS5_EUlRhRKfE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZN5nitro7ndarrayIhE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clINS0_IfEEEEDaS5_EUlRhRKfE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_191194C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro7ndarrayIhE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clINS0_IfEEEEDaS5_EUlRhRKfE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_191194E1C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191194E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x191194E28);
}

void _ZZZNK5nitro17ndarray_container5visitIZNKS0_4castIhEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_191194F88(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191194F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x191194F94);
}

void nitro::ndarray<unsigned char>::copy(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  std::__shared_weak_count_vtbl *v48;
  std::__shared_weak_count *v49;

  v5 = a1 + 16;
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24) - v4;
  if (v6)
  {
    v7 = v6 >> 3;
    v8 = *(_QWORD *)(a1 + 40);
    if (v7 <= 1)
      v7 = 1;
    if (v7 < 2)
    {
      v9 = 0;
      v10 = 0;
LABEL_10:
      v16 = v7 - v9;
      v17 = 8 * v9;
      v18 = (uint64_t *)(v8 + v17);
      v19 = (uint64_t *)(v4 + v17);
      do
      {
        v20 = *v19++;
        v21 = v20 - 1;
        v22 = *v18++;
        v10 += v22 * v21;
        --v16;
      }
      while (v16);
      goto LABEL_12;
    }
    v11 = 0;
    v12 = 0;
    v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
    v13 = (_QWORD *)(v4 + 8);
    v14 = (_QWORD *)(v8 + 8);
    v15 = v7 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v11 += *(v14 - 1) * (*(v13 - 1) - 1);
      v12 += *v14 * (*v13 - 1);
      v13 += 2;
      v14 += 2;
      v15 -= 2;
    }
    while (v15);
    v10 = v12 + v11;
    if (v7 != v9)
      goto LABEL_10;
  }
LABEL_12:
  v23 = (std::__shared_weak_count_vtbl *)operator new[]();
  v48 = v23;
  v24 = (std::__shared_weak_count *)operator new();
  v24->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC38C8;
  v24->__shared_owners_ = 0;
  v24->__shared_weak_owners_ = 0;
  v24[1].__vftable = v23;
  v49 = v24;
  v25 = *(_QWORD *)(a1 + 64);
  v26 = *(_QWORD *)(a1 + 16);
  v27 = *(_QWORD *)(a1 + 24) - v26;
  if (!v27)
  {
    v32 = 0;
    goto LABEL_24;
  }
  v28 = v27 >> 3;
  v29 = *(_QWORD *)(a1 + 40);
  if (v28 <= 1)
    v28 = 1;
  if (v28 >= 2)
  {
    v33 = 0;
    v34 = 0;
    v30 = v28 & 0xFFFFFFFFFFFFFFFELL;
    v35 = (_QWORD *)(v26 + 8);
    v36 = (_QWORD *)(v29 + 8);
    v37 = v28 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v33 += *(v36 - 1) * (*(v35 - 1) - 1);
      v34 += *v36 * (*v35 - 1);
      v35 += 2;
      v36 += 2;
      v37 -= 2;
    }
    while (v37);
    v31 = v34 + v33;
    if (v28 == v30)
      goto LABEL_23;
  }
  else
  {
    v30 = 0;
    v31 = 0;
  }
  v38 = v28 - v30;
  v39 = 8 * v30;
  v40 = (uint64_t *)(v29 + v39);
  v41 = (uint64_t *)(v26 + v39);
  do
  {
    v42 = *v41++;
    v43 = v42 - 1;
    v44 = *v40++;
    v31 += v44 * v43;
    --v38;
  }
  while (v38);
LABEL_23:
  v32 = v31 + 1;
LABEL_24:
  memcpy(v23, *(const void **)a1, v32 + v25);
  nitro::ndarray<unsigned char>::ndarray(a2, &v48, v5, a1 + 40, v25);
  v45 = v49;
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v47 = __ldaxr(p_shared_owners);
    while (__stlxr(v47 - 1, p_shared_owners));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
}

void sub_191195210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191195224(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  MEMORY[0x19401CD78](v1, 0x1000C8077774924);
  __cxa_rethrow();
}

void sub_191195248(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::concat(std::vector<nitro::ndarray<unsigned char>> const&,unsigned long)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"arr.shape().size()", 18);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"outshape.size()", 15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 182, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::ndarray<unsigned char>::concat(std::vector<nitro::ndarray<unsigned char>> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_191195554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::concat(std::vector<nitro::ndarray<unsigned char>> const&,unsigned long)::{lambda(void)#2}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"arr.shape()[i]", 14);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"outshape[i]", 11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 184, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::ndarray<unsigned char>::concat(std::vector<nitro::ndarray<unsigned char>> const&,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911958B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::concat(std::vector<nitro::ndarray<unsigned char>> const&,unsigned long)::{lambda(void)#3}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"arrs[arrid].num_elem()", 22);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"contiguous_copy_size[arrid] * ncopies", 37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 236, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::ndarray<unsigned char>::concat(std::vector<nitro::ndarray<unsigned char>> const&,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_191195C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::slice(_QWORD *a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>, __n128 a4@<Q0>)
{
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void *__p[2];
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v13 = 0uLL;
  v14 = 0;
  nitro::ndarray_impl::compute_slice(a2, a1 + 2, a1 + 5, a1[8], &v6, a4);
  v13 = v6;
  v14 = v7;
  *(_OWORD *)__p = v8;
  v12 = v9;
  nitro::ndarray<unsigned char>::ndarray(a3, a1, (uint64_t)&v13, (uint64_t)__p, v10);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((_QWORD)v13)
  {
    *((_QWORD *)&v13 + 1) = v13;
    operator delete((void *)v13);
  }
}

void sub_191195D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;
  void *v20;

  if (__p)
  {
    operator delete(__p);
    v20 = *(void **)(v18 - 48);
    if (!v20)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v20 = *(void **)(v18 - 48);
    if (!v20)
      goto LABEL_3;
  }
  *(_QWORD *)(v18 - 40) = v20;
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::ndarray<unsigned char>::assign<unsigned char>(_QWORD *a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = (char *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (uint64_t)(a2[3] - (_QWORD)v6) >> 3)
    goto LABEL_13;
  if (v3 == v4)
    return a1;
  v7 = v5 <= 1 ? 1 : (v3 - v4) >> 3;
  if (*(_QWORD *)v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = *(_QWORD *)&v4[8 * v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<unsigned char>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(void)#1}::operator()();
  if (v3 != v4 && *a1)
  {
    v12 = v3 - v4 - 8;
    if (v12 >= 8)
    {
      v15 = (v12 >> 3) + 1;
      v14 = &v4[8 * (v15 & 0x3FFFFFFFFFFFFFFELL)];
      v16 = v4 + 8;
      v17 = 1;
      v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
      v19 = 1;
      do
      {
        v17 *= *(v16 - 1);
        v19 *= *v16;
        v16 += 2;
        v18 -= 2;
      }
      while (v18);
      v13 = v19 * v17;
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_21:
        if (v13)
          nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(a1, a2);
        return a1;
      }
    }
    else
    {
      v13 = 1;
      v14 = (char *)a1[2];
    }
    do
    {
      v20 = *(_QWORD *)v14;
      v14 += 8;
      v13 *= v20;
    }
    while (v14 != v3);
    goto LABEL_21;
  }
  return a1;
}

uint64_t nitro::ndarray<unsigned char>::ndarray(uint64_t a1, uint64_t a2, char **a3, char **a4, uint64_t a5)
{
  char **v10;
  char **v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  std::__shared_weak_count *v27;
  void *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  void *__dst;
  std::__shared_weak_count *v66;

  *(_OWORD *)(a1 + 16) = 0u;
  v10 = (char **)(a1 + 16);
  v11 = (char **)(a1 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  __dst = 0;
  v66 = 0;
  v12 = operator new[]();
  std::shared_ptr<unsigned char>::reset[abi:ne180100]<unsigned char,std::default_delete<unsigned char []>,void>(&__dst, v12);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13 != *(_QWORD *)a2)
    memmove(__dst, *(const void **)a2, v13 - *(_QWORD *)a2);
  if (v10 != a3)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v10, *a3, a3[1], (a3[1] - *a3) >> 3);
  v14 = *(char **)(a1 + 16);
  v15 = *(char **)(a1 + 24);
  v16 = v15 - v14;
  if (v15 == v14)
  {
    v17 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
    v18 = v17 - a5;
    if (v17 != a5)
    {
      v19 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)v15 >= v19)
      {
        v21 = v16 >> 3;
        v22 = v19 - (_QWORD)v14;
        if (v22 >> 2 <= (unint64_t)((v16 >> 3) + 1))
          v23 = v21 + 1;
        else
          v23 = v22 >> 2;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v25 = (char *)operator new(8 * v24);
        v26 = &v25[8 * v21];
        *(_QWORD *)(a1 + 16) = v26;
        *(_QWORD *)v26 = v18;
        v20 = v26 + 8;
        *(_QWORD *)(a1 + 24) = v20;
        *(_QWORD *)(a1 + 32) = &v25[8 * v24];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *(_QWORD *)v15 = v18;
        v20 = v15 + 8;
      }
      *(_QWORD *)(a1 + 24) = v20;
    }
  }
  if (v11 != a4)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v11, *a4, a4[1], (a4[1] - *a4) >> 3);
  *(_QWORD *)(a1 + 64) = a5;
  v28 = __dst;
  v27 = v66;
  if (v66)
  {
    p_shared_owners = (unint64_t *)&v66->__shared_owners_;
    do
      v30 = __ldxr(p_shared_owners);
    while (__stxr(v30 + 1, p_shared_owners));
  }
  v31 = *(std::__shared_weak_count **)(a1 + 8);
  *(_QWORD *)a1 = v28;
  *(_QWORD *)(a1 + 8) = v27;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v35 = *(_QWORD *)(a1 + 40);
  v34 = *(_QWORD *)(a1 + 48);
  v37 = *(char **)(a1 + 16);
  v36 = *(char **)(a1 + 24);
  v38 = v34 - v35;
  if (v34 != v35)
  {
    v34 = *(_QWORD *)(a1 + 40);
    goto LABEL_31;
  }
  v40 = v36 - v37;
  if (v36 != v37)
  {
    v41 = v38 >> 3;
    if (v40 >> 3 > v41)
    {
      std::vector<unsigned long long>::__append((uint64_t)v11, (v40 >> 3) - v41);
      v37 = *(char **)(a1 + 16);
      v36 = *(char **)(a1 + 24);
      v34 = *(_QWORD *)(a1 + 40);
      v40 = v36 - v37;
    }
    *(_QWORD *)(v34 + (((v40 << 29) - 0x100000000) >> 29)) = 1;
    if ((int)((unint64_t)v40 >> 3) >= 2)
    {
      v42 = 8 * (((unint64_t)v40 >> 3) - 2);
      v43 = *(_QWORD *)(v42 + v34 + 8);
      do
      {
        v43 *= *(_QWORD *)&v37[v42 + 8];
        *(_QWORD *)(v34 + v42) = v43;
        v42 -= 8;
      }
      while (v42 != -8);
    }
LABEL_31:
    v39 = v36;
    v36 = v37;
    if (v39 != v37)
      goto LABEL_41;
  }
  *(_QWORD *)(a1 + 24) = v36;
  *(_QWORD *)(a1 + 48) = v34;
  v39 = v36;
  *(_QWORD *)(a1 + 64) = 0;
LABEL_41:
  v44 = *v10;
  if (v39 == *v10)
  {
    v48 = 0;
    goto LABEL_53;
  }
  v45 = (v39 - *v10) >> 3;
  if (v45 <= 1)
    v45 = 1;
  if (v45 >= 2)
  {
    v49 = 0;
    v50 = 0;
    v46 = v45 & 0xFFFFFFFFFFFFFFFELL;
    v51 = v44 + 8;
    v52 = (_QWORD *)(v34 + 8);
    v53 = v45 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v49 += *(v52 - 1) * (*(v51 - 1) - 1);
      v50 += *v52 * (*v51 - 1);
      v51 += 2;
      v52 += 2;
      v53 -= 2;
    }
    while (v53);
    v47 = v50 + v49;
    if (v45 == v46)
      goto LABEL_52;
  }
  else
  {
    v46 = 0;
    v47 = 0;
  }
  v54 = v45 - v46;
  v55 = 8 * v46;
  v56 = (uint64_t *)(v34 + v55);
  v57 = &v44[v55];
  do
  {
    v58 = *(_QWORD *)v57;
    v57 += 8;
    v59 = v58 - 1;
    v60 = *v56++;
    v47 += v60 * v59;
    --v54;
  }
  while (v54);
LABEL_52:
  v48 = v47 + 1;
LABEL_53:
  if ((unint64_t)(*(_QWORD *)(a1 + 64) + v48) > *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
    nitro::ndarray<unsigned char>::ndarray(std::vector<unsigned char> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator()();
  v61 = v66;
  if (v66)
  {
    v62 = (unint64_t *)&v66->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  return a1;
}

void sub_191196240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  v7 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v3 + 48) = v7;
    operator delete(v7);
  }
  v8 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v3 + 24) = v8;
    operator delete(v8);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::ndarray(std::vector<unsigned char> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"last_index() + m_start <= elements.size()", 41);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 131, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::ndarray<unsigned char>::ndarray(std::vector<unsigned char> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911964E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::ndarray(std::vector<unsigned char> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 131, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19119668C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911966A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x191196698);
}

void nitro::ndarray<unsigned char>::concat(std::vector<nitro::ndarray<unsigned char>> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 182, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911967F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19119680C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x191196804);
}

void nitro::ndarray<unsigned char>::concat(std::vector<nitro::ndarray<unsigned char>> const&,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 184, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_191196964(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191196978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x191196970);
}

void nitro::ndarray<unsigned char>::concat(std::vector<nitro::ndarray<unsigned char>> const&,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 236, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_191196AD0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191196AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x191196ADCLL);
}

void nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long,unsigned long)::{lambda(void)#2}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", 54);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"end", 3);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)">", 1);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"start", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)">", 1);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", "operator()", 48, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_191196DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", "operator()", 48, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_191196F9C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191196FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x191196FA8);
}

void nitro::ndarray<unsigned char>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_191197230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;

  v4 = (char *)a1[2];
  v5 = (char *)a1[3];
  v6 = (v5 - v4) >> 3;
  v7 = (_QWORD *)a2[2];
  if (v6 != (uint64_t)(a2[3] - (_QWORD)v7) >> 3)
    goto LABEL_13;
  if (v5 == v4)
    return;
  v8 = v6 <= 1 ? 1 : (v5 - v4) >> 3;
  if (*(_QWORD *)v4 != *v7)
    goto LABEL_13;
  v9 = 1;
  do
  {
    v10 = v9;
    if (v8 == v9)
      break;
    v11 = *(_QWORD *)&v4[8 * v9];
    v12 = v7[v9++];
  }
  while (v11 == v12);
  if (v10 < v6)
LABEL_13:
    nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator()();
  v13 = v5 - v4;
  if (v5 == v4 || !*a1)
    return;
  if ((unint64_t)(v13 - 8) < 8)
  {
    v14 = 1;
    v15 = (char *)a1[2];
    do
    {
LABEL_20:
      v21 = *(_QWORD *)v15;
      v15 += 8;
      v14 *= v21;
    }
    while (v15 != v5);
    goto LABEL_21;
  }
  v16 = ((unint64_t)(v13 - 8) >> 3) + 1;
  v15 = &v4[8 * (v16 & 0x3FFFFFFFFFFFFFFELL)];
  v17 = v4 + 8;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = v13 >> 3;
  if (v13 >> 3 == 3)
  {
    v35 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      v36 = 0;
      v37 = a2[8];
      v38 = a1[8];
      do
      {
        if (*((_QWORD *)v4 + 1))
        {
          v39 = 0;
          v40 = v37;
          v41 = v38;
          do
          {
            if (*((_QWORD *)v4 + 2))
            {
              v44 = 0;
              v45 = v40;
              v46 = v41;
              do
              {
                *(_BYTE *)(*a1 + v46) = *(_BYTE *)(*a2 + v45);
                v42 = (_QWORD *)a1[5];
                v46 += v42[2];
                v43 = (_QWORD *)a2[5];
                v45 += v43[2];
                ++v44;
                v4 = (char *)a1[2];
              }
              while (v44 < *((_QWORD *)v4 + 2));
            }
            else
            {
              v42 = (_QWORD *)a1[5];
              v43 = (_QWORD *)a2[5];
            }
            v41 += v42[1];
            v40 += v43[1];
            ++v39;
          }
          while (v39 < *((_QWORD *)v4 + 1));
          v35 = *(_QWORD *)v4;
        }
        else
        {
          v42 = (_QWORD *)a1[5];
          v43 = (_QWORD *)a2[5];
        }
        v38 += *v42;
        v37 += *v43;
        ++v36;
      }
      while (v36 < v35);
    }
  }
  else
  {
    if (v22 != 2)
    {
      if (v22 == 1)
      {
        if (*(_QWORD *)v4)
        {
          v23 = 0;
          v24 = a2[8];
          v25 = a1[8];
          do
          {
            *(_BYTE *)(*a1 + v25) = *(_BYTE *)(*a2 + v24);
            v25 += *(_QWORD *)a1[5];
            v24 += *(_QWORD *)a2[5];
            ++v23;
          }
          while (v23 < *(_QWORD *)a1[2]);
        }
        return;
      }
      if (v13 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v47 = operator new(v13);
      bzero(v47, v13 & 0xFFFFFFFFFFFFFFF8);
      if (v22 <= 1)
        v48 = 1;
      else
        v48 = v13 >> 3;
      v49 = v48 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        v50 = a1[5];
        if (v48 < 2)
          break;
        v53 = 0;
        v54 = 0;
        v55 = (_QWORD *)(v50 + 8);
        v56 = v48 & 0xFFFFFFFFFFFFFFFELL;
        v57 = v47 + 1;
        do
        {
          v53 += *(v55 - 1) * *(v57 - 1);
          v54 += *v55 * *v57;
          v57 += 2;
          v55 += 2;
          v56 -= 2;
        }
        while (v56);
        v51 = v54 + v53;
        v52 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49)
          goto LABEL_60;
LABEL_62:
        v65 = a2[5];
        if (v48 < 2)
        {
          v66 = 0;
          v67 = 0;
LABEL_67:
          v73 = v48 - v67;
          v74 = v67;
          v75 = (uint64_t *)(v65 + v74 * 8);
          v76 = &v47[v74];
          do
          {
            v78 = *v76++;
            v77 = v78;
            v79 = *v75++;
            v66 += v79 * v77;
            --v73;
          }
          while (v73);
          goto LABEL_69;
        }
        v68 = 0;
        v69 = 0;
        v70 = (_QWORD *)(v65 + 8);
        v71 = v48 & 0xFFFFFFFFFFFFFFFELL;
        v72 = v47 + 1;
        do
        {
          v68 += *(v70 - 1) * *(v72 - 1);
          v69 += *v70 * *v72;
          v72 += 2;
          v70 += 2;
          v71 -= 2;
        }
        while (v71);
        v66 = v69 + v68;
        v67 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49)
          goto LABEL_67;
LABEL_69:
        *(_BYTE *)(*a1 + v51) = *(_BYTE *)(*a2 + a2[8] + v66);
        if ((int)((unint64_t)v13 >> 3) >= 1)
        {
          v80 = a1[2];
          v81 = ((unint64_t)v13 >> 3) + 1;
          v82 = (unint64_t)v13 >> 3;
          while (1)
          {
            v83 = (v81 - 2);
            v84 = v47[v83] + 1;
            v47[v83] = v84;
            if (v84 < *(_QWORD *)(v80 + v83 * 8))
              break;
            v47[(v81 - 2)] = 0;
            LODWORD(v82) = v82 - 1;
            if ((unint64_t)--v81 <= 1)
              goto LABEL_75;
          }
          if ((int)v82 > 0)
            continue;
        }
LABEL_75:
        operator delete(v47);
        return;
      }
      v51 = 0;
      v52 = 0;
LABEL_60:
      v58 = v48 - v52;
      v59 = v52;
      v60 = (uint64_t *)(v50 + v59 * 8);
      v61 = &v47[v59];
      do
      {
        v63 = *v61++;
        v62 = v63;
        v64 = *v60++;
        v51 += v64 * v62;
        --v58;
      }
      while (v58);
      goto LABEL_62;
    }
    v26 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      v27 = 0;
      v28 = a2[8];
      v29 = a1[8];
      do
      {
        if (*((_QWORD *)v4 + 1))
        {
          v32 = 0;
          v33 = v28;
          v34 = v29;
          do
          {
            *(_BYTE *)(*a1 + v34) = *(_BYTE *)(*a2 + v33);
            v30 = (_QWORD *)a1[5];
            v34 += v30[1];
            v31 = (_QWORD *)a2[5];
            v33 += v31[1];
            ++v32;
            v4 = (char *)a1[2];
          }
          while (v32 < *((_QWORD *)v4 + 1));
          v26 = *(_QWORD *)v4;
        }
        else
        {
          v30 = (_QWORD *)a1[5];
          v31 = (_QWORD *)a2[5];
        }
        v29 += *v30;
        v28 += *v31;
        ++v27;
      }
      while (v27 < v26);
    }
  }
}

void sub_19119776C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911978C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911978D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911978D0);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_191197B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_191197CFC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191197D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x191197D08);
}

void nitro::ndarray<int>::concat(uint64_t *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t *v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  __n128 v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64x2_t *v63;
  int64x2_t v64;
  uint64x2_t v65;
  unint64_t v66;
  int64x2_t v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t *v89;
  std::__shared_weak_count *v90;
  unint64_t *p_shared_owners;
  unint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  std::__shared_weak_count *v108;
  int64_t v109;
  uint64_t v110;
  unint64_t v111;
  int64_t v112;
  unint64_t v113;
  unint64_t v114;
  _BYTE *v115;
  uint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  uint64_t shared_weak_owners;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _OWORD *v123;
  uint64_t *v124;
  uint64_t v125;
  __int128 v126;
  uint64_t *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t *v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  unint64_t v146;
  char *v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t *v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  _QWORD *v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void *p_p;
  std::__shared_weak_count *v170;
  void *v171;
  void *v172;
  void *v173;
  void *v174;
  void *__p;
  char *v176;
  char *v177;
  void *v178;
  _BYTE *v179;
  char *v180;
  unint64_t v181;
  _QWORD v182[2];

  v3 = *a1;
  v4 = a1[1];
  v5 = 0x8E38E38E38E38E39 * ((v4 - *a1) >> 3);
  if (v5 == 1)
  {
    nitro::ndarray<int>::copy(*a1, a3);
    return;
  }
  if (!v5)
  {
    p_p = 0;
    v170 = 0;
    v171 = 0;
    v178 = 0;
    v179 = 0;
    v180 = 0;
    __p = 0;
    v176 = 0;
    v177 = 0;
    nitro::ndarray<int>::ndarray((uint64_t)a3, (uint64_t)&p_p, (char **)&v178, (char **)&__p, 0);
    if (__p)
    {
      v176 = (char *)__p;
      operator delete(__p);
    }
    if (v178)
    {
      v179 = v178;
      operator delete(v178);
    }
    v6 = p_p;
    if (p_p)
    {
      v170 = (std::__shared_weak_count *)p_p;
      goto LABEL_202;
    }
    return;
  }
  v8 = a1;
  v179 = 0;
  v180 = 0;
  v178 = 0;
  v10 = *(_BYTE **)(v3 + 16);
  v9 = *(_BYTE **)(v3 + 24);
  v11 = v9 - v10;
  if (v9 == v10)
  {
    v13 = 0;
    v12 = 0;
  }
  else
  {
    if (v11 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v12 = (char *)operator new(v9 - v10);
    v13 = &v12[8 * (v11 >> 3)];
    v178 = v12;
    v180 = v13;
    memcpy(v12, v10, v11);
    v179 = v13;
  }
  *(_QWORD *)&v12[8 * a2] = 0;
  if (v3 != v4)
  {
    v14 = v13;
    do
    {
      __p = (void *)((uint64_t)(*(_QWORD *)(v3 + 24) - *(_QWORD *)(v3 + 16)) >> 3);
      v182[0] = (v14 - v12) >> 3;
      if (__p != (void *)v182[0])
      {
        p_p = &__p;
        v170 = (std::__shared_weak_count *)v182;
        nitro::ndarray<int>::concat(std::vector<nitro::ndarray<int>> const&,unsigned long)::{lambda(void)#1}::operator()();
      }
      if (v14 == v12)
      {
        v14 = v12;
      }
      else
      {
        v15 = 0;
        do
        {
          if (a2 == v15)
          {
            *(_QWORD *)&v12[8 * a2] += *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * a2);
          }
          else
          {
            __p = 0;
            __p = *(void **)(*(_QWORD *)(v3 + 16) + 8 * v15);
            v182[0] = 0;
            v182[0] = *(_QWORD *)&v12[8 * v15];
            if (__p != (void *)v182[0])
            {
              p_p = &__p;
              v170 = (std::__shared_weak_count *)v182;
              nitro::ndarray<int>::concat(std::vector<nitro::ndarray<int>> const&,unsigned long)::{lambda(void)#2}::operator()();
            }
          }
          ++v15;
          v14 = v13;
        }
        while (v15 < (v13 - v12) >> 3);
      }
      v3 += 72;
    }
    while (v3 != v4);
  }
  nitro::ndarray<int>::init_from_shape((uint64_t **)&v178, a3);
  v17 = (uint64_t *)*v8;
  v18 = (uint64_t *)v8[1];
  if ((uint64_t *)*v8 == v18)
  {
LABEL_63:
    v57 = 1;
    goto LABEL_65;
  }
  v19 = (uint64_t *)*v8;
  while (1)
  {
    v20 = (char *)v19[2];
    v21 = (char *)v19[3];
    v22 = v21 - v20;
    if (v21 == v20)
    {
      v25 = (unint64_t *)v19[5];
      goto LABEL_50;
    }
    v23 = *v19;
    if (*v19)
    {
      if ((unint64_t)(v22 - 8) < 8)
      {
        v23 = 1;
        v24 = (char *)v19[2];
        do
        {
LABEL_39:
          v31 = *(_QWORD *)v24;
          v24 += 8;
          v23 *= v31;
        }
        while (v24 != v21);
        goto LABEL_40;
      }
      v26 = ((unint64_t)(v22 - 8) >> 3) + 1;
      v24 = &v20[8 * (v26 & 0x3FFFFFFFFFFFFFFELL)];
      v27 = v20 + 8;
      v28 = v26 & 0x3FFFFFFFFFFFFFFELL;
      v29 = 1;
      v30 = 1;
      do
      {
        v29 *= *(v27 - 1);
        v30 *= *v27;
        v27 += 2;
        v28 -= 2;
      }
      while (v28);
      v23 = v30 * v29;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_39;
    }
LABEL_40:
    v32 = v22 >> 3;
    v25 = (unint64_t *)v19[5];
    if (v32 <= 1)
      v32 = 1;
    if (v32 < 2)
    {
      v33 = 0;
      v34 = 0;
LABEL_47:
      v40 = v32 - v33;
      v41 = 8 * v33;
      v42 = (uint64_t *)&v25[v33];
      v43 = (uint64_t *)&v20[v41];
      do
      {
        v44 = *v43++;
        v45 = v44 - 1;
        v46 = *v42++;
        v34 += v46 * v45;
        --v40;
      }
      while (v40);
      goto LABEL_49;
    }
    v35 = 0;
    v36 = 0;
    v33 = v32 & 0xFFFFFFFFFFFFFFFELL;
    v37 = v20 + 8;
    v38 = v25 + 1;
    v39 = v32 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v35 += *(v38 - 1) * (*(v37 - 1) - 1);
      v36 += *v38 * (*v37 - 1);
      v37 += 2;
      v38 += 2;
      v39 -= 2;
    }
    while (v39);
    v34 = v36 + v35;
    if (v32 != v33)
      goto LABEL_47;
LABEL_49:
    if (v23 != v34 + 1)
      break;
LABEL_50:
    v47 = v19[6] - (_QWORD)v25;
    if (v47)
    {
      if (!*v25)
        break;
      if ((unint64_t)v47 >= 0x10)
      {
        v48 = v47 >> 3;
        v49 = v48 <= 2 ? 2 : v48;
        v50 = v25[1];
        if (!v50 || *v25 < v50)
          break;
        v51 = 0;
        v52 = v49 - 2;
        do
        {
          v53 = v51;
          if (v52 == v51)
            break;
          v54 = &v25[v51];
          v55 = v54[2];
          if (!v55)
            break;
          v56 = v54[1];
          v51 = v53 + 1;
        }
        while (v56 >= v55);
        if (v53 + 2 < v48)
          break;
      }
    }
    v19 += 9;
    if (v19 == v18)
      goto LABEL_63;
  }
  v57 = 0;
LABEL_65:
  v58 = v179 - (_BYTE *)v178;
  if (v179 == v178)
  {
    if ((v57 & 1) != 0)
    {
      v61 = 0;
      goto LABEL_81;
    }
    v72 = 0;
    __p = 0;
    v176 = 0;
    v177 = 0;
    if (v17 == v18)
      goto LABEL_121;
LABEL_107:
    v86 = 0;
    do
    {
      v87 = *(_QWORD *)(v17[2] + 8 * a2);
      v88 = v87 + v86;
      v181 = v86;
      v182[0] = v87 + v86;
      if (v87 + v86 <= v86)
      {
        p_p = v182;
        v170 = (std::__shared_weak_count *)&v181;
        nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long,unsigned long)::{lambda(void)#2}::operator()();
      }
      v89 = (unint64_t *)((char *)__p + 24 * a2);
      *v89 = v86;
      v89[1] = v88;
      v89[2] = 1;
      nitro::ndarray<int>::slice(a3, (__int128 **)&__p, &p_p, v16);
      nitro::ndarray<int>::assign<int>((uint64_t *)&p_p, v17);
      if (v173)
      {
        v174 = v173;
        operator delete(v173);
      }
      if (v171)
      {
        v172 = v171;
        operator delete(v171);
      }
      v90 = v170;
      if (v170)
      {
        p_shared_owners = (unint64_t *)&v170->__shared_owners_;
        do
          v92 = __ldaxr(p_shared_owners);
        while (__stlxr(v92 - 1, p_shared_owners));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      v86 += *(_QWORD *)(v17[2] + 8 * a2);
      v17 += 9;
    }
    while (v17 != v18);
    v72 = (char *)__p;
    goto LABEL_121;
  }
  v59 = v58 >> 3;
  if ((unint64_t)(v58 >> 3) <= 1)
    v60 = 1;
  else
    v60 = v58 >> 3;
  if (v60 >= 4)
  {
    v62 = v60 & 0xFFFFFFFFFFFFFFFCLL;
    v63 = (uint64x2_t *)((char *)v178 + 16);
    v64 = 0uLL;
    v65 = (uint64x2_t)vdupq_n_s64(1uLL);
    v66 = v60 & 0xFFFFFFFFFFFFFFFCLL;
    v67 = 0uLL;
    do
    {
      v64 = vsubq_s64(v64, (int64x2_t)vcgtq_u64(v63[-1], v65));
      v67 = vsubq_s64(v67, (int64x2_t)vcgtq_u64(*v63, v65));
      v63 += 2;
      v66 -= 4;
    }
    while (v66);
    v61 = vaddvq_s64(vaddq_s64(v67, v64));
    if (v60 != v62)
      goto LABEL_76;
  }
  else
  {
    v61 = 0;
    v62 = 0;
LABEL_76:
    v68 = v60 - v62;
    v69 = (unint64_t *)((char *)v178 + 8 * v62);
    do
    {
      v70 = *v69++;
      if (v70 > 1)
        ++v61;
      --v68;
    }
    while (v68);
  }
  if ((v57 & 1) != 0)
  {
LABEL_81:
    if (a2 && v61 != 1)
    {
      p_p = 0;
      v170 = 0;
      v171 = 0;
      if (v18 == v17)
        goto LABEL_163;
      if ((0x8E38E38E38E38E39 * (v18 - v17)) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v71 = (std::__shared_weak_count *)operator new(0x71C71C71C71C71C8 * (v18 - v17));
      p_p = v71;
      v170 = v71;
      v171 = &v71[0x4BDA12F684BDA13 * (v18 - v17)];
      if (v17 == v18)
      {
LABEL_163:
        v128 = v17[2];
        v127 = (uint64_t *)v17[3];
        if (v127 == (uint64_t *)v128 || !*v17)
        {
          v130 = 0;
        }
        else
        {
          v129 = (unint64_t)v127 - v128 - 8;
          if (v129 < 8)
          {
            v130 = 1;
            v131 = (uint64_t *)v17[2];
            goto LABEL_171;
          }
          v132 = (v129 >> 3) + 1;
          v131 = (uint64_t *)(v128 + 8 * (v132 & 0x3FFFFFFFFFFFFFFELL));
          v133 = (_QWORD *)(v128 + 8);
          v134 = 1;
          v135 = v132 & 0x3FFFFFFFFFFFFFFELL;
          v136 = 1;
          do
          {
            v134 *= *(v133 - 1);
            v136 *= *v133;
            v133 += 2;
            v135 -= 2;
          }
          while (v135);
          v130 = v136 * v134;
          if (v132 != (v132 & 0x3FFFFFFFFFFFFFFELL))
          {
            do
            {
LABEL_171:
              v137 = *v131++;
              v130 *= v137;
            }
            while (v131 != v127);
          }
        }
        v138 = *(_QWORD *)p_p;
        v139 = (uint64_t *)v8[1];
        v140 = v130 / *(_QWORD *)p_p;
        v141 = 0;
        if (v139 == v17)
        {
          v154 = 0x8E38E38E38E38E39 * (v139 - v17);
          __p = 0;
          v176 = 0;
          v177 = 0;
          v139 = v17;
          goto LABEL_191;
        }
        while (2)
        {
          v182[0] = 0;
          v142 = &v17[9 * v141];
          v144 = (char *)v142[2];
          v143 = (char *)v142[3];
          if (v143 == v144)
          {
            v145 = 0;
          }
          else
          {
            v145 = v17[9 * v141];
            if (v145)
            {
              v146 = v143 - v144 - 8;
              if (v146 < 8)
              {
                v145 = 1;
                v147 = v144;
                goto LABEL_181;
              }
              v148 = (v146 >> 3) + 1;
              v147 = &v144[8 * (v148 & 0x3FFFFFFFFFFFFFFELL)];
              v149 = v144 + 8;
              v150 = v148 & 0x3FFFFFFFFFFFFFFELL;
              v151 = 1;
              v152 = 1;
              do
              {
                v151 *= *(v149 - 1);
                v152 *= *v149;
                v149 += 2;
                v150 -= 2;
              }
              while (v150);
              v145 = v152 * v151;
              if (v148 != (v148 & 0x3FFFFFFFFFFFFFFELL))
              {
                do
                {
LABEL_181:
                  v153 = *(_QWORD *)v147;
                  v147 += 8;
                  v145 *= v153;
                }
                while (v147 != v143);
              }
            }
          }
          v181 = 0;
          v182[0] = v145;
          v181 = *((_QWORD *)p_p + v141) * v140;
          if (v145 != v181)
          {
            __p = v182;
            v176 = (char *)&v181;
            nitro::ndarray<int>::concat(std::vector<nitro::ndarray<int>> const&,unsigned long)::{lambda(void)#3}::operator()();
          }
          ++v141;
          v154 = 0x8E38E38E38E38E39 * (v139 - v17);
          if (v141 >= v154)
          {
            __p = 0;
            v176 = 0;
            v177 = 0;
            if (v139 == v17)
            {
              v141 = 0;
            }
            else
            {
              if (v154 >> 61)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v141 = (unint64_t)operator new(0x71C71C71C71C71C8 * (v139 - v17));
              v177 = (char *)(v141 + 0x71C71C71C71C71C8 * (v139 - v17));
              bzero((void *)v141, 0x71C71C71C71C71C8 * (v139 - v17));
            }
LABEL_191:
            if (v154)
            {
              v155 = v17 + 8;
              v156 = (_QWORD *)v141;
              do
              {
                v157 = *v155;
                v155 += 9;
                *v156++ = v157;
                --v154;
              }
              while (v154);
            }
            if (v138 <= v130)
            {
              v158 = 0;
              v159 = 0;
              if (v140 <= 1)
                v160 = 1;
              else
                v160 = v140;
              v161 = v139;
              v167 = v160;
              do
              {
                if (v161 == v17)
                {
                  v161 = v17;
                }
                else
                {
                  v162 = p_p;
                  v163 = *(_QWORD *)p_p;
                  if (*(_QWORD *)p_p)
                  {
                    memmove((void *)(*a3 + 4 * v159), (const void *)(*v17 + 4 * *(_QWORD *)v141), 4 * v163);
                    v162 = p_p;
                    v163 = *(_QWORD *)p_p;
                    v17 = (uint64_t *)*v8;
                    v139 = (uint64_t *)v8[1];
                  }
                  v159 += v163;
                  *(_QWORD *)v141 += v163;
                  if (0x8E38E38E38E38E39 * (v139 - v17) < 2)
                  {
                    v161 = v139;
                  }
                  else
                  {
                    v164 = 9;
                    v165 = 1;
                    do
                    {
                      v166 = v162[v165];
                      if (v166)
                      {
                        memmove((void *)(*a3 + 4 * v159), (const void *)(v17[v164] + 4 * *(_QWORD *)(v141 + 8 * v165)), 4 * v166);
                        v162 = p_p;
                        v166 = *((_QWORD *)p_p + v165);
                        v17 = (uint64_t *)*v8;
                        v139 = (uint64_t *)v8[1];
                      }
                      v159 += v166;
                      *(_QWORD *)(v141 + 8 * v165++) += v166;
                      v164 += 9;
                    }
                    while (v165 < 0x8E38E38E38E38E39 * (v139 - v17));
                    v161 = v139;
                    v160 = v167;
                  }
                }
                ++v158;
              }
              while (v158 != v160);
            }
            if (v141)
            {
              v176 = (char *)v141;
              operator delete((void *)v141);
            }
            v72 = (char *)p_p;
            if (p_p)
            {
              v170 = (std::__shared_weak_count *)p_p;
LABEL_199:
              operator delete(v72);
            }
            goto LABEL_200;
          }
          continue;
        }
      }
      while (2)
      {
        v94 = v17[2];
        v95 = (v17[3] - v94) >> 3;
        v96 = v95 - a2;
        if (v95 <= a2)
        {
          v98 = 1;
        }
        else
        {
          if (v96 < 2)
          {
            v97 = a2;
            v98 = 1;
            goto LABEL_134;
          }
          v97 = (v96 & 0xFFFFFFFFFFFFFFFELL) + a2;
          v99 = (_QWORD *)(v94 + 8 * a2 + 8);
          v100 = v96 & 0xFFFFFFFFFFFFFFFELL;
          v101 = 1;
          v102 = 1;
          do
          {
            v101 *= *(v99 - 1);
            v102 *= *v99;
            v99 += 2;
            v100 -= 2;
          }
          while (v100);
          v98 = v102 * v101;
          if (v96 != (v96 & 0xFFFFFFFFFFFFFFFELL))
          {
LABEL_134:
            v103 = v95 - v97;
            v104 = (uint64_t *)(v94 + 8 * v97);
            do
            {
              v105 = *v104++;
              v98 *= v105;
              --v103;
            }
            while (v103);
          }
        }
        if (v71 < v171)
        {
          v71->__vftable = (std::__shared_weak_count_vtbl *)v98;
          v93 = (std::__shared_weak_count *)&v71->__shared_owners_;
        }
        else
        {
          v106 = v8;
          v107 = v18;
          v108 = (std::__shared_weak_count *)p_p;
          v109 = (char *)v71 - (_BYTE *)p_p;
          v110 = ((char *)v71 - (_BYTE *)p_p) >> 3;
          v111 = v110 + 1;
          if ((unint64_t)(v110 + 1) >> 61)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v112 = (_BYTE *)v171 - (_BYTE *)p_p;
          if (((_BYTE *)v171 - (_BYTE *)p_p) >> 2 > v111)
            v111 = v112 >> 2;
          if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFF8)
            v113 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v113 = v111;
          if (v113)
          {
            if (v113 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v114 = v113;
            v115 = operator new(8 * v113);
            v113 = v114;
          }
          else
          {
            v115 = 0;
          }
          v116 = (uint64_t *)&v115[8 * v110];
          *v116 = v98;
          v93 = (std::__shared_weak_count *)(v116 + 1);
          if (v71 == v108)
          {
            v18 = v107;
            v8 = v106;
          }
          else
          {
            v117 = (char *)v71 - (char *)v108 - 8;
            if (v117 < 0x168
              || (v120 = ((char *)&v71[-1].__shared_weak_owners_ - (char *)v108) & 0xFFFFFFFFFFFFFFF8,
                  &v115[v109 - 8 - v120] > &v115[v109 - 8])
              || (uint64_t *)((char *)&v71[-1].__shared_weak_owners_ - v120) > &v71[-1].__shared_weak_owners_
              || (unint64_t)((char *)v71 - &v115[v109]) < 0x20)
            {
              v118 = v71;
              v18 = v107;
              v8 = v106;
            }
            else
            {
              v121 = (v117 >> 3) + 1;
              v122 = 8 * (v121 & 0x3FFFFFFFFFFFFFFCLL);
              v118 = (std::__shared_weak_count *)((char *)v71 - v122);
              v116 = (uint64_t *)((char *)v116 - v122);
              v123 = &v115[8 * v110 - 16];
              v124 = &v71[-1].__shared_owners_;
              v125 = v121 & 0x3FFFFFFFFFFFFFFCLL;
              v18 = v107;
              do
              {
                v126 = *(_OWORD *)v124;
                *(v123 - 1) = *((_OWORD *)v124 - 1);
                *v123 = v126;
                v123 -= 2;
                v124 -= 4;
                v125 -= 4;
              }
              while (v125);
              v8 = v106;
              if (v121 == (v121 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_153;
            }
            do
            {
              shared_weak_owners = v118[-1].__shared_weak_owners_;
              v118 = (std::__shared_weak_count *)((char *)v118 - 8);
              *--v116 = shared_weak_owners;
            }
            while (v118 != v108);
          }
LABEL_153:
          p_p = v116;
          v170 = v93;
          v171 = &v115[8 * v113];
          if (v108)
            operator delete(v108);
        }
        v170 = v93;
        v17 += 9;
        v71 = v93;
        if (v17 == v18)
        {
          v17 = (uint64_t *)*v8;
          goto LABEL_163;
        }
        continue;
      }
    }
    if (v17 == v18)
      goto LABEL_200;
    v74 = 0;
    while (2)
    {
      v77 = v17[2];
      v76 = (uint64_t *)v17[3];
      if (v76 == (uint64_t *)v77 || !*v17)
      {
        v75 = 0;
      }
      else
      {
        v78 = (unint64_t)v76 - v77 - 8;
        if (v78 < 8)
        {
          v75 = 1;
          v79 = (uint64_t *)v17[2];
          goto LABEL_103;
        }
        v80 = (v78 >> 3) + 1;
        v79 = (uint64_t *)(v77 + 8 * (v80 & 0x3FFFFFFFFFFFFFFELL));
        v81 = (_QWORD *)(v77 + 8);
        v82 = v80 & 0x3FFFFFFFFFFFFFFELL;
        v83 = 1;
        v84 = 1;
        do
        {
          v83 *= *(v81 - 1);
          v84 *= *v81;
          v81 += 2;
          v82 -= 2;
        }
        while (v82);
        v75 = v84 * v83;
        if (v80 != (v80 & 0x3FFFFFFFFFFFFFFELL))
        {
          do
          {
LABEL_103:
            v85 = *v79++;
            v75 *= v85;
          }
          while (v79 != v76);
        }
        if (v75)
          memmove((void *)(*a3 + 4 * v74), (const void *)(*v17 + 4 * v17[8]), 4 * v75);
      }
      v74 += v75;
      v17 += 9;
      if (v17 == v18)
        goto LABEL_200;
      continue;
    }
  }
  __p = 0;
  v176 = 0;
  v177 = 0;
  if ((unint64_t)v58 >= 0x5555555555555551)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v72 = (char *)operator new(24 * v59);
  __p = v72;
  v177 = &v72[24 * v59];
  v73 = v72;
  do
  {
    *(_QWORD *)v73 = -1;
    *((_QWORD *)v73 + 1) = -1;
    *((_QWORD *)v73 + 2) = 1;
    v73 += 24;
  }
  while (v73 != &v72[24 * v59]);
  v176 = &v72[24 * v59];
  if (v17 != v18)
    goto LABEL_107;
LABEL_121:
  if (v72)
  {
    v176 = v72;
    goto LABEL_199;
  }
LABEL_200:
  v6 = v178;
  if (v178)
  {
    v179 = v178;
LABEL_202:
    operator delete(v6);
  }
}

void sub_191198A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  nitro::ndarray<float>::~ndarray(a10);
  if (a23)
    operator delete(a23);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::copy(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  std::__shared_weak_count_vtbl *v48;
  std::__shared_weak_count *v49;

  v5 = a1 + 16;
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24) - v4;
  if (v6)
  {
    v7 = v6 >> 3;
    v8 = *(_QWORD *)(a1 + 40);
    if (v7 <= 1)
      v7 = 1;
    if (v7 < 2)
    {
      v9 = 0;
      v10 = 0;
LABEL_10:
      v16 = v7 - v9;
      v17 = 8 * v9;
      v18 = (uint64_t *)(v8 + v17);
      v19 = (uint64_t *)(v4 + v17);
      do
      {
        v20 = *v19++;
        v21 = v20 - 1;
        v22 = *v18++;
        v10 += v22 * v21;
        --v16;
      }
      while (v16);
      goto LABEL_12;
    }
    v11 = 0;
    v12 = 0;
    v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
    v13 = (_QWORD *)(v4 + 8);
    v14 = (_QWORD *)(v8 + 8);
    v15 = v7 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v11 += *(v14 - 1) * (*(v13 - 1) - 1);
      v12 += *v14 * (*v13 - 1);
      v13 += 2;
      v14 += 2;
      v15 -= 2;
    }
    while (v15);
    v10 = v12 + v11;
    if (v7 != v9)
      goto LABEL_10;
  }
LABEL_12:
  v23 = (std::__shared_weak_count_vtbl *)operator new[]();
  v48 = v23;
  v24 = (std::__shared_weak_count *)operator new();
  v24->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3900;
  v24->__shared_owners_ = 0;
  v24->__shared_weak_owners_ = 0;
  v24[1].__vftable = v23;
  v49 = v24;
  v25 = *(_QWORD *)(a1 + 64);
  v26 = *(_QWORD *)(a1 + 16);
  v27 = *(_QWORD *)(a1 + 24) - v26;
  if (!v27)
  {
    v32 = 0;
    goto LABEL_24;
  }
  v28 = v27 >> 3;
  v29 = *(_QWORD *)(a1 + 40);
  if (v28 <= 1)
    v28 = 1;
  if (v28 >= 2)
  {
    v33 = 0;
    v34 = 0;
    v30 = v28 & 0xFFFFFFFFFFFFFFFELL;
    v35 = (_QWORD *)(v26 + 8);
    v36 = (_QWORD *)(v29 + 8);
    v37 = v28 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v33 += *(v36 - 1) * (*(v35 - 1) - 1);
      v34 += *v36 * (*v35 - 1);
      v35 += 2;
      v36 += 2;
      v37 -= 2;
    }
    while (v37);
    v31 = v34 + v33;
    if (v28 == v30)
      goto LABEL_23;
  }
  else
  {
    v30 = 0;
    v31 = 0;
  }
  v38 = v28 - v30;
  v39 = 8 * v30;
  v40 = (uint64_t *)(v29 + v39);
  v41 = (uint64_t *)(v26 + v39);
  do
  {
    v42 = *v41++;
    v43 = v42 - 1;
    v44 = *v40++;
    v31 += v44 * v43;
    --v38;
  }
  while (v38);
LABEL_23:
  v32 = 4 * v31 + 4;
LABEL_24:
  memcpy(v23, *(const void **)a1, v32 + v25);
  nitro::ndarray<int>::ndarray(a2, &v48, v5, a1 + 40, v25);
  v45 = v49;
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v47 = __ldaxr(p_shared_owners);
    while (__stlxr(v47 - 1, p_shared_owners));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
}

void sub_191198DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191198DCC(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  MEMORY[0x19401CD78](v1, 0x1000C8052888210);
  __cxa_rethrow();
}

void sub_191198DF0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::concat(std::vector<nitro::ndarray<int>> const&,unsigned long)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"arr.shape().size()", 18);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"outshape.size()", 15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 182, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::ndarray<int>::concat(std::vector<nitro::ndarray<int>> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911990FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::concat(std::vector<nitro::ndarray<int>> const&,unsigned long)::{lambda(void)#2}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"arr.shape()[i]", 14);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"outshape[i]", 11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 184, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::ndarray<int>::concat(std::vector<nitro::ndarray<int>> const&,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19119945C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::concat(std::vector<nitro::ndarray<int>> const&,unsigned long)::{lambda(void)#3}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"arrs[arrid].num_elem()", 22);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"contiguous_copy_size[arrid] * ncopies", 37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 236, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::ndarray<int>::concat(std::vector<nitro::ndarray<int>> const&,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911997BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::slice(_QWORD *a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>, __n128 a4@<Q0>)
{
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void *__p[2];
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v13 = 0uLL;
  v14 = 0;
  nitro::ndarray_impl::compute_slice(a2, a1 + 2, a1 + 5, a1[8], &v6, a4);
  v13 = v6;
  v14 = v7;
  *(_OWORD *)__p = v8;
  v12 = v9;
  nitro::ndarray<int>::ndarray(a3, a1, (uint64_t)&v13, (uint64_t)__p, v10);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((_QWORD)v13)
  {
    *((_QWORD *)&v13 + 1) = v13;
    operator delete((void *)v13);
  }
}

void sub_1911998C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;
  void *v20;

  if (__p)
  {
    operator delete(__p);
    v20 = *(void **)(v18 - 48);
    if (!v20)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v20 = *(void **)(v18 - 48);
    if (!v20)
      goto LABEL_3;
  }
  *(_QWORD *)(v18 - 40) = v20;
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

uint64_t *nitro::ndarray<int>::assign<int>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = (char *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == v4)
    return a1;
  v7 = v5 <= 1 ? 1 : (v3 - v4) >> 3;
  if (*(_QWORD *)v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = *(_QWORD *)&v4[8 * v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<int>::assign<int>(nitro::ndarray<int> const&)::{lambda(void)#1}::operator()();
  if (v3 != v4 && *a1)
  {
    v12 = v3 - v4 - 8;
    if (v12 >= 8)
    {
      v15 = (v12 >> 3) + 1;
      v14 = &v4[8 * (v15 & 0x3FFFFFFFFFFFFFFELL)];
      v16 = v4 + 8;
      v17 = 1;
      v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
      v19 = 1;
      do
      {
        v17 *= *(v16 - 1);
        v19 *= *v16;
        v16 += 2;
        v18 -= 2;
      }
      while (v18);
      v13 = v19 * v17;
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_21:
        if (v13)
          nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::assign<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(a1, a2);
        return a1;
      }
    }
    else
    {
      v13 = 1;
      v14 = (char *)a1[2];
    }
    do
    {
      v20 = *(_QWORD *)v14;
      v14 += 8;
      v13 *= v20;
    }
    while (v14 != v3);
    goto LABEL_21;
  }
  return a1;
}

uint64_t nitro::ndarray<int>::ndarray(uint64_t a1, uint64_t a2, char **a3, char **a4, uint64_t a5)
{
  char **v10;
  char **v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  std::__shared_weak_count *v27;
  void *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  void *__dst;
  std::__shared_weak_count *v66;

  *(_OWORD *)(a1 + 16) = 0u;
  v10 = (char **)(a1 + 16);
  v11 = (char **)(a1 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  __dst = 0;
  v66 = 0;
  v12 = operator new[]();
  std::shared_ptr<int>::reset[abi:ne180100]<int,std::default_delete<int []>,void>(&__dst, v12);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13 != *(_QWORD *)a2)
    memmove(__dst, *(const void **)a2, v13 - *(_QWORD *)a2);
  if (v10 != a3)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v10, *a3, a3[1], (a3[1] - *a3) >> 3);
  v14 = *(char **)(a1 + 16);
  v15 = *(char **)(a1 + 24);
  v16 = v15 - v14;
  if (v15 == v14)
  {
    v17 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2;
    v18 = v17 - a5;
    if (v17 != a5)
    {
      v19 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)v15 >= v19)
      {
        v21 = v16 >> 3;
        v22 = v19 - (_QWORD)v14;
        if (v22 >> 2 <= (unint64_t)((v16 >> 3) + 1))
          v23 = v21 + 1;
        else
          v23 = v22 >> 2;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v25 = (char *)operator new(8 * v24);
        v26 = &v25[8 * v21];
        *(_QWORD *)(a1 + 16) = v26;
        *(_QWORD *)v26 = v18;
        v20 = v26 + 8;
        *(_QWORD *)(a1 + 24) = v20;
        *(_QWORD *)(a1 + 32) = &v25[8 * v24];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *(_QWORD *)v15 = v18;
        v20 = v15 + 8;
      }
      *(_QWORD *)(a1 + 24) = v20;
    }
  }
  if (v11 != a4)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v11, *a4, a4[1], (a4[1] - *a4) >> 3);
  *(_QWORD *)(a1 + 64) = a5;
  v28 = __dst;
  v27 = v66;
  if (v66)
  {
    p_shared_owners = (unint64_t *)&v66->__shared_owners_;
    do
      v30 = __ldxr(p_shared_owners);
    while (__stxr(v30 + 1, p_shared_owners));
  }
  v31 = *(std::__shared_weak_count **)(a1 + 8);
  *(_QWORD *)a1 = v28;
  *(_QWORD *)(a1 + 8) = v27;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v35 = *(_QWORD *)(a1 + 40);
  v34 = *(_QWORD *)(a1 + 48);
  v37 = *(char **)(a1 + 16);
  v36 = *(char **)(a1 + 24);
  v38 = v34 - v35;
  if (v34 != v35)
  {
    v34 = *(_QWORD *)(a1 + 40);
    goto LABEL_31;
  }
  v40 = v36 - v37;
  if (v36 != v37)
  {
    v41 = v38 >> 3;
    if (v40 >> 3 > v41)
    {
      std::vector<unsigned long long>::__append((uint64_t)v11, (v40 >> 3) - v41);
      v37 = *(char **)(a1 + 16);
      v36 = *(char **)(a1 + 24);
      v34 = *(_QWORD *)(a1 + 40);
      v40 = v36 - v37;
    }
    *(_QWORD *)(v34 + (((v40 << 29) - 0x100000000) >> 29)) = 1;
    if ((int)((unint64_t)v40 >> 3) >= 2)
    {
      v42 = 8 * (((unint64_t)v40 >> 3) - 2);
      v43 = *(_QWORD *)(v42 + v34 + 8);
      do
      {
        v43 *= *(_QWORD *)&v37[v42 + 8];
        *(_QWORD *)(v34 + v42) = v43;
        v42 -= 8;
      }
      while (v42 != -8);
    }
LABEL_31:
    v39 = v36;
    v36 = v37;
    if (v39 != v37)
      goto LABEL_41;
  }
  *(_QWORD *)(a1 + 24) = v36;
  *(_QWORD *)(a1 + 48) = v34;
  v39 = v36;
  *(_QWORD *)(a1 + 64) = 0;
LABEL_41:
  v44 = *v10;
  if (v39 == *v10)
  {
    v48 = 0;
    goto LABEL_53;
  }
  v45 = (v39 - *v10) >> 3;
  if (v45 <= 1)
    v45 = 1;
  if (v45 >= 2)
  {
    v49 = 0;
    v50 = 0;
    v46 = v45 & 0xFFFFFFFFFFFFFFFELL;
    v51 = v44 + 8;
    v52 = (_QWORD *)(v34 + 8);
    v53 = v45 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v49 += *(v52 - 1) * (*(v51 - 1) - 1);
      v50 += *v52 * (*v51 - 1);
      v51 += 2;
      v52 += 2;
      v53 -= 2;
    }
    while (v53);
    v47 = v50 + v49;
    if (v45 == v46)
      goto LABEL_52;
  }
  else
  {
    v46 = 0;
    v47 = 0;
  }
  v54 = v45 - v46;
  v55 = 8 * v46;
  v56 = (uint64_t *)(v34 + v55);
  v57 = &v44[v55];
  do
  {
    v58 = *(_QWORD *)v57;
    v57 += 8;
    v59 = v58 - 1;
    v60 = *v56++;
    v47 += v60 * v59;
    --v54;
  }
  while (v54);
LABEL_52:
  v48 = v47 + 1;
LABEL_53:
  if (*(_QWORD *)(a1 + 64) + v48 > (unint64_t)((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2))
    nitro::ndarray<int>::ndarray(std::vector<int> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator()();
  v61 = v66;
  if (v66)
  {
    v62 = (unint64_t *)&v66->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  return a1;
}

void sub_191199DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  v7 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v3 + 48) = v7;
    operator delete(v7);
  }
  v8 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v3 + 24) = v8;
    operator delete(v8);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::ndarray(std::vector<int> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"last_index() + m_start <= elements.size()", 41);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 131, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::ndarray<int>::ndarray(std::vector<int> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19119A09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::ndarray(std::vector<int> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 131, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19119A240(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19119A254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19119A24CLL);
}

void nitro::ndarray<int>::concat(std::vector<nitro::ndarray<int>> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 182, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19119A3AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19119A3C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19119A3B8);
}

void nitro::ndarray<int>::concat(std::vector<nitro::ndarray<int>> const&,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 184, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19119A518(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19119A52C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19119A524);
}

void nitro::ndarray<int>::concat(std::vector<nitro::ndarray<int>> const&,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 236, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19119A684(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19119A698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19119A690);
}

void nitro::ndarray<int>::assign<int>(nitro::ndarray<int> const&)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::ndarray<int>& nitro::ndarray<int>::assign<int>(nitro::ndarray<int> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19119A918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

__n128 nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::assign<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  _DWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  __n128 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  __n128 *v49;
  __n128 *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  __n128 *v62;
  __n128 *v63;
  unint64_t v64;
  __n128 result;
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  __n128 *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  __n128 *v84;
  __n128 *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  _DWORD *v94;
  uint64_t v95;
  uint64_t v96;
  _DWORD *v97;
  __n128 *v99;
  __n128 *v100;
  unint64_t v101;
  __n128 v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  unint64_t v141;
  __n128 *v142;
  __n128 *v143;
  __n128 *v144;
  __n128 *v145;
  unint64_t v146;
  __n128 v147;
  uint64_t v148;
  __n128 *v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v158;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return result;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::assign<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>& nitro::ndarray<int>::assign<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 != (char *)v4)
  {
    v13 = *a1;
    if (*a1)
    {
      if (v12 - 8 >= 8)
      {
        v16 = ((v12 - 8) >> 3) + 1;
        v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
        v17 = v4 + 1;
        v18 = 1;
        v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
        v20 = 1;
        do
        {
          v18 *= *(v17 - 1);
          v20 *= *v17;
          v17 += 2;
          v19 -= 2;
        }
        while (v19);
        v14 = v20 * v18;
        if (v16 == (v16 & 0x3FFFFFFFFFFFFFFELL))
          goto LABEL_21;
      }
      else
      {
        v14 = 1;
        v15 = (unint64_t *)a1[2];
      }
      do
      {
        v21 = *v15++;
        v14 *= v21;
      }
      while (v15 != (unint64_t *)v3);
LABEL_21:
      if (!v14)
        return result;
      v22 = (uint64_t)v12 >> 3;
      v158 = *a1;
      if ((uint64_t)v12 >> 3 != 3)
      {
        if (v22 != 2)
        {
          if (v22 == 1)
          {
            v23 = *v4;
            if (!*v4)
              return result;
            v24 = a2[8];
            v25 = a1[8];
            v26 = *a2;
            v27 = *(_QWORD *)a1[5];
            v28 = *(_QWORD *)a2[5];
            if (v23 < 0xC)
              goto LABEL_27;
            v29 = 0;
            if (v27 != 1 || v28 != 1)
              goto LABEL_28;
            v142 = (__n128 *)(4 * v25 + v13);
            v143 = (__n128 *)(4 * v24 + v26);
            if ((unint64_t)((char *)v142 - (char *)v143) < 0x20)
            {
LABEL_27:
              v29 = 0;
            }
            else
            {
              v29 = v23 & 0xFFFFFFFFFFFFFFF8;
              v24 += v23 & 0xFFFFFFFFFFFFFFF8;
              v25 += v23 & 0xFFFFFFFFFFFFFFF8;
              v144 = v143 + 1;
              v145 = v142 + 1;
              v146 = v23 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                result = v144[-1];
                v147 = *v144;
                v145[-1] = result;
                *v145 = v147;
                v144 += 2;
                v145 += 2;
                v146 -= 8;
              }
              while (v146);
              if (v23 == v29)
                return result;
            }
LABEL_28:
            v30 = v23 - v29;
            v31 = (_DWORD *)(v26 + 4 * v24);
            v32 = 4 * v27;
            v33 = (_DWORD *)(v13 + 4 * v25);
            do
            {
              *v33 = *v31;
              v31 += v28;
              v33 = (_DWORD *)((char *)v33 + v32);
              --v30;
            }
            while (v30);
            return result;
          }
          if ((v12 & 0x8000000000000000) != 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v103 = operator new(v12);
          bzero(v103, v12 & 0xFFFFFFFFFFFFFFF8);
          v104 = *a2;
          if (v12 >> 3 <= 1)
            v105 = 1;
          else
            v105 = v12 >> 3;
          v106 = a2[5];
          v107 = a2[8];
          v108 = v105 & 0x1FFFFFFFFFFFFFFELL;
          v109 = a1[5];
          while (v105 >= 2)
          {
            v112 = 0;
            v113 = 0;
            v114 = v105 & 0x1FFFFFFFFFFFFFFELL;
            v115 = (_QWORD *)(v109 + 8);
            v116 = v103 + 1;
            do
            {
              v112 += *(v115 - 1) * *(v116 - 1);
              v113 += *v115 * *v116;
              v116 += 2;
              v115 += 2;
              v114 -= 2;
            }
            while (v114);
            v110 = v113 + v112;
            v111 = v105 & 0x1FFFFFFFFFFFFFFELL;
            v13 = v158;
            if (v105 != v108)
              goto LABEL_84;
LABEL_86:
            if (v105 < 2)
            {
              v124 = 0;
              v125 = 0;
LABEL_91:
              v131 = v105 - v125;
              v132 = v125;
              v133 = (uint64_t *)(v106 + 8 * v125);
              v134 = &v103[v132];
              do
              {
                v136 = *v134++;
                v135 = v136;
                v137 = *v133++;
                v124 += v137 * v135;
                --v131;
              }
              while (v131);
              goto LABEL_93;
            }
            v126 = 0;
            v127 = 0;
            v128 = v105 & 0x1FFFFFFFFFFFFFFELL;
            v129 = (_QWORD *)(v106 + 8);
            v130 = v103 + 1;
            do
            {
              v126 += *(v129 - 1) * *(v130 - 1);
              v127 += *v129 * *v130;
              v130 += 2;
              v129 += 2;
              v128 -= 2;
            }
            while (v128);
            v124 = v127 + v126;
            v125 = v105 & 0x1FFFFFFFFFFFFFFELL;
            v13 = v158;
            if (v105 != v108)
              goto LABEL_91;
LABEL_93:
            *(_DWORD *)(v13 + 4 * v110) = *(_DWORD *)(v104 + 4 * (v107 + v124));
            if ((int)(v12 >> 3) >= 1)
            {
              v138 = (v12 >> 3) + 1;
              v139 = v12 >> 3;
              while (1)
              {
                v140 = (v138 - 2);
                v141 = v103[v140] + 1;
                v103[v140] = v141;
                if (v141 < v4[v140])
                  break;
                v103[(v138 - 2)] = 0;
                --v139;
                if ((unint64_t)--v138 <= 1)
                  goto LABEL_99;
              }
              if (v139 > 0)
                continue;
            }
LABEL_99:
            operator delete(v103);
            return result;
          }
          v110 = 0;
          v111 = 0;
LABEL_84:
          v117 = v105 - v111;
          v118 = v111;
          v119 = (uint64_t *)(v109 + 8 * v111);
          v120 = &v103[v118];
          do
          {
            v122 = *v120++;
            v121 = v122;
            v123 = *v119++;
            v110 += v123 * v121;
            --v117;
          }
          while (v117);
          goto LABEL_86;
        }
        v34 = *v4;
        if (!*v4)
          return result;
        v35 = 0;
        v36 = a2[8];
        v37 = a1[8];
        v38 = v4[1];
        v39 = *a2;
        v40 = (uint64_t *)a2[5];
        v41 = (uint64_t *)a1[5];
        v42 = *v41;
        v43 = (__n128 *)(v13 + 4 * v37);
        v44 = 4 * *v41;
        v45 = *a2 + 4 * v36;
        v46 = *v40;
        v47 = 4 * *v40;
        v48 = v38 & 0xFFFFFFFFFFFFFFF8;
        v49 = v43 + 1;
        v50 = (__n128 *)(v45 + 16);
        while (!v38)
        {
LABEL_33:
          v37 += v42;
          v36 += v46;
          ++v35;
          v49 = (__n128 *)((char *)v49 + v44);
          v50 = (__n128 *)((char *)v50 + v47);
          if (v35 == v34)
            return result;
        }
        v51 = v41[1];
        v52 = v40[1];
        if (v38 >= 8)
        {
          v53 = 0;
          if (v51 == 1 && v52 == 1)
          {
            v54 = v36;
            v55 = v37;
            if ((unint64_t)v43->n128_u64 + v44 * v35 - v45 - v47 * v35 >= 0x20)
            {
              v54 = v36 + v48 * v52;
              v62 = v50;
              v63 = v49;
              v64 = v38 & 0xFFFFFFFFFFFFFFF8;
              v55 = v37 + v48 * v51;
              do
              {
                result = v62[-1];
                v66 = *v62;
                v63[-1] = result;
                *v63 = v66;
                v63 += 2;
                v62 += 2;
                v64 -= 8;
              }
              while (v64);
              v53 = v38 & 0xFFFFFFFFFFFFFFF8;
              if (v38 == v48)
                goto LABEL_33;
            }
            goto LABEL_38;
          }
        }
        else
        {
          v53 = 0;
        }
        v54 = v36;
        v55 = v37;
LABEL_38:
        v56 = v38 - v53;
        v57 = (_DWORD *)(v39 + 4 * v54);
        v58 = 4 * v52;
        v59 = 4 * v51;
        v60 = (_DWORD *)(v158 + 4 * v55);
        do
        {
          *v60 = *v57;
          v57 = (_DWORD *)((char *)v57 + v58);
          v60 = (_DWORD *)((char *)v60 + v59);
          --v56;
        }
        while (v56);
        goto LABEL_33;
      }
      v154 = *v4;
      if (!*v4)
        return result;
      v67 = 0;
      v68 = a2[8];
      v69 = a1[8];
      v70 = v4[1];
      v71 = (uint64_t *)a1[5];
      v150 = (uint64_t *)a2[5];
      v151 = a1[2];
      v152 = *v150;
      v153 = *v71;
      v156 = 4 * *v71;
      v155 = 4 * *v150;
      v148 = 4 * v68;
      v149 = (__n128 *)(v13 + 4 * v69);
      v72 = v149 + 1;
      v73 = 4 * v68 + 16;
      while (!v70)
      {
LABEL_53:
        v69 += v153;
        v68 += v152;
        ++v67;
        v72 = (__n128 *)((char *)v72 + v156);
        v73 += v155;
        if (v67 == v154)
          return result;
      }
      v74 = 0;
      v75 = *(_QWORD *)(v151 + 16);
      v76 = *a2;
      v77 = v71[1];
      v78 = v150[1];
      v79 = 4 * v77;
      v80 = v148 + v155 * v67 + *a2;
      v81 = 4 * v78;
      v82 = v75 & 0xFFFFFFFFFFFFFFF8;
      v83 = a2[5];
      v84 = (__n128 *)(*a2 + v73);
      v85 = v72;
      v86 = v68;
      v87 = v69;
      while (!v75)
      {
LABEL_56:
        v87 += v77;
        v86 += v78;
        ++v74;
        v85 = (__n128 *)((char *)v85 + v79);
        v84 = (__n128 *)((char *)v84 + v81);
        if (v74 == v70)
          goto LABEL_53;
      }
      v88 = v71[2];
      v89 = *(_QWORD *)(v83 + 16);
      if (v75 >= 8)
      {
        v90 = 0;
        if (v88 == 1 && v89 == 1)
        {
          v91 = v86;
          v92 = v87;
          if ((unint64_t)v149->n128_u64 + v156 * v67 + v79 * v74 - v80 - v81 * v74 >= 0x20)
          {
            v91 = v86 + v82 * v89;
            v99 = v84;
            v100 = v85;
            v101 = v75 & 0xFFFFFFFFFFFFFFF8;
            v92 = v87 + v82 * v88;
            do
            {
              result = v99[-1];
              v102 = *v99;
              v100[-1] = result;
              *v100 = v102;
              v100 += 2;
              v99 += 2;
              v101 -= 8;
            }
            while (v101);
            v90 = v75 & 0xFFFFFFFFFFFFFFF8;
            v13 = v158;
            if (v75 == v82)
              goto LABEL_56;
          }
          goto LABEL_61;
        }
      }
      else
      {
        v90 = 0;
      }
      v91 = v86;
      v92 = v87;
LABEL_61:
      v93 = v75 - v90;
      v94 = (_DWORD *)(v76 + 4 * v91);
      v95 = 4 * v89;
      v96 = 4 * v88;
      v97 = (_DWORD *)(v13 + 4 * v92);
      do
      {
        *v97 = *v94;
        v94 = (_DWORD *)((char *)v94 + v95);
        v97 = (_DWORD *)((char *)v97 + v96);
        --v93;
      }
      while (v93);
      goto LABEL_56;
    }
  }
  return result;
}

void sub_19119B074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>& nitro::ndarray<int>::assign<int>(nitro::ndarray<int> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19119B1CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19119B1E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19119B1D8);
}

void nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::assign<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>& nitro::ndarray<int>::assign<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::assign<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>& nitro::ndarray<int>::assign<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19119B460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::assign<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>& nitro::ndarray<int>::assign<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19119B604(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19119B618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19119B610);
}

void nitro::ndarray<half>::concat(uint64_t *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t *v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  __n128 v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64x2_t *v63;
  int64x2_t v64;
  uint64x2_t v65;
  unint64_t v66;
  int64x2_t v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t *v89;
  std::__shared_weak_count *v90;
  unint64_t *p_shared_owners;
  unint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  std::__shared_weak_count *v108;
  int64_t v109;
  uint64_t v110;
  unint64_t v111;
  int64_t v112;
  unint64_t v113;
  unint64_t v114;
  _BYTE *v115;
  uint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  uint64_t shared_weak_owners;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _OWORD *v123;
  uint64_t *v124;
  uint64_t v125;
  __int128 v126;
  uint64_t *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t *v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  unint64_t v146;
  char *v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t *v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  _QWORD *v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void *p_p;
  std::__shared_weak_count *v170;
  void *v171;
  void *v172;
  void *v173;
  void *v174;
  void *__p;
  char *v176;
  char *v177;
  void *v178;
  _BYTE *v179;
  char *v180;
  unint64_t v181;
  _QWORD v182[2];

  v3 = *a1;
  v4 = a1[1];
  v5 = 0x8E38E38E38E38E39 * ((v4 - *a1) >> 3);
  if (v5 == 1)
  {
    nitro::ndarray<half>::copy(*a1, a3);
    return;
  }
  if (!v5)
  {
    p_p = 0;
    v170 = 0;
    v171 = 0;
    v178 = 0;
    v179 = 0;
    v180 = 0;
    __p = 0;
    v176 = 0;
    v177 = 0;
    nitro::ndarray<half>::ndarray((uint64_t)a3, (uint64_t)&p_p, (char **)&v178, (char **)&__p, 0);
    if (__p)
    {
      v176 = (char *)__p;
      operator delete(__p);
    }
    if (v178)
    {
      v179 = v178;
      operator delete(v178);
    }
    v6 = p_p;
    if (p_p)
    {
      v170 = (std::__shared_weak_count *)p_p;
      goto LABEL_202;
    }
    return;
  }
  v8 = a1;
  v179 = 0;
  v180 = 0;
  v178 = 0;
  v10 = *(_BYTE **)(v3 + 16);
  v9 = *(_BYTE **)(v3 + 24);
  v11 = v9 - v10;
  if (v9 == v10)
  {
    v13 = 0;
    v12 = 0;
  }
  else
  {
    if (v11 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v12 = (char *)operator new(v9 - v10);
    v13 = &v12[8 * (v11 >> 3)];
    v178 = v12;
    v180 = v13;
    memcpy(v12, v10, v11);
    v179 = v13;
  }
  *(_QWORD *)&v12[8 * a2] = 0;
  if (v3 != v4)
  {
    v14 = v13;
    do
    {
      __p = (void *)((uint64_t)(*(_QWORD *)(v3 + 24) - *(_QWORD *)(v3 + 16)) >> 3);
      v182[0] = (v14 - v12) >> 3;
      if (__p != (void *)v182[0])
      {
        p_p = &__p;
        v170 = (std::__shared_weak_count *)v182;
        nitro::ndarray<half>::concat(std::vector<nitro::ndarray<half>> const&,unsigned long)::{lambda(void)#1}::operator()();
      }
      if (v14 == v12)
      {
        v14 = v12;
      }
      else
      {
        v15 = 0;
        do
        {
          if (a2 == v15)
          {
            *(_QWORD *)&v12[8 * a2] += *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * a2);
          }
          else
          {
            __p = 0;
            __p = *(void **)(*(_QWORD *)(v3 + 16) + 8 * v15);
            v182[0] = 0;
            v182[0] = *(_QWORD *)&v12[8 * v15];
            if (__p != (void *)v182[0])
            {
              p_p = &__p;
              v170 = (std::__shared_weak_count *)v182;
              nitro::ndarray<half>::concat(std::vector<nitro::ndarray<half>> const&,unsigned long)::{lambda(void)#2}::operator()();
            }
          }
          ++v15;
          v14 = v13;
        }
        while (v15 < (v13 - v12) >> 3);
      }
      v3 += 72;
    }
    while (v3 != v4);
  }
  nitro::ndarray<half>::init_from_shape((uint64_t **)&v178, a3);
  v17 = (uint64_t *)*v8;
  v18 = (uint64_t *)v8[1];
  if ((uint64_t *)*v8 == v18)
  {
LABEL_63:
    v57 = 1;
    goto LABEL_65;
  }
  v19 = (uint64_t *)*v8;
  while (1)
  {
    v20 = (char *)v19[2];
    v21 = (char *)v19[3];
    v22 = v21 - v20;
    if (v21 == v20)
    {
      v25 = (unint64_t *)v19[5];
      goto LABEL_50;
    }
    v23 = *v19;
    if (*v19)
    {
      if ((unint64_t)(v22 - 8) < 8)
      {
        v23 = 1;
        v24 = (char *)v19[2];
        do
        {
LABEL_39:
          v31 = *(_QWORD *)v24;
          v24 += 8;
          v23 *= v31;
        }
        while (v24 != v21);
        goto LABEL_40;
      }
      v26 = ((unint64_t)(v22 - 8) >> 3) + 1;
      v24 = &v20[8 * (v26 & 0x3FFFFFFFFFFFFFFELL)];
      v27 = v20 + 8;
      v28 = v26 & 0x3FFFFFFFFFFFFFFELL;
      v29 = 1;
      v30 = 1;
      do
      {
        v29 *= *(v27 - 1);
        v30 *= *v27;
        v27 += 2;
        v28 -= 2;
      }
      while (v28);
      v23 = v30 * v29;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_39;
    }
LABEL_40:
    v32 = v22 >> 3;
    v25 = (unint64_t *)v19[5];
    if (v32 <= 1)
      v32 = 1;
    if (v32 < 2)
    {
      v33 = 0;
      v34 = 0;
LABEL_47:
      v40 = v32 - v33;
      v41 = 8 * v33;
      v42 = (uint64_t *)&v25[v33];
      v43 = (uint64_t *)&v20[v41];
      do
      {
        v44 = *v43++;
        v45 = v44 - 1;
        v46 = *v42++;
        v34 += v46 * v45;
        --v40;
      }
      while (v40);
      goto LABEL_49;
    }
    v35 = 0;
    v36 = 0;
    v33 = v32 & 0xFFFFFFFFFFFFFFFELL;
    v37 = v20 + 8;
    v38 = v25 + 1;
    v39 = v32 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v35 += *(v38 - 1) * (*(v37 - 1) - 1);
      v36 += *v38 * (*v37 - 1);
      v37 += 2;
      v38 += 2;
      v39 -= 2;
    }
    while (v39);
    v34 = v36 + v35;
    if (v32 != v33)
      goto LABEL_47;
LABEL_49:
    if (v23 != v34 + 1)
      break;
LABEL_50:
    v47 = v19[6] - (_QWORD)v25;
    if (v47)
    {
      if (!*v25)
        break;
      if ((unint64_t)v47 >= 0x10)
      {
        v48 = v47 >> 3;
        v49 = v48 <= 2 ? 2 : v48;
        v50 = v25[1];
        if (!v50 || *v25 < v50)
          break;
        v51 = 0;
        v52 = v49 - 2;
        do
        {
          v53 = v51;
          if (v52 == v51)
            break;
          v54 = &v25[v51];
          v55 = v54[2];
          if (!v55)
            break;
          v56 = v54[1];
          v51 = v53 + 1;
        }
        while (v56 >= v55);
        if (v53 + 2 < v48)
          break;
      }
    }
    v19 += 9;
    if (v19 == v18)
      goto LABEL_63;
  }
  v57 = 0;
LABEL_65:
  v58 = v179 - (_BYTE *)v178;
  if (v179 == v178)
  {
    if ((v57 & 1) != 0)
    {
      v61 = 0;
      goto LABEL_81;
    }
    v72 = 0;
    __p = 0;
    v176 = 0;
    v177 = 0;
    if (v17 == v18)
      goto LABEL_121;
LABEL_107:
    v86 = 0;
    do
    {
      v87 = *(_QWORD *)(v17[2] + 8 * a2);
      v88 = v87 + v86;
      v181 = v86;
      v182[0] = v87 + v86;
      if (v87 + v86 <= v86)
      {
        p_p = v182;
        v170 = (std::__shared_weak_count *)&v181;
        nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long,unsigned long)::{lambda(void)#2}::operator()();
      }
      v89 = (unint64_t *)((char *)__p + 24 * a2);
      *v89 = v86;
      v89[1] = v88;
      v89[2] = 1;
      nitro::ndarray<half>::slice(a3, (__int128 **)&__p, &p_p, v16);
      nitro::ndarray<half>::assign<half>((uint64_t *)&p_p, v17);
      if (v173)
      {
        v174 = v173;
        operator delete(v173);
      }
      if (v171)
      {
        v172 = v171;
        operator delete(v171);
      }
      v90 = v170;
      if (v170)
      {
        p_shared_owners = (unint64_t *)&v170->__shared_owners_;
        do
          v92 = __ldaxr(p_shared_owners);
        while (__stlxr(v92 - 1, p_shared_owners));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      v86 += *(_QWORD *)(v17[2] + 8 * a2);
      v17 += 9;
    }
    while (v17 != v18);
    v72 = (char *)__p;
    goto LABEL_121;
  }
  v59 = v58 >> 3;
  if ((unint64_t)(v58 >> 3) <= 1)
    v60 = 1;
  else
    v60 = v58 >> 3;
  if (v60 >= 4)
  {
    v62 = v60 & 0xFFFFFFFFFFFFFFFCLL;
    v63 = (uint64x2_t *)((char *)v178 + 16);
    v64 = 0uLL;
    v65 = (uint64x2_t)vdupq_n_s64(1uLL);
    v66 = v60 & 0xFFFFFFFFFFFFFFFCLL;
    v67 = 0uLL;
    do
    {
      v64 = vsubq_s64(v64, (int64x2_t)vcgtq_u64(v63[-1], v65));
      v67 = vsubq_s64(v67, (int64x2_t)vcgtq_u64(*v63, v65));
      v63 += 2;
      v66 -= 4;
    }
    while (v66);
    v61 = vaddvq_s64(vaddq_s64(v67, v64));
    if (v60 != v62)
      goto LABEL_76;
  }
  else
  {
    v61 = 0;
    v62 = 0;
LABEL_76:
    v68 = v60 - v62;
    v69 = (unint64_t *)((char *)v178 + 8 * v62);
    do
    {
      v70 = *v69++;
      if (v70 > 1)
        ++v61;
      --v68;
    }
    while (v68);
  }
  if ((v57 & 1) != 0)
  {
LABEL_81:
    if (a2 && v61 != 1)
    {
      p_p = 0;
      v170 = 0;
      v171 = 0;
      if (v18 == v17)
        goto LABEL_163;
      if ((0x8E38E38E38E38E39 * (v18 - v17)) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v71 = (std::__shared_weak_count *)operator new(0x71C71C71C71C71C8 * (v18 - v17));
      p_p = v71;
      v170 = v71;
      v171 = &v71[0x4BDA12F684BDA13 * (v18 - v17)];
      if (v17 == v18)
      {
LABEL_163:
        v128 = v17[2];
        v127 = (uint64_t *)v17[3];
        if (v127 == (uint64_t *)v128 || !*v17)
        {
          v130 = 0;
        }
        else
        {
          v129 = (unint64_t)v127 - v128 - 8;
          if (v129 < 8)
          {
            v130 = 1;
            v131 = (uint64_t *)v17[2];
            goto LABEL_171;
          }
          v132 = (v129 >> 3) + 1;
          v131 = (uint64_t *)(v128 + 8 * (v132 & 0x3FFFFFFFFFFFFFFELL));
          v133 = (_QWORD *)(v128 + 8);
          v134 = 1;
          v135 = v132 & 0x3FFFFFFFFFFFFFFELL;
          v136 = 1;
          do
          {
            v134 *= *(v133 - 1);
            v136 *= *v133;
            v133 += 2;
            v135 -= 2;
          }
          while (v135);
          v130 = v136 * v134;
          if (v132 != (v132 & 0x3FFFFFFFFFFFFFFELL))
          {
            do
            {
LABEL_171:
              v137 = *v131++;
              v130 *= v137;
            }
            while (v131 != v127);
          }
        }
        v138 = *(_QWORD *)p_p;
        v139 = (uint64_t *)v8[1];
        v140 = v130 / *(_QWORD *)p_p;
        v141 = 0;
        if (v139 == v17)
        {
          v154 = 0x8E38E38E38E38E39 * (v139 - v17);
          __p = 0;
          v176 = 0;
          v177 = 0;
          v139 = v17;
          goto LABEL_191;
        }
        while (2)
        {
          v182[0] = 0;
          v142 = &v17[9 * v141];
          v144 = (char *)v142[2];
          v143 = (char *)v142[3];
          if (v143 == v144)
          {
            v145 = 0;
          }
          else
          {
            v145 = v17[9 * v141];
            if (v145)
            {
              v146 = v143 - v144 - 8;
              if (v146 < 8)
              {
                v145 = 1;
                v147 = v144;
                goto LABEL_181;
              }
              v148 = (v146 >> 3) + 1;
              v147 = &v144[8 * (v148 & 0x3FFFFFFFFFFFFFFELL)];
              v149 = v144 + 8;
              v150 = v148 & 0x3FFFFFFFFFFFFFFELL;
              v151 = 1;
              v152 = 1;
              do
              {
                v151 *= *(v149 - 1);
                v152 *= *v149;
                v149 += 2;
                v150 -= 2;
              }
              while (v150);
              v145 = v152 * v151;
              if (v148 != (v148 & 0x3FFFFFFFFFFFFFFELL))
              {
                do
                {
LABEL_181:
                  v153 = *(_QWORD *)v147;
                  v147 += 8;
                  v145 *= v153;
                }
                while (v147 != v143);
              }
            }
          }
          v181 = 0;
          v182[0] = v145;
          v181 = *((_QWORD *)p_p + v141) * v140;
          if (v145 != v181)
          {
            __p = v182;
            v176 = (char *)&v181;
            nitro::ndarray<half>::concat(std::vector<nitro::ndarray<half>> const&,unsigned long)::{lambda(void)#3}::operator()();
          }
          ++v141;
          v154 = 0x8E38E38E38E38E39 * (v139 - v17);
          if (v141 >= v154)
          {
            __p = 0;
            v176 = 0;
            v177 = 0;
            if (v139 == v17)
            {
              v141 = 0;
            }
            else
            {
              if (v154 >> 61)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v141 = (unint64_t)operator new(0x71C71C71C71C71C8 * (v139 - v17));
              v177 = (char *)(v141 + 0x71C71C71C71C71C8 * (v139 - v17));
              bzero((void *)v141, 0x71C71C71C71C71C8 * (v139 - v17));
            }
LABEL_191:
            if (v154)
            {
              v155 = v17 + 8;
              v156 = (_QWORD *)v141;
              do
              {
                v157 = *v155;
                v155 += 9;
                *v156++ = v157;
                --v154;
              }
              while (v154);
            }
            if (v138 <= v130)
            {
              v158 = 0;
              v159 = 0;
              if (v140 <= 1)
                v160 = 1;
              else
                v160 = v140;
              v161 = v139;
              v167 = v160;
              do
              {
                if (v161 == v17)
                {
                  v161 = v17;
                }
                else
                {
                  v162 = p_p;
                  v163 = *(_QWORD *)p_p;
                  if (*(_QWORD *)p_p)
                  {
                    memmove((void *)(*a3 + 2 * v159), (const void *)(*v17 + 2 * *(_QWORD *)v141), 2 * v163);
                    v162 = p_p;
                    v163 = *(_QWORD *)p_p;
                    v17 = (uint64_t *)*v8;
                    v139 = (uint64_t *)v8[1];
                  }
                  v159 += v163;
                  *(_QWORD *)v141 += v163;
                  if (0x8E38E38E38E38E39 * (v139 - v17) < 2)
                  {
                    v161 = v139;
                  }
                  else
                  {
                    v164 = 9;
                    v165 = 1;
                    do
                    {
                      v166 = v162[v165];
                      if (v166)
                      {
                        memmove((void *)(*a3 + 2 * v159), (const void *)(v17[v164] + 2 * *(_QWORD *)(v141 + 8 * v165)), 2 * v166);
                        v162 = p_p;
                        v166 = *((_QWORD *)p_p + v165);
                        v17 = (uint64_t *)*v8;
                        v139 = (uint64_t *)v8[1];
                      }
                      v159 += v166;
                      *(_QWORD *)(v141 + 8 * v165++) += v166;
                      v164 += 9;
                    }
                    while (v165 < 0x8E38E38E38E38E39 * (v139 - v17));
                    v161 = v139;
                    v160 = v167;
                  }
                }
                ++v158;
              }
              while (v158 != v160);
            }
            if (v141)
            {
              v176 = (char *)v141;
              operator delete((void *)v141);
            }
            v72 = (char *)p_p;
            if (p_p)
            {
              v170 = (std::__shared_weak_count *)p_p;
LABEL_199:
              operator delete(v72);
            }
            goto LABEL_200;
          }
          continue;
        }
      }
      while (2)
      {
        v94 = v17[2];
        v95 = (v17[3] - v94) >> 3;
        v96 = v95 - a2;
        if (v95 <= a2)
        {
          v98 = 1;
        }
        else
        {
          if (v96 < 2)
          {
            v97 = a2;
            v98 = 1;
            goto LABEL_134;
          }
          v97 = (v96 & 0xFFFFFFFFFFFFFFFELL) + a2;
          v99 = (_QWORD *)(v94 + 8 * a2 + 8);
          v100 = v96 & 0xFFFFFFFFFFFFFFFELL;
          v101 = 1;
          v102 = 1;
          do
          {
            v101 *= *(v99 - 1);
            v102 *= *v99;
            v99 += 2;
            v100 -= 2;
          }
          while (v100);
          v98 = v102 * v101;
          if (v96 != (v96 & 0xFFFFFFFFFFFFFFFELL))
          {
LABEL_134:
            v103 = v95 - v97;
            v104 = (uint64_t *)(v94 + 8 * v97);
            do
            {
              v105 = *v104++;
              v98 *= v105;
              --v103;
            }
            while (v103);
          }
        }
        if (v71 < v171)
        {
          v71->__vftable = (std::__shared_weak_count_vtbl *)v98;
          v93 = (std::__shared_weak_count *)&v71->__shared_owners_;
        }
        else
        {
          v106 = v8;
          v107 = v18;
          v108 = (std::__shared_weak_count *)p_p;
          v109 = (char *)v71 - (_BYTE *)p_p;
          v110 = ((char *)v71 - (_BYTE *)p_p) >> 3;
          v111 = v110 + 1;
          if ((unint64_t)(v110 + 1) >> 61)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v112 = (_BYTE *)v171 - (_BYTE *)p_p;
          if (((_BYTE *)v171 - (_BYTE *)p_p) >> 2 > v111)
            v111 = v112 >> 2;
          if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFF8)
            v113 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v113 = v111;
          if (v113)
          {
            if (v113 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v114 = v113;
            v115 = operator new(8 * v113);
            v113 = v114;
          }
          else
          {
            v115 = 0;
          }
          v116 = (uint64_t *)&v115[8 * v110];
          *v116 = v98;
          v93 = (std::__shared_weak_count *)(v116 + 1);
          if (v71 == v108)
          {
            v18 = v107;
            v8 = v106;
          }
          else
          {
            v117 = (char *)v71 - (char *)v108 - 8;
            if (v117 < 0x168
              || (v120 = ((char *)&v71[-1].__shared_weak_owners_ - (char *)v108) & 0xFFFFFFFFFFFFFFF8,
                  &v115[v109 - 8 - v120] > &v115[v109 - 8])
              || (uint64_t *)((char *)&v71[-1].__shared_weak_owners_ - v120) > &v71[-1].__shared_weak_owners_
              || (unint64_t)((char *)v71 - &v115[v109]) < 0x20)
            {
              v118 = v71;
              v18 = v107;
              v8 = v106;
            }
            else
            {
              v121 = (v117 >> 3) + 1;
              v122 = 8 * (v121 & 0x3FFFFFFFFFFFFFFCLL);
              v118 = (std::__shared_weak_count *)((char *)v71 - v122);
              v116 = (uint64_t *)((char *)v116 - v122);
              v123 = &v115[8 * v110 - 16];
              v124 = &v71[-1].__shared_owners_;
              v125 = v121 & 0x3FFFFFFFFFFFFFFCLL;
              v18 = v107;
              do
              {
                v126 = *(_OWORD *)v124;
                *(v123 - 1) = *((_OWORD *)v124 - 1);
                *v123 = v126;
                v123 -= 2;
                v124 -= 4;
                v125 -= 4;
              }
              while (v125);
              v8 = v106;
              if (v121 == (v121 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_153;
            }
            do
            {
              shared_weak_owners = v118[-1].__shared_weak_owners_;
              v118 = (std::__shared_weak_count *)((char *)v118 - 8);
              *--v116 = shared_weak_owners;
            }
            while (v118 != v108);
          }
LABEL_153:
          p_p = v116;
          v170 = v93;
          v171 = &v115[8 * v113];
          if (v108)
            operator delete(v108);
        }
        v170 = v93;
        v17 += 9;
        v71 = v93;
        if (v17 == v18)
        {
          v17 = (uint64_t *)*v8;
          goto LABEL_163;
        }
        continue;
      }
    }
    if (v17 == v18)
      goto LABEL_200;
    v74 = 0;
    while (2)
    {
      v77 = v17[2];
      v76 = (uint64_t *)v17[3];
      if (v76 == (uint64_t *)v77 || !*v17)
      {
        v75 = 0;
      }
      else
      {
        v78 = (unint64_t)v76 - v77 - 8;
        if (v78 < 8)
        {
          v75 = 1;
          v79 = (uint64_t *)v17[2];
          goto LABEL_103;
        }
        v80 = (v78 >> 3) + 1;
        v79 = (uint64_t *)(v77 + 8 * (v80 & 0x3FFFFFFFFFFFFFFELL));
        v81 = (_QWORD *)(v77 + 8);
        v82 = v80 & 0x3FFFFFFFFFFFFFFELL;
        v83 = 1;
        v84 = 1;
        do
        {
          v83 *= *(v81 - 1);
          v84 *= *v81;
          v81 += 2;
          v82 -= 2;
        }
        while (v82);
        v75 = v84 * v83;
        if (v80 != (v80 & 0x3FFFFFFFFFFFFFFELL))
        {
          do
          {
LABEL_103:
            v85 = *v79++;
            v75 *= v85;
          }
          while (v79 != v76);
        }
        if (v75)
          memmove((void *)(*a3 + 2 * v74), (const void *)(*v17 + 2 * v17[8]), 2 * v75);
      }
      v74 += v75;
      v17 += 9;
      if (v17 == v18)
        goto LABEL_200;
      continue;
    }
  }
  __p = 0;
  v176 = 0;
  v177 = 0;
  if ((unint64_t)v58 >= 0x5555555555555551)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v72 = (char *)operator new(24 * v59);
  __p = v72;
  v177 = &v72[24 * v59];
  v73 = v72;
  do
  {
    *(_QWORD *)v73 = -1;
    *((_QWORD *)v73 + 1) = -1;
    *((_QWORD *)v73 + 2) = 1;
    v73 += 24;
  }
  while (v73 != &v72[24 * v59]);
  v176 = &v72[24 * v59];
  if (v17 != v18)
    goto LABEL_107;
LABEL_121:
  if (v72)
  {
    v176 = v72;
    goto LABEL_199;
  }
LABEL_200:
  v6 = v178;
  if (v178)
  {
    v179 = v178;
LABEL_202:
    operator delete(v6);
  }
}

void sub_19119C388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  nitro::ndarray<float>::~ndarray(a10);
  if (a23)
    operator delete(a23);
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::copy(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  std::__shared_weak_count_vtbl *v48;
  std::__shared_weak_count *v49;

  v5 = a1 + 16;
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24) - v4;
  if (v6)
  {
    v7 = v6 >> 3;
    v8 = *(_QWORD *)(a1 + 40);
    if (v7 <= 1)
      v7 = 1;
    if (v7 < 2)
    {
      v9 = 0;
      v10 = 0;
LABEL_10:
      v16 = v7 - v9;
      v17 = 8 * v9;
      v18 = (uint64_t *)(v8 + v17);
      v19 = (uint64_t *)(v4 + v17);
      do
      {
        v20 = *v19++;
        v21 = v20 - 1;
        v22 = *v18++;
        v10 += v22 * v21;
        --v16;
      }
      while (v16);
      goto LABEL_12;
    }
    v11 = 0;
    v12 = 0;
    v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
    v13 = (_QWORD *)(v4 + 8);
    v14 = (_QWORD *)(v8 + 8);
    v15 = v7 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v11 += *(v14 - 1) * (*(v13 - 1) - 1);
      v12 += *v14 * (*v13 - 1);
      v13 += 2;
      v14 += 2;
      v15 -= 2;
    }
    while (v15);
    v10 = v12 + v11;
    if (v7 != v9)
      goto LABEL_10;
  }
LABEL_12:
  v23 = (std::__shared_weak_count_vtbl *)operator new[]();
  v48 = v23;
  v24 = (std::__shared_weak_count *)operator new();
  v24->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2B70;
  v24->__shared_owners_ = 0;
  v24->__shared_weak_owners_ = 0;
  v24[1].__vftable = v23;
  v49 = v24;
  v25 = *(_QWORD *)(a1 + 64);
  v26 = *(_QWORD *)(a1 + 16);
  v27 = *(_QWORD *)(a1 + 24) - v26;
  if (!v27)
  {
    v32 = 0;
    goto LABEL_24;
  }
  v28 = v27 >> 3;
  v29 = *(_QWORD *)(a1 + 40);
  if (v28 <= 1)
    v28 = 1;
  if (v28 >= 2)
  {
    v33 = 0;
    v34 = 0;
    v30 = v28 & 0xFFFFFFFFFFFFFFFELL;
    v35 = (_QWORD *)(v26 + 8);
    v36 = (_QWORD *)(v29 + 8);
    v37 = v28 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v33 += *(v36 - 1) * (*(v35 - 1) - 1);
      v34 += *v36 * (*v35 - 1);
      v35 += 2;
      v36 += 2;
      v37 -= 2;
    }
    while (v37);
    v31 = v34 + v33;
    if (v28 == v30)
      goto LABEL_23;
  }
  else
  {
    v30 = 0;
    v31 = 0;
  }
  v38 = v28 - v30;
  v39 = 8 * v30;
  v40 = (uint64_t *)(v29 + v39);
  v41 = (uint64_t *)(v26 + v39);
  do
  {
    v42 = *v41++;
    v43 = v42 - 1;
    v44 = *v40++;
    v31 += v44 * v43;
    --v38;
  }
  while (v38);
LABEL_23:
  v32 = 2 * v31 + 2;
LABEL_24:
  memcpy(v23, *(const void **)a1, v32 + v25);
  nitro::ndarray<half>::ndarray(a2, &v48, v5, a1 + 40, v25);
  v45 = v49;
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v47 = __ldaxr(p_shared_owners);
    while (__stlxr(v47 - 1, p_shared_owners));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
}

void sub_19119C6BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19119C6D0(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  MEMORY[0x19401CD78](v1, 0x1000C80BDFB0063);
  __cxa_rethrow();
}

void sub_19119C6F4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::concat(std::vector<nitro::ndarray<half>> const&,unsigned long)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"arr.shape().size()", 18);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"outshape.size()", 15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 182, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::ndarray<half>::concat(std::vector<nitro::ndarray<half>> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19119CA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::concat(std::vector<nitro::ndarray<half>> const&,unsigned long)::{lambda(void)#2}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"arr.shape()[i]", 14);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"outshape[i]", 11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 184, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::ndarray<half>::concat(std::vector<nitro::ndarray<half>> const&,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19119CD60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::concat(std::vector<nitro::ndarray<half>> const&,unsigned long)::{lambda(void)#3}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"arrs[arrid].num_elem()", 22);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"contiguous_copy_size[arrid] * ncopies", 37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 236, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::ndarray<half>::concat(std::vector<nitro::ndarray<half>> const&,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19119D0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::slice(_QWORD *a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>, __n128 a4@<Q0>)
{
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void *__p[2];
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v13 = 0uLL;
  v14 = 0;
  nitro::ndarray_impl::compute_slice(a2, a1 + 2, a1 + 5, a1[8], &v6, a4);
  v13 = v6;
  v14 = v7;
  *(_OWORD *)__p = v8;
  v12 = v9;
  nitro::ndarray<half>::ndarray(a3, a1, (uint64_t)&v13, (uint64_t)__p, v10);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((_QWORD)v13)
  {
    *((_QWORD *)&v13 + 1) = v13;
    operator delete((void *)v13);
  }
}

void sub_19119D1C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;
  void *v20;

  if (__p)
  {
    operator delete(__p);
    v20 = *(void **)(v18 - 48);
    if (!v20)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v20 = *(void **)(v18 - 48);
    if (!v20)
      goto LABEL_3;
  }
  *(_QWORD *)(v18 - 40) = v20;
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

uint64_t *nitro::ndarray<half>::assign<half>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = (char *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == v4)
    return a1;
  v7 = v5 <= 1 ? 1 : (v3 - v4) >> 3;
  if (*(_QWORD *)v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = *(_QWORD *)&v4[8 * v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<half>::assign<half>(nitro::ndarray<half> const&)::{lambda(void)#1}::operator()();
  if (v3 != v4 && *a1)
  {
    v12 = v3 - v4 - 8;
    if (v12 >= 8)
    {
      v15 = (v12 >> 3) + 1;
      v14 = &v4[8 * (v15 & 0x3FFFFFFFFFFFFFFELL)];
      v16 = v4 + 8;
      v17 = 1;
      v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
      v19 = 1;
      do
      {
        v17 *= *(v16 - 1);
        v19 *= *v16;
        v16 += 2;
        v18 -= 2;
      }
      while (v18);
      v13 = v19 * v17;
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_21:
        if (v13)
          nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::assign<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(a1, a2);
        return a1;
      }
    }
    else
    {
      v13 = 1;
      v14 = (char *)a1[2];
    }
    do
    {
      v20 = *(_QWORD *)v14;
      v14 += 8;
      v13 *= v20;
    }
    while (v14 != v3);
    goto LABEL_21;
  }
  return a1;
}

uint64_t nitro::ndarray<half>::ndarray(uint64_t a1, uint64_t a2, char **a3, char **a4, uint64_t a5)
{
  char **v10;
  char **v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  std::__shared_weak_count *v27;
  void *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  void *__dst;
  std::__shared_weak_count *v66;

  *(_OWORD *)(a1 + 16) = 0u;
  v10 = (char **)(a1 + 16);
  v11 = (char **)(a1 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  __dst = 0;
  v66 = 0;
  v12 = operator new[]();
  std::shared_ptr<half>::reset[abi:ne180100]<half,std::default_delete<half []>,void>(&__dst, v12);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13 != *(_QWORD *)a2)
    memmove(__dst, *(const void **)a2, v13 - *(_QWORD *)a2);
  if (v10 != a3)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v10, *a3, a3[1], (a3[1] - *a3) >> 3);
  v14 = *(char **)(a1 + 16);
  v15 = *(char **)(a1 + 24);
  v16 = v15 - v14;
  if (v15 == v14)
  {
    v17 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1;
    v18 = v17 - a5;
    if (v17 != a5)
    {
      v19 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)v15 >= v19)
      {
        v21 = v16 >> 3;
        v22 = v19 - (_QWORD)v14;
        if (v22 >> 2 <= (unint64_t)((v16 >> 3) + 1))
          v23 = v21 + 1;
        else
          v23 = v22 >> 2;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v25 = (char *)operator new(8 * v24);
        v26 = &v25[8 * v21];
        *(_QWORD *)(a1 + 16) = v26;
        *(_QWORD *)v26 = v18;
        v20 = v26 + 8;
        *(_QWORD *)(a1 + 24) = v20;
        *(_QWORD *)(a1 + 32) = &v25[8 * v24];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *(_QWORD *)v15 = v18;
        v20 = v15 + 8;
      }
      *(_QWORD *)(a1 + 24) = v20;
    }
  }
  if (v11 != a4)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v11, *a4, a4[1], (a4[1] - *a4) >> 3);
  *(_QWORD *)(a1 + 64) = a5;
  v28 = __dst;
  v27 = v66;
  if (v66)
  {
    p_shared_owners = (unint64_t *)&v66->__shared_owners_;
    do
      v30 = __ldxr(p_shared_owners);
    while (__stxr(v30 + 1, p_shared_owners));
  }
  v31 = *(std::__shared_weak_count **)(a1 + 8);
  *(_QWORD *)a1 = v28;
  *(_QWORD *)(a1 + 8) = v27;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v35 = *(_QWORD *)(a1 + 40);
  v34 = *(_QWORD *)(a1 + 48);
  v37 = *(char **)(a1 + 16);
  v36 = *(char **)(a1 + 24);
  v38 = v34 - v35;
  if (v34 != v35)
  {
    v34 = *(_QWORD *)(a1 + 40);
    goto LABEL_31;
  }
  v40 = v36 - v37;
  if (v36 != v37)
  {
    v41 = v38 >> 3;
    if (v40 >> 3 > v41)
    {
      std::vector<unsigned long long>::__append((uint64_t)v11, (v40 >> 3) - v41);
      v37 = *(char **)(a1 + 16);
      v36 = *(char **)(a1 + 24);
      v34 = *(_QWORD *)(a1 + 40);
      v40 = v36 - v37;
    }
    *(_QWORD *)(v34 + (((v40 << 29) - 0x100000000) >> 29)) = 1;
    if ((int)((unint64_t)v40 >> 3) >= 2)
    {
      v42 = 8 * (((unint64_t)v40 >> 3) - 2);
      v43 = *(_QWORD *)(v42 + v34 + 8);
      do
      {
        v43 *= *(_QWORD *)&v37[v42 + 8];
        *(_QWORD *)(v34 + v42) = v43;
        v42 -= 8;
      }
      while (v42 != -8);
    }
LABEL_31:
    v39 = v36;
    v36 = v37;
    if (v39 != v37)
      goto LABEL_41;
  }
  *(_QWORD *)(a1 + 24) = v36;
  *(_QWORD *)(a1 + 48) = v34;
  v39 = v36;
  *(_QWORD *)(a1 + 64) = 0;
LABEL_41:
  v44 = *v10;
  if (v39 == *v10)
  {
    v48 = 0;
    goto LABEL_53;
  }
  v45 = (v39 - *v10) >> 3;
  if (v45 <= 1)
    v45 = 1;
  if (v45 >= 2)
  {
    v49 = 0;
    v50 = 0;
    v46 = v45 & 0xFFFFFFFFFFFFFFFELL;
    v51 = v44 + 8;
    v52 = (_QWORD *)(v34 + 8);
    v53 = v45 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v49 += *(v52 - 1) * (*(v51 - 1) - 1);
      v50 += *v52 * (*v51 - 1);
      v51 += 2;
      v52 += 2;
      v53 -= 2;
    }
    while (v53);
    v47 = v50 + v49;
    if (v45 == v46)
      goto LABEL_52;
  }
  else
  {
    v46 = 0;
    v47 = 0;
  }
  v54 = v45 - v46;
  v55 = 8 * v46;
  v56 = (uint64_t *)(v34 + v55);
  v57 = &v44[v55];
  do
  {
    v58 = *(_QWORD *)v57;
    v57 += 8;
    v59 = v58 - 1;
    v60 = *v56++;
    v47 += v60 * v59;
    --v54;
  }
  while (v54);
LABEL_52:
  v48 = v47 + 1;
LABEL_53:
  if (*(_QWORD *)(a1 + 64) + v48 > (unint64_t)((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1))
    nitro::ndarray<half>::ndarray(std::vector<half> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator()();
  v61 = v66;
  if (v66)
  {
    v62 = (unint64_t *)&v66->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  return a1;
}

void sub_19119D6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  v7 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v3 + 48) = v7;
    operator delete(v7);
  }
  v8 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v3 + 24) = v8;
    operator delete(v8);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::ndarray(std::vector<half> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"last_index() + m_start <= elements.size()", 41);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 131, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::ndarray<half>::ndarray(std::vector<half> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19119D9A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::ndarray(std::vector<half> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 131, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19119DB44(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19119DB58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19119DB50);
}

void nitro::ndarray<half>::concat(std::vector<nitro::ndarray<half>> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 182, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19119DCB0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19119DCC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19119DCBCLL);
}

void nitro::ndarray<half>::concat(std::vector<nitro::ndarray<half>> const&,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 184, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19119DE1C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19119DE30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19119DE28);
}

void nitro::ndarray<half>::concat(std::vector<nitro::ndarray<half>> const&,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 236, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19119DF88(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19119DF9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19119DF94);
}

void nitro::ndarray<half>::assign<half>(nitro::ndarray<half> const&)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::ndarray<half>& nitro::ndarray<half>::assign<half>(nitro::ndarray<half> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19119E21C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

__n128 nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::assign<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int16 *v31;
  uint64_t v32;
  unsigned __int16 *v33;
  __n128 result;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  __n128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  __n128 *v50;
  __n128 *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unsigned __int16 *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int16 *v61;
  __n128 *v63;
  __n128 *v64;
  unint64_t v65;
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  __n128 *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  __n128 *v84;
  __n128 *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unsigned __int16 *v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int16 *v97;
  __n128 *v99;
  __n128 *v100;
  unint64_t v101;
  __n128 v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  unint64_t v141;
  __n128 *v142;
  __n128 *v143;
  __n128 *v144;
  __n128 *v145;
  unint64_t v146;
  __n128 v147;
  uint64_t v148;
  __n128 *v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v158;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return result;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::assign<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>& nitro::ndarray<half>::assign<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 != (char *)v4)
  {
    v13 = *a1;
    if (*a1)
    {
      if (v12 - 8 >= 8)
      {
        v16 = ((v12 - 8) >> 3) + 1;
        v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
        v17 = v4 + 1;
        v18 = 1;
        v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
        v20 = 1;
        do
        {
          v18 *= *(v17 - 1);
          v20 *= *v17;
          v17 += 2;
          v19 -= 2;
        }
        while (v19);
        v14 = v20 * v18;
        if (v16 == (v16 & 0x3FFFFFFFFFFFFFFELL))
          goto LABEL_21;
      }
      else
      {
        v14 = 1;
        v15 = (unint64_t *)a1[2];
      }
      do
      {
        v21 = *v15++;
        v14 *= v21;
      }
      while (v15 != (unint64_t *)v3);
LABEL_21:
      if (!v14)
        return result;
      v22 = (uint64_t)v12 >> 3;
      v158 = *a1;
      if ((uint64_t)v12 >> 3 != 3)
      {
        if (v22 != 2)
        {
          if (v22 == 1)
          {
            v23 = *v4;
            if (!*v4)
              return result;
            v24 = a2[8];
            v25 = a1[8];
            v26 = *a2;
            v27 = *(_QWORD *)a1[5];
            v28 = *(_QWORD *)a2[5];
            if (v23 < 0x10)
              goto LABEL_27;
            v29 = 0;
            if (v27 != 1 || v28 != 1)
              goto LABEL_28;
            v142 = (__n128 *)(2 * v25 + v13);
            v143 = (__n128 *)(2 * v24 + v26);
            if ((unint64_t)((char *)v142 - (char *)v143) < 0x20)
            {
LABEL_27:
              v29 = 0;
            }
            else
            {
              v29 = v23 & 0xFFFFFFFFFFFFFFF0;
              v24 += v23 & 0xFFFFFFFFFFFFFFF0;
              v25 += v23 & 0xFFFFFFFFFFFFFFF0;
              v144 = v143 + 1;
              v145 = v142 + 1;
              v146 = v23 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                result = v144[-1];
                v147 = *v144;
                v145[-1] = result;
                *v145 = v147;
                v144 += 2;
                v145 += 2;
                v146 -= 16;
              }
              while (v146);
              if (v23 == v29)
                return result;
            }
LABEL_28:
            v30 = v23 - v29;
            v31 = (unsigned __int16 *)(v26 + 2 * v24);
            v32 = 2 * v27;
            v33 = (unsigned __int16 *)(v13 + 2 * v25);
            do
            {
              result.n128_u16[0] = *v31;
              *v33 = *v31;
              v31 += v28;
              v33 = (unsigned __int16 *)((char *)v33 + v32);
              --v30;
            }
            while (v30);
            return result;
          }
          if ((v12 & 0x8000000000000000) != 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v103 = operator new(v12);
          bzero(v103, v12 & 0xFFFFFFFFFFFFFFF8);
          v104 = *a2;
          if (v12 >> 3 <= 1)
            v105 = 1;
          else
            v105 = v12 >> 3;
          v106 = a2[5];
          v107 = a2[8];
          v108 = v105 & 0x1FFFFFFFFFFFFFFELL;
          v109 = a1[5];
          while (v105 >= 2)
          {
            v112 = 0;
            v113 = 0;
            v114 = v105 & 0x1FFFFFFFFFFFFFFELL;
            v115 = (_QWORD *)(v109 + 8);
            v116 = v103 + 1;
            do
            {
              v112 += *(v115 - 1) * *(v116 - 1);
              v113 += *v115 * *v116;
              v116 += 2;
              v115 += 2;
              v114 -= 2;
            }
            while (v114);
            v110 = v113 + v112;
            v111 = v105 & 0x1FFFFFFFFFFFFFFELL;
            v13 = v158;
            if (v105 != v108)
              goto LABEL_84;
LABEL_86:
            if (v105 < 2)
            {
              v124 = 0;
              v125 = 0;
LABEL_91:
              v131 = v105 - v125;
              v132 = v125;
              v133 = (uint64_t *)(v106 + 8 * v125);
              v134 = &v103[v132];
              do
              {
                v136 = *v134++;
                v135 = v136;
                v137 = *v133++;
                v124 += v137 * v135;
                --v131;
              }
              while (v131);
              goto LABEL_93;
            }
            v126 = 0;
            v127 = 0;
            v128 = v105 & 0x1FFFFFFFFFFFFFFELL;
            v129 = (_QWORD *)(v106 + 8);
            v130 = v103 + 1;
            do
            {
              v126 += *(v129 - 1) * *(v130 - 1);
              v127 += *v129 * *v130;
              v130 += 2;
              v129 += 2;
              v128 -= 2;
            }
            while (v128);
            v124 = v127 + v126;
            v125 = v105 & 0x1FFFFFFFFFFFFFFELL;
            v13 = v158;
            if (v105 != v108)
              goto LABEL_91;
LABEL_93:
            *(_WORD *)(v13 + 2 * v110) = *(_WORD *)(v104 + 2 * (v107 + v124));
            if ((int)(v12 >> 3) >= 1)
            {
              v138 = (v12 >> 3) + 1;
              v139 = v12 >> 3;
              while (1)
              {
                v140 = (v138 - 2);
                v141 = v103[v140] + 1;
                v103[v140] = v141;
                if (v141 < v4[v140])
                  break;
                v103[(v138 - 2)] = 0;
                --v139;
                if ((unint64_t)--v138 <= 1)
                  goto LABEL_99;
              }
              if (v139 > 0)
                continue;
            }
LABEL_99:
            operator delete(v103);
            return result;
          }
          v110 = 0;
          v111 = 0;
LABEL_84:
          v117 = v105 - v111;
          v118 = v111;
          v119 = (uint64_t *)(v109 + 8 * v111);
          v120 = &v103[v118];
          do
          {
            v122 = *v120++;
            v121 = v122;
            v123 = *v119++;
            v110 += v123 * v121;
            --v117;
          }
          while (v117);
          goto LABEL_86;
        }
        v35 = *v4;
        if (!*v4)
          return result;
        v36 = 0;
        v37 = a2[8];
        v38 = a1[8];
        v39 = v4[1];
        v40 = *a2;
        v41 = (uint64_t *)a2[5];
        v42 = (uint64_t *)a1[5];
        v43 = *v42;
        v44 = (__n128 *)(v13 + 2 * v38);
        v45 = 2 * *v42;
        v46 = *a2 + 2 * v37;
        v47 = *v41;
        v48 = 2 * *v41;
        v49 = v39 & 0xFFFFFFFFFFFFFFF0;
        v50 = v44 + 1;
        v51 = (__n128 *)(v46 + 16);
        while (!v39)
        {
LABEL_33:
          v38 += v43;
          v37 += v47;
          ++v36;
          v50 = (__n128 *)((char *)v50 + v45);
          v51 = (__n128 *)((char *)v51 + v48);
          if (v36 == v35)
            return result;
        }
        v52 = v42[1];
        v53 = v41[1];
        if (v39 >= 0x10)
        {
          v54 = 0;
          if (v52 == 1 && v53 == 1)
          {
            v55 = v37;
            v56 = v38;
            if ((unint64_t)v44->n128_u64 + v45 * v36 - v46 - v48 * v36 >= 0x20)
            {
              v55 = v37 + v49 * v53;
              v63 = v51;
              v64 = v50;
              v65 = v39 & 0xFFFFFFFFFFFFFFF0;
              v56 = v38 + v49 * v52;
              do
              {
                result = v63[-1];
                v66 = *v63;
                v64[-1] = result;
                *v64 = v66;
                v64 += 2;
                v63 += 2;
                v65 -= 16;
              }
              while (v65);
              v54 = v39 & 0xFFFFFFFFFFFFFFF0;
              if (v39 == v49)
                goto LABEL_33;
            }
            goto LABEL_38;
          }
        }
        else
        {
          v54 = 0;
        }
        v55 = v37;
        v56 = v38;
LABEL_38:
        v57 = v39 - v54;
        v58 = (unsigned __int16 *)(v40 + 2 * v55);
        v59 = 2 * v53;
        v60 = 2 * v52;
        v61 = (unsigned __int16 *)(v158 + 2 * v56);
        do
        {
          result.n128_u16[0] = *v58;
          *v61 = *v58;
          v58 = (unsigned __int16 *)((char *)v58 + v59);
          v61 = (unsigned __int16 *)((char *)v61 + v60);
          --v57;
        }
        while (v57);
        goto LABEL_33;
      }
      v154 = *v4;
      if (!*v4)
        return result;
      v67 = 0;
      v68 = a2[8];
      v69 = a1[8];
      v70 = v4[1];
      v71 = (uint64_t *)a1[5];
      v150 = (uint64_t *)a2[5];
      v151 = a1[2];
      v152 = *v150;
      v153 = *v71;
      v156 = 2 * *v71;
      v155 = 2 * *v150;
      v148 = 2 * v68;
      v149 = (__n128 *)(v13 + 2 * v69);
      v72 = v149 + 1;
      v73 = 2 * v68 + 16;
      while (!v70)
      {
LABEL_53:
        v69 += v153;
        v68 += v152;
        ++v67;
        v72 = (__n128 *)((char *)v72 + v156);
        v73 += v155;
        if (v67 == v154)
          return result;
      }
      v74 = 0;
      v75 = *(_QWORD *)(v151 + 16);
      v76 = *a2;
      v77 = v71[1];
      v78 = v150[1];
      v79 = 2 * v77;
      v80 = v148 + v155 * v67 + *a2;
      v81 = 2 * v78;
      v82 = v75 & 0xFFFFFFFFFFFFFFF0;
      v83 = a2[5];
      v84 = (__n128 *)(*a2 + v73);
      v85 = v72;
      v86 = v68;
      v87 = v69;
      while (!v75)
      {
LABEL_56:
        v87 += v77;
        v86 += v78;
        ++v74;
        v85 = (__n128 *)((char *)v85 + v79);
        v84 = (__n128 *)((char *)v84 + v81);
        if (v74 == v70)
          goto LABEL_53;
      }
      v88 = v71[2];
      v89 = *(_QWORD *)(v83 + 16);
      if (v75 >= 0x10)
      {
        v90 = 0;
        if (v88 == 1 && v89 == 1)
        {
          v91 = v86;
          v92 = v87;
          if ((unint64_t)v149->n128_u64 + v156 * v67 + v79 * v74 - v80 - v81 * v74 >= 0x20)
          {
            v91 = v86 + v82 * v89;
            v99 = v84;
            v100 = v85;
            v101 = v75 & 0xFFFFFFFFFFFFFFF0;
            v92 = v87 + v82 * v88;
            do
            {
              result = v99[-1];
              v102 = *v99;
              v100[-1] = result;
              *v100 = v102;
              v100 += 2;
              v99 += 2;
              v101 -= 16;
            }
            while (v101);
            v90 = v75 & 0xFFFFFFFFFFFFFFF0;
            v13 = v158;
            if (v75 == v82)
              goto LABEL_56;
          }
          goto LABEL_61;
        }
      }
      else
      {
        v90 = 0;
      }
      v91 = v86;
      v92 = v87;
LABEL_61:
      v93 = v75 - v90;
      v94 = (unsigned __int16 *)(v76 + 2 * v91);
      v95 = 2 * v89;
      v96 = 2 * v88;
      v97 = (unsigned __int16 *)(v13 + 2 * v92);
      do
      {
        result.n128_u16[0] = *v94;
        *v97 = *v94;
        v94 = (unsigned __int16 *)((char *)v94 + v95);
        v97 = (unsigned __int16 *)((char *)v97 + v96);
        --v93;
      }
      while (v93);
      goto LABEL_56;
    }
  }
  return result;
}

void sub_19119E978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>& nitro::ndarray<half>::assign<half>(nitro::ndarray<half> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19119EAD0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19119EAE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19119EADCLL);
}

void nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::assign<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>& nitro::ndarray<half>::assign<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::assign<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>& nitro::ndarray<half>::assign<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19119ED64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::assign<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>& nitro::ndarray<half>::assign<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19119EF08(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19119EF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19119EF14);
}

void nitro::ndarray<float>::concat(uint64_t *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t *v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  __n128 v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64x2_t *v63;
  int64x2_t v64;
  uint64x2_t v65;
  unint64_t v66;
  int64x2_t v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t *v89;
  std::__shared_weak_count *v90;
  unint64_t *p_shared_owners;
  unint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  std::__shared_weak_count *v108;
  int64_t v109;
  uint64_t v110;
  unint64_t v111;
  int64_t v112;
  unint64_t v113;
  unint64_t v114;
  _BYTE *v115;
  uint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  uint64_t shared_weak_owners;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _OWORD *v123;
  uint64_t *v124;
  uint64_t v125;
  __int128 v126;
  uint64_t *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t *v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  unint64_t v146;
  char *v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t *v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  _QWORD *v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void *p_p;
  std::__shared_weak_count *v170;
  void *v171;
  void *v172;
  void *v173;
  void *v174;
  void *__p;
  char *v176;
  char *v177;
  void *v178;
  _BYTE *v179;
  char *v180;
  unint64_t v181;
  _QWORD v182[2];

  v3 = *a1;
  v4 = a1[1];
  v5 = 0x8E38E38E38E38E39 * ((v4 - *a1) >> 3);
  if (v5 == 1)
  {
    nitro::ndarray<float>::copy(*a1, a3);
    return;
  }
  if (!v5)
  {
    p_p = 0;
    v170 = 0;
    v171 = 0;
    v178 = 0;
    v179 = 0;
    v180 = 0;
    __p = 0;
    v176 = 0;
    v177 = 0;
    nitro::ndarray<float>::ndarray((uint64_t)a3, (uint64_t)&p_p, (char **)&v178, (char **)&__p, 0);
    if (__p)
    {
      v176 = (char *)__p;
      operator delete(__p);
    }
    if (v178)
    {
      v179 = v178;
      operator delete(v178);
    }
    v6 = p_p;
    if (p_p)
    {
      v170 = (std::__shared_weak_count *)p_p;
      goto LABEL_202;
    }
    return;
  }
  v8 = a1;
  v179 = 0;
  v180 = 0;
  v178 = 0;
  v10 = *(_BYTE **)(v3 + 16);
  v9 = *(_BYTE **)(v3 + 24);
  v11 = v9 - v10;
  if (v9 == v10)
  {
    v13 = 0;
    v12 = 0;
  }
  else
  {
    if (v11 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v12 = (char *)operator new(v9 - v10);
    v13 = &v12[8 * (v11 >> 3)];
    v178 = v12;
    v180 = v13;
    memcpy(v12, v10, v11);
    v179 = v13;
  }
  *(_QWORD *)&v12[8 * a2] = 0;
  if (v3 != v4)
  {
    v14 = v13;
    do
    {
      __p = (void *)((uint64_t)(*(_QWORD *)(v3 + 24) - *(_QWORD *)(v3 + 16)) >> 3);
      v182[0] = (v14 - v12) >> 3;
      if (__p != (void *)v182[0])
      {
        p_p = &__p;
        v170 = (std::__shared_weak_count *)v182;
        nitro::ndarray<float>::concat(std::vector<nitro::ndarray<float>> const&,unsigned long)::{lambda(void)#1}::operator()();
      }
      if (v14 == v12)
      {
        v14 = v12;
      }
      else
      {
        v15 = 0;
        do
        {
          if (a2 == v15)
          {
            *(_QWORD *)&v12[8 * a2] += *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * a2);
          }
          else
          {
            __p = 0;
            __p = *(void **)(*(_QWORD *)(v3 + 16) + 8 * v15);
            v182[0] = 0;
            v182[0] = *(_QWORD *)&v12[8 * v15];
            if (__p != (void *)v182[0])
            {
              p_p = &__p;
              v170 = (std::__shared_weak_count *)v182;
              nitro::ndarray<float>::concat(std::vector<nitro::ndarray<float>> const&,unsigned long)::{lambda(void)#2}::operator()();
            }
          }
          ++v15;
          v14 = v13;
        }
        while (v15 < (v13 - v12) >> 3);
      }
      v3 += 72;
    }
    while (v3 != v4);
  }
  nitro::ndarray<float>::init_from_shape((uint64_t **)&v178, a3);
  v17 = (uint64_t *)*v8;
  v18 = (uint64_t *)v8[1];
  if ((uint64_t *)*v8 == v18)
  {
LABEL_63:
    v57 = 1;
    goto LABEL_65;
  }
  v19 = (uint64_t *)*v8;
  while (1)
  {
    v20 = (char *)v19[2];
    v21 = (char *)v19[3];
    v22 = v21 - v20;
    if (v21 == v20)
    {
      v25 = (unint64_t *)v19[5];
      goto LABEL_50;
    }
    v23 = *v19;
    if (*v19)
    {
      if ((unint64_t)(v22 - 8) < 8)
      {
        v23 = 1;
        v24 = (char *)v19[2];
        do
        {
LABEL_39:
          v31 = *(_QWORD *)v24;
          v24 += 8;
          v23 *= v31;
        }
        while (v24 != v21);
        goto LABEL_40;
      }
      v26 = ((unint64_t)(v22 - 8) >> 3) + 1;
      v24 = &v20[8 * (v26 & 0x3FFFFFFFFFFFFFFELL)];
      v27 = v20 + 8;
      v28 = v26 & 0x3FFFFFFFFFFFFFFELL;
      v29 = 1;
      v30 = 1;
      do
      {
        v29 *= *(v27 - 1);
        v30 *= *v27;
        v27 += 2;
        v28 -= 2;
      }
      while (v28);
      v23 = v30 * v29;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_39;
    }
LABEL_40:
    v32 = v22 >> 3;
    v25 = (unint64_t *)v19[5];
    if (v32 <= 1)
      v32 = 1;
    if (v32 < 2)
    {
      v33 = 0;
      v34 = 0;
LABEL_47:
      v40 = v32 - v33;
      v41 = 8 * v33;
      v42 = (uint64_t *)&v25[v33];
      v43 = (uint64_t *)&v20[v41];
      do
      {
        v44 = *v43++;
        v45 = v44 - 1;
        v46 = *v42++;
        v34 += v46 * v45;
        --v40;
      }
      while (v40);
      goto LABEL_49;
    }
    v35 = 0;
    v36 = 0;
    v33 = v32 & 0xFFFFFFFFFFFFFFFELL;
    v37 = v20 + 8;
    v38 = v25 + 1;
    v39 = v32 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v35 += *(v38 - 1) * (*(v37 - 1) - 1);
      v36 += *v38 * (*v37 - 1);
      v37 += 2;
      v38 += 2;
      v39 -= 2;
    }
    while (v39);
    v34 = v36 + v35;
    if (v32 != v33)
      goto LABEL_47;
LABEL_49:
    if (v23 != v34 + 1)
      break;
LABEL_50:
    v47 = v19[6] - (_QWORD)v25;
    if (v47)
    {
      if (!*v25)
        break;
      if ((unint64_t)v47 >= 0x10)
      {
        v48 = v47 >> 3;
        v49 = v48 <= 2 ? 2 : v48;
        v50 = v25[1];
        if (!v50 || *v25 < v50)
          break;
        v51 = 0;
        v52 = v49 - 2;
        do
        {
          v53 = v51;
          if (v52 == v51)
            break;
          v54 = &v25[v51];
          v55 = v54[2];
          if (!v55)
            break;
          v56 = v54[1];
          v51 = v53 + 1;
        }
        while (v56 >= v55);
        if (v53 + 2 < v48)
          break;
      }
    }
    v19 += 9;
    if (v19 == v18)
      goto LABEL_63;
  }
  v57 = 0;
LABEL_65:
  v58 = v179 - (_BYTE *)v178;
  if (v179 == v178)
  {
    if ((v57 & 1) != 0)
    {
      v61 = 0;
      goto LABEL_81;
    }
    v72 = 0;
    __p = 0;
    v176 = 0;
    v177 = 0;
    if (v17 == v18)
      goto LABEL_121;
LABEL_107:
    v86 = 0;
    do
    {
      v87 = *(_QWORD *)(v17[2] + 8 * a2);
      v88 = v87 + v86;
      v181 = v86;
      v182[0] = v87 + v86;
      if (v87 + v86 <= v86)
      {
        p_p = v182;
        v170 = (std::__shared_weak_count *)&v181;
        nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long,unsigned long)::{lambda(void)#2}::operator()();
      }
      v89 = (unint64_t *)((char *)__p + 24 * a2);
      *v89 = v86;
      v89[1] = v88;
      v89[2] = 1;
      nitro::ndarray<float>::slice(a3, (__int128 **)&__p, &p_p, v16);
      nitro::ndarray<float>::assign<float>((uint64_t *)&p_p, v17);
      if (v173)
      {
        v174 = v173;
        operator delete(v173);
      }
      if (v171)
      {
        v172 = v171;
        operator delete(v171);
      }
      v90 = v170;
      if (v170)
      {
        p_shared_owners = (unint64_t *)&v170->__shared_owners_;
        do
          v92 = __ldaxr(p_shared_owners);
        while (__stlxr(v92 - 1, p_shared_owners));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      v86 += *(_QWORD *)(v17[2] + 8 * a2);
      v17 += 9;
    }
    while (v17 != v18);
    v72 = (char *)__p;
    goto LABEL_121;
  }
  v59 = v58 >> 3;
  if ((unint64_t)(v58 >> 3) <= 1)
    v60 = 1;
  else
    v60 = v58 >> 3;
  if (v60 >= 4)
  {
    v62 = v60 & 0xFFFFFFFFFFFFFFFCLL;
    v63 = (uint64x2_t *)((char *)v178 + 16);
    v64 = 0uLL;
    v65 = (uint64x2_t)vdupq_n_s64(1uLL);
    v66 = v60 & 0xFFFFFFFFFFFFFFFCLL;
    v67 = 0uLL;
    do
    {
      v64 = vsubq_s64(v64, (int64x2_t)vcgtq_u64(v63[-1], v65));
      v67 = vsubq_s64(v67, (int64x2_t)vcgtq_u64(*v63, v65));
      v63 += 2;
      v66 -= 4;
    }
    while (v66);
    v61 = vaddvq_s64(vaddq_s64(v67, v64));
    if (v60 != v62)
      goto LABEL_76;
  }
  else
  {
    v61 = 0;
    v62 = 0;
LABEL_76:
    v68 = v60 - v62;
    v69 = (unint64_t *)((char *)v178 + 8 * v62);
    do
    {
      v70 = *v69++;
      if (v70 > 1)
        ++v61;
      --v68;
    }
    while (v68);
  }
  if ((v57 & 1) != 0)
  {
LABEL_81:
    if (a2 && v61 != 1)
    {
      p_p = 0;
      v170 = 0;
      v171 = 0;
      if (v18 == v17)
        goto LABEL_163;
      if ((0x8E38E38E38E38E39 * (v18 - v17)) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v71 = (std::__shared_weak_count *)operator new(0x71C71C71C71C71C8 * (v18 - v17));
      p_p = v71;
      v170 = v71;
      v171 = &v71[0x4BDA12F684BDA13 * (v18 - v17)];
      if (v17 == v18)
      {
LABEL_163:
        v128 = v17[2];
        v127 = (uint64_t *)v17[3];
        if (v127 == (uint64_t *)v128 || !*v17)
        {
          v130 = 0;
        }
        else
        {
          v129 = (unint64_t)v127 - v128 - 8;
          if (v129 < 8)
          {
            v130 = 1;
            v131 = (uint64_t *)v17[2];
            goto LABEL_171;
          }
          v132 = (v129 >> 3) + 1;
          v131 = (uint64_t *)(v128 + 8 * (v132 & 0x3FFFFFFFFFFFFFFELL));
          v133 = (_QWORD *)(v128 + 8);
          v134 = 1;
          v135 = v132 & 0x3FFFFFFFFFFFFFFELL;
          v136 = 1;
          do
          {
            v134 *= *(v133 - 1);
            v136 *= *v133;
            v133 += 2;
            v135 -= 2;
          }
          while (v135);
          v130 = v136 * v134;
          if (v132 != (v132 & 0x3FFFFFFFFFFFFFFELL))
          {
            do
            {
LABEL_171:
              v137 = *v131++;
              v130 *= v137;
            }
            while (v131 != v127);
          }
        }
        v138 = *(_QWORD *)p_p;
        v139 = (uint64_t *)v8[1];
        v140 = v130 / *(_QWORD *)p_p;
        v141 = 0;
        if (v139 == v17)
        {
          v154 = 0x8E38E38E38E38E39 * (v139 - v17);
          __p = 0;
          v176 = 0;
          v177 = 0;
          v139 = v17;
          goto LABEL_191;
        }
        while (2)
        {
          v182[0] = 0;
          v142 = &v17[9 * v141];
          v144 = (char *)v142[2];
          v143 = (char *)v142[3];
          if (v143 == v144)
          {
            v145 = 0;
          }
          else
          {
            v145 = v17[9 * v141];
            if (v145)
            {
              v146 = v143 - v144 - 8;
              if (v146 < 8)
              {
                v145 = 1;
                v147 = v144;
                goto LABEL_181;
              }
              v148 = (v146 >> 3) + 1;
              v147 = &v144[8 * (v148 & 0x3FFFFFFFFFFFFFFELL)];
              v149 = v144 + 8;
              v150 = v148 & 0x3FFFFFFFFFFFFFFELL;
              v151 = 1;
              v152 = 1;
              do
              {
                v151 *= *(v149 - 1);
                v152 *= *v149;
                v149 += 2;
                v150 -= 2;
              }
              while (v150);
              v145 = v152 * v151;
              if (v148 != (v148 & 0x3FFFFFFFFFFFFFFELL))
              {
                do
                {
LABEL_181:
                  v153 = *(_QWORD *)v147;
                  v147 += 8;
                  v145 *= v153;
                }
                while (v147 != v143);
              }
            }
          }
          v181 = 0;
          v182[0] = v145;
          v181 = *((_QWORD *)p_p + v141) * v140;
          if (v145 != v181)
          {
            __p = v182;
            v176 = (char *)&v181;
            nitro::ndarray<float>::concat(std::vector<nitro::ndarray<float>> const&,unsigned long)::{lambda(void)#3}::operator()();
          }
          ++v141;
          v154 = 0x8E38E38E38E38E39 * (v139 - v17);
          if (v141 >= v154)
          {
            __p = 0;
            v176 = 0;
            v177 = 0;
            if (v139 == v17)
            {
              v141 = 0;
            }
            else
            {
              if (v154 >> 61)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v141 = (unint64_t)operator new(0x71C71C71C71C71C8 * (v139 - v17));
              v177 = (char *)(v141 + 0x71C71C71C71C71C8 * (v139 - v17));
              bzero((void *)v141, 0x71C71C71C71C71C8 * (v139 - v17));
            }
LABEL_191:
            if (v154)
            {
              v155 = v17 + 8;
              v156 = (_QWORD *)v141;
              do
              {
                v157 = *v155;
                v155 += 9;
                *v156++ = v157;
                --v154;
              }
              while (v154);
            }
            if (v138 <= v130)
            {
              v158 = 0;
              v159 = 0;
              if (v140 <= 1)
                v160 = 1;
              else
                v160 = v140;
              v161 = v139;
              v167 = v160;
              do
              {
                if (v161 == v17)
                {
                  v161 = v17;
                }
                else
                {
                  v162 = p_p;
                  v163 = *(_QWORD *)p_p;
                  if (*(_QWORD *)p_p)
                  {
                    memmove((void *)(*a3 + 4 * v159), (const void *)(*v17 + 4 * *(_QWORD *)v141), 4 * v163);
                    v162 = p_p;
                    v163 = *(_QWORD *)p_p;
                    v17 = (uint64_t *)*v8;
                    v139 = (uint64_t *)v8[1];
                  }
                  v159 += v163;
                  *(_QWORD *)v141 += v163;
                  if (0x8E38E38E38E38E39 * (v139 - v17) < 2)
                  {
                    v161 = v139;
                  }
                  else
                  {
                    v164 = 9;
                    v165 = 1;
                    do
                    {
                      v166 = v162[v165];
                      if (v166)
                      {
                        memmove((void *)(*a3 + 4 * v159), (const void *)(v17[v164] + 4 * *(_QWORD *)(v141 + 8 * v165)), 4 * v166);
                        v162 = p_p;
                        v166 = *((_QWORD *)p_p + v165);
                        v17 = (uint64_t *)*v8;
                        v139 = (uint64_t *)v8[1];
                      }
                      v159 += v166;
                      *(_QWORD *)(v141 + 8 * v165++) += v166;
                      v164 += 9;
                    }
                    while (v165 < 0x8E38E38E38E38E39 * (v139 - v17));
                    v161 = v139;
                    v160 = v167;
                  }
                }
                ++v158;
              }
              while (v158 != v160);
            }
            if (v141)
            {
              v176 = (char *)v141;
              operator delete((void *)v141);
            }
            v72 = (char *)p_p;
            if (p_p)
            {
              v170 = (std::__shared_weak_count *)p_p;
LABEL_199:
              operator delete(v72);
            }
            goto LABEL_200;
          }
          continue;
        }
      }
      while (2)
      {
        v94 = v17[2];
        v95 = (v17[3] - v94) >> 3;
        v96 = v95 - a2;
        if (v95 <= a2)
        {
          v98 = 1;
        }
        else
        {
          if (v96 < 2)
          {
            v97 = a2;
            v98 = 1;
            goto LABEL_134;
          }
          v97 = (v96 & 0xFFFFFFFFFFFFFFFELL) + a2;
          v99 = (_QWORD *)(v94 + 8 * a2 + 8);
          v100 = v96 & 0xFFFFFFFFFFFFFFFELL;
          v101 = 1;
          v102 = 1;
          do
          {
            v101 *= *(v99 - 1);
            v102 *= *v99;
            v99 += 2;
            v100 -= 2;
          }
          while (v100);
          v98 = v102 * v101;
          if (v96 != (v96 & 0xFFFFFFFFFFFFFFFELL))
          {
LABEL_134:
            v103 = v95 - v97;
            v104 = (uint64_t *)(v94 + 8 * v97);
            do
            {
              v105 = *v104++;
              v98 *= v105;
              --v103;
            }
            while (v103);
          }
        }
        if (v71 < v171)
        {
          v71->__vftable = (std::__shared_weak_count_vtbl *)v98;
          v93 = (std::__shared_weak_count *)&v71->__shared_owners_;
        }
        else
        {
          v106 = v8;
          v107 = v18;
          v108 = (std::__shared_weak_count *)p_p;
          v109 = (char *)v71 - (_BYTE *)p_p;
          v110 = ((char *)v71 - (_BYTE *)p_p) >> 3;
          v111 = v110 + 1;
          if ((unint64_t)(v110 + 1) >> 61)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v112 = (_BYTE *)v171 - (_BYTE *)p_p;
          if (((_BYTE *)v171 - (_BYTE *)p_p) >> 2 > v111)
            v111 = v112 >> 2;
          if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFF8)
            v113 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v113 = v111;
          if (v113)
          {
            if (v113 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v114 = v113;
            v115 = operator new(8 * v113);
            v113 = v114;
          }
          else
          {
            v115 = 0;
          }
          v116 = (uint64_t *)&v115[8 * v110];
          *v116 = v98;
          v93 = (std::__shared_weak_count *)(v116 + 1);
          if (v71 == v108)
          {
            v18 = v107;
            v8 = v106;
          }
          else
          {
            v117 = (char *)v71 - (char *)v108 - 8;
            if (v117 < 0x168
              || (v120 = ((char *)&v71[-1].__shared_weak_owners_ - (char *)v108) & 0xFFFFFFFFFFFFFFF8,
                  &v115[v109 - 8 - v120] > &v115[v109 - 8])
              || (uint64_t *)((char *)&v71[-1].__shared_weak_owners_ - v120) > &v71[-1].__shared_weak_owners_
              || (unint64_t)((char *)v71 - &v115[v109]) < 0x20)
            {
              v118 = v71;
              v18 = v107;
              v8 = v106;
            }
            else
            {
              v121 = (v117 >> 3) + 1;
              v122 = 8 * (v121 & 0x3FFFFFFFFFFFFFFCLL);
              v118 = (std::__shared_weak_count *)((char *)v71 - v122);
              v116 = (uint64_t *)((char *)v116 - v122);
              v123 = &v115[8 * v110 - 16];
              v124 = &v71[-1].__shared_owners_;
              v125 = v121 & 0x3FFFFFFFFFFFFFFCLL;
              v18 = v107;
              do
              {
                v126 = *(_OWORD *)v124;
                *(v123 - 1) = *((_OWORD *)v124 - 1);
                *v123 = v126;
                v123 -= 2;
                v124 -= 4;
                v125 -= 4;
              }
              while (v125);
              v8 = v106;
              if (v121 == (v121 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_153;
            }
            do
            {
              shared_weak_owners = v118[-1].__shared_weak_owners_;
              v118 = (std::__shared_weak_count *)((char *)v118 - 8);
              *--v116 = shared_weak_owners;
            }
            while (v118 != v108);
          }
LABEL_153:
          p_p = v116;
          v170 = v93;
          v171 = &v115[8 * v113];
          if (v108)
            operator delete(v108);
        }
        v170 = v93;
        v17 += 9;
        v71 = v93;
        if (v17 == v18)
        {
          v17 = (uint64_t *)*v8;
          goto LABEL_163;
        }
        continue;
      }
    }
    if (v17 == v18)
      goto LABEL_200;
    v74 = 0;
    while (2)
    {
      v77 = v17[2];
      v76 = (uint64_t *)v17[3];
      if (v76 == (uint64_t *)v77 || !*v17)
      {
        v75 = 0;
      }
      else
      {
        v78 = (unint64_t)v76 - v77 - 8;
        if (v78 < 8)
        {
          v75 = 1;
          v79 = (uint64_t *)v17[2];
          goto LABEL_103;
        }
        v80 = (v78 >> 3) + 1;
        v79 = (uint64_t *)(v77 + 8 * (v80 & 0x3FFFFFFFFFFFFFFELL));
        v81 = (_QWORD *)(v77 + 8);
        v82 = v80 & 0x3FFFFFFFFFFFFFFELL;
        v83 = 1;
        v84 = 1;
        do
        {
          v83 *= *(v81 - 1);
          v84 *= *v81;
          v81 += 2;
          v82 -= 2;
        }
        while (v82);
        v75 = v84 * v83;
        if (v80 != (v80 & 0x3FFFFFFFFFFFFFFELL))
        {
          do
          {
LABEL_103:
            v85 = *v79++;
            v75 *= v85;
          }
          while (v79 != v76);
        }
        if (v75)
          memmove((void *)(*a3 + 4 * v74), (const void *)(*v17 + 4 * v17[8]), 4 * v75);
      }
      v74 += v75;
      v17 += 9;
      if (v17 == v18)
        goto LABEL_200;
      continue;
    }
  }
  __p = 0;
  v176 = 0;
  v177 = 0;
  if ((unint64_t)v58 >= 0x5555555555555551)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v72 = (char *)operator new(24 * v59);
  __p = v72;
  v177 = &v72[24 * v59];
  v73 = v72;
  do
  {
    *(_QWORD *)v73 = -1;
    *((_QWORD *)v73 + 1) = -1;
    *((_QWORD *)v73 + 2) = 1;
    v73 += 24;
  }
  while (v73 != &v72[24 * v59]);
  v176 = &v72[24 * v59];
  if (v17 != v18)
    goto LABEL_107;
LABEL_121:
  if (v72)
  {
    v176 = v72;
    goto LABEL_199;
  }
LABEL_200:
  v6 = v178;
  if (v178)
  {
    v179 = v178;
LABEL_202:
    operator delete(v6);
  }
}

void sub_19119FC8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  nitro::ndarray<float>::~ndarray(a10);
  if (a23)
    operator delete(a23);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::copy(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  std::__shared_weak_count_vtbl *v48;
  std::__shared_weak_count *v49;

  v5 = a1 + 16;
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24) - v4;
  if (v6)
  {
    v7 = v6 >> 3;
    v8 = *(_QWORD *)(a1 + 40);
    if (v7 <= 1)
      v7 = 1;
    if (v7 < 2)
    {
      v9 = 0;
      v10 = 0;
LABEL_10:
      v16 = v7 - v9;
      v17 = 8 * v9;
      v18 = (uint64_t *)(v8 + v17);
      v19 = (uint64_t *)(v4 + v17);
      do
      {
        v20 = *v19++;
        v21 = v20 - 1;
        v22 = *v18++;
        v10 += v22 * v21;
        --v16;
      }
      while (v16);
      goto LABEL_12;
    }
    v11 = 0;
    v12 = 0;
    v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
    v13 = (_QWORD *)(v4 + 8);
    v14 = (_QWORD *)(v8 + 8);
    v15 = v7 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v11 += *(v14 - 1) * (*(v13 - 1) - 1);
      v12 += *v14 * (*v13 - 1);
      v13 += 2;
      v14 += 2;
      v15 -= 2;
    }
    while (v15);
    v10 = v12 + v11;
    if (v7 != v9)
      goto LABEL_10;
  }
LABEL_12:
  v23 = (std::__shared_weak_count_vtbl *)operator new[]();
  v48 = v23;
  v24 = (std::__shared_weak_count *)operator new();
  v24->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3890;
  v24->__shared_owners_ = 0;
  v24->__shared_weak_owners_ = 0;
  v24[1].__vftable = v23;
  v49 = v24;
  v25 = *(_QWORD *)(a1 + 64);
  v26 = *(_QWORD *)(a1 + 16);
  v27 = *(_QWORD *)(a1 + 24) - v26;
  if (!v27)
  {
    v32 = 0;
    goto LABEL_24;
  }
  v28 = v27 >> 3;
  v29 = *(_QWORD *)(a1 + 40);
  if (v28 <= 1)
    v28 = 1;
  if (v28 >= 2)
  {
    v33 = 0;
    v34 = 0;
    v30 = v28 & 0xFFFFFFFFFFFFFFFELL;
    v35 = (_QWORD *)(v26 + 8);
    v36 = (_QWORD *)(v29 + 8);
    v37 = v28 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v33 += *(v36 - 1) * (*(v35 - 1) - 1);
      v34 += *v36 * (*v35 - 1);
      v35 += 2;
      v36 += 2;
      v37 -= 2;
    }
    while (v37);
    v31 = v34 + v33;
    if (v28 == v30)
      goto LABEL_23;
  }
  else
  {
    v30 = 0;
    v31 = 0;
  }
  v38 = v28 - v30;
  v39 = 8 * v30;
  v40 = (uint64_t *)(v29 + v39);
  v41 = (uint64_t *)(v26 + v39);
  do
  {
    v42 = *v41++;
    v43 = v42 - 1;
    v44 = *v40++;
    v31 += v44 * v43;
    --v38;
  }
  while (v38);
LABEL_23:
  v32 = 4 * v31 + 4;
LABEL_24:
  memcpy(v23, *(const void **)a1, v32 + v25);
  nitro::ndarray<float>::ndarray(a2, &v48, v5, a1 + 40, v25);
  v45 = v49;
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v47 = __ldaxr(p_shared_owners);
    while (__stlxr(v47 - 1, p_shared_owners));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
}

void sub_19119FFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19119FFD8(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  MEMORY[0x19401CD78](v1, 0x1000C8052888210);
  __cxa_rethrow();
}

void sub_19119FFFC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::concat(std::vector<nitro::ndarray<float>> const&,unsigned long)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"arr.shape().size()", 18);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"outshape.size()", 15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 182, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::ndarray<float>::concat(std::vector<nitro::ndarray<float>> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911A0308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::concat(std::vector<nitro::ndarray<float>> const&,unsigned long)::{lambda(void)#2}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"arr.shape()[i]", 14);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"outshape[i]", 11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 184, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::ndarray<float>::concat(std::vector<nitro::ndarray<float>> const&,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911A0668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::concat(std::vector<nitro::ndarray<float>> const&,unsigned long)::{lambda(void)#3}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"arrs[arrid].num_elem()", 22);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"contiguous_copy_size[arrid] * ncopies", 37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 236, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::ndarray<float>::concat(std::vector<nitro::ndarray<float>> const&,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911A09C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::slice(_QWORD *a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>, __n128 a4@<Q0>)
{
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void *__p[2];
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v13 = 0uLL;
  v14 = 0;
  nitro::ndarray_impl::compute_slice(a2, a1 + 2, a1 + 5, a1[8], &v6, a4);
  v13 = v6;
  v14 = v7;
  *(_OWORD *)__p = v8;
  v12 = v9;
  nitro::ndarray<float>::ndarray(a3, a1, (uint64_t)&v13, (uint64_t)__p, v10);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((_QWORD)v13)
  {
    *((_QWORD *)&v13 + 1) = v13;
    operator delete((void *)v13);
  }
}

void sub_1911A0AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;
  void *v20;

  if (__p)
  {
    operator delete(__p);
    v20 = *(void **)(v18 - 48);
    if (!v20)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v20 = *(void **)(v18 - 48);
    if (!v20)
      goto LABEL_3;
  }
  *(_QWORD *)(v18 - 40) = v20;
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

uint64_t *nitro::ndarray<float>::assign<float>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = (char *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == v4)
    return a1;
  v7 = v5 <= 1 ? 1 : (v3 - v4) >> 3;
  if (*(_QWORD *)v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = *(_QWORD *)&v4[8 * v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<float>::assign<float>(nitro::ndarray<float> const&)::{lambda(void)#1}::operator()();
  if (v3 != v4 && *a1)
  {
    v12 = v3 - v4 - 8;
    if (v12 >= 8)
    {
      v15 = (v12 >> 3) + 1;
      v14 = &v4[8 * (v15 & 0x3FFFFFFFFFFFFFFELL)];
      v16 = v4 + 8;
      v17 = 1;
      v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
      v19 = 1;
      do
      {
        v17 *= *(v16 - 1);
        v19 *= *v16;
        v16 += 2;
        v18 -= 2;
      }
      while (v18);
      v13 = v19 * v17;
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_21:
        if (v13)
          nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::assign<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(a1, a2);
        return a1;
      }
    }
    else
    {
      v13 = 1;
      v14 = (char *)a1[2];
    }
    do
    {
      v20 = *(_QWORD *)v14;
      v14 += 8;
      v13 *= v20;
    }
    while (v14 != v3);
    goto LABEL_21;
  }
  return a1;
}

void nitro::ndarray<float>::concat(std::vector<nitro::ndarray<float>> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 182, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911A0D94(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911A0DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911A0DA0);
}

void nitro::ndarray<float>::concat(std::vector<nitro::ndarray<float>> const&,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 184, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911A0F00(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911A0F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911A0F0CLL);
}

void nitro::ndarray<float>::concat(std::vector<nitro::ndarray<float>> const&,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 236, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911A106C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911A1080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911A1078);
}

void nitro::ndarray<float>::assign<float>(nitro::ndarray<float> const&)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::ndarray<float>& nitro::ndarray<float>::assign<float>(nitro::ndarray<float> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911A1300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

__n128 nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::assign<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int32 *v31;
  uint64_t v32;
  unsigned __int32 *v33;
  __n128 result;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  __n128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  __n128 *v50;
  __n128 *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unsigned __int32 *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int32 *v61;
  __n128 *v63;
  __n128 *v64;
  unint64_t v65;
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  __n128 *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  __n128 *v84;
  __n128 *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unsigned __int32 *v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int32 *v97;
  __n128 *v99;
  __n128 *v100;
  unint64_t v101;
  __n128 v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  unint64_t v141;
  __n128 *v142;
  __n128 *v143;
  __n128 *v144;
  __n128 *v145;
  unint64_t v146;
  __n128 v147;
  uint64_t v148;
  __n128 *v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v158;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return result;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::assign<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>& nitro::ndarray<float>::assign<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 != (char *)v4)
  {
    v13 = *a1;
    if (*a1)
    {
      if (v12 - 8 >= 8)
      {
        v16 = ((v12 - 8) >> 3) + 1;
        v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
        v17 = v4 + 1;
        v18 = 1;
        v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
        v20 = 1;
        do
        {
          v18 *= *(v17 - 1);
          v20 *= *v17;
          v17 += 2;
          v19 -= 2;
        }
        while (v19);
        v14 = v20 * v18;
        if (v16 == (v16 & 0x3FFFFFFFFFFFFFFELL))
          goto LABEL_21;
      }
      else
      {
        v14 = 1;
        v15 = (unint64_t *)a1[2];
      }
      do
      {
        v21 = *v15++;
        v14 *= v21;
      }
      while (v15 != (unint64_t *)v3);
LABEL_21:
      if (!v14)
        return result;
      v22 = (uint64_t)v12 >> 3;
      v158 = *a1;
      if ((uint64_t)v12 >> 3 != 3)
      {
        if (v22 != 2)
        {
          if (v22 == 1)
          {
            v23 = *v4;
            if (!*v4)
              return result;
            v24 = a2[8];
            v25 = a1[8];
            v26 = *a2;
            v27 = *(_QWORD *)a1[5];
            v28 = *(_QWORD *)a2[5];
            if (v23 < 0xC)
              goto LABEL_27;
            v29 = 0;
            if (v27 != 1 || v28 != 1)
              goto LABEL_28;
            v142 = (__n128 *)(4 * v25 + v13);
            v143 = (__n128 *)(4 * v24 + v26);
            if ((unint64_t)((char *)v142 - (char *)v143) < 0x20)
            {
LABEL_27:
              v29 = 0;
            }
            else
            {
              v29 = v23 & 0xFFFFFFFFFFFFFFF8;
              v24 += v23 & 0xFFFFFFFFFFFFFFF8;
              v25 += v23 & 0xFFFFFFFFFFFFFFF8;
              v144 = v143 + 1;
              v145 = v142 + 1;
              v146 = v23 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                result = v144[-1];
                v147 = *v144;
                v145[-1] = result;
                *v145 = v147;
                v144 += 2;
                v145 += 2;
                v146 -= 8;
              }
              while (v146);
              if (v23 == v29)
                return result;
            }
LABEL_28:
            v30 = v23 - v29;
            v31 = (unsigned __int32 *)(v26 + 4 * v24);
            v32 = 4 * v27;
            v33 = (unsigned __int32 *)(v13 + 4 * v25);
            do
            {
              result.n128_u32[0] = *v31;
              *v33 = *v31;
              v31 += v28;
              v33 = (unsigned __int32 *)((char *)v33 + v32);
              --v30;
            }
            while (v30);
            return result;
          }
          if ((v12 & 0x8000000000000000) != 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v103 = operator new(v12);
          bzero(v103, v12 & 0xFFFFFFFFFFFFFFF8);
          v104 = *a2;
          if (v12 >> 3 <= 1)
            v105 = 1;
          else
            v105 = v12 >> 3;
          v106 = a2[5];
          v107 = a2[8];
          v108 = v105 & 0x1FFFFFFFFFFFFFFELL;
          v109 = a1[5];
          while (v105 >= 2)
          {
            v112 = 0;
            v113 = 0;
            v114 = v105 & 0x1FFFFFFFFFFFFFFELL;
            v115 = (_QWORD *)(v109 + 8);
            v116 = v103 + 1;
            do
            {
              v112 += *(v115 - 1) * *(v116 - 1);
              v113 += *v115 * *v116;
              v116 += 2;
              v115 += 2;
              v114 -= 2;
            }
            while (v114);
            v110 = v113 + v112;
            v111 = v105 & 0x1FFFFFFFFFFFFFFELL;
            v13 = v158;
            if (v105 != v108)
              goto LABEL_84;
LABEL_86:
            if (v105 < 2)
            {
              v124 = 0;
              v125 = 0;
LABEL_91:
              v131 = v105 - v125;
              v132 = v125;
              v133 = (uint64_t *)(v106 + 8 * v125);
              v134 = &v103[v132];
              do
              {
                v136 = *v134++;
                v135 = v136;
                v137 = *v133++;
                v124 += v137 * v135;
                --v131;
              }
              while (v131);
              goto LABEL_93;
            }
            v126 = 0;
            v127 = 0;
            v128 = v105 & 0x1FFFFFFFFFFFFFFELL;
            v129 = (_QWORD *)(v106 + 8);
            v130 = v103 + 1;
            do
            {
              v126 += *(v129 - 1) * *(v130 - 1);
              v127 += *v129 * *v130;
              v130 += 2;
              v129 += 2;
              v128 -= 2;
            }
            while (v128);
            v124 = v127 + v126;
            v125 = v105 & 0x1FFFFFFFFFFFFFFELL;
            v13 = v158;
            if (v105 != v108)
              goto LABEL_91;
LABEL_93:
            *(_DWORD *)(v13 + 4 * v110) = *(_DWORD *)(v104 + 4 * (v107 + v124));
            if ((int)(v12 >> 3) >= 1)
            {
              v138 = (v12 >> 3) + 1;
              v139 = v12 >> 3;
              while (1)
              {
                v140 = (v138 - 2);
                v141 = v103[v140] + 1;
                v103[v140] = v141;
                if (v141 < v4[v140])
                  break;
                v103[(v138 - 2)] = 0;
                --v139;
                if ((unint64_t)--v138 <= 1)
                  goto LABEL_99;
              }
              if (v139 > 0)
                continue;
            }
LABEL_99:
            operator delete(v103);
            return result;
          }
          v110 = 0;
          v111 = 0;
LABEL_84:
          v117 = v105 - v111;
          v118 = v111;
          v119 = (uint64_t *)(v109 + 8 * v111);
          v120 = &v103[v118];
          do
          {
            v122 = *v120++;
            v121 = v122;
            v123 = *v119++;
            v110 += v123 * v121;
            --v117;
          }
          while (v117);
          goto LABEL_86;
        }
        v35 = *v4;
        if (!*v4)
          return result;
        v36 = 0;
        v37 = a2[8];
        v38 = a1[8];
        v39 = v4[1];
        v40 = *a2;
        v41 = (uint64_t *)a2[5];
        v42 = (uint64_t *)a1[5];
        v43 = *v42;
        v44 = (__n128 *)(v13 + 4 * v38);
        v45 = 4 * *v42;
        v46 = *a2 + 4 * v37;
        v47 = *v41;
        v48 = 4 * *v41;
        v49 = v39 & 0xFFFFFFFFFFFFFFF8;
        v50 = v44 + 1;
        v51 = (__n128 *)(v46 + 16);
        while (!v39)
        {
LABEL_33:
          v38 += v43;
          v37 += v47;
          ++v36;
          v50 = (__n128 *)((char *)v50 + v45);
          v51 = (__n128 *)((char *)v51 + v48);
          if (v36 == v35)
            return result;
        }
        v52 = v42[1];
        v53 = v41[1];
        if (v39 >= 8)
        {
          v54 = 0;
          if (v52 == 1 && v53 == 1)
          {
            v55 = v37;
            v56 = v38;
            if ((unint64_t)v44->n128_u64 + v45 * v36 - v46 - v48 * v36 >= 0x20)
            {
              v55 = v37 + v49 * v53;
              v63 = v51;
              v64 = v50;
              v65 = v39 & 0xFFFFFFFFFFFFFFF8;
              v56 = v38 + v49 * v52;
              do
              {
                result = v63[-1];
                v66 = *v63;
                v64[-1] = result;
                *v64 = v66;
                v64 += 2;
                v63 += 2;
                v65 -= 8;
              }
              while (v65);
              v54 = v39 & 0xFFFFFFFFFFFFFFF8;
              if (v39 == v49)
                goto LABEL_33;
            }
            goto LABEL_38;
          }
        }
        else
        {
          v54 = 0;
        }
        v55 = v37;
        v56 = v38;
LABEL_38:
        v57 = v39 - v54;
        v58 = (unsigned __int32 *)(v40 + 4 * v55);
        v59 = 4 * v53;
        v60 = 4 * v52;
        v61 = (unsigned __int32 *)(v158 + 4 * v56);
        do
        {
          result.n128_u32[0] = *v58;
          *v61 = *v58;
          v58 = (unsigned __int32 *)((char *)v58 + v59);
          v61 = (unsigned __int32 *)((char *)v61 + v60);
          --v57;
        }
        while (v57);
        goto LABEL_33;
      }
      v154 = *v4;
      if (!*v4)
        return result;
      v67 = 0;
      v68 = a2[8];
      v69 = a1[8];
      v70 = v4[1];
      v71 = (uint64_t *)a1[5];
      v150 = (uint64_t *)a2[5];
      v151 = a1[2];
      v152 = *v150;
      v153 = *v71;
      v156 = 4 * *v71;
      v155 = 4 * *v150;
      v148 = 4 * v68;
      v149 = (__n128 *)(v13 + 4 * v69);
      v72 = v149 + 1;
      v73 = 4 * v68 + 16;
      while (!v70)
      {
LABEL_53:
        v69 += v153;
        v68 += v152;
        ++v67;
        v72 = (__n128 *)((char *)v72 + v156);
        v73 += v155;
        if (v67 == v154)
          return result;
      }
      v74 = 0;
      v75 = *(_QWORD *)(v151 + 16);
      v76 = *a2;
      v77 = v71[1];
      v78 = v150[1];
      v79 = 4 * v77;
      v80 = v148 + v155 * v67 + *a2;
      v81 = 4 * v78;
      v82 = v75 & 0xFFFFFFFFFFFFFFF8;
      v83 = a2[5];
      v84 = (__n128 *)(*a2 + v73);
      v85 = v72;
      v86 = v68;
      v87 = v69;
      while (!v75)
      {
LABEL_56:
        v87 += v77;
        v86 += v78;
        ++v74;
        v85 = (__n128 *)((char *)v85 + v79);
        v84 = (__n128 *)((char *)v84 + v81);
        if (v74 == v70)
          goto LABEL_53;
      }
      v88 = v71[2];
      v89 = *(_QWORD *)(v83 + 16);
      if (v75 >= 8)
      {
        v90 = 0;
        if (v88 == 1 && v89 == 1)
        {
          v91 = v86;
          v92 = v87;
          if ((unint64_t)v149->n128_u64 + v156 * v67 + v79 * v74 - v80 - v81 * v74 >= 0x20)
          {
            v91 = v86 + v82 * v89;
            v99 = v84;
            v100 = v85;
            v101 = v75 & 0xFFFFFFFFFFFFFFF8;
            v92 = v87 + v82 * v88;
            do
            {
              result = v99[-1];
              v102 = *v99;
              v100[-1] = result;
              *v100 = v102;
              v100 += 2;
              v99 += 2;
              v101 -= 8;
            }
            while (v101);
            v90 = v75 & 0xFFFFFFFFFFFFFFF8;
            v13 = v158;
            if (v75 == v82)
              goto LABEL_56;
          }
          goto LABEL_61;
        }
      }
      else
      {
        v90 = 0;
      }
      v91 = v86;
      v92 = v87;
LABEL_61:
      v93 = v75 - v90;
      v94 = (unsigned __int32 *)(v76 + 4 * v91);
      v95 = 4 * v89;
      v96 = 4 * v88;
      v97 = (unsigned __int32 *)(v13 + 4 * v92);
      do
      {
        result.n128_u32[0] = *v94;
        *v97 = *v94;
        v94 = (unsigned __int32 *)((char *)v94 + v95);
        v97 = (unsigned __int32 *)((char *)v97 + v96);
        --v93;
      }
      while (v93);
      goto LABEL_56;
    }
  }
  return result;
}

void sub_1911A1A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>& nitro::ndarray<float>::assign<float>(nitro::ndarray<float> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911A1BB4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911A1BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911A1BC0);
}

void nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::assign<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>& nitro::ndarray<float>::assign<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::assign<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>& nitro::ndarray<float>::assign<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911A1E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::assign<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>& nitro::ndarray<float>::assign<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911A1FEC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911A2000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911A1FF8);
}

void nitro::ndarray_container::visit<nitro::operator<<(std::ostream &,nitro::ndarray_container const&)::$_0>(nitro::operator<<(std::ostream &,nitro::ndarray_container const&)::$_0)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1911A2330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1911A2398(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

_QWORD *nitro::operator<<<unsigned char>(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"<", 1);
  if (a2[3] != a2[2])
  {
    v4 = 0;
    do
    {
      std::ostream::operator<<();
      ++v4;
      v5 = (uint64_t)(a2[3] - a2[2]) >> 3;
      if (v4 < v5)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)",", 1);
        v5 = (uint64_t)(a2[3] - a2[2]) >> 3;
      }
    }
    while (v4 < v5);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)">", 1);
  nitro::ndarray<unsigned char>::print_truncated(a2, a1, 0x64uLL);
  return a1;
}

void nitro::ndarray<unsigned char>::print_truncated(_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  const char *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  const char *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  char v68;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  if (v6 == v7)
  {
    v67 = 0;
    v9 = 0;
  }
  else
  {
    if (v8 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v9 = (char *)operator new(v6 - v7);
    v67 = &v9[8 * (v8 >> 3)];
    bzero(v9, v8 & 0xFFFFFFFFFFFFFFF8);
    if (*a1)
    {
      if ((unint64_t)(v8 - 8) >= 8)
      {
        v12 = ((unint64_t)(v8 - 8) >> 3) + 1;
        v11 = &v7[8 * (v12 & 0x3FFFFFFFFFFFFFFELL)];
        v13 = v7 + 8;
        v14 = 1;
        v15 = v12 & 0x3FFFFFFFFFFFFFFELL;
        v16 = 1;
        do
        {
          v14 *= *(v13 - 1);
          v16 *= *v13;
          v13 += 2;
          v15 -= 2;
        }
        while (v15);
        v10 = v16 * v14;
        if (v12 == (v12 & 0x3FFFFFFFFFFFFFFELL))
        {
LABEL_11:
          if (v10)
            goto LABEL_13;
          goto LABEL_12;
        }
      }
      else
      {
        v10 = 1;
        v11 = v7;
      }
      do
      {
        v17 = *(_QWORD *)v11;
        v11 += 8;
        v10 *= v17;
      }
      while (v11 != v6);
      goto LABEL_11;
    }
  }
LABEL_12:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"[]", 2);
LABEL_13:
  v18 = v67 - v9;
  if (v67 != v9)
  {
    v19 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"[", 1);
      ++v19;
    }
    while (v19 < v18 >> 3);
  }
  v21 = (char *)a1[2];
  v20 = (char *)a1[3];
  if (v20 == v21 || !*a1)
  {
    v23 = 0;
    goto LABEL_25;
  }
  v22 = v20 - v21 - 8;
  if (v22 < 8)
  {
    v23 = 1;
    v24 = (char *)a1[2];
    do
    {
LABEL_24:
      v30 = *(_QWORD *)v24;
      v24 += 8;
      v23 *= v30;
    }
    while (v24 != v20);
    goto LABEL_25;
  }
  v25 = (v22 >> 3) + 1;
  v24 = &v21[8 * (v25 & 0x3FFFFFFFFFFFFFFELL)];
  v26 = v21 + 8;
  v27 = 1;
  v28 = v25 & 0x3FFFFFFFFFFFFFFELL;
  v29 = 1;
  do
  {
    v27 *= *(v26 - 1);
    v29 *= *v26;
    v26 += 2;
    v28 -= 2;
  }
  while (v28);
  v23 = v29 * v27;
  if (v25 != (v25 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_24;
LABEL_25:
  if (a3)
  {
    v31 = v18 >> 3;
    v32 = 1;
    v33 = ",";
    v34 = a3;
    while (1)
    {
      if (!v32)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v33, 1);
      v35 = v67 - v9;
      if (v67 == v9)
      {
        v38 = 0;
        goto LABEL_40;
      }
      v36 = v35 >> 3;
      v37 = a1[5];
      if ((unint64_t)(v35 >> 3) <= 1)
        v36 = 1;
      if (v36 < 2)
        break;
      v40 = 0;
      v41 = 0;
      v39 = v36 & 0xFFFFFFFFFFFFFFFELL;
      v42 = v9 + 8;
      v43 = (_QWORD *)(v37 + 8);
      v44 = v36 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v40 += *(v43 - 1) * *(v42 - 1);
        v41 += *v43 * *v42;
        v42 += 2;
        v43 += 2;
        v44 -= 2;
      }
      while (v44);
      v38 = v41 + v40;
      if (v36 != v39)
        goto LABEL_38;
LABEL_40:
      v68 = *(_BYTE *)(*a1 + a1[8] + v38);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)&v68, 1);
      v52 = (unint64_t)v35 >> 3;
      if ((int)((unint64_t)v35 >> 3) >= 1)
      {
        v53 = a1[2];
        v54 = ((unint64_t)v35 >> 3) + 1;
        while (1)
        {
          v55 = 8 * (v54 - 2);
          v56 = *(_QWORD *)&v9[v55] + 1;
          *(_QWORD *)&v9[v55] = v56;
          if (v56 < *(_QWORD *)(v53 + v55))
            break;
          *(_QWORD *)&v9[8 * (v54 - 2)] = 0;
          LODWORD(v52) = v52 - 1;
          if ((unint64_t)--v54 <= 1)
            goto LABEL_54;
        }
        if ((int)v52 >= 1)
        {
          v66 = v31;
          v57 = v34;
          v58 = v33;
          v59 = a3;
          v60 = v52 & ~((int)v52 >> 31);
          v61 = v35 >> 3;
          v62 = v60;
          if (v61 <= v60)
          {
            a3 = v59;
            v33 = v58;
            v63 = v57;
            v31 = v66;
          }
          else
          {
            do
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"]", 1);
              ++v62;
            }
            while (v62 < v61);
            a3 = v59;
            v33 = v58;
            v63 = v57;
            v31 = v66;
            if (v61 > v60)
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v33, 1);
              v64 = v60;
              do
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"[", 1);
                ++v64;
              }
              while (v64 < v66);
              v61 = v66;
            }
          }
          v32 = v61 > v60;
          v34 = v63 - 1;
          if (v34)
            continue;
        }
      }
      goto LABEL_54;
    }
    v38 = 0;
    v39 = 0;
LABEL_38:
    v45 = v36 - v39;
    v46 = 8 * v39;
    v47 = (uint64_t *)(v37 + v46);
    v48 = (uint64_t *)&v9[v46];
    do
    {
      v50 = *v48++;
      v49 = v50;
      v51 = *v47++;
      v38 += v51 * v49;
      --v45;
    }
    while (v45);
    goto LABEL_40;
  }
LABEL_54:
  if (v23 > a3)
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"...", 3);
  if (v67 != v9)
  {
    v65 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"]", 1);
      ++v65;
    }
    while (v65 < (v67 - v9) >> 3);
  }
  if (v9)
    operator delete(v9);
}

void sub_1911A28DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  if (v12)
    operator delete(v12);
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::operator<<<int>(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"<", 1);
  if (a2[3] != a2[2])
  {
    v4 = 0;
    do
    {
      std::ostream::operator<<();
      ++v4;
      v5 = (uint64_t)(a2[3] - a2[2]) >> 3;
      if (v4 < v5)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)",", 1);
        v5 = (uint64_t)(a2[3] - a2[2]) >> 3;
      }
    }
    while (v4 < v5);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)">", 1);
  nitro::ndarray<int>::print_truncated(a2, a1, 0x64uLL);
  return a1;
}

void nitro::ndarray<int>::print_truncated(_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  const char *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  const char *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  if (v6 == v7)
  {
    v67 = 0;
    v9 = 0;
  }
  else
  {
    if (v8 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v9 = (char *)operator new(v6 - v7);
    v67 = &v9[8 * (v8 >> 3)];
    bzero(v9, v8 & 0xFFFFFFFFFFFFFFF8);
    if (*a1)
    {
      if ((unint64_t)(v8 - 8) >= 8)
      {
        v12 = ((unint64_t)(v8 - 8) >> 3) + 1;
        v11 = &v7[8 * (v12 & 0x3FFFFFFFFFFFFFFELL)];
        v13 = v7 + 8;
        v14 = 1;
        v15 = v12 & 0x3FFFFFFFFFFFFFFELL;
        v16 = 1;
        do
        {
          v14 *= *(v13 - 1);
          v16 *= *v13;
          v13 += 2;
          v15 -= 2;
        }
        while (v15);
        v10 = v16 * v14;
        if (v12 == (v12 & 0x3FFFFFFFFFFFFFFELL))
        {
LABEL_11:
          if (v10)
            goto LABEL_13;
          goto LABEL_12;
        }
      }
      else
      {
        v10 = 1;
        v11 = v7;
      }
      do
      {
        v17 = *(_QWORD *)v11;
        v11 += 8;
        v10 *= v17;
      }
      while (v11 != v6);
      goto LABEL_11;
    }
  }
LABEL_12:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"[]", 2);
LABEL_13:
  v18 = v67 - v9;
  if (v67 != v9)
  {
    v19 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"[", 1);
      ++v19;
    }
    while (v19 < v18 >> 3);
  }
  v21 = (char *)a1[2];
  v20 = (char *)a1[3];
  if (v20 == v21 || !*a1)
  {
    v23 = 0;
    goto LABEL_25;
  }
  v22 = v20 - v21 - 8;
  if (v22 < 8)
  {
    v23 = 1;
    v24 = (char *)a1[2];
    do
    {
LABEL_24:
      v30 = *(_QWORD *)v24;
      v24 += 8;
      v23 *= v30;
    }
    while (v24 != v20);
    goto LABEL_25;
  }
  v25 = (v22 >> 3) + 1;
  v24 = &v21[8 * (v25 & 0x3FFFFFFFFFFFFFFELL)];
  v26 = v21 + 8;
  v27 = 1;
  v28 = v25 & 0x3FFFFFFFFFFFFFFELL;
  v29 = 1;
  do
  {
    v27 *= *(v26 - 1);
    v29 *= *v26;
    v26 += 2;
    v28 -= 2;
  }
  while (v28);
  v23 = v29 * v27;
  if (v25 != (v25 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_24;
LABEL_25:
  if (a3)
  {
    v31 = v18 >> 3;
    v32 = 1;
    v33 = ",";
    v34 = a3;
    while (1)
    {
      if (!v32)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v33, 1);
      v35 = v67 - v9;
      if (v67 != v9)
      {
        v36 = v35 >> 3;
        v37 = a1[5];
        if ((unint64_t)(v35 >> 3) <= 1)
          v36 = 1;
        if (v36 < 2)
        {
          v38 = 0;
          v39 = 0;
LABEL_38:
          v45 = v36 - v39;
          v46 = 8 * v39;
          v47 = (uint64_t *)(v37 + v46);
          v48 = (uint64_t *)&v9[v46];
          do
          {
            v50 = *v48++;
            v49 = v50;
            v51 = *v47++;
            v38 += v51 * v49;
            --v45;
          }
          while (v45);
          goto LABEL_40;
        }
        v40 = 0;
        v41 = 0;
        v39 = v36 & 0xFFFFFFFFFFFFFFFELL;
        v42 = v9 + 8;
        v43 = (_QWORD *)(v37 + 8);
        v44 = v36 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v40 += *(v43 - 1) * *(v42 - 1);
          v41 += *v43 * *v42;
          v42 += 2;
          v43 += 2;
          v44 -= 2;
        }
        while (v44);
        v38 = v41 + v40;
        if (v36 != v39)
          goto LABEL_38;
      }
LABEL_40:
      std::ostream::operator<<();
      v52 = (unint64_t)v35 >> 3;
      if ((int)((unint64_t)v35 >> 3) >= 1)
      {
        v53 = a1[2];
        v54 = ((unint64_t)v35 >> 3) + 1;
        while (1)
        {
          v55 = 8 * (v54 - 2);
          v56 = *(_QWORD *)&v9[v55] + 1;
          *(_QWORD *)&v9[v55] = v56;
          if (v56 < *(_QWORD *)(v53 + v55))
            break;
          *(_QWORD *)&v9[8 * (v54 - 2)] = 0;
          LODWORD(v52) = v52 - 1;
          if ((unint64_t)--v54 <= 1)
            goto LABEL_54;
        }
        if ((int)v52 >= 1)
        {
          v66 = v31;
          v57 = v34;
          v58 = v33;
          v59 = a3;
          v60 = v52 & ~((int)v52 >> 31);
          v61 = v35 >> 3;
          v62 = v60;
          if (v61 <= v60)
          {
            a3 = v59;
            v33 = v58;
            v63 = v57;
            v31 = v66;
          }
          else
          {
            do
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"]", 1);
              ++v62;
            }
            while (v62 < v61);
            a3 = v59;
            v33 = v58;
            v63 = v57;
            v31 = v66;
            if (v61 > v60)
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v33, 1);
              v64 = v60;
              do
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"[", 1);
                ++v64;
              }
              while (v64 < v66);
              v61 = v66;
            }
          }
          v32 = v61 > v60;
          v34 = v63 - 1;
          if (v34)
            continue;
        }
      }
      break;
    }
  }
LABEL_54:
  if (v23 > a3)
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"...", 3);
  if (v67 != v9)
  {
    v65 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"]", 1);
      ++v65;
    }
    while (v65 < (v67 - v9) >> 3);
  }
  if (v9)
    operator delete(v9);
}

void sub_1911A2E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v13;

  if (v13)
    operator delete(v13);
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::operator<<<half>(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"<", 1);
  if (a2[3] != a2[2])
  {
    v4 = 0;
    do
    {
      std::ostream::operator<<();
      ++v4;
      v5 = (uint64_t)(a2[3] - a2[2]) >> 3;
      if (v4 < v5)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)",", 1);
        v5 = (uint64_t)(a2[3] - a2[2]) >> 3;
      }
    }
    while (v4 < v5);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)">", 1);
  nitro::ndarray<half>::print_truncated(a2, a1, 0x64uLL);
  return a1;
}

void nitro::ndarray<half>::print_truncated(_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  const char *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  const char *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  if (v6 == v7)
  {
    v73 = 0;
    v9 = 0;
  }
  else
  {
    if (v8 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v9 = (char *)operator new(v6 - v7);
    v73 = &v9[8 * (v8 >> 3)];
    bzero(v9, v8 & 0xFFFFFFFFFFFFFFF8);
    if (*a1)
    {
      if ((unint64_t)(v8 - 8) >= 8)
      {
        v12 = ((unint64_t)(v8 - 8) >> 3) + 1;
        v11 = &v7[8 * (v12 & 0x3FFFFFFFFFFFFFFELL)];
        v13 = v7 + 8;
        v14 = 1;
        v15 = v12 & 0x3FFFFFFFFFFFFFFELL;
        v16 = 1;
        do
        {
          v14 *= *(v13 - 1);
          v16 *= *v13;
          v13 += 2;
          v15 -= 2;
        }
        while (v15);
        v10 = v16 * v14;
        if (v12 == (v12 & 0x3FFFFFFFFFFFFFFELL))
        {
LABEL_11:
          if (v10)
            goto LABEL_13;
          goto LABEL_12;
        }
      }
      else
      {
        v10 = 1;
        v11 = v7;
      }
      do
      {
        v17 = *(_QWORD *)v11;
        v11 += 8;
        v10 *= v17;
      }
      while (v11 != v6);
      goto LABEL_11;
    }
  }
LABEL_12:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"[]", 2);
LABEL_13:
  v18 = v73 - v9;
  if (v73 != v9)
  {
    v19 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"[", 1);
      ++v19;
    }
    while (v19 < v18 >> 3);
  }
  v21 = (char *)a1[2];
  v20 = (char *)a1[3];
  if (v20 == v21 || !*a1)
  {
    v23 = 0;
    goto LABEL_25;
  }
  v22 = v20 - v21 - 8;
  if (v22 < 8)
  {
    v23 = 1;
    v24 = (char *)a1[2];
    do
    {
LABEL_24:
      v30 = *(_QWORD *)v24;
      v24 += 8;
      v23 *= v30;
    }
    while (v24 != v20);
    goto LABEL_25;
  }
  v25 = (v22 >> 3) + 1;
  v24 = &v21[8 * (v25 & 0x3FFFFFFFFFFFFFFELL)];
  v26 = v21 + 8;
  v27 = 1;
  v28 = v25 & 0x3FFFFFFFFFFFFFFELL;
  v29 = 1;
  do
  {
    v27 *= *(v26 - 1);
    v29 *= *v26;
    v26 += 2;
    v28 -= 2;
  }
  while (v28);
  v23 = v29 * v27;
  if (v25 != (v25 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_24;
LABEL_25:
  if (a3)
  {
    v31 = v18 >> 3;
    v32 = 1;
    v33 = ",";
    v34 = a3;
    while (1)
    {
      if (!v32)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v33, 1);
      v35 = v73 - v9;
      if (v73 == v9)
      {
        v38 = 0;
        goto LABEL_40;
      }
      v36 = v35 >> 3;
      v37 = a1[5];
      if ((unint64_t)(v35 >> 3) <= 1)
        v36 = 1;
      if (v36 < 2)
        break;
      v40 = 0;
      v41 = 0;
      v39 = v36 & 0xFFFFFFFFFFFFFFFELL;
      v42 = v9 + 8;
      v43 = (_QWORD *)(v37 + 8);
      v44 = v36 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v40 += *(v43 - 1) * *(v42 - 1);
        v41 += *v43 * *v42;
        v42 += 2;
        v43 += 2;
        v44 -= 2;
      }
      while (v44);
      v38 = v41 + v40;
      if (v36 != v39)
        goto LABEL_38;
LABEL_40:
      _H0 = *(_WORD *)(*a1 + 2 * (a1[8] + v38));
      __asm { FCVT            S0, H0 }
      std::ostream::operator<<();
      v58 = (unint64_t)v35 >> 3;
      if ((int)((unint64_t)v35 >> 3) >= 1)
      {
        v59 = a1[2];
        v60 = ((unint64_t)v35 >> 3) + 1;
        while (1)
        {
          v61 = 8 * (v60 - 2);
          v62 = *(_QWORD *)&v9[v61] + 1;
          *(_QWORD *)&v9[v61] = v62;
          if (v62 < *(_QWORD *)(v59 + v61))
            break;
          *(_QWORD *)&v9[8 * (v60 - 2)] = 0;
          LODWORD(v58) = v58 - 1;
          if ((unint64_t)--v60 <= 1)
            goto LABEL_54;
        }
        if ((int)v58 >= 1)
        {
          v72 = v31;
          v63 = v34;
          v64 = v33;
          v65 = a3;
          v66 = v58 & ~((int)v58 >> 31);
          v67 = v35 >> 3;
          v68 = v66;
          if (v67 <= v66)
          {
            a3 = v65;
            v33 = v64;
            v69 = v63;
            v31 = v72;
          }
          else
          {
            do
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"]", 1);
              ++v68;
            }
            while (v68 < v67);
            a3 = v65;
            v33 = v64;
            v69 = v63;
            v31 = v72;
            if (v67 > v66)
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v33, 1);
              v70 = v66;
              do
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"[", 1);
                ++v70;
              }
              while (v70 < v72);
              v67 = v72;
            }
          }
          v32 = v67 > v66;
          v34 = v69 - 1;
          if (v34)
            continue;
        }
      }
      goto LABEL_54;
    }
    v38 = 0;
    v39 = 0;
LABEL_38:
    v45 = v36 - v39;
    v46 = 8 * v39;
    v47 = (uint64_t *)(v37 + v46);
    v48 = (uint64_t *)&v9[v46];
    do
    {
      v50 = *v48++;
      v49 = v50;
      v51 = *v47++;
      v38 += v51 * v49;
      --v45;
    }
    while (v45);
    goto LABEL_40;
  }
LABEL_54:
  if (v23 > a3)
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"...", 3);
  if (v73 != v9)
  {
    v71 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"]", 1);
      ++v71;
    }
    while (v71 < (v73 - v9) >> 3);
  }
  if (v9)
    operator delete(v9);
}

void sub_1911A33AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v13;

  if (v13)
    operator delete(v13);
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::operator<<<float>(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"<", 1);
  if (a2[3] != a2[2])
  {
    v4 = 0;
    do
    {
      std::ostream::operator<<();
      ++v4;
      v5 = (uint64_t)(a2[3] - a2[2]) >> 3;
      if (v4 < v5)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)",", 1);
        v5 = (uint64_t)(a2[3] - a2[2]) >> 3;
      }
    }
    while (v4 < v5);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)">", 1);
  nitro::ndarray<float>::print_truncated(a2, a1, 0x64uLL);
  return a1;
}

void nitro::ndarray<float>::print_truncated(_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  const char *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  const char *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  if (v6 == v7)
  {
    v67 = 0;
    v9 = 0;
  }
  else
  {
    if (v8 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v9 = (char *)operator new(v6 - v7);
    v67 = &v9[8 * (v8 >> 3)];
    bzero(v9, v8 & 0xFFFFFFFFFFFFFFF8);
    if (*a1)
    {
      if ((unint64_t)(v8 - 8) >= 8)
      {
        v12 = ((unint64_t)(v8 - 8) >> 3) + 1;
        v11 = &v7[8 * (v12 & 0x3FFFFFFFFFFFFFFELL)];
        v13 = v7 + 8;
        v14 = 1;
        v15 = v12 & 0x3FFFFFFFFFFFFFFELL;
        v16 = 1;
        do
        {
          v14 *= *(v13 - 1);
          v16 *= *v13;
          v13 += 2;
          v15 -= 2;
        }
        while (v15);
        v10 = v16 * v14;
        if (v12 == (v12 & 0x3FFFFFFFFFFFFFFELL))
        {
LABEL_11:
          if (v10)
            goto LABEL_13;
          goto LABEL_12;
        }
      }
      else
      {
        v10 = 1;
        v11 = v7;
      }
      do
      {
        v17 = *(_QWORD *)v11;
        v11 += 8;
        v10 *= v17;
      }
      while (v11 != v6);
      goto LABEL_11;
    }
  }
LABEL_12:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"[]", 2);
LABEL_13:
  v18 = v67 - v9;
  if (v67 != v9)
  {
    v19 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"[", 1);
      ++v19;
    }
    while (v19 < v18 >> 3);
  }
  v21 = (char *)a1[2];
  v20 = (char *)a1[3];
  if (v20 == v21 || !*a1)
  {
    v23 = 0;
    goto LABEL_25;
  }
  v22 = v20 - v21 - 8;
  if (v22 < 8)
  {
    v23 = 1;
    v24 = (char *)a1[2];
    do
    {
LABEL_24:
      v30 = *(_QWORD *)v24;
      v24 += 8;
      v23 *= v30;
    }
    while (v24 != v20);
    goto LABEL_25;
  }
  v25 = (v22 >> 3) + 1;
  v24 = &v21[8 * (v25 & 0x3FFFFFFFFFFFFFFELL)];
  v26 = v21 + 8;
  v27 = 1;
  v28 = v25 & 0x3FFFFFFFFFFFFFFELL;
  v29 = 1;
  do
  {
    v27 *= *(v26 - 1);
    v29 *= *v26;
    v26 += 2;
    v28 -= 2;
  }
  while (v28);
  v23 = v29 * v27;
  if (v25 != (v25 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_24;
LABEL_25:
  if (a3)
  {
    v31 = v18 >> 3;
    v32 = 1;
    v33 = ",";
    v34 = a3;
    while (1)
    {
      if (!v32)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v33, 1);
      v35 = v67 - v9;
      if (v67 != v9)
      {
        v36 = v35 >> 3;
        v37 = a1[5];
        if ((unint64_t)(v35 >> 3) <= 1)
          v36 = 1;
        if (v36 < 2)
        {
          v38 = 0;
          v39 = 0;
LABEL_38:
          v45 = v36 - v39;
          v46 = 8 * v39;
          v47 = (uint64_t *)(v37 + v46);
          v48 = (uint64_t *)&v9[v46];
          do
          {
            v50 = *v48++;
            v49 = v50;
            v51 = *v47++;
            v38 += v51 * v49;
            --v45;
          }
          while (v45);
          goto LABEL_40;
        }
        v40 = 0;
        v41 = 0;
        v39 = v36 & 0xFFFFFFFFFFFFFFFELL;
        v42 = v9 + 8;
        v43 = (_QWORD *)(v37 + 8);
        v44 = v36 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v40 += *(v43 - 1) * *(v42 - 1);
          v41 += *v43 * *v42;
          v42 += 2;
          v43 += 2;
          v44 -= 2;
        }
        while (v44);
        v38 = v41 + v40;
        if (v36 != v39)
          goto LABEL_38;
      }
LABEL_40:
      std::ostream::operator<<();
      v52 = (unint64_t)v35 >> 3;
      if ((int)((unint64_t)v35 >> 3) >= 1)
      {
        v53 = a1[2];
        v54 = ((unint64_t)v35 >> 3) + 1;
        while (1)
        {
          v55 = 8 * (v54 - 2);
          v56 = *(_QWORD *)&v9[v55] + 1;
          *(_QWORD *)&v9[v55] = v56;
          if (v56 < *(_QWORD *)(v53 + v55))
            break;
          *(_QWORD *)&v9[8 * (v54 - 2)] = 0;
          LODWORD(v52) = v52 - 1;
          if ((unint64_t)--v54 <= 1)
            goto LABEL_54;
        }
        if ((int)v52 >= 1)
        {
          v66 = v31;
          v57 = v34;
          v58 = v33;
          v59 = a3;
          v60 = v52 & ~((int)v52 >> 31);
          v61 = v35 >> 3;
          v62 = v60;
          if (v61 <= v60)
          {
            a3 = v59;
            v33 = v58;
            v63 = v57;
            v31 = v66;
          }
          else
          {
            do
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"]", 1);
              ++v62;
            }
            while (v62 < v61);
            a3 = v59;
            v33 = v58;
            v63 = v57;
            v31 = v66;
            if (v61 > v60)
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v33, 1);
              v64 = v60;
              do
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"[", 1);
                ++v64;
              }
              while (v64 < v66);
              v61 = v66;
            }
          }
          v32 = v61 > v60;
          v34 = v63 - 1;
          if (v34)
            continue;
        }
      }
      break;
    }
  }
LABEL_54:
  if (v23 > a3)
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"...", 3);
  if (v67 != v9)
  {
    v65 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"]", 1);
      ++v65;
    }
    while (v65 < (v67 - v9) >> 3);
  }
  if (v9)
    operator delete(v9);
}

void sub_1911A3910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v13;

  if (v13)
    operator delete(v13);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray_container::visit<nitro::ndarray_container const,nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0,(void *)0>(nitro::ndarray_container const &,nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 230, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 230, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1911A3C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1911A3CD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1911A400C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1911A4074(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

_QWORD *nitro::ndarray<unsigned char>::operator+=<unsigned char>(_QWORD *a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;

  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  v5 = v4 - v3;
  if (v4 == v3 || !*a1)
    return a1;
  if ((unint64_t)(v5 - 8) < 8)
  {
    v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6)
  {
    v14 = v5 >> 3;
    v15 = (_QWORD *)a2[2];
    if (v14 != (uint64_t)(a2[3] - (_QWORD)v15) >> 3)
      goto LABEL_19;
    v16 = v14 <= 1 ? 1 : v14;
    if (*(_QWORD *)v3 != *v15)
      goto LABEL_19;
    v17 = 1;
    do
    {
      v18 = v17;
      if (v16 == v17)
        break;
      v19 = *(_QWORD *)&v3[8 * v17];
      v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 >= v14)
    {
      nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(a1, a2);
    }
    else
    {
LABEL_19:
      nitro::ndarray<unsigned char>::operator+<unsigned char>(a1, a2, &v25);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v25);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  return a1;
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;

  v4 = (char *)a1[2];
  v5 = (char *)a1[3];
  v6 = (v5 - v4) >> 3;
  v7 = (_QWORD *)a2[2];
  if (v6 != (uint64_t)(a2[3] - (_QWORD)v7) >> 3)
    goto LABEL_13;
  if (v5 == v4)
    return;
  v8 = v6 <= 1 ? 1 : (v5 - v4) >> 3;
  if (*(_QWORD *)v4 != *v7)
    goto LABEL_13;
  v9 = 1;
  do
  {
    v10 = v9;
    if (v8 == v9)
      break;
    v11 = *(_QWORD *)&v4[8 * v9];
    v12 = v7[v9++];
  }
  while (v11 == v12);
  if (v10 < v6)
LABEL_13:
    nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator()();
  v13 = v5 - v4;
  if (v5 == v4 || !*a1)
    return;
  if ((unint64_t)(v13 - 8) < 8)
  {
    v14 = 1;
    v15 = (char *)a1[2];
    do
    {
LABEL_20:
      v21 = *(_QWORD *)v15;
      v15 += 8;
      v14 *= v21;
    }
    while (v15 != v5);
    goto LABEL_21;
  }
  v16 = ((unint64_t)(v13 - 8) >> 3) + 1;
  v15 = &v4[8 * (v16 & 0x3FFFFFFFFFFFFFFELL)];
  v17 = v4 + 8;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = v13 >> 3;
  if (v13 >> 3 == 3)
  {
    v35 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      v36 = 0;
      v37 = a2[8];
      v38 = a1[8];
      do
      {
        if (*((_QWORD *)v4 + 1))
        {
          v39 = 0;
          v40 = v37;
          v41 = v38;
          do
          {
            if (*((_QWORD *)v4 + 2))
            {
              v44 = 0;
              v45 = v40;
              v46 = v41;
              do
              {
                *(_BYTE *)(*a1 + v46) += *(_BYTE *)(*a2 + v45);
                v42 = (_QWORD *)a1[5];
                v46 += v42[2];
                v43 = (_QWORD *)a2[5];
                v45 += v43[2];
                ++v44;
                v4 = (char *)a1[2];
              }
              while (v44 < *((_QWORD *)v4 + 2));
            }
            else
            {
              v42 = (_QWORD *)a1[5];
              v43 = (_QWORD *)a2[5];
            }
            v41 += v42[1];
            v40 += v43[1];
            ++v39;
          }
          while (v39 < *((_QWORD *)v4 + 1));
          v35 = *(_QWORD *)v4;
        }
        else
        {
          v42 = (_QWORD *)a1[5];
          v43 = (_QWORD *)a2[5];
        }
        v38 += *v42;
        v37 += *v43;
        ++v36;
      }
      while (v36 < v35);
    }
  }
  else
  {
    if (v22 != 2)
    {
      if (v22 == 1)
      {
        if (*(_QWORD *)v4)
        {
          v23 = 0;
          v24 = a2[8];
          v25 = a1[8];
          do
          {
            *(_BYTE *)(*a1 + v25) += *(_BYTE *)(*a2 + v24);
            v25 += *(_QWORD *)a1[5];
            v24 += *(_QWORD *)a2[5];
            ++v23;
          }
          while (v23 < *(_QWORD *)a1[2]);
        }
        return;
      }
      if (v13 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v47 = operator new(v13);
      bzero(v47, v13 & 0xFFFFFFFFFFFFFFF8);
      if (v22 <= 1)
        v48 = 1;
      else
        v48 = v13 >> 3;
      v49 = v48 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        v50 = a1[5];
        if (v48 < 2)
          break;
        v53 = 0;
        v54 = 0;
        v55 = (_QWORD *)(v50 + 8);
        v56 = v48 & 0xFFFFFFFFFFFFFFFELL;
        v57 = v47 + 1;
        do
        {
          v53 += *(v55 - 1) * *(v57 - 1);
          v54 += *v55 * *v57;
          v57 += 2;
          v55 += 2;
          v56 -= 2;
        }
        while (v56);
        v51 = v54 + v53;
        v52 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49)
          goto LABEL_60;
LABEL_62:
        v65 = a2[5];
        if (v48 < 2)
        {
          v66 = 0;
          v67 = 0;
LABEL_67:
          v73 = v48 - v67;
          v74 = v67;
          v75 = (uint64_t *)(v65 + v74 * 8);
          v76 = &v47[v74];
          do
          {
            v78 = *v76++;
            v77 = v78;
            v79 = *v75++;
            v66 += v79 * v77;
            --v73;
          }
          while (v73);
          goto LABEL_69;
        }
        v68 = 0;
        v69 = 0;
        v70 = (_QWORD *)(v65 + 8);
        v71 = v48 & 0xFFFFFFFFFFFFFFFELL;
        v72 = v47 + 1;
        do
        {
          v68 += *(v70 - 1) * *(v72 - 1);
          v69 += *v70 * *v72;
          v72 += 2;
          v70 += 2;
          v71 -= 2;
        }
        while (v71);
        v66 = v69 + v68;
        v67 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49)
          goto LABEL_67;
LABEL_69:
        *(_BYTE *)(*a1 + v51) += *(_BYTE *)(*a2 + a2[8] + v66);
        if ((int)((unint64_t)v13 >> 3) >= 1)
        {
          v80 = a1[2];
          v81 = ((unint64_t)v13 >> 3) + 1;
          v82 = (unint64_t)v13 >> 3;
          while (1)
          {
            v83 = (v81 - 2);
            v84 = v47[v83] + 1;
            v47[v83] = v84;
            if (v84 < *(_QWORD *)(v80 + v83 * 8))
              break;
            v47[(v81 - 2)] = 0;
            LODWORD(v82) = v82 - 1;
            if ((unint64_t)--v81 <= 1)
              goto LABEL_75;
          }
          if ((int)v82 > 0)
            continue;
        }
LABEL_75:
        operator delete(v47);
        return;
      }
      v51 = 0;
      v52 = 0;
LABEL_60:
      v58 = v48 - v52;
      v59 = v52;
      v60 = (uint64_t *)(v50 + v59 * 8);
      v61 = &v47[v59];
      do
      {
        v63 = *v61++;
        v62 = v63;
        v64 = *v60++;
        v51 += v64 * v62;
        --v58;
      }
      while (v58);
      goto LABEL_62;
    }
    v26 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      v27 = 0;
      v28 = a2[8];
      v29 = a1[8];
      do
      {
        if (*((_QWORD *)v4 + 1))
        {
          v32 = 0;
          v33 = v28;
          v34 = v29;
          do
          {
            *(_BYTE *)(*a1 + v34) += *(_BYTE *)(*a2 + v33);
            v30 = (_QWORD *)a1[5];
            v34 += v30[1];
            v31 = (_QWORD *)a2[5];
            v33 += v31[1];
            ++v32;
            v4 = (char *)a1[2];
          }
          while (v32 < *((_QWORD *)v4 + 1));
          v26 = *(_QWORD *)v4;
        }
        else
        {
          v30 = (_QWORD *)a1[5];
          v31 = (_QWORD *)a2[5];
        }
        v29 += *v30;
        v28 += *v31;
        ++v27;
      }
      while (v27 < v26);
    }
  }
}

void sub_1911A4714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>::operator+<unsigned char>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<unsigned char>::copy((uint64_t)a1, a3);
    nitro::ndarray<unsigned char>::operator+=<unsigned char>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<unsigned char>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<unsigned char>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<unsigned char>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<unsigned char>::operator+=<unsigned char>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911A4A74(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911A4A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911A4B24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911A4B00);
  JUMPOUT(0x1911A4AD0);
}

void sub_1911A4B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911A4B10);
  JUMPOUT(0x1911A4AD8);
}

void sub_1911A4B44()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911A4AE8);
  JUMPOUT(0x1911A4AE0);
}

uint64_t nitro::ndarray<unsigned char>::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;

  v4 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v4;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = *(void **)(a1 + 16);
  if (v8)
  {
    *(_QWORD *)(a1 + 24) = v8;
    operator delete(v8);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
  }
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  v9 = *(void **)(a1 + 40);
  if (v9)
  {
    *(_QWORD *)(a1 + 48) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
  }
  *(_OWORD *)(a1 + 40) = *(__int128 *)((char *)a2 + 40);
  v10 = *((_QWORD *)a2 + 8);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 7) = 0;
  *(_QWORD *)(a1 + 64) = v10;
  return a1;
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911A4E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911A503C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911A5050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911A5048);
}

uint64_t *nitro::ndarray<int>::operator+=<unsigned char>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;

  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  v5 = v4 - v3;
  if (v4 == v3 || !*a1)
    return a1;
  if ((unint64_t)(v5 - 8) < 8)
  {
    v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6)
  {
    v14 = v5 >> 3;
    v15 = (_QWORD *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3)
      goto LABEL_19;
    v16 = v14 <= 1 ? 1 : v14;
    if (*(_QWORD *)v3 != *v15)
      goto LABEL_19;
    v17 = 1;
    do
    {
      v18 = v17;
      if (v16 == v17)
        break;
      v19 = *(_QWORD *)&v3[8 * v17];
      v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 >= v14)
    {
      nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(a1, a2);
    }
    else
    {
LABEL_19:
      nitro::ndarray<int>::operator+<unsigned char>(a1, a2, &v25);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v25);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  return a1;
}

uint32x4_t nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  _DWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint32x4_t *v50;
  uint64_t v51;
  uint32x4_t *v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  BOOL v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint32x4_t *v63;
  uint16x8_t v64;
  uint32x4_t v65;
  uint32x4_t result;
  unint64_t v67;
  unint64_t v68;
  unsigned __int8 *v69;
  uint64_t v70;
  _DWORD *v71;
  uint32x4_t *v72;
  uint64_t v73;
  unint64_t v74;
  uint8x16_t v75;
  uint16x8_t v76;
  uint16x8_t v77;
  uint32x4_t v78;
  uint32x4_t v79;
  uint32x4_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t *v85;
  uint32x4_t *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint32x4_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  BOOL v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint32x4_t *v109;
  uint16x8_t v110;
  uint32x4_t v111;
  unint64_t v112;
  unint64_t v113;
  unsigned __int8 *v114;
  uint64_t v115;
  _DWORD *v116;
  uint32x4_t *v117;
  uint64_t v118;
  unint64_t v119;
  uint8x16_t v120;
  uint16x8_t v121;
  uint16x8_t v122;
  uint32x4_t v123;
  uint32x4_t v124;
  uint32x4_t v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint8x8_t *v167;
  uint32x4_t *v168;
  uint8x8_t v169;
  uint16x8_t v170;
  uint32x4_t v171;
  uint8x16_t *v172;
  uint32x4_t *v173;
  unint64_t v174;
  uint8x16_t v175;
  uint16x8_t v176;
  uint16x8_t v177;
  uint32x4_t v178;
  uint32x4_t v179;
  uint32x4_t v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v189;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return result;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return result;
  v13 = *a1;
  if (!*a1)
    return result;
  if (v12 - 8 < 8)
  {
    v14 = 1;
    v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v16 = ((v12 - 8) >> 3) + 1;
  v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  v17 = v4 + 1;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return result;
  v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v186 = *v4;
    if (!*v4)
      return result;
    v81 = 0;
    v82 = a2[8];
    v83 = a1[8];
    v84 = v4[1];
    v85 = (uint64_t *)a1[5];
    v182 = (uint64_t *)a2[5];
    v183 = v83;
    v184 = *v182;
    v185 = *v85;
    v187 = 4 * *v85;
    v181 = 4 * v83;
    v86 = (uint32x4_t *)(v13 + 4 * v83);
    while (!v84)
    {
LABEL_64:
      v83 += v185;
      v82 += v184;
      ++v81;
      v86 = (uint32x4_t *)((char *)v86 + v187);
      if (v81 == v186)
        return result;
    }
    v87 = 0;
    v88 = v4[2];
    v89 = *a2;
    v90 = a2[5];
    v91 = v85[1];
    v92 = 4 * v91;
    v93 = v182[1];
    v189 = v88 & 0xFFFFFFFFFFFFFFF0;
    v94 = v88 & 0xFFFFFFFFFFFFFFF8;
    v95 = v86;
    v96 = *a2;
    v97 = v82;
    v98 = v83;
    while (!v88)
    {
LABEL_67:
      v98 += v91;
      v97 += v93;
      ++v87;
      v96 += v93;
      v95 = (uint32x4_t *)((char *)v95 + v92);
      if (v87 == v84)
        goto LABEL_64;
    }
    v99 = v85[2];
    v100 = *(_QWORD *)(v90 + 16);
    if (v88 < 8
      || (v99 == 1 ? (v101 = v100 == 1) : (v101 = 0),
          !v101
       || (v13 + v181 + v187 * v81 + v92 * v87 < v89 + v88 + v82 + v93 * v87
         ? (v102 = v89 + v97 >= v13 + v187 * v81 + 4 * (v183 + v88) + v92 * v87)
         : (v102 = 1),
           !v102)))
    {
      v112 = 0;
      v104 = v97;
      v108 = v98;
      goto LABEL_87;
    }
    if (v88 >= 0x10)
    {
      v117 = v95;
      v118 = v96;
      v119 = v88 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v120 = *(uint8x16_t *)(v118 + v82);
        v121 = vmovl_high_u8(v120);
        v122 = vmovl_u8(*(uint8x8_t *)v120.i8);
        v123 = vaddw_u16(*v117, *(uint16x4_t *)v122.i8);
        result = vaddw_high_u16(v117[1], v122);
        v124 = vaddw_u16(v117[2], *(uint16x4_t *)v121.i8);
        v125 = vaddw_high_u16(v117[3], v121);
        v117[2] = v124;
        v117[3] = v125;
        *v117 = v123;
        v117[1] = result;
        v117 += 4;
        v118 += 16;
        v119 -= 16;
      }
      while (v119);
      if (v88 == v189)
        goto LABEL_67;
      v103 = v88 & 0xFFFFFFFFFFFFFFF0;
      if ((v88 & 8) == 0)
      {
        v108 = v98 + v189 * v99;
        v112 = v88 & 0xFFFFFFFFFFFFFFF0;
        v104 = v97 + v189 * v100;
LABEL_87:
        v113 = v88 - v112;
        v114 = (unsigned __int8 *)(v89 + v104);
        v115 = 4 * v99;
        v116 = (_DWORD *)(v13 + 4 * v108);
        do
        {
          *v116 += *v114;
          v114 += v100;
          v116 = (_DWORD *)((char *)v116 + v115);
          --v113;
        }
        while (v113);
        goto LABEL_67;
      }
    }
    else
    {
      v103 = 0;
    }
    v104 = v97 + v94 * v100;
    v105 = v103 - (v88 & 0xFFFFFFFFFFFFFFF8);
    v106 = v82 + v103;
    v107 = 4 * v103;
    v108 = v98 + v94 * v99;
    do
    {
      v109 = (uint32x4_t *)((char *)v95 + v107);
      v110 = vmovl_u8(*(uint8x8_t *)(v96 + v106));
      v111 = vaddw_u16(*(uint32x4_t *)((char *)v95 + v107), *(uint16x4_t *)v110.i8);
      result = vaddw_high_u16(*(uint32x4_t *)((char *)&v95[1] + v107), v110);
      *v109 = v111;
      v109[1] = result;
      v106 += 8;
      v107 += 32;
      v105 += 8;
    }
    while (v105);
    v112 = v88 & 0xFFFFFFFFFFFFFFF8;
    if (v88 == v94)
      goto LABEL_67;
    goto LABEL_87;
  }
  if (v22 == 2)
  {
    v36 = *v4;
    if (!*v4)
      return result;
    v37 = 0;
    v38 = a2[8];
    v39 = a1[8];
    v40 = v4[1];
    v41 = *a2;
    v42 = (uint64_t *)a2[5];
    v43 = (uint64_t *)a1[5];
    v44 = *v43;
    v45 = 4 * *v43;
    v46 = *v42;
    v47 = v38 + v40;
    v48 = v40 & 0xFFFFFFFFFFFFFFF0;
    v49 = v40 & 0xFFFFFFFFFFFFFFF8;
    v50 = (uint32x4_t *)(v13 + 4 * v39);
    v51 = v13 + 4 * (v39 + v40);
    v52 = v50;
    while (!v40)
    {
LABEL_34:
      v39 += v44;
      v38 += v46;
      ++v37;
      v52 = (uint32x4_t *)((char *)v52 + v45);
      if (v37 == v36)
        return result;
    }
    v53 = v43[1];
    v54 = v42[1];
    if (v40 < 8
      || (v53 == 1 ? (v55 = v54 == 1) : (v55 = 0),
          !v55
       || ((unint64_t)v50->u64 + v45 * v37 < v41 + v47 + v46 * v37
         ? (v56 = v41 + v38 >= (unint64_t)(v51 + v45 * v37))
         : (v56 = 1),
           !v56)))
    {
      v67 = 0;
      v58 = v38;
      v62 = v39;
      goto LABEL_54;
    }
    if (v40 >= 0x10)
    {
      v72 = v52;
      v73 = v41;
      v74 = v40 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v75 = *(uint8x16_t *)(v73 + v38);
        v76 = vmovl_high_u8(v75);
        v77 = vmovl_u8(*(uint8x8_t *)v75.i8);
        v78 = vaddw_u16(*v72, *(uint16x4_t *)v77.i8);
        result = vaddw_high_u16(v72[1], v77);
        v79 = vaddw_u16(v72[2], *(uint16x4_t *)v76.i8);
        v80 = vaddw_high_u16(v72[3], v76);
        v72[2] = v79;
        v72[3] = v80;
        *v72 = v78;
        v72[1] = result;
        v72 += 4;
        v73 += 16;
        v74 -= 16;
      }
      while (v74);
      if (v40 == v48)
        goto LABEL_34;
      v57 = v40 & 0xFFFFFFFFFFFFFFF0;
      if ((v40 & 8) == 0)
      {
        v62 = v39 + v48 * v53;
        v67 = v40 & 0xFFFFFFFFFFFFFFF0;
        v58 = v38 + v48 * v54;
LABEL_54:
        v68 = v40 - v67;
        v69 = (unsigned __int8 *)(v41 + v58);
        v70 = 4 * v53;
        v71 = (_DWORD *)(v13 + 4 * v62);
        do
        {
          *v71 += *v69;
          v69 += v54;
          v71 = (_DWORD *)((char *)v71 + v70);
          --v68;
        }
        while (v68);
        goto LABEL_34;
      }
    }
    else
    {
      v57 = 0;
    }
    v58 = v38 + v49 * v54;
    v59 = v57 - (v40 & 0xFFFFFFFFFFFFFFF8);
    v60 = v41 + v57;
    v61 = 4 * v57;
    v62 = v39 + v49 * v53;
    do
    {
      v63 = (uint32x4_t *)((char *)v52 + v61);
      v64 = vmovl_u8(*(uint8x8_t *)(v60 + v38));
      v65 = vaddw_u16(*(uint32x4_t *)((char *)v52 + v61), *(uint16x4_t *)v64.i8);
      result = vaddw_high_u16(*(uint32x4_t *)((char *)&v52[1] + v61), v64);
      *v63 = v65;
      v63[1] = result;
      v60 += 8;
      v61 += 32;
      v59 += 8;
    }
    while (v59);
    v67 = v40 & 0xFFFFFFFFFFFFFFF8;
    if (v40 == v49)
      goto LABEL_34;
    goto LABEL_54;
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v126 = operator new(v12);
    bzero(v126, v12 & 0xFFFFFFFFFFFFFFF8);
    v127 = *a2;
    if (v12 >> 3 <= 1)
      v128 = 1;
    else
      v128 = v12 >> 3;
    v129 = a2[5];
    v130 = a2[8];
    v131 = v128 & 0x1FFFFFFFFFFFFFFELL;
    v132 = a1[5];
    while (v128 >= 2)
    {
      v135 = 0;
      v136 = 0;
      v137 = v128 & 0x1FFFFFFFFFFFFFFELL;
      v138 = (_QWORD *)(v132 + 8);
      v139 = v126 + 1;
      do
      {
        v135 += *(v138 - 1) * *(v139 - 1);
        v136 += *v138 * *v139;
        v139 += 2;
        v138 += 2;
        v137 -= 2;
      }
      while (v137);
      v133 = v136 + v135;
      v134 = v128 & 0x1FFFFFFFFFFFFFFELL;
      if (v128 != v131)
        goto LABEL_105;
LABEL_107:
      if (v128 < 2)
      {
        v147 = 0;
        v148 = 0;
LABEL_112:
        v154 = v128 - v148;
        v155 = v148;
        v156 = (uint64_t *)(v129 + 8 * v148);
        v157 = &v126[v155];
        do
        {
          v159 = *v157++;
          v158 = v159;
          v160 = *v156++;
          v147 += v160 * v158;
          --v154;
        }
        while (v154);
        goto LABEL_114;
      }
      v149 = 0;
      v150 = 0;
      v151 = v128 & 0x1FFFFFFFFFFFFFFELL;
      v152 = (_QWORD *)(v129 + 8);
      v153 = v126 + 1;
      do
      {
        v149 += *(v152 - 1) * *(v153 - 1);
        v150 += *v152 * *v153;
        v153 += 2;
        v152 += 2;
        v151 -= 2;
      }
      while (v151);
      v147 = v150 + v149;
      v148 = v128 & 0x1FFFFFFFFFFFFFFELL;
      if (v128 != v131)
        goto LABEL_112;
LABEL_114:
      *(_DWORD *)(v13 + 4 * v133) += *(unsigned __int8 *)(v127 + v130 + v147);
      if ((int)(v12 >> 3) >= 1)
      {
        v161 = (v12 >> 3) + 1;
        v162 = v12 >> 3;
        while (1)
        {
          v163 = (v161 - 2);
          v164 = v126[v163] + 1;
          v126[v163] = v164;
          if (v164 < v4[v163])
            break;
          v126[(v161 - 2)] = 0;
          --v162;
          if ((unint64_t)--v161 <= 1)
            goto LABEL_120;
        }
        if (v162 > 0)
          continue;
      }
LABEL_120:
      operator delete(v126);
      return result;
    }
    v133 = 0;
    v134 = 0;
LABEL_105:
    v140 = v128 - v134;
    v141 = v134;
    v142 = (uint64_t *)(v132 + 8 * v134);
    v143 = &v126[v141];
    do
    {
      v145 = *v143++;
      v144 = v145;
      v146 = *v142++;
      v133 += v146 * v144;
      --v140;
    }
    while (v140);
    goto LABEL_107;
  }
  v23 = *v4;
  if (!*v4)
    return result;
  v24 = a2[8];
  v25 = a1[8];
  v26 = *a2;
  v27 = *(_QWORD *)a1[5];
  v28 = *(_QWORD *)a2[5];
  if (v23 < 8)
    goto LABEL_27;
  v29 = 0;
  if (v27 != 1 || v28 != 1)
    goto LABEL_28;
  if (v13 + 4 * v25 < v26 + v23 + v24 && v26 + v24 < v13 + 4 * (v23 + v25))
  {
LABEL_27:
    v29 = 0;
LABEL_28:
    v30 = a2[8];
    v31 = a1[8];
    goto LABEL_29;
  }
  if (v23 >= 0x10)
  {
    v29 = v23 & 0xFFFFFFFFFFFFFFF0;
    v172 = (uint8x16_t *)(v26 + v24);
    v173 = (uint32x4_t *)(v13 + 4 * v25);
    v174 = v23 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v175 = *v172++;
      v176 = vmovl_high_u8(v175);
      v177 = vmovl_u8(*(uint8x8_t *)v175.i8);
      v178 = vaddw_u16(*v173, *(uint16x4_t *)v177.i8);
      result = vaddw_high_u16(v173[1], v177);
      v179 = vaddw_u16(v173[2], *(uint16x4_t *)v176.i8);
      v180 = vaddw_high_u16(v173[3], v176);
      v173[2] = v179;
      v173[3] = v180;
      *v173 = v178;
      v173[1] = result;
      v173 += 4;
      v174 -= 16;
    }
    while (v174);
    if (v23 == v29)
      return result;
    if ((v23 & 8) == 0)
    {
      v31 = v25 + v29;
      v30 = v24 + v29;
LABEL_29:
      v32 = v23 - v29;
      v33 = (unsigned __int8 *)(v26 + v30);
      v34 = 4 * v27;
      v35 = (_DWORD *)(v13 + 4 * v31);
      do
      {
        *v35 += *v33;
        v33 += v28;
        v35 = (_DWORD *)((char *)v35 + v34);
        --v32;
      }
      while (v32);
      return result;
    }
  }
  else
  {
    v29 = 0;
  }
  v165 = v29;
  v29 = v23 & 0xFFFFFFFFFFFFFFF8;
  v30 = v24 + (v23 & 0xFFFFFFFFFFFFFFF8);
  v31 = v25 + (v23 & 0xFFFFFFFFFFFFFFF8);
  v166 = v165 - (v23 & 0xFFFFFFFFFFFFFFF8);
  v167 = (uint8x8_t *)(v26 + v165 + v24);
  v168 = (uint32x4_t *)(v13 + 4 * (v165 + v25));
  do
  {
    v169 = *v167++;
    v170 = vmovl_u8(v169);
    v171 = vaddw_u16(*v168, *(uint16x4_t *)v170.i8);
    result = vaddw_high_u16(v168[1], v170);
    *v168 = v171;
    v168[1] = result;
    v168 += 2;
    v166 += 8;
  }
  while (v166);
  if (v23 != v29)
    goto LABEL_29;
  return result;
}

void sub_1911A5AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::operator+<unsigned char>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<int>::copy((uint64_t)a1, a3);
    nitro::ndarray<int>::operator+=<unsigned char>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<int>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<int>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<unsigned char>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<int>::operator+=<unsigned char>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911A5E14(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911A5E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911A5EC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911A5EA0);
  JUMPOUT(0x1911A5E70);
}

void sub_1911A5ED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911A5EB0);
  JUMPOUT(0x1911A5E78);
}

void sub_1911A5EE4()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911A5E88);
  JUMPOUT(0x1911A5E80);
}

void nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911A6158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911A62FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911A6310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911A6308);
}

uint64_t *nitro::ndarray<half>::operator+=<unsigned char>(uint64_t *a1, uint64_t *a2, float a3, double a4, int8x16_t a5, double a6, int8x16_t a7)
{
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v30;
  void *v31;
  void *v32;
  void *__p;
  void *v34;

  v8 = (char *)a1[2];
  v9 = (char *)a1[3];
  v10 = v9 - v8;
  if (v9 == v8 || !*a1)
    return a1;
  if ((unint64_t)(v10 - 8) < 8)
  {
    v11 = 1;
    v12 = (char *)a1[2];
    do
    {
LABEL_8:
      v18 = *(_QWORD *)v12;
      v12 += 8;
      v11 *= v18;
    }
    while (v12 != v9);
    goto LABEL_9;
  }
  v13 = ((unint64_t)(v10 - 8) >> 3) + 1;
  v12 = &v8[8 * (v13 & 0x3FFFFFFFFFFFFFFELL)];
  v14 = v8 + 8;
  v15 = 1;
  v16 = v13 & 0x3FFFFFFFFFFFFFFELL;
  v17 = 1;
  do
  {
    v15 *= *(v14 - 1);
    v17 *= *v14;
    v14 += 2;
    v16 -= 2;
  }
  while (v16);
  v11 = v17 * v15;
  if (v13 != (v13 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v11)
  {
    v19 = v10 >> 3;
    v20 = (_QWORD *)a2[2];
    if (v19 != (a2[3] - (uint64_t)v20) >> 3)
      goto LABEL_19;
    v21 = v19 <= 1 ? 1 : v19;
    if (*(_QWORD *)v8 != *v20)
      goto LABEL_19;
    v22 = 1;
    do
    {
      v23 = v22;
      if (v21 == v22)
        break;
      v24 = *(_QWORD *)&v8[8 * v22];
      v25 = v20[v22++];
    }
    while (v24 == v25);
    if (v23 >= v19)
    {
      nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(a1, a2, a3, a4, a5, a6, a7);
    }
    else
    {
LABEL_19:
      nitro::ndarray<half>::operator+<unsigned char>(a1, a2, &v30);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v30);
      if (__p)
      {
        v34 = __p;
        operator delete(__p);
      }
      if (v31)
      {
        v32 = v31;
        operator delete(v31);
      }
      v26 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
      if (*((_QWORD *)&v30 + 1))
      {
        v27 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
  }
  return a1;
}

void nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(uint64_t *a1, uint64_t *a2, float _S0, double a4, int8x16_t a5, double a6, int8x16_t _Q4)
{
  char *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  __int16 *v40;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  float16x4_t *v59;
  uint64_t v60;
  float16x4_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unsigned __int8 *v74;
  uint64_t v75;
  __int16 *v76;
  float16x4_t *v79;
  uint64_t v80;
  unint64_t v81;
  int8x16_t v82;
  uint32x4_t v83;
  uint32x4_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  float16x4_t *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  float16x4_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  BOOL v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unsigned __int8 *v115;
  uint64_t v116;
  __int16 *v117;
  float16x4_t *v120;
  uint64_t v121;
  unint64_t v122;
  int8x16_t v123;
  uint32x4_t v124;
  uint32x4_t v125;
  _QWORD *v126;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  _QWORD *v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v165;
  int v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t *v171;
  float16x4_t *v172;
  unint64_t v173;
  int8x16_t *v174;
  float16x4_t *v175;
  unint64_t v176;
  int8x16_t v177;
  float16x8_t v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v187;

  v9 = (unint64_t *)a1[2];
  v8 = (char *)a1[3];
  v10 = (v8 - (char *)v9) >> 3;
  v11 = (_QWORD *)a2[2];
  if (v10 != (a2[3] - (uint64_t)v11) >> 3)
    goto LABEL_13;
  if (v8 == (char *)v9)
    return;
  v12 = v10 <= 1 ? 1 : (v8 - (char *)v9) >> 3;
  if (*v9 != *v11)
    goto LABEL_13;
  v13 = 1;
  do
  {
    v14 = v13;
    if (v12 == v13)
      break;
    v15 = v9[v13];
    v16 = v11[v13++];
  }
  while (v15 == v16);
  if (v14 < v10)
LABEL_13:
    nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1})::{lambda(void)#1}::operator()();
  v17 = v8 - (char *)v9;
  if (v8 == (char *)v9)
    return;
  v18 = *a1;
  if (!*a1)
    return;
  if (v17 - 8 < 8)
  {
    v19 = 1;
    v20 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v26 = *v20++;
      v19 *= v26;
    }
    while (v20 != (unint64_t *)v8);
    goto LABEL_21;
  }
  v21 = ((v17 - 8) >> 3) + 1;
  v20 = &v9[v21 & 0x3FFFFFFFFFFFFFFELL];
  v22 = v9 + 1;
  v23 = 1;
  v24 = v21 & 0x3FFFFFFFFFFFFFFELL;
  v25 = 1;
  do
  {
    v23 *= *(v22 - 1);
    v25 *= *v22;
    v22 += 2;
    v24 -= 2;
  }
  while (v24);
  v19 = v25 * v23;
  if (v21 != (v21 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v19)
    return;
  v27 = (uint64_t)v17 >> 3;
  if ((uint64_t)v17 >> 3 == 3)
  {
    v184 = *v9;
    if (!*v9)
      return;
    v85 = 0;
    v86 = a2[8];
    v87 = a1[8];
    v88 = v9[1];
    v89 = (uint64_t *)a1[5];
    v180 = (uint64_t *)a2[5];
    v182 = *v180;
    v183 = *v89;
    v185 = 2 * *v89;
    v179 = 2 * v87;
    v90 = (float16x4_t *)(v18 + 2 * v87);
    v181 = v87;
    while (!v88)
    {
LABEL_64:
      v87 += v183;
      v86 += v182;
      ++v85;
      v90 = (float16x4_t *)((char *)v90 + v185);
      if (v85 == v184)
        return;
    }
    v91 = 0;
    v92 = v9[2];
    v93 = *a2;
    v94 = a2[5];
    v95 = v89[1];
    v96 = 2 * v95;
    v97 = v180[1];
    v187 = v92 & 0xFFFFFFFFFFFFFFF0;
    v98 = v92 & 0xFFFFFFFFFFFFFFF8;
    v99 = v90;
    v100 = *a2;
    v101 = v86;
    v102 = v87;
    while (!v92)
    {
LABEL_67:
      v102 += v95;
      v101 += v97;
      ++v91;
      v100 += v97;
      v99 = (float16x4_t *)((char *)v99 + v96);
      if (v91 == v88)
        goto LABEL_64;
    }
    v103 = v89[2];
    v104 = *(_QWORD *)(v94 + 16);
    if (v92 < 8
      || (v103 == 1 ? (v105 = v104 == 1) : (v105 = 0),
          !v105
       || (v18 + v179 + v185 * v85 + v96 * v91 < v93 + v92 + v86 + v97 * v91
         ? (v106 = v93 + v101 >= v18 + v185 * v85 + 2 * (v181 + v92) + v96 * v91)
         : (v106 = 1),
           !v106)))
    {
      v113 = 0;
      v108 = v101;
      v112 = v102;
      goto LABEL_87;
    }
    if (v92 >= 0x10)
    {
      v120 = v99;
      v121 = v100;
      v122 = v92 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v123 = *(int8x16_t *)(v121 + v86);
        v124 = (uint32x4_t)vqtbl1q_s8(v123, (int8x16_t)xmmword_191A741A0);
        v125 = (uint32x4_t)vqtbl1q_s8(v123, (int8x16_t)xmmword_191A74190);
        _Q4 = (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v123, (int8x16_t)xmmword_191A741B0)), vcvtq_f32_f16(v120[2]))), vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v123, (int8x16_t)xmmword_191A741C0)), vcvt_hight_f32_f16(*(float16x8_t *)v120[2].i8)));
        *(float16x8_t *)v120->i8 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vcvtq_f32_u32(v125), vcvtq_f32_f16(*v120))), vaddq_f32(vcvtq_f32_u32(v124), vcvt_hight_f32_f16(*(float16x8_t *)v120->i8)));
        *(int8x16_t *)v120[2].i8 = _Q4;
        v120 += 4;
        v121 += 16;
        v122 -= 16;
      }
      while (v122);
      if (v92 == v187)
        goto LABEL_67;
      v107 = v92 & 0xFFFFFFFFFFFFFFF0;
      if ((v92 & 8) == 0)
      {
        v112 = v102 + v187 * v103;
        v113 = v92 & 0xFFFFFFFFFFFFFFF0;
        v108 = v101 + v187 * v104;
LABEL_87:
        v114 = v92 - v113;
        v115 = (unsigned __int8 *)(v93 + v108);
        v116 = 2 * v103;
        v117 = (__int16 *)(v18 + 2 * v112);
        do
        {
          _Q4.i8[0] = *v115;
          _H5 = *v117;
          __asm { FCVT            S5, H5 }
          *(float *)_Q4.i32 = (float)_Q4.u32[0] + _S5;
          __asm { FCVT            H4, S4 }
          *v117 = _Q4.i16[0];
          v115 += v104;
          v117 = (__int16 *)((char *)v117 + v116);
          --v114;
        }
        while (v114);
        goto LABEL_67;
      }
    }
    else
    {
      v107 = 0;
    }
    v108 = v101 + v98 * v104;
    v109 = v107 - (v92 & 0xFFFFFFFFFFFFFFF8);
    v110 = v86 + v107;
    v111 = 2 * v107;
    v112 = v102 + v98 * v103;
    do
    {
      _Q4.i64[0] = *(_QWORD *)(v100 + v110);
      _Q4 = (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(_Q4, (int8x16_t)xmmword_191A74190)), vcvtq_f32_f16(*(float16x4_t *)((char *)v99 + v111)))), vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(_Q4, (int8x16_t)xmmword_191A741A0)), vcvt_hight_f32_f16(*(float16x8_t *)&v99->i8[v111])));
      *(int8x16_t *)&v99->i8[v111] = _Q4;
      v110 += 8;
      v111 += 16;
      v109 += 8;
    }
    while (v109);
    v113 = v92 & 0xFFFFFFFFFFFFFFF8;
    if (v92 == v98)
      goto LABEL_67;
    goto LABEL_87;
  }
  if (v27 == 2)
  {
    v45 = *v9;
    if (!*v9)
      return;
    v46 = 0;
    v47 = a2[8];
    v48 = a1[8];
    v49 = v9[1];
    v50 = *a2;
    v51 = (uint64_t *)a2[5];
    v52 = (uint64_t *)a1[5];
    v53 = *v52;
    v54 = *v51;
    v55 = 2 * *v52;
    v56 = v47 + v49;
    v57 = v49 & 0xFFFFFFFFFFFFFFF0;
    v58 = v49 & 0xFFFFFFFFFFFFFFF8;
    v59 = (float16x4_t *)(v18 + 2 * v48);
    v60 = v18 + 2 * (v48 + v49);
    v61 = v59;
    while (!v49)
    {
LABEL_34:
      v48 += v53;
      v47 += v54;
      ++v46;
      v61 = (float16x4_t *)((char *)v61 + v55);
      if (v46 == v45)
        return;
    }
    v62 = v52[1];
    v63 = v51[1];
    if (v49 < 8
      || (v62 == 1 ? (_ZF = v63 == 1) : (_ZF = 0),
          !_ZF
       || ((unint64_t)v59 + v55 * v46 < v50 + v56 + v54 * v46
         ? (_CF = v50 + v47 >= (unint64_t)(v60 + v55 * v46))
         : (_CF = 1),
           !_CF)))
    {
      v72 = 0;
      v67 = v47;
      v71 = v48;
      goto LABEL_54;
    }
    if (v49 >= 0x10)
    {
      v79 = v61;
      v80 = v50;
      v81 = v49 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v82 = *(int8x16_t *)(v80 + v47);
        v83 = (uint32x4_t)vqtbl1q_s8(v82, (int8x16_t)xmmword_191A741A0);
        v84 = (uint32x4_t)vqtbl1q_s8(v82, (int8x16_t)xmmword_191A74190);
        _Q4 = (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v82, (int8x16_t)xmmword_191A741B0)), vcvtq_f32_f16(v79[2]))), vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v82, (int8x16_t)xmmword_191A741C0)), vcvt_hight_f32_f16(*(float16x8_t *)v79[2].i8)));
        *(float16x8_t *)v79->i8 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vcvtq_f32_u32(v84), vcvtq_f32_f16(*v79))), vaddq_f32(vcvtq_f32_u32(v83), vcvt_hight_f32_f16(*(float16x8_t *)v79->i8)));
        *(int8x16_t *)v79[2].i8 = _Q4;
        v79 += 4;
        v80 += 16;
        v81 -= 16;
      }
      while (v81);
      if (v49 == v57)
        goto LABEL_34;
      v66 = v49 & 0xFFFFFFFFFFFFFFF0;
      if ((v49 & 8) == 0)
      {
        v71 = v48 + v57 * v62;
        v72 = v49 & 0xFFFFFFFFFFFFFFF0;
        v67 = v47 + v57 * v63;
LABEL_54:
        v73 = v49 - v72;
        v74 = (unsigned __int8 *)(v50 + v67);
        v75 = 2 * v62;
        v76 = (__int16 *)(v18 + 2 * v71);
        do
        {
          _Q4.i8[0] = *v74;
          _H5 = *v76;
          __asm { FCVT            S5, H5 }
          *(float *)_Q4.i32 = (float)_Q4.u32[0] + _S5;
          __asm { FCVT            H4, S4 }
          *v76 = _Q4.i16[0];
          v74 += v63;
          v76 = (__int16 *)((char *)v76 + v75);
          --v73;
        }
        while (v73);
        goto LABEL_34;
      }
    }
    else
    {
      v66 = 0;
    }
    v67 = v47 + v58 * v63;
    v68 = v66 - (v49 & 0xFFFFFFFFFFFFFFF8);
    v69 = v50 + v66;
    v70 = 2 * v66;
    v71 = v48 + v58 * v62;
    do
    {
      _Q4.i64[0] = *(_QWORD *)(v69 + v47);
      _Q4 = (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(_Q4, (int8x16_t)xmmword_191A74190)), vcvtq_f32_f16(*(float16x4_t *)((char *)v61 + v70)))), vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(_Q4, (int8x16_t)xmmword_191A741A0)), vcvt_hight_f32_f16(*(float16x8_t *)&v61->i8[v70])));
      *(int8x16_t *)&v61->i8[v70] = _Q4;
      v69 += 8;
      v70 += 16;
      v68 += 8;
    }
    while (v68);
    v72 = v49 & 0xFFFFFFFFFFFFFFF8;
    if (v49 == v58)
      goto LABEL_34;
    goto LABEL_54;
  }
  if (v27 != 1)
  {
    if ((v17 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v126 = operator new(v17);
    bzero(v126, v17 & 0xFFFFFFFFFFFFFFF8);
    v128 = *a2;
    if (v17 >> 3 <= 1)
      v129 = 1;
    else
      v129 = v17 >> 3;
    v130 = a2[5];
    v131 = a2[8];
    v132 = v129 & 0x1FFFFFFFFFFFFFFELL;
    v133 = a1[5];
    while (v129 >= 2)
    {
      v136 = 0;
      v137 = 0;
      v138 = v129 & 0x1FFFFFFFFFFFFFFELL;
      v139 = (_QWORD *)(v133 + 8);
      v140 = v126 + 1;
      do
      {
        v136 += *(v139 - 1) * *(v140 - 1);
        v137 += *v139 * *v140;
        v140 += 2;
        v139 += 2;
        v138 -= 2;
      }
      while (v138);
      v134 = v137 + v136;
      v135 = v129 & 0x1FFFFFFFFFFFFFFELL;
      if (v129 != v132)
        goto LABEL_105;
LABEL_107:
      if (v129 < 2)
      {
        v148 = 0;
        v149 = 0;
LABEL_112:
        v155 = v129 - v149;
        v156 = v149;
        v157 = (uint64_t *)(v130 + 8 * v149);
        v158 = &v126[v156];
        do
        {
          v160 = *v158++;
          v159 = v160;
          v161 = *v157++;
          v148 += v161 * v159;
          --v155;
        }
        while (v155);
        goto LABEL_114;
      }
      v150 = 0;
      v151 = 0;
      v152 = v129 & 0x1FFFFFFFFFFFFFFELL;
      v153 = (_QWORD *)(v130 + 8);
      v154 = v126 + 1;
      do
      {
        v150 += *(v153 - 1) * *(v154 - 1);
        v151 += *v153 * *v154;
        v154 += 2;
        v153 += 2;
        v152 -= 2;
      }
      while (v152);
      v148 = v151 + v150;
      v149 = v129 & 0x1FFFFFFFFFFFFFFELL;
      if (v129 != v132)
        goto LABEL_112;
LABEL_114:
      LOBYTE(_S0) = *(_BYTE *)(v128 + v131 + v148);
      v162 = 2 * v134;
      _H1 = *(_WORD *)(v18 + v162);
      __asm { FCVT            S1, H1 }
      _S0 = (float)LODWORD(_S0) + _S1;
      __asm { FCVT            H0, S0 }
      *(_WORD *)(v18 + v162) = LOWORD(_S0);
      if ((int)(v17 >> 3) >= 1)
      {
        v165 = (v17 >> 3) + 1;
        v166 = v17 >> 3;
        while (1)
        {
          v167 = (v165 - 2);
          v168 = v126[v167] + 1;
          v126[v167] = v168;
          if (v168 < v9[v167])
            break;
          v126[(v165 - 2)] = 0;
          --v166;
          if ((unint64_t)--v165 <= 1)
            goto LABEL_120;
        }
        if (v166 > 0)
          continue;
      }
LABEL_120:
      operator delete(v126);
      return;
    }
    v134 = 0;
    v135 = 0;
LABEL_105:
    v141 = v129 - v135;
    v142 = v135;
    v143 = (uint64_t *)(v133 + 8 * v135);
    v144 = &v126[v142];
    do
    {
      v146 = *v144++;
      v145 = v146;
      v147 = *v143++;
      v134 += v147 * v145;
      --v141;
    }
    while (v141);
    goto LABEL_107;
  }
  v28 = *v9;
  if (!*v9)
    return;
  v29 = a2[8];
  v30 = a1[8];
  v31 = *a2;
  v32 = *(_QWORD *)a1[5];
  v33 = *(_QWORD *)a2[5];
  if (v28 < 8)
    goto LABEL_27;
  v34 = 0;
  if (v32 != 1 || v33 != 1)
    goto LABEL_28;
  if (v18 + 2 * v30 < v31 + v28 + v29 && v31 + v29 < v18 + 2 * (v28 + v30))
  {
LABEL_27:
    v34 = 0;
LABEL_28:
    v35 = a2[8];
    v36 = a1[8];
    goto LABEL_29;
  }
  if (v28 >= 0x10)
  {
    v34 = v28 & 0xFFFFFFFFFFFFFFF0;
    v174 = (int8x16_t *)(v31 + v29);
    v175 = (float16x4_t *)(v18 + 2 * v30);
    _S0 = NAN;
    a5.i64[1] = 0xFFFFFF0FFFFFFF0ELL;
    v176 = v28 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v177 = *v174++;
      v178 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v177, (int8x16_t)xmmword_191A741B0)), vcvtq_f32_f16(v175[2]))), vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v177, (int8x16_t)xmmword_191A741C0)), vcvt_hight_f32_f16(*(float16x8_t *)v175[2].i8)));
      *(float16x8_t *)v175->i8 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v177, (int8x16_t)xmmword_191A74190)), vcvtq_f32_f16(*v175))), vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v177, (int8x16_t)xmmword_191A741A0)), vcvt_hight_f32_f16(*(float16x8_t *)v175->i8)));
      *(float16x8_t *)v175[2].i8 = v178;
      v175 += 4;
      v176 -= 16;
    }
    while (v176);
    if (v28 == v34)
      return;
    if ((v28 & 8) == 0)
    {
      v36 = v30 + v34;
      v35 = v29 + v34;
LABEL_29:
      v37 = v28 - v34;
      v38 = (_BYTE *)(v31 + v35);
      v39 = 2 * v32;
      v40 = (__int16 *)(v18 + 2 * v36);
      do
      {
        LOBYTE(_S0) = *v38;
        _H1 = *v40;
        __asm { FCVT            S1, H1 }
        _S0 = (float)LODWORD(_S0) + _S1;
        __asm { FCVT            H0, S0 }
        *v40 = LOWORD(_S0);
        v38 += v33;
        v40 = (__int16 *)((char *)v40 + v39);
        --v37;
      }
      while (v37);
      return;
    }
  }
  else
  {
    v34 = 0;
  }
  v169 = v34;
  v34 = v28 & 0xFFFFFFFFFFFFFFF8;
  v35 = v29 + (v28 & 0xFFFFFFFFFFFFFFF8);
  v36 = v30 + (v28 & 0xFFFFFFFFFFFFFFF8);
  v170 = v169 - (v28 & 0xFFFFFFFFFFFFFFF8);
  v171 = (unint64_t *)(v31 + v169 + v29);
  v172 = (float16x4_t *)(v18 + 2 * (v169 + v30));
  _S0 = NAN;
  do
  {
    v173 = *v171++;
    a5.i64[0] = v173;
    a5 = (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_191A74190)), vcvtq_f32_f16(*v172))), vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_191A741A0)), vcvt_hight_f32_f16(*(float16x8_t *)v172->i8)));
    *(int8x16_t *)v172->i8 = a5;
    v172 += 2;
    v170 += 8;
  }
  while (v170);
  if (v28 != v34)
    goto LABEL_29;
}

void sub_1911A6EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::operator+<unsigned char>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<half>::copy((uint64_t)a1, a3);
    nitro::ndarray<half>::operator+=<unsigned char>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<half>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<half>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<unsigned char>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<half>::operator+=<unsigned char>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911A7248(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911A725C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911A72F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911A72D4);
  JUMPOUT(0x1911A72A4);
}

void sub_1911A7308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911A72E4);
  JUMPOUT(0x1911A72ACLL);
}

void sub_1911A7318()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911A72BCLL);
  JUMPOUT(0x1911A72B4);
}

void nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911A758C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911A7730(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911A7744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911A773CLL);
}

uint64_t *nitro::ndarray<float>::operator+=<unsigned char>(uint64_t *a1, uint64_t *a2, float a3, double a4, int8x16_t a5, double a6, int8x16_t a7)
{
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v30;
  void *v31;
  void *v32;
  void *__p;
  void *v34;

  v8 = (char *)a1[2];
  v9 = (char *)a1[3];
  v10 = v9 - v8;
  if (v9 == v8 || !*a1)
    return a1;
  if ((unint64_t)(v10 - 8) < 8)
  {
    v11 = 1;
    v12 = (char *)a1[2];
    do
    {
LABEL_8:
      v18 = *(_QWORD *)v12;
      v12 += 8;
      v11 *= v18;
    }
    while (v12 != v9);
    goto LABEL_9;
  }
  v13 = ((unint64_t)(v10 - 8) >> 3) + 1;
  v12 = &v8[8 * (v13 & 0x3FFFFFFFFFFFFFFELL)];
  v14 = v8 + 8;
  v15 = 1;
  v16 = v13 & 0x3FFFFFFFFFFFFFFELL;
  v17 = 1;
  do
  {
    v15 *= *(v14 - 1);
    v17 *= *v14;
    v14 += 2;
    v16 -= 2;
  }
  while (v16);
  v11 = v17 * v15;
  if (v13 != (v13 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v11)
  {
    v19 = v10 >> 3;
    v20 = (_QWORD *)a2[2];
    if (v19 != (a2[3] - (uint64_t)v20) >> 3)
      goto LABEL_19;
    v21 = v19 <= 1 ? 1 : v19;
    if (*(_QWORD *)v8 != *v20)
      goto LABEL_19;
    v22 = 1;
    do
    {
      v23 = v22;
      if (v21 == v22)
        break;
      v24 = *(_QWORD *)&v8[8 * v22];
      v25 = v20[v22++];
    }
    while (v24 == v25);
    if (v23 >= v19)
    {
      nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(a1, a2, a3, a4, a5, a6, a7);
    }
    else
    {
LABEL_19:
      nitro::ndarray<float>::operator+<unsigned char>(a1, a2, &v30);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v30);
      if (__p)
      {
        v34 = __p;
        operator delete(__p);
      }
      if (v31)
      {
        v32 = v31;
        operator delete(v31);
      }
      v26 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
      if (*((_QWORD *)&v30 + 1))
      {
        v27 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
  }
  return a1;
}

void nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(uint64_t *a1, uint64_t *a2, float a3, double a4, int8x16_t a5, double a6, int8x16_t a7)
{
  char *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  float *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  float32x4_t *v55;
  uint64_t v56;
  float32x4_t *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  BOOL v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  float32x4_t v69;
  unint64_t v70;
  unint64_t v71;
  unsigned __int8 *v72;
  uint64_t v73;
  float *v74;
  float32x4_t *v75;
  uint64_t v76;
  unint64_t v77;
  int8x16_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  float32x4_t *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  float32x4_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  BOOL v104;
  BOOL v105;
  unint64_t v106;
  uint64_t v107;
  float32x4_t *v108;
  uint64_t v109;
  unint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  float32x4_t v120;
  unint64_t v121;
  unint64_t v122;
  unsigned __int8 *v123;
  uint64_t v124;
  float *v125;
  float32x4_t *v126;
  uint64_t v127;
  unint64_t v128;
  int8x16_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  _QWORD *v133;
  float v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t *v176;
  float32x4_t *v177;
  unint64_t v178;
  float32x4_t v179;
  int8x16_t *v180;
  float32x4_t *v181;
  unint64_t v182;
  int8x16_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v196;
  unint64_t v197;

  v9 = (unint64_t *)a1[2];
  v8 = (char *)a1[3];
  v10 = (v8 - (char *)v9) >> 3;
  v11 = (_QWORD *)a2[2];
  if (v10 != (a2[3] - (uint64_t)v11) >> 3)
    goto LABEL_13;
  if (v8 == (char *)v9)
    return;
  v12 = v10 <= 1 ? 1 : (v8 - (char *)v9) >> 3;
  if (*v9 != *v11)
    goto LABEL_13;
  v13 = 1;
  do
  {
    v14 = v13;
    if (v12 == v13)
      break;
    v15 = v9[v13];
    v16 = v11[v13++];
  }
  while (v15 == v16);
  if (v14 < v10)
LABEL_13:
    nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1})::{lambda(void)#1}::operator()();
  v17 = v8 - (char *)v9;
  if (v8 == (char *)v9)
    return;
  v18 = *a1;
  if (!*a1)
    return;
  if (v17 - 8 < 8)
  {
    v19 = 1;
    v20 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v26 = *v20++;
      v19 *= v26;
    }
    while (v20 != (unint64_t *)v8);
    goto LABEL_21;
  }
  v21 = ((v17 - 8) >> 3) + 1;
  v20 = &v9[v21 & 0x3FFFFFFFFFFFFFFELL];
  v22 = v9 + 1;
  v23 = 1;
  v24 = v21 & 0x3FFFFFFFFFFFFFFELL;
  v25 = 1;
  do
  {
    v23 *= *(v22 - 1);
    v25 *= *v22;
    v22 += 2;
    v24 -= 2;
  }
  while (v24);
  v19 = v25 * v23;
  if (v21 != (v21 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v19)
    return;
  v27 = (uint64_t)v17 >> 3;
  if ((uint64_t)v17 >> 3 == 3)
  {
    v192 = *v9;
    if (!*v9)
      return;
    v82 = 0;
    v83 = a2[8];
    v84 = a1[8];
    v85 = v9[1];
    v86 = (uint64_t *)a1[5];
    v188 = (uint64_t *)a2[5];
    v190 = *v188;
    v191 = *v86;
    v194 = 4 * *v86;
    v187 = 4 * v84;
    v87 = (float32x4_t *)(v18 + 4 * v84);
    v189 = v84;
    while (!v85)
    {
LABEL_64:
      v84 += v191;
      v83 += v190;
      ++v82;
      v87 = (float32x4_t *)((char *)v87 + v194);
      if (v82 == v192)
        return;
    }
    v88 = 0;
    v89 = v187 + v194 * v82;
    v90 = v9[2];
    v91 = *a2;
    v92 = a2[5];
    v93 = v86[1];
    v94 = 4 * v93;
    v95 = v194 * v82 + 4 * (v189 + v90);
    v96 = v188[1];
    v97 = v90 + v83;
    v196 = v90 & 0xFFFFFFFFFFFFFFF8;
    v197 = v90 & 0xFFFFFFFFFFFFFFF0;
    v193 = v82;
    v98 = v87;
    v99 = *a2;
    v100 = v83;
    v101 = v84;
    while (!v90)
    {
LABEL_67:
      v101 += v93;
      v100 += v96;
      ++v88;
      v99 += v96;
      v98 = (float32x4_t *)((char *)v98 + v94);
      if (v88 == v85)
        goto LABEL_64;
    }
    v102 = v86[2];
    v103 = *(_QWORD *)(v92 + 16);
    if (v90 < 8
      || (v102 == 1 ? (v104 = v103 == 1) : (v104 = 0),
          !v104
       || (v18 + v89 + v94 * v88 < (unint64_t)(v91 + v97 + v96 * v88)
         ? (v105 = v91 + v100 >= (unint64_t)(v18 + v95 + v94 * v88))
         : (v105 = 1),
           !v105)))
    {
      v121 = 0;
      v114 = v100;
      v118 = v101;
      goto LABEL_87;
    }
    if (v90 >= 0x10)
    {
      v126 = v98;
      v127 = v99;
      v128 = v90 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v129 = *(int8x16_t *)(v127 + v83);
        v130 = *v126;
        v131 = vaddq_f32(v126[1], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_191A741A0)));
        v132 = vaddq_f32(v126[3], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_191A741C0)));
        v126[2] = vaddq_f32(v126[2], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_191A741B0)));
        v126[3] = v132;
        a7 = (int8x16_t)vaddq_f32(v130, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_191A74190)));
        *v126 = (float32x4_t)a7;
        v126[1] = v131;
        v126 += 4;
        v127 += 16;
        v128 -= 16;
      }
      while (v128);
      if (v90 == v197)
        goto LABEL_67;
      v106 = v90 & 0xFFFFFFFFFFFFFFF0;
      if ((v90 & 8) == 0)
      {
        v118 = v101 + v197 * v102;
        v121 = v90 & 0xFFFFFFFFFFFFFFF0;
        v114 = v100 + v197 * v103;
LABEL_87:
        v122 = v90 - v121;
        v123 = (unsigned __int8 *)(v91 + v114);
        v124 = 4 * v102;
        v125 = (float *)(v18 + 4 * v118);
        do
        {
          a7.i8[0] = *v123;
          *(float *)a7.i32 = *v125 + (float)a7.u32[0];
          *v125 = *(float *)a7.i32;
          v123 += v103;
          v125 = (float *)((char *)v125 + v124);
          --v122;
        }
        while (v122);
        goto LABEL_67;
      }
    }
    else
    {
      v106 = 0;
    }
    v107 = v84;
    v108 = v87;
    v109 = v97;
    v110 = v9;
    v111 = v18;
    v112 = v95;
    v113 = v89;
    v114 = v100 + v196 * v103;
    v115 = v106 - (v90 & 0xFFFFFFFFFFFFFFF8);
    v116 = v83 + v106;
    v117 = 4 * v106;
    v118 = v101 + v196 * v102;
    do
    {
      v119 = (uint64_t)v98 + v117;
      a7.i64[0] = *(_QWORD *)(v99 + v116);
      v120 = vaddq_f32(*(float32x4_t *)((char *)v98 + v117 + 16), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_191A741A0)));
      a7 = (int8x16_t)vaddq_f32(*(float32x4_t *)((char *)v98 + v117), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_191A74190)));
      *(int8x16_t *)v119 = a7;
      *(float32x4_t *)(v119 + 16) = v120;
      v116 += 8;
      v117 += 32;
      v115 += 8;
    }
    while (v115);
    v121 = v90 & 0xFFFFFFFFFFFFFFF8;
    v89 = v113;
    v95 = v112;
    v18 = v111;
    v9 = v110;
    v97 = v109;
    v87 = v108;
    v84 = v107;
    v82 = v193;
    if (v90 == v196)
      goto LABEL_67;
    goto LABEL_87;
  }
  if (v27 == 2)
  {
    v41 = *v9;
    if (!*v9)
      return;
    v42 = 0;
    v43 = a2[8];
    v44 = a1[8];
    v45 = v9[1];
    v46 = *a2;
    v47 = (uint64_t *)a2[5];
    v48 = (uint64_t *)a1[5];
    v49 = *v48;
    v50 = *v47;
    v51 = 4 * *v48;
    v52 = v43 + v45;
    v53 = v45 & 0xFFFFFFFFFFFFFFF0;
    v54 = v45 & 0xFFFFFFFFFFFFFFF8;
    v55 = (float32x4_t *)(v18 + 4 * v44);
    v56 = v18 + 4 * (v44 + v45);
    v57 = v55;
    while (!v45)
    {
LABEL_34:
      v44 += v49;
      v43 += v50;
      ++v42;
      v57 = (float32x4_t *)((char *)v57 + v51);
      if (v42 == v41)
        return;
    }
    v58 = v48[1];
    v59 = v47[1];
    if (v45 < 8
      || (v58 == 1 ? (v60 = v59 == 1) : (v60 = 0),
          !v60
       || ((unint64_t)v55 + v51 * v42 < v46 + v52 + v50 * v42
         ? (v61 = v46 + v43 >= (unint64_t)(v56 + v51 * v42))
         : (v61 = 1),
           !v61)))
    {
      v70 = 0;
      v63 = v43;
      v67 = v44;
      goto LABEL_54;
    }
    if (v45 >= 0x10)
    {
      v75 = v57;
      v76 = v46;
      v77 = v45 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v78 = *(int8x16_t *)(v76 + v43);
        v79 = *v75;
        v80 = vaddq_f32(v75[1], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_191A741A0)));
        v81 = vaddq_f32(v75[3], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_191A741C0)));
        v75[2] = vaddq_f32(v75[2], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_191A741B0)));
        v75[3] = v81;
        a7 = (int8x16_t)vaddq_f32(v79, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_191A74190)));
        *v75 = (float32x4_t)a7;
        v75[1] = v80;
        v75 += 4;
        v76 += 16;
        v77 -= 16;
      }
      while (v77);
      if (v45 == v53)
        goto LABEL_34;
      v62 = v45 & 0xFFFFFFFFFFFFFFF0;
      if ((v45 & 8) == 0)
      {
        v67 = v44 + v53 * v58;
        v70 = v45 & 0xFFFFFFFFFFFFFFF0;
        v63 = v43 + v53 * v59;
LABEL_54:
        v71 = v45 - v70;
        v72 = (unsigned __int8 *)(v46 + v63);
        v73 = 4 * v58;
        v74 = (float *)(v18 + 4 * v67);
        do
        {
          a7.i8[0] = *v72;
          *(float *)a7.i32 = *v74 + (float)a7.u32[0];
          *v74 = *(float *)a7.i32;
          v72 += v59;
          v74 = (float *)((char *)v74 + v73);
          --v71;
        }
        while (v71);
        goto LABEL_34;
      }
    }
    else
    {
      v62 = 0;
    }
    v63 = v43 + v54 * v59;
    v64 = v62 - (v45 & 0xFFFFFFFFFFFFFFF8);
    v65 = v46 + v62;
    v66 = 4 * v62;
    v67 = v44 + v54 * v58;
    do
    {
      v68 = (uint64_t)v57 + v66;
      a7.i64[0] = *(_QWORD *)(v65 + v43);
      v69 = vaddq_f32(*(float32x4_t *)((char *)v57 + v66 + 16), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_191A741A0)));
      a7 = (int8x16_t)vaddq_f32(*(float32x4_t *)((char *)v57 + v66), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_191A74190)));
      *(int8x16_t *)v68 = a7;
      *(float32x4_t *)(v68 + 16) = v69;
      v65 += 8;
      v66 += 32;
      v64 += 8;
    }
    while (v64);
    v70 = v45 & 0xFFFFFFFFFFFFFFF8;
    if (v45 == v54)
      goto LABEL_34;
    goto LABEL_54;
  }
  if (v27 != 1)
  {
    if ((v17 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v133 = operator new(v17);
    bzero(v133, v17 & 0xFFFFFFFFFFFFFFF8);
    v135 = *a2;
    if (v17 >> 3 <= 1)
      v136 = 1;
    else
      v136 = v17 >> 3;
    v137 = a2[5];
    v138 = a2[8];
    v139 = v136 & 0x1FFFFFFFFFFFFFFELL;
    v140 = a1[5];
    while (v136 >= 2)
    {
      v143 = 0;
      v144 = 0;
      v145 = v136 & 0x1FFFFFFFFFFFFFFELL;
      v146 = (_QWORD *)(v140 + 8);
      v147 = v133 + 1;
      do
      {
        v143 += *(v146 - 1) * *(v147 - 1);
        v144 += *v146 * *v147;
        v147 += 2;
        v146 += 2;
        v145 -= 2;
      }
      while (v145);
      v141 = v144 + v143;
      v142 = v136 & 0x1FFFFFFFFFFFFFFELL;
      if (v136 != v139)
        goto LABEL_105;
LABEL_107:
      if (v136 < 2)
      {
        v155 = 0;
        v156 = 0;
LABEL_112:
        v162 = v136 - v156;
        v163 = v156;
        v164 = (uint64_t *)(v137 + 8 * v156);
        v165 = &v133[v163];
        do
        {
          v167 = *v165++;
          v166 = v167;
          v168 = *v164++;
          v155 += v168 * v166;
          --v162;
        }
        while (v162);
        goto LABEL_114;
      }
      v157 = 0;
      v158 = 0;
      v159 = v136 & 0x1FFFFFFFFFFFFFFELL;
      v160 = (_QWORD *)(v137 + 8);
      v161 = v133 + 1;
      do
      {
        v157 += *(v160 - 1) * *(v161 - 1);
        v158 += *v160 * *v161;
        v161 += 2;
        v160 += 2;
        v159 -= 2;
      }
      while (v159);
      v155 = v158 + v157;
      v156 = v136 & 0x1FFFFFFFFFFFFFFELL;
      if (v136 != v139)
        goto LABEL_112;
LABEL_114:
      LOBYTE(v134) = *(_BYTE *)(v135 + v138 + v155);
      v169 = 4 * v141;
      v134 = *(float *)(v18 + v169) + (float)LODWORD(v134);
      *(float *)(v18 + v169) = v134;
      if ((int)(v17 >> 3) >= 1)
      {
        v170 = (v17 >> 3) + 1;
        v171 = v17 >> 3;
        while (1)
        {
          v172 = (v170 - 2);
          v173 = v133[v172] + 1;
          v133[v172] = v173;
          if (v173 < v9[v172])
            break;
          v133[(v170 - 2)] = 0;
          --v171;
          if ((unint64_t)--v170 <= 1)
            goto LABEL_120;
        }
        if (v171 > 0)
          continue;
      }
LABEL_120:
      operator delete(v133);
      return;
    }
    v141 = 0;
    v142 = 0;
LABEL_105:
    v148 = v136 - v142;
    v149 = v142;
    v150 = (uint64_t *)(v140 + 8 * v142);
    v151 = &v133[v149];
    do
    {
      v153 = *v151++;
      v152 = v153;
      v154 = *v150++;
      v141 += v154 * v152;
      --v148;
    }
    while (v148);
    goto LABEL_107;
  }
  v28 = *v9;
  if (!*v9)
    return;
  v29 = a2[8];
  v30 = a1[8];
  v31 = *a2;
  v32 = *(_QWORD *)a1[5];
  v33 = *(_QWORD *)a2[5];
  if (v28 < 8)
    goto LABEL_27;
  v34 = 0;
  if (v32 != 1 || v33 != 1)
    goto LABEL_28;
  if (v18 + 4 * v30 < v31 + v28 + v29 && v31 + v29 < v18 + 4 * (v28 + v30))
  {
LABEL_27:
    v34 = 0;
LABEL_28:
    v35 = a2[8];
    v36 = a1[8];
    goto LABEL_29;
  }
  if (v28 >= 0x10)
  {
    v34 = v28 & 0xFFFFFFFFFFFFFFF0;
    v180 = (int8x16_t *)(v31 + v29);
    v181 = (float32x4_t *)(v18 + 4 * v30);
    a3 = NAN;
    a5.i64[1] = 0xFFFFFF0FFFFFFF0ELL;
    v182 = v28 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v183 = *v180++;
      v184 = *v181;
      v185 = vaddq_f32(v181[1], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v183, (int8x16_t)xmmword_191A741A0)));
      v186 = vaddq_f32(v181[3], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v183, (int8x16_t)xmmword_191A741C0)));
      v181[2] = vaddq_f32(v181[2], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v183, (int8x16_t)xmmword_191A741B0)));
      v181[3] = v186;
      *v181 = vaddq_f32(v184, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v183, (int8x16_t)xmmword_191A74190)));
      v181[1] = v185;
      v181 += 4;
      v182 -= 16;
    }
    while (v182);
    if (v28 == v34)
      return;
    if ((v28 & 8) == 0)
    {
      v36 = v30 + v34;
      v35 = v29 + v34;
LABEL_29:
      v37 = v28 - v34;
      v38 = (_BYTE *)(v31 + v35);
      v39 = 4 * v32;
      v40 = (float *)(v18 + 4 * v36);
      do
      {
        LOBYTE(a3) = *v38;
        a3 = *v40 + (float)LODWORD(a3);
        *v40 = a3;
        v38 += v33;
        v40 = (float *)((char *)v40 + v39);
        --v37;
      }
      while (v37);
      return;
    }
  }
  else
  {
    v34 = 0;
  }
  v174 = v34;
  v34 = v28 & 0xFFFFFFFFFFFFFFF8;
  v35 = v29 + (v28 & 0xFFFFFFFFFFFFFFF8);
  v36 = v30 + (v28 & 0xFFFFFFFFFFFFFFF8);
  v175 = v174 - (v28 & 0xFFFFFFFFFFFFFFF8);
  v176 = (unint64_t *)(v31 + v174 + v29);
  v177 = (float32x4_t *)(v18 + 4 * (v174 + v30));
  a3 = NAN;
  do
  {
    v178 = *v176++;
    a5.i64[0] = v178;
    v179 = vaddq_f32(v177[1], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_191A741A0)));
    a5 = (int8x16_t)vaddq_f32(*v177, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_191A74190)));
    *v177 = (float32x4_t)a5;
    v177[1] = v179;
    v177 += 2;
    v175 += 8;
  }
  while (v175);
  if (v28 != v34)
    goto LABEL_29;
}

void sub_1911A82C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::operator+<unsigned char>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<float>::copy((uint64_t)a1, a3);
    nitro::ndarray<float>::operator+=<unsigned char>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<float>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<float>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<unsigned char>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<float>::operator+=<unsigned char>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911A8628(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911A863C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911A86D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911A86B4);
  JUMPOUT(0x1911A8684);
}

void sub_1911A86E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911A86C4);
  JUMPOUT(0x1911A868CLL);
}

void sub_1911A86F8()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911A869CLL);
  JUMPOUT(0x1911A8694);
}

void nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911A896C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911A8B10(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911A8B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911A8B1CLL);
}

_QWORD *nitro::ndarray<unsigned char>::ndarray(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  v8 = (_BYTE *)a2[2];
  v7 = (_BYTE *)a2[3];
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)operator new(v7 - v8);
    a1[2] = v10;
    a1[3] = v10;
    v11 = &v10[8 * (v9 >> 3)];
    a1[4] = v11;
    memcpy(v10, v8, v9);
    a1[3] = v11;
  }
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  v13 = (_BYTE *)a2[5];
  v12 = (_BYTE *)a2[6];
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v15 = (char *)operator new(v12 - v13);
    a1[5] = v15;
    a1[6] = v15;
    v16 = &v15[8 * (v14 >> 3)];
    a1[7] = v16;
    memcpy(v15, v13, v14);
    a1[6] = v16;
  }
  a1[8] = a2[8];
  return a1;
}

void sub_1911A8C3C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 48) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v6;
    operator delete(v6);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1911A8F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1911A8FF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

_QWORD *nitro::ndarray<unsigned char>::operator+=<int>(_QWORD *a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;

  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  v5 = v4 - v3;
  if (v4 == v3 || !*a1)
    return a1;
  if ((unint64_t)(v5 - 8) < 8)
  {
    v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6)
  {
    v14 = v5 >> 3;
    v15 = (_QWORD *)a2[2];
    if (v14 != (uint64_t)(a2[3] - (_QWORD)v15) >> 3)
      goto LABEL_19;
    v16 = v14 <= 1 ? 1 : v14;
    if (*(_QWORD *)v3 != *v15)
      goto LABEL_19;
    v17 = 1;
    do
    {
      v18 = v17;
      if (v16 == v17)
        break;
      v19 = *(_QWORD *)&v3[8 * v17];
      v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 >= v14)
    {
      nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(a1, a2);
    }
    else
    {
LABEL_19:
      nitro::ndarray<unsigned char>::operator+<int>(a1, a2, &v25);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v25);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  return a1;
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;

  v4 = (char *)a1[2];
  v5 = (char *)a1[3];
  v6 = (v5 - v4) >> 3;
  v7 = (_QWORD *)a2[2];
  if (v6 != (uint64_t)(a2[3] - (_QWORD)v7) >> 3)
    goto LABEL_13;
  if (v5 == v4)
    return;
  v8 = v6 <= 1 ? 1 : (v5 - v4) >> 3;
  if (*(_QWORD *)v4 != *v7)
    goto LABEL_13;
  v9 = 1;
  do
  {
    v10 = v9;
    if (v8 == v9)
      break;
    v11 = *(_QWORD *)&v4[8 * v9];
    v12 = v7[v9++];
  }
  while (v11 == v12);
  if (v10 < v6)
LABEL_13:
    nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1})::{lambda(void)#1}::operator()();
  v13 = v5 - v4;
  if (v5 == v4 || !*a1)
    return;
  if ((unint64_t)(v13 - 8) < 8)
  {
    v14 = 1;
    v15 = (char *)a1[2];
    do
    {
LABEL_20:
      v21 = *(_QWORD *)v15;
      v15 += 8;
      v14 *= v21;
    }
    while (v15 != v5);
    goto LABEL_21;
  }
  v16 = ((unint64_t)(v13 - 8) >> 3) + 1;
  v15 = &v4[8 * (v16 & 0x3FFFFFFFFFFFFFFELL)];
  v17 = v4 + 8;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = v13 >> 3;
  if (v13 >> 3 == 3)
  {
    v35 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      v36 = 0;
      v37 = a2[8];
      v38 = a1[8];
      do
      {
        if (*((_QWORD *)v4 + 1))
        {
          v39 = 0;
          v40 = v37;
          v41 = v38;
          do
          {
            if (*((_QWORD *)v4 + 2))
            {
              v44 = 0;
              v45 = v40;
              v46 = v41;
              do
              {
                *(_BYTE *)(*a1 + v46) += *(_DWORD *)(*a2 + 4 * v45);
                v42 = (_QWORD *)a1[5];
                v46 += v42[2];
                v43 = (_QWORD *)a2[5];
                v45 += v43[2];
                ++v44;
                v4 = (char *)a1[2];
              }
              while (v44 < *((_QWORD *)v4 + 2));
            }
            else
            {
              v42 = (_QWORD *)a1[5];
              v43 = (_QWORD *)a2[5];
            }
            v41 += v42[1];
            v40 += v43[1];
            ++v39;
          }
          while (v39 < *((_QWORD *)v4 + 1));
          v35 = *(_QWORD *)v4;
        }
        else
        {
          v42 = (_QWORD *)a1[5];
          v43 = (_QWORD *)a2[5];
        }
        v38 += *v42;
        v37 += *v43;
        ++v36;
      }
      while (v36 < v35);
    }
  }
  else
  {
    if (v22 != 2)
    {
      if (v22 == 1)
      {
        if (*(_QWORD *)v4)
        {
          v23 = 0;
          v24 = a2[8];
          v25 = a1[8];
          do
          {
            *(_BYTE *)(*a1 + v25) += *(_BYTE *)(*a2 + 4 * v24);
            v25 += *(_QWORD *)a1[5];
            v24 += *(_QWORD *)a2[5];
            ++v23;
          }
          while (v23 < *(_QWORD *)a1[2]);
        }
        return;
      }
      if (v13 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v47 = operator new(v13);
      bzero(v47, v13 & 0xFFFFFFFFFFFFFFF8);
      if (v22 <= 1)
        v48 = 1;
      else
        v48 = v13 >> 3;
      v49 = v48 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        v50 = a1[5];
        if (v48 < 2)
          break;
        v53 = 0;
        v54 = 0;
        v55 = (_QWORD *)(v50 + 8);
        v56 = v48 & 0xFFFFFFFFFFFFFFFELL;
        v57 = v47 + 1;
        do
        {
          v53 += *(v55 - 1) * *(v57 - 1);
          v54 += *v55 * *v57;
          v57 += 2;
          v55 += 2;
          v56 -= 2;
        }
        while (v56);
        v51 = v54 + v53;
        v52 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49)
          goto LABEL_60;
LABEL_62:
        v65 = a2[5];
        if (v48 < 2)
        {
          v66 = 0;
          v67 = 0;
LABEL_67:
          v73 = v48 - v67;
          v74 = v67;
          v75 = (uint64_t *)(v65 + v74 * 8);
          v76 = &v47[v74];
          do
          {
            v78 = *v76++;
            v77 = v78;
            v79 = *v75++;
            v66 += v79 * v77;
            --v73;
          }
          while (v73);
          goto LABEL_69;
        }
        v68 = 0;
        v69 = 0;
        v70 = (_QWORD *)(v65 + 8);
        v71 = v48 & 0xFFFFFFFFFFFFFFFELL;
        v72 = v47 + 1;
        do
        {
          v68 += *(v70 - 1) * *(v72 - 1);
          v69 += *v70 * *v72;
          v72 += 2;
          v70 += 2;
          v71 -= 2;
        }
        while (v71);
        v66 = v69 + v68;
        v67 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49)
          goto LABEL_67;
LABEL_69:
        *(_BYTE *)(*a1 + v51) += *(_BYTE *)(*a2 + 4 * (a2[8] + v66));
        if ((int)((unint64_t)v13 >> 3) >= 1)
        {
          v80 = a1[2];
          v81 = ((unint64_t)v13 >> 3) + 1;
          v82 = (unint64_t)v13 >> 3;
          while (1)
          {
            v83 = (v81 - 2);
            v84 = v47[v83] + 1;
            v47[v83] = v84;
            if (v84 < *(_QWORD *)(v80 + v83 * 8))
              break;
            v47[(v81 - 2)] = 0;
            LODWORD(v82) = v82 - 1;
            if ((unint64_t)--v81 <= 1)
              goto LABEL_75;
          }
          if ((int)v82 > 0)
            continue;
        }
LABEL_75:
        operator delete(v47);
        return;
      }
      v51 = 0;
      v52 = 0;
LABEL_60:
      v58 = v48 - v52;
      v59 = v52;
      v60 = (uint64_t *)(v50 + v59 * 8);
      v61 = &v47[v59];
      do
      {
        v63 = *v61++;
        v62 = v63;
        v64 = *v60++;
        v51 += v64 * v62;
        --v58;
      }
      while (v58);
      goto LABEL_62;
    }
    v26 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      v27 = 0;
      v28 = a2[8];
      v29 = a1[8];
      do
      {
        if (*((_QWORD *)v4 + 1))
        {
          v32 = 0;
          v33 = v28;
          v34 = v29;
          do
          {
            *(_BYTE *)(*a1 + v34) += *(_DWORD *)(*a2 + 4 * v33);
            v30 = (_QWORD *)a1[5];
            v34 += v30[1];
            v31 = (_QWORD *)a2[5];
            v33 += v31[1];
            ++v32;
            v4 = (char *)a1[2];
          }
          while (v32 < *((_QWORD *)v4 + 1));
          v26 = *(_QWORD *)v4;
        }
        else
        {
          v30 = (_QWORD *)a1[5];
          v31 = (_QWORD *)a2[5];
        }
        v29 += *v30;
        v28 += *v31;
        ++v27;
      }
      while (v27 < v26);
    }
  }
}

void sub_1911A9694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>::operator+<int>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<unsigned char>::copy((uint64_t)a1, a3);
    nitro::ndarray<unsigned char>::operator+=<int>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<unsigned char>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<unsigned char>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<int>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<unsigned char>::operator+=<int>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911A99F4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911A9A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911A9AA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911A9A80);
  JUMPOUT(0x1911A9A50);
}

void sub_1911A9AB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911A9A90);
  JUMPOUT(0x1911A9A58);
}

void sub_1911A9AC4()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911A9A68);
  JUMPOUT(0x1911A9A60);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911A9D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911A9EDC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911A9EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911A9EE8);
}

uint64_t *nitro::ndarray<int>::operator+=<int>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;

  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  v5 = v4 - v3;
  if (v4 == v3 || !*a1)
    return a1;
  if ((unint64_t)(v5 - 8) < 8)
  {
    v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6)
  {
    v14 = v5 >> 3;
    v15 = (_QWORD *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3)
      goto LABEL_19;
    v16 = v14 <= 1 ? 1 : v14;
    if (*(_QWORD *)v3 != *v15)
      goto LABEL_19;
    v17 = 1;
    do
    {
      v18 = v17;
      if (v16 == v17)
        break;
      v19 = *(_QWORD *)&v3[8 * v17];
      v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 >= v14)
    {
      nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(a1, a2);
    }
    else
    {
LABEL_19:
      nitro::ndarray<int>::operator+<int>(a1, a2, &v25);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v25);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  return a1;
}

int32x4_t nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _DWORD *v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  int32x4_t *v66;
  int32x4_t *v67;
  unint64_t v68;
  int32x4_t result;
  int32x4_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int32x4_t *v88;
  int32x4_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  _DWORD *v98;
  uint64_t v99;
  uint64_t v100;
  _DWORD *v101;
  int32x4_t *v103;
  int32x4_t *v104;
  unint64_t v105;
  int32x4_t v106;
  _QWORD *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  unint64_t v145;
  int32x4_t *v146;
  int32x4_t *v147;
  unint64_t v148;
  int32x4_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v159;
  uint64_t v160;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return result;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return result;
  v160 = *a1;
  if (!*a1)
    return result;
  if (v12 - 8 < 8)
  {
    v13 = 1;
    v14 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v20 = *v14++;
      v13 *= v20;
    }
    while (v14 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v15 = ((v12 - 8) >> 3) + 1;
  v14 = &v4[v15 & 0x3FFFFFFFFFFFFFFELL];
  v16 = v4 + 1;
  v17 = 1;
  v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
  v19 = 1;
  do
  {
    v17 *= *(v16 - 1);
    v19 *= *v16;
    v16 += 2;
    v18 -= 2;
  }
  while (v18);
  v13 = v19 * v17;
  if (v15 != (v15 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v13)
    return result;
  v21 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v155 = *v4;
    if (!*v4)
      return result;
    v71 = 0;
    v72 = a2[8];
    v73 = a1[8];
    v74 = v4[1];
    v75 = (uint64_t *)a1[5];
    v152 = (uint64_t *)a2[5];
    v153 = *v152;
    v154 = *v75;
    v157 = 4 * *v75;
    v156 = 4 * *v152;
    v150 = 4 * v72;
    v151 = 4 * v73;
    v76 = 4 * v73 + v160 + 16;
    v77 = 4 * v72 + 16;
    while (!v74)
    {
LABEL_55:
      v73 += v154;
      v72 += v153;
      ++v71;
      v76 += v157;
      v77 += v156;
      if (v71 == v155)
        return result;
    }
    v78 = 0;
    v79 = v150 + v156 * v71;
    v80 = v4[2];
    v81 = *a2;
    v82 = v75[1];
    v83 = v152[1];
    v84 = 4 * v82;
    v159 = v151 + v157 * v71;
    v85 = 4 * v83;
    v86 = v80 & 0xFFFFFFFFFFFFFFF8;
    v87 = a2[5];
    v88 = (int32x4_t *)(*a2 + v77);
    v89 = (int32x4_t *)v76;
    v90 = v72;
    v91 = v73;
    while (!v80)
    {
LABEL_58:
      v91 += v82;
      v90 += v83;
      ++v78;
      v89 = (int32x4_t *)((char *)v89 + v84);
      v88 = (int32x4_t *)((char *)v88 + v85);
      if (v78 == v74)
        goto LABEL_55;
    }
    v92 = v75[2];
    v93 = *(_QWORD *)(v87 + 16);
    if (v80 >= 8)
    {
      v94 = 0;
      if (v92 != 1)
        goto LABEL_62;
      v95 = v90;
      v96 = v91;
      if (v93 != 1)
      {
LABEL_63:
        v97 = v80 - v94;
        v98 = (_DWORD *)(v81 + 4 * v95);
        v99 = 4 * v93;
        v100 = 4 * v92;
        v101 = (_DWORD *)(v160 + 4 * v96);
        do
        {
          *v101 += *v98;
          v98 = (_DWORD *)((char *)v98 + v99);
          v101 = (_DWORD *)((char *)v101 + v100);
          --v97;
        }
        while (v97);
        goto LABEL_58;
      }
      if (v160 + v159 + v84 * v78 >= v81 + v79 + 4 * v80 + v85 * v78
        || v81 + v79 + v85 * v78 >= v160 + v159 + 4 * v80 + v84 * v78)
      {
        v95 = v90 + v86;
        v103 = v88;
        v104 = v89;
        v105 = v80 & 0xFFFFFFFFFFFFFFF8;
        v96 = v91 + v86;
        do
        {
          result = vaddq_s32(v104[-1], v103[-1]);
          v106 = vaddq_s32(*v104, *v103);
          v104[-1] = result;
          *v104 = v106;
          v104 += 2;
          v103 += 2;
          v105 -= 8;
        }
        while (v105);
        v94 = v80 & 0xFFFFFFFFFFFFFFF8;
        if (v80 == v86)
          goto LABEL_58;
        goto LABEL_63;
      }
    }
    v94 = 0;
LABEL_62:
    v95 = v90;
    v96 = v91;
    goto LABEL_63;
  }
  if (v21 == 2)
  {
    v36 = *v4;
    if (!*v4)
      return result;
    v37 = 0;
    v38 = a2[8];
    v39 = a1[8];
    v40 = v4[1];
    v41 = (uint64_t *)a2[5];
    v42 = (uint64_t *)a1[5];
    v43 = *v42;
    v44 = *v41;
    v45 = 4 * *v42;
    v46 = 4 * *v41;
    v47 = v40 & 0xFFFFFFFFFFFFFFF8;
    v48 = *a2;
    v49 = 4 * v39 + v160 + 16;
    v50 = 4 * v38 + *a2 + 16;
    v51 = v160 + 4 * v39;
    v52 = v160 + 4 * v39 + 4 * v40;
    v53 = *a2 + 4 * v38;
    v54 = *a2 + 4 * v38 + 4 * v40;
    while (!v40)
    {
LABEL_34:
      v39 += v43;
      v38 += v44;
      ++v37;
      v49 += v45;
      v50 += v46;
      if (v37 == v36)
        return result;
    }
    v55 = v42[1];
    v56 = v41[1];
    if (v40 >= 8)
    {
      v57 = 0;
      if (v55 != 1)
        goto LABEL_38;
      v58 = v38;
      v59 = v39;
      if (v56 != 1)
      {
LABEL_39:
        v60 = v40 - v57;
        v61 = (_DWORD *)(v48 + 4 * v58);
        v62 = 4 * v56;
        v63 = 4 * v55;
        v64 = (_DWORD *)(v160 + 4 * v59);
        do
        {
          *v64 += *v61;
          v61 = (_DWORD *)((char *)v61 + v62);
          v64 = (_DWORD *)((char *)v64 + v63);
          --v60;
        }
        while (v60);
        goto LABEL_34;
      }
      if (v51 + v45 * v37 >= (unint64_t)(v54 + v46 * v37)
        || v53 + v46 * v37 >= (unint64_t)(v52 + v45 * v37))
      {
        v58 = v38 + v47;
        v66 = (int32x4_t *)v50;
        v67 = (int32x4_t *)v49;
        v68 = v40 & 0xFFFFFFFFFFFFFFF8;
        v59 = v39 + v47;
        do
        {
          result = vaddq_s32(v67[-1], v66[-1]);
          v70 = vaddq_s32(*v67, *v66);
          v67[-1] = result;
          *v67 = v70;
          v67 += 2;
          v66 += 2;
          v68 -= 8;
        }
        while (v68);
        v57 = v40 & 0xFFFFFFFFFFFFFFF8;
        if (v40 == v47)
          goto LABEL_34;
        goto LABEL_39;
      }
    }
    v57 = 0;
LABEL_38:
    v58 = v38;
    v59 = v39;
    goto LABEL_39;
  }
  if (v21 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v107 = operator new(v12);
    bzero(v107, v12 & 0xFFFFFFFFFFFFFFF8);
    v108 = *a2;
    if (v12 >> 3 <= 1)
      v109 = 1;
    else
      v109 = v12 >> 3;
    v110 = a2[5];
    v111 = a2[8];
    v112 = v109 & 0x1FFFFFFFFFFFFFFELL;
    v113 = a1[5];
    while (v109 >= 2)
    {
      v116 = 0;
      v117 = 0;
      v118 = v109 & 0x1FFFFFFFFFFFFFFELL;
      v119 = (_QWORD *)(v113 + 8);
      v120 = v107 + 1;
      do
      {
        v116 += *(v119 - 1) * *(v120 - 1);
        v117 += *v119 * *v120;
        v120 += 2;
        v119 += 2;
        v118 -= 2;
      }
      while (v118);
      v114 = v117 + v116;
      v115 = v109 & 0x1FFFFFFFFFFFFFFELL;
      if (v109 != v112)
        goto LABEL_87;
LABEL_89:
      if (v109 < 2)
      {
        v128 = 0;
        v129 = 0;
LABEL_94:
        v135 = v109 - v129;
        v136 = v129;
        v137 = (uint64_t *)(v110 + 8 * v129);
        v138 = &v107[v136];
        do
        {
          v140 = *v138++;
          v139 = v140;
          v141 = *v137++;
          v128 += v141 * v139;
          --v135;
        }
        while (v135);
        goto LABEL_96;
      }
      v130 = 0;
      v131 = 0;
      v132 = v109 & 0x1FFFFFFFFFFFFFFELL;
      v133 = (_QWORD *)(v110 + 8);
      v134 = v107 + 1;
      do
      {
        v130 += *(v133 - 1) * *(v134 - 1);
        v131 += *v133 * *v134;
        v134 += 2;
        v133 += 2;
        v132 -= 2;
      }
      while (v132);
      v128 = v131 + v130;
      v129 = v109 & 0x1FFFFFFFFFFFFFFELL;
      if (v109 != v112)
        goto LABEL_94;
LABEL_96:
      *(_DWORD *)(v160 + 4 * v114) += *(_DWORD *)(v108 + 4 * (v111 + v128));
      if ((int)(v12 >> 3) >= 1)
      {
        v142 = (v12 >> 3) + 1;
        v143 = v12 >> 3;
        while (1)
        {
          v144 = (v142 - 2);
          v145 = v107[v144] + 1;
          v107[v144] = v145;
          if (v145 < v4[v144])
            break;
          v107[(v142 - 2)] = 0;
          --v143;
          if ((unint64_t)--v142 <= 1)
            goto LABEL_102;
        }
        if (v143 > 0)
          continue;
      }
LABEL_102:
      operator delete(v107);
      return result;
    }
    v114 = 0;
    v115 = 0;
LABEL_87:
    v121 = v109 - v115;
    v122 = v115;
    v123 = (uint64_t *)(v113 + 8 * v115);
    v124 = &v107[v122];
    do
    {
      v126 = *v124++;
      v125 = v126;
      v127 = *v123++;
      v114 += v127 * v125;
      --v121;
    }
    while (v121);
    goto LABEL_89;
  }
  v22 = *v4;
  if (!*v4)
    return result;
  v23 = a2[8];
  v24 = a1[8];
  v25 = *a2;
  v26 = *(_QWORD *)a1[5];
  v27 = *(_QWORD *)a2[5];
  if (v22 < 0xC)
    goto LABEL_27;
  v28 = 0;
  if (v26 != 1 || v27 != 1)
    goto LABEL_28;
  if (v160 + 4 * v24 < v25 + 4 * v22 + 4 * v23 && v25 + 4 * v23 < v160 + 4 * v22 + 4 * v24)
  {
LABEL_27:
    v28 = 0;
LABEL_28:
    v29 = a2[8];
    v30 = a1[8];
LABEL_29:
    v31 = v22 - v28;
    v32 = (_DWORD *)(v25 + 4 * v29);
    v33 = 4 * v27;
    v34 = 4 * v26;
    v35 = (_DWORD *)(v160 + 4 * v30);
    do
    {
      *v35 += *v32;
      v32 = (_DWORD *)((char *)v32 + v33);
      v35 = (_DWORD *)((char *)v35 + v34);
      --v31;
    }
    while (v31);
    return result;
  }
  v28 = v22 & 0xFFFFFFFFFFFFFFF8;
  v29 = v23 + (v22 & 0xFFFFFFFFFFFFFFF8);
  v30 = v24 + (v22 & 0xFFFFFFFFFFFFFFF8);
  v146 = (int32x4_t *)(v25 + 4 * v23 + 16);
  v147 = (int32x4_t *)(v160 + 4 * v24 + 16);
  v148 = v22 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    result = vaddq_s32(v147[-1], v146[-1]);
    v149 = vaddq_s32(*v147, *v146);
    v147[-1] = result;
    *v147 = v149;
    v146 += 2;
    v147 += 2;
    v148 -= 8;
  }
  while (v148);
  if (v22 != v28)
    goto LABEL_29;
  return result;
}

void sub_1911AA878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::operator+<int>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<int>::copy((uint64_t)a1, a3);
    nitro::ndarray<int>::operator+=<int>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<int>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<int>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<int>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<int>::operator+=<int>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911AABD8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911AABEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911AAC88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911AAC64);
  JUMPOUT(0x1911AAC34);
}

void sub_1911AAC98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911AAC74);
  JUMPOUT(0x1911AAC3CLL);
}

void sub_1911AACA8()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911AAC4CLL);
  JUMPOUT(0x1911AAC44);
}

void nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911AAF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911AB0C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911AB0D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911AB0CCLL);
}

uint64_t *nitro::ndarray<half>::operator+=<int>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;

  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  v5 = v4 - v3;
  if (v4 == v3 || !*a1)
    return a1;
  if ((unint64_t)(v5 - 8) < 8)
  {
    v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6)
  {
    v14 = v5 >> 3;
    v15 = (_QWORD *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3)
      goto LABEL_19;
    v16 = v14 <= 1 ? 1 : v14;
    if (*(_QWORD *)v3 != *v15)
      goto LABEL_19;
    v17 = 1;
    do
    {
      v18 = v17;
      if (v16 == v17)
        break;
      v19 = *(_QWORD *)&v3[8 * v17];
      v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 >= v14)
    {
      nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(a1, a2);
    }
    else
    {
LABEL_19:
      nitro::ndarray<half>::operator+<int>(a1, a2, &v25);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v25);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  return a1;
}

void nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  __int16 *v34;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int *v63;
  uint64_t v64;
  uint64_t v65;
  __int16 *v66;
  int32x4_t *v70;
  float16x4_t *v71;
  unint64_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  float16x8_t v77;
  float16x8_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  int32x4_t *v92;
  uint64_t v93;
  float16x4_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  int *v104;
  uint64_t v105;
  uint64_t v106;
  __int16 *v107;
  int32x4_t *v111;
  float16x4_t *v112;
  unint64_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  float16x8_t v118;
  float16x8_t v119;
  _QWORD *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v159;
  int v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int32x4_t *v165;
  float16x4_t *v166;
  unint64_t v167;
  int32x4_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int32x4_t v171;
  float16x8_t v172;
  float16x8_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return;
  v13 = *a1;
  if (!*a1)
    return;
  if (v12 - 8 < 8)
  {
    v14 = 1;
    v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v16 = ((v12 - 8) >> 3) + 1;
  v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  v17 = v4 + 1;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v179 = *v4;
    if (!*v4)
      return;
    v79 = 0;
    v80 = a2[8];
    v81 = a1[8];
    v82 = v4[1];
    v83 = (uint64_t *)a1[5];
    v174 = (uint64_t *)a2[5];
    v84 = v13 + 2 * v81 + 16;
    v177 = *v174;
    v178 = *v83;
    v176 = 2 * *v83;
    v85 = 4 * v80 + 32;
    v175 = 4 * *v174;
    while (!v82)
    {
LABEL_50:
      v81 += v178;
      v80 += v177;
      ++v79;
      v84 += v176;
      v85 += v175;
      if (v79 == v179)
        return;
    }
    v86 = 0;
    v87 = v4[2];
    v88 = *a2;
    v89 = a2[5];
    v90 = v83[1];
    v91 = v87 & 0xFFFFFFFFFFFFFFF0;
    v92 = (int32x4_t *)(*a2 + v85);
    v93 = v174[1];
    v94 = (float16x4_t *)v84;
    v95 = v80;
    v96 = v81;
    while (1)
    {
      if (v87)
      {
        v97 = v83[2];
        v98 = *(_QWORD *)(v89 + 16);
        if (v87 >= 0x10 && (v97 == 1 ? (v99 = v98 == 1) : (v99 = 0), v99))
        {
          v101 = v95 + v91 * v98;
          v111 = v92;
          v112 = v94;
          v113 = v87 & 0xFFFFFFFFFFFFFFF0;
          v102 = v96 + v91 * v97;
          do
          {
            v115 = v111[-2];
            v114 = v111[-1];
            v117 = *v111;
            v116 = v111[1];
            v111 += 4;
            v118 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vcvtq_f32_s32(v115), vcvtq_f32_f16(v112[-2]))), vaddq_f32(vcvtq_f32_s32(v114), vcvt_hight_f32_f16(*(float16x8_t *)v112[-2].i8)));
            v119 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vcvtq_f32_s32(v117), vcvtq_f32_f16(*v112))), vaddq_f32(vcvtq_f32_s32(v116), vcvt_hight_f32_f16(*(float16x8_t *)v112->i8)));
            *(float16x8_t *)v112[-2].i8 = v118;
            *(float16x8_t *)v112->i8 = v119;
            v112 += 4;
            v113 -= 16;
          }
          while (v113);
          v100 = v87 & 0xFFFFFFFFFFFFFFF0;
          if (v87 == v91)
            goto LABEL_53;
        }
        else
        {
          v100 = 0;
          v101 = v95;
          v102 = v96;
        }
        v103 = v87 - v100;
        v104 = (int *)(v88 + 4 * v101);
        v105 = 4 * v98;
        v106 = 2 * v97;
        v107 = (__int16 *)(v13 + 2 * v102);
        do
        {
          _H1 = *v107;
          __asm { FCVT            S1, H1 }
          _S0 = (float)*v104 + _S1;
          __asm { FCVT            H0, S0 }
          *v107 = LOWORD(_S0);
          v104 = (int *)((char *)v104 + v105);
          v107 = (__int16 *)((char *)v107 + v106);
          --v103;
        }
        while (v103);
      }
LABEL_53:
      v96 += v90;
      v95 += v93;
      ++v86;
      v94 = (float16x4_t *)((char *)v94 + 2 * v90);
      v92 = (int32x4_t *)((char *)v92 + 4 * v93);
      if (v86 == v82)
        goto LABEL_50;
    }
  }
  if (v22 == 2)
  {
    v41 = *v4;
    if (!*v4)
      return;
    v42 = 0;
    v43 = a2[8];
    v44 = a1[8];
    v45 = v4[1];
    v46 = *a2;
    v47 = (uint64_t *)a2[5];
    v48 = (uint64_t *)a1[5];
    v49 = *v48;
    v50 = *v47;
    v51 = v45 & 0xFFFFFFFFFFFFFFF0;
    v52 = v13 + 2 * v44 + 16;
    v53 = 2 * *v48;
    v54 = *a2 + 4 * v43 + 32;
    v55 = 4 * *v47;
    while (1)
    {
      if (v45)
      {
        v56 = v48[1];
        v57 = v47[1];
        if (v45 >= 0x10 && (v56 == 1 ? (_ZF = v57 == 1) : (_ZF = 0), _ZF))
        {
          v60 = v43 + v51 * v57;
          v70 = (int32x4_t *)v54;
          v71 = (float16x4_t *)v52;
          v72 = v45 & 0xFFFFFFFFFFFFFFF0;
          v61 = v44 + v51 * v56;
          do
          {
            v74 = v70[-2];
            v73 = v70[-1];
            v76 = *v70;
            v75 = v70[1];
            v70 += 4;
            v77 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vcvtq_f32_s32(v74), vcvtq_f32_f16(v71[-2]))), vaddq_f32(vcvtq_f32_s32(v73), vcvt_hight_f32_f16(*(float16x8_t *)v71[-2].i8)));
            v78 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vcvtq_f32_s32(v76), vcvtq_f32_f16(*v71))), vaddq_f32(vcvtq_f32_s32(v75), vcvt_hight_f32_f16(*(float16x8_t *)v71->i8)));
            *(float16x8_t *)v71[-2].i8 = v77;
            *(float16x8_t *)v71->i8 = v78;
            v71 += 4;
            v72 -= 16;
          }
          while (v72);
          v59 = v45 & 0xFFFFFFFFFFFFFFF0;
          if (v45 == v51)
            goto LABEL_33;
        }
        else
        {
          v59 = 0;
          v60 = v43;
          v61 = v44;
        }
        v62 = v45 - v59;
        v63 = (int *)(v46 + 4 * v60);
        v64 = 4 * v57;
        v65 = 2 * v56;
        v66 = (__int16 *)(v13 + 2 * v61);
        do
        {
          _H1 = *v66;
          __asm { FCVT            S1, H1 }
          _S0 = (float)*v63 + _S1;
          __asm { FCVT            H0, S0 }
          *v66 = LOWORD(_S0);
          v63 = (int *)((char *)v63 + v64);
          v66 = (__int16 *)((char *)v66 + v65);
          --v62;
        }
        while (v62);
      }
LABEL_33:
      v44 += v49;
      v43 += v50;
      ++v42;
      v52 += v53;
      v54 += v55;
      if (v42 == v41)
        return;
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v120 = operator new(v12);
    bzero(v120, v12 & 0xFFFFFFFFFFFFFFF8);
    v121 = *a2;
    if (v12 >> 3 <= 1)
      v122 = 1;
    else
      v122 = v12 >> 3;
    v123 = a2[5];
    v124 = a2[8];
    v125 = v122 & 0x1FFFFFFFFFFFFFFELL;
    v126 = a1[5];
    while (v122 >= 2)
    {
      v129 = 0;
      v130 = 0;
      v131 = v122 & 0x1FFFFFFFFFFFFFFELL;
      v132 = (_QWORD *)(v126 + 8);
      v133 = v120 + 1;
      do
      {
        v129 += *(v132 - 1) * *(v133 - 1);
        v130 += *v132 * *v133;
        v133 += 2;
        v132 += 2;
        v131 -= 2;
      }
      while (v131);
      v127 = v130 + v129;
      v128 = v122 & 0x1FFFFFFFFFFFFFFELL;
      if (v122 != v125)
        goto LABEL_78;
LABEL_80:
      if (v122 < 2)
      {
        v141 = 0;
        v142 = 0;
LABEL_85:
        v148 = v122 - v142;
        v149 = v142;
        v150 = (uint64_t *)(v123 + 8 * v142);
        v151 = &v120[v149];
        do
        {
          v153 = *v151++;
          v152 = v153;
          v154 = *v150++;
          v141 += v154 * v152;
          --v148;
        }
        while (v148);
        goto LABEL_87;
      }
      v143 = 0;
      v144 = 0;
      v145 = v122 & 0x1FFFFFFFFFFFFFFELL;
      v146 = (_QWORD *)(v123 + 8);
      v147 = v120 + 1;
      do
      {
        v143 += *(v146 - 1) * *(v147 - 1);
        v144 += *v146 * *v147;
        v147 += 2;
        v146 += 2;
        v145 -= 2;
      }
      while (v145);
      v141 = v144 + v143;
      v142 = v122 & 0x1FFFFFFFFFFFFFFELL;
      if (v122 != v125)
        goto LABEL_85;
LABEL_87:
      v155 = 2 * v127;
      _H1 = *(_WORD *)(v13 + v155);
      __asm { FCVT            S1, H1 }
      _S0 = (float)*(int *)(v121 + 4 * (v124 + v141)) + _S1;
      __asm { FCVT            H0, S0 }
      *(_WORD *)(v13 + v155) = LOWORD(_S0);
      if ((int)(v12 >> 3) >= 1)
      {
        v159 = (v12 >> 3) + 1;
        v160 = v12 >> 3;
        while (1)
        {
          v161 = (v159 - 2);
          v162 = v120[v161] + 1;
          v120[v161] = v162;
          if (v162 < v4[v161])
            break;
          v120[(v159 - 2)] = 0;
          --v160;
          if ((unint64_t)--v159 <= 1)
            goto LABEL_93;
        }
        if (v160 > 0)
          continue;
      }
LABEL_93:
      operator delete(v120);
      return;
    }
    v127 = 0;
    v128 = 0;
LABEL_78:
    v134 = v122 - v128;
    v135 = v128;
    v136 = (uint64_t *)(v126 + 8 * v128);
    v137 = &v120[v135];
    do
    {
      v139 = *v137++;
      v138 = v139;
      v140 = *v136++;
      v127 += v140 * v138;
      --v134;
    }
    while (v134);
    goto LABEL_80;
  }
  v23 = *v4;
  if (!*v4)
    return;
  v24 = a2[8];
  v25 = a1[8];
  v26 = *a2;
  v27 = *(_QWORD *)a1[5];
  v28 = *(_QWORD *)a2[5];
  if (v23 < 0x10)
  {
    v29 = 0;
LABEL_28:
    v30 = v23 - v29;
    v31 = (int *)(v26 + 4 * v24);
    v32 = 4 * v28;
    v33 = 2 * v27;
    v34 = (__int16 *)(v13 + 2 * v25);
    do
    {
      _H1 = *v34;
      __asm { FCVT            S1, H1 }
      _S0 = (float)*v31 + _S1;
      __asm { FCVT            H0, S0 }
      *v34 = LOWORD(_S0);
      v31 = (int *)((char *)v31 + v32);
      v34 = (__int16 *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  v29 = 0;
  if (v27 != 1)
    goto LABEL_28;
  if (v28 != 1)
    goto LABEL_28;
  v29 = v23 & 0xFFFFFFFFFFFFFFF0;
  v163 = v24 + (v23 & 0xFFFFFFFFFFFFFFF0);
  v164 = v25 + (v23 & 0xFFFFFFFFFFFFFFF0);
  v165 = (int32x4_t *)(v26 + 4 * v24 + 32);
  v166 = (float16x4_t *)(v13 + 2 * v25 + 16);
  v167 = v23 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v169 = v165[-2];
    v168 = v165[-1];
    v171 = *v165;
    v170 = v165[1];
    v165 += 4;
    v172 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vcvtq_f32_s32(v169), vcvtq_f32_f16(v166[-2]))), vaddq_f32(vcvtq_f32_s32(v168), vcvt_hight_f32_f16(*(float16x8_t *)v166[-2].i8)));
    v173 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vcvtq_f32_s32(v171), vcvtq_f32_f16(*v166))), vaddq_f32(vcvtq_f32_s32(v170), vcvt_hight_f32_f16(*(float16x8_t *)v166->i8)));
    *(float16x8_t *)v166[-2].i8 = v172;
    *(float16x8_t *)v166->i8 = v173;
    v166 += 4;
    v167 -= 16;
  }
  while (v167);
  v24 = v163;
  v25 = v164;
  if (v23 != v29)
    goto LABEL_28;
}

void sub_1911ABA08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::operator+<int>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<half>::copy((uint64_t)a1, a3);
    nitro::ndarray<half>::operator+=<int>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<half>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<half>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<int>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<half>::operator+=<int>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911ABD68(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911ABD7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911ABE18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911ABDF4);
  JUMPOUT(0x1911ABDC4);
}

void sub_1911ABE28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911ABE04);
  JUMPOUT(0x1911ABDCCLL);
}

void sub_1911ABE38()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911ABDDCLL);
  JUMPOUT(0x1911ABDD4);
}

void nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911AC0AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911AC250(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911AC264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911AC25CLL);
}

uint64_t *nitro::ndarray<float>::operator+=<int>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;

  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  v5 = v4 - v3;
  if (v4 == v3 || !*a1)
    return a1;
  if ((unint64_t)(v5 - 8) < 8)
  {
    v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6)
  {
    v14 = v5 >> 3;
    v15 = (_QWORD *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3)
      goto LABEL_19;
    v16 = v14 <= 1 ? 1 : v14;
    if (*(_QWORD *)v3 != *v15)
      goto LABEL_19;
    v17 = 1;
    do
    {
      v18 = v17;
      if (v16 == v17)
        break;
      v19 = *(_QWORD *)&v3[8 * v17];
      v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 >= v14)
    {
      nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(a1, a2);
    }
    else
    {
LABEL_19:
      nitro::ndarray<float>::operator+<int>(a1, a2, &v25);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v25);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  return a1;
}

void nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  float *v60;
  int32x4_t *v61;
  float32x4_t *v62;
  unint64_t v63;
  float32x4_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int32x4_t *v78;
  uint64_t v79;
  float32x4_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int *v90;
  uint64_t v91;
  uint64_t v92;
  float *v93;
  int32x4_t *v94;
  float32x4_t *v95;
  unint64_t v96;
  float32x4_t v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int32x4_t *v139;
  float32x4_t *v140;
  unint64_t v141;
  float32x4_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return;
  v13 = *a1;
  if (!*a1)
    return;
  if (v12 - 8 < 8)
  {
    v14 = 1;
    v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v16 = ((v12 - 8) >> 3) + 1;
  v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  v17 = v4 + 1;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v148 = *v4;
    if (!*v4)
      return;
    v65 = 0;
    v66 = a2[8];
    v67 = a1[8];
    v68 = v4[1];
    v69 = (uint64_t *)a1[5];
    v143 = (uint64_t *)a2[5];
    v70 = v13 + 4 * v67 + 16;
    v146 = *v143;
    v147 = *v69;
    v145 = 4 * *v69;
    v71 = 4 * v66 + 16;
    v144 = 4 * *v143;
    while (!v68)
    {
LABEL_50:
      v67 += v147;
      v66 += v146;
      ++v65;
      v70 += v145;
      v71 += v144;
      if (v65 == v148)
        return;
    }
    v72 = 0;
    v73 = v4[2];
    v74 = *a2;
    v75 = a2[5];
    v76 = v69[1];
    v77 = v73 & 0xFFFFFFFFFFFFFFF8;
    v78 = (int32x4_t *)(*a2 + v71);
    v79 = v143[1];
    v80 = (float32x4_t *)v70;
    v81 = v66;
    v82 = v67;
    while (1)
    {
      if (v73)
      {
        v83 = v69[2];
        v84 = *(_QWORD *)(v75 + 16);
        if (v73 >= 8 && (v83 == 1 ? (v85 = v84 == 1) : (v85 = 0), v85))
        {
          v87 = v81 + v77 * v84;
          v94 = v78;
          v95 = v80;
          v96 = v73 & 0xFFFFFFFFFFFFFFF8;
          v88 = v82 + v77 * v83;
          do
          {
            v97 = vaddq_f32(*v95, vcvtq_f32_s32(*v94));
            v95[-1] = vaddq_f32(v95[-1], vcvtq_f32_s32(v94[-1]));
            *v95 = v97;
            v95 += 2;
            v94 += 2;
            v96 -= 8;
          }
          while (v96);
          v86 = v73 & 0xFFFFFFFFFFFFFFF8;
          if (v73 == v77)
            goto LABEL_53;
        }
        else
        {
          v86 = 0;
          v87 = v81;
          v88 = v82;
        }
        v89 = v73 - v86;
        v90 = (int *)(v74 + 4 * v87);
        v91 = 4 * v84;
        v92 = 4 * v83;
        v93 = (float *)(v13 + 4 * v88);
        do
        {
          *v93 = *v93 + (float)*v90;
          v90 = (int *)((char *)v90 + v91);
          v93 = (float *)((char *)v93 + v92);
          --v89;
        }
        while (v89);
      }
LABEL_53:
      v82 += v76;
      v81 += v79;
      ++v72;
      v80 = (float32x4_t *)((char *)v80 + 4 * v76);
      v78 = (int32x4_t *)((char *)v78 + 4 * v79);
      if (v72 == v68)
        goto LABEL_50;
    }
  }
  if (v22 == 2)
  {
    v35 = *v4;
    if (!*v4)
      return;
    v36 = 0;
    v37 = a2[8];
    v38 = a1[8];
    v39 = v4[1];
    v40 = *a2;
    v41 = (uint64_t *)a2[5];
    v42 = (uint64_t *)a1[5];
    v43 = *v42;
    v44 = *v41;
    v45 = v39 & 0xFFFFFFFFFFFFFFF8;
    v46 = v13 + 4 * v38 + 16;
    v47 = 4 * *v42;
    v48 = *a2 + 4 * v37 + 16;
    v49 = 4 * *v41;
    while (1)
    {
      if (v39)
      {
        v50 = v42[1];
        v51 = v41[1];
        if (v39 >= 8 && (v50 == 1 ? (v52 = v51 == 1) : (v52 = 0), v52))
        {
          v54 = v37 + v45 * v51;
          v61 = (int32x4_t *)v48;
          v62 = (float32x4_t *)v46;
          v63 = v39 & 0xFFFFFFFFFFFFFFF8;
          v55 = v38 + v45 * v50;
          do
          {
            v64 = vaddq_f32(*v62, vcvtq_f32_s32(*v61));
            v62[-1] = vaddq_f32(v62[-1], vcvtq_f32_s32(v61[-1]));
            *v62 = v64;
            v62 += 2;
            v61 += 2;
            v63 -= 8;
          }
          while (v63);
          v53 = v39 & 0xFFFFFFFFFFFFFFF8;
          if (v39 == v45)
            goto LABEL_33;
        }
        else
        {
          v53 = 0;
          v54 = v37;
          v55 = v38;
        }
        v56 = v39 - v53;
        v57 = (int *)(v40 + 4 * v54);
        v58 = 4 * v51;
        v59 = 4 * v50;
        v60 = (float *)(v13 + 4 * v55);
        do
        {
          *v60 = *v60 + (float)*v57;
          v57 = (int *)((char *)v57 + v58);
          v60 = (float *)((char *)v60 + v59);
          --v56;
        }
        while (v56);
      }
LABEL_33:
      v38 += v43;
      v37 += v44;
      ++v36;
      v46 += v47;
      v48 += v49;
      if (v36 == v35)
        return;
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v98 = operator new(v12);
    bzero(v98, v12 & 0xFFFFFFFFFFFFFFF8);
    v99 = *a2;
    if (v12 >> 3 <= 1)
      v100 = 1;
    else
      v100 = v12 >> 3;
    v101 = a2[5];
    v102 = a2[8];
    v103 = v100 & 0x1FFFFFFFFFFFFFFELL;
    v104 = a1[5];
    while (v100 >= 2)
    {
      v107 = 0;
      v108 = 0;
      v109 = v100 & 0x1FFFFFFFFFFFFFFELL;
      v110 = (_QWORD *)(v104 + 8);
      v111 = v98 + 1;
      do
      {
        v107 += *(v110 - 1) * *(v111 - 1);
        v108 += *v110 * *v111;
        v111 += 2;
        v110 += 2;
        v109 -= 2;
      }
      while (v109);
      v105 = v108 + v107;
      v106 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103)
        goto LABEL_78;
LABEL_80:
      if (v100 < 2)
      {
        v119 = 0;
        v120 = 0;
LABEL_85:
        v126 = v100 - v120;
        v127 = v120;
        v128 = (uint64_t *)(v101 + 8 * v120);
        v129 = &v98[v127];
        do
        {
          v131 = *v129++;
          v130 = v131;
          v132 = *v128++;
          v119 += v132 * v130;
          --v126;
        }
        while (v126);
        goto LABEL_87;
      }
      v121 = 0;
      v122 = 0;
      v123 = v100 & 0x1FFFFFFFFFFFFFFELL;
      v124 = (_QWORD *)(v101 + 8);
      v125 = v98 + 1;
      do
      {
        v121 += *(v124 - 1) * *(v125 - 1);
        v122 += *v124 * *v125;
        v125 += 2;
        v124 += 2;
        v123 -= 2;
      }
      while (v123);
      v119 = v122 + v121;
      v120 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103)
        goto LABEL_85;
LABEL_87:
      *(float *)(v13 + 4 * v105) = *(float *)(v13 + 4 * v105) + (float)*(int *)(v99 + 4 * (v102 + v119));
      if ((int)(v12 >> 3) >= 1)
      {
        v133 = (v12 >> 3) + 1;
        v134 = v12 >> 3;
        while (1)
        {
          v135 = (v133 - 2);
          v136 = v98[v135] + 1;
          v98[v135] = v136;
          if (v136 < v4[v135])
            break;
          v98[(v133 - 2)] = 0;
          --v134;
          if ((unint64_t)--v133 <= 1)
            goto LABEL_93;
        }
        if (v134 > 0)
          continue;
      }
LABEL_93:
      operator delete(v98);
      return;
    }
    v105 = 0;
    v106 = 0;
LABEL_78:
    v112 = v100 - v106;
    v113 = v106;
    v114 = (uint64_t *)(v104 + 8 * v106);
    v115 = &v98[v113];
    do
    {
      v117 = *v115++;
      v116 = v117;
      v118 = *v114++;
      v105 += v118 * v116;
      --v112;
    }
    while (v112);
    goto LABEL_80;
  }
  v23 = *v4;
  if (!*v4)
    return;
  v24 = a2[8];
  v25 = a1[8];
  v26 = *a2;
  v27 = *(_QWORD *)a1[5];
  v28 = *(_QWORD *)a2[5];
  if (v23 < 8)
  {
    v29 = 0;
LABEL_28:
    v30 = v23 - v29;
    v31 = (int *)(v26 + 4 * v24);
    v32 = 4 * v28;
    v33 = 4 * v27;
    v34 = (float *)(v13 + 4 * v25);
    do
    {
      *v34 = *v34 + (float)*v31;
      v31 = (int *)((char *)v31 + v32);
      v34 = (float *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  v29 = 0;
  if (v27 != 1)
    goto LABEL_28;
  if (v28 != 1)
    goto LABEL_28;
  v29 = v23 & 0xFFFFFFFFFFFFFFF8;
  v137 = v24 + (v23 & 0xFFFFFFFFFFFFFFF8);
  v138 = v25 + (v23 & 0xFFFFFFFFFFFFFFF8);
  v139 = (int32x4_t *)(v26 + 4 * v24 + 16);
  v140 = (float32x4_t *)(v13 + 4 * v25 + 16);
  v141 = v23 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v142 = vaddq_f32(*v140, vcvtq_f32_s32(*v139));
    v140[-1] = vaddq_f32(v140[-1], vcvtq_f32_s32(v139[-1]));
    *v140 = v142;
    v139 += 2;
    v140 += 2;
    v141 -= 8;
  }
  while (v141);
  v24 = v137;
  v25 = v138;
  if (v23 != v29)
    goto LABEL_28;
}

void sub_1911ACAE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::operator+<int>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<float>::copy((uint64_t)a1, a3);
    nitro::ndarray<float>::operator+=<int>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<float>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<float>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<int>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<float>::operator+=<int>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911ACE48(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911ACE5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911ACEF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911ACED4);
  JUMPOUT(0x1911ACEA4);
}

void sub_1911ACF08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911ACEE4);
  JUMPOUT(0x1911ACEACLL);
}

void sub_1911ACF18()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911ACEBCLL);
  JUMPOUT(0x1911ACEB4);
}

void nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911AD18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911AD330(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911AD344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911AD33CLL);
}

_QWORD *nitro::ndarray<int>::ndarray(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  v8 = (_BYTE *)a2[2];
  v7 = (_BYTE *)a2[3];
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)operator new(v7 - v8);
    a1[2] = v10;
    a1[3] = v10;
    v11 = &v10[8 * (v9 >> 3)];
    a1[4] = v11;
    memcpy(v10, v8, v9);
    a1[3] = v11;
  }
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  v13 = (_BYTE *)a2[5];
  v12 = (_BYTE *)a2[6];
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v15 = (char *)operator new(v12 - v13);
    a1[5] = v15;
    a1[6] = v15;
    v16 = &v15[8 * (v14 >> 3)];
    a1[7] = v16;
    memcpy(v15, v13, v14);
    a1[6] = v16;
  }
  a1[8] = a2[8];
  return a1;
}

void sub_1911AD45C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 48) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v6;
    operator delete(v6);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1911AD7AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1911AD814(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

_QWORD *nitro::ndarray<unsigned char>::operator+=<half>(_QWORD *a1, _QWORD *a2, double a3, float a4)
{
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v27;
  void *v28;
  void *v29;
  void *__p;
  void *v31;

  v5 = (char *)a1[2];
  v6 = (char *)a1[3];
  v7 = v6 - v5;
  if (v6 == v5 || !*a1)
    return a1;
  if ((unint64_t)(v7 - 8) < 8)
  {
    v8 = 1;
    v9 = (char *)a1[2];
    do
    {
LABEL_8:
      v15 = *(_QWORD *)v9;
      v9 += 8;
      v8 *= v15;
    }
    while (v9 != v6);
    goto LABEL_9;
  }
  v10 = ((unint64_t)(v7 - 8) >> 3) + 1;
  v9 = &v5[8 * (v10 & 0x3FFFFFFFFFFFFFFELL)];
  v11 = v5 + 8;
  v12 = 1;
  v13 = v10 & 0x3FFFFFFFFFFFFFFELL;
  v14 = 1;
  do
  {
    v12 *= *(v11 - 1);
    v14 *= *v11;
    v11 += 2;
    v13 -= 2;
  }
  while (v13);
  v8 = v14 * v12;
  if (v10 != (v10 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v8)
  {
    v16 = v7 >> 3;
    v17 = (_QWORD *)a2[2];
    if (v16 != (uint64_t)(a2[3] - (_QWORD)v17) >> 3)
      goto LABEL_19;
    v18 = v16 <= 1 ? 1 : v16;
    if (*(_QWORD *)v5 != *v17)
      goto LABEL_19;
    v19 = 1;
    do
    {
      v20 = v19;
      if (v18 == v19)
        break;
      v21 = *(_QWORD *)&v5[8 * v19];
      v22 = v17[v19++];
    }
    while (v21 == v22);
    if (v20 >= v16)
    {
      nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(a1, a2, a3, a4);
    }
    else
    {
LABEL_19:
      nitro::ndarray<unsigned char>::operator+<half>(a1, a2, &v27);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v27);
      if (__p)
      {
        v31 = __p;
        operator delete(__p);
      }
      if (v28)
      {
        v29 = v28;
        operator delete(v28);
      }
      v23 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
      if (*((_QWORD *)&v27 + 1))
      {
        v24 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
  }
  return a1;
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(_QWORD *a1, _QWORD *a2, double a3, float a4)
{
  char *v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v59;
  float v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;

  v6 = (char *)a1[2];
  v7 = (char *)a1[3];
  v8 = (v7 - v6) >> 3;
  v9 = (_QWORD *)a2[2];
  if (v8 != (uint64_t)(a2[3] - (_QWORD)v9) >> 3)
    goto LABEL_13;
  if (v7 == v6)
    return;
  v10 = v8 <= 1 ? 1 : (v7 - v6) >> 3;
  if (*(_QWORD *)v6 != *v9)
    goto LABEL_13;
  v11 = 1;
  do
  {
    v12 = v11;
    if (v10 == v11)
      break;
    v13 = *(_QWORD *)&v6[8 * v11];
    v14 = v9[v11++];
  }
  while (v13 == v14);
  if (v12 < v8)
LABEL_13:
    nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1})::{lambda(void)#1}::operator()();
  v15 = v7 - v6;
  if (v7 == v6 || !*a1)
    return;
  if ((unint64_t)(v15 - 8) < 8)
  {
    v16 = 1;
    v17 = (char *)a1[2];
    do
    {
LABEL_20:
      v23 = *(_QWORD *)v17;
      v17 += 8;
      v16 *= v23;
    }
    while (v17 != v7);
    goto LABEL_21;
  }
  v18 = ((unint64_t)(v15 - 8) >> 3) + 1;
  v17 = &v6[8 * (v18 & 0x3FFFFFFFFFFFFFFELL)];
  v19 = v6 + 8;
  v20 = 1;
  v21 = v18 & 0x3FFFFFFFFFFFFFFELL;
  v22 = 1;
  do
  {
    v20 *= *(v19 - 1);
    v22 *= *v19;
    v19 += 2;
    v21 -= 2;
  }
  while (v21);
  v16 = v22 * v20;
  if (v18 != (v18 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v16)
    return;
  v24 = v15 >> 3;
  if (v15 >> 3 == 3)
  {
    v45 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
    {
      v46 = 0;
      v47 = a2[8];
      v48 = a1[8];
      do
      {
        if (*((_QWORD *)v6 + 1))
        {
          v49 = 0;
          v50 = v47;
          v51 = v48;
          do
          {
            if (*((_QWORD *)v6 + 2))
            {
              v54 = 0;
              v55 = v50;
              v56 = v51;
              do
              {
                _H0 = *(_WORD *)(*a2 + 2 * v55);
                __asm { FCVT            S0, H0 }
                LOBYTE(a4) = *(_BYTE *)(*a1 + v56);
                a4 = (float)LODWORD(a4);
                *(_BYTE *)(*a1 + v56) = (int)(float)(_S0 + a4);
                v52 = (_QWORD *)a1[5];
                v56 += v52[2];
                v53 = (_QWORD *)a2[5];
                v55 += v53[2];
                ++v54;
                v6 = (char *)a1[2];
              }
              while (v54 < *((_QWORD *)v6 + 2));
            }
            else
            {
              v52 = (_QWORD *)a1[5];
              v53 = (_QWORD *)a2[5];
            }
            v51 += v52[1];
            v50 += v53[1];
            ++v49;
          }
          while (v49 < *((_QWORD *)v6 + 1));
          v45 = *(_QWORD *)v6;
        }
        else
        {
          v52 = (_QWORD *)a1[5];
          v53 = (_QWORD *)a2[5];
        }
        v48 += *v52;
        v47 += *v53;
        ++v46;
      }
      while (v46 < v45);
    }
  }
  else
  {
    if (v24 != 2)
    {
      if (v24 == 1)
      {
        if (*(_QWORD *)v6)
        {
          v25 = 0;
          v26 = a2[8];
          v27 = a1[8];
          do
          {
            _H0 = *(_WORD *)(*a2 + 2 * v26);
            __asm { FCVT            S0, H0 }
            LOBYTE(a4) = *(_BYTE *)(*a1 + v27);
            a4 = (float)LODWORD(a4);
            *(_BYTE *)(*a1 + v27) = (int)(float)(_S0 + a4);
            v27 += *(_QWORD *)a1[5];
            v26 += *(_QWORD *)a2[5];
            ++v25;
          }
          while (v25 < *(_QWORD *)a1[2]);
        }
        return;
      }
      if (v15 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v59 = operator new(v15);
      bzero(v59, v15 & 0xFFFFFFFFFFFFFFF8);
      if (v24 <= 1)
        v61 = 1;
      else
        v61 = v15 >> 3;
      v62 = v61 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        v63 = a1[5];
        if (v61 < 2)
          break;
        v66 = 0;
        v67 = 0;
        v68 = (_QWORD *)(v63 + 8);
        v69 = v61 & 0xFFFFFFFFFFFFFFFELL;
        v70 = v59 + 1;
        do
        {
          v66 += *(v68 - 1) * *(v70 - 1);
          v67 += *v68 * *v70;
          v70 += 2;
          v68 += 2;
          v69 -= 2;
        }
        while (v69);
        v64 = v67 + v66;
        v65 = v61 & 0xFFFFFFFFFFFFFFFELL;
        if (v61 != v62)
          goto LABEL_60;
LABEL_62:
        v78 = a2[5];
        if (v61 < 2)
        {
          v79 = 0;
          v80 = 0;
LABEL_67:
          v86 = v61 - v80;
          v87 = v80;
          v88 = (uint64_t *)(v78 + v87 * 8);
          v89 = &v59[v87];
          do
          {
            v91 = *v89++;
            v90 = v91;
            v92 = *v88++;
            v79 += v92 * v90;
            --v86;
          }
          while (v86);
          goto LABEL_69;
        }
        v81 = 0;
        v82 = 0;
        v83 = (_QWORD *)(v78 + 8);
        v84 = v61 & 0xFFFFFFFFFFFFFFFELL;
        v85 = v59 + 1;
        do
        {
          v81 += *(v83 - 1) * *(v85 - 1);
          v82 += *v83 * *v85;
          v85 += 2;
          v83 += 2;
          v84 -= 2;
        }
        while (v84);
        v79 = v82 + v81;
        v80 = v61 & 0xFFFFFFFFFFFFFFFELL;
        if (v61 != v62)
          goto LABEL_67;
LABEL_69:
        _H0 = *(_WORD *)(*a2 + 2 * (a2[8] + v79));
        __asm { FCVT            S0, H0 }
        LOBYTE(v60) = *(_BYTE *)(*a1 + v64);
        v60 = (float)LODWORD(v60);
        *(_BYTE *)(*a1 + v64) = (int)(float)(_S0 + v60);
        if ((int)((unint64_t)v15 >> 3) >= 1)
        {
          v95 = a1[2];
          v96 = ((unint64_t)v15 >> 3) + 1;
          v97 = (unint64_t)v15 >> 3;
          while (1)
          {
            v98 = (v96 - 2);
            v99 = v59[v98] + 1;
            v59[v98] = v99;
            if (v99 < *(_QWORD *)(v95 + v98 * 8))
              break;
            v59[(v96 - 2)] = 0;
            LODWORD(v97) = v97 - 1;
            if ((unint64_t)--v96 <= 1)
              goto LABEL_75;
          }
          if ((int)v97 > 0)
            continue;
        }
LABEL_75:
        operator delete(v59);
        return;
      }
      v64 = 0;
      v65 = 0;
LABEL_60:
      v71 = v61 - v65;
      v72 = v65;
      v73 = (uint64_t *)(v63 + v72 * 8);
      v74 = &v59[v72];
      do
      {
        v76 = *v74++;
        v75 = v76;
        v77 = *v73++;
        v64 += v77 * v75;
        --v71;
      }
      while (v71);
      goto LABEL_62;
    }
    v34 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
    {
      v35 = 0;
      v36 = a2[8];
      v37 = a1[8];
      do
      {
        if (*((_QWORD *)v6 + 1))
        {
          v40 = 0;
          v41 = v36;
          v42 = v37;
          do
          {
            _H0 = *(_WORD *)(*a2 + 2 * v41);
            __asm { FCVT            S0, H0 }
            LOBYTE(a4) = *(_BYTE *)(*a1 + v42);
            a4 = (float)LODWORD(a4);
            *(_BYTE *)(*a1 + v42) = (int)(float)(_S0 + a4);
            v38 = (_QWORD *)a1[5];
            v42 += v38[1];
            v39 = (_QWORD *)a2[5];
            v41 += v39[1];
            ++v40;
            v6 = (char *)a1[2];
          }
          while (v40 < *((_QWORD *)v6 + 1));
          v34 = *(_QWORD *)v6;
        }
        else
        {
          v38 = (_QWORD *)a1[5];
          v39 = (_QWORD *)a2[5];
        }
        v37 += *v38;
        v36 += *v39;
        ++v35;
      }
      while (v35 < v34);
    }
  }
}

void sub_1911ADEE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>::operator+<half>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<unsigned char>::copy((uint64_t)a1, a3);
    nitro::ndarray<unsigned char>::operator+=<half>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<unsigned char>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<unsigned char>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<half>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<unsigned char>::operator+=<half>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911AE244(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911AE258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911AE2F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911AE2D0);
  JUMPOUT(0x1911AE2A0);
}

void sub_1911AE304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911AE2E0);
  JUMPOUT(0x1911AE2A8);
}

void sub_1911AE314()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911AE2B8);
  JUMPOUT(0x1911AE2B0);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911AE588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911AE72C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911AE740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911AE738);
}

uint64_t *nitro::ndarray<int>::operator+=<half>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;

  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  v5 = v4 - v3;
  if (v4 == v3 || !*a1)
    return a1;
  if ((unint64_t)(v5 - 8) < 8)
  {
    v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6)
  {
    v14 = v5 >> 3;
    v15 = (_QWORD *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3)
      goto LABEL_19;
    v16 = v14 <= 1 ? 1 : v14;
    if (*(_QWORD *)v3 != *v15)
      goto LABEL_19;
    v17 = 1;
    do
    {
      v18 = v17;
      if (v16 == v17)
        break;
      v19 = *(_QWORD *)&v3[8 * v17];
      v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 >= v14)
    {
      nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(a1, a2);
    }
    else
    {
LABEL_19:
      nitro::ndarray<int>::operator+<half>(a1, a2, &v25);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v25);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  return a1;
}

void nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int16 *v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  __int16 *v62;
  uint64_t v63;
  uint64_t v64;
  int *v65;
  float16x8_t *v68;
  int32x4_t *v69;
  unint64_t v70;
  float16x8_t v71;
  float32x4_t v72;
  float32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  float16x8_t *v89;
  uint64_t v90;
  int32x4_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  __int16 *v101;
  uint64_t v102;
  uint64_t v103;
  int *v104;
  float16x8_t *v107;
  int32x4_t *v108;
  unint64_t v109;
  float16x8_t v110;
  float32x4_t v111;
  float32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  _QWORD *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v152;
  int v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  float16x8_t *v158;
  int32x4_t *v159;
  unint64_t v160;
  float16x8_t v161;
  float32x4_t v162;
  float32x4_t v163;
  int32x4_t v164;
  int32x4_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return;
  v13 = *a1;
  if (!*a1)
    return;
  if (v12 - 8 < 8)
  {
    v14 = 1;
    v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v16 = ((v12 - 8) >> 3) + 1;
  v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  v17 = v4 + 1;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v171 = *v4;
    if (!*v4)
      return;
    v76 = 0;
    v77 = a2[8];
    v78 = a1[8];
    v79 = v4[1];
    v80 = (uint64_t *)a1[5];
    v166 = (uint64_t *)a2[5];
    v81 = v13 + 4 * v78 + 32;
    v169 = *v166;
    v170 = *v80;
    v168 = 4 * *v80;
    v82 = 2 * v77 + 16;
    v167 = 2 * *v166;
    while (!v79)
    {
LABEL_50:
      v78 += v170;
      v77 += v169;
      ++v76;
      v81 += v168;
      v82 += v167;
      if (v76 == v171)
        return;
    }
    v83 = 0;
    v84 = v4[2];
    v85 = *a2;
    v86 = a2[5];
    v87 = v80[1];
    v88 = v84 & 0xFFFFFFFFFFFFFFF0;
    v89 = (float16x8_t *)(*a2 + v82);
    v90 = v166[1];
    v91 = (int32x4_t *)v81;
    v92 = v77;
    v93 = v78;
    while (1)
    {
      if (v84)
      {
        v94 = v80[2];
        v95 = *(_QWORD *)(v86 + 16);
        if (v84 >= 0x10 && (v94 == 1 ? (v96 = v95 == 1) : (v96 = 0), v96))
        {
          v98 = v92 + v88 * v95;
          v107 = v89;
          v108 = v91;
          v109 = v84 & 0xFFFFFFFFFFFFFFF0;
          v99 = v93 + v88 * v94;
          do
          {
            v110 = v107[-1];
            v111 = vcvtq_f32_f16(*(float16x4_t *)v110.i8);
            v112 = vaddq_f32(vcvt_hight_f32_f16(*v107), vcvtq_f32_s32(v108[1]));
            v113 = vcvtq_s32_f32(vaddq_f32(vcvt_hight_f32_f16(v110), vcvtq_f32_s32(v108[-1])));
            v114 = vcvtq_s32_f32(vaddq_f32(vcvtq_f32_f16(*(float16x4_t *)v107->i8), vcvtq_f32_s32(*v108)));
            v108[-2] = vcvtq_s32_f32(vaddq_f32(v111, vcvtq_f32_s32(v108[-2])));
            v108[-1] = v113;
            *v108 = v114;
            v108[1] = vcvtq_s32_f32(v112);
            v108 += 4;
            v107 += 2;
            v109 -= 16;
          }
          while (v109);
          v97 = v84 & 0xFFFFFFFFFFFFFFF0;
          if (v84 == v88)
            goto LABEL_53;
        }
        else
        {
          v97 = 0;
          v98 = v92;
          v99 = v93;
        }
        v100 = v84 - v97;
        v101 = (__int16 *)(v85 + 2 * v98);
        v102 = 2 * v95;
        v103 = 4 * v94;
        v104 = (int *)(v13 + 4 * v99);
        do
        {
          _H0 = *v101;
          __asm { FCVT            S0, H0 }
          *v104 = (int)(float)(_S0 + (float)*v104);
          v101 = (__int16 *)((char *)v101 + v102);
          v104 = (int *)((char *)v104 + v103);
          --v100;
        }
        while (v100);
      }
LABEL_53:
      v93 += v87;
      v92 += v90;
      ++v83;
      v91 = (int32x4_t *)((char *)v91 + 4 * v87);
      v89 = (float16x8_t *)((char *)v89 + 2 * v90);
      if (v83 == v79)
        goto LABEL_50;
    }
  }
  if (v22 == 2)
  {
    v40 = *v4;
    if (!*v4)
      return;
    v41 = 0;
    v42 = a2[8];
    v43 = a1[8];
    v44 = v4[1];
    v45 = *a2;
    v46 = (uint64_t *)a2[5];
    v47 = (uint64_t *)a1[5];
    v48 = *v47;
    v49 = *v46;
    v50 = v44 & 0xFFFFFFFFFFFFFFF0;
    v51 = v13 + 4 * v43 + 32;
    v52 = 4 * *v47;
    v53 = *a2 + 2 * v42 + 16;
    v54 = 2 * *v46;
    while (1)
    {
      if (v44)
      {
        v55 = v47[1];
        v56 = v46[1];
        if (v44 >= 0x10 && (v55 == 1 ? (_ZF = v56 == 1) : (_ZF = 0), _ZF))
        {
          v59 = v42 + v50 * v56;
          v68 = (float16x8_t *)v53;
          v69 = (int32x4_t *)v51;
          v70 = v44 & 0xFFFFFFFFFFFFFFF0;
          v60 = v43 + v50 * v55;
          do
          {
            v71 = v68[-1];
            v72 = vcvtq_f32_f16(*(float16x4_t *)v71.i8);
            v73 = vaddq_f32(vcvt_hight_f32_f16(*v68), vcvtq_f32_s32(v69[1]));
            v74 = vcvtq_s32_f32(vaddq_f32(vcvt_hight_f32_f16(v71), vcvtq_f32_s32(v69[-1])));
            v75 = vcvtq_s32_f32(vaddq_f32(vcvtq_f32_f16(*(float16x4_t *)v68->i8), vcvtq_f32_s32(*v69)));
            v69[-2] = vcvtq_s32_f32(vaddq_f32(v72, vcvtq_f32_s32(v69[-2])));
            v69[-1] = v74;
            *v69 = v75;
            v69[1] = vcvtq_s32_f32(v73);
            v69 += 4;
            v68 += 2;
            v70 -= 16;
          }
          while (v70);
          v58 = v44 & 0xFFFFFFFFFFFFFFF0;
          if (v44 == v50)
            goto LABEL_33;
        }
        else
        {
          v58 = 0;
          v59 = v42;
          v60 = v43;
        }
        v61 = v44 - v58;
        v62 = (__int16 *)(v45 + 2 * v59);
        v63 = 2 * v56;
        v64 = 4 * v55;
        v65 = (int *)(v13 + 4 * v60);
        do
        {
          _H0 = *v62;
          __asm { FCVT            S0, H0 }
          *v65 = (int)(float)(_S0 + (float)*v65);
          v62 = (__int16 *)((char *)v62 + v63);
          v65 = (int *)((char *)v65 + v64);
          --v61;
        }
        while (v61);
      }
LABEL_33:
      v43 += v48;
      v42 += v49;
      ++v41;
      v51 += v52;
      v53 += v54;
      if (v41 == v40)
        return;
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v115 = operator new(v12);
    bzero(v115, v12 & 0xFFFFFFFFFFFFFFF8);
    v116 = *a2;
    if (v12 >> 3 <= 1)
      v117 = 1;
    else
      v117 = v12 >> 3;
    v118 = a2[5];
    v119 = a2[8];
    v120 = v117 & 0x1FFFFFFFFFFFFFFELL;
    v121 = a1[5];
    while (v117 >= 2)
    {
      v124 = 0;
      v125 = 0;
      v126 = v117 & 0x1FFFFFFFFFFFFFFELL;
      v127 = (_QWORD *)(v121 + 8);
      v128 = v115 + 1;
      do
      {
        v124 += *(v127 - 1) * *(v128 - 1);
        v125 += *v127 * *v128;
        v128 += 2;
        v127 += 2;
        v126 -= 2;
      }
      while (v126);
      v122 = v125 + v124;
      v123 = v117 & 0x1FFFFFFFFFFFFFFELL;
      if (v117 != v120)
        goto LABEL_78;
LABEL_80:
      if (v117 < 2)
      {
        v136 = 0;
        v137 = 0;
LABEL_85:
        v143 = v117 - v137;
        v144 = v137;
        v145 = (uint64_t *)(v118 + 8 * v137);
        v146 = &v115[v144];
        do
        {
          v148 = *v146++;
          v147 = v148;
          v149 = *v145++;
          v136 += v149 * v147;
          --v143;
        }
        while (v143);
        goto LABEL_87;
      }
      v138 = 0;
      v139 = 0;
      v140 = v117 & 0x1FFFFFFFFFFFFFFELL;
      v141 = (_QWORD *)(v118 + 8);
      v142 = v115 + 1;
      do
      {
        v138 += *(v141 - 1) * *(v142 - 1);
        v139 += *v141 * *v142;
        v142 += 2;
        v141 += 2;
        v140 -= 2;
      }
      while (v140);
      v136 = v139 + v138;
      v137 = v117 & 0x1FFFFFFFFFFFFFFELL;
      if (v117 != v120)
        goto LABEL_85;
LABEL_87:
      _H0 = *(_WORD *)(v116 + 2 * (v119 + v136));
      __asm { FCVT            S0, H0 }
      *(_DWORD *)(v13 + 4 * v122) = (int)(float)(_S0 + (float)*(int *)(v13 + 4 * v122));
      if ((int)(v12 >> 3) >= 1)
      {
        v152 = (v12 >> 3) + 1;
        v153 = v12 >> 3;
        while (1)
        {
          v154 = (v152 - 2);
          v155 = v115[v154] + 1;
          v115[v154] = v155;
          if (v155 < v4[v154])
            break;
          v115[(v152 - 2)] = 0;
          --v153;
          if ((unint64_t)--v152 <= 1)
            goto LABEL_93;
        }
        if (v153 > 0)
          continue;
      }
LABEL_93:
      operator delete(v115);
      return;
    }
    v122 = 0;
    v123 = 0;
LABEL_78:
    v129 = v117 - v123;
    v130 = v123;
    v131 = (uint64_t *)(v121 + 8 * v123);
    v132 = &v115[v130];
    do
    {
      v134 = *v132++;
      v133 = v134;
      v135 = *v131++;
      v122 += v135 * v133;
      --v129;
    }
    while (v129);
    goto LABEL_80;
  }
  v23 = *v4;
  if (!*v4)
    return;
  v24 = a2[8];
  v25 = a1[8];
  v26 = *a2;
  v27 = *(_QWORD *)a1[5];
  v28 = *(_QWORD *)a2[5];
  if (v23 < 0x10)
  {
    v29 = 0;
LABEL_28:
    v30 = v23 - v29;
    v31 = (__int16 *)(v26 + 2 * v24);
    v32 = 2 * v28;
    v33 = 4 * v27;
    v34 = (int *)(v13 + 4 * v25);
    do
    {
      _H0 = *v31;
      __asm { FCVT            S0, H0 }
      *v34 = (int)(float)(_S0 + (float)*v34);
      v31 = (__int16 *)((char *)v31 + v32);
      v34 = (int *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  v29 = 0;
  if (v27 != 1)
    goto LABEL_28;
  if (v28 != 1)
    goto LABEL_28;
  v29 = v23 & 0xFFFFFFFFFFFFFFF0;
  v156 = v24 + (v23 & 0xFFFFFFFFFFFFFFF0);
  v157 = v25 + (v23 & 0xFFFFFFFFFFFFFFF0);
  v158 = (float16x8_t *)(v26 + 2 * v24 + 16);
  v159 = (int32x4_t *)(v13 + 4 * v25 + 32);
  v160 = v23 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v161 = v158[-1];
    v162 = vcvtq_f32_f16(*(float16x4_t *)v161.i8);
    v163 = vaddq_f32(vcvt_hight_f32_f16(*v158), vcvtq_f32_s32(v159[1]));
    v164 = vcvtq_s32_f32(vaddq_f32(vcvt_hight_f32_f16(v161), vcvtq_f32_s32(v159[-1])));
    v165 = vcvtq_s32_f32(vaddq_f32(vcvtq_f32_f16(*(float16x4_t *)v158->i8), vcvtq_f32_s32(*v159)));
    v159[-2] = vcvtq_s32_f32(vaddq_f32(v162, vcvtq_f32_s32(v159[-2])));
    v159[-1] = v164;
    *v159 = v165;
    v159[1] = vcvtq_s32_f32(v163);
    v159 += 4;
    v158 += 2;
    v160 -= 16;
  }
  while (v160);
  v24 = v156;
  v25 = v157;
  if (v23 != v29)
    goto LABEL_28;
}

void sub_1911AF080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::operator+<half>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<int>::copy((uint64_t)a1, a3);
    nitro::ndarray<int>::operator+=<half>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<int>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<int>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<half>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<int>::operator+=<half>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911AF3E0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911AF3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911AF490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911AF46CLL);
  JUMPOUT(0x1911AF43CLL);
}

void sub_1911AF4A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911AF47CLL);
  JUMPOUT(0x1911AF444);
}

void sub_1911AF4B0()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911AF454);
  JUMPOUT(0x1911AF44CLL);
}

void nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911AF724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911AF8C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911AF8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911AF8D4);
}

uint64_t *nitro::ndarray<half>::operator+=<half>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;

  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  v5 = v4 - v3;
  if (v4 == v3 || !*a1)
    return a1;
  if ((unint64_t)(v5 - 8) < 8)
  {
    v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6)
  {
    v14 = v5 >> 3;
    v15 = (_QWORD *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3)
      goto LABEL_19;
    v16 = v14 <= 1 ? 1 : v14;
    if (*(_QWORD *)v3 != *v15)
      goto LABEL_19;
    v17 = 1;
    do
    {
      v18 = v17;
      if (v16 == v17)
        break;
      v19 = *(_QWORD *)&v3[8 * v17];
      v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 >= v14)
    {
      nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(a1, a2);
    }
    else
    {
LABEL_19:
      nitro::ndarray<half>::operator+<half>(a1, a2, &v25);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v25);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  return a1;
}

__int16 nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>@<H0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __int16 *v33;
  uint64_t v34;
  uint64_t v35;
  __int16 *v36;
  __int16 result;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  __int16 *v71;
  uint64_t v72;
  uint64_t v73;
  __int16 *v74;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  __int16 *v143;
  uint64_t v144;
  uint64_t v145;
  __int16 *v146;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  _QWORD *v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  _QWORD *v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  _QWORD *v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v225;
  uint64_t v230;
  int v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v270;
  uint64_t v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v279;
  uint64_t v280;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return result;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return result;
  v13 = *a1;
  if (!*a1)
    return result;
  if (v12 - 8 < 8)
  {
    v14 = 1;
    v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v16 = ((v12 - 8) >> 3) + 1;
  v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  v17 = v4 + 1;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return result;
  v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v275 = *v4;
    if (!*v4)
      return result;
    v117 = 0;
    v118 = a2[8];
    v119 = a1[8];
    v120 = v4[1];
    v121 = (uint64_t *)a1[5];
    v272 = (uint64_t *)a2[5];
    v273 = *v272;
    v274 = *v121;
    v277 = 2 * *v121;
    v276 = 2 * *v272;
    v270 = 2 * v118;
    v271 = 2 * v119;
    v122 = 2 * v119 + v13 + 16;
    v123 = 2 * v118 + 16;
    while (!v120)
    {
LABEL_55:
      v119 += v274;
      v118 += v273;
      ++v117;
      v122 += v277;
      v123 += v276;
      if (v117 == v275)
        return result;
    }
    v124 = 0;
    v125 = v4[2];
    v126 = *a2;
    v127 = v121[1];
    v128 = v272[1];
    v129 = 2 * v127;
    v279 = v270 + v276 * v117;
    v280 = v271 + v277 * v117;
    v130 = 2 * v128;
    v131 = v125 & 0xFFFFFFFFFFFFFFF0;
    v132 = a2[5];
    v133 = *a2 + v123;
    v134 = v122;
    v135 = v118;
    v136 = v119;
    while (!v125)
    {
LABEL_58:
      v136 += v127;
      v135 += v128;
      ++v124;
      v134 += v129;
      v133 += v130;
      if (v124 == v120)
        goto LABEL_55;
    }
    v137 = v121[2];
    v138 = *(_QWORD *)(v132 + 16);
    if (v125 >= 0x10)
    {
      v139 = 0;
      if (v137 != 1)
        goto LABEL_62;
      v140 = v135;
      v141 = v136;
      if (v138 != 1)
      {
LABEL_63:
        v142 = v125 - v139;
        v143 = (__int16 *)(v126 + 2 * v140);
        v144 = 2 * v138;
        v145 = 2 * v137;
        v146 = (__int16 *)(v13 + 2 * v141);
        do
        {
          _H0 = *v143;
          _H1 = *v146;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          _S0 = _S0 + _S1;
          __asm { FCVT            H0, S0 }
          *v146 = result;
          v143 = (__int16 *)((char *)v143 + v144);
          v146 = (__int16 *)((char *)v146 + v145);
          --v142;
        }
        while (v142);
        goto LABEL_58;
      }
      if (v13 + v280 + v129 * v124 >= v126 + v279 + 2 * v125 + v130 * v124
        || v126 + v279 + v130 * v124 >= v13 + v280 + 2 * v125 + v129 * v124)
      {
        v140 = v135 + v131;
        v153 = v133;
        v154 = v134;
        v155 = v125 & 0xFFFFFFFFFFFFFFF0;
        v141 = v136 + v131;
        do
        {
          _Q3 = *(_OWORD *)(v153 - 16);
          _Q0 = *(_OWORD *)v153;
          _Q4 = *(_OWORD *)(v154 - 16);
          _Q1 = *(_OWORD *)v154;
          _H2 = WORD1(_Q4);
          __asm { FCVT            S2, H2 }
          _H5 = WORD1(_Q3);
          __asm { FCVT            S5, H5 }
          _S2 = _S5 + _S2;
          __asm
          {
            FCVT            H5, S2
            FCVT            S2, H4
            FCVT            S6, H3
          }
          *(float *)&_Q2 = _S6 + _S2;
          __asm { FCVT            H2, S2 }
          WORD1(_Q2) = LOWORD(_S5);
          LOWORD(_S5) = WORD2(*(_QWORD *)(v154 - 16));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = WORD2(*(_QWORD *)(v153 - 16));
          __asm { FCVT            S6, H6 }
          _S5 = _S6 + _S5;
          __asm { FCVT            H5, S5 }
          WORD2(_Q2) = LOWORD(_S5);
          LOWORD(_S5) = HIWORD(*(_QWORD *)(v154 - 16));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = HIWORD(*(_QWORD *)(v153 - 16));
          __asm { FCVT            S6, H6 }
          _S5 = _S6 + _S5;
          __asm { FCVT            H5, S5 }
          WORD3(_Q2) = LOWORD(_S5);
          LOWORD(_S5) = *(_QWORD *)(v154 - 8);
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *(_QWORD *)(v153 - 8);
          __asm { FCVT            S6, H6 }
          _S5 = _S6 + _S5;
          __asm { FCVT            H5, S5 }
          WORD4(_Q2) = LOWORD(_S5);
          LOWORD(_S5) = WORD1(*(_QWORD *)(v154 - 8));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = WORD1(*(_QWORD *)(v153 - 8));
          __asm { FCVT            S6, H6 }
          _S5 = _S6 + _S5;
          __asm { FCVT            H5, S5 }
          WORD5(_Q2) = LOWORD(_S5);
          LOWORD(_S5) = WORD6(_Q4);
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = WORD6(_Q3);
          __asm { FCVT            S6, H6 }
          _S5 = _S6 + _S5;
          __asm { FCVT            H5, S5 }
          WORD6(_Q2) = LOWORD(_S5);
          LOWORD(_Q4) = HIWORD(_Q4);
          __asm { FCVT            S4, H4 }
          LOWORD(_Q3) = HIWORD(_Q3);
          __asm { FCVT            S3, H3 }
          *(float *)&_Q3 = *(float *)&_Q3 + *(float *)&_Q4;
          __asm { FCVT            H3, S3 }
          HIWORD(_Q2) = _Q3;
          LOWORD(_Q3) = WORD1(*(_OWORD *)v154);
          __asm { FCVT            S3, H3 }
          LOWORD(_Q4) = WORD1(*(_OWORD *)v153);
          __asm { FCVT            S4, H4 }
          *(float *)&_Q3 = *(float *)&_Q4 + *(float *)&_Q3;
          __asm
          {
            FCVT            H3, S3
            FCVT            S4, H1
            FCVT            S5, H0
          }
          *(float *)&_Q4 = _S5 + *(float *)&_Q4;
          __asm { FCVT            H4, S4 }
          WORD1(_Q4) = _Q3;
          LOWORD(_Q3) = WORD2(*(_QWORD *)v154);
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = WORD2(*(_QWORD *)v153);
          __asm { FCVT            S5, H5 }
          *(float *)&_Q3 = _S5 + *(float *)&_Q3;
          __asm { FCVT            H3, S3 }
          WORD2(_Q4) = _Q3;
          LOWORD(_Q3) = HIWORD(*(_QWORD *)v154);
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = HIWORD(*(_QWORD *)v153);
          __asm { FCVT            S5, H5 }
          *(float *)&_Q3 = _S5 + *(float *)&_Q3;
          __asm { FCVT            H3, S3 }
          WORD3(_Q4) = _Q3;
          LOWORD(_Q3) = *(_QWORD *)(v154 + 8);
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = *(_QWORD *)(v153 + 8);
          __asm { FCVT            S5, H5 }
          *(float *)&_Q3 = _S5 + *(float *)&_Q3;
          __asm { FCVT            H3, S3 }
          WORD4(_Q4) = _Q3;
          LOWORD(_Q3) = WORD1(*(_QWORD *)(v154 + 8));
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = WORD1(*(_QWORD *)(v153 + 8));
          __asm { FCVT            S5, H5 }
          *(float *)&_Q3 = _S5 + *(float *)&_Q3;
          __asm { FCVT            H3, S3 }
          WORD5(_Q4) = _Q3;
          LOWORD(_Q3) = WORD6(*(_OWORD *)v154);
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = WORD6(*(_OWORD *)v153);
          __asm { FCVT            S5, H5 }
          *(float *)&_Q3 = _S5 + *(float *)&_Q3;
          __asm { FCVT            H3, S3 }
          WORD6(_Q4) = _Q3;
          LOWORD(_Q1) = HIWORD(*(_OWORD *)v154);
          __asm { FCVT            S1, H1 }
          LOWORD(_Q0) = HIWORD(*(_OWORD *)v153);
          __asm { FCVT            S0, H0 }
          *(float *)&_Q0 = *(float *)&_Q0 + *(float *)&_Q1;
          __asm { FCVT            H0, S0 }
          HIWORD(_Q4) = result;
          *(_OWORD *)(v154 - 16) = _Q2;
          *(_OWORD *)v154 = _Q4;
          v154 += 32;
          v153 += 32;
          v155 -= 16;
        }
        while (v155);
        v139 = v125 & 0xFFFFFFFFFFFFFFF0;
        if (v125 == v131)
          goto LABEL_58;
        goto LABEL_63;
      }
    }
    v139 = 0;
LABEL_62:
    v140 = v135;
    v141 = v136;
    goto LABEL_63;
  }
  if (v22 == 2)
  {
    v46 = *v4;
    if (!*v4)
      return result;
    v47 = 0;
    v48 = a2[8];
    v49 = a1[8];
    v50 = v4[1];
    v51 = (uint64_t *)a2[5];
    v52 = (uint64_t *)a1[5];
    v53 = *v52;
    v54 = *v51;
    v55 = 2 * *v52;
    v56 = 2 * *v51;
    v57 = v50 & 0xFFFFFFFFFFFFFFF0;
    v58 = *a2;
    v59 = 2 * v49 + v13 + 16;
    v60 = 2 * v48 + *a2 + 16;
    v61 = v13 + 2 * v49;
    v62 = v13 + 2 * v49 + 2 * v50;
    v63 = *a2 + 2 * v48;
    v64 = *a2 + 2 * v48 + 2 * v50;
    while (!v50)
    {
LABEL_34:
      v49 += v53;
      v48 += v54;
      ++v47;
      v59 += v55;
      v60 += v56;
      if (v47 == v46)
        return result;
    }
    v65 = v52[1];
    v66 = v51[1];
    if (v50 >= 0x10)
    {
      v67 = 0;
      if (v65 != 1)
        goto LABEL_38;
      v68 = v48;
      v69 = v49;
      if (v66 != 1)
      {
LABEL_39:
        v70 = v50 - v67;
        v71 = (__int16 *)(v58 + 2 * v68);
        v72 = 2 * v66;
        v73 = 2 * v65;
        v74 = (__int16 *)(v13 + 2 * v69);
        do
        {
          _H0 = *v71;
          _H1 = *v74;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          _S0 = _S0 + _S1;
          __asm { FCVT            H0, S0 }
          *v74 = result;
          v71 = (__int16 *)((char *)v71 + v72);
          v74 = (__int16 *)((char *)v74 + v73);
          --v70;
        }
        while (v70);
        goto LABEL_34;
      }
      if (v61 + v55 * v47 >= (unint64_t)(v64 + v56 * v47)
        || v63 + v56 * v47 >= (unint64_t)(v62 + v55 * v47))
      {
        v68 = v48 + v57;
        v81 = v60;
        v82 = v59;
        v83 = v50 & 0xFFFFFFFFFFFFFFF0;
        v69 = v49 + v57;
        do
        {
          _Q3 = *(_OWORD *)(v81 - 16);
          _Q0 = *(_OWORD *)v81;
          _Q4 = *(_OWORD *)(v82 - 16);
          _Q1 = *(_OWORD *)v82;
          _H2 = WORD1(_Q4);
          __asm { FCVT            S2, H2 }
          _H5 = WORD1(_Q3);
          __asm { FCVT            S5, H5 }
          _S2 = _S5 + _S2;
          __asm
          {
            FCVT            H5, S2
            FCVT            S2, H4
            FCVT            S6, H3
          }
          *(float *)&_Q2 = _S6 + _S2;
          __asm { FCVT            H2, S2 }
          WORD1(_Q2) = LOWORD(_S5);
          LOWORD(_S5) = WORD2(*(_QWORD *)(v82 - 16));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = WORD2(*(_QWORD *)(v81 - 16));
          __asm { FCVT            S6, H6 }
          _S5 = _S6 + _S5;
          __asm { FCVT            H5, S5 }
          WORD2(_Q2) = LOWORD(_S5);
          LOWORD(_S5) = HIWORD(*(_QWORD *)(v82 - 16));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = HIWORD(*(_QWORD *)(v81 - 16));
          __asm { FCVT            S6, H6 }
          _S5 = _S6 + _S5;
          __asm { FCVT            H5, S5 }
          WORD3(_Q2) = LOWORD(_S5);
          LOWORD(_S5) = *(_QWORD *)(v82 - 8);
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *(_QWORD *)(v81 - 8);
          __asm { FCVT            S6, H6 }
          _S5 = _S6 + _S5;
          __asm { FCVT            H5, S5 }
          WORD4(_Q2) = LOWORD(_S5);
          LOWORD(_S5) = WORD1(*(_QWORD *)(v82 - 8));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = WORD1(*(_QWORD *)(v81 - 8));
          __asm { FCVT            S6, H6 }
          _S5 = _S6 + _S5;
          __asm { FCVT            H5, S5 }
          WORD5(_Q2) = LOWORD(_S5);
          LOWORD(_S5) = WORD6(_Q4);
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = WORD6(_Q3);
          __asm { FCVT            S6, H6 }
          _S5 = _S6 + _S5;
          __asm { FCVT            H5, S5 }
          WORD6(_Q2) = LOWORD(_S5);
          LOWORD(_Q4) = HIWORD(_Q4);
          __asm { FCVT            S4, H4 }
          LOWORD(_Q3) = HIWORD(_Q3);
          __asm { FCVT            S3, H3 }
          *(float *)&_Q3 = *(float *)&_Q3 + *(float *)&_Q4;
          __asm { FCVT            H3, S3 }
          HIWORD(_Q2) = _Q3;
          LOWORD(_Q3) = WORD1(*(_OWORD *)v82);
          __asm { FCVT            S3, H3 }
          LOWORD(_Q4) = WORD1(*(_OWORD *)v81);
          __asm { FCVT            S4, H4 }
          *(float *)&_Q3 = *(float *)&_Q4 + *(float *)&_Q3;
          __asm
          {
            FCVT            H3, S3
            FCVT            S4, H1
            FCVT            S5, H0
          }
          *(float *)&_Q4 = _S5 + *(float *)&_Q4;
          __asm { FCVT            H4, S4 }
          WORD1(_Q4) = _Q3;
          LOWORD(_Q3) = WORD2(*(_QWORD *)v82);
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = WORD2(*(_QWORD *)v81);
          __asm { FCVT            S5, H5 }
          *(float *)&_Q3 = _S5 + *(float *)&_Q3;
          __asm { FCVT            H3, S3 }
          WORD2(_Q4) = _Q3;
          LOWORD(_Q3) = HIWORD(*(_QWORD *)v82);
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = HIWORD(*(_QWORD *)v81);
          __asm { FCVT            S5, H5 }
          *(float *)&_Q3 = _S5 + *(float *)&_Q3;
          __asm { FCVT            H3, S3 }
          WORD3(_Q4) = _Q3;
          LOWORD(_Q3) = *(_QWORD *)(v82 + 8);
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = *(_QWORD *)(v81 + 8);
          __asm { FCVT            S5, H5 }
          *(float *)&_Q3 = _S5 + *(float *)&_Q3;
          __asm { FCVT            H3, S3 }
          WORD4(_Q4) = _Q3;
          LOWORD(_Q3) = WORD1(*(_QWORD *)(v82 + 8));
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = WORD1(*(_QWORD *)(v81 + 8));
          __asm { FCVT            S5, H5 }
          *(float *)&_Q3 = _S5 + *(float *)&_Q3;
          __asm { FCVT            H3, S3 }
          WORD5(_Q4) = _Q3;
          LOWORD(_Q3) = WORD6(*(_OWORD *)v82);
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = WORD6(*(_OWORD *)v81);
          __asm { FCVT            S5, H5 }
          *(float *)&_Q3 = _S5 + *(float *)&_Q3;
          __asm { FCVT            H3, S3 }
          WORD6(_Q4) = _Q3;
          LOWORD(_Q1) = HIWORD(*(_OWORD *)v82);
          __asm { FCVT            S1, H1 }
          LOWORD(_Q0) = HIWORD(*(_OWORD *)v81);
          __asm { FCVT            S0, H0 }
          *(float *)&_Q0 = *(float *)&_Q0 + *(float *)&_Q1;
          __asm { FCVT            H0, S0 }
          HIWORD(_Q4) = result;
          *(_OWORD *)(v82 - 16) = _Q2;
          *(_OWORD *)v82 = _Q4;
          v82 += 32;
          v81 += 32;
          v83 -= 16;
        }
        while (v83);
        v67 = v50 & 0xFFFFFFFFFFFFFFF0;
        if (v50 == v57)
          goto LABEL_34;
        goto LABEL_39;
      }
    }
    v67 = 0;
LABEL_38:
    v68 = v48;
    v69 = v49;
    goto LABEL_39;
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v189 = operator new(v12);
    bzero(v189, v12 & 0xFFFFFFFFFFFFFFF8);
    v190 = *a2;
    if (v12 >> 3 <= 1)
      v191 = 1;
    else
      v191 = v12 >> 3;
    v192 = a2[5];
    v193 = a2[8];
    v194 = v191 & 0x1FFFFFFFFFFFFFFELL;
    v195 = a1[5];
    while (v191 >= 2)
    {
      v198 = 0;
      v199 = 0;
      v200 = v191 & 0x1FFFFFFFFFFFFFFELL;
      v201 = (_QWORD *)(v195 + 8);
      v202 = v189 + 1;
      do
      {
        v198 += *(v201 - 1) * *(v202 - 1);
        v199 += *v201 * *v202;
        v202 += 2;
        v201 += 2;
        v200 -= 2;
      }
      while (v200);
      v196 = v199 + v198;
      v197 = v191 & 0x1FFFFFFFFFFFFFFELL;
      if (v191 != v194)
        goto LABEL_87;
LABEL_89:
      if (v191 < 2)
      {
        v210 = 0;
        v211 = 0;
LABEL_94:
        v217 = v191 - v211;
        v218 = v211;
        v219 = (uint64_t *)(v192 + 8 * v211);
        v220 = &v189[v218];
        do
        {
          v222 = *v220++;
          v221 = v222;
          v223 = *v219++;
          v210 += v223 * v221;
          --v217;
        }
        while (v217);
        goto LABEL_96;
      }
      v212 = 0;
      v213 = 0;
      v214 = v191 & 0x1FFFFFFFFFFFFFFELL;
      v215 = (_QWORD *)(v192 + 8);
      v216 = v189 + 1;
      do
      {
        v212 += *(v215 - 1) * *(v216 - 1);
        v213 += *v215 * *v216;
        v216 += 2;
        v215 += 2;
        v214 -= 2;
      }
      while (v214);
      v210 = v213 + v212;
      v211 = v191 & 0x1FFFFFFFFFFFFFFELL;
      if (v191 != v194)
        goto LABEL_94;
LABEL_96:
      _H0 = *(_WORD *)(v190 + 2 * (v193 + v210));
      v225 = 2 * v196;
      _H1 = *(_WORD *)(v13 + v225);
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      _S0 = _S0 + _S1;
      __asm { FCVT            H0, S0 }
      *(_WORD *)(v13 + v225) = LOWORD(_S0);
      if ((int)(v12 >> 3) >= 1)
      {
        v230 = (v12 >> 3) + 1;
        v231 = v12 >> 3;
        while (1)
        {
          v232 = (v230 - 2);
          v233 = v189[v232] + 1;
          v189[v232] = v233;
          if (v233 < v4[v232])
            break;
          v189[(v230 - 2)] = 0;
          --v231;
          if ((unint64_t)--v230 <= 1)
            goto LABEL_102;
        }
        if (v231 > 0)
          continue;
      }
LABEL_102:
      operator delete(v189);
      return result;
    }
    v196 = 0;
    v197 = 0;
LABEL_87:
    v203 = v191 - v197;
    v204 = v197;
    v205 = (uint64_t *)(v195 + 8 * v197);
    v206 = &v189[v204];
    do
    {
      v208 = *v206++;
      v207 = v208;
      v209 = *v205++;
      v196 += v209 * v207;
      --v203;
    }
    while (v203);
    goto LABEL_89;
  }
  v23 = *v4;
  if (!*v4)
    return result;
  v24 = a2[8];
  v25 = a1[8];
  v26 = *a2;
  v27 = *(_QWORD *)a1[5];
  v28 = *(_QWORD *)a2[5];
  if (v23 < 0x10)
    goto LABEL_27;
  v29 = 0;
  if (v27 != 1 || v28 != 1)
    goto LABEL_28;
  if (v13 + 2 * v25 < v26 + 2 * v23 + 2 * v24 && v26 + 2 * v24 < v13 + 2 * v23 + 2 * v25)
  {
LABEL_27:
    v29 = 0;
LABEL_28:
    v30 = a2[8];
    v31 = a1[8];
LABEL_29:
    v32 = v23 - v29;
    v33 = (__int16 *)(v26 + 2 * v30);
    v34 = 2 * v28;
    v35 = 2 * v27;
    v36 = (__int16 *)(v13 + 2 * v31);
    do
    {
      _H0 = *v33;
      _H1 = *v36;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      _S0 = _S0 + _S1;
      __asm { FCVT            H0, S0 }
      *v36 = result;
      v33 = (__int16 *)((char *)v33 + v34);
      v36 = (__int16 *)((char *)v36 + v35);
      --v32;
    }
    while (v32);
    return result;
  }
  v29 = v23 & 0xFFFFFFFFFFFFFFF0;
  v30 = v24 + (v23 & 0xFFFFFFFFFFFFFFF0);
  v31 = v25 + (v23 & 0xFFFFFFFFFFFFFFF0);
  v234 = v26 + 2 * v24 + 16;
  v235 = v13 + 2 * v25 + 16;
  v236 = v23 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    _Q3 = *(_OWORD *)(v234 - 16);
    _Q0 = *(_OWORD *)v234;
    _Q4 = *(_OWORD *)(v235 - 16);
    _Q1 = *(_OWORD *)v235;
    _H2 = WORD1(_Q4);
    __asm { FCVT            S2, H2 }
    _H5 = WORD1(_Q3);
    __asm { FCVT            S5, H5 }
    _S2 = _S5 + _S2;
    __asm
    {
      FCVT            H5, S2
      FCVT            S2, H4
      FCVT            S6, H3
    }
    *(float *)&_Q2 = _S6 + _S2;
    __asm { FCVT            H2, S2 }
    WORD1(_Q2) = LOWORD(_S5);
    LOWORD(_S5) = WORD2(*(_QWORD *)(v235 - 16));
    __asm { FCVT            S5, H5 }
    LOWORD(_S6) = WORD2(*(_QWORD *)(v234 - 16));
    __asm { FCVT            S6, H6 }
    _S5 = _S6 + _S5;
    __asm { FCVT            H5, S5 }
    WORD2(_Q2) = LOWORD(_S5);
    LOWORD(_S5) = HIWORD(*(_QWORD *)(v235 - 16));
    __asm { FCVT            S5, H5 }
    LOWORD(_S6) = HIWORD(*(_QWORD *)(v234 - 16));
    __asm { FCVT            S6, H6 }
    _S5 = _S6 + _S5;
    __asm { FCVT            H5, S5 }
    WORD3(_Q2) = LOWORD(_S5);
    LOWORD(_S5) = *(_QWORD *)(v235 - 8);
    __asm { FCVT            S5, H5 }
    LOWORD(_S6) = *(_QWORD *)(v234 - 8);
    __asm { FCVT            S6, H6 }
    _S5 = _S6 + _S5;
    __asm { FCVT            H5, S5 }
    WORD4(_Q2) = LOWORD(_S5);
    LOWORD(_S5) = WORD1(*(_QWORD *)(v235 - 8));
    __asm { FCVT            S5, H5 }
    LOWORD(_S6) = WORD1(*(_QWORD *)(v234 - 8));
    __asm { FCVT            S6, H6 }
    _S5 = _S6 + _S5;
    __asm { FCVT            H5, S5 }
    WORD5(_Q2) = LOWORD(_S5);
    LOWORD(_S5) = WORD6(_Q4);
    __asm { FCVT            S5, H5 }
    LOWORD(_S6) = WORD6(_Q3);
    __asm { FCVT            S6, H6 }
    _S5 = _S6 + _S5;
    __asm { FCVT            H5, S5 }
    WORD6(_Q2) = LOWORD(_S5);
    LOWORD(_Q4) = HIWORD(_Q4);
    __asm { FCVT            S4, H4 }
    LOWORD(_Q3) = HIWORD(_Q3);
    __asm { FCVT            S3, H3 }
    *(float *)&_Q3 = *(float *)&_Q3 + *(float *)&_Q4;
    __asm { FCVT            H3, S3 }
    HIWORD(_Q2) = _Q3;
    LOWORD(_Q3) = WORD1(*(_OWORD *)v235);
    __asm { FCVT            S3, H3 }
    LOWORD(_Q4) = WORD1(*(_OWORD *)v234);
    __asm { FCVT            S4, H4 }
    *(float *)&_Q3 = *(float *)&_Q4 + *(float *)&_Q3;
    __asm
    {
      FCVT            H3, S3
      FCVT            S4, H1
      FCVT            S5, H0
    }
    *(float *)&_Q4 = _S5 + *(float *)&_Q4;
    __asm { FCVT            H4, S4 }
    WORD1(_Q4) = _Q3;
    LOWORD(_Q3) = WORD2(*(_QWORD *)v235);
    __asm { FCVT            S3, H3 }
    LOWORD(_S5) = WORD2(*(_QWORD *)v234);
    __asm { FCVT            S5, H5 }
    *(float *)&_Q3 = _S5 + *(float *)&_Q3;
    __asm { FCVT            H3, S3 }
    WORD2(_Q4) = _Q3;
    LOWORD(_Q3) = HIWORD(*(_QWORD *)v235);
    __asm { FCVT            S3, H3 }
    LOWORD(_S5) = HIWORD(*(_QWORD *)v234);
    __asm { FCVT            S5, H5 }
    *(float *)&_Q3 = _S5 + *(float *)&_Q3;
    __asm { FCVT            H3, S3 }
    WORD3(_Q4) = _Q3;
    LOWORD(_Q3) = *(_QWORD *)(v235 + 8);
    __asm { FCVT            S3, H3 }
    LOWORD(_S5) = *(_QWORD *)(v234 + 8);
    __asm { FCVT            S5, H5 }
    *(float *)&_Q3 = _S5 + *(float *)&_Q3;
    __asm { FCVT            H3, S3 }
    WORD4(_Q4) = _Q3;
    LOWORD(_Q3) = WORD1(*(_QWORD *)(v235 + 8));
    __asm { FCVT            S3, H3 }
    LOWORD(_S5) = WORD1(*(_QWORD *)(v234 + 8));
    __asm { FCVT            S5, H5 }
    *(float *)&_Q3 = _S5 + *(float *)&_Q3;
    __asm { FCVT            H3, S3 }
    WORD5(_Q4) = _Q3;
    LOWORD(_Q3) = WORD6(*(_OWORD *)v235);
    __asm { FCVT            S3, H3 }
    LOWORD(_S5) = WORD6(*(_OWORD *)v234);
    __asm { FCVT            S5, H5 }
    *(float *)&_Q3 = _S5 + *(float *)&_Q3;
    __asm { FCVT            H3, S3 }
    WORD6(_Q4) = _Q3;
    LOWORD(_Q1) = HIWORD(*(_OWORD *)v235);
    __asm { FCVT            S1, H1 }
    LOWORD(_Q0) = HIWORD(*(_OWORD *)v234);
    __asm { FCVT            S0, H0 }
    *(float *)&_Q0 = *(float *)&_Q0 + *(float *)&_Q1;
    __asm { FCVT            H0, S0 }
    HIWORD(_Q4) = result;
    *(_OWORD *)(v235 - 16) = _Q2;
    *(_OWORD *)v235 = _Q4;
    v234 += 32;
    v235 += 32;
    v236 -= 16;
  }
  while (v236);
  if (v23 != v29)
    goto LABEL_29;
  return result;
}

void sub_1911B0754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::operator+<half>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<half>::copy((uint64_t)a1, a3);
    nitro::ndarray<half>::operator+=<half>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<half>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<half>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<half>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<half>::operator+=<half>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911B0AB4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911B0AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911B0B64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911B0B40);
  JUMPOUT(0x1911B0B10);
}

void sub_1911B0B74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911B0B50);
  JUMPOUT(0x1911B0B18);
}

void sub_1911B0B84()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911B0B28);
  JUMPOUT(0x1911B0B20);
}

void nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911B0DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911B0F9C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911B0FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911B0FA8);
}

uint64_t *nitro::ndarray<float>::operator+=<half>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;

  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  v5 = v4 - v3;
  if (v4 == v3 || !*a1)
    return a1;
  if ((unint64_t)(v5 - 8) < 8)
  {
    v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6)
  {
    v14 = v5 >> 3;
    v15 = (_QWORD *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3)
      goto LABEL_19;
    v16 = v14 <= 1 ? 1 : v14;
    if (*(_QWORD *)v3 != *v15)
      goto LABEL_19;
    v17 = 1;
    do
    {
      v18 = v17;
      if (v16 == v17)
        break;
      v19 = *(_QWORD *)&v3[8 * v17];
      v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 >= v14)
    {
      nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(a1, a2);
    }
    else
    {
LABEL_19:
      nitro::ndarray<float>::operator+<half>(a1, a2, &v25);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v25);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  return a1;
}

void nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int16 *v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  __int16 *v62;
  uint64_t v63;
  uint64_t v64;
  float *v65;
  float16x4_t *v68;
  float32x4_t *v69;
  unint64_t v70;
  float16x8_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  float16x4_t *v88;
  uint64_t v89;
  float32x4_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  __int16 *v100;
  uint64_t v101;
  uint64_t v102;
  float *v103;
  float16x4_t *v106;
  float32x4_t *v107;
  unint64_t v108;
  float16x8_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  _QWORD *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v150;
  int v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  float16x4_t *v156;
  float32x4_t *v157;
  unint64_t v158;
  float16x8_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return;
  v13 = *a1;
  if (!*a1)
    return;
  if (v12 - 8 < 8)
  {
    v14 = 1;
    v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v16 = ((v12 - 8) >> 3) + 1;
  v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  v17 = v4 + 1;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v168 = *v4;
    if (!*v4)
      return;
    v75 = 0;
    v76 = a2[8];
    v77 = a1[8];
    v78 = v4[1];
    v79 = (uint64_t *)a1[5];
    v163 = (uint64_t *)a2[5];
    v80 = v13 + 4 * v77 + 32;
    v166 = *v163;
    v167 = *v79;
    v165 = 4 * *v79;
    v81 = 2 * v76 + 16;
    v164 = 2 * *v163;
    while (!v78)
    {
LABEL_50:
      v77 += v167;
      v76 += v166;
      ++v75;
      v80 += v165;
      v81 += v164;
      if (v75 == v168)
        return;
    }
    v82 = 0;
    v83 = v4[2];
    v84 = *a2;
    v85 = a2[5];
    v86 = v79[1];
    v87 = v83 & 0xFFFFFFFFFFFFFFF0;
    v88 = (float16x4_t *)(*a2 + v81);
    v89 = v163[1];
    v90 = (float32x4_t *)v80;
    v91 = v76;
    v92 = v77;
    while (1)
    {
      if (v83)
      {
        v93 = v79[2];
        v94 = *(_QWORD *)(v85 + 16);
        if (v83 >= 0x10 && (v93 == 1 ? (v95 = v94 == 1) : (v95 = 0), v95))
        {
          v97 = v91 + v87 * v94;
          v106 = v88;
          v107 = v90;
          v108 = v83 & 0xFFFFFFFFFFFFFFF0;
          v98 = v92 + v87 * v93;
          do
          {
            v109 = *(float16x8_t *)v106[-2].i8;
            v110 = vaddq_f32(v107[-1], vcvt_hight_f32_f16(v109));
            v111 = vaddq_f32(*v107, vcvtq_f32_f16(*v106));
            v112 = vaddq_f32(v107[1], vcvt_hight_f32_f16(*(float16x8_t *)v106->i8));
            v107[-2] = vaddq_f32(v107[-2], vcvtq_f32_f16(*(float16x4_t *)v109.i8));
            v107[-1] = v110;
            *v107 = v111;
            v107[1] = v112;
            v107 += 4;
            v106 += 4;
            v108 -= 16;
          }
          while (v108);
          v96 = v83 & 0xFFFFFFFFFFFFFFF0;
          if (v83 == v87)
            goto LABEL_53;
        }
        else
        {
          v96 = 0;
          v97 = v91;
          v98 = v92;
        }
        v99 = v83 - v96;
        v100 = (__int16 *)(v84 + 2 * v97);
        v101 = 2 * v94;
        v102 = 4 * v93;
        v103 = (float *)(v13 + 4 * v98);
        do
        {
          _H0 = *v100;
          __asm { FCVT            S0, H0 }
          *v103 = *v103 + _S0;
          v100 = (__int16 *)((char *)v100 + v101);
          v103 = (float *)((char *)v103 + v102);
          --v99;
        }
        while (v99);
      }
LABEL_53:
      v92 += v86;
      v91 += v89;
      ++v82;
      v90 = (float32x4_t *)((char *)v90 + 4 * v86);
      v88 = (float16x4_t *)((char *)v88 + 2 * v89);
      if (v82 == v78)
        goto LABEL_50;
    }
  }
  if (v22 == 2)
  {
    v40 = *v4;
    if (!*v4)
      return;
    v41 = 0;
    v42 = a2[8];
    v43 = a1[8];
    v44 = v4[1];
    v45 = *a2;
    v46 = (uint64_t *)a2[5];
    v47 = (uint64_t *)a1[5];
    v48 = *v47;
    v49 = *v46;
    v50 = v44 & 0xFFFFFFFFFFFFFFF0;
    v51 = v13 + 4 * v43 + 32;
    v52 = 4 * *v47;
    v53 = *a2 + 2 * v42 + 16;
    v54 = 2 * *v46;
    while (1)
    {
      if (v44)
      {
        v55 = v47[1];
        v56 = v46[1];
        if (v44 >= 0x10 && (v55 == 1 ? (_ZF = v56 == 1) : (_ZF = 0), _ZF))
        {
          v59 = v42 + v50 * v56;
          v68 = (float16x4_t *)v53;
          v69 = (float32x4_t *)v51;
          v70 = v44 & 0xFFFFFFFFFFFFFFF0;
          v60 = v43 + v50 * v55;
          do
          {
            v71 = *(float16x8_t *)v68[-2].i8;
            v72 = vaddq_f32(v69[-1], vcvt_hight_f32_f16(v71));
            v73 = vaddq_f32(*v69, vcvtq_f32_f16(*v68));
            v74 = vaddq_f32(v69[1], vcvt_hight_f32_f16(*(float16x8_t *)v68->i8));
            v69[-2] = vaddq_f32(v69[-2], vcvtq_f32_f16(*(float16x4_t *)v71.i8));
            v69[-1] = v72;
            *v69 = v73;
            v69[1] = v74;
            v69 += 4;
            v68 += 4;
            v70 -= 16;
          }
          while (v70);
          v58 = v44 & 0xFFFFFFFFFFFFFFF0;
          if (v44 == v50)
            goto LABEL_33;
        }
        else
        {
          v58 = 0;
          v59 = v42;
          v60 = v43;
        }
        v61 = v44 - v58;
        v62 = (__int16 *)(v45 + 2 * v59);
        v63 = 2 * v56;
        v64 = 4 * v55;
        v65 = (float *)(v13 + 4 * v60);
        do
        {
          _H0 = *v62;
          __asm { FCVT            S0, H0 }
          *v65 = *v65 + _S0;
          v62 = (__int16 *)((char *)v62 + v63);
          v65 = (float *)((char *)v65 + v64);
          --v61;
        }
        while (v61);
      }
LABEL_33:
      v43 += v48;
      v42 += v49;
      ++v41;
      v51 += v52;
      v53 += v54;
      if (v41 == v40)
        return;
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v113 = operator new(v12);
    bzero(v113, v12 & 0xFFFFFFFFFFFFFFF8);
    v114 = *a2;
    if (v12 >> 3 <= 1)
      v115 = 1;
    else
      v115 = v12 >> 3;
    v116 = a2[5];
    v117 = a2[8];
    v118 = v115 & 0x1FFFFFFFFFFFFFFELL;
    v119 = a1[5];
    while (v115 >= 2)
    {
      v122 = 0;
      v123 = 0;
      v124 = v115 & 0x1FFFFFFFFFFFFFFELL;
      v125 = (_QWORD *)(v119 + 8);
      v126 = v113 + 1;
      do
      {
        v122 += *(v125 - 1) * *(v126 - 1);
        v123 += *v125 * *v126;
        v126 += 2;
        v125 += 2;
        v124 -= 2;
      }
      while (v124);
      v120 = v123 + v122;
      v121 = v115 & 0x1FFFFFFFFFFFFFFELL;
      if (v115 != v118)
        goto LABEL_78;
LABEL_80:
      if (v115 < 2)
      {
        v134 = 0;
        v135 = 0;
LABEL_85:
        v141 = v115 - v135;
        v142 = v135;
        v143 = (uint64_t *)(v116 + 8 * v135);
        v144 = &v113[v142];
        do
        {
          v146 = *v144++;
          v145 = v146;
          v147 = *v143++;
          v134 += v147 * v145;
          --v141;
        }
        while (v141);
        goto LABEL_87;
      }
      v136 = 0;
      v137 = 0;
      v138 = v115 & 0x1FFFFFFFFFFFFFFELL;
      v139 = (_QWORD *)(v116 + 8);
      v140 = v113 + 1;
      do
      {
        v136 += *(v139 - 1) * *(v140 - 1);
        v137 += *v139 * *v140;
        v140 += 2;
        v139 += 2;
        v138 -= 2;
      }
      while (v138);
      v134 = v137 + v136;
      v135 = v115 & 0x1FFFFFFFFFFFFFFELL;
      if (v115 != v118)
        goto LABEL_85;
LABEL_87:
      _H0 = *(_WORD *)(v114 + 2 * (v117 + v134));
      __asm { FCVT            S0, H0 }
      *(float *)(v13 + 4 * v120) = *(float *)(v13 + 4 * v120) + _S0;
      if ((int)(v12 >> 3) >= 1)
      {
        v150 = (v12 >> 3) + 1;
        v151 = v12 >> 3;
        while (1)
        {
          v152 = (v150 - 2);
          v153 = v113[v152] + 1;
          v113[v152] = v153;
          if (v153 < v4[v152])
            break;
          v113[(v150 - 2)] = 0;
          --v151;
          if ((unint64_t)--v150 <= 1)
            goto LABEL_93;
        }
        if (v151 > 0)
          continue;
      }
LABEL_93:
      operator delete(v113);
      return;
    }
    v120 = 0;
    v121 = 0;
LABEL_78:
    v127 = v115 - v121;
    v128 = v121;
    v129 = (uint64_t *)(v119 + 8 * v121);
    v130 = &v113[v128];
    do
    {
      v132 = *v130++;
      v131 = v132;
      v133 = *v129++;
      v120 += v133 * v131;
      --v127;
    }
    while (v127);
    goto LABEL_80;
  }
  v23 = *v4;
  if (!*v4)
    return;
  v24 = a2[8];
  v25 = a1[8];
  v26 = *a2;
  v27 = *(_QWORD *)a1[5];
  v28 = *(_QWORD *)a2[5];
  if (v23 < 0x10)
  {
    v29 = 0;
LABEL_28:
    v30 = v23 - v29;
    v31 = (__int16 *)(v26 + 2 * v24);
    v32 = 2 * v28;
    v33 = 4 * v27;
    v34 = (float *)(v13 + 4 * v25);
    do
    {
      _H0 = *v31;
      __asm { FCVT            S0, H0 }
      *v34 = *v34 + _S0;
      v31 = (__int16 *)((char *)v31 + v32);
      v34 = (float *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  v29 = 0;
  if (v27 != 1)
    goto LABEL_28;
  if (v28 != 1)
    goto LABEL_28;
  v29 = v23 & 0xFFFFFFFFFFFFFFF0;
  v154 = v24 + (v23 & 0xFFFFFFFFFFFFFFF0);
  v155 = v25 + (v23 & 0xFFFFFFFFFFFFFFF0);
  v156 = (float16x4_t *)(v26 + 2 * v24 + 16);
  v157 = (float32x4_t *)(v13 + 4 * v25 + 32);
  v158 = v23 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v159 = *(float16x8_t *)v156[-2].i8;
    v160 = vaddq_f32(v157[-1], vcvt_hight_f32_f16(v159));
    v161 = vaddq_f32(*v157, vcvtq_f32_f16(*v156));
    v162 = vaddq_f32(v157[1], vcvt_hight_f32_f16(*(float16x8_t *)v156->i8));
    v157[-2] = vaddq_f32(v157[-2], vcvtq_f32_f16(*(float16x4_t *)v159.i8));
    v157[-1] = v160;
    *v157 = v161;
    v157[1] = v162;
    v157 += 4;
    v156 += 4;
    v158 -= 16;
  }
  while (v158);
  v24 = v154;
  v25 = v155;
  if (v23 != v29)
    goto LABEL_28;
}

void sub_1911B1870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::operator+<half>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<float>::copy((uint64_t)a1, a3);
    nitro::ndarray<float>::operator+=<half>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<float>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<float>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<half>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<float>::operator+=<half>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911B1BD0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911B1BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911B1C80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911B1C5CLL);
  JUMPOUT(0x1911B1C2CLL);
}

void sub_1911B1C90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911B1C6CLL);
  JUMPOUT(0x1911B1C34);
}

void sub_1911B1CA0()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911B1C44);
  JUMPOUT(0x1911B1C3CLL);
}

void nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911B1F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911B20B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911B20CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911B20C4);
}

_QWORD *nitro::ndarray<half>::ndarray(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  v8 = (_BYTE *)a2[2];
  v7 = (_BYTE *)a2[3];
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)operator new(v7 - v8);
    a1[2] = v10;
    a1[3] = v10;
    v11 = &v10[8 * (v9 >> 3)];
    a1[4] = v11;
    memcpy(v10, v8, v9);
    a1[3] = v11;
  }
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  v13 = (_BYTE *)a2[5];
  v12 = (_BYTE *)a2[6];
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v15 = (char *)operator new(v12 - v13);
    a1[5] = v15;
    a1[6] = v15;
    v16 = &v15[8 * (v14 >> 3)];
    a1[7] = v16;
    memcpy(v15, v13, v14);
    a1[6] = v16;
  }
  a1[8] = a2[8];
  return a1;
}

void sub_1911B21E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 48) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v6;
    operator delete(v6);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1911B2534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1911B259C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

_QWORD *nitro::ndarray<unsigned char>::operator+=<float>(_QWORD *a1, _QWORD *a2, double a3, float a4)
{
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v27;
  void *v28;
  void *v29;
  void *__p;
  void *v31;

  v5 = (char *)a1[2];
  v6 = (char *)a1[3];
  v7 = v6 - v5;
  if (v6 == v5 || !*a1)
    return a1;
  if ((unint64_t)(v7 - 8) < 8)
  {
    v8 = 1;
    v9 = (char *)a1[2];
    do
    {
LABEL_8:
      v15 = *(_QWORD *)v9;
      v9 += 8;
      v8 *= v15;
    }
    while (v9 != v6);
    goto LABEL_9;
  }
  v10 = ((unint64_t)(v7 - 8) >> 3) + 1;
  v9 = &v5[8 * (v10 & 0x3FFFFFFFFFFFFFFELL)];
  v11 = v5 + 8;
  v12 = 1;
  v13 = v10 & 0x3FFFFFFFFFFFFFFELL;
  v14 = 1;
  do
  {
    v12 *= *(v11 - 1);
    v14 *= *v11;
    v11 += 2;
    v13 -= 2;
  }
  while (v13);
  v8 = v14 * v12;
  if (v10 != (v10 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v8)
  {
    v16 = v7 >> 3;
    v17 = (_QWORD *)a2[2];
    if (v16 != (uint64_t)(a2[3] - (_QWORD)v17) >> 3)
      goto LABEL_19;
    v18 = v16 <= 1 ? 1 : v16;
    if (*(_QWORD *)v5 != *v17)
      goto LABEL_19;
    v19 = 1;
    do
    {
      v20 = v19;
      if (v18 == v19)
        break;
      v21 = *(_QWORD *)&v5[8 * v19];
      v22 = v17[v19++];
    }
    while (v21 == v22);
    if (v20 >= v16)
    {
      nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(a1, a2, a3, a4);
    }
    else
    {
LABEL_19:
      nitro::ndarray<unsigned char>::operator+<float>(a1, a2, &v27);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v27);
      if (__p)
      {
        v31 = __p;
        operator delete(__p);
      }
      if (v28)
      {
        v29 = v28;
        operator delete(v28);
      }
      v23 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
      if (*((_QWORD *)&v27 + 1))
      {
        v24 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
  }
  return a1;
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(_QWORD *a1, _QWORD *a2, double a3, float a4)
{
  char *v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  float v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;

  v6 = (char *)a1[2];
  v7 = (char *)a1[3];
  v8 = (v7 - v6) >> 3;
  v9 = (_QWORD *)a2[2];
  if (v8 != (uint64_t)(a2[3] - (_QWORD)v9) >> 3)
    goto LABEL_13;
  if (v7 == v6)
    return;
  v10 = v8 <= 1 ? 1 : (v7 - v6) >> 3;
  if (*(_QWORD *)v6 != *v9)
    goto LABEL_13;
  v11 = 1;
  do
  {
    v12 = v11;
    if (v10 == v11)
      break;
    v13 = *(_QWORD *)&v6[8 * v11];
    v14 = v9[v11++];
  }
  while (v13 == v14);
  if (v12 < v8)
LABEL_13:
    nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1})::{lambda(void)#1}::operator()();
  v15 = v7 - v6;
  if (v7 == v6 || !*a1)
    return;
  if ((unint64_t)(v15 - 8) < 8)
  {
    v16 = 1;
    v17 = (char *)a1[2];
    do
    {
LABEL_20:
      v23 = *(_QWORD *)v17;
      v17 += 8;
      v16 *= v23;
    }
    while (v17 != v7);
    goto LABEL_21;
  }
  v18 = ((unint64_t)(v15 - 8) >> 3) + 1;
  v17 = &v6[8 * (v18 & 0x3FFFFFFFFFFFFFFELL)];
  v19 = v6 + 8;
  v20 = 1;
  v21 = v18 & 0x3FFFFFFFFFFFFFFELL;
  v22 = 1;
  do
  {
    v20 *= *(v19 - 1);
    v22 *= *v19;
    v19 += 2;
    v21 -= 2;
  }
  while (v21);
  v16 = v22 * v20;
  if (v18 != (v18 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v16)
    return;
  v24 = v15 >> 3;
  if (v15 >> 3 == 3)
  {
    v37 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
    {
      v38 = 0;
      v39 = a2[8];
      v40 = a1[8];
      do
      {
        if (*((_QWORD *)v6 + 1))
        {
          v41 = 0;
          v42 = v39;
          v43 = v40;
          do
          {
            if (*((_QWORD *)v6 + 2))
            {
              v46 = 0;
              v47 = v42;
              v48 = v43;
              do
              {
                LOBYTE(a4) = *(_BYTE *)(*a1 + v48);
                a4 = (float)LODWORD(a4);
                *(_BYTE *)(*a1 + v48) = (int)(float)(*(float *)(*a2 + 4 * v47) + a4);
                v44 = (_QWORD *)a1[5];
                v48 += v44[2];
                v45 = (_QWORD *)a2[5];
                v47 += v45[2];
                ++v46;
                v6 = (char *)a1[2];
              }
              while (v46 < *((_QWORD *)v6 + 2));
            }
            else
            {
              v44 = (_QWORD *)a1[5];
              v45 = (_QWORD *)a2[5];
            }
            v43 += v44[1];
            v42 += v45[1];
            ++v41;
          }
          while (v41 < *((_QWORD *)v6 + 1));
          v37 = *(_QWORD *)v6;
        }
        else
        {
          v44 = (_QWORD *)a1[5];
          v45 = (_QWORD *)a2[5];
        }
        v40 += *v44;
        v39 += *v45;
        ++v38;
      }
      while (v38 < v37);
    }
  }
  else
  {
    if (v24 != 2)
    {
      if (v24 == 1)
      {
        if (*(_QWORD *)v6)
        {
          v25 = 0;
          v26 = a2[8];
          v27 = a1[8];
          do
          {
            LOBYTE(a4) = *(_BYTE *)(*a1 + v27);
            a4 = (float)LODWORD(a4);
            *(_BYTE *)(*a1 + v27) = (int)(float)(*(float *)(*a2 + 4 * v26) + a4);
            v27 += *(_QWORD *)a1[5];
            v26 += *(_QWORD *)a2[5];
            ++v25;
          }
          while (v25 < *(_QWORD *)a1[2]);
        }
        return;
      }
      if (v15 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v49 = operator new(v15);
      bzero(v49, v15 & 0xFFFFFFFFFFFFFFF8);
      if (v24 <= 1)
        v51 = 1;
      else
        v51 = v15 >> 3;
      v52 = v51 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        v53 = a1[5];
        if (v51 < 2)
          break;
        v56 = 0;
        v57 = 0;
        v58 = (_QWORD *)(v53 + 8);
        v59 = v51 & 0xFFFFFFFFFFFFFFFELL;
        v60 = v49 + 1;
        do
        {
          v56 += *(v58 - 1) * *(v60 - 1);
          v57 += *v58 * *v60;
          v60 += 2;
          v58 += 2;
          v59 -= 2;
        }
        while (v59);
        v54 = v57 + v56;
        v55 = v51 & 0xFFFFFFFFFFFFFFFELL;
        if (v51 != v52)
          goto LABEL_60;
LABEL_62:
        v68 = a2[5];
        if (v51 < 2)
        {
          v69 = 0;
          v70 = 0;
LABEL_67:
          v76 = v51 - v70;
          v77 = v70;
          v78 = (uint64_t *)(v68 + v77 * 8);
          v79 = &v49[v77];
          do
          {
            v81 = *v79++;
            v80 = v81;
            v82 = *v78++;
            v69 += v82 * v80;
            --v76;
          }
          while (v76);
          goto LABEL_69;
        }
        v71 = 0;
        v72 = 0;
        v73 = (_QWORD *)(v68 + 8);
        v74 = v51 & 0xFFFFFFFFFFFFFFFELL;
        v75 = v49 + 1;
        do
        {
          v71 += *(v73 - 1) * *(v75 - 1);
          v72 += *v73 * *v75;
          v75 += 2;
          v73 += 2;
          v74 -= 2;
        }
        while (v74);
        v69 = v72 + v71;
        v70 = v51 & 0xFFFFFFFFFFFFFFFELL;
        if (v51 != v52)
          goto LABEL_67;
LABEL_69:
        LOBYTE(v50) = *(_BYTE *)(*a1 + v54);
        v50 = (float)LODWORD(v50);
        *(_BYTE *)(*a1 + v54) = (int)(float)(*(float *)(*a2 + 4 * (a2[8] + v69)) + v50);
        if ((int)((unint64_t)v15 >> 3) >= 1)
        {
          v83 = a1[2];
          v84 = ((unint64_t)v15 >> 3) + 1;
          v85 = (unint64_t)v15 >> 3;
          while (1)
          {
            v86 = (v84 - 2);
            v87 = v49[v86] + 1;
            v49[v86] = v87;
            if (v87 < *(_QWORD *)(v83 + v86 * 8))
              break;
            v49[(v84 - 2)] = 0;
            LODWORD(v85) = v85 - 1;
            if ((unint64_t)--v84 <= 1)
              goto LABEL_75;
          }
          if ((int)v85 > 0)
            continue;
        }
LABEL_75:
        operator delete(v49);
        return;
      }
      v54 = 0;
      v55 = 0;
LABEL_60:
      v61 = v51 - v55;
      v62 = v55;
      v63 = (uint64_t *)(v53 + v62 * 8);
      v64 = &v49[v62];
      do
      {
        v66 = *v64++;
        v65 = v66;
        v67 = *v63++;
        v54 += v67 * v65;
        --v61;
      }
      while (v61);
      goto LABEL_62;
    }
    v28 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
    {
      v29 = 0;
      v30 = a2[8];
      v31 = a1[8];
      do
      {
        if (*((_QWORD *)v6 + 1))
        {
          v34 = 0;
          v35 = v30;
          v36 = v31;
          do
          {
            LOBYTE(a4) = *(_BYTE *)(*a1 + v36);
            a4 = (float)LODWORD(a4);
            *(_BYTE *)(*a1 + v36) = (int)(float)(*(float *)(*a2 + 4 * v35) + a4);
            v32 = (_QWORD *)a1[5];
            v36 += v32[1];
            v33 = (_QWORD *)a2[5];
            v35 += v33[1];
            ++v34;
            v6 = (char *)a1[2];
          }
          while (v34 < *((_QWORD *)v6 + 1));
          v28 = *(_QWORD *)v6;
        }
        else
        {
          v32 = (_QWORD *)a1[5];
          v33 = (_QWORD *)a2[5];
        }
        v31 += *v32;
        v30 += *v33;
        ++v29;
      }
      while (v29 < v28);
    }
  }
}

void sub_1911B2C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>::operator+<float>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<unsigned char>::copy((uint64_t)a1, a3);
    nitro::ndarray<unsigned char>::operator+=<float>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<unsigned char>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<unsigned char>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<float>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<unsigned char>::operator+=<float>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911B2FBC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911B2FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911B306C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911B3048);
  JUMPOUT(0x1911B3018);
}

void sub_1911B307C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911B3058);
  JUMPOUT(0x1911B3020);
}

void sub_1911B308C()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911B3030);
  JUMPOUT(0x1911B3028);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911B3300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911B34A4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911B34B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911B34B0);
}

uint64_t *nitro::ndarray<int>::operator+=<float>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;

  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  v5 = v4 - v3;
  if (v4 == v3 || !*a1)
    return a1;
  if ((unint64_t)(v5 - 8) < 8)
  {
    v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6)
  {
    v14 = v5 >> 3;
    v15 = (_QWORD *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3)
      goto LABEL_19;
    v16 = v14 <= 1 ? 1 : v14;
    if (*(_QWORD *)v3 != *v15)
      goto LABEL_19;
    v17 = 1;
    do
    {
      v18 = v17;
      if (v16 == v17)
        break;
      v19 = *(_QWORD *)&v3[8 * v17];
      v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 >= v14)
    {
      nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(a1, a2);
    }
    else
    {
LABEL_19:
      nitro::ndarray<int>::operator+<float>(a1, a2, &v25);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v25);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  return a1;
}

void nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  float *v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  float32x4_t *v61;
  int32x4_t *v62;
  unint64_t v63;
  int32x4_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  float32x4_t *v78;
  uint64_t v79;
  int32x4_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  float *v90;
  uint64_t v91;
  uint64_t v92;
  int *v93;
  float32x4_t *v94;
  int32x4_t *v95;
  unint64_t v96;
  int32x4_t v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  float32x4_t *v139;
  int32x4_t *v140;
  unint64_t v141;
  int32x4_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return;
  v13 = *a1;
  if (!*a1)
    return;
  if (v12 - 8 < 8)
  {
    v14 = 1;
    v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v16 = ((v12 - 8) >> 3) + 1;
  v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  v17 = v4 + 1;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v148 = *v4;
    if (!*v4)
      return;
    v65 = 0;
    v66 = a2[8];
    v67 = a1[8];
    v68 = v4[1];
    v69 = (uint64_t *)a1[5];
    v143 = (uint64_t *)a2[5];
    v70 = v13 + 4 * v67 + 16;
    v146 = *v143;
    v147 = *v69;
    v145 = 4 * *v69;
    v71 = 4 * v66 + 16;
    v144 = 4 * *v143;
    while (!v68)
    {
LABEL_50:
      v67 += v147;
      v66 += v146;
      ++v65;
      v70 += v145;
      v71 += v144;
      if (v65 == v148)
        return;
    }
    v72 = 0;
    v73 = v4[2];
    v74 = *a2;
    v75 = a2[5];
    v76 = v69[1];
    v77 = v73 & 0xFFFFFFFFFFFFFFF8;
    v78 = (float32x4_t *)(*a2 + v71);
    v79 = v143[1];
    v80 = (int32x4_t *)v70;
    v81 = v66;
    v82 = v67;
    while (1)
    {
      if (v73)
      {
        v83 = v69[2];
        v84 = *(_QWORD *)(v75 + 16);
        if (v73 >= 8 && (v83 == 1 ? (v85 = v84 == 1) : (v85 = 0), v85))
        {
          v87 = v81 + v77 * v84;
          v94 = v78;
          v95 = v80;
          v96 = v73 & 0xFFFFFFFFFFFFFFF8;
          v88 = v82 + v77 * v83;
          do
          {
            v97 = vcvtq_s32_f32(vaddq_f32(*v94, vcvtq_f32_s32(*v95)));
            v95[-1] = vcvtq_s32_f32(vaddq_f32(v94[-1], vcvtq_f32_s32(v95[-1])));
            *v95 = v97;
            v95 += 2;
            v94 += 2;
            v96 -= 8;
          }
          while (v96);
          v86 = v73 & 0xFFFFFFFFFFFFFFF8;
          if (v73 == v77)
            goto LABEL_53;
        }
        else
        {
          v86 = 0;
          v87 = v81;
          v88 = v82;
        }
        v89 = v73 - v86;
        v90 = (float *)(v74 + 4 * v87);
        v91 = 4 * v84;
        v92 = 4 * v83;
        v93 = (int *)(v13 + 4 * v88);
        do
        {
          *v93 = (int)(float)(*v90 + (float)*v93);
          v90 = (float *)((char *)v90 + v91);
          v93 = (int *)((char *)v93 + v92);
          --v89;
        }
        while (v89);
      }
LABEL_53:
      v82 += v76;
      v81 += v79;
      ++v72;
      v80 = (int32x4_t *)((char *)v80 + 4 * v76);
      v78 = (float32x4_t *)((char *)v78 + 4 * v79);
      if (v72 == v68)
        goto LABEL_50;
    }
  }
  if (v22 == 2)
  {
    v35 = *v4;
    if (!*v4)
      return;
    v36 = 0;
    v37 = a2[8];
    v38 = a1[8];
    v39 = v4[1];
    v40 = *a2;
    v41 = (uint64_t *)a2[5];
    v42 = (uint64_t *)a1[5];
    v43 = *v42;
    v44 = *v41;
    v45 = v39 & 0xFFFFFFFFFFFFFFF8;
    v46 = v13 + 4 * v38 + 16;
    v47 = 4 * *v42;
    v48 = *a2 + 4 * v37 + 16;
    v49 = 4 * *v41;
    while (1)
    {
      if (v39)
      {
        v50 = v42[1];
        v51 = v41[1];
        if (v39 >= 8 && (v50 == 1 ? (v52 = v51 == 1) : (v52 = 0), v52))
        {
          v54 = v37 + v45 * v51;
          v61 = (float32x4_t *)v48;
          v62 = (int32x4_t *)v46;
          v63 = v39 & 0xFFFFFFFFFFFFFFF8;
          v55 = v38 + v45 * v50;
          do
          {
            v64 = vcvtq_s32_f32(vaddq_f32(*v61, vcvtq_f32_s32(*v62)));
            v62[-1] = vcvtq_s32_f32(vaddq_f32(v61[-1], vcvtq_f32_s32(v62[-1])));
            *v62 = v64;
            v62 += 2;
            v61 += 2;
            v63 -= 8;
          }
          while (v63);
          v53 = v39 & 0xFFFFFFFFFFFFFFF8;
          if (v39 == v45)
            goto LABEL_33;
        }
        else
        {
          v53 = 0;
          v54 = v37;
          v55 = v38;
        }
        v56 = v39 - v53;
        v57 = (float *)(v40 + 4 * v54);
        v58 = 4 * v51;
        v59 = 4 * v50;
        v60 = (int *)(v13 + 4 * v55);
        do
        {
          *v60 = (int)(float)(*v57 + (float)*v60);
          v57 = (float *)((char *)v57 + v58);
          v60 = (int *)((char *)v60 + v59);
          --v56;
        }
        while (v56);
      }
LABEL_33:
      v38 += v43;
      v37 += v44;
      ++v36;
      v46 += v47;
      v48 += v49;
      if (v36 == v35)
        return;
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v98 = operator new(v12);
    bzero(v98, v12 & 0xFFFFFFFFFFFFFFF8);
    v99 = *a2;
    if (v12 >> 3 <= 1)
      v100 = 1;
    else
      v100 = v12 >> 3;
    v101 = a2[5];
    v102 = a2[8];
    v103 = v100 & 0x1FFFFFFFFFFFFFFELL;
    v104 = a1[5];
    while (v100 >= 2)
    {
      v107 = 0;
      v108 = 0;
      v109 = v100 & 0x1FFFFFFFFFFFFFFELL;
      v110 = (_QWORD *)(v104 + 8);
      v111 = v98 + 1;
      do
      {
        v107 += *(v110 - 1) * *(v111 - 1);
        v108 += *v110 * *v111;
        v111 += 2;
        v110 += 2;
        v109 -= 2;
      }
      while (v109);
      v105 = v108 + v107;
      v106 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103)
        goto LABEL_78;
LABEL_80:
      if (v100 < 2)
      {
        v119 = 0;
        v120 = 0;
LABEL_85:
        v126 = v100 - v120;
        v127 = v120;
        v128 = (uint64_t *)(v101 + 8 * v120);
        v129 = &v98[v127];
        do
        {
          v131 = *v129++;
          v130 = v131;
          v132 = *v128++;
          v119 += v132 * v130;
          --v126;
        }
        while (v126);
        goto LABEL_87;
      }
      v121 = 0;
      v122 = 0;
      v123 = v100 & 0x1FFFFFFFFFFFFFFELL;
      v124 = (_QWORD *)(v101 + 8);
      v125 = v98 + 1;
      do
      {
        v121 += *(v124 - 1) * *(v125 - 1);
        v122 += *v124 * *v125;
        v125 += 2;
        v124 += 2;
        v123 -= 2;
      }
      while (v123);
      v119 = v122 + v121;
      v120 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103)
        goto LABEL_85;
LABEL_87:
      *(_DWORD *)(v13 + 4 * v105) = (int)(float)(*(float *)(v99 + 4 * (v102 + v119)) + (float)*(int *)(v13 + 4 * v105));
      if ((int)(v12 >> 3) >= 1)
      {
        v133 = (v12 >> 3) + 1;
        v134 = v12 >> 3;
        while (1)
        {
          v135 = (v133 - 2);
          v136 = v98[v135] + 1;
          v98[v135] = v136;
          if (v136 < v4[v135])
            break;
          v98[(v133 - 2)] = 0;
          --v134;
          if ((unint64_t)--v133 <= 1)
            goto LABEL_93;
        }
        if (v134 > 0)
          continue;
      }
LABEL_93:
      operator delete(v98);
      return;
    }
    v105 = 0;
    v106 = 0;
LABEL_78:
    v112 = v100 - v106;
    v113 = v106;
    v114 = (uint64_t *)(v104 + 8 * v106);
    v115 = &v98[v113];
    do
    {
      v117 = *v115++;
      v116 = v117;
      v118 = *v114++;
      v105 += v118 * v116;
      --v112;
    }
    while (v112);
    goto LABEL_80;
  }
  v23 = *v4;
  if (!*v4)
    return;
  v24 = a2[8];
  v25 = a1[8];
  v26 = *a2;
  v27 = *(_QWORD *)a1[5];
  v28 = *(_QWORD *)a2[5];
  if (v23 < 8)
  {
    v29 = 0;
LABEL_28:
    v30 = v23 - v29;
    v31 = (float *)(v26 + 4 * v24);
    v32 = 4 * v28;
    v33 = 4 * v27;
    v34 = (int *)(v13 + 4 * v25);
    do
    {
      *v34 = (int)(float)(*v31 + (float)*v34);
      v31 = (float *)((char *)v31 + v32);
      v34 = (int *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  v29 = 0;
  if (v27 != 1)
    goto LABEL_28;
  if (v28 != 1)
    goto LABEL_28;
  v29 = v23 & 0xFFFFFFFFFFFFFFF8;
  v137 = v24 + (v23 & 0xFFFFFFFFFFFFFFF8);
  v138 = v25 + (v23 & 0xFFFFFFFFFFFFFFF8);
  v139 = (float32x4_t *)(v26 + 4 * v24 + 16);
  v140 = (int32x4_t *)(v13 + 4 * v25 + 16);
  v141 = v23 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v142 = vcvtq_s32_f32(vaddq_f32(*v139, vcvtq_f32_s32(*v140)));
    v140[-1] = vcvtq_s32_f32(vaddq_f32(v139[-1], vcvtq_f32_s32(v140[-1])));
    *v140 = v142;
    v139 += 2;
    v140 += 2;
    v141 -= 8;
  }
  while (v141);
  v24 = v137;
  v25 = v138;
  if (v23 != v29)
    goto LABEL_28;
}

void sub_1911B3D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::operator+<float>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<int>::copy((uint64_t)a1, a3);
    nitro::ndarray<int>::operator+=<float>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<int>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<int>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<float>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<int>::operator+=<float>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911B40C4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911B40D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911B4174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911B4150);
  JUMPOUT(0x1911B4120);
}

void sub_1911B4184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911B4160);
  JUMPOUT(0x1911B4128);
}

void sub_1911B4194()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911B4138);
  JUMPOUT(0x1911B4130);
}

void nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911B4408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911B45AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911B45C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911B45B8);
}

uint64_t *nitro::ndarray<half>::operator+=<float>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;

  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  v5 = v4 - v3;
  if (v4 == v3 || !*a1)
    return a1;
  if ((unint64_t)(v5 - 8) < 8)
  {
    v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6)
  {
    v14 = v5 >> 3;
    v15 = (_QWORD *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3)
      goto LABEL_19;
    v16 = v14 <= 1 ? 1 : v14;
    if (*(_QWORD *)v3 != *v15)
      goto LABEL_19;
    v17 = 1;
    do
    {
      v18 = v17;
      if (v16 == v17)
        break;
      v19 = *(_QWORD *)&v3[8 * v17];
      v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 >= v14)
    {
      nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(a1, a2);
    }
    else
    {
LABEL_19:
      nitro::ndarray<half>::operator+<float>(a1, a2, &v25);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v25);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  return a1;
}

void nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;
  __int16 *v34;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  float *v63;
  uint64_t v64;
  uint64_t v65;
  __int16 *v66;
  float32x4_t *v70;
  float16x4_t *v71;
  unint64_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float16x8_t v77;
  float16x8_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  float32x4_t *v92;
  uint64_t v93;
  float16x4_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  float *v104;
  uint64_t v105;
  uint64_t v106;
  __int16 *v107;
  float32x4_t *v111;
  float16x4_t *v112;
  unint64_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float16x8_t v118;
  float16x8_t v119;
  _QWORD *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v159;
  int v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  float32x4_t *v165;
  float16x4_t *v166;
  unint64_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float16x8_t v172;
  float16x8_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return;
  v13 = *a1;
  if (!*a1)
    return;
  if (v12 - 8 < 8)
  {
    v14 = 1;
    v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v16 = ((v12 - 8) >> 3) + 1;
  v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  v17 = v4 + 1;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v179 = *v4;
    if (!*v4)
      return;
    v79 = 0;
    v80 = a2[8];
    v81 = a1[8];
    v82 = v4[1];
    v83 = (uint64_t *)a1[5];
    v174 = (uint64_t *)a2[5];
    v84 = v13 + 2 * v81 + 16;
    v177 = *v174;
    v178 = *v83;
    v176 = 2 * *v83;
    v85 = 4 * v80 + 32;
    v175 = 4 * *v174;
    while (!v82)
    {
LABEL_50:
      v81 += v178;
      v80 += v177;
      ++v79;
      v84 += v176;
      v85 += v175;
      if (v79 == v179)
        return;
    }
    v86 = 0;
    v87 = v4[2];
    v88 = *a2;
    v89 = a2[5];
    v90 = v83[1];
    v91 = v87 & 0xFFFFFFFFFFFFFFF0;
    v92 = (float32x4_t *)(*a2 + v85);
    v93 = v174[1];
    v94 = (float16x4_t *)v84;
    v95 = v80;
    v96 = v81;
    while (1)
    {
      if (v87)
      {
        v97 = v83[2];
        v98 = *(_QWORD *)(v89 + 16);
        if (v87 >= 0x10 && (v97 == 1 ? (v99 = v98 == 1) : (v99 = 0), v99))
        {
          v101 = v95 + v91 * v98;
          v111 = v92;
          v112 = v94;
          v113 = v87 & 0xFFFFFFFFFFFFFFF0;
          v102 = v96 + v91 * v97;
          do
          {
            v114 = v111[-2];
            v115 = v111[-1];
            v116 = *v111;
            v117 = v111[1];
            v111 += 4;
            v118 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(v114, vcvtq_f32_f16(v112[-2]))), vaddq_f32(v115, vcvt_hight_f32_f16(*(float16x8_t *)v112[-2].i8)));
            v119 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(v116, vcvtq_f32_f16(*v112))), vaddq_f32(v117, vcvt_hight_f32_f16(*(float16x8_t *)v112->i8)));
            *(float16x8_t *)v112[-2].i8 = v118;
            *(float16x8_t *)v112->i8 = v119;
            v112 += 4;
            v113 -= 16;
          }
          while (v113);
          v100 = v87 & 0xFFFFFFFFFFFFFFF0;
          if (v87 == v91)
            goto LABEL_53;
        }
        else
        {
          v100 = 0;
          v101 = v95;
          v102 = v96;
        }
        v103 = v87 - v100;
        v104 = (float *)(v88 + 4 * v101);
        v105 = 4 * v98;
        v106 = 2 * v97;
        v107 = (__int16 *)(v13 + 2 * v102);
        do
        {
          _H1 = *v107;
          __asm { FCVT            S1, H1 }
          _S0 = *v104 + _S1;
          __asm { FCVT            H0, S0 }
          *v107 = LOWORD(_S0);
          v104 = (float *)((char *)v104 + v105);
          v107 = (__int16 *)((char *)v107 + v106);
          --v103;
        }
        while (v103);
      }
LABEL_53:
      v96 += v90;
      v95 += v93;
      ++v86;
      v94 = (float16x4_t *)((char *)v94 + 2 * v90);
      v92 = (float32x4_t *)((char *)v92 + 4 * v93);
      if (v86 == v82)
        goto LABEL_50;
    }
  }
  if (v22 == 2)
  {
    v41 = *v4;
    if (!*v4)
      return;
    v42 = 0;
    v43 = a2[8];
    v44 = a1[8];
    v45 = v4[1];
    v46 = *a2;
    v47 = (uint64_t *)a2[5];
    v48 = (uint64_t *)a1[5];
    v49 = *v48;
    v50 = *v47;
    v51 = v45 & 0xFFFFFFFFFFFFFFF0;
    v52 = v13 + 2 * v44 + 16;
    v53 = 2 * *v48;
    v54 = *a2 + 4 * v43 + 32;
    v55 = 4 * *v47;
    while (1)
    {
      if (v45)
      {
        v56 = v48[1];
        v57 = v47[1];
        if (v45 >= 0x10 && (v56 == 1 ? (_ZF = v57 == 1) : (_ZF = 0), _ZF))
        {
          v60 = v43 + v51 * v57;
          v70 = (float32x4_t *)v54;
          v71 = (float16x4_t *)v52;
          v72 = v45 & 0xFFFFFFFFFFFFFFF0;
          v61 = v44 + v51 * v56;
          do
          {
            v73 = v70[-2];
            v74 = v70[-1];
            v75 = *v70;
            v76 = v70[1];
            v70 += 4;
            v77 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(v73, vcvtq_f32_f16(v71[-2]))), vaddq_f32(v74, vcvt_hight_f32_f16(*(float16x8_t *)v71[-2].i8)));
            v78 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(v75, vcvtq_f32_f16(*v71))), vaddq_f32(v76, vcvt_hight_f32_f16(*(float16x8_t *)v71->i8)));
            *(float16x8_t *)v71[-2].i8 = v77;
            *(float16x8_t *)v71->i8 = v78;
            v71 += 4;
            v72 -= 16;
          }
          while (v72);
          v59 = v45 & 0xFFFFFFFFFFFFFFF0;
          if (v45 == v51)
            goto LABEL_33;
        }
        else
        {
          v59 = 0;
          v60 = v43;
          v61 = v44;
        }
        v62 = v45 - v59;
        v63 = (float *)(v46 + 4 * v60);
        v64 = 4 * v57;
        v65 = 2 * v56;
        v66 = (__int16 *)(v13 + 2 * v61);
        do
        {
          _H1 = *v66;
          __asm { FCVT            S1, H1 }
          _S0 = *v63 + _S1;
          __asm { FCVT            H0, S0 }
          *v66 = LOWORD(_S0);
          v63 = (float *)((char *)v63 + v64);
          v66 = (__int16 *)((char *)v66 + v65);
          --v62;
        }
        while (v62);
      }
LABEL_33:
      v44 += v49;
      v43 += v50;
      ++v42;
      v52 += v53;
      v54 += v55;
      if (v42 == v41)
        return;
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v120 = operator new(v12);
    bzero(v120, v12 & 0xFFFFFFFFFFFFFFF8);
    v121 = *a2;
    if (v12 >> 3 <= 1)
      v122 = 1;
    else
      v122 = v12 >> 3;
    v123 = a2[5];
    v124 = a2[8];
    v125 = v122 & 0x1FFFFFFFFFFFFFFELL;
    v126 = a1[5];
    while (v122 >= 2)
    {
      v129 = 0;
      v130 = 0;
      v131 = v122 & 0x1FFFFFFFFFFFFFFELL;
      v132 = (_QWORD *)(v126 + 8);
      v133 = v120 + 1;
      do
      {
        v129 += *(v132 - 1) * *(v133 - 1);
        v130 += *v132 * *v133;
        v133 += 2;
        v132 += 2;
        v131 -= 2;
      }
      while (v131);
      v127 = v130 + v129;
      v128 = v122 & 0x1FFFFFFFFFFFFFFELL;
      if (v122 != v125)
        goto LABEL_78;
LABEL_80:
      if (v122 < 2)
      {
        v141 = 0;
        v142 = 0;
LABEL_85:
        v148 = v122 - v142;
        v149 = v142;
        v150 = (uint64_t *)(v123 + 8 * v142);
        v151 = &v120[v149];
        do
        {
          v153 = *v151++;
          v152 = v153;
          v154 = *v150++;
          v141 += v154 * v152;
          --v148;
        }
        while (v148);
        goto LABEL_87;
      }
      v143 = 0;
      v144 = 0;
      v145 = v122 & 0x1FFFFFFFFFFFFFFELL;
      v146 = (_QWORD *)(v123 + 8);
      v147 = v120 + 1;
      do
      {
        v143 += *(v146 - 1) * *(v147 - 1);
        v144 += *v146 * *v147;
        v147 += 2;
        v146 += 2;
        v145 -= 2;
      }
      while (v145);
      v141 = v144 + v143;
      v142 = v122 & 0x1FFFFFFFFFFFFFFELL;
      if (v122 != v125)
        goto LABEL_85;
LABEL_87:
      v155 = 2 * v127;
      _H1 = *(_WORD *)(v13 + v155);
      __asm { FCVT            S1, H1 }
      _S0 = *(float *)(v121 + 4 * (v124 + v141)) + _S1;
      __asm { FCVT            H0, S0 }
      *(_WORD *)(v13 + v155) = LOWORD(_S0);
      if ((int)(v12 >> 3) >= 1)
      {
        v159 = (v12 >> 3) + 1;
        v160 = v12 >> 3;
        while (1)
        {
          v161 = (v159 - 2);
          v162 = v120[v161] + 1;
          v120[v161] = v162;
          if (v162 < v4[v161])
            break;
          v120[(v159 - 2)] = 0;
          --v160;
          if ((unint64_t)--v159 <= 1)
            goto LABEL_93;
        }
        if (v160 > 0)
          continue;
      }
LABEL_93:
      operator delete(v120);
      return;
    }
    v127 = 0;
    v128 = 0;
LABEL_78:
    v134 = v122 - v128;
    v135 = v128;
    v136 = (uint64_t *)(v126 + 8 * v128);
    v137 = &v120[v135];
    do
    {
      v139 = *v137++;
      v138 = v139;
      v140 = *v136++;
      v127 += v140 * v138;
      --v134;
    }
    while (v134);
    goto LABEL_80;
  }
  v23 = *v4;
  if (!*v4)
    return;
  v24 = a2[8];
  v25 = a1[8];
  v26 = *a2;
  v27 = *(_QWORD *)a1[5];
  v28 = *(_QWORD *)a2[5];
  if (v23 < 0x10)
  {
    v29 = 0;
LABEL_28:
    v30 = v23 - v29;
    v31 = (float *)(v26 + 4 * v24);
    v32 = 4 * v28;
    v33 = 2 * v27;
    v34 = (__int16 *)(v13 + 2 * v25);
    do
    {
      _H1 = *v34;
      __asm { FCVT            S1, H1 }
      _S0 = *v31 + _S1;
      __asm { FCVT            H0, S0 }
      *v34 = LOWORD(_S0);
      v31 = (float *)((char *)v31 + v32);
      v34 = (__int16 *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  v29 = 0;
  if (v27 != 1)
    goto LABEL_28;
  if (v28 != 1)
    goto LABEL_28;
  v29 = v23 & 0xFFFFFFFFFFFFFFF0;
  v163 = v24 + (v23 & 0xFFFFFFFFFFFFFFF0);
  v164 = v25 + (v23 & 0xFFFFFFFFFFFFFFF0);
  v165 = (float32x4_t *)(v26 + 4 * v24 + 32);
  v166 = (float16x4_t *)(v13 + 2 * v25 + 16);
  v167 = v23 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v168 = v165[-2];
    v169 = v165[-1];
    v170 = *v165;
    v171 = v165[1];
    v165 += 4;
    v172 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(v168, vcvtq_f32_f16(v166[-2]))), vaddq_f32(v169, vcvt_hight_f32_f16(*(float16x8_t *)v166[-2].i8)));
    v173 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(v170, vcvtq_f32_f16(*v166))), vaddq_f32(v171, vcvt_hight_f32_f16(*(float16x8_t *)v166->i8)));
    *(float16x8_t *)v166[-2].i8 = v172;
    *(float16x8_t *)v166->i8 = v173;
    v166 += 4;
    v167 -= 16;
  }
  while (v167);
  v24 = v163;
  v25 = v164;
  if (v23 != v29)
    goto LABEL_28;
}

void sub_1911B4EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::operator+<float>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<half>::copy((uint64_t)a1, a3);
    nitro::ndarray<half>::operator+=<float>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<half>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<half>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<float>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<half>::operator+=<float>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911B5214(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911B5228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911B52C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911B52A0);
  JUMPOUT(0x1911B5270);
}

void sub_1911B52D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911B52B0);
  JUMPOUT(0x1911B5278);
}

void sub_1911B52E4()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911B5288);
  JUMPOUT(0x1911B5280);
}

void nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911B5558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911B56FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911B5710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911B5708);
}

uint64_t *nitro::ndarray<float>::operator+=<float>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;

  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  v5 = v4 - v3;
  if (v4 == v3 || !*a1)
    return a1;
  if ((unint64_t)(v5 - 8) < 8)
  {
    v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6)
  {
    v14 = v5 >> 3;
    v15 = (_QWORD *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3)
      goto LABEL_19;
    v16 = v14 <= 1 ? 1 : v14;
    if (*(_QWORD *)v3 != *v15)
      goto LABEL_19;
    v17 = 1;
    do
    {
      v18 = v17;
      if (v16 == v17)
        break;
      v19 = *(_QWORD *)&v3[8 * v17];
      v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 >= v14)
    {
      nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(a1, a2);
    }
    else
    {
LABEL_19:
      nitro::ndarray<float>::operator+<float>(a1, a2, &v25);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v25);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  return a1;
}

float32x4_t nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  float *v32;
  uint64_t v33;
  uint64_t v34;
  float *v35;
  float32x4_t result;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  float *v62;
  uint64_t v63;
  uint64_t v64;
  float *v65;
  float32x4_t *v67;
  float32x4_t *v68;
  unint64_t v69;
  float32x4_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  float32x4_t *v88;
  float32x4_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  float *v98;
  uint64_t v99;
  uint64_t v100;
  float *v101;
  float32x4_t *v103;
  float32x4_t *v104;
  unint64_t v105;
  float32x4_t v106;
  _QWORD *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  unint64_t v145;
  float32x4_t *v146;
  float32x4_t *v147;
  unint64_t v148;
  float32x4_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v159;
  uint64_t v160;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return result;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return result;
  v160 = *a1;
  if (!*a1)
    return result;
  if (v12 - 8 < 8)
  {
    v13 = 1;
    v14 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v20 = *v14++;
      v13 *= v20;
    }
    while (v14 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v15 = ((v12 - 8) >> 3) + 1;
  v14 = &v4[v15 & 0x3FFFFFFFFFFFFFFELL];
  v16 = v4 + 1;
  v17 = 1;
  v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
  v19 = 1;
  do
  {
    v17 *= *(v16 - 1);
    v19 *= *v16;
    v16 += 2;
    v18 -= 2;
  }
  while (v18);
  v13 = v19 * v17;
  if (v15 != (v15 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v13)
    return result;
  v21 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v155 = *v4;
    if (!*v4)
      return result;
    v71 = 0;
    v72 = a2[8];
    v73 = a1[8];
    v74 = v4[1];
    v75 = (uint64_t *)a1[5];
    v152 = (uint64_t *)a2[5];
    v153 = *v152;
    v154 = *v75;
    v157 = 4 * *v75;
    v156 = 4 * *v152;
    v150 = 4 * v72;
    v151 = 4 * v73;
    v76 = 4 * v73 + v160 + 16;
    v77 = 4 * v72 + 16;
    while (!v74)
    {
LABEL_55:
      v73 += v154;
      v72 += v153;
      ++v71;
      v76 += v157;
      v77 += v156;
      if (v71 == v155)
        return result;
    }
    v78 = 0;
    v79 = v150 + v156 * v71;
    v80 = v4[2];
    v81 = *a2;
    v82 = v75[1];
    v83 = v152[1];
    v84 = 4 * v82;
    v159 = v151 + v157 * v71;
    v85 = 4 * v83;
    v86 = v80 & 0xFFFFFFFFFFFFFFF8;
    v87 = a2[5];
    v88 = (float32x4_t *)(*a2 + v77);
    v89 = (float32x4_t *)v76;
    v90 = v72;
    v91 = v73;
    while (!v80)
    {
LABEL_58:
      v91 += v82;
      v90 += v83;
      ++v78;
      v89 = (float32x4_t *)((char *)v89 + v84);
      v88 = (float32x4_t *)((char *)v88 + v85);
      if (v78 == v74)
        goto LABEL_55;
    }
    v92 = v75[2];
    v93 = *(_QWORD *)(v87 + 16);
    if (v80 >= 8)
    {
      v94 = 0;
      if (v92 != 1)
        goto LABEL_62;
      v95 = v90;
      v96 = v91;
      if (v93 != 1)
      {
LABEL_63:
        v97 = v80 - v94;
        v98 = (float *)(v81 + 4 * v95);
        v99 = 4 * v93;
        v100 = 4 * v92;
        v101 = (float *)(v160 + 4 * v96);
        do
        {
          result.f32[0] = *v98 + *v101;
          *v101 = result.f32[0];
          v98 = (float *)((char *)v98 + v99);
          v101 = (float *)((char *)v101 + v100);
          --v97;
        }
        while (v97);
        goto LABEL_58;
      }
      if (v160 + v159 + v84 * v78 >= v81 + v79 + 4 * v80 + v85 * v78
        || v81 + v79 + v85 * v78 >= v160 + v159 + 4 * v80 + v84 * v78)
      {
        v95 = v90 + v86;
        v103 = v88;
        v104 = v89;
        v105 = v80 & 0xFFFFFFFFFFFFFFF8;
        v96 = v91 + v86;
        do
        {
          result = vaddq_f32(v103[-1], v104[-1]);
          v106 = vaddq_f32(*v103, *v104);
          v104[-1] = result;
          *v104 = v106;
          v104 += 2;
          v103 += 2;
          v105 -= 8;
        }
        while (v105);
        v94 = v80 & 0xFFFFFFFFFFFFFFF8;
        if (v80 == v86)
          goto LABEL_58;
        goto LABEL_63;
      }
    }
    v94 = 0;
LABEL_62:
    v95 = v90;
    v96 = v91;
    goto LABEL_63;
  }
  if (v21 == 2)
  {
    v37 = *v4;
    if (!*v4)
      return result;
    v38 = 0;
    v39 = a2[8];
    v40 = a1[8];
    v41 = v4[1];
    v42 = (uint64_t *)a2[5];
    v43 = (uint64_t *)a1[5];
    v44 = *v43;
    v45 = *v42;
    v46 = 4 * *v43;
    v47 = 4 * *v42;
    v48 = v41 & 0xFFFFFFFFFFFFFFF8;
    v49 = *a2;
    v50 = 4 * v40 + v160 + 16;
    v51 = 4 * v39 + *a2 + 16;
    v52 = v160 + 4 * v40;
    v53 = v160 + 4 * v40 + 4 * v41;
    v54 = *a2 + 4 * v39;
    v55 = *a2 + 4 * v39 + 4 * v41;
    while (!v41)
    {
LABEL_34:
      v40 += v44;
      v39 += v45;
      ++v38;
      v50 += v46;
      v51 += v47;
      if (v38 == v37)
        return result;
    }
    v56 = v43[1];
    v57 = v42[1];
    if (v41 >= 8)
    {
      v58 = 0;
      if (v56 != 1)
        goto LABEL_38;
      v59 = v39;
      v60 = v40;
      if (v57 != 1)
      {
LABEL_39:
        v61 = v41 - v58;
        v62 = (float *)(v49 + 4 * v59);
        v63 = 4 * v57;
        v64 = 4 * v56;
        v65 = (float *)(v160 + 4 * v60);
        do
        {
          result.f32[0] = *v62 + *v65;
          *v65 = result.f32[0];
          v62 = (float *)((char *)v62 + v63);
          v65 = (float *)((char *)v65 + v64);
          --v61;
        }
        while (v61);
        goto LABEL_34;
      }
      if (v52 + v46 * v38 >= (unint64_t)(v55 + v47 * v38)
        || v54 + v47 * v38 >= (unint64_t)(v53 + v46 * v38))
      {
        v59 = v39 + v48;
        v67 = (float32x4_t *)v51;
        v68 = (float32x4_t *)v50;
        v69 = v41 & 0xFFFFFFFFFFFFFFF8;
        v60 = v40 + v48;
        do
        {
          result = vaddq_f32(v67[-1], v68[-1]);
          v70 = vaddq_f32(*v67, *v68);
          v68[-1] = result;
          *v68 = v70;
          v68 += 2;
          v67 += 2;
          v69 -= 8;
        }
        while (v69);
        v58 = v41 & 0xFFFFFFFFFFFFFFF8;
        if (v41 == v48)
          goto LABEL_34;
        goto LABEL_39;
      }
    }
    v58 = 0;
LABEL_38:
    v59 = v39;
    v60 = v40;
    goto LABEL_39;
  }
  if (v21 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v107 = operator new(v12);
    bzero(v107, v12 & 0xFFFFFFFFFFFFFFF8);
    v108 = *a2;
    if (v12 >> 3 <= 1)
      v109 = 1;
    else
      v109 = v12 >> 3;
    v110 = a2[5];
    v111 = a2[8];
    v112 = v109 & 0x1FFFFFFFFFFFFFFELL;
    v113 = a1[5];
    while (v109 >= 2)
    {
      v116 = 0;
      v117 = 0;
      v118 = v109 & 0x1FFFFFFFFFFFFFFELL;
      v119 = (_QWORD *)(v113 + 8);
      v120 = v107 + 1;
      do
      {
        v116 += *(v119 - 1) * *(v120 - 1);
        v117 += *v119 * *v120;
        v120 += 2;
        v119 += 2;
        v118 -= 2;
      }
      while (v118);
      v114 = v117 + v116;
      v115 = v109 & 0x1FFFFFFFFFFFFFFELL;
      if (v109 != v112)
        goto LABEL_87;
LABEL_89:
      if (v109 < 2)
      {
        v128 = 0;
        v129 = 0;
LABEL_94:
        v135 = v109 - v129;
        v136 = v129;
        v137 = (uint64_t *)(v110 + 8 * v129);
        v138 = &v107[v136];
        do
        {
          v140 = *v138++;
          v139 = v140;
          v141 = *v137++;
          v128 += v141 * v139;
          --v135;
        }
        while (v135);
        goto LABEL_96;
      }
      v130 = 0;
      v131 = 0;
      v132 = v109 & 0x1FFFFFFFFFFFFFFELL;
      v133 = (_QWORD *)(v110 + 8);
      v134 = v107 + 1;
      do
      {
        v130 += *(v133 - 1) * *(v134 - 1);
        v131 += *v133 * *v134;
        v134 += 2;
        v133 += 2;
        v132 -= 2;
      }
      while (v132);
      v128 = v131 + v130;
      v129 = v109 & 0x1FFFFFFFFFFFFFFELL;
      if (v109 != v112)
        goto LABEL_94;
LABEL_96:
      *(float *)(v160 + 4 * v114) = *(float *)(v108 + 4 * (v111 + v128)) + *(float *)(v160 + 4 * v114);
      if ((int)(v12 >> 3) >= 1)
      {
        v142 = (v12 >> 3) + 1;
        v143 = v12 >> 3;
        while (1)
        {
          v144 = (v142 - 2);
          v145 = v107[v144] + 1;
          v107[v144] = v145;
          if (v145 < v4[v144])
            break;
          v107[(v142 - 2)] = 0;
          --v143;
          if ((unint64_t)--v142 <= 1)
            goto LABEL_102;
        }
        if (v143 > 0)
          continue;
      }
LABEL_102:
      operator delete(v107);
      return result;
    }
    v114 = 0;
    v115 = 0;
LABEL_87:
    v121 = v109 - v115;
    v122 = v115;
    v123 = (uint64_t *)(v113 + 8 * v115);
    v124 = &v107[v122];
    do
    {
      v126 = *v124++;
      v125 = v126;
      v127 = *v123++;
      v114 += v127 * v125;
      --v121;
    }
    while (v121);
    goto LABEL_89;
  }
  v22 = *v4;
  if (!*v4)
    return result;
  v23 = a2[8];
  v24 = a1[8];
  v25 = *a2;
  v26 = *(_QWORD *)a1[5];
  v27 = *(_QWORD *)a2[5];
  if (v22 < 0xC)
    goto LABEL_27;
  v28 = 0;
  if (v26 != 1 || v27 != 1)
    goto LABEL_28;
  if (v160 + 4 * v24 < v25 + 4 * v22 + 4 * v23 && v25 + 4 * v23 < v160 + 4 * v22 + 4 * v24)
  {
LABEL_27:
    v28 = 0;
LABEL_28:
    v29 = a2[8];
    v30 = a1[8];
LABEL_29:
    v31 = v22 - v28;
    v32 = (float *)(v25 + 4 * v29);
    v33 = 4 * v27;
    v34 = 4 * v26;
    v35 = (float *)(v160 + 4 * v30);
    do
    {
      result.f32[0] = *v32 + *v35;
      *v35 = result.f32[0];
      v32 = (float *)((char *)v32 + v33);
      v35 = (float *)((char *)v35 + v34);
      --v31;
    }
    while (v31);
    return result;
  }
  v28 = v22 & 0xFFFFFFFFFFFFFFF8;
  v29 = v23 + (v22 & 0xFFFFFFFFFFFFFFF8);
  v30 = v24 + (v22 & 0xFFFFFFFFFFFFFFF8);
  v146 = (float32x4_t *)(v25 + 4 * v23 + 16);
  v147 = (float32x4_t *)(v160 + 4 * v24 + 16);
  v148 = v22 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    result = vaddq_f32(v146[-1], v147[-1]);
    v149 = vaddq_f32(*v146, *v147);
    v147[-1] = result;
    *v147 = v149;
    v146 += 2;
    v147 += 2;
    v148 -= 8;
  }
  while (v148);
  if (v22 != v28)
    goto LABEL_29;
  return result;
}

void sub_1911B6098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::operator+<float>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<float>::copy((uint64_t)a1, a3);
    nitro::ndarray<float>::operator+=<float>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<float>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<float>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<float>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<float>::operator+=<float>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911B63F8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911B640C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911B64A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911B6484);
  JUMPOUT(0x1911B6454);
}

void sub_1911B64B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911B6494);
  JUMPOUT(0x1911B645CLL);
}

void sub_1911B64C8()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911B646CLL);
  JUMPOUT(0x1911B6464);
}

void nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911B673C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911B68E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911B68F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911B68ECLL);
}

void nitro::ndarray_container::visit<nitro::ndarray_container const,nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0,(void *)0>(nitro::ndarray_container const &,nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 230, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 230, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1911B6C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1911B6C8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1911B6FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1911B7030(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

_QWORD *nitro::ndarray<unsigned char>::operator-=<unsigned char>(_QWORD *a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;

  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  v5 = v4 - v3;
  if (v4 == v3 || !*a1)
    return a1;
  if ((unint64_t)(v5 - 8) < 8)
  {
    v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6)
  {
    v14 = v5 >> 3;
    v15 = (_QWORD *)a2[2];
    if (v14 != (uint64_t)(a2[3] - (_QWORD)v15) >> 3)
      goto LABEL_19;
    v16 = v14 <= 1 ? 1 : v14;
    if (*(_QWORD *)v3 != *v15)
      goto LABEL_19;
    v17 = 1;
    do
    {
      v18 = v17;
      if (v16 == v17)
        break;
      v19 = *(_QWORD *)&v3[8 * v17];
      v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 >= v14)
    {
      nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(a1, a2);
    }
    else
    {
LABEL_19:
      nitro::ndarray<unsigned char>::operator-<unsigned char>(a1, a2, &v25);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v25);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  return a1;
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;

  v4 = (char *)a1[2];
  v5 = (char *)a1[3];
  v6 = (v5 - v4) >> 3;
  v7 = (_QWORD *)a2[2];
  if (v6 != (uint64_t)(a2[3] - (_QWORD)v7) >> 3)
    goto LABEL_13;
  if (v5 == v4)
    return;
  v8 = v6 <= 1 ? 1 : (v5 - v4) >> 3;
  if (*(_QWORD *)v4 != *v7)
    goto LABEL_13;
  v9 = 1;
  do
  {
    v10 = v9;
    if (v8 == v9)
      break;
    v11 = *(_QWORD *)&v4[8 * v9];
    v12 = v7[v9++];
  }
  while (v11 == v12);
  if (v10 < v6)
LABEL_13:
    nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator()();
  v13 = v5 - v4;
  if (v5 == v4 || !*a1)
    return;
  if ((unint64_t)(v13 - 8) < 8)
  {
    v14 = 1;
    v15 = (char *)a1[2];
    do
    {
LABEL_20:
      v21 = *(_QWORD *)v15;
      v15 += 8;
      v14 *= v21;
    }
    while (v15 != v5);
    goto LABEL_21;
  }
  v16 = ((unint64_t)(v13 - 8) >> 3) + 1;
  v15 = &v4[8 * (v16 & 0x3FFFFFFFFFFFFFFELL)];
  v17 = v4 + 8;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = v13 >> 3;
  if (v13 >> 3 == 3)
  {
    v35 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      v36 = 0;
      v37 = a2[8];
      v38 = a1[8];
      do
      {
        if (*((_QWORD *)v4 + 1))
        {
          v39 = 0;
          v40 = v37;
          v41 = v38;
          do
          {
            if (*((_QWORD *)v4 + 2))
            {
              v44 = 0;
              v45 = v40;
              v46 = v41;
              do
              {
                *(_BYTE *)(*a1 + v46) -= *(_BYTE *)(*a2 + v45);
                v42 = (_QWORD *)a1[5];
                v46 += v42[2];
                v43 = (_QWORD *)a2[5];
                v45 += v43[2];
                ++v44;
                v4 = (char *)a1[2];
              }
              while (v44 < *((_QWORD *)v4 + 2));
            }
            else
            {
              v42 = (_QWORD *)a1[5];
              v43 = (_QWORD *)a2[5];
            }
            v41 += v42[1];
            v40 += v43[1];
            ++v39;
          }
          while (v39 < *((_QWORD *)v4 + 1));
          v35 = *(_QWORD *)v4;
        }
        else
        {
          v42 = (_QWORD *)a1[5];
          v43 = (_QWORD *)a2[5];
        }
        v38 += *v42;
        v37 += *v43;
        ++v36;
      }
      while (v36 < v35);
    }
  }
  else
  {
    if (v22 != 2)
    {
      if (v22 == 1)
      {
        if (*(_QWORD *)v4)
        {
          v23 = 0;
          v24 = a2[8];
          v25 = a1[8];
          do
          {
            *(_BYTE *)(*a1 + v25) -= *(_BYTE *)(*a2 + v24);
            v25 += *(_QWORD *)a1[5];
            v24 += *(_QWORD *)a2[5];
            ++v23;
          }
          while (v23 < *(_QWORD *)a1[2]);
        }
        return;
      }
      if (v13 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v47 = operator new(v13);
      bzero(v47, v13 & 0xFFFFFFFFFFFFFFF8);
      if (v22 <= 1)
        v48 = 1;
      else
        v48 = v13 >> 3;
      v49 = v48 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        v50 = a1[5];
        if (v48 < 2)
          break;
        v53 = 0;
        v54 = 0;
        v55 = (_QWORD *)(v50 + 8);
        v56 = v48 & 0xFFFFFFFFFFFFFFFELL;
        v57 = v47 + 1;
        do
        {
          v53 += *(v55 - 1) * *(v57 - 1);
          v54 += *v55 * *v57;
          v57 += 2;
          v55 += 2;
          v56 -= 2;
        }
        while (v56);
        v51 = v54 + v53;
        v52 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49)
          goto LABEL_60;
LABEL_62:
        v65 = a2[5];
        if (v48 < 2)
        {
          v66 = 0;
          v67 = 0;
LABEL_67:
          v73 = v48 - v67;
          v74 = v67;
          v75 = (uint64_t *)(v65 + v74 * 8);
          v76 = &v47[v74];
          do
          {
            v78 = *v76++;
            v77 = v78;
            v79 = *v75++;
            v66 += v79 * v77;
            --v73;
          }
          while (v73);
          goto LABEL_69;
        }
        v68 = 0;
        v69 = 0;
        v70 = (_QWORD *)(v65 + 8);
        v71 = v48 & 0xFFFFFFFFFFFFFFFELL;
        v72 = v47 + 1;
        do
        {
          v68 += *(v70 - 1) * *(v72 - 1);
          v69 += *v70 * *v72;
          v72 += 2;
          v70 += 2;
          v71 -= 2;
        }
        while (v71);
        v66 = v69 + v68;
        v67 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49)
          goto LABEL_67;
LABEL_69:
        *(_BYTE *)(*a1 + v51) -= *(_BYTE *)(*a2 + a2[8] + v66);
        if ((int)((unint64_t)v13 >> 3) >= 1)
        {
          v80 = a1[2];
          v81 = ((unint64_t)v13 >> 3) + 1;
          v82 = (unint64_t)v13 >> 3;
          while (1)
          {
            v83 = (v81 - 2);
            v84 = v47[v83] + 1;
            v47[v83] = v84;
            if (v84 < *(_QWORD *)(v80 + v83 * 8))
              break;
            v47[(v81 - 2)] = 0;
            LODWORD(v82) = v82 - 1;
            if ((unint64_t)--v81 <= 1)
              goto LABEL_75;
          }
          if ((int)v82 > 0)
            continue;
        }
LABEL_75:
        operator delete(v47);
        return;
      }
      v51 = 0;
      v52 = 0;
LABEL_60:
      v58 = v48 - v52;
      v59 = v52;
      v60 = (uint64_t *)(v50 + v59 * 8);
      v61 = &v47[v59];
      do
      {
        v63 = *v61++;
        v62 = v63;
        v64 = *v60++;
        v51 += v64 * v62;
        --v58;
      }
      while (v58);
      goto LABEL_62;
    }
    v26 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      v27 = 0;
      v28 = a2[8];
      v29 = a1[8];
      do
      {
        if (*((_QWORD *)v4 + 1))
        {
          v32 = 0;
          v33 = v28;
          v34 = v29;
          do
          {
            *(_BYTE *)(*a1 + v34) -= *(_BYTE *)(*a2 + v33);
            v30 = (_QWORD *)a1[5];
            v34 += v30[1];
            v31 = (_QWORD *)a2[5];
            v33 += v31[1];
            ++v32;
            v4 = (char *)a1[2];
          }
          while (v32 < *((_QWORD *)v4 + 1));
          v26 = *(_QWORD *)v4;
        }
        else
        {
          v30 = (_QWORD *)a1[5];
          v31 = (_QWORD *)a2[5];
        }
        v29 += *v30;
        v28 += *v31;
        ++v27;
      }
      while (v27 < v26);
    }
  }
}

void sub_1911B76D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>::operator-<unsigned char>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<unsigned char>::copy((uint64_t)a1, a3);
    nitro::ndarray<unsigned char>::operator-=<unsigned char>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<unsigned char>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<unsigned char>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<unsigned char>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<unsigned char>::operator-=<unsigned char>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911B7A30(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911B7A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911B7AE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911B7ABCLL);
  JUMPOUT(0x1911B7A8CLL);
}

void sub_1911B7AF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911B7ACCLL);
  JUMPOUT(0x1911B7A94);
}

void sub_1911B7B00()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911B7AA4);
  JUMPOUT(0x1911B7A9CLL);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911B7D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911B7F18(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911B7F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911B7F24);
}

uint64_t *nitro::ndarray<int>::operator-=<unsigned char>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;

  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  v5 = v4 - v3;
  if (v4 == v3 || !*a1)
    return a1;
  if ((unint64_t)(v5 - 8) < 8)
  {
    v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6)
  {
    v14 = v5 >> 3;
    v15 = (_QWORD *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3)
      goto LABEL_19;
    v16 = v14 <= 1 ? 1 : v14;
    if (*(_QWORD *)v3 != *v15)
      goto LABEL_19;
    v17 = 1;
    do
    {
      v18 = v17;
      if (v16 == v17)
        break;
      v19 = *(_QWORD *)&v3[8 * v17];
      v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 >= v14)
    {
      nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(a1, a2);
    }
    else
    {
LABEL_19:
      nitro::ndarray<int>::operator-<unsigned char>(a1, a2, &v25);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v25);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  return a1;
}

uint32x4_t nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  _DWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint32x4_t *v50;
  uint64_t v51;
  uint32x4_t *v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  BOOL v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint32x4_t *v63;
  uint16x8_t v64;
  uint32x4_t v65;
  uint32x4_t result;
  unint64_t v67;
  unint64_t v68;
  unsigned __int8 *v69;
  uint64_t v70;
  _DWORD *v71;
  uint32x4_t *v72;
  uint64_t v73;
  unint64_t v74;
  uint8x16_t v75;
  uint16x8_t v76;
  uint16x8_t v77;
  uint32x4_t v78;
  uint32x4_t v79;
  uint32x4_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t *v85;
  uint32x4_t *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint32x4_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  BOOL v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint32x4_t *v109;
  uint16x8_t v110;
  uint32x4_t v111;
  unint64_t v112;
  unint64_t v113;
  unsigned __int8 *v114;
  uint64_t v115;
  _DWORD *v116;
  uint32x4_t *v117;
  uint64_t v118;
  unint64_t v119;
  uint8x16_t v120;
  uint16x8_t v121;
  uint16x8_t v122;
  uint32x4_t v123;
  uint32x4_t v124;
  uint32x4_t v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint8x8_t *v167;
  uint32x4_t *v168;
  uint8x8_t v169;
  uint16x8_t v170;
  uint32x4_t v171;
  uint8x16_t *v172;
  uint32x4_t *v173;
  unint64_t v174;
  uint8x16_t v175;
  uint16x8_t v176;
  uint16x8_t v177;
  uint32x4_t v178;
  uint32x4_t v179;
  uint32x4_t v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v189;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return result;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return result;
  v13 = *a1;
  if (!*a1)
    return result;
  if (v12 - 8 < 8)
  {
    v14 = 1;
    v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v16 = ((v12 - 8) >> 3) + 1;
  v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  v17 = v4 + 1;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return result;
  v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v186 = *v4;
    if (!*v4)
      return result;
    v81 = 0;
    v82 = a2[8];
    v83 = a1[8];
    v84 = v4[1];
    v85 = (uint64_t *)a1[5];
    v182 = (uint64_t *)a2[5];
    v183 = v83;
    v184 = *v182;
    v185 = *v85;
    v187 = 4 * *v85;
    v181 = 4 * v83;
    v86 = (uint32x4_t *)(v13 + 4 * v83);
    while (!v84)
    {
LABEL_64:
      v83 += v185;
      v82 += v184;
      ++v81;
      v86 = (uint32x4_t *)((char *)v86 + v187);
      if (v81 == v186)
        return result;
    }
    v87 = 0;
    v88 = v4[2];
    v89 = *a2;
    v90 = a2[5];
    v91 = v85[1];
    v92 = 4 * v91;
    v93 = v182[1];
    v189 = v88 & 0xFFFFFFFFFFFFFFF0;
    v94 = v88 & 0xFFFFFFFFFFFFFFF8;
    v95 = v86;
    v96 = *a2;
    v97 = v82;
    v98 = v83;
    while (!v88)
    {
LABEL_67:
      v98 += v91;
      v97 += v93;
      ++v87;
      v96 += v93;
      v95 = (uint32x4_t *)((char *)v95 + v92);
      if (v87 == v84)
        goto LABEL_64;
    }
    v99 = v85[2];
    v100 = *(_QWORD *)(v90 + 16);
    if (v88 < 8
      || (v99 == 1 ? (v101 = v100 == 1) : (v101 = 0),
          !v101
       || (v13 + v181 + v187 * v81 + v92 * v87 < v89 + v88 + v82 + v93 * v87
         ? (v102 = v89 + v97 >= v13 + v187 * v81 + 4 * (v183 + v88) + v92 * v87)
         : (v102 = 1),
           !v102)))
    {
      v112 = 0;
      v104 = v97;
      v108 = v98;
      goto LABEL_87;
    }
    if (v88 >= 0x10)
    {
      v117 = v95;
      v118 = v96;
      v119 = v88 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v120 = *(uint8x16_t *)(v118 + v82);
        v121 = vmovl_high_u8(v120);
        v122 = vmovl_u8(*(uint8x8_t *)v120.i8);
        v123 = vsubw_u16(*v117, *(uint16x4_t *)v122.i8);
        result = vsubw_high_u16(v117[1], v122);
        v124 = vsubw_u16(v117[2], *(uint16x4_t *)v121.i8);
        v125 = vsubw_high_u16(v117[3], v121);
        v117[2] = v124;
        v117[3] = v125;
        *v117 = v123;
        v117[1] = result;
        v117 += 4;
        v118 += 16;
        v119 -= 16;
      }
      while (v119);
      if (v88 == v189)
        goto LABEL_67;
      v103 = v88 & 0xFFFFFFFFFFFFFFF0;
      if ((v88 & 8) == 0)
      {
        v108 = v98 + v189 * v99;
        v112 = v88 & 0xFFFFFFFFFFFFFFF0;
        v104 = v97 + v189 * v100;
LABEL_87:
        v113 = v88 - v112;
        v114 = (unsigned __int8 *)(v89 + v104);
        v115 = 4 * v99;
        v116 = (_DWORD *)(v13 + 4 * v108);
        do
        {
          *v116 -= *v114;
          v114 += v100;
          v116 = (_DWORD *)((char *)v116 + v115);
          --v113;
        }
        while (v113);
        goto LABEL_67;
      }
    }
    else
    {
      v103 = 0;
    }
    v104 = v97 + v94 * v100;
    v105 = v103 - (v88 & 0xFFFFFFFFFFFFFFF8);
    v106 = v82 + v103;
    v107 = 4 * v103;
    v108 = v98 + v94 * v99;
    do
    {
      v109 = (uint32x4_t *)((char *)v95 + v107);
      v110 = vmovl_u8(*(uint8x8_t *)(v96 + v106));
      v111 = vsubw_u16(*(uint32x4_t *)((char *)v95 + v107), *(uint16x4_t *)v110.i8);
      result = vsubw_high_u16(*(uint32x4_t *)((char *)&v95[1] + v107), v110);
      *v109 = v111;
      v109[1] = result;
      v106 += 8;
      v107 += 32;
      v105 += 8;
    }
    while (v105);
    v112 = v88 & 0xFFFFFFFFFFFFFFF8;
    if (v88 == v94)
      goto LABEL_67;
    goto LABEL_87;
  }
  if (v22 == 2)
  {
    v36 = *v4;
    if (!*v4)
      return result;
    v37 = 0;
    v38 = a2[8];
    v39 = a1[8];
    v40 = v4[1];
    v41 = *a2;
    v42 = (uint64_t *)a2[5];
    v43 = (uint64_t *)a1[5];
    v44 = *v43;
    v45 = 4 * *v43;
    v46 = *v42;
    v47 = v38 + v40;
    v48 = v40 & 0xFFFFFFFFFFFFFFF0;
    v49 = v40 & 0xFFFFFFFFFFFFFFF8;
    v50 = (uint32x4_t *)(v13 + 4 * v39);
    v51 = v13 + 4 * (v39 + v40);
    v52 = v50;
    while (!v40)
    {
LABEL_34:
      v39 += v44;
      v38 += v46;
      ++v37;
      v52 = (uint32x4_t *)((char *)v52 + v45);
      if (v37 == v36)
        return result;
    }
    v53 = v43[1];
    v54 = v42[1];
    if (v40 < 8
      || (v53 == 1 ? (v55 = v54 == 1) : (v55 = 0),
          !v55
       || ((unint64_t)v50->u64 + v45 * v37 < v41 + v47 + v46 * v37
         ? (v56 = v41 + v38 >= (unint64_t)(v51 + v45 * v37))
         : (v56 = 1),
           !v56)))
    {
      v67 = 0;
      v58 = v38;
      v62 = v39;
      goto LABEL_54;
    }
    if (v40 >= 0x10)
    {
      v72 = v52;
      v73 = v41;
      v74 = v40 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v75 = *(uint8x16_t *)(v73 + v38);
        v76 = vmovl_high_u8(v75);
        v77 = vmovl_u8(*(uint8x8_t *)v75.i8);
        v78 = vsubw_u16(*v72, *(uint16x4_t *)v77.i8);
        result = vsubw_high_u16(v72[1], v77);
        v79 = vsubw_u16(v72[2], *(uint16x4_t *)v76.i8);
        v80 = vsubw_high_u16(v72[3], v76);
        v72[2] = v79;
        v72[3] = v80;
        *v72 = v78;
        v72[1] = result;
        v72 += 4;
        v73 += 16;
        v74 -= 16;
      }
      while (v74);
      if (v40 == v48)
        goto LABEL_34;
      v57 = v40 & 0xFFFFFFFFFFFFFFF0;
      if ((v40 & 8) == 0)
      {
        v62 = v39 + v48 * v53;
        v67 = v40 & 0xFFFFFFFFFFFFFFF0;
        v58 = v38 + v48 * v54;
LABEL_54:
        v68 = v40 - v67;
        v69 = (unsigned __int8 *)(v41 + v58);
        v70 = 4 * v53;
        v71 = (_DWORD *)(v13 + 4 * v62);
        do
        {
          *v71 -= *v69;
          v69 += v54;
          v71 = (_DWORD *)((char *)v71 + v70);
          --v68;
        }
        while (v68);
        goto LABEL_34;
      }
    }
    else
    {
      v57 = 0;
    }
    v58 = v38 + v49 * v54;
    v59 = v57 - (v40 & 0xFFFFFFFFFFFFFFF8);
    v60 = v41 + v57;
    v61 = 4 * v57;
    v62 = v39 + v49 * v53;
    do
    {
      v63 = (uint32x4_t *)((char *)v52 + v61);
      v64 = vmovl_u8(*(uint8x8_t *)(v60 + v38));
      v65 = vsubw_u16(*(uint32x4_t *)((char *)v52 + v61), *(uint16x4_t *)v64.i8);
      result = vsubw_high_u16(*(uint32x4_t *)((char *)&v52[1] + v61), v64);
      *v63 = v65;
      v63[1] = result;
      v60 += 8;
      v61 += 32;
      v59 += 8;
    }
    while (v59);
    v67 = v40 & 0xFFFFFFFFFFFFFFF8;
    if (v40 == v49)
      goto LABEL_34;
    goto LABEL_54;
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v126 = operator new(v12);
    bzero(v126, v12 & 0xFFFFFFFFFFFFFFF8);
    v127 = *a2;
    if (v12 >> 3 <= 1)
      v128 = 1;
    else
      v128 = v12 >> 3;
    v129 = a2[5];
    v130 = a2[8];
    v131 = v128 & 0x1FFFFFFFFFFFFFFELL;
    v132 = a1[5];
    while (v128 >= 2)
    {
      v135 = 0;
      v136 = 0;
      v137 = v128 & 0x1FFFFFFFFFFFFFFELL;
      v138 = (_QWORD *)(v132 + 8);
      v139 = v126 + 1;
      do
      {
        v135 += *(v138 - 1) * *(v139 - 1);
        v136 += *v138 * *v139;
        v139 += 2;
        v138 += 2;
        v137 -= 2;
      }
      while (v137);
      v133 = v136 + v135;
      v134 = v128 & 0x1FFFFFFFFFFFFFFELL;
      if (v128 != v131)
        goto LABEL_105;
LABEL_107:
      if (v128 < 2)
      {
        v147 = 0;
        v148 = 0;
LABEL_112:
        v154 = v128 - v148;
        v155 = v148;
        v156 = (uint64_t *)(v129 + 8 * v148);
        v157 = &v126[v155];
        do
        {
          v159 = *v157++;
          v158 = v159;
          v160 = *v156++;
          v147 += v160 * v158;
          --v154;
        }
        while (v154);
        goto LABEL_114;
      }
      v149 = 0;
      v150 = 0;
      v151 = v128 & 0x1FFFFFFFFFFFFFFELL;
      v152 = (_QWORD *)(v129 + 8);
      v153 = v126 + 1;
      do
      {
        v149 += *(v152 - 1) * *(v153 - 1);
        v150 += *v152 * *v153;
        v153 += 2;
        v152 += 2;
        v151 -= 2;
      }
      while (v151);
      v147 = v150 + v149;
      v148 = v128 & 0x1FFFFFFFFFFFFFFELL;
      if (v128 != v131)
        goto LABEL_112;
LABEL_114:
      *(_DWORD *)(v13 + 4 * v133) -= *(unsigned __int8 *)(v127 + v130 + v147);
      if ((int)(v12 >> 3) >= 1)
      {
        v161 = (v12 >> 3) + 1;
        v162 = v12 >> 3;
        while (1)
        {
          v163 = (v161 - 2);
          v164 = v126[v163] + 1;
          v126[v163] = v164;
          if (v164 < v4[v163])
            break;
          v126[(v161 - 2)] = 0;
          --v162;
          if ((unint64_t)--v161 <= 1)
            goto LABEL_120;
        }
        if (v162 > 0)
          continue;
      }
LABEL_120:
      operator delete(v126);
      return result;
    }
    v133 = 0;
    v134 = 0;
LABEL_105:
    v140 = v128 - v134;
    v141 = v134;
    v142 = (uint64_t *)(v132 + 8 * v134);
    v143 = &v126[v141];
    do
    {
      v145 = *v143++;
      v144 = v145;
      v146 = *v142++;
      v133 += v146 * v144;
      --v140;
    }
    while (v140);
    goto LABEL_107;
  }
  v23 = *v4;
  if (!*v4)
    return result;
  v24 = a2[8];
  v25 = a1[8];
  v26 = *a2;
  v27 = *(_QWORD *)a1[5];
  v28 = *(_QWORD *)a2[5];
  if (v23 < 8)
    goto LABEL_27;
  v29 = 0;
  if (v27 != 1 || v28 != 1)
    goto LABEL_28;
  if (v13 + 4 * v25 < v26 + v23 + v24 && v26 + v24 < v13 + 4 * (v23 + v25))
  {
LABEL_27:
    v29 = 0;
LABEL_28:
    v30 = a2[8];
    v31 = a1[8];
    goto LABEL_29;
  }
  if (v23 >= 0x10)
  {
    v29 = v23 & 0xFFFFFFFFFFFFFFF0;
    v172 = (uint8x16_t *)(v26 + v24);
    v173 = (uint32x4_t *)(v13 + 4 * v25);
    v174 = v23 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v175 = *v172++;
      v176 = vmovl_high_u8(v175);
      v177 = vmovl_u8(*(uint8x8_t *)v175.i8);
      v178 = vsubw_u16(*v173, *(uint16x4_t *)v177.i8);
      result = vsubw_high_u16(v173[1], v177);
      v179 = vsubw_u16(v173[2], *(uint16x4_t *)v176.i8);
      v180 = vsubw_high_u16(v173[3], v176);
      v173[2] = v179;
      v173[3] = v180;
      *v173 = v178;
      v173[1] = result;
      v173 += 4;
      v174 -= 16;
    }
    while (v174);
    if (v23 == v29)
      return result;
    if ((v23 & 8) == 0)
    {
      v31 = v25 + v29;
      v30 = v24 + v29;
LABEL_29:
      v32 = v23 - v29;
      v33 = (unsigned __int8 *)(v26 + v30);
      v34 = 4 * v27;
      v35 = (_DWORD *)(v13 + 4 * v31);
      do
      {
        *v35 -= *v33;
        v33 += v28;
        v35 = (_DWORD *)((char *)v35 + v34);
        --v32;
      }
      while (v32);
      return result;
    }
  }
  else
  {
    v29 = 0;
  }
  v165 = v29;
  v29 = v23 & 0xFFFFFFFFFFFFFFF8;
  v30 = v24 + (v23 & 0xFFFFFFFFFFFFFFF8);
  v31 = v25 + (v23 & 0xFFFFFFFFFFFFFFF8);
  v166 = v165 - (v23 & 0xFFFFFFFFFFFFFFF8);
  v167 = (uint8x8_t *)(v26 + v165 + v24);
  v168 = (uint32x4_t *)(v13 + 4 * (v165 + v25));
  do
  {
    v169 = *v167++;
    v170 = vmovl_u8(v169);
    v171 = vsubw_u16(*v168, *(uint16x4_t *)v170.i8);
    result = vsubw_high_u16(v168[1], v170);
    *v168 = v171;
    v168[1] = result;
    v168 += 2;
    v166 += 8;
  }
  while (v166);
  if (v23 != v29)
    goto LABEL_29;
  return result;
}

void sub_1911B8990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::operator-<unsigned char>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<int>::copy((uint64_t)a1, a3);
    nitro::ndarray<int>::operator-=<unsigned char>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<int>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<int>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<unsigned char>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<int>::operator-=<unsigned char>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911B8CF0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911B8D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911B8DA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911B8D7CLL);
  JUMPOUT(0x1911B8D4CLL);
}

void sub_1911B8DB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911B8D8CLL);
  JUMPOUT(0x1911B8D54);
}

void sub_1911B8DC0()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911B8D64);
  JUMPOUT(0x1911B8D5CLL);
}

void nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911B9034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911B91D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911B91EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911B91E4);
}

uint64_t *nitro::ndarray<half>::operator-=<unsigned char>(uint64_t *a1, uint64_t *a2, float a3, double a4, int8x16_t a5, double a6, int8x16_t a7)
{
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v30;
  void *v31;
  void *v32;
  void *__p;
  void *v34;

  v8 = (char *)a1[2];
  v9 = (char *)a1[3];
  v10 = v9 - v8;
  if (v9 == v8 || !*a1)
    return a1;
  if ((unint64_t)(v10 - 8) < 8)
  {
    v11 = 1;
    v12 = (char *)a1[2];
    do
    {
LABEL_8:
      v18 = *(_QWORD *)v12;
      v12 += 8;
      v11 *= v18;
    }
    while (v12 != v9);
    goto LABEL_9;
  }
  v13 = ((unint64_t)(v10 - 8) >> 3) + 1;
  v12 = &v8[8 * (v13 & 0x3FFFFFFFFFFFFFFELL)];
  v14 = v8 + 8;
  v15 = 1;
  v16 = v13 & 0x3FFFFFFFFFFFFFFELL;
  v17 = 1;
  do
  {
    v15 *= *(v14 - 1);
    v17 *= *v14;
    v14 += 2;
    v16 -= 2;
  }
  while (v16);
  v11 = v17 * v15;
  if (v13 != (v13 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v11)
  {
    v19 = v10 >> 3;
    v20 = (_QWORD *)a2[2];
    if (v19 != (a2[3] - (uint64_t)v20) >> 3)
      goto LABEL_19;
    v21 = v19 <= 1 ? 1 : v19;
    if (*(_QWORD *)v8 != *v20)
      goto LABEL_19;
    v22 = 1;
    do
    {
      v23 = v22;
      if (v21 == v22)
        break;
      v24 = *(_QWORD *)&v8[8 * v22];
      v25 = v20[v22++];
    }
    while (v24 == v25);
    if (v23 >= v19)
    {
      nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(a1, a2, a3, a4, a5, a6, a7);
    }
    else
    {
LABEL_19:
      nitro::ndarray<half>::operator-<unsigned char>(a1, a2, &v30);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v30);
      if (__p)
      {
        v34 = __p;
        operator delete(__p);
      }
      if (v31)
      {
        v32 = v31;
        operator delete(v31);
      }
      v26 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
      if (*((_QWORD *)&v30 + 1))
      {
        v27 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
  }
  return a1;
}

void nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(uint64_t *a1, uint64_t *a2, float _S0, double a4, int8x16_t a5, double a6, int8x16_t _Q4)
{
  char *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  __int16 *v40;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  float16x4_t *v59;
  uint64_t v60;
  float16x4_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unsigned __int8 *v74;
  uint64_t v75;
  __int16 *v76;
  float16x4_t *v79;
  uint64_t v80;
  unint64_t v81;
  int8x16_t v82;
  uint32x4_t v83;
  uint32x4_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  float16x4_t *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  float16x4_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  BOOL v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unsigned __int8 *v115;
  uint64_t v116;
  __int16 *v117;
  float16x4_t *v120;
  uint64_t v121;
  unint64_t v122;
  int8x16_t v123;
  uint32x4_t v124;
  uint32x4_t v125;
  _QWORD *v126;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  _QWORD *v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v165;
  int v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t *v171;
  float16x4_t *v172;
  unint64_t v173;
  int8x16_t *v174;
  float16x4_t *v175;
  unint64_t v176;
  int8x16_t v177;
  float16x8_t v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v187;

  v9 = (unint64_t *)a1[2];
  v8 = (char *)a1[3];
  v10 = (v8 - (char *)v9) >> 3;
  v11 = (_QWORD *)a2[2];
  if (v10 != (a2[3] - (uint64_t)v11) >> 3)
    goto LABEL_13;
  if (v8 == (char *)v9)
    return;
  v12 = v10 <= 1 ? 1 : (v8 - (char *)v9) >> 3;
  if (*v9 != *v11)
    goto LABEL_13;
  v13 = 1;
  do
  {
    v14 = v13;
    if (v12 == v13)
      break;
    v15 = v9[v13];
    v16 = v11[v13++];
  }
  while (v15 == v16);
  if (v14 < v10)
LABEL_13:
    nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1})::{lambda(void)#1}::operator()();
  v17 = v8 - (char *)v9;
  if (v8 == (char *)v9)
    return;
  v18 = *a1;
  if (!*a1)
    return;
  if (v17 - 8 < 8)
  {
    v19 = 1;
    v20 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v26 = *v20++;
      v19 *= v26;
    }
    while (v20 != (unint64_t *)v8);
    goto LABEL_21;
  }
  v21 = ((v17 - 8) >> 3) + 1;
  v20 = &v9[v21 & 0x3FFFFFFFFFFFFFFELL];
  v22 = v9 + 1;
  v23 = 1;
  v24 = v21 & 0x3FFFFFFFFFFFFFFELL;
  v25 = 1;
  do
  {
    v23 *= *(v22 - 1);
    v25 *= *v22;
    v22 += 2;
    v24 -= 2;
  }
  while (v24);
  v19 = v25 * v23;
  if (v21 != (v21 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v19)
    return;
  v27 = (uint64_t)v17 >> 3;
  if ((uint64_t)v17 >> 3 == 3)
  {
    v184 = *v9;
    if (!*v9)
      return;
    v85 = 0;
    v86 = a2[8];
    v87 = a1[8];
    v88 = v9[1];
    v89 = (uint64_t *)a1[5];
    v180 = (uint64_t *)a2[5];
    v182 = *v180;
    v183 = *v89;
    v185 = 2 * *v89;
    v179 = 2 * v87;
    v90 = (float16x4_t *)(v18 + 2 * v87);
    v181 = v87;
    while (!v88)
    {
LABEL_64:
      v87 += v183;
      v86 += v182;
      ++v85;
      v90 = (float16x4_t *)((char *)v90 + v185);
      if (v85 == v184)
        return;
    }
    v91 = 0;
    v92 = v9[2];
    v93 = *a2;
    v94 = a2[5];
    v95 = v89[1];
    v96 = 2 * v95;
    v97 = v180[1];
    v187 = v92 & 0xFFFFFFFFFFFFFFF0;
    v98 = v92 & 0xFFFFFFFFFFFFFFF8;
    v99 = v90;
    v100 = *a2;
    v101 = v86;
    v102 = v87;
    while (!v92)
    {
LABEL_67:
      v102 += v95;
      v101 += v97;
      ++v91;
      v100 += v97;
      v99 = (float16x4_t *)((char *)v99 + v96);
      if (v91 == v88)
        goto LABEL_64;
    }
    v103 = v89[2];
    v104 = *(_QWORD *)(v94 + 16);
    if (v92 < 8
      || (v103 == 1 ? (v105 = v104 == 1) : (v105 = 0),
          !v105
       || (v18 + v179 + v185 * v85 + v96 * v91 < v93 + v92 + v86 + v97 * v91
         ? (v106 = v93 + v101 >= v18 + v185 * v85 + 2 * (v181 + v92) + v96 * v91)
         : (v106 = 1),
           !v106)))
    {
      v113 = 0;
      v108 = v101;
      v112 = v102;
      goto LABEL_87;
    }
    if (v92 >= 0x10)
    {
      v120 = v99;
      v121 = v100;
      v122 = v92 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v123 = *(int8x16_t *)(v121 + v86);
        v124 = (uint32x4_t)vqtbl1q_s8(v123, (int8x16_t)xmmword_191A741A0);
        v125 = (uint32x4_t)vqtbl1q_s8(v123, (int8x16_t)xmmword_191A74190);
        _Q4 = (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(v120[2]), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v123, (int8x16_t)xmmword_191A741B0)))), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v120[2].i8), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v123, (int8x16_t)xmmword_191A741C0))));
        *(float16x8_t *)v120->i8 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(*v120), vcvtq_f32_u32(v125))), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v120->i8), vcvtq_f32_u32(v124)));
        *(int8x16_t *)v120[2].i8 = _Q4;
        v120 += 4;
        v121 += 16;
        v122 -= 16;
      }
      while (v122);
      if (v92 == v187)
        goto LABEL_67;
      v107 = v92 & 0xFFFFFFFFFFFFFFF0;
      if ((v92 & 8) == 0)
      {
        v112 = v102 + v187 * v103;
        v113 = v92 & 0xFFFFFFFFFFFFFFF0;
        v108 = v101 + v187 * v104;
LABEL_87:
        v114 = v92 - v113;
        v115 = (unsigned __int8 *)(v93 + v108);
        v116 = 2 * v103;
        v117 = (__int16 *)(v18 + 2 * v112);
        do
        {
          _Q4.i8[0] = *v115;
          _H5 = *v117;
          __asm { FCVT            S5, H5 }
          *(float *)_Q4.i32 = _S5 - (float)_Q4.u32[0];
          __asm { FCVT            H4, S4 }
          *v117 = _Q4.i16[0];
          v115 += v104;
          v117 = (__int16 *)((char *)v117 + v116);
          --v114;
        }
        while (v114);
        goto LABEL_67;
      }
    }
    else
    {
      v107 = 0;
    }
    v108 = v101 + v98 * v104;
    v109 = v107 - (v92 & 0xFFFFFFFFFFFFFFF8);
    v110 = v86 + v107;
    v111 = 2 * v107;
    v112 = v102 + v98 * v103;
    do
    {
      _Q4.i64[0] = *(_QWORD *)(v100 + v110);
      _Q4 = (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(*(float16x4_t *)((char *)v99 + v111)), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(_Q4, (int8x16_t)xmmword_191A74190)))), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)&v99->i8[v111]), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(_Q4, (int8x16_t)xmmword_191A741A0))));
      *(int8x16_t *)&v99->i8[v111] = _Q4;
      v110 += 8;
      v111 += 16;
      v109 += 8;
    }
    while (v109);
    v113 = v92 & 0xFFFFFFFFFFFFFFF8;
    if (v92 == v98)
      goto LABEL_67;
    goto LABEL_87;
  }
  if (v27 == 2)
  {
    v45 = *v9;
    if (!*v9)
      return;
    v46 = 0;
    v47 = a2[8];
    v48 = a1[8];
    v49 = v9[1];
    v50 = *a2;
    v51 = (uint64_t *)a2[5];
    v52 = (uint64_t *)a1[5];
    v53 = *v52;
    v54 = *v51;
    v55 = 2 * *v52;
    v56 = v47 + v49;
    v57 = v49 & 0xFFFFFFFFFFFFFFF0;
    v58 = v49 & 0xFFFFFFFFFFFFFFF8;
    v59 = (float16x4_t *)(v18 + 2 * v48);
    v60 = v18 + 2 * (v48 + v49);
    v61 = v59;
    while (!v49)
    {
LABEL_34:
      v48 += v53;
      v47 += v54;
      ++v46;
      v61 = (float16x4_t *)((char *)v61 + v55);
      if (v46 == v45)
        return;
    }
    v62 = v52[1];
    v63 = v51[1];
    if (v49 < 8
      || (v62 == 1 ? (_ZF = v63 == 1) : (_ZF = 0),
          !_ZF
       || ((unint64_t)v59 + v55 * v46 < v50 + v56 + v54 * v46
         ? (_CF = v50 + v47 >= (unint64_t)(v60 + v55 * v46))
         : (_CF = 1),
           !_CF)))
    {
      v72 = 0;
      v67 = v47;
      v71 = v48;
      goto LABEL_54;
    }
    if (v49 >= 0x10)
    {
      v79 = v61;
      v80 = v50;
      v81 = v49 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v82 = *(int8x16_t *)(v80 + v47);
        v83 = (uint32x4_t)vqtbl1q_s8(v82, (int8x16_t)xmmword_191A741A0);
        v84 = (uint32x4_t)vqtbl1q_s8(v82, (int8x16_t)xmmword_191A74190);
        _Q4 = (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(v79[2]), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v82, (int8x16_t)xmmword_191A741B0)))), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v79[2].i8), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v82, (int8x16_t)xmmword_191A741C0))));
        *(float16x8_t *)v79->i8 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(*v79), vcvtq_f32_u32(v84))), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v79->i8), vcvtq_f32_u32(v83)));
        *(int8x16_t *)v79[2].i8 = _Q4;
        v79 += 4;
        v80 += 16;
        v81 -= 16;
      }
      while (v81);
      if (v49 == v57)
        goto LABEL_34;
      v66 = v49 & 0xFFFFFFFFFFFFFFF0;
      if ((v49 & 8) == 0)
      {
        v71 = v48 + v57 * v62;
        v72 = v49 & 0xFFFFFFFFFFFFFFF0;
        v67 = v47 + v57 * v63;
LABEL_54:
        v73 = v49 - v72;
        v74 = (unsigned __int8 *)(v50 + v67);
        v75 = 2 * v62;
        v76 = (__int16 *)(v18 + 2 * v71);
        do
        {
          _Q4.i8[0] = *v74;
          _H5 = *v76;
          __asm { FCVT            S5, H5 }
          *(float *)_Q4.i32 = _S5 - (float)_Q4.u32[0];
          __asm { FCVT            H4, S4 }
          *v76 = _Q4.i16[0];
          v74 += v63;
          v76 = (__int16 *)((char *)v76 + v75);
          --v73;
        }
        while (v73);
        goto LABEL_34;
      }
    }
    else
    {
      v66 = 0;
    }
    v67 = v47 + v58 * v63;
    v68 = v66 - (v49 & 0xFFFFFFFFFFFFFFF8);
    v69 = v50 + v66;
    v70 = 2 * v66;
    v71 = v48 + v58 * v62;
    do
    {
      _Q4.i64[0] = *(_QWORD *)(v69 + v47);
      _Q4 = (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(*(float16x4_t *)((char *)v61 + v70)), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(_Q4, (int8x16_t)xmmword_191A74190)))), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)&v61->i8[v70]), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(_Q4, (int8x16_t)xmmword_191A741A0))));
      *(int8x16_t *)&v61->i8[v70] = _Q4;
      v69 += 8;
      v70 += 16;
      v68 += 8;
    }
    while (v68);
    v72 = v49 & 0xFFFFFFFFFFFFFFF8;
    if (v49 == v58)
      goto LABEL_34;
    goto LABEL_54;
  }
  if (v27 != 1)
  {
    if ((v17 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v126 = operator new(v17);
    bzero(v126, v17 & 0xFFFFFFFFFFFFFFF8);
    v128 = *a2;
    if (v17 >> 3 <= 1)
      v129 = 1;
    else
      v129 = v17 >> 3;
    v130 = a2[5];
    v131 = a2[8];
    v132 = v129 & 0x1FFFFFFFFFFFFFFELL;
    v133 = a1[5];
    while (v129 >= 2)
    {
      v136 = 0;
      v137 = 0;
      v138 = v129 & 0x1FFFFFFFFFFFFFFELL;
      v139 = (_QWORD *)(v133 + 8);
      v140 = v126 + 1;
      do
      {
        v136 += *(v139 - 1) * *(v140 - 1);
        v137 += *v139 * *v140;
        v140 += 2;
        v139 += 2;
        v138 -= 2;
      }
      while (v138);
      v134 = v137 + v136;
      v135 = v129 & 0x1FFFFFFFFFFFFFFELL;
      if (v129 != v132)
        goto LABEL_105;
LABEL_107:
      if (v129 < 2)
      {
        v148 = 0;
        v149 = 0;
LABEL_112:
        v155 = v129 - v149;
        v156 = v149;
        v157 = (uint64_t *)(v130 + 8 * v149);
        v158 = &v126[v156];
        do
        {
          v160 = *v158++;
          v159 = v160;
          v161 = *v157++;
          v148 += v161 * v159;
          --v155;
        }
        while (v155);
        goto LABEL_114;
      }
      v150 = 0;
      v151 = 0;
      v152 = v129 & 0x1FFFFFFFFFFFFFFELL;
      v153 = (_QWORD *)(v130 + 8);
      v154 = v126 + 1;
      do
      {
        v150 += *(v153 - 1) * *(v154 - 1);
        v151 += *v153 * *v154;
        v154 += 2;
        v153 += 2;
        v152 -= 2;
      }
      while (v152);
      v148 = v151 + v150;
      v149 = v129 & 0x1FFFFFFFFFFFFFFELL;
      if (v129 != v132)
        goto LABEL_112;
LABEL_114:
      LOBYTE(_S0) = *(_BYTE *)(v128 + v131 + v148);
      v162 = 2 * v134;
      _H1 = *(_WORD *)(v18 + v162);
      __asm { FCVT            S1, H1 }
      _S0 = _S1 - (float)LODWORD(_S0);
      __asm { FCVT            H0, S0 }
      *(_WORD *)(v18 + v162) = LOWORD(_S0);
      if ((int)(v17 >> 3) >= 1)
      {
        v165 = (v17 >> 3) + 1;
        v166 = v17 >> 3;
        while (1)
        {
          v167 = (v165 - 2);
          v168 = v126[v167] + 1;
          v126[v167] = v168;
          if (v168 < v9[v167])
            break;
          v126[(v165 - 2)] = 0;
          --v166;
          if ((unint64_t)--v165 <= 1)
            goto LABEL_120;
        }
        if (v166 > 0)
          continue;
      }
LABEL_120:
      operator delete(v126);
      return;
    }
    v134 = 0;
    v135 = 0;
LABEL_105:
    v141 = v129 - v135;
    v142 = v135;
    v143 = (uint64_t *)(v133 + 8 * v135);
    v144 = &v126[v142];
    do
    {
      v146 = *v144++;
      v145 = v146;
      v147 = *v143++;
      v134 += v147 * v145;
      --v141;
    }
    while (v141);
    goto LABEL_107;
  }
  v28 = *v9;
  if (!*v9)
    return;
  v29 = a2[8];
  v30 = a1[8];
  v31 = *a2;
  v32 = *(_QWORD *)a1[5];
  v33 = *(_QWORD *)a2[5];
  if (v28 < 8)
    goto LABEL_27;
  v34 = 0;
  if (v32 != 1 || v33 != 1)
    goto LABEL_28;
  if (v18 + 2 * v30 < v31 + v28 + v29 && v31 + v29 < v18 + 2 * (v28 + v30))
  {
LABEL_27:
    v34 = 0;
LABEL_28:
    v35 = a2[8];
    v36 = a1[8];
    goto LABEL_29;
  }
  if (v28 >= 0x10)
  {
    v34 = v28 & 0xFFFFFFFFFFFFFFF0;
    v174 = (int8x16_t *)(v31 + v29);
    v175 = (float16x4_t *)(v18 + 2 * v30);
    _S0 = NAN;
    a5.i64[1] = 0xFFFFFF0FFFFFFF0ELL;
    v176 = v28 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v177 = *v174++;
      v178 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(v175[2]), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v177, (int8x16_t)xmmword_191A741B0)))), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v175[2].i8), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v177, (int8x16_t)xmmword_191A741C0))));
      *(float16x8_t *)v175->i8 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(*v175), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v177, (int8x16_t)xmmword_191A74190)))), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v175->i8), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v177, (int8x16_t)xmmword_191A741A0))));
      *(float16x8_t *)v175[2].i8 = v178;
      v175 += 4;
      v176 -= 16;
    }
    while (v176);
    if (v28 == v34)
      return;
    if ((v28 & 8) == 0)
    {
      v36 = v30 + v34;
      v35 = v29 + v34;
LABEL_29:
      v37 = v28 - v34;
      v38 = (_BYTE *)(v31 + v35);
      v39 = 2 * v32;
      v40 = (__int16 *)(v18 + 2 * v36);
      do
      {
        LOBYTE(_S0) = *v38;
        _H1 = *v40;
        __asm { FCVT            S1, H1 }
        _S0 = _S1 - (float)LODWORD(_S0);
        __asm { FCVT            H0, S0 }
        *v40 = LOWORD(_S0);
        v38 += v33;
        v40 = (__int16 *)((char *)v40 + v39);
        --v37;
      }
      while (v37);
      return;
    }
  }
  else
  {
    v34 = 0;
  }
  v169 = v34;
  v34 = v28 & 0xFFFFFFFFFFFFFFF8;
  v35 = v29 + (v28 & 0xFFFFFFFFFFFFFFF8);
  v36 = v30 + (v28 & 0xFFFFFFFFFFFFFFF8);
  v170 = v169 - (v28 & 0xFFFFFFFFFFFFFFF8);
  v171 = (unint64_t *)(v31 + v169 + v29);
  v172 = (float16x4_t *)(v18 + 2 * (v169 + v30));
  _S0 = NAN;
  do
  {
    v173 = *v171++;
    a5.i64[0] = v173;
    a5 = (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(*v172), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_191A74190)))), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v172->i8), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_191A741A0))));
    *(int8x16_t *)v172->i8 = a5;
    v172 += 2;
    v170 += 8;
  }
  while (v170);
  if (v28 != v34)
    goto LABEL_29;
}

void sub_1911B9DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::operator-<unsigned char>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<half>::copy((uint64_t)a1, a3);
    nitro::ndarray<half>::operator-=<unsigned char>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<half>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<half>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<unsigned char>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<half>::operator-=<unsigned char>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911BA124(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911BA138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911BA1D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911BA1B0);
  JUMPOUT(0x1911BA180);
}

void sub_1911BA1E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911BA1C0);
  JUMPOUT(0x1911BA188);
}

void sub_1911BA1F4()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911BA198);
  JUMPOUT(0x1911BA190);
}

void nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911BA468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911BA60C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911BA620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911BA618);
}

uint64_t *nitro::ndarray<float>::operator-=<unsigned char>(uint64_t *a1, uint64_t *a2, float a3, double a4, int8x16_t a5, double a6, int8x16_t a7)
{
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v30;
  void *v31;
  void *v32;
  void *__p;
  void *v34;

  v8 = (char *)a1[2];
  v9 = (char *)a1[3];
  v10 = v9 - v8;
  if (v9 == v8 || !*a1)
    return a1;
  if ((unint64_t)(v10 - 8) < 8)
  {
    v11 = 1;
    v12 = (char *)a1[2];
    do
    {
LABEL_8:
      v18 = *(_QWORD *)v12;
      v12 += 8;
      v11 *= v18;
    }
    while (v12 != v9);
    goto LABEL_9;
  }
  v13 = ((unint64_t)(v10 - 8) >> 3) + 1;
  v12 = &v8[8 * (v13 & 0x3FFFFFFFFFFFFFFELL)];
  v14 = v8 + 8;
  v15 = 1;
  v16 = v13 & 0x3FFFFFFFFFFFFFFELL;
  v17 = 1;
  do
  {
    v15 *= *(v14 - 1);
    v17 *= *v14;
    v14 += 2;
    v16 -= 2;
  }
  while (v16);
  v11 = v17 * v15;
  if (v13 != (v13 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v11)
  {
    v19 = v10 >> 3;
    v20 = (_QWORD *)a2[2];
    if (v19 != (a2[3] - (uint64_t)v20) >> 3)
      goto LABEL_19;
    v21 = v19 <= 1 ? 1 : v19;
    if (*(_QWORD *)v8 != *v20)
      goto LABEL_19;
    v22 = 1;
    do
    {
      v23 = v22;
      if (v21 == v22)
        break;
      v24 = *(_QWORD *)&v8[8 * v22];
      v25 = v20[v22++];
    }
    while (v24 == v25);
    if (v23 >= v19)
    {
      nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(a1, a2, a3, a4, a5, a6, a7);
    }
    else
    {
LABEL_19:
      nitro::ndarray<float>::operator-<unsigned char>(a1, a2, &v30);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v30);
      if (__p)
      {
        v34 = __p;
        operator delete(__p);
      }
      if (v31)
      {
        v32 = v31;
        operator delete(v31);
      }
      v26 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
      if (*((_QWORD *)&v30 + 1))
      {
        v27 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
  }
  return a1;
}

void nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(uint64_t *a1, uint64_t *a2, float a3, double a4, int8x16_t a5, double a6, int8x16_t a7)
{
  char *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  float *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  float32x4_t *v55;
  uint64_t v56;
  float32x4_t *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  BOOL v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  float32x4_t v69;
  unint64_t v70;
  unint64_t v71;
  unsigned __int8 *v72;
  uint64_t v73;
  float *v74;
  float32x4_t *v75;
  uint64_t v76;
  unint64_t v77;
  int8x16_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  float32x4_t *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  float32x4_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  BOOL v104;
  BOOL v105;
  unint64_t v106;
  uint64_t v107;
  float32x4_t *v108;
  uint64_t v109;
  unint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  float32x4_t v120;
  unint64_t v121;
  unint64_t v122;
  unsigned __int8 *v123;
  uint64_t v124;
  float *v125;
  float32x4_t *v126;
  uint64_t v127;
  unint64_t v128;
  int8x16_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  _QWORD *v133;
  float v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t *v176;
  float32x4_t *v177;
  unint64_t v178;
  float32x4_t v179;
  int8x16_t *v180;
  float32x4_t *v181;
  unint64_t v182;
  int8x16_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v196;
  unint64_t v197;

  v9 = (unint64_t *)a1[2];
  v8 = (char *)a1[3];
  v10 = (v8 - (char *)v9) >> 3;
  v11 = (_QWORD *)a2[2];
  if (v10 != (a2[3] - (uint64_t)v11) >> 3)
    goto LABEL_13;
  if (v8 == (char *)v9)
    return;
  v12 = v10 <= 1 ? 1 : (v8 - (char *)v9) >> 3;
  if (*v9 != *v11)
    goto LABEL_13;
  v13 = 1;
  do
  {
    v14 = v13;
    if (v12 == v13)
      break;
    v15 = v9[v13];
    v16 = v11[v13++];
  }
  while (v15 == v16);
  if (v14 < v10)
LABEL_13:
    nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1})::{lambda(void)#1}::operator()();
  v17 = v8 - (char *)v9;
  if (v8 == (char *)v9)
    return;
  v18 = *a1;
  if (!*a1)
    return;
  if (v17 - 8 < 8)
  {
    v19 = 1;
    v20 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v26 = *v20++;
      v19 *= v26;
    }
    while (v20 != (unint64_t *)v8);
    goto LABEL_21;
  }
  v21 = ((v17 - 8) >> 3) + 1;
  v20 = &v9[v21 & 0x3FFFFFFFFFFFFFFELL];
  v22 = v9 + 1;
  v23 = 1;
  v24 = v21 & 0x3FFFFFFFFFFFFFFELL;
  v25 = 1;
  do
  {
    v23 *= *(v22 - 1);
    v25 *= *v22;
    v22 += 2;
    v24 -= 2;
  }
  while (v24);
  v19 = v25 * v23;
  if (v21 != (v21 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v19)
    return;
  v27 = (uint64_t)v17 >> 3;
  if ((uint64_t)v17 >> 3 == 3)
  {
    v192 = *v9;
    if (!*v9)
      return;
    v82 = 0;
    v83 = a2[8];
    v84 = a1[8];
    v85 = v9[1];
    v86 = (uint64_t *)a1[5];
    v188 = (uint64_t *)a2[5];
    v190 = *v188;
    v191 = *v86;
    v194 = 4 * *v86;
    v187 = 4 * v84;
    v87 = (float32x4_t *)(v18 + 4 * v84);
    v189 = v84;
    while (!v85)
    {
LABEL_64:
      v84 += v191;
      v83 += v190;
      ++v82;
      v87 = (float32x4_t *)((char *)v87 + v194);
      if (v82 == v192)
        return;
    }
    v88 = 0;
    v89 = v187 + v194 * v82;
    v90 = v9[2];
    v91 = *a2;
    v92 = a2[5];
    v93 = v86[1];
    v94 = 4 * v93;
    v95 = v194 * v82 + 4 * (v189 + v90);
    v96 = v188[1];
    v97 = v90 + v83;
    v196 = v90 & 0xFFFFFFFFFFFFFFF8;
    v197 = v90 & 0xFFFFFFFFFFFFFFF0;
    v193 = v82;
    v98 = v87;
    v99 = *a2;
    v100 = v83;
    v101 = v84;
    while (!v90)
    {
LABEL_67:
      v101 += v93;
      v100 += v96;
      ++v88;
      v99 += v96;
      v98 = (float32x4_t *)((char *)v98 + v94);
      if (v88 == v85)
        goto LABEL_64;
    }
    v102 = v86[2];
    v103 = *(_QWORD *)(v92 + 16);
    if (v90 < 8
      || (v102 == 1 ? (v104 = v103 == 1) : (v104 = 0),
          !v104
       || (v18 + v89 + v94 * v88 < (unint64_t)(v91 + v97 + v96 * v88)
         ? (v105 = v91 + v100 >= (unint64_t)(v18 + v95 + v94 * v88))
         : (v105 = 1),
           !v105)))
    {
      v121 = 0;
      v114 = v100;
      v118 = v101;
      goto LABEL_87;
    }
    if (v90 >= 0x10)
    {
      v126 = v98;
      v127 = v99;
      v128 = v90 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v129 = *(int8x16_t *)(v127 + v83);
        v130 = *v126;
        v131 = vsubq_f32(v126[1], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_191A741A0)));
        v132 = vsubq_f32(v126[3], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_191A741C0)));
        v126[2] = vsubq_f32(v126[2], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_191A741B0)));
        v126[3] = v132;
        a7 = (int8x16_t)vsubq_f32(v130, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_191A74190)));
        *v126 = (float32x4_t)a7;
        v126[1] = v131;
        v126 += 4;
        v127 += 16;
        v128 -= 16;
      }
      while (v128);
      if (v90 == v197)
        goto LABEL_67;
      v106 = v90 & 0xFFFFFFFFFFFFFFF0;
      if ((v90 & 8) == 0)
      {
        v118 = v101 + v197 * v102;
        v121 = v90 & 0xFFFFFFFFFFFFFFF0;
        v114 = v100 + v197 * v103;
LABEL_87:
        v122 = v90 - v121;
        v123 = (unsigned __int8 *)(v91 + v114);
        v124 = 4 * v102;
        v125 = (float *)(v18 + 4 * v118);
        do
        {
          a7.i8[0] = *v123;
          *(float *)a7.i32 = *v125 - (float)a7.u32[0];
          *v125 = *(float *)a7.i32;
          v123 += v103;
          v125 = (float *)((char *)v125 + v124);
          --v122;
        }
        while (v122);
        goto LABEL_67;
      }
    }
    else
    {
      v106 = 0;
    }
    v107 = v84;
    v108 = v87;
    v109 = v97;
    v110 = v9;
    v111 = v18;
    v112 = v95;
    v113 = v89;
    v114 = v100 + v196 * v103;
    v115 = v106 - (v90 & 0xFFFFFFFFFFFFFFF8);
    v116 = v83 + v106;
    v117 = 4 * v106;
    v118 = v101 + v196 * v102;
    do
    {
      v119 = (uint64_t)v98 + v117;
      a7.i64[0] = *(_QWORD *)(v99 + v116);
      v120 = vsubq_f32(*(float32x4_t *)((char *)v98 + v117 + 16), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_191A741A0)));
      a7 = (int8x16_t)vsubq_f32(*(float32x4_t *)((char *)v98 + v117), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_191A74190)));
      *(int8x16_t *)v119 = a7;
      *(float32x4_t *)(v119 + 16) = v120;
      v116 += 8;
      v117 += 32;
      v115 += 8;
    }
    while (v115);
    v121 = v90 & 0xFFFFFFFFFFFFFFF8;
    v89 = v113;
    v95 = v112;
    v18 = v111;
    v9 = v110;
    v97 = v109;
    v87 = v108;
    v84 = v107;
    v82 = v193;
    if (v90 == v196)
      goto LABEL_67;
    goto LABEL_87;
  }
  if (v27 == 2)
  {
    v41 = *v9;
    if (!*v9)
      return;
    v42 = 0;
    v43 = a2[8];
    v44 = a1[8];
    v45 = v9[1];
    v46 = *a2;
    v47 = (uint64_t *)a2[5];
    v48 = (uint64_t *)a1[5];
    v49 = *v48;
    v50 = *v47;
    v51 = 4 * *v48;
    v52 = v43 + v45;
    v53 = v45 & 0xFFFFFFFFFFFFFFF0;
    v54 = v45 & 0xFFFFFFFFFFFFFFF8;
    v55 = (float32x4_t *)(v18 + 4 * v44);
    v56 = v18 + 4 * (v44 + v45);
    v57 = v55;
    while (!v45)
    {
LABEL_34:
      v44 += v49;
      v43 += v50;
      ++v42;
      v57 = (float32x4_t *)((char *)v57 + v51);
      if (v42 == v41)
        return;
    }
    v58 = v48[1];
    v59 = v47[1];
    if (v45 < 8
      || (v58 == 1 ? (v60 = v59 == 1) : (v60 = 0),
          !v60
       || ((unint64_t)v55 + v51 * v42 < v46 + v52 + v50 * v42
         ? (v61 = v46 + v43 >= (unint64_t)(v56 + v51 * v42))
         : (v61 = 1),
           !v61)))
    {
      v70 = 0;
      v63 = v43;
      v67 = v44;
      goto LABEL_54;
    }
    if (v45 >= 0x10)
    {
      v75 = v57;
      v76 = v46;
      v77 = v45 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v78 = *(int8x16_t *)(v76 + v43);
        v79 = *v75;
        v80 = vsubq_f32(v75[1], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_191A741A0)));
        v81 = vsubq_f32(v75[3], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_191A741C0)));
        v75[2] = vsubq_f32(v75[2], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_191A741B0)));
        v75[3] = v81;
        a7 = (int8x16_t)vsubq_f32(v79, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_191A74190)));
        *v75 = (float32x4_t)a7;
        v75[1] = v80;
        v75 += 4;
        v76 += 16;
        v77 -= 16;
      }
      while (v77);
      if (v45 == v53)
        goto LABEL_34;
      v62 = v45 & 0xFFFFFFFFFFFFFFF0;
      if ((v45 & 8) == 0)
      {
        v67 = v44 + v53 * v58;
        v70 = v45 & 0xFFFFFFFFFFFFFFF0;
        v63 = v43 + v53 * v59;
LABEL_54:
        v71 = v45 - v70;
        v72 = (unsigned __int8 *)(v46 + v63);
        v73 = 4 * v58;
        v74 = (float *)(v18 + 4 * v67);
        do
        {
          a7.i8[0] = *v72;
          *(float *)a7.i32 = *v74 - (float)a7.u32[0];
          *v74 = *(float *)a7.i32;
          v72 += v59;
          v74 = (float *)((char *)v74 + v73);
          --v71;
        }
        while (v71);
        goto LABEL_34;
      }
    }
    else
    {
      v62 = 0;
    }
    v63 = v43 + v54 * v59;
    v64 = v62 - (v45 & 0xFFFFFFFFFFFFFFF8);
    v65 = v46 + v62;
    v66 = 4 * v62;
    v67 = v44 + v54 * v58;
    do
    {
      v68 = (uint64_t)v57 + v66;
      a7.i64[0] = *(_QWORD *)(v65 + v43);
      v69 = vsubq_f32(*(float32x4_t *)((char *)v57 + v66 + 16), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_191A741A0)));
      a7 = (int8x16_t)vsubq_f32(*(float32x4_t *)((char *)v57 + v66), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_191A74190)));
      *(int8x16_t *)v68 = a7;
      *(float32x4_t *)(v68 + 16) = v69;
      v65 += 8;
      v66 += 32;
      v64 += 8;
    }
    while (v64);
    v70 = v45 & 0xFFFFFFFFFFFFFFF8;
    if (v45 == v54)
      goto LABEL_34;
    goto LABEL_54;
  }
  if (v27 != 1)
  {
    if ((v17 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v133 = operator new(v17);
    bzero(v133, v17 & 0xFFFFFFFFFFFFFFF8);
    v135 = *a2;
    if (v17 >> 3 <= 1)
      v136 = 1;
    else
      v136 = v17 >> 3;
    v137 = a2[5];
    v138 = a2[8];
    v139 = v136 & 0x1FFFFFFFFFFFFFFELL;
    v140 = a1[5];
    while (v136 >= 2)
    {
      v143 = 0;
      v144 = 0;
      v145 = v136 & 0x1FFFFFFFFFFFFFFELL;
      v146 = (_QWORD *)(v140 + 8);
      v147 = v133 + 1;
      do
      {
        v143 += *(v146 - 1) * *(v147 - 1);
        v144 += *v146 * *v147;
        v147 += 2;
        v146 += 2;
        v145 -= 2;
      }
      while (v145);
      v141 = v144 + v143;
      v142 = v136 & 0x1FFFFFFFFFFFFFFELL;
      if (v136 != v139)
        goto LABEL_105;
LABEL_107:
      if (v136 < 2)
      {
        v155 = 0;
        v156 = 0;
LABEL_112:
        v162 = v136 - v156;
        v163 = v156;
        v164 = (uint64_t *)(v137 + 8 * v156);
        v165 = &v133[v163];
        do
        {
          v167 = *v165++;
          v166 = v167;
          v168 = *v164++;
          v155 += v168 * v166;
          --v162;
        }
        while (v162);
        goto LABEL_114;
      }
      v157 = 0;
      v158 = 0;
      v159 = v136 & 0x1FFFFFFFFFFFFFFELL;
      v160 = (_QWORD *)(v137 + 8);
      v161 = v133 + 1;
      do
      {
        v157 += *(v160 - 1) * *(v161 - 1);
        v158 += *v160 * *v161;
        v161 += 2;
        v160 += 2;
        v159 -= 2;
      }
      while (v159);
      v155 = v158 + v157;
      v156 = v136 & 0x1FFFFFFFFFFFFFFELL;
      if (v136 != v139)
        goto LABEL_112;
LABEL_114:
      LOBYTE(v134) = *(_BYTE *)(v135 + v138 + v155);
      v169 = 4 * v141;
      v134 = *(float *)(v18 + v169) - (float)LODWORD(v134);
      *(float *)(v18 + v169) = v134;
      if ((int)(v17 >> 3) >= 1)
      {
        v170 = (v17 >> 3) + 1;
        v171 = v17 >> 3;
        while (1)
        {
          v172 = (v170 - 2);
          v173 = v133[v172] + 1;
          v133[v172] = v173;
          if (v173 < v9[v172])
            break;
          v133[(v170 - 2)] = 0;
          --v171;
          if ((unint64_t)--v170 <= 1)
            goto LABEL_120;
        }
        if (v171 > 0)
          continue;
      }
LABEL_120:
      operator delete(v133);
      return;
    }
    v141 = 0;
    v142 = 0;
LABEL_105:
    v148 = v136 - v142;
    v149 = v142;
    v150 = (uint64_t *)(v140 + 8 * v142);
    v151 = &v133[v149];
    do
    {
      v153 = *v151++;
      v152 = v153;
      v154 = *v150++;
      v141 += v154 * v152;
      --v148;
    }
    while (v148);
    goto LABEL_107;
  }
  v28 = *v9;
  if (!*v9)
    return;
  v29 = a2[8];
  v30 = a1[8];
  v31 = *a2;
  v32 = *(_QWORD *)a1[5];
  v33 = *(_QWORD *)a2[5];
  if (v28 < 8)
    goto LABEL_27;
  v34 = 0;
  if (v32 != 1 || v33 != 1)
    goto LABEL_28;
  if (v18 + 4 * v30 < v31 + v28 + v29 && v31 + v29 < v18 + 4 * (v28 + v30))
  {
LABEL_27:
    v34 = 0;
LABEL_28:
    v35 = a2[8];
    v36 = a1[8];
    goto LABEL_29;
  }
  if (v28 >= 0x10)
  {
    v34 = v28 & 0xFFFFFFFFFFFFFFF0;
    v180 = (int8x16_t *)(v31 + v29);
    v181 = (float32x4_t *)(v18 + 4 * v30);
    a3 = NAN;
    a5.i64[1] = 0xFFFFFF0FFFFFFF0ELL;
    v182 = v28 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v183 = *v180++;
      v184 = *v181;
      v185 = vsubq_f32(v181[1], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v183, (int8x16_t)xmmword_191A741A0)));
      v186 = vsubq_f32(v181[3], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v183, (int8x16_t)xmmword_191A741C0)));
      v181[2] = vsubq_f32(v181[2], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v183, (int8x16_t)xmmword_191A741B0)));
      v181[3] = v186;
      *v181 = vsubq_f32(v184, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v183, (int8x16_t)xmmword_191A74190)));
      v181[1] = v185;
      v181 += 4;
      v182 -= 16;
    }
    while (v182);
    if (v28 == v34)
      return;
    if ((v28 & 8) == 0)
    {
      v36 = v30 + v34;
      v35 = v29 + v34;
LABEL_29:
      v37 = v28 - v34;
      v38 = (_BYTE *)(v31 + v35);
      v39 = 4 * v32;
      v40 = (float *)(v18 + 4 * v36);
      do
      {
        LOBYTE(a3) = *v38;
        a3 = *v40 - (float)LODWORD(a3);
        *v40 = a3;
        v38 += v33;
        v40 = (float *)((char *)v40 + v39);
        --v37;
      }
      while (v37);
      return;
    }
  }
  else
  {
    v34 = 0;
  }
  v174 = v34;
  v34 = v28 & 0xFFFFFFFFFFFFFFF8;
  v35 = v29 + (v28 & 0xFFFFFFFFFFFFFFF8);
  v36 = v30 + (v28 & 0xFFFFFFFFFFFFFFF8);
  v175 = v174 - (v28 & 0xFFFFFFFFFFFFFFF8);
  v176 = (unint64_t *)(v31 + v174 + v29);
  v177 = (float32x4_t *)(v18 + 4 * (v174 + v30));
  a3 = NAN;
  do
  {
    v178 = *v176++;
    a5.i64[0] = v178;
    v179 = vsubq_f32(v177[1], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_191A741A0)));
    a5 = (int8x16_t)vsubq_f32(*v177, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_191A74190)));
    *v177 = (float32x4_t)a5;
    v177[1] = v179;
    v177 += 2;
    v175 += 8;
  }
  while (v175);
  if (v28 != v34)
    goto LABEL_29;
}

void sub_1911BB1A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::operator-<unsigned char>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<float>::copy((uint64_t)a1, a3);
    nitro::ndarray<float>::operator-=<unsigned char>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<float>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<float>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<unsigned char>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<float>::operator-=<unsigned char>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911BB504(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911BB518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911BB5B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911BB590);
  JUMPOUT(0x1911BB560);
}

void sub_1911BB5C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911BB5A0);
  JUMPOUT(0x1911BB568);
}

void sub_1911BB5D4()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911BB578);
  JUMPOUT(0x1911BB570);
}

void nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911BB848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911BB9EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911BBA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911BB9F8);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1911BBD30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1911BBD98(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

_QWORD *nitro::ndarray<unsigned char>::operator-=<int>(_QWORD *a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;

  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  v5 = v4 - v3;
  if (v4 == v3 || !*a1)
    return a1;
  if ((unint64_t)(v5 - 8) < 8)
  {
    v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6)
  {
    v14 = v5 >> 3;
    v15 = (_QWORD *)a2[2];
    if (v14 != (uint64_t)(a2[3] - (_QWORD)v15) >> 3)
      goto LABEL_19;
    v16 = v14 <= 1 ? 1 : v14;
    if (*(_QWORD *)v3 != *v15)
      goto LABEL_19;
    v17 = 1;
    do
    {
      v18 = v17;
      if (v16 == v17)
        break;
      v19 = *(_QWORD *)&v3[8 * v17];
      v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 >= v14)
    {
      nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(a1, a2);
    }
    else
    {
LABEL_19:
      nitro::ndarray<unsigned char>::operator-<int>(a1, a2, &v25);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v25);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  return a1;
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;

  v4 = (char *)a1[2];
  v5 = (char *)a1[3];
  v6 = (v5 - v4) >> 3;
  v7 = (_QWORD *)a2[2];
  if (v6 != (uint64_t)(a2[3] - (_QWORD)v7) >> 3)
    goto LABEL_13;
  if (v5 == v4)
    return;
  v8 = v6 <= 1 ? 1 : (v5 - v4) >> 3;
  if (*(_QWORD *)v4 != *v7)
    goto LABEL_13;
  v9 = 1;
  do
  {
    v10 = v9;
    if (v8 == v9)
      break;
    v11 = *(_QWORD *)&v4[8 * v9];
    v12 = v7[v9++];
  }
  while (v11 == v12);
  if (v10 < v6)
LABEL_13:
    nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1})::{lambda(void)#1}::operator()();
  v13 = v5 - v4;
  if (v5 == v4 || !*a1)
    return;
  if ((unint64_t)(v13 - 8) < 8)
  {
    v14 = 1;
    v15 = (char *)a1[2];
    do
    {
LABEL_20:
      v21 = *(_QWORD *)v15;
      v15 += 8;
      v14 *= v21;
    }
    while (v15 != v5);
    goto LABEL_21;
  }
  v16 = ((unint64_t)(v13 - 8) >> 3) + 1;
  v15 = &v4[8 * (v16 & 0x3FFFFFFFFFFFFFFELL)];
  v17 = v4 + 8;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = v13 >> 3;
  if (v13 >> 3 == 3)
  {
    v35 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      v36 = 0;
      v37 = a2[8];
      v38 = a1[8];
      do
      {
        if (*((_QWORD *)v4 + 1))
        {
          v39 = 0;
          v40 = v37;
          v41 = v38;
          do
          {
            if (*((_QWORD *)v4 + 2))
            {
              v44 = 0;
              v45 = v40;
              v46 = v41;
              do
              {
                *(_BYTE *)(*a1 + v46) -= *(_DWORD *)(*a2 + 4 * v45);
                v42 = (_QWORD *)a1[5];
                v46 += v42[2];
                v43 = (_QWORD *)a2[5];
                v45 += v43[2];
                ++v44;
                v4 = (char *)a1[2];
              }
              while (v44 < *((_QWORD *)v4 + 2));
            }
            else
            {
              v42 = (_QWORD *)a1[5];
              v43 = (_QWORD *)a2[5];
            }
            v41 += v42[1];
            v40 += v43[1];
            ++v39;
          }
          while (v39 < *((_QWORD *)v4 + 1));
          v35 = *(_QWORD *)v4;
        }
        else
        {
          v42 = (_QWORD *)a1[5];
          v43 = (_QWORD *)a2[5];
        }
        v38 += *v42;
        v37 += *v43;
        ++v36;
      }
      while (v36 < v35);
    }
  }
  else
  {
    if (v22 != 2)
    {
      if (v22 == 1)
      {
        if (*(_QWORD *)v4)
        {
          v23 = 0;
          v24 = a2[8];
          v25 = a1[8];
          do
          {
            *(_BYTE *)(*a1 + v25) -= *(_BYTE *)(*a2 + 4 * v24);
            v25 += *(_QWORD *)a1[5];
            v24 += *(_QWORD *)a2[5];
            ++v23;
          }
          while (v23 < *(_QWORD *)a1[2]);
        }
        return;
      }
      if (v13 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v47 = operator new(v13);
      bzero(v47, v13 & 0xFFFFFFFFFFFFFFF8);
      if (v22 <= 1)
        v48 = 1;
      else
        v48 = v13 >> 3;
      v49 = v48 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        v50 = a1[5];
        if (v48 < 2)
          break;
        v53 = 0;
        v54 = 0;
        v55 = (_QWORD *)(v50 + 8);
        v56 = v48 & 0xFFFFFFFFFFFFFFFELL;
        v57 = v47 + 1;
        do
        {
          v53 += *(v55 - 1) * *(v57 - 1);
          v54 += *v55 * *v57;
          v57 += 2;
          v55 += 2;
          v56 -= 2;
        }
        while (v56);
        v51 = v54 + v53;
        v52 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49)
          goto LABEL_60;
LABEL_62:
        v65 = a2[5];
        if (v48 < 2)
        {
          v66 = 0;
          v67 = 0;
LABEL_67:
          v73 = v48 - v67;
          v74 = v67;
          v75 = (uint64_t *)(v65 + v74 * 8);
          v76 = &v47[v74];
          do
          {
            v78 = *v76++;
            v77 = v78;
            v79 = *v75++;
            v66 += v79 * v77;
            --v73;
          }
          while (v73);
          goto LABEL_69;
        }
        v68 = 0;
        v69 = 0;
        v70 = (_QWORD *)(v65 + 8);
        v71 = v48 & 0xFFFFFFFFFFFFFFFELL;
        v72 = v47 + 1;
        do
        {
          v68 += *(v70 - 1) * *(v72 - 1);
          v69 += *v70 * *v72;
          v72 += 2;
          v70 += 2;
          v71 -= 2;
        }
        while (v71);
        v66 = v69 + v68;
        v67 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49)
          goto LABEL_67;
LABEL_69:
        *(_BYTE *)(*a1 + v51) -= *(_BYTE *)(*a2 + 4 * (a2[8] + v66));
        if ((int)((unint64_t)v13 >> 3) >= 1)
        {
          v80 = a1[2];
          v81 = ((unint64_t)v13 >> 3) + 1;
          v82 = (unint64_t)v13 >> 3;
          while (1)
          {
            v83 = (v81 - 2);
            v84 = v47[v83] + 1;
            v47[v83] = v84;
            if (v84 < *(_QWORD *)(v80 + v83 * 8))
              break;
            v47[(v81 - 2)] = 0;
            LODWORD(v82) = v82 - 1;
            if ((unint64_t)--v81 <= 1)
              goto LABEL_75;
          }
          if ((int)v82 > 0)
            continue;
        }
LABEL_75:
        operator delete(v47);
        return;
      }
      v51 = 0;
      v52 = 0;
LABEL_60:
      v58 = v48 - v52;
      v59 = v52;
      v60 = (uint64_t *)(v50 + v59 * 8);
      v61 = &v47[v59];
      do
      {
        v63 = *v61++;
        v62 = v63;
        v64 = *v60++;
        v51 += v64 * v62;
        --v58;
      }
      while (v58);
      goto LABEL_62;
    }
    v26 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      v27 = 0;
      v28 = a2[8];
      v29 = a1[8];
      do
      {
        if (*((_QWORD *)v4 + 1))
        {
          v32 = 0;
          v33 = v28;
          v34 = v29;
          do
          {
            *(_BYTE *)(*a1 + v34) -= *(_DWORD *)(*a2 + 4 * v33);
            v30 = (_QWORD *)a1[5];
            v34 += v30[1];
            v31 = (_QWORD *)a2[5];
            v33 += v31[1];
            ++v32;
            v4 = (char *)a1[2];
          }
          while (v32 < *((_QWORD *)v4 + 1));
          v26 = *(_QWORD *)v4;
        }
        else
        {
          v30 = (_QWORD *)a1[5];
          v31 = (_QWORD *)a2[5];
        }
        v29 += *v30;
        v28 += *v31;
        ++v27;
      }
      while (v27 < v26);
    }
  }
}

void sub_1911BC438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>::operator-<int>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<unsigned char>::copy((uint64_t)a1, a3);
    nitro::ndarray<unsigned char>::operator-=<int>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<unsigned char>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<unsigned char>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<int>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<unsigned char>::operator-=<int>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911BC798(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911BC7AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911BC848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911BC824);
  JUMPOUT(0x1911BC7F4);
}

void sub_1911BC858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911BC834);
  JUMPOUT(0x1911BC7FCLL);
}

void sub_1911BC868()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911BC80CLL);
  JUMPOUT(0x1911BC804);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911BCADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911BCC80(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911BCC94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911BCC8CLL);
}

uint64_t *nitro::ndarray<int>::operator-=<int>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;

  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  v5 = v4 - v3;
  if (v4 == v3 || !*a1)
    return a1;
  if ((unint64_t)(v5 - 8) < 8)
  {
    v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6)
  {
    v14 = v5 >> 3;
    v15 = (_QWORD *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3)
      goto LABEL_19;
    v16 = v14 <= 1 ? 1 : v14;
    if (*(_QWORD *)v3 != *v15)
      goto LABEL_19;
    v17 = 1;
    do
    {
      v18 = v17;
      if (v16 == v17)
        break;
      v19 = *(_QWORD *)&v3[8 * v17];
      v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 >= v14)
    {
      nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(a1, a2);
    }
    else
    {
LABEL_19:
      nitro::ndarray<int>::operator-<int>(a1, a2, &v25);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v25);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  return a1;
}

int32x4_t nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _DWORD *v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  int32x4_t *v66;
  int32x4_t *v67;
  unint64_t v68;
  int32x4_t result;
  int32x4_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int32x4_t *v88;
  int32x4_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  _DWORD *v98;
  uint64_t v99;
  uint64_t v100;
  _DWORD *v101;
  int32x4_t *v103;
  int32x4_t *v104;
  unint64_t v105;
  int32x4_t v106;
  _QWORD *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  unint64_t v145;
  int32x4_t *v146;
  int32x4_t *v147;
  unint64_t v148;
  int32x4_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v159;
  uint64_t v160;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return result;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return result;
  v160 = *a1;
  if (!*a1)
    return result;
  if (v12 - 8 < 8)
  {
    v13 = 1;
    v14 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v20 = *v14++;
      v13 *= v20;
    }
    while (v14 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v15 = ((v12 - 8) >> 3) + 1;
  v14 = &v4[v15 & 0x3FFFFFFFFFFFFFFELL];
  v16 = v4 + 1;
  v17 = 1;
  v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
  v19 = 1;
  do
  {
    v17 *= *(v16 - 1);
    v19 *= *v16;
    v16 += 2;
    v18 -= 2;
  }
  while (v18);
  v13 = v19 * v17;
  if (v15 != (v15 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v13)
    return result;
  v21 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v155 = *v4;
    if (!*v4)
      return result;
    v71 = 0;
    v72 = a2[8];
    v73 = a1[8];
    v74 = v4[1];
    v75 = (uint64_t *)a1[5];
    v152 = (uint64_t *)a2[5];
    v153 = *v152;
    v154 = *v75;
    v157 = 4 * *v75;
    v156 = 4 * *v152;
    v150 = 4 * v72;
    v151 = 4 * v73;
    v76 = 4 * v73 + v160 + 16;
    v77 = 4 * v72 + 16;
    while (!v74)
    {
LABEL_55:
      v73 += v154;
      v72 += v153;
      ++v71;
      v76 += v157;
      v77 += v156;
      if (v71 == v155)
        return result;
    }
    v78 = 0;
    v79 = v150 + v156 * v71;
    v80 = v4[2];
    v81 = *a2;
    v82 = v75[1];
    v83 = v152[1];
    v84 = 4 * v82;
    v159 = v151 + v157 * v71;
    v85 = 4 * v83;
    v86 = v80 & 0xFFFFFFFFFFFFFFF8;
    v87 = a2[5];
    v88 = (int32x4_t *)(*a2 + v77);
    v89 = (int32x4_t *)v76;
    v90 = v72;
    v91 = v73;
    while (!v80)
    {
LABEL_58:
      v91 += v82;
      v90 += v83;
      ++v78;
      v89 = (int32x4_t *)((char *)v89 + v84);
      v88 = (int32x4_t *)((char *)v88 + v85);
      if (v78 == v74)
        goto LABEL_55;
    }
    v92 = v75[2];
    v93 = *(_QWORD *)(v87 + 16);
    if (v80 >= 8)
    {
      v94 = 0;
      if (v92 != 1)
        goto LABEL_62;
      v95 = v90;
      v96 = v91;
      if (v93 != 1)
      {
LABEL_63:
        v97 = v80 - v94;
        v98 = (_DWORD *)(v81 + 4 * v95);
        v99 = 4 * v93;
        v100 = 4 * v92;
        v101 = (_DWORD *)(v160 + 4 * v96);
        do
        {
          *v101 -= *v98;
          v98 = (_DWORD *)((char *)v98 + v99);
          v101 = (_DWORD *)((char *)v101 + v100);
          --v97;
        }
        while (v97);
        goto LABEL_58;
      }
      if (v160 + v159 + v84 * v78 >= v81 + v79 + 4 * v80 + v85 * v78
        || v81 + v79 + v85 * v78 >= v160 + v159 + 4 * v80 + v84 * v78)
      {
        v95 = v90 + v86;
        v103 = v88;
        v104 = v89;
        v105 = v80 & 0xFFFFFFFFFFFFFFF8;
        v96 = v91 + v86;
        do
        {
          result = vsubq_s32(v104[-1], v103[-1]);
          v106 = vsubq_s32(*v104, *v103);
          v104[-1] = result;
          *v104 = v106;
          v104 += 2;
          v103 += 2;
          v105 -= 8;
        }
        while (v105);
        v94 = v80 & 0xFFFFFFFFFFFFFFF8;
        if (v80 == v86)
          goto LABEL_58;
        goto LABEL_63;
      }
    }
    v94 = 0;
LABEL_62:
    v95 = v90;
    v96 = v91;
    goto LABEL_63;
  }
  if (v21 == 2)
  {
    v36 = *v4;
    if (!*v4)
      return result;
    v37 = 0;
    v38 = a2[8];
    v39 = a1[8];
    v40 = v4[1];
    v41 = (uint64_t *)a2[5];
    v42 = (uint64_t *)a1[5];
    v43 = *v42;
    v44 = *v41;
    v45 = 4 * *v42;
    v46 = 4 * *v41;
    v47 = v40 & 0xFFFFFFFFFFFFFFF8;
    v48 = *a2;
    v49 = 4 * v39 + v160 + 16;
    v50 = 4 * v38 + *a2 + 16;
    v51 = v160 + 4 * v39;
    v52 = v160 + 4 * v39 + 4 * v40;
    v53 = *a2 + 4 * v38;
    v54 = *a2 + 4 * v38 + 4 * v40;
    while (!v40)
    {
LABEL_34:
      v39 += v43;
      v38 += v44;
      ++v37;
      v49 += v45;
      v50 += v46;
      if (v37 == v36)
        return result;
    }
    v55 = v42[1];
    v56 = v41[1];
    if (v40 >= 8)
    {
      v57 = 0;
      if (v55 != 1)
        goto LABEL_38;
      v58 = v38;
      v59 = v39;
      if (v56 != 1)
      {
LABEL_39:
        v60 = v40 - v57;
        v61 = (_DWORD *)(v48 + 4 * v58);
        v62 = 4 * v56;
        v63 = 4 * v55;
        v64 = (_DWORD *)(v160 + 4 * v59);
        do
        {
          *v64 -= *v61;
          v61 = (_DWORD *)((char *)v61 + v62);
          v64 = (_DWORD *)((char *)v64 + v63);
          --v60;
        }
        while (v60);
        goto LABEL_34;
      }
      if (v51 + v45 * v37 >= (unint64_t)(v54 + v46 * v37)
        || v53 + v46 * v37 >= (unint64_t)(v52 + v45 * v37))
      {
        v58 = v38 + v47;
        v66 = (int32x4_t *)v50;
        v67 = (int32x4_t *)v49;
        v68 = v40 & 0xFFFFFFFFFFFFFFF8;
        v59 = v39 + v47;
        do
        {
          result = vsubq_s32(v67[-1], v66[-1]);
          v70 = vsubq_s32(*v67, *v66);
          v67[-1] = result;
          *v67 = v70;
          v67 += 2;
          v66 += 2;
          v68 -= 8;
        }
        while (v68);
        v57 = v40 & 0xFFFFFFFFFFFFFFF8;
        if (v40 == v47)
          goto LABEL_34;
        goto LABEL_39;
      }
    }
    v57 = 0;
LABEL_38:
    v58 = v38;
    v59 = v39;
    goto LABEL_39;
  }
  if (v21 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v107 = operator new(v12);
    bzero(v107, v12 & 0xFFFFFFFFFFFFFFF8);
    v108 = *a2;
    if (v12 >> 3 <= 1)
      v109 = 1;
    else
      v109 = v12 >> 3;
    v110 = a2[5];
    v111 = a2[8];
    v112 = v109 & 0x1FFFFFFFFFFFFFFELL;
    v113 = a1[5];
    while (v109 >= 2)
    {
      v116 = 0;
      v117 = 0;
      v118 = v109 & 0x1FFFFFFFFFFFFFFELL;
      v119 = (_QWORD *)(v113 + 8);
      v120 = v107 + 1;
      do
      {
        v116 += *(v119 - 1) * *(v120 - 1);
        v117 += *v119 * *v120;
        v120 += 2;
        v119 += 2;
        v118 -= 2;
      }
      while (v118);
      v114 = v117 + v116;
      v115 = v109 & 0x1FFFFFFFFFFFFFFELL;
      if (v109 != v112)
        goto LABEL_87;
LABEL_89:
      if (v109 < 2)
      {
        v128 = 0;
        v129 = 0;
LABEL_94:
        v135 = v109 - v129;
        v136 = v129;
        v137 = (uint64_t *)(v110 + 8 * v129);
        v138 = &v107[v136];
        do
        {
          v140 = *v138++;
          v139 = v140;
          v141 = *v137++;
          v128 += v141 * v139;
          --v135;
        }
        while (v135);
        goto LABEL_96;
      }
      v130 = 0;
      v131 = 0;
      v132 = v109 & 0x1FFFFFFFFFFFFFFELL;
      v133 = (_QWORD *)(v110 + 8);
      v134 = v107 + 1;
      do
      {
        v130 += *(v133 - 1) * *(v134 - 1);
        v131 += *v133 * *v134;
        v134 += 2;
        v133 += 2;
        v132 -= 2;
      }
      while (v132);
      v128 = v131 + v130;
      v129 = v109 & 0x1FFFFFFFFFFFFFFELL;
      if (v109 != v112)
        goto LABEL_94;
LABEL_96:
      *(_DWORD *)(v160 + 4 * v114) -= *(_DWORD *)(v108 + 4 * (v111 + v128));
      if ((int)(v12 >> 3) >= 1)
      {
        v142 = (v12 >> 3) + 1;
        v143 = v12 >> 3;
        while (1)
        {
          v144 = (v142 - 2);
          v145 = v107[v144] + 1;
          v107[v144] = v145;
          if (v145 < v4[v144])
            break;
          v107[(v142 - 2)] = 0;
          --v143;
          if ((unint64_t)--v142 <= 1)
            goto LABEL_102;
        }
        if (v143 > 0)
          continue;
      }
LABEL_102:
      operator delete(v107);
      return result;
    }
    v114 = 0;
    v115 = 0;
LABEL_87:
    v121 = v109 - v115;
    v122 = v115;
    v123 = (uint64_t *)(v113 + 8 * v115);
    v124 = &v107[v122];
    do
    {
      v126 = *v124++;
      v125 = v126;
      v127 = *v123++;
      v114 += v127 * v125;
      --v121;
    }
    while (v121);
    goto LABEL_89;
  }
  v22 = *v4;
  if (!*v4)
    return result;
  v23 = a2[8];
  v24 = a1[8];
  v25 = *a2;
  v26 = *(_QWORD *)a1[5];
  v27 = *(_QWORD *)a2[5];
  if (v22 < 0xC)
    goto LABEL_27;
  v28 = 0;
  if (v26 != 1 || v27 != 1)
    goto LABEL_28;
  if (v160 + 4 * v24 < v25 + 4 * v22 + 4 * v23 && v25 + 4 * v23 < v160 + 4 * v22 + 4 * v24)
  {
LABEL_27:
    v28 = 0;
LABEL_28:
    v29 = a2[8];
    v30 = a1[8];
LABEL_29:
    v31 = v22 - v28;
    v32 = (_DWORD *)(v25 + 4 * v29);
    v33 = 4 * v27;
    v34 = 4 * v26;
    v35 = (_DWORD *)(v160 + 4 * v30);
    do
    {
      *v35 -= *v32;
      v32 = (_DWORD *)((char *)v32 + v33);
      v35 = (_DWORD *)((char *)v35 + v34);
      --v31;
    }
    while (v31);
    return result;
  }
  v28 = v22 & 0xFFFFFFFFFFFFFFF8;
  v29 = v23 + (v22 & 0xFFFFFFFFFFFFFFF8);
  v30 = v24 + (v22 & 0xFFFFFFFFFFFFFFF8);
  v146 = (int32x4_t *)(v25 + 4 * v23 + 16);
  v147 = (int32x4_t *)(v160 + 4 * v24 + 16);
  v148 = v22 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    result = vsubq_s32(v147[-1], v146[-1]);
    v149 = vsubq_s32(*v147, *v146);
    v147[-1] = result;
    *v147 = v149;
    v146 += 2;
    v147 += 2;
    v148 -= 8;
  }
  while (v148);
  if (v22 != v28)
    goto LABEL_29;
  return result;
}

void sub_1911BD61C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::operator-<int>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<int>::copy((uint64_t)a1, a3);
    nitro::ndarray<int>::operator-=<int>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<int>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<int>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<int>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<int>::operator-=<int>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911BD97C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911BD990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911BDA2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911BDA08);
  JUMPOUT(0x1911BD9D8);
}

void sub_1911BDA3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911BDA18);
  JUMPOUT(0x1911BD9E0);
}

void sub_1911BDA4C()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911BD9F0);
  JUMPOUT(0x1911BD9E8);
}

void nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911BDCC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911BDE64(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911BDE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911BDE70);
}

uint64_t *nitro::ndarray<half>::operator-=<int>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;

  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  v5 = v4 - v3;
  if (v4 == v3 || !*a1)
    return a1;
  if ((unint64_t)(v5 - 8) < 8)
  {
    v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6)
  {
    v14 = v5 >> 3;
    v15 = (_QWORD *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3)
      goto LABEL_19;
    v16 = v14 <= 1 ? 1 : v14;
    if (*(_QWORD *)v3 != *v15)
      goto LABEL_19;
    v17 = 1;
    do
    {
      v18 = v17;
      if (v16 == v17)
        break;
      v19 = *(_QWORD *)&v3[8 * v17];
      v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 >= v14)
    {
      nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(a1, a2);
    }
    else
    {
LABEL_19:
      nitro::ndarray<half>::operator-<int>(a1, a2, &v25);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v25);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  return a1;
}

void nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  __int16 *v34;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int *v63;
  uint64_t v64;
  uint64_t v65;
  __int16 *v66;
  int32x4_t *v70;
  float16x4_t *v71;
  unint64_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  float16x8_t v77;
  float16x8_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  int32x4_t *v92;
  uint64_t v93;
  float16x4_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  int *v104;
  uint64_t v105;
  uint64_t v106;
  __int16 *v107;
  int32x4_t *v111;
  float16x4_t *v112;
  unint64_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  float16x8_t v118;
  float16x8_t v119;
  _QWORD *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v159;
  int v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int32x4_t *v165;
  float16x4_t *v166;
  unint64_t v167;
  int32x4_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int32x4_t v171;
  float16x8_t v172;
  float16x8_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return;
  v13 = *a1;
  if (!*a1)
    return;
  if (v12 - 8 < 8)
  {
    v14 = 1;
    v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v16 = ((v12 - 8) >> 3) + 1;
  v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  v17 = v4 + 1;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v179 = *v4;
    if (!*v4)
      return;
    v79 = 0;
    v80 = a2[8];
    v81 = a1[8];
    v82 = v4[1];
    v83 = (uint64_t *)a1[5];
    v174 = (uint64_t *)a2[5];
    v84 = v13 + 2 * v81 + 16;
    v177 = *v174;
    v178 = *v83;
    v176 = 2 * *v83;
    v85 = 4 * v80 + 32;
    v175 = 4 * *v174;
    while (!v82)
    {
LABEL_50:
      v81 += v178;
      v80 += v177;
      ++v79;
      v84 += v176;
      v85 += v175;
      if (v79 == v179)
        return;
    }
    v86 = 0;
    v87 = v4[2];
    v88 = *a2;
    v89 = a2[5];
    v90 = v83[1];
    v91 = v87 & 0xFFFFFFFFFFFFFFF0;
    v92 = (int32x4_t *)(*a2 + v85);
    v93 = v174[1];
    v94 = (float16x4_t *)v84;
    v95 = v80;
    v96 = v81;
    while (1)
    {
      if (v87)
      {
        v97 = v83[2];
        v98 = *(_QWORD *)(v89 + 16);
        if (v87 >= 0x10 && (v97 == 1 ? (v99 = v98 == 1) : (v99 = 0), v99))
        {
          v101 = v95 + v91 * v98;
          v111 = v92;
          v112 = v94;
          v113 = v87 & 0xFFFFFFFFFFFFFFF0;
          v102 = v96 + v91 * v97;
          do
          {
            v115 = v111[-2];
            v114 = v111[-1];
            v117 = *v111;
            v116 = v111[1];
            v111 += 4;
            v118 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(v112[-2]), vcvtq_f32_s32(v115))), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v112[-2].i8), vcvtq_f32_s32(v114)));
            v119 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(*v112), vcvtq_f32_s32(v117))), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v112->i8), vcvtq_f32_s32(v116)));
            *(float16x8_t *)v112[-2].i8 = v118;
            *(float16x8_t *)v112->i8 = v119;
            v112 += 4;
            v113 -= 16;
          }
          while (v113);
          v100 = v87 & 0xFFFFFFFFFFFFFFF0;
          if (v87 == v91)
            goto LABEL_53;
        }
        else
        {
          v100 = 0;
          v101 = v95;
          v102 = v96;
        }
        v103 = v87 - v100;
        v104 = (int *)(v88 + 4 * v101);
        v105 = 4 * v98;
        v106 = 2 * v97;
        v107 = (__int16 *)(v13 + 2 * v102);
        do
        {
          _H1 = *v107;
          __asm { FCVT            S1, H1 }
          _S0 = _S1 - (float)*v104;
          __asm { FCVT            H0, S0 }
          *v107 = LOWORD(_S0);
          v104 = (int *)((char *)v104 + v105);
          v107 = (__int16 *)((char *)v107 + v106);
          --v103;
        }
        while (v103);
      }
LABEL_53:
      v96 += v90;
      v95 += v93;
      ++v86;
      v94 = (float16x4_t *)((char *)v94 + 2 * v90);
      v92 = (int32x4_t *)((char *)v92 + 4 * v93);
      if (v86 == v82)
        goto LABEL_50;
    }
  }
  if (v22 == 2)
  {
    v41 = *v4;
    if (!*v4)
      return;
    v42 = 0;
    v43 = a2[8];
    v44 = a1[8];
    v45 = v4[1];
    v46 = *a2;
    v47 = (uint64_t *)a2[5];
    v48 = (uint64_t *)a1[5];
    v49 = *v48;
    v50 = *v47;
    v51 = v45 & 0xFFFFFFFFFFFFFFF0;
    v52 = v13 + 2 * v44 + 16;
    v53 = 2 * *v48;
    v54 = *a2 + 4 * v43 + 32;
    v55 = 4 * *v47;
    while (1)
    {
      if (v45)
      {
        v56 = v48[1];
        v57 = v47[1];
        if (v45 >= 0x10 && (v56 == 1 ? (_ZF = v57 == 1) : (_ZF = 0), _ZF))
        {
          v60 = v43 + v51 * v57;
          v70 = (int32x4_t *)v54;
          v71 = (float16x4_t *)v52;
          v72 = v45 & 0xFFFFFFFFFFFFFFF0;
          v61 = v44 + v51 * v56;
          do
          {
            v74 = v70[-2];
            v73 = v70[-1];
            v76 = *v70;
            v75 = v70[1];
            v70 += 4;
            v77 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(v71[-2]), vcvtq_f32_s32(v74))), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v71[-2].i8), vcvtq_f32_s32(v73)));
            v78 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(*v71), vcvtq_f32_s32(v76))), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v71->i8), vcvtq_f32_s32(v75)));
            *(float16x8_t *)v71[-2].i8 = v77;
            *(float16x8_t *)v71->i8 = v78;
            v71 += 4;
            v72 -= 16;
          }
          while (v72);
          v59 = v45 & 0xFFFFFFFFFFFFFFF0;
          if (v45 == v51)
            goto LABEL_33;
        }
        else
        {
          v59 = 0;
          v60 = v43;
          v61 = v44;
        }
        v62 = v45 - v59;
        v63 = (int *)(v46 + 4 * v60);
        v64 = 4 * v57;
        v65 = 2 * v56;
        v66 = (__int16 *)(v13 + 2 * v61);
        do
        {
          _H1 = *v66;
          __asm { FCVT            S1, H1 }
          _S0 = _S1 - (float)*v63;
          __asm { FCVT            H0, S0 }
          *v66 = LOWORD(_S0);
          v63 = (int *)((char *)v63 + v64);
          v66 = (__int16 *)((char *)v66 + v65);
          --v62;
        }
        while (v62);
      }
LABEL_33:
      v44 += v49;
      v43 += v50;
      ++v42;
      v52 += v53;
      v54 += v55;
      if (v42 == v41)
        return;
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v120 = operator new(v12);
    bzero(v120, v12 & 0xFFFFFFFFFFFFFFF8);
    v121 = *a2;
    if (v12 >> 3 <= 1)
      v122 = 1;
    else
      v122 = v12 >> 3;
    v123 = a2[5];
    v124 = a2[8];
    v125 = v122 & 0x1FFFFFFFFFFFFFFELL;
    v126 = a1[5];
    while (v122 >= 2)
    {
      v129 = 0;
      v130 = 0;
      v131 = v122 & 0x1FFFFFFFFFFFFFFELL;
      v132 = (_QWORD *)(v126 + 8);
      v133 = v120 + 1;
      do
      {
        v129 += *(v132 - 1) * *(v133 - 1);
        v130 += *v132 * *v133;
        v133 += 2;
        v132 += 2;
        v131 -= 2;
      }
      while (v131);
      v127 = v130 + v129;
      v128 = v122 & 0x1FFFFFFFFFFFFFFELL;
      if (v122 != v125)
        goto LABEL_78;
LABEL_80:
      if (v122 < 2)
      {
        v141 = 0;
        v142 = 0;
LABEL_85:
        v148 = v122 - v142;
        v149 = v142;
        v150 = (uint64_t *)(v123 + 8 * v142);
        v151 = &v120[v149];
        do
        {
          v153 = *v151++;
          v152 = v153;
          v154 = *v150++;
          v141 += v154 * v152;
          --v148;
        }
        while (v148);
        goto LABEL_87;
      }
      v143 = 0;
      v144 = 0;
      v145 = v122 & 0x1FFFFFFFFFFFFFFELL;
      v146 = (_QWORD *)(v123 + 8);
      v147 = v120 + 1;
      do
      {
        v143 += *(v146 - 1) * *(v147 - 1);
        v144 += *v146 * *v147;
        v147 += 2;
        v146 += 2;
        v145 -= 2;
      }
      while (v145);
      v141 = v144 + v143;
      v142 = v122 & 0x1FFFFFFFFFFFFFFELL;
      if (v122 != v125)
        goto LABEL_85;
LABEL_87:
      v155 = 2 * v127;
      _H1 = *(_WORD *)(v13 + v155);
      __asm { FCVT            S1, H1 }
      _S0 = _S1 - (float)*(int *)(v121 + 4 * (v124 + v141));
      __asm { FCVT            H0, S0 }
      *(_WORD *)(v13 + v155) = LOWORD(_S0);
      if ((int)(v12 >> 3) >= 1)
      {
        v159 = (v12 >> 3) + 1;
        v160 = v12 >> 3;
        while (1)
        {
          v161 = (v159 - 2);
          v162 = v120[v161] + 1;
          v120[v161] = v162;
          if (v162 < v4[v161])
            break;
          v120[(v159 - 2)] = 0;
          --v160;
          if ((unint64_t)--v159 <= 1)
            goto LABEL_93;
        }
        if (v160 > 0)
          continue;
      }
LABEL_93:
      operator delete(v120);
      return;
    }
    v127 = 0;
    v128 = 0;
LABEL_78:
    v134 = v122 - v128;
    v135 = v128;
    v136 = (uint64_t *)(v126 + 8 * v128);
    v137 = &v120[v135];
    do
    {
      v139 = *v137++;
      v138 = v139;
      v140 = *v136++;
      v127 += v140 * v138;
      --v134;
    }
    while (v134);
    goto LABEL_80;
  }
  v23 = *v4;
  if (!*v4)
    return;
  v24 = a2[8];
  v25 = a1[8];
  v26 = *a2;
  v27 = *(_QWORD *)a1[5];
  v28 = *(_QWORD *)a2[5];
  if (v23 < 0x10)
  {
    v29 = 0;
LABEL_28:
    v30 = v23 - v29;
    v31 = (int *)(v26 + 4 * v24);
    v32 = 4 * v28;
    v33 = 2 * v27;
    v34 = (__int16 *)(v13 + 2 * v25);
    do
    {
      _H1 = *v34;
      __asm { FCVT            S1, H1 }
      _S0 = _S1 - (float)*v31;
      __asm { FCVT            H0, S0 }
      *v34 = LOWORD(_S0);
      v31 = (int *)((char *)v31 + v32);
      v34 = (__int16 *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  v29 = 0;
  if (v27 != 1)
    goto LABEL_28;
  if (v28 != 1)
    goto LABEL_28;
  v29 = v23 & 0xFFFFFFFFFFFFFFF0;
  v163 = v24 + (v23 & 0xFFFFFFFFFFFFFFF0);
  v164 = v25 + (v23 & 0xFFFFFFFFFFFFFFF0);
  v165 = (int32x4_t *)(v26 + 4 * v24 + 32);
  v166 = (float16x4_t *)(v13 + 2 * v25 + 16);
  v167 = v23 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v169 = v165[-2];
    v168 = v165[-1];
    v171 = *v165;
    v170 = v165[1];
    v165 += 4;
    v172 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(v166[-2]), vcvtq_f32_s32(v169))), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v166[-2].i8), vcvtq_f32_s32(v168)));
    v173 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(*v166), vcvtq_f32_s32(v171))), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v166->i8), vcvtq_f32_s32(v170)));
    *(float16x8_t *)v166[-2].i8 = v172;
    *(float16x8_t *)v166->i8 = v173;
    v166 += 4;
    v167 -= 16;
  }
  while (v167);
  v24 = v163;
  v25 = v164;
  if (v23 != v29)
    goto LABEL_28;
}

void sub_1911BE7AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::operator-<int>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<half>::copy((uint64_t)a1, a3);
    nitro::ndarray<half>::operator-=<int>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<half>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<half>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<int>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<half>::operator-=<int>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911BEB0C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911BEB20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911BEBBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911BEB98);
  JUMPOUT(0x1911BEB68);
}

void sub_1911BEBCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911BEBA8);
  JUMPOUT(0x1911BEB70);
}

void sub_1911BEBDC()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911BEB80);
  JUMPOUT(0x1911BEB78);
}

void nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911BEE50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911BEFF4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911BF008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911BF000);
}

uint64_t *nitro::ndarray<float>::operator-=<int>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;

  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  v5 = v4 - v3;
  if (v4 == v3 || !*a1)
    return a1;
  if ((unint64_t)(v5 - 8) < 8)
  {
    v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6)
  {
    v14 = v5 >> 3;
    v15 = (_QWORD *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3)
      goto LABEL_19;
    v16 = v14 <= 1 ? 1 : v14;
    if (*(_QWORD *)v3 != *v15)
      goto LABEL_19;
    v17 = 1;
    do
    {
      v18 = v17;
      if (v16 == v17)
        break;
      v19 = *(_QWORD *)&v3[8 * v17];
      v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 >= v14)
    {
      nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(a1, a2);
    }
    else
    {
LABEL_19:
      nitro::ndarray<float>::operator-<int>(a1, a2, &v25);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v25);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  return a1;
}

void nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  float *v60;
  int32x4_t *v61;
  float32x4_t *v62;
  unint64_t v63;
  float32x4_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int32x4_t *v78;
  uint64_t v79;
  float32x4_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int *v90;
  uint64_t v91;
  uint64_t v92;
  float *v93;
  int32x4_t *v94;
  float32x4_t *v95;
  unint64_t v96;
  float32x4_t v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int32x4_t *v139;
  float32x4_t *v140;
  unint64_t v141;
  float32x4_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return;
  v13 = *a1;
  if (!*a1)
    return;
  if (v12 - 8 < 8)
  {
    v14 = 1;
    v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v16 = ((v12 - 8) >> 3) + 1;
  v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  v17 = v4 + 1;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v148 = *v4;
    if (!*v4)
      return;
    v65 = 0;
    v66 = a2[8];
    v67 = a1[8];
    v68 = v4[1];
    v69 = (uint64_t *)a1[5];
    v143 = (uint64_t *)a2[5];
    v70 = v13 + 4 * v67 + 16;
    v146 = *v143;
    v147 = *v69;
    v145 = 4 * *v69;
    v71 = 4 * v66 + 16;
    v144 = 4 * *v143;
    while (!v68)
    {
LABEL_50:
      v67 += v147;
      v66 += v146;
      ++v65;
      v70 += v145;
      v71 += v144;
      if (v65 == v148)
        return;
    }
    v72 = 0;
    v73 = v4[2];
    v74 = *a2;
    v75 = a2[5];
    v76 = v69[1];
    v77 = v73 & 0xFFFFFFFFFFFFFFF8;
    v78 = (int32x4_t *)(*a2 + v71);
    v79 = v143[1];
    v80 = (float32x4_t *)v70;
    v81 = v66;
    v82 = v67;
    while (1)
    {
      if (v73)
      {
        v83 = v69[2];
        v84 = *(_QWORD *)(v75 + 16);
        if (v73 >= 8 && (v83 == 1 ? (v85 = v84 == 1) : (v85 = 0), v85))
        {
          v87 = v81 + v77 * v84;
          v94 = v78;
          v95 = v80;
          v96 = v73 & 0xFFFFFFFFFFFFFFF8;
          v88 = v82 + v77 * v83;
          do
          {
            v97 = vsubq_f32(*v95, vcvtq_f32_s32(*v94));
            v95[-1] = vsubq_f32(v95[-1], vcvtq_f32_s32(v94[-1]));
            *v95 = v97;
            v95 += 2;
            v94 += 2;
            v96 -= 8;
          }
          while (v96);
          v86 = v73 & 0xFFFFFFFFFFFFFFF8;
          if (v73 == v77)
            goto LABEL_53;
        }
        else
        {
          v86 = 0;
          v87 = v81;
          v88 = v82;
        }
        v89 = v73 - v86;
        v90 = (int *)(v74 + 4 * v87);
        v91 = 4 * v84;
        v92 = 4 * v83;
        v93 = (float *)(v13 + 4 * v88);
        do
        {
          *v93 = *v93 - (float)*v90;
          v90 = (int *)((char *)v90 + v91);
          v93 = (float *)((char *)v93 + v92);
          --v89;
        }
        while (v89);
      }
LABEL_53:
      v82 += v76;
      v81 += v79;
      ++v72;
      v80 = (float32x4_t *)((char *)v80 + 4 * v76);
      v78 = (int32x4_t *)((char *)v78 + 4 * v79);
      if (v72 == v68)
        goto LABEL_50;
    }
  }
  if (v22 == 2)
  {
    v35 = *v4;
    if (!*v4)
      return;
    v36 = 0;
    v37 = a2[8];
    v38 = a1[8];
    v39 = v4[1];
    v40 = *a2;
    v41 = (uint64_t *)a2[5];
    v42 = (uint64_t *)a1[5];
    v43 = *v42;
    v44 = *v41;
    v45 = v39 & 0xFFFFFFFFFFFFFFF8;
    v46 = v13 + 4 * v38 + 16;
    v47 = 4 * *v42;
    v48 = *a2 + 4 * v37 + 16;
    v49 = 4 * *v41;
    while (1)
    {
      if (v39)
      {
        v50 = v42[1];
        v51 = v41[1];
        if (v39 >= 8 && (v50 == 1 ? (v52 = v51 == 1) : (v52 = 0), v52))
        {
          v54 = v37 + v45 * v51;
          v61 = (int32x4_t *)v48;
          v62 = (float32x4_t *)v46;
          v63 = v39 & 0xFFFFFFFFFFFFFFF8;
          v55 = v38 + v45 * v50;
          do
          {
            v64 = vsubq_f32(*v62, vcvtq_f32_s32(*v61));
            v62[-1] = vsubq_f32(v62[-1], vcvtq_f32_s32(v61[-1]));
            *v62 = v64;
            v62 += 2;
            v61 += 2;
            v63 -= 8;
          }
          while (v63);
          v53 = v39 & 0xFFFFFFFFFFFFFFF8;
          if (v39 == v45)
            goto LABEL_33;
        }
        else
        {
          v53 = 0;
          v54 = v37;
          v55 = v38;
        }
        v56 = v39 - v53;
        v57 = (int *)(v40 + 4 * v54);
        v58 = 4 * v51;
        v59 = 4 * v50;
        v60 = (float *)(v13 + 4 * v55);
        do
        {
          *v60 = *v60 - (float)*v57;
          v57 = (int *)((char *)v57 + v58);
          v60 = (float *)((char *)v60 + v59);
          --v56;
        }
        while (v56);
      }
LABEL_33:
      v38 += v43;
      v37 += v44;
      ++v36;
      v46 += v47;
      v48 += v49;
      if (v36 == v35)
        return;
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v98 = operator new(v12);
    bzero(v98, v12 & 0xFFFFFFFFFFFFFFF8);
    v99 = *a2;
    if (v12 >> 3 <= 1)
      v100 = 1;
    else
      v100 = v12 >> 3;
    v101 = a2[5];
    v102 = a2[8];
    v103 = v100 & 0x1FFFFFFFFFFFFFFELL;
    v104 = a1[5];
    while (v100 >= 2)
    {
      v107 = 0;
      v108 = 0;
      v109 = v100 & 0x1FFFFFFFFFFFFFFELL;
      v110 = (_QWORD *)(v104 + 8);
      v111 = v98 + 1;
      do
      {
        v107 += *(v110 - 1) * *(v111 - 1);
        v108 += *v110 * *v111;
        v111 += 2;
        v110 += 2;
        v109 -= 2;
      }
      while (v109);
      v105 = v108 + v107;
      v106 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103)
        goto LABEL_78;
LABEL_80:
      if (v100 < 2)
      {
        v119 = 0;
        v120 = 0;
LABEL_85:
        v126 = v100 - v120;
        v127 = v120;
        v128 = (uint64_t *)(v101 + 8 * v120);
        v129 = &v98[v127];
        do
        {
          v131 = *v129++;
          v130 = v131;
          v132 = *v128++;
          v119 += v132 * v130;
          --v126;
        }
        while (v126);
        goto LABEL_87;
      }
      v121 = 0;
      v122 = 0;
      v123 = v100 & 0x1FFFFFFFFFFFFFFELL;
      v124 = (_QWORD *)(v101 + 8);
      v125 = v98 + 1;
      do
      {
        v121 += *(v124 - 1) * *(v125 - 1);
        v122 += *v124 * *v125;
        v125 += 2;
        v124 += 2;
        v123 -= 2;
      }
      while (v123);
      v119 = v122 + v121;
      v120 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103)
        goto LABEL_85;
LABEL_87:
      *(float *)(v13 + 4 * v105) = *(float *)(v13 + 4 * v105) - (float)*(int *)(v99 + 4 * (v102 + v119));
      if ((int)(v12 >> 3) >= 1)
      {
        v133 = (v12 >> 3) + 1;
        v134 = v12 >> 3;
        while (1)
        {
          v135 = (v133 - 2);
          v136 = v98[v135] + 1;
          v98[v135] = v136;
          if (v136 < v4[v135])
            break;
          v98[(v133 - 2)] = 0;
          --v134;
          if ((unint64_t)--v133 <= 1)
            goto LABEL_93;
        }
        if (v134 > 0)
          continue;
      }
LABEL_93:
      operator delete(v98);
      return;
    }
    v105 = 0;
    v106 = 0;
LABEL_78:
    v112 = v100 - v106;
    v113 = v106;
    v114 = (uint64_t *)(v104 + 8 * v106);
    v115 = &v98[v113];
    do
    {
      v117 = *v115++;
      v116 = v117;
      v118 = *v114++;
      v105 += v118 * v116;
      --v112;
    }
    while (v112);
    goto LABEL_80;
  }
  v23 = *v4;
  if (!*v4)
    return;
  v24 = a2[8];
  v25 = a1[8];
  v26 = *a2;
  v27 = *(_QWORD *)a1[5];
  v28 = *(_QWORD *)a2[5];
  if (v23 < 8)
  {
    v29 = 0;
LABEL_28:
    v30 = v23 - v29;
    v31 = (int *)(v26 + 4 * v24);
    v32 = 4 * v28;
    v33 = 4 * v27;
    v34 = (float *)(v13 + 4 * v25);
    do
    {
      *v34 = *v34 - (float)*v31;
      v31 = (int *)((char *)v31 + v32);
      v34 = (float *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  v29 = 0;
  if (v27 != 1)
    goto LABEL_28;
  if (v28 != 1)
    goto LABEL_28;
  v29 = v23 & 0xFFFFFFFFFFFFFFF8;
  v137 = v24 + (v23 & 0xFFFFFFFFFFFFFFF8);
  v138 = v25 + (v23 & 0xFFFFFFFFFFFFFFF8);
  v139 = (int32x4_t *)(v26 + 4 * v24 + 16);
  v140 = (float32x4_t *)(v13 + 4 * v25 + 16);
  v141 = v23 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v142 = vsubq_f32(*v140, vcvtq_f32_s32(*v139));
    v140[-1] = vsubq_f32(v140[-1], vcvtq_f32_s32(v139[-1]));
    *v140 = v142;
    v139 += 2;
    v140 += 2;
    v141 -= 8;
  }
  while (v141);
  v24 = v137;
  v25 = v138;
  if (v23 != v29)
    goto LABEL_28;
}

void sub_1911BF88C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::operator-<int>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<float>::copy((uint64_t)a1, a3);
    nitro::ndarray<float>::operator-=<int>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<float>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<float>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<int>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<float>::operator-=<int>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911BFBEC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911BFC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911BFC9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911BFC78);
  JUMPOUT(0x1911BFC48);
}

void sub_1911BFCAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911BFC88);
  JUMPOUT(0x1911BFC50);
}

void sub_1911BFCBC()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911BFC60);
  JUMPOUT(0x1911BFC58);
}

void nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911BFF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911C00D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911C00E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911C00E0);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1911C0418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1911C0480(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

_QWORD *nitro::ndarray<unsigned char>::operator-=<half>(_QWORD *a1, _QWORD *a2, double a3, float a4)
{
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v27;
  void *v28;
  void *v29;
  void *__p;
  void *v31;

  v5 = (char *)a1[2];
  v6 = (char *)a1[3];
  v7 = v6 - v5;
  if (v6 == v5 || !*a1)
    return a1;
  if ((unint64_t)(v7 - 8) < 8)
  {
    v8 = 1;
    v9 = (char *)a1[2];
    do
    {
LABEL_8:
      v15 = *(_QWORD *)v9;
      v9 += 8;
      v8 *= v15;
    }
    while (v9 != v6);
    goto LABEL_9;
  }
  v10 = ((unint64_t)(v7 - 8) >> 3) + 1;
  v9 = &v5[8 * (v10 & 0x3FFFFFFFFFFFFFFELL)];
  v11 = v5 + 8;
  v12 = 1;
  v13 = v10 & 0x3FFFFFFFFFFFFFFELL;
  v14 = 1;
  do
  {
    v12 *= *(v11 - 1);
    v14 *= *v11;
    v11 += 2;
    v13 -= 2;
  }
  while (v13);
  v8 = v14 * v12;
  if (v10 != (v10 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v8)
  {
    v16 = v7 >> 3;
    v17 = (_QWORD *)a2[2];
    if (v16 != (uint64_t)(a2[3] - (_QWORD)v17) >> 3)
      goto LABEL_19;
    v18 = v16 <= 1 ? 1 : v16;
    if (*(_QWORD *)v5 != *v17)
      goto LABEL_19;
    v19 = 1;
    do
    {
      v20 = v19;
      if (v18 == v19)
        break;
      v21 = *(_QWORD *)&v5[8 * v19];
      v22 = v17[v19++];
    }
    while (v21 == v22);
    if (v20 >= v16)
    {
      nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(a1, a2, a3, a4);
    }
    else
    {
LABEL_19:
      nitro::ndarray<unsigned char>::operator-<half>(a1, a2, &v27);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v27);
      if (__p)
      {
        v31 = __p;
        operator delete(__p);
      }
      if (v28)
      {
        v29 = v28;
        operator delete(v28);
      }
      v23 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
      if (*((_QWORD *)&v27 + 1))
      {
        v24 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
  }
  return a1;
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(_QWORD *a1, _QWORD *a2, double a3, float a4)
{
  char *v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v59;
  float v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;

  v6 = (char *)a1[2];
  v7 = (char *)a1[3];
  v8 = (v7 - v6) >> 3;
  v9 = (_QWORD *)a2[2];
  if (v8 != (uint64_t)(a2[3] - (_QWORD)v9) >> 3)
    goto LABEL_13;
  if (v7 == v6)
    return;
  v10 = v8 <= 1 ? 1 : (v7 - v6) >> 3;
  if (*(_QWORD *)v6 != *v9)
    goto LABEL_13;
  v11 = 1;
  do
  {
    v12 = v11;
    if (v10 == v11)
      break;
    v13 = *(_QWORD *)&v6[8 * v11];
    v14 = v9[v11++];
  }
  while (v13 == v14);
  if (v12 < v8)
LABEL_13:
    nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1})::{lambda(void)#1}::operator()();
  v15 = v7 - v6;
  if (v7 == v6 || !*a1)
    return;
  if ((unint64_t)(v15 - 8) < 8)
  {
    v16 = 1;
    v17 = (char *)a1[2];
    do
    {
LABEL_20:
      v23 = *(_QWORD *)v17;
      v17 += 8;
      v16 *= v23;
    }
    while (v17 != v7);
    goto LABEL_21;
  }
  v18 = ((unint64_t)(v15 - 8) >> 3) + 1;
  v17 = &v6[8 * (v18 & 0x3FFFFFFFFFFFFFFELL)];
  v19 = v6 + 8;
  v20 = 1;
  v21 = v18 & 0x3FFFFFFFFFFFFFFELL;
  v22 = 1;
  do
  {
    v20 *= *(v19 - 1);
    v22 *= *v19;
    v19 += 2;
    v21 -= 2;
  }
  while (v21);
  v16 = v22 * v20;
  if (v18 != (v18 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v16)
    return;
  v24 = v15 >> 3;
  if (v15 >> 3 == 3)
  {
    v45 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
    {
      v46 = 0;
      v47 = a2[8];
      v48 = a1[8];
      do
      {
        if (*((_QWORD *)v6 + 1))
        {
          v49 = 0;
          v50 = v47;
          v51 = v48;
          do
          {
            if (*((_QWORD *)v6 + 2))
            {
              v54 = 0;
              v55 = v50;
              v56 = v51;
              do
              {
                _H0 = *(_WORD *)(*a2 + 2 * v55);
                __asm { FCVT            S0, H0 }
                LOBYTE(a4) = *(_BYTE *)(*a1 + v56);
                a4 = (float)LODWORD(a4);
                *(_BYTE *)(*a1 + v56) = (int)(float)(a4 - _S0);
                v52 = (_QWORD *)a1[5];
                v56 += v52[2];
                v53 = (_QWORD *)a2[5];
                v55 += v53[2];
                ++v54;
                v6 = (char *)a1[2];
              }
              while (v54 < *((_QWORD *)v6 + 2));
            }
            else
            {
              v52 = (_QWORD *)a1[5];
              v53 = (_QWORD *)a2[5];
            }
            v51 += v52[1];
            v50 += v53[1];
            ++v49;
          }
          while (v49 < *((_QWORD *)v6 + 1));
          v45 = *(_QWORD *)v6;
        }
        else
        {
          v52 = (_QWORD *)a1[5];
          v53 = (_QWORD *)a2[5];
        }
        v48 += *v52;
        v47 += *v53;
        ++v46;
      }
      while (v46 < v45);
    }
  }
  else
  {
    if (v24 != 2)
    {
      if (v24 == 1)
      {
        if (*(_QWORD *)v6)
        {
          v25 = 0;
          v26 = a2[8];
          v27 = a1[8];
          do
          {
            _H0 = *(_WORD *)(*a2 + 2 * v26);
            __asm { FCVT            S0, H0 }
            LOBYTE(a4) = *(_BYTE *)(*a1 + v27);
            a4 = (float)LODWORD(a4);
            *(_BYTE *)(*a1 + v27) = (int)(float)(a4 - _S0);
            v27 += *(_QWORD *)a1[5];
            v26 += *(_QWORD *)a2[5];
            ++v25;
          }
          while (v25 < *(_QWORD *)a1[2]);
        }
        return;
      }
      if (v15 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v59 = operator new(v15);
      bzero(v59, v15 & 0xFFFFFFFFFFFFFFF8);
      if (v24 <= 1)
        v61 = 1;
      else
        v61 = v15 >> 3;
      v62 = v61 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        v63 = a1[5];
        if (v61 < 2)
          break;
        v66 = 0;
        v67 = 0;
        v68 = (_QWORD *)(v63 + 8);
        v69 = v61 & 0xFFFFFFFFFFFFFFFELL;
        v70 = v59 + 1;
        do
        {
          v66 += *(v68 - 1) * *(v70 - 1);
          v67 += *v68 * *v70;
          v70 += 2;
          v68 += 2;
          v69 -= 2;
        }
        while (v69);
        v64 = v67 + v66;
        v65 = v61 & 0xFFFFFFFFFFFFFFFELL;
        if (v61 != v62)
          goto LABEL_60;
LABEL_62:
        v78 = a2[5];
        if (v61 < 2)
        {
          v79 = 0;
          v80 = 0;
LABEL_67:
          v86 = v61 - v80;
          v87 = v80;
          v88 = (uint64_t *)(v78 + v87 * 8);
          v89 = &v59[v87];
          do
          {
            v91 = *v89++;
            v90 = v91;
            v92 = *v88++;
            v79 += v92 * v90;
            --v86;
          }
          while (v86);
          goto LABEL_69;
        }
        v81 = 0;
        v82 = 0;
        v83 = (_QWORD *)(v78 + 8);
        v84 = v61 & 0xFFFFFFFFFFFFFFFELL;
        v85 = v59 + 1;
        do
        {
          v81 += *(v83 - 1) * *(v85 - 1);
          v82 += *v83 * *v85;
          v85 += 2;
          v83 += 2;
          v84 -= 2;
        }
        while (v84);
        v79 = v82 + v81;
        v80 = v61 & 0xFFFFFFFFFFFFFFFELL;
        if (v61 != v62)
          goto LABEL_67;
LABEL_69:
        _H0 = *(_WORD *)(*a2 + 2 * (a2[8] + v79));
        __asm { FCVT            S0, H0 }
        LOBYTE(v60) = *(_BYTE *)(*a1 + v64);
        v60 = (float)LODWORD(v60);
        *(_BYTE *)(*a1 + v64) = (int)(float)(v60 - _S0);
        if ((int)((unint64_t)v15 >> 3) >= 1)
        {
          v95 = a1[2];
          v96 = ((unint64_t)v15 >> 3) + 1;
          v97 = (unint64_t)v15 >> 3;
          while (1)
          {
            v98 = (v96 - 2);
            v99 = v59[v98] + 1;
            v59[v98] = v99;
            if (v99 < *(_QWORD *)(v95 + v98 * 8))
              break;
            v59[(v96 - 2)] = 0;
            LODWORD(v97) = v97 - 1;
            if ((unint64_t)--v96 <= 1)
              goto LABEL_75;
          }
          if ((int)v97 > 0)
            continue;
        }
LABEL_75:
        operator delete(v59);
        return;
      }
      v64 = 0;
      v65 = 0;
LABEL_60:
      v71 = v61 - v65;
      v72 = v65;
      v73 = (uint64_t *)(v63 + v72 * 8);
      v74 = &v59[v72];
      do
      {
        v76 = *v74++;
        v75 = v76;
        v77 = *v73++;
        v64 += v77 * v75;
        --v71;
      }
      while (v71);
      goto LABEL_62;
    }
    v34 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
    {
      v35 = 0;
      v36 = a2[8];
      v37 = a1[8];
      do
      {
        if (*((_QWORD *)v6 + 1))
        {
          v40 = 0;
          v41 = v36;
          v42 = v37;
          do
          {
            _H0 = *(_WORD *)(*a2 + 2 * v41);
            __asm { FCVT            S0, H0 }
            LOBYTE(a4) = *(_BYTE *)(*a1 + v42);
            a4 = (float)LODWORD(a4);
            *(_BYTE *)(*a1 + v42) = (int)(float)(a4 - _S0);
            v38 = (_QWORD *)a1[5];
            v42 += v38[1];
            v39 = (_QWORD *)a2[5];
            v41 += v39[1];
            ++v40;
            v6 = (char *)a1[2];
          }
          while (v40 < *((_QWORD *)v6 + 1));
          v34 = *(_QWORD *)v6;
        }
        else
        {
          v38 = (_QWORD *)a1[5];
          v39 = (_QWORD *)a2[5];
        }
        v37 += *v38;
        v36 += *v39;
        ++v35;
      }
      while (v35 < v34);
    }
  }
}

void sub_1911C0B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>::operator-<half>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<unsigned char>::copy((uint64_t)a1, a3);
    nitro::ndarray<unsigned char>::operator-=<half>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<unsigned char>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<unsigned char>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<half>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<unsigned char>::operator-=<half>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911C0EB0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911C0EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911C0F60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911C0F3CLL);
  JUMPOUT(0x1911C0F0CLL);
}

void sub_1911C0F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911C0F4CLL);
  JUMPOUT(0x1911C0F14);
}

void sub_1911C0F80()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911C0F24);
  JUMPOUT(0x1911C0F1CLL);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911C11F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911C1398(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911C13AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911C13A4);
}

uint64_t *nitro::ndarray<int>::operator-=<half>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;

  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  v5 = v4 - v3;
  if (v4 == v3 || !*a1)
    return a1;
  if ((unint64_t)(v5 - 8) < 8)
  {
    v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6)
  {
    v14 = v5 >> 3;
    v15 = (_QWORD *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3)
      goto LABEL_19;
    v16 = v14 <= 1 ? 1 : v14;
    if (*(_QWORD *)v3 != *v15)
      goto LABEL_19;
    v17 = 1;
    do
    {
      v18 = v17;
      if (v16 == v17)
        break;
      v19 = *(_QWORD *)&v3[8 * v17];
      v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 >= v14)
    {
      nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(a1, a2);
    }
    else
    {
LABEL_19:
      nitro::ndarray<int>::operator-<half>(a1, a2, &v25);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v25);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  return a1;
}

void nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int16 *v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  __int16 *v62;
  uint64_t v63;
  uint64_t v64;
  int *v65;
  float16x8_t *v68;
  int32x4_t *v69;
  unint64_t v70;
  float16x8_t v71;
  float32x4_t v72;
  float32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  float16x8_t *v89;
  uint64_t v90;
  int32x4_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  __int16 *v101;
  uint64_t v102;
  uint64_t v103;
  int *v104;
  float16x8_t *v107;
  int32x4_t *v108;
  unint64_t v109;
  float16x8_t v110;
  float32x4_t v111;
  float32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  _QWORD *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v152;
  int v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  float16x8_t *v158;
  int32x4_t *v159;
  unint64_t v160;
  float16x8_t v161;
  float32x4_t v162;
  float32x4_t v163;
  int32x4_t v164;
  int32x4_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return;
  v13 = *a1;
  if (!*a1)
    return;
  if (v12 - 8 < 8)
  {
    v14 = 1;
    v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v16 = ((v12 - 8) >> 3) + 1;
  v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  v17 = v4 + 1;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v171 = *v4;
    if (!*v4)
      return;
    v76 = 0;
    v77 = a2[8];
    v78 = a1[8];
    v79 = v4[1];
    v80 = (uint64_t *)a1[5];
    v166 = (uint64_t *)a2[5];
    v81 = v13 + 4 * v78 + 32;
    v169 = *v166;
    v170 = *v80;
    v168 = 4 * *v80;
    v82 = 2 * v77 + 16;
    v167 = 2 * *v166;
    while (!v79)
    {
LABEL_50:
      v78 += v170;
      v77 += v169;
      ++v76;
      v81 += v168;
      v82 += v167;
      if (v76 == v171)
        return;
    }
    v83 = 0;
    v84 = v4[2];
    v85 = *a2;
    v86 = a2[5];
    v87 = v80[1];
    v88 = v84 & 0xFFFFFFFFFFFFFFF0;
    v89 = (float16x8_t *)(*a2 + v82);
    v90 = v166[1];
    v91 = (int32x4_t *)v81;
    v92 = v77;
    v93 = v78;
    while (1)
    {
      if (v84)
      {
        v94 = v80[2];
        v95 = *(_QWORD *)(v86 + 16);
        if (v84 >= 0x10 && (v94 == 1 ? (v96 = v95 == 1) : (v96 = 0), v96))
        {
          v98 = v92 + v88 * v95;
          v107 = v89;
          v108 = v91;
          v109 = v84 & 0xFFFFFFFFFFFFFFF0;
          v99 = v93 + v88 * v94;
          do
          {
            v110 = v107[-1];
            v111 = vcvtq_f32_f16(*(float16x4_t *)v110.i8);
            v112 = vsubq_f32(vcvtq_f32_s32(v108[1]), vcvt_hight_f32_f16(*v107));
            v113 = vcvtq_s32_f32(vsubq_f32(vcvtq_f32_s32(v108[-1]), vcvt_hight_f32_f16(v110)));
            v114 = vcvtq_s32_f32(vsubq_f32(vcvtq_f32_s32(*v108), vcvtq_f32_f16(*(float16x4_t *)v107->i8)));
            v108[-2] = vcvtq_s32_f32(vsubq_f32(vcvtq_f32_s32(v108[-2]), v111));
            v108[-1] = v113;
            *v108 = v114;
            v108[1] = vcvtq_s32_f32(v112);
            v108 += 4;
            v107 += 2;
            v109 -= 16;
          }
          while (v109);
          v97 = v84 & 0xFFFFFFFFFFFFFFF0;
          if (v84 == v88)
            goto LABEL_53;
        }
        else
        {
          v97 = 0;
          v98 = v92;
          v99 = v93;
        }
        v100 = v84 - v97;
        v101 = (__int16 *)(v85 + 2 * v98);
        v102 = 2 * v95;
        v103 = 4 * v94;
        v104 = (int *)(v13 + 4 * v99);
        do
        {
          _H0 = *v101;
          __asm { FCVT            S0, H0 }
          *v104 = (int)(float)((float)*v104 - _S0);
          v101 = (__int16 *)((char *)v101 + v102);
          v104 = (int *)((char *)v104 + v103);
          --v100;
        }
        while (v100);
      }
LABEL_53:
      v93 += v87;
      v92 += v90;
      ++v83;
      v91 = (int32x4_t *)((char *)v91 + 4 * v87);
      v89 = (float16x8_t *)((char *)v89 + 2 * v90);
      if (v83 == v79)
        goto LABEL_50;
    }
  }
  if (v22 == 2)
  {
    v40 = *v4;
    if (!*v4)
      return;
    v41 = 0;
    v42 = a2[8];
    v43 = a1[8];
    v44 = v4[1];
    v45 = *a2;
    v46 = (uint64_t *)a2[5];
    v47 = (uint64_t *)a1[5];
    v48 = *v47;
    v49 = *v46;
    v50 = v44 & 0xFFFFFFFFFFFFFFF0;
    v51 = v13 + 4 * v43 + 32;
    v52 = 4 * *v47;
    v53 = *a2 + 2 * v42 + 16;
    v54 = 2 * *v46;
    while (1)
    {
      if (v44)
      {
        v55 = v47[1];
        v56 = v46[1];
        if (v44 >= 0x10 && (v55 == 1 ? (_ZF = v56 == 1) : (_ZF = 0), _ZF))
        {
          v59 = v42 + v50 * v56;
          v68 = (float16x8_t *)v53;
          v69 = (int32x4_t *)v51;
          v70 = v44 & 0xFFFFFFFFFFFFFFF0;
          v60 = v43 + v50 * v55;
          do
          {
            v71 = v68[-1];
            v72 = vcvtq_f32_f16(*(float16x4_t *)v71.i8);
            v73 = vsubq_f32(vcvtq_f32_s32(v69[1]), vcvt_hight_f32_f16(*v68));
            v74 = vcvtq_s32_f32(vsubq_f32(vcvtq_f32_s32(v69[-1]), vcvt_hight_f32_f16(v71)));
            v75 = vcvtq_s32_f32(vsubq_f32(vcvtq_f32_s32(*v69), vcvtq_f32_f16(*(float16x4_t *)v68->i8)));
            v69[-2] = vcvtq_s32_f32(vsubq_f32(vcvtq_f32_s32(v69[-2]), v72));
            v69[-1] = v74;
            *v69 = v75;
            v69[1] = vcvtq_s32_f32(v73);
            v69 += 4;
            v68 += 2;
            v70 -= 16;
          }
          while (v70);
          v58 = v44 & 0xFFFFFFFFFFFFFFF0;
          if (v44 == v50)
            goto LABEL_33;
        }
        else
        {
          v58 = 0;
          v59 = v42;
          v60 = v43;
        }
        v61 = v44 - v58;
        v62 = (__int16 *)(v45 + 2 * v59);
        v63 = 2 * v56;
        v64 = 4 * v55;
        v65 = (int *)(v13 + 4 * v60);
        do
        {
          _H0 = *v62;
          __asm { FCVT            S0, H0 }
          *v65 = (int)(float)((float)*v65 - _S0);
          v62 = (__int16 *)((char *)v62 + v63);
          v65 = (int *)((char *)v65 + v64);
          --v61;
        }
        while (v61);
      }
LABEL_33:
      v43 += v48;
      v42 += v49;
      ++v41;
      v51 += v52;
      v53 += v54;
      if (v41 == v40)
        return;
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v115 = operator new(v12);
    bzero(v115, v12 & 0xFFFFFFFFFFFFFFF8);
    v116 = *a2;
    if (v12 >> 3 <= 1)
      v117 = 1;
    else
      v117 = v12 >> 3;
    v118 = a2[5];
    v119 = a2[8];
    v120 = v117 & 0x1FFFFFFFFFFFFFFELL;
    v121 = a1[5];
    while (v117 >= 2)
    {
      v124 = 0;
      v125 = 0;
      v126 = v117 & 0x1FFFFFFFFFFFFFFELL;
      v127 = (_QWORD *)(v121 + 8);
      v128 = v115 + 1;
      do
      {
        v124 += *(v127 - 1) * *(v128 - 1);
        v125 += *v127 * *v128;
        v128 += 2;
        v127 += 2;
        v126 -= 2;
      }
      while (v126);
      v122 = v125 + v124;
      v123 = v117 & 0x1FFFFFFFFFFFFFFELL;
      if (v117 != v120)
        goto LABEL_78;
LABEL_80:
      if (v117 < 2)
      {
        v136 = 0;
        v137 = 0;
LABEL_85:
        v143 = v117 - v137;
        v144 = v137;
        v145 = (uint64_t *)(v118 + 8 * v137);
        v146 = &v115[v144];
        do
        {
          v148 = *v146++;
          v147 = v148;
          v149 = *v145++;
          v136 += v149 * v147;
          --v143;
        }
        while (v143);
        goto LABEL_87;
      }
      v138 = 0;
      v139 = 0;
      v140 = v117 & 0x1FFFFFFFFFFFFFFELL;
      v141 = (_QWORD *)(v118 + 8);
      v142 = v115 + 1;
      do
      {
        v138 += *(v141 - 1) * *(v142 - 1);
        v139 += *v141 * *v142;
        v142 += 2;
        v141 += 2;
        v140 -= 2;
      }
      while (v140);
      v136 = v139 + v138;
      v137 = v117 & 0x1FFFFFFFFFFFFFFELL;
      if (v117 != v120)
        goto LABEL_85;
LABEL_87:
      _H0 = *(_WORD *)(v116 + 2 * (v119 + v136));
      __asm { FCVT            S0, H0 }
      *(_DWORD *)(v13 + 4 * v122) = (int)(float)((float)*(int *)(v13 + 4 * v122) - _S0);
      if ((int)(v12 >> 3) >= 1)
      {
        v152 = (v12 >> 3) + 1;
        v153 = v12 >> 3;
        while (1)
        {
          v154 = (v152 - 2);
          v155 = v115[v154] + 1;
          v115[v154] = v155;
          if (v155 < v4[v154])
            break;
          v115[(v152 - 2)] = 0;
          --v153;
          if ((unint64_t)--v152 <= 1)
            goto LABEL_93;
        }
        if (v153 > 0)
          continue;
      }
LABEL_93:
      operator delete(v115);
      return;
    }
    v122 = 0;
    v123 = 0;
LABEL_78:
    v129 = v117 - v123;
    v130 = v123;
    v131 = (uint64_t *)(v121 + 8 * v123);
    v132 = &v115[v130];
    do
    {
      v134 = *v132++;
      v133 = v134;
      v135 = *v131++;
      v122 += v135 * v133;
      --v129;
    }
    while (v129);
    goto LABEL_80;
  }
  v23 = *v4;
  if (!*v4)
    return;
  v24 = a2[8];
  v25 = a1[8];
  v26 = *a2;
  v27 = *(_QWORD *)a1[5];
  v28 = *(_QWORD *)a2[5];
  if (v23 < 0x10)
  {
    v29 = 0;
LABEL_28:
    v30 = v23 - v29;
    v31 = (__int16 *)(v26 + 2 * v24);
    v32 = 2 * v28;
    v33 = 4 * v27;
    v34 = (int *)(v13 + 4 * v25);
    do
    {
      _H0 = *v31;
      __asm { FCVT            S0, H0 }
      *v34 = (int)(float)((float)*v34 - _S0);
      v31 = (__int16 *)((char *)v31 + v32);
      v34 = (int *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  v29 = 0;
  if (v27 != 1)
    goto LABEL_28;
  if (v28 != 1)
    goto LABEL_28;
  v29 = v23 & 0xFFFFFFFFFFFFFFF0;
  v156 = v24 + (v23 & 0xFFFFFFFFFFFFFFF0);
  v157 = v25 + (v23 & 0xFFFFFFFFFFFFFFF0);
  v158 = (float16x8_t *)(v26 + 2 * v24 + 16);
  v159 = (int32x4_t *)(v13 + 4 * v25 + 32);
  v160 = v23 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v161 = v158[-1];
    v162 = vcvtq_f32_f16(*(float16x4_t *)v161.i8);
    v163 = vsubq_f32(vcvtq_f32_s32(v159[1]), vcvt_hight_f32_f16(*v158));
    v164 = vcvtq_s32_f32(vsubq_f32(vcvtq_f32_s32(v159[-1]), vcvt_hight_f32_f16(v161)));
    v165 = vcvtq_s32_f32(vsubq_f32(vcvtq_f32_s32(*v159), vcvtq_f32_f16(*(float16x4_t *)v158->i8)));
    v159[-2] = vcvtq_s32_f32(vsubq_f32(vcvtq_f32_s32(v159[-2]), v162));
    v159[-1] = v164;
    *v159 = v165;
    v159[1] = vcvtq_s32_f32(v163);
    v159 += 4;
    v158 += 2;
    v160 -= 16;
  }
  while (v160);
  v24 = v156;
  v25 = v157;
  if (v23 != v29)
    goto LABEL_28;
}

