void sub_1911C1CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::operator-<half>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<int>::copy((uint64_t)a1, a3);
    nitro::ndarray<int>::operator-=<half>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<int>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<int>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<half>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<int>::operator-=<half>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911C204C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911C2060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911C20FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911C20D8);
  JUMPOUT(0x1911C20A8);
}

void sub_1911C210C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911C20E8);
  JUMPOUT(0x1911C20B0);
}

void sub_1911C211C()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911C20C0);
  JUMPOUT(0x1911C20B8);
}

void nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911C2390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911C2534(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911C2548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911C2540);
}

uint64_t *nitro::ndarray<half>::operator-=<half>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;

  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  v5 = v4 - v3;
  if (v4 == v3 || !*a1)
    return a1;
  if ((unint64_t)(v5 - 8) < 8)
  {
    v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6)
  {
    v14 = v5 >> 3;
    v15 = (_QWORD *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3)
      goto LABEL_19;
    v16 = v14 <= 1 ? 1 : v14;
    if (*(_QWORD *)v3 != *v15)
      goto LABEL_19;
    v17 = 1;
    do
    {
      v18 = v17;
      if (v16 == v17)
        break;
      v19 = *(_QWORD *)&v3[8 * v17];
      v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 >= v14)
    {
      nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(a1, a2);
    }
    else
    {
LABEL_19:
      nitro::ndarray<half>::operator-<half>(a1, a2, &v25);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v25);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  return a1;
}

__int16 nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>@<H0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __int16 *v33;
  uint64_t v34;
  uint64_t v35;
  __int16 *v36;
  __int16 result;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  __int16 *v71;
  uint64_t v72;
  uint64_t v73;
  __int16 *v74;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  __int16 *v143;
  uint64_t v144;
  uint64_t v145;
  __int16 *v146;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  _QWORD *v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  _QWORD *v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  _QWORD *v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v225;
  uint64_t v230;
  int v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v270;
  uint64_t v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v279;
  uint64_t v280;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return result;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return result;
  v13 = *a1;
  if (!*a1)
    return result;
  if (v12 - 8 < 8)
  {
    v14 = 1;
    v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v16 = ((v12 - 8) >> 3) + 1;
  v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  v17 = v4 + 1;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return result;
  v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v275 = *v4;
    if (!*v4)
      return result;
    v117 = 0;
    v118 = a2[8];
    v119 = a1[8];
    v120 = v4[1];
    v121 = (uint64_t *)a1[5];
    v272 = (uint64_t *)a2[5];
    v273 = *v272;
    v274 = *v121;
    v277 = 2 * *v121;
    v276 = 2 * *v272;
    v270 = 2 * v118;
    v271 = 2 * v119;
    v122 = 2 * v119 + v13 + 16;
    v123 = 2 * v118 + 16;
    while (!v120)
    {
LABEL_55:
      v119 += v274;
      v118 += v273;
      ++v117;
      v122 += v277;
      v123 += v276;
      if (v117 == v275)
        return result;
    }
    v124 = 0;
    v125 = v4[2];
    v126 = *a2;
    v127 = v121[1];
    v128 = v272[1];
    v129 = 2 * v127;
    v279 = v270 + v276 * v117;
    v280 = v271 + v277 * v117;
    v130 = 2 * v128;
    v131 = v125 & 0xFFFFFFFFFFFFFFF0;
    v132 = a2[5];
    v133 = *a2 + v123;
    v134 = v122;
    v135 = v118;
    v136 = v119;
    while (!v125)
    {
LABEL_58:
      v136 += v127;
      v135 += v128;
      ++v124;
      v134 += v129;
      v133 += v130;
      if (v124 == v120)
        goto LABEL_55;
    }
    v137 = v121[2];
    v138 = *(_QWORD *)(v132 + 16);
    if (v125 >= 0x10)
    {
      v139 = 0;
      if (v137 != 1)
        goto LABEL_62;
      v140 = v135;
      v141 = v136;
      if (v138 != 1)
      {
LABEL_63:
        v142 = v125 - v139;
        v143 = (__int16 *)(v126 + 2 * v140);
        v144 = 2 * v138;
        v145 = 2 * v137;
        v146 = (__int16 *)(v13 + 2 * v141);
        do
        {
          _H0 = *v143;
          _H1 = *v146;
          __asm
          {
            FCVT            S0, H0
            FCVT            S1, H1
          }
          _S0 = _S1 - _S0;
          __asm { FCVT            H0, S0 }
          *v146 = result;
          v143 = (__int16 *)((char *)v143 + v144);
          v146 = (__int16 *)((char *)v146 + v145);
          --v142;
        }
        while (v142);
        goto LABEL_58;
      }
      if (v13 + v280 + v129 * v124 >= v126 + v279 + 2 * v125 + v130 * v124
        || v126 + v279 + v130 * v124 >= v13 + v280 + 2 * v125 + v129 * v124)
      {
        v140 = v135 + v131;
        v153 = v133;
        v154 = v134;
        v155 = v125 & 0xFFFFFFFFFFFFFFF0;
        v141 = v136 + v131;
        do
        {
          _Q3 = *(_OWORD *)(v153 - 16);
          _Q0 = *(_OWORD *)v153;
          _Q4 = *(_OWORD *)(v154 - 16);
          _Q1 = *(_OWORD *)v154;
          _H2 = WORD1(_Q3);
          __asm { FCVT            S2, H2 }
          _H5 = WORD1(_Q4);
          __asm { FCVT            S5, H5 }
          _S2 = _S5 - _S2;
          __asm
          {
            FCVT            H5, S2
            FCVT            S2, H3
            FCVT            S6, H4
          }
          *(float *)&_Q2 = _S6 - _S2;
          __asm { FCVT            H2, S2 }
          WORD1(_Q2) = LOWORD(_S5);
          LOWORD(_S5) = WORD2(*(_QWORD *)(v153 - 16));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = WORD2(*(_QWORD *)(v154 - 16));
          __asm { FCVT            S6, H6 }
          _S5 = _S6 - _S5;
          __asm { FCVT            H5, S5 }
          WORD2(_Q2) = LOWORD(_S5);
          LOWORD(_S5) = HIWORD(*(_QWORD *)(v153 - 16));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = HIWORD(*(_QWORD *)(v154 - 16));
          __asm { FCVT            S6, H6 }
          _S5 = _S6 - _S5;
          __asm { FCVT            H5, S5 }
          WORD3(_Q2) = LOWORD(_S5);
          LOWORD(_S5) = *(_QWORD *)(v153 - 8);
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *(_QWORD *)(v154 - 8);
          __asm { FCVT            S6, H6 }
          _S5 = _S6 - _S5;
          __asm { FCVT            H5, S5 }
          WORD4(_Q2) = LOWORD(_S5);
          LOWORD(_S5) = WORD1(*(_QWORD *)(v153 - 8));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = WORD1(*(_QWORD *)(v154 - 8));
          __asm { FCVT            S6, H6 }
          _S5 = _S6 - _S5;
          __asm { FCVT            H5, S5 }
          WORD5(_Q2) = LOWORD(_S5);
          LOWORD(_S5) = WORD6(_Q3);
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = WORD6(_Q4);
          __asm { FCVT            S6, H6 }
          _S5 = _S6 - _S5;
          __asm { FCVT            H5, S5 }
          WORD6(_Q2) = LOWORD(_S5);
          LOWORD(_Q3) = HIWORD(_Q3);
          __asm { FCVT            S3, H3 }
          LOWORD(_Q4) = HIWORD(_Q4);
          __asm { FCVT            S4, H4 }
          *(float *)&_Q3 = *(float *)&_Q4 - *(float *)&_Q3;
          __asm { FCVT            H3, S3 }
          HIWORD(_Q2) = _Q3;
          LOWORD(_Q3) = WORD1(*(_OWORD *)v153);
          __asm { FCVT            S3, H3 }
          LOWORD(_Q4) = WORD1(*(_OWORD *)v154);
          __asm { FCVT            S4, H4 }
          *(float *)&_Q3 = *(float *)&_Q4 - *(float *)&_Q3;
          __asm
          {
            FCVT            H3, S3
            FCVT            S4, H0
            FCVT            S5, H1
          }
          *(float *)&_Q4 = _S5 - *(float *)&_Q4;
          __asm { FCVT            H4, S4 }
          WORD1(_Q4) = _Q3;
          LOWORD(_Q3) = WORD2(*(_QWORD *)v153);
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = WORD2(*(_QWORD *)v154);
          __asm { FCVT            S5, H5 }
          *(float *)&_Q3 = _S5 - *(float *)&_Q3;
          __asm { FCVT            H3, S3 }
          WORD2(_Q4) = _Q3;
          LOWORD(_Q3) = HIWORD(*(_QWORD *)v153);
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = HIWORD(*(_QWORD *)v154);
          __asm { FCVT            S5, H5 }
          *(float *)&_Q3 = _S5 - *(float *)&_Q3;
          __asm { FCVT            H3, S3 }
          WORD3(_Q4) = _Q3;
          LOWORD(_Q3) = *(_QWORD *)(v153 + 8);
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = *(_QWORD *)(v154 + 8);
          __asm { FCVT            S5, H5 }
          *(float *)&_Q3 = _S5 - *(float *)&_Q3;
          __asm { FCVT            H3, S3 }
          WORD4(_Q4) = _Q3;
          LOWORD(_Q3) = WORD1(*(_QWORD *)(v153 + 8));
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = WORD1(*(_QWORD *)(v154 + 8));
          __asm { FCVT            S5, H5 }
          *(float *)&_Q3 = _S5 - *(float *)&_Q3;
          __asm { FCVT            H3, S3 }
          WORD5(_Q4) = _Q3;
          LOWORD(_Q3) = WORD6(*(_OWORD *)v153);
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = WORD6(*(_OWORD *)v154);
          __asm { FCVT            S5, H5 }
          *(float *)&_Q3 = _S5 - *(float *)&_Q3;
          __asm { FCVT            H3, S3 }
          WORD6(_Q4) = _Q3;
          LOWORD(_Q0) = HIWORD(*(_OWORD *)v153);
          __asm { FCVT            S0, H0 }
          LOWORD(_Q1) = HIWORD(*(_OWORD *)v154);
          __asm { FCVT            S1, H1 }
          *(float *)&_Q0 = *(float *)&_Q1 - *(float *)&_Q0;
          __asm { FCVT            H0, S0 }
          HIWORD(_Q4) = result;
          *(_OWORD *)(v154 - 16) = _Q2;
          *(_OWORD *)v154 = _Q4;
          v154 += 32;
          v153 += 32;
          v155 -= 16;
        }
        while (v155);
        v139 = v125 & 0xFFFFFFFFFFFFFFF0;
        if (v125 == v131)
          goto LABEL_58;
        goto LABEL_63;
      }
    }
    v139 = 0;
LABEL_62:
    v140 = v135;
    v141 = v136;
    goto LABEL_63;
  }
  if (v22 == 2)
  {
    v46 = *v4;
    if (!*v4)
      return result;
    v47 = 0;
    v48 = a2[8];
    v49 = a1[8];
    v50 = v4[1];
    v51 = (uint64_t *)a2[5];
    v52 = (uint64_t *)a1[5];
    v53 = *v52;
    v54 = *v51;
    v55 = 2 * *v52;
    v56 = 2 * *v51;
    v57 = v50 & 0xFFFFFFFFFFFFFFF0;
    v58 = *a2;
    v59 = 2 * v49 + v13 + 16;
    v60 = 2 * v48 + *a2 + 16;
    v61 = v13 + 2 * v49;
    v62 = v13 + 2 * v49 + 2 * v50;
    v63 = *a2 + 2 * v48;
    v64 = *a2 + 2 * v48 + 2 * v50;
    while (!v50)
    {
LABEL_34:
      v49 += v53;
      v48 += v54;
      ++v47;
      v59 += v55;
      v60 += v56;
      if (v47 == v46)
        return result;
    }
    v65 = v52[1];
    v66 = v51[1];
    if (v50 >= 0x10)
    {
      v67 = 0;
      if (v65 != 1)
        goto LABEL_38;
      v68 = v48;
      v69 = v49;
      if (v66 != 1)
      {
LABEL_39:
        v70 = v50 - v67;
        v71 = (__int16 *)(v58 + 2 * v68);
        v72 = 2 * v66;
        v73 = 2 * v65;
        v74 = (__int16 *)(v13 + 2 * v69);
        do
        {
          _H0 = *v71;
          _H1 = *v74;
          __asm
          {
            FCVT            S0, H0
            FCVT            S1, H1
          }
          _S0 = _S1 - _S0;
          __asm { FCVT            H0, S0 }
          *v74 = result;
          v71 = (__int16 *)((char *)v71 + v72);
          v74 = (__int16 *)((char *)v74 + v73);
          --v70;
        }
        while (v70);
        goto LABEL_34;
      }
      if (v61 + v55 * v47 >= (unint64_t)(v64 + v56 * v47)
        || v63 + v56 * v47 >= (unint64_t)(v62 + v55 * v47))
      {
        v68 = v48 + v57;
        v81 = v60;
        v82 = v59;
        v83 = v50 & 0xFFFFFFFFFFFFFFF0;
        v69 = v49 + v57;
        do
        {
          _Q3 = *(_OWORD *)(v81 - 16);
          _Q0 = *(_OWORD *)v81;
          _Q4 = *(_OWORD *)(v82 - 16);
          _Q1 = *(_OWORD *)v82;
          _H2 = WORD1(_Q3);
          __asm { FCVT            S2, H2 }
          _H5 = WORD1(_Q4);
          __asm { FCVT            S5, H5 }
          _S2 = _S5 - _S2;
          __asm
          {
            FCVT            H5, S2
            FCVT            S2, H3
            FCVT            S6, H4
          }
          *(float *)&_Q2 = _S6 - _S2;
          __asm { FCVT            H2, S2 }
          WORD1(_Q2) = LOWORD(_S5);
          LOWORD(_S5) = WORD2(*(_QWORD *)(v81 - 16));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = WORD2(*(_QWORD *)(v82 - 16));
          __asm { FCVT            S6, H6 }
          _S5 = _S6 - _S5;
          __asm { FCVT            H5, S5 }
          WORD2(_Q2) = LOWORD(_S5);
          LOWORD(_S5) = HIWORD(*(_QWORD *)(v81 - 16));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = HIWORD(*(_QWORD *)(v82 - 16));
          __asm { FCVT            S6, H6 }
          _S5 = _S6 - _S5;
          __asm { FCVT            H5, S5 }
          WORD3(_Q2) = LOWORD(_S5);
          LOWORD(_S5) = *(_QWORD *)(v81 - 8);
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *(_QWORD *)(v82 - 8);
          __asm { FCVT            S6, H6 }
          _S5 = _S6 - _S5;
          __asm { FCVT            H5, S5 }
          WORD4(_Q2) = LOWORD(_S5);
          LOWORD(_S5) = WORD1(*(_QWORD *)(v81 - 8));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = WORD1(*(_QWORD *)(v82 - 8));
          __asm { FCVT            S6, H6 }
          _S5 = _S6 - _S5;
          __asm { FCVT            H5, S5 }
          WORD5(_Q2) = LOWORD(_S5);
          LOWORD(_S5) = WORD6(_Q3);
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = WORD6(_Q4);
          __asm { FCVT            S6, H6 }
          _S5 = _S6 - _S5;
          __asm { FCVT            H5, S5 }
          WORD6(_Q2) = LOWORD(_S5);
          LOWORD(_Q3) = HIWORD(_Q3);
          __asm { FCVT            S3, H3 }
          LOWORD(_Q4) = HIWORD(_Q4);
          __asm { FCVT            S4, H4 }
          *(float *)&_Q3 = *(float *)&_Q4 - *(float *)&_Q3;
          __asm { FCVT            H3, S3 }
          HIWORD(_Q2) = _Q3;
          LOWORD(_Q3) = WORD1(*(_OWORD *)v81);
          __asm { FCVT            S3, H3 }
          LOWORD(_Q4) = WORD1(*(_OWORD *)v82);
          __asm { FCVT            S4, H4 }
          *(float *)&_Q3 = *(float *)&_Q4 - *(float *)&_Q3;
          __asm
          {
            FCVT            H3, S3
            FCVT            S4, H0
            FCVT            S5, H1
          }
          *(float *)&_Q4 = _S5 - *(float *)&_Q4;
          __asm { FCVT            H4, S4 }
          WORD1(_Q4) = _Q3;
          LOWORD(_Q3) = WORD2(*(_QWORD *)v81);
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = WORD2(*(_QWORD *)v82);
          __asm { FCVT            S5, H5 }
          *(float *)&_Q3 = _S5 - *(float *)&_Q3;
          __asm { FCVT            H3, S3 }
          WORD2(_Q4) = _Q3;
          LOWORD(_Q3) = HIWORD(*(_QWORD *)v81);
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = HIWORD(*(_QWORD *)v82);
          __asm { FCVT            S5, H5 }
          *(float *)&_Q3 = _S5 - *(float *)&_Q3;
          __asm { FCVT            H3, S3 }
          WORD3(_Q4) = _Q3;
          LOWORD(_Q3) = *(_QWORD *)(v81 + 8);
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = *(_QWORD *)(v82 + 8);
          __asm { FCVT            S5, H5 }
          *(float *)&_Q3 = _S5 - *(float *)&_Q3;
          __asm { FCVT            H3, S3 }
          WORD4(_Q4) = _Q3;
          LOWORD(_Q3) = WORD1(*(_QWORD *)(v81 + 8));
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = WORD1(*(_QWORD *)(v82 + 8));
          __asm { FCVT            S5, H5 }
          *(float *)&_Q3 = _S5 - *(float *)&_Q3;
          __asm { FCVT            H3, S3 }
          WORD5(_Q4) = _Q3;
          LOWORD(_Q3) = WORD6(*(_OWORD *)v81);
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = WORD6(*(_OWORD *)v82);
          __asm { FCVT            S5, H5 }
          *(float *)&_Q3 = _S5 - *(float *)&_Q3;
          __asm { FCVT            H3, S3 }
          WORD6(_Q4) = _Q3;
          LOWORD(_Q0) = HIWORD(*(_OWORD *)v81);
          __asm { FCVT            S0, H0 }
          LOWORD(_Q1) = HIWORD(*(_OWORD *)v82);
          __asm { FCVT            S1, H1 }
          *(float *)&_Q0 = *(float *)&_Q1 - *(float *)&_Q0;
          __asm { FCVT            H0, S0 }
          HIWORD(_Q4) = result;
          *(_OWORD *)(v82 - 16) = _Q2;
          *(_OWORD *)v82 = _Q4;
          v82 += 32;
          v81 += 32;
          v83 -= 16;
        }
        while (v83);
        v67 = v50 & 0xFFFFFFFFFFFFFFF0;
        if (v50 == v57)
          goto LABEL_34;
        goto LABEL_39;
      }
    }
    v67 = 0;
LABEL_38:
    v68 = v48;
    v69 = v49;
    goto LABEL_39;
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v189 = operator new(v12);
    bzero(v189, v12 & 0xFFFFFFFFFFFFFFF8);
    v190 = *a2;
    if (v12 >> 3 <= 1)
      v191 = 1;
    else
      v191 = v12 >> 3;
    v192 = a2[5];
    v193 = a2[8];
    v194 = v191 & 0x1FFFFFFFFFFFFFFELL;
    v195 = a1[5];
    while (v191 >= 2)
    {
      v198 = 0;
      v199 = 0;
      v200 = v191 & 0x1FFFFFFFFFFFFFFELL;
      v201 = (_QWORD *)(v195 + 8);
      v202 = v189 + 1;
      do
      {
        v198 += *(v201 - 1) * *(v202 - 1);
        v199 += *v201 * *v202;
        v202 += 2;
        v201 += 2;
        v200 -= 2;
      }
      while (v200);
      v196 = v199 + v198;
      v197 = v191 & 0x1FFFFFFFFFFFFFFELL;
      if (v191 != v194)
        goto LABEL_87;
LABEL_89:
      if (v191 < 2)
      {
        v210 = 0;
        v211 = 0;
LABEL_94:
        v217 = v191 - v211;
        v218 = v211;
        v219 = (uint64_t *)(v192 + 8 * v211);
        v220 = &v189[v218];
        do
        {
          v222 = *v220++;
          v221 = v222;
          v223 = *v219++;
          v210 += v223 * v221;
          --v217;
        }
        while (v217);
        goto LABEL_96;
      }
      v212 = 0;
      v213 = 0;
      v214 = v191 & 0x1FFFFFFFFFFFFFFELL;
      v215 = (_QWORD *)(v192 + 8);
      v216 = v189 + 1;
      do
      {
        v212 += *(v215 - 1) * *(v216 - 1);
        v213 += *v215 * *v216;
        v216 += 2;
        v215 += 2;
        v214 -= 2;
      }
      while (v214);
      v210 = v213 + v212;
      v211 = v191 & 0x1FFFFFFFFFFFFFFELL;
      if (v191 != v194)
        goto LABEL_94;
LABEL_96:
      _H0 = *(_WORD *)(v190 + 2 * (v193 + v210));
      v225 = 2 * v196;
      _H1 = *(_WORD *)(v13 + v225);
      __asm
      {
        FCVT            S0, H0
        FCVT            S1, H1
      }
      _S0 = _S1 - _S0;
      __asm { FCVT            H0, S0 }
      *(_WORD *)(v13 + v225) = LOWORD(_S0);
      if ((int)(v12 >> 3) >= 1)
      {
        v230 = (v12 >> 3) + 1;
        v231 = v12 >> 3;
        while (1)
        {
          v232 = (v230 - 2);
          v233 = v189[v232] + 1;
          v189[v232] = v233;
          if (v233 < v4[v232])
            break;
          v189[(v230 - 2)] = 0;
          --v231;
          if ((unint64_t)--v230 <= 1)
            goto LABEL_102;
        }
        if (v231 > 0)
          continue;
      }
LABEL_102:
      operator delete(v189);
      return result;
    }
    v196 = 0;
    v197 = 0;
LABEL_87:
    v203 = v191 - v197;
    v204 = v197;
    v205 = (uint64_t *)(v195 + 8 * v197);
    v206 = &v189[v204];
    do
    {
      v208 = *v206++;
      v207 = v208;
      v209 = *v205++;
      v196 += v209 * v207;
      --v203;
    }
    while (v203);
    goto LABEL_89;
  }
  v23 = *v4;
  if (!*v4)
    return result;
  v24 = a2[8];
  v25 = a1[8];
  v26 = *a2;
  v27 = *(_QWORD *)a1[5];
  v28 = *(_QWORD *)a2[5];
  if (v23 < 0x10)
    goto LABEL_27;
  v29 = 0;
  if (v27 != 1 || v28 != 1)
    goto LABEL_28;
  if (v13 + 2 * v25 < v26 + 2 * v23 + 2 * v24 && v26 + 2 * v24 < v13 + 2 * v23 + 2 * v25)
  {
LABEL_27:
    v29 = 0;
LABEL_28:
    v30 = a2[8];
    v31 = a1[8];
LABEL_29:
    v32 = v23 - v29;
    v33 = (__int16 *)(v26 + 2 * v30);
    v34 = 2 * v28;
    v35 = 2 * v27;
    v36 = (__int16 *)(v13 + 2 * v31);
    do
    {
      _H0 = *v33;
      _H1 = *v36;
      __asm
      {
        FCVT            S0, H0
        FCVT            S1, H1
      }
      _S0 = _S1 - _S0;
      __asm { FCVT            H0, S0 }
      *v36 = result;
      v33 = (__int16 *)((char *)v33 + v34);
      v36 = (__int16 *)((char *)v36 + v35);
      --v32;
    }
    while (v32);
    return result;
  }
  v29 = v23 & 0xFFFFFFFFFFFFFFF0;
  v30 = v24 + (v23 & 0xFFFFFFFFFFFFFFF0);
  v31 = v25 + (v23 & 0xFFFFFFFFFFFFFFF0);
  v234 = v26 + 2 * v24 + 16;
  v235 = v13 + 2 * v25 + 16;
  v236 = v23 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    _Q3 = *(_OWORD *)(v234 - 16);
    _Q0 = *(_OWORD *)v234;
    _Q4 = *(_OWORD *)(v235 - 16);
    _Q1 = *(_OWORD *)v235;
    _H2 = WORD1(_Q3);
    __asm { FCVT            S2, H2 }
    _H5 = WORD1(_Q4);
    __asm { FCVT            S5, H5 }
    _S2 = _S5 - _S2;
    __asm
    {
      FCVT            H5, S2
      FCVT            S2, H3
      FCVT            S6, H4
    }
    *(float *)&_Q2 = _S6 - _S2;
    __asm { FCVT            H2, S2 }
    WORD1(_Q2) = LOWORD(_S5);
    LOWORD(_S5) = WORD2(*(_QWORD *)(v234 - 16));
    __asm { FCVT            S5, H5 }
    LOWORD(_S6) = WORD2(*(_QWORD *)(v235 - 16));
    __asm { FCVT            S6, H6 }
    _S5 = _S6 - _S5;
    __asm { FCVT            H5, S5 }
    WORD2(_Q2) = LOWORD(_S5);
    LOWORD(_S5) = HIWORD(*(_QWORD *)(v234 - 16));
    __asm { FCVT            S5, H5 }
    LOWORD(_S6) = HIWORD(*(_QWORD *)(v235 - 16));
    __asm { FCVT            S6, H6 }
    _S5 = _S6 - _S5;
    __asm { FCVT            H5, S5 }
    WORD3(_Q2) = LOWORD(_S5);
    LOWORD(_S5) = *(_QWORD *)(v234 - 8);
    __asm { FCVT            S5, H5 }
    LOWORD(_S6) = *(_QWORD *)(v235 - 8);
    __asm { FCVT            S6, H6 }
    _S5 = _S6 - _S5;
    __asm { FCVT            H5, S5 }
    WORD4(_Q2) = LOWORD(_S5);
    LOWORD(_S5) = WORD1(*(_QWORD *)(v234 - 8));
    __asm { FCVT            S5, H5 }
    LOWORD(_S6) = WORD1(*(_QWORD *)(v235 - 8));
    __asm { FCVT            S6, H6 }
    _S5 = _S6 - _S5;
    __asm { FCVT            H5, S5 }
    WORD5(_Q2) = LOWORD(_S5);
    LOWORD(_S5) = WORD6(_Q3);
    __asm { FCVT            S5, H5 }
    LOWORD(_S6) = WORD6(_Q4);
    __asm { FCVT            S6, H6 }
    _S5 = _S6 - _S5;
    __asm { FCVT            H5, S5 }
    WORD6(_Q2) = LOWORD(_S5);
    LOWORD(_Q3) = HIWORD(_Q3);
    __asm { FCVT            S3, H3 }
    LOWORD(_Q4) = HIWORD(_Q4);
    __asm { FCVT            S4, H4 }
    *(float *)&_Q3 = *(float *)&_Q4 - *(float *)&_Q3;
    __asm { FCVT            H3, S3 }
    HIWORD(_Q2) = _Q3;
    LOWORD(_Q3) = WORD1(*(_OWORD *)v234);
    __asm { FCVT            S3, H3 }
    LOWORD(_Q4) = WORD1(*(_OWORD *)v235);
    __asm { FCVT            S4, H4 }
    *(float *)&_Q3 = *(float *)&_Q4 - *(float *)&_Q3;
    __asm
    {
      FCVT            H3, S3
      FCVT            S4, H0
      FCVT            S5, H1
    }
    *(float *)&_Q4 = _S5 - *(float *)&_Q4;
    __asm { FCVT            H4, S4 }
    WORD1(_Q4) = _Q3;
    LOWORD(_Q3) = WORD2(*(_QWORD *)v234);
    __asm { FCVT            S3, H3 }
    LOWORD(_S5) = WORD2(*(_QWORD *)v235);
    __asm { FCVT            S5, H5 }
    *(float *)&_Q3 = _S5 - *(float *)&_Q3;
    __asm { FCVT            H3, S3 }
    WORD2(_Q4) = _Q3;
    LOWORD(_Q3) = HIWORD(*(_QWORD *)v234);
    __asm { FCVT            S3, H3 }
    LOWORD(_S5) = HIWORD(*(_QWORD *)v235);
    __asm { FCVT            S5, H5 }
    *(float *)&_Q3 = _S5 - *(float *)&_Q3;
    __asm { FCVT            H3, S3 }
    WORD3(_Q4) = _Q3;
    LOWORD(_Q3) = *(_QWORD *)(v234 + 8);
    __asm { FCVT            S3, H3 }
    LOWORD(_S5) = *(_QWORD *)(v235 + 8);
    __asm { FCVT            S5, H5 }
    *(float *)&_Q3 = _S5 - *(float *)&_Q3;
    __asm { FCVT            H3, S3 }
    WORD4(_Q4) = _Q3;
    LOWORD(_Q3) = WORD1(*(_QWORD *)(v234 + 8));
    __asm { FCVT            S3, H3 }
    LOWORD(_S5) = WORD1(*(_QWORD *)(v235 + 8));
    __asm { FCVT            S5, H5 }
    *(float *)&_Q3 = _S5 - *(float *)&_Q3;
    __asm { FCVT            H3, S3 }
    WORD5(_Q4) = _Q3;
    LOWORD(_Q3) = WORD6(*(_OWORD *)v234);
    __asm { FCVT            S3, H3 }
    LOWORD(_S5) = WORD6(*(_OWORD *)v235);
    __asm { FCVT            S5, H5 }
    *(float *)&_Q3 = _S5 - *(float *)&_Q3;
    __asm { FCVT            H3, S3 }
    WORD6(_Q4) = _Q3;
    LOWORD(_Q0) = HIWORD(*(_OWORD *)v234);
    __asm { FCVT            S0, H0 }
    LOWORD(_Q1) = HIWORD(*(_OWORD *)v235);
    __asm { FCVT            S1, H1 }
    *(float *)&_Q0 = *(float *)&_Q1 - *(float *)&_Q0;
    __asm { FCVT            H0, S0 }
    HIWORD(_Q4) = result;
    *(_OWORD *)(v235 - 16) = _Q2;
    *(_OWORD *)v235 = _Q4;
    v234 += 32;
    v235 += 32;
    v236 -= 16;
  }
  while (v236);
  if (v23 != v29)
    goto LABEL_29;
  return result;
}

void sub_1911C33C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::operator-<half>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<half>::copy((uint64_t)a1, a3);
    nitro::ndarray<half>::operator-=<half>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<half>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<half>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<half>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<half>::operator-=<half>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911C3720(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911C3734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911C37D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911C37ACLL);
  JUMPOUT(0x1911C377CLL);
}

void sub_1911C37E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911C37BCLL);
  JUMPOUT(0x1911C3784);
}

void sub_1911C37F0()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911C3794);
  JUMPOUT(0x1911C378CLL);
}

void nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911C3A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911C3C08(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911C3C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911C3C14);
}

uint64_t *nitro::ndarray<float>::operator-=<half>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;

  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  v5 = v4 - v3;
  if (v4 == v3 || !*a1)
    return a1;
  if ((unint64_t)(v5 - 8) < 8)
  {
    v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6)
  {
    v14 = v5 >> 3;
    v15 = (_QWORD *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3)
      goto LABEL_19;
    v16 = v14 <= 1 ? 1 : v14;
    if (*(_QWORD *)v3 != *v15)
      goto LABEL_19;
    v17 = 1;
    do
    {
      v18 = v17;
      if (v16 == v17)
        break;
      v19 = *(_QWORD *)&v3[8 * v17];
      v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 >= v14)
    {
      nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(a1, a2);
    }
    else
    {
LABEL_19:
      nitro::ndarray<float>::operator-<half>(a1, a2, &v25);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v25);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  return a1;
}

void nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int16 *v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  __int16 *v62;
  uint64_t v63;
  uint64_t v64;
  float *v65;
  float16x4_t *v68;
  float32x4_t *v69;
  unint64_t v70;
  float16x8_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  float16x4_t *v88;
  uint64_t v89;
  float32x4_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  __int16 *v100;
  uint64_t v101;
  uint64_t v102;
  float *v103;
  float16x4_t *v106;
  float32x4_t *v107;
  unint64_t v108;
  float16x8_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  _QWORD *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v150;
  int v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  float16x4_t *v156;
  float32x4_t *v157;
  unint64_t v158;
  float16x8_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return;
  v13 = *a1;
  if (!*a1)
    return;
  if (v12 - 8 < 8)
  {
    v14 = 1;
    v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v16 = ((v12 - 8) >> 3) + 1;
  v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  v17 = v4 + 1;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v168 = *v4;
    if (!*v4)
      return;
    v75 = 0;
    v76 = a2[8];
    v77 = a1[8];
    v78 = v4[1];
    v79 = (uint64_t *)a1[5];
    v163 = (uint64_t *)a2[5];
    v80 = v13 + 4 * v77 + 32;
    v166 = *v163;
    v167 = *v79;
    v165 = 4 * *v79;
    v81 = 2 * v76 + 16;
    v164 = 2 * *v163;
    while (!v78)
    {
LABEL_50:
      v77 += v167;
      v76 += v166;
      ++v75;
      v80 += v165;
      v81 += v164;
      if (v75 == v168)
        return;
    }
    v82 = 0;
    v83 = v4[2];
    v84 = *a2;
    v85 = a2[5];
    v86 = v79[1];
    v87 = v83 & 0xFFFFFFFFFFFFFFF0;
    v88 = (float16x4_t *)(*a2 + v81);
    v89 = v163[1];
    v90 = (float32x4_t *)v80;
    v91 = v76;
    v92 = v77;
    while (1)
    {
      if (v83)
      {
        v93 = v79[2];
        v94 = *(_QWORD *)(v85 + 16);
        if (v83 >= 0x10 && (v93 == 1 ? (v95 = v94 == 1) : (v95 = 0), v95))
        {
          v97 = v91 + v87 * v94;
          v106 = v88;
          v107 = v90;
          v108 = v83 & 0xFFFFFFFFFFFFFFF0;
          v98 = v92 + v87 * v93;
          do
          {
            v109 = *(float16x8_t *)v106[-2].i8;
            v110 = vsubq_f32(v107[-1], vcvt_hight_f32_f16(v109));
            v111 = vsubq_f32(*v107, vcvtq_f32_f16(*v106));
            v112 = vsubq_f32(v107[1], vcvt_hight_f32_f16(*(float16x8_t *)v106->i8));
            v107[-2] = vsubq_f32(v107[-2], vcvtq_f32_f16(*(float16x4_t *)v109.i8));
            v107[-1] = v110;
            *v107 = v111;
            v107[1] = v112;
            v107 += 4;
            v106 += 4;
            v108 -= 16;
          }
          while (v108);
          v96 = v83 & 0xFFFFFFFFFFFFFFF0;
          if (v83 == v87)
            goto LABEL_53;
        }
        else
        {
          v96 = 0;
          v97 = v91;
          v98 = v92;
        }
        v99 = v83 - v96;
        v100 = (__int16 *)(v84 + 2 * v97);
        v101 = 2 * v94;
        v102 = 4 * v93;
        v103 = (float *)(v13 + 4 * v98);
        do
        {
          _H0 = *v100;
          __asm { FCVT            S0, H0 }
          *v103 = *v103 - _S0;
          v100 = (__int16 *)((char *)v100 + v101);
          v103 = (float *)((char *)v103 + v102);
          --v99;
        }
        while (v99);
      }
LABEL_53:
      v92 += v86;
      v91 += v89;
      ++v82;
      v90 = (float32x4_t *)((char *)v90 + 4 * v86);
      v88 = (float16x4_t *)((char *)v88 + 2 * v89);
      if (v82 == v78)
        goto LABEL_50;
    }
  }
  if (v22 == 2)
  {
    v40 = *v4;
    if (!*v4)
      return;
    v41 = 0;
    v42 = a2[8];
    v43 = a1[8];
    v44 = v4[1];
    v45 = *a2;
    v46 = (uint64_t *)a2[5];
    v47 = (uint64_t *)a1[5];
    v48 = *v47;
    v49 = *v46;
    v50 = v44 & 0xFFFFFFFFFFFFFFF0;
    v51 = v13 + 4 * v43 + 32;
    v52 = 4 * *v47;
    v53 = *a2 + 2 * v42 + 16;
    v54 = 2 * *v46;
    while (1)
    {
      if (v44)
      {
        v55 = v47[1];
        v56 = v46[1];
        if (v44 >= 0x10 && (v55 == 1 ? (_ZF = v56 == 1) : (_ZF = 0), _ZF))
        {
          v59 = v42 + v50 * v56;
          v68 = (float16x4_t *)v53;
          v69 = (float32x4_t *)v51;
          v70 = v44 & 0xFFFFFFFFFFFFFFF0;
          v60 = v43 + v50 * v55;
          do
          {
            v71 = *(float16x8_t *)v68[-2].i8;
            v72 = vsubq_f32(v69[-1], vcvt_hight_f32_f16(v71));
            v73 = vsubq_f32(*v69, vcvtq_f32_f16(*v68));
            v74 = vsubq_f32(v69[1], vcvt_hight_f32_f16(*(float16x8_t *)v68->i8));
            v69[-2] = vsubq_f32(v69[-2], vcvtq_f32_f16(*(float16x4_t *)v71.i8));
            v69[-1] = v72;
            *v69 = v73;
            v69[1] = v74;
            v69 += 4;
            v68 += 4;
            v70 -= 16;
          }
          while (v70);
          v58 = v44 & 0xFFFFFFFFFFFFFFF0;
          if (v44 == v50)
            goto LABEL_33;
        }
        else
        {
          v58 = 0;
          v59 = v42;
          v60 = v43;
        }
        v61 = v44 - v58;
        v62 = (__int16 *)(v45 + 2 * v59);
        v63 = 2 * v56;
        v64 = 4 * v55;
        v65 = (float *)(v13 + 4 * v60);
        do
        {
          _H0 = *v62;
          __asm { FCVT            S0, H0 }
          *v65 = *v65 - _S0;
          v62 = (__int16 *)((char *)v62 + v63);
          v65 = (float *)((char *)v65 + v64);
          --v61;
        }
        while (v61);
      }
LABEL_33:
      v43 += v48;
      v42 += v49;
      ++v41;
      v51 += v52;
      v53 += v54;
      if (v41 == v40)
        return;
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v113 = operator new(v12);
    bzero(v113, v12 & 0xFFFFFFFFFFFFFFF8);
    v114 = *a2;
    if (v12 >> 3 <= 1)
      v115 = 1;
    else
      v115 = v12 >> 3;
    v116 = a2[5];
    v117 = a2[8];
    v118 = v115 & 0x1FFFFFFFFFFFFFFELL;
    v119 = a1[5];
    while (v115 >= 2)
    {
      v122 = 0;
      v123 = 0;
      v124 = v115 & 0x1FFFFFFFFFFFFFFELL;
      v125 = (_QWORD *)(v119 + 8);
      v126 = v113 + 1;
      do
      {
        v122 += *(v125 - 1) * *(v126 - 1);
        v123 += *v125 * *v126;
        v126 += 2;
        v125 += 2;
        v124 -= 2;
      }
      while (v124);
      v120 = v123 + v122;
      v121 = v115 & 0x1FFFFFFFFFFFFFFELL;
      if (v115 != v118)
        goto LABEL_78;
LABEL_80:
      if (v115 < 2)
      {
        v134 = 0;
        v135 = 0;
LABEL_85:
        v141 = v115 - v135;
        v142 = v135;
        v143 = (uint64_t *)(v116 + 8 * v135);
        v144 = &v113[v142];
        do
        {
          v146 = *v144++;
          v145 = v146;
          v147 = *v143++;
          v134 += v147 * v145;
          --v141;
        }
        while (v141);
        goto LABEL_87;
      }
      v136 = 0;
      v137 = 0;
      v138 = v115 & 0x1FFFFFFFFFFFFFFELL;
      v139 = (_QWORD *)(v116 + 8);
      v140 = v113 + 1;
      do
      {
        v136 += *(v139 - 1) * *(v140 - 1);
        v137 += *v139 * *v140;
        v140 += 2;
        v139 += 2;
        v138 -= 2;
      }
      while (v138);
      v134 = v137 + v136;
      v135 = v115 & 0x1FFFFFFFFFFFFFFELL;
      if (v115 != v118)
        goto LABEL_85;
LABEL_87:
      _H0 = *(_WORD *)(v114 + 2 * (v117 + v134));
      __asm { FCVT            S0, H0 }
      *(float *)(v13 + 4 * v120) = *(float *)(v13 + 4 * v120) - _S0;
      if ((int)(v12 >> 3) >= 1)
      {
        v150 = (v12 >> 3) + 1;
        v151 = v12 >> 3;
        while (1)
        {
          v152 = (v150 - 2);
          v153 = v113[v152] + 1;
          v113[v152] = v153;
          if (v153 < v4[v152])
            break;
          v113[(v150 - 2)] = 0;
          --v151;
          if ((unint64_t)--v150 <= 1)
            goto LABEL_93;
        }
        if (v151 > 0)
          continue;
      }
LABEL_93:
      operator delete(v113);
      return;
    }
    v120 = 0;
    v121 = 0;
LABEL_78:
    v127 = v115 - v121;
    v128 = v121;
    v129 = (uint64_t *)(v119 + 8 * v121);
    v130 = &v113[v128];
    do
    {
      v132 = *v130++;
      v131 = v132;
      v133 = *v129++;
      v120 += v133 * v131;
      --v127;
    }
    while (v127);
    goto LABEL_80;
  }
  v23 = *v4;
  if (!*v4)
    return;
  v24 = a2[8];
  v25 = a1[8];
  v26 = *a2;
  v27 = *(_QWORD *)a1[5];
  v28 = *(_QWORD *)a2[5];
  if (v23 < 0x10)
  {
    v29 = 0;
LABEL_28:
    v30 = v23 - v29;
    v31 = (__int16 *)(v26 + 2 * v24);
    v32 = 2 * v28;
    v33 = 4 * v27;
    v34 = (float *)(v13 + 4 * v25);
    do
    {
      _H0 = *v31;
      __asm { FCVT            S0, H0 }
      *v34 = *v34 - _S0;
      v31 = (__int16 *)((char *)v31 + v32);
      v34 = (float *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  v29 = 0;
  if (v27 != 1)
    goto LABEL_28;
  if (v28 != 1)
    goto LABEL_28;
  v29 = v23 & 0xFFFFFFFFFFFFFFF0;
  v154 = v24 + (v23 & 0xFFFFFFFFFFFFFFF0);
  v155 = v25 + (v23 & 0xFFFFFFFFFFFFFFF0);
  v156 = (float16x4_t *)(v26 + 2 * v24 + 16);
  v157 = (float32x4_t *)(v13 + 4 * v25 + 32);
  v158 = v23 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v159 = *(float16x8_t *)v156[-2].i8;
    v160 = vsubq_f32(v157[-1], vcvt_hight_f32_f16(v159));
    v161 = vsubq_f32(*v157, vcvtq_f32_f16(*v156));
    v162 = vsubq_f32(v157[1], vcvt_hight_f32_f16(*(float16x8_t *)v156->i8));
    v157[-2] = vsubq_f32(v157[-2], vcvtq_f32_f16(*(float16x4_t *)v159.i8));
    v157[-1] = v160;
    *v157 = v161;
    v157[1] = v162;
    v157 += 4;
    v156 += 4;
    v158 -= 16;
  }
  while (v158);
  v24 = v154;
  v25 = v155;
  if (v23 != v29)
    goto LABEL_28;
}

void sub_1911C44DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::operator-<half>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<float>::copy((uint64_t)a1, a3);
    nitro::ndarray<float>::operator-=<half>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<float>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<float>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<half>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<float>::operator-=<half>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911C483C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911C4850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911C48EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911C48C8);
  JUMPOUT(0x1911C4898);
}

void sub_1911C48FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911C48D8);
  JUMPOUT(0x1911C48A0);
}

void sub_1911C490C()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911C48B0);
  JUMPOUT(0x1911C48A8);
}

void nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911C4B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911C4D24(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911C4D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911C4D30);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1911C5068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1911C50D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

_QWORD *nitro::ndarray<unsigned char>::operator-=<float>(_QWORD *a1, _QWORD *a2, double a3, float a4)
{
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v27;
  void *v28;
  void *v29;
  void *__p;
  void *v31;

  v5 = (char *)a1[2];
  v6 = (char *)a1[3];
  v7 = v6 - v5;
  if (v6 == v5 || !*a1)
    return a1;
  if ((unint64_t)(v7 - 8) < 8)
  {
    v8 = 1;
    v9 = (char *)a1[2];
    do
    {
LABEL_8:
      v15 = *(_QWORD *)v9;
      v9 += 8;
      v8 *= v15;
    }
    while (v9 != v6);
    goto LABEL_9;
  }
  v10 = ((unint64_t)(v7 - 8) >> 3) + 1;
  v9 = &v5[8 * (v10 & 0x3FFFFFFFFFFFFFFELL)];
  v11 = v5 + 8;
  v12 = 1;
  v13 = v10 & 0x3FFFFFFFFFFFFFFELL;
  v14 = 1;
  do
  {
    v12 *= *(v11 - 1);
    v14 *= *v11;
    v11 += 2;
    v13 -= 2;
  }
  while (v13);
  v8 = v14 * v12;
  if (v10 != (v10 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v8)
  {
    v16 = v7 >> 3;
    v17 = (_QWORD *)a2[2];
    if (v16 != (uint64_t)(a2[3] - (_QWORD)v17) >> 3)
      goto LABEL_19;
    v18 = v16 <= 1 ? 1 : v16;
    if (*(_QWORD *)v5 != *v17)
      goto LABEL_19;
    v19 = 1;
    do
    {
      v20 = v19;
      if (v18 == v19)
        break;
      v21 = *(_QWORD *)&v5[8 * v19];
      v22 = v17[v19++];
    }
    while (v21 == v22);
    if (v20 >= v16)
    {
      nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(a1, a2, a3, a4);
    }
    else
    {
LABEL_19:
      nitro::ndarray<unsigned char>::operator-<float>(a1, a2, &v27);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v27);
      if (__p)
      {
        v31 = __p;
        operator delete(__p);
      }
      if (v28)
      {
        v29 = v28;
        operator delete(v28);
      }
      v23 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
      if (*((_QWORD *)&v27 + 1))
      {
        v24 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
  }
  return a1;
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(_QWORD *a1, _QWORD *a2, double a3, float a4)
{
  char *v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  float v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;

  v6 = (char *)a1[2];
  v7 = (char *)a1[3];
  v8 = (v7 - v6) >> 3;
  v9 = (_QWORD *)a2[2];
  if (v8 != (uint64_t)(a2[3] - (_QWORD)v9) >> 3)
    goto LABEL_13;
  if (v7 == v6)
    return;
  v10 = v8 <= 1 ? 1 : (v7 - v6) >> 3;
  if (*(_QWORD *)v6 != *v9)
    goto LABEL_13;
  v11 = 1;
  do
  {
    v12 = v11;
    if (v10 == v11)
      break;
    v13 = *(_QWORD *)&v6[8 * v11];
    v14 = v9[v11++];
  }
  while (v13 == v14);
  if (v12 < v8)
LABEL_13:
    nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1})::{lambda(void)#1}::operator()();
  v15 = v7 - v6;
  if (v7 == v6 || !*a1)
    return;
  if ((unint64_t)(v15 - 8) < 8)
  {
    v16 = 1;
    v17 = (char *)a1[2];
    do
    {
LABEL_20:
      v23 = *(_QWORD *)v17;
      v17 += 8;
      v16 *= v23;
    }
    while (v17 != v7);
    goto LABEL_21;
  }
  v18 = ((unint64_t)(v15 - 8) >> 3) + 1;
  v17 = &v6[8 * (v18 & 0x3FFFFFFFFFFFFFFELL)];
  v19 = v6 + 8;
  v20 = 1;
  v21 = v18 & 0x3FFFFFFFFFFFFFFELL;
  v22 = 1;
  do
  {
    v20 *= *(v19 - 1);
    v22 *= *v19;
    v19 += 2;
    v21 -= 2;
  }
  while (v21);
  v16 = v22 * v20;
  if (v18 != (v18 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v16)
    return;
  v24 = v15 >> 3;
  if (v15 >> 3 == 3)
  {
    v37 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
    {
      v38 = 0;
      v39 = a2[8];
      v40 = a1[8];
      do
      {
        if (*((_QWORD *)v6 + 1))
        {
          v41 = 0;
          v42 = v39;
          v43 = v40;
          do
          {
            if (*((_QWORD *)v6 + 2))
            {
              v46 = 0;
              v47 = v42;
              v48 = v43;
              do
              {
                LOBYTE(a4) = *(_BYTE *)(*a1 + v48);
                a4 = (float)LODWORD(a4);
                *(_BYTE *)(*a1 + v48) = (int)(float)(a4 - *(float *)(*a2 + 4 * v47));
                v44 = (_QWORD *)a1[5];
                v48 += v44[2];
                v45 = (_QWORD *)a2[5];
                v47 += v45[2];
                ++v46;
                v6 = (char *)a1[2];
              }
              while (v46 < *((_QWORD *)v6 + 2));
            }
            else
            {
              v44 = (_QWORD *)a1[5];
              v45 = (_QWORD *)a2[5];
            }
            v43 += v44[1];
            v42 += v45[1];
            ++v41;
          }
          while (v41 < *((_QWORD *)v6 + 1));
          v37 = *(_QWORD *)v6;
        }
        else
        {
          v44 = (_QWORD *)a1[5];
          v45 = (_QWORD *)a2[5];
        }
        v40 += *v44;
        v39 += *v45;
        ++v38;
      }
      while (v38 < v37);
    }
  }
  else
  {
    if (v24 != 2)
    {
      if (v24 == 1)
      {
        if (*(_QWORD *)v6)
        {
          v25 = 0;
          v26 = a2[8];
          v27 = a1[8];
          do
          {
            LOBYTE(a4) = *(_BYTE *)(*a1 + v27);
            a4 = (float)LODWORD(a4);
            *(_BYTE *)(*a1 + v27) = (int)(float)(a4 - *(float *)(*a2 + 4 * v26));
            v27 += *(_QWORD *)a1[5];
            v26 += *(_QWORD *)a2[5];
            ++v25;
          }
          while (v25 < *(_QWORD *)a1[2]);
        }
        return;
      }
      if (v15 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v49 = operator new(v15);
      bzero(v49, v15 & 0xFFFFFFFFFFFFFFF8);
      if (v24 <= 1)
        v51 = 1;
      else
        v51 = v15 >> 3;
      v52 = v51 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        v53 = a1[5];
        if (v51 < 2)
          break;
        v56 = 0;
        v57 = 0;
        v58 = (_QWORD *)(v53 + 8);
        v59 = v51 & 0xFFFFFFFFFFFFFFFELL;
        v60 = v49 + 1;
        do
        {
          v56 += *(v58 - 1) * *(v60 - 1);
          v57 += *v58 * *v60;
          v60 += 2;
          v58 += 2;
          v59 -= 2;
        }
        while (v59);
        v54 = v57 + v56;
        v55 = v51 & 0xFFFFFFFFFFFFFFFELL;
        if (v51 != v52)
          goto LABEL_60;
LABEL_62:
        v68 = a2[5];
        if (v51 < 2)
        {
          v69 = 0;
          v70 = 0;
LABEL_67:
          v76 = v51 - v70;
          v77 = v70;
          v78 = (uint64_t *)(v68 + v77 * 8);
          v79 = &v49[v77];
          do
          {
            v81 = *v79++;
            v80 = v81;
            v82 = *v78++;
            v69 += v82 * v80;
            --v76;
          }
          while (v76);
          goto LABEL_69;
        }
        v71 = 0;
        v72 = 0;
        v73 = (_QWORD *)(v68 + 8);
        v74 = v51 & 0xFFFFFFFFFFFFFFFELL;
        v75 = v49 + 1;
        do
        {
          v71 += *(v73 - 1) * *(v75 - 1);
          v72 += *v73 * *v75;
          v75 += 2;
          v73 += 2;
          v74 -= 2;
        }
        while (v74);
        v69 = v72 + v71;
        v70 = v51 & 0xFFFFFFFFFFFFFFFELL;
        if (v51 != v52)
          goto LABEL_67;
LABEL_69:
        LOBYTE(v50) = *(_BYTE *)(*a1 + v54);
        v50 = (float)LODWORD(v50);
        *(_BYTE *)(*a1 + v54) = (int)(float)(v50 - *(float *)(*a2 + 4 * (a2[8] + v69)));
        if ((int)((unint64_t)v15 >> 3) >= 1)
        {
          v83 = a1[2];
          v84 = ((unint64_t)v15 >> 3) + 1;
          v85 = (unint64_t)v15 >> 3;
          while (1)
          {
            v86 = (v84 - 2);
            v87 = v49[v86] + 1;
            v49[v86] = v87;
            if (v87 < *(_QWORD *)(v83 + v86 * 8))
              break;
            v49[(v84 - 2)] = 0;
            LODWORD(v85) = v85 - 1;
            if ((unint64_t)--v84 <= 1)
              goto LABEL_75;
          }
          if ((int)v85 > 0)
            continue;
        }
LABEL_75:
        operator delete(v49);
        return;
      }
      v54 = 0;
      v55 = 0;
LABEL_60:
      v61 = v51 - v55;
      v62 = v55;
      v63 = (uint64_t *)(v53 + v62 * 8);
      v64 = &v49[v62];
      do
      {
        v66 = *v64++;
        v65 = v66;
        v67 = *v63++;
        v54 += v67 * v65;
        --v61;
      }
      while (v61);
      goto LABEL_62;
    }
    v28 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
    {
      v29 = 0;
      v30 = a2[8];
      v31 = a1[8];
      do
      {
        if (*((_QWORD *)v6 + 1))
        {
          v34 = 0;
          v35 = v30;
          v36 = v31;
          do
          {
            LOBYTE(a4) = *(_BYTE *)(*a1 + v36);
            a4 = (float)LODWORD(a4);
            *(_BYTE *)(*a1 + v36) = (int)(float)(a4 - *(float *)(*a2 + 4 * v35));
            v32 = (_QWORD *)a1[5];
            v36 += v32[1];
            v33 = (_QWORD *)a2[5];
            v35 += v33[1];
            ++v34;
            v6 = (char *)a1[2];
          }
          while (v34 < *((_QWORD *)v6 + 1));
          v28 = *(_QWORD *)v6;
        }
        else
        {
          v32 = (_QWORD *)a1[5];
          v33 = (_QWORD *)a2[5];
        }
        v31 += *v32;
        v30 += *v33;
        ++v29;
      }
      while (v29 < v28);
    }
  }
}

void sub_1911C5790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>::operator-<float>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<unsigned char>::copy((uint64_t)a1, a3);
    nitro::ndarray<unsigned char>::operator-=<float>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<unsigned char>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<unsigned char>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<float>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<unsigned char>::operator-=<float>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911C5AF0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911C5B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911C5BA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911C5B7CLL);
  JUMPOUT(0x1911C5B4CLL);
}

void sub_1911C5BB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911C5B8CLL);
  JUMPOUT(0x1911C5B54);
}

void sub_1911C5BC0()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911C5B64);
  JUMPOUT(0x1911C5B5CLL);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911C5E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911C5FD8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911C5FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911C5FE4);
}

uint64_t *nitro::ndarray<int>::operator-=<float>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;

  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  v5 = v4 - v3;
  if (v4 == v3 || !*a1)
    return a1;
  if ((unint64_t)(v5 - 8) < 8)
  {
    v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6)
  {
    v14 = v5 >> 3;
    v15 = (_QWORD *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3)
      goto LABEL_19;
    v16 = v14 <= 1 ? 1 : v14;
    if (*(_QWORD *)v3 != *v15)
      goto LABEL_19;
    v17 = 1;
    do
    {
      v18 = v17;
      if (v16 == v17)
        break;
      v19 = *(_QWORD *)&v3[8 * v17];
      v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 >= v14)
    {
      nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(a1, a2);
    }
    else
    {
LABEL_19:
      nitro::ndarray<int>::operator-<float>(a1, a2, &v25);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v25);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  return a1;
}

void nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  float *v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  float32x4_t *v61;
  int32x4_t *v62;
  unint64_t v63;
  int32x4_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  float32x4_t *v78;
  uint64_t v79;
  int32x4_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  float *v90;
  uint64_t v91;
  uint64_t v92;
  int *v93;
  float32x4_t *v94;
  int32x4_t *v95;
  unint64_t v96;
  int32x4_t v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  float32x4_t *v139;
  int32x4_t *v140;
  unint64_t v141;
  int32x4_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return;
  v13 = *a1;
  if (!*a1)
    return;
  if (v12 - 8 < 8)
  {
    v14 = 1;
    v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v16 = ((v12 - 8) >> 3) + 1;
  v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  v17 = v4 + 1;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v148 = *v4;
    if (!*v4)
      return;
    v65 = 0;
    v66 = a2[8];
    v67 = a1[8];
    v68 = v4[1];
    v69 = (uint64_t *)a1[5];
    v143 = (uint64_t *)a2[5];
    v70 = v13 + 4 * v67 + 16;
    v146 = *v143;
    v147 = *v69;
    v145 = 4 * *v69;
    v71 = 4 * v66 + 16;
    v144 = 4 * *v143;
    while (!v68)
    {
LABEL_50:
      v67 += v147;
      v66 += v146;
      ++v65;
      v70 += v145;
      v71 += v144;
      if (v65 == v148)
        return;
    }
    v72 = 0;
    v73 = v4[2];
    v74 = *a2;
    v75 = a2[5];
    v76 = v69[1];
    v77 = v73 & 0xFFFFFFFFFFFFFFF8;
    v78 = (float32x4_t *)(*a2 + v71);
    v79 = v143[1];
    v80 = (int32x4_t *)v70;
    v81 = v66;
    v82 = v67;
    while (1)
    {
      if (v73)
      {
        v83 = v69[2];
        v84 = *(_QWORD *)(v75 + 16);
        if (v73 >= 8 && (v83 == 1 ? (v85 = v84 == 1) : (v85 = 0), v85))
        {
          v87 = v81 + v77 * v84;
          v94 = v78;
          v95 = v80;
          v96 = v73 & 0xFFFFFFFFFFFFFFF8;
          v88 = v82 + v77 * v83;
          do
          {
            v97 = vcvtq_s32_f32(vsubq_f32(vcvtq_f32_s32(*v95), *v94));
            v95[-1] = vcvtq_s32_f32(vsubq_f32(vcvtq_f32_s32(v95[-1]), v94[-1]));
            *v95 = v97;
            v95 += 2;
            v94 += 2;
            v96 -= 8;
          }
          while (v96);
          v86 = v73 & 0xFFFFFFFFFFFFFFF8;
          if (v73 == v77)
            goto LABEL_53;
        }
        else
        {
          v86 = 0;
          v87 = v81;
          v88 = v82;
        }
        v89 = v73 - v86;
        v90 = (float *)(v74 + 4 * v87);
        v91 = 4 * v84;
        v92 = 4 * v83;
        v93 = (int *)(v13 + 4 * v88);
        do
        {
          *v93 = (int)(float)((float)*v93 - *v90);
          v90 = (float *)((char *)v90 + v91);
          v93 = (int *)((char *)v93 + v92);
          --v89;
        }
        while (v89);
      }
LABEL_53:
      v82 += v76;
      v81 += v79;
      ++v72;
      v80 = (int32x4_t *)((char *)v80 + 4 * v76);
      v78 = (float32x4_t *)((char *)v78 + 4 * v79);
      if (v72 == v68)
        goto LABEL_50;
    }
  }
  if (v22 == 2)
  {
    v35 = *v4;
    if (!*v4)
      return;
    v36 = 0;
    v37 = a2[8];
    v38 = a1[8];
    v39 = v4[1];
    v40 = *a2;
    v41 = (uint64_t *)a2[5];
    v42 = (uint64_t *)a1[5];
    v43 = *v42;
    v44 = *v41;
    v45 = v39 & 0xFFFFFFFFFFFFFFF8;
    v46 = v13 + 4 * v38 + 16;
    v47 = 4 * *v42;
    v48 = *a2 + 4 * v37 + 16;
    v49 = 4 * *v41;
    while (1)
    {
      if (v39)
      {
        v50 = v42[1];
        v51 = v41[1];
        if (v39 >= 8 && (v50 == 1 ? (v52 = v51 == 1) : (v52 = 0), v52))
        {
          v54 = v37 + v45 * v51;
          v61 = (float32x4_t *)v48;
          v62 = (int32x4_t *)v46;
          v63 = v39 & 0xFFFFFFFFFFFFFFF8;
          v55 = v38 + v45 * v50;
          do
          {
            v64 = vcvtq_s32_f32(vsubq_f32(vcvtq_f32_s32(*v62), *v61));
            v62[-1] = vcvtq_s32_f32(vsubq_f32(vcvtq_f32_s32(v62[-1]), v61[-1]));
            *v62 = v64;
            v62 += 2;
            v61 += 2;
            v63 -= 8;
          }
          while (v63);
          v53 = v39 & 0xFFFFFFFFFFFFFFF8;
          if (v39 == v45)
            goto LABEL_33;
        }
        else
        {
          v53 = 0;
          v54 = v37;
          v55 = v38;
        }
        v56 = v39 - v53;
        v57 = (float *)(v40 + 4 * v54);
        v58 = 4 * v51;
        v59 = 4 * v50;
        v60 = (int *)(v13 + 4 * v55);
        do
        {
          *v60 = (int)(float)((float)*v60 - *v57);
          v57 = (float *)((char *)v57 + v58);
          v60 = (int *)((char *)v60 + v59);
          --v56;
        }
        while (v56);
      }
LABEL_33:
      v38 += v43;
      v37 += v44;
      ++v36;
      v46 += v47;
      v48 += v49;
      if (v36 == v35)
        return;
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v98 = operator new(v12);
    bzero(v98, v12 & 0xFFFFFFFFFFFFFFF8);
    v99 = *a2;
    if (v12 >> 3 <= 1)
      v100 = 1;
    else
      v100 = v12 >> 3;
    v101 = a2[5];
    v102 = a2[8];
    v103 = v100 & 0x1FFFFFFFFFFFFFFELL;
    v104 = a1[5];
    while (v100 >= 2)
    {
      v107 = 0;
      v108 = 0;
      v109 = v100 & 0x1FFFFFFFFFFFFFFELL;
      v110 = (_QWORD *)(v104 + 8);
      v111 = v98 + 1;
      do
      {
        v107 += *(v110 - 1) * *(v111 - 1);
        v108 += *v110 * *v111;
        v111 += 2;
        v110 += 2;
        v109 -= 2;
      }
      while (v109);
      v105 = v108 + v107;
      v106 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103)
        goto LABEL_78;
LABEL_80:
      if (v100 < 2)
      {
        v119 = 0;
        v120 = 0;
LABEL_85:
        v126 = v100 - v120;
        v127 = v120;
        v128 = (uint64_t *)(v101 + 8 * v120);
        v129 = &v98[v127];
        do
        {
          v131 = *v129++;
          v130 = v131;
          v132 = *v128++;
          v119 += v132 * v130;
          --v126;
        }
        while (v126);
        goto LABEL_87;
      }
      v121 = 0;
      v122 = 0;
      v123 = v100 & 0x1FFFFFFFFFFFFFFELL;
      v124 = (_QWORD *)(v101 + 8);
      v125 = v98 + 1;
      do
      {
        v121 += *(v124 - 1) * *(v125 - 1);
        v122 += *v124 * *v125;
        v125 += 2;
        v124 += 2;
        v123 -= 2;
      }
      while (v123);
      v119 = v122 + v121;
      v120 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103)
        goto LABEL_85;
LABEL_87:
      *(_DWORD *)(v13 + 4 * v105) = (int)(float)((float)*(int *)(v13 + 4 * v105) - *(float *)(v99 + 4 * (v102 + v119)));
      if ((int)(v12 >> 3) >= 1)
      {
        v133 = (v12 >> 3) + 1;
        v134 = v12 >> 3;
        while (1)
        {
          v135 = (v133 - 2);
          v136 = v98[v135] + 1;
          v98[v135] = v136;
          if (v136 < v4[v135])
            break;
          v98[(v133 - 2)] = 0;
          --v134;
          if ((unint64_t)--v133 <= 1)
            goto LABEL_93;
        }
        if (v134 > 0)
          continue;
      }
LABEL_93:
      operator delete(v98);
      return;
    }
    v105 = 0;
    v106 = 0;
LABEL_78:
    v112 = v100 - v106;
    v113 = v106;
    v114 = (uint64_t *)(v104 + 8 * v106);
    v115 = &v98[v113];
    do
    {
      v117 = *v115++;
      v116 = v117;
      v118 = *v114++;
      v105 += v118 * v116;
      --v112;
    }
    while (v112);
    goto LABEL_80;
  }
  v23 = *v4;
  if (!*v4)
    return;
  v24 = a2[8];
  v25 = a1[8];
  v26 = *a2;
  v27 = *(_QWORD *)a1[5];
  v28 = *(_QWORD *)a2[5];
  if (v23 < 8)
  {
    v29 = 0;
LABEL_28:
    v30 = v23 - v29;
    v31 = (float *)(v26 + 4 * v24);
    v32 = 4 * v28;
    v33 = 4 * v27;
    v34 = (int *)(v13 + 4 * v25);
    do
    {
      *v34 = (int)(float)((float)*v34 - *v31);
      v31 = (float *)((char *)v31 + v32);
      v34 = (int *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  v29 = 0;
  if (v27 != 1)
    goto LABEL_28;
  if (v28 != 1)
    goto LABEL_28;
  v29 = v23 & 0xFFFFFFFFFFFFFFF8;
  v137 = v24 + (v23 & 0xFFFFFFFFFFFFFFF8);
  v138 = v25 + (v23 & 0xFFFFFFFFFFFFFFF8);
  v139 = (float32x4_t *)(v26 + 4 * v24 + 16);
  v140 = (int32x4_t *)(v13 + 4 * v25 + 16);
  v141 = v23 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v142 = vcvtq_s32_f32(vsubq_f32(vcvtq_f32_s32(*v140), *v139));
    v140[-1] = vcvtq_s32_f32(vsubq_f32(vcvtq_f32_s32(v140[-1]), v139[-1]));
    *v140 = v142;
    v139 += 2;
    v140 += 2;
    v141 -= 8;
  }
  while (v141);
  v24 = v137;
  v25 = v138;
  if (v23 != v29)
    goto LABEL_28;
}

void sub_1911C6898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::operator-<float>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<int>::copy((uint64_t)a1, a3);
    nitro::ndarray<int>::operator-=<float>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<int>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<int>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<float>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<int>::operator-=<float>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911C6BF8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911C6C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911C6CA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911C6C84);
  JUMPOUT(0x1911C6C54);
}

void sub_1911C6CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911C6C94);
  JUMPOUT(0x1911C6C5CLL);
}

void sub_1911C6CC8()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911C6C6CLL);
  JUMPOUT(0x1911C6C64);
}

void nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911C6F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911C70E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911C70F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911C70ECLL);
}

uint64_t *nitro::ndarray<half>::operator-=<float>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;

  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  v5 = v4 - v3;
  if (v4 == v3 || !*a1)
    return a1;
  if ((unint64_t)(v5 - 8) < 8)
  {
    v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6)
  {
    v14 = v5 >> 3;
    v15 = (_QWORD *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3)
      goto LABEL_19;
    v16 = v14 <= 1 ? 1 : v14;
    if (*(_QWORD *)v3 != *v15)
      goto LABEL_19;
    v17 = 1;
    do
    {
      v18 = v17;
      if (v16 == v17)
        break;
      v19 = *(_QWORD *)&v3[8 * v17];
      v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 >= v14)
    {
      nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(a1, a2);
    }
    else
    {
LABEL_19:
      nitro::ndarray<half>::operator-<float>(a1, a2, &v25);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v25);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  return a1;
}

void nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;
  __int16 *v34;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  float *v63;
  uint64_t v64;
  uint64_t v65;
  __int16 *v66;
  float32x4_t *v70;
  float16x4_t *v71;
  unint64_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float16x8_t v77;
  float16x8_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  float32x4_t *v92;
  uint64_t v93;
  float16x4_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  float *v104;
  uint64_t v105;
  uint64_t v106;
  __int16 *v107;
  float32x4_t *v111;
  float16x4_t *v112;
  unint64_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float16x8_t v118;
  float16x8_t v119;
  _QWORD *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v159;
  int v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  float32x4_t *v165;
  float16x4_t *v166;
  unint64_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float16x8_t v172;
  float16x8_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return;
  v13 = *a1;
  if (!*a1)
    return;
  if (v12 - 8 < 8)
  {
    v14 = 1;
    v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v16 = ((v12 - 8) >> 3) + 1;
  v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  v17 = v4 + 1;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v179 = *v4;
    if (!*v4)
      return;
    v79 = 0;
    v80 = a2[8];
    v81 = a1[8];
    v82 = v4[1];
    v83 = (uint64_t *)a1[5];
    v174 = (uint64_t *)a2[5];
    v84 = v13 + 2 * v81 + 16;
    v177 = *v174;
    v178 = *v83;
    v176 = 2 * *v83;
    v85 = 4 * v80 + 32;
    v175 = 4 * *v174;
    while (!v82)
    {
LABEL_50:
      v81 += v178;
      v80 += v177;
      ++v79;
      v84 += v176;
      v85 += v175;
      if (v79 == v179)
        return;
    }
    v86 = 0;
    v87 = v4[2];
    v88 = *a2;
    v89 = a2[5];
    v90 = v83[1];
    v91 = v87 & 0xFFFFFFFFFFFFFFF0;
    v92 = (float32x4_t *)(*a2 + v85);
    v93 = v174[1];
    v94 = (float16x4_t *)v84;
    v95 = v80;
    v96 = v81;
    while (1)
    {
      if (v87)
      {
        v97 = v83[2];
        v98 = *(_QWORD *)(v89 + 16);
        if (v87 >= 0x10 && (v97 == 1 ? (v99 = v98 == 1) : (v99 = 0), v99))
        {
          v101 = v95 + v91 * v98;
          v111 = v92;
          v112 = v94;
          v113 = v87 & 0xFFFFFFFFFFFFFFF0;
          v102 = v96 + v91 * v97;
          do
          {
            v114 = v111[-2];
            v115 = v111[-1];
            v116 = *v111;
            v117 = v111[1];
            v111 += 4;
            v118 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(v112[-2]), v114)), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v112[-2].i8), v115));
            v119 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(*v112), v116)), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v112->i8), v117));
            *(float16x8_t *)v112[-2].i8 = v118;
            *(float16x8_t *)v112->i8 = v119;
            v112 += 4;
            v113 -= 16;
          }
          while (v113);
          v100 = v87 & 0xFFFFFFFFFFFFFFF0;
          if (v87 == v91)
            goto LABEL_53;
        }
        else
        {
          v100 = 0;
          v101 = v95;
          v102 = v96;
        }
        v103 = v87 - v100;
        v104 = (float *)(v88 + 4 * v101);
        v105 = 4 * v98;
        v106 = 2 * v97;
        v107 = (__int16 *)(v13 + 2 * v102);
        do
        {
          _H1 = *v107;
          __asm { FCVT            S1, H1 }
          _S0 = _S1 - *v104;
          __asm { FCVT            H0, S0 }
          *v107 = LOWORD(_S0);
          v104 = (float *)((char *)v104 + v105);
          v107 = (__int16 *)((char *)v107 + v106);
          --v103;
        }
        while (v103);
      }
LABEL_53:
      v96 += v90;
      v95 += v93;
      ++v86;
      v94 = (float16x4_t *)((char *)v94 + 2 * v90);
      v92 = (float32x4_t *)((char *)v92 + 4 * v93);
      if (v86 == v82)
        goto LABEL_50;
    }
  }
  if (v22 == 2)
  {
    v41 = *v4;
    if (!*v4)
      return;
    v42 = 0;
    v43 = a2[8];
    v44 = a1[8];
    v45 = v4[1];
    v46 = *a2;
    v47 = (uint64_t *)a2[5];
    v48 = (uint64_t *)a1[5];
    v49 = *v48;
    v50 = *v47;
    v51 = v45 & 0xFFFFFFFFFFFFFFF0;
    v52 = v13 + 2 * v44 + 16;
    v53 = 2 * *v48;
    v54 = *a2 + 4 * v43 + 32;
    v55 = 4 * *v47;
    while (1)
    {
      if (v45)
      {
        v56 = v48[1];
        v57 = v47[1];
        if (v45 >= 0x10 && (v56 == 1 ? (_ZF = v57 == 1) : (_ZF = 0), _ZF))
        {
          v60 = v43 + v51 * v57;
          v70 = (float32x4_t *)v54;
          v71 = (float16x4_t *)v52;
          v72 = v45 & 0xFFFFFFFFFFFFFFF0;
          v61 = v44 + v51 * v56;
          do
          {
            v73 = v70[-2];
            v74 = v70[-1];
            v75 = *v70;
            v76 = v70[1];
            v70 += 4;
            v77 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(v71[-2]), v73)), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v71[-2].i8), v74));
            v78 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(*v71), v75)), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v71->i8), v76));
            *(float16x8_t *)v71[-2].i8 = v77;
            *(float16x8_t *)v71->i8 = v78;
            v71 += 4;
            v72 -= 16;
          }
          while (v72);
          v59 = v45 & 0xFFFFFFFFFFFFFFF0;
          if (v45 == v51)
            goto LABEL_33;
        }
        else
        {
          v59 = 0;
          v60 = v43;
          v61 = v44;
        }
        v62 = v45 - v59;
        v63 = (float *)(v46 + 4 * v60);
        v64 = 4 * v57;
        v65 = 2 * v56;
        v66 = (__int16 *)(v13 + 2 * v61);
        do
        {
          _H1 = *v66;
          __asm { FCVT            S1, H1 }
          _S0 = _S1 - *v63;
          __asm { FCVT            H0, S0 }
          *v66 = LOWORD(_S0);
          v63 = (float *)((char *)v63 + v64);
          v66 = (__int16 *)((char *)v66 + v65);
          --v62;
        }
        while (v62);
      }
LABEL_33:
      v44 += v49;
      v43 += v50;
      ++v42;
      v52 += v53;
      v54 += v55;
      if (v42 == v41)
        return;
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v120 = operator new(v12);
    bzero(v120, v12 & 0xFFFFFFFFFFFFFFF8);
    v121 = *a2;
    if (v12 >> 3 <= 1)
      v122 = 1;
    else
      v122 = v12 >> 3;
    v123 = a2[5];
    v124 = a2[8];
    v125 = v122 & 0x1FFFFFFFFFFFFFFELL;
    v126 = a1[5];
    while (v122 >= 2)
    {
      v129 = 0;
      v130 = 0;
      v131 = v122 & 0x1FFFFFFFFFFFFFFELL;
      v132 = (_QWORD *)(v126 + 8);
      v133 = v120 + 1;
      do
      {
        v129 += *(v132 - 1) * *(v133 - 1);
        v130 += *v132 * *v133;
        v133 += 2;
        v132 += 2;
        v131 -= 2;
      }
      while (v131);
      v127 = v130 + v129;
      v128 = v122 & 0x1FFFFFFFFFFFFFFELL;
      if (v122 != v125)
        goto LABEL_78;
LABEL_80:
      if (v122 < 2)
      {
        v141 = 0;
        v142 = 0;
LABEL_85:
        v148 = v122 - v142;
        v149 = v142;
        v150 = (uint64_t *)(v123 + 8 * v142);
        v151 = &v120[v149];
        do
        {
          v153 = *v151++;
          v152 = v153;
          v154 = *v150++;
          v141 += v154 * v152;
          --v148;
        }
        while (v148);
        goto LABEL_87;
      }
      v143 = 0;
      v144 = 0;
      v145 = v122 & 0x1FFFFFFFFFFFFFFELL;
      v146 = (_QWORD *)(v123 + 8);
      v147 = v120 + 1;
      do
      {
        v143 += *(v146 - 1) * *(v147 - 1);
        v144 += *v146 * *v147;
        v147 += 2;
        v146 += 2;
        v145 -= 2;
      }
      while (v145);
      v141 = v144 + v143;
      v142 = v122 & 0x1FFFFFFFFFFFFFFELL;
      if (v122 != v125)
        goto LABEL_85;
LABEL_87:
      v155 = 2 * v127;
      _H1 = *(_WORD *)(v13 + v155);
      __asm { FCVT            S1, H1 }
      _S0 = _S1 - *(float *)(v121 + 4 * (v124 + v141));
      __asm { FCVT            H0, S0 }
      *(_WORD *)(v13 + v155) = LOWORD(_S0);
      if ((int)(v12 >> 3) >= 1)
      {
        v159 = (v12 >> 3) + 1;
        v160 = v12 >> 3;
        while (1)
        {
          v161 = (v159 - 2);
          v162 = v120[v161] + 1;
          v120[v161] = v162;
          if (v162 < v4[v161])
            break;
          v120[(v159 - 2)] = 0;
          --v160;
          if ((unint64_t)--v159 <= 1)
            goto LABEL_93;
        }
        if (v160 > 0)
          continue;
      }
LABEL_93:
      operator delete(v120);
      return;
    }
    v127 = 0;
    v128 = 0;
LABEL_78:
    v134 = v122 - v128;
    v135 = v128;
    v136 = (uint64_t *)(v126 + 8 * v128);
    v137 = &v120[v135];
    do
    {
      v139 = *v137++;
      v138 = v139;
      v140 = *v136++;
      v127 += v140 * v138;
      --v134;
    }
    while (v134);
    goto LABEL_80;
  }
  v23 = *v4;
  if (!*v4)
    return;
  v24 = a2[8];
  v25 = a1[8];
  v26 = *a2;
  v27 = *(_QWORD *)a1[5];
  v28 = *(_QWORD *)a2[5];
  if (v23 < 0x10)
  {
    v29 = 0;
LABEL_28:
    v30 = v23 - v29;
    v31 = (float *)(v26 + 4 * v24);
    v32 = 4 * v28;
    v33 = 2 * v27;
    v34 = (__int16 *)(v13 + 2 * v25);
    do
    {
      _H1 = *v34;
      __asm { FCVT            S1, H1 }
      _S0 = _S1 - *v31;
      __asm { FCVT            H0, S0 }
      *v34 = LOWORD(_S0);
      v31 = (float *)((char *)v31 + v32);
      v34 = (__int16 *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  v29 = 0;
  if (v27 != 1)
    goto LABEL_28;
  if (v28 != 1)
    goto LABEL_28;
  v29 = v23 & 0xFFFFFFFFFFFFFFF0;
  v163 = v24 + (v23 & 0xFFFFFFFFFFFFFFF0);
  v164 = v25 + (v23 & 0xFFFFFFFFFFFFFFF0);
  v165 = (float32x4_t *)(v26 + 4 * v24 + 32);
  v166 = (float16x4_t *)(v13 + 2 * v25 + 16);
  v167 = v23 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v168 = v165[-2];
    v169 = v165[-1];
    v170 = *v165;
    v171 = v165[1];
    v165 += 4;
    v172 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(v166[-2]), v168)), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v166[-2].i8), v169));
    v173 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(*v166), v170)), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v166->i8), v171));
    *(float16x8_t *)v166[-2].i8 = v172;
    *(float16x8_t *)v166->i8 = v173;
    v166 += 4;
    v167 -= 16;
  }
  while (v167);
  v24 = v163;
  v25 = v164;
  if (v23 != v29)
    goto LABEL_28;
}

void sub_1911C79E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::operator-<float>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<half>::copy((uint64_t)a1, a3);
    nitro::ndarray<half>::operator-=<float>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<half>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<half>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<float>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<half>::operator-=<float>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911C7D48(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911C7D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911C7DF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911C7DD4);
  JUMPOUT(0x1911C7DA4);
}

void sub_1911C7E08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911C7DE4);
  JUMPOUT(0x1911C7DACLL);
}

void sub_1911C7E18()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911C7DBCLL);
  JUMPOUT(0x1911C7DB4);
}

void nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911C808C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911C8230(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911C8244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911C823CLL);
}

uint64_t *nitro::ndarray<float>::operator-=<float>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;

  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  v5 = v4 - v3;
  if (v4 == v3 || !*a1)
    return a1;
  if ((unint64_t)(v5 - 8) < 8)
  {
    v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6)
  {
    v14 = v5 >> 3;
    v15 = (_QWORD *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3)
      goto LABEL_19;
    v16 = v14 <= 1 ? 1 : v14;
    if (*(_QWORD *)v3 != *v15)
      goto LABEL_19;
    v17 = 1;
    do
    {
      v18 = v17;
      if (v16 == v17)
        break;
      v19 = *(_QWORD *)&v3[8 * v17];
      v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 >= v14)
    {
      nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(a1, a2);
    }
    else
    {
LABEL_19:
      nitro::ndarray<float>::operator-<float>(a1, a2, &v25);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v25);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  return a1;
}

float32x4_t nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  float *v32;
  uint64_t v33;
  uint64_t v34;
  float *v35;
  float32x4_t result;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  float *v62;
  uint64_t v63;
  uint64_t v64;
  float *v65;
  float32x4_t *v67;
  float32x4_t *v68;
  unint64_t v69;
  float32x4_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  float32x4_t *v88;
  float32x4_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  float *v98;
  uint64_t v99;
  uint64_t v100;
  float *v101;
  float32x4_t *v103;
  float32x4_t *v104;
  unint64_t v105;
  float32x4_t v106;
  _QWORD *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  unint64_t v145;
  float32x4_t *v146;
  float32x4_t *v147;
  unint64_t v148;
  float32x4_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v159;
  uint64_t v160;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return result;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return result;
  v160 = *a1;
  if (!*a1)
    return result;
  if (v12 - 8 < 8)
  {
    v13 = 1;
    v14 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v20 = *v14++;
      v13 *= v20;
    }
    while (v14 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v15 = ((v12 - 8) >> 3) + 1;
  v14 = &v4[v15 & 0x3FFFFFFFFFFFFFFELL];
  v16 = v4 + 1;
  v17 = 1;
  v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
  v19 = 1;
  do
  {
    v17 *= *(v16 - 1);
    v19 *= *v16;
    v16 += 2;
    v18 -= 2;
  }
  while (v18);
  v13 = v19 * v17;
  if (v15 != (v15 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v13)
    return result;
  v21 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v155 = *v4;
    if (!*v4)
      return result;
    v71 = 0;
    v72 = a2[8];
    v73 = a1[8];
    v74 = v4[1];
    v75 = (uint64_t *)a1[5];
    v152 = (uint64_t *)a2[5];
    v153 = *v152;
    v154 = *v75;
    v157 = 4 * *v75;
    v156 = 4 * *v152;
    v150 = 4 * v72;
    v151 = 4 * v73;
    v76 = 4 * v73 + v160 + 16;
    v77 = 4 * v72 + 16;
    while (!v74)
    {
LABEL_55:
      v73 += v154;
      v72 += v153;
      ++v71;
      v76 += v157;
      v77 += v156;
      if (v71 == v155)
        return result;
    }
    v78 = 0;
    v79 = v150 + v156 * v71;
    v80 = v4[2];
    v81 = *a2;
    v82 = v75[1];
    v83 = v152[1];
    v84 = 4 * v82;
    v159 = v151 + v157 * v71;
    v85 = 4 * v83;
    v86 = v80 & 0xFFFFFFFFFFFFFFF8;
    v87 = a2[5];
    v88 = (float32x4_t *)(*a2 + v77);
    v89 = (float32x4_t *)v76;
    v90 = v72;
    v91 = v73;
    while (!v80)
    {
LABEL_58:
      v91 += v82;
      v90 += v83;
      ++v78;
      v89 = (float32x4_t *)((char *)v89 + v84);
      v88 = (float32x4_t *)((char *)v88 + v85);
      if (v78 == v74)
        goto LABEL_55;
    }
    v92 = v75[2];
    v93 = *(_QWORD *)(v87 + 16);
    if (v80 >= 8)
    {
      v94 = 0;
      if (v92 != 1)
        goto LABEL_62;
      v95 = v90;
      v96 = v91;
      if (v93 != 1)
      {
LABEL_63:
        v97 = v80 - v94;
        v98 = (float *)(v81 + 4 * v95);
        v99 = 4 * v93;
        v100 = 4 * v92;
        v101 = (float *)(v160 + 4 * v96);
        do
        {
          result.f32[0] = *v101 - *v98;
          *v101 = result.f32[0];
          v98 = (float *)((char *)v98 + v99);
          v101 = (float *)((char *)v101 + v100);
          --v97;
        }
        while (v97);
        goto LABEL_58;
      }
      if (v160 + v159 + v84 * v78 >= v81 + v79 + 4 * v80 + v85 * v78
        || v81 + v79 + v85 * v78 >= v160 + v159 + 4 * v80 + v84 * v78)
      {
        v95 = v90 + v86;
        v103 = v88;
        v104 = v89;
        v105 = v80 & 0xFFFFFFFFFFFFFFF8;
        v96 = v91 + v86;
        do
        {
          result = vsubq_f32(v104[-1], v103[-1]);
          v106 = vsubq_f32(*v104, *v103);
          v104[-1] = result;
          *v104 = v106;
          v104 += 2;
          v103 += 2;
          v105 -= 8;
        }
        while (v105);
        v94 = v80 & 0xFFFFFFFFFFFFFFF8;
        if (v80 == v86)
          goto LABEL_58;
        goto LABEL_63;
      }
    }
    v94 = 0;
LABEL_62:
    v95 = v90;
    v96 = v91;
    goto LABEL_63;
  }
  if (v21 == 2)
  {
    v37 = *v4;
    if (!*v4)
      return result;
    v38 = 0;
    v39 = a2[8];
    v40 = a1[8];
    v41 = v4[1];
    v42 = (uint64_t *)a2[5];
    v43 = (uint64_t *)a1[5];
    v44 = *v43;
    v45 = *v42;
    v46 = 4 * *v43;
    v47 = 4 * *v42;
    v48 = v41 & 0xFFFFFFFFFFFFFFF8;
    v49 = *a2;
    v50 = 4 * v40 + v160 + 16;
    v51 = 4 * v39 + *a2 + 16;
    v52 = v160 + 4 * v40;
    v53 = v160 + 4 * v40 + 4 * v41;
    v54 = *a2 + 4 * v39;
    v55 = *a2 + 4 * v39 + 4 * v41;
    while (!v41)
    {
LABEL_34:
      v40 += v44;
      v39 += v45;
      ++v38;
      v50 += v46;
      v51 += v47;
      if (v38 == v37)
        return result;
    }
    v56 = v43[1];
    v57 = v42[1];
    if (v41 >= 8)
    {
      v58 = 0;
      if (v56 != 1)
        goto LABEL_38;
      v59 = v39;
      v60 = v40;
      if (v57 != 1)
      {
LABEL_39:
        v61 = v41 - v58;
        v62 = (float *)(v49 + 4 * v59);
        v63 = 4 * v57;
        v64 = 4 * v56;
        v65 = (float *)(v160 + 4 * v60);
        do
        {
          result.f32[0] = *v65 - *v62;
          *v65 = result.f32[0];
          v62 = (float *)((char *)v62 + v63);
          v65 = (float *)((char *)v65 + v64);
          --v61;
        }
        while (v61);
        goto LABEL_34;
      }
      if (v52 + v46 * v38 >= (unint64_t)(v55 + v47 * v38)
        || v54 + v47 * v38 >= (unint64_t)(v53 + v46 * v38))
      {
        v59 = v39 + v48;
        v67 = (float32x4_t *)v51;
        v68 = (float32x4_t *)v50;
        v69 = v41 & 0xFFFFFFFFFFFFFFF8;
        v60 = v40 + v48;
        do
        {
          result = vsubq_f32(v68[-1], v67[-1]);
          v70 = vsubq_f32(*v68, *v67);
          v68[-1] = result;
          *v68 = v70;
          v68 += 2;
          v67 += 2;
          v69 -= 8;
        }
        while (v69);
        v58 = v41 & 0xFFFFFFFFFFFFFFF8;
        if (v41 == v48)
          goto LABEL_34;
        goto LABEL_39;
      }
    }
    v58 = 0;
LABEL_38:
    v59 = v39;
    v60 = v40;
    goto LABEL_39;
  }
  if (v21 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v107 = operator new(v12);
    bzero(v107, v12 & 0xFFFFFFFFFFFFFFF8);
    v108 = *a2;
    if (v12 >> 3 <= 1)
      v109 = 1;
    else
      v109 = v12 >> 3;
    v110 = a2[5];
    v111 = a2[8];
    v112 = v109 & 0x1FFFFFFFFFFFFFFELL;
    v113 = a1[5];
    while (v109 >= 2)
    {
      v116 = 0;
      v117 = 0;
      v118 = v109 & 0x1FFFFFFFFFFFFFFELL;
      v119 = (_QWORD *)(v113 + 8);
      v120 = v107 + 1;
      do
      {
        v116 += *(v119 - 1) * *(v120 - 1);
        v117 += *v119 * *v120;
        v120 += 2;
        v119 += 2;
        v118 -= 2;
      }
      while (v118);
      v114 = v117 + v116;
      v115 = v109 & 0x1FFFFFFFFFFFFFFELL;
      if (v109 != v112)
        goto LABEL_87;
LABEL_89:
      if (v109 < 2)
      {
        v128 = 0;
        v129 = 0;
LABEL_94:
        v135 = v109 - v129;
        v136 = v129;
        v137 = (uint64_t *)(v110 + 8 * v129);
        v138 = &v107[v136];
        do
        {
          v140 = *v138++;
          v139 = v140;
          v141 = *v137++;
          v128 += v141 * v139;
          --v135;
        }
        while (v135);
        goto LABEL_96;
      }
      v130 = 0;
      v131 = 0;
      v132 = v109 & 0x1FFFFFFFFFFFFFFELL;
      v133 = (_QWORD *)(v110 + 8);
      v134 = v107 + 1;
      do
      {
        v130 += *(v133 - 1) * *(v134 - 1);
        v131 += *v133 * *v134;
        v134 += 2;
        v133 += 2;
        v132 -= 2;
      }
      while (v132);
      v128 = v131 + v130;
      v129 = v109 & 0x1FFFFFFFFFFFFFFELL;
      if (v109 != v112)
        goto LABEL_94;
LABEL_96:
      *(float *)(v160 + 4 * v114) = *(float *)(v160 + 4 * v114) - *(float *)(v108 + 4 * (v111 + v128));
      if ((int)(v12 >> 3) >= 1)
      {
        v142 = (v12 >> 3) + 1;
        v143 = v12 >> 3;
        while (1)
        {
          v144 = (v142 - 2);
          v145 = v107[v144] + 1;
          v107[v144] = v145;
          if (v145 < v4[v144])
            break;
          v107[(v142 - 2)] = 0;
          --v143;
          if ((unint64_t)--v142 <= 1)
            goto LABEL_102;
        }
        if (v143 > 0)
          continue;
      }
LABEL_102:
      operator delete(v107);
      return result;
    }
    v114 = 0;
    v115 = 0;
LABEL_87:
    v121 = v109 - v115;
    v122 = v115;
    v123 = (uint64_t *)(v113 + 8 * v115);
    v124 = &v107[v122];
    do
    {
      v126 = *v124++;
      v125 = v126;
      v127 = *v123++;
      v114 += v127 * v125;
      --v121;
    }
    while (v121);
    goto LABEL_89;
  }
  v22 = *v4;
  if (!*v4)
    return result;
  v23 = a2[8];
  v24 = a1[8];
  v25 = *a2;
  v26 = *(_QWORD *)a1[5];
  v27 = *(_QWORD *)a2[5];
  if (v22 < 0xC)
    goto LABEL_27;
  v28 = 0;
  if (v26 != 1 || v27 != 1)
    goto LABEL_28;
  if (v160 + 4 * v24 < v25 + 4 * v22 + 4 * v23 && v25 + 4 * v23 < v160 + 4 * v22 + 4 * v24)
  {
LABEL_27:
    v28 = 0;
LABEL_28:
    v29 = a2[8];
    v30 = a1[8];
LABEL_29:
    v31 = v22 - v28;
    v32 = (float *)(v25 + 4 * v29);
    v33 = 4 * v27;
    v34 = 4 * v26;
    v35 = (float *)(v160 + 4 * v30);
    do
    {
      result.f32[0] = *v35 - *v32;
      *v35 = result.f32[0];
      v32 = (float *)((char *)v32 + v33);
      v35 = (float *)((char *)v35 + v34);
      --v31;
    }
    while (v31);
    return result;
  }
  v28 = v22 & 0xFFFFFFFFFFFFFFF8;
  v29 = v23 + (v22 & 0xFFFFFFFFFFFFFFF8);
  v30 = v24 + (v22 & 0xFFFFFFFFFFFFFFF8);
  v146 = (float32x4_t *)(v25 + 4 * v23 + 16);
  v147 = (float32x4_t *)(v160 + 4 * v24 + 16);
  v148 = v22 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    result = vsubq_f32(v147[-1], v146[-1]);
    v149 = vsubq_f32(*v147, *v146);
    v147[-1] = result;
    *v147 = v149;
    v146 += 2;
    v147 += 2;
    v148 -= 8;
  }
  while (v148);
  if (v22 != v28)
    goto LABEL_29;
  return result;
}

void sub_1911C8BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::operator-<float>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<float>::copy((uint64_t)a1, a3);
    nitro::ndarray<float>::operator-=<float>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<float>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<float>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<float>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<float>::operator-=<float>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911C8F2C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911C8F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911C8FDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911C8FB8);
  JUMPOUT(0x1911C8F88);
}

void sub_1911C8FEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911C8FC8);
  JUMPOUT(0x1911C8F90);
}

void sub_1911C8FFC()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911C8FA0);
  JUMPOUT(0x1911C8F98);
}

void nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911C9270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911C9414(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911C9428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911C9420);
}

void nitro::ndarray_container::visit<nitro::ndarray_container const,nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0,(void *)0>(nitro::ndarray_container const &,nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 230, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 230, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1911C9758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1911C97C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1911C9AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1911C9B64(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

_QWORD *nitro::ndarray<unsigned char>::operator*=<unsigned char>(_QWORD *a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;

  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  v5 = v4 - v3;
  if (v4 == v3 || !*a1)
    return a1;
  if ((unint64_t)(v5 - 8) < 8)
  {
    v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6)
  {
    v14 = v5 >> 3;
    v15 = (_QWORD *)a2[2];
    if (v14 != (uint64_t)(a2[3] - (_QWORD)v15) >> 3)
      goto LABEL_19;
    v16 = v14 <= 1 ? 1 : v14;
    if (*(_QWORD *)v3 != *v15)
      goto LABEL_19;
    v17 = 1;
    do
    {
      v18 = v17;
      if (v16 == v17)
        break;
      v19 = *(_QWORD *)&v3[8 * v17];
      v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 >= v14)
    {
      nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(a1, a2);
    }
    else
    {
LABEL_19:
      nitro::ndarray<unsigned char>::operator*<unsigned char>(a1, a2, &v25);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v25);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  return a1;
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;

  v4 = (char *)a1[2];
  v5 = (char *)a1[3];
  v6 = (v5 - v4) >> 3;
  v7 = (_QWORD *)a2[2];
  if (v6 != (uint64_t)(a2[3] - (_QWORD)v7) >> 3)
    goto LABEL_13;
  if (v5 == v4)
    return;
  v8 = v6 <= 1 ? 1 : (v5 - v4) >> 3;
  if (*(_QWORD *)v4 != *v7)
    goto LABEL_13;
  v9 = 1;
  do
  {
    v10 = v9;
    if (v8 == v9)
      break;
    v11 = *(_QWORD *)&v4[8 * v9];
    v12 = v7[v9++];
  }
  while (v11 == v12);
  if (v10 < v6)
LABEL_13:
    nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator()();
  v13 = v5 - v4;
  if (v5 == v4 || !*a1)
    return;
  if ((unint64_t)(v13 - 8) < 8)
  {
    v14 = 1;
    v15 = (char *)a1[2];
    do
    {
LABEL_20:
      v21 = *(_QWORD *)v15;
      v15 += 8;
      v14 *= v21;
    }
    while (v15 != v5);
    goto LABEL_21;
  }
  v16 = ((unint64_t)(v13 - 8) >> 3) + 1;
  v15 = &v4[8 * (v16 & 0x3FFFFFFFFFFFFFFELL)];
  v17 = v4 + 8;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = v13 >> 3;
  if (v13 >> 3 == 3)
  {
    v35 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      v36 = 0;
      v37 = a2[8];
      v38 = a1[8];
      do
      {
        if (*((_QWORD *)v4 + 1))
        {
          v39 = 0;
          v40 = v37;
          v41 = v38;
          do
          {
            if (*((_QWORD *)v4 + 2))
            {
              v44 = 0;
              v45 = v40;
              v46 = v41;
              do
              {
                *(_BYTE *)(*a1 + v46) *= *(_BYTE *)(*a2 + v45);
                v42 = (_QWORD *)a1[5];
                v46 += v42[2];
                v43 = (_QWORD *)a2[5];
                v45 += v43[2];
                ++v44;
                v4 = (char *)a1[2];
              }
              while (v44 < *((_QWORD *)v4 + 2));
            }
            else
            {
              v42 = (_QWORD *)a1[5];
              v43 = (_QWORD *)a2[5];
            }
            v41 += v42[1];
            v40 += v43[1];
            ++v39;
          }
          while (v39 < *((_QWORD *)v4 + 1));
          v35 = *(_QWORD *)v4;
        }
        else
        {
          v42 = (_QWORD *)a1[5];
          v43 = (_QWORD *)a2[5];
        }
        v38 += *v42;
        v37 += *v43;
        ++v36;
      }
      while (v36 < v35);
    }
  }
  else
  {
    if (v22 != 2)
    {
      if (v22 == 1)
      {
        if (*(_QWORD *)v4)
        {
          v23 = 0;
          v24 = a2[8];
          v25 = a1[8];
          do
          {
            *(_BYTE *)(*a1 + v25) *= *(_BYTE *)(*a2 + v24);
            v25 += *(_QWORD *)a1[5];
            v24 += *(_QWORD *)a2[5];
            ++v23;
          }
          while (v23 < *(_QWORD *)a1[2]);
        }
        return;
      }
      if (v13 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v47 = operator new(v13);
      bzero(v47, v13 & 0xFFFFFFFFFFFFFFF8);
      if (v22 <= 1)
        v48 = 1;
      else
        v48 = v13 >> 3;
      v49 = v48 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        v50 = a1[5];
        if (v48 < 2)
          break;
        v53 = 0;
        v54 = 0;
        v55 = (_QWORD *)(v50 + 8);
        v56 = v48 & 0xFFFFFFFFFFFFFFFELL;
        v57 = v47 + 1;
        do
        {
          v53 += *(v55 - 1) * *(v57 - 1);
          v54 += *v55 * *v57;
          v57 += 2;
          v55 += 2;
          v56 -= 2;
        }
        while (v56);
        v51 = v54 + v53;
        v52 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49)
          goto LABEL_60;
LABEL_62:
        v65 = a2[5];
        if (v48 < 2)
        {
          v66 = 0;
          v67 = 0;
LABEL_67:
          v73 = v48 - v67;
          v74 = v67;
          v75 = (uint64_t *)(v65 + v74 * 8);
          v76 = &v47[v74];
          do
          {
            v78 = *v76++;
            v77 = v78;
            v79 = *v75++;
            v66 += v79 * v77;
            --v73;
          }
          while (v73);
          goto LABEL_69;
        }
        v68 = 0;
        v69 = 0;
        v70 = (_QWORD *)(v65 + 8);
        v71 = v48 & 0xFFFFFFFFFFFFFFFELL;
        v72 = v47 + 1;
        do
        {
          v68 += *(v70 - 1) * *(v72 - 1);
          v69 += *v70 * *v72;
          v72 += 2;
          v70 += 2;
          v71 -= 2;
        }
        while (v71);
        v66 = v69 + v68;
        v67 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49)
          goto LABEL_67;
LABEL_69:
        *(_BYTE *)(*a1 + v51) *= *(_BYTE *)(*a2 + a2[8] + v66);
        if ((int)((unint64_t)v13 >> 3) >= 1)
        {
          v80 = a1[2];
          v81 = ((unint64_t)v13 >> 3) + 1;
          v82 = (unint64_t)v13 >> 3;
          while (1)
          {
            v83 = (v81 - 2);
            v84 = v47[v83] + 1;
            v47[v83] = v84;
            if (v84 < *(_QWORD *)(v80 + v83 * 8))
              break;
            v47[(v81 - 2)] = 0;
            LODWORD(v82) = v82 - 1;
            if ((unint64_t)--v81 <= 1)
              goto LABEL_75;
          }
          if ((int)v82 > 0)
            continue;
        }
LABEL_75:
        operator delete(v47);
        return;
      }
      v51 = 0;
      v52 = 0;
LABEL_60:
      v58 = v48 - v52;
      v59 = v52;
      v60 = (uint64_t *)(v50 + v59 * 8);
      v61 = &v47[v59];
      do
      {
        v63 = *v61++;
        v62 = v63;
        v64 = *v60++;
        v51 += v64 * v62;
        --v58;
      }
      while (v58);
      goto LABEL_62;
    }
    v26 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      v27 = 0;
      v28 = a2[8];
      v29 = a1[8];
      do
      {
        if (*((_QWORD *)v4 + 1))
        {
          v32 = 0;
          v33 = v28;
          v34 = v29;
          do
          {
            *(_BYTE *)(*a1 + v34) *= *(_BYTE *)(*a2 + v33);
            v30 = (_QWORD *)a1[5];
            v34 += v30[1];
            v31 = (_QWORD *)a2[5];
            v33 += v31[1];
            ++v32;
            v4 = (char *)a1[2];
          }
          while (v32 < *((_QWORD *)v4 + 1));
          v26 = *(_QWORD *)v4;
        }
        else
        {
          v30 = (_QWORD *)a1[5];
          v31 = (_QWORD *)a2[5];
        }
        v29 += *v30;
        v28 += *v31;
        ++v27;
      }
      while (v27 < v26);
    }
  }
}

void sub_1911CA204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>::operator*<unsigned char>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<unsigned char>::copy((uint64_t)a1, a3);
    nitro::ndarray<unsigned char>::operator*=<unsigned char>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<unsigned char>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<unsigned char>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<unsigned char>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<unsigned char>::operator*=<unsigned char>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911CA564(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911CA578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911CA614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911CA5F0);
  JUMPOUT(0x1911CA5C0);
}

void sub_1911CA624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911CA600);
  JUMPOUT(0x1911CA5C8);
}

void sub_1911CA634()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911CA5D8);
  JUMPOUT(0x1911CA5D0);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911CA8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911CAA4C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911CAA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911CAA58);
}

uint64_t *nitro::ndarray<int>::operator*=<unsigned char>(uint64_t *a1, uint64_t *a2, double a3, double a4, int8x16_t a5, double a6, int8x16_t a7)
{
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v30;
  void *v31;
  void *v32;
  void *__p;
  void *v34;

  v8 = (char *)a1[2];
  v9 = (char *)a1[3];
  v10 = v9 - v8;
  if (v9 == v8 || !*a1)
    return a1;
  if ((unint64_t)(v10 - 8) < 8)
  {
    v11 = 1;
    v12 = (char *)a1[2];
    do
    {
LABEL_8:
      v18 = *(_QWORD *)v12;
      v12 += 8;
      v11 *= v18;
    }
    while (v12 != v9);
    goto LABEL_9;
  }
  v13 = ((unint64_t)(v10 - 8) >> 3) + 1;
  v12 = &v8[8 * (v13 & 0x3FFFFFFFFFFFFFFELL)];
  v14 = v8 + 8;
  v15 = 1;
  v16 = v13 & 0x3FFFFFFFFFFFFFFELL;
  v17 = 1;
  do
  {
    v15 *= *(v14 - 1);
    v17 *= *v14;
    v14 += 2;
    v16 -= 2;
  }
  while (v16);
  v11 = v17 * v15;
  if (v13 != (v13 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v11)
  {
    v19 = v10 >> 3;
    v20 = (_QWORD *)a2[2];
    if (v19 != (a2[3] - (uint64_t)v20) >> 3)
      goto LABEL_19;
    v21 = v19 <= 1 ? 1 : v19;
    if (*(_QWORD *)v8 != *v20)
      goto LABEL_19;
    v22 = 1;
    do
    {
      v23 = v22;
      if (v21 == v22)
        break;
      v24 = *(_QWORD *)&v8[8 * v22];
      v25 = v20[v22++];
    }
    while (v24 == v25);
    if (v23 >= v19)
    {
      nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(a1, a2, a3, a4, a5, a6, a7);
    }
    else
    {
LABEL_19:
      nitro::ndarray<int>::operator*<unsigned char>(a1, a2, &v30);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v30);
      if (__p)
      {
        v34 = __p;
        operator delete(__p);
      }
      if (v31)
      {
        v32 = v31;
        operator delete(v31);
      }
      v26 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
      if (*((_QWORD *)&v30 + 1))
      {
        v27 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
  }
  return a1;
}

void nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(uint64_t *a1, uint64_t *a2, double a3, double a4, int8x16_t a5, double a6, int8x16_t a7)
{
  char *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  _DWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int32x4_t *v55;
  uint64_t v56;
  int32x4_t *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  BOOL v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int8x16_t *v68;
  int32x4_t v69;
  unint64_t v70;
  unint64_t v71;
  unsigned __int8 *v72;
  uint64_t v73;
  _DWORD *v74;
  int32x4_t *v75;
  uint64_t v76;
  unint64_t v77;
  int8x16_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t *v88;
  int32x4_t *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  int32x4_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  BOOL v104;
  BOOL v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int8x16_t *v112;
  int32x4_t v113;
  unint64_t v114;
  unint64_t v115;
  unsigned __int8 *v116;
  uint64_t v117;
  _DWORD *v118;
  int32x4_t *v119;
  uint64_t v120;
  unint64_t v121;
  int8x16_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  _QWORD *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t *v169;
  int32x4_t *v170;
  unint64_t v171;
  int32x4_t v172;
  int8x16_t *v173;
  int32x4_t *v174;
  unint64_t v175;
  int8x16_t v176;
  int32x4_t v177;
  int32x4_t v178;
  int32x4_t v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v188;

  v9 = (unint64_t *)a1[2];
  v8 = (char *)a1[3];
  v10 = (v8 - (char *)v9) >> 3;
  v11 = (_QWORD *)a2[2];
  if (v10 != (a2[3] - (uint64_t)v11) >> 3)
    goto LABEL_13;
  if (v8 == (char *)v9)
    return;
  v12 = v10 <= 1 ? 1 : (v8 - (char *)v9) >> 3;
  if (*v9 != *v11)
    goto LABEL_13;
  v13 = 1;
  do
  {
    v14 = v13;
    if (v12 == v13)
      break;
    v15 = v9[v13];
    v16 = v11[v13++];
  }
  while (v15 == v16);
  if (v14 < v10)
LABEL_13:
    nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1})::{lambda(void)#1}::operator()();
  v17 = v8 - (char *)v9;
  if (v8 == (char *)v9)
    return;
  v18 = *a1;
  if (!*a1)
    return;
  if (v17 - 8 < 8)
  {
    v19 = 1;
    v20 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v26 = *v20++;
      v19 *= v26;
    }
    while (v20 != (unint64_t *)v8);
    goto LABEL_21;
  }
  v21 = ((v17 - 8) >> 3) + 1;
  v20 = &v9[v21 & 0x3FFFFFFFFFFFFFFELL];
  v22 = v9 + 1;
  v23 = 1;
  v24 = v21 & 0x3FFFFFFFFFFFFFFELL;
  v25 = 1;
  do
  {
    v23 *= *(v22 - 1);
    v25 *= *v22;
    v22 += 2;
    v24 -= 2;
  }
  while (v24);
  v19 = v25 * v23;
  if (v21 != (v21 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v19)
    return;
  v27 = (uint64_t)v17 >> 3;
  if ((uint64_t)v17 >> 3 == 3)
  {
    v185 = *v9;
    if (!*v9)
      return;
    v84 = 0;
    v85 = a2[8];
    v86 = a1[8];
    v87 = v9[1];
    v88 = (uint64_t *)a1[5];
    v181 = (uint64_t *)a2[5];
    v183 = *v181;
    v184 = *v88;
    v186 = 4 * *v88;
    v180 = 4 * v86;
    v89 = (int32x4_t *)(v18 + 4 * v86);
    v182 = v86;
    while (!v87)
    {
LABEL_64:
      v86 += v184;
      v85 += v183;
      ++v84;
      v89 = (int32x4_t *)((char *)v89 + v186);
      if (v84 == v185)
        return;
    }
    v90 = 0;
    v91 = v9[2];
    v92 = *a2;
    v93 = a2[5];
    v94 = v88[1];
    v95 = 4 * v94;
    v96 = v181[1];
    v188 = v91 & 0xFFFFFFFFFFFFFFF0;
    v97 = v91 & 0xFFFFFFFFFFFFFFF8;
    v98 = v89;
    v99 = *a2;
    v100 = v85;
    v101 = v86;
    while (!v91)
    {
LABEL_67:
      v101 += v94;
      v100 += v96;
      ++v90;
      v99 += v96;
      v98 = (int32x4_t *)((char *)v98 + v95);
      if (v90 == v87)
        goto LABEL_64;
    }
    v102 = v88[2];
    v103 = *(_QWORD *)(v93 + 16);
    if (v91 < 8
      || (v102 == 1 ? (v104 = v103 == 1) : (v104 = 0),
          !v104
       || (v18 + v180 + v186 * v84 + v95 * v90 < v92 + v91 + v85 + v96 * v90
         ? (v105 = v92 + v100 >= v18 + v186 * v84 + 4 * (v182 + v91) + v95 * v90)
         : (v105 = 1),
           !v105)))
    {
      v114 = 0;
      v107 = v100;
      v111 = v101;
      goto LABEL_87;
    }
    if (v91 >= 0x10)
    {
      v119 = v98;
      v120 = v99;
      v121 = v91 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v122 = *(int8x16_t *)(v120 + v85);
        v123 = (int32x4_t)vqtbl1q_s8(v122, (int8x16_t)xmmword_191A741B0);
        v124 = (int32x4_t)vqtbl1q_s8(v122, (int8x16_t)xmmword_191A741C0);
        v125 = (int32x4_t)vqtbl1q_s8(v122, (int8x16_t)xmmword_191A74190);
        a7 = (int8x16_t)vmulq_s32(v119[1], (int32x4_t)vqtbl1q_s8(v122, (int8x16_t)xmmword_191A741A0));
        v126 = vmulq_s32(*v119, v125);
        v127 = vmulq_s32(v119[3], v124);
        v119[2] = vmulq_s32(v119[2], v123);
        v119[3] = v127;
        *v119 = v126;
        v119[1] = (int32x4_t)a7;
        v119 += 4;
        v120 += 16;
        v121 -= 16;
      }
      while (v121);
      if (v91 == v188)
        goto LABEL_67;
      v106 = v91 & 0xFFFFFFFFFFFFFFF0;
      if ((v91 & 8) == 0)
      {
        v111 = v101 + v188 * v102;
        v114 = v91 & 0xFFFFFFFFFFFFFFF0;
        v107 = v100 + v188 * v103;
LABEL_87:
        v115 = v91 - v114;
        v116 = (unsigned __int8 *)(v92 + v107);
        v117 = 4 * v102;
        v118 = (_DWORD *)(v18 + 4 * v111);
        do
        {
          *v118 *= *v116;
          v116 += v103;
          v118 = (_DWORD *)((char *)v118 + v117);
          --v115;
        }
        while (v115);
        goto LABEL_67;
      }
    }
    else
    {
      v106 = 0;
    }
    v107 = v100 + v97 * v103;
    v108 = v106 - (v91 & 0xFFFFFFFFFFFFFFF8);
    v109 = v85 + v106;
    v110 = 4 * v106;
    v111 = v101 + v97 * v102;
    do
    {
      a7.i64[0] = *(_QWORD *)(v99 + v109);
      v112 = (int8x16_t *)&v98->i8[v110];
      v113 = (int32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_191A74190);
      a7 = (int8x16_t)vmulq_s32(*(int32x4_t *)((char *)&v98[1] + v110), (int32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_191A741A0));
      *(int32x4_t *)v112 = vmulq_s32(*(int32x4_t *)((char *)v98 + v110), v113);
      v112[1] = a7;
      v109 += 8;
      v110 += 32;
      v108 += 8;
    }
    while (v108);
    v114 = v91 & 0xFFFFFFFFFFFFFFF8;
    if (v91 == v97)
      goto LABEL_67;
    goto LABEL_87;
  }
  if (v27 == 2)
  {
    v41 = *v9;
    if (!*v9)
      return;
    v42 = 0;
    v43 = a2[8];
    v44 = a1[8];
    v45 = v9[1];
    v46 = *a2;
    v47 = (uint64_t *)a2[5];
    v48 = (uint64_t *)a1[5];
    v49 = *v48;
    v50 = *v47;
    v51 = 4 * *v48;
    v52 = v43 + v45;
    v53 = v45 & 0xFFFFFFFFFFFFFFF0;
    v54 = v45 & 0xFFFFFFFFFFFFFFF8;
    v55 = (int32x4_t *)(v18 + 4 * v44);
    v56 = v18 + 4 * (v44 + v45);
    v57 = v55;
    while (!v45)
    {
LABEL_34:
      v44 += v49;
      v43 += v50;
      ++v42;
      v57 = (int32x4_t *)((char *)v57 + v51);
      if (v42 == v41)
        return;
    }
    v58 = v48[1];
    v59 = v47[1];
    if (v45 < 8
      || (v58 == 1 ? (v60 = v59 == 1) : (v60 = 0),
          !v60
       || ((unint64_t)v55->u64 + v51 * v42 < v46 + v52 + v50 * v42
         ? (v61 = v46 + v43 >= (unint64_t)(v56 + v51 * v42))
         : (v61 = 1),
           !v61)))
    {
      v70 = 0;
      v63 = v43;
      v67 = v44;
      goto LABEL_54;
    }
    if (v45 >= 0x10)
    {
      v75 = v57;
      v76 = v46;
      v77 = v45 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v78 = *(int8x16_t *)(v76 + v43);
        v79 = (int32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_191A741B0);
        v80 = (int32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_191A741C0);
        v81 = (int32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_191A74190);
        a7 = (int8x16_t)vmulq_s32(v75[1], (int32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_191A741A0));
        v82 = vmulq_s32(*v75, v81);
        v83 = vmulq_s32(v75[3], v80);
        v75[2] = vmulq_s32(v75[2], v79);
        v75[3] = v83;
        *v75 = v82;
        v75[1] = (int32x4_t)a7;
        v75 += 4;
        v76 += 16;
        v77 -= 16;
      }
      while (v77);
      if (v45 == v53)
        goto LABEL_34;
      v62 = v45 & 0xFFFFFFFFFFFFFFF0;
      if ((v45 & 8) == 0)
      {
        v67 = v44 + v53 * v58;
        v70 = v45 & 0xFFFFFFFFFFFFFFF0;
        v63 = v43 + v53 * v59;
LABEL_54:
        v71 = v45 - v70;
        v72 = (unsigned __int8 *)(v46 + v63);
        v73 = 4 * v58;
        v74 = (_DWORD *)(v18 + 4 * v67);
        do
        {
          *v74 *= *v72;
          v72 += v59;
          v74 = (_DWORD *)((char *)v74 + v73);
          --v71;
        }
        while (v71);
        goto LABEL_34;
      }
    }
    else
    {
      v62 = 0;
    }
    v63 = v43 + v54 * v59;
    v64 = v62 - (v45 & 0xFFFFFFFFFFFFFFF8);
    v65 = v46 + v62;
    v66 = 4 * v62;
    v67 = v44 + v54 * v58;
    do
    {
      a7.i64[0] = *(_QWORD *)(v65 + v43);
      v68 = (int8x16_t *)&v57->i8[v66];
      v69 = (int32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_191A74190);
      a7 = (int8x16_t)vmulq_s32(*(int32x4_t *)((char *)&v57[1] + v66), (int32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_191A741A0));
      *(int32x4_t *)v68 = vmulq_s32(*(int32x4_t *)((char *)v57 + v66), v69);
      v68[1] = a7;
      v65 += 8;
      v66 += 32;
      v64 += 8;
    }
    while (v64);
    v70 = v45 & 0xFFFFFFFFFFFFFFF8;
    if (v45 == v54)
      goto LABEL_34;
    goto LABEL_54;
  }
  if (v27 != 1)
  {
    if ((v17 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v128 = operator new(v17);
    bzero(v128, v17 & 0xFFFFFFFFFFFFFFF8);
    v129 = *a2;
    if (v17 >> 3 <= 1)
      v130 = 1;
    else
      v130 = v17 >> 3;
    v131 = a2[5];
    v132 = a2[8];
    v133 = v130 & 0x1FFFFFFFFFFFFFFELL;
    v134 = a1[5];
    while (v130 >= 2)
    {
      v137 = 0;
      v138 = 0;
      v139 = v130 & 0x1FFFFFFFFFFFFFFELL;
      v140 = (_QWORD *)(v134 + 8);
      v141 = v128 + 1;
      do
      {
        v137 += *(v140 - 1) * *(v141 - 1);
        v138 += *v140 * *v141;
        v141 += 2;
        v140 += 2;
        v139 -= 2;
      }
      while (v139);
      v135 = v138 + v137;
      v136 = v130 & 0x1FFFFFFFFFFFFFFELL;
      if (v130 != v133)
        goto LABEL_105;
LABEL_107:
      if (v130 < 2)
      {
        v149 = 0;
        v150 = 0;
LABEL_112:
        v156 = v130 - v150;
        v157 = v150;
        v158 = (uint64_t *)(v131 + 8 * v150);
        v159 = &v128[v157];
        do
        {
          v161 = *v159++;
          v160 = v161;
          v162 = *v158++;
          v149 += v162 * v160;
          --v156;
        }
        while (v156);
        goto LABEL_114;
      }
      v151 = 0;
      v152 = 0;
      v153 = v130 & 0x1FFFFFFFFFFFFFFELL;
      v154 = (_QWORD *)(v131 + 8);
      v155 = v128 + 1;
      do
      {
        v151 += *(v154 - 1) * *(v155 - 1);
        v152 += *v154 * *v155;
        v155 += 2;
        v154 += 2;
        v153 -= 2;
      }
      while (v153);
      v149 = v152 + v151;
      v150 = v130 & 0x1FFFFFFFFFFFFFFELL;
      if (v130 != v133)
        goto LABEL_112;
LABEL_114:
      *(_DWORD *)(v18 + 4 * v135) *= *(unsigned __int8 *)(v129 + v132 + v149);
      if ((int)(v17 >> 3) >= 1)
      {
        v163 = (v17 >> 3) + 1;
        v164 = v17 >> 3;
        while (1)
        {
          v165 = (v163 - 2);
          v166 = v128[v165] + 1;
          v128[v165] = v166;
          if (v166 < v9[v165])
            break;
          v128[(v163 - 2)] = 0;
          --v164;
          if ((unint64_t)--v163 <= 1)
            goto LABEL_120;
        }
        if (v164 > 0)
          continue;
      }
LABEL_120:
      operator delete(v128);
      return;
    }
    v135 = 0;
    v136 = 0;
LABEL_105:
    v142 = v130 - v136;
    v143 = v136;
    v144 = (uint64_t *)(v134 + 8 * v136);
    v145 = &v128[v143];
    do
    {
      v147 = *v145++;
      v146 = v147;
      v148 = *v144++;
      v135 += v148 * v146;
      --v142;
    }
    while (v142);
    goto LABEL_107;
  }
  v28 = *v9;
  if (!*v9)
    return;
  v29 = a2[8];
  v30 = a1[8];
  v31 = *a2;
  v32 = *(_QWORD *)a1[5];
  v33 = *(_QWORD *)a2[5];
  if (v28 < 8)
    goto LABEL_27;
  v34 = 0;
  if (v32 != 1 || v33 != 1)
    goto LABEL_28;
  if (v18 + 4 * v30 < v31 + v28 + v29 && v31 + v29 < v18 + 4 * (v28 + v30))
  {
LABEL_27:
    v34 = 0;
LABEL_28:
    v35 = a2[8];
    v36 = a1[8];
    goto LABEL_29;
  }
  if (v28 >= 0x10)
  {
    v34 = v28 & 0xFFFFFFFFFFFFFFF0;
    v173 = (int8x16_t *)(v31 + v29);
    v174 = (int32x4_t *)(v18 + 4 * v30);
    a5.i64[1] = 0xFFFFFF03FFFFFF02;
    v175 = v28 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v176 = *v173++;
      v177 = vmulq_s32(v174[1], (int32x4_t)vqtbl1q_s8(v176, (int8x16_t)xmmword_191A741A0));
      v178 = vmulq_s32(*v174, (int32x4_t)vqtbl1q_s8(v176, (int8x16_t)xmmword_191A74190));
      v179 = vmulq_s32(v174[3], (int32x4_t)vqtbl1q_s8(v176, (int8x16_t)xmmword_191A741C0));
      v174[2] = vmulq_s32(v174[2], (int32x4_t)vqtbl1q_s8(v176, (int8x16_t)xmmword_191A741B0));
      v174[3] = v179;
      *v174 = v178;
      v174[1] = v177;
      v174 += 4;
      v175 -= 16;
    }
    while (v175);
    if (v28 == v34)
      return;
    if ((v28 & 8) == 0)
    {
      v36 = v30 + v34;
      v35 = v29 + v34;
LABEL_29:
      v37 = v28 - v34;
      v38 = (unsigned __int8 *)(v31 + v35);
      v39 = 4 * v32;
      v40 = (_DWORD *)(v18 + 4 * v36);
      do
      {
        *v40 *= *v38;
        v38 += v33;
        v40 = (_DWORD *)((char *)v40 + v39);
        --v37;
      }
      while (v37);
      return;
    }
  }
  else
  {
    v34 = 0;
  }
  v167 = v34;
  v34 = v28 & 0xFFFFFFFFFFFFFFF8;
  v35 = v29 + (v28 & 0xFFFFFFFFFFFFFFF8);
  v36 = v30 + (v28 & 0xFFFFFFFFFFFFFFF8);
  v168 = v167 - (v28 & 0xFFFFFFFFFFFFFFF8);
  v169 = (unint64_t *)(v31 + v167 + v29);
  v170 = (int32x4_t *)(v18 + 4 * (v167 + v30));
  do
  {
    v171 = *v169++;
    a5.i64[0] = v171;
    v172 = (int32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_191A74190);
    a5 = (int8x16_t)vmulq_s32(v170[1], (int32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_191A741A0));
    *v170 = vmulq_s32(*v170, v172);
    v170[1] = (int32x4_t)a5;
    v170 += 2;
    v168 += 8;
  }
  while (v168);
  if (v28 != v34)
    goto LABEL_29;
}

void sub_1911CB554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::operator*<unsigned char>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<int>::copy((uint64_t)a1, a3);
    nitro::ndarray<int>::operator*=<unsigned char>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<int>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<int>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<unsigned char>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<int>::operator*=<unsigned char>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911CB8B4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911CB8C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911CB964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911CB940);
  JUMPOUT(0x1911CB910);
}

void sub_1911CB974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911CB950);
  JUMPOUT(0x1911CB918);
}

void sub_1911CB984()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911CB928);
  JUMPOUT(0x1911CB920);
}

void nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911CBBF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911CBD9C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911CBDB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911CBDA8);
}

uint64_t *nitro::ndarray<half>::operator*=<unsigned char>(uint64_t *a1, uint64_t *a2, float a3, double a4, int8x16_t a5, double a6, int8x16_t a7)
{
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v30;
  void *v31;
  void *v32;
  void *__p;
  void *v34;

  v8 = (char *)a1[2];
  v9 = (char *)a1[3];
  v10 = v9 - v8;
  if (v9 == v8 || !*a1)
    return a1;
  if ((unint64_t)(v10 - 8) < 8)
  {
    v11 = 1;
    v12 = (char *)a1[2];
    do
    {
LABEL_8:
      v18 = *(_QWORD *)v12;
      v12 += 8;
      v11 *= v18;
    }
    while (v12 != v9);
    goto LABEL_9;
  }
  v13 = ((unint64_t)(v10 - 8) >> 3) + 1;
  v12 = &v8[8 * (v13 & 0x3FFFFFFFFFFFFFFELL)];
  v14 = v8 + 8;
  v15 = 1;
  v16 = v13 & 0x3FFFFFFFFFFFFFFELL;
  v17 = 1;
  do
  {
    v15 *= *(v14 - 1);
    v17 *= *v14;
    v14 += 2;
    v16 -= 2;
  }
  while (v16);
  v11 = v17 * v15;
  if (v13 != (v13 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v11)
  {
    v19 = v10 >> 3;
    v20 = (_QWORD *)a2[2];
    if (v19 != (a2[3] - (uint64_t)v20) >> 3)
      goto LABEL_19;
    v21 = v19 <= 1 ? 1 : v19;
    if (*(_QWORD *)v8 != *v20)
      goto LABEL_19;
    v22 = 1;
    do
    {
      v23 = v22;
      if (v21 == v22)
        break;
      v24 = *(_QWORD *)&v8[8 * v22];
      v25 = v20[v22++];
    }
    while (v24 == v25);
    if (v23 >= v19)
    {
      nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(a1, a2, a3, a4, a5, a6, a7);
    }
    else
    {
LABEL_19:
      nitro::ndarray<half>::operator*<unsigned char>(a1, a2, &v30);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v30);
      if (__p)
      {
        v34 = __p;
        operator delete(__p);
      }
      if (v31)
      {
        v32 = v31;
        operator delete(v31);
      }
      v26 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
      if (*((_QWORD *)&v30 + 1))
      {
        v27 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
  }
  return a1;
}

void nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(uint64_t *a1, uint64_t *a2, float _S0, double a4, int8x16_t a5, double a6, int8x16_t _Q4)
{
  char *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  __int16 *v40;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  float16x4_t *v59;
  uint64_t v60;
  float16x4_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unsigned __int8 *v74;
  uint64_t v75;
  __int16 *v76;
  float16x4_t *v79;
  uint64_t v80;
  unint64_t v81;
  int8x16_t v82;
  uint32x4_t v83;
  uint32x4_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  float16x4_t *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  float16x4_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  BOOL v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unsigned __int8 *v115;
  uint64_t v116;
  __int16 *v117;
  float16x4_t *v120;
  uint64_t v121;
  unint64_t v122;
  int8x16_t v123;
  uint32x4_t v124;
  uint32x4_t v125;
  _QWORD *v126;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  _QWORD *v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v165;
  int v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t *v171;
  float16x4_t *v172;
  unint64_t v173;
  int8x16_t *v174;
  float16x4_t *v175;
  unint64_t v176;
  int8x16_t v177;
  float16x8_t v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v187;

  v9 = (unint64_t *)a1[2];
  v8 = (char *)a1[3];
  v10 = (v8 - (char *)v9) >> 3;
  v11 = (_QWORD *)a2[2];
  if (v10 != (a2[3] - (uint64_t)v11) >> 3)
    goto LABEL_13;
  if (v8 == (char *)v9)
    return;
  v12 = v10 <= 1 ? 1 : (v8 - (char *)v9) >> 3;
  if (*v9 != *v11)
    goto LABEL_13;
  v13 = 1;
  do
  {
    v14 = v13;
    if (v12 == v13)
      break;
    v15 = v9[v13];
    v16 = v11[v13++];
  }
  while (v15 == v16);
  if (v14 < v10)
LABEL_13:
    nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1})::{lambda(void)#1}::operator()();
  v17 = v8 - (char *)v9;
  if (v8 == (char *)v9)
    return;
  v18 = *a1;
  if (!*a1)
    return;
  if (v17 - 8 < 8)
  {
    v19 = 1;
    v20 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v26 = *v20++;
      v19 *= v26;
    }
    while (v20 != (unint64_t *)v8);
    goto LABEL_21;
  }
  v21 = ((v17 - 8) >> 3) + 1;
  v20 = &v9[v21 & 0x3FFFFFFFFFFFFFFELL];
  v22 = v9 + 1;
  v23 = 1;
  v24 = v21 & 0x3FFFFFFFFFFFFFFELL;
  v25 = 1;
  do
  {
    v23 *= *(v22 - 1);
    v25 *= *v22;
    v22 += 2;
    v24 -= 2;
  }
  while (v24);
  v19 = v25 * v23;
  if (v21 != (v21 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v19)
    return;
  v27 = (uint64_t)v17 >> 3;
  if ((uint64_t)v17 >> 3 == 3)
  {
    v184 = *v9;
    if (!*v9)
      return;
    v85 = 0;
    v86 = a2[8];
    v87 = a1[8];
    v88 = v9[1];
    v89 = (uint64_t *)a1[5];
    v180 = (uint64_t *)a2[5];
    v182 = *v180;
    v183 = *v89;
    v185 = 2 * *v89;
    v179 = 2 * v87;
    v90 = (float16x4_t *)(v18 + 2 * v87);
    v181 = v87;
    while (!v88)
    {
LABEL_64:
      v87 += v183;
      v86 += v182;
      ++v85;
      v90 = (float16x4_t *)((char *)v90 + v185);
      if (v85 == v184)
        return;
    }
    v91 = 0;
    v92 = v9[2];
    v93 = *a2;
    v94 = a2[5];
    v95 = v89[1];
    v96 = 2 * v95;
    v97 = v180[1];
    v187 = v92 & 0xFFFFFFFFFFFFFFF0;
    v98 = v92 & 0xFFFFFFFFFFFFFFF8;
    v99 = v90;
    v100 = *a2;
    v101 = v86;
    v102 = v87;
    while (!v92)
    {
LABEL_67:
      v102 += v95;
      v101 += v97;
      ++v91;
      v100 += v97;
      v99 = (float16x4_t *)((char *)v99 + v96);
      if (v91 == v88)
        goto LABEL_64;
    }
    v103 = v89[2];
    v104 = *(_QWORD *)(v94 + 16);
    if (v92 < 8
      || (v103 == 1 ? (v105 = v104 == 1) : (v105 = 0),
          !v105
       || (v18 + v179 + v185 * v85 + v96 * v91 < v93 + v92 + v86 + v97 * v91
         ? (v106 = v93 + v101 >= v18 + v185 * v85 + 2 * (v181 + v92) + v96 * v91)
         : (v106 = 1),
           !v106)))
    {
      v113 = 0;
      v108 = v101;
      v112 = v102;
      goto LABEL_87;
    }
    if (v92 >= 0x10)
    {
      v120 = v99;
      v121 = v100;
      v122 = v92 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v123 = *(int8x16_t *)(v121 + v86);
        v124 = (uint32x4_t)vqtbl1q_s8(v123, (int8x16_t)xmmword_191A741A0);
        v125 = (uint32x4_t)vqtbl1q_s8(v123, (int8x16_t)xmmword_191A74190);
        _Q4 = (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v123, (int8x16_t)xmmword_191A741B0)), vcvtq_f32_f16(v120[2]))), vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v123, (int8x16_t)xmmword_191A741C0)), vcvt_hight_f32_f16(*(float16x8_t *)v120[2].i8)));
        *(float16x8_t *)v120->i8 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(vcvtq_f32_u32(v125), vcvtq_f32_f16(*v120))), vmulq_f32(vcvtq_f32_u32(v124), vcvt_hight_f32_f16(*(float16x8_t *)v120->i8)));
        *(int8x16_t *)v120[2].i8 = _Q4;
        v120 += 4;
        v121 += 16;
        v122 -= 16;
      }
      while (v122);
      if (v92 == v187)
        goto LABEL_67;
      v107 = v92 & 0xFFFFFFFFFFFFFFF0;
      if ((v92 & 8) == 0)
      {
        v112 = v102 + v187 * v103;
        v113 = v92 & 0xFFFFFFFFFFFFFFF0;
        v108 = v101 + v187 * v104;
LABEL_87:
        v114 = v92 - v113;
        v115 = (unsigned __int8 *)(v93 + v108);
        v116 = 2 * v103;
        v117 = (__int16 *)(v18 + 2 * v112);
        do
        {
          _Q4.i8[0] = *v115;
          _H5 = *v117;
          __asm { FCVT            S5, H5 }
          *(float *)_Q4.i32 = (float)_Q4.u32[0] * _S5;
          __asm { FCVT            H4, S4 }
          *v117 = _Q4.i16[0];
          v115 += v104;
          v117 = (__int16 *)((char *)v117 + v116);
          --v114;
        }
        while (v114);
        goto LABEL_67;
      }
    }
    else
    {
      v107 = 0;
    }
    v108 = v101 + v98 * v104;
    v109 = v107 - (v92 & 0xFFFFFFFFFFFFFFF8);
    v110 = v86 + v107;
    v111 = 2 * v107;
    v112 = v102 + v98 * v103;
    do
    {
      _Q4.i64[0] = *(_QWORD *)(v100 + v110);
      _Q4 = (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(_Q4, (int8x16_t)xmmword_191A74190)), vcvtq_f32_f16(*(float16x4_t *)((char *)v99 + v111)))), vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(_Q4, (int8x16_t)xmmword_191A741A0)), vcvt_hight_f32_f16(*(float16x8_t *)&v99->i8[v111])));
      *(int8x16_t *)&v99->i8[v111] = _Q4;
      v110 += 8;
      v111 += 16;
      v109 += 8;
    }
    while (v109);
    v113 = v92 & 0xFFFFFFFFFFFFFFF8;
    if (v92 == v98)
      goto LABEL_67;
    goto LABEL_87;
  }
  if (v27 == 2)
  {
    v45 = *v9;
    if (!*v9)
      return;
    v46 = 0;
    v47 = a2[8];
    v48 = a1[8];
    v49 = v9[1];
    v50 = *a2;
    v51 = (uint64_t *)a2[5];
    v52 = (uint64_t *)a1[5];
    v53 = *v52;
    v54 = *v51;
    v55 = 2 * *v52;
    v56 = v47 + v49;
    v57 = v49 & 0xFFFFFFFFFFFFFFF0;
    v58 = v49 & 0xFFFFFFFFFFFFFFF8;
    v59 = (float16x4_t *)(v18 + 2 * v48);
    v60 = v18 + 2 * (v48 + v49);
    v61 = v59;
    while (!v49)
    {
LABEL_34:
      v48 += v53;
      v47 += v54;
      ++v46;
      v61 = (float16x4_t *)((char *)v61 + v55);
      if (v46 == v45)
        return;
    }
    v62 = v52[1];
    v63 = v51[1];
    if (v49 < 8
      || (v62 == 1 ? (_ZF = v63 == 1) : (_ZF = 0),
          !_ZF
       || ((unint64_t)v59 + v55 * v46 < v50 + v56 + v54 * v46
         ? (_CF = v50 + v47 >= (unint64_t)(v60 + v55 * v46))
         : (_CF = 1),
           !_CF)))
    {
      v72 = 0;
      v67 = v47;
      v71 = v48;
      goto LABEL_54;
    }
    if (v49 >= 0x10)
    {
      v79 = v61;
      v80 = v50;
      v81 = v49 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v82 = *(int8x16_t *)(v80 + v47);
        v83 = (uint32x4_t)vqtbl1q_s8(v82, (int8x16_t)xmmword_191A741A0);
        v84 = (uint32x4_t)vqtbl1q_s8(v82, (int8x16_t)xmmword_191A74190);
        _Q4 = (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v82, (int8x16_t)xmmword_191A741B0)), vcvtq_f32_f16(v79[2]))), vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v82, (int8x16_t)xmmword_191A741C0)), vcvt_hight_f32_f16(*(float16x8_t *)v79[2].i8)));
        *(float16x8_t *)v79->i8 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(vcvtq_f32_u32(v84), vcvtq_f32_f16(*v79))), vmulq_f32(vcvtq_f32_u32(v83), vcvt_hight_f32_f16(*(float16x8_t *)v79->i8)));
        *(int8x16_t *)v79[2].i8 = _Q4;
        v79 += 4;
        v80 += 16;
        v81 -= 16;
      }
      while (v81);
      if (v49 == v57)
        goto LABEL_34;
      v66 = v49 & 0xFFFFFFFFFFFFFFF0;
      if ((v49 & 8) == 0)
      {
        v71 = v48 + v57 * v62;
        v72 = v49 & 0xFFFFFFFFFFFFFFF0;
        v67 = v47 + v57 * v63;
LABEL_54:
        v73 = v49 - v72;
        v74 = (unsigned __int8 *)(v50 + v67);
        v75 = 2 * v62;
        v76 = (__int16 *)(v18 + 2 * v71);
        do
        {
          _Q4.i8[0] = *v74;
          _H5 = *v76;
          __asm { FCVT            S5, H5 }
          *(float *)_Q4.i32 = (float)_Q4.u32[0] * _S5;
          __asm { FCVT            H4, S4 }
          *v76 = _Q4.i16[0];
          v74 += v63;
          v76 = (__int16 *)((char *)v76 + v75);
          --v73;
        }
        while (v73);
        goto LABEL_34;
      }
    }
    else
    {
      v66 = 0;
    }
    v67 = v47 + v58 * v63;
    v68 = v66 - (v49 & 0xFFFFFFFFFFFFFFF8);
    v69 = v50 + v66;
    v70 = 2 * v66;
    v71 = v48 + v58 * v62;
    do
    {
      _Q4.i64[0] = *(_QWORD *)(v69 + v47);
      _Q4 = (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(_Q4, (int8x16_t)xmmword_191A74190)), vcvtq_f32_f16(*(float16x4_t *)((char *)v61 + v70)))), vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(_Q4, (int8x16_t)xmmword_191A741A0)), vcvt_hight_f32_f16(*(float16x8_t *)&v61->i8[v70])));
      *(int8x16_t *)&v61->i8[v70] = _Q4;
      v69 += 8;
      v70 += 16;
      v68 += 8;
    }
    while (v68);
    v72 = v49 & 0xFFFFFFFFFFFFFFF8;
    if (v49 == v58)
      goto LABEL_34;
    goto LABEL_54;
  }
  if (v27 != 1)
  {
    if ((v17 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v126 = operator new(v17);
    bzero(v126, v17 & 0xFFFFFFFFFFFFFFF8);
    v128 = *a2;
    if (v17 >> 3 <= 1)
      v129 = 1;
    else
      v129 = v17 >> 3;
    v130 = a2[5];
    v131 = a2[8];
    v132 = v129 & 0x1FFFFFFFFFFFFFFELL;
    v133 = a1[5];
    while (v129 >= 2)
    {
      v136 = 0;
      v137 = 0;
      v138 = v129 & 0x1FFFFFFFFFFFFFFELL;
      v139 = (_QWORD *)(v133 + 8);
      v140 = v126 + 1;
      do
      {
        v136 += *(v139 - 1) * *(v140 - 1);
        v137 += *v139 * *v140;
        v140 += 2;
        v139 += 2;
        v138 -= 2;
      }
      while (v138);
      v134 = v137 + v136;
      v135 = v129 & 0x1FFFFFFFFFFFFFFELL;
      if (v129 != v132)
        goto LABEL_105;
LABEL_107:
      if (v129 < 2)
      {
        v148 = 0;
        v149 = 0;
LABEL_112:
        v155 = v129 - v149;
        v156 = v149;
        v157 = (uint64_t *)(v130 + 8 * v149);
        v158 = &v126[v156];
        do
        {
          v160 = *v158++;
          v159 = v160;
          v161 = *v157++;
          v148 += v161 * v159;
          --v155;
        }
        while (v155);
        goto LABEL_114;
      }
      v150 = 0;
      v151 = 0;
      v152 = v129 & 0x1FFFFFFFFFFFFFFELL;
      v153 = (_QWORD *)(v130 + 8);
      v154 = v126 + 1;
      do
      {
        v150 += *(v153 - 1) * *(v154 - 1);
        v151 += *v153 * *v154;
        v154 += 2;
        v153 += 2;
        v152 -= 2;
      }
      while (v152);
      v148 = v151 + v150;
      v149 = v129 & 0x1FFFFFFFFFFFFFFELL;
      if (v129 != v132)
        goto LABEL_112;
LABEL_114:
      LOBYTE(_S0) = *(_BYTE *)(v128 + v131 + v148);
      v162 = 2 * v134;
      _H1 = *(_WORD *)(v18 + v162);
      __asm { FCVT            S1, H1 }
      _S0 = (float)LODWORD(_S0) * _S1;
      __asm { FCVT            H0, S0 }
      *(_WORD *)(v18 + v162) = LOWORD(_S0);
      if ((int)(v17 >> 3) >= 1)
      {
        v165 = (v17 >> 3) + 1;
        v166 = v17 >> 3;
        while (1)
        {
          v167 = (v165 - 2);
          v168 = v126[v167] + 1;
          v126[v167] = v168;
          if (v168 < v9[v167])
            break;
          v126[(v165 - 2)] = 0;
          --v166;
          if ((unint64_t)--v165 <= 1)
            goto LABEL_120;
        }
        if (v166 > 0)
          continue;
      }
LABEL_120:
      operator delete(v126);
      return;
    }
    v134 = 0;
    v135 = 0;
LABEL_105:
    v141 = v129 - v135;
    v142 = v135;
    v143 = (uint64_t *)(v133 + 8 * v135);
    v144 = &v126[v142];
    do
    {
      v146 = *v144++;
      v145 = v146;
      v147 = *v143++;
      v134 += v147 * v145;
      --v141;
    }
    while (v141);
    goto LABEL_107;
  }
  v28 = *v9;
  if (!*v9)
    return;
  v29 = a2[8];
  v30 = a1[8];
  v31 = *a2;
  v32 = *(_QWORD *)a1[5];
  v33 = *(_QWORD *)a2[5];
  if (v28 < 8)
    goto LABEL_27;
  v34 = 0;
  if (v32 != 1 || v33 != 1)
    goto LABEL_28;
  if (v18 + 2 * v30 < v31 + v28 + v29 && v31 + v29 < v18 + 2 * (v28 + v30))
  {
LABEL_27:
    v34 = 0;
LABEL_28:
    v35 = a2[8];
    v36 = a1[8];
    goto LABEL_29;
  }
  if (v28 >= 0x10)
  {
    v34 = v28 & 0xFFFFFFFFFFFFFFF0;
    v174 = (int8x16_t *)(v31 + v29);
    v175 = (float16x4_t *)(v18 + 2 * v30);
    _S0 = NAN;
    a5.i64[1] = 0xFFFFFF0FFFFFFF0ELL;
    v176 = v28 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v177 = *v174++;
      v178 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v177, (int8x16_t)xmmword_191A741B0)), vcvtq_f32_f16(v175[2]))), vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v177, (int8x16_t)xmmword_191A741C0)), vcvt_hight_f32_f16(*(float16x8_t *)v175[2].i8)));
      *(float16x8_t *)v175->i8 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v177, (int8x16_t)xmmword_191A74190)), vcvtq_f32_f16(*v175))), vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v177, (int8x16_t)xmmword_191A741A0)), vcvt_hight_f32_f16(*(float16x8_t *)v175->i8)));
      *(float16x8_t *)v175[2].i8 = v178;
      v175 += 4;
      v176 -= 16;
    }
    while (v176);
    if (v28 == v34)
      return;
    if ((v28 & 8) == 0)
    {
      v36 = v30 + v34;
      v35 = v29 + v34;
LABEL_29:
      v37 = v28 - v34;
      v38 = (_BYTE *)(v31 + v35);
      v39 = 2 * v32;
      v40 = (__int16 *)(v18 + 2 * v36);
      do
      {
        LOBYTE(_S0) = *v38;
        _H1 = *v40;
        __asm { FCVT            S1, H1 }
        _S0 = (float)LODWORD(_S0) * _S1;
        __asm { FCVT            H0, S0 }
        *v40 = LOWORD(_S0);
        v38 += v33;
        v40 = (__int16 *)((char *)v40 + v39);
        --v37;
      }
      while (v37);
      return;
    }
  }
  else
  {
    v34 = 0;
  }
  v169 = v34;
  v34 = v28 & 0xFFFFFFFFFFFFFFF8;
  v35 = v29 + (v28 & 0xFFFFFFFFFFFFFFF8);
  v36 = v30 + (v28 & 0xFFFFFFFFFFFFFFF8);
  v170 = v169 - (v28 & 0xFFFFFFFFFFFFFFF8);
  v171 = (unint64_t *)(v31 + v169 + v29);
  v172 = (float16x4_t *)(v18 + 2 * (v169 + v30));
  _S0 = NAN;
  do
  {
    v173 = *v171++;
    a5.i64[0] = v173;
    a5 = (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_191A74190)), vcvtq_f32_f16(*v172))), vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_191A741A0)), vcvt_hight_f32_f16(*(float16x8_t *)v172->i8)));
    *(int8x16_t *)v172->i8 = a5;
    v172 += 2;
    v170 += 8;
  }
  while (v170);
  if (v28 != v34)
    goto LABEL_29;
}

void sub_1911CC988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::operator*<unsigned char>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<half>::copy((uint64_t)a1, a3);
    nitro::ndarray<half>::operator*=<unsigned char>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<half>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<half>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<unsigned char>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<half>::operator*=<unsigned char>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911CCCE8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911CCCFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911CCD98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911CCD74);
  JUMPOUT(0x1911CCD44);
}

void sub_1911CCDA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911CCD84);
  JUMPOUT(0x1911CCD4CLL);
}

void sub_1911CCDB8()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911CCD5CLL);
  JUMPOUT(0x1911CCD54);
}

void nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911CD02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911CD1D0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911CD1E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911CD1DCLL);
}

uint64_t *nitro::ndarray<float>::operator*=<unsigned char>(uint64_t *a1, uint64_t *a2, float a3, double a4, int8x16_t a5, double a6, int8x16_t a7)
{
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v30;
  void *v31;
  void *v32;
  void *__p;
  void *v34;

  v8 = (char *)a1[2];
  v9 = (char *)a1[3];
  v10 = v9 - v8;
  if (v9 == v8 || !*a1)
    return a1;
  if ((unint64_t)(v10 - 8) < 8)
  {
    v11 = 1;
    v12 = (char *)a1[2];
    do
    {
LABEL_8:
      v18 = *(_QWORD *)v12;
      v12 += 8;
      v11 *= v18;
    }
    while (v12 != v9);
    goto LABEL_9;
  }
  v13 = ((unint64_t)(v10 - 8) >> 3) + 1;
  v12 = &v8[8 * (v13 & 0x3FFFFFFFFFFFFFFELL)];
  v14 = v8 + 8;
  v15 = 1;
  v16 = v13 & 0x3FFFFFFFFFFFFFFELL;
  v17 = 1;
  do
  {
    v15 *= *(v14 - 1);
    v17 *= *v14;
    v14 += 2;
    v16 -= 2;
  }
  while (v16);
  v11 = v17 * v15;
  if (v13 != (v13 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v11)
  {
    v19 = v10 >> 3;
    v20 = (_QWORD *)a2[2];
    if (v19 != (a2[3] - (uint64_t)v20) >> 3)
      goto LABEL_19;
    v21 = v19 <= 1 ? 1 : v19;
    if (*(_QWORD *)v8 != *v20)
      goto LABEL_19;
    v22 = 1;
    do
    {
      v23 = v22;
      if (v21 == v22)
        break;
      v24 = *(_QWORD *)&v8[8 * v22];
      v25 = v20[v22++];
    }
    while (v24 == v25);
    if (v23 >= v19)
    {
      nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(a1, a2, a3, a4, a5, a6, a7);
    }
    else
    {
LABEL_19:
      nitro::ndarray<float>::operator*<unsigned char>(a1, a2, &v30);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v30);
      if (__p)
      {
        v34 = __p;
        operator delete(__p);
      }
      if (v31)
      {
        v32 = v31;
        operator delete(v31);
      }
      v26 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
      if (*((_QWORD *)&v30 + 1))
      {
        v27 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
  }
  return a1;
}

void nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(uint64_t *a1, uint64_t *a2, float a3, double a4, int8x16_t a5, double a6, int8x16_t a7)
{
  char *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  float *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  float32x4_t *v55;
  uint64_t v56;
  float32x4_t *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  BOOL v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  float32x4_t v69;
  unint64_t v70;
  unint64_t v71;
  unsigned __int8 *v72;
  uint64_t v73;
  float *v74;
  float32x4_t *v75;
  uint64_t v76;
  unint64_t v77;
  int8x16_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  float32x4_t *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  float32x4_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  BOOL v104;
  BOOL v105;
  unint64_t v106;
  uint64_t v107;
  float32x4_t *v108;
  uint64_t v109;
  unint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  float32x4_t v120;
  unint64_t v121;
  unint64_t v122;
  unsigned __int8 *v123;
  uint64_t v124;
  float *v125;
  float32x4_t *v126;
  uint64_t v127;
  unint64_t v128;
  int8x16_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  _QWORD *v133;
  float v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t *v176;
  float32x4_t *v177;
  unint64_t v178;
  float32x4_t v179;
  int8x16_t *v180;
  float32x4_t *v181;
  unint64_t v182;
  int8x16_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v196;
  unint64_t v197;

  v9 = (unint64_t *)a1[2];
  v8 = (char *)a1[3];
  v10 = (v8 - (char *)v9) >> 3;
  v11 = (_QWORD *)a2[2];
  if (v10 != (a2[3] - (uint64_t)v11) >> 3)
    goto LABEL_13;
  if (v8 == (char *)v9)
    return;
  v12 = v10 <= 1 ? 1 : (v8 - (char *)v9) >> 3;
  if (*v9 != *v11)
    goto LABEL_13;
  v13 = 1;
  do
  {
    v14 = v13;
    if (v12 == v13)
      break;
    v15 = v9[v13];
    v16 = v11[v13++];
  }
  while (v15 == v16);
  if (v14 < v10)
LABEL_13:
    nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1})::{lambda(void)#1}::operator()();
  v17 = v8 - (char *)v9;
  if (v8 == (char *)v9)
    return;
  v18 = *a1;
  if (!*a1)
    return;
  if (v17 - 8 < 8)
  {
    v19 = 1;
    v20 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v26 = *v20++;
      v19 *= v26;
    }
    while (v20 != (unint64_t *)v8);
    goto LABEL_21;
  }
  v21 = ((v17 - 8) >> 3) + 1;
  v20 = &v9[v21 & 0x3FFFFFFFFFFFFFFELL];
  v22 = v9 + 1;
  v23 = 1;
  v24 = v21 & 0x3FFFFFFFFFFFFFFELL;
  v25 = 1;
  do
  {
    v23 *= *(v22 - 1);
    v25 *= *v22;
    v22 += 2;
    v24 -= 2;
  }
  while (v24);
  v19 = v25 * v23;
  if (v21 != (v21 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v19)
    return;
  v27 = (uint64_t)v17 >> 3;
  if ((uint64_t)v17 >> 3 == 3)
  {
    v192 = *v9;
    if (!*v9)
      return;
    v82 = 0;
    v83 = a2[8];
    v84 = a1[8];
    v85 = v9[1];
    v86 = (uint64_t *)a1[5];
    v188 = (uint64_t *)a2[5];
    v190 = *v188;
    v191 = *v86;
    v194 = 4 * *v86;
    v187 = 4 * v84;
    v87 = (float32x4_t *)(v18 + 4 * v84);
    v189 = v84;
    while (!v85)
    {
LABEL_64:
      v84 += v191;
      v83 += v190;
      ++v82;
      v87 = (float32x4_t *)((char *)v87 + v194);
      if (v82 == v192)
        return;
    }
    v88 = 0;
    v89 = v187 + v194 * v82;
    v90 = v9[2];
    v91 = *a2;
    v92 = a2[5];
    v93 = v86[1];
    v94 = 4 * v93;
    v95 = v194 * v82 + 4 * (v189 + v90);
    v96 = v188[1];
    v97 = v90 + v83;
    v196 = v90 & 0xFFFFFFFFFFFFFFF8;
    v197 = v90 & 0xFFFFFFFFFFFFFFF0;
    v193 = v82;
    v98 = v87;
    v99 = *a2;
    v100 = v83;
    v101 = v84;
    while (!v90)
    {
LABEL_67:
      v101 += v93;
      v100 += v96;
      ++v88;
      v99 += v96;
      v98 = (float32x4_t *)((char *)v98 + v94);
      if (v88 == v85)
        goto LABEL_64;
    }
    v102 = v86[2];
    v103 = *(_QWORD *)(v92 + 16);
    if (v90 < 8
      || (v102 == 1 ? (v104 = v103 == 1) : (v104 = 0),
          !v104
       || (v18 + v89 + v94 * v88 < (unint64_t)(v91 + v97 + v96 * v88)
         ? (v105 = v91 + v100 >= (unint64_t)(v18 + v95 + v94 * v88))
         : (v105 = 1),
           !v105)))
    {
      v121 = 0;
      v114 = v100;
      v118 = v101;
      goto LABEL_87;
    }
    if (v90 >= 0x10)
    {
      v126 = v98;
      v127 = v99;
      v128 = v90 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v129 = *(int8x16_t *)(v127 + v83);
        v130 = *v126;
        v131 = vmulq_f32(v126[1], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_191A741A0)));
        v132 = vmulq_f32(v126[3], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_191A741C0)));
        v126[2] = vmulq_f32(v126[2], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_191A741B0)));
        v126[3] = v132;
        a7 = (int8x16_t)vmulq_f32(v130, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_191A74190)));
        *v126 = (float32x4_t)a7;
        v126[1] = v131;
        v126 += 4;
        v127 += 16;
        v128 -= 16;
      }
      while (v128);
      if (v90 == v197)
        goto LABEL_67;
      v106 = v90 & 0xFFFFFFFFFFFFFFF0;
      if ((v90 & 8) == 0)
      {
        v118 = v101 + v197 * v102;
        v121 = v90 & 0xFFFFFFFFFFFFFFF0;
        v114 = v100 + v197 * v103;
LABEL_87:
        v122 = v90 - v121;
        v123 = (unsigned __int8 *)(v91 + v114);
        v124 = 4 * v102;
        v125 = (float *)(v18 + 4 * v118);
        do
        {
          a7.i8[0] = *v123;
          *(float *)a7.i32 = *v125 * (float)a7.u32[0];
          *v125 = *(float *)a7.i32;
          v123 += v103;
          v125 = (float *)((char *)v125 + v124);
          --v122;
        }
        while (v122);
        goto LABEL_67;
      }
    }
    else
    {
      v106 = 0;
    }
    v107 = v84;
    v108 = v87;
    v109 = v97;
    v110 = v9;
    v111 = v18;
    v112 = v95;
    v113 = v89;
    v114 = v100 + v196 * v103;
    v115 = v106 - (v90 & 0xFFFFFFFFFFFFFFF8);
    v116 = v83 + v106;
    v117 = 4 * v106;
    v118 = v101 + v196 * v102;
    do
    {
      v119 = (uint64_t)v98 + v117;
      a7.i64[0] = *(_QWORD *)(v99 + v116);
      v120 = vmulq_f32(*(float32x4_t *)((char *)v98 + v117 + 16), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_191A741A0)));
      a7 = (int8x16_t)vmulq_f32(*(float32x4_t *)((char *)v98 + v117), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_191A74190)));
      *(int8x16_t *)v119 = a7;
      *(float32x4_t *)(v119 + 16) = v120;
      v116 += 8;
      v117 += 32;
      v115 += 8;
    }
    while (v115);
    v121 = v90 & 0xFFFFFFFFFFFFFFF8;
    v89 = v113;
    v95 = v112;
    v18 = v111;
    v9 = v110;
    v97 = v109;
    v87 = v108;
    v84 = v107;
    v82 = v193;
    if (v90 == v196)
      goto LABEL_67;
    goto LABEL_87;
  }
  if (v27 == 2)
  {
    v41 = *v9;
    if (!*v9)
      return;
    v42 = 0;
    v43 = a2[8];
    v44 = a1[8];
    v45 = v9[1];
    v46 = *a2;
    v47 = (uint64_t *)a2[5];
    v48 = (uint64_t *)a1[5];
    v49 = *v48;
    v50 = *v47;
    v51 = 4 * *v48;
    v52 = v43 + v45;
    v53 = v45 & 0xFFFFFFFFFFFFFFF0;
    v54 = v45 & 0xFFFFFFFFFFFFFFF8;
    v55 = (float32x4_t *)(v18 + 4 * v44);
    v56 = v18 + 4 * (v44 + v45);
    v57 = v55;
    while (!v45)
    {
LABEL_34:
      v44 += v49;
      v43 += v50;
      ++v42;
      v57 = (float32x4_t *)((char *)v57 + v51);
      if (v42 == v41)
        return;
    }
    v58 = v48[1];
    v59 = v47[1];
    if (v45 < 8
      || (v58 == 1 ? (v60 = v59 == 1) : (v60 = 0),
          !v60
       || ((unint64_t)v55 + v51 * v42 < v46 + v52 + v50 * v42
         ? (v61 = v46 + v43 >= (unint64_t)(v56 + v51 * v42))
         : (v61 = 1),
           !v61)))
    {
      v70 = 0;
      v63 = v43;
      v67 = v44;
      goto LABEL_54;
    }
    if (v45 >= 0x10)
    {
      v75 = v57;
      v76 = v46;
      v77 = v45 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v78 = *(int8x16_t *)(v76 + v43);
        v79 = *v75;
        v80 = vmulq_f32(v75[1], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_191A741A0)));
        v81 = vmulq_f32(v75[3], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_191A741C0)));
        v75[2] = vmulq_f32(v75[2], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_191A741B0)));
        v75[3] = v81;
        a7 = (int8x16_t)vmulq_f32(v79, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_191A74190)));
        *v75 = (float32x4_t)a7;
        v75[1] = v80;
        v75 += 4;
        v76 += 16;
        v77 -= 16;
      }
      while (v77);
      if (v45 == v53)
        goto LABEL_34;
      v62 = v45 & 0xFFFFFFFFFFFFFFF0;
      if ((v45 & 8) == 0)
      {
        v67 = v44 + v53 * v58;
        v70 = v45 & 0xFFFFFFFFFFFFFFF0;
        v63 = v43 + v53 * v59;
LABEL_54:
        v71 = v45 - v70;
        v72 = (unsigned __int8 *)(v46 + v63);
        v73 = 4 * v58;
        v74 = (float *)(v18 + 4 * v67);
        do
        {
          a7.i8[0] = *v72;
          *(float *)a7.i32 = *v74 * (float)a7.u32[0];
          *v74 = *(float *)a7.i32;
          v72 += v59;
          v74 = (float *)((char *)v74 + v73);
          --v71;
        }
        while (v71);
        goto LABEL_34;
      }
    }
    else
    {
      v62 = 0;
    }
    v63 = v43 + v54 * v59;
    v64 = v62 - (v45 & 0xFFFFFFFFFFFFFFF8);
    v65 = v46 + v62;
    v66 = 4 * v62;
    v67 = v44 + v54 * v58;
    do
    {
      v68 = (uint64_t)v57 + v66;
      a7.i64[0] = *(_QWORD *)(v65 + v43);
      v69 = vmulq_f32(*(float32x4_t *)((char *)v57 + v66 + 16), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_191A741A0)));
      a7 = (int8x16_t)vmulq_f32(*(float32x4_t *)((char *)v57 + v66), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_191A74190)));
      *(int8x16_t *)v68 = a7;
      *(float32x4_t *)(v68 + 16) = v69;
      v65 += 8;
      v66 += 32;
      v64 += 8;
    }
    while (v64);
    v70 = v45 & 0xFFFFFFFFFFFFFFF8;
    if (v45 == v54)
      goto LABEL_34;
    goto LABEL_54;
  }
  if (v27 != 1)
  {
    if ((v17 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v133 = operator new(v17);
    bzero(v133, v17 & 0xFFFFFFFFFFFFFFF8);
    v135 = *a2;
    if (v17 >> 3 <= 1)
      v136 = 1;
    else
      v136 = v17 >> 3;
    v137 = a2[5];
    v138 = a2[8];
    v139 = v136 & 0x1FFFFFFFFFFFFFFELL;
    v140 = a1[5];
    while (v136 >= 2)
    {
      v143 = 0;
      v144 = 0;
      v145 = v136 & 0x1FFFFFFFFFFFFFFELL;
      v146 = (_QWORD *)(v140 + 8);
      v147 = v133 + 1;
      do
      {
        v143 += *(v146 - 1) * *(v147 - 1);
        v144 += *v146 * *v147;
        v147 += 2;
        v146 += 2;
        v145 -= 2;
      }
      while (v145);
      v141 = v144 + v143;
      v142 = v136 & 0x1FFFFFFFFFFFFFFELL;
      if (v136 != v139)
        goto LABEL_105;
LABEL_107:
      if (v136 < 2)
      {
        v155 = 0;
        v156 = 0;
LABEL_112:
        v162 = v136 - v156;
        v163 = v156;
        v164 = (uint64_t *)(v137 + 8 * v156);
        v165 = &v133[v163];
        do
        {
          v167 = *v165++;
          v166 = v167;
          v168 = *v164++;
          v155 += v168 * v166;
          --v162;
        }
        while (v162);
        goto LABEL_114;
      }
      v157 = 0;
      v158 = 0;
      v159 = v136 & 0x1FFFFFFFFFFFFFFELL;
      v160 = (_QWORD *)(v137 + 8);
      v161 = v133 + 1;
      do
      {
        v157 += *(v160 - 1) * *(v161 - 1);
        v158 += *v160 * *v161;
        v161 += 2;
        v160 += 2;
        v159 -= 2;
      }
      while (v159);
      v155 = v158 + v157;
      v156 = v136 & 0x1FFFFFFFFFFFFFFELL;
      if (v136 != v139)
        goto LABEL_112;
LABEL_114:
      LOBYTE(v134) = *(_BYTE *)(v135 + v138 + v155);
      v169 = 4 * v141;
      v134 = *(float *)(v18 + v169) * (float)LODWORD(v134);
      *(float *)(v18 + v169) = v134;
      if ((int)(v17 >> 3) >= 1)
      {
        v170 = (v17 >> 3) + 1;
        v171 = v17 >> 3;
        while (1)
        {
          v172 = (v170 - 2);
          v173 = v133[v172] + 1;
          v133[v172] = v173;
          if (v173 < v9[v172])
            break;
          v133[(v170 - 2)] = 0;
          --v171;
          if ((unint64_t)--v170 <= 1)
            goto LABEL_120;
        }
        if (v171 > 0)
          continue;
      }
LABEL_120:
      operator delete(v133);
      return;
    }
    v141 = 0;
    v142 = 0;
LABEL_105:
    v148 = v136 - v142;
    v149 = v142;
    v150 = (uint64_t *)(v140 + 8 * v142);
    v151 = &v133[v149];
    do
    {
      v153 = *v151++;
      v152 = v153;
      v154 = *v150++;
      v141 += v154 * v152;
      --v148;
    }
    while (v148);
    goto LABEL_107;
  }
  v28 = *v9;
  if (!*v9)
    return;
  v29 = a2[8];
  v30 = a1[8];
  v31 = *a2;
  v32 = *(_QWORD *)a1[5];
  v33 = *(_QWORD *)a2[5];
  if (v28 < 8)
    goto LABEL_27;
  v34 = 0;
  if (v32 != 1 || v33 != 1)
    goto LABEL_28;
  if (v18 + 4 * v30 < v31 + v28 + v29 && v31 + v29 < v18 + 4 * (v28 + v30))
  {
LABEL_27:
    v34 = 0;
LABEL_28:
    v35 = a2[8];
    v36 = a1[8];
    goto LABEL_29;
  }
  if (v28 >= 0x10)
  {
    v34 = v28 & 0xFFFFFFFFFFFFFFF0;
    v180 = (int8x16_t *)(v31 + v29);
    v181 = (float32x4_t *)(v18 + 4 * v30);
    a3 = NAN;
    a5.i64[1] = 0xFFFFFF0FFFFFFF0ELL;
    v182 = v28 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v183 = *v180++;
      v184 = *v181;
      v185 = vmulq_f32(v181[1], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v183, (int8x16_t)xmmword_191A741A0)));
      v186 = vmulq_f32(v181[3], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v183, (int8x16_t)xmmword_191A741C0)));
      v181[2] = vmulq_f32(v181[2], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v183, (int8x16_t)xmmword_191A741B0)));
      v181[3] = v186;
      *v181 = vmulq_f32(v184, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v183, (int8x16_t)xmmword_191A74190)));
      v181[1] = v185;
      v181 += 4;
      v182 -= 16;
    }
    while (v182);
    if (v28 == v34)
      return;
    if ((v28 & 8) == 0)
    {
      v36 = v30 + v34;
      v35 = v29 + v34;
LABEL_29:
      v37 = v28 - v34;
      v38 = (_BYTE *)(v31 + v35);
      v39 = 4 * v32;
      v40 = (float *)(v18 + 4 * v36);
      do
      {
        LOBYTE(a3) = *v38;
        a3 = *v40 * (float)LODWORD(a3);
        *v40 = a3;
        v38 += v33;
        v40 = (float *)((char *)v40 + v39);
        --v37;
      }
      while (v37);
      return;
    }
  }
  else
  {
    v34 = 0;
  }
  v174 = v34;
  v34 = v28 & 0xFFFFFFFFFFFFFFF8;
  v35 = v29 + (v28 & 0xFFFFFFFFFFFFFFF8);
  v36 = v30 + (v28 & 0xFFFFFFFFFFFFFFF8);
  v175 = v174 - (v28 & 0xFFFFFFFFFFFFFFF8);
  v176 = (unint64_t *)(v31 + v174 + v29);
  v177 = (float32x4_t *)(v18 + 4 * (v174 + v30));
  a3 = NAN;
  do
  {
    v178 = *v176++;
    a5.i64[0] = v178;
    v179 = vmulq_f32(v177[1], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_191A741A0)));
    a5 = (int8x16_t)vmulq_f32(*v177, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_191A74190)));
    *v177 = (float32x4_t)a5;
    v177[1] = v179;
    v177 += 2;
    v175 += 8;
  }
  while (v175);
  if (v28 != v34)
    goto LABEL_29;
}

void sub_1911CDD68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::operator*<unsigned char>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<float>::copy((uint64_t)a1, a3);
    nitro::ndarray<float>::operator*=<unsigned char>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<float>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<float>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<unsigned char>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<float>::operator*=<unsigned char>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911CE0C8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911CE0DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911CE178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911CE154);
  JUMPOUT(0x1911CE124);
}

void sub_1911CE188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911CE164);
  JUMPOUT(0x1911CE12CLL);
}

void sub_1911CE198()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911CE13CLL);
  JUMPOUT(0x1911CE134);
}

void nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911CE40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911CE5B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911CE5C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911CE5BCLL);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1911CE8F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1911CE95C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

_QWORD *nitro::ndarray<unsigned char>::operator*=<int>(_QWORD *a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;

  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  v5 = v4 - v3;
  if (v4 == v3 || !*a1)
    return a1;
  if ((unint64_t)(v5 - 8) < 8)
  {
    v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6)
  {
    v14 = v5 >> 3;
    v15 = (_QWORD *)a2[2];
    if (v14 != (uint64_t)(a2[3] - (_QWORD)v15) >> 3)
      goto LABEL_19;
    v16 = v14 <= 1 ? 1 : v14;
    if (*(_QWORD *)v3 != *v15)
      goto LABEL_19;
    v17 = 1;
    do
    {
      v18 = v17;
      if (v16 == v17)
        break;
      v19 = *(_QWORD *)&v3[8 * v17];
      v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 >= v14)
    {
      nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(a1, a2);
    }
    else
    {
LABEL_19:
      nitro::ndarray<unsigned char>::operator*<int>(a1, a2, &v25);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v25);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  return a1;
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;

  v4 = (char *)a1[2];
  v5 = (char *)a1[3];
  v6 = (v5 - v4) >> 3;
  v7 = (_QWORD *)a2[2];
  if (v6 != (uint64_t)(a2[3] - (_QWORD)v7) >> 3)
    goto LABEL_13;
  if (v5 == v4)
    return;
  v8 = v6 <= 1 ? 1 : (v5 - v4) >> 3;
  if (*(_QWORD *)v4 != *v7)
    goto LABEL_13;
  v9 = 1;
  do
  {
    v10 = v9;
    if (v8 == v9)
      break;
    v11 = *(_QWORD *)&v4[8 * v9];
    v12 = v7[v9++];
  }
  while (v11 == v12);
  if (v10 < v6)
LABEL_13:
    nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1})::{lambda(void)#1}::operator()();
  v13 = v5 - v4;
  if (v5 == v4 || !*a1)
    return;
  if ((unint64_t)(v13 - 8) < 8)
  {
    v14 = 1;
    v15 = (char *)a1[2];
    do
    {
LABEL_20:
      v21 = *(_QWORD *)v15;
      v15 += 8;
      v14 *= v21;
    }
    while (v15 != v5);
    goto LABEL_21;
  }
  v16 = ((unint64_t)(v13 - 8) >> 3) + 1;
  v15 = &v4[8 * (v16 & 0x3FFFFFFFFFFFFFFELL)];
  v17 = v4 + 8;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = v13 >> 3;
  if (v13 >> 3 == 3)
  {
    v35 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      v36 = 0;
      v37 = a2[8];
      v38 = a1[8];
      do
      {
        if (*((_QWORD *)v4 + 1))
        {
          v39 = 0;
          v40 = v37;
          v41 = v38;
          do
          {
            if (*((_QWORD *)v4 + 2))
            {
              v44 = 0;
              v45 = v40;
              v46 = v41;
              do
              {
                *(_BYTE *)(*a1 + v46) *= *(_DWORD *)(*a2 + 4 * v45);
                v42 = (_QWORD *)a1[5];
                v46 += v42[2];
                v43 = (_QWORD *)a2[5];
                v45 += v43[2];
                ++v44;
                v4 = (char *)a1[2];
              }
              while (v44 < *((_QWORD *)v4 + 2));
            }
            else
            {
              v42 = (_QWORD *)a1[5];
              v43 = (_QWORD *)a2[5];
            }
            v41 += v42[1];
            v40 += v43[1];
            ++v39;
          }
          while (v39 < *((_QWORD *)v4 + 1));
          v35 = *(_QWORD *)v4;
        }
        else
        {
          v42 = (_QWORD *)a1[5];
          v43 = (_QWORD *)a2[5];
        }
        v38 += *v42;
        v37 += *v43;
        ++v36;
      }
      while (v36 < v35);
    }
  }
  else
  {
    if (v22 != 2)
    {
      if (v22 == 1)
      {
        if (*(_QWORD *)v4)
        {
          v23 = 0;
          v24 = a2[8];
          v25 = a1[8];
          do
          {
            *(_BYTE *)(*a1 + v25) *= *(_BYTE *)(*a2 + 4 * v24);
            v25 += *(_QWORD *)a1[5];
            v24 += *(_QWORD *)a2[5];
            ++v23;
          }
          while (v23 < *(_QWORD *)a1[2]);
        }
        return;
      }
      if (v13 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v47 = operator new(v13);
      bzero(v47, v13 & 0xFFFFFFFFFFFFFFF8);
      if (v22 <= 1)
        v48 = 1;
      else
        v48 = v13 >> 3;
      v49 = v48 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        v50 = a1[5];
        if (v48 < 2)
          break;
        v53 = 0;
        v54 = 0;
        v55 = (_QWORD *)(v50 + 8);
        v56 = v48 & 0xFFFFFFFFFFFFFFFELL;
        v57 = v47 + 1;
        do
        {
          v53 += *(v55 - 1) * *(v57 - 1);
          v54 += *v55 * *v57;
          v57 += 2;
          v55 += 2;
          v56 -= 2;
        }
        while (v56);
        v51 = v54 + v53;
        v52 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49)
          goto LABEL_60;
LABEL_62:
        v65 = a2[5];
        if (v48 < 2)
        {
          v66 = 0;
          v67 = 0;
LABEL_67:
          v73 = v48 - v67;
          v74 = v67;
          v75 = (uint64_t *)(v65 + v74 * 8);
          v76 = &v47[v74];
          do
          {
            v78 = *v76++;
            v77 = v78;
            v79 = *v75++;
            v66 += v79 * v77;
            --v73;
          }
          while (v73);
          goto LABEL_69;
        }
        v68 = 0;
        v69 = 0;
        v70 = (_QWORD *)(v65 + 8);
        v71 = v48 & 0xFFFFFFFFFFFFFFFELL;
        v72 = v47 + 1;
        do
        {
          v68 += *(v70 - 1) * *(v72 - 1);
          v69 += *v70 * *v72;
          v72 += 2;
          v70 += 2;
          v71 -= 2;
        }
        while (v71);
        v66 = v69 + v68;
        v67 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49)
          goto LABEL_67;
LABEL_69:
        *(_BYTE *)(*a1 + v51) *= *(_BYTE *)(*a2 + 4 * (a2[8] + v66));
        if ((int)((unint64_t)v13 >> 3) >= 1)
        {
          v80 = a1[2];
          v81 = ((unint64_t)v13 >> 3) + 1;
          v82 = (unint64_t)v13 >> 3;
          while (1)
          {
            v83 = (v81 - 2);
            v84 = v47[v83] + 1;
            v47[v83] = v84;
            if (v84 < *(_QWORD *)(v80 + v83 * 8))
              break;
            v47[(v81 - 2)] = 0;
            LODWORD(v82) = v82 - 1;
            if ((unint64_t)--v81 <= 1)
              goto LABEL_75;
          }
          if ((int)v82 > 0)
            continue;
        }
LABEL_75:
        operator delete(v47);
        return;
      }
      v51 = 0;
      v52 = 0;
LABEL_60:
      v58 = v48 - v52;
      v59 = v52;
      v60 = (uint64_t *)(v50 + v59 * 8);
      v61 = &v47[v59];
      do
      {
        v63 = *v61++;
        v62 = v63;
        v64 = *v60++;
        v51 += v64 * v62;
        --v58;
      }
      while (v58);
      goto LABEL_62;
    }
    v26 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      v27 = 0;
      v28 = a2[8];
      v29 = a1[8];
      do
      {
        if (*((_QWORD *)v4 + 1))
        {
          v32 = 0;
          v33 = v28;
          v34 = v29;
          do
          {
            *(_BYTE *)(*a1 + v34) *= *(_DWORD *)(*a2 + 4 * v33);
            v30 = (_QWORD *)a1[5];
            v34 += v30[1];
            v31 = (_QWORD *)a2[5];
            v33 += v31[1];
            ++v32;
            v4 = (char *)a1[2];
          }
          while (v32 < *((_QWORD *)v4 + 1));
          v26 = *(_QWORD *)v4;
        }
        else
        {
          v30 = (_QWORD *)a1[5];
          v31 = (_QWORD *)a2[5];
        }
        v29 += *v30;
        v28 += *v31;
        ++v27;
      }
      while (v27 < v26);
    }
  }
}

void sub_1911CEFFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>::operator*<int>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<unsigned char>::copy((uint64_t)a1, a3);
    nitro::ndarray<unsigned char>::operator*=<int>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<unsigned char>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<unsigned char>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<int>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<unsigned char>::operator*=<int>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911CF35C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911CF370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911CF40C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911CF3E8);
  JUMPOUT(0x1911CF3B8);
}

void sub_1911CF41C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911CF3F8);
  JUMPOUT(0x1911CF3C0);
}

void sub_1911CF42C()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911CF3D0);
  JUMPOUT(0x1911CF3C8);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911CF6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911CF844(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911CF858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911CF850);
}

uint64_t *nitro::ndarray<int>::operator*=<int>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;

  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  v5 = v4 - v3;
  if (v4 == v3 || !*a1)
    return a1;
  if ((unint64_t)(v5 - 8) < 8)
  {
    v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6)
  {
    v14 = v5 >> 3;
    v15 = (_QWORD *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3)
      goto LABEL_19;
    v16 = v14 <= 1 ? 1 : v14;
    if (*(_QWORD *)v3 != *v15)
      goto LABEL_19;
    v17 = 1;
    do
    {
      v18 = v17;
      if (v16 == v17)
        break;
      v19 = *(_QWORD *)&v3[8 * v17];
      v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 >= v14)
    {
      nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(a1, a2);
    }
    else
    {
LABEL_19:
      nitro::ndarray<int>::operator*<int>(a1, a2, &v25);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v25);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  return a1;
}

int32x4_t nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _DWORD *v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  int32x4_t *v66;
  int32x4_t *v67;
  unint64_t v68;
  int32x4_t result;
  int32x4_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int32x4_t *v88;
  int32x4_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  _DWORD *v98;
  uint64_t v99;
  uint64_t v100;
  _DWORD *v101;
  int32x4_t *v103;
  int32x4_t *v104;
  unint64_t v105;
  int32x4_t v106;
  _QWORD *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  unint64_t v145;
  int32x4_t *v146;
  int32x4_t *v147;
  unint64_t v148;
  int32x4_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v159;
  uint64_t v160;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return result;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return result;
  v160 = *a1;
  if (!*a1)
    return result;
  if (v12 - 8 < 8)
  {
    v13 = 1;
    v14 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v20 = *v14++;
      v13 *= v20;
    }
    while (v14 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v15 = ((v12 - 8) >> 3) + 1;
  v14 = &v4[v15 & 0x3FFFFFFFFFFFFFFELL];
  v16 = v4 + 1;
  v17 = 1;
  v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
  v19 = 1;
  do
  {
    v17 *= *(v16 - 1);
    v19 *= *v16;
    v16 += 2;
    v18 -= 2;
  }
  while (v18);
  v13 = v19 * v17;
  if (v15 != (v15 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v13)
    return result;
  v21 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v155 = *v4;
    if (!*v4)
      return result;
    v71 = 0;
    v72 = a2[8];
    v73 = a1[8];
    v74 = v4[1];
    v75 = (uint64_t *)a1[5];
    v152 = (uint64_t *)a2[5];
    v153 = *v152;
    v154 = *v75;
    v157 = 4 * *v75;
    v156 = 4 * *v152;
    v150 = 4 * v72;
    v151 = 4 * v73;
    v76 = 4 * v73 + v160 + 16;
    v77 = 4 * v72 + 16;
    while (!v74)
    {
LABEL_55:
      v73 += v154;
      v72 += v153;
      ++v71;
      v76 += v157;
      v77 += v156;
      if (v71 == v155)
        return result;
    }
    v78 = 0;
    v79 = v150 + v156 * v71;
    v80 = v4[2];
    v81 = *a2;
    v82 = v75[1];
    v83 = v152[1];
    v84 = 4 * v82;
    v159 = v151 + v157 * v71;
    v85 = 4 * v83;
    v86 = v80 & 0xFFFFFFFFFFFFFFF8;
    v87 = a2[5];
    v88 = (int32x4_t *)(*a2 + v77);
    v89 = (int32x4_t *)v76;
    v90 = v72;
    v91 = v73;
    while (!v80)
    {
LABEL_58:
      v91 += v82;
      v90 += v83;
      ++v78;
      v89 = (int32x4_t *)((char *)v89 + v84);
      v88 = (int32x4_t *)((char *)v88 + v85);
      if (v78 == v74)
        goto LABEL_55;
    }
    v92 = v75[2];
    v93 = *(_QWORD *)(v87 + 16);
    if (v80 >= 8)
    {
      v94 = 0;
      if (v92 != 1)
        goto LABEL_62;
      v95 = v90;
      v96 = v91;
      if (v93 != 1)
      {
LABEL_63:
        v97 = v80 - v94;
        v98 = (_DWORD *)(v81 + 4 * v95);
        v99 = 4 * v93;
        v100 = 4 * v92;
        v101 = (_DWORD *)(v160 + 4 * v96);
        do
        {
          *v101 *= *v98;
          v98 = (_DWORD *)((char *)v98 + v99);
          v101 = (_DWORD *)((char *)v101 + v100);
          --v97;
        }
        while (v97);
        goto LABEL_58;
      }
      if (v160 + v159 + v84 * v78 >= v81 + v79 + 4 * v80 + v85 * v78
        || v81 + v79 + v85 * v78 >= v160 + v159 + 4 * v80 + v84 * v78)
      {
        v95 = v90 + v86;
        v103 = v88;
        v104 = v89;
        v105 = v80 & 0xFFFFFFFFFFFFFFF8;
        v96 = v91 + v86;
        do
        {
          result = vmulq_s32(v104[-1], v103[-1]);
          v106 = vmulq_s32(*v104, *v103);
          v104[-1] = result;
          *v104 = v106;
          v104 += 2;
          v103 += 2;
          v105 -= 8;
        }
        while (v105);
        v94 = v80 & 0xFFFFFFFFFFFFFFF8;
        if (v80 == v86)
          goto LABEL_58;
        goto LABEL_63;
      }
    }
    v94 = 0;
LABEL_62:
    v95 = v90;
    v96 = v91;
    goto LABEL_63;
  }
  if (v21 == 2)
  {
    v36 = *v4;
    if (!*v4)
      return result;
    v37 = 0;
    v38 = a2[8];
    v39 = a1[8];
    v40 = v4[1];
    v41 = (uint64_t *)a2[5];
    v42 = (uint64_t *)a1[5];
    v43 = *v42;
    v44 = *v41;
    v45 = 4 * *v42;
    v46 = 4 * *v41;
    v47 = v40 & 0xFFFFFFFFFFFFFFF8;
    v48 = *a2;
    v49 = 4 * v39 + v160 + 16;
    v50 = 4 * v38 + *a2 + 16;
    v51 = v160 + 4 * v39;
    v52 = v160 + 4 * v39 + 4 * v40;
    v53 = *a2 + 4 * v38;
    v54 = *a2 + 4 * v38 + 4 * v40;
    while (!v40)
    {
LABEL_34:
      v39 += v43;
      v38 += v44;
      ++v37;
      v49 += v45;
      v50 += v46;
      if (v37 == v36)
        return result;
    }
    v55 = v42[1];
    v56 = v41[1];
    if (v40 >= 8)
    {
      v57 = 0;
      if (v55 != 1)
        goto LABEL_38;
      v58 = v38;
      v59 = v39;
      if (v56 != 1)
      {
LABEL_39:
        v60 = v40 - v57;
        v61 = (_DWORD *)(v48 + 4 * v58);
        v62 = 4 * v56;
        v63 = 4 * v55;
        v64 = (_DWORD *)(v160 + 4 * v59);
        do
        {
          *v64 *= *v61;
          v61 = (_DWORD *)((char *)v61 + v62);
          v64 = (_DWORD *)((char *)v64 + v63);
          --v60;
        }
        while (v60);
        goto LABEL_34;
      }
      if (v51 + v45 * v37 >= (unint64_t)(v54 + v46 * v37)
        || v53 + v46 * v37 >= (unint64_t)(v52 + v45 * v37))
      {
        v58 = v38 + v47;
        v66 = (int32x4_t *)v50;
        v67 = (int32x4_t *)v49;
        v68 = v40 & 0xFFFFFFFFFFFFFFF8;
        v59 = v39 + v47;
        do
        {
          result = vmulq_s32(v67[-1], v66[-1]);
          v70 = vmulq_s32(*v67, *v66);
          v67[-1] = result;
          *v67 = v70;
          v67 += 2;
          v66 += 2;
          v68 -= 8;
        }
        while (v68);
        v57 = v40 & 0xFFFFFFFFFFFFFFF8;
        if (v40 == v47)
          goto LABEL_34;
        goto LABEL_39;
      }
    }
    v57 = 0;
LABEL_38:
    v58 = v38;
    v59 = v39;
    goto LABEL_39;
  }
  if (v21 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v107 = operator new(v12);
    bzero(v107, v12 & 0xFFFFFFFFFFFFFFF8);
    v108 = *a2;
    if (v12 >> 3 <= 1)
      v109 = 1;
    else
      v109 = v12 >> 3;
    v110 = a2[5];
    v111 = a2[8];
    v112 = v109 & 0x1FFFFFFFFFFFFFFELL;
    v113 = a1[5];
    while (v109 >= 2)
    {
      v116 = 0;
      v117 = 0;
      v118 = v109 & 0x1FFFFFFFFFFFFFFELL;
      v119 = (_QWORD *)(v113 + 8);
      v120 = v107 + 1;
      do
      {
        v116 += *(v119 - 1) * *(v120 - 1);
        v117 += *v119 * *v120;
        v120 += 2;
        v119 += 2;
        v118 -= 2;
      }
      while (v118);
      v114 = v117 + v116;
      v115 = v109 & 0x1FFFFFFFFFFFFFFELL;
      if (v109 != v112)
        goto LABEL_87;
LABEL_89:
      if (v109 < 2)
      {
        v128 = 0;
        v129 = 0;
LABEL_94:
        v135 = v109 - v129;
        v136 = v129;
        v137 = (uint64_t *)(v110 + 8 * v129);
        v138 = &v107[v136];
        do
        {
          v140 = *v138++;
          v139 = v140;
          v141 = *v137++;
          v128 += v141 * v139;
          --v135;
        }
        while (v135);
        goto LABEL_96;
      }
      v130 = 0;
      v131 = 0;
      v132 = v109 & 0x1FFFFFFFFFFFFFFELL;
      v133 = (_QWORD *)(v110 + 8);
      v134 = v107 + 1;
      do
      {
        v130 += *(v133 - 1) * *(v134 - 1);
        v131 += *v133 * *v134;
        v134 += 2;
        v133 += 2;
        v132 -= 2;
      }
      while (v132);
      v128 = v131 + v130;
      v129 = v109 & 0x1FFFFFFFFFFFFFFELL;
      if (v109 != v112)
        goto LABEL_94;
LABEL_96:
      *(_DWORD *)(v160 + 4 * v114) *= *(_DWORD *)(v108 + 4 * (v111 + v128));
      if ((int)(v12 >> 3) >= 1)
      {
        v142 = (v12 >> 3) + 1;
        v143 = v12 >> 3;
        while (1)
        {
          v144 = (v142 - 2);
          v145 = v107[v144] + 1;
          v107[v144] = v145;
          if (v145 < v4[v144])
            break;
          v107[(v142 - 2)] = 0;
          --v143;
          if ((unint64_t)--v142 <= 1)
            goto LABEL_102;
        }
        if (v143 > 0)
          continue;
      }
LABEL_102:
      operator delete(v107);
      return result;
    }
    v114 = 0;
    v115 = 0;
LABEL_87:
    v121 = v109 - v115;
    v122 = v115;
    v123 = (uint64_t *)(v113 + 8 * v115);
    v124 = &v107[v122];
    do
    {
      v126 = *v124++;
      v125 = v126;
      v127 = *v123++;
      v114 += v127 * v125;
      --v121;
    }
    while (v121);
    goto LABEL_89;
  }
  v22 = *v4;
  if (!*v4)
    return result;
  v23 = a2[8];
  v24 = a1[8];
  v25 = *a2;
  v26 = *(_QWORD *)a1[5];
  v27 = *(_QWORD *)a2[5];
  if (v22 < 0xC)
    goto LABEL_27;
  v28 = 0;
  if (v26 != 1 || v27 != 1)
    goto LABEL_28;
  if (v160 + 4 * v24 < v25 + 4 * v22 + 4 * v23 && v25 + 4 * v23 < v160 + 4 * v22 + 4 * v24)
  {
LABEL_27:
    v28 = 0;
LABEL_28:
    v29 = a2[8];
    v30 = a1[8];
LABEL_29:
    v31 = v22 - v28;
    v32 = (_DWORD *)(v25 + 4 * v29);
    v33 = 4 * v27;
    v34 = 4 * v26;
    v35 = (_DWORD *)(v160 + 4 * v30);
    do
    {
      *v35 *= *v32;
      v32 = (_DWORD *)((char *)v32 + v33);
      v35 = (_DWORD *)((char *)v35 + v34);
      --v31;
    }
    while (v31);
    return result;
  }
  v28 = v22 & 0xFFFFFFFFFFFFFFF8;
  v29 = v23 + (v22 & 0xFFFFFFFFFFFFFFF8);
  v30 = v24 + (v22 & 0xFFFFFFFFFFFFFFF8);
  v146 = (int32x4_t *)(v25 + 4 * v23 + 16);
  v147 = (int32x4_t *)(v160 + 4 * v24 + 16);
  v148 = v22 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    result = vmulq_s32(v147[-1], v146[-1]);
    v149 = vmulq_s32(*v147, *v146);
    v147[-1] = result;
    *v147 = v149;
    v146 += 2;
    v147 += 2;
    v148 -= 8;
  }
  while (v148);
  if (v22 != v28)
    goto LABEL_29;
  return result;
}

void sub_1911D01E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::operator*<int>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<int>::copy((uint64_t)a1, a3);
    nitro::ndarray<int>::operator*=<int>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<int>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<int>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<int>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<int>::operator*=<int>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911D0540(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911D0554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911D05F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911D05CCLL);
  JUMPOUT(0x1911D059CLL);
}

void sub_1911D0600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911D05DCLL);
  JUMPOUT(0x1911D05A4);
}

void sub_1911D0610()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911D05B4);
  JUMPOUT(0x1911D05ACLL);
}

void nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911D0884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911D0A28(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911D0A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911D0A34);
}

uint64_t *nitro::ndarray<half>::operator*=<int>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;

  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  v5 = v4 - v3;
  if (v4 == v3 || !*a1)
    return a1;
  if ((unint64_t)(v5 - 8) < 8)
  {
    v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6)
  {
    v14 = v5 >> 3;
    v15 = (_QWORD *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3)
      goto LABEL_19;
    v16 = v14 <= 1 ? 1 : v14;
    if (*(_QWORD *)v3 != *v15)
      goto LABEL_19;
    v17 = 1;
    do
    {
      v18 = v17;
      if (v16 == v17)
        break;
      v19 = *(_QWORD *)&v3[8 * v17];
      v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 >= v14)
    {
      nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(a1, a2);
    }
    else
    {
LABEL_19:
      nitro::ndarray<half>::operator*<int>(a1, a2, &v25);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v25);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  return a1;
}

void nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  __int16 *v34;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  float16x4_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int *v63;
  uint64_t v64;
  uint64_t v65;
  __int16 *v66;
  float16x4_t *v70;
  int32x4_t *v71;
  unint64_t v72;
  int32x4_t v73;
  int32x4_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  float16x4_t *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  int32x4_t *v88;
  uint64_t v89;
  float16x4_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  int *v100;
  uint64_t v101;
  uint64_t v102;
  __int16 *v103;
  float16x4_t *v107;
  int32x4_t *v108;
  unint64_t v109;
  int32x4_t v110;
  int32x4_t v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v151;
  int v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int32x4_t *v157;
  float16x4_t *v158;
  unint64_t v159;
  int32x4_t v160;
  int32x4_t v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return;
  v13 = *a1;
  if (!*a1)
    return;
  if (v12 - 8 < 8)
  {
    v14 = 1;
    v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v16 = ((v12 - 8) >> 3) + 1;
  v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  v17 = v4 + 1;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v167 = *v4;
    if (!*v4)
      return;
    v75 = 0;
    v76 = a2[8];
    v77 = a1[8];
    v78 = v4[1];
    v79 = (uint64_t *)a1[5];
    v80 = 4 * v76;
    v162 = (uint64_t *)a2[5];
    v165 = *v162;
    v166 = *v79;
    v164 = 4 * *v162;
    v81 = (float16x4_t *)(v13 + 2 * v77);
    v163 = 2 * *v79;
    while (!v78)
    {
LABEL_50:
      v77 += v166;
      v76 += v165;
      ++v75;
      v80 += v164;
      v81 = (float16x4_t *)((char *)v81 + v163);
      if (v75 == v167)
        return;
    }
    v82 = 0;
    v83 = v4[2];
    v84 = *a2;
    v85 = a2[5];
    v86 = v162[1];
    v87 = v83 & 0xFFFFFFFFFFFFFFF8;
    v88 = (int32x4_t *)(*a2 + v80);
    v89 = v79[1];
    v90 = v81;
    v91 = v76;
    v92 = v77;
    while (1)
    {
      if (v83)
      {
        v93 = v79[2];
        v94 = *(_QWORD *)(v85 + 16);
        if (v83 >= 8 && (v93 == 1 ? (v95 = v94 == 1) : (v95 = 0), v95))
        {
          v97 = v91 + v87 * v94;
          v107 = v90;
          v108 = v88;
          v109 = v83 & 0xFFFFFFFFFFFFFFF8;
          v98 = v92 + v87 * v93;
          do
          {
            v111 = *v108;
            v110 = v108[1];
            v108 += 2;
            *(float16x8_t *)v107->i8 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(vcvtq_f32_s32(v111), vcvtq_f32_f16(*v107))), vmulq_f32(vcvtq_f32_s32(v110), vcvt_hight_f32_f16(*(float16x8_t *)v107->i8)));
            v107 += 2;
            v109 -= 8;
          }
          while (v109);
          v96 = v83 & 0xFFFFFFFFFFFFFFF8;
          if (v83 == v87)
            goto LABEL_53;
        }
        else
        {
          v96 = 0;
          v97 = v91;
          v98 = v92;
        }
        v99 = v83 - v96;
        v100 = (int *)(v84 + 4 * v97);
        v101 = 4 * v94;
        v102 = 2 * v93;
        v103 = (__int16 *)(v13 + 2 * v98);
        do
        {
          _H1 = *v103;
          __asm { FCVT            S1, H1 }
          _S0 = (float)*v100 * _S1;
          __asm { FCVT            H0, S0 }
          *v103 = LOWORD(_S0);
          v100 = (int *)((char *)v100 + v101);
          v103 = (__int16 *)((char *)v103 + v102);
          --v99;
        }
        while (v99);
      }
LABEL_53:
      v92 += v89;
      v91 += v86;
      ++v82;
      v88 = (int32x4_t *)((char *)v88 + 4 * v86);
      v90 = (float16x4_t *)((char *)v90 + 2 * v89);
      if (v82 == v78)
        goto LABEL_50;
    }
  }
  if (v22 == 2)
  {
    v41 = *v4;
    if (!*v4)
      return;
    v42 = 0;
    v43 = a2[8];
    v44 = a1[8];
    v45 = v4[1];
    v46 = *a2;
    v47 = (uint64_t *)a2[5];
    v48 = (uint64_t *)a1[5];
    v49 = *v48;
    v50 = *a2 + 4 * v43;
    v51 = *v47;
    v52 = v45 & 0xFFFFFFFFFFFFFFF8;
    v53 = 4 * *v47;
    v54 = (float16x4_t *)(v13 + 2 * v44);
    v55 = 2 * *v48;
    while (1)
    {
      if (v45)
      {
        v56 = v48[1];
        v57 = v47[1];
        if (v45 >= 8 && (v56 == 1 ? (_ZF = v57 == 1) : (_ZF = 0), _ZF))
        {
          v60 = v43 + v52 * v57;
          v70 = v54;
          v71 = (int32x4_t *)v50;
          v72 = v45 & 0xFFFFFFFFFFFFFFF8;
          v61 = v44 + v52 * v56;
          do
          {
            v74 = *v71;
            v73 = v71[1];
            v71 += 2;
            *(float16x8_t *)v70->i8 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(vcvtq_f32_s32(v74), vcvtq_f32_f16(*v70))), vmulq_f32(vcvtq_f32_s32(v73), vcvt_hight_f32_f16(*(float16x8_t *)v70->i8)));
            v70 += 2;
            v72 -= 8;
          }
          while (v72);
          v59 = v45 & 0xFFFFFFFFFFFFFFF8;
          if (v45 == v52)
            goto LABEL_33;
        }
        else
        {
          v59 = 0;
          v60 = v43;
          v61 = v44;
        }
        v62 = v45 - v59;
        v63 = (int *)(v46 + 4 * v60);
        v64 = 4 * v57;
        v65 = 2 * v56;
        v66 = (__int16 *)(v13 + 2 * v61);
        do
        {
          _H1 = *v66;
          __asm { FCVT            S1, H1 }
          _S0 = (float)*v63 * _S1;
          __asm { FCVT            H0, S0 }
          *v66 = LOWORD(_S0);
          v63 = (int *)((char *)v63 + v64);
          v66 = (__int16 *)((char *)v66 + v65);
          --v62;
        }
        while (v62);
      }
LABEL_33:
      v44 += v49;
      v43 += v51;
      ++v42;
      v50 += v53;
      v54 = (float16x4_t *)((char *)v54 + v55);
      if (v42 == v41)
        return;
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v112 = operator new(v12);
    bzero(v112, v12 & 0xFFFFFFFFFFFFFFF8);
    v113 = *a2;
    if (v12 >> 3 <= 1)
      v114 = 1;
    else
      v114 = v12 >> 3;
    v115 = a2[5];
    v116 = a2[8];
    v117 = v114 & 0x1FFFFFFFFFFFFFFELL;
    v118 = a1[5];
    while (v114 >= 2)
    {
      v121 = 0;
      v122 = 0;
      v123 = v114 & 0x1FFFFFFFFFFFFFFELL;
      v124 = (_QWORD *)(v118 + 8);
      v125 = v112 + 1;
      do
      {
        v121 += *(v124 - 1) * *(v125 - 1);
        v122 += *v124 * *v125;
        v125 += 2;
        v124 += 2;
        v123 -= 2;
      }
      while (v123);
      v119 = v122 + v121;
      v120 = v114 & 0x1FFFFFFFFFFFFFFELL;
      if (v114 != v117)
        goto LABEL_78;
LABEL_80:
      if (v114 < 2)
      {
        v133 = 0;
        v134 = 0;
LABEL_85:
        v140 = v114 - v134;
        v141 = v134;
        v142 = (uint64_t *)(v115 + 8 * v134);
        v143 = &v112[v141];
        do
        {
          v145 = *v143++;
          v144 = v145;
          v146 = *v142++;
          v133 += v146 * v144;
          --v140;
        }
        while (v140);
        goto LABEL_87;
      }
      v135 = 0;
      v136 = 0;
      v137 = v114 & 0x1FFFFFFFFFFFFFFELL;
      v138 = (_QWORD *)(v115 + 8);
      v139 = v112 + 1;
      do
      {
        v135 += *(v138 - 1) * *(v139 - 1);
        v136 += *v138 * *v139;
        v139 += 2;
        v138 += 2;
        v137 -= 2;
      }
      while (v137);
      v133 = v136 + v135;
      v134 = v114 & 0x1FFFFFFFFFFFFFFELL;
      if (v114 != v117)
        goto LABEL_85;
LABEL_87:
      v147 = 2 * v119;
      _H1 = *(_WORD *)(v13 + v147);
      __asm { FCVT            S1, H1 }
      _S0 = (float)*(int *)(v113 + 4 * (v116 + v133)) * _S1;
      __asm { FCVT            H0, S0 }
      *(_WORD *)(v13 + v147) = LOWORD(_S0);
      if ((int)(v12 >> 3) >= 1)
      {
        v151 = (v12 >> 3) + 1;
        v152 = v12 >> 3;
        while (1)
        {
          v153 = (v151 - 2);
          v154 = v112[v153] + 1;
          v112[v153] = v154;
          if (v154 < v4[v153])
            break;
          v112[(v151 - 2)] = 0;
          --v152;
          if ((unint64_t)--v151 <= 1)
            goto LABEL_93;
        }
        if (v152 > 0)
          continue;
      }
LABEL_93:
      operator delete(v112);
      return;
    }
    v119 = 0;
    v120 = 0;
LABEL_78:
    v126 = v114 - v120;
    v127 = v120;
    v128 = (uint64_t *)(v118 + 8 * v120);
    v129 = &v112[v127];
    do
    {
      v131 = *v129++;
      v130 = v131;
      v132 = *v128++;
      v119 += v132 * v130;
      --v126;
    }
    while (v126);
    goto LABEL_80;
  }
  v23 = *v4;
  if (!*v4)
    return;
  v24 = a2[8];
  v25 = a1[8];
  v26 = *a2;
  v27 = *(_QWORD *)a1[5];
  v28 = *(_QWORD *)a2[5];
  if (v23 < 8)
  {
    v29 = 0;
LABEL_28:
    v30 = v23 - v29;
    v31 = (int *)(v26 + 4 * v24);
    v32 = 4 * v28;
    v33 = 2 * v27;
    v34 = (__int16 *)(v13 + 2 * v25);
    do
    {
      _H1 = *v34;
      __asm { FCVT            S1, H1 }
      _S0 = (float)*v31 * _S1;
      __asm { FCVT            H0, S0 }
      *v34 = LOWORD(_S0);
      v31 = (int *)((char *)v31 + v32);
      v34 = (__int16 *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  v29 = 0;
  if (v27 != 1)
    goto LABEL_28;
  if (v28 != 1)
    goto LABEL_28;
  v29 = v23 & 0xFFFFFFFFFFFFFFF8;
  v155 = v24 + (v23 & 0xFFFFFFFFFFFFFFF8);
  v156 = v25 + (v23 & 0xFFFFFFFFFFFFFFF8);
  v157 = (int32x4_t *)(v26 + 4 * v24);
  v158 = (float16x4_t *)(v13 + 2 * v25);
  v159 = v23 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v161 = *v157;
    v160 = v157[1];
    v157 += 2;
    *(float16x8_t *)v158->i8 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(vcvtq_f32_s32(v161), vcvtq_f32_f16(*v158))), vmulq_f32(vcvtq_f32_s32(v160), vcvt_hight_f32_f16(*(float16x8_t *)v158->i8)));
    v158 += 2;
    v159 -= 8;
  }
  while (v159);
  v24 = v155;
  v25 = v156;
  if (v23 != v29)
    goto LABEL_28;
}

void sub_1911D12E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::operator*<int>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<half>::copy((uint64_t)a1, a3);
    nitro::ndarray<half>::operator*=<int>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<half>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<half>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<int>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<half>::operator*=<int>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911D1640(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911D1654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911D16F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911D16CCLL);
  JUMPOUT(0x1911D169CLL);
}

void sub_1911D1700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911D16DCLL);
  JUMPOUT(0x1911D16A4);
}

void sub_1911D1710()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911D16B4);
  JUMPOUT(0x1911D16ACLL);
}

void nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911D1984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911D1B28(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911D1B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911D1B34);
}

uint64_t *nitro::ndarray<float>::operator*=<int>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;

  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  v5 = v4 - v3;
  if (v4 == v3 || !*a1)
    return a1;
  if ((unint64_t)(v5 - 8) < 8)
  {
    v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6)
  {
    v14 = v5 >> 3;
    v15 = (_QWORD *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3)
      goto LABEL_19;
    v16 = v14 <= 1 ? 1 : v14;
    if (*(_QWORD *)v3 != *v15)
      goto LABEL_19;
    v17 = 1;
    do
    {
      v18 = v17;
      if (v16 == v17)
        break;
      v19 = *(_QWORD *)&v3[8 * v17];
      v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 >= v14)
    {
      nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(a1, a2);
    }
    else
    {
LABEL_19:
      nitro::ndarray<float>::operator*<int>(a1, a2, &v25);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v25);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  return a1;
}

void nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  float *v60;
  int32x4_t *v61;
  float32x4_t *v62;
  unint64_t v63;
  float32x4_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int32x4_t *v78;
  uint64_t v79;
  float32x4_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int *v90;
  uint64_t v91;
  uint64_t v92;
  float *v93;
  int32x4_t *v94;
  float32x4_t *v95;
  unint64_t v96;
  float32x4_t v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int32x4_t *v139;
  float32x4_t *v140;
  unint64_t v141;
  float32x4_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return;
  v13 = *a1;
  if (!*a1)
    return;
  if (v12 - 8 < 8)
  {
    v14 = 1;
    v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v16 = ((v12 - 8) >> 3) + 1;
  v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  v17 = v4 + 1;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v148 = *v4;
    if (!*v4)
      return;
    v65 = 0;
    v66 = a2[8];
    v67 = a1[8];
    v68 = v4[1];
    v69 = (uint64_t *)a1[5];
    v143 = (uint64_t *)a2[5];
    v70 = v13 + 4 * v67 + 16;
    v146 = *v143;
    v147 = *v69;
    v145 = 4 * *v69;
    v71 = 4 * v66 + 16;
    v144 = 4 * *v143;
    while (!v68)
    {
LABEL_50:
      v67 += v147;
      v66 += v146;
      ++v65;
      v70 += v145;
      v71 += v144;
      if (v65 == v148)
        return;
    }
    v72 = 0;
    v73 = v4[2];
    v74 = *a2;
    v75 = a2[5];
    v76 = v69[1];
    v77 = v73 & 0xFFFFFFFFFFFFFFF8;
    v78 = (int32x4_t *)(*a2 + v71);
    v79 = v143[1];
    v80 = (float32x4_t *)v70;
    v81 = v66;
    v82 = v67;
    while (1)
    {
      if (v73)
      {
        v83 = v69[2];
        v84 = *(_QWORD *)(v75 + 16);
        if (v73 >= 8 && (v83 == 1 ? (v85 = v84 == 1) : (v85 = 0), v85))
        {
          v87 = v81 + v77 * v84;
          v94 = v78;
          v95 = v80;
          v96 = v73 & 0xFFFFFFFFFFFFFFF8;
          v88 = v82 + v77 * v83;
          do
          {
            v97 = vmulq_f32(*v95, vcvtq_f32_s32(*v94));
            v95[-1] = vmulq_f32(v95[-1], vcvtq_f32_s32(v94[-1]));
            *v95 = v97;
            v95 += 2;
            v94 += 2;
            v96 -= 8;
          }
          while (v96);
          v86 = v73 & 0xFFFFFFFFFFFFFFF8;
          if (v73 == v77)
            goto LABEL_53;
        }
        else
        {
          v86 = 0;
          v87 = v81;
          v88 = v82;
        }
        v89 = v73 - v86;
        v90 = (int *)(v74 + 4 * v87);
        v91 = 4 * v84;
        v92 = 4 * v83;
        v93 = (float *)(v13 + 4 * v88);
        do
        {
          *v93 = *v93 * (float)*v90;
          v90 = (int *)((char *)v90 + v91);
          v93 = (float *)((char *)v93 + v92);
          --v89;
        }
        while (v89);
      }
LABEL_53:
      v82 += v76;
      v81 += v79;
      ++v72;
      v80 = (float32x4_t *)((char *)v80 + 4 * v76);
      v78 = (int32x4_t *)((char *)v78 + 4 * v79);
      if (v72 == v68)
        goto LABEL_50;
    }
  }
  if (v22 == 2)
  {
    v35 = *v4;
    if (!*v4)
      return;
    v36 = 0;
    v37 = a2[8];
    v38 = a1[8];
    v39 = v4[1];
    v40 = *a2;
    v41 = (uint64_t *)a2[5];
    v42 = (uint64_t *)a1[5];
    v43 = *v42;
    v44 = *v41;
    v45 = v39 & 0xFFFFFFFFFFFFFFF8;
    v46 = v13 + 4 * v38 + 16;
    v47 = 4 * *v42;
    v48 = *a2 + 4 * v37 + 16;
    v49 = 4 * *v41;
    while (1)
    {
      if (v39)
      {
        v50 = v42[1];
        v51 = v41[1];
        if (v39 >= 8 && (v50 == 1 ? (v52 = v51 == 1) : (v52 = 0), v52))
        {
          v54 = v37 + v45 * v51;
          v61 = (int32x4_t *)v48;
          v62 = (float32x4_t *)v46;
          v63 = v39 & 0xFFFFFFFFFFFFFFF8;
          v55 = v38 + v45 * v50;
          do
          {
            v64 = vmulq_f32(*v62, vcvtq_f32_s32(*v61));
            v62[-1] = vmulq_f32(v62[-1], vcvtq_f32_s32(v61[-1]));
            *v62 = v64;
            v62 += 2;
            v61 += 2;
            v63 -= 8;
          }
          while (v63);
          v53 = v39 & 0xFFFFFFFFFFFFFFF8;
          if (v39 == v45)
            goto LABEL_33;
        }
        else
        {
          v53 = 0;
          v54 = v37;
          v55 = v38;
        }
        v56 = v39 - v53;
        v57 = (int *)(v40 + 4 * v54);
        v58 = 4 * v51;
        v59 = 4 * v50;
        v60 = (float *)(v13 + 4 * v55);
        do
        {
          *v60 = *v60 * (float)*v57;
          v57 = (int *)((char *)v57 + v58);
          v60 = (float *)((char *)v60 + v59);
          --v56;
        }
        while (v56);
      }
LABEL_33:
      v38 += v43;
      v37 += v44;
      ++v36;
      v46 += v47;
      v48 += v49;
      if (v36 == v35)
        return;
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v98 = operator new(v12);
    bzero(v98, v12 & 0xFFFFFFFFFFFFFFF8);
    v99 = *a2;
    if (v12 >> 3 <= 1)
      v100 = 1;
    else
      v100 = v12 >> 3;
    v101 = a2[5];
    v102 = a2[8];
    v103 = v100 & 0x1FFFFFFFFFFFFFFELL;
    v104 = a1[5];
    while (v100 >= 2)
    {
      v107 = 0;
      v108 = 0;
      v109 = v100 & 0x1FFFFFFFFFFFFFFELL;
      v110 = (_QWORD *)(v104 + 8);
      v111 = v98 + 1;
      do
      {
        v107 += *(v110 - 1) * *(v111 - 1);
        v108 += *v110 * *v111;
        v111 += 2;
        v110 += 2;
        v109 -= 2;
      }
      while (v109);
      v105 = v108 + v107;
      v106 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103)
        goto LABEL_78;
LABEL_80:
      if (v100 < 2)
      {
        v119 = 0;
        v120 = 0;
LABEL_85:
        v126 = v100 - v120;
        v127 = v120;
        v128 = (uint64_t *)(v101 + 8 * v120);
        v129 = &v98[v127];
        do
        {
          v131 = *v129++;
          v130 = v131;
          v132 = *v128++;
          v119 += v132 * v130;
          --v126;
        }
        while (v126);
        goto LABEL_87;
      }
      v121 = 0;
      v122 = 0;
      v123 = v100 & 0x1FFFFFFFFFFFFFFELL;
      v124 = (_QWORD *)(v101 + 8);
      v125 = v98 + 1;
      do
      {
        v121 += *(v124 - 1) * *(v125 - 1);
        v122 += *v124 * *v125;
        v125 += 2;
        v124 += 2;
        v123 -= 2;
      }
      while (v123);
      v119 = v122 + v121;
      v120 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103)
        goto LABEL_85;
LABEL_87:
      *(float *)(v13 + 4 * v105) = *(float *)(v13 + 4 * v105) * (float)*(int *)(v99 + 4 * (v102 + v119));
      if ((int)(v12 >> 3) >= 1)
      {
        v133 = (v12 >> 3) + 1;
        v134 = v12 >> 3;
        while (1)
        {
          v135 = (v133 - 2);
          v136 = v98[v135] + 1;
          v98[v135] = v136;
          if (v136 < v4[v135])
            break;
          v98[(v133 - 2)] = 0;
          --v134;
          if ((unint64_t)--v133 <= 1)
            goto LABEL_93;
        }
        if (v134 > 0)
          continue;
      }
LABEL_93:
      operator delete(v98);
      return;
    }
    v105 = 0;
    v106 = 0;
LABEL_78:
    v112 = v100 - v106;
    v113 = v106;
    v114 = (uint64_t *)(v104 + 8 * v106);
    v115 = &v98[v113];
    do
    {
      v117 = *v115++;
      v116 = v117;
      v118 = *v114++;
      v105 += v118 * v116;
      --v112;
    }
    while (v112);
    goto LABEL_80;
  }
  v23 = *v4;
  if (!*v4)
    return;
  v24 = a2[8];
  v25 = a1[8];
  v26 = *a2;
  v27 = *(_QWORD *)a1[5];
  v28 = *(_QWORD *)a2[5];
  if (v23 < 8)
  {
    v29 = 0;
LABEL_28:
    v30 = v23 - v29;
    v31 = (int *)(v26 + 4 * v24);
    v32 = 4 * v28;
    v33 = 4 * v27;
    v34 = (float *)(v13 + 4 * v25);
    do
    {
      *v34 = *v34 * (float)*v31;
      v31 = (int *)((char *)v31 + v32);
      v34 = (float *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  v29 = 0;
  if (v27 != 1)
    goto LABEL_28;
  if (v28 != 1)
    goto LABEL_28;
  v29 = v23 & 0xFFFFFFFFFFFFFFF8;
  v137 = v24 + (v23 & 0xFFFFFFFFFFFFFFF8);
  v138 = v25 + (v23 & 0xFFFFFFFFFFFFFFF8);
  v139 = (int32x4_t *)(v26 + 4 * v24 + 16);
  v140 = (float32x4_t *)(v13 + 4 * v25 + 16);
  v141 = v23 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v142 = vmulq_f32(*v140, vcvtq_f32_s32(*v139));
    v140[-1] = vmulq_f32(v140[-1], vcvtq_f32_s32(v139[-1]));
    *v140 = v142;
    v139 += 2;
    v140 += 2;
    v141 -= 8;
  }
  while (v141);
  v24 = v137;
  v25 = v138;
  if (v23 != v29)
    goto LABEL_28;
}

void sub_1911D23C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::operator*<int>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<float>::copy((uint64_t)a1, a3);
    nitro::ndarray<float>::operator*=<int>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<float>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<float>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<int>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<float>::operator*=<int>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911D2720(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911D2734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911D27D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911D27ACLL);
  JUMPOUT(0x1911D277CLL);
}

void sub_1911D27E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911D27BCLL);
  JUMPOUT(0x1911D2784);
}

void sub_1911D27F0()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911D2794);
  JUMPOUT(0x1911D278CLL);
}

void nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911D2A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911D2C08(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911D2C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911D2C14);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1911D2F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1911D2FB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

_QWORD *nitro::ndarray<unsigned char>::operator*=<half>(_QWORD *a1, _QWORD *a2, double a3, float a4)
{
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v27;
  void *v28;
  void *v29;
  void *__p;
  void *v31;

  v5 = (char *)a1[2];
  v6 = (char *)a1[3];
  v7 = v6 - v5;
  if (v6 == v5 || !*a1)
    return a1;
  if ((unint64_t)(v7 - 8) < 8)
  {
    v8 = 1;
    v9 = (char *)a1[2];
    do
    {
LABEL_8:
      v15 = *(_QWORD *)v9;
      v9 += 8;
      v8 *= v15;
    }
    while (v9 != v6);
    goto LABEL_9;
  }
  v10 = ((unint64_t)(v7 - 8) >> 3) + 1;
  v9 = &v5[8 * (v10 & 0x3FFFFFFFFFFFFFFELL)];
  v11 = v5 + 8;
  v12 = 1;
  v13 = v10 & 0x3FFFFFFFFFFFFFFELL;
  v14 = 1;
  do
  {
    v12 *= *(v11 - 1);
    v14 *= *v11;
    v11 += 2;
    v13 -= 2;
  }
  while (v13);
  v8 = v14 * v12;
  if (v10 != (v10 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v8)
  {
    v16 = v7 >> 3;
    v17 = (_QWORD *)a2[2];
    if (v16 != (uint64_t)(a2[3] - (_QWORD)v17) >> 3)
      goto LABEL_19;
    v18 = v16 <= 1 ? 1 : v16;
    if (*(_QWORD *)v5 != *v17)
      goto LABEL_19;
    v19 = 1;
    do
    {
      v20 = v19;
      if (v18 == v19)
        break;
      v21 = *(_QWORD *)&v5[8 * v19];
      v22 = v17[v19++];
    }
    while (v21 == v22);
    if (v20 >= v16)
    {
      nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(a1, a2, a3, a4);
    }
    else
    {
LABEL_19:
      nitro::ndarray<unsigned char>::operator*<half>(a1, a2, &v27);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v27);
      if (__p)
      {
        v31 = __p;
        operator delete(__p);
      }
      if (v28)
      {
        v29 = v28;
        operator delete(v28);
      }
      v23 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
      if (*((_QWORD *)&v27 + 1))
      {
        v24 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
  }
  return a1;
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(_QWORD *a1, _QWORD *a2, double a3, float a4)
{
  char *v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v59;
  float v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;

  v6 = (char *)a1[2];
  v7 = (char *)a1[3];
  v8 = (v7 - v6) >> 3;
  v9 = (_QWORD *)a2[2];
  if (v8 != (uint64_t)(a2[3] - (_QWORD)v9) >> 3)
    goto LABEL_13;
  if (v7 == v6)
    return;
  v10 = v8 <= 1 ? 1 : (v7 - v6) >> 3;
  if (*(_QWORD *)v6 != *v9)
    goto LABEL_13;
  v11 = 1;
  do
  {
    v12 = v11;
    if (v10 == v11)
      break;
    v13 = *(_QWORD *)&v6[8 * v11];
    v14 = v9[v11++];
  }
  while (v13 == v14);
  if (v12 < v8)
LABEL_13:
    nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1})::{lambda(void)#1}::operator()();
  v15 = v7 - v6;
  if (v7 == v6 || !*a1)
    return;
  if ((unint64_t)(v15 - 8) < 8)
  {
    v16 = 1;
    v17 = (char *)a1[2];
    do
    {
LABEL_20:
      v23 = *(_QWORD *)v17;
      v17 += 8;
      v16 *= v23;
    }
    while (v17 != v7);
    goto LABEL_21;
  }
  v18 = ((unint64_t)(v15 - 8) >> 3) + 1;
  v17 = &v6[8 * (v18 & 0x3FFFFFFFFFFFFFFELL)];
  v19 = v6 + 8;
  v20 = 1;
  v21 = v18 & 0x3FFFFFFFFFFFFFFELL;
  v22 = 1;
  do
  {
    v20 *= *(v19 - 1);
    v22 *= *v19;
    v19 += 2;
    v21 -= 2;
  }
  while (v21);
  v16 = v22 * v20;
  if (v18 != (v18 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v16)
    return;
  v24 = v15 >> 3;
  if (v15 >> 3 == 3)
  {
    v45 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
    {
      v46 = 0;
      v47 = a2[8];
      v48 = a1[8];
      do
      {
        if (*((_QWORD *)v6 + 1))
        {
          v49 = 0;
          v50 = v47;
          v51 = v48;
          do
          {
            if (*((_QWORD *)v6 + 2))
            {
              v54 = 0;
              v55 = v50;
              v56 = v51;
              do
              {
                _H0 = *(_WORD *)(*a2 + 2 * v55);
                __asm { FCVT            S0, H0 }
                LOBYTE(a4) = *(_BYTE *)(*a1 + v56);
                a4 = (float)LODWORD(a4);
                *(_BYTE *)(*a1 + v56) = (int)(float)(_S0 * a4);
                v52 = (_QWORD *)a1[5];
                v56 += v52[2];
                v53 = (_QWORD *)a2[5];
                v55 += v53[2];
                ++v54;
                v6 = (char *)a1[2];
              }
              while (v54 < *((_QWORD *)v6 + 2));
            }
            else
            {
              v52 = (_QWORD *)a1[5];
              v53 = (_QWORD *)a2[5];
            }
            v51 += v52[1];
            v50 += v53[1];
            ++v49;
          }
          while (v49 < *((_QWORD *)v6 + 1));
          v45 = *(_QWORD *)v6;
        }
        else
        {
          v52 = (_QWORD *)a1[5];
          v53 = (_QWORD *)a2[5];
        }
        v48 += *v52;
        v47 += *v53;
        ++v46;
      }
      while (v46 < v45);
    }
  }
  else
  {
    if (v24 != 2)
    {
      if (v24 == 1)
      {
        if (*(_QWORD *)v6)
        {
          v25 = 0;
          v26 = a2[8];
          v27 = a1[8];
          do
          {
            _H0 = *(_WORD *)(*a2 + 2 * v26);
            __asm { FCVT            S0, H0 }
            LOBYTE(a4) = *(_BYTE *)(*a1 + v27);
            a4 = (float)LODWORD(a4);
            *(_BYTE *)(*a1 + v27) = (int)(float)(_S0 * a4);
            v27 += *(_QWORD *)a1[5];
            v26 += *(_QWORD *)a2[5];
            ++v25;
          }
          while (v25 < *(_QWORD *)a1[2]);
        }
        return;
      }
      if (v15 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v59 = operator new(v15);
      bzero(v59, v15 & 0xFFFFFFFFFFFFFFF8);
      if (v24 <= 1)
        v61 = 1;
      else
        v61 = v15 >> 3;
      v62 = v61 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        v63 = a1[5];
        if (v61 < 2)
          break;
        v66 = 0;
        v67 = 0;
        v68 = (_QWORD *)(v63 + 8);
        v69 = v61 & 0xFFFFFFFFFFFFFFFELL;
        v70 = v59 + 1;
        do
        {
          v66 += *(v68 - 1) * *(v70 - 1);
          v67 += *v68 * *v70;
          v70 += 2;
          v68 += 2;
          v69 -= 2;
        }
        while (v69);
        v64 = v67 + v66;
        v65 = v61 & 0xFFFFFFFFFFFFFFFELL;
        if (v61 != v62)
          goto LABEL_60;
LABEL_62:
        v78 = a2[5];
        if (v61 < 2)
        {
          v79 = 0;
          v80 = 0;
LABEL_67:
          v86 = v61 - v80;
          v87 = v80;
          v88 = (uint64_t *)(v78 + v87 * 8);
          v89 = &v59[v87];
          do
          {
            v91 = *v89++;
            v90 = v91;
            v92 = *v88++;
            v79 += v92 * v90;
            --v86;
          }
          while (v86);
          goto LABEL_69;
        }
        v81 = 0;
        v82 = 0;
        v83 = (_QWORD *)(v78 + 8);
        v84 = v61 & 0xFFFFFFFFFFFFFFFELL;
        v85 = v59 + 1;
        do
        {
          v81 += *(v83 - 1) * *(v85 - 1);
          v82 += *v83 * *v85;
          v85 += 2;
          v83 += 2;
          v84 -= 2;
        }
        while (v84);
        v79 = v82 + v81;
        v80 = v61 & 0xFFFFFFFFFFFFFFFELL;
        if (v61 != v62)
          goto LABEL_67;
LABEL_69:
        _H0 = *(_WORD *)(*a2 + 2 * (a2[8] + v79));
        __asm { FCVT            S0, H0 }
        LOBYTE(v60) = *(_BYTE *)(*a1 + v64);
        v60 = (float)LODWORD(v60);
        *(_BYTE *)(*a1 + v64) = (int)(float)(_S0 * v60);
        if ((int)((unint64_t)v15 >> 3) >= 1)
        {
          v95 = a1[2];
          v96 = ((unint64_t)v15 >> 3) + 1;
          v97 = (unint64_t)v15 >> 3;
          while (1)
          {
            v98 = (v96 - 2);
            v99 = v59[v98] + 1;
            v59[v98] = v99;
            if (v99 < *(_QWORD *)(v95 + v98 * 8))
              break;
            v59[(v96 - 2)] = 0;
            LODWORD(v97) = v97 - 1;
            if ((unint64_t)--v96 <= 1)
              goto LABEL_75;
          }
          if ((int)v97 > 0)
            continue;
        }
LABEL_75:
        operator delete(v59);
        return;
      }
      v64 = 0;
      v65 = 0;
LABEL_60:
      v71 = v61 - v65;
      v72 = v65;
      v73 = (uint64_t *)(v63 + v72 * 8);
      v74 = &v59[v72];
      do
      {
        v76 = *v74++;
        v75 = v76;
        v77 = *v73++;
        v64 += v77 * v75;
        --v71;
      }
      while (v71);
      goto LABEL_62;
    }
    v34 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
    {
      v35 = 0;
      v36 = a2[8];
      v37 = a1[8];
      do
      {
        if (*((_QWORD *)v6 + 1))
        {
          v40 = 0;
          v41 = v36;
          v42 = v37;
          do
          {
            _H0 = *(_WORD *)(*a2 + 2 * v41);
            __asm { FCVT            S0, H0 }
            LOBYTE(a4) = *(_BYTE *)(*a1 + v42);
            a4 = (float)LODWORD(a4);
            *(_BYTE *)(*a1 + v42) = (int)(float)(_S0 * a4);
            v38 = (_QWORD *)a1[5];
            v42 += v38[1];
            v39 = (_QWORD *)a2[5];
            v41 += v39[1];
            ++v40;
            v6 = (char *)a1[2];
          }
          while (v40 < *((_QWORD *)v6 + 1));
          v34 = *(_QWORD *)v6;
        }
        else
        {
          v38 = (_QWORD *)a1[5];
          v39 = (_QWORD *)a2[5];
        }
        v37 += *v38;
        v36 += *v39;
        ++v35;
      }
      while (v35 < v34);
    }
  }
}

void sub_1911D3684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>::operator*<half>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<unsigned char>::copy((uint64_t)a1, a3);
    nitro::ndarray<unsigned char>::operator*=<half>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<unsigned char>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<unsigned char>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<half>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<unsigned char>::operator*=<half>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911D39E4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911D39F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911D3A94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911D3A70);
  JUMPOUT(0x1911D3A40);
}

void sub_1911D3AA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911D3A80);
  JUMPOUT(0x1911D3A48);
}

void sub_1911D3AB4()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911D3A58);
  JUMPOUT(0x1911D3A50);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911D3D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911D3ECC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911D3EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911D3ED8);
}

uint64_t *nitro::ndarray<int>::operator*=<half>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;

  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  v5 = v4 - v3;
  if (v4 == v3 || !*a1)
    return a1;
  if ((unint64_t)(v5 - 8) < 8)
  {
    v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6)
  {
    v14 = v5 >> 3;
    v15 = (_QWORD *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3)
      goto LABEL_19;
    v16 = v14 <= 1 ? 1 : v14;
    if (*(_QWORD *)v3 != *v15)
      goto LABEL_19;
    v17 = 1;
    do
    {
      v18 = v17;
      if (v16 == v17)
        break;
      v19 = *(_QWORD *)&v3[8 * v17];
      v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 >= v14)
    {
      nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(a1, a2);
    }
    else
    {
LABEL_19:
      nitro::ndarray<int>::operator*<half>(a1, a2, &v25);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v25);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  return a1;
}

void nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int16 *v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int32x4_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  __int16 *v62;
  uint64_t v63;
  uint64_t v64;
  int *v65;
  int32x4_t *v68;
  float16x8_t *v69;
  unint64_t v70;
  float16x8_t v71;
  int32x4_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  int32x4_t *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  float16x8_t *v86;
  uint64_t v87;
  int32x4_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  __int16 *v98;
  uint64_t v99;
  uint64_t v100;
  int *v101;
  int32x4_t *v104;
  float16x8_t *v105;
  unint64_t v106;
  float16x8_t v107;
  int32x4_t v108;
  _QWORD *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v146;
  int v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  float16x8_t *v152;
  int32x4_t *v153;
  unint64_t v154;
  float16x8_t v155;
  int32x4_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return;
  v13 = *a1;
  if (!*a1)
    return;
  if (v12 - 8 < 8)
  {
    v14 = 1;
    v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v16 = ((v12 - 8) >> 3) + 1;
  v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  v17 = v4 + 1;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v162 = *v4;
    if (!*v4)
      return;
    v73 = 0;
    v74 = a2[8];
    v75 = a1[8];
    v76 = v4[1];
    v77 = (uint64_t *)a1[5];
    v78 = 2 * v74;
    v157 = (uint64_t *)a2[5];
    v160 = *v157;
    v161 = *v77;
    v159 = 2 * *v157;
    v79 = (int32x4_t *)(v13 + 4 * v75);
    v158 = 4 * *v77;
    while (!v76)
    {
LABEL_50:
      v75 += v161;
      v74 += v160;
      ++v73;
      v78 += v159;
      v79 = (int32x4_t *)((char *)v79 + v158);
      if (v73 == v162)
        return;
    }
    v80 = 0;
    v81 = v4[2];
    v82 = *a2;
    v83 = a2[5];
    v84 = v157[1];
    v85 = v81 & 0xFFFFFFFFFFFFFFF8;
    v86 = (float16x8_t *)(*a2 + v78);
    v87 = v77[1];
    v88 = v79;
    v89 = v74;
    v90 = v75;
    while (1)
    {
      if (v81)
      {
        v91 = v77[2];
        v92 = *(_QWORD *)(v83 + 16);
        if (v81 >= 8 && (v91 == 1 ? (v93 = v92 == 1) : (v93 = 0), v93))
        {
          v95 = v89 + v85 * v92;
          v104 = v88;
          v105 = v86;
          v106 = v81 & 0xFFFFFFFFFFFFFFF8;
          v96 = v90 + v85 * v91;
          do
          {
            v107 = *v105++;
            v108 = vcvtq_s32_f32(vmulq_f32(vcvt_hight_f32_f16(v107), vcvtq_f32_s32(v104[1])));
            *v104 = vcvtq_s32_f32(vmulq_f32(vcvtq_f32_f16(*(float16x4_t *)v107.i8), vcvtq_f32_s32(*v104)));
            v104[1] = v108;
            v104 += 2;
            v106 -= 8;
          }
          while (v106);
          v94 = v81 & 0xFFFFFFFFFFFFFFF8;
          if (v81 == v85)
            goto LABEL_53;
        }
        else
        {
          v94 = 0;
          v95 = v89;
          v96 = v90;
        }
        v97 = v81 - v94;
        v98 = (__int16 *)(v82 + 2 * v95);
        v99 = 2 * v92;
        v100 = 4 * v91;
        v101 = (int *)(v13 + 4 * v96);
        do
        {
          _H0 = *v98;
          __asm { FCVT            S0, H0 }
          *v101 = (int)(float)(_S0 * (float)*v101);
          v98 = (__int16 *)((char *)v98 + v99);
          v101 = (int *)((char *)v101 + v100);
          --v97;
        }
        while (v97);
      }
LABEL_53:
      v90 += v87;
      v89 += v84;
      ++v80;
      v86 = (float16x8_t *)((char *)v86 + 2 * v84);
      v88 = (int32x4_t *)((char *)v88 + 4 * v87);
      if (v80 == v76)
        goto LABEL_50;
    }
  }
  if (v22 == 2)
  {
    v40 = *v4;
    if (!*v4)
      return;
    v41 = 0;
    v42 = a2[8];
    v43 = a1[8];
    v44 = v4[1];
    v45 = *a2;
    v46 = (uint64_t *)a2[5];
    v47 = (uint64_t *)a1[5];
    v48 = *v47;
    v49 = *a2 + 2 * v42;
    v50 = *v46;
    v51 = v44 & 0xFFFFFFFFFFFFFFF8;
    v52 = 2 * *v46;
    v53 = (int32x4_t *)(v13 + 4 * v43);
    v54 = 4 * *v47;
    while (1)
    {
      if (v44)
      {
        v55 = v47[1];
        v56 = v46[1];
        if (v44 >= 8 && (v55 == 1 ? (_ZF = v56 == 1) : (_ZF = 0), _ZF))
        {
          v59 = v42 + v51 * v56;
          v68 = v53;
          v69 = (float16x8_t *)v49;
          v70 = v44 & 0xFFFFFFFFFFFFFFF8;
          v60 = v43 + v51 * v55;
          do
          {
            v71 = *v69++;
            v72 = vcvtq_s32_f32(vmulq_f32(vcvt_hight_f32_f16(v71), vcvtq_f32_s32(v68[1])));
            *v68 = vcvtq_s32_f32(vmulq_f32(vcvtq_f32_f16(*(float16x4_t *)v71.i8), vcvtq_f32_s32(*v68)));
            v68[1] = v72;
            v68 += 2;
            v70 -= 8;
          }
          while (v70);
          v58 = v44 & 0xFFFFFFFFFFFFFFF8;
          if (v44 == v51)
            goto LABEL_33;
        }
        else
        {
          v58 = 0;
          v59 = v42;
          v60 = v43;
        }
        v61 = v44 - v58;
        v62 = (__int16 *)(v45 + 2 * v59);
        v63 = 2 * v56;
        v64 = 4 * v55;
        v65 = (int *)(v13 + 4 * v60);
        do
        {
          _H0 = *v62;
          __asm { FCVT            S0, H0 }
          *v65 = (int)(float)(_S0 * (float)*v65);
          v62 = (__int16 *)((char *)v62 + v63);
          v65 = (int *)((char *)v65 + v64);
          --v61;
        }
        while (v61);
      }
LABEL_33:
      v43 += v48;
      v42 += v50;
      ++v41;
      v49 += v52;
      v53 = (int32x4_t *)((char *)v53 + v54);
      if (v41 == v40)
        return;
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v109 = operator new(v12);
    bzero(v109, v12 & 0xFFFFFFFFFFFFFFF8);
    v110 = *a2;
    if (v12 >> 3 <= 1)
      v111 = 1;
    else
      v111 = v12 >> 3;
    v112 = a2[5];
    v113 = a2[8];
    v114 = v111 & 0x1FFFFFFFFFFFFFFELL;
    v115 = a1[5];
    while (v111 >= 2)
    {
      v118 = 0;
      v119 = 0;
      v120 = v111 & 0x1FFFFFFFFFFFFFFELL;
      v121 = (_QWORD *)(v115 + 8);
      v122 = v109 + 1;
      do
      {
        v118 += *(v121 - 1) * *(v122 - 1);
        v119 += *v121 * *v122;
        v122 += 2;
        v121 += 2;
        v120 -= 2;
      }
      while (v120);
      v116 = v119 + v118;
      v117 = v111 & 0x1FFFFFFFFFFFFFFELL;
      if (v111 != v114)
        goto LABEL_78;
LABEL_80:
      if (v111 < 2)
      {
        v130 = 0;
        v131 = 0;
LABEL_85:
        v137 = v111 - v131;
        v138 = v131;
        v139 = (uint64_t *)(v112 + 8 * v131);
        v140 = &v109[v138];
        do
        {
          v142 = *v140++;
          v141 = v142;
          v143 = *v139++;
          v130 += v143 * v141;
          --v137;
        }
        while (v137);
        goto LABEL_87;
      }
      v132 = 0;
      v133 = 0;
      v134 = v111 & 0x1FFFFFFFFFFFFFFELL;
      v135 = (_QWORD *)(v112 + 8);
      v136 = v109 + 1;
      do
      {
        v132 += *(v135 - 1) * *(v136 - 1);
        v133 += *v135 * *v136;
        v136 += 2;
        v135 += 2;
        v134 -= 2;
      }
      while (v134);
      v130 = v133 + v132;
      v131 = v111 & 0x1FFFFFFFFFFFFFFELL;
      if (v111 != v114)
        goto LABEL_85;
LABEL_87:
      _H0 = *(_WORD *)(v110 + 2 * (v113 + v130));
      __asm { FCVT            S0, H0 }
      *(_DWORD *)(v13 + 4 * v116) = (int)(float)(_S0 * (float)*(int *)(v13 + 4 * v116));
      if ((int)(v12 >> 3) >= 1)
      {
        v146 = (v12 >> 3) + 1;
        v147 = v12 >> 3;
        while (1)
        {
          v148 = (v146 - 2);
          v149 = v109[v148] + 1;
          v109[v148] = v149;
          if (v149 < v4[v148])
            break;
          v109[(v146 - 2)] = 0;
          --v147;
          if ((unint64_t)--v146 <= 1)
            goto LABEL_93;
        }
        if (v147 > 0)
          continue;
      }
LABEL_93:
      operator delete(v109);
      return;
    }
    v116 = 0;
    v117 = 0;
LABEL_78:
    v123 = v111 - v117;
    v124 = v117;
    v125 = (uint64_t *)(v115 + 8 * v117);
    v126 = &v109[v124];
    do
    {
      v128 = *v126++;
      v127 = v128;
      v129 = *v125++;
      v116 += v129 * v127;
      --v123;
    }
    while (v123);
    goto LABEL_80;
  }
  v23 = *v4;
  if (!*v4)
    return;
  v24 = a2[8];
  v25 = a1[8];
  v26 = *a2;
  v27 = *(_QWORD *)a1[5];
  v28 = *(_QWORD *)a2[5];
  if (v23 < 8)
  {
    v29 = 0;
LABEL_28:
    v30 = v23 - v29;
    v31 = (__int16 *)(v26 + 2 * v24);
    v32 = 2 * v28;
    v33 = 4 * v27;
    v34 = (int *)(v13 + 4 * v25);
    do
    {
      _H0 = *v31;
      __asm { FCVT            S0, H0 }
      *v34 = (int)(float)(_S0 * (float)*v34);
      v31 = (__int16 *)((char *)v31 + v32);
      v34 = (int *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  v29 = 0;
  if (v27 != 1)
    goto LABEL_28;
  if (v28 != 1)
    goto LABEL_28;
  v29 = v23 & 0xFFFFFFFFFFFFFFF8;
  v150 = v24 + (v23 & 0xFFFFFFFFFFFFFFF8);
  v151 = v25 + (v23 & 0xFFFFFFFFFFFFFFF8);
  v152 = (float16x8_t *)(v26 + 2 * v24);
  v153 = (int32x4_t *)(v13 + 4 * v25);
  v154 = v23 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v155 = *v152++;
    v156 = vcvtq_s32_f32(vmulq_f32(vcvt_hight_f32_f16(v155), vcvtq_f32_s32(v153[1])));
    *v153 = vcvtq_s32_f32(vmulq_f32(vcvtq_f32_f16(*(float16x4_t *)v155.i8), vcvtq_f32_s32(*v153)));
    v153[1] = v156;
    v153 += 2;
    v154 -= 8;
  }
  while (v154);
  v24 = v150;
  v25 = v151;
  if (v23 != v29)
    goto LABEL_28;
}

void sub_1911D4784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::operator*<half>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<int>::copy((uint64_t)a1, a3);
    nitro::ndarray<int>::operator*=<half>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<int>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<int>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<half>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<int>::operator*=<half>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911D4AE4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911D4AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911D4B94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911D4B70);
  JUMPOUT(0x1911D4B40);
}

void sub_1911D4BA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911D4B80);
  JUMPOUT(0x1911D4B48);
}

void sub_1911D4BB4()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911D4B58);
  JUMPOUT(0x1911D4B50);
}

void nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911D4E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911D4FCC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911D4FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911D4FD8);
}

uint64_t *nitro::ndarray<half>::operator*=<half>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;

  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  v5 = v4 - v3;
  if (v4 == v3 || !*a1)
    return a1;
  if ((unint64_t)(v5 - 8) < 8)
  {
    v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6)
  {
    v14 = v5 >> 3;
    v15 = (_QWORD *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3)
      goto LABEL_19;
    v16 = v14 <= 1 ? 1 : v14;
    if (*(_QWORD *)v3 != *v15)
      goto LABEL_19;
    v17 = 1;
    do
    {
      v18 = v17;
      if (v16 == v17)
        break;
      v19 = *(_QWORD *)&v3[8 * v17];
      v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 >= v14)
    {
      nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(a1, a2);
    }
    else
    {
LABEL_19:
      nitro::ndarray<half>::operator*<half>(a1, a2, &v25);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v25);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  return a1;
}

__int16 nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>@<H0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __int16 *v33;
  uint64_t v34;
  uint64_t v35;
  __int16 *v36;
  __int16 result;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  __int16 *v71;
  uint64_t v72;
  uint64_t v73;
  __int16 *v74;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  __int16 *v143;
  uint64_t v144;
  uint64_t v145;
  __int16 *v146;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  _QWORD *v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  _QWORD *v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  _QWORD *v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v225;
  uint64_t v230;
  int v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v270;
  uint64_t v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v279;
  uint64_t v280;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return result;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return result;
  v13 = *a1;
  if (!*a1)
    return result;
  if (v12 - 8 < 8)
  {
    v14 = 1;
    v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v16 = ((v12 - 8) >> 3) + 1;
  v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  v17 = v4 + 1;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return result;
  v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v275 = *v4;
    if (!*v4)
      return result;
    v117 = 0;
    v118 = a2[8];
    v119 = a1[8];
    v120 = v4[1];
    v121 = (uint64_t *)a1[5];
    v272 = (uint64_t *)a2[5];
    v273 = *v272;
    v274 = *v121;
    v277 = 2 * *v121;
    v276 = 2 * *v272;
    v270 = 2 * v118;
    v271 = 2 * v119;
    v122 = 2 * v119 + v13 + 16;
    v123 = 2 * v118 + 16;
    while (!v120)
    {
LABEL_55:
      v119 += v274;
      v118 += v273;
      ++v117;
      v122 += v277;
      v123 += v276;
      if (v117 == v275)
        return result;
    }
    v124 = 0;
    v125 = v4[2];
    v126 = *a2;
    v127 = v121[1];
    v128 = v272[1];
    v129 = 2 * v127;
    v279 = v270 + v276 * v117;
    v280 = v271 + v277 * v117;
    v130 = 2 * v128;
    v131 = v125 & 0xFFFFFFFFFFFFFFF0;
    v132 = a2[5];
    v133 = *a2 + v123;
    v134 = v122;
    v135 = v118;
    v136 = v119;
    while (!v125)
    {
LABEL_58:
      v136 += v127;
      v135 += v128;
      ++v124;
      v134 += v129;
      v133 += v130;
      if (v124 == v120)
        goto LABEL_55;
    }
    v137 = v121[2];
    v138 = *(_QWORD *)(v132 + 16);
    if (v125 >= 0x10)
    {
      v139 = 0;
      if (v137 != 1)
        goto LABEL_62;
      v140 = v135;
      v141 = v136;
      if (v138 != 1)
      {
LABEL_63:
        v142 = v125 - v139;
        v143 = (__int16 *)(v126 + 2 * v140);
        v144 = 2 * v138;
        v145 = 2 * v137;
        v146 = (__int16 *)(v13 + 2 * v141);
        do
        {
          _H0 = *v143;
          _H1 = *v146;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          _S0 = _S0 * _S1;
          __asm { FCVT            H0, S0 }
          *v146 = result;
          v143 = (__int16 *)((char *)v143 + v144);
          v146 = (__int16 *)((char *)v146 + v145);
          --v142;
        }
        while (v142);
        goto LABEL_58;
      }
      if (v13 + v280 + v129 * v124 >= v126 + v279 + 2 * v125 + v130 * v124
        || v126 + v279 + v130 * v124 >= v13 + v280 + 2 * v125 + v129 * v124)
      {
        v140 = v135 + v131;
        v153 = v133;
        v154 = v134;
        v155 = v125 & 0xFFFFFFFFFFFFFFF0;
        v141 = v136 + v131;
        do
        {
          _Q3 = *(_OWORD *)(v153 - 16);
          _Q0 = *(_OWORD *)v153;
          _Q4 = *(_OWORD *)(v154 - 16);
          _Q1 = *(_OWORD *)v154;
          _H2 = WORD1(_Q4);
          __asm { FCVT            S2, H2 }
          _H5 = WORD1(_Q3);
          __asm { FCVT            S5, H5 }
          _S2 = _S5 * _S2;
          __asm
          {
            FCVT            H5, S2
            FCVT            S2, H4
            FCVT            S6, H3
          }
          *(float *)&_Q2 = _S6 * _S2;
          __asm { FCVT            H2, S2 }
          WORD1(_Q2) = LOWORD(_S5);
          LOWORD(_S5) = WORD2(*(_QWORD *)(v154 - 16));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = WORD2(*(_QWORD *)(v153 - 16));
          __asm { FCVT            S6, H6 }
          _S5 = _S6 * _S5;
          __asm { FCVT            H5, S5 }
          WORD2(_Q2) = LOWORD(_S5);
          LOWORD(_S5) = HIWORD(*(_QWORD *)(v154 - 16));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = HIWORD(*(_QWORD *)(v153 - 16));
          __asm { FCVT            S6, H6 }
          _S5 = _S6 * _S5;
          __asm { FCVT            H5, S5 }
          WORD3(_Q2) = LOWORD(_S5);
          LOWORD(_S5) = *(_QWORD *)(v154 - 8);
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *(_QWORD *)(v153 - 8);
          __asm { FCVT            S6, H6 }
          _S5 = _S6 * _S5;
          __asm { FCVT            H5, S5 }
          WORD4(_Q2) = LOWORD(_S5);
          LOWORD(_S5) = WORD1(*(_QWORD *)(v154 - 8));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = WORD1(*(_QWORD *)(v153 - 8));
          __asm { FCVT            S6, H6 }
          _S5 = _S6 * _S5;
          __asm { FCVT            H5, S5 }
          WORD5(_Q2) = LOWORD(_S5);
          LOWORD(_S5) = WORD6(_Q4);
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = WORD6(_Q3);
          __asm { FCVT            S6, H6 }
          _S5 = _S6 * _S5;
          __asm { FCVT            H5, S5 }
          WORD6(_Q2) = LOWORD(_S5);
          LOWORD(_Q4) = HIWORD(_Q4);
          __asm { FCVT            S4, H4 }
          LOWORD(_Q3) = HIWORD(_Q3);
          __asm { FCVT            S3, H3 }
          *(float *)&_Q3 = *(float *)&_Q3 * *(float *)&_Q4;
          __asm { FCVT            H3, S3 }
          HIWORD(_Q2) = _Q3;
          LOWORD(_Q3) = WORD1(*(_OWORD *)v154);
          __asm { FCVT            S3, H3 }
          LOWORD(_Q4) = WORD1(*(_OWORD *)v153);
          __asm { FCVT            S4, H4 }
          *(float *)&_Q3 = *(float *)&_Q4 * *(float *)&_Q3;
          __asm
          {
            FCVT            H3, S3
            FCVT            S4, H1
            FCVT            S5, H0
          }
          *(float *)&_Q4 = _S5 * *(float *)&_Q4;
          __asm { FCVT            H4, S4 }
          WORD1(_Q4) = _Q3;
          LOWORD(_Q3) = WORD2(*(_QWORD *)v154);
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = WORD2(*(_QWORD *)v153);
          __asm { FCVT            S5, H5 }
          *(float *)&_Q3 = _S5 * *(float *)&_Q3;
          __asm { FCVT            H3, S3 }
          WORD2(_Q4) = _Q3;
          LOWORD(_Q3) = HIWORD(*(_QWORD *)v154);
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = HIWORD(*(_QWORD *)v153);
          __asm { FCVT            S5, H5 }
          *(float *)&_Q3 = _S5 * *(float *)&_Q3;
          __asm { FCVT            H3, S3 }
          WORD3(_Q4) = _Q3;
          LOWORD(_Q3) = *(_QWORD *)(v154 + 8);
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = *(_QWORD *)(v153 + 8);
          __asm { FCVT            S5, H5 }
          *(float *)&_Q3 = _S5 * *(float *)&_Q3;
          __asm { FCVT            H3, S3 }
          WORD4(_Q4) = _Q3;
          LOWORD(_Q3) = WORD1(*(_QWORD *)(v154 + 8));
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = WORD1(*(_QWORD *)(v153 + 8));
          __asm { FCVT            S5, H5 }
          *(float *)&_Q3 = _S5 * *(float *)&_Q3;
          __asm { FCVT            H3, S3 }
          WORD5(_Q4) = _Q3;
          LOWORD(_Q3) = WORD6(*(_OWORD *)v154);
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = WORD6(*(_OWORD *)v153);
          __asm { FCVT            S5, H5 }
          *(float *)&_Q3 = _S5 * *(float *)&_Q3;
          __asm { FCVT            H3, S3 }
          WORD6(_Q4) = _Q3;
          LOWORD(_Q1) = HIWORD(*(_OWORD *)v154);
          __asm { FCVT            S1, H1 }
          LOWORD(_Q0) = HIWORD(*(_OWORD *)v153);
          __asm { FCVT            S0, H0 }
          *(float *)&_Q0 = *(float *)&_Q0 * *(float *)&_Q1;
          __asm { FCVT            H0, S0 }
          HIWORD(_Q4) = result;
          *(_OWORD *)(v154 - 16) = _Q2;
          *(_OWORD *)v154 = _Q4;
          v154 += 32;
          v153 += 32;
          v155 -= 16;
        }
        while (v155);
        v139 = v125 & 0xFFFFFFFFFFFFFFF0;
        if (v125 == v131)
          goto LABEL_58;
        goto LABEL_63;
      }
    }
    v139 = 0;
LABEL_62:
    v140 = v135;
    v141 = v136;
    goto LABEL_63;
  }
  if (v22 == 2)
  {
    v46 = *v4;
    if (!*v4)
      return result;
    v47 = 0;
    v48 = a2[8];
    v49 = a1[8];
    v50 = v4[1];
    v51 = (uint64_t *)a2[5];
    v52 = (uint64_t *)a1[5];
    v53 = *v52;
    v54 = *v51;
    v55 = 2 * *v52;
    v56 = 2 * *v51;
    v57 = v50 & 0xFFFFFFFFFFFFFFF0;
    v58 = *a2;
    v59 = 2 * v49 + v13 + 16;
    v60 = 2 * v48 + *a2 + 16;
    v61 = v13 + 2 * v49;
    v62 = v13 + 2 * v49 + 2 * v50;
    v63 = *a2 + 2 * v48;
    v64 = *a2 + 2 * v48 + 2 * v50;
    while (!v50)
    {
LABEL_34:
      v49 += v53;
      v48 += v54;
      ++v47;
      v59 += v55;
      v60 += v56;
      if (v47 == v46)
        return result;
    }
    v65 = v52[1];
    v66 = v51[1];
    if (v50 >= 0x10)
    {
      v67 = 0;
      if (v65 != 1)
        goto LABEL_38;
      v68 = v48;
      v69 = v49;
      if (v66 != 1)
      {
LABEL_39:
        v70 = v50 - v67;
        v71 = (__int16 *)(v58 + 2 * v68);
        v72 = 2 * v66;
        v73 = 2 * v65;
        v74 = (__int16 *)(v13 + 2 * v69);
        do
        {
          _H0 = *v71;
          _H1 = *v74;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          _S0 = _S0 * _S1;
          __asm { FCVT            H0, S0 }
          *v74 = result;
          v71 = (__int16 *)((char *)v71 + v72);
          v74 = (__int16 *)((char *)v74 + v73);
          --v70;
        }
        while (v70);
        goto LABEL_34;
      }
      if (v61 + v55 * v47 >= (unint64_t)(v64 + v56 * v47)
        || v63 + v56 * v47 >= (unint64_t)(v62 + v55 * v47))
      {
        v68 = v48 + v57;
        v81 = v60;
        v82 = v59;
        v83 = v50 & 0xFFFFFFFFFFFFFFF0;
        v69 = v49 + v57;
        do
        {
          _Q3 = *(_OWORD *)(v81 - 16);
          _Q0 = *(_OWORD *)v81;
          _Q4 = *(_OWORD *)(v82 - 16);
          _Q1 = *(_OWORD *)v82;
          _H2 = WORD1(_Q4);
          __asm { FCVT            S2, H2 }
          _H5 = WORD1(_Q3);
          __asm { FCVT            S5, H5 }
          _S2 = _S5 * _S2;
          __asm
          {
            FCVT            H5, S2
            FCVT            S2, H4
            FCVT            S6, H3
          }
          *(float *)&_Q2 = _S6 * _S2;
          __asm { FCVT            H2, S2 }
          WORD1(_Q2) = LOWORD(_S5);
          LOWORD(_S5) = WORD2(*(_QWORD *)(v82 - 16));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = WORD2(*(_QWORD *)(v81 - 16));
          __asm { FCVT            S6, H6 }
          _S5 = _S6 * _S5;
          __asm { FCVT            H5, S5 }
          WORD2(_Q2) = LOWORD(_S5);
          LOWORD(_S5) = HIWORD(*(_QWORD *)(v82 - 16));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = HIWORD(*(_QWORD *)(v81 - 16));
          __asm { FCVT            S6, H6 }
          _S5 = _S6 * _S5;
          __asm { FCVT            H5, S5 }
          WORD3(_Q2) = LOWORD(_S5);
          LOWORD(_S5) = *(_QWORD *)(v82 - 8);
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *(_QWORD *)(v81 - 8);
          __asm { FCVT            S6, H6 }
          _S5 = _S6 * _S5;
          __asm { FCVT            H5, S5 }
          WORD4(_Q2) = LOWORD(_S5);
          LOWORD(_S5) = WORD1(*(_QWORD *)(v82 - 8));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = WORD1(*(_QWORD *)(v81 - 8));
          __asm { FCVT            S6, H6 }
          _S5 = _S6 * _S5;
          __asm { FCVT            H5, S5 }
          WORD5(_Q2) = LOWORD(_S5);
          LOWORD(_S5) = WORD6(_Q4);
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = WORD6(_Q3);
          __asm { FCVT            S6, H6 }
          _S5 = _S6 * _S5;
          __asm { FCVT            H5, S5 }
          WORD6(_Q2) = LOWORD(_S5);
          LOWORD(_Q4) = HIWORD(_Q4);
          __asm { FCVT            S4, H4 }
          LOWORD(_Q3) = HIWORD(_Q3);
          __asm { FCVT            S3, H3 }
          *(float *)&_Q3 = *(float *)&_Q3 * *(float *)&_Q4;
          __asm { FCVT            H3, S3 }
          HIWORD(_Q2) = _Q3;
          LOWORD(_Q3) = WORD1(*(_OWORD *)v82);
          __asm { FCVT            S3, H3 }
          LOWORD(_Q4) = WORD1(*(_OWORD *)v81);
          __asm { FCVT            S4, H4 }
          *(float *)&_Q3 = *(float *)&_Q4 * *(float *)&_Q3;
          __asm
          {
            FCVT            H3, S3
            FCVT            S4, H1
            FCVT            S5, H0
          }
          *(float *)&_Q4 = _S5 * *(float *)&_Q4;
          __asm { FCVT            H4, S4 }
          WORD1(_Q4) = _Q3;
          LOWORD(_Q3) = WORD2(*(_QWORD *)v82);
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = WORD2(*(_QWORD *)v81);
          __asm { FCVT            S5, H5 }
          *(float *)&_Q3 = _S5 * *(float *)&_Q3;
          __asm { FCVT            H3, S3 }
          WORD2(_Q4) = _Q3;
          LOWORD(_Q3) = HIWORD(*(_QWORD *)v82);
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = HIWORD(*(_QWORD *)v81);
          __asm { FCVT            S5, H5 }
          *(float *)&_Q3 = _S5 * *(float *)&_Q3;
          __asm { FCVT            H3, S3 }
          WORD3(_Q4) = _Q3;
          LOWORD(_Q3) = *(_QWORD *)(v82 + 8);
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = *(_QWORD *)(v81 + 8);
          __asm { FCVT            S5, H5 }
          *(float *)&_Q3 = _S5 * *(float *)&_Q3;
          __asm { FCVT            H3, S3 }
          WORD4(_Q4) = _Q3;
          LOWORD(_Q3) = WORD1(*(_QWORD *)(v82 + 8));
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = WORD1(*(_QWORD *)(v81 + 8));
          __asm { FCVT            S5, H5 }
          *(float *)&_Q3 = _S5 * *(float *)&_Q3;
          __asm { FCVT            H3, S3 }
          WORD5(_Q4) = _Q3;
          LOWORD(_Q3) = WORD6(*(_OWORD *)v82);
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = WORD6(*(_OWORD *)v81);
          __asm { FCVT            S5, H5 }
          *(float *)&_Q3 = _S5 * *(float *)&_Q3;
          __asm { FCVT            H3, S3 }
          WORD6(_Q4) = _Q3;
          LOWORD(_Q1) = HIWORD(*(_OWORD *)v82);
          __asm { FCVT            S1, H1 }
          LOWORD(_Q0) = HIWORD(*(_OWORD *)v81);
          __asm { FCVT            S0, H0 }
          *(float *)&_Q0 = *(float *)&_Q0 * *(float *)&_Q1;
          __asm { FCVT            H0, S0 }
          HIWORD(_Q4) = result;
          *(_OWORD *)(v82 - 16) = _Q2;
          *(_OWORD *)v82 = _Q4;
          v82 += 32;
          v81 += 32;
          v83 -= 16;
        }
        while (v83);
        v67 = v50 & 0xFFFFFFFFFFFFFFF0;
        if (v50 == v57)
          goto LABEL_34;
        goto LABEL_39;
      }
    }
    v67 = 0;
LABEL_38:
    v68 = v48;
    v69 = v49;
    goto LABEL_39;
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v189 = operator new(v12);
    bzero(v189, v12 & 0xFFFFFFFFFFFFFFF8);
    v190 = *a2;
    if (v12 >> 3 <= 1)
      v191 = 1;
    else
      v191 = v12 >> 3;
    v192 = a2[5];
    v193 = a2[8];
    v194 = v191 & 0x1FFFFFFFFFFFFFFELL;
    v195 = a1[5];
    while (v191 >= 2)
    {
      v198 = 0;
      v199 = 0;
      v200 = v191 & 0x1FFFFFFFFFFFFFFELL;
      v201 = (_QWORD *)(v195 + 8);
      v202 = v189 + 1;
      do
      {
        v198 += *(v201 - 1) * *(v202 - 1);
        v199 += *v201 * *v202;
        v202 += 2;
        v201 += 2;
        v200 -= 2;
      }
      while (v200);
      v196 = v199 + v198;
      v197 = v191 & 0x1FFFFFFFFFFFFFFELL;
      if (v191 != v194)
        goto LABEL_87;
LABEL_89:
      if (v191 < 2)
      {
        v210 = 0;
        v211 = 0;
LABEL_94:
        v217 = v191 - v211;
        v218 = v211;
        v219 = (uint64_t *)(v192 + 8 * v211);
        v220 = &v189[v218];
        do
        {
          v222 = *v220++;
          v221 = v222;
          v223 = *v219++;
          v210 += v223 * v221;
          --v217;
        }
        while (v217);
        goto LABEL_96;
      }
      v212 = 0;
      v213 = 0;
      v214 = v191 & 0x1FFFFFFFFFFFFFFELL;
      v215 = (_QWORD *)(v192 + 8);
      v216 = v189 + 1;
      do
      {
        v212 += *(v215 - 1) * *(v216 - 1);
        v213 += *v215 * *v216;
        v216 += 2;
        v215 += 2;
        v214 -= 2;
      }
      while (v214);
      v210 = v213 + v212;
      v211 = v191 & 0x1FFFFFFFFFFFFFFELL;
      if (v191 != v194)
        goto LABEL_94;
LABEL_96:
      _H0 = *(_WORD *)(v190 + 2 * (v193 + v210));
      v225 = 2 * v196;
      _H1 = *(_WORD *)(v13 + v225);
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      _S0 = _S0 * _S1;
      __asm { FCVT            H0, S0 }
      *(_WORD *)(v13 + v225) = LOWORD(_S0);
      if ((int)(v12 >> 3) >= 1)
      {
        v230 = (v12 >> 3) + 1;
        v231 = v12 >> 3;
        while (1)
        {
          v232 = (v230 - 2);
          v233 = v189[v232] + 1;
          v189[v232] = v233;
          if (v233 < v4[v232])
            break;
          v189[(v230 - 2)] = 0;
          --v231;
          if ((unint64_t)--v230 <= 1)
            goto LABEL_102;
        }
        if (v231 > 0)
          continue;
      }
LABEL_102:
      operator delete(v189);
      return result;
    }
    v196 = 0;
    v197 = 0;
LABEL_87:
    v203 = v191 - v197;
    v204 = v197;
    v205 = (uint64_t *)(v195 + 8 * v197);
    v206 = &v189[v204];
    do
    {
      v208 = *v206++;
      v207 = v208;
      v209 = *v205++;
      v196 += v209 * v207;
      --v203;
    }
    while (v203);
    goto LABEL_89;
  }
  v23 = *v4;
  if (!*v4)
    return result;
  v24 = a2[8];
  v25 = a1[8];
  v26 = *a2;
  v27 = *(_QWORD *)a1[5];
  v28 = *(_QWORD *)a2[5];
  if (v23 < 0x10)
    goto LABEL_27;
  v29 = 0;
  if (v27 != 1 || v28 != 1)
    goto LABEL_28;
  if (v13 + 2 * v25 < v26 + 2 * v23 + 2 * v24 && v26 + 2 * v24 < v13 + 2 * v23 + 2 * v25)
  {
LABEL_27:
    v29 = 0;
LABEL_28:
    v30 = a2[8];
    v31 = a1[8];
LABEL_29:
    v32 = v23 - v29;
    v33 = (__int16 *)(v26 + 2 * v30);
    v34 = 2 * v28;
    v35 = 2 * v27;
    v36 = (__int16 *)(v13 + 2 * v31);
    do
    {
      _H0 = *v33;
      _H1 = *v36;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      _S0 = _S0 * _S1;
      __asm { FCVT            H0, S0 }
      *v36 = result;
      v33 = (__int16 *)((char *)v33 + v34);
      v36 = (__int16 *)((char *)v36 + v35);
      --v32;
    }
    while (v32);
    return result;
  }
  v29 = v23 & 0xFFFFFFFFFFFFFFF0;
  v30 = v24 + (v23 & 0xFFFFFFFFFFFFFFF0);
  v31 = v25 + (v23 & 0xFFFFFFFFFFFFFFF0);
  v234 = v26 + 2 * v24 + 16;
  v235 = v13 + 2 * v25 + 16;
  v236 = v23 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    _Q3 = *(_OWORD *)(v234 - 16);
    _Q0 = *(_OWORD *)v234;
    _Q4 = *(_OWORD *)(v235 - 16);
    _Q1 = *(_OWORD *)v235;
    _H2 = WORD1(_Q4);
    __asm { FCVT            S2, H2 }
    _H5 = WORD1(_Q3);
    __asm { FCVT            S5, H5 }
    _S2 = _S5 * _S2;
    __asm
    {
      FCVT            H5, S2
      FCVT            S2, H4
      FCVT            S6, H3
    }
    *(float *)&_Q2 = _S6 * _S2;
    __asm { FCVT            H2, S2 }
    WORD1(_Q2) = LOWORD(_S5);
    LOWORD(_S5) = WORD2(*(_QWORD *)(v235 - 16));
    __asm { FCVT            S5, H5 }
    LOWORD(_S6) = WORD2(*(_QWORD *)(v234 - 16));
    __asm { FCVT            S6, H6 }
    _S5 = _S6 * _S5;
    __asm { FCVT            H5, S5 }
    WORD2(_Q2) = LOWORD(_S5);
    LOWORD(_S5) = HIWORD(*(_QWORD *)(v235 - 16));
    __asm { FCVT            S5, H5 }
    LOWORD(_S6) = HIWORD(*(_QWORD *)(v234 - 16));
    __asm { FCVT            S6, H6 }
    _S5 = _S6 * _S5;
    __asm { FCVT            H5, S5 }
    WORD3(_Q2) = LOWORD(_S5);
    LOWORD(_S5) = *(_QWORD *)(v235 - 8);
    __asm { FCVT            S5, H5 }
    LOWORD(_S6) = *(_QWORD *)(v234 - 8);
    __asm { FCVT            S6, H6 }
    _S5 = _S6 * _S5;
    __asm { FCVT            H5, S5 }
    WORD4(_Q2) = LOWORD(_S5);
    LOWORD(_S5) = WORD1(*(_QWORD *)(v235 - 8));
    __asm { FCVT            S5, H5 }
    LOWORD(_S6) = WORD1(*(_QWORD *)(v234 - 8));
    __asm { FCVT            S6, H6 }
    _S5 = _S6 * _S5;
    __asm { FCVT            H5, S5 }
    WORD5(_Q2) = LOWORD(_S5);
    LOWORD(_S5) = WORD6(_Q4);
    __asm { FCVT            S5, H5 }
    LOWORD(_S6) = WORD6(_Q3);
    __asm { FCVT            S6, H6 }
    _S5 = _S6 * _S5;
    __asm { FCVT            H5, S5 }
    WORD6(_Q2) = LOWORD(_S5);
    LOWORD(_Q4) = HIWORD(_Q4);
    __asm { FCVT            S4, H4 }
    LOWORD(_Q3) = HIWORD(_Q3);
    __asm { FCVT            S3, H3 }
    *(float *)&_Q3 = *(float *)&_Q3 * *(float *)&_Q4;
    __asm { FCVT            H3, S3 }
    HIWORD(_Q2) = _Q3;
    LOWORD(_Q3) = WORD1(*(_OWORD *)v235);
    __asm { FCVT            S3, H3 }
    LOWORD(_Q4) = WORD1(*(_OWORD *)v234);
    __asm { FCVT            S4, H4 }
    *(float *)&_Q3 = *(float *)&_Q4 * *(float *)&_Q3;
    __asm
    {
      FCVT            H3, S3
      FCVT            S4, H1
      FCVT            S5, H0
    }
    *(float *)&_Q4 = _S5 * *(float *)&_Q4;
    __asm { FCVT            H4, S4 }
    WORD1(_Q4) = _Q3;
    LOWORD(_Q3) = WORD2(*(_QWORD *)v235);
    __asm { FCVT            S3, H3 }
    LOWORD(_S5) = WORD2(*(_QWORD *)v234);
    __asm { FCVT            S5, H5 }
    *(float *)&_Q3 = _S5 * *(float *)&_Q3;
    __asm { FCVT            H3, S3 }
    WORD2(_Q4) = _Q3;
    LOWORD(_Q3) = HIWORD(*(_QWORD *)v235);
    __asm { FCVT            S3, H3 }
    LOWORD(_S5) = HIWORD(*(_QWORD *)v234);
    __asm { FCVT            S5, H5 }
    *(float *)&_Q3 = _S5 * *(float *)&_Q3;
    __asm { FCVT            H3, S3 }
    WORD3(_Q4) = _Q3;
    LOWORD(_Q3) = *(_QWORD *)(v235 + 8);
    __asm { FCVT            S3, H3 }
    LOWORD(_S5) = *(_QWORD *)(v234 + 8);
    __asm { FCVT            S5, H5 }
    *(float *)&_Q3 = _S5 * *(float *)&_Q3;
    __asm { FCVT            H3, S3 }
    WORD4(_Q4) = _Q3;
    LOWORD(_Q3) = WORD1(*(_QWORD *)(v235 + 8));
    __asm { FCVT            S3, H3 }
    LOWORD(_S5) = WORD1(*(_QWORD *)(v234 + 8));
    __asm { FCVT            S5, H5 }
    *(float *)&_Q3 = _S5 * *(float *)&_Q3;
    __asm { FCVT            H3, S3 }
    WORD5(_Q4) = _Q3;
    LOWORD(_Q3) = WORD6(*(_OWORD *)v235);
    __asm { FCVT            S3, H3 }
    LOWORD(_S5) = WORD6(*(_OWORD *)v234);
    __asm { FCVT            S5, H5 }
    *(float *)&_Q3 = _S5 * *(float *)&_Q3;
    __asm { FCVT            H3, S3 }
    WORD6(_Q4) = _Q3;
    LOWORD(_Q1) = HIWORD(*(_OWORD *)v235);
    __asm { FCVT            S1, H1 }
    LOWORD(_Q0) = HIWORD(*(_OWORD *)v234);
    __asm { FCVT            S0, H0 }
    *(float *)&_Q0 = *(float *)&_Q0 * *(float *)&_Q1;
    __asm { FCVT            H0, S0 }
    HIWORD(_Q4) = result;
    *(_OWORD *)(v235 - 16) = _Q2;
    *(_OWORD *)v235 = _Q4;
    v234 += 32;
    v235 += 32;
    v236 -= 16;
  }
  while (v236);
  if (v23 != v29)
    goto LABEL_29;
  return result;
}

void sub_1911D5E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::operator*<half>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<half>::copy((uint64_t)a1, a3);
    nitro::ndarray<half>::operator*=<half>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<half>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<half>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<half>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<half>::operator*=<half>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911D61B8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911D61CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911D6268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911D6244);
  JUMPOUT(0x1911D6214);
}

void sub_1911D6278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911D6254);
  JUMPOUT(0x1911D621CLL);
}

void sub_1911D6288()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911D622CLL);
  JUMPOUT(0x1911D6224);
}

void nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911D64FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911D66A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911D66B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911D66ACLL);
}

uint64_t *nitro::ndarray<float>::operator*=<half>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;

  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  v5 = v4 - v3;
  if (v4 == v3 || !*a1)
    return a1;
  if ((unint64_t)(v5 - 8) < 8)
  {
    v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6)
  {
    v14 = v5 >> 3;
    v15 = (_QWORD *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3)
      goto LABEL_19;
    v16 = v14 <= 1 ? 1 : v14;
    if (*(_QWORD *)v3 != *v15)
      goto LABEL_19;
    v17 = 1;
    do
    {
      v18 = v17;
      if (v16 == v17)
        break;
      v19 = *(_QWORD *)&v3[8 * v17];
      v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 >= v14)
    {
      nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(a1, a2);
    }
    else
    {
LABEL_19:
      nitro::ndarray<float>::operator*<half>(a1, a2, &v25);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v25);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  return a1;
}

void nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int16 *v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  __int16 *v62;
  uint64_t v63;
  uint64_t v64;
  float *v65;
  float16x4_t *v68;
  float32x4_t *v69;
  unint64_t v70;
  float16x8_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  float16x4_t *v88;
  uint64_t v89;
  float32x4_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  __int16 *v100;
  uint64_t v101;
  uint64_t v102;
  float *v103;
  float16x4_t *v106;
  float32x4_t *v107;
  unint64_t v108;
  float16x8_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  _QWORD *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v150;
  int v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  float16x4_t *v156;
  float32x4_t *v157;
  unint64_t v158;
  float16x8_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return;
  v13 = *a1;
  if (!*a1)
    return;
  if (v12 - 8 < 8)
  {
    v14 = 1;
    v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v16 = ((v12 - 8) >> 3) + 1;
  v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  v17 = v4 + 1;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v168 = *v4;
    if (!*v4)
      return;
    v75 = 0;
    v76 = a2[8];
    v77 = a1[8];
    v78 = v4[1];
    v79 = (uint64_t *)a1[5];
    v163 = (uint64_t *)a2[5];
    v80 = v13 + 4 * v77 + 32;
    v166 = *v163;
    v167 = *v79;
    v165 = 4 * *v79;
    v81 = 2 * v76 + 16;
    v164 = 2 * *v163;
    while (!v78)
    {
LABEL_50:
      v77 += v167;
      v76 += v166;
      ++v75;
      v80 += v165;
      v81 += v164;
      if (v75 == v168)
        return;
    }
    v82 = 0;
    v83 = v4[2];
    v84 = *a2;
    v85 = a2[5];
    v86 = v79[1];
    v87 = v83 & 0xFFFFFFFFFFFFFFF0;
    v88 = (float16x4_t *)(*a2 + v81);
    v89 = v163[1];
    v90 = (float32x4_t *)v80;
    v91 = v76;
    v92 = v77;
    while (1)
    {
      if (v83)
      {
        v93 = v79[2];
        v94 = *(_QWORD *)(v85 + 16);
        if (v83 >= 0x10 && (v93 == 1 ? (v95 = v94 == 1) : (v95 = 0), v95))
        {
          v97 = v91 + v87 * v94;
          v106 = v88;
          v107 = v90;
          v108 = v83 & 0xFFFFFFFFFFFFFFF0;
          v98 = v92 + v87 * v93;
          do
          {
            v109 = *(float16x8_t *)v106[-2].i8;
            v110 = vmulq_f32(v107[-1], vcvt_hight_f32_f16(v109));
            v111 = vmulq_f32(*v107, vcvtq_f32_f16(*v106));
            v112 = vmulq_f32(v107[1], vcvt_hight_f32_f16(*(float16x8_t *)v106->i8));
            v107[-2] = vmulq_f32(v107[-2], vcvtq_f32_f16(*(float16x4_t *)v109.i8));
            v107[-1] = v110;
            *v107 = v111;
            v107[1] = v112;
            v107 += 4;
            v106 += 4;
            v108 -= 16;
          }
          while (v108);
          v96 = v83 & 0xFFFFFFFFFFFFFFF0;
          if (v83 == v87)
            goto LABEL_53;
        }
        else
        {
          v96 = 0;
          v97 = v91;
          v98 = v92;
        }
        v99 = v83 - v96;
        v100 = (__int16 *)(v84 + 2 * v97);
        v101 = 2 * v94;
        v102 = 4 * v93;
        v103 = (float *)(v13 + 4 * v98);
        do
        {
          _H0 = *v100;
          __asm { FCVT            S0, H0 }
          *v103 = *v103 * _S0;
          v100 = (__int16 *)((char *)v100 + v101);
          v103 = (float *)((char *)v103 + v102);
          --v99;
        }
        while (v99);
      }
LABEL_53:
      v92 += v86;
      v91 += v89;
      ++v82;
      v90 = (float32x4_t *)((char *)v90 + 4 * v86);
      v88 = (float16x4_t *)((char *)v88 + 2 * v89);
      if (v82 == v78)
        goto LABEL_50;
    }
  }
  if (v22 == 2)
  {
    v40 = *v4;
    if (!*v4)
      return;
    v41 = 0;
    v42 = a2[8];
    v43 = a1[8];
    v44 = v4[1];
    v45 = *a2;
    v46 = (uint64_t *)a2[5];
    v47 = (uint64_t *)a1[5];
    v48 = *v47;
    v49 = *v46;
    v50 = v44 & 0xFFFFFFFFFFFFFFF0;
    v51 = v13 + 4 * v43 + 32;
    v52 = 4 * *v47;
    v53 = *a2 + 2 * v42 + 16;
    v54 = 2 * *v46;
    while (1)
    {
      if (v44)
      {
        v55 = v47[1];
        v56 = v46[1];
        if (v44 >= 0x10 && (v55 == 1 ? (_ZF = v56 == 1) : (_ZF = 0), _ZF))
        {
          v59 = v42 + v50 * v56;
          v68 = (float16x4_t *)v53;
          v69 = (float32x4_t *)v51;
          v70 = v44 & 0xFFFFFFFFFFFFFFF0;
          v60 = v43 + v50 * v55;
          do
          {
            v71 = *(float16x8_t *)v68[-2].i8;
            v72 = vmulq_f32(v69[-1], vcvt_hight_f32_f16(v71));
            v73 = vmulq_f32(*v69, vcvtq_f32_f16(*v68));
            v74 = vmulq_f32(v69[1], vcvt_hight_f32_f16(*(float16x8_t *)v68->i8));
            v69[-2] = vmulq_f32(v69[-2], vcvtq_f32_f16(*(float16x4_t *)v71.i8));
            v69[-1] = v72;
            *v69 = v73;
            v69[1] = v74;
            v69 += 4;
            v68 += 4;
            v70 -= 16;
          }
          while (v70);
          v58 = v44 & 0xFFFFFFFFFFFFFFF0;
          if (v44 == v50)
            goto LABEL_33;
        }
        else
        {
          v58 = 0;
          v59 = v42;
          v60 = v43;
        }
        v61 = v44 - v58;
        v62 = (__int16 *)(v45 + 2 * v59);
        v63 = 2 * v56;
        v64 = 4 * v55;
        v65 = (float *)(v13 + 4 * v60);
        do
        {
          _H0 = *v62;
          __asm { FCVT            S0, H0 }
          *v65 = *v65 * _S0;
          v62 = (__int16 *)((char *)v62 + v63);
          v65 = (float *)((char *)v65 + v64);
          --v61;
        }
        while (v61);
      }
LABEL_33:
      v43 += v48;
      v42 += v49;
      ++v41;
      v51 += v52;
      v53 += v54;
      if (v41 == v40)
        return;
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v113 = operator new(v12);
    bzero(v113, v12 & 0xFFFFFFFFFFFFFFF8);
    v114 = *a2;
    if (v12 >> 3 <= 1)
      v115 = 1;
    else
      v115 = v12 >> 3;
    v116 = a2[5];
    v117 = a2[8];
    v118 = v115 & 0x1FFFFFFFFFFFFFFELL;
    v119 = a1[5];
    while (v115 >= 2)
    {
      v122 = 0;
      v123 = 0;
      v124 = v115 & 0x1FFFFFFFFFFFFFFELL;
      v125 = (_QWORD *)(v119 + 8);
      v126 = v113 + 1;
      do
      {
        v122 += *(v125 - 1) * *(v126 - 1);
        v123 += *v125 * *v126;
        v126 += 2;
        v125 += 2;
        v124 -= 2;
      }
      while (v124);
      v120 = v123 + v122;
      v121 = v115 & 0x1FFFFFFFFFFFFFFELL;
      if (v115 != v118)
        goto LABEL_78;
LABEL_80:
      if (v115 < 2)
      {
        v134 = 0;
        v135 = 0;
LABEL_85:
        v141 = v115 - v135;
        v142 = v135;
        v143 = (uint64_t *)(v116 + 8 * v135);
        v144 = &v113[v142];
        do
        {
          v146 = *v144++;
          v145 = v146;
          v147 = *v143++;
          v134 += v147 * v145;
          --v141;
        }
        while (v141);
        goto LABEL_87;
      }
      v136 = 0;
      v137 = 0;
      v138 = v115 & 0x1FFFFFFFFFFFFFFELL;
      v139 = (_QWORD *)(v116 + 8);
      v140 = v113 + 1;
      do
      {
        v136 += *(v139 - 1) * *(v140 - 1);
        v137 += *v139 * *v140;
        v140 += 2;
        v139 += 2;
        v138 -= 2;
      }
      while (v138);
      v134 = v137 + v136;
      v135 = v115 & 0x1FFFFFFFFFFFFFFELL;
      if (v115 != v118)
        goto LABEL_85;
LABEL_87:
      _H0 = *(_WORD *)(v114 + 2 * (v117 + v134));
      __asm { FCVT            S0, H0 }
      *(float *)(v13 + 4 * v120) = *(float *)(v13 + 4 * v120) * _S0;
      if ((int)(v12 >> 3) >= 1)
      {
        v150 = (v12 >> 3) + 1;
        v151 = v12 >> 3;
        while (1)
        {
          v152 = (v150 - 2);
          v153 = v113[v152] + 1;
          v113[v152] = v153;
          if (v153 < v4[v152])
            break;
          v113[(v150 - 2)] = 0;
          --v151;
          if ((unint64_t)--v150 <= 1)
            goto LABEL_93;
        }
        if (v151 > 0)
          continue;
      }
LABEL_93:
      operator delete(v113);
      return;
    }
    v120 = 0;
    v121 = 0;
LABEL_78:
    v127 = v115 - v121;
    v128 = v121;
    v129 = (uint64_t *)(v119 + 8 * v121);
    v130 = &v113[v128];
    do
    {
      v132 = *v130++;
      v131 = v132;
      v133 = *v129++;
      v120 += v133 * v131;
      --v127;
    }
    while (v127);
    goto LABEL_80;
  }
  v23 = *v4;
  if (!*v4)
    return;
  v24 = a2[8];
  v25 = a1[8];
  v26 = *a2;
  v27 = *(_QWORD *)a1[5];
  v28 = *(_QWORD *)a2[5];
  if (v23 < 0x10)
  {
    v29 = 0;
LABEL_28:
    v30 = v23 - v29;
    v31 = (__int16 *)(v26 + 2 * v24);
    v32 = 2 * v28;
    v33 = 4 * v27;
    v34 = (float *)(v13 + 4 * v25);
    do
    {
      _H0 = *v31;
      __asm { FCVT            S0, H0 }
      *v34 = *v34 * _S0;
      v31 = (__int16 *)((char *)v31 + v32);
      v34 = (float *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  v29 = 0;
  if (v27 != 1)
    goto LABEL_28;
  if (v28 != 1)
    goto LABEL_28;
  v29 = v23 & 0xFFFFFFFFFFFFFFF0;
  v154 = v24 + (v23 & 0xFFFFFFFFFFFFFFF0);
  v155 = v25 + (v23 & 0xFFFFFFFFFFFFFFF0);
  v156 = (float16x4_t *)(v26 + 2 * v24 + 16);
  v157 = (float32x4_t *)(v13 + 4 * v25 + 32);
  v158 = v23 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v159 = *(float16x8_t *)v156[-2].i8;
    v160 = vmulq_f32(v157[-1], vcvt_hight_f32_f16(v159));
    v161 = vmulq_f32(*v157, vcvtq_f32_f16(*v156));
    v162 = vmulq_f32(v157[1], vcvt_hight_f32_f16(*(float16x8_t *)v156->i8));
    v157[-2] = vmulq_f32(v157[-2], vcvtq_f32_f16(*(float16x4_t *)v159.i8));
    v157[-1] = v160;
    *v157 = v161;
    v157[1] = v162;
    v157 += 4;
    v156 += 4;
    v158 -= 16;
  }
  while (v158);
  v24 = v154;
  v25 = v155;
  if (v23 != v29)
    goto LABEL_28;
}

void sub_1911D6F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::operator*<half>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<float>::copy((uint64_t)a1, a3);
    nitro::ndarray<float>::operator*=<half>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<float>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<float>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<half>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<float>::operator*=<half>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911D72D4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911D72E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911D7384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911D7360);
  JUMPOUT(0x1911D7330);
}

void sub_1911D7394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911D7370);
  JUMPOUT(0x1911D7338);
}

void sub_1911D73A4()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911D7348);
  JUMPOUT(0x1911D7340);
}

void nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911D7618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911D77BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911D77D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911D77C8);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1911D7B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1911D7B68(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

_QWORD *nitro::ndarray<unsigned char>::operator*=<float>(_QWORD *a1, _QWORD *a2, double a3, float a4)
{
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v27;
  void *v28;
  void *v29;
  void *__p;
  void *v31;

  v5 = (char *)a1[2];
  v6 = (char *)a1[3];
  v7 = v6 - v5;
  if (v6 == v5 || !*a1)
    return a1;
  if ((unint64_t)(v7 - 8) < 8)
  {
    v8 = 1;
    v9 = (char *)a1[2];
    do
    {
LABEL_8:
      v15 = *(_QWORD *)v9;
      v9 += 8;
      v8 *= v15;
    }
    while (v9 != v6);
    goto LABEL_9;
  }
  v10 = ((unint64_t)(v7 - 8) >> 3) + 1;
  v9 = &v5[8 * (v10 & 0x3FFFFFFFFFFFFFFELL)];
  v11 = v5 + 8;
  v12 = 1;
  v13 = v10 & 0x3FFFFFFFFFFFFFFELL;
  v14 = 1;
  do
  {
    v12 *= *(v11 - 1);
    v14 *= *v11;
    v11 += 2;
    v13 -= 2;
  }
  while (v13);
  v8 = v14 * v12;
  if (v10 != (v10 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v8)
  {
    v16 = v7 >> 3;
    v17 = (_QWORD *)a2[2];
    if (v16 != (uint64_t)(a2[3] - (_QWORD)v17) >> 3)
      goto LABEL_19;
    v18 = v16 <= 1 ? 1 : v16;
    if (*(_QWORD *)v5 != *v17)
      goto LABEL_19;
    v19 = 1;
    do
    {
      v20 = v19;
      if (v18 == v19)
        break;
      v21 = *(_QWORD *)&v5[8 * v19];
      v22 = v17[v19++];
    }
    while (v21 == v22);
    if (v20 >= v16)
    {
      nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(a1, a2, a3, a4);
    }
    else
    {
LABEL_19:
      nitro::ndarray<unsigned char>::operator*<float>(a1, a2, &v27);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v27);
      if (__p)
      {
        v31 = __p;
        operator delete(__p);
      }
      if (v28)
      {
        v29 = v28;
        operator delete(v28);
      }
      v23 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
      if (*((_QWORD *)&v27 + 1))
      {
        v24 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
  }
  return a1;
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(_QWORD *a1, _QWORD *a2, double a3, float a4)
{
  char *v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  float v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;

  v6 = (char *)a1[2];
  v7 = (char *)a1[3];
  v8 = (v7 - v6) >> 3;
  v9 = (_QWORD *)a2[2];
  if (v8 != (uint64_t)(a2[3] - (_QWORD)v9) >> 3)
    goto LABEL_13;
  if (v7 == v6)
    return;
  v10 = v8 <= 1 ? 1 : (v7 - v6) >> 3;
  if (*(_QWORD *)v6 != *v9)
    goto LABEL_13;
  v11 = 1;
  do
  {
    v12 = v11;
    if (v10 == v11)
      break;
    v13 = *(_QWORD *)&v6[8 * v11];
    v14 = v9[v11++];
  }
  while (v13 == v14);
  if (v12 < v8)
LABEL_13:
    nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1})::{lambda(void)#1}::operator()();
  v15 = v7 - v6;
  if (v7 == v6 || !*a1)
    return;
  if ((unint64_t)(v15 - 8) < 8)
  {
    v16 = 1;
    v17 = (char *)a1[2];
    do
    {
LABEL_20:
      v23 = *(_QWORD *)v17;
      v17 += 8;
      v16 *= v23;
    }
    while (v17 != v7);
    goto LABEL_21;
  }
  v18 = ((unint64_t)(v15 - 8) >> 3) + 1;
  v17 = &v6[8 * (v18 & 0x3FFFFFFFFFFFFFFELL)];
  v19 = v6 + 8;
  v20 = 1;
  v21 = v18 & 0x3FFFFFFFFFFFFFFELL;
  v22 = 1;
  do
  {
    v20 *= *(v19 - 1);
    v22 *= *v19;
    v19 += 2;
    v21 -= 2;
  }
  while (v21);
  v16 = v22 * v20;
  if (v18 != (v18 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v16)
    return;
  v24 = v15 >> 3;
  if (v15 >> 3 == 3)
  {
    v37 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
    {
      v38 = 0;
      v39 = a2[8];
      v40 = a1[8];
      do
      {
        if (*((_QWORD *)v6 + 1))
        {
          v41 = 0;
          v42 = v39;
          v43 = v40;
          do
          {
            if (*((_QWORD *)v6 + 2))
            {
              v46 = 0;
              v47 = v42;
              v48 = v43;
              do
              {
                LOBYTE(a4) = *(_BYTE *)(*a1 + v48);
                a4 = (float)LODWORD(a4);
                *(_BYTE *)(*a1 + v48) = (int)(float)(*(float *)(*a2 + 4 * v47) * a4);
                v44 = (_QWORD *)a1[5];
                v48 += v44[2];
                v45 = (_QWORD *)a2[5];
                v47 += v45[2];
                ++v46;
                v6 = (char *)a1[2];
              }
              while (v46 < *((_QWORD *)v6 + 2));
            }
            else
            {
              v44 = (_QWORD *)a1[5];
              v45 = (_QWORD *)a2[5];
            }
            v43 += v44[1];
            v42 += v45[1];
            ++v41;
          }
          while (v41 < *((_QWORD *)v6 + 1));
          v37 = *(_QWORD *)v6;
        }
        else
        {
          v44 = (_QWORD *)a1[5];
          v45 = (_QWORD *)a2[5];
        }
        v40 += *v44;
        v39 += *v45;
        ++v38;
      }
      while (v38 < v37);
    }
  }
  else
  {
    if (v24 != 2)
    {
      if (v24 == 1)
      {
        if (*(_QWORD *)v6)
        {
          v25 = 0;
          v26 = a2[8];
          v27 = a1[8];
          do
          {
            LOBYTE(a4) = *(_BYTE *)(*a1 + v27);
            a4 = (float)LODWORD(a4);
            *(_BYTE *)(*a1 + v27) = (int)(float)(*(float *)(*a2 + 4 * v26) * a4);
            v27 += *(_QWORD *)a1[5];
            v26 += *(_QWORD *)a2[5];
            ++v25;
          }
          while (v25 < *(_QWORD *)a1[2]);
        }
        return;
      }
      if (v15 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v49 = operator new(v15);
      bzero(v49, v15 & 0xFFFFFFFFFFFFFFF8);
      if (v24 <= 1)
        v51 = 1;
      else
        v51 = v15 >> 3;
      v52 = v51 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        v53 = a1[5];
        if (v51 < 2)
          break;
        v56 = 0;
        v57 = 0;
        v58 = (_QWORD *)(v53 + 8);
        v59 = v51 & 0xFFFFFFFFFFFFFFFELL;
        v60 = v49 + 1;
        do
        {
          v56 += *(v58 - 1) * *(v60 - 1);
          v57 += *v58 * *v60;
          v60 += 2;
          v58 += 2;
          v59 -= 2;
        }
        while (v59);
        v54 = v57 + v56;
        v55 = v51 & 0xFFFFFFFFFFFFFFFELL;
        if (v51 != v52)
          goto LABEL_60;
LABEL_62:
        v68 = a2[5];
        if (v51 < 2)
        {
          v69 = 0;
          v70 = 0;
LABEL_67:
          v76 = v51 - v70;
          v77 = v70;
          v78 = (uint64_t *)(v68 + v77 * 8);
          v79 = &v49[v77];
          do
          {
            v81 = *v79++;
            v80 = v81;
            v82 = *v78++;
            v69 += v82 * v80;
            --v76;
          }
          while (v76);
          goto LABEL_69;
        }
        v71 = 0;
        v72 = 0;
        v73 = (_QWORD *)(v68 + 8);
        v74 = v51 & 0xFFFFFFFFFFFFFFFELL;
        v75 = v49 + 1;
        do
        {
          v71 += *(v73 - 1) * *(v75 - 1);
          v72 += *v73 * *v75;
          v75 += 2;
          v73 += 2;
          v74 -= 2;
        }
        while (v74);
        v69 = v72 + v71;
        v70 = v51 & 0xFFFFFFFFFFFFFFFELL;
        if (v51 != v52)
          goto LABEL_67;
LABEL_69:
        LOBYTE(v50) = *(_BYTE *)(*a1 + v54);
        v50 = (float)LODWORD(v50);
        *(_BYTE *)(*a1 + v54) = (int)(float)(*(float *)(*a2 + 4 * (a2[8] + v69)) * v50);
        if ((int)((unint64_t)v15 >> 3) >= 1)
        {
          v83 = a1[2];
          v84 = ((unint64_t)v15 >> 3) + 1;
          v85 = (unint64_t)v15 >> 3;
          while (1)
          {
            v86 = (v84 - 2);
            v87 = v49[v86] + 1;
            v49[v86] = v87;
            if (v87 < *(_QWORD *)(v83 + v86 * 8))
              break;
            v49[(v84 - 2)] = 0;
            LODWORD(v85) = v85 - 1;
            if ((unint64_t)--v84 <= 1)
              goto LABEL_75;
          }
          if ((int)v85 > 0)
            continue;
        }
LABEL_75:
        operator delete(v49);
        return;
      }
      v54 = 0;
      v55 = 0;
LABEL_60:
      v61 = v51 - v55;
      v62 = v55;
      v63 = (uint64_t *)(v53 + v62 * 8);
      v64 = &v49[v62];
      do
      {
        v66 = *v64++;
        v65 = v66;
        v67 = *v63++;
        v54 += v67 * v65;
        --v61;
      }
      while (v61);
      goto LABEL_62;
    }
    v28 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
    {
      v29 = 0;
      v30 = a2[8];
      v31 = a1[8];
      do
      {
        if (*((_QWORD *)v6 + 1))
        {
          v34 = 0;
          v35 = v30;
          v36 = v31;
          do
          {
            LOBYTE(a4) = *(_BYTE *)(*a1 + v36);
            a4 = (float)LODWORD(a4);
            *(_BYTE *)(*a1 + v36) = (int)(float)(*(float *)(*a2 + 4 * v35) * a4);
            v32 = (_QWORD *)a1[5];
            v36 += v32[1];
            v33 = (_QWORD *)a2[5];
            v35 += v33[1];
            ++v34;
            v6 = (char *)a1[2];
          }
          while (v34 < *((_QWORD *)v6 + 1));
          v28 = *(_QWORD *)v6;
        }
        else
        {
          v32 = (_QWORD *)a1[5];
          v33 = (_QWORD *)a2[5];
        }
        v31 += *v32;
        v30 += *v33;
        ++v29;
      }
      while (v29 < v28);
    }
  }
}

void sub_1911D8228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>::operator*<float>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<unsigned char>::copy((uint64_t)a1, a3);
    nitro::ndarray<unsigned char>::operator*=<float>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<unsigned char>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<unsigned char>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<float>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<unsigned char>::operator*=<float>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911D8588(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911D859C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911D8638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911D8614);
  JUMPOUT(0x1911D85E4);
}

void sub_1911D8648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911D8624);
  JUMPOUT(0x1911D85ECLL);
}

void sub_1911D8658()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911D85FCLL);
  JUMPOUT(0x1911D85F4);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911D88CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911D8A70(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911D8A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911D8A7CLL);
}

uint64_t *nitro::ndarray<int>::operator*=<float>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;

  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  v5 = v4 - v3;
  if (v4 == v3 || !*a1)
    return a1;
  if ((unint64_t)(v5 - 8) < 8)
  {
    v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6)
  {
    v14 = v5 >> 3;
    v15 = (_QWORD *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3)
      goto LABEL_19;
    v16 = v14 <= 1 ? 1 : v14;
    if (*(_QWORD *)v3 != *v15)
      goto LABEL_19;
    v17 = 1;
    do
    {
      v18 = v17;
      if (v16 == v17)
        break;
      v19 = *(_QWORD *)&v3[8 * v17];
      v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 >= v14)
    {
      nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(a1, a2);
    }
    else
    {
LABEL_19:
      nitro::ndarray<int>::operator*<float>(a1, a2, &v25);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v25);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  return a1;
}

void nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  float *v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  float32x4_t *v61;
  int32x4_t *v62;
  unint64_t v63;
  int32x4_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  float32x4_t *v78;
  uint64_t v79;
  int32x4_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  float *v90;
  uint64_t v91;
  uint64_t v92;
  int *v93;
  float32x4_t *v94;
  int32x4_t *v95;
  unint64_t v96;
  int32x4_t v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  float32x4_t *v139;
  int32x4_t *v140;
  unint64_t v141;
  int32x4_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return;
  v13 = *a1;
  if (!*a1)
    return;
  if (v12 - 8 < 8)
  {
    v14 = 1;
    v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v16 = ((v12 - 8) >> 3) + 1;
  v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  v17 = v4 + 1;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v148 = *v4;
    if (!*v4)
      return;
    v65 = 0;
    v66 = a2[8];
    v67 = a1[8];
    v68 = v4[1];
    v69 = (uint64_t *)a1[5];
    v143 = (uint64_t *)a2[5];
    v70 = v13 + 4 * v67 + 16;
    v146 = *v143;
    v147 = *v69;
    v145 = 4 * *v69;
    v71 = 4 * v66 + 16;
    v144 = 4 * *v143;
    while (!v68)
    {
LABEL_50:
      v67 += v147;
      v66 += v146;
      ++v65;
      v70 += v145;
      v71 += v144;
      if (v65 == v148)
        return;
    }
    v72 = 0;
    v73 = v4[2];
    v74 = *a2;
    v75 = a2[5];
    v76 = v69[1];
    v77 = v73 & 0xFFFFFFFFFFFFFFF8;
    v78 = (float32x4_t *)(*a2 + v71);
    v79 = v143[1];
    v80 = (int32x4_t *)v70;
    v81 = v66;
    v82 = v67;
    while (1)
    {
      if (v73)
      {
        v83 = v69[2];
        v84 = *(_QWORD *)(v75 + 16);
        if (v73 >= 8 && (v83 == 1 ? (v85 = v84 == 1) : (v85 = 0), v85))
        {
          v87 = v81 + v77 * v84;
          v94 = v78;
          v95 = v80;
          v96 = v73 & 0xFFFFFFFFFFFFFFF8;
          v88 = v82 + v77 * v83;
          do
          {
            v97 = vcvtq_s32_f32(vmulq_f32(*v94, vcvtq_f32_s32(*v95)));
            v95[-1] = vcvtq_s32_f32(vmulq_f32(v94[-1], vcvtq_f32_s32(v95[-1])));
            *v95 = v97;
            v95 += 2;
            v94 += 2;
            v96 -= 8;
          }
          while (v96);
          v86 = v73 & 0xFFFFFFFFFFFFFFF8;
          if (v73 == v77)
            goto LABEL_53;
        }
        else
        {
          v86 = 0;
          v87 = v81;
          v88 = v82;
        }
        v89 = v73 - v86;
        v90 = (float *)(v74 + 4 * v87);
        v91 = 4 * v84;
        v92 = 4 * v83;
        v93 = (int *)(v13 + 4 * v88);
        do
        {
          *v93 = (int)(float)(*v90 * (float)*v93);
          v90 = (float *)((char *)v90 + v91);
          v93 = (int *)((char *)v93 + v92);
          --v89;
        }
        while (v89);
      }
LABEL_53:
      v82 += v76;
      v81 += v79;
      ++v72;
      v80 = (int32x4_t *)((char *)v80 + 4 * v76);
      v78 = (float32x4_t *)((char *)v78 + 4 * v79);
      if (v72 == v68)
        goto LABEL_50;
    }
  }
  if (v22 == 2)
  {
    v35 = *v4;
    if (!*v4)
      return;
    v36 = 0;
    v37 = a2[8];
    v38 = a1[8];
    v39 = v4[1];
    v40 = *a2;
    v41 = (uint64_t *)a2[5];
    v42 = (uint64_t *)a1[5];
    v43 = *v42;
    v44 = *v41;
    v45 = v39 & 0xFFFFFFFFFFFFFFF8;
    v46 = v13 + 4 * v38 + 16;
    v47 = 4 * *v42;
    v48 = *a2 + 4 * v37 + 16;
    v49 = 4 * *v41;
    while (1)
    {
      if (v39)
      {
        v50 = v42[1];
        v51 = v41[1];
        if (v39 >= 8 && (v50 == 1 ? (v52 = v51 == 1) : (v52 = 0), v52))
        {
          v54 = v37 + v45 * v51;
          v61 = (float32x4_t *)v48;
          v62 = (int32x4_t *)v46;
          v63 = v39 & 0xFFFFFFFFFFFFFFF8;
          v55 = v38 + v45 * v50;
          do
          {
            v64 = vcvtq_s32_f32(vmulq_f32(*v61, vcvtq_f32_s32(*v62)));
            v62[-1] = vcvtq_s32_f32(vmulq_f32(v61[-1], vcvtq_f32_s32(v62[-1])));
            *v62 = v64;
            v62 += 2;
            v61 += 2;
            v63 -= 8;
          }
          while (v63);
          v53 = v39 & 0xFFFFFFFFFFFFFFF8;
          if (v39 == v45)
            goto LABEL_33;
        }
        else
        {
          v53 = 0;
          v54 = v37;
          v55 = v38;
        }
        v56 = v39 - v53;
        v57 = (float *)(v40 + 4 * v54);
        v58 = 4 * v51;
        v59 = 4 * v50;
        v60 = (int *)(v13 + 4 * v55);
        do
        {
          *v60 = (int)(float)(*v57 * (float)*v60);
          v57 = (float *)((char *)v57 + v58);
          v60 = (int *)((char *)v60 + v59);
          --v56;
        }
        while (v56);
      }
LABEL_33:
      v38 += v43;
      v37 += v44;
      ++v36;
      v46 += v47;
      v48 += v49;
      if (v36 == v35)
        return;
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v98 = operator new(v12);
    bzero(v98, v12 & 0xFFFFFFFFFFFFFFF8);
    v99 = *a2;
    if (v12 >> 3 <= 1)
      v100 = 1;
    else
      v100 = v12 >> 3;
    v101 = a2[5];
    v102 = a2[8];
    v103 = v100 & 0x1FFFFFFFFFFFFFFELL;
    v104 = a1[5];
    while (v100 >= 2)
    {
      v107 = 0;
      v108 = 0;
      v109 = v100 & 0x1FFFFFFFFFFFFFFELL;
      v110 = (_QWORD *)(v104 + 8);
      v111 = v98 + 1;
      do
      {
        v107 += *(v110 - 1) * *(v111 - 1);
        v108 += *v110 * *v111;
        v111 += 2;
        v110 += 2;
        v109 -= 2;
      }
      while (v109);
      v105 = v108 + v107;
      v106 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103)
        goto LABEL_78;
LABEL_80:
      if (v100 < 2)
      {
        v119 = 0;
        v120 = 0;
LABEL_85:
        v126 = v100 - v120;
        v127 = v120;
        v128 = (uint64_t *)(v101 + 8 * v120);
        v129 = &v98[v127];
        do
        {
          v131 = *v129++;
          v130 = v131;
          v132 = *v128++;
          v119 += v132 * v130;
          --v126;
        }
        while (v126);
        goto LABEL_87;
      }
      v121 = 0;
      v122 = 0;
      v123 = v100 & 0x1FFFFFFFFFFFFFFELL;
      v124 = (_QWORD *)(v101 + 8);
      v125 = v98 + 1;
      do
      {
        v121 += *(v124 - 1) * *(v125 - 1);
        v122 += *v124 * *v125;
        v125 += 2;
        v124 += 2;
        v123 -= 2;
      }
      while (v123);
      v119 = v122 + v121;
      v120 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103)
        goto LABEL_85;
LABEL_87:
      *(_DWORD *)(v13 + 4 * v105) = (int)(float)(*(float *)(v99 + 4 * (v102 + v119)) * (float)*(int *)(v13 + 4 * v105));
      if ((int)(v12 >> 3) >= 1)
      {
        v133 = (v12 >> 3) + 1;
        v134 = v12 >> 3;
        while (1)
        {
          v135 = (v133 - 2);
          v136 = v98[v135] + 1;
          v98[v135] = v136;
          if (v136 < v4[v135])
            break;
          v98[(v133 - 2)] = 0;
          --v134;
          if ((unint64_t)--v133 <= 1)
            goto LABEL_93;
        }
        if (v134 > 0)
          continue;
      }
LABEL_93:
      operator delete(v98);
      return;
    }
    v105 = 0;
    v106 = 0;
LABEL_78:
    v112 = v100 - v106;
    v113 = v106;
    v114 = (uint64_t *)(v104 + 8 * v106);
    v115 = &v98[v113];
    do
    {
      v117 = *v115++;
      v116 = v117;
      v118 = *v114++;
      v105 += v118 * v116;
      --v112;
    }
    while (v112);
    goto LABEL_80;
  }
  v23 = *v4;
  if (!*v4)
    return;
  v24 = a2[8];
  v25 = a1[8];
  v26 = *a2;
  v27 = *(_QWORD *)a1[5];
  v28 = *(_QWORD *)a2[5];
  if (v23 < 8)
  {
    v29 = 0;
LABEL_28:
    v30 = v23 - v29;
    v31 = (float *)(v26 + 4 * v24);
    v32 = 4 * v28;
    v33 = 4 * v27;
    v34 = (int *)(v13 + 4 * v25);
    do
    {
      *v34 = (int)(float)(*v31 * (float)*v34);
      v31 = (float *)((char *)v31 + v32);
      v34 = (int *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  v29 = 0;
  if (v27 != 1)
    goto LABEL_28;
  if (v28 != 1)
    goto LABEL_28;
  v29 = v23 & 0xFFFFFFFFFFFFFFF8;
  v137 = v24 + (v23 & 0xFFFFFFFFFFFFFFF8);
  v138 = v25 + (v23 & 0xFFFFFFFFFFFFFFF8);
  v139 = (float32x4_t *)(v26 + 4 * v24 + 16);
  v140 = (int32x4_t *)(v13 + 4 * v25 + 16);
  v141 = v23 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v142 = vcvtq_s32_f32(vmulq_f32(*v139, vcvtq_f32_s32(*v140)));
    v140[-1] = vcvtq_s32_f32(vmulq_f32(v139[-1], vcvtq_f32_s32(v140[-1])));
    *v140 = v142;
    v139 += 2;
    v140 += 2;
    v141 -= 8;
  }
  while (v141);
  v24 = v137;
  v25 = v138;
  if (v23 != v29)
    goto LABEL_28;
}

void sub_1911D9330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::operator*<float>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<int>::copy((uint64_t)a1, a3);
    nitro::ndarray<int>::operator*=<float>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<int>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<int>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<float>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<int>::operator*=<float>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911D9690(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911D96A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911D9740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911D971CLL);
  JUMPOUT(0x1911D96ECLL);
}

void sub_1911D9750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911D972CLL);
  JUMPOUT(0x1911D96F4);
}

void sub_1911D9760()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911D9704);
  JUMPOUT(0x1911D96FCLL);
}

void nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911D99D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911D9B78(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911D9B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911D9B84);
}

uint64_t *nitro::ndarray<half>::operator*=<float>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;

  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  v5 = v4 - v3;
  if (v4 == v3 || !*a1)
    return a1;
  if ((unint64_t)(v5 - 8) < 8)
  {
    v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6)
  {
    v14 = v5 >> 3;
    v15 = (_QWORD *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3)
      goto LABEL_19;
    v16 = v14 <= 1 ? 1 : v14;
    if (*(_QWORD *)v3 != *v15)
      goto LABEL_19;
    v17 = 1;
    do
    {
      v18 = v17;
      if (v16 == v17)
        break;
      v19 = *(_QWORD *)&v3[8 * v17];
      v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 >= v14)
    {
      nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(a1, a2);
    }
    else
    {
LABEL_19:
      nitro::ndarray<half>::operator*<float>(a1, a2, &v25);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v25);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  return a1;
}

void nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;
  __int16 *v34;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  float *v63;
  uint64_t v64;
  uint64_t v65;
  __int16 *v66;
  float32x4_t *v70;
  float16x4_t *v71;
  unint64_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float16x8_t v77;
  float16x8_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  float32x4_t *v92;
  uint64_t v93;
  float16x4_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  float *v104;
  uint64_t v105;
  uint64_t v106;
  __int16 *v107;
  float32x4_t *v111;
  float16x4_t *v112;
  unint64_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float16x8_t v118;
  float16x8_t v119;
  _QWORD *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v159;
  int v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  float32x4_t *v165;
  float16x4_t *v166;
  unint64_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float16x8_t v172;
  float16x8_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return;
  v13 = *a1;
  if (!*a1)
    return;
  if (v12 - 8 < 8)
  {
    v14 = 1;
    v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v16 = ((v12 - 8) >> 3) + 1;
  v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  v17 = v4 + 1;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v179 = *v4;
    if (!*v4)
      return;
    v79 = 0;
    v80 = a2[8];
    v81 = a1[8];
    v82 = v4[1];
    v83 = (uint64_t *)a1[5];
    v174 = (uint64_t *)a2[5];
    v84 = v13 + 2 * v81 + 16;
    v177 = *v174;
    v178 = *v83;
    v176 = 2 * *v83;
    v85 = 4 * v80 + 32;
    v175 = 4 * *v174;
    while (!v82)
    {
LABEL_50:
      v81 += v178;
      v80 += v177;
      ++v79;
      v84 += v176;
      v85 += v175;
      if (v79 == v179)
        return;
    }
    v86 = 0;
    v87 = v4[2];
    v88 = *a2;
    v89 = a2[5];
    v90 = v83[1];
    v91 = v87 & 0xFFFFFFFFFFFFFFF0;
    v92 = (float32x4_t *)(*a2 + v85);
    v93 = v174[1];
    v94 = (float16x4_t *)v84;
    v95 = v80;
    v96 = v81;
    while (1)
    {
      if (v87)
      {
        v97 = v83[2];
        v98 = *(_QWORD *)(v89 + 16);
        if (v87 >= 0x10 && (v97 == 1 ? (v99 = v98 == 1) : (v99 = 0), v99))
        {
          v101 = v95 + v91 * v98;
          v111 = v92;
          v112 = v94;
          v113 = v87 & 0xFFFFFFFFFFFFFFF0;
          v102 = v96 + v91 * v97;
          do
          {
            v114 = v111[-2];
            v115 = v111[-1];
            v116 = *v111;
            v117 = v111[1];
            v111 += 4;
            v118 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(v114, vcvtq_f32_f16(v112[-2]))), vmulq_f32(v115, vcvt_hight_f32_f16(*(float16x8_t *)v112[-2].i8)));
            v119 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(v116, vcvtq_f32_f16(*v112))), vmulq_f32(v117, vcvt_hight_f32_f16(*(float16x8_t *)v112->i8)));
            *(float16x8_t *)v112[-2].i8 = v118;
            *(float16x8_t *)v112->i8 = v119;
            v112 += 4;
            v113 -= 16;
          }
          while (v113);
          v100 = v87 & 0xFFFFFFFFFFFFFFF0;
          if (v87 == v91)
            goto LABEL_53;
        }
        else
        {
          v100 = 0;
          v101 = v95;
          v102 = v96;
        }
        v103 = v87 - v100;
        v104 = (float *)(v88 + 4 * v101);
        v105 = 4 * v98;
        v106 = 2 * v97;
        v107 = (__int16 *)(v13 + 2 * v102);
        do
        {
          _H1 = *v107;
          __asm { FCVT            S1, H1 }
          _S0 = *v104 * _S1;
          __asm { FCVT            H0, S0 }
          *v107 = LOWORD(_S0);
          v104 = (float *)((char *)v104 + v105);
          v107 = (__int16 *)((char *)v107 + v106);
          --v103;
        }
        while (v103);
      }
LABEL_53:
      v96 += v90;
      v95 += v93;
      ++v86;
      v94 = (float16x4_t *)((char *)v94 + 2 * v90);
      v92 = (float32x4_t *)((char *)v92 + 4 * v93);
      if (v86 == v82)
        goto LABEL_50;
    }
  }
  if (v22 == 2)
  {
    v41 = *v4;
    if (!*v4)
      return;
    v42 = 0;
    v43 = a2[8];
    v44 = a1[8];
    v45 = v4[1];
    v46 = *a2;
    v47 = (uint64_t *)a2[5];
    v48 = (uint64_t *)a1[5];
    v49 = *v48;
    v50 = *v47;
    v51 = v45 & 0xFFFFFFFFFFFFFFF0;
    v52 = v13 + 2 * v44 + 16;
    v53 = 2 * *v48;
    v54 = *a2 + 4 * v43 + 32;
    v55 = 4 * *v47;
    while (1)
    {
      if (v45)
      {
        v56 = v48[1];
        v57 = v47[1];
        if (v45 >= 0x10 && (v56 == 1 ? (_ZF = v57 == 1) : (_ZF = 0), _ZF))
        {
          v60 = v43 + v51 * v57;
          v70 = (float32x4_t *)v54;
          v71 = (float16x4_t *)v52;
          v72 = v45 & 0xFFFFFFFFFFFFFFF0;
          v61 = v44 + v51 * v56;
          do
          {
            v73 = v70[-2];
            v74 = v70[-1];
            v75 = *v70;
            v76 = v70[1];
            v70 += 4;
            v77 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(v73, vcvtq_f32_f16(v71[-2]))), vmulq_f32(v74, vcvt_hight_f32_f16(*(float16x8_t *)v71[-2].i8)));
            v78 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(v75, vcvtq_f32_f16(*v71))), vmulq_f32(v76, vcvt_hight_f32_f16(*(float16x8_t *)v71->i8)));
            *(float16x8_t *)v71[-2].i8 = v77;
            *(float16x8_t *)v71->i8 = v78;
            v71 += 4;
            v72 -= 16;
          }
          while (v72);
          v59 = v45 & 0xFFFFFFFFFFFFFFF0;
          if (v45 == v51)
            goto LABEL_33;
        }
        else
        {
          v59 = 0;
          v60 = v43;
          v61 = v44;
        }
        v62 = v45 - v59;
        v63 = (float *)(v46 + 4 * v60);
        v64 = 4 * v57;
        v65 = 2 * v56;
        v66 = (__int16 *)(v13 + 2 * v61);
        do
        {
          _H1 = *v66;
          __asm { FCVT            S1, H1 }
          _S0 = *v63 * _S1;
          __asm { FCVT            H0, S0 }
          *v66 = LOWORD(_S0);
          v63 = (float *)((char *)v63 + v64);
          v66 = (__int16 *)((char *)v66 + v65);
          --v62;
        }
        while (v62);
      }
LABEL_33:
      v44 += v49;
      v43 += v50;
      ++v42;
      v52 += v53;
      v54 += v55;
      if (v42 == v41)
        return;
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v120 = operator new(v12);
    bzero(v120, v12 & 0xFFFFFFFFFFFFFFF8);
    v121 = *a2;
    if (v12 >> 3 <= 1)
      v122 = 1;
    else
      v122 = v12 >> 3;
    v123 = a2[5];
    v124 = a2[8];
    v125 = v122 & 0x1FFFFFFFFFFFFFFELL;
    v126 = a1[5];
    while (v122 >= 2)
    {
      v129 = 0;
      v130 = 0;
      v131 = v122 & 0x1FFFFFFFFFFFFFFELL;
      v132 = (_QWORD *)(v126 + 8);
      v133 = v120 + 1;
      do
      {
        v129 += *(v132 - 1) * *(v133 - 1);
        v130 += *v132 * *v133;
        v133 += 2;
        v132 += 2;
        v131 -= 2;
      }
      while (v131);
      v127 = v130 + v129;
      v128 = v122 & 0x1FFFFFFFFFFFFFFELL;
      if (v122 != v125)
        goto LABEL_78;
LABEL_80:
      if (v122 < 2)
      {
        v141 = 0;
        v142 = 0;
LABEL_85:
        v148 = v122 - v142;
        v149 = v142;
        v150 = (uint64_t *)(v123 + 8 * v142);
        v151 = &v120[v149];
        do
        {
          v153 = *v151++;
          v152 = v153;
          v154 = *v150++;
          v141 += v154 * v152;
          --v148;
        }
        while (v148);
        goto LABEL_87;
      }
      v143 = 0;
      v144 = 0;
      v145 = v122 & 0x1FFFFFFFFFFFFFFELL;
      v146 = (_QWORD *)(v123 + 8);
      v147 = v120 + 1;
      do
      {
        v143 += *(v146 - 1) * *(v147 - 1);
        v144 += *v146 * *v147;
        v147 += 2;
        v146 += 2;
        v145 -= 2;
      }
      while (v145);
      v141 = v144 + v143;
      v142 = v122 & 0x1FFFFFFFFFFFFFFELL;
      if (v122 != v125)
        goto LABEL_85;
LABEL_87:
      v155 = 2 * v127;
      _H1 = *(_WORD *)(v13 + v155);
      __asm { FCVT            S1, H1 }
      _S0 = *(float *)(v121 + 4 * (v124 + v141)) * _S1;
      __asm { FCVT            H0, S0 }
      *(_WORD *)(v13 + v155) = LOWORD(_S0);
      if ((int)(v12 >> 3) >= 1)
      {
        v159 = (v12 >> 3) + 1;
        v160 = v12 >> 3;
        while (1)
        {
          v161 = (v159 - 2);
          v162 = v120[v161] + 1;
          v120[v161] = v162;
          if (v162 < v4[v161])
            break;
          v120[(v159 - 2)] = 0;
          --v160;
          if ((unint64_t)--v159 <= 1)
            goto LABEL_93;
        }
        if (v160 > 0)
          continue;
      }
LABEL_93:
      operator delete(v120);
      return;
    }
    v127 = 0;
    v128 = 0;
LABEL_78:
    v134 = v122 - v128;
    v135 = v128;
    v136 = (uint64_t *)(v126 + 8 * v128);
    v137 = &v120[v135];
    do
    {
      v139 = *v137++;
      v138 = v139;
      v140 = *v136++;
      v127 += v140 * v138;
      --v134;
    }
    while (v134);
    goto LABEL_80;
  }
  v23 = *v4;
  if (!*v4)
    return;
  v24 = a2[8];
  v25 = a1[8];
  v26 = *a2;
  v27 = *(_QWORD *)a1[5];
  v28 = *(_QWORD *)a2[5];
  if (v23 < 0x10)
  {
    v29 = 0;
LABEL_28:
    v30 = v23 - v29;
    v31 = (float *)(v26 + 4 * v24);
    v32 = 4 * v28;
    v33 = 2 * v27;
    v34 = (__int16 *)(v13 + 2 * v25);
    do
    {
      _H1 = *v34;
      __asm { FCVT            S1, H1 }
      _S0 = *v31 * _S1;
      __asm { FCVT            H0, S0 }
      *v34 = LOWORD(_S0);
      v31 = (float *)((char *)v31 + v32);
      v34 = (__int16 *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  v29 = 0;
  if (v27 != 1)
    goto LABEL_28;
  if (v28 != 1)
    goto LABEL_28;
  v29 = v23 & 0xFFFFFFFFFFFFFFF0;
  v163 = v24 + (v23 & 0xFFFFFFFFFFFFFFF0);
  v164 = v25 + (v23 & 0xFFFFFFFFFFFFFFF0);
  v165 = (float32x4_t *)(v26 + 4 * v24 + 32);
  v166 = (float16x4_t *)(v13 + 2 * v25 + 16);
  v167 = v23 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v168 = v165[-2];
    v169 = v165[-1];
    v170 = *v165;
    v171 = v165[1];
    v165 += 4;
    v172 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(v168, vcvtq_f32_f16(v166[-2]))), vmulq_f32(v169, vcvt_hight_f32_f16(*(float16x8_t *)v166[-2].i8)));
    v173 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(v170, vcvtq_f32_f16(*v166))), vmulq_f32(v171, vcvt_hight_f32_f16(*(float16x8_t *)v166->i8)));
    *(float16x8_t *)v166[-2].i8 = v172;
    *(float16x8_t *)v166->i8 = v173;
    v166 += 4;
    v167 -= 16;
  }
  while (v167);
  v24 = v163;
  v25 = v164;
  if (v23 != v29)
    goto LABEL_28;
}

void sub_1911DA480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::operator*<float>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<half>::copy((uint64_t)a1, a3);
    nitro::ndarray<half>::operator*=<float>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<half>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<half>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<float>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<half>::operator*=<float>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911DA7E0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911DA7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911DA890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911DA86CLL);
  JUMPOUT(0x1911DA83CLL);
}

void sub_1911DA8A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911DA87CLL);
  JUMPOUT(0x1911DA844);
}

void sub_1911DA8B0()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911DA854);
  JUMPOUT(0x1911DA84CLL);
}

void nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911DAB24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911DACC8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911DACDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911DACD4);
}

uint64_t *nitro::ndarray<float>::operator*=<float>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;

  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  v5 = v4 - v3;
  if (v4 == v3 || !*a1)
    return a1;
  if ((unint64_t)(v5 - 8) < 8)
  {
    v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6)
  {
    v14 = v5 >> 3;
    v15 = (_QWORD *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3)
      goto LABEL_19;
    v16 = v14 <= 1 ? 1 : v14;
    if (*(_QWORD *)v3 != *v15)
      goto LABEL_19;
    v17 = 1;
    do
    {
      v18 = v17;
      if (v16 == v17)
        break;
      v19 = *(_QWORD *)&v3[8 * v17];
      v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 >= v14)
    {
      nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(a1, a2);
    }
    else
    {
LABEL_19:
      nitro::ndarray<float>::operator*<float>(a1, a2, &v25);
      nitro::ndarray<unsigned char>::operator=((uint64_t)a1, &v25);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  return a1;
}

float32x4_t nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  float *v32;
  uint64_t v33;
  uint64_t v34;
  float *v35;
  float32x4_t result;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  float *v62;
  uint64_t v63;
  uint64_t v64;
  float *v65;
  float32x4_t *v67;
  float32x4_t *v68;
  unint64_t v69;
  float32x4_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  float32x4_t *v88;
  float32x4_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  float *v98;
  uint64_t v99;
  uint64_t v100;
  float *v101;
  float32x4_t *v103;
  float32x4_t *v104;
  unint64_t v105;
  float32x4_t v106;
  _QWORD *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  unint64_t v145;
  float32x4_t *v146;
  float32x4_t *v147;
  unint64_t v148;
  float32x4_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v159;
  uint64_t v160;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return result;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return result;
  v160 = *a1;
  if (!*a1)
    return result;
  if (v12 - 8 < 8)
  {
    v13 = 1;
    v14 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v20 = *v14++;
      v13 *= v20;
    }
    while (v14 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v15 = ((v12 - 8) >> 3) + 1;
  v14 = &v4[v15 & 0x3FFFFFFFFFFFFFFELL];
  v16 = v4 + 1;
  v17 = 1;
  v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
  v19 = 1;
  do
  {
    v17 *= *(v16 - 1);
    v19 *= *v16;
    v16 += 2;
    v18 -= 2;
  }
  while (v18);
  v13 = v19 * v17;
  if (v15 != (v15 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v13)
    return result;
  v21 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v155 = *v4;
    if (!*v4)
      return result;
    v71 = 0;
    v72 = a2[8];
    v73 = a1[8];
    v74 = v4[1];
    v75 = (uint64_t *)a1[5];
    v152 = (uint64_t *)a2[5];
    v153 = *v152;
    v154 = *v75;
    v157 = 4 * *v75;
    v156 = 4 * *v152;
    v150 = 4 * v72;
    v151 = 4 * v73;
    v76 = 4 * v73 + v160 + 16;
    v77 = 4 * v72 + 16;
    while (!v74)
    {
LABEL_55:
      v73 += v154;
      v72 += v153;
      ++v71;
      v76 += v157;
      v77 += v156;
      if (v71 == v155)
        return result;
    }
    v78 = 0;
    v79 = v150 + v156 * v71;
    v80 = v4[2];
    v81 = *a2;
    v82 = v75[1];
    v83 = v152[1];
    v84 = 4 * v82;
    v159 = v151 + v157 * v71;
    v85 = 4 * v83;
    v86 = v80 & 0xFFFFFFFFFFFFFFF8;
    v87 = a2[5];
    v88 = (float32x4_t *)(*a2 + v77);
    v89 = (float32x4_t *)v76;
    v90 = v72;
    v91 = v73;
    while (!v80)
    {
LABEL_58:
      v91 += v82;
      v90 += v83;
      ++v78;
      v89 = (float32x4_t *)((char *)v89 + v84);
      v88 = (float32x4_t *)((char *)v88 + v85);
      if (v78 == v74)
        goto LABEL_55;
    }
    v92 = v75[2];
    v93 = *(_QWORD *)(v87 + 16);
    if (v80 >= 8)
    {
      v94 = 0;
      if (v92 != 1)
        goto LABEL_62;
      v95 = v90;
      v96 = v91;
      if (v93 != 1)
      {
LABEL_63:
        v97 = v80 - v94;
        v98 = (float *)(v81 + 4 * v95);
        v99 = 4 * v93;
        v100 = 4 * v92;
        v101 = (float *)(v160 + 4 * v96);
        do
        {
          result.f32[0] = *v98 * *v101;
          *v101 = result.f32[0];
          v98 = (float *)((char *)v98 + v99);
          v101 = (float *)((char *)v101 + v100);
          --v97;
        }
        while (v97);
        goto LABEL_58;
      }
      if (v160 + v159 + v84 * v78 >= v81 + v79 + 4 * v80 + v85 * v78
        || v81 + v79 + v85 * v78 >= v160 + v159 + 4 * v80 + v84 * v78)
      {
        v95 = v90 + v86;
        v103 = v88;
        v104 = v89;
        v105 = v80 & 0xFFFFFFFFFFFFFFF8;
        v96 = v91 + v86;
        do
        {
          result = vmulq_f32(v103[-1], v104[-1]);
          v106 = vmulq_f32(*v103, *v104);
          v104[-1] = result;
          *v104 = v106;
          v104 += 2;
          v103 += 2;
          v105 -= 8;
        }
        while (v105);
        v94 = v80 & 0xFFFFFFFFFFFFFFF8;
        if (v80 == v86)
          goto LABEL_58;
        goto LABEL_63;
      }
    }
    v94 = 0;
LABEL_62:
    v95 = v90;
    v96 = v91;
    goto LABEL_63;
  }
  if (v21 == 2)
  {
    v37 = *v4;
    if (!*v4)
      return result;
    v38 = 0;
    v39 = a2[8];
    v40 = a1[8];
    v41 = v4[1];
    v42 = (uint64_t *)a2[5];
    v43 = (uint64_t *)a1[5];
    v44 = *v43;
    v45 = *v42;
    v46 = 4 * *v43;
    v47 = 4 * *v42;
    v48 = v41 & 0xFFFFFFFFFFFFFFF8;
    v49 = *a2;
    v50 = 4 * v40 + v160 + 16;
    v51 = 4 * v39 + *a2 + 16;
    v52 = v160 + 4 * v40;
    v53 = v160 + 4 * v40 + 4 * v41;
    v54 = *a2 + 4 * v39;
    v55 = *a2 + 4 * v39 + 4 * v41;
    while (!v41)
    {
LABEL_34:
      v40 += v44;
      v39 += v45;
      ++v38;
      v50 += v46;
      v51 += v47;
      if (v38 == v37)
        return result;
    }
    v56 = v43[1];
    v57 = v42[1];
    if (v41 >= 8)
    {
      v58 = 0;
      if (v56 != 1)
        goto LABEL_38;
      v59 = v39;
      v60 = v40;
      if (v57 != 1)
      {
LABEL_39:
        v61 = v41 - v58;
        v62 = (float *)(v49 + 4 * v59);
        v63 = 4 * v57;
        v64 = 4 * v56;
        v65 = (float *)(v160 + 4 * v60);
        do
        {
          result.f32[0] = *v62 * *v65;
          *v65 = result.f32[0];
          v62 = (float *)((char *)v62 + v63);
          v65 = (float *)((char *)v65 + v64);
          --v61;
        }
        while (v61);
        goto LABEL_34;
      }
      if (v52 + v46 * v38 >= (unint64_t)(v55 + v47 * v38)
        || v54 + v47 * v38 >= (unint64_t)(v53 + v46 * v38))
      {
        v59 = v39 + v48;
        v67 = (float32x4_t *)v51;
        v68 = (float32x4_t *)v50;
        v69 = v41 & 0xFFFFFFFFFFFFFFF8;
        v60 = v40 + v48;
        do
        {
          result = vmulq_f32(v67[-1], v68[-1]);
          v70 = vmulq_f32(*v67, *v68);
          v68[-1] = result;
          *v68 = v70;
          v68 += 2;
          v67 += 2;
          v69 -= 8;
        }
        while (v69);
        v58 = v41 & 0xFFFFFFFFFFFFFFF8;
        if (v41 == v48)
          goto LABEL_34;
        goto LABEL_39;
      }
    }
    v58 = 0;
LABEL_38:
    v59 = v39;
    v60 = v40;
    goto LABEL_39;
  }
  if (v21 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v107 = operator new(v12);
    bzero(v107, v12 & 0xFFFFFFFFFFFFFFF8);
    v108 = *a2;
    if (v12 >> 3 <= 1)
      v109 = 1;
    else
      v109 = v12 >> 3;
    v110 = a2[5];
    v111 = a2[8];
    v112 = v109 & 0x1FFFFFFFFFFFFFFELL;
    v113 = a1[5];
    while (v109 >= 2)
    {
      v116 = 0;
      v117 = 0;
      v118 = v109 & 0x1FFFFFFFFFFFFFFELL;
      v119 = (_QWORD *)(v113 + 8);
      v120 = v107 + 1;
      do
      {
        v116 += *(v119 - 1) * *(v120 - 1);
        v117 += *v119 * *v120;
        v120 += 2;
        v119 += 2;
        v118 -= 2;
      }
      while (v118);
      v114 = v117 + v116;
      v115 = v109 & 0x1FFFFFFFFFFFFFFELL;
      if (v109 != v112)
        goto LABEL_87;
LABEL_89:
      if (v109 < 2)
      {
        v128 = 0;
        v129 = 0;
LABEL_94:
        v135 = v109 - v129;
        v136 = v129;
        v137 = (uint64_t *)(v110 + 8 * v129);
        v138 = &v107[v136];
        do
        {
          v140 = *v138++;
          v139 = v140;
          v141 = *v137++;
          v128 += v141 * v139;
          --v135;
        }
        while (v135);
        goto LABEL_96;
      }
      v130 = 0;
      v131 = 0;
      v132 = v109 & 0x1FFFFFFFFFFFFFFELL;
      v133 = (_QWORD *)(v110 + 8);
      v134 = v107 + 1;
      do
      {
        v130 += *(v133 - 1) * *(v134 - 1);
        v131 += *v133 * *v134;
        v134 += 2;
        v133 += 2;
        v132 -= 2;
      }
      while (v132);
      v128 = v131 + v130;
      v129 = v109 & 0x1FFFFFFFFFFFFFFELL;
      if (v109 != v112)
        goto LABEL_94;
LABEL_96:
      *(float *)(v160 + 4 * v114) = *(float *)(v108 + 4 * (v111 + v128)) * *(float *)(v160 + 4 * v114);
      if ((int)(v12 >> 3) >= 1)
      {
        v142 = (v12 >> 3) + 1;
        v143 = v12 >> 3;
        while (1)
        {
          v144 = (v142 - 2);
          v145 = v107[v144] + 1;
          v107[v144] = v145;
          if (v145 < v4[v144])
            break;
          v107[(v142 - 2)] = 0;
          --v143;
          if ((unint64_t)--v142 <= 1)
            goto LABEL_102;
        }
        if (v143 > 0)
          continue;
      }
LABEL_102:
      operator delete(v107);
      return result;
    }
    v114 = 0;
    v115 = 0;
LABEL_87:
    v121 = v109 - v115;
    v122 = v115;
    v123 = (uint64_t *)(v113 + 8 * v115);
    v124 = &v107[v122];
    do
    {
      v126 = *v124++;
      v125 = v126;
      v127 = *v123++;
      v114 += v127 * v125;
      --v121;
    }
    while (v121);
    goto LABEL_89;
  }
  v22 = *v4;
  if (!*v4)
    return result;
  v23 = a2[8];
  v24 = a1[8];
  v25 = *a2;
  v26 = *(_QWORD *)a1[5];
  v27 = *(_QWORD *)a2[5];
  if (v22 < 0xC)
    goto LABEL_27;
  v28 = 0;
  if (v26 != 1 || v27 != 1)
    goto LABEL_28;
  if (v160 + 4 * v24 < v25 + 4 * v22 + 4 * v23 && v25 + 4 * v23 < v160 + 4 * v22 + 4 * v24)
  {
LABEL_27:
    v28 = 0;
LABEL_28:
    v29 = a2[8];
    v30 = a1[8];
LABEL_29:
    v31 = v22 - v28;
    v32 = (float *)(v25 + 4 * v29);
    v33 = 4 * v27;
    v34 = 4 * v26;
    v35 = (float *)(v160 + 4 * v30);
    do
    {
      result.f32[0] = *v32 * *v35;
      *v35 = result.f32[0];
      v32 = (float *)((char *)v32 + v33);
      v35 = (float *)((char *)v35 + v34);
      --v31;
    }
    while (v31);
    return result;
  }
  v28 = v22 & 0xFFFFFFFFFFFFFFF8;
  v29 = v23 + (v22 & 0xFFFFFFFFFFFFFFF8);
  v30 = v24 + (v22 & 0xFFFFFFFFFFFFFFF8);
  v146 = (float32x4_t *)(v25 + 4 * v23 + 16);
  v147 = (float32x4_t *)(v160 + 4 * v24 + 16);
  v148 = v22 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    result = vmulq_f32(v146[-1], v147[-1]);
    v149 = vmulq_f32(*v146, *v147);
    v147[-1] = result;
    *v147 = v149;
    v146 += 2;
    v147 += 2;
    v148 -= 8;
  }
  while (v148);
  if (v22 != v28)
    goto LABEL_29;
  return result;
}

void sub_1911DB664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::operator*<float>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  v7 = (char *)a1[2];
  v6 = (char *)a1[3];
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 3;
  v10 = (char *)a2[2];
  v11 = (char *)a2[3];
  v12 = (v11 - v10) >> 3;
  if (v9 != v12)
    goto LABEL_11;
  if (v6 == v7)
    goto LABEL_49;
  v13 = v9 <= 1 ? 1 : (v6 - v7) >> 3;
  if (*(_QWORD *)v7 != *(_QWORD *)v10)
    goto LABEL_11;
  v14 = 1;
  do
  {
    v15 = v14;
    if (v13 == v14)
      break;
    v16 = *(_QWORD *)&v7[8 * v14];
    v17 = *(_QWORD *)&v10[8 * v14++];
  }
  while (v16 == v17);
  if (v15 >= v9)
  {
LABEL_49:
    nitro::ndarray<float>::copy((uint64_t)a1, a3);
    nitro::ndarray<float>::operator*=<float>(a3, a2);
  }
  else
  {
LABEL_11:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (v6 != v7)
    {
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = (char *)operator new(v6 - v7);
      v53 = &v51[8 * v9];
      memcpy(v51, v7, v8);
      v52 = v53;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v19 = (_BYTE *)a1[5];
    v18 = (_BYTE *)a1[6];
    v20 = v18 - v19;
    if (v18 != v19)
    {
      if (v20 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v22 = &v21[8 * (v20 >> 3)];
      v48 = v21;
      v50 = v22;
      memcpy(v21, v19, v20);
      v49 = v22;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    if (v11 != v10)
    {
      if (v11 - v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v23 = (char *)operator new(v11 - v10);
      v24 = &v23[8 * v12];
      v45 = v23;
      v47 = v24;
      memcpy(v23, v10, v11 - v10);
      v46 = v24;
    }
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v26 = (_BYTE *)a2[5];
    v25 = (_BYTE *)a2[6];
    v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - v26);
      v29 = &v28[8 * (v27 >> 3)];
      v42 = v28;
      v44 = v29;
      memcpy(v28, v26, v27);
      v43 = v29;
    }
    nitro::ndarray_impl::compute_broadcast((const void **)&v51, (const void **)&v48, (uint64_t)&v45, (uint64_t)&v42);
    nitro::ndarray<float>::ndarray(&v36, a1, (uint64_t)&v51, (uint64_t)&v48, 0);
    nitro::ndarray<float>::copy((uint64_t)&v36, a3);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v30 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nitro::ndarray<float>::ndarray(&v36, a2, (uint64_t)&v45, (uint64_t)&v42, 0);
    nitro::ndarray<float>::operator*=<float>(a3, &v36);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v37;
    if (v37)
    {
      v34 = (unint64_t *)&v37->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1911DB9C4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1911DB9D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;

  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_5:
  *(_QWORD *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1911DBA74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    JUMPOUT(0x1911DBA50);
  JUMPOUT(0x1911DBA20);
}

void sub_1911DBA84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24)
    JUMPOUT(0x1911DBA60);
  JUMPOUT(0x1911DBA28);
}

void sub_1911DBA94()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 112))
    JUMPOUT(0x1911DBA38);
  JUMPOUT(0x1911DBA30);
}

void nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911DBD08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911DBEAC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911DBEC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911DBEB8);
}

void nitro::ndarray_container::visit<nitro::ndarray_container const,nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0,(void *)0>(nitro::ndarray_container const &,nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 190, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 190, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1911DC1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1911DC258(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1911DC594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1911DC5FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

uint64_t nitro::ndarray<unsigned char>::operator==<unsigned char>(uint64_t *a1, uint64_t *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;

  if (a2 == a1)
    return 1;
  v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  v6 = v4 - v5;
  v7 = (v4 - v5) >> 3;
  v8 = (_QWORD *)a2[2];
  if (v7 != (a2[3] - (uint64_t)v8) >> 3)
    return 0;
  v9 = v4 - v5;
  if (v4 == v5)
    return 1;
  v10 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
  if (*(_QWORD *)v5 != *v8)
    return 0;
  v11 = 1;
  do
  {
    v12 = v11;
    if (v10 == v11)
      break;
    v13 = *(_QWORD *)&v5[8 * v11];
    v14 = v8[v11++];
  }
  while (v13 == v14);
  v15 = v12 >= v7;
  if (v12 >= v7)
  {
    v16 = *a1;
    if (!*a1)
      return 1;
    if ((unint64_t)(v9 - 8) >= 8)
    {
      v19 = ((unint64_t)(v9 - 8) >> 3) + 1;
      v18 = &v5[8 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
      v20 = v5 + 8;
      v21 = 1;
      v22 = v19 & 0x3FFFFFFFFFFFFFFELL;
      v23 = 1;
      do
      {
        v21 *= *(v20 - 1);
        v23 *= *v20;
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      v17 = v23 * v21;
      if (v19 == (v19 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_20:
        if (v17)
        {
          if ((v6 & 0x8000000000000000) != 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v25 = operator new(v4 - v5);
          bzero(v25, v6 & 0xFFFFFFFFFFFFFFF8);
          v26 = *a2;
          if (v6 >> 3 <= 1)
            v27 = 1;
          else
            v27 = v6 >> 3;
          v28 = a2[5];
          v29 = a2[8];
          v30 = v27 & 0x1FFFFFFFFFFFFFFELL;
          while (1)
          {
            if (v6 <= 7)
            {
              v31 = 0;
              v32 = *(unsigned __int8 *)(v16 + a1[8]);
              goto LABEL_42;
            }
            v33 = a1[5];
            if (v27 < 2)
              break;
            v36 = 0;
            v37 = 0;
            v38 = (_QWORD *)(v33 + 8);
            v39 = v27 & 0x1FFFFFFFFFFFFFFELL;
            v40 = v25 + 1;
            do
            {
              v36 += *(v38 - 1) * *(v40 - 1);
              v37 += *v38 * *v40;
              v40 += 2;
              v38 += 2;
              v39 -= 2;
            }
            while (v39);
            v34 = v37 + v36;
            v35 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30)
              goto LABEL_33;
LABEL_35:
            v32 = *(unsigned __int8 *)(v16 + a1[8] + v34);
            if (v27 < 2)
            {
              v31 = 0;
              v48 = 0;
LABEL_40:
              v54 = v27 - v48;
              v55 = v48;
              v56 = (uint64_t *)(v28 + 8 * v48);
              v57 = &v25[v55];
              do
              {
                v59 = *v57++;
                v58 = v59;
                v60 = *v56++;
                v31 += v60 * v58;
                --v54;
              }
              while (v54);
              goto LABEL_42;
            }
            v49 = 0;
            v50 = 0;
            v51 = v27 & 0x1FFFFFFFFFFFFFFELL;
            v52 = (_QWORD *)(v28 + 8);
            v53 = v25 + 1;
            do
            {
              v49 += *(v52 - 1) * *(v53 - 1);
              v50 += *v52 * *v53;
              v53 += 2;
              v52 += 2;
              v51 -= 2;
            }
            while (v51);
            v31 = v50 + v49;
            v48 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30)
              goto LABEL_40;
LABEL_42:
            v61 = *(unsigned __int8 *)(v26 + v29 + v31);
            v15 = v32 == v61;
            if ((int)(v6 >> 3) >= 1 && v32 == v61)
            {
              v62 = (v6 >> 3) + 1;
              v63 = v6 >> 3;
              while (1)
              {
                v64 = (v62 - 2);
                v65 = v25[v64] + 1;
                v25[v64] = v65;
                if (v65 < *(_QWORD *)&v5[v64 * 8])
                  break;
                v25[(v62 - 2)] = 0;
                LODWORD(v63) = v63 - 1;
                if ((unint64_t)--v62 <= 1)
                  goto LABEL_49;
              }
              if ((int)v63 > 0)
                continue;
            }
LABEL_49:
            operator delete(v25);
            return v15;
          }
          v34 = 0;
          v35 = 0;
LABEL_33:
          v41 = v27 - v35;
          v42 = v35;
          v43 = (uint64_t *)(v33 + v42 * 8);
          v44 = &v25[v42];
          do
          {
            v46 = *v44++;
            v45 = v46;
            v47 = *v43++;
            v34 += v47 * v45;
            --v41;
          }
          while (v41);
          goto LABEL_35;
        }
        return 1;
      }
    }
    else
    {
      v17 = 1;
      v18 = (char *)a1[2];
    }
    do
    {
      v24 = *(_QWORD *)v18;
      v18 += 8;
      v17 *= v24;
    }
    while (v18 != v4);
    goto LABEL_20;
  }
  return v15;
}

void sub_1911DC950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t nitro::ndarray<int>::operator==<unsigned char>(uint64_t *a1, uint64_t *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;

  if (a2 == a1)
    return 1;
  v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  v6 = v4 - v5;
  v7 = (v4 - v5) >> 3;
  v8 = (_QWORD *)a2[2];
  if (v7 != (a2[3] - (uint64_t)v8) >> 3)
    return 0;
  v9 = v4 - v5;
  if (v4 == v5)
    return 1;
  v10 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
  if (*(_QWORD *)v5 != *v8)
    return 0;
  v11 = 1;
  do
  {
    v12 = v11;
    if (v10 == v11)
      break;
    v13 = *(_QWORD *)&v5[8 * v11];
    v14 = v8[v11++];
  }
  while (v13 == v14);
  v15 = v12 >= v7;
  if (v12 >= v7)
  {
    v16 = *a1;
    if (!*a1)
      return 1;
    if ((unint64_t)(v9 - 8) >= 8)
    {
      v19 = ((unint64_t)(v9 - 8) >> 3) + 1;
      v18 = &v5[8 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
      v20 = v5 + 8;
      v21 = 1;
      v22 = v19 & 0x3FFFFFFFFFFFFFFELL;
      v23 = 1;
      do
      {
        v21 *= *(v20 - 1);
        v23 *= *v20;
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      v17 = v23 * v21;
      if (v19 == (v19 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_20:
        if (v17)
        {
          if ((v6 & 0x8000000000000000) != 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v25 = operator new(v4 - v5);
          bzero(v25, v6 & 0xFFFFFFFFFFFFFFF8);
          v26 = *a2;
          if (v6 >> 3 <= 1)
            v27 = 1;
          else
            v27 = v6 >> 3;
          v28 = a2[5];
          v29 = a2[8];
          v30 = v27 & 0x1FFFFFFFFFFFFFFELL;
          while (1)
          {
            if (v6 <= 7)
            {
              v31 = 0;
              v32 = *(_DWORD *)(v16 + 4 * a1[8]);
              goto LABEL_42;
            }
            v33 = a1[5];
            if (v27 < 2)
              break;
            v36 = 0;
            v37 = 0;
            v38 = (_QWORD *)(v33 + 8);
            v39 = v27 & 0x1FFFFFFFFFFFFFFELL;
            v40 = v25 + 1;
            do
            {
              v36 += *(v38 - 1) * *(v40 - 1);
              v37 += *v38 * *v40;
              v40 += 2;
              v38 += 2;
              v39 -= 2;
            }
            while (v39);
            v34 = v37 + v36;
            v35 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30)
              goto LABEL_33;
LABEL_35:
            v32 = *(_DWORD *)(v16 + 4 * (a1[8] + v34));
            if (v27 < 2)
            {
              v31 = 0;
              v48 = 0;
LABEL_40:
              v54 = v27 - v48;
              v55 = v48;
              v56 = (uint64_t *)(v28 + 8 * v48);
              v57 = &v25[v55];
              do
              {
                v59 = *v57++;
                v58 = v59;
                v60 = *v56++;
                v31 += v60 * v58;
                --v54;
              }
              while (v54);
              goto LABEL_42;
            }
            v49 = 0;
            v50 = 0;
            v51 = v27 & 0x1FFFFFFFFFFFFFFELL;
            v52 = (_QWORD *)(v28 + 8);
            v53 = v25 + 1;
            do
            {
              v49 += *(v52 - 1) * *(v53 - 1);
              v50 += *v52 * *v53;
              v53 += 2;
              v52 += 2;
              v51 -= 2;
            }
            while (v51);
            v31 = v50 + v49;
            v48 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30)
              goto LABEL_40;
LABEL_42:
            v61 = *(unsigned __int8 *)(v26 + v29 + v31);
            v15 = v32 == v61;
            if ((int)(v6 >> 3) >= 1 && v32 == v61)
            {
              v62 = (v6 >> 3) + 1;
              v63 = v6 >> 3;
              while (1)
              {
                v64 = (v62 - 2);
                v65 = v25[v64] + 1;
                v25[v64] = v65;
                if (v65 < *(_QWORD *)&v5[v64 * 8])
                  break;
                v25[(v62 - 2)] = 0;
                LODWORD(v63) = v63 - 1;
                if ((unint64_t)--v62 <= 1)
                  goto LABEL_49;
              }
              if ((int)v63 > 0)
                continue;
            }
LABEL_49:
            operator delete(v25);
            return v15;
          }
          v34 = 0;
          v35 = 0;
LABEL_33:
          v41 = v27 - v35;
          v42 = v35;
          v43 = (uint64_t *)(v33 + v42 * 8);
          v44 = &v25[v42];
          do
          {
            v46 = *v44++;
            v45 = v46;
            v47 = *v43++;
            v34 += v47 * v45;
            --v41;
          }
          while (v41);
          goto LABEL_35;
        }
        return 1;
      }
    }
    else
    {
      v17 = 1;
      v18 = (char *)a1[2];
    }
    do
    {
      v24 = *(_QWORD *)v18;
      v18 += 8;
      v17 *= v24;
    }
    while (v18 != v4);
    goto LABEL_20;
  }
  return v15;
}

void sub_1911DCC98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t nitro::ndarray<half>::operator==<unsigned char>(uint64_t *a1, uint64_t *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  float v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;

  if (a2 == a1)
    return 1;
  v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  v6 = v4 - v5;
  v7 = (v4 - v5) >> 3;
  v8 = (_QWORD *)a2[2];
  if (v7 != (a2[3] - (uint64_t)v8) >> 3)
    return 0;
  v9 = v4 - v5;
  if (v4 == v5)
    return 1;
  v10 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
  if (*(_QWORD *)v5 != *v8)
    return 0;
  v11 = 1;
  do
  {
    v12 = v11;
    if (v10 == v11)
      break;
    v13 = *(_QWORD *)&v5[8 * v11];
    v14 = v8[v11++];
  }
  while (v13 == v14);
  v15 = v12 >= v7;
  if (v12 >= v7)
  {
    v16 = *a1;
    if (!*a1)
      return 1;
    if ((unint64_t)(v9 - 8) >= 8)
    {
      v19 = ((unint64_t)(v9 - 8) >> 3) + 1;
      v18 = &v5[8 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
      v20 = v5 + 8;
      v21 = 1;
      v22 = v19 & 0x3FFFFFFFFFFFFFFELL;
      v23 = 1;
      do
      {
        v21 *= *(v20 - 1);
        v23 *= *v20;
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      v17 = v23 * v21;
      if (v19 == (v19 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_20:
        if (v17)
        {
          if ((v6 & 0x8000000000000000) != 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v25 = operator new(v4 - v5);
          bzero(v25, v6 & 0xFFFFFFFFFFFFFFF8);
          v27 = *a2;
          if (v6 >> 3 <= 1)
            v28 = 1;
          else
            v28 = v6 >> 3;
          v29 = a2[5];
          v30 = a2[8];
          v31 = v28 & 0x1FFFFFFFFFFFFFFELL;
          while (1)
          {
            if (v6 <= 7)
            {
              v32 = 0;
              _H0 = *(_WORD *)(v16 + 2 * a1[8]);
              goto LABEL_42;
            }
            v34 = a1[5];
            if (v28 < 2)
              break;
            v37 = 0;
            v38 = 0;
            v39 = (_QWORD *)(v34 + 8);
            v40 = v28 & 0x1FFFFFFFFFFFFFFELL;
            v41 = v25 + 1;
            do
            {
              v37 += *(v39 - 1) * *(v41 - 1);
              v38 += *v39 * *v41;
              v41 += 2;
              v39 += 2;
              v40 -= 2;
            }
            while (v40);
            v35 = v38 + v37;
            v36 = v28 & 0x1FFFFFFFFFFFFFFELL;
            if (v28 != v31)
              goto LABEL_33;
LABEL_35:
            _H0 = *(_WORD *)(v16 + 2 * (a1[8] + v35));
            if (v28 < 2)
            {
              v32 = 0;
              v49 = 0;
LABEL_40:
              v55 = v28 - v49;
              v56 = v49;
              v57 = (uint64_t *)(v29 + 8 * v49);
              v58 = &v25[v56];
              do
              {
                v60 = *v58++;
                v59 = v60;
                v61 = *v57++;
                v32 += v61 * v59;
                --v55;
              }
              while (v55);
              goto LABEL_42;
            }
            v50 = 0;
            v51 = 0;
            v52 = v28 & 0x1FFFFFFFFFFFFFFELL;
            v53 = (_QWORD *)(v29 + 8);
            v54 = v25 + 1;
            do
            {
              v50 += *(v53 - 1) * *(v54 - 1);
              v51 += *v53 * *v54;
              v54 += 2;
              v53 += 2;
              v52 -= 2;
            }
            while (v52);
            v32 = v51 + v50;
            v49 = v28 & 0x1FFFFFFFFFFFFFFELL;
            if (v28 != v31)
              goto LABEL_40;
LABEL_42:
            __asm { FCVT            S0, H0 }
            LOBYTE(v26) = *(_BYTE *)(v27 + v30 + v32);
            v26 = (float)LODWORD(v26);
            v15 = _S0 == v26;
            if ((int)(v6 >> 3) >= 1 && _S0 == v26)
            {
              v67 = (v6 >> 3) + 1;
              v68 = v6 >> 3;
              while (1)
              {
                v69 = (v67 - 2);
                v70 = v25[v69] + 1;
                v25[v69] = v70;
                if (v70 < *(_QWORD *)&v5[v69 * 8])
                  break;
                v25[(v67 - 2)] = 0;
                LODWORD(v68) = v68 - 1;
                if ((unint64_t)--v67 <= 1)
                  goto LABEL_49;
              }
              if ((int)v68 > 0)
                continue;
            }
LABEL_49:
            operator delete(v25);
            return v15;
          }
          v35 = 0;
          v36 = 0;
LABEL_33:
          v42 = v28 - v36;
          v43 = v36;
          v44 = (uint64_t *)(v34 + v43 * 8);
          v45 = &v25[v43];
          do
          {
            v47 = *v45++;
            v46 = v47;
            v48 = *v44++;
            v35 += v48 * v46;
            --v42;
          }
          while (v42);
          goto LABEL_35;
        }
        return 1;
      }
    }
    else
    {
      v17 = 1;
      v18 = (char *)a1[2];
    }
    do
    {
      v24 = *(_QWORD *)v18;
      v18 += 8;
      v17 *= v24;
    }
    while (v18 != v4);
    goto LABEL_20;
  }
  return v15;
}

void sub_1911DCFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t nitro::ndarray<float>::operator==<unsigned char>(uint64_t *a1, uint64_t *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  float v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;

  if (a2 == a1)
    return 1;
  v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  v6 = v4 - v5;
  v7 = (v4 - v5) >> 3;
  v8 = (_QWORD *)a2[2];
  if (v7 != (a2[3] - (uint64_t)v8) >> 3)
    return 0;
  v9 = v4 - v5;
  if (v4 == v5)
    return 1;
  v10 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
  if (*(_QWORD *)v5 != *v8)
    return 0;
  v11 = 1;
  do
  {
    v12 = v11;
    if (v10 == v11)
      break;
    v13 = *(_QWORD *)&v5[8 * v11];
    v14 = v8[v11++];
  }
  while (v13 == v14);
  v15 = v12 >= v7;
  if (v12 >= v7)
  {
    v16 = *a1;
    if (!*a1)
      return 1;
    if ((unint64_t)(v9 - 8) >= 8)
    {
      v19 = ((unint64_t)(v9 - 8) >> 3) + 1;
      v18 = &v5[8 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
      v20 = v5 + 8;
      v21 = 1;
      v22 = v19 & 0x3FFFFFFFFFFFFFFELL;
      v23 = 1;
      do
      {
        v21 *= *(v20 - 1);
        v23 *= *v20;
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      v17 = v23 * v21;
      if (v19 == (v19 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_20:
        if (v17)
        {
          if ((v6 & 0x8000000000000000) != 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v25 = operator new(v4 - v5);
          bzero(v25, v6 & 0xFFFFFFFFFFFFFFF8);
          v27 = *a2;
          if (v6 >> 3 <= 1)
            v28 = 1;
          else
            v28 = v6 >> 3;
          v29 = a2[5];
          v30 = a2[8];
          v31 = v28 & 0x1FFFFFFFFFFFFFFELL;
          while (1)
          {
            if (v6 <= 7)
            {
              v32 = 0;
              v33 = *(float *)(v16 + 4 * a1[8]);
              goto LABEL_42;
            }
            v34 = a1[5];
            if (v28 < 2)
              break;
            v37 = 0;
            v38 = 0;
            v39 = (_QWORD *)(v34 + 8);
            v40 = v28 & 0x1FFFFFFFFFFFFFFELL;
            v41 = v25 + 1;
            do
            {
              v37 += *(v39 - 1) * *(v41 - 1);
              v38 += *v39 * *v41;
              v41 += 2;
              v39 += 2;
              v40 -= 2;
            }
            while (v40);
            v35 = v38 + v37;
            v36 = v28 & 0x1FFFFFFFFFFFFFFELL;
            if (v28 != v31)
              goto LABEL_33;
LABEL_35:
            v33 = *(float *)(v16 + 4 * (a1[8] + v35));
            if (v28 < 2)
            {
              v32 = 0;
              v49 = 0;
LABEL_40:
              v55 = v28 - v49;
              v56 = v49;
              v57 = (uint64_t *)(v29 + 8 * v49);
              v58 = &v25[v56];
              do
              {
                v60 = *v58++;
                v59 = v60;
                v61 = *v57++;
                v32 += v61 * v59;
                --v55;
              }
              while (v55);
              goto LABEL_42;
            }
            v50 = 0;
            v51 = 0;
            v52 = v28 & 0x1FFFFFFFFFFFFFFELL;
            v53 = (_QWORD *)(v29 + 8);
            v54 = v25 + 1;
            do
            {
              v50 += *(v53 - 1) * *(v54 - 1);
              v51 += *v53 * *v54;
              v54 += 2;
              v53 += 2;
              v52 -= 2;
            }
            while (v52);
            v32 = v51 + v50;
            v49 = v28 & 0x1FFFFFFFFFFFFFFELL;
            if (v28 != v31)
              goto LABEL_40;
LABEL_42:
            LOBYTE(v26) = *(_BYTE *)(v27 + v30 + v32);
            v26 = (float)LODWORD(v26);
            v15 = v33 == v26;
            if ((int)(v6 >> 3) >= 1 && v33 == v26)
            {
              v62 = (v6 >> 3) + 1;
              v63 = v6 >> 3;
              while (1)
              {
                v64 = (v62 - 2);
                v65 = v25[v64] + 1;
                v25[v64] = v65;
                if (v65 < *(_QWORD *)&v5[v64 * 8])
                  break;
                v25[(v62 - 2)] = 0;
                LODWORD(v63) = v63 - 1;
                if ((unint64_t)--v62 <= 1)
                  goto LABEL_49;
              }
              if ((int)v63 > 0)
                continue;
            }
LABEL_49:
            operator delete(v25);
            return v15;
          }
          v35 = 0;
          v36 = 0;
LABEL_33:
          v42 = v28 - v36;
          v43 = v36;
          v44 = (uint64_t *)(v34 + v43 * 8);
          v45 = &v25[v43];
          do
          {
            v47 = *v45++;
            v46 = v47;
            v48 = *v44++;
            v35 += v48 * v46;
            --v42;
          }
          while (v42);
          goto LABEL_35;
        }
        return 1;
      }
    }
    else
    {
      v17 = 1;
      v18 = (char *)a1[2];
    }
    do
    {
      v24 = *(_QWORD *)v18;
      v18 += 8;
      v17 *= v24;
    }
    while (v18 != v4);
    goto LABEL_20;
  }
  return v15;
}

void sub_1911DD334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1911DD664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1911DD6CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

uint64_t nitro::ndarray<unsigned char>::operator==<int>(uint64_t *a1, uint64_t *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;

  if (a2 == a1)
    return 1;
  v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  v6 = v4 - v5;
  v7 = (v4 - v5) >> 3;
  v8 = (_QWORD *)a2[2];
  if (v7 != (a2[3] - (uint64_t)v8) >> 3)
    return 0;
  v9 = v4 - v5;
  if (v4 == v5)
    return 1;
  v10 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
  if (*(_QWORD *)v5 != *v8)
    return 0;
  v11 = 1;
  do
  {
    v12 = v11;
    if (v10 == v11)
      break;
    v13 = *(_QWORD *)&v5[8 * v11];
    v14 = v8[v11++];
  }
  while (v13 == v14);
  v15 = v12 >= v7;
  if (v12 >= v7)
  {
    v16 = *a1;
    if (!*a1)
      return 1;
    if ((unint64_t)(v9 - 8) >= 8)
    {
      v19 = ((unint64_t)(v9 - 8) >> 3) + 1;
      v18 = &v5[8 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
      v20 = v5 + 8;
      v21 = 1;
      v22 = v19 & 0x3FFFFFFFFFFFFFFELL;
      v23 = 1;
      do
      {
        v21 *= *(v20 - 1);
        v23 *= *v20;
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      v17 = v23 * v21;
      if (v19 == (v19 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_20:
        if (v17)
        {
          if ((v6 & 0x8000000000000000) != 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v25 = operator new(v4 - v5);
          bzero(v25, v6 & 0xFFFFFFFFFFFFFFF8);
          v26 = *a2;
          if (v6 >> 3 <= 1)
            v27 = 1;
          else
            v27 = v6 >> 3;
          v28 = a2[5];
          v29 = a2[8];
          v30 = v27 & 0x1FFFFFFFFFFFFFFELL;
          while (1)
          {
            if (v6 <= 7)
            {
              v31 = 0;
              v32 = *(unsigned __int8 *)(v16 + a1[8]);
              goto LABEL_42;
            }
            v33 = a1[5];
            if (v27 < 2)
              break;
            v36 = 0;
            v37 = 0;
            v38 = (_QWORD *)(v33 + 8);
            v39 = v27 & 0x1FFFFFFFFFFFFFFELL;
            v40 = v25 + 1;
            do
            {
              v36 += *(v38 - 1) * *(v40 - 1);
              v37 += *v38 * *v40;
              v40 += 2;
              v38 += 2;
              v39 -= 2;
            }
            while (v39);
            v34 = v37 + v36;
            v35 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30)
              goto LABEL_33;
LABEL_35:
            v32 = *(unsigned __int8 *)(v16 + a1[8] + v34);
            if (v27 < 2)
            {
              v31 = 0;
              v48 = 0;
LABEL_40:
              v54 = v27 - v48;
              v55 = v48;
              v56 = (uint64_t *)(v28 + 8 * v48);
              v57 = &v25[v55];
              do
              {
                v59 = *v57++;
                v58 = v59;
                v60 = *v56++;
                v31 += v60 * v58;
                --v54;
              }
              while (v54);
              goto LABEL_42;
            }
            v49 = 0;
            v50 = 0;
            v51 = v27 & 0x1FFFFFFFFFFFFFFELL;
            v52 = (_QWORD *)(v28 + 8);
            v53 = v25 + 1;
            do
            {
              v49 += *(v52 - 1) * *(v53 - 1);
              v50 += *v52 * *v53;
              v53 += 2;
              v52 += 2;
              v51 -= 2;
            }
            while (v51);
            v31 = v50 + v49;
            v48 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30)
              goto LABEL_40;
LABEL_42:
            v61 = *(_DWORD *)(v26 + 4 * (v29 + v31));
            v15 = v61 == v32;
            if ((int)(v6 >> 3) >= 1 && v61 == v32)
            {
              v62 = (v6 >> 3) + 1;
              v63 = v6 >> 3;
              while (1)
              {
                v64 = (v62 - 2);
                v65 = v25[v64] + 1;
                v25[v64] = v65;
                if (v65 < *(_QWORD *)&v5[v64 * 8])
                  break;
                v25[(v62 - 2)] = 0;
                LODWORD(v63) = v63 - 1;
                if ((unint64_t)--v62 <= 1)
                  goto LABEL_49;
              }
              if ((int)v63 > 0)
                continue;
            }
LABEL_49:
            operator delete(v25);
            return v15;
          }
          v34 = 0;
          v35 = 0;
LABEL_33:
          v41 = v27 - v35;
          v42 = v35;
          v43 = (uint64_t *)(v33 + v42 * 8);
          v44 = &v25[v42];
          do
          {
            v46 = *v44++;
            v45 = v46;
            v47 = *v43++;
            v34 += v47 * v45;
            --v41;
          }
          while (v41);
          goto LABEL_35;
        }
        return 1;
      }
    }
    else
    {
      v17 = 1;
      v18 = (char *)a1[2];
    }
    do
    {
      v24 = *(_QWORD *)v18;
      v18 += 8;
      v17 *= v24;
    }
    while (v18 != v4);
    goto LABEL_20;
  }
  return v15;
}

void sub_1911DDA20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t nitro::ndarray<int>::operator==<int>(uint64_t *a1, uint64_t *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;

  if (a2 == a1)
    return 1;
  v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  v6 = v4 - v5;
  v7 = (v4 - v5) >> 3;
  v8 = (_QWORD *)a2[2];
  if (v7 != (a2[3] - (uint64_t)v8) >> 3)
    return 0;
  v9 = v4 - v5;
  if (v4 == v5)
    return 1;
  v10 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
  if (*(_QWORD *)v5 != *v8)
    return 0;
  v11 = 1;
  do
  {
    v12 = v11;
    if (v10 == v11)
      break;
    v13 = *(_QWORD *)&v5[8 * v11];
    v14 = v8[v11++];
  }
  while (v13 == v14);
  v15 = v12 >= v7;
  if (v12 >= v7)
  {
    v16 = *a1;
    if (!*a1)
      return 1;
    if ((unint64_t)(v9 - 8) >= 8)
    {
      v19 = ((unint64_t)(v9 - 8) >> 3) + 1;
      v18 = &v5[8 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
      v20 = v5 + 8;
      v21 = 1;
      v22 = v19 & 0x3FFFFFFFFFFFFFFELL;
      v23 = 1;
      do
      {
        v21 *= *(v20 - 1);
        v23 *= *v20;
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      v17 = v23 * v21;
      if (v19 == (v19 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_20:
        if (v17)
        {
          if ((v6 & 0x8000000000000000) != 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v25 = operator new(v4 - v5);
          bzero(v25, v6 & 0xFFFFFFFFFFFFFFF8);
          v26 = *a2;
          if (v6 >> 3 <= 1)
            v27 = 1;
          else
            v27 = v6 >> 3;
          v28 = a2[5];
          v29 = a2[8];
          v30 = v27 & 0x1FFFFFFFFFFFFFFELL;
          while (1)
          {
            if (v6 <= 7)
            {
              v31 = 0;
              v32 = *(_DWORD *)(v16 + 4 * a1[8]);
              goto LABEL_42;
            }
            v33 = a1[5];
            if (v27 < 2)
              break;
            v36 = 0;
            v37 = 0;
            v38 = (_QWORD *)(v33 + 8);
            v39 = v27 & 0x1FFFFFFFFFFFFFFELL;
            v40 = v25 + 1;
            do
            {
              v36 += *(v38 - 1) * *(v40 - 1);
              v37 += *v38 * *v40;
              v40 += 2;
              v38 += 2;
              v39 -= 2;
            }
            while (v39);
            v34 = v37 + v36;
            v35 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30)
              goto LABEL_33;
LABEL_35:
            v32 = *(_DWORD *)(v16 + 4 * (a1[8] + v34));
            if (v27 < 2)
            {
              v31 = 0;
              v48 = 0;
LABEL_40:
              v54 = v27 - v48;
              v55 = v48;
              v56 = (uint64_t *)(v28 + 8 * v48);
              v57 = &v25[v55];
              do
              {
                v59 = *v57++;
                v58 = v59;
                v60 = *v56++;
                v31 += v60 * v58;
                --v54;
              }
              while (v54);
              goto LABEL_42;
            }
            v49 = 0;
            v50 = 0;
            v51 = v27 & 0x1FFFFFFFFFFFFFFELL;
            v52 = (_QWORD *)(v28 + 8);
            v53 = v25 + 1;
            do
            {
              v49 += *(v52 - 1) * *(v53 - 1);
              v50 += *v52 * *v53;
              v53 += 2;
              v52 += 2;
              v51 -= 2;
            }
            while (v51);
            v31 = v50 + v49;
            v48 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30)
              goto LABEL_40;
LABEL_42:
            v61 = *(_DWORD *)(v26 + 4 * (v29 + v31));
            v15 = v32 == v61;
            if ((int)(v6 >> 3) >= 1 && v32 == v61)
            {
              v62 = (v6 >> 3) + 1;
              v63 = v6 >> 3;
              while (1)
              {
                v64 = (v62 - 2);
                v65 = v25[v64] + 1;
                v25[v64] = v65;
                if (v65 < *(_QWORD *)&v5[v64 * 8])
                  break;
                v25[(v62 - 2)] = 0;
                LODWORD(v63) = v63 - 1;
                if ((unint64_t)--v62 <= 1)
                  goto LABEL_49;
              }
              if ((int)v63 > 0)
                continue;
            }
LABEL_49:
            operator delete(v25);
            return v15;
          }
          v34 = 0;
          v35 = 0;
LABEL_33:
          v41 = v27 - v35;
          v42 = v35;
          v43 = (uint64_t *)(v33 + v42 * 8);
          v44 = &v25[v42];
          do
          {
            v46 = *v44++;
            v45 = v46;
            v47 = *v43++;
            v34 += v47 * v45;
            --v41;
          }
          while (v41);
          goto LABEL_35;
        }
        return 1;
      }
    }
    else
    {
      v17 = 1;
      v18 = (char *)a1[2];
    }
    do
    {
      v24 = *(_QWORD *)v18;
      v18 += 8;
      v17 *= v24;
    }
    while (v18 != v4);
    goto LABEL_20;
  }
  return v15;
}

void sub_1911DDD68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t nitro::ndarray<half>::operator==<int>(uint64_t *a1, uint64_t *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;

  if (a2 == a1)
    return 1;
  v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  v6 = v4 - v5;
  v7 = (v4 - v5) >> 3;
  v8 = (_QWORD *)a2[2];
  if (v7 != (a2[3] - (uint64_t)v8) >> 3)
    return 0;
  v9 = v4 - v5;
  if (v4 == v5)
    return 1;
  v10 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
  if (*(_QWORD *)v5 != *v8)
    return 0;
  v11 = 1;
  do
  {
    v12 = v11;
    if (v10 == v11)
      break;
    v13 = *(_QWORD *)&v5[8 * v11];
    v14 = v8[v11++];
  }
  while (v13 == v14);
  v15 = v12 >= v7;
  if (v12 >= v7)
  {
    v16 = *a1;
    if (!*a1)
      return 1;
    if ((unint64_t)(v9 - 8) >= 8)
    {
      v19 = ((unint64_t)(v9 - 8) >> 3) + 1;
      v18 = &v5[8 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
      v20 = v5 + 8;
      v21 = 1;
      v22 = v19 & 0x3FFFFFFFFFFFFFFELL;
      v23 = 1;
      do
      {
        v21 *= *(v20 - 1);
        v23 *= *v20;
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      v17 = v23 * v21;
      if (v19 == (v19 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_20:
        if (v17)
        {
          if ((v6 & 0x8000000000000000) != 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v25 = operator new(v4 - v5);
          bzero(v25, v6 & 0xFFFFFFFFFFFFFFF8);
          v26 = *a2;
          if (v6 >> 3 <= 1)
            v27 = 1;
          else
            v27 = v6 >> 3;
          v28 = a2[5];
          v29 = a2[8];
          v30 = v27 & 0x1FFFFFFFFFFFFFFELL;
          while (1)
          {
            if (v6 <= 7)
            {
              v31 = 0;
              _H0 = *(_WORD *)(v16 + 2 * a1[8]);
              goto LABEL_42;
            }
            v33 = a1[5];
            if (v27 < 2)
              break;
            v36 = 0;
            v37 = 0;
            v38 = (_QWORD *)(v33 + 8);
            v39 = v27 & 0x1FFFFFFFFFFFFFFELL;
            v40 = v25 + 1;
            do
            {
              v36 += *(v38 - 1) * *(v40 - 1);
              v37 += *v38 * *v40;
              v40 += 2;
              v38 += 2;
              v39 -= 2;
            }
            while (v39);
            v34 = v37 + v36;
            v35 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30)
              goto LABEL_33;
LABEL_35:
            _H0 = *(_WORD *)(v16 + 2 * (a1[8] + v34));
            if (v27 < 2)
            {
              v31 = 0;
              v48 = 0;
LABEL_40:
              v54 = v27 - v48;
              v55 = v48;
              v56 = (uint64_t *)(v28 + 8 * v48);
              v57 = &v25[v55];
              do
              {
                v59 = *v57++;
                v58 = v59;
                v60 = *v56++;
                v31 += v60 * v58;
                --v54;
              }
              while (v54);
              goto LABEL_42;
            }
            v49 = 0;
            v50 = 0;
            v51 = v27 & 0x1FFFFFFFFFFFFFFELL;
            v52 = (_QWORD *)(v28 + 8);
            v53 = v25 + 1;
            do
            {
              v49 += *(v52 - 1) * *(v53 - 1);
              v50 += *v52 * *v53;
              v53 += 2;
              v52 += 2;
              v51 -= 2;
            }
            while (v51);
            v31 = v50 + v49;
            v48 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30)
              goto LABEL_40;
LABEL_42:
            __asm { FCVT            S0, H0 }
            v66 = (float)*(int *)(v26 + 4 * (v29 + v31));
            v15 = _S0 == v66;
            if ((int)(v6 >> 3) >= 1 && _S0 == v66)
            {
              v67 = (v6 >> 3) + 1;
              v68 = v6 >> 3;
              while (1)
              {
                v69 = (v67 - 2);
                v70 = v25[v69] + 1;
                v25[v69] = v70;
                if (v70 < *(_QWORD *)&v5[v69 * 8])
                  break;
                v25[(v67 - 2)] = 0;
                LODWORD(v68) = v68 - 1;
                if ((unint64_t)--v67 <= 1)
                  goto LABEL_49;
              }
              if ((int)v68 > 0)
                continue;
            }
LABEL_49:
            operator delete(v25);
            return v15;
          }
          v34 = 0;
          v35 = 0;
LABEL_33:
          v41 = v27 - v35;
          v42 = v35;
          v43 = (uint64_t *)(v33 + v42 * 8);
          v44 = &v25[v42];
          do
          {
            v46 = *v44++;
            v45 = v46;
            v47 = *v43++;
            v34 += v47 * v45;
            --v41;
          }
          while (v41);
          goto LABEL_35;
        }
        return 1;
      }
    }
    else
    {
      v17 = 1;
      v18 = (char *)a1[2];
    }
    do
    {
      v24 = *(_QWORD *)v18;
      v18 += 8;
      v17 *= v24;
    }
    while (v18 != v4);
    goto LABEL_20;
  }
  return v15;
}

void sub_1911DE0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t nitro::ndarray<float>::operator==<int>(uint64_t *a1, uint64_t *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;

  if (a2 == a1)
    return 1;
  v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  v6 = v4 - v5;
  v7 = (v4 - v5) >> 3;
  v8 = (_QWORD *)a2[2];
  if (v7 != (a2[3] - (uint64_t)v8) >> 3)
    return 0;
  v9 = v4 - v5;
  if (v4 == v5)
    return 1;
  v10 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
  if (*(_QWORD *)v5 != *v8)
    return 0;
  v11 = 1;
  do
  {
    v12 = v11;
    if (v10 == v11)
      break;
    v13 = *(_QWORD *)&v5[8 * v11];
    v14 = v8[v11++];
  }
  while (v13 == v14);
  v15 = v12 >= v7;
  if (v12 >= v7)
  {
    v16 = *a1;
    if (!*a1)
      return 1;
    if ((unint64_t)(v9 - 8) >= 8)
    {
      v19 = ((unint64_t)(v9 - 8) >> 3) + 1;
      v18 = &v5[8 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
      v20 = v5 + 8;
      v21 = 1;
      v22 = v19 & 0x3FFFFFFFFFFFFFFELL;
      v23 = 1;
      do
      {
        v21 *= *(v20 - 1);
        v23 *= *v20;
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      v17 = v23 * v21;
      if (v19 == (v19 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_20:
        if (v17)
        {
          if ((v6 & 0x8000000000000000) != 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v25 = operator new(v4 - v5);
          bzero(v25, v6 & 0xFFFFFFFFFFFFFFF8);
          v26 = *a2;
          if (v6 >> 3 <= 1)
            v27 = 1;
          else
            v27 = v6 >> 3;
          v28 = a2[5];
          v29 = a2[8];
          v30 = v27 & 0x1FFFFFFFFFFFFFFELL;
          while (1)
          {
            if (v6 <= 7)
            {
              v31 = 0;
              v32 = *(float *)(v16 + 4 * a1[8]);
              goto LABEL_42;
            }
            v33 = a1[5];
            if (v27 < 2)
              break;
            v36 = 0;
            v37 = 0;
            v38 = (_QWORD *)(v33 + 8);
            v39 = v27 & 0x1FFFFFFFFFFFFFFELL;
            v40 = v25 + 1;
            do
            {
              v36 += *(v38 - 1) * *(v40 - 1);
              v37 += *v38 * *v40;
              v40 += 2;
              v38 += 2;
              v39 -= 2;
            }
            while (v39);
            v34 = v37 + v36;
            v35 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30)
              goto LABEL_33;
LABEL_35:
            v32 = *(float *)(v16 + 4 * (a1[8] + v34));
            if (v27 < 2)
            {
              v31 = 0;
              v48 = 0;
LABEL_40:
              v54 = v27 - v48;
              v55 = v48;
              v56 = (uint64_t *)(v28 + 8 * v48);
              v57 = &v25[v55];
              do
              {
                v59 = *v57++;
                v58 = v59;
                v60 = *v56++;
                v31 += v60 * v58;
                --v54;
              }
              while (v54);
              goto LABEL_42;
            }
            v49 = 0;
            v50 = 0;
            v51 = v27 & 0x1FFFFFFFFFFFFFFELL;
            v52 = (_QWORD *)(v28 + 8);
            v53 = v25 + 1;
            do
            {
              v49 += *(v52 - 1) * *(v53 - 1);
              v50 += *v52 * *v53;
              v53 += 2;
              v52 += 2;
              v51 -= 2;
            }
            while (v51);
            v31 = v50 + v49;
            v48 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30)
              goto LABEL_40;
LABEL_42:
            v61 = (float)*(int *)(v26 + 4 * (v29 + v31));
            v15 = v32 == v61;
            if ((int)(v6 >> 3) >= 1 && v32 == v61)
            {
              v62 = (v6 >> 3) + 1;
              v63 = v6 >> 3;
              while (1)
              {
                v64 = (v62 - 2);
                v65 = v25[v64] + 1;
                v25[v64] = v65;
                if (v65 < *(_QWORD *)&v5[v64 * 8])
                  break;
                v25[(v62 - 2)] = 0;
                LODWORD(v63) = v63 - 1;
                if ((unint64_t)--v62 <= 1)
                  goto LABEL_49;
              }
              if ((int)v63 > 0)
                continue;
            }
LABEL_49:
            operator delete(v25);
            return v15;
          }
          v34 = 0;
          v35 = 0;
LABEL_33:
          v41 = v27 - v35;
          v42 = v35;
          v43 = (uint64_t *)(v33 + v42 * 8);
          v44 = &v25[v42];
          do
          {
            v46 = *v44++;
            v45 = v46;
            v47 = *v43++;
            v34 += v47 * v45;
            --v41;
          }
          while (v41);
          goto LABEL_35;
        }
        return 1;
      }
    }
    else
    {
      v17 = 1;
      v18 = (char *)a1[2];
    }
    do
    {
      v24 = *(_QWORD *)v18;
      v18 += 8;
      v17 *= v24;
    }
    while (v18 != v4);
    goto LABEL_20;
  }
  return v15;
}

void sub_1911DE404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1911DE734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1911DE79C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

uint64_t nitro::ndarray<unsigned char>::operator==<half>(uint64_t *a1, uint64_t *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;

  if (a2 == a1)
    return 1;
  v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  v6 = v4 - v5;
  v7 = (v4 - v5) >> 3;
  v8 = (_QWORD *)a2[2];
  if (v7 != (a2[3] - (uint64_t)v8) >> 3)
    return 0;
  v9 = v4 - v5;
  if (v4 == v5)
    return 1;
  v10 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
  if (*(_QWORD *)v5 != *v8)
    return 0;
  v11 = 1;
  do
  {
    v12 = v11;
    if (v10 == v11)
      break;
    v13 = *(_QWORD *)&v5[8 * v11];
    v14 = v8[v11++];
  }
  while (v13 == v14);
  v15 = v12 >= v7;
  if (v12 >= v7)
  {
    v16 = *a1;
    if (!*a1)
      return 1;
    if ((unint64_t)(v9 - 8) >= 8)
    {
      v19 = ((unint64_t)(v9 - 8) >> 3) + 1;
      v18 = &v5[8 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
      v20 = v5 + 8;
      v21 = 1;
      v22 = v19 & 0x3FFFFFFFFFFFFFFELL;
      v23 = 1;
      do
      {
        v21 *= *(v20 - 1);
        v23 *= *v20;
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      v17 = v23 * v21;
      if (v19 == (v19 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_20:
        if (v17)
        {
          if ((v6 & 0x8000000000000000) != 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v25 = operator new(v4 - v5);
          bzero(v25, v6 & 0xFFFFFFFFFFFFFFF8);
          v26 = *a2;
          if (v6 >> 3 <= 1)
            v27 = 1;
          else
            v27 = v6 >> 3;
          v28 = a2[5];
          v29 = a2[8];
          v30 = v27 & 0x1FFFFFFFFFFFFFFELL;
          while (1)
          {
            if (v6 <= 7)
            {
              v31 = 0;
              v32 = *(unsigned __int8 *)(v16 + a1[8]);
              goto LABEL_42;
            }
            v33 = a1[5];
            if (v27 < 2)
              break;
            v36 = 0;
            v37 = 0;
            v38 = (_QWORD *)(v33 + 8);
            v39 = v27 & 0x1FFFFFFFFFFFFFFELL;
            v40 = v25 + 1;
            do
            {
              v36 += *(v38 - 1) * *(v40 - 1);
              v37 += *v38 * *v40;
              v40 += 2;
              v38 += 2;
              v39 -= 2;
            }
            while (v39);
            v34 = v37 + v36;
            v35 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30)
              goto LABEL_33;
LABEL_35:
            v32 = *(unsigned __int8 *)(v16 + a1[8] + v34);
            if (v27 < 2)
            {
              v31 = 0;
              v48 = 0;
LABEL_40:
              v54 = v27 - v48;
              v55 = v48;
              v56 = (uint64_t *)(v28 + 8 * v48);
              v57 = &v25[v55];
              do
              {
                v59 = *v57++;
                v58 = v59;
                v60 = *v56++;
                v31 += v60 * v58;
                --v54;
              }
              while (v54);
              goto LABEL_42;
            }
            v49 = 0;
            v50 = 0;
            v51 = v27 & 0x1FFFFFFFFFFFFFFELL;
            v52 = (_QWORD *)(v28 + 8);
            v53 = v25 + 1;
            do
            {
              v49 += *(v52 - 1) * *(v53 - 1);
              v50 += *v52 * *v53;
              v53 += 2;
              v52 += 2;
              v51 -= 2;
            }
            while (v51);
            v31 = v50 + v49;
            v48 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30)
              goto LABEL_40;
LABEL_42:
            _H1 = *(_WORD *)(v26 + 2 * (v29 + v31));
            __asm { FCVT            S1, H1 }
            v15 = (float)v32 == _S1;
            if ((int)(v6 >> 3) >= 1 && (float)v32 == _S1)
            {
              v67 = (v6 >> 3) + 1;
              v68 = v6 >> 3;
              while (1)
              {
                v69 = (v67 - 2);
                v70 = v25[v69] + 1;
                v25[v69] = v70;
                if (v70 < *(_QWORD *)&v5[v69 * 8])
                  break;
                v25[(v67 - 2)] = 0;
                LODWORD(v68) = v68 - 1;
                if ((unint64_t)--v67 <= 1)
                  goto LABEL_49;
              }
              if ((int)v68 > 0)
                continue;
            }
LABEL_49:
            operator delete(v25);
            return v15;
          }
          v34 = 0;
          v35 = 0;
LABEL_33:
          v41 = v27 - v35;
          v42 = v35;
          v43 = (uint64_t *)(v33 + v42 * 8);
          v44 = &v25[v42];
          do
          {
            v46 = *v44++;
            v45 = v46;
            v47 = *v43++;
            v34 += v47 * v45;
            --v41;
          }
          while (v41);
          goto LABEL_35;
        }
        return 1;
      }
    }
    else
    {
      v17 = 1;
      v18 = (char *)a1[2];
    }
    do
    {
      v24 = *(_QWORD *)v18;
      v18 += 8;
      v17 *= v24;
    }
    while (v18 != v4);
    goto LABEL_20;
  }
  return v15;
}

void sub_1911DEAF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t nitro::ndarray<int>::operator==<half>(uint64_t *a1, uint64_t *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;

  if (a2 == a1)
    return 1;
  v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  v6 = v4 - v5;
  v7 = (v4 - v5) >> 3;
  v8 = (_QWORD *)a2[2];
  if (v7 != (a2[3] - (uint64_t)v8) >> 3)
    return 0;
  v9 = v4 - v5;
  if (v4 == v5)
    return 1;
  v10 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
  if (*(_QWORD *)v5 != *v8)
    return 0;
  v11 = 1;
  do
  {
    v12 = v11;
    if (v10 == v11)
      break;
    v13 = *(_QWORD *)&v5[8 * v11];
    v14 = v8[v11++];
  }
  while (v13 == v14);
  v15 = v12 >= v7;
  if (v12 >= v7)
  {
    v16 = *a1;
    if (!*a1)
      return 1;
    if ((unint64_t)(v9 - 8) >= 8)
    {
      v19 = ((unint64_t)(v9 - 8) >> 3) + 1;
      v18 = &v5[8 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
      v20 = v5 + 8;
      v21 = 1;
      v22 = v19 & 0x3FFFFFFFFFFFFFFELL;
      v23 = 1;
      do
      {
        v21 *= *(v20 - 1);
        v23 *= *v20;
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      v17 = v23 * v21;
      if (v19 == (v19 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_20:
        if (v17)
        {
          if ((v6 & 0x8000000000000000) != 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v25 = operator new(v4 - v5);
          bzero(v25, v6 & 0xFFFFFFFFFFFFFFF8);
          v26 = *a2;
          if (v6 >> 3 <= 1)
            v27 = 1;
          else
            v27 = v6 >> 3;
          v28 = a2[5];
          v29 = a2[8];
          v30 = v27 & 0x1FFFFFFFFFFFFFFELL;
          while (1)
          {
            if (v6 <= 7)
            {
              v31 = 0;
              v32 = *(_DWORD *)(v16 + 4 * a1[8]);
              goto LABEL_42;
            }
            v33 = a1[5];
            if (v27 < 2)
              break;
            v36 = 0;
            v37 = 0;
            v38 = (_QWORD *)(v33 + 8);
            v39 = v27 & 0x1FFFFFFFFFFFFFFELL;
            v40 = v25 + 1;
            do
            {
              v36 += *(v38 - 1) * *(v40 - 1);
              v37 += *v38 * *v40;
              v40 += 2;
              v38 += 2;
              v39 -= 2;
            }
            while (v39);
            v34 = v37 + v36;
            v35 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30)
              goto LABEL_33;
LABEL_35:
            v32 = *(_DWORD *)(v16 + 4 * (a1[8] + v34));
            if (v27 < 2)
            {
              v31 = 0;
              v48 = 0;
LABEL_40:
              v54 = v27 - v48;
              v55 = v48;
              v56 = (uint64_t *)(v28 + 8 * v48);
              v57 = &v25[v55];
              do
              {
                v59 = *v57++;
                v58 = v59;
                v60 = *v56++;
                v31 += v60 * v58;
                --v54;
              }
              while (v54);
              goto LABEL_42;
            }
            v49 = 0;
            v50 = 0;
            v51 = v27 & 0x1FFFFFFFFFFFFFFELL;
            v52 = (_QWORD *)(v28 + 8);
            v53 = v25 + 1;
            do
            {
              v49 += *(v52 - 1) * *(v53 - 1);
              v50 += *v52 * *v53;
              v53 += 2;
              v52 += 2;
              v51 -= 2;
            }
            while (v51);
            v31 = v50 + v49;
            v48 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30)
              goto LABEL_40;
LABEL_42:
            _H1 = *(_WORD *)(v26 + 2 * (v29 + v31));
            __asm { FCVT            S1, H1 }
            v15 = (float)v32 == _S1;
            if ((int)(v6 >> 3) >= 1 && (float)v32 == _S1)
            {
              v67 = (v6 >> 3) + 1;
              v68 = v6 >> 3;
              while (1)
              {
                v69 = (v67 - 2);
                v70 = v25[v69] + 1;
                v25[v69] = v70;
                if (v70 < *(_QWORD *)&v5[v69 * 8])
                  break;
                v25[(v67 - 2)] = 0;
                LODWORD(v68) = v68 - 1;
                if ((unint64_t)--v67 <= 1)
                  goto LABEL_49;
              }
              if ((int)v68 > 0)
                continue;
            }
LABEL_49:
            operator delete(v25);
            return v15;
          }
          v34 = 0;
          v35 = 0;
LABEL_33:
          v41 = v27 - v35;
          v42 = v35;
          v43 = (uint64_t *)(v33 + v42 * 8);
          v44 = &v25[v42];
          do
          {
            v46 = *v44++;
            v45 = v46;
            v47 = *v43++;
            v34 += v47 * v45;
            --v41;
          }
          while (v41);
          goto LABEL_35;
        }
        return 1;
      }
    }
    else
    {
      v17 = 1;
      v18 = (char *)a1[2];
    }
    do
    {
      v24 = *(_QWORD *)v18;
      v18 += 8;
      v17 *= v24;
    }
    while (v18 != v4);
    goto LABEL_20;
  }
  return v15;
}

void sub_1911DEE48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t nitro::ndarray<half>::operator==<half>(uint64_t *a1, uint64_t *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;

  if (a2 == a1)
    return 1;
  v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  v6 = v4 - v5;
  v7 = (v4 - v5) >> 3;
  v8 = (_QWORD *)a2[2];
  if (v7 != (a2[3] - (uint64_t)v8) >> 3)
    return 0;
  v9 = v4 - v5;
  if (v4 == v5)
    return 1;
  v10 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
  if (*(_QWORD *)v5 != *v8)
    return 0;
  v11 = 1;
  do
  {
    v12 = v11;
    if (v10 == v11)
      break;
    v13 = *(_QWORD *)&v5[8 * v11];
    v14 = v8[v11++];
  }
  while (v13 == v14);
  v15 = v12 >= v7;
  if (v12 >= v7)
  {
    v16 = *a1;
    if (!*a1)
      return 1;
    if ((unint64_t)(v9 - 8) >= 8)
    {
      v19 = ((unint64_t)(v9 - 8) >> 3) + 1;
      v18 = &v5[8 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
      v20 = v5 + 8;
      v21 = 1;
      v22 = v19 & 0x3FFFFFFFFFFFFFFELL;
      v23 = 1;
      do
      {
        v21 *= *(v20 - 1);
        v23 *= *v20;
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      v17 = v23 * v21;
      if (v19 == (v19 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_20:
        if (v17)
        {
          if ((v6 & 0x8000000000000000) != 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v25 = operator new(v4 - v5);
          bzero(v25, v6 & 0xFFFFFFFFFFFFFFF8);
          v26 = *a2;
          if (v6 >> 3 <= 1)
            v27 = 1;
          else
            v27 = v6 >> 3;
          v28 = a2[5];
          v29 = a2[8];
          v30 = v27 & 0x1FFFFFFFFFFFFFFELL;
          while (1)
          {
            if (v6 <= 7)
            {
              v31 = 0;
              _H0 = *(_WORD *)(v16 + 2 * a1[8]);
              goto LABEL_42;
            }
            v33 = a1[5];
            if (v27 < 2)
              break;
            v36 = 0;
            v37 = 0;
            v38 = (_QWORD *)(v33 + 8);
            v39 = v27 & 0x1FFFFFFFFFFFFFFELL;
            v40 = v25 + 1;
            do
            {
              v36 += *(v38 - 1) * *(v40 - 1);
              v37 += *v38 * *v40;
              v40 += 2;
              v38 += 2;
              v39 -= 2;
            }
            while (v39);
            v34 = v37 + v36;
            v35 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30)
              goto LABEL_33;
LABEL_35:
            _H0 = *(_WORD *)(v16 + 2 * (a1[8] + v34));
            if (v27 < 2)
            {
              v31 = 0;
              v48 = 0;
LABEL_40:
              v54 = v27 - v48;
              v55 = v48;
              v56 = (uint64_t *)(v28 + 8 * v48);
              v57 = &v25[v55];
              do
              {
                v59 = *v57++;
                v58 = v59;
                v60 = *v56++;
                v31 += v60 * v58;
                --v54;
              }
              while (v54);
              goto LABEL_42;
            }
            v49 = 0;
            v50 = 0;
            v51 = v27 & 0x1FFFFFFFFFFFFFFELL;
            v52 = (_QWORD *)(v28 + 8);
            v53 = v25 + 1;
            do
            {
              v49 += *(v52 - 1) * *(v53 - 1);
              v50 += *v52 * *v53;
              v53 += 2;
              v52 += 2;
              v51 -= 2;
            }
            while (v51);
            v31 = v50 + v49;
            v48 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30)
              goto LABEL_40;
LABEL_42:
            _H1 = *(_WORD *)(v26 + 2 * (v29 + v31));
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            v15 = _S0 == _S1;
            if ((int)(v6 >> 3) >= 1 && _S0 == _S1)
            {
              v68 = (v6 >> 3) + 1;
              v69 = v6 >> 3;
              while (1)
              {
                v70 = (v68 - 2);
                v71 = v25[v70] + 1;
                v25[v70] = v71;
                if (v71 < *(_QWORD *)&v5[v70 * 8])
                  break;
                v25[(v68 - 2)] = 0;
                LODWORD(v69) = v69 - 1;
                if ((unint64_t)--v68 <= 1)
                  goto LABEL_49;
              }
              if ((int)v69 > 0)
                continue;
            }
LABEL_49:
            operator delete(v25);
            return v15;
          }
          v34 = 0;
          v35 = 0;
LABEL_33:
          v41 = v27 - v35;
          v42 = v35;
          v43 = (uint64_t *)(v33 + v42 * 8);
          v44 = &v25[v42];
          do
          {
            v46 = *v44++;
            v45 = v46;
            v47 = *v43++;
            v34 += v47 * v45;
            --v41;
          }
          while (v41);
          goto LABEL_35;
        }
        return 1;
      }
    }
    else
    {
      v17 = 1;
      v18 = (char *)a1[2];
    }
    do
    {
      v24 = *(_QWORD *)v18;
      v18 += 8;
      v17 *= v24;
    }
    while (v18 != v4);
    goto LABEL_20;
  }
  return v15;
}

void sub_1911DF198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t nitro::ndarray<float>::operator==<half>(uint64_t *a1, uint64_t *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;

  if (a2 == a1)
    return 1;
  v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  v6 = v4 - v5;
  v7 = (v4 - v5) >> 3;
  v8 = (_QWORD *)a2[2];
  if (v7 != (a2[3] - (uint64_t)v8) >> 3)
    return 0;
  v9 = v4 - v5;
  if (v4 == v5)
    return 1;
  v10 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
  if (*(_QWORD *)v5 != *v8)
    return 0;
  v11 = 1;
  do
  {
    v12 = v11;
    if (v10 == v11)
      break;
    v13 = *(_QWORD *)&v5[8 * v11];
    v14 = v8[v11++];
  }
  while (v13 == v14);
  v15 = v12 >= v7;
  if (v12 >= v7)
  {
    v16 = *a1;
    if (!*a1)
      return 1;
    if ((unint64_t)(v9 - 8) >= 8)
    {
      v19 = ((unint64_t)(v9 - 8) >> 3) + 1;
      v18 = &v5[8 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
      v20 = v5 + 8;
      v21 = 1;
      v22 = v19 & 0x3FFFFFFFFFFFFFFELL;
      v23 = 1;
      do
      {
        v21 *= *(v20 - 1);
        v23 *= *v20;
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      v17 = v23 * v21;
      if (v19 == (v19 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_20:
        if (v17)
        {
          if ((v6 & 0x8000000000000000) != 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v25 = operator new(v4 - v5);
          bzero(v25, v6 & 0xFFFFFFFFFFFFFFF8);
          v26 = *a2;
          if (v6 >> 3 <= 1)
            v27 = 1;
          else
            v27 = v6 >> 3;
          v28 = a2[5];
          v29 = a2[8];
          v30 = v27 & 0x1FFFFFFFFFFFFFFELL;
          while (1)
          {
            if (v6 <= 7)
            {
              v31 = 0;
              v32 = *(float *)(v16 + 4 * a1[8]);
              goto LABEL_42;
            }
            v33 = a1[5];
            if (v27 < 2)
              break;
            v36 = 0;
            v37 = 0;
            v38 = (_QWORD *)(v33 + 8);
            v39 = v27 & 0x1FFFFFFFFFFFFFFELL;
            v40 = v25 + 1;
            do
            {
              v36 += *(v38 - 1) * *(v40 - 1);
              v37 += *v38 * *v40;
              v40 += 2;
              v38 += 2;
              v39 -= 2;
            }
            while (v39);
            v34 = v37 + v36;
            v35 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30)
              goto LABEL_33;
LABEL_35:
            v32 = *(float *)(v16 + 4 * (a1[8] + v34));
            if (v27 < 2)
            {
              v31 = 0;
              v48 = 0;
LABEL_40:
              v54 = v27 - v48;
              v55 = v48;
              v56 = (uint64_t *)(v28 + 8 * v48);
              v57 = &v25[v55];
              do
              {
                v59 = *v57++;
                v58 = v59;
                v60 = *v56++;
                v31 += v60 * v58;
                --v54;
              }
              while (v54);
              goto LABEL_42;
            }
            v49 = 0;
            v50 = 0;
            v51 = v27 & 0x1FFFFFFFFFFFFFFELL;
            v52 = (_QWORD *)(v28 + 8);
            v53 = v25 + 1;
            do
            {
              v49 += *(v52 - 1) * *(v53 - 1);
              v50 += *v52 * *v53;
              v53 += 2;
              v52 += 2;
              v51 -= 2;
            }
            while (v51);
            v31 = v50 + v49;
            v48 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30)
              goto LABEL_40;
LABEL_42:
            _H1 = *(_WORD *)(v26 + 2 * (v29 + v31));
            __asm { FCVT            S1, H1 }
            v15 = v32 == _S1;
            if ((int)(v6 >> 3) >= 1 && v32 == _S1)
            {
              v67 = (v6 >> 3) + 1;
              v68 = v6 >> 3;
              while (1)
              {
                v69 = (v67 - 2);
                v70 = v25[v69] + 1;
                v25[v69] = v70;
                if (v70 < *(_QWORD *)&v5[v69 * 8])
                  break;
                v25[(v67 - 2)] = 0;
                LODWORD(v68) = v68 - 1;
                if ((unint64_t)--v67 <= 1)
                  goto LABEL_49;
              }
              if ((int)v68 > 0)
                continue;
            }
LABEL_49:
            operator delete(v25);
            return v15;
          }
          v34 = 0;
          v35 = 0;
LABEL_33:
          v41 = v27 - v35;
          v42 = v35;
          v43 = (uint64_t *)(v33 + v42 * 8);
          v44 = &v25[v42];
          do
          {
            v46 = *v44++;
            v45 = v46;
            v47 = *v43++;
            v34 += v47 * v45;
            --v41;
          }
          while (v41);
          goto LABEL_35;
        }
        return 1;
      }
    }
    else
    {
      v17 = 1;
      v18 = (char *)a1[2];
    }
    do
    {
      v24 = *(_QWORD *)v18;
      v18 += 8;
      v17 *= v24;
    }
    while (v18 != v4);
    goto LABEL_20;
  }
  return v15;
}

void sub_1911DF4E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1911DF814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1911DF87C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

uint64_t nitro::ndarray<unsigned char>::operator==<float>(uint64_t *a1, uint64_t *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;

  if (a2 == a1)
    return 1;
  v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  v6 = v4 - v5;
  v7 = (v4 - v5) >> 3;
  v8 = (_QWORD *)a2[2];
  if (v7 != (a2[3] - (uint64_t)v8) >> 3)
    return 0;
  v9 = v4 - v5;
  if (v4 == v5)
    return 1;
  v10 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
  if (*(_QWORD *)v5 != *v8)
    return 0;
  v11 = 1;
  do
  {
    v12 = v11;
    if (v10 == v11)
      break;
    v13 = *(_QWORD *)&v5[8 * v11];
    v14 = v8[v11++];
  }
  while (v13 == v14);
  v15 = v12 >= v7;
  if (v12 >= v7)
  {
    v16 = *a1;
    if (!*a1)
      return 1;
    if ((unint64_t)(v9 - 8) >= 8)
    {
      v19 = ((unint64_t)(v9 - 8) >> 3) + 1;
      v18 = &v5[8 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
      v20 = v5 + 8;
      v21 = 1;
      v22 = v19 & 0x3FFFFFFFFFFFFFFELL;
      v23 = 1;
      do
      {
        v21 *= *(v20 - 1);
        v23 *= *v20;
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      v17 = v23 * v21;
      if (v19 == (v19 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_20:
        if (v17)
        {
          if ((v6 & 0x8000000000000000) != 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v25 = operator new(v4 - v5);
          bzero(v25, v6 & 0xFFFFFFFFFFFFFFF8);
          v26 = *a2;
          if (v6 >> 3 <= 1)
            v27 = 1;
          else
            v27 = v6 >> 3;
          v28 = a2[5];
          v29 = a2[8];
          v30 = v27 & 0x1FFFFFFFFFFFFFFELL;
          while (1)
          {
            if (v6 <= 7)
            {
              v31 = 0;
              v32 = *(unsigned __int8 *)(v16 + a1[8]);
              goto LABEL_42;
            }
            v33 = a1[5];
            if (v27 < 2)
              break;
            v36 = 0;
            v37 = 0;
            v38 = (_QWORD *)(v33 + 8);
            v39 = v27 & 0x1FFFFFFFFFFFFFFELL;
            v40 = v25 + 1;
            do
            {
              v36 += *(v38 - 1) * *(v40 - 1);
              v37 += *v38 * *v40;
              v40 += 2;
              v38 += 2;
              v39 -= 2;
            }
            while (v39);
            v34 = v37 + v36;
            v35 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30)
              goto LABEL_33;
LABEL_35:
            v32 = *(unsigned __int8 *)(v16 + a1[8] + v34);
            if (v27 < 2)
            {
              v31 = 0;
              v48 = 0;
LABEL_40:
              v54 = v27 - v48;
              v55 = v48;
              v56 = (uint64_t *)(v28 + 8 * v48);
              v57 = &v25[v55];
              do
              {
                v59 = *v57++;
                v58 = v59;
                v60 = *v56++;
                v31 += v60 * v58;
                --v54;
              }
              while (v54);
              goto LABEL_42;
            }
            v49 = 0;
            v50 = 0;
            v51 = v27 & 0x1FFFFFFFFFFFFFFELL;
            v52 = (_QWORD *)(v28 + 8);
            v53 = v25 + 1;
            do
            {
              v49 += *(v52 - 1) * *(v53 - 1);
              v50 += *v52 * *v53;
              v53 += 2;
              v52 += 2;
              v51 -= 2;
            }
            while (v51);
            v31 = v50 + v49;
            v48 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30)
              goto LABEL_40;
LABEL_42:
            v61 = *(float *)(v26 + 4 * (v29 + v31));
            v15 = v61 == (float)v32;
            if ((int)(v6 >> 3) >= 1 && v61 == (float)v32)
            {
              v62 = (v6 >> 3) + 1;
              v63 = v6 >> 3;
              while (1)
              {
                v64 = (v62 - 2);
                v65 = v25[v64] + 1;
                v25[v64] = v65;
                if (v65 < *(_QWORD *)&v5[v64 * 8])
                  break;
                v25[(v62 - 2)] = 0;
                LODWORD(v63) = v63 - 1;
                if ((unint64_t)--v62 <= 1)
                  goto LABEL_49;
              }
              if ((int)v63 > 0)
                continue;
            }
LABEL_49:
            operator delete(v25);
            return v15;
          }
          v34 = 0;
          v35 = 0;
LABEL_33:
          v41 = v27 - v35;
          v42 = v35;
          v43 = (uint64_t *)(v33 + v42 * 8);
          v44 = &v25[v42];
          do
          {
            v46 = *v44++;
            v45 = v46;
            v47 = *v43++;
            v34 += v47 * v45;
            --v41;
          }
          while (v41);
          goto LABEL_35;
        }
        return 1;
      }
    }
    else
    {
      v17 = 1;
      v18 = (char *)a1[2];
    }
    do
    {
      v24 = *(_QWORD *)v18;
      v18 += 8;
      v17 *= v24;
    }
    while (v18 != v4);
    goto LABEL_20;
  }
  return v15;
}

void sub_1911DFBD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t nitro::ndarray<int>::operator==<float>(uint64_t *a1, uint64_t *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;

  if (a2 == a1)
    return 1;
  v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  v6 = v4 - v5;
  v7 = (v4 - v5) >> 3;
  v8 = (_QWORD *)a2[2];
  if (v7 != (a2[3] - (uint64_t)v8) >> 3)
    return 0;
  v9 = v4 - v5;
  if (v4 == v5)
    return 1;
  v10 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
  if (*(_QWORD *)v5 != *v8)
    return 0;
  v11 = 1;
  do
  {
    v12 = v11;
    if (v10 == v11)
      break;
    v13 = *(_QWORD *)&v5[8 * v11];
    v14 = v8[v11++];
  }
  while (v13 == v14);
  v15 = v12 >= v7;
  if (v12 >= v7)
  {
    v16 = *a1;
    if (!*a1)
      return 1;
    if ((unint64_t)(v9 - 8) >= 8)
    {
      v19 = ((unint64_t)(v9 - 8) >> 3) + 1;
      v18 = &v5[8 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
      v20 = v5 + 8;
      v21 = 1;
      v22 = v19 & 0x3FFFFFFFFFFFFFFELL;
      v23 = 1;
      do
      {
        v21 *= *(v20 - 1);
        v23 *= *v20;
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      v17 = v23 * v21;
      if (v19 == (v19 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_20:
        if (v17)
        {
          if ((v6 & 0x8000000000000000) != 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v25 = operator new(v4 - v5);
          bzero(v25, v6 & 0xFFFFFFFFFFFFFFF8);
          v26 = *a2;
          if (v6 >> 3 <= 1)
            v27 = 1;
          else
            v27 = v6 >> 3;
          v28 = a2[5];
          v29 = a2[8];
          v30 = v27 & 0x1FFFFFFFFFFFFFFELL;
          while (1)
          {
            if (v6 <= 7)
            {
              v31 = 0;
              v32 = *(_DWORD *)(v16 + 4 * a1[8]);
              goto LABEL_42;
            }
            v33 = a1[5];
            if (v27 < 2)
              break;
            v36 = 0;
            v37 = 0;
            v38 = (_QWORD *)(v33 + 8);
            v39 = v27 & 0x1FFFFFFFFFFFFFFELL;
            v40 = v25 + 1;
            do
            {
              v36 += *(v38 - 1) * *(v40 - 1);
              v37 += *v38 * *v40;
              v40 += 2;
              v38 += 2;
              v39 -= 2;
            }
            while (v39);
            v34 = v37 + v36;
            v35 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30)
              goto LABEL_33;
LABEL_35:
            v32 = *(_DWORD *)(v16 + 4 * (a1[8] + v34));
            if (v27 < 2)
            {
              v31 = 0;
              v48 = 0;
LABEL_40:
              v54 = v27 - v48;
              v55 = v48;
              v56 = (uint64_t *)(v28 + 8 * v48);
              v57 = &v25[v55];
              do
              {
                v59 = *v57++;
                v58 = v59;
                v60 = *v56++;
                v31 += v60 * v58;
                --v54;
              }
              while (v54);
              goto LABEL_42;
            }
            v49 = 0;
            v50 = 0;
            v51 = v27 & 0x1FFFFFFFFFFFFFFELL;
            v52 = (_QWORD *)(v28 + 8);
            v53 = v25 + 1;
            do
            {
              v49 += *(v52 - 1) * *(v53 - 1);
              v50 += *v52 * *v53;
              v53 += 2;
              v52 += 2;
              v51 -= 2;
            }
            while (v51);
            v31 = v50 + v49;
            v48 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30)
              goto LABEL_40;
LABEL_42:
            v61 = *(float *)(v26 + 4 * (v29 + v31));
            v15 = v61 == (float)v32;
            if ((int)(v6 >> 3) >= 1 && v61 == (float)v32)
            {
              v62 = (v6 >> 3) + 1;
              v63 = v6 >> 3;
              while (1)
              {
                v64 = (v62 - 2);
                v65 = v25[v64] + 1;
                v25[v64] = v65;
                if (v65 < *(_QWORD *)&v5[v64 * 8])
                  break;
                v25[(v62 - 2)] = 0;
                LODWORD(v63) = v63 - 1;
                if ((unint64_t)--v62 <= 1)
                  goto LABEL_49;
              }
              if ((int)v63 > 0)
                continue;
            }
LABEL_49:
            operator delete(v25);
            return v15;
          }
          v34 = 0;
          v35 = 0;
LABEL_33:
          v41 = v27 - v35;
          v42 = v35;
          v43 = (uint64_t *)(v33 + v42 * 8);
          v44 = &v25[v42];
          do
          {
            v46 = *v44++;
            v45 = v46;
            v47 = *v43++;
            v34 += v47 * v45;
            --v41;
          }
          while (v41);
          goto LABEL_35;
        }
        return 1;
      }
    }
    else
    {
      v17 = 1;
      v18 = (char *)a1[2];
    }
    do
    {
      v24 = *(_QWORD *)v18;
      v18 += 8;
      v17 *= v24;
    }
    while (v18 != v4);
    goto LABEL_20;
  }
  return v15;
}

void sub_1911DFF20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t nitro::ndarray<half>::operator==<float>(uint64_t *a1, uint64_t *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;

  if (a2 == a1)
    return 1;
  v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  v6 = v4 - v5;
  v7 = (v4 - v5) >> 3;
  v8 = (_QWORD *)a2[2];
  if (v7 != (a2[3] - (uint64_t)v8) >> 3)
    return 0;
  v9 = v4 - v5;
  if (v4 == v5)
    return 1;
  v10 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
  if (*(_QWORD *)v5 != *v8)
    return 0;
  v11 = 1;
  do
  {
    v12 = v11;
    if (v10 == v11)
      break;
    v13 = *(_QWORD *)&v5[8 * v11];
    v14 = v8[v11++];
  }
  while (v13 == v14);
  v15 = v12 >= v7;
  if (v12 >= v7)
  {
    v16 = *a1;
    if (!*a1)
      return 1;
    if ((unint64_t)(v9 - 8) >= 8)
    {
      v19 = ((unint64_t)(v9 - 8) >> 3) + 1;
      v18 = &v5[8 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
      v20 = v5 + 8;
      v21 = 1;
      v22 = v19 & 0x3FFFFFFFFFFFFFFELL;
      v23 = 1;
      do
      {
        v21 *= *(v20 - 1);
        v23 *= *v20;
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      v17 = v23 * v21;
      if (v19 == (v19 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_20:
        if (v17)
        {
          if ((v6 & 0x8000000000000000) != 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v25 = operator new(v4 - v5);
          bzero(v25, v6 & 0xFFFFFFFFFFFFFFF8);
          v26 = *a2;
          if (v6 >> 3 <= 1)
            v27 = 1;
          else
            v27 = v6 >> 3;
          v28 = a2[5];
          v29 = a2[8];
          v30 = v27 & 0x1FFFFFFFFFFFFFFELL;
          while (1)
          {
            if (v6 <= 7)
            {
              v31 = 0;
              _H0 = *(_WORD *)(v16 + 2 * a1[8]);
              goto LABEL_42;
            }
            v33 = a1[5];
            if (v27 < 2)
              break;
            v36 = 0;
            v37 = 0;
            v38 = (_QWORD *)(v33 + 8);
            v39 = v27 & 0x1FFFFFFFFFFFFFFELL;
            v40 = v25 + 1;
            do
            {
              v36 += *(v38 - 1) * *(v40 - 1);
              v37 += *v38 * *v40;
              v40 += 2;
              v38 += 2;
              v39 -= 2;
            }
            while (v39);
            v34 = v37 + v36;
            v35 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30)
              goto LABEL_33;
LABEL_35:
            _H0 = *(_WORD *)(v16 + 2 * (a1[8] + v34));
            if (v27 < 2)
            {
              v31 = 0;
              v48 = 0;
LABEL_40:
              v54 = v27 - v48;
              v55 = v48;
              v56 = (uint64_t *)(v28 + 8 * v48);
              v57 = &v25[v55];
              do
              {
                v59 = *v57++;
                v58 = v59;
                v60 = *v56++;
                v31 += v60 * v58;
                --v54;
              }
              while (v54);
              goto LABEL_42;
            }
            v49 = 0;
            v50 = 0;
            v51 = v27 & 0x1FFFFFFFFFFFFFFELL;
            v52 = (_QWORD *)(v28 + 8);
            v53 = v25 + 1;
            do
            {
              v49 += *(v52 - 1) * *(v53 - 1);
              v50 += *v52 * *v53;
              v53 += 2;
              v52 += 2;
              v51 -= 2;
            }
            while (v51);
            v31 = v50 + v49;
            v48 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30)
              goto LABEL_40;
LABEL_42:
            __asm { FCVT            S0, H0 }
            v66 = *(float *)(v26 + 4 * (v29 + v31));
            v15 = v66 == _S0;
            if ((int)(v6 >> 3) >= 1 && v66 == _S0)
            {
              v67 = (v6 >> 3) + 1;
              v68 = v6 >> 3;
              while (1)
              {
                v69 = (v67 - 2);
                v70 = v25[v69] + 1;
                v25[v69] = v70;
                if (v70 < *(_QWORD *)&v5[v69 * 8])
                  break;
                v25[(v67 - 2)] = 0;
                LODWORD(v68) = v68 - 1;
                if ((unint64_t)--v67 <= 1)
                  goto LABEL_49;
              }
              if ((int)v68 > 0)
                continue;
            }
LABEL_49:
            operator delete(v25);
            return v15;
          }
          v34 = 0;
          v35 = 0;
LABEL_33:
          v41 = v27 - v35;
          v42 = v35;
          v43 = (uint64_t *)(v33 + v42 * 8);
          v44 = &v25[v42];
          do
          {
            v46 = *v44++;
            v45 = v46;
            v47 = *v43++;
            v34 += v47 * v45;
            --v41;
          }
          while (v41);
          goto LABEL_35;
        }
        return 1;
      }
    }
    else
    {
      v17 = 1;
      v18 = (char *)a1[2];
    }
    do
    {
      v24 = *(_QWORD *)v18;
      v18 += 8;
      v17 *= v24;
    }
    while (v18 != v4);
    goto LABEL_20;
  }
  return v15;
}

void sub_1911E026C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t nitro::ndarray<float>::operator==<float>(uint64_t *a1, uint64_t *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;

  if (a2 == a1)
    return 1;
  v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  v6 = v4 - v5;
  v7 = (v4 - v5) >> 3;
  v8 = (_QWORD *)a2[2];
  if (v7 != (a2[3] - (uint64_t)v8) >> 3)
    return 0;
  v9 = v4 - v5;
  if (v4 == v5)
    return 1;
  v10 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
  if (*(_QWORD *)v5 != *v8)
    return 0;
  v11 = 1;
  do
  {
    v12 = v11;
    if (v10 == v11)
      break;
    v13 = *(_QWORD *)&v5[8 * v11];
    v14 = v8[v11++];
  }
  while (v13 == v14);
  v15 = v12 >= v7;
  if (v12 >= v7)
  {
    v16 = *a1;
    if (!*a1)
      return 1;
    if ((unint64_t)(v9 - 8) >= 8)
    {
      v19 = ((unint64_t)(v9 - 8) >> 3) + 1;
      v18 = &v5[8 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
      v20 = v5 + 8;
      v21 = 1;
      v22 = v19 & 0x3FFFFFFFFFFFFFFELL;
      v23 = 1;
      do
      {
        v21 *= *(v20 - 1);
        v23 *= *v20;
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      v17 = v23 * v21;
      if (v19 == (v19 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_20:
        if (v17)
        {
          if ((v6 & 0x8000000000000000) != 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v25 = operator new(v4 - v5);
          bzero(v25, v6 & 0xFFFFFFFFFFFFFFF8);
          v26 = *a2;
          if (v6 >> 3 <= 1)
            v27 = 1;
          else
            v27 = v6 >> 3;
          v28 = a2[5];
          v29 = a2[8];
          v30 = v27 & 0x1FFFFFFFFFFFFFFELL;
          while (1)
          {
            if (v6 <= 7)
            {
              v31 = 0;
              v32 = *(float *)(v16 + 4 * a1[8]);
              goto LABEL_42;
            }
            v33 = a1[5];
            if (v27 < 2)
              break;
            v36 = 0;
            v37 = 0;
            v38 = (_QWORD *)(v33 + 8);
            v39 = v27 & 0x1FFFFFFFFFFFFFFELL;
            v40 = v25 + 1;
            do
            {
              v36 += *(v38 - 1) * *(v40 - 1);
              v37 += *v38 * *v40;
              v40 += 2;
              v38 += 2;
              v39 -= 2;
            }
            while (v39);
            v34 = v37 + v36;
            v35 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30)
              goto LABEL_33;
LABEL_35:
            v32 = *(float *)(v16 + 4 * (a1[8] + v34));
            if (v27 < 2)
            {
              v31 = 0;
              v48 = 0;
LABEL_40:
              v54 = v27 - v48;
              v55 = v48;
              v56 = (uint64_t *)(v28 + 8 * v48);
              v57 = &v25[v55];
              do
              {
                v59 = *v57++;
                v58 = v59;
                v60 = *v56++;
                v31 += v60 * v58;
                --v54;
              }
              while (v54);
              goto LABEL_42;
            }
            v49 = 0;
            v50 = 0;
            v51 = v27 & 0x1FFFFFFFFFFFFFFELL;
            v52 = (_QWORD *)(v28 + 8);
            v53 = v25 + 1;
            do
            {
              v49 += *(v52 - 1) * *(v53 - 1);
              v50 += *v52 * *v53;
              v53 += 2;
              v52 += 2;
              v51 -= 2;
            }
            while (v51);
            v31 = v50 + v49;
            v48 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30)
              goto LABEL_40;
LABEL_42:
            v61 = *(float *)(v26 + 4 * (v29 + v31));
            v15 = v32 == v61;
            if ((int)(v6 >> 3) >= 1 && v32 == v61)
            {
              v62 = (v6 >> 3) + 1;
              v63 = v6 >> 3;
              while (1)
              {
                v64 = (v62 - 2);
                v65 = v25[v64] + 1;
                v25[v64] = v65;
                if (v65 < *(_QWORD *)&v5[v64 * 8])
                  break;
                v25[(v62 - 2)] = 0;
                LODWORD(v63) = v63 - 1;
                if ((unint64_t)--v62 <= 1)
                  goto LABEL_49;
              }
              if ((int)v63 > 0)
                continue;
            }
LABEL_49:
            operator delete(v25);
            return v15;
          }
          v34 = 0;
          v35 = 0;
LABEL_33:
          v41 = v27 - v35;
          v42 = v35;
          v43 = (uint64_t *)(v33 + v42 * 8);
          v44 = &v25[v42];
          do
          {
            v46 = *v44++;
            v45 = v46;
            v47 = *v43++;
            v34 += v47 * v45;
            --v41;
          }
          while (v41);
          goto LABEL_35;
        }
        return 1;
      }
    }
    else
    {
      v17 = 1;
      v18 = (char *)a1[2];
    }
    do
    {
      v24 = *(_QWORD *)v18;
      v18 += 8;
      v17 *= v24;
    }
    while (v18 != v4);
    goto LABEL_20;
  }
  return v15;
}

void sub_1911E05B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray_container::visit<nitro::ndarray_container::negate(void)::$_0>(nitro::ndarray_container::negate(void)::$_0)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1911E08E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1911E094C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

_QWORD *nitro::ndarray<unsigned char>::negate(_QWORD *a1)
{
  char *v2;
  char *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;

  v3 = (char *)a1[2];
  v2 = (char *)a1[3];
  if (v2 == v3 || !*a1)
    return a1;
  v4 = v2 - v3 - 8;
  if (v4 < 8)
  {
    v5 = 1;
    v6 = (char *)a1[2];
    do
    {
LABEL_8:
      v12 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v12;
    }
    while (v6 != v2);
    goto LABEL_9;
  }
  v7 = (v4 >> 3) + 1;
  v6 = &v3[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
  v8 = v3 + 8;
  v9 = 1;
  v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
  v11 = 1;
  do
  {
    v9 *= *(v8 - 1);
    v11 *= *v8;
    v8 += 2;
    v10 -= 2;
  }
  while (v10);
  v5 = v11 * v9;
  if (v7 != (v7 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v5)
  {
    v13 = v2 - v3;
    if (v2 - v3 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v14 = operator new(v2 - v3);
    bzero(v14, v13 & 0xFFFFFFFFFFFFFFF8);
    v15 = v13 >> 3;
    if ((unint64_t)(v13 >> 3) <= 1)
      v15 = 1;
    while (1)
    {
      if ((unint64_t)v13 < 8)
      {
        v16 = 0;
        goto LABEL_22;
      }
      v17 = a1[5];
      if (v15 < 2)
        break;
      v19 = 0;
      v20 = 0;
      v21 = (_QWORD *)(v17 + 8);
      v22 = v15 & 0xFFFFFFFFFFFFFFFELL;
      v23 = v14 + 1;
      do
      {
        v19 += *(v21 - 1) * *(v23 - 1);
        v20 += *v21 * *v23;
        v23 += 2;
        v21 += 2;
        v22 -= 2;
      }
      while (v22);
      v16 = v20 + v19;
      v18 = v15 & 0xFFFFFFFFFFFFFFFELL;
      if (v15 != (v15 & 0xFFFFFFFFFFFFFFFELL))
        goto LABEL_20;
LABEL_22:
      *(_BYTE *)(*a1 + a1[8] + v16) = -*(_BYTE *)(*a1 + a1[8] + v16);
      if ((int)((unint64_t)v13 >> 3) >= 1)
      {
        v31 = a1[2];
        v32 = ((unint64_t)v13 >> 3) + 1;
        v33 = (unint64_t)v13 >> 3;
        while (1)
        {
          v34 = (v32 - 2);
          v35 = v14[v34] + 1;
          v14[v34] = v35;
          if (v35 < *(_QWORD *)(v31 + v34 * 8))
            break;
          v14[(v32 - 2)] = 0;
          LODWORD(v33) = v33 - 1;
          if ((unint64_t)--v32 <= 1)
            goto LABEL_28;
        }
        if ((int)v33 > 0)
          continue;
      }
LABEL_28:
      operator delete(v14);
      return a1;
    }
    v16 = 0;
    v18 = 0;
LABEL_20:
    v24 = v15 - v18;
    v25 = v18;
    v26 = (uint64_t *)(v17 + v25 * 8);
    v27 = &v14[v25];
    do
    {
      v29 = *v27++;
      v28 = v29;
      v30 = *v26++;
      v16 += v30 * v28;
      --v24;
    }
    while (v24);
    goto LABEL_22;
  }
  return a1;
}

void sub_1911E0B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *nitro::ndarray<int>::negate(uint64_t *a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v3 = (char *)a1[2];
  v2 = (char *)a1[3];
  if (v2 == v3)
    return a1;
  v4 = *a1;
  if (!*a1)
    return a1;
  v5 = v2 - v3 - 8;
  if (v5 < 8)
  {
    v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v2);
    goto LABEL_9;
  }
  v8 = (v5 >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6)
  {
    v14 = v2 - v3;
    if (v2 - v3 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v15 = operator new(v2 - v3);
    bzero(v15, v14 & 0xFFFFFFFFFFFFFFF8);
    if (v14 >> 3 <= 1)
      v16 = 1;
    else
      v16 = v14 >> 3;
    v17 = a1[8];
    while (1)
    {
      if (v14 < 8)
      {
        v18 = 0;
        goto LABEL_24;
      }
      v19 = a1[5];
      if (v16 < 2)
        break;
      v21 = 0;
      v22 = 0;
      v23 = (_QWORD *)(v19 + 8);
      v24 = v16 & 0x1FFFFFFFFFFFFFFELL;
      v25 = v15 + 1;
      do
      {
        v21 += *(v23 - 1) * *(v25 - 1);
        v22 += *v23 * *v25;
        v25 += 2;
        v23 += 2;
        v24 -= 2;
      }
      while (v24);
      v18 = v22 + v21;
      v20 = v16 & 0x1FFFFFFFFFFFFFFELL;
      if (v16 != (v16 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_22;
LABEL_24:
      *(_DWORD *)(v4 + 4 * (v17 + v18)) = -*(_DWORD *)(v4 + 4 * (v17 + v18));
      if ((int)(v14 >> 3) >= 1)
      {
        v33 = (v14 >> 3) + 1;
        v34 = v14 >> 3;
        while (1)
        {
          v35 = (v33 - 2);
          v36 = v15[v35] + 1;
          v15[v35] = v36;
          if (v36 < *(_QWORD *)&v3[v35 * 8])
            break;
          v15[(v33 - 2)] = 0;
          LODWORD(v34) = v34 - 1;
          if ((unint64_t)--v33 <= 1)
            goto LABEL_30;
        }
        if ((int)v34 > 0)
          continue;
      }
LABEL_30:
      operator delete(v15);
      return a1;
    }
    v18 = 0;
    v20 = 0;
LABEL_22:
    v26 = v16 - v20;
    v27 = v20;
    v28 = (uint64_t *)(v19 + v27 * 8);
    v29 = &v15[v27];
    do
    {
      v31 = *v29++;
      v30 = v31;
      v32 = *v28++;
      v18 += v32 * v30;
      --v26;
    }
    while (v26);
    goto LABEL_24;
  }
  return a1;
}

void sub_1911E0DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *nitro::ndarray<half>::negate(uint64_t *a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;

  v3 = (char *)a1[2];
  v2 = (char *)a1[3];
  if (v2 == v3)
    return a1;
  v4 = *a1;
  if (!*a1)
    return a1;
  v5 = v2 - v3 - 8;
  if (v5 < 8)
  {
    v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v2);
    goto LABEL_9;
  }
  v8 = (v5 >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6)
  {
    v14 = v2 - v3;
    if (v2 - v3 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v15 = operator new(v2 - v3);
    bzero(v15, v14 & 0xFFFFFFFFFFFFFFF8);
    if (v14 >> 3 <= 1)
      v16 = 1;
    else
      v16 = v14 >> 3;
    v17 = a1[8];
    while (1)
    {
      if (v14 < 8)
      {
        v18 = 0;
        goto LABEL_24;
      }
      v19 = a1[5];
      if (v16 < 2)
        break;
      v21 = 0;
      v22 = 0;
      v23 = (_QWORD *)(v19 + 8);
      v24 = v16 & 0x1FFFFFFFFFFFFFFELL;
      v25 = v15 + 1;
      do
      {
        v21 += *(v23 - 1) * *(v25 - 1);
        v22 += *v23 * *v25;
        v25 += 2;
        v23 += 2;
        v24 -= 2;
      }
      while (v24);
      v18 = v22 + v21;
      v20 = v16 & 0x1FFFFFFFFFFFFFFELL;
      if (v16 != (v16 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_22;
LABEL_24:
      v33 = 2 * (v17 + v18);
      _H0 = *(_WORD *)(v4 + v33);
      __asm { FCVT            S0, H0 }
      _S0 = -_S0;
      __asm { FCVT            H0, S0 }
      *(_WORD *)(v4 + v33) = LOWORD(_S0);
      if ((int)(v14 >> 3) >= 1)
      {
        v41 = (v14 >> 3) + 1;
        v42 = v14 >> 3;
        while (1)
        {
          v43 = (v41 - 2);
          v44 = v15[v43] + 1;
          v15[v43] = v44;
          if (v44 < *(_QWORD *)&v3[v43 * 8])
            break;
          v15[(v41 - 2)] = 0;
          LODWORD(v42) = v42 - 1;
          if ((unint64_t)--v41 <= 1)
            goto LABEL_30;
        }
        if ((int)v42 > 0)
          continue;
      }
LABEL_30:
      operator delete(v15);
      return a1;
    }
    v18 = 0;
    v20 = 0;
LABEL_22:
    v26 = v16 - v20;
    v27 = v20;
    v28 = (uint64_t *)(v19 + v27 * 8);
    v29 = &v15[v27];
    do
    {
      v31 = *v29++;
      v30 = v31;
      v32 = *v28++;
      v18 += v32 * v30;
      --v26;
    }
    while (v26);
    goto LABEL_24;
  }
  return a1;
}

void sub_1911E0FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *nitro::ndarray<float>::negate(uint64_t *a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v3 = (char *)a1[2];
  v2 = (char *)a1[3];
  if (v2 == v3)
    return a1;
  v4 = *a1;
  if (!*a1)
    return a1;
  v5 = v2 - v3 - 8;
  if (v5 < 8)
  {
    v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v2);
    goto LABEL_9;
  }
  v8 = (v5 >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6)
  {
    v14 = v2 - v3;
    if (v2 - v3 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v15 = operator new(v2 - v3);
    bzero(v15, v14 & 0xFFFFFFFFFFFFFFF8);
    if (v14 >> 3 <= 1)
      v16 = 1;
    else
      v16 = v14 >> 3;
    v17 = a1[8];
    while (1)
    {
      if (v14 < 8)
      {
        v18 = 0;
        goto LABEL_24;
      }
      v19 = a1[5];
      if (v16 < 2)
        break;
      v21 = 0;
      v22 = 0;
      v23 = (_QWORD *)(v19 + 8);
      v24 = v16 & 0x1FFFFFFFFFFFFFFELL;
      v25 = v15 + 1;
      do
      {
        v21 += *(v23 - 1) * *(v25 - 1);
        v22 += *v23 * *v25;
        v25 += 2;
        v23 += 2;
        v24 -= 2;
      }
      while (v24);
      v18 = v22 + v21;
      v20 = v16 & 0x1FFFFFFFFFFFFFFELL;
      if (v16 != (v16 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_22;
LABEL_24:
      *(float *)(v4 + 4 * (v17 + v18)) = -*(float *)(v4 + 4 * (v17 + v18));
      if ((int)(v14 >> 3) >= 1)
      {
        v33 = (v14 >> 3) + 1;
        v34 = v14 >> 3;
        while (1)
        {
          v35 = (v33 - 2);
          v36 = v15[v35] + 1;
          v15[v35] = v36;
          if (v36 < *(_QWORD *)&v3[v35 * 8])
            break;
          v15[(v33 - 2)] = 0;
          LODWORD(v34) = v34 - 1;
          if ((unint64_t)--v33 <= 1)
            goto LABEL_30;
        }
        if ((int)v34 > 0)
          continue;
      }
LABEL_30:
      operator delete(v15);
      return a1;
    }
    v18 = 0;
    v20 = 0;
LABEL_22:
    v26 = v16 - v20;
    v27 = v20;
    v28 = (uint64_t *)(v19 + v27 * 8);
    v29 = &v15[v27];
    do
    {
      v31 = *v29++;
      v30 = v31;
      v32 = *v28++;
      v18 += v32 * v30;
      --v26;
    }
    while (v26);
    goto LABEL_24;
  }
  return a1;
}

void sub_1911E11F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray_container::visit<nitro::ndarray_container const,nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0,(void *)0>(nitro::ndarray_container const &,nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 230, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 230, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1911E1520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1911E1588(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1911E18C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1911E192C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

uint64_t *nitro::ndarray<int>::assign<unsigned char>(uint64_t *a1, uint64_t *a2, double a3, double a4, int8x16_t a5, double a6, int8x16_t a7)
{
  char *v8;
  char *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v9 = (char *)a1[2];
  v8 = (char *)a1[3];
  v10 = (v8 - v9) >> 3;
  v11 = (_QWORD *)a2[2];
  if (v10 != (a2[3] - (uint64_t)v11) >> 3)
    goto LABEL_13;
  if (v8 == v9)
    return a1;
  v12 = v10 <= 1 ? 1 : (v8 - v9) >> 3;
  if (*(_QWORD *)v9 != *v11)
    goto LABEL_13;
  v13 = 1;
  do
  {
    v14 = v13;
    if (v12 == v13)
      break;
    v15 = *(_QWORD *)&v9[8 * v13];
    v16 = v11[v13++];
  }
  while (v15 == v16);
  if (v14 < v10)
LABEL_13:
    nitro::ndarray<int>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(void)#1}::operator()();
  if (v8 != v9 && *a1)
  {
    v17 = v8 - v9 - 8;
    if (v17 >= 8)
    {
      v20 = (v17 >> 3) + 1;
      v19 = &v9[8 * (v20 & 0x3FFFFFFFFFFFFFFELL)];
      v21 = v9 + 8;
      v22 = 1;
      v23 = v20 & 0x3FFFFFFFFFFFFFFELL;
      v24 = 1;
      do
      {
        v22 *= *(v21 - 1);
        v24 *= *v21;
        v21 += 2;
        v23 -= 2;
      }
      while (v23);
      v18 = v24 * v22;
      if (v20 == (v20 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_21:
        if (v18)
          nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(a1, a2, a3, a4, a5, a6, a7);
        return a1;
      }
    }
    else
    {
      v18 = 1;
      v19 = (char *)a1[2];
    }
    do
    {
      v25 = *(_QWORD *)v19;
      v19 += 8;
      v18 *= v25;
    }
    while (v19 != v8);
    goto LABEL_21;
  }
  return a1;
}

void nitro::ndarray<int>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::ndarray<int>& nitro::ndarray<int>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911E1CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(uint64_t *a1, uint64_t *a2, double a3, double a4, int8x16_t a5, double a6, int8x16_t a7)
{
  char *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  _DWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  BOOL v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unsigned __int8 *v68;
  uint64_t v69;
  _DWORD *v70;
  int8x16_t *v71;
  int8x16_t *v72;
  unint64_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  unint64_t v80;
  uint64_t v81;
  int8x16_t *v82;
  int8x16_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  int8x16_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  BOOL v106;
  BOOL v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unsigned __int8 *v113;
  uint64_t v114;
  _DWORD *v115;
  int8x16_t *v116;
  int8x16_t *v117;
  unint64_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  unint64_t v125;
  uint64_t v126;
  int8x16_t *v127;
  int8x16_t v128;
  _QWORD *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  unint64_t v167;
  int8x16_t *v168;
  uint64_t v169;
  unint64_t v170;
  int8x16_t v171;
  int8x16_t v172;
  int8x16_t v173;
  int8x16_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t *v177;
  int8x16_t *v178;
  unint64_t v179;
  int8x16_t v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v189;

  v9 = (unint64_t *)a1[2];
  v8 = (char *)a1[3];
  v10 = (v8 - (char *)v9) >> 3;
  v11 = (_QWORD *)a2[2];
  if (v10 != (a2[3] - (uint64_t)v11) >> 3)
    goto LABEL_13;
  if (v8 == (char *)v9)
    return;
  v12 = v10 <= 1 ? 1 : (v8 - (char *)v9) >> 3;
  if (*v9 != *v11)
    goto LABEL_13;
  v13 = 1;
  do
  {
    v14 = v13;
    if (v12 == v13)
      break;
    v15 = v9[v13];
    v16 = v11[v13++];
  }
  while (v15 == v16);
  if (v14 < v10)
LABEL_13:
    nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<int>& nitro::ndarray<int>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1})::{lambda(void)#1}::operator()();
  v17 = v8 - (char *)v9;
  if (v8 == (char *)v9)
    return;
  v18 = *a1;
  if (!*a1)
    return;
  if (v17 - 8 < 8)
  {
    v19 = 1;
    v20 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v26 = *v20++;
      v19 *= v26;
    }
    while (v20 != (unint64_t *)v8);
    goto LABEL_21;
  }
  v21 = ((v17 - 8) >> 3) + 1;
  v20 = &v9[v21 & 0x3FFFFFFFFFFFFFFELL];
  v22 = v9 + 1;
  v23 = 1;
  v24 = v21 & 0x3FFFFFFFFFFFFFFELL;
  v25 = 1;
  do
  {
    v23 *= *(v22 - 1);
    v25 *= *v22;
    v22 += 2;
    v24 -= 2;
  }
  while (v24);
  v19 = v25 * v23;
  if (v21 != (v21 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v19)
    return;
  v27 = (uint64_t)v17 >> 3;
  if ((uint64_t)v17 >> 3 == 3)
  {
    v186 = *v9;
    if (!*v9)
      return;
    v84 = 0;
    v85 = a2[8];
    v86 = v9[1];
    v87 = (uint64_t *)a1[5];
    v182 = (uint64_t *)a2[5];
    v184 = *v182;
    v185 = *v87;
    v187 = 4 * *v87;
    v181 = 4 * a1[8];
    v88 = v181 + v18 + 64;
    v89 = v85 + 16;
    v183 = a1[8];
    v90 = v183;
    while (!v86)
    {
LABEL_64:
      v85 += v184;
      ++v84;
      v88 += v187;
      v89 += v184;
      v90 += v185;
      if (v84 == v186)
        return;
    }
    v91 = 0;
    v92 = v181 + v187 * v84;
    v93 = v9[2];
    v94 = *a2;
    v95 = a2[5];
    v96 = v87[1];
    v97 = 4 * v96;
    v98 = v182[1];
    v189 = v93 & 0xFFFFFFFFFFFFFFE0;
    v99 = v93 & 0xFFFFFFFFFFFFFFF8;
    v100 = (int8x16_t *)(*a2 + v89);
    v101 = v90;
    v102 = v85;
    v103 = v88;
    while (!v93)
    {
LABEL_67:
      v101 += v96;
      v102 += v98;
      ++v91;
      v103 += v97;
      v100 = (int8x16_t *)((char *)v100 + v98);
      if (v91 == v86)
        goto LABEL_64;
    }
    v104 = v87[2];
    v105 = *(_QWORD *)(v95 + 16);
    if (v93 < 8
      || (v104 == 1 ? (v106 = v105 == 1) : (v106 = 0),
          !v106
       || (v18 + v92 + v97 * v91 < v94 + v93 + v85 + v98 * v91
         ? (v107 = v94 + v102 >= v18 + v187 * v84 + 4 * (v183 + v93) + v97 * v91)
         : (v107 = 1),
           !v107)))
    {
      v109 = 0;
      v110 = v102;
      v111 = v101;
      goto LABEL_83;
    }
    if (v93 >= 0x20)
    {
      v116 = v100;
      v117 = (int8x16_t *)v103;
      v118 = v93 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v119 = v116[-1];
        v120 = *v116;
        v121 = vqtbl1q_s8(v119, (int8x16_t)xmmword_191A74190);
        v122 = vqtbl1q_s8(v119, (int8x16_t)xmmword_191A741A0);
        v123 = vqtbl1q_s8(*v116, (int8x16_t)xmmword_191A74190);
        v124 = vqtbl1q_s8(*v116, (int8x16_t)xmmword_191A741A0);
        v117[-2] = vqtbl1q_s8(v119, (int8x16_t)xmmword_191A741B0);
        v117[-1] = vqtbl1q_s8(v119, (int8x16_t)xmmword_191A741C0);
        a7 = vqtbl1q_s8(v120, (int8x16_t)xmmword_191A741B0);
        v117[-4] = v121;
        v117[-3] = v122;
        v117[2] = a7;
        v117[3] = vqtbl1q_s8(v120, (int8x16_t)xmmword_191A741C0);
        *v117 = v123;
        v117[1] = v124;
        v117 += 8;
        v116 += 2;
        v118 -= 32;
      }
      while (v118);
      v92 = v181 + v187 * v84;
      if (v93 == v189)
        goto LABEL_67;
      v108 = v93 & 0xFFFFFFFFFFFFFFE0;
      if ((v93 & 0x18) == 0)
      {
        v111 = v101 + v189 * v104;
        v109 = v93 & 0xFFFFFFFFFFFFFFE0;
        v110 = v102 + v189 * v105;
LABEL_83:
        v112 = v93 - v109;
        v113 = (unsigned __int8 *)(v94 + v110);
        v114 = 4 * v104;
        v115 = (_DWORD *)(v18 + 4 * v111);
        do
        {
          *v115 = *v113;
          v113 += v105;
          v115 = (_DWORD *)((char *)v115 + v114);
          --v112;
        }
        while (v112);
        goto LABEL_67;
      }
    }
    else
    {
      v108 = 0;
    }
    v110 = v102 + v99 * v105;
    v111 = v101 + v99 * v104;
    v125 = v108 - (v93 & 0xFFFFFFFFFFFFFFF8);
    v126 = v94 + v108;
    v127 = (int8x16_t *)(v18 + 4 * (v108 + v101));
    do
    {
      a7.i64[0] = *(_QWORD *)(v126 + v102);
      v128 = vqtbl1q_s8(a7, (int8x16_t)xmmword_191A74190);
      a7 = vqtbl1q_s8(a7, (int8x16_t)xmmword_191A741A0);
      *v127 = v128;
      v127[1] = a7;
      v127 += 2;
      v126 += 8;
      v125 += 8;
    }
    while (v125);
    v109 = v93 & 0xFFFFFFFFFFFFFFF8;
    v92 = v181 + v187 * v84;
    if (v93 == v99)
      goto LABEL_67;
    goto LABEL_83;
  }
  if (v27 == 2)
  {
    v41 = *v9;
    if (!*v9)
      return;
    v42 = 0;
    v43 = a2[8];
    v44 = a1[8];
    v45 = v9[1];
    v46 = *a2;
    v47 = (uint64_t *)a2[5];
    v48 = (uint64_t *)a1[5];
    v49 = *v48;
    v50 = *v47;
    v51 = 4 * *v48;
    v52 = v43 + v45;
    v53 = v45 & 0xFFFFFFFFFFFFFFE0;
    v54 = v45 & 0xFFFFFFFFFFFFFFF8;
    v55 = 4 * v44 + v18 + 64;
    v56 = v43 + *a2 + 16;
    v57 = v18 + 4 * v44;
    v58 = v18 + 4 * (v44 + v45);
    while (!v45)
    {
LABEL_34:
      v44 += v49;
      v43 += v50;
      ++v42;
      v55 += v51;
      v56 += v50;
      if (v42 == v41)
        return;
    }
    v59 = v48[1];
    v60 = v47[1];
    if (v45 < 8
      || (v59 == 1 ? (v61 = v60 == 1) : (v61 = 0),
          !v61
       || (v57 + v51 * v42 < (unint64_t)(v46 + v52 + v50 * v42)
         ? (v62 = v46 + v43 >= (unint64_t)(v58 + v51 * v42))
         : (v62 = 1),
           !v62)))
    {
      v64 = 0;
      v65 = v43;
      v66 = v44;
      goto LABEL_50;
    }
    if (v45 >= 0x20)
    {
      v71 = (int8x16_t *)v56;
      v72 = (int8x16_t *)v55;
      v73 = v45 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v74 = v71[-1];
        v75 = *v71;
        v76 = vqtbl1q_s8(v74, (int8x16_t)xmmword_191A74190);
        v77 = vqtbl1q_s8(v74, (int8x16_t)xmmword_191A741A0);
        v78 = vqtbl1q_s8(*v71, (int8x16_t)xmmword_191A74190);
        v79 = vqtbl1q_s8(*v71, (int8x16_t)xmmword_191A741A0);
        v72[-2] = vqtbl1q_s8(v74, (int8x16_t)xmmword_191A741B0);
        v72[-1] = vqtbl1q_s8(v74, (int8x16_t)xmmword_191A741C0);
        a7 = vqtbl1q_s8(v75, (int8x16_t)xmmword_191A741B0);
        v72[-4] = v76;
        v72[-3] = v77;
        v72[2] = a7;
        v72[3] = vqtbl1q_s8(v75, (int8x16_t)xmmword_191A741C0);
        *v72 = v78;
        v72[1] = v79;
        v72 += 8;
        v71 += 2;
        v73 -= 32;
      }
      while (v73);
      if (v45 == v53)
        goto LABEL_34;
      v63 = v45 & 0xFFFFFFFFFFFFFFE0;
      if ((v45 & 0x18) == 0)
      {
        v66 = v44 + v53 * v59;
        v64 = v45 & 0xFFFFFFFFFFFFFFE0;
        v65 = v43 + v53 * v60;
LABEL_50:
        v67 = v45 - v64;
        v68 = (unsigned __int8 *)(v46 + v65);
        v69 = 4 * v59;
        v70 = (_DWORD *)(v18 + 4 * v66);
        do
        {
          *v70 = *v68;
          v68 += v60;
          v70 = (_DWORD *)((char *)v70 + v69);
          --v67;
        }
        while (v67);
        goto LABEL_34;
      }
    }
    else
    {
      v63 = 0;
    }
    v65 = v43 + v54 * v60;
    v66 = v44 + v54 * v59;
    v80 = v63 - (v45 & 0xFFFFFFFFFFFFFFF8);
    v81 = v46 + v63;
    v82 = (int8x16_t *)(v18 + 4 * (v63 + v44));
    do
    {
      a7.i64[0] = *(_QWORD *)(v81 + v43);
      v83 = vqtbl1q_s8(a7, (int8x16_t)xmmword_191A74190);
      a7 = vqtbl1q_s8(a7, (int8x16_t)xmmword_191A741A0);
      *v82 = v83;
      v82[1] = a7;
      v82 += 2;
      v81 += 8;
      v80 += 8;
    }
    while (v80);
    v64 = v45 & 0xFFFFFFFFFFFFFFF8;
    if (v45 == v54)
      goto LABEL_34;
    goto LABEL_50;
  }
  if (v27 != 1)
  {
    if ((v17 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v129 = operator new(v17);
    bzero(v129, v17 & 0xFFFFFFFFFFFFFFF8);
    v130 = *a2;
    if (v17 >> 3 <= 1)
      v131 = 1;
    else
      v131 = v17 >> 3;
    v132 = a2[5];
    v133 = a2[8];
    v134 = v131 & 0x1FFFFFFFFFFFFFFELL;
    v135 = a1[5];
    while (v131 >= 2)
    {
      v138 = 0;
      v139 = 0;
      v140 = v131 & 0x1FFFFFFFFFFFFFFELL;
      v141 = (_QWORD *)(v135 + 8);
      v142 = v129 + 1;
      do
      {
        v138 += *(v141 - 1) * *(v142 - 1);
        v139 += *v141 * *v142;
        v142 += 2;
        v141 += 2;
        v140 -= 2;
      }
      while (v140);
      v136 = v139 + v138;
      v137 = v131 & 0x1FFFFFFFFFFFFFFELL;
      if (v131 != v134)
        goto LABEL_105;
LABEL_107:
      if (v131 < 2)
      {
        v150 = 0;
        v151 = 0;
LABEL_112:
        v157 = v131 - v151;
        v158 = v151;
        v159 = (uint64_t *)(v132 + 8 * v151);
        v160 = &v129[v158];
        do
        {
          v162 = *v160++;
          v161 = v162;
          v163 = *v159++;
          v150 += v163 * v161;
          --v157;
        }
        while (v157);
        goto LABEL_114;
      }
      v152 = 0;
      v153 = 0;
      v154 = v131 & 0x1FFFFFFFFFFFFFFELL;
      v155 = (_QWORD *)(v132 + 8);
      v156 = v129 + 1;
      do
      {
        v152 += *(v155 - 1) * *(v156 - 1);
        v153 += *v155 * *v156;
        v156 += 2;
        v155 += 2;
        v154 -= 2;
      }
      while (v154);
      v150 = v153 + v152;
      v151 = v131 & 0x1FFFFFFFFFFFFFFELL;
      if (v131 != v134)
        goto LABEL_112;
LABEL_114:
      *(_DWORD *)(v18 + 4 * v136) = *(unsigned __int8 *)(v130 + v133 + v150);
      if ((int)(v17 >> 3) >= 1)
      {
        v164 = (v17 >> 3) + 1;
        v165 = v17 >> 3;
        while (1)
        {
          v166 = (v164 - 2);
          v167 = v129[v166] + 1;
          v129[v166] = v167;
          if (v167 < v9[v166])
            break;
          v129[(v164 - 2)] = 0;
          --v165;
          if ((unint64_t)--v164 <= 1)
            goto LABEL_120;
        }
        if (v165 > 0)
          continue;
      }
LABEL_120:
      operator delete(v129);
      return;
    }
    v136 = 0;
    v137 = 0;
LABEL_105:
    v143 = v131 - v137;
    v144 = v137;
    v145 = (uint64_t *)(v135 + 8 * v137);
    v146 = &v129[v144];
    do
    {
      v148 = *v146++;
      v147 = v148;
      v149 = *v145++;
      v136 += v149 * v147;
      --v143;
    }
    while (v143);
    goto LABEL_107;
  }
  v28 = *v9;
  if (!*v9)
    return;
  v29 = a2[8];
  v30 = a1[8];
  v31 = *a2;
  v32 = *(_QWORD *)a1[5];
  v33 = *(_QWORD *)a2[5];
  if (v28 < 8)
    goto LABEL_27;
  v34 = 0;
  if (v32 != 1 || v33 != 1)
    goto LABEL_28;
  if (v18 + 4 * v30 < v31 + v28 + v29 && v31 + v29 < v18 + 4 * (v28 + v30))
  {
LABEL_27:
    v34 = 0;
LABEL_28:
    v35 = a2[8];
    v36 = a1[8];
    goto LABEL_29;
  }
  if (v28 >= 0x20)
  {
    v34 = v28 & 0xFFFFFFFFFFFFFFE0;
    v168 = (int8x16_t *)(v29 + v31 + 16);
    v169 = v18 + 4 * v30 + 64;
    a5.i64[1] = 0xFFFFFF0BFFFFFF0ALL;
    v170 = v28 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v171 = v168[-1];
      v172 = *v168;
      v173 = vqtbl1q_s8(*v168, (int8x16_t)xmmword_191A74190);
      v174 = vqtbl1q_s8(*v168, (int8x16_t)xmmword_191A741A0);
      *(int8x16_t *)(v169 - 32) = vqtbl1q_s8(v171, (int8x16_t)xmmword_191A741B0);
      *(int8x16_t *)(v169 - 16) = vqtbl1q_s8(v171, (int8x16_t)xmmword_191A741C0);
      *(int8x16_t *)(v169 - 64) = vqtbl1q_s8(v171, (int8x16_t)xmmword_191A74190);
      *(int8x16_t *)(v169 - 48) = vqtbl1q_s8(v171, (int8x16_t)xmmword_191A741A0);
      *(int8x16_t *)(v169 + 32) = vqtbl1q_s8(v172, (int8x16_t)xmmword_191A741B0);
      *(int8x16_t *)(v169 + 48) = vqtbl1q_s8(v172, (int8x16_t)xmmword_191A741C0);
      *(int8x16_t *)v169 = v173;
      *(int8x16_t *)(v169 + 16) = v174;
      v169 += 128;
      v168 += 2;
      v170 -= 32;
    }
    while (v170);
    if (v28 == v34)
      return;
    if ((v28 & 0x18) == 0)
    {
      v36 = v30 + v34;
      v35 = v29 + v34;
LABEL_29:
      v37 = v28 - v34;
      v38 = (unsigned __int8 *)(v31 + v35);
      v39 = 4 * v32;
      v40 = (_DWORD *)(v18 + 4 * v36);
      do
      {
        *v40 = *v38;
        v38 += v33;
        v40 = (_DWORD *)((char *)v40 + v39);
        --v37;
      }
      while (v37);
      return;
    }
  }
  else
  {
    v34 = 0;
  }
  v175 = v34;
  v34 = v28 & 0xFFFFFFFFFFFFFFF8;
  v35 = v29 + (v28 & 0xFFFFFFFFFFFFFFF8);
  v36 = v30 + (v28 & 0xFFFFFFFFFFFFFFF8);
  v176 = v175 - (v28 & 0xFFFFFFFFFFFFFFF8);
  v177 = (unint64_t *)(v31 + v175 + v29);
  v178 = (int8x16_t *)(v18 + 4 * (v175 + v30));
  do
  {
    v179 = *v177++;
    a5.i64[0] = v179;
    v180 = vqtbl1q_s8(a5, (int8x16_t)xmmword_191A74190);
    a5 = vqtbl1q_s8(a5, (int8x16_t)xmmword_191A741A0);
    *v178 = v180;
    v178[1] = a5;
    v178 += 2;
    v176 += 8;
  }
  while (v176);
  if (v28 != v34)
    goto LABEL_29;
}

void sub_1911E26A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>& nitro::ndarray<int>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911E2800(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911E2814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911E280CLL);
}

void nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<int>& nitro::ndarray<int>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<int>& nitro::ndarray<int>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911E2A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<int>& nitro::ndarray<int>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911E2C38(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911E2C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911E2C44);
}

uint64_t *nitro::ndarray<half>::assign<unsigned char>(uint64_t *a1, uint64_t *a2, float32x4_t a3)
{
  char *v4;
  char *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  v6 = (v4 - v5) >> 3;
  v7 = (_QWORD *)a2[2];
  if (v6 != (a2[3] - (uint64_t)v7) >> 3)
    goto LABEL_13;
  if (v4 == v5)
    return a1;
  v8 = v6 <= 1 ? 1 : (v4 - v5) >> 3;
  if (*(_QWORD *)v5 != *v7)
    goto LABEL_13;
  v9 = 1;
  do
  {
    v10 = v9;
    if (v8 == v9)
      break;
    v11 = *(_QWORD *)&v5[8 * v9];
    v12 = v7[v9++];
  }
  while (v11 == v12);
  if (v10 < v6)
LABEL_13:
    nitro::ndarray<half>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(void)#1}::operator()();
  if (v4 != v5 && *a1)
  {
    v13 = v4 - v5 - 8;
    if (v13 >= 8)
    {
      v16 = (v13 >> 3) + 1;
      v15 = &v5[8 * (v16 & 0x3FFFFFFFFFFFFFFELL)];
      v17 = v5 + 8;
      v18 = 1;
      v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
      v20 = 1;
      do
      {
        v18 *= *(v17 - 1);
        v20 *= *v17;
        v17 += 2;
        v19 -= 2;
      }
      while (v19);
      v14 = v20 * v18;
      if (v16 == (v16 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_21:
        if (v14)
          nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(a1, a2, a3);
        return a1;
      }
    }
    else
    {
      v14 = 1;
      v15 = (char *)a1[2];
    }
    do
    {
      v21 = *(_QWORD *)v15;
      v15 += 8;
      v14 *= v21;
    }
    while (v15 != v4);
    goto LABEL_21;
  }
  return a1;
}

void nitro::ndarray<half>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::ndarray<half>& nitro::ndarray<half>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911E3008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

float32x4_t nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(uint64_t *a1, uint64_t *a2, float32x4_t result)
{
  char *v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __int8 *v34;
  uint64_t v35;
  _WORD *v36;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  __int8 *v66;
  uint64_t v67;
  _WORD *v68;
  uint8x8_t *v69;
  float16x8_t *v70;
  unint64_t v71;
  uint8x16_t v72;
  uint16x8_t v73;
  float16x8_t v74;
  uint16x8_t v75;
  float16x8_t v76;
  uint16x8_t v77;
  float16x8_t v78;
  uint16x8_t v79;
  int16x4_t v80;
  unint64_t v81;
  uint64_t v82;
  float16x8_t *v83;
  uint16x8_t v84;
  int16x4_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint8x8_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  BOOL v108;
  BOOL v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  __int8 *v115;
  uint64_t v116;
  _WORD *v117;
  uint8x8_t *v118;
  float16x8_t *v119;
  unint64_t v120;
  uint8x16_t v121;
  uint16x8_t v122;
  float16x8_t v123;
  uint16x8_t v124;
  float16x8_t v125;
  uint16x8_t v126;
  float16x8_t v127;
  uint16x8_t v128;
  int16x4_t v129;
  unint64_t v130;
  uint64_t v131;
  float16x8_t *v132;
  uint16x8_t v133;
  int16x4_t v134;
  _QWORD *v135;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  _QWORD *v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  _QWORD *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  unint64_t v174;
  uint8x8_t *v175;
  uint64_t v176;
  unint64_t v177;
  uint8x16_t v178;
  uint16x8_t v179;
  float16x8_t v180;
  uint16x8_t v181;
  float16x8_t v182;
  uint16x8_t v183;
  float16x8_t v184;
  uint16x8_t v185;
  int16x4_t v186;
  unint64_t v187;
  unint64_t v188;
  uint8x8_t *v189;
  float16x8_t *v190;
  uint8x8_t v191;
  uint16x8_t v192;
  int16x4_t v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v202;

  v5 = (unint64_t *)a1[2];
  v4 = (char *)a1[3];
  v6 = (v4 - (char *)v5) >> 3;
  v7 = (_QWORD *)a2[2];
  if (v6 != (a2[3] - (uint64_t)v7) >> 3)
    goto LABEL_13;
  if (v4 == (char *)v5)
    return result;
  v8 = v6 <= 1 ? 1 : (v4 - (char *)v5) >> 3;
  if (*v5 != *v7)
    goto LABEL_13;
  v9 = 1;
  do
  {
    v10 = v9;
    if (v8 == v9)
      break;
    v11 = v5[v9];
    v12 = v7[v9++];
  }
  while (v11 == v12);
  if (v10 < v6)
LABEL_13:
    nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<half>& nitro::ndarray<half>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1})::{lambda(void)#1}::operator()();
  v13 = v4 - (char *)v5;
  if (v4 == (char *)v5)
    return result;
  v14 = *a1;
  if (!*a1)
    return result;
  if (v13 - 8 < 8)
  {
    v15 = 1;
    v16 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v22 = *v16++;
      v15 *= v22;
    }
    while (v16 != (unint64_t *)v4);
    goto LABEL_21;
  }
  v17 = ((v13 - 8) >> 3) + 1;
  v16 = &v5[v17 & 0x3FFFFFFFFFFFFFFELL];
  v18 = v5 + 1;
  v19 = 1;
  v20 = v17 & 0x3FFFFFFFFFFFFFFELL;
  v21 = 1;
  do
  {
    v19 *= *(v18 - 1);
    v21 *= *v18;
    v18 += 2;
    v20 -= 2;
  }
  while (v20);
  v15 = v21 * v19;
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v15)
    return result;
  v23 = (uint64_t)v13 >> 3;
  if ((uint64_t)v13 >> 3 == 3)
  {
    v199 = *v5;
    if (!*v5)
      return result;
    v86 = 0;
    v87 = a2[8];
    v88 = v5[1];
    v89 = (uint64_t *)a1[5];
    v195 = (uint64_t *)a2[5];
    v196 = a1[8];
    v197 = *v195;
    v198 = *v89;
    v200 = 2 * *v89;
    v194 = 2 * v196;
    v90 = 2 * v196 + v14 + 32;
    v91 = v87 + 16;
    v92 = v196;
    while (!v88)
    {
LABEL_64:
      v87 += v197;
      ++v86;
      v90 += v200;
      v91 += v197;
      v92 += v198;
      if (v86 == v199)
        return result;
    }
    v93 = 0;
    v94 = v194 + v200 * v86;
    v95 = v5[2];
    v96 = *a2;
    v97 = a2[5];
    v98 = v89[1];
    v99 = 2 * v98;
    v100 = v195[1];
    v202 = v95 & 0xFFFFFFFFFFFFFFE0;
    v101 = v95 & 0xFFFFFFFFFFFFFFF8;
    v102 = (uint8x8_t *)(*a2 + v91);
    v103 = v92;
    v104 = v87;
    v105 = v90;
    while (!v95)
    {
LABEL_67:
      v103 += v98;
      v104 += v100;
      ++v93;
      v105 += v99;
      v102 = (uint8x8_t *)((char *)v102 + v100);
      if (v93 == v88)
        goto LABEL_64;
    }
    v106 = v89[2];
    v107 = *(_QWORD *)(v97 + 16);
    if (v95 < 8
      || (v106 == 1 ? (v108 = v107 == 1) : (v108 = 0),
          !v108
       || (v14 + v94 + v99 * v93 < v96 + v95 + v87 + v100 * v93
         ? (v109 = v96 + v104 >= v14 + v200 * v86 + 2 * (v196 + v95) + v99 * v93)
         : (v109 = 1),
           !v109)))
    {
      v111 = 0;
      v112 = v104;
      v113 = v103;
      goto LABEL_83;
    }
    if (v95 >= 0x20)
    {
      v118 = v102;
      v119 = (float16x8_t *)v105;
      v120 = v95 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v121 = *(uint8x16_t *)v118[-2].i8;
        v122 = vmovl_u8(*(uint8x8_t *)v121.i8);
        v123 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v122.i8))), vcvtq_f32_u32(vmovl_high_u16(v122)));
        v124 = vmovl_high_u8(v121);
        v125 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v124.i8))), vcvtq_f32_u32(vmovl_high_u16(v124)));
        v126 = vmovl_u8(*v118);
        v127 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v126.i8))), vcvtq_f32_u32(vmovl_high_u16(v126)));
        v128 = vmovl_high_u8(*(uint8x16_t *)v118->i8);
        v129 = (int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v128.i8)));
        result = vcvtq_f32_u32(vmovl_high_u16(v128));
        v119[-2] = v123;
        v119[-1] = v125;
        *v119 = v127;
        v119[1] = vcvt_hight_f16_f32(v129, result);
        v119 += 4;
        v118 += 4;
        v120 -= 32;
      }
      while (v120);
      v94 = v194 + v200 * v86;
      if (v95 == v202)
        goto LABEL_67;
      v110 = v95 & 0xFFFFFFFFFFFFFFE0;
      if ((v95 & 0x18) == 0)
      {
        v113 = v103 + v202 * v106;
        v111 = v95 & 0xFFFFFFFFFFFFFFE0;
        v112 = v104 + v202 * v107;
LABEL_83:
        v114 = v95 - v111;
        v115 = (__int8 *)(v96 + v112);
        v116 = 2 * v106;
        v117 = (_WORD *)(v14 + 2 * v113);
        do
        {
          result.i8[0] = *v115;
          result.f32[0] = (float)result.u32[0];
          __asm { FCVT            H0, S0 }
          *v117 = result.i16[0];
          v115 += v107;
          v117 = (_WORD *)((char *)v117 + v116);
          --v114;
        }
        while (v114);
        goto LABEL_67;
      }
    }
    else
    {
      v110 = 0;
    }
    v112 = v104 + v101 * v107;
    v113 = v103 + v101 * v106;
    v130 = v110 - (v95 & 0xFFFFFFFFFFFFFFF8);
    v131 = v96 + v110;
    v132 = (float16x8_t *)(v14 + 2 * (v110 + v103));
    do
    {
      v133 = vmovl_u8(*(uint8x8_t *)(v131 + v104));
      v134 = (int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v133.i8)));
      result = vcvtq_f32_u32(vmovl_high_u16(v133));
      *v132++ = vcvt_hight_f16_f32(v134, result);
      v131 += 8;
      v130 += 8;
    }
    while (v130);
    v111 = v95 & 0xFFFFFFFFFFFFFFF8;
    v94 = v194 + v200 * v86;
    if (v95 == v101)
      goto LABEL_67;
    goto LABEL_83;
  }
  if (v23 == 2)
  {
    v39 = *v5;
    if (!*v5)
      return result;
    v40 = 0;
    v41 = a2[8];
    v42 = a1[8];
    v43 = v5[1];
    v44 = *a2;
    v45 = (uint64_t *)a2[5];
    v46 = (uint64_t *)a1[5];
    v47 = *v46;
    v48 = 2 * *v46;
    v49 = v41 + v43;
    v50 = v43 & 0xFFFFFFFFFFFFFFE0;
    v51 = v43 & 0xFFFFFFFFFFFFFFF8;
    v52 = 2 * v42 + v14 + 32;
    v53 = *v45;
    v54 = v41 + *a2 + 16;
    v55 = v14 + 2 * v42;
    v56 = v14 + 2 * (v42 + v43);
    while (!v43)
    {
LABEL_34:
      v42 += v47;
      v41 += v53;
      ++v40;
      v52 += v48;
      v54 += v53;
      if (v40 == v39)
        return result;
    }
    v57 = v46[1];
    v58 = v45[1];
    if (v43 < 8
      || (v57 == 1 ? (_ZF = v58 == 1) : (_ZF = 0),
          !_ZF
       || (v55 + v48 * v40 < (unint64_t)(v44 + v49 + v53 * v40)
         ? (_CF = v44 + v41 >= (unint64_t)(v56 + v48 * v40))
         : (_CF = 1),
           !_CF)))
    {
      v62 = 0;
      v63 = v41;
      v64 = v42;
      goto LABEL_50;
    }
    if (v43 >= 0x20)
    {
      v69 = (uint8x8_t *)v54;
      v70 = (float16x8_t *)v52;
      v71 = v43 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v72 = *(uint8x16_t *)v69[-2].i8;
        v73 = vmovl_u8(*(uint8x8_t *)v72.i8);
        v74 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v73.i8))), vcvtq_f32_u32(vmovl_high_u16(v73)));
        v75 = vmovl_high_u8(v72);
        v76 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v75.i8))), vcvtq_f32_u32(vmovl_high_u16(v75)));
        v77 = vmovl_u8(*v69);
        v78 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v77.i8))), vcvtq_f32_u32(vmovl_high_u16(v77)));
        v79 = vmovl_high_u8(*(uint8x16_t *)v69->i8);
        v80 = (int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v79.i8)));
        result = vcvtq_f32_u32(vmovl_high_u16(v79));
        v70[-2] = v74;
        v70[-1] = v76;
        *v70 = v78;
        v70[1] = vcvt_hight_f16_f32(v80, result);
        v70 += 4;
        v69 += 4;
        v71 -= 32;
      }
      while (v71);
      if (v43 == v50)
        goto LABEL_34;
      v61 = v43 & 0xFFFFFFFFFFFFFFE0;
      if ((v43 & 0x18) == 0)
      {
        v64 = v42 + v50 * v57;
        v62 = v43 & 0xFFFFFFFFFFFFFFE0;
        v63 = v41 + v50 * v58;
LABEL_50:
        v65 = v43 - v62;
        v66 = (__int8 *)(v44 + v63);
        v67 = 2 * v57;
        v68 = (_WORD *)(v14 + 2 * v64);
        do
        {
          result.i8[0] = *v66;
          result.f32[0] = (float)result.u32[0];
          __asm { FCVT            H0, S0 }
          *v68 = result.i16[0];
          v66 += v58;
          v68 = (_WORD *)((char *)v68 + v67);
          --v65;
        }
        while (v65);
        goto LABEL_34;
      }
    }
    else
    {
      v61 = 0;
    }
    v63 = v41 + v51 * v58;
    v64 = v42 + v51 * v57;
    v81 = v61 - (v43 & 0xFFFFFFFFFFFFFFF8);
    v82 = v44 + v61;
    v83 = (float16x8_t *)(v14 + 2 * (v61 + v42));
    do
    {
      v84 = vmovl_u8(*(uint8x8_t *)(v82 + v41));
      v85 = (int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v84.i8)));
      result = vcvtq_f32_u32(vmovl_high_u16(v84));
      *v83++ = vcvt_hight_f16_f32(v85, result);
      v82 += 8;
      v81 += 8;
    }
    while (v81);
    v62 = v43 & 0xFFFFFFFFFFFFFFF8;
    if (v43 == v51)
      goto LABEL_34;
    goto LABEL_50;
  }
  if (v23 != 1)
  {
    if ((v13 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v135 = operator new(v13);
    bzero(v135, v13 & 0xFFFFFFFFFFFFFFF8);
    v137 = *a2;
    if (v13 >> 3 <= 1)
      v138 = 1;
    else
      v138 = v13 >> 3;
    v139 = a2[5];
    v140 = a2[8];
    v141 = v138 & 0x1FFFFFFFFFFFFFFELL;
    v142 = a1[5];
    while (v138 >= 2)
    {
      v145 = 0;
      v146 = 0;
      v147 = v138 & 0x1FFFFFFFFFFFFFFELL;
      v148 = (_QWORD *)(v142 + 8);
      v149 = v135 + 1;
      do
      {
        v145 += *(v148 - 1) * *(v149 - 1);
        v146 += *v148 * *v149;
        v149 += 2;
        v148 += 2;
        v147 -= 2;
      }
      while (v147);
      v143 = v146 + v145;
      v144 = v138 & 0x1FFFFFFFFFFFFFFELL;
      if (v138 != v141)
        goto LABEL_105;
LABEL_107:
      if (v138 < 2)
      {
        v157 = 0;
        v158 = 0;
LABEL_112:
        v164 = v138 - v158;
        v165 = v158;
        v166 = (uint64_t *)(v139 + 8 * v158);
        v167 = &v135[v165];
        do
        {
          v169 = *v167++;
          v168 = v169;
          v170 = *v166++;
          v157 += v170 * v168;
          --v164;
        }
        while (v164);
        goto LABEL_114;
      }
      v159 = 0;
      v160 = 0;
      v161 = v138 & 0x1FFFFFFFFFFFFFFELL;
      v162 = (_QWORD *)(v139 + 8);
      v163 = v135 + 1;
      do
      {
        v159 += *(v162 - 1) * *(v163 - 1);
        v160 += *v162 * *v163;
        v163 += 2;
        v162 += 2;
        v161 -= 2;
      }
      while (v161);
      v157 = v160 + v159;
      v158 = v138 & 0x1FFFFFFFFFFFFFFELL;
      if (v138 != v141)
        goto LABEL_112;
LABEL_114:
      LOBYTE(_S0) = *(_BYTE *)(v137 + v140 + v157);
      _S0 = (float)LODWORD(_S0);
      __asm { FCVT            H0, S0 }
      *(_WORD *)(v14 + 2 * v143) = LOWORD(_S0);
      if ((int)(v13 >> 3) >= 1)
      {
        v171 = (v13 >> 3) + 1;
        v172 = v13 >> 3;
        while (1)
        {
          v173 = (v171 - 2);
          v174 = v135[v173] + 1;
          v135[v173] = v174;
          if (v174 < v5[v173])
            break;
          v135[(v171 - 2)] = 0;
          --v172;
          if ((unint64_t)--v171 <= 1)
            goto LABEL_120;
        }
        if (v172 > 0)
          continue;
      }
LABEL_120:
      operator delete(v135);
      return result;
    }
    v143 = 0;
    v144 = 0;
LABEL_105:
    v150 = v138 - v144;
    v151 = v144;
    v152 = (uint64_t *)(v142 + 8 * v144);
    v153 = &v135[v151];
    do
    {
      v155 = *v153++;
      v154 = v155;
      v156 = *v152++;
      v143 += v156 * v154;
      --v150;
    }
    while (v150);
    goto LABEL_107;
  }
  v24 = *v5;
  if (!*v5)
    return result;
  v25 = a2[8];
  v26 = a1[8];
  v27 = *a2;
  v28 = *(_QWORD *)a1[5];
  v29 = *(_QWORD *)a2[5];
  if (v24 < 8)
    goto LABEL_27;
  v30 = 0;
  if (v28 != 1 || v29 != 1)
    goto LABEL_28;
  if (v14 + 2 * v26 < v27 + v24 + v25 && v27 + v25 < v14 + 2 * (v24 + v26))
  {
LABEL_27:
    v30 = 0;
LABEL_28:
    v31 = a2[8];
    v32 = a1[8];
    goto LABEL_29;
  }
  if (v24 >= 0x20)
  {
    v30 = v24 & 0xFFFFFFFFFFFFFFE0;
    v175 = (uint8x8_t *)(v25 + v27 + 16);
    v176 = v14 + 2 * v26 + 32;
    v177 = v24 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v178 = *(uint8x16_t *)v175[-2].i8;
      v179 = vmovl_u8(*(uint8x8_t *)v178.i8);
      v180 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v179.i8))), vcvtq_f32_u32(vmovl_high_u16(v179)));
      v181 = vmovl_high_u8(v178);
      v182 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v181.i8))), vcvtq_f32_u32(vmovl_high_u16(v181)));
      v183 = vmovl_u8(*v175);
      v184 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v183.i8))), vcvtq_f32_u32(vmovl_high_u16(v183)));
      v185 = vmovl_high_u8(*(uint8x16_t *)v175->i8);
      v186 = (int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v185.i8)));
      result = vcvtq_f32_u32(vmovl_high_u16(v185));
      *(float16x8_t *)(v176 - 32) = v180;
      *(float16x8_t *)(v176 - 16) = v182;
      *(float16x8_t *)v176 = v184;
      *(float16x8_t *)(v176 + 16) = vcvt_hight_f16_f32(v186, result);
      v176 += 64;
      v175 += 4;
      v177 -= 32;
    }
    while (v177);
    if (v24 == v30)
      return result;
    if ((v24 & 0x18) == 0)
    {
      v32 = v26 + v30;
      v31 = v25 + v30;
LABEL_29:
      v33 = v24 - v30;
      v34 = (__int8 *)(v27 + v31);
      v35 = 2 * v28;
      v36 = (_WORD *)(v14 + 2 * v32);
      do
      {
        result.i8[0] = *v34;
        result.f32[0] = (float)result.u32[0];
        __asm { FCVT            H0, S0 }
        *v36 = result.i16[0];
        v34 += v29;
        v36 = (_WORD *)((char *)v36 + v35);
        --v33;
      }
      while (v33);
      return result;
    }
  }
  else
  {
    v30 = 0;
  }
  v187 = v30;
  v30 = v24 & 0xFFFFFFFFFFFFFFF8;
  v31 = v25 + (v24 & 0xFFFFFFFFFFFFFFF8);
  v32 = v26 + (v24 & 0xFFFFFFFFFFFFFFF8);
  v188 = v187 - (v24 & 0xFFFFFFFFFFFFFFF8);
  v189 = (uint8x8_t *)(v27 + v187 + v25);
  v190 = (float16x8_t *)(v14 + 2 * (v187 + v26));
  do
  {
    v191 = *v189++;
    v192 = vmovl_u8(v191);
    v193 = (int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v192.i8)));
    result = vcvtq_f32_u32(vmovl_high_u16(v192));
    *v190++ = vcvt_hight_f16_f32(v193, result);
    v188 += 8;
  }
  while (v188);
  if (v24 != v30)
    goto LABEL_29;
  return result;
}

void sub_1911E3A84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>& nitro::ndarray<half>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911E3BDC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911E3BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911E3BE8);
}

void nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<half>& nitro::ndarray<half>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<half>& nitro::ndarray<half>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911E3E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<half>& nitro::ndarray<half>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911E4014(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911E4028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911E4020);
}

uint64_t *nitro::ndarray<float>::assign<unsigned char>(uint64_t *a1, uint64_t *a2, float a3, double a4, int8x16_t a5, double a6, int8x16_t a7)
{
  char *v8;
  char *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v9 = (char *)a1[2];
  v8 = (char *)a1[3];
  v10 = (v8 - v9) >> 3;
  v11 = (_QWORD *)a2[2];
  if (v10 != (a2[3] - (uint64_t)v11) >> 3)
    goto LABEL_13;
  if (v8 == v9)
    return a1;
  v12 = v10 <= 1 ? 1 : (v8 - v9) >> 3;
  if (*(_QWORD *)v9 != *v11)
    goto LABEL_13;
  v13 = 1;
  do
  {
    v14 = v13;
    if (v12 == v13)
      break;
    v15 = *(_QWORD *)&v9[8 * v13];
    v16 = v11[v13++];
  }
  while (v15 == v16);
  if (v14 < v10)
LABEL_13:
    nitro::ndarray<float>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(void)#1}::operator()();
  if (v8 != v9 && *a1)
  {
    v17 = v8 - v9 - 8;
    if (v17 >= 8)
    {
      v20 = (v17 >> 3) + 1;
      v19 = &v9[8 * (v20 & 0x3FFFFFFFFFFFFFFELL)];
      v21 = v9 + 8;
      v22 = 1;
      v23 = v20 & 0x3FFFFFFFFFFFFFFELL;
      v24 = 1;
      do
      {
        v22 *= *(v21 - 1);
        v24 *= *v21;
        v21 += 2;
        v23 -= 2;
      }
      while (v23);
      v18 = v24 * v22;
      if (v20 == (v20 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_21:
        if (v18)
          nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(a1, a2, a3, a4, a5, a6, a7);
        return a1;
      }
    }
    else
    {
      v18 = 1;
      v19 = (char *)a1[2];
    }
    do
    {
      v25 = *(_QWORD *)v19;
      v19 += 8;
      v18 *= v25;
    }
    while (v19 != v8);
    goto LABEL_21;
  }
  return a1;
}

void nitro::ndarray<float>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::ndarray<float>& nitro::ndarray<float>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911E43E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(uint64_t *a1, uint64_t *a2, float a3, double a4, int8x16_t a5, double a6, int8x16_t a7)
{
  char *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  float *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  BOOL v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint32x4_t v69;
  unint64_t v70;
  unint64_t v71;
  unsigned __int8 *v72;
  uint64_t v73;
  _DWORD *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int8x16_t v78;
  uint32x4_t v79;
  uint32x4_t v80;
  uint32x4_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  BOOL v104;
  BOOL v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint32x4_t v120;
  unint64_t v121;
  unint64_t v122;
  unsigned __int8 *v123;
  uint64_t v124;
  _DWORD *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  int8x16_t v129;
  uint32x4_t v130;
  uint32x4_t v131;
  uint32x4_t v132;
  _QWORD *v133;
  float v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t *v175;
  uint64_t v176;
  unint64_t v177;
  uint32x4_t v178;
  int8x16_t *v179;
  float32x4_t *v180;
  unint64_t v181;
  int8x16_t v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v192;
  unint64_t v193;

  v9 = (unint64_t *)a1[2];
  v8 = (char *)a1[3];
  v10 = (v8 - (char *)v9) >> 3;
  v11 = (_QWORD *)a2[2];
  if (v10 != (a2[3] - (uint64_t)v11) >> 3)
    goto LABEL_13;
  if (v8 == (char *)v9)
    return;
  v12 = v10 <= 1 ? 1 : (v8 - (char *)v9) >> 3;
  if (*v9 != *v11)
    goto LABEL_13;
  v13 = 1;
  do
  {
    v14 = v13;
    if (v12 == v13)
      break;
    v15 = v9[v13];
    v16 = v11[v13++];
  }
  while (v15 == v16);
  if (v14 < v10)
LABEL_13:
    nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<float>& nitro::ndarray<float>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1})::{lambda(void)#1}::operator()();
  v17 = v8 - (char *)v9;
  if (v8 == (char *)v9)
    return;
  v18 = *a1;
  if (!*a1)
    return;
  if (v17 - 8 < 8)
  {
    v19 = 1;
    v20 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v26 = *v20++;
      v19 *= v26;
    }
    while (v20 != (unint64_t *)v8);
    goto LABEL_21;
  }
  v21 = ((v17 - 8) >> 3) + 1;
  v20 = &v9[v21 & 0x3FFFFFFFFFFFFFFELL];
  v22 = v9 + 1;
  v23 = 1;
  v24 = v21 & 0x3FFFFFFFFFFFFFFELL;
  v25 = 1;
  do
  {
    v23 *= *(v22 - 1);
    v25 *= *v22;
    v22 += 2;
    v24 -= 2;
  }
  while (v24);
  v19 = v25 * v23;
  if (v21 != (v21 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v19)
    return;
  v27 = (uint64_t)v17 >> 3;
  if ((uint64_t)v17 >> 3 == 3)
  {
    v188 = *v9;
    if (!*v9)
      return;
    v82 = 0;
    v83 = a2[8];
    v84 = a1[8];
    v85 = v9[1];
    v86 = (uint64_t *)a1[5];
    v184 = (uint64_t *)a2[5];
    v186 = *v184;
    v187 = *v86;
    v190 = 4 * *v86;
    v183 = 4 * v84;
    v87 = v18 + 4 * v84;
    v185 = v84;
    while (!v85)
    {
LABEL_64:
      v84 += v187;
      v83 += v186;
      ++v82;
      v87 += v190;
      if (v82 == v188)
        return;
    }
    v88 = 0;
    v89 = v183 + v190 * v82;
    v90 = v9[2];
    v91 = *a2;
    v92 = a2[5];
    v93 = v86[1];
    v94 = 4 * v93;
    v95 = v190 * v82 + 4 * (v185 + v90);
    v96 = v184[1];
    v97 = v90 + v83;
    v192 = v90 & 0xFFFFFFFFFFFFFFF8;
    v193 = v90 & 0xFFFFFFFFFFFFFFF0;
    v189 = v82;
    v98 = v87;
    v99 = *a2;
    v100 = v83;
    v101 = v84;
    while (!v90)
    {
LABEL_67:
      v101 += v93;
      v100 += v96;
      ++v88;
      v99 += v96;
      v98 += v94;
      if (v88 == v85)
        goto LABEL_64;
    }
    v102 = v86[2];
    v103 = *(_QWORD *)(v92 + 16);
    if (v90 < 8
      || (v102 == 1 ? (v104 = v103 == 1) : (v104 = 0),
          !v104
       || (v18 + v89 + v94 * v88 < (unint64_t)(v91 + v97 + v96 * v88)
         ? (v105 = v91 + v100 >= (unint64_t)(v18 + v95 + v94 * v88))
         : (v105 = 1),
           !v105)))
    {
      v121 = 0;
      v114 = v100;
      v118 = v101;
      goto LABEL_87;
    }
    if (v90 >= 0x10)
    {
      v126 = v98;
      v127 = v99;
      v128 = v90 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v129 = *(int8x16_t *)(v127 + v83);
        v130 = (uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_191A741C0);
        v131 = (uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_191A741B0);
        v132 = (uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_191A741A0);
        a7 = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_191A74190));
        *(float32x4_t *)(v126 + 32) = vcvtq_f32_u32(v131);
        *(float32x4_t *)(v126 + 48) = vcvtq_f32_u32(v130);
        *(int8x16_t *)v126 = a7;
        *(float32x4_t *)(v126 + 16) = vcvtq_f32_u32(v132);
        v126 += 64;
        v127 += 16;
        v128 -= 16;
      }
      while (v128);
      if (v90 == v193)
        goto LABEL_67;
      v106 = v90 & 0xFFFFFFFFFFFFFFF0;
      if ((v90 & 8) == 0)
      {
        v118 = v101 + v193 * v102;
        v121 = v90 & 0xFFFFFFFFFFFFFFF0;
        v114 = v100 + v193 * v103;
LABEL_87:
        v122 = v90 - v121;
        v123 = (unsigned __int8 *)(v91 + v114);
        v124 = 4 * v102;
        v125 = (_DWORD *)(v18 + 4 * v118);
        do
        {
          a7.i8[0] = *v123;
          *(float *)a7.i32 = (float)a7.u32[0];
          *v125 = a7.i32[0];
          v123 += v103;
          v125 = (_DWORD *)((char *)v125 + v124);
          --v122;
        }
        while (v122);
        goto LABEL_67;
      }
    }
    else
    {
      v106 = 0;
    }
    v107 = v84;
    v108 = v87;
    v109 = v97;
    v110 = v9;
    v111 = v18;
    v112 = v95;
    v113 = v89;
    v114 = v100 + v192 * v103;
    v115 = v106 - (v90 & 0xFFFFFFFFFFFFFFF8);
    v116 = v83 + v106;
    v117 = 4 * v106;
    v118 = v101 + v192 * v102;
    do
    {
      v119 = v98 + v117;
      a7.i64[0] = *(_QWORD *)(v99 + v116);
      v120 = (uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_191A741A0);
      a7 = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_191A74190));
      *(int8x16_t *)v119 = a7;
      *(float32x4_t *)(v119 + 16) = vcvtq_f32_u32(v120);
      v116 += 8;
      v117 += 32;
      v115 += 8;
    }
    while (v115);
    v121 = v90 & 0xFFFFFFFFFFFFFFF8;
    v89 = v113;
    v95 = v112;
    v18 = v111;
    v9 = v110;
    v97 = v109;
    v87 = v108;
    v84 = v107;
    v82 = v189;
    if (v90 == v192)
      goto LABEL_67;
    goto LABEL_87;
  }
  if (v27 == 2)
  {
    v41 = *v9;
    if (!*v9)
      return;
    v42 = 0;
    v43 = a2[8];
    v44 = a1[8];
    v45 = v9[1];
    v46 = *a2;
    v47 = (uint64_t *)a2[5];
    v48 = (uint64_t *)a1[5];
    v49 = *v48;
    v50 = *v47;
    v51 = 4 * *v48;
    v52 = v43 + v45;
    v53 = v45 & 0xFFFFFFFFFFFFFFF0;
    v54 = v45 & 0xFFFFFFFFFFFFFFF8;
    v55 = v18 + 4 * v44;
    v56 = v18 + 4 * (v44 + v45);
    v57 = v55;
    while (!v45)
    {
LABEL_34:
      v44 += v49;
      v43 += v50;
      ++v42;
      v57 += v51;
      if (v42 == v41)
        return;
    }
    v58 = v48[1];
    v59 = v47[1];
    if (v45 < 8
      || (v58 == 1 ? (v60 = v59 == 1) : (v60 = 0),
          !v60
       || (v55 + v51 * v42 < (unint64_t)(v46 + v52 + v50 * v42)
         ? (v61 = v46 + v43 >= (unint64_t)(v56 + v51 * v42))
         : (v61 = 1),
           !v61)))
    {
      v70 = 0;
      v63 = v43;
      v67 = v44;
      goto LABEL_54;
    }
    if (v45 >= 0x10)
    {
      v75 = v57;
      v76 = v46;
      v77 = v45 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v78 = *(int8x16_t *)(v76 + v43);
        v79 = (uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_191A741C0);
        v80 = (uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_191A741B0);
        v81 = (uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_191A741A0);
        a7 = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_191A74190));
        *(float32x4_t *)(v75 + 32) = vcvtq_f32_u32(v80);
        *(float32x4_t *)(v75 + 48) = vcvtq_f32_u32(v79);
        *(int8x16_t *)v75 = a7;
        *(float32x4_t *)(v75 + 16) = vcvtq_f32_u32(v81);
        v75 += 64;
        v76 += 16;
        v77 -= 16;
      }
      while (v77);
      if (v45 == v53)
        goto LABEL_34;
      v62 = v45 & 0xFFFFFFFFFFFFFFF0;
      if ((v45 & 8) == 0)
      {
        v67 = v44 + v53 * v58;
        v70 = v45 & 0xFFFFFFFFFFFFFFF0;
        v63 = v43 + v53 * v59;
LABEL_54:
        v71 = v45 - v70;
        v72 = (unsigned __int8 *)(v46 + v63);
        v73 = 4 * v58;
        v74 = (_DWORD *)(v18 + 4 * v67);
        do
        {
          a7.i8[0] = *v72;
          *(float *)a7.i32 = (float)a7.u32[0];
          *v74 = a7.i32[0];
          v72 += v59;
          v74 = (_DWORD *)((char *)v74 + v73);
          --v71;
        }
        while (v71);
        goto LABEL_34;
      }
    }
    else
    {
      v62 = 0;
    }
    v63 = v43 + v54 * v59;
    v64 = v62 - (v45 & 0xFFFFFFFFFFFFFFF8);
    v65 = v46 + v62;
    v66 = 4 * v62;
    v67 = v44 + v54 * v58;
    do
    {
      v68 = v57 + v66;
      a7.i64[0] = *(_QWORD *)(v65 + v43);
      v69 = (uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_191A741A0);
      a7 = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_191A74190));
      *(int8x16_t *)v68 = a7;
      *(float32x4_t *)(v68 + 16) = vcvtq_f32_u32(v69);
      v65 += 8;
      v66 += 32;
      v64 += 8;
    }
    while (v64);
    v70 = v45 & 0xFFFFFFFFFFFFFFF8;
    if (v45 == v54)
      goto LABEL_34;
    goto LABEL_54;
  }
  if (v27 != 1)
  {
    if ((v17 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v133 = operator new(v17);
    bzero(v133, v17 & 0xFFFFFFFFFFFFFFF8);
    v135 = *a2;
    if (v17 >> 3 <= 1)
      v136 = 1;
    else
      v136 = v17 >> 3;
    v137 = a2[5];
    v138 = a2[8];
    v139 = v136 & 0x1FFFFFFFFFFFFFFELL;
    v140 = a1[5];
    while (v136 >= 2)
    {
      v143 = 0;
      v144 = 0;
      v145 = v136 & 0x1FFFFFFFFFFFFFFELL;
      v146 = (_QWORD *)(v140 + 8);
      v147 = v133 + 1;
      do
      {
        v143 += *(v146 - 1) * *(v147 - 1);
        v144 += *v146 * *v147;
        v147 += 2;
        v146 += 2;
        v145 -= 2;
      }
      while (v145);
      v141 = v144 + v143;
      v142 = v136 & 0x1FFFFFFFFFFFFFFELL;
      if (v136 != v139)
        goto LABEL_105;
LABEL_107:
      if (v136 < 2)
      {
        v155 = 0;
        v156 = 0;
LABEL_112:
        v162 = v136 - v156;
        v163 = v156;
        v164 = (uint64_t *)(v137 + 8 * v156);
        v165 = &v133[v163];
        do
        {
          v167 = *v165++;
          v166 = v167;
          v168 = *v164++;
          v155 += v168 * v166;
          --v162;
        }
        while (v162);
        goto LABEL_114;
      }
      v157 = 0;
      v158 = 0;
      v159 = v136 & 0x1FFFFFFFFFFFFFFELL;
      v160 = (_QWORD *)(v137 + 8);
      v161 = v133 + 1;
      do
      {
        v157 += *(v160 - 1) * *(v161 - 1);
        v158 += *v160 * *v161;
        v161 += 2;
        v160 += 2;
        v159 -= 2;
      }
      while (v159);
      v155 = v158 + v157;
      v156 = v136 & 0x1FFFFFFFFFFFFFFELL;
      if (v136 != v139)
        goto LABEL_112;
LABEL_114:
      LOBYTE(v134) = *(_BYTE *)(v135 + v138 + v155);
      v134 = (float)LODWORD(v134);
      *(float *)(v18 + 4 * v141) = v134;
      if ((int)(v17 >> 3) >= 1)
      {
        v169 = (v17 >> 3) + 1;
        v170 = v17 >> 3;
        while (1)
        {
          v171 = (v169 - 2);
          v172 = v133[v171] + 1;
          v133[v171] = v172;
          if (v172 < v9[v171])
            break;
          v133[(v169 - 2)] = 0;
          --v170;
          if ((unint64_t)--v169 <= 1)
            goto LABEL_120;
        }
        if (v170 > 0)
          continue;
      }
LABEL_120:
      operator delete(v133);
      return;
    }
    v141 = 0;
    v142 = 0;
LABEL_105:
    v148 = v136 - v142;
    v149 = v142;
    v150 = (uint64_t *)(v140 + 8 * v142);
    v151 = &v133[v149];
    do
    {
      v153 = *v151++;
      v152 = v153;
      v154 = *v150++;
      v141 += v154 * v152;
      --v148;
    }
    while (v148);
    goto LABEL_107;
  }
  v28 = *v9;
  if (!*v9)
    return;
  v29 = a2[8];
  v30 = a1[8];
  v31 = *a2;
  v32 = *(_QWORD *)a1[5];
  v33 = *(_QWORD *)a2[5];
  if (v28 < 8)
    goto LABEL_27;
  v34 = 0;
  if (v32 != 1 || v33 != 1)
    goto LABEL_28;
  if (v18 + 4 * v30 < v31 + v28 + v29 && v31 + v29 < v18 + 4 * (v28 + v30))
  {
LABEL_27:
    v34 = 0;
LABEL_28:
    v35 = a2[8];
    v36 = a1[8];
    goto LABEL_29;
  }
  if (v28 >= 0x10)
  {
    v34 = v28 & 0xFFFFFFFFFFFFFFF0;
    v179 = (int8x16_t *)(v31 + v29);
    v180 = (float32x4_t *)(v18 + 4 * v30);
    a3 = NAN;
    a5.i64[1] = 0xFFFFFF07FFFFFF06;
    v181 = v28 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v182 = *v179++;
      v180[2] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v182, (int8x16_t)xmmword_191A741B0));
      v180[3] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v182, (int8x16_t)xmmword_191A741C0));
      *v180 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v182, (int8x16_t)xmmword_191A74190));
      v180[1] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v182, (int8x16_t)xmmword_191A741A0));
      v180 += 4;
      v181 -= 16;
    }
    while (v181);
    if (v28 == v34)
      return;
    if ((v28 & 8) == 0)
    {
      v36 = v30 + v34;
      v35 = v29 + v34;
LABEL_29:
      v37 = v28 - v34;
      v38 = (_BYTE *)(v31 + v35);
      v39 = 4 * v32;
      v40 = (float *)(v18 + 4 * v36);
      do
      {
        LOBYTE(a3) = *v38;
        a3 = (float)LODWORD(a3);
        *v40 = a3;
        v38 += v33;
        v40 = (float *)((char *)v40 + v39);
        --v37;
      }
      while (v37);
      return;
    }
  }
  else
  {
    v34 = 0;
  }
  v173 = v34;
  v34 = v28 & 0xFFFFFFFFFFFFFFF8;
  v35 = v29 + (v28 & 0xFFFFFFFFFFFFFFF8);
  v36 = v30 + (v28 & 0xFFFFFFFFFFFFFFF8);
  v174 = v173 - (v28 & 0xFFFFFFFFFFFFFFF8);
  v175 = (unint64_t *)(v31 + v173 + v29);
  v176 = v18 + 4 * (v173 + v30);
  a3 = NAN;
  do
  {
    v177 = *v175++;
    a5.i64[0] = v177;
    v178 = (uint32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_191A741A0);
    a5 = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_191A74190));
    *(int8x16_t *)v176 = a5;
    *(float32x4_t *)(v176 + 16) = vcvtq_f32_u32(v178);
    v176 += 32;
    v174 += 8;
  }
  while (v174);
  if (v28 != v34)
    goto LABEL_29;
}

void sub_1911E4D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>& nitro::ndarray<float>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911E4EF4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911E4F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911E4F00);
}

void nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<float>& nitro::ndarray<float>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<float>& nitro::ndarray<float>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911E5188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<float>& nitro::ndarray<float>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911E532C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911E5340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911E5338);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1911E5670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1911E56D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

_QWORD *nitro::ndarray<unsigned char>::assign<int>(_QWORD *a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = (char *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (uint64_t)(a2[3] - (_QWORD)v6) >> 3)
    goto LABEL_13;
  if (v3 == v4)
    return a1;
  v7 = v5 <= 1 ? 1 : (v3 - v4) >> 3;
  if (*(_QWORD *)v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = *(_QWORD *)&v4[8 * v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<unsigned char>::assign<int>(nitro::ndarray<int> const&)::{lambda(void)#1}::operator()();
  if (v3 != v4 && *a1)
  {
    v12 = v3 - v4 - 8;
    if (v12 >= 8)
    {
      v15 = (v12 >> 3) + 1;
      v14 = &v4[8 * (v15 & 0x3FFFFFFFFFFFFFFELL)];
      v16 = v4 + 8;
      v17 = 1;
      v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
      v19 = 1;
      do
      {
        v17 *= *(v16 - 1);
        v19 *= *v16;
        v16 += 2;
        v18 -= 2;
      }
      while (v18);
      v13 = v19 * v17;
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_21:
        if (v13)
          nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(a1, a2);
        return a1;
      }
    }
    else
    {
      v13 = 1;
      v14 = (char *)a1[2];
    }
    do
    {
      v20 = *(_QWORD *)v14;
      v14 += 8;
      v13 *= v20;
    }
    while (v14 != v3);
    goto LABEL_21;
  }
  return a1;
}

void nitro::ndarray<unsigned char>::assign<int>(nitro::ndarray<int> const&)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<int>(nitro::ndarray<int> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911E5AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;

  v4 = (char *)a1[2];
  v5 = (char *)a1[3];
  v6 = (v5 - v4) >> 3;
  v7 = (_QWORD *)a2[2];
  if (v6 != (uint64_t)(a2[3] - (_QWORD)v7) >> 3)
    goto LABEL_13;
  if (v5 == v4)
    return;
  v8 = v6 <= 1 ? 1 : (v5 - v4) >> 3;
  if (*(_QWORD *)v4 != *v7)
    goto LABEL_13;
  v9 = 1;
  do
  {
    v10 = v9;
    if (v8 == v9)
      break;
    v11 = *(_QWORD *)&v4[8 * v9];
    v12 = v7[v9++];
  }
  while (v11 == v12);
  if (v10 < v6)
LABEL_13:
    nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1})::{lambda(void)#1}::operator()();
  v13 = v5 - v4;
  if (v5 == v4 || !*a1)
    return;
  if ((unint64_t)(v13 - 8) < 8)
  {
    v14 = 1;
    v15 = (char *)a1[2];
    do
    {
LABEL_20:
      v21 = *(_QWORD *)v15;
      v15 += 8;
      v14 *= v21;
    }
    while (v15 != v5);
    goto LABEL_21;
  }
  v16 = ((unint64_t)(v13 - 8) >> 3) + 1;
  v15 = &v4[8 * (v16 & 0x3FFFFFFFFFFFFFFELL)];
  v17 = v4 + 8;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = v13 >> 3;
  if (v13 >> 3 == 3)
  {
    v35 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      v36 = 0;
      v37 = a2[8];
      v38 = a1[8];
      do
      {
        if (*((_QWORD *)v4 + 1))
        {
          v39 = 0;
          v40 = v37;
          v41 = v38;
          do
          {
            if (*((_QWORD *)v4 + 2))
            {
              v44 = 0;
              v45 = v40;
              v46 = v41;
              do
              {
                *(_BYTE *)(*a1 + v46) = *(_DWORD *)(*a2 + 4 * v45);
                v42 = (_QWORD *)a1[5];
                v46 += v42[2];
                v43 = (_QWORD *)a2[5];
                v45 += v43[2];
                ++v44;
                v4 = (char *)a1[2];
              }
              while (v44 < *((_QWORD *)v4 + 2));
            }
            else
            {
              v42 = (_QWORD *)a1[5];
              v43 = (_QWORD *)a2[5];
            }
            v41 += v42[1];
            v40 += v43[1];
            ++v39;
          }
          while (v39 < *((_QWORD *)v4 + 1));
          v35 = *(_QWORD *)v4;
        }
        else
        {
          v42 = (_QWORD *)a1[5];
          v43 = (_QWORD *)a2[5];
        }
        v38 += *v42;
        v37 += *v43;
        ++v36;
      }
      while (v36 < v35);
    }
  }
  else
  {
    if (v22 != 2)
    {
      if (v22 == 1)
      {
        if (*(_QWORD *)v4)
        {
          v23 = 0;
          v24 = a2[8];
          v25 = a1[8];
          do
          {
            *(_BYTE *)(*a1 + v25) = *(_DWORD *)(*a2 + 4 * v24);
            v25 += *(_QWORD *)a1[5];
            v24 += *(_QWORD *)a2[5];
            ++v23;
          }
          while (v23 < *(_QWORD *)a1[2]);
        }
        return;
      }
      if (v13 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v47 = operator new(v13);
      bzero(v47, v13 & 0xFFFFFFFFFFFFFFF8);
      if (v22 <= 1)
        v48 = 1;
      else
        v48 = v13 >> 3;
      v49 = v48 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        v50 = a1[5];
        if (v48 < 2)
          break;
        v53 = 0;
        v54 = 0;
        v55 = (_QWORD *)(v50 + 8);
        v56 = v48 & 0xFFFFFFFFFFFFFFFELL;
        v57 = v47 + 1;
        do
        {
          v53 += *(v55 - 1) * *(v57 - 1);
          v54 += *v55 * *v57;
          v57 += 2;
          v55 += 2;
          v56 -= 2;
        }
        while (v56);
        v51 = v54 + v53;
        v52 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49)
          goto LABEL_60;
LABEL_62:
        v65 = a2[5];
        if (v48 < 2)
        {
          v66 = 0;
          v67 = 0;
LABEL_67:
          v73 = v48 - v67;
          v74 = v67;
          v75 = (uint64_t *)(v65 + v74 * 8);
          v76 = &v47[v74];
          do
          {
            v78 = *v76++;
            v77 = v78;
            v79 = *v75++;
            v66 += v79 * v77;
            --v73;
          }
          while (v73);
          goto LABEL_69;
        }
        v68 = 0;
        v69 = 0;
        v70 = (_QWORD *)(v65 + 8);
        v71 = v48 & 0xFFFFFFFFFFFFFFFELL;
        v72 = v47 + 1;
        do
        {
          v68 += *(v70 - 1) * *(v72 - 1);
          v69 += *v70 * *v72;
          v72 += 2;
          v70 += 2;
          v71 -= 2;
        }
        while (v71);
        v66 = v69 + v68;
        v67 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49)
          goto LABEL_67;
LABEL_69:
        *(_BYTE *)(*a1 + v51) = *(_DWORD *)(*a2 + 4 * (a2[8] + v66));
        if ((int)((unint64_t)v13 >> 3) >= 1)
        {
          v80 = a1[2];
          v81 = ((unint64_t)v13 >> 3) + 1;
          v82 = (unint64_t)v13 >> 3;
          while (1)
          {
            v83 = (v81 - 2);
            v84 = v47[v83] + 1;
            v47[v83] = v84;
            if (v84 < *(_QWORD *)(v80 + v83 * 8))
              break;
            v47[(v81 - 2)] = 0;
            LODWORD(v82) = v82 - 1;
            if ((unint64_t)--v81 <= 1)
              goto LABEL_75;
          }
          if ((int)v82 > 0)
            continue;
        }
LABEL_75:
        operator delete(v47);
        return;
      }
      v51 = 0;
      v52 = 0;
LABEL_60:
      v58 = v48 - v52;
      v59 = v52;
      v60 = (uint64_t *)(v50 + v59 * 8);
      v61 = &v47[v59];
      do
      {
        v63 = *v61++;
        v62 = v63;
        v64 = *v60++;
        v51 += v64 * v62;
        --v58;
      }
      while (v58);
      goto LABEL_62;
    }
    v26 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      v27 = 0;
      v28 = a2[8];
      v29 = a1[8];
      do
      {
        if (*((_QWORD *)v4 + 1))
        {
          v32 = 0;
          v33 = v28;
          v34 = v29;
          do
          {
            *(_BYTE *)(*a1 + v34) = *(_DWORD *)(*a2 + 4 * v33);
            v30 = (_QWORD *)a1[5];
            v34 += v30[1];
            v31 = (_QWORD *)a2[5];
            v33 += v31[1];
            ++v32;
            v4 = (char *)a1[2];
          }
          while (v32 < *((_QWORD *)v4 + 1));
          v26 = *(_QWORD *)v4;
        }
        else
        {
          v30 = (_QWORD *)a1[5];
          v31 = (_QWORD *)a2[5];
        }
        v29 += *v30;
        v28 += *v31;
        ++v27;
      }
      while (v27 < v26);
    }
  }
}

void sub_1911E5FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<int>(nitro::ndarray<int> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911E6134(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911E6148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911E6140);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911E63C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911E656C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911E6580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911E6578);
}

uint64_t *nitro::ndarray<half>::assign<int>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = (char *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == v4)
    return a1;
  v7 = v5 <= 1 ? 1 : (v3 - v4) >> 3;
  if (*(_QWORD *)v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = *(_QWORD *)&v4[8 * v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<half>::assign<int>(nitro::ndarray<int> const&)::{lambda(void)#1}::operator()();
  if (v3 != v4 && *a1)
  {
    v12 = v3 - v4 - 8;
    if (v12 >= 8)
    {
      v15 = (v12 >> 3) + 1;
      v14 = &v4[8 * (v15 & 0x3FFFFFFFFFFFFFFELL)];
      v16 = v4 + 8;
      v17 = 1;
      v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
      v19 = 1;
      do
      {
        v17 *= *(v16 - 1);
        v19 *= *v16;
        v16 += 2;
        v18 -= 2;
      }
      while (v18);
      v13 = v19 * v17;
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_21:
        if (v13)
          nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::assign<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(a1, a2);
        return a1;
      }
    }
    else
    {
      v13 = 1;
      v14 = (char *)a1[2];
    }
    do
    {
      v20 = *(_QWORD *)v14;
      v14 += 8;
      v13 *= v20;
    }
    while (v14 != v3);
    goto LABEL_21;
  }
  return a1;
}

void nitro::ndarray<half>::assign<int>(nitro::ndarray<int> const&)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::ndarray<half>& nitro::ndarray<half>::assign<int>(nitro::ndarray<int> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911E693C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::assign<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  _WORD *v34;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int *v61;
  uint64_t v62;
  uint64_t v63;
  _WORD *v64;
  int32x4_t *v66;
  float16x8_t *v67;
  unint64_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int32x4_t *v86;
  uint64_t v87;
  float16x8_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  int *v98;
  uint64_t v99;
  uint64_t v100;
  _WORD *v101;
  int32x4_t *v103;
  float16x8_t *v104;
  unint64_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  _QWORD *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v146;
  int v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int32x4_t *v152;
  float16x8_t *v153;
  unint64_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::assign<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<half>& nitro::ndarray<half>::assign<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return;
  v13 = *a1;
  if (!*a1)
    return;
  if (v12 - 8 < 8)
  {
    v14 = 1;
    v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v16 = ((v12 - 8) >> 3) + 1;
  v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  v17 = v4 + 1;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v164 = *v4;
    if (!*v4)
      return;
    v73 = 0;
    v74 = a2[8];
    v75 = a1[8];
    v76 = v4[1];
    v77 = (uint64_t *)a1[5];
    v159 = (uint64_t *)a2[5];
    v78 = v13 + 2 * v75 + 16;
    v162 = *v159;
    v163 = *v77;
    v161 = 2 * *v77;
    v79 = 4 * v74 + 32;
    v160 = 4 * *v159;
    while (!v76)
    {
LABEL_50:
      v75 += v163;
      v74 += v162;
      ++v73;
      v78 += v161;
      v79 += v160;
      if (v73 == v164)
        return;
    }
    v80 = 0;
    v81 = v4[2];
    v82 = *a2;
    v83 = a2[5];
    v84 = v77[1];
    v85 = v81 & 0xFFFFFFFFFFFFFFF0;
    v86 = (int32x4_t *)(*a2 + v79);
    v87 = v159[1];
    v88 = (float16x8_t *)v78;
    v89 = v74;
    v90 = v75;
    while (1)
    {
      if (v81)
      {
        v91 = v77[2];
        v92 = *(_QWORD *)(v83 + 16);
        if (v81 >= 0x10 && (v92 == 1 ? (v93 = v91 == 1) : (v93 = 0), v93))
        {
          v95 = v89 + v85 * v92;
          v103 = v86;
          v104 = v88;
          v105 = v81 & 0xFFFFFFFFFFFFFFF0;
          v96 = v90 + v85 * v91;
          do
          {
            v106 = v103[-2];
            v107 = v103[-1];
            v108 = *v103;
            v109 = v103[1];
            v103 += 4;
            v104[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(v106)), vcvtq_f32_s32(v107));
            *v104 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(v108)), vcvtq_f32_s32(v109));
            v104 += 2;
            v105 -= 16;
          }
          while (v105);
          v94 = v81 & 0xFFFFFFFFFFFFFFF0;
          if (v81 == v85)
            goto LABEL_53;
        }
        else
        {
          v94 = 0;
          v95 = v89;
          v96 = v90;
        }
        v97 = v81 - v94;
        v98 = (int *)(v82 + 4 * v95);
        v99 = 4 * v92;
        v100 = 2 * v91;
        v101 = (_WORD *)(v13 + 2 * v96);
        do
        {
          _S0 = (float)*v98;
          __asm { FCVT            H0, S0 }
          *v101 = LOWORD(_S0);
          v98 = (int *)((char *)v98 + v99);
          v101 = (_WORD *)((char *)v101 + v100);
          --v97;
        }
        while (v97);
      }
LABEL_53:
      v90 += v84;
      v89 += v87;
      ++v80;
      v88 = (float16x8_t *)((char *)v88 + 2 * v84);
      v86 = (int32x4_t *)((char *)v86 + 4 * v87);
      if (v80 == v76)
        goto LABEL_50;
    }
  }
  if (v22 == 2)
  {
    v39 = *v4;
    if (!*v4)
      return;
    v40 = 0;
    v41 = a2[8];
    v42 = a1[8];
    v43 = v4[1];
    v44 = *a2;
    v45 = (uint64_t *)a2[5];
    v46 = (uint64_t *)a1[5];
    v47 = *v46;
    v48 = *v45;
    v49 = v43 & 0xFFFFFFFFFFFFFFF0;
    v50 = v13 + 2 * v42 + 16;
    v51 = 2 * *v46;
    v52 = *a2 + 4 * v41 + 32;
    v53 = 4 * *v45;
    while (1)
    {
      if (v43)
      {
        v54 = v46[1];
        v55 = v45[1];
        if (v43 >= 0x10 && (v55 == 1 ? (_ZF = v54 == 1) : (_ZF = 0), _ZF))
        {
          v58 = v41 + v49 * v55;
          v66 = (int32x4_t *)v52;
          v67 = (float16x8_t *)v50;
          v68 = v43 & 0xFFFFFFFFFFFFFFF0;
          v59 = v42 + v49 * v54;
          do
          {
            v69 = v66[-2];
            v70 = v66[-1];
            v71 = *v66;
            v72 = v66[1];
            v66 += 4;
            v67[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(v69)), vcvtq_f32_s32(v70));
            *v67 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(v71)), vcvtq_f32_s32(v72));
            v67 += 2;
            v68 -= 16;
          }
          while (v68);
          v57 = v43 & 0xFFFFFFFFFFFFFFF0;
          if (v43 == v49)
            goto LABEL_33;
        }
        else
        {
          v57 = 0;
          v58 = v41;
          v59 = v42;
        }
        v60 = v43 - v57;
        v61 = (int *)(v44 + 4 * v58);
        v62 = 4 * v55;
        v63 = 2 * v54;
        v64 = (_WORD *)(v13 + 2 * v59);
        do
        {
          _S0 = (float)*v61;
          __asm { FCVT            H0, S0 }
          *v64 = LOWORD(_S0);
          v61 = (int *)((char *)v61 + v62);
          v64 = (_WORD *)((char *)v64 + v63);
          --v60;
        }
        while (v60);
      }
LABEL_33:
      v42 += v47;
      v41 += v48;
      ++v40;
      v50 += v51;
      v52 += v53;
      if (v40 == v39)
        return;
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v110 = operator new(v12);
    bzero(v110, v12 & 0xFFFFFFFFFFFFFFF8);
    v111 = *a2;
    if (v12 >> 3 <= 1)
      v112 = 1;
    else
      v112 = v12 >> 3;
    v113 = a2[5];
    v114 = a2[8];
    v115 = v112 & 0x1FFFFFFFFFFFFFFELL;
    v116 = a1[5];
    while (v112 >= 2)
    {
      v119 = 0;
      v120 = 0;
      v121 = v112 & 0x1FFFFFFFFFFFFFFELL;
      v122 = (_QWORD *)(v116 + 8);
      v123 = v110 + 1;
      do
      {
        v119 += *(v122 - 1) * *(v123 - 1);
        v120 += *v122 * *v123;
        v123 += 2;
        v122 += 2;
        v121 -= 2;
      }
      while (v121);
      v117 = v120 + v119;
      v118 = v112 & 0x1FFFFFFFFFFFFFFELL;
      if (v112 != v115)
        goto LABEL_78;
LABEL_80:
      if (v112 < 2)
      {
        v131 = 0;
        v132 = 0;
LABEL_85:
        v138 = v112 - v132;
        v139 = v132;
        v140 = (uint64_t *)(v113 + 8 * v132);
        v141 = &v110[v139];
        do
        {
          v143 = *v141++;
          v142 = v143;
          v144 = *v140++;
          v131 += v144 * v142;
          --v138;
        }
        while (v138);
        goto LABEL_87;
      }
      v133 = 0;
      v134 = 0;
      v135 = v112 & 0x1FFFFFFFFFFFFFFELL;
      v136 = (_QWORD *)(v113 + 8);
      v137 = v110 + 1;
      do
      {
        v133 += *(v136 - 1) * *(v137 - 1);
        v134 += *v136 * *v137;
        v137 += 2;
        v136 += 2;
        v135 -= 2;
      }
      while (v135);
      v131 = v134 + v133;
      v132 = v112 & 0x1FFFFFFFFFFFFFFELL;
      if (v112 != v115)
        goto LABEL_85;
LABEL_87:
      _S0 = (float)*(int *)(v111 + 4 * (v114 + v131));
      __asm { FCVT            H0, S0 }
      *(_WORD *)(v13 + 2 * v117) = LOWORD(_S0);
      if ((int)(v12 >> 3) >= 1)
      {
        v146 = (v12 >> 3) + 1;
        v147 = v12 >> 3;
        while (1)
        {
          v148 = (v146 - 2);
          v149 = v110[v148] + 1;
          v110[v148] = v149;
          if (v149 < v4[v148])
            break;
          v110[(v146 - 2)] = 0;
          --v147;
          if ((unint64_t)--v146 <= 1)
            goto LABEL_93;
        }
        if (v147 > 0)
          continue;
      }
LABEL_93:
      operator delete(v110);
      return;
    }
    v117 = 0;
    v118 = 0;
LABEL_78:
    v124 = v112 - v118;
    v125 = v118;
    v126 = (uint64_t *)(v116 + 8 * v118);
    v127 = &v110[v125];
    do
    {
      v129 = *v127++;
      v128 = v129;
      v130 = *v126++;
      v117 += v130 * v128;
      --v124;
    }
    while (v124);
    goto LABEL_80;
  }
  v23 = *v4;
  if (!*v4)
    return;
  v24 = a2[8];
  v25 = a1[8];
  v26 = *a2;
  v27 = *(_QWORD *)a1[5];
  v28 = *(_QWORD *)a2[5];
  if (v23 < 0x10)
  {
    v29 = 0;
LABEL_28:
    v30 = v23 - v29;
    v31 = (int *)(v26 + 4 * v24);
    v32 = 4 * v28;
    v33 = 2 * v27;
    v34 = (_WORD *)(v13 + 2 * v25);
    do
    {
      _S0 = (float)*v31;
      __asm { FCVT            H0, S0 }
      *v34 = LOWORD(_S0);
      v31 = (int *)((char *)v31 + v32);
      v34 = (_WORD *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  v29 = 0;
  if (v28 != 1)
    goto LABEL_28;
  if (v27 != 1)
    goto LABEL_28;
  v29 = v23 & 0xFFFFFFFFFFFFFFF0;
  v150 = v24 + (v23 & 0xFFFFFFFFFFFFFFF0);
  v151 = v25 + (v23 & 0xFFFFFFFFFFFFFFF0);
  v152 = (int32x4_t *)(v26 + 4 * v24 + 32);
  v153 = (float16x8_t *)(v13 + 2 * v25 + 16);
  v154 = v23 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v155 = v152[-2];
    v156 = v152[-1];
    v157 = *v152;
    v158 = v152[1];
    v152 += 4;
    v153[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(v155)), vcvtq_f32_s32(v156));
    *v153 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(v157)), vcvtq_f32_s32(v158));
    v153 += 2;
    v154 -= 16;
  }
  while (v154);
  v24 = v150;
  v25 = v151;
  if (v23 != v29)
    goto LABEL_28;
}

void sub_1911E7098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>& nitro::ndarray<half>::assign<int>(nitro::ndarray<int> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911E71F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911E7204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911E71FCLL);
}

void nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::assign<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<half>& nitro::ndarray<half>::assign<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::assign<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<half>& nitro::ndarray<half>::assign<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911E7484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::assign<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<half>& nitro::ndarray<half>::assign<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911E7628(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911E763C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911E7634);
}

uint64_t *nitro::ndarray<float>::assign<int>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = (char *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == v4)
    return a1;
  v7 = v5 <= 1 ? 1 : (v3 - v4) >> 3;
  if (*(_QWORD *)v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = *(_QWORD *)&v4[8 * v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<float>::assign<int>(nitro::ndarray<int> const&)::{lambda(void)#1}::operator()();
  if (v3 != v4 && *a1)
  {
    v12 = v3 - v4 - 8;
    if (v12 >= 8)
    {
      v15 = (v12 >> 3) + 1;
      v14 = &v4[8 * (v15 & 0x3FFFFFFFFFFFFFFELL)];
      v16 = v4 + 8;
      v17 = 1;
      v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
      v19 = 1;
      do
      {
        v17 *= *(v16 - 1);
        v19 *= *v16;
        v16 += 2;
        v18 -= 2;
      }
      while (v18);
      v13 = v19 * v17;
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_21:
        if (v13)
          nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::assign<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(a1, a2);
        return a1;
      }
    }
    else
    {
      v13 = 1;
      v14 = (char *)a1[2];
    }
    do
    {
      v20 = *(_QWORD *)v14;
      v14 += 8;
      v13 *= v20;
    }
    while (v14 != v3);
    goto LABEL_21;
  }
  return a1;
}

void nitro::ndarray<float>::assign<int>(nitro::ndarray<int> const&)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::ndarray<float>& nitro::ndarray<float>::assign<int>(nitro::ndarray<int> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911E79F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::assign<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  float *v60;
  int32x4_t *v61;
  _OWORD *v62;
  unint64_t v63;
  float32x4_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int32x4_t *v78;
  uint64_t v79;
  float32x4_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int *v90;
  uint64_t v91;
  uint64_t v92;
  float *v93;
  int32x4_t *v94;
  float32x4_t *v95;
  unint64_t v96;
  float32x4_t v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int32x4_t *v139;
  float32x4_t *v140;
  unint64_t v141;
  float32x4_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::assign<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<float>& nitro::ndarray<float>::assign<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return;
  v13 = *a1;
  if (!*a1)
    return;
  if (v12 - 8 < 8)
  {
    v14 = 1;
    v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v16 = ((v12 - 8) >> 3) + 1;
  v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  v17 = v4 + 1;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v148 = *v4;
    if (!*v4)
      return;
    v65 = 0;
    v66 = a2[8];
    v67 = a1[8];
    v68 = v4[1];
    v69 = (uint64_t *)a1[5];
    v143 = (uint64_t *)a2[5];
    v70 = v13 + 4 * v67 + 16;
    v146 = *v143;
    v147 = *v69;
    v145 = 4 * *v69;
    v71 = 4 * v66 + 16;
    v144 = 4 * *v143;
    while (!v68)
    {
LABEL_50:
      v67 += v147;
      v66 += v146;
      ++v65;
      v70 += v145;
      v71 += v144;
      if (v65 == v148)
        return;
    }
    v72 = 0;
    v73 = v4[2];
    v74 = *a2;
    v75 = a2[5];
    v76 = v69[1];
    v77 = v73 & 0xFFFFFFFFFFFFFFF8;
    v78 = (int32x4_t *)(*a2 + v71);
    v79 = v143[1];
    v80 = (float32x4_t *)v70;
    v81 = v66;
    v82 = v67;
    while (1)
    {
      if (v73)
      {
        v83 = v69[2];
        v84 = *(_QWORD *)(v75 + 16);
        if (v73 >= 8 && (v84 == 1 ? (v85 = v83 == 1) : (v85 = 0), v85))
        {
          v87 = v81 + v77 * v84;
          v94 = v78;
          v95 = v80;
          v96 = v73 & 0xFFFFFFFFFFFFFFF8;
          v88 = v82 + v77 * v83;
          do
          {
            v97 = vcvtq_f32_s32(*v94);
            v95[-1] = vcvtq_f32_s32(v94[-1]);
            *v95 = v97;
            v95 += 2;
            v94 += 2;
            v96 -= 8;
          }
          while (v96);
          v86 = v73 & 0xFFFFFFFFFFFFFFF8;
          if (v73 == v77)
            goto LABEL_53;
        }
        else
        {
          v86 = 0;
          v87 = v81;
          v88 = v82;
        }
        v89 = v73 - v86;
        v90 = (int *)(v74 + 4 * v87);
        v91 = 4 * v84;
        v92 = 4 * v83;
        v93 = (float *)(v13 + 4 * v88);
        do
        {
          *v93 = (float)*v90;
          v90 = (int *)((char *)v90 + v91);
          v93 = (float *)((char *)v93 + v92);
          --v89;
        }
        while (v89);
      }
LABEL_53:
      v82 += v76;
      v81 += v79;
      ++v72;
      v80 = (float32x4_t *)((char *)v80 + 4 * v76);
      v78 = (int32x4_t *)((char *)v78 + 4 * v79);
      if (v72 == v68)
        goto LABEL_50;
    }
  }
  if (v22 == 2)
  {
    v35 = *v4;
    if (!*v4)
      return;
    v36 = 0;
    v37 = a2[8];
    v38 = a1[8];
    v39 = v4[1];
    v40 = *a2;
    v41 = (uint64_t *)a2[5];
    v42 = (uint64_t *)a1[5];
    v43 = *v42;
    v44 = *v41;
    v45 = v39 & 0xFFFFFFFFFFFFFFF8;
    v46 = v13 + 4 * v38 + 16;
    v47 = 4 * *v42;
    v48 = *a2 + 4 * v37 + 16;
    v49 = 4 * *v41;
    while (1)
    {
      if (v39)
      {
        v50 = v42[1];
        v51 = v41[1];
        if (v39 >= 8 && (v51 == 1 ? (v52 = v50 == 1) : (v52 = 0), v52))
        {
          v54 = v37 + v45 * v51;
          v61 = (int32x4_t *)v48;
          v62 = (_OWORD *)v46;
          v63 = v39 & 0xFFFFFFFFFFFFFFF8;
          v55 = v38 + v45 * v50;
          do
          {
            v64 = vcvtq_f32_s32(*v61);
            *(v62 - 1) = vcvtq_f32_s32(v61[-1]);
            *v62 = v64;
            v62 += 2;
            v61 += 2;
            v63 -= 8;
          }
          while (v63);
          v53 = v39 & 0xFFFFFFFFFFFFFFF8;
          if (v39 == v45)
            goto LABEL_33;
        }
        else
        {
          v53 = 0;
          v54 = v37;
          v55 = v38;
        }
        v56 = v39 - v53;
        v57 = (int *)(v40 + 4 * v54);
        v58 = 4 * v51;
        v59 = 4 * v50;
        v60 = (float *)(v13 + 4 * v55);
        do
        {
          *v60 = (float)*v57;
          v57 = (int *)((char *)v57 + v58);
          v60 = (float *)((char *)v60 + v59);
          --v56;
        }
        while (v56);
      }
LABEL_33:
      v38 += v43;
      v37 += v44;
      ++v36;
      v46 += v47;
      v48 += v49;
      if (v36 == v35)
        return;
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v98 = operator new(v12);
    bzero(v98, v12 & 0xFFFFFFFFFFFFFFF8);
    v99 = *a2;
    if (v12 >> 3 <= 1)
      v100 = 1;
    else
      v100 = v12 >> 3;
    v101 = a2[5];
    v102 = a2[8];
    v103 = v100 & 0x1FFFFFFFFFFFFFFELL;
    v104 = a1[5];
    while (v100 >= 2)
    {
      v107 = 0;
      v108 = 0;
      v109 = v100 & 0x1FFFFFFFFFFFFFFELL;
      v110 = (_QWORD *)(v104 + 8);
      v111 = v98 + 1;
      do
      {
        v107 += *(v110 - 1) * *(v111 - 1);
        v108 += *v110 * *v111;
        v111 += 2;
        v110 += 2;
        v109 -= 2;
      }
      while (v109);
      v105 = v108 + v107;
      v106 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103)
        goto LABEL_78;
LABEL_80:
      if (v100 < 2)
      {
        v119 = 0;
        v120 = 0;
LABEL_85:
        v126 = v100 - v120;
        v127 = v120;
        v128 = (uint64_t *)(v101 + 8 * v120);
        v129 = &v98[v127];
        do
        {
          v131 = *v129++;
          v130 = v131;
          v132 = *v128++;
          v119 += v132 * v130;
          --v126;
        }
        while (v126);
        goto LABEL_87;
      }
      v121 = 0;
      v122 = 0;
      v123 = v100 & 0x1FFFFFFFFFFFFFFELL;
      v124 = (_QWORD *)(v101 + 8);
      v125 = v98 + 1;
      do
      {
        v121 += *(v124 - 1) * *(v125 - 1);
        v122 += *v124 * *v125;
        v125 += 2;
        v124 += 2;
        v123 -= 2;
      }
      while (v123);
      v119 = v122 + v121;
      v120 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103)
        goto LABEL_85;
LABEL_87:
      *(float *)(v13 + 4 * v105) = (float)*(int *)(v99 + 4 * (v102 + v119));
      if ((int)(v12 >> 3) >= 1)
      {
        v133 = (v12 >> 3) + 1;
        v134 = v12 >> 3;
        while (1)
        {
          v135 = (v133 - 2);
          v136 = v98[v135] + 1;
          v98[v135] = v136;
          if (v136 < v4[v135])
            break;
          v98[(v133 - 2)] = 0;
          --v134;
          if ((unint64_t)--v133 <= 1)
            goto LABEL_93;
        }
        if (v134 > 0)
          continue;
      }
LABEL_93:
      operator delete(v98);
      return;
    }
    v105 = 0;
    v106 = 0;
LABEL_78:
    v112 = v100 - v106;
    v113 = v106;
    v114 = (uint64_t *)(v104 + 8 * v106);
    v115 = &v98[v113];
    do
    {
      v117 = *v115++;
      v116 = v117;
      v118 = *v114++;
      v105 += v118 * v116;
      --v112;
    }
    while (v112);
    goto LABEL_80;
  }
  v23 = *v4;
  if (!*v4)
    return;
  v24 = a2[8];
  v25 = a1[8];
  v26 = *a2;
  v27 = *(_QWORD *)a1[5];
  v28 = *(_QWORD *)a2[5];
  if (v23 < 8)
  {
    v29 = 0;
LABEL_28:
    v30 = v23 - v29;
    v31 = (int *)(v26 + 4 * v24);
    v32 = 4 * v28;
    v33 = 4 * v27;
    v34 = (float *)(v13 + 4 * v25);
    do
    {
      *v34 = (float)*v31;
      v31 = (int *)((char *)v31 + v32);
      v34 = (float *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  v29 = 0;
  if (v28 != 1)
    goto LABEL_28;
  if (v27 != 1)
    goto LABEL_28;
  v29 = v23 & 0xFFFFFFFFFFFFFFF8;
  v137 = v24 + (v23 & 0xFFFFFFFFFFFFFFF8);
  v138 = v25 + (v23 & 0xFFFFFFFFFFFFFFF8);
  v139 = (int32x4_t *)(v26 + 4 * v24 + 16);
  v140 = (float32x4_t *)(v13 + 4 * v25 + 16);
  v141 = v23 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v142 = vcvtq_f32_s32(*v139);
    v140[-1] = vcvtq_f32_s32(v139[-1]);
    *v140 = v142;
    v139 += 2;
    v140 += 2;
    v141 -= 8;
  }
  while (v141);
  v24 = v137;
  v25 = v138;
  if (v23 != v29)
    goto LABEL_28;
}

void sub_1911E80FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>& nitro::ndarray<float>::assign<int>(nitro::ndarray<int> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911E8254(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911E8268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911E8260);
}

void nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::assign<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<float>& nitro::ndarray<float>::assign<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::assign<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<float>& nitro::ndarray<float>::assign<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911E84E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::assign<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<float>& nitro::ndarray<float>::assign<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911E868C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911E86A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911E8698);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1911E89D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1911E8A38(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

_QWORD *nitro::ndarray<unsigned char>::assign<half>(_QWORD *a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = (char *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (uint64_t)(a2[3] - (_QWORD)v6) >> 3)
    goto LABEL_13;
  if (v3 == v4)
    return a1;
  v7 = v5 <= 1 ? 1 : (v3 - v4) >> 3;
  if (*(_QWORD *)v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = *(_QWORD *)&v4[8 * v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<unsigned char>::assign<half>(nitro::ndarray<half> const&)::{lambda(void)#1}::operator()();
  if (v3 != v4 && *a1)
  {
    v12 = v3 - v4 - 8;
    if (v12 >= 8)
    {
      v15 = (v12 >> 3) + 1;
      v14 = &v4[8 * (v15 & 0x3FFFFFFFFFFFFFFELL)];
      v16 = v4 + 8;
      v17 = 1;
      v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
      v19 = 1;
      do
      {
        v17 *= *(v16 - 1);
        v19 *= *v16;
        v16 += 2;
        v18 -= 2;
      }
      while (v18);
      v13 = v19 * v17;
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_21:
        if (v13)
          nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(a1, a2);
        return a1;
      }
    }
    else
    {
      v13 = 1;
      v14 = (char *)a1[2];
    }
    do
    {
      v20 = *(_QWORD *)v14;
      v14 += 8;
      v13 *= v20;
    }
    while (v14 != v3);
    goto LABEL_21;
  }
  return a1;
}

void nitro::ndarray<unsigned char>::assign<half>(nitro::ndarray<half> const&)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<half>(nitro::ndarray<half> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911E8E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  _QWORD *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;

  v4 = (char *)a1[2];
  v5 = (char *)a1[3];
  v6 = (v5 - v4) >> 3;
  v7 = (_QWORD *)a2[2];
  if (v6 != (uint64_t)(a2[3] - (_QWORD)v7) >> 3)
    goto LABEL_13;
  if (v5 == v4)
    return;
  v8 = v6 <= 1 ? 1 : (v5 - v4) >> 3;
  if (*(_QWORD *)v4 != *v7)
    goto LABEL_13;
  v9 = 1;
  do
  {
    v10 = v9;
    if (v8 == v9)
      break;
    v11 = *(_QWORD *)&v4[8 * v9];
    v12 = v7[v9++];
  }
  while (v11 == v12);
  if (v10 < v6)
LABEL_13:
    nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1})::{lambda(void)#1}::operator()();
  v13 = v5 - v4;
  if (v5 == v4 || !*a1)
    return;
  if ((unint64_t)(v13 - 8) < 8)
  {
    v14 = 1;
    v15 = (char *)a1[2];
    do
    {
LABEL_20:
      v21 = *(_QWORD *)v15;
      v15 += 8;
      v14 *= v21;
    }
    while (v15 != v5);
    goto LABEL_21;
  }
  v16 = ((unint64_t)(v13 - 8) >> 3) + 1;
  v15 = &v4[8 * (v16 & 0x3FFFFFFFFFFFFFFELL)];
  v17 = v4 + 8;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = v13 >> 3;
  if (v13 >> 3 == 3)
  {
    v43 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      v44 = 0;
      v45 = a2[8];
      v46 = a1[8];
      do
      {
        if (*((_QWORD *)v4 + 1))
        {
          v47 = 0;
          v48 = v45;
          v49 = v46;
          do
          {
            if (*((_QWORD *)v4 + 2))
            {
              v52 = 0;
              v53 = v48;
              v54 = v49;
              do
              {
                _H0 = *(_WORD *)(*a2 + 2 * v53);
                __asm { FCVT            S0, H0 }
                *(_BYTE *)(*a1 + v54) = (int)_S0;
                v50 = (_QWORD *)a1[5];
                v54 += v50[2];
                v51 = (_QWORD *)a2[5];
                v53 += v51[2];
                ++v52;
                v4 = (char *)a1[2];
              }
              while (v52 < *((_QWORD *)v4 + 2));
            }
            else
            {
              v50 = (_QWORD *)a1[5];
              v51 = (_QWORD *)a2[5];
            }
            v49 += v50[1];
            v48 += v51[1];
            ++v47;
          }
          while (v47 < *((_QWORD *)v4 + 1));
          v43 = *(_QWORD *)v4;
        }
        else
        {
          v50 = (_QWORD *)a1[5];
          v51 = (_QWORD *)a2[5];
        }
        v46 += *v50;
        v45 += *v51;
        ++v44;
      }
      while (v44 < v43);
    }
  }
  else
  {
    if (v22 != 2)
    {
      if (v22 == 1)
      {
        if (*(_QWORD *)v4)
        {
          v23 = 0;
          v24 = a2[8];
          v25 = a1[8];
          do
          {
            _H0 = *(_WORD *)(*a2 + 2 * v24);
            __asm { FCVT            S0, H0 }
            *(_BYTE *)(*a1 + v25) = (int)_S0;
            v25 += *(_QWORD *)a1[5];
            v24 += *(_QWORD *)a2[5];
            ++v23;
          }
          while (v23 < *(_QWORD *)a1[2]);
        }
        return;
      }
      if (v13 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v57 = operator new(v13);
      bzero(v57, v13 & 0xFFFFFFFFFFFFFFF8);
      if (v22 <= 1)
        v58 = 1;
      else
        v58 = v13 >> 3;
      v59 = v58 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        v60 = a1[5];
        if (v58 < 2)
          break;
        v63 = 0;
        v64 = 0;
        v65 = (_QWORD *)(v60 + 8);
        v66 = v58 & 0xFFFFFFFFFFFFFFFELL;
        v67 = v57 + 1;
        do
        {
          v63 += *(v65 - 1) * *(v67 - 1);
          v64 += *v65 * *v67;
          v67 += 2;
          v65 += 2;
          v66 -= 2;
        }
        while (v66);
        v61 = v64 + v63;
        v62 = v58 & 0xFFFFFFFFFFFFFFFELL;
        if (v58 != v59)
          goto LABEL_60;
LABEL_62:
        v75 = a2[5];
        if (v58 < 2)
        {
          v76 = 0;
          v77 = 0;
LABEL_67:
          v83 = v58 - v77;
          v84 = v77;
          v85 = (uint64_t *)(v75 + v84 * 8);
          v86 = &v57[v84];
          do
          {
            v88 = *v86++;
            v87 = v88;
            v89 = *v85++;
            v76 += v89 * v87;
            --v83;
          }
          while (v83);
          goto LABEL_69;
        }
        v78 = 0;
        v79 = 0;
        v80 = (_QWORD *)(v75 + 8);
        v81 = v58 & 0xFFFFFFFFFFFFFFFELL;
        v82 = v57 + 1;
        do
        {
          v78 += *(v80 - 1) * *(v82 - 1);
          v79 += *v80 * *v82;
          v82 += 2;
          v80 += 2;
          v81 -= 2;
        }
        while (v81);
        v76 = v79 + v78;
        v77 = v58 & 0xFFFFFFFFFFFFFFFELL;
        if (v58 != v59)
          goto LABEL_67;
LABEL_69:
        _H0 = *(_WORD *)(*a2 + 2 * (a2[8] + v76));
        __asm { FCVT            S0, H0 }
        *(_BYTE *)(*a1 + v61) = (int)_S0;
        if ((int)((unint64_t)v13 >> 3) >= 1)
        {
          v92 = a1[2];
          v93 = ((unint64_t)v13 >> 3) + 1;
          v94 = (unint64_t)v13 >> 3;
          while (1)
          {
            v95 = (v93 - 2);
            v96 = v57[v95] + 1;
            v57[v95] = v96;
            if (v96 < *(_QWORD *)(v92 + v95 * 8))
              break;
            v57[(v93 - 2)] = 0;
            LODWORD(v94) = v94 - 1;
            if ((unint64_t)--v93 <= 1)
              goto LABEL_75;
          }
          if ((int)v94 > 0)
            continue;
        }
LABEL_75:
        operator delete(v57);
        return;
      }
      v61 = 0;
      v62 = 0;
LABEL_60:
      v68 = v58 - v62;
      v69 = v62;
      v70 = (uint64_t *)(v60 + v69 * 8);
      v71 = &v57[v69];
      do
      {
        v73 = *v71++;
        v72 = v73;
        v74 = *v70++;
        v61 += v74 * v72;
        --v68;
      }
      while (v68);
      goto LABEL_62;
    }
    v32 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      v33 = 0;
      v34 = a2[8];
      v35 = a1[8];
      do
      {
        if (*((_QWORD *)v4 + 1))
        {
          v38 = 0;
          v39 = v34;
          v40 = v35;
          do
          {
            _H0 = *(_WORD *)(*a2 + 2 * v39);
            __asm { FCVT            S0, H0 }
            *(_BYTE *)(*a1 + v40) = (int)_S0;
            v36 = (_QWORD *)a1[5];
            v40 += v36[1];
            v37 = (_QWORD *)a2[5];
            v39 += v37[1];
            ++v38;
            v4 = (char *)a1[2];
          }
          while (v38 < *((_QWORD *)v4 + 1));
          v32 = *(_QWORD *)v4;
        }
        else
        {
          v36 = (_QWORD *)a1[5];
          v37 = (_QWORD *)a2[5];
        }
        v35 += *v36;
        v34 += *v37;
        ++v33;
      }
      while (v33 < v32);
    }
  }
}

void sub_1911E935C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<half>(nitro::ndarray<half> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911E94B4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911E94C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911E94C0);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911E9748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911E98EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911E9900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911E98F8);
}

uint64_t *nitro::ndarray<int>::assign<half>(uint64_t *a1, uint64_t *a2, __n128 a3, float16x4_t a4)
{
  char *v5;
  char *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = (char *)a1[2];
  v5 = (char *)a1[3];
  v7 = (v5 - v6) >> 3;
  v8 = (_QWORD *)a2[2];
  if (v7 != (a2[3] - (uint64_t)v8) >> 3)
    goto LABEL_13;
  if (v5 == v6)
    return a1;
  v9 = v7 <= 1 ? 1 : (v5 - v6) >> 3;
  if (*(_QWORD *)v6 != *v8)
    goto LABEL_13;
  v10 = 1;
  do
  {
    v11 = v10;
    if (v9 == v10)
      break;
    v12 = *(_QWORD *)&v6[8 * v10];
    v13 = v8[v10++];
  }
  while (v12 == v13);
  if (v11 < v7)
LABEL_13:
    nitro::ndarray<int>::assign<half>(nitro::ndarray<half> const&)::{lambda(void)#1}::operator()();
  if (v5 != v6 && *a1)
  {
    v14 = v5 - v6 - 8;
    if (v14 >= 8)
    {
      v17 = (v14 >> 3) + 1;
      v16 = &v6[8 * (v17 & 0x3FFFFFFFFFFFFFFELL)];
      v18 = v6 + 8;
      v19 = 1;
      v20 = v17 & 0x3FFFFFFFFFFFFFFELL;
      v21 = 1;
      do
      {
        v19 *= *(v18 - 1);
        v21 *= *v18;
        v18 += 2;
        v20 -= 2;
      }
      while (v20);
      v15 = v21 * v19;
      if (v17 == (v17 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_21:
        if (v15)
          nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::assign<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(a1, a2, a3, a4);
        return a1;
      }
    }
    else
    {
      v15 = 1;
      v16 = (char *)a1[2];
    }
    do
    {
      v22 = *(_QWORD *)v16;
      v16 += 8;
      v15 *= v22;
    }
    while (v16 != v5);
    goto LABEL_21;
  }
  return a1;
}

void nitro::ndarray<int>::assign<half>(nitro::ndarray<half> const&)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::ndarray<int>& nitro::ndarray<int>::assign<half>(nitro::ndarray<half> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911E9CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::assign<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(uint64_t *a1, uint64_t *a2, __n128 a3, float16x4_t a4)
{
  char *v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __int16 *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  __int16 *v64;
  uint64_t v65;
  uint64_t v66;
  _DWORD *v67;
  __int32 *v70;
  uint64_t v71;
  unint64_t v72;
  __int32 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  __int32 *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  __int16 *v99;
  uint64_t v100;
  uint64_t v101;
  _DWORD *v102;
  __int32 *v105;
  uint64_t v106;
  unint64_t v107;
  __int32 v108;
  _QWORD *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v146;
  int v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  __int32 *v152;
  uint64_t v153;
  unint64_t v154;
  __int32 v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;

  v6 = (unint64_t *)a1[2];
  v5 = (char *)a1[3];
  v7 = (v5 - (char *)v6) >> 3;
  v8 = (_QWORD *)a2[2];
  if (v7 != (a2[3] - (uint64_t)v8) >> 3)
    goto LABEL_13;
  if (v5 == (char *)v6)
    return;
  v9 = v7 <= 1 ? 1 : (v5 - (char *)v6) >> 3;
  if (*v6 != *v8)
    goto LABEL_13;
  v10 = 1;
  do
  {
    v11 = v10;
    if (v9 == v10)
      break;
    v12 = v6[v10];
    v13 = v8[v10++];
  }
  while (v12 == v13);
  if (v11 < v7)
LABEL_13:
    nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::assign<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<int>& nitro::ndarray<int>::assign<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1})::{lambda(void)#1}::operator()();
  v14 = v5 - (char *)v6;
  if (v5 == (char *)v6)
    return;
  v15 = *a1;
  if (!*a1)
    return;
  if (v14 - 8 < 8)
  {
    v16 = 1;
    v17 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v23 = *v17++;
      v16 *= v23;
    }
    while (v17 != (unint64_t *)v5);
    goto LABEL_21;
  }
  v18 = ((v14 - 8) >> 3) + 1;
  v17 = &v6[v18 & 0x3FFFFFFFFFFFFFFELL];
  v19 = v6 + 1;
  v20 = 1;
  v21 = v18 & 0x3FFFFFFFFFFFFFFELL;
  v22 = 1;
  do
  {
    v20 *= *(v19 - 1);
    v22 *= *v19;
    v19 += 2;
    v21 -= 2;
  }
  while (v21);
  v16 = v22 * v20;
  if (v18 != (v18 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v16)
    return;
  v24 = (uint64_t)v14 >> 3;
  if ((uint64_t)v14 >> 3 == 3)
  {
    v161 = *v6;
    if (!*v6)
      return;
    v74 = 0;
    v75 = a2[8];
    v76 = a1[8];
    v77 = v6[1];
    v78 = (uint64_t *)a1[5];
    v156 = (uint64_t *)a2[5];
    v79 = v15 + 4 * v76 + 8;
    v159 = *v156;
    v160 = *v78;
    v158 = 4 * *v78;
    v80 = 2 * v75 + 4;
    v157 = 2 * *v156;
    while (!v77)
    {
LABEL_50:
      v76 += v160;
      v75 += v159;
      ++v74;
      v79 += v158;
      v80 += v157;
      if (v74 == v161)
        return;
    }
    v81 = 0;
    v82 = v6[2];
    v83 = *a2;
    v84 = a2[5];
    v85 = v78[1];
    v86 = v82 & 0xFFFFFFFFFFFFFFFCLL;
    v87 = (__int32 *)(*a2 + v80);
    v88 = v156[1];
    v89 = v79;
    v90 = v75;
    v91 = v76;
    while (1)
    {
      if (v82)
      {
        v92 = v78[2];
        v93 = *(_QWORD *)(v84 + 16);
        if (v82 >= 4 && (v93 == 1 ? (v94 = v92 == 1) : (v94 = 0), v94))
        {
          v96 = v90 + v86 * v93;
          v105 = v87;
          v106 = v89;
          v107 = v82 & 0xFFFFFFFFFFFFFFFCLL;
          v97 = v91 + v86 * v92;
          do
          {
            a3.n128_u32[0] = *(v105 - 1);
            v108 = *v105;
            v105 += 2;
            a4.i32[0] = v108;
            a3.n128_u64[0] = vcvtq_s32_f32(vcvtq_f32_f16((float16x4_t)a3.n128_u64[0])).u64[0];
            a4 = (float16x4_t)vcvtq_s32_f32(vcvtq_f32_f16(a4)).u64[0];
            *(float16x4_t *)&a3.n128_i8[8] = a4;
            *(__n128 *)(v106 - 8) = a3;
            v106 += 16;
            v107 -= 4;
          }
          while (v107);
          v95 = v82 & 0xFFFFFFFFFFFFFFFCLL;
          if (v82 == v86)
            goto LABEL_53;
        }
        else
        {
          v95 = 0;
          v96 = v90;
          v97 = v91;
        }
        v98 = v82 - v95;
        v99 = (__int16 *)(v83 + 2 * v96);
        v100 = 2 * v93;
        v101 = 4 * v92;
        v102 = (_DWORD *)(v15 + 4 * v97);
        do
        {
          _H0 = *v99;
          __asm { FCVT            S0, H0 }
          *v102 = (int)_S0;
          v99 = (__int16 *)((char *)v99 + v100);
          v102 = (_DWORD *)((char *)v102 + v101);
          --v98;
        }
        while (v98);
      }
LABEL_53:
      v91 += v85;
      v90 += v88;
      ++v81;
      v89 += 4 * v85;
      v87 = (__int32 *)((char *)v87 + 2 * v88);
      if (v81 == v77)
        goto LABEL_50;
    }
  }
  if (v24 == 2)
  {
    v42 = *v6;
    if (!*v6)
      return;
    v43 = 0;
    v44 = a2[8];
    v45 = a1[8];
    v46 = v6[1];
    v47 = *a2;
    v48 = (uint64_t *)a2[5];
    v49 = (uint64_t *)a1[5];
    v50 = *v49;
    v51 = *v48;
    v52 = v46 & 0xFFFFFFFFFFFFFFFCLL;
    v53 = v15 + 4 * v45 + 8;
    v54 = 4 * *v49;
    v55 = *a2 + 2 * v44 + 4;
    v56 = 2 * *v48;
    while (1)
    {
      if (v46)
      {
        v57 = v49[1];
        v58 = v48[1];
        if (v46 >= 4 && (v58 == 1 ? (_ZF = v57 == 1) : (_ZF = 0), _ZF))
        {
          v61 = v44 + v52 * v58;
          v70 = (__int32 *)v55;
          v71 = v53;
          v72 = v46 & 0xFFFFFFFFFFFFFFFCLL;
          v62 = v45 + v52 * v57;
          do
          {
            a3.n128_u32[0] = *(v70 - 1);
            v73 = *v70;
            v70 += 2;
            a4.i32[0] = v73;
            a3.n128_u64[0] = vcvtq_s32_f32(vcvtq_f32_f16((float16x4_t)a3.n128_u64[0])).u64[0];
            a4 = (float16x4_t)vcvtq_s32_f32(vcvtq_f32_f16(a4)).u64[0];
            *(float16x4_t *)&a3.n128_i8[8] = a4;
            *(__n128 *)(v71 - 8) = a3;
            v71 += 16;
            v72 -= 4;
          }
          while (v72);
          v60 = v46 & 0xFFFFFFFFFFFFFFFCLL;
          if (v46 == v52)
            goto LABEL_33;
        }
        else
        {
          v60 = 0;
          v61 = v44;
          v62 = v45;
        }
        v63 = v46 - v60;
        v64 = (__int16 *)(v47 + 2 * v61);
        v65 = 2 * v58;
        v66 = 4 * v57;
        v67 = (_DWORD *)(v15 + 4 * v62);
        do
        {
          _H0 = *v64;
          __asm { FCVT            S0, H0 }
          *v67 = (int)_S0;
          v64 = (__int16 *)((char *)v64 + v65);
          v67 = (_DWORD *)((char *)v67 + v66);
          --v63;
        }
        while (v63);
      }
LABEL_33:
      v45 += v50;
      v44 += v51;
      ++v43;
      v53 += v54;
      v55 += v56;
      if (v43 == v42)
        return;
    }
  }
  if (v24 != 1)
  {
    if ((v14 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v109 = operator new(v14);
    bzero(v109, v14 & 0xFFFFFFFFFFFFFFF8);
    v110 = *a2;
    if (v14 >> 3 <= 1)
      v111 = 1;
    else
      v111 = v14 >> 3;
    v112 = a2[5];
    v113 = a2[8];
    v114 = v111 & 0x1FFFFFFFFFFFFFFELL;
    v115 = a1[5];
    while (v111 >= 2)
    {
      v118 = 0;
      v119 = 0;
      v120 = v111 & 0x1FFFFFFFFFFFFFFELL;
      v121 = (_QWORD *)(v115 + 8);
      v122 = v109 + 1;
      do
      {
        v118 += *(v121 - 1) * *(v122 - 1);
        v119 += *v121 * *v122;
        v122 += 2;
        v121 += 2;
        v120 -= 2;
      }
      while (v120);
      v116 = v119 + v118;
      v117 = v111 & 0x1FFFFFFFFFFFFFFELL;
      if (v111 != v114)
        goto LABEL_78;
LABEL_80:
      if (v111 < 2)
      {
        v130 = 0;
        v131 = 0;
LABEL_85:
        v137 = v111 - v131;
        v138 = v131;
        v139 = (uint64_t *)(v112 + 8 * v131);
        v140 = &v109[v138];
        do
        {
          v142 = *v140++;
          v141 = v142;
          v143 = *v139++;
          v130 += v143 * v141;
          --v137;
        }
        while (v137);
        goto LABEL_87;
      }
      v132 = 0;
      v133 = 0;
      v134 = v111 & 0x1FFFFFFFFFFFFFFELL;
      v135 = (_QWORD *)(v112 + 8);
      v136 = v109 + 1;
      do
      {
        v132 += *(v135 - 1) * *(v136 - 1);
        v133 += *v135 * *v136;
        v136 += 2;
        v135 += 2;
        v134 -= 2;
      }
      while (v134);
      v130 = v133 + v132;
      v131 = v111 & 0x1FFFFFFFFFFFFFFELL;
      if (v111 != v114)
        goto LABEL_85;
LABEL_87:
      _H0 = *(_WORD *)(v110 + 2 * (v113 + v130));
      __asm { FCVT            S0, H0 }
      *(_DWORD *)(v15 + 4 * v116) = (int)_S0;
      if ((int)(v14 >> 3) >= 1)
      {
        v146 = (v14 >> 3) + 1;
        v147 = v14 >> 3;
        while (1)
        {
          v148 = (v146 - 2);
          v149 = v109[v148] + 1;
          v109[v148] = v149;
          if (v149 < v6[v148])
            break;
          v109[(v146 - 2)] = 0;
          --v147;
          if ((unint64_t)--v146 <= 1)
            goto LABEL_93;
        }
        if (v147 > 0)
          continue;
      }
LABEL_93:
      operator delete(v109);
      return;
    }
    v116 = 0;
    v117 = 0;
LABEL_78:
    v123 = v111 - v117;
    v124 = v117;
    v125 = (uint64_t *)(v115 + 8 * v117);
    v126 = &v109[v124];
    do
    {
      v128 = *v126++;
      v127 = v128;
      v129 = *v125++;
      v116 += v129 * v127;
      --v123;
    }
    while (v123);
    goto LABEL_80;
  }
  v25 = *v6;
  if (!*v6)
    return;
  v26 = a2[8];
  v27 = a1[8];
  v28 = *a2;
  v29 = *(_QWORD *)a1[5];
  v30 = *(_QWORD *)a2[5];
  if (v25 < 4)
  {
    v31 = 0;
LABEL_28:
    v32 = v25 - v31;
    v33 = (__int16 *)(v28 + 2 * v26);
    v34 = 2 * v30;
    v35 = 4 * v29;
    v36 = (_DWORD *)(v15 + 4 * v27);
    do
    {
      _H0 = *v33;
      __asm { FCVT            S0, H0 }
      *v36 = (int)_S0;
      v33 = (__int16 *)((char *)v33 + v34);
      v36 = (_DWORD *)((char *)v36 + v35);
      --v32;
    }
    while (v32);
    return;
  }
  v31 = 0;
  if (v30 != 1)
    goto LABEL_28;
  if (v29 != 1)
    goto LABEL_28;
  v31 = v25 & 0xFFFFFFFFFFFFFFFCLL;
  v150 = v26 + (v25 & 0xFFFFFFFFFFFFFFFCLL);
  v151 = v27 + (v25 & 0xFFFFFFFFFFFFFFFCLL);
  v152 = (__int32 *)(v28 + 2 * v26 + 4);
  v153 = v15 + 4 * v27 + 8;
  v154 = v25 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    a3.n128_u32[0] = *(v152 - 1);
    v155 = *v152;
    v152 += 2;
    a4.i32[0] = v155;
    a3.n128_u64[0] = vcvtq_s32_f32(vcvtq_f32_f16((float16x4_t)a3.n128_u64[0])).u64[0];
    a4 = (float16x4_t)vcvtq_s32_f32(vcvtq_f32_f16(a4)).u64[0];
    *(float16x4_t *)&a3.n128_i8[8] = a4;
    *(__n128 *)(v153 - 8) = a3;
    v153 += 16;
    v154 -= 4;
  }
  while (v154);
  v26 = v150;
  v27 = v151;
  if (v25 != v31)
    goto LABEL_28;
}

void sub_1911EA40C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>& nitro::ndarray<int>::assign<half>(nitro::ndarray<half> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911EA564(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911EA578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911EA570);
}

void nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::assign<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<int>& nitro::ndarray<int>::assign<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::assign<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<int>& nitro::ndarray<int>::assign<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911EA7F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::assign<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<int>& nitro::ndarray<int>::assign<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911EA99C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911EA9B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911EA9A8);
}

uint64_t *nitro::ndarray<float>::assign<half>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = (char *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == v4)
    return a1;
  v7 = v5 <= 1 ? 1 : (v3 - v4) >> 3;
  if (*(_QWORD *)v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = *(_QWORD *)&v4[8 * v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<float>::assign<half>(nitro::ndarray<half> const&)::{lambda(void)#1}::operator()();
  if (v3 != v4 && *a1)
  {
    v12 = v3 - v4 - 8;
    if (v12 >= 8)
    {
      v15 = (v12 >> 3) + 1;
      v14 = &v4[8 * (v15 & 0x3FFFFFFFFFFFFFFELL)];
      v16 = v4 + 8;
      v17 = 1;
      v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
      v19 = 1;
      do
      {
        v17 *= *(v16 - 1);
        v19 *= *v16;
        v16 += 2;
        v18 -= 2;
      }
      while (v18);
      v13 = v19 * v17;
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_21:
        if (v13)
          nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::assign<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(a1, a2);
        return a1;
      }
    }
    else
    {
      v13 = 1;
      v14 = (char *)a1[2];
    }
    do
    {
      v20 = *(_QWORD *)v14;
      v14 += 8;
      v13 *= v20;
    }
    while (v14 != v3);
    goto LABEL_21;
  }
  return a1;
}

void nitro::ndarray<float>::assign<half>(nitro::ndarray<half> const&)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::ndarray<float>& nitro::ndarray<float>::assign<half>(nitro::ndarray<half> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911EAD6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::assign<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int16 *v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  __int16 *v62;
  uint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  float16x4_t *v68;
  _OWORD *v69;
  unint64_t v70;
  float16x8_t v71;
  float32x4_t v72;
  float32x4_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  float16x4_t *v87;
  uint64_t v88;
  float32x4_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  __int16 *v99;
  uint64_t v100;
  uint64_t v101;
  _DWORD *v102;
  float16x4_t *v105;
  float32x4_t *v106;
  unint64_t v107;
  float16x8_t v108;
  float32x4_t v109;
  float32x4_t v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v148;
  int v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  float16x4_t *v154;
  float32x4_t *v155;
  unint64_t v156;
  float16x8_t v157;
  float32x4_t v158;
  float32x4_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::assign<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<float>& nitro::ndarray<float>::assign<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return;
  v13 = *a1;
  if (!*a1)
    return;
  if (v12 - 8 < 8)
  {
    v14 = 1;
    v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v16 = ((v12 - 8) >> 3) + 1;
  v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  v17 = v4 + 1;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v165 = *v4;
    if (!*v4)
      return;
    v74 = 0;
    v75 = a2[8];
    v76 = a1[8];
    v77 = v4[1];
    v78 = (uint64_t *)a1[5];
    v160 = (uint64_t *)a2[5];
    v79 = v13 + 4 * v76 + 32;
    v163 = *v160;
    v164 = *v78;
    v162 = 4 * *v78;
    v80 = 2 * v75 + 16;
    v161 = 2 * *v160;
    while (!v77)
    {
LABEL_50:
      v76 += v164;
      v75 += v163;
      ++v74;
      v79 += v162;
      v80 += v161;
      if (v74 == v165)
        return;
    }
    v81 = 0;
    v82 = v4[2];
    v83 = *a2;
    v84 = a2[5];
    v85 = v78[1];
    v86 = v82 & 0xFFFFFFFFFFFFFFF0;
    v87 = (float16x4_t *)(*a2 + v80);
    v88 = v160[1];
    v89 = (float32x4_t *)v79;
    v90 = v75;
    v91 = v76;
    while (1)
    {
      if (v82)
      {
        v92 = v78[2];
        v93 = *(_QWORD *)(v84 + 16);
        if (v82 >= 0x10 && (v93 == 1 ? (v94 = v92 == 1) : (v94 = 0), v94))
        {
          v96 = v90 + v86 * v93;
          v105 = v87;
          v106 = v89;
          v107 = v82 & 0xFFFFFFFFFFFFFFF0;
          v97 = v91 + v86 * v92;
          do
          {
            v108 = *(float16x8_t *)v105[-2].i8;
            v109 = vcvtq_f32_f16(*v105);
            v110 = vcvt_hight_f32_f16(*(float16x8_t *)v105->i8);
            v106[-2] = vcvtq_f32_f16(*(float16x4_t *)v108.i8);
            v106[-1] = vcvt_hight_f32_f16(v108);
            *v106 = v109;
            v106[1] = v110;
            v106 += 4;
            v105 += 4;
            v107 -= 16;
          }
          while (v107);
          v95 = v82 & 0xFFFFFFFFFFFFFFF0;
          if (v82 == v86)
            goto LABEL_53;
        }
        else
        {
          v95 = 0;
          v96 = v90;
          v97 = v91;
        }
        v98 = v82 - v95;
        v99 = (__int16 *)(v83 + 2 * v96);
        v100 = 2 * v93;
        v101 = 4 * v92;
        v102 = (_DWORD *)(v13 + 4 * v97);
        do
        {
          _H0 = *v99;
          __asm { FCVT            S0, H0 }
          *v102 = _S0;
          v99 = (__int16 *)((char *)v99 + v100);
          v102 = (_DWORD *)((char *)v102 + v101);
          --v98;
        }
        while (v98);
      }
LABEL_53:
      v91 += v85;
      v90 += v88;
      ++v81;
      v89 = (float32x4_t *)((char *)v89 + 4 * v85);
      v87 = (float16x4_t *)((char *)v87 + 2 * v88);
      if (v81 == v77)
        goto LABEL_50;
    }
  }
  if (v22 == 2)
  {
    v40 = *v4;
    if (!*v4)
      return;
    v41 = 0;
    v42 = a2[8];
    v43 = a1[8];
    v44 = v4[1];
    v45 = *a2;
    v46 = (uint64_t *)a2[5];
    v47 = (uint64_t *)a1[5];
    v48 = *v47;
    v49 = *v46;
    v50 = v44 & 0xFFFFFFFFFFFFFFF0;
    v51 = v13 + 4 * v43 + 32;
    v52 = 4 * *v47;
    v53 = *a2 + 2 * v42 + 16;
    v54 = 2 * *v46;
    while (1)
    {
      if (v44)
      {
        v55 = v47[1];
        v56 = v46[1];
        if (v44 >= 0x10 && (v56 == 1 ? (_ZF = v55 == 1) : (_ZF = 0), _ZF))
        {
          v59 = v42 + v50 * v56;
          v68 = (float16x4_t *)v53;
          v69 = (_OWORD *)v51;
          v70 = v44 & 0xFFFFFFFFFFFFFFF0;
          v60 = v43 + v50 * v55;
          do
          {
            v71 = *(float16x8_t *)v68[-2].i8;
            v72 = vcvtq_f32_f16(*v68);
            v73 = vcvt_hight_f32_f16(*(float16x8_t *)v68->i8);
            *(v69 - 2) = vcvtq_f32_f16(*(float16x4_t *)v71.i8);
            *(v69 - 1) = vcvt_hight_f32_f16(v71);
            *v69 = v72;
            v69[1] = v73;
            v69 += 4;
            v68 += 4;
            v70 -= 16;
          }
          while (v70);
          v58 = v44 & 0xFFFFFFFFFFFFFFF0;
          if (v44 == v50)
            goto LABEL_33;
        }
        else
        {
          v58 = 0;
          v59 = v42;
          v60 = v43;
        }
        v61 = v44 - v58;
        v62 = (__int16 *)(v45 + 2 * v59);
        v63 = 2 * v56;
        v64 = 4 * v55;
        v65 = (_DWORD *)(v13 + 4 * v60);
        do
        {
          _H0 = *v62;
          __asm { FCVT            S0, H0 }
          *v65 = _S0;
          v62 = (__int16 *)((char *)v62 + v63);
          v65 = (_DWORD *)((char *)v65 + v64);
          --v61;
        }
        while (v61);
      }
LABEL_33:
      v43 += v48;
      v42 += v49;
      ++v41;
      v51 += v52;
      v53 += v54;
      if (v41 == v40)
        return;
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v111 = operator new(v12);
    bzero(v111, v12 & 0xFFFFFFFFFFFFFFF8);
    v112 = *a2;
    if (v12 >> 3 <= 1)
      v113 = 1;
    else
      v113 = v12 >> 3;
    v114 = a2[5];
    v115 = a2[8];
    v116 = v113 & 0x1FFFFFFFFFFFFFFELL;
    v117 = a1[5];
    while (v113 >= 2)
    {
      v120 = 0;
      v121 = 0;
      v122 = v113 & 0x1FFFFFFFFFFFFFFELL;
      v123 = (_QWORD *)(v117 + 8);
      v124 = v111 + 1;
      do
      {
        v120 += *(v123 - 1) * *(v124 - 1);
        v121 += *v123 * *v124;
        v124 += 2;
        v123 += 2;
        v122 -= 2;
      }
      while (v122);
      v118 = v121 + v120;
      v119 = v113 & 0x1FFFFFFFFFFFFFFELL;
      if (v113 != v116)
        goto LABEL_78;
LABEL_80:
      if (v113 < 2)
      {
        v132 = 0;
        v133 = 0;
LABEL_85:
        v139 = v113 - v133;
        v140 = v133;
        v141 = (uint64_t *)(v114 + 8 * v133);
        v142 = &v111[v140];
        do
        {
          v144 = *v142++;
          v143 = v144;
          v145 = *v141++;
          v132 += v145 * v143;
          --v139;
        }
        while (v139);
        goto LABEL_87;
      }
      v134 = 0;
      v135 = 0;
      v136 = v113 & 0x1FFFFFFFFFFFFFFELL;
      v137 = (_QWORD *)(v114 + 8);
      v138 = v111 + 1;
      do
      {
        v134 += *(v137 - 1) * *(v138 - 1);
        v135 += *v137 * *v138;
        v138 += 2;
        v137 += 2;
        v136 -= 2;
      }
      while (v136);
      v132 = v135 + v134;
      v133 = v113 & 0x1FFFFFFFFFFFFFFELL;
      if (v113 != v116)
        goto LABEL_85;
LABEL_87:
      _H0 = *(_WORD *)(v112 + 2 * (v115 + v132));
      __asm { FCVT            S0, H0 }
      *(_DWORD *)(v13 + 4 * v118) = _S0;
      if ((int)(v12 >> 3) >= 1)
      {
        v148 = (v12 >> 3) + 1;
        v149 = v12 >> 3;
        while (1)
        {
          v150 = (v148 - 2);
          v151 = v111[v150] + 1;
          v111[v150] = v151;
          if (v151 < v4[v150])
            break;
          v111[(v148 - 2)] = 0;
          --v149;
          if ((unint64_t)--v148 <= 1)
            goto LABEL_93;
        }
        if (v149 > 0)
          continue;
      }
LABEL_93:
      operator delete(v111);
      return;
    }
    v118 = 0;
    v119 = 0;
LABEL_78:
    v125 = v113 - v119;
    v126 = v119;
    v127 = (uint64_t *)(v117 + 8 * v119);
    v128 = &v111[v126];
    do
    {
      v130 = *v128++;
      v129 = v130;
      v131 = *v127++;
      v118 += v131 * v129;
      --v125;
    }
    while (v125);
    goto LABEL_80;
  }
  v23 = *v4;
  if (!*v4)
    return;
  v24 = a2[8];
  v25 = a1[8];
  v26 = *a2;
  v27 = *(_QWORD *)a1[5];
  v28 = *(_QWORD *)a2[5];
  if (v23 < 0x10)
  {
    v29 = 0;
LABEL_28:
    v30 = v23 - v29;
    v31 = (__int16 *)(v26 + 2 * v24);
    v32 = 2 * v28;
    v33 = 4 * v27;
    v34 = (_DWORD *)(v13 + 4 * v25);
    do
    {
      _H0 = *v31;
      __asm { FCVT            S0, H0 }
      *v34 = _S0;
      v31 = (__int16 *)((char *)v31 + v32);
      v34 = (_DWORD *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  v29 = 0;
  if (v28 != 1)
    goto LABEL_28;
  if (v27 != 1)
    goto LABEL_28;
  v29 = v23 & 0xFFFFFFFFFFFFFFF0;
  v152 = v24 + (v23 & 0xFFFFFFFFFFFFFFF0);
  v153 = v25 + (v23 & 0xFFFFFFFFFFFFFFF0);
  v154 = (float16x4_t *)(v26 + 2 * v24 + 16);
  v155 = (float32x4_t *)(v13 + 4 * v25 + 32);
  v156 = v23 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v157 = *(float16x8_t *)v154[-2].i8;
    v158 = vcvtq_f32_f16(*v154);
    v159 = vcvt_hight_f32_f16(*(float16x8_t *)v154->i8);
    v155[-2] = vcvtq_f32_f16(*(float16x4_t *)v157.i8);
    v155[-1] = vcvt_hight_f32_f16(v157);
    *v155 = v158;
    v155[1] = v159;
    v155 += 4;
    v154 += 4;
    v156 -= 16;
  }
  while (v156);
  v24 = v152;
  v25 = v153;
  if (v23 != v29)
    goto LABEL_28;
}

void sub_1911EB488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>& nitro::ndarray<float>::assign<half>(nitro::ndarray<half> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911EB5E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911EB5F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911EB5ECLL);
}

void nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::assign<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<float>& nitro::ndarray<float>::assign<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::assign<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<float>& nitro::ndarray<float>::assign<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911EB874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::assign<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<float>& nitro::ndarray<float>::assign<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911EBA18(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911EBA2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911EBA24);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1911EBD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1911EBDC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

_QWORD *nitro::ndarray<unsigned char>::assign<float>(_QWORD *a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = (char *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (uint64_t)(a2[3] - (_QWORD)v6) >> 3)
    goto LABEL_13;
  if (v3 == v4)
    return a1;
  v7 = v5 <= 1 ? 1 : (v3 - v4) >> 3;
  if (*(_QWORD *)v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = *(_QWORD *)&v4[8 * v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<unsigned char>::assign<float>(nitro::ndarray<float> const&)::{lambda(void)#1}::operator()();
  if (v3 != v4 && *a1)
  {
    v12 = v3 - v4 - 8;
    if (v12 >= 8)
    {
      v15 = (v12 >> 3) + 1;
      v14 = &v4[8 * (v15 & 0x3FFFFFFFFFFFFFFELL)];
      v16 = v4 + 8;
      v17 = 1;
      v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
      v19 = 1;
      do
      {
        v17 *= *(v16 - 1);
        v19 *= *v16;
        v16 += 2;
        v18 -= 2;
      }
      while (v18);
      v13 = v19 * v17;
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_21:
        if (v13)
          nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(a1, a2);
        return a1;
      }
    }
    else
    {
      v13 = 1;
      v14 = (char *)a1[2];
    }
    do
    {
      v20 = *(_QWORD *)v14;
      v14 += 8;
      v13 *= v20;
    }
    while (v14 != v3);
    goto LABEL_21;
  }
  return a1;
}

void nitro::ndarray<unsigned char>::assign<float>(nitro::ndarray<float> const&)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<float>(nitro::ndarray<float> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911EC18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;

  v4 = (char *)a1[2];
  v5 = (char *)a1[3];
  v6 = (v5 - v4) >> 3;
  v7 = (_QWORD *)a2[2];
  if (v6 != (uint64_t)(a2[3] - (_QWORD)v7) >> 3)
    goto LABEL_13;
  if (v5 == v4)
    return;
  v8 = v6 <= 1 ? 1 : (v5 - v4) >> 3;
  if (*(_QWORD *)v4 != *v7)
    goto LABEL_13;
  v9 = 1;
  do
  {
    v10 = v9;
    if (v8 == v9)
      break;
    v11 = *(_QWORD *)&v4[8 * v9];
    v12 = v7[v9++];
  }
  while (v11 == v12);
  if (v10 < v6)
LABEL_13:
    nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1})::{lambda(void)#1}::operator()();
  v13 = v5 - v4;
  if (v5 == v4 || !*a1)
    return;
  if ((unint64_t)(v13 - 8) < 8)
  {
    v14 = 1;
    v15 = (char *)a1[2];
    do
    {
LABEL_20:
      v21 = *(_QWORD *)v15;
      v15 += 8;
      v14 *= v21;
    }
    while (v15 != v5);
    goto LABEL_21;
  }
  v16 = ((unint64_t)(v13 - 8) >> 3) + 1;
  v15 = &v4[8 * (v16 & 0x3FFFFFFFFFFFFFFELL)];
  v17 = v4 + 8;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = v13 >> 3;
  if (v13 >> 3 == 3)
  {
    v35 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      v36 = 0;
      v37 = a2[8];
      v38 = a1[8];
      do
      {
        if (*((_QWORD *)v4 + 1))
        {
          v39 = 0;
          v40 = v37;
          v41 = v38;
          do
          {
            if (*((_QWORD *)v4 + 2))
            {
              v44 = 0;
              v45 = v40;
              v46 = v41;
              do
              {
                *(_BYTE *)(*a1 + v46) = (int)*(float *)(*a2 + 4 * v45);
                v42 = (_QWORD *)a1[5];
                v46 += v42[2];
                v43 = (_QWORD *)a2[5];
                v45 += v43[2];
                ++v44;
                v4 = (char *)a1[2];
              }
              while (v44 < *((_QWORD *)v4 + 2));
            }
            else
            {
              v42 = (_QWORD *)a1[5];
              v43 = (_QWORD *)a2[5];
            }
            v41 += v42[1];
            v40 += v43[1];
            ++v39;
          }
          while (v39 < *((_QWORD *)v4 + 1));
          v35 = *(_QWORD *)v4;
        }
        else
        {
          v42 = (_QWORD *)a1[5];
          v43 = (_QWORD *)a2[5];
        }
        v38 += *v42;
        v37 += *v43;
        ++v36;
      }
      while (v36 < v35);
    }
  }
  else
  {
    if (v22 != 2)
    {
      if (v22 == 1)
      {
        if (*(_QWORD *)v4)
        {
          v23 = 0;
          v24 = a2[8];
          v25 = a1[8];
          do
          {
            *(_BYTE *)(*a1 + v25) = (int)*(float *)(*a2 + 4 * v24);
            v25 += *(_QWORD *)a1[5];
            v24 += *(_QWORD *)a2[5];
            ++v23;
          }
          while (v23 < *(_QWORD *)a1[2]);
        }
        return;
      }
      if (v13 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v47 = operator new(v13);
      bzero(v47, v13 & 0xFFFFFFFFFFFFFFF8);
      if (v22 <= 1)
        v48 = 1;
      else
        v48 = v13 >> 3;
      v49 = v48 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        v50 = a1[5];
        if (v48 < 2)
          break;
        v53 = 0;
        v54 = 0;
        v55 = (_QWORD *)(v50 + 8);
        v56 = v48 & 0xFFFFFFFFFFFFFFFELL;
        v57 = v47 + 1;
        do
        {
          v53 += *(v55 - 1) * *(v57 - 1);
          v54 += *v55 * *v57;
          v57 += 2;
          v55 += 2;
          v56 -= 2;
        }
        while (v56);
        v51 = v54 + v53;
        v52 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49)
          goto LABEL_60;
LABEL_62:
        v65 = a2[5];
        if (v48 < 2)
        {
          v66 = 0;
          v67 = 0;
LABEL_67:
          v73 = v48 - v67;
          v74 = v67;
          v75 = (uint64_t *)(v65 + v74 * 8);
          v76 = &v47[v74];
          do
          {
            v78 = *v76++;
            v77 = v78;
            v79 = *v75++;
            v66 += v79 * v77;
            --v73;
          }
          while (v73);
          goto LABEL_69;
        }
        v68 = 0;
        v69 = 0;
        v70 = (_QWORD *)(v65 + 8);
        v71 = v48 & 0xFFFFFFFFFFFFFFFELL;
        v72 = v47 + 1;
        do
        {
          v68 += *(v70 - 1) * *(v72 - 1);
          v69 += *v70 * *v72;
          v72 += 2;
          v70 += 2;
          v71 -= 2;
        }
        while (v71);
        v66 = v69 + v68;
        v67 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49)
          goto LABEL_67;
LABEL_69:
        *(_BYTE *)(*a1 + v51) = (int)*(float *)(*a2 + 4 * (a2[8] + v66));
        if ((int)((unint64_t)v13 >> 3) >= 1)
        {
          v80 = a1[2];
          v81 = ((unint64_t)v13 >> 3) + 1;
          v82 = (unint64_t)v13 >> 3;
          while (1)
          {
            v83 = (v81 - 2);
            v84 = v47[v83] + 1;
            v47[v83] = v84;
            if (v84 < *(_QWORD *)(v80 + v83 * 8))
              break;
            v47[(v81 - 2)] = 0;
            LODWORD(v82) = v82 - 1;
            if ((unint64_t)--v81 <= 1)
              goto LABEL_75;
          }
          if ((int)v82 > 0)
            continue;
        }
LABEL_75:
        operator delete(v47);
        return;
      }
      v51 = 0;
      v52 = 0;
LABEL_60:
      v58 = v48 - v52;
      v59 = v52;
      v60 = (uint64_t *)(v50 + v59 * 8);
      v61 = &v47[v59];
      do
      {
        v63 = *v61++;
        v62 = v63;
        v64 = *v60++;
        v51 += v64 * v62;
        --v58;
      }
      while (v58);
      goto LABEL_62;
    }
    v26 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      v27 = 0;
      v28 = a2[8];
      v29 = a1[8];
      do
      {
        if (*((_QWORD *)v4 + 1))
        {
          v32 = 0;
          v33 = v28;
          v34 = v29;
          do
          {
            *(_BYTE *)(*a1 + v34) = (int)*(float *)(*a2 + 4 * v33);
            v30 = (_QWORD *)a1[5];
            v34 += v30[1];
            v31 = (_QWORD *)a2[5];
            v33 += v31[1];
            ++v32;
            v4 = (char *)a1[2];
          }
          while (v32 < *((_QWORD *)v4 + 1));
          v26 = *(_QWORD *)v4;
        }
        else
        {
          v30 = (_QWORD *)a1[5];
          v31 = (_QWORD *)a2[5];
        }
        v29 += *v30;
        v28 += *v31;
        ++v27;
      }
      while (v27 < v26);
    }
  }
}

void sub_1911EC6D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<float>(nitro::ndarray<float> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911EC830(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911EC844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911EC83CLL);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911ECAC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911ECC68(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911ECC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911ECC74);
}

uint64_t *nitro::ndarray<int>::assign<float>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = (char *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == v4)
    return a1;
  v7 = v5 <= 1 ? 1 : (v3 - v4) >> 3;
  if (*(_QWORD *)v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = *(_QWORD *)&v4[8 * v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<int>::assign<float>(nitro::ndarray<float> const&)::{lambda(void)#1}::operator()();
  if (v3 != v4 && *a1)
  {
    v12 = v3 - v4 - 8;
    if (v12 >= 8)
    {
      v15 = (v12 >> 3) + 1;
      v14 = &v4[8 * (v15 & 0x3FFFFFFFFFFFFFFELL)];
      v16 = v4 + 8;
      v17 = 1;
      v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
      v19 = 1;
      do
      {
        v17 *= *(v16 - 1);
        v19 *= *v16;
        v16 += 2;
        v18 -= 2;
      }
      while (v18);
      v13 = v19 * v17;
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_21:
        if (v13)
          nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::assign<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(a1, a2);
        return a1;
      }
    }
    else
    {
      v13 = 1;
      v14 = (char *)a1[2];
    }
    do
    {
      v20 = *(_QWORD *)v14;
      v14 += 8;
      v13 *= v20;
    }
    while (v14 != v3);
    goto LABEL_21;
  }
  return a1;
}

void nitro::ndarray<int>::assign<float>(nitro::ndarray<float> const&)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::ndarray<int>& nitro::ndarray<int>::assign<float>(nitro::ndarray<float> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911ED038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::assign<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  float *v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  float32x4_t *v61;
  _OWORD *v62;
  unint64_t v63;
  int32x4_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  float32x4_t *v78;
  uint64_t v79;
  int32x4_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  float *v90;
  uint64_t v91;
  uint64_t v92;
  _DWORD *v93;
  float32x4_t *v94;
  int32x4_t *v95;
  unint64_t v96;
  int32x4_t v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  float32x4_t *v139;
  int32x4_t *v140;
  unint64_t v141;
  int32x4_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::assign<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<int>& nitro::ndarray<int>::assign<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return;
  v13 = *a1;
  if (!*a1)
    return;
  if (v12 - 8 < 8)
  {
    v14 = 1;
    v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v16 = ((v12 - 8) >> 3) + 1;
  v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  v17 = v4 + 1;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v148 = *v4;
    if (!*v4)
      return;
    v65 = 0;
    v66 = a2[8];
    v67 = a1[8];
    v68 = v4[1];
    v69 = (uint64_t *)a1[5];
    v143 = (uint64_t *)a2[5];
    v70 = v13 + 4 * v67 + 16;
    v146 = *v143;
    v147 = *v69;
    v145 = 4 * *v69;
    v71 = 4 * v66 + 16;
    v144 = 4 * *v143;
    while (!v68)
    {
LABEL_50:
      v67 += v147;
      v66 += v146;
      ++v65;
      v70 += v145;
      v71 += v144;
      if (v65 == v148)
        return;
    }
    v72 = 0;
    v73 = v4[2];
    v74 = *a2;
    v75 = a2[5];
    v76 = v69[1];
    v77 = v73 & 0xFFFFFFFFFFFFFFF8;
    v78 = (float32x4_t *)(*a2 + v71);
    v79 = v143[1];
    v80 = (int32x4_t *)v70;
    v81 = v66;
    v82 = v67;
    while (1)
    {
      if (v73)
      {
        v83 = v69[2];
        v84 = *(_QWORD *)(v75 + 16);
        if (v73 >= 8 && (v84 == 1 ? (v85 = v83 == 1) : (v85 = 0), v85))
        {
          v87 = v81 + v77 * v84;
          v94 = v78;
          v95 = v80;
          v96 = v73 & 0xFFFFFFFFFFFFFFF8;
          v88 = v82 + v77 * v83;
          do
          {
            v97 = vcvtq_s32_f32(*v94);
            v95[-1] = vcvtq_s32_f32(v94[-1]);
            *v95 = v97;
            v95 += 2;
            v94 += 2;
            v96 -= 8;
          }
          while (v96);
          v86 = v73 & 0xFFFFFFFFFFFFFFF8;
          if (v73 == v77)
            goto LABEL_53;
        }
        else
        {
          v86 = 0;
          v87 = v81;
          v88 = v82;
        }
        v89 = v73 - v86;
        v90 = (float *)(v74 + 4 * v87);
        v91 = 4 * v84;
        v92 = 4 * v83;
        v93 = (_DWORD *)(v13 + 4 * v88);
        do
        {
          *v93 = (int)*v90;
          v90 = (float *)((char *)v90 + v91);
          v93 = (_DWORD *)((char *)v93 + v92);
          --v89;
        }
        while (v89);
      }
LABEL_53:
      v82 += v76;
      v81 += v79;
      ++v72;
      v80 = (int32x4_t *)((char *)v80 + 4 * v76);
      v78 = (float32x4_t *)((char *)v78 + 4 * v79);
      if (v72 == v68)
        goto LABEL_50;
    }
  }
  if (v22 == 2)
  {
    v35 = *v4;
    if (!*v4)
      return;
    v36 = 0;
    v37 = a2[8];
    v38 = a1[8];
    v39 = v4[1];
    v40 = *a2;
    v41 = (uint64_t *)a2[5];
    v42 = (uint64_t *)a1[5];
    v43 = *v42;
    v44 = *v41;
    v45 = v39 & 0xFFFFFFFFFFFFFFF8;
    v46 = v13 + 4 * v38 + 16;
    v47 = 4 * *v42;
    v48 = *a2 + 4 * v37 + 16;
    v49 = 4 * *v41;
    while (1)
    {
      if (v39)
      {
        v50 = v42[1];
        v51 = v41[1];
        if (v39 >= 8 && (v51 == 1 ? (v52 = v50 == 1) : (v52 = 0), v52))
        {
          v54 = v37 + v45 * v51;
          v61 = (float32x4_t *)v48;
          v62 = (_OWORD *)v46;
          v63 = v39 & 0xFFFFFFFFFFFFFFF8;
          v55 = v38 + v45 * v50;
          do
          {
            v64 = vcvtq_s32_f32(*v61);
            *(v62 - 1) = vcvtq_s32_f32(v61[-1]);
            *v62 = v64;
            v62 += 2;
            v61 += 2;
            v63 -= 8;
          }
          while (v63);
          v53 = v39 & 0xFFFFFFFFFFFFFFF8;
          if (v39 == v45)
            goto LABEL_33;
        }
        else
        {
          v53 = 0;
          v54 = v37;
          v55 = v38;
        }
        v56 = v39 - v53;
        v57 = (float *)(v40 + 4 * v54);
        v58 = 4 * v51;
        v59 = 4 * v50;
        v60 = (_DWORD *)(v13 + 4 * v55);
        do
        {
          *v60 = (int)*v57;
          v57 = (float *)((char *)v57 + v58);
          v60 = (_DWORD *)((char *)v60 + v59);
          --v56;
        }
        while (v56);
      }
LABEL_33:
      v38 += v43;
      v37 += v44;
      ++v36;
      v46 += v47;
      v48 += v49;
      if (v36 == v35)
        return;
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v98 = operator new(v12);
    bzero(v98, v12 & 0xFFFFFFFFFFFFFFF8);
    v99 = *a2;
    if (v12 >> 3 <= 1)
      v100 = 1;
    else
      v100 = v12 >> 3;
    v101 = a2[5];
    v102 = a2[8];
    v103 = v100 & 0x1FFFFFFFFFFFFFFELL;
    v104 = a1[5];
    while (v100 >= 2)
    {
      v107 = 0;
      v108 = 0;
      v109 = v100 & 0x1FFFFFFFFFFFFFFELL;
      v110 = (_QWORD *)(v104 + 8);
      v111 = v98 + 1;
      do
      {
        v107 += *(v110 - 1) * *(v111 - 1);
        v108 += *v110 * *v111;
        v111 += 2;
        v110 += 2;
        v109 -= 2;
      }
      while (v109);
      v105 = v108 + v107;
      v106 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103)
        goto LABEL_78;
LABEL_80:
      if (v100 < 2)
      {
        v119 = 0;
        v120 = 0;
LABEL_85:
        v126 = v100 - v120;
        v127 = v120;
        v128 = (uint64_t *)(v101 + 8 * v120);
        v129 = &v98[v127];
        do
        {
          v131 = *v129++;
          v130 = v131;
          v132 = *v128++;
          v119 += v132 * v130;
          --v126;
        }
        while (v126);
        goto LABEL_87;
      }
      v121 = 0;
      v122 = 0;
      v123 = v100 & 0x1FFFFFFFFFFFFFFELL;
      v124 = (_QWORD *)(v101 + 8);
      v125 = v98 + 1;
      do
      {
        v121 += *(v124 - 1) * *(v125 - 1);
        v122 += *v124 * *v125;
        v125 += 2;
        v124 += 2;
        v123 -= 2;
      }
      while (v123);
      v119 = v122 + v121;
      v120 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103)
        goto LABEL_85;
LABEL_87:
      *(_DWORD *)(v13 + 4 * v105) = (int)*(float *)(v99 + 4 * (v102 + v119));
      if ((int)(v12 >> 3) >= 1)
      {
        v133 = (v12 >> 3) + 1;
        v134 = v12 >> 3;
        while (1)
        {
          v135 = (v133 - 2);
          v136 = v98[v135] + 1;
          v98[v135] = v136;
          if (v136 < v4[v135])
            break;
          v98[(v133 - 2)] = 0;
          --v134;
          if ((unint64_t)--v133 <= 1)
            goto LABEL_93;
        }
        if (v134 > 0)
          continue;
      }
LABEL_93:
      operator delete(v98);
      return;
    }
    v105 = 0;
    v106 = 0;
LABEL_78:
    v112 = v100 - v106;
    v113 = v106;
    v114 = (uint64_t *)(v104 + 8 * v106);
    v115 = &v98[v113];
    do
    {
      v117 = *v115++;
      v116 = v117;
      v118 = *v114++;
      v105 += v118 * v116;
      --v112;
    }
    while (v112);
    goto LABEL_80;
  }
  v23 = *v4;
  if (!*v4)
    return;
  v24 = a2[8];
  v25 = a1[8];
  v26 = *a2;
  v27 = *(_QWORD *)a1[5];
  v28 = *(_QWORD *)a2[5];
  if (v23 < 8)
  {
    v29 = 0;
LABEL_28:
    v30 = v23 - v29;
    v31 = (float *)(v26 + 4 * v24);
    v32 = 4 * v28;
    v33 = 4 * v27;
    v34 = (_DWORD *)(v13 + 4 * v25);
    do
    {
      *v34 = (int)*v31;
      v31 = (float *)((char *)v31 + v32);
      v34 = (_DWORD *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  v29 = 0;
  if (v28 != 1)
    goto LABEL_28;
  if (v27 != 1)
    goto LABEL_28;
  v29 = v23 & 0xFFFFFFFFFFFFFFF8;
  v137 = v24 + (v23 & 0xFFFFFFFFFFFFFFF8);
  v138 = v25 + (v23 & 0xFFFFFFFFFFFFFFF8);
  v139 = (float32x4_t *)(v26 + 4 * v24 + 16);
  v140 = (int32x4_t *)(v13 + 4 * v25 + 16);
  v141 = v23 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v142 = vcvtq_s32_f32(*v139);
    v140[-1] = vcvtq_s32_f32(v139[-1]);
    *v140 = v142;
    v139 += 2;
    v140 += 2;
    v141 -= 8;
  }
  while (v141);
  v24 = v137;
  v25 = v138;
  if (v23 != v29)
    goto LABEL_28;
}

void sub_1911ED73C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>& nitro::ndarray<int>::assign<float>(nitro::ndarray<float> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911ED894(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911ED8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911ED8A0);
}

void nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::assign<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<int>& nitro::ndarray<int>::assign<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::assign<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<int>& nitro::ndarray<int>::assign<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911EDB28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::assign<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<int>& nitro::ndarray<int>::assign<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911EDCCC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911EDCE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911EDCD8);
}

uint64_t *nitro::ndarray<half>::assign<float>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = (char *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == v4)
    return a1;
  v7 = v5 <= 1 ? 1 : (v3 - v4) >> 3;
  if (*(_QWORD *)v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = *(_QWORD *)&v4[8 * v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<half>::assign<float>(nitro::ndarray<float> const&)::{lambda(void)#1}::operator()();
  if (v3 != v4 && *a1)
  {
    v12 = v3 - v4 - 8;
    if (v12 >= 8)
    {
      v15 = (v12 >> 3) + 1;
      v14 = &v4[8 * (v15 & 0x3FFFFFFFFFFFFFFELL)];
      v16 = v4 + 8;
      v17 = 1;
      v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
      v19 = 1;
      do
      {
        v17 *= *(v16 - 1);
        v19 *= *v16;
        v16 += 2;
        v18 -= 2;
      }
      while (v18);
      v13 = v19 * v17;
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_21:
        if (v13)
          nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::assign<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(a1, a2);
        return a1;
      }
    }
    else
    {
      v13 = 1;
      v14 = (char *)a1[2];
    }
    do
    {
      v20 = *(_QWORD *)v14;
      v14 += 8;
      v13 *= v20;
    }
    while (v14 != v3);
    goto LABEL_21;
  }
  return a1;
}

void nitro::ndarray<half>::assign<float>(nitro::ndarray<float> const&)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::ndarray<half>& nitro::ndarray<half>::assign<float>(nitro::ndarray<float> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911EE09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::assign<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  _WORD *v34;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int *v61;
  uint64_t v62;
  uint64_t v63;
  _WORD *v64;
  float32x4_t *v66;
  float16x8_t *v67;
  unint64_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  float32x4_t *v86;
  uint64_t v87;
  float16x8_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  int *v98;
  uint64_t v99;
  uint64_t v100;
  _WORD *v101;
  float32x4_t *v103;
  float16x8_t *v104;
  unint64_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  _QWORD *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v146;
  int v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  float32x4_t *v152;
  float16x8_t *v153;
  unint64_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::assign<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<half>& nitro::ndarray<half>::assign<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return;
  v13 = *a1;
  if (!*a1)
    return;
  if (v12 - 8 < 8)
  {
    v14 = 1;
    v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v16 = ((v12 - 8) >> 3) + 1;
  v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  v17 = v4 + 1;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v164 = *v4;
    if (!*v4)
      return;
    v73 = 0;
    v74 = a2[8];
    v75 = a1[8];
    v76 = v4[1];
    v77 = (uint64_t *)a1[5];
    v159 = (uint64_t *)a2[5];
    v78 = v13 + 2 * v75 + 16;
    v162 = *v159;
    v163 = *v77;
    v161 = 2 * *v77;
    v79 = 4 * v74 + 32;
    v160 = 4 * *v159;
    while (!v76)
    {
LABEL_50:
      v75 += v163;
      v74 += v162;
      ++v73;
      v78 += v161;
      v79 += v160;
      if (v73 == v164)
        return;
    }
    v80 = 0;
    v81 = v4[2];
    v82 = *a2;
    v83 = a2[5];
    v84 = v77[1];
    v85 = v81 & 0xFFFFFFFFFFFFFFF0;
    v86 = (float32x4_t *)(*a2 + v79);
    v87 = v159[1];
    v88 = (float16x8_t *)v78;
    v89 = v74;
    v90 = v75;
    while (1)
    {
      if (v81)
      {
        v91 = v77[2];
        v92 = *(_QWORD *)(v83 + 16);
        if (v81 >= 0x10 && (v92 == 1 ? (v93 = v91 == 1) : (v93 = 0), v93))
        {
          v95 = v89 + v85 * v92;
          v103 = v86;
          v104 = v88;
          v105 = v81 & 0xFFFFFFFFFFFFFFF0;
          v96 = v90 + v85 * v91;
          do
          {
            v107 = v103[-2];
            v106 = v103[-1];
            v109 = *v103;
            v108 = v103[1];
            v103 += 4;
            v104[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v107), v106);
            *v104 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v109), v108);
            v104 += 2;
            v105 -= 16;
          }
          while (v105);
          v94 = v81 & 0xFFFFFFFFFFFFFFF0;
          if (v81 == v85)
            goto LABEL_53;
        }
        else
        {
          v94 = 0;
          v95 = v89;
          v96 = v90;
        }
        v97 = v81 - v94;
        v98 = (int *)(v82 + 4 * v95);
        v99 = 4 * v92;
        v100 = 2 * v91;
        v101 = (_WORD *)(v13 + 2 * v96);
        do
        {
          _S0 = *v98;
          __asm { FCVT            H0, S0 }
          *v101 = _S0;
          v98 = (int *)((char *)v98 + v99);
          v101 = (_WORD *)((char *)v101 + v100);
          --v97;
        }
        while (v97);
      }
LABEL_53:
      v90 += v84;
      v89 += v87;
      ++v80;
      v88 = (float16x8_t *)((char *)v88 + 2 * v84);
      v86 = (float32x4_t *)((char *)v86 + 4 * v87);
      if (v80 == v76)
        goto LABEL_50;
    }
  }
  if (v22 == 2)
  {
    v39 = *v4;
    if (!*v4)
      return;
    v40 = 0;
    v41 = a2[8];
    v42 = a1[8];
    v43 = v4[1];
    v44 = *a2;
    v45 = (uint64_t *)a2[5];
    v46 = (uint64_t *)a1[5];
    v47 = *v46;
    v48 = *v45;
    v49 = v43 & 0xFFFFFFFFFFFFFFF0;
    v50 = v13 + 2 * v42 + 16;
    v51 = 2 * *v46;
    v52 = *a2 + 4 * v41 + 32;
    v53 = 4 * *v45;
    while (1)
    {
      if (v43)
      {
        v54 = v46[1];
        v55 = v45[1];
        if (v43 >= 0x10 && (v55 == 1 ? (_ZF = v54 == 1) : (_ZF = 0), _ZF))
        {
          v58 = v41 + v49 * v55;
          v66 = (float32x4_t *)v52;
          v67 = (float16x8_t *)v50;
          v68 = v43 & 0xFFFFFFFFFFFFFFF0;
          v59 = v42 + v49 * v54;
          do
          {
            v70 = v66[-2];
            v69 = v66[-1];
            v72 = *v66;
            v71 = v66[1];
            v66 += 4;
            v67[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v70), v69);
            *v67 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v72), v71);
            v67 += 2;
            v68 -= 16;
          }
          while (v68);
          v57 = v43 & 0xFFFFFFFFFFFFFFF0;
          if (v43 == v49)
            goto LABEL_33;
        }
        else
        {
          v57 = 0;
          v58 = v41;
          v59 = v42;
        }
        v60 = v43 - v57;
        v61 = (int *)(v44 + 4 * v58);
        v62 = 4 * v55;
        v63 = 2 * v54;
        v64 = (_WORD *)(v13 + 2 * v59);
        do
        {
          _S0 = *v61;
          __asm { FCVT            H0, S0 }
          *v64 = _S0;
          v61 = (int *)((char *)v61 + v62);
          v64 = (_WORD *)((char *)v64 + v63);
          --v60;
        }
        while (v60);
      }
LABEL_33:
      v42 += v47;
      v41 += v48;
      ++v40;
      v50 += v51;
      v52 += v53;
      if (v40 == v39)
        return;
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v110 = operator new(v12);
    bzero(v110, v12 & 0xFFFFFFFFFFFFFFF8);
    v111 = *a2;
    if (v12 >> 3 <= 1)
      v112 = 1;
    else
      v112 = v12 >> 3;
    v113 = a2[5];
    v114 = a2[8];
    v115 = v112 & 0x1FFFFFFFFFFFFFFELL;
    v116 = a1[5];
    while (v112 >= 2)
    {
      v119 = 0;
      v120 = 0;
      v121 = v112 & 0x1FFFFFFFFFFFFFFELL;
      v122 = (_QWORD *)(v116 + 8);
      v123 = v110 + 1;
      do
      {
        v119 += *(v122 - 1) * *(v123 - 1);
        v120 += *v122 * *v123;
        v123 += 2;
        v122 += 2;
        v121 -= 2;
      }
      while (v121);
      v117 = v120 + v119;
      v118 = v112 & 0x1FFFFFFFFFFFFFFELL;
      if (v112 != v115)
        goto LABEL_78;
LABEL_80:
      if (v112 < 2)
      {
        v131 = 0;
        v132 = 0;
LABEL_85:
        v138 = v112 - v132;
        v139 = v132;
        v140 = (uint64_t *)(v113 + 8 * v132);
        v141 = &v110[v139];
        do
        {
          v143 = *v141++;
          v142 = v143;
          v144 = *v140++;
          v131 += v144 * v142;
          --v138;
        }
        while (v138);
        goto LABEL_87;
      }
      v133 = 0;
      v134 = 0;
      v135 = v112 & 0x1FFFFFFFFFFFFFFELL;
      v136 = (_QWORD *)(v113 + 8);
      v137 = v110 + 1;
      do
      {
        v133 += *(v136 - 1) * *(v137 - 1);
        v134 += *v136 * *v137;
        v137 += 2;
        v136 += 2;
        v135 -= 2;
      }
      while (v135);
      v131 = v134 + v133;
      v132 = v112 & 0x1FFFFFFFFFFFFFFELL;
      if (v112 != v115)
        goto LABEL_85;
LABEL_87:
      _S0 = *(_DWORD *)(v111 + 4 * (v114 + v131));
      __asm { FCVT            H0, S0 }
      *(_WORD *)(v13 + 2 * v117) = _S0;
      if ((int)(v12 >> 3) >= 1)
      {
        v146 = (v12 >> 3) + 1;
        v147 = v12 >> 3;
        while (1)
        {
          v148 = (v146 - 2);
          v149 = v110[v148] + 1;
          v110[v148] = v149;
          if (v149 < v4[v148])
            break;
          v110[(v146 - 2)] = 0;
          --v147;
          if ((unint64_t)--v146 <= 1)
            goto LABEL_93;
        }
        if (v147 > 0)
          continue;
      }
LABEL_93:
      operator delete(v110);
      return;
    }
    v117 = 0;
    v118 = 0;
LABEL_78:
    v124 = v112 - v118;
    v125 = v118;
    v126 = (uint64_t *)(v116 + 8 * v118);
    v127 = &v110[v125];
    do
    {
      v129 = *v127++;
      v128 = v129;
      v130 = *v126++;
      v117 += v130 * v128;
      --v124;
    }
    while (v124);
    goto LABEL_80;
  }
  v23 = *v4;
  if (!*v4)
    return;
  v24 = a2[8];
  v25 = a1[8];
  v26 = *a2;
  v27 = *(_QWORD *)a1[5];
  v28 = *(_QWORD *)a2[5];
  if (v23 < 0x10)
  {
    v29 = 0;
LABEL_28:
    v30 = v23 - v29;
    v31 = (int *)(v26 + 4 * v24);
    v32 = 4 * v28;
    v33 = 2 * v27;
    v34 = (_WORD *)(v13 + 2 * v25);
    do
    {
      _S0 = *v31;
      __asm { FCVT            H0, S0 }
      *v34 = _S0;
      v31 = (int *)((char *)v31 + v32);
      v34 = (_WORD *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  v29 = 0;
  if (v28 != 1)
    goto LABEL_28;
  if (v27 != 1)
    goto LABEL_28;
  v29 = v23 & 0xFFFFFFFFFFFFFFF0;
  v150 = v24 + (v23 & 0xFFFFFFFFFFFFFFF0);
  v151 = v25 + (v23 & 0xFFFFFFFFFFFFFFF0);
  v152 = (float32x4_t *)(v26 + 4 * v24 + 32);
  v153 = (float16x8_t *)(v13 + 2 * v25 + 16);
  v154 = v23 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v156 = v152[-2];
    v155 = v152[-1];
    v158 = *v152;
    v157 = v152[1];
    v152 += 4;
    v153[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v156), v155);
    *v153 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v158), v157);
    v153 += 2;
    v154 -= 16;
  }
  while (v154);
  v24 = v150;
  v25 = v151;
  if (v23 != v29)
    goto LABEL_28;
}

void sub_1911EE7B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>& nitro::ndarray<half>::assign<float>(nitro::ndarray<float> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911EE910(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911EE924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911EE91CLL);
}

void nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::assign<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<half>& nitro::ndarray<half>::assign<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::assign<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<half>& nitro::ndarray<half>::assign<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911EEBA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::assign<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<half>& nitro::ndarray<half>::assign<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911EED48(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911EED5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911EED54);
}

void nitro::ndarray_container::visit<nitro::ndarray_container::compact(void)::$_0>(nitro::ndarray_container::compact(void)::$_0)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1911EF08C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1911EF0F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::compact(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a1[3] - a1[2] != a1[6] - a1[5])
    nitro::ndarray<unsigned char>::compact(void)const::{lambda(void)#1}::operator()();
  if (a1[8])
    goto LABEL_3;
  v3 = a1[2];
  v4 = (uint64_t *)a1[3];
  v5 = (uint64_t)v4 - v3;
  if (v4 != (uint64_t *)v3)
  {
    v6 = *a1;
    if (!*a1)
      goto LABEL_13;
    if ((unint64_t)(v5 - 8) >= 8)
    {
      v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
      v7 = (uint64_t *)(v3 + 8 * (v8 & 0x3FFFFFFFFFFFFFFELL));
      v9 = (_QWORD *)(v3 + 8);
      v10 = 1;
      v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
      v12 = 1;
      do
      {
        v10 *= *(v9 - 1);
        v12 *= *v9;
        v9 += 2;
        v11 -= 2;
      }
      while (v11);
      v6 = v12 * v10;
      if (v8 == (v8 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_13:
        v14 = v5 >> 3;
        v15 = a1[5];
        if (v14 <= 1)
          v14 = 1;
        if (v14 >= 2)
        {
          v18 = 0;
          v19 = 0;
          v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
          v20 = (_QWORD *)(v3 + 8);
          v21 = (_QWORD *)(v15 + 8);
          v22 = v14 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v18 += *(v21 - 1) * (*(v20 - 1) - 1);
            v19 += *v21 * (*v20 - 1);
            v20 += 2;
            v21 += 2;
            v22 -= 2;
          }
          while (v22);
          v17 = v19 + v18;
          if (v14 == v16)
          {
LABEL_22:
            if (v6 != v17 + 1)
            {
LABEL_3:
              nitro::ndarray<unsigned char>::canonicalize(a1, a2);
              return;
            }
            goto LABEL_23;
          }
        }
        else
        {
          v16 = 0;
          v17 = 0;
        }
        v23 = v14 - v16;
        v24 = 8 * v16;
        v25 = (uint64_t *)(v15 + v24);
        v26 = (uint64_t *)(v3 + v24);
        do
        {
          v27 = *v26++;
          v28 = v27 - 1;
          v29 = *v25++;
          v17 += v29 * v28;
          --v23;
        }
        while (v23);
        goto LABEL_22;
      }
    }
    else
    {
      v6 = 1;
      v7 = (uint64_t *)a1[2];
    }
    do
    {
      v13 = *v7++;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_13;
  }
LABEL_23:
  nitro::ndarray<unsigned char>::ndarray(a2, a1);
}

void nitro::ndarray<unsigned char>::compact(void)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"is_valid()", 10);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 663, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::ndarray<unsigned char>::compact(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911EF518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::canonicalize(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  char *v4;
  char *v5;
  uint64_t v6;
  size_t v7;
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64x2_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64x2_t *v34;
  int64x2_t v35;
  uint64x2_t v36;
  unint64_t v37;
  int64x2_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  size_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t i;
  uint64_t v56;
  uint64_t v57;
  size_t v58;
  void *__p;
  void *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  uint64_t v64;
  void *v65;
  void *v66;
  uint64_t v67;

  if (nitro::ndarray<float>::is_canonical(a1))
  {
    nitro::ndarray<unsigned char>::ndarray(a2, a1);
    return;
  }
  if (a1[3] - a1[2] != a1[6] - a1[5])
    nitro::ndarray<unsigned char>::canonicalize(void)const::{lambda(void)#1}::operator()();
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  __p = 0;
  v60 = 0;
  v61 = 0;
  nitro::ndarray<unsigned char>::ndarray((uint64_t)a2, (uint64_t)&v65, (char **)&v62, (char **)&__p, 0);
  if (__p)
  {
    v60 = __p;
    operator delete(__p);
  }
  if (v62)
  {
    v63 = v62;
    operator delete(v62);
  }
  if (v65)
  {
    v66 = v65;
    operator delete(v65);
  }
  v4 = (char *)a1[2];
  v5 = (char *)a1[3];
  v6 = v5 - v4;
  if (v5 == v4 || !*a1)
  {
    v7 = 0;
    goto LABEL_19;
  }
  if ((unint64_t)(v6 - 8) < 8)
  {
    v7 = 1;
    v8 = (char *)a1[2];
    do
    {
LABEL_18:
      v14 = *(_QWORD *)v8;
      v8 += 8;
      v7 *= v14;
    }
    while (v8 != v5);
    goto LABEL_19;
  }
  v9 = ((unint64_t)(v6 - 8) >> 3) + 1;
  v8 = &v4[8 * (v9 & 0x3FFFFFFFFFFFFFFELL)];
  v10 = v4 + 8;
  v11 = 1;
  v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
  v13 = 1;
  do
  {
    v11 *= *(v10 - 1);
    v13 *= *v10;
    v10 += 2;
    v12 -= 2;
  }
  while (v12);
  v7 = v13 * v11;
  if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_18;
LABEL_19:
  a2[8] = 0;
  if (a2 != a1)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(a2 + 2, v4, v5, v6 >> 3);
  if (v7)
  {
    v15 = operator new[]();
    std::shared_ptr<unsigned char>::reset[abi:ne180100]<unsigned char,std::default_delete<unsigned char []>,void>(a2, v15);
  }
  v16 = (a1[3] - a1[2]) >> 3;
  v17 = a2[5];
  v18 = a2 + 5;
  v19 = (a2[6] - v17) >> 3;
  if (v16 <= v19)
  {
    if (v16 < v19)
      a2[6] = v17 + 8 * v16;
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)(a2 + 5), v16 - v19);
  }
  v21 = a2[2];
  v20 = a2[3];
  if (v7)
    v22 = v20 == v21;
  else
    v22 = 1;
  if (!v22)
  {
    v23 = v20 - v21;
    v24 = v23 >> 3;
    v25 = (unint64_t)v23 >> 3;
    v26 = (v23 << 29) - 0x100000000;
    v27 = *v18;
    *(_QWORD *)(*v18 + (v26 >> 29)) = 1;
    if ((int)v25 >= 2)
    {
      v28 = 8 * (v24 - 2);
      v29 = *(_QWORD *)(v28 + v27 + 8);
      v30 = v21 + 8;
      do
      {
        v29 *= *(_QWORD *)(v30 + v28);
        *(_QWORD *)(v27 + v28) = v29;
        v28 -= 8;
      }
      while (v28 != -8);
    }
    v31 = (uint64x2_t *)a1[2];
    if (v24 <= 1)
      v24 = 1;
    if (v24 >= 4)
    {
      v32 = v24 & 0xFFFFFFFFFFFFFFFCLL;
      v34 = v31 + 1;
      v35 = 0uLL;
      v36 = (uint64x2_t)vdupq_n_s64(1uLL);
      v37 = v24 & 0xFFFFFFFFFFFFFFFCLL;
      v38 = 0uLL;
      do
      {
        v35 = vsubq_s64(v35, (int64x2_t)vcgtq_u64(v34[-1], v36));
        v38 = vsubq_s64(v38, (int64x2_t)vcgtq_u64(*v34, v36));
        v34 += 2;
        v37 -= 4;
      }
      while (v37);
      v33 = vaddvq_s64(vaddq_s64(v38, v35));
      if (v24 == v32)
      {
LABEL_45:
        if (v33 != 1)
        {
          if (v33 != 2)
          {
            nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>::canonicalize(void)::{lambda(unsigned char &,unsigned char const&)#1}>(a2, a1);
            return;
          }
          v42 = 0;
          v43 = 0;
          v44 = 0;
          v45 = 0;
          while (1)
          {
            v46 = a1[2];
            v47 = *(_QWORD *)(v46 + 8 * v42);
            if (v47 >= 2)
            {
              v48 = *(_QWORD *)(a1[5] + 8 * v42);
              if (v44)
              {
                if (v48 == 1)
                {
                  if (v45)
                  {
                    v53 = 0;
                    v54 = 0;
                    do
                    {
                      memmove((void *)(*a2 + v54), (const void *)(*a1 + a1[8] + v53), v47);
                      v54 += v43;
                      v53 += v44;
                      --v45;
                    }
                    while (v45);
                  }
                  return;
                }
LABEL_68:
                if (v45)
                {
                  for (i = 0; i != v45; ++i)
                  {
                    if (v47)
                    {
                      v56 = i * v43;
                      v57 = a1[8] + i * v44;
                      v58 = v47;
                      do
                      {
                        *(_BYTE *)(*a2 + v56) = *(_BYTE *)(*a1 + v57);
                        v57 += v48;
                        ++v56;
                        --v58;
                      }
                      while (v58);
                    }
                  }
                }
                return;
              }
              v43 = *(_QWORD *)(v27 + 8 * v42);
              v45 = *(_QWORD *)(v46 + 8 * v42);
              v44 = *(_QWORD *)(a1[5] + 8 * v42);
            }
            if (v24 == ++v42)
            {
              v48 = 0;
              v47 = 0;
              goto LABEL_68;
            }
          }
        }
        v49 = 0;
        while (*(_QWORD *)(a1[2] + 8 * v49) != v7)
        {
          if (v24 == ++v49)
          {
            v50 = 0;
LABEL_60:
            v51 = 0;
            v52 = 0;
            do
            {
              *(_BYTE *)(*a2 + v52++) = *(_BYTE *)(*a1 + a1[8] + v51);
              v51 += v50;
            }
            while (v7 != v52);
            return;
          }
        }
        v50 = *(_QWORD *)(a1[5] + 8 * v49);
        if (v50 == 1)
        {
          memmove((void *)*a2, (const void *)(*a1 + a1[8]), v7);
          return;
        }
        goto LABEL_60;
      }
    }
    else
    {
      v32 = 0;
      v33 = 0;
    }
    v39 = v24 - v32;
    v40 = (unint64_t *)v31 + v32;
    do
    {
      v41 = *v40++;
      if (v41 > 1)
        ++v33;
      --v39;
    }
    while (v39);
    goto LABEL_45;
  }
}

void sub_1911EFA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  _QWORD *v16;

  nitro::ndarray<float>::~ndarray(v16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::compact(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 663, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911EFB80(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911EFB94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911EFB8CLL);
}

void nitro::ndarray<unsigned char>::canonicalize(void)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"is_valid()", 10);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 555, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::ndarray<unsigned char>::canonicalize(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911EFE14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>::canonicalize(void)::{lambda(unsigned char &,unsigned char const&)#1}>(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;

  v4 = (char *)a1[2];
  v5 = (char *)a1[3];
  v6 = (v5 - v4) >> 3;
  v7 = (_QWORD *)a2[2];
  if (v6 != (uint64_t)(a2[3] - (_QWORD)v7) >> 3)
    goto LABEL_13;
  if (v5 == v4)
    return;
  v8 = v6 <= 1 ? 1 : (v5 - v4) >> 3;
  if (*(_QWORD *)v4 != *v7)
    goto LABEL_13;
  v9 = 1;
  do
  {
    v10 = v9;
    if (v8 == v9)
      break;
    v11 = *(_QWORD *)&v4[8 * v9];
    v12 = v7[v9++];
  }
  while (v11 == v12);
  if (v10 < v6)
LABEL_13:
    nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>::canonicalize(void)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>::canonicalize(void)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator()();
  v13 = v5 - v4;
  if (v5 == v4 || !*a1)
    return;
  if ((unint64_t)(v13 - 8) < 8)
  {
    v14 = 1;
    v15 = (char *)a1[2];
    do
    {
LABEL_20:
      v21 = *(_QWORD *)v15;
      v15 += 8;
      v14 *= v21;
    }
    while (v15 != v5);
    goto LABEL_21;
  }
  v16 = ((unint64_t)(v13 - 8) >> 3) + 1;
  v15 = &v4[8 * (v16 & 0x3FFFFFFFFFFFFFFELL)];
  v17 = v4 + 8;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = v13 >> 3;
  if (v13 >> 3 == 3)
  {
    v35 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      v36 = 0;
      v37 = a2[8];
      v38 = a1[8];
      do
      {
        if (*((_QWORD *)v4 + 1))
        {
          v39 = 0;
          v40 = v37;
          v41 = v38;
          do
          {
            if (*((_QWORD *)v4 + 2))
            {
              v44 = 0;
              v45 = v40;
              v46 = v41;
              do
              {
                *(_BYTE *)(*a1 + v46) = *(_BYTE *)(*a2 + v45);
                v42 = (_QWORD *)a1[5];
                v46 += v42[2];
                v43 = (_QWORD *)a2[5];
                v45 += v43[2];
                ++v44;
                v4 = (char *)a1[2];
              }
              while (v44 < *((_QWORD *)v4 + 2));
            }
            else
            {
              v42 = (_QWORD *)a1[5];
              v43 = (_QWORD *)a2[5];
            }
            v41 += v42[1];
            v40 += v43[1];
            ++v39;
          }
          while (v39 < *((_QWORD *)v4 + 1));
          v35 = *(_QWORD *)v4;
        }
        else
        {
          v42 = (_QWORD *)a1[5];
          v43 = (_QWORD *)a2[5];
        }
        v38 += *v42;
        v37 += *v43;
        ++v36;
      }
      while (v36 < v35);
    }
  }
  else
  {
    if (v22 != 2)
    {
      if (v22 == 1)
      {
        if (*(_QWORD *)v4)
        {
          v23 = 0;
          v24 = a2[8];
          v25 = a1[8];
          do
          {
            *(_BYTE *)(*a1 + v25) = *(_BYTE *)(*a2 + v24);
            v25 += *(_QWORD *)a1[5];
            v24 += *(_QWORD *)a2[5];
            ++v23;
          }
          while (v23 < *(_QWORD *)a1[2]);
        }
        return;
      }
      if (v13 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v47 = operator new(v13);
      bzero(v47, v13 & 0xFFFFFFFFFFFFFFF8);
      if (v22 <= 1)
        v48 = 1;
      else
        v48 = v13 >> 3;
      v49 = v48 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        v50 = a1[5];
        if (v48 < 2)
          break;
        v53 = 0;
        v54 = 0;
        v55 = (_QWORD *)(v50 + 8);
        v56 = v48 & 0xFFFFFFFFFFFFFFFELL;
        v57 = v47 + 1;
        do
        {
          v53 += *(v55 - 1) * *(v57 - 1);
          v54 += *v55 * *v57;
          v57 += 2;
          v55 += 2;
          v56 -= 2;
        }
        while (v56);
        v51 = v54 + v53;
        v52 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49)
          goto LABEL_60;
LABEL_62:
        v65 = a2[5];
        if (v48 < 2)
        {
          v66 = 0;
          v67 = 0;
LABEL_67:
          v73 = v48 - v67;
          v74 = v67;
          v75 = (uint64_t *)(v65 + v74 * 8);
          v76 = &v47[v74];
          do
          {
            v78 = *v76++;
            v77 = v78;
            v79 = *v75++;
            v66 += v79 * v77;
            --v73;
          }
          while (v73);
          goto LABEL_69;
        }
        v68 = 0;
        v69 = 0;
        v70 = (_QWORD *)(v65 + 8);
        v71 = v48 & 0xFFFFFFFFFFFFFFFELL;
        v72 = v47 + 1;
        do
        {
          v68 += *(v70 - 1) * *(v72 - 1);
          v69 += *v70 * *v72;
          v72 += 2;
          v70 += 2;
          v71 -= 2;
        }
        while (v71);
        v66 = v69 + v68;
        v67 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49)
          goto LABEL_67;
LABEL_69:
        *(_BYTE *)(*a1 + v51) = *(_BYTE *)(*a2 + a2[8] + v66);
        if ((int)((unint64_t)v13 >> 3) >= 1)
        {
          v80 = a1[2];
          v81 = ((unint64_t)v13 >> 3) + 1;
          v82 = (unint64_t)v13 >> 3;
          while (1)
          {
            v83 = (v81 - 2);
            v84 = v47[v83] + 1;
            v47[v83] = v84;
            if (v84 < *(_QWORD *)(v80 + v83 * 8))
              break;
            v47[(v81 - 2)] = 0;
            LODWORD(v82) = v82 - 1;
            if ((unint64_t)--v81 <= 1)
              goto LABEL_75;
          }
          if ((int)v82 > 0)
            continue;
        }
LABEL_75:
        operator delete(v47);
        return;
      }
      v51 = 0;
      v52 = 0;
LABEL_60:
      v58 = v48 - v52;
      v59 = v52;
      v60 = (uint64_t *)(v50 + v59 * 8);
      v61 = &v47[v59];
      do
      {
        v63 = *v61++;
        v62 = v63;
        v64 = *v60++;
        v51 += v64 * v62;
        --v58;
      }
      while (v58);
      goto LABEL_62;
    }
    v26 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      v27 = 0;
      v28 = a2[8];
      v29 = a1[8];
      do
      {
        if (*((_QWORD *)v4 + 1))
        {
          v32 = 0;
          v33 = v28;
          v34 = v29;
          do
          {
            *(_BYTE *)(*a1 + v34) = *(_BYTE *)(*a2 + v33);
            v30 = (_QWORD *)a1[5];
            v34 += v30[1];
            v31 = (_QWORD *)a2[5];
            v33 += v31[1];
            ++v32;
            v4 = (char *)a1[2];
          }
          while (v32 < *((_QWORD *)v4 + 1));
          v26 = *(_QWORD *)v4;
        }
        else
        {
          v30 = (_QWORD *)a1[5];
          v31 = (_QWORD *)a2[5];
        }
        v29 += *v30;
        v28 += *v31;
        ++v27;
      }
      while (v27 < v26);
    }
  }
}

void sub_1911F0350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>::canonicalize(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 555, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911F04A8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911F04BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911F04B4);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>::canonicalize(void)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>::canonicalize(void)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>::canonicalize(void)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>::canonicalize(void)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911F073C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>::canonicalize(void)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>::canonicalize(void)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911F08E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911F08F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911F08ECLL);
}

void nitro::ndarray<int>::compact(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a1[3] - a1[2] != a1[6] - a1[5])
    nitro::ndarray<int>::compact(void)const::{lambda(void)#1}::operator()();
  if (a1[8])
    goto LABEL_3;
  v3 = a1[2];
  v4 = (uint64_t *)a1[3];
  v5 = (uint64_t)v4 - v3;
  if (v4 != (uint64_t *)v3)
  {
    v6 = *a1;
    if (!*a1)
      goto LABEL_13;
    if ((unint64_t)(v5 - 8) >= 8)
    {
      v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
      v7 = (uint64_t *)(v3 + 8 * (v8 & 0x3FFFFFFFFFFFFFFELL));
      v9 = (_QWORD *)(v3 + 8);
      v10 = 1;
      v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
      v12 = 1;
      do
      {
        v10 *= *(v9 - 1);
        v12 *= *v9;
        v9 += 2;
        v11 -= 2;
      }
      while (v11);
      v6 = v12 * v10;
      if (v8 == (v8 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_13:
        v14 = v5 >> 3;
        v15 = a1[5];
        if (v14 <= 1)
          v14 = 1;
        if (v14 >= 2)
        {
          v18 = 0;
          v19 = 0;
          v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
          v20 = (_QWORD *)(v3 + 8);
          v21 = (_QWORD *)(v15 + 8);
          v22 = v14 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v18 += *(v21 - 1) * (*(v20 - 1) - 1);
            v19 += *v21 * (*v20 - 1);
            v20 += 2;
            v21 += 2;
            v22 -= 2;
          }
          while (v22);
          v17 = v19 + v18;
          if (v14 == v16)
          {
LABEL_22:
            if (v6 != v17 + 1)
            {
LABEL_3:
              nitro::ndarray<int>::canonicalize(a1, a2);
              return;
            }
            goto LABEL_23;
          }
        }
        else
        {
          v16 = 0;
          v17 = 0;
        }
        v23 = v14 - v16;
        v24 = 8 * v16;
        v25 = (uint64_t *)(v15 + v24);
        v26 = (uint64_t *)(v3 + v24);
        do
        {
          v27 = *v26++;
          v28 = v27 - 1;
          v29 = *v25++;
          v17 += v29 * v28;
          --v23;
        }
        while (v23);
        goto LABEL_22;
      }
    }
    else
    {
      v6 = 1;
      v7 = (uint64_t *)a1[2];
    }
    do
    {
      v13 = *v7++;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_13;
  }
LABEL_23:
  nitro::ndarray<int>::ndarray(a2, a1);
}

void nitro::ndarray<int>::compact(void)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"is_valid()", 10);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 663, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::ndarray<int>::compact(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911F0D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::canonicalize(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64x2_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64x2_t *v35;
  int64x2_t v36;
  uint64x2_t v37;
  unint64_t v38;
  int64x2_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  size_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BOOL4 v65;
  unint64_t v66;
  unint64_t v67;
  _OWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  _DWORD *v76;
  _DWORD *v77;
  __int128 *v78;
  _OWORD *v79;
  unint64_t v80;
  __int128 v81;
  uint64_t v82;
  _DWORD *v83;
  _DWORD *v84;
  uint64_t v85;
  void *__p;
  void *v87;
  uint64_t v88;
  void *v89;
  void *v90;
  uint64_t v91;
  void *v92;
  void *v93;
  uint64_t v94;

  if (nitro::ndarray<float>::is_canonical(a1))
  {
    nitro::ndarray<int>::ndarray(a2, a1);
    return;
  }
  if (a1[3] - a1[2] != a1[6] - a1[5])
    nitro::ndarray<int>::canonicalize(void)const::{lambda(void)#1}::operator()();
  v92 = 0;
  v93 = 0;
  v94 = 0;
  v89 = 0;
  v90 = 0;
  v91 = 0;
  __p = 0;
  v87 = 0;
  v88 = 0;
  nitro::ndarray<int>::ndarray((uint64_t)a2, (uint64_t)&v92, (char **)&v89, (char **)&__p, 0);
  if (__p)
  {
    v87 = __p;
    operator delete(__p);
  }
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
  if (v92)
  {
    v93 = v92;
    operator delete(v92);
  }
  v4 = (char *)a1[2];
  v5 = (char *)a1[3];
  v6 = v5 - v4;
  if (v5 == v4 || !*a1)
  {
    v7 = 0;
    goto LABEL_19;
  }
  if ((unint64_t)(v6 - 8) < 8)
  {
    v7 = 1;
    v8 = (char *)a1[2];
    do
    {
LABEL_18:
      v14 = *(_QWORD *)v8;
      v8 += 8;
      v7 *= v14;
    }
    while (v8 != v5);
    goto LABEL_19;
  }
  v9 = ((unint64_t)(v6 - 8) >> 3) + 1;
  v8 = &v4[8 * (v9 & 0x3FFFFFFFFFFFFFFELL)];
  v10 = v4 + 8;
  v11 = 1;
  v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
  v13 = 1;
  do
  {
    v11 *= *(v10 - 1);
    v13 *= *v10;
    v10 += 2;
    v12 -= 2;
  }
  while (v12);
  v7 = v13 * v11;
  if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_18;
LABEL_19:
  a2[8] = 0;
  if (a2 != a1)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(a2 + 2, v4, v5, v6 >> 3);
  if (v7)
  {
    v15 = operator new[]();
    std::shared_ptr<int>::reset[abi:ne180100]<int,std::default_delete<int []>,void>(a2, v15);
  }
  v16 = (a1[3] - a1[2]) >> 3;
  v17 = a2[5];
  v18 = a2 + 5;
  v19 = (a2[6] - v17) >> 3;
  if (v16 <= v19)
  {
    if (v16 < v19)
      a2[6] = v17 + 8 * v16;
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)(a2 + 5), v16 - v19);
  }
  v20 = a2[2];
  v21 = a2[3];
  if (v7)
    v22 = v21 == v20;
  else
    v22 = 1;
  if (!v22)
  {
    v23 = v21 - v20;
    v24 = (v21 - v20) >> 3;
    v25 = v23 >> 3;
    v26 = (v23 << 29) - 0x100000000;
    v27 = *v18;
    *(_QWORD *)(*v18 + (v26 >> 29)) = 1;
    if ((int)v25 >= 2)
    {
      v28 = 8 * (v24 - 2);
      v29 = *(_QWORD *)(v28 + v27 + 8);
      v30 = v20 + 8;
      do
      {
        v29 *= *(_QWORD *)(v30 + v28);
        *(_QWORD *)(v27 + v28) = v29;
        v28 -= 8;
      }
      while (v28 != -8);
    }
    v31 = (uint64x2_t *)a1[2];
    if (v24 <= 1)
      v32 = 1;
    else
      v32 = v24;
    if (v32 >= 4)
    {
      v33 = v32 & 0xFFFFFFFFFFFFFFFCLL;
      v35 = v31 + 1;
      v36 = 0uLL;
      v37 = (uint64x2_t)vdupq_n_s64(1uLL);
      v38 = v32 & 0xFFFFFFFFFFFFFFFCLL;
      v39 = 0uLL;
      do
      {
        v36 = vsubq_s64(v36, (int64x2_t)vcgtq_u64(v35[-1], v37));
        v39 = vsubq_s64(v39, (int64x2_t)vcgtq_u64(*v35, v37));
        v35 += 2;
        v38 -= 4;
      }
      while (v38);
      v34 = vaddvq_s64(vaddq_s64(v39, v36));
      if (v32 == v33)
      {
LABEL_46:
        if (v34 != 1)
        {
          if (v34 != 2)
          {
            nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>::canonicalize(void)::{lambda(int &,int const&)#1}>(a2, a1);
            return;
          }
          v43 = 0;
          v44 = 0;
          v45 = 0;
          v46 = 0;
          while (1)
          {
            v47 = a1[2];
            v48 = *(_QWORD *)(v47 + 8 * v43);
            if (v48 >= 2)
            {
              v49 = a1[5];
              v50 = *(_QWORD *)(v49 + 8 * v43);
              if (v45)
              {
                if (v50 == 1)
                {
                  if (v46)
                  {
                    v53 = 0;
                    v54 = 0;
                    v55 = 4 * v48;
                    v56 = 4 * v44;
                    v57 = 4 * v45;
                    do
                    {
                      memmove((void *)(*a2 + v54), (const void *)(*a1 + 4 * a1[8] + v53), v55);
                      v54 += v56;
                      v53 += v57;
                      --v46;
                    }
                    while (v46);
                  }
                  return;
                }
LABEL_67:
                if (!v46)
                  return;
                v58 = 0;
                v59 = a1[8];
                v60 = *a2;
                v61 = 4 * v44;
                v62 = 4 * v59;
                v63 = 4 * v45;
                v65 = v48 > 7 && v50 == 1;
                v66 = v48 & 0xFFFFFFFFFFFFFFF8;
                v67 = (v48 & 0xFFFFFFFFFFFFFFF8) * v50;
                v68 = (_OWORD *)(v60 + 16);
                v69 = v62 + 16;
                v70 = 4 * v50;
                while (2)
                {
                  if (v48)
                  {
                    v71 = v58 * v44;
                    v72 = *a1;
                    v73 = v59 + v58 * v45;
                    if (!v65 || (unint64_t)(v60 + v61 * v58 - (v62 + v63 * v58 + v72)) < 0x20)
                    {
                      v74 = 0;
                      goto LABEL_80;
                    }
                    v71 += v66;
                    v73 += v67;
                    v78 = (__int128 *)(v72 + v69);
                    v79 = v68;
                    v80 = v48 & 0xFFFFFFFFFFFFFFF8;
                    do
                    {
                      v81 = *v78;
                      *(v79 - 1) = *(v78 - 1);
                      *v79 = v81;
                      v79 += 2;
                      v78 += 2;
                      v80 -= 8;
                    }
                    while (v80);
                    v74 = v48 & 0xFFFFFFFFFFFFFFF8;
                    if (v48 != v66)
                    {
LABEL_80:
                      v75 = v48 - v74;
                      v76 = (_DWORD *)(v60 + 4 * v71);
                      v77 = (_DWORD *)(v72 + 4 * v73);
                      do
                      {
                        *v76++ = *v77;
                        v77 = (_DWORD *)((char *)v77 + v70);
                        --v75;
                      }
                      while (v75);
                    }
                  }
                  ++v58;
                  v68 = (_OWORD *)((char *)v68 + v61);
                  v69 += v63;
                  if (v58 == v46)
                    return;
                  continue;
                }
              }
              v44 = *(_QWORD *)(v27 + 8 * v43);
              v46 = *(_QWORD *)(v47 + 8 * v43);
              v45 = *(_QWORD *)(v49 + 8 * v43);
            }
            if (v32 == ++v43)
            {
              v50 = 0;
              v48 = 0;
              goto LABEL_67;
            }
          }
        }
        v51 = 0;
        while (*(_QWORD *)(a1[2] + 8 * v51) != v7)
        {
          if (v32 == ++v51)
          {
            v52 = 0;
LABEL_61:
            v82 = v7;
            v83 = (_DWORD *)*a2;
            v84 = (_DWORD *)(*a1 + 4 * a1[8]);
            v85 = 4 * v52;
            do
            {
              *v83++ = *v84;
              v84 = (_DWORD *)((char *)v84 + v85);
              --v82;
            }
            while (v82);
            return;
          }
        }
        v52 = *(_QWORD *)(a1[5] + 8 * v51);
        if (v52 == 1)
        {
          memmove((void *)*a2, (const void *)(*a1 + 4 * a1[8]), 4 * v7);
          return;
        }
        goto LABEL_61;
      }
    }
    else
    {
      v33 = 0;
      v34 = 0;
    }
    v40 = v32 - v33;
    v41 = (unint64_t *)v31 + v33;
    do
    {
      v42 = *v41++;
      if (v42 > 1)
        ++v34;
      --v40;
    }
    while (v40);
    goto LABEL_46;
  }
}

void sub_1911F1300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  _QWORD *v16;

  nitro::ndarray<float>::~ndarray(v16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::compact(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 663, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911F1480(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911F1494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911F148CLL);
}

void nitro::ndarray<int>::canonicalize(void)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"is_valid()", 10);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 555, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::ndarray<int>::canonicalize(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911F1714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

__n128 nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>::canonicalize(void)::{lambda(int &,int const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  _DWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  __n128 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  __n128 *v49;
  __n128 *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  __n128 *v62;
  __n128 *v63;
  unint64_t v64;
  __n128 result;
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  __n128 *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  __n128 *v84;
  __n128 *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  _DWORD *v94;
  uint64_t v95;
  uint64_t v96;
  _DWORD *v97;
  __n128 *v99;
  __n128 *v100;
  unint64_t v101;
  __n128 v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  unint64_t v141;
  __n128 *v142;
  __n128 *v143;
  __n128 *v144;
  __n128 *v145;
  unint64_t v146;
  __n128 v147;
  uint64_t v148;
  __n128 *v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v158;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return result;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>::canonicalize(void)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>::canonicalize(void)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 != (char *)v4)
  {
    v13 = *a1;
    if (*a1)
    {
      if (v12 - 8 >= 8)
      {
        v16 = ((v12 - 8) >> 3) + 1;
        v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
        v17 = v4 + 1;
        v18 = 1;
        v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
        v20 = 1;
        do
        {
          v18 *= *(v17 - 1);
          v20 *= *v17;
          v17 += 2;
          v19 -= 2;
        }
        while (v19);
        v14 = v20 * v18;
        if (v16 == (v16 & 0x3FFFFFFFFFFFFFFELL))
          goto LABEL_21;
      }
      else
      {
        v14 = 1;
        v15 = (unint64_t *)a1[2];
      }
      do
      {
        v21 = *v15++;
        v14 *= v21;
      }
      while (v15 != (unint64_t *)v3);
LABEL_21:
      if (!v14)
        return result;
      v22 = (uint64_t)v12 >> 3;
      v158 = *a1;
      if ((uint64_t)v12 >> 3 != 3)
      {
        if (v22 != 2)
        {
          if (v22 == 1)
          {
            v23 = *v4;
            if (!*v4)
              return result;
            v24 = a2[8];
            v25 = a1[8];
            v26 = *a2;
            v27 = *(_QWORD *)a1[5];
            v28 = *(_QWORD *)a2[5];
            if (v23 < 0xC)
              goto LABEL_27;
            v29 = 0;
            if (v27 != 1 || v28 != 1)
              goto LABEL_28;
            v142 = (__n128 *)(4 * v25 + v13);
            v143 = (__n128 *)(4 * v24 + v26);
            if ((unint64_t)((char *)v142 - (char *)v143) < 0x20)
            {
LABEL_27:
              v29 = 0;
            }
            else
            {
              v29 = v23 & 0xFFFFFFFFFFFFFFF8;
              v24 += v23 & 0xFFFFFFFFFFFFFFF8;
              v25 += v23 & 0xFFFFFFFFFFFFFFF8;
              v144 = v143 + 1;
              v145 = v142 + 1;
              v146 = v23 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                result = v144[-1];
                v147 = *v144;
                v145[-1] = result;
                *v145 = v147;
                v144 += 2;
                v145 += 2;
                v146 -= 8;
              }
              while (v146);
              if (v23 == v29)
                return result;
            }
LABEL_28:
            v30 = v23 - v29;
            v31 = (_DWORD *)(v26 + 4 * v24);
            v32 = 4 * v27;
            v33 = (_DWORD *)(v13 + 4 * v25);
            do
            {
              *v33 = *v31;
              v31 += v28;
              v33 = (_DWORD *)((char *)v33 + v32);
              --v30;
            }
            while (v30);
            return result;
          }
          if ((v12 & 0x8000000000000000) != 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v103 = operator new(v12);
          bzero(v103, v12 & 0xFFFFFFFFFFFFFFF8);
          v104 = *a2;
          if (v12 >> 3 <= 1)
            v105 = 1;
          else
            v105 = v12 >> 3;
          v106 = a2[5];
          v107 = a2[8];
          v108 = v105 & 0x1FFFFFFFFFFFFFFELL;
          v109 = a1[5];
          while (v105 >= 2)
          {
            v112 = 0;
            v113 = 0;
            v114 = v105 & 0x1FFFFFFFFFFFFFFELL;
            v115 = (_QWORD *)(v109 + 8);
            v116 = v103 + 1;
            do
            {
              v112 += *(v115 - 1) * *(v116 - 1);
              v113 += *v115 * *v116;
              v116 += 2;
              v115 += 2;
              v114 -= 2;
            }
            while (v114);
            v110 = v113 + v112;
            v111 = v105 & 0x1FFFFFFFFFFFFFFELL;
            v13 = v158;
            if (v105 != v108)
              goto LABEL_84;
LABEL_86:
            if (v105 < 2)
            {
              v124 = 0;
              v125 = 0;
LABEL_91:
              v131 = v105 - v125;
              v132 = v125;
              v133 = (uint64_t *)(v106 + 8 * v125);
              v134 = &v103[v132];
              do
              {
                v136 = *v134++;
                v135 = v136;
                v137 = *v133++;
                v124 += v137 * v135;
                --v131;
              }
              while (v131);
              goto LABEL_93;
            }
            v126 = 0;
            v127 = 0;
            v128 = v105 & 0x1FFFFFFFFFFFFFFELL;
            v129 = (_QWORD *)(v106 + 8);
            v130 = v103 + 1;
            do
            {
              v126 += *(v129 - 1) * *(v130 - 1);
              v127 += *v129 * *v130;
              v130 += 2;
              v129 += 2;
              v128 -= 2;
            }
            while (v128);
            v124 = v127 + v126;
            v125 = v105 & 0x1FFFFFFFFFFFFFFELL;
            v13 = v158;
            if (v105 != v108)
              goto LABEL_91;
LABEL_93:
            *(_DWORD *)(v13 + 4 * v110) = *(_DWORD *)(v104 + 4 * (v107 + v124));
            if ((int)(v12 >> 3) >= 1)
            {
              v138 = (v12 >> 3) + 1;
              v139 = v12 >> 3;
              while (1)
              {
                v140 = (v138 - 2);
                v141 = v103[v140] + 1;
                v103[v140] = v141;
                if (v141 < v4[v140])
                  break;
                v103[(v138 - 2)] = 0;
                --v139;
                if ((unint64_t)--v138 <= 1)
                  goto LABEL_99;
              }
              if (v139 > 0)
                continue;
            }
LABEL_99:
            operator delete(v103);
            return result;
          }
          v110 = 0;
          v111 = 0;
LABEL_84:
          v117 = v105 - v111;
          v118 = v111;
          v119 = (uint64_t *)(v109 + 8 * v111);
          v120 = &v103[v118];
          do
          {
            v122 = *v120++;
            v121 = v122;
            v123 = *v119++;
            v110 += v123 * v121;
            --v117;
          }
          while (v117);
          goto LABEL_86;
        }
        v34 = *v4;
        if (!*v4)
          return result;
        v35 = 0;
        v36 = a2[8];
        v37 = a1[8];
        v38 = v4[1];
        v39 = *a2;
        v40 = (uint64_t *)a2[5];
        v41 = (uint64_t *)a1[5];
        v42 = *v41;
        v43 = (__n128 *)(v13 + 4 * v37);
        v44 = 4 * *v41;
        v45 = *a2 + 4 * v36;
        v46 = *v40;
        v47 = 4 * *v40;
        v48 = v38 & 0xFFFFFFFFFFFFFFF8;
        v49 = v43 + 1;
        v50 = (__n128 *)(v45 + 16);
        while (!v38)
        {
LABEL_33:
          v37 += v42;
          v36 += v46;
          ++v35;
          v49 = (__n128 *)((char *)v49 + v44);
          v50 = (__n128 *)((char *)v50 + v47);
          if (v35 == v34)
            return result;
        }
        v51 = v41[1];
        v52 = v40[1];
        if (v38 >= 8)
        {
          v53 = 0;
          if (v51 == 1 && v52 == 1)
          {
            v54 = v36;
            v55 = v37;
            if ((unint64_t)v43->n128_u64 + v44 * v35 - v45 - v47 * v35 >= 0x20)
            {
              v54 = v36 + v48 * v52;
              v62 = v50;
              v63 = v49;
              v64 = v38 & 0xFFFFFFFFFFFFFFF8;
              v55 = v37 + v48 * v51;
              do
              {
                result = v62[-1];
                v66 = *v62;
                v63[-1] = result;
                *v63 = v66;
                v63 += 2;
                v62 += 2;
                v64 -= 8;
              }
              while (v64);
              v53 = v38 & 0xFFFFFFFFFFFFFFF8;
              if (v38 == v48)
                goto LABEL_33;
            }
            goto LABEL_38;
          }
        }
        else
        {
          v53 = 0;
        }
        v54 = v36;
        v55 = v37;
LABEL_38:
        v56 = v38 - v53;
        v57 = (_DWORD *)(v39 + 4 * v54);
        v58 = 4 * v52;
        v59 = 4 * v51;
        v60 = (_DWORD *)(v158 + 4 * v55);
        do
        {
          *v60 = *v57;
          v57 = (_DWORD *)((char *)v57 + v58);
          v60 = (_DWORD *)((char *)v60 + v59);
          --v56;
        }
        while (v56);
        goto LABEL_33;
      }
      v154 = *v4;
      if (!*v4)
        return result;
      v67 = 0;
      v68 = a2[8];
      v69 = a1[8];
      v70 = v4[1];
      v71 = (uint64_t *)a1[5];
      v150 = (uint64_t *)a2[5];
      v151 = a1[2];
      v152 = *v150;
      v153 = *v71;
      v156 = 4 * *v71;
      v155 = 4 * *v150;
      v148 = 4 * v68;
      v149 = (__n128 *)(v13 + 4 * v69);
      v72 = v149 + 1;
      v73 = 4 * v68 + 16;
      while (!v70)
      {
LABEL_53:
        v69 += v153;
        v68 += v152;
        ++v67;
        v72 = (__n128 *)((char *)v72 + v156);
        v73 += v155;
        if (v67 == v154)
          return result;
      }
      v74 = 0;
      v75 = *(_QWORD *)(v151 + 16);
      v76 = *a2;
      v77 = v71[1];
      v78 = v150[1];
      v79 = 4 * v77;
      v80 = v148 + v155 * v67 + *a2;
      v81 = 4 * v78;
      v82 = v75 & 0xFFFFFFFFFFFFFFF8;
      v83 = a2[5];
      v84 = (__n128 *)(*a2 + v73);
      v85 = v72;
      v86 = v68;
      v87 = v69;
      while (!v75)
      {
LABEL_56:
        v87 += v77;
        v86 += v78;
        ++v74;
        v85 = (__n128 *)((char *)v85 + v79);
        v84 = (__n128 *)((char *)v84 + v81);
        if (v74 == v70)
          goto LABEL_53;
      }
      v88 = v71[2];
      v89 = *(_QWORD *)(v83 + 16);
      if (v75 >= 8)
      {
        v90 = 0;
        if (v88 == 1 && v89 == 1)
        {
          v91 = v86;
          v92 = v87;
          if ((unint64_t)v149->n128_u64 + v156 * v67 + v79 * v74 - v80 - v81 * v74 >= 0x20)
          {
            v91 = v86 + v82 * v89;
            v99 = v84;
            v100 = v85;
            v101 = v75 & 0xFFFFFFFFFFFFFFF8;
            v92 = v87 + v82 * v88;
            do
            {
              result = v99[-1];
              v102 = *v99;
              v100[-1] = result;
              *v100 = v102;
              v100 += 2;
              v99 += 2;
              v101 -= 8;
            }
            while (v101);
            v90 = v75 & 0xFFFFFFFFFFFFFFF8;
            v13 = v158;
            if (v75 == v82)
              goto LABEL_56;
          }
          goto LABEL_61;
        }
      }
      else
      {
        v90 = 0;
      }
      v91 = v86;
      v92 = v87;
LABEL_61:
      v93 = v75 - v90;
      v94 = (_DWORD *)(v76 + 4 * v91);
      v95 = 4 * v89;
      v96 = 4 * v88;
      v97 = (_DWORD *)(v13 + 4 * v92);
      do
      {
        *v97 = *v94;
        v94 = (_DWORD *)((char *)v94 + v95);
        v97 = (_DWORD *)((char *)v97 + v96);
        --v93;
      }
      while (v93);
      goto LABEL_56;
    }
  }
  return result;
}

void sub_1911F1E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::canonicalize(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 555, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911F1FC8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911F1FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911F1FD4);
}

void nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>::canonicalize(void)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>::canonicalize(void)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>::canonicalize(void)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>::canonicalize(void)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911F225C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>::canonicalize(void)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>::canonicalize(void)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911F2400(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911F2414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911F240CLL);
}

void nitro::ndarray<half>::compact(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a1[3] - a1[2] != a1[6] - a1[5])
    nitro::ndarray<half>::compact(void)const::{lambda(void)#1}::operator()();
  if (a1[8])
    goto LABEL_3;
  v3 = a1[2];
  v4 = (uint64_t *)a1[3];
  v5 = (uint64_t)v4 - v3;
  if (v4 != (uint64_t *)v3)
  {
    v6 = *a1;
    if (!*a1)
      goto LABEL_13;
    if ((unint64_t)(v5 - 8) >= 8)
    {
      v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
      v7 = (uint64_t *)(v3 + 8 * (v8 & 0x3FFFFFFFFFFFFFFELL));
      v9 = (_QWORD *)(v3 + 8);
      v10 = 1;
      v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
      v12 = 1;
      do
      {
        v10 *= *(v9 - 1);
        v12 *= *v9;
        v9 += 2;
        v11 -= 2;
      }
      while (v11);
      v6 = v12 * v10;
      if (v8 == (v8 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_13:
        v14 = v5 >> 3;
        v15 = a1[5];
        if (v14 <= 1)
          v14 = 1;
        if (v14 >= 2)
        {
          v18 = 0;
          v19 = 0;
          v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
          v20 = (_QWORD *)(v3 + 8);
          v21 = (_QWORD *)(v15 + 8);
          v22 = v14 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v18 += *(v21 - 1) * (*(v20 - 1) - 1);
            v19 += *v21 * (*v20 - 1);
            v20 += 2;
            v21 += 2;
            v22 -= 2;
          }
          while (v22);
          v17 = v19 + v18;
          if (v14 == v16)
          {
LABEL_22:
            if (v6 != v17 + 1)
            {
LABEL_3:
              nitro::ndarray<half>::canonicalize(a1, a2);
              return;
            }
            goto LABEL_23;
          }
        }
        else
        {
          v16 = 0;
          v17 = 0;
        }
        v23 = v14 - v16;
        v24 = 8 * v16;
        v25 = (uint64_t *)(v15 + v24);
        v26 = (uint64_t *)(v3 + v24);
        do
        {
          v27 = *v26++;
          v28 = v27 - 1;
          v29 = *v25++;
          v17 += v29 * v28;
          --v23;
        }
        while (v23);
        goto LABEL_22;
      }
    }
    else
    {
      v6 = 1;
      v7 = (uint64_t *)a1[2];
    }
    do
    {
      v13 = *v7++;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_13;
  }
LABEL_23:
  nitro::ndarray<half>::ndarray(a2, a1);
}

void nitro::ndarray<half>::compact(void)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"is_valid()", 10);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 663, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::ndarray<half>::compact(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911F282C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

__int16 nitro::ndarray<half>::canonicalize@<H0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  int64x2_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64x2_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64x2_t *v36;
  uint64x2_t v37;
  unint64_t v38;
  int64x2_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  size_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BOOL4 v65;
  unint64_t v66;
  unint64_t v67;
  int64x2_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  __int16 *v76;
  __int16 *v77;
  int64x2_t *v78;
  int64x2_t *v79;
  unint64_t v80;
  int64x2_t v81;
  uint64_t v82;
  __int16 *v83;
  __int16 *v84;
  uint64_t v85;
  void *__p;
  void *v88;
  uint64_t v89;
  void *v90;
  void *v91;
  uint64_t v92;
  void *v93;
  void *v94;
  uint64_t v95;

  if (nitro::ndarray<float>::is_canonical(a1))
  {
    nitro::ndarray<half>::ndarray(a2, a1);
    return v4.i16[0];
  }
  if (a1[3] - a1[2] != a1[6] - a1[5])
    nitro::ndarray<half>::canonicalize(void)const::{lambda(void)#1}::operator()();
  v93 = 0;
  v94 = 0;
  v95 = 0;
  v90 = 0;
  v91 = 0;
  v92 = 0;
  __p = 0;
  v88 = 0;
  v89 = 0;
  nitro::ndarray<half>::ndarray((uint64_t)a2, (uint64_t)&v93, (char **)&v90, (char **)&__p, 0);
  if (__p)
  {
    v88 = __p;
    operator delete(__p);
  }
  if (v90)
  {
    v91 = v90;
    operator delete(v90);
  }
  if (v93)
  {
    v94 = v93;
    operator delete(v93);
  }
  v5 = (char *)a1[2];
  v6 = (char *)a1[3];
  v7 = v6 - v5;
  if (v6 == v5 || !*a1)
  {
    v8 = 0;
    goto LABEL_19;
  }
  if ((unint64_t)(v7 - 8) < 8)
  {
    v8 = 1;
    v9 = (char *)a1[2];
    do
    {
LABEL_18:
      v15 = *(_QWORD *)v9;
      v9 += 8;
      v8 *= v15;
    }
    while (v9 != v6);
    goto LABEL_19;
  }
  v10 = ((unint64_t)(v7 - 8) >> 3) + 1;
  v9 = &v5[8 * (v10 & 0x3FFFFFFFFFFFFFFELL)];
  v11 = v5 + 8;
  v12 = 1;
  v13 = v10 & 0x3FFFFFFFFFFFFFFELL;
  v14 = 1;
  do
  {
    v12 *= *(v11 - 1);
    v14 *= *v11;
    v11 += 2;
    v13 -= 2;
  }
  while (v13);
  v8 = v14 * v12;
  if (v10 != (v10 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_18;
LABEL_19:
  a2[8] = 0;
  if (a2 != a1)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(a2 + 2, v5, v6, v7 >> 3);
  if (v8)
  {
    v16 = operator new[]();
    std::shared_ptr<half>::reset[abi:ne180100]<half,std::default_delete<half []>,void>(a2, v16);
  }
  v17 = (a1[3] - a1[2]) >> 3;
  v18 = a2[5];
  v19 = a2 + 5;
  v20 = (a2[6] - v18) >> 3;
  if (v17 <= v20)
  {
    if (v17 < v20)
      a2[6] = v18 + 8 * v17;
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)(a2 + 5), v17 - v20);
  }
  v21 = a2[2];
  v22 = a2[3];
  if (v8)
    v23 = v22 == v21;
  else
    v23 = 1;
  if (!v23)
  {
    v24 = v22 - v21;
    v25 = (v22 - v21) >> 3;
    v26 = v24 >> 3;
    v27 = (v24 << 29) - 0x100000000;
    v28 = *v19;
    *(_QWORD *)(*v19 + (v27 >> 29)) = 1;
    if ((int)v26 >= 2)
    {
      v29 = 8 * (v25 - 2);
      v30 = *(_QWORD *)(v29 + v28 + 8);
      v31 = v21 + 8;
      do
      {
        v30 *= *(_QWORD *)(v31 + v29);
        *(_QWORD *)(v28 + v29) = v30;
        v29 -= 8;
      }
      while (v29 != -8);
    }
    v32 = (uint64x2_t *)a1[2];
    if (v25 <= 1)
      v33 = 1;
    else
      v33 = v25;
    if (v33 >= 4)
    {
      v34 = v33 & 0xFFFFFFFFFFFFFFFCLL;
      v36 = v32 + 1;
      v4 = 0uLL;
      v37 = (uint64x2_t)vdupq_n_s64(1uLL);
      v38 = v33 & 0xFFFFFFFFFFFFFFFCLL;
      v39 = 0uLL;
      do
      {
        v4 = vsubq_s64(v4, (int64x2_t)vcgtq_u64(v36[-1], v37));
        v39 = vsubq_s64(v39, (int64x2_t)vcgtq_u64(*v36, v37));
        v36 += 2;
        v38 -= 4;
      }
      while (v38);
      v4.i64[0] = vaddvq_s64(vaddq_s64(v39, v4));
      v35 = v4.i64[0];
      if (v33 == v34)
      {
LABEL_46:
        if (v35 != 1)
        {
          if (v35 != 2)
          {
            v4.i16[0] = nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>::canonicalize(void)::{lambda(half &,half const&)#1}>(a2, a1).n128_u16[0];
            return v4.i16[0];
          }
          v43 = 0;
          v44 = 0;
          v45 = 0;
          v46 = 0;
          while (1)
          {
            v47 = a1[2];
            v48 = *(_QWORD *)(v47 + 8 * v43);
            if (v48 >= 2)
            {
              v49 = a1[5];
              v50 = *(_QWORD *)(v49 + 8 * v43);
              if (v45)
              {
                if (v50 == 1)
                {
                  if (v46)
                  {
                    v53 = 0;
                    v54 = 0;
                    v55 = 2 * v48;
                    v56 = 2 * v44;
                    v57 = 2 * v45;
                    do
                    {
                      memmove((void *)(*a2 + v54), (const void *)(*a1 + 2 * a1[8] + v53), v55);
                      v54 += v56;
                      v53 += v57;
                      --v46;
                    }
                    while (v46);
                  }
                  return v4.i16[0];
                }
LABEL_67:
                if (!v46)
                  return v4.i16[0];
                v58 = 0;
                v59 = a1[8];
                v60 = *a2;
                v61 = 2 * v44;
                v62 = 2 * v59;
                v63 = 2 * v45;
                v65 = v48 > 0xF && v50 == 1;
                v66 = v48 & 0xFFFFFFFFFFFFFFF0;
                v67 = (v48 & 0xFFFFFFFFFFFFFFF0) * v50;
                v68 = (int64x2_t *)(v60 + 16);
                v69 = v62 + 16;
                v70 = 2 * v50;
                while (2)
                {
                  if (v48)
                  {
                    v71 = v58 * v44;
                    v72 = *a1;
                    v73 = v59 + v58 * v45;
                    if (!v65 || (unint64_t)(v60 + v61 * v58 - (v62 + v63 * v58 + v72)) < 0x20)
                    {
                      v74 = 0;
                      goto LABEL_80;
                    }
                    v71 += v66;
                    v73 += v67;
                    v78 = (int64x2_t *)(v72 + v69);
                    v79 = v68;
                    v80 = v48 & 0xFFFFFFFFFFFFFFF0;
                    do
                    {
                      v4 = v78[-1];
                      v81 = *v78;
                      v79[-1] = v4;
                      *v79 = v81;
                      v79 += 2;
                      v78 += 2;
                      v80 -= 16;
                    }
                    while (v80);
                    v74 = v48 & 0xFFFFFFFFFFFFFFF0;
                    if (v48 != v66)
                    {
LABEL_80:
                      v75 = v48 - v74;
                      v76 = (__int16 *)(v60 + 2 * v71);
                      v77 = (__int16 *)(v72 + 2 * v73);
                      do
                      {
                        v4.i16[0] = *v77;
                        *v76++ = *v77;
                        v77 = (__int16 *)((char *)v77 + v70);
                        --v75;
                      }
                      while (v75);
                    }
                  }
                  ++v58;
                  v68 = (int64x2_t *)((char *)v68 + v61);
                  v69 += v63;
                  if (v58 == v46)
                    return v4.i16[0];
                  continue;
                }
              }
              v44 = *(_QWORD *)(v28 + 8 * v43);
              v46 = *(_QWORD *)(v47 + 8 * v43);
              v45 = *(_QWORD *)(v49 + 8 * v43);
            }
            if (v33 == ++v43)
            {
              v50 = 0;
              v48 = 0;
              goto LABEL_67;
            }
          }
        }
        v51 = 0;
        while (*(_QWORD *)(a1[2] + 8 * v51) != v8)
        {
          if (v33 == ++v51)
          {
            v52 = 0;
LABEL_61:
            v82 = v8;
            v83 = (__int16 *)*a2;
            v84 = (__int16 *)(*a1 + 2 * a1[8]);
            v85 = 2 * v52;
            do
            {
              v4.i16[0] = *v84;
              *v83++ = *v84;
              v84 = (__int16 *)((char *)v84 + v85);
              --v82;
            }
            while (v82);
            return v4.i16[0];
          }
        }
        v52 = *(_QWORD *)(a1[5] + 8 * v51);
        if (v52 == 1)
        {
          memmove((void *)*a2, (const void *)(*a1 + 2 * a1[8]), 2 * v8);
          return v4.i16[0];
        }
        goto LABEL_61;
      }
    }
    else
    {
      v34 = 0;
      v35 = 0;
    }
    v40 = v33 - v34;
    v41 = (unint64_t *)v32 + v34;
    do
    {
      v42 = *v41++;
      if (v42 > 1)
        ++v35;
      --v40;
    }
    while (v40);
    goto LABEL_46;
  }
  return v4.i16[0];
}

void sub_1911F2E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  _QWORD *v16;

  nitro::ndarray<float>::~ndarray(v16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::compact(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 663, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911F2F9C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911F2FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911F2FA8);
}

void nitro::ndarray<half>::canonicalize(void)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"is_valid()", 10);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 555, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::ndarray<half>::canonicalize(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911F3230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

__n128 nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>::canonicalize(void)::{lambda(half &,half const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int16 *v31;
  uint64_t v32;
  unsigned __int16 *v33;
  __n128 result;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  __n128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  __n128 *v50;
  __n128 *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unsigned __int16 *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int16 *v61;
  __n128 *v63;
  __n128 *v64;
  unint64_t v65;
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  __n128 *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  __n128 *v84;
  __n128 *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unsigned __int16 *v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int16 *v97;
  __n128 *v99;
  __n128 *v100;
  unint64_t v101;
  __n128 v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  unint64_t v141;
  __n128 *v142;
  __n128 *v143;
  __n128 *v144;
  __n128 *v145;
  unint64_t v146;
  __n128 v147;
  uint64_t v148;
  __n128 *v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v158;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return result;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>::canonicalize(void)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>::canonicalize(void)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator()();
  v12 = v3 - (char *)v4;
  if (v3 != (char *)v4)
  {
    v13 = *a1;
    if (*a1)
    {
      if (v12 - 8 >= 8)
      {
        v16 = ((v12 - 8) >> 3) + 1;
        v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
        v17 = v4 + 1;
        v18 = 1;
        v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
        v20 = 1;
        do
        {
          v18 *= *(v17 - 1);
          v20 *= *v17;
          v17 += 2;
          v19 -= 2;
        }
        while (v19);
        v14 = v20 * v18;
        if (v16 == (v16 & 0x3FFFFFFFFFFFFFFELL))
          goto LABEL_21;
      }
      else
      {
        v14 = 1;
        v15 = (unint64_t *)a1[2];
      }
      do
      {
        v21 = *v15++;
        v14 *= v21;
      }
      while (v15 != (unint64_t *)v3);
LABEL_21:
      if (!v14)
        return result;
      v22 = (uint64_t)v12 >> 3;
      v158 = *a1;
      if ((uint64_t)v12 >> 3 != 3)
      {
        if (v22 != 2)
        {
          if (v22 == 1)
          {
            v23 = *v4;
            if (!*v4)
              return result;
            v24 = a2[8];
            v25 = a1[8];
            v26 = *a2;
            v27 = *(_QWORD *)a1[5];
            v28 = *(_QWORD *)a2[5];
            if (v23 < 0x10)
              goto LABEL_27;
            v29 = 0;
            if (v27 != 1 || v28 != 1)
              goto LABEL_28;
            v142 = (__n128 *)(2 * v25 + v13);
            v143 = (__n128 *)(2 * v24 + v26);
            if ((unint64_t)((char *)v142 - (char *)v143) < 0x20)
            {
LABEL_27:
              v29 = 0;
            }
            else
            {
              v29 = v23 & 0xFFFFFFFFFFFFFFF0;
              v24 += v23 & 0xFFFFFFFFFFFFFFF0;
              v25 += v23 & 0xFFFFFFFFFFFFFFF0;
              v144 = v143 + 1;
              v145 = v142 + 1;
              v146 = v23 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                result = v144[-1];
                v147 = *v144;
                v145[-1] = result;
                *v145 = v147;
                v144 += 2;
                v145 += 2;
                v146 -= 16;
              }
              while (v146);
              if (v23 == v29)
                return result;
            }
LABEL_28:
            v30 = v23 - v29;
            v31 = (unsigned __int16 *)(v26 + 2 * v24);
            v32 = 2 * v27;
            v33 = (unsigned __int16 *)(v13 + 2 * v25);
            do
            {
              result.n128_u16[0] = *v31;
              *v33 = *v31;
              v31 += v28;
              v33 = (unsigned __int16 *)((char *)v33 + v32);
              --v30;
            }
            while (v30);
            return result;
          }
          if ((v12 & 0x8000000000000000) != 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v103 = operator new(v12);
          bzero(v103, v12 & 0xFFFFFFFFFFFFFFF8);
          v104 = *a2;
          if (v12 >> 3 <= 1)
            v105 = 1;
          else
            v105 = v12 >> 3;
          v106 = a2[5];
          v107 = a2[8];
          v108 = v105 & 0x1FFFFFFFFFFFFFFELL;
          v109 = a1[5];
          while (v105 >= 2)
          {
            v112 = 0;
            v113 = 0;
            v114 = v105 & 0x1FFFFFFFFFFFFFFELL;
            v115 = (_QWORD *)(v109 + 8);
            v116 = v103 + 1;
            do
            {
              v112 += *(v115 - 1) * *(v116 - 1);
              v113 += *v115 * *v116;
              v116 += 2;
              v115 += 2;
              v114 -= 2;
            }
            while (v114);
            v110 = v113 + v112;
            v111 = v105 & 0x1FFFFFFFFFFFFFFELL;
            v13 = v158;
            if (v105 != v108)
              goto LABEL_84;
LABEL_86:
            if (v105 < 2)
            {
              v124 = 0;
              v125 = 0;
LABEL_91:
              v131 = v105 - v125;
              v132 = v125;
              v133 = (uint64_t *)(v106 + 8 * v125);
              v134 = &v103[v132];
              do
              {
                v136 = *v134++;
                v135 = v136;
                v137 = *v133++;
                v124 += v137 * v135;
                --v131;
              }
              while (v131);
              goto LABEL_93;
            }
            v126 = 0;
            v127 = 0;
            v128 = v105 & 0x1FFFFFFFFFFFFFFELL;
            v129 = (_QWORD *)(v106 + 8);
            v130 = v103 + 1;
            do
            {
              v126 += *(v129 - 1) * *(v130 - 1);
              v127 += *v129 * *v130;
              v130 += 2;
              v129 += 2;
              v128 -= 2;
            }
            while (v128);
            v124 = v127 + v126;
            v125 = v105 & 0x1FFFFFFFFFFFFFFELL;
            v13 = v158;
            if (v105 != v108)
              goto LABEL_91;
LABEL_93:
            *(_WORD *)(v13 + 2 * v110) = *(_WORD *)(v104 + 2 * (v107 + v124));
            if ((int)(v12 >> 3) >= 1)
            {
              v138 = (v12 >> 3) + 1;
              v139 = v12 >> 3;
              while (1)
              {
                v140 = (v138 - 2);
                v141 = v103[v140] + 1;
                v103[v140] = v141;
                if (v141 < v4[v140])
                  break;
                v103[(v138 - 2)] = 0;
                --v139;
                if ((unint64_t)--v138 <= 1)
                  goto LABEL_99;
              }
              if (v139 > 0)
                continue;
            }
LABEL_99:
            operator delete(v103);
            return result;
          }
          v110 = 0;
          v111 = 0;
LABEL_84:
          v117 = v105 - v111;
          v118 = v111;
          v119 = (uint64_t *)(v109 + 8 * v111);
          v120 = &v103[v118];
          do
          {
            v122 = *v120++;
            v121 = v122;
            v123 = *v119++;
            v110 += v123 * v121;
            --v117;
          }
          while (v117);
          goto LABEL_86;
        }
        v35 = *v4;
        if (!*v4)
          return result;
        v36 = 0;
        v37 = a2[8];
        v38 = a1[8];
        v39 = v4[1];
        v40 = *a2;
        v41 = (uint64_t *)a2[5];
        v42 = (uint64_t *)a1[5];
        v43 = *v42;
        v44 = (__n128 *)(v13 + 2 * v38);
        v45 = 2 * *v42;
        v46 = *a2 + 2 * v37;
        v47 = *v41;
        v48 = 2 * *v41;
        v49 = v39 & 0xFFFFFFFFFFFFFFF0;
        v50 = v44 + 1;
        v51 = (__n128 *)(v46 + 16);
        while (!v39)
        {
LABEL_33:
          v38 += v43;
          v37 += v47;
          ++v36;
          v50 = (__n128 *)((char *)v50 + v45);
          v51 = (__n128 *)((char *)v51 + v48);
          if (v36 == v35)
            return result;
        }
        v52 = v42[1];
        v53 = v41[1];
        if (v39 >= 0x10)
        {
          v54 = 0;
          if (v52 == 1 && v53 == 1)
          {
            v55 = v37;
            v56 = v38;
            if ((unint64_t)v44->n128_u64 + v45 * v36 - v46 - v48 * v36 >= 0x20)
            {
              v55 = v37 + v49 * v53;
              v63 = v51;
              v64 = v50;
              v65 = v39 & 0xFFFFFFFFFFFFFFF0;
              v56 = v38 + v49 * v52;
              do
              {
                result = v63[-1];
                v66 = *v63;
                v64[-1] = result;
                *v64 = v66;
                v64 += 2;
                v63 += 2;
                v65 -= 16;
              }
              while (v65);
              v54 = v39 & 0xFFFFFFFFFFFFFFF0;
              if (v39 == v49)
                goto LABEL_33;
            }
            goto LABEL_38;
          }
        }
        else
        {
          v54 = 0;
        }
        v55 = v37;
        v56 = v38;
LABEL_38:
        v57 = v39 - v54;
        v58 = (unsigned __int16 *)(v40 + 2 * v55);
        v59 = 2 * v53;
        v60 = 2 * v52;
        v61 = (unsigned __int16 *)(v158 + 2 * v56);
        do
        {
          result.n128_u16[0] = *v58;
          *v61 = *v58;
          v58 = (unsigned __int16 *)((char *)v58 + v59);
          v61 = (unsigned __int16 *)((char *)v61 + v60);
          --v57;
        }
        while (v57);
        goto LABEL_33;
      }
      v154 = *v4;
      if (!*v4)
        return result;
      v67 = 0;
      v68 = a2[8];
      v69 = a1[8];
      v70 = v4[1];
      v71 = (uint64_t *)a1[5];
      v150 = (uint64_t *)a2[5];
      v151 = a1[2];
      v152 = *v150;
      v153 = *v71;
      v156 = 2 * *v71;
      v155 = 2 * *v150;
      v148 = 2 * v68;
      v149 = (__n128 *)(v13 + 2 * v69);
      v72 = v149 + 1;
      v73 = 2 * v68 + 16;
      while (!v70)
      {
LABEL_53:
        v69 += v153;
        v68 += v152;
        ++v67;
        v72 = (__n128 *)((char *)v72 + v156);
        v73 += v155;
        if (v67 == v154)
          return result;
      }
      v74 = 0;
      v75 = *(_QWORD *)(v151 + 16);
      v76 = *a2;
      v77 = v71[1];
      v78 = v150[1];
      v79 = 2 * v77;
      v80 = v148 + v155 * v67 + *a2;
      v81 = 2 * v78;
      v82 = v75 & 0xFFFFFFFFFFFFFFF0;
      v83 = a2[5];
      v84 = (__n128 *)(*a2 + v73);
      v85 = v72;
      v86 = v68;
      v87 = v69;
      while (!v75)
      {
LABEL_56:
        v87 += v77;
        v86 += v78;
        ++v74;
        v85 = (__n128 *)((char *)v85 + v79);
        v84 = (__n128 *)((char *)v84 + v81);
        if (v74 == v70)
          goto LABEL_53;
      }
      v88 = v71[2];
      v89 = *(_QWORD *)(v83 + 16);
      if (v75 >= 0x10)
      {
        v90 = 0;
        if (v88 == 1 && v89 == 1)
        {
          v91 = v86;
          v92 = v87;
          if ((unint64_t)v149->n128_u64 + v156 * v67 + v79 * v74 - v80 - v81 * v74 >= 0x20)
          {
            v91 = v86 + v82 * v89;
            v99 = v84;
            v100 = v85;
            v101 = v75 & 0xFFFFFFFFFFFFFFF0;
            v92 = v87 + v82 * v88;
            do
            {
              result = v99[-1];
              v102 = *v99;
              v100[-1] = result;
              *v100 = v102;
              v100 += 2;
              v99 += 2;
              v101 -= 16;
            }
            while (v101);
            v90 = v75 & 0xFFFFFFFFFFFFFFF0;
            v13 = v158;
            if (v75 == v82)
              goto LABEL_56;
          }
          goto LABEL_61;
        }
      }
      else
      {
        v90 = 0;
      }
      v91 = v86;
      v92 = v87;
LABEL_61:
      v93 = v75 - v90;
      v94 = (unsigned __int16 *)(v76 + 2 * v91);
      v95 = 2 * v89;
      v96 = 2 * v88;
      v97 = (unsigned __int16 *)(v13 + 2 * v92);
      do
      {
        result.n128_u16[0] = *v94;
        *v97 = *v94;
        v94 = (unsigned __int16 *)((char *)v94 + v95);
        v97 = (unsigned __int16 *)((char *)v97 + v96);
        --v93;
      }
      while (v93);
      goto LABEL_56;
    }
  }
  return result;
}

void sub_1911F398C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::canonicalize(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 555, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911F3AE4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911F3AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911F3AF0);
}

void nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>::canonicalize(void)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>::canonicalize(void)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  void nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>::canonicalize(void)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>::canonicalize(void)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911F3D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>::canonicalize(void)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>::canonicalize(void)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911F3F1C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911F3F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911F3F28);
}

void nitro::ndarray<float>::compact(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a1[3] - a1[2] != a1[6] - a1[5])
    nitro::ndarray<float>::compact(void)const::{lambda(void)#1}::operator()();
  if (a1[8])
    goto LABEL_3;
  v3 = a1[2];
  v4 = (uint64_t *)a1[3];
  v5 = (uint64_t)v4 - v3;
  if (v4 != (uint64_t *)v3)
  {
    v6 = *a1;
    if (!*a1)
      goto LABEL_13;
    if ((unint64_t)(v5 - 8) >= 8)
    {
      v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
      v7 = (uint64_t *)(v3 + 8 * (v8 & 0x3FFFFFFFFFFFFFFELL));
      v9 = (_QWORD *)(v3 + 8);
      v10 = 1;
      v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
      v12 = 1;
      do
      {
        v10 *= *(v9 - 1);
        v12 *= *v9;
        v9 += 2;
        v11 -= 2;
      }
      while (v11);
      v6 = v12 * v10;
      if (v8 == (v8 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_13:
        v14 = v5 >> 3;
        v15 = a1[5];
        if (v14 <= 1)
          v14 = 1;
        if (v14 >= 2)
        {
          v18 = 0;
          v19 = 0;
          v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
          v20 = (_QWORD *)(v3 + 8);
          v21 = (_QWORD *)(v15 + 8);
          v22 = v14 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v18 += *(v21 - 1) * (*(v20 - 1) - 1);
            v19 += *v21 * (*v20 - 1);
            v20 += 2;
            v21 += 2;
            v22 -= 2;
          }
          while (v22);
          v17 = v19 + v18;
          if (v14 == v16)
          {
LABEL_22:
            if (v6 != v17 + 1)
            {
LABEL_3:
              nitro::ndarray<float>::canonicalize(a1, a2);
              return;
            }
            goto LABEL_23;
          }
        }
        else
        {
          v16 = 0;
          v17 = 0;
        }
        v23 = v14 - v16;
        v24 = 8 * v16;
        v25 = (uint64_t *)(v15 + v24);
        v26 = (uint64_t *)(v3 + v24);
        do
        {
          v27 = *v26++;
          v28 = v27 - 1;
          v29 = *v25++;
          v17 += v29 * v28;
          --v23;
        }
        while (v23);
        goto LABEL_22;
      }
    }
    else
    {
      v6 = 1;
      v7 = (uint64_t *)a1[2];
    }
    do
    {
      v13 = *v7++;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_13;
  }
LABEL_23:
  nitro::ndarray<float>::ndarray(a2, a1);
}

void nitro::ndarray<float>::compact(void)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"is_valid()", 10);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 663, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::ndarray<float>::compact(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1911F4348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::compact(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 663, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1911F44EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911F4500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1911F44F8);
}

void nitro::ndarray_container::visit<nitro::ndarray_container::canonicalize(void)::$_0>(nitro::ndarray_container::canonicalize(void)::$_0)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1911F4830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1911F4898(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::ndarray_container::copy(void)::$_0>(nitro::ndarray_container::copy(void)::$_0)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1911F4BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1911F4C3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void std::vector<char>::__append(std::vector<char> *this, std::vector<char>::size_type __n)
{
  char *value;
  std::vector<char>::pointer end;
  std::vector<char>::pointer v6;
  std::vector<char>::pointer begin;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  __int128 *v17;
  char *v18;
  unint64_t v19;
  __int128 v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char v26;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  v6 = end;
  if (value - end < __n)
  {
    begin = this->__begin_;
    v8 = end - this->__begin_;
    v9 = v8 + __n;
    if ((uint64_t)(v8 + __n) < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v10 = value - begin;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)operator new(v11);
    else
      v12 = 0;
    v13 = &v12[v8];
    v14 = &v12[v11];
    v15 = &v12[v8 + __n];
    bzero(&v12[v8], __n);
    if (end == begin)
    {
      v12 += v8;
      goto LABEL_32;
    }
    if (v8 >= 8 && (unint64_t)(begin - v12) >= 0x20)
    {
      if (v8 < 0x20)
      {
        v16 = 0;
        goto LABEL_24;
      }
      v16 = v8 & 0xFFFFFFFFFFFFFFE0;
      v17 = (__int128 *)(end - 16);
      v18 = &v12[end - 16 - begin];
      v19 = v8 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v20 = *v17;
        *((_OWORD *)v18 - 1) = *(v17 - 1);
        *(_OWORD *)v18 = v20;
        v18 -= 32;
        v17 -= 2;
        v19 -= 32;
      }
      while (v19);
      if (v8 == v16)
        goto LABEL_31;
      if ((v8 & 0x18) != 0)
      {
LABEL_24:
        v6 = &end[-(v8 & 0xFFFFFFFFFFFFFFF8)];
        v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
        v21 = &end[-v16 - 8];
        v22 = &v12[v21 - begin];
        v23 = v16 - (v8 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v24 = *(_QWORD *)v21;
          v21 -= 8;
          *(_QWORD *)v22 = v24;
          v22 -= 8;
          v23 += 8;
        }
        while (v23);
        if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_31;
        goto LABEL_29;
      }
      v13 -= v16;
      v6 = &end[-v16];
    }
LABEL_29:
    v25 = v13 - 1;
    do
    {
      v26 = *--v6;
      *v25-- = v26;
    }
    while (v6 != begin);
LABEL_31:
    v6 = this->__begin_;
LABEL_32:
    this->__begin_ = v12;
    this->__end_ = v15;
    this->__end_cap_.__value_ = v14;
    if (v6)
      operator delete(v6);
    return;
  }
  if (__n)
  {
    bzero(end, __n);
    v6 = &end[__n];
  }
  this->__end_ = v6;
}

void nitro::ndarray_container::visit<nitro::ndarray_container::load(nitro::iarchive &)::$_0>(nitro::ndarray_container::load(nitro::iarchive &)::$_0)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1911F5154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1911F51BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::load(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  size_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  __int128 v26;
  void *v27;
  void *v28;
  void *__p;
  void *v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count *v32;
  char *v33;
  char *v34;
  uint64_t v35;

  v33 = 0;
  v34 = 0;
  v35 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v33);
  if (v34 == v33)
  {
    v5 = 0;
  }
  else
  {
    v4 = v34 - v33 - 8;
    if (v4 >= 8)
    {
      v7 = (v4 >> 3) + 1;
      v6 = &v33[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
      v8 = v33 + 8;
      v9 = 1;
      v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
      v11 = 1;
      do
      {
        v9 *= *(v8 - 1);
        v11 *= *v8;
        v8 += 2;
        v10 -= 2;
      }
      while (v10);
      v5 = v11 * v9;
      if (v7 == (v7 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_9;
    }
    else
    {
      v5 = 1;
      v6 = v33;
    }
    do
    {
      v12 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v12;
    }
    while (v6 != v34);
  }
LABEL_9:
  v13 = (std::__shared_weak_count_vtbl *)operator new[]();
  v31 = v13;
  v14 = (std::__shared_weak_count *)operator new();
  v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC38C8;
  v14->__shared_owners_ = 0;
  v14->__shared_weak_owners_ = 0;
  v14[1].__vftable = v13;
  v32 = v14;
  v15 = *(_QWORD *)(a2 + 8);
  if (v15)
  {
    v16 = *(_QWORD *)(a2 + 16);
    memcpy(v13, (const void *)(v15 + v16), v5);
    *(_QWORD *)(a2 + 16) = v16 + v5;
  }
  else
  {
    std::istream::read();
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  nitro::ndarray<unsigned char>::ndarray(&v26, &v31, (uint64_t)&v33, (uint64_t)&v23, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v26);
  if (__p)
  {
    v30 = __p;
    operator delete(__p);
  }
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  v20 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
}

void sub_1911F5414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v11 - 88);
  v13 = *(void **)(v11 - 72);
  if (v13)
  {
    *(_QWORD *)(v11 - 64) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void *nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t v10;
  void *result;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(_QWORD *)(v4 + v5);
    *(_QWORD *)(a1 + 16) = v5 + 8;
  }
  else
  {
    std::istream::read();
    v6 = 0;
  }
  v7 = *a2;
  a2[1] = *a2;
  if (v6)
  {
    std::vector<unsigned long long>::__append((uint64_t)a2, v6);
    v8 = *a2;
    v7 = a2[1];
  }
  else
  {
    v8 = v7;
  }
  v9 = v7 - v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (!v10)
    return (void *)std::istream::read();
  result = memcpy(v8, (const void *)(v10 + *(_QWORD *)(a1 + 16)), v9);
  *(_QWORD *)(a1 + 16) += v9;
  return result;
}

void nitro::ndarray<int>::load(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  char *v6;
  size_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  __int128 v27;
  void *v28;
  void *v29;
  void *__p;
  void *v31;
  std::__shared_weak_count_vtbl *v32;
  std::__shared_weak_count *v33;
  char *v34;
  char *v35;
  uint64_t v36;

  v34 = 0;
  v35 = 0;
  v36 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v34);
  if (v35 == v34)
  {
    v7 = 0;
    goto LABEL_10;
  }
  v4 = v35 - v34 - 8;
  if (v4 >= 8)
  {
    v8 = (v4 >> 3) + 1;
    v6 = &v34[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
    v9 = v34 + 8;
    v10 = 1;
    v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
    v12 = 1;
    do
    {
      v10 *= *(v9 - 1);
      v12 *= *v9;
      v9 += 2;
      v11 -= 2;
    }
    while (v11);
    v5 = v12 * v10;
    if (v8 == (v8 & 0x3FFFFFFFFFFFFFFELL))
      goto LABEL_9;
  }
  else
  {
    v5 = 1;
    v6 = v34;
  }
  do
  {
    v13 = *(_QWORD *)v6;
    v6 += 8;
    v5 *= v13;
  }
  while (v6 != v35);
LABEL_9:
  v7 = 4 * v5;
LABEL_10:
  v14 = (std::__shared_weak_count_vtbl *)operator new[]();
  v32 = v14;
  v15 = (std::__shared_weak_count *)operator new();
  v15->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3900;
  v15->__shared_owners_ = 0;
  v15->__shared_weak_owners_ = 0;
  v15[1].__vftable = v14;
  v33 = v15;
  v16 = *(_QWORD *)(a2 + 8);
  if (v16)
  {
    v17 = *(_QWORD *)(a2 + 16);
    memcpy(v14, (const void *)(v16 + v17), v7);
    *(_QWORD *)(a2 + 16) = v17 + v7;
  }
  else
  {
    std::istream::read();
  }
  v24 = 0;
  v25 = 0;
  v26 = 0;
  nitro::ndarray<int>::ndarray(&v27, &v32, (uint64_t)&v34, (uint64_t)&v24, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v27);
  if (__p)
  {
    v31 = __p;
    operator delete(__p);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  v21 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
}

void sub_1911F5790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v11 - 88);
  v13 = *(void **)(v11 - 72);
  if (v13)
  {
    *(_QWORD *)(v11 - 64) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::load(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  char *v6;
  size_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  __int128 v27;
  void *v28;
  void *v29;
  void *__p;
  void *v31;
  std::__shared_weak_count_vtbl *v32;
  std::__shared_weak_count *v33;
  char *v34;
  char *v35;
  uint64_t v36;

  v34 = 0;
  v35 = 0;
  v36 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v34);
  if (v35 == v34)
  {
    v7 = 0;
    goto LABEL_10;
  }
  v4 = v35 - v34 - 8;
  if (v4 >= 8)
  {
    v8 = (v4 >> 3) + 1;
    v6 = &v34[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
    v9 = v34 + 8;
    v10 = 1;
    v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
    v12 = 1;
    do
    {
      v10 *= *(v9 - 1);
      v12 *= *v9;
      v9 += 2;
      v11 -= 2;
    }
    while (v11);
    v5 = v12 * v10;
    if (v8 == (v8 & 0x3FFFFFFFFFFFFFFELL))
      goto LABEL_9;
  }
  else
  {
    v5 = 1;
    v6 = v34;
  }
  do
  {
    v13 = *(_QWORD *)v6;
    v6 += 8;
    v5 *= v13;
  }
  while (v6 != v35);
LABEL_9:
  v7 = 2 * v5;
LABEL_10:
  v14 = (std::__shared_weak_count_vtbl *)operator new[]();
  v32 = v14;
  v15 = (std::__shared_weak_count *)operator new();
  v15->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2B70;
  v15->__shared_owners_ = 0;
  v15->__shared_weak_owners_ = 0;
  v15[1].__vftable = v14;
  v33 = v15;
  v16 = *(_QWORD *)(a2 + 8);
  if (v16)
  {
    v17 = *(_QWORD *)(a2 + 16);
    memcpy(v14, (const void *)(v16 + v17), v7);
    *(_QWORD *)(a2 + 16) = v17 + v7;
  }
  else
  {
    std::istream::read();
  }
  v24 = 0;
  v25 = 0;
  v26 = 0;
  nitro::ndarray<half>::ndarray(&v27, &v32, (uint64_t)&v34, (uint64_t)&v24, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v27);
  if (__p)
  {
    v31 = __p;
    operator delete(__p);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  v21 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
}

void sub_1911F5A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v11 - 88);
  v13 = *(void **)(v11 - 72);
  if (v13)
  {
    *(_QWORD *)(v11 - 64) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::load(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  char *v6;
  size_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  __int128 v27;
  void *v28;
  void *v29;
  void *__p;
  void *v31;
  std::__shared_weak_count_vtbl *v32;
  std::__shared_weak_count *v33;
  char *v34;
  char *v35;
  uint64_t v36;

  v34 = 0;
  v35 = 0;
  v36 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v34);
  if (v35 == v34)
  {
    v7 = 0;
    goto LABEL_10;
  }
  v4 = v35 - v34 - 8;
  if (v4 >= 8)
  {
    v8 = (v4 >> 3) + 1;
    v6 = &v34[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
    v9 = v34 + 8;
    v10 = 1;
    v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
    v12 = 1;
    do
    {
      v10 *= *(v9 - 1);
      v12 *= *v9;
      v9 += 2;
      v11 -= 2;
    }
    while (v11);
    v5 = v12 * v10;
    if (v8 == (v8 & 0x3FFFFFFFFFFFFFFELL))
      goto LABEL_9;
  }
  else
  {
    v5 = 1;
    v6 = v34;
  }
  do
  {
    v13 = *(_QWORD *)v6;
    v6 += 8;
    v5 *= v13;
  }
  while (v6 != v35);
LABEL_9:
  v7 = 4 * v5;
LABEL_10:
  v14 = (std::__shared_weak_count_vtbl *)operator new[]();
  v32 = v14;
  v15 = (std::__shared_weak_count *)operator new();
  v15->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3890;
  v15->__shared_owners_ = 0;
  v15->__shared_weak_owners_ = 0;
  v15[1].__vftable = v14;
  v33 = v15;
  v16 = *(_QWORD *)(a2 + 8);
  if (v16)
  {
    v17 = *(_QWORD *)(a2 + 16);
    memcpy(v14, (const void *)(v16 + v17), v7);
    *(_QWORD *)(a2 + 16) = v17 + v7;
  }
  else
  {
    std::istream::read();
  }
  v24 = 0;
  v25 = 0;
  v26 = 0;
  nitro::ndarray<float>::ndarray(&v27, &v32, (uint64_t)&v34, (uint64_t)&v24, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v27);
  if (__p)
  {
    v31 = __p;
    operator delete(__p);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  v21 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
}

void sub_1911F5D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v11 - 88);
  v13 = *(void **)(v11 - 72);
  if (v13)
  {
    *(_QWORD *)(v11 - 64) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::ndarray_container::load(nitro::iarchive &)::$_1>(nitro::ndarray_container::load(nitro::iarchive &)::$_1)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1911F6098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1911F6100(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::load_cast_from<signed char>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  size_t v5;
  char *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  __int128 *v19;
  _OWORD *v20;
  unint64_t v21;
  __int128 v22;
  unint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  size_t v28;
  _BYTE *v29;
  char *v30;
  char v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  __int128 v41;
  void *v42;
  void *v43;
  void *__p;
  void *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;

  v51 = 0;
  v52 = 0;
  v53 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v51);
  if (v52 == v51)
  {
    v7 = 0;
    v5 = 0;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v8 = *(_QWORD *)(a2 + 8);
    if (!v8)
      goto LABEL_5;
    goto LABEL_13;
  }
  v4 = v52 - v51 - 8;
  if (v4 >= 8)
  {
    v9 = (v4 >> 3) + 1;
    v6 = &v51[8 * (v9 & 0x3FFFFFFFFFFFFFFELL)];
    v10 = v51 + 8;
    v11 = 1;
    v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
    v13 = 1;
    do
    {
      v11 *= *(v10 - 1);
      v13 *= *v10;
      v10 += 2;
      v12 -= 2;
    }
    while (v12);
    v5 = v13 * v11;
    if (v9 == (v9 & 0x3FFFFFFFFFFFFFFELL))
      goto LABEL_10;
  }
  else
  {
    v5 = 1;
    v6 = v51;
  }
  do
  {
    v14 = *(_QWORD *)v6;
    v6 += 8;
    v5 *= v14;
  }
  while (v6 != v52);
LABEL_10:
  v48 = 0;
  v49 = 0;
  v50 = 0;
  if (v5)
  {
    if ((v5 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = operator new(v5);
    v48 = (char *)v7;
    v50 = (char *)v7 + v5;
    bzero(v7, v5);
    v49 = (char *)v7 + v5;
    v8 = *(_QWORD *)(a2 + 8);
    if (v8)
      goto LABEL_13;
LABEL_5:
    std::istream::read();
    goto LABEL_14;
  }
  v7 = 0;
  v8 = *(_QWORD *)(a2 + 8);
  if (!v8)
    goto LABEL_5;
LABEL_13:
  v15 = *(_QWORD *)(a2 + 16);
  memcpy(v7, (const void *)(v8 + v15), v5);
  *(_QWORD *)(a2 + 16) = v15 + v5;
LABEL_14:
  v16 = operator new[]();
  v46 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC38C8;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v47 = v17;
  if (!v5)
    goto LABEL_30;
  if (v5 < 8)
  {
    v18 = 0;
    goto LABEL_28;
  }
  if (v5 >= 0x20)
  {
    v18 = v5 & 0xFFFFFFFFFFFFFFE0;
    v19 = v7 + 1;
    v20 = (_OWORD *)(v16 + 16);
    v21 = v5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v22 = *v19;
      *(v20 - 1) = *(v19 - 1);
      *v20 = v22;
      v19 += 2;
      v20 += 2;
      v21 -= 32;
    }
    while (v21);
    if (v5 == v18)
      goto LABEL_30;
    if ((v5 & 0x18) == 0)
    {
LABEL_28:
      v28 = v5 - v18;
      v29 = (_BYTE *)(v16 + v18);
      v30 = (char *)v7 + v18;
      do
      {
        v31 = *v30++;
        *v29++ = v31;
        --v28;
      }
      while (v28);
      goto LABEL_30;
    }
  }
  else
  {
    v18 = 0;
  }
  v23 = v18;
  v18 = v5 & 0xFFFFFFFFFFFFFFF8;
  v24 = (uint64_t *)((char *)v7 + v23);
  v25 = (_QWORD *)(v16 + v23);
  v26 = v23 - (v5 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    v27 = *v24++;
    *v25++ = v27;
    v26 += 8;
  }
  while (v26);
  if (v5 != v18)
    goto LABEL_28;
LABEL_30:
  v38 = 0;
  v39 = 0;
  v40 = 0;
  nitro::ndarray<unsigned char>::ndarray(&v41, &v46, (uint64_t)&v51, (uint64_t)&v38, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v41);
  if (__p)
  {
    v45 = __p;
    operator delete(__p);
  }
  if (v42)
  {
    v43 = v42;
    operator delete(v42);
  }
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (v38)
  {
    v39 = v38;
    operator delete(v38);
  }
  v35 = v47;
  if (v47)
  {
    p_shared_owners = (unint64_t *)&v47->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
}

void sub_1911F6468(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911F64C4()
{
  __cxa_end_catch();
  JUMPOUT(0x1911F64DCLL);
}

void nitro::ndarray<unsigned char>::load_cast_from<short>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  int8x16_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  int8x16_t *v19;
  int8x16_t *v20;
  unint64_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  unint64_t v26;
  int16x8_t *v27;
  int8x8_t *v28;
  unint64_t v29;
  int16x8_t v30;
  unint64_t v31;
  _BYTE *v32;
  __int8 *v33;
  char v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  __int128 v44;
  void *v45;
  void *v46;
  void *__p;
  void *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  int8x16_t *v51;
  int8x16_t *v52;
  int8x16_t *v53;
  char *v54;
  char *v55;
  uint64_t v56;

  v54 = 0;
  v55 = 0;
  v56 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v54);
  if (v55 == v54)
  {
    v7 = 0;
    v5 = 0;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    goto LABEL_13;
  }
  v4 = v55 - v54 - 8;
  if (v4 < 8)
  {
    v5 = 1;
    v6 = v54;
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v13;
    }
    while (v6 != v55);
    goto LABEL_9;
  }
  v8 = (v4 >> 3) + 1;
  v6 = &v54[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v54 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v5 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v51 = 0;
  v52 = 0;
  v53 = 0;
  if (v5)
  {
    if ((v5 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (int8x16_t *)operator new(2 * v5);
    v51 = v7;
    v53 = (int8x16_t *)((char *)v7 + 2 * v5);
    bzero(v7, 2 * v5);
    v52 = v53;
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 16);
    memcpy(v7, (const void *)(v14 + v15), 2 * v5);
    *(_QWORD *)(a2 + 16) = v15 + 2 * v5;
  }
  else
  {
    std::istream::read();
  }
  v16 = operator new[]();
  v49 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC38C8;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v50 = v17;
  if (v5)
  {
    if (v5 < 8)
    {
      v18 = 0;
      goto LABEL_28;
    }
    if (v5 >= 0x20)
    {
      v18 = v5 & 0xFFFFFFFFFFFFFFE0;
      v19 = v7 + 2;
      v20 = (int8x16_t *)(v16 + 16);
      v21 = v5 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v23 = v19[-2];
        v22 = v19[-1];
        v25 = *v19;
        v24 = v19[1];
        v19 += 4;
        v20[-1] = vuzp1q_s8(v23, v22);
        *v20 = vuzp1q_s8(v25, v24);
        v20 += 2;
        v21 -= 32;
      }
      while (v21);
      if (v5 == v18)
        goto LABEL_30;
      if ((v5 & 0x18) == 0)
      {
LABEL_28:
        v31 = v5 - v18;
        v32 = (_BYTE *)(v16 + v18);
        v33 = &v7->i8[2 * v18];
        do
        {
          v34 = *v33;
          v33 += 2;
          *v32++ = v34;
          --v31;
        }
        while (v31);
        goto LABEL_30;
      }
    }
    else
    {
      v18 = 0;
    }
    v26 = v18;
    v18 = v5 & 0xFFFFFFFFFFFFFFF8;
    v27 = (int16x8_t *)((char *)v7 + 2 * v26);
    v28 = (int8x8_t *)(v16 + v26);
    v29 = v26 - (v5 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v30 = *v27++;
      *v28++ = vmovn_s16(v30);
      v29 += 8;
    }
    while (v29);
    if (v5 != v18)
      goto LABEL_28;
  }
LABEL_30:
  v41 = 0;
  v42 = 0;
  v43 = 0;
  nitro::ndarray<unsigned char>::ndarray(&v44, &v49, (uint64_t)&v54, (uint64_t)&v41, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v44);
  if (__p)
  {
    v48 = __p;
    operator delete(__p);
  }
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  v38 = v50;
  if (v50)
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
  if (v54)
  {
    v55 = v54;
    operator delete(v54);
  }
}

void sub_1911F6858(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911F68B4()
{
  __cxa_end_catch();
  JUMPOUT(0x1911F68CCLL);
}

void nitro::ndarray<unsigned char>::load_cast_from<int>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  int8x16x4_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  int8x16x4_t *v19;
  int8x16_t *v20;
  unint64_t v21;
  unint64_t v22;
  int8x16x2_t *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  int *v28;
  int v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  __int128 v39;
  void *v40;
  void *v41;
  void *__p;
  void *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  int8x16x4_t *v46;
  int8x16x4_t *v47;
  int8x16x4_t *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  int8x16x2_t v52;
  int8x16x4_t v53;

  v49 = 0;
  v50 = 0;
  v51 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v49);
  if (v50 == v49)
  {
    v7 = 0;
    v5 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    goto LABEL_13;
  }
  v4 = v50 - v49 - 8;
  if (v4 < 8)
  {
    v5 = 1;
    v6 = v49;
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v13;
    }
    while (v6 != v50);
    goto LABEL_9;
  }
  v8 = (v4 >> 3) + 1;
  v6 = &v49[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v49 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v5 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v46 = 0;
  v47 = 0;
  v48 = 0;
  if (v5)
  {
    if (v5 >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (int8x16x4_t *)operator new(4 * v5);
    v46 = v7;
    v48 = (int8x16x4_t *)((char *)v7 + 4 * v5);
    bzero(v7, 4 * v5);
    v47 = v48;
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 16);
    memcpy(v7, (const void *)(v14 + v15), 4 * v5);
    *(_QWORD *)(a2 + 16) = v15 + 4 * v5;
  }
  else
  {
    std::istream::read();
  }
  v16 = operator new[]();
  v44 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC38C8;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v45 = v17;
  if (v5)
  {
    if (v5 < 8)
    {
      v18 = 0;
      goto LABEL_28;
    }
    if (v5 >= 0x20)
    {
      v18 = v5 & 0xFFFFFFFFFFFFFFE0;
      v19 = v7 + 1;
      v20 = (int8x16_t *)(v16 + 16);
      v21 = v5 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v53 = *v19;
        v20[-1] = vqtbl4q_s8(v19[-1], (int8x16_t)xmmword_191A741D0);
        *v20 = vqtbl4q_s8(v53, (int8x16_t)xmmword_191A741D0);
        v19 += 2;
        v20 += 2;
        v21 -= 32;
      }
      while (v21);
      if (v5 == v18)
        goto LABEL_30;
      if ((v5 & 0x18) == 0)
      {
LABEL_28:
        v26 = v5 - v18;
        v27 = (_BYTE *)(v16 + v18);
        v28 = (int *)v7 + v18;
        do
        {
          v29 = *v28++;
          *v27++ = v29;
          --v26;
        }
        while (v26);
        goto LABEL_30;
      }
    }
    else
    {
      v18 = 0;
    }
    v22 = v18;
    v18 = v5 & 0xFFFFFFFFFFFFFFF8;
    v23 = (int8x16x2_t *)((char *)v7 + 4 * v22);
    v24 = (_QWORD *)(v16 + v22);
    v25 = v22 - (v5 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v52 = *v23++;
      *v24++ = vqtbl2q_s8(v52, (int8x16_t)xmmword_191A741E0).u64[0];
      v25 += 8;
    }
    while (v25);
    if (v5 != v18)
      goto LABEL_28;
  }
LABEL_30:
  v36 = 0;
  v37 = 0;
  v38 = 0;
  nitro::ndarray<unsigned char>::ndarray(&v39, &v44, (uint64_t)&v49, (uint64_t)&v36, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v39);
  if (__p)
  {
    v43 = __p;
    operator delete(__p);
  }
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
  v33 = v45;
  if (v45)
  {
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v46)
  {
    v47 = v46;
    operator delete(v46);
  }
  if (v49)
  {
    v50 = v49;
    operator delete(v49);
  }
}

void sub_1911F6C68(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911F6CC4()
{
  __cxa_end_catch();
  JUMPOUT(0x1911F6CDCLL);
}

void nitro::ndarray<unsigned char>::load_cast_from<long long>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  int8x16x4_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  int8x16x4_t *v19;
  _OWORD *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  int8x16x4_t *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  uint64_t *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  __int128 v41;
  void *v42;
  void *v43;
  void *__p;
  void *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  int8x16x4_t *v48;
  int8x16x4_t *v49;
  int8x16x4_t *v50;
  char *v51;
  char *v52;
  uint64_t v53;

  v51 = 0;
  v52 = 0;
  v53 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v51);
  if (v52 == v51)
  {
    v7 = 0;
    v5 = 0;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    goto LABEL_13;
  }
  v4 = v52 - v51 - 8;
  if (v4 < 8)
  {
    v5 = 1;
    v6 = v51;
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v13;
    }
    while (v6 != v52);
    goto LABEL_9;
  }
  v8 = (v4 >> 3) + 1;
  v6 = &v51[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v51 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v5 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v48 = 0;
  v49 = 0;
  v50 = 0;
  if (v5)
  {
    if (v5 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (int8x16x4_t *)operator new(8 * v5);
    v48 = v7;
    v50 = (int8x16x4_t *)((char *)v7 + 8 * v5);
    bzero(v7, 8 * v5);
    v49 = v50;
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 16);
    memcpy(v7, (const void *)(v14 + v15), 8 * v5);
    *(_QWORD *)(a2 + 16) = v15 + 8 * v5;
  }
  else
  {
    std::istream::read();
  }
  v16 = operator new[]();
  v46 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC38C8;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v47 = v17;
  if (v5)
  {
    if (v5 < 8)
    {
      v18 = 0;
      goto LABEL_28;
    }
    if (v5 >= 0x20)
    {
      v18 = v5 & 0xFFFFFFFFFFFFFFE0;
      v19 = v7 + 2;
      v20 = (_OWORD *)(v16 + 16);
      v21 = v5 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        *(_QWORD *)&v22 = vqtbl4q_s8(v19[-2], (int8x16_t)xmmword_191A7F960).u64[0];
        *(_QWORD *)&v23 = vqtbl4q_s8(*v19, (int8x16_t)xmmword_191A7F960).u64[0];
        *((_QWORD *)&v22 + 1) = vqtbl4q_s8(v19[-1], (int8x16_t)xmmword_191A7F960).u64[0];
        *((_QWORD *)&v23 + 1) = vqtbl4q_s8(v19[1], (int8x16_t)xmmword_191A7F960).u64[0];
        *(v20 - 1) = v22;
        *v20 = v23;
        v19 += 4;
        v20 += 2;
        v21 -= 32;
      }
      while (v21);
      if (v5 == v18)
        goto LABEL_30;
      if ((v5 & 0x18) == 0)
      {
LABEL_28:
        v28 = v5 - v18;
        v29 = (_BYTE *)(v16 + v18);
        v30 = (uint64_t *)v7 + v18;
        do
        {
          v31 = *v30++;
          *v29++ = v31;
          --v28;
        }
        while (v28);
        goto LABEL_30;
      }
    }
    else
    {
      v18 = 0;
    }
    v24 = v18;
    v18 = v5 & 0xFFFFFFFFFFFFFFF8;
    v25 = (int8x16x4_t *)((char *)v7 + 8 * v24);
    v26 = (_QWORD *)(v16 + v24);
    v27 = v24 - (v5 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      *v26++ = vqtbl4q_s8(*v25++, (int8x16_t)xmmword_191A7F970).u64[0];
      v27 += 8;
    }
    while (v27);
    if (v5 != v18)
      goto LABEL_28;
  }
LABEL_30:
  v38 = 0;
  v39 = 0;
  v40 = 0;
  nitro::ndarray<unsigned char>::ndarray(&v41, &v46, (uint64_t)&v51, (uint64_t)&v38, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v41);
  if (__p)
  {
    v45 = __p;
    operator delete(__p);
  }
  if (v42)
  {
    v43 = v42;
    operator delete(v42);
  }
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (v38)
  {
    v39 = v38;
    operator delete(v38);
  }
  v35 = v47;
  if (v47)
  {
    p_shared_owners = (unint64_t *)&v47->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
}

void sub_1911F70A0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911F70FC()
{
  __cxa_end_catch();
  JUMPOUT(0x1911F7114);
}

void nitro::ndarray<unsigned char>::load_cast_from<unsigned char>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  size_t v5;
  char *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  __int128 *v19;
  _OWORD *v20;
  unint64_t v21;
  __int128 v22;
  unint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  size_t v28;
  _BYTE *v29;
  char *v30;
  char v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  __int128 v41;
  void *v42;
  void *v43;
  void *__p;
  void *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;

  v51 = 0;
  v52 = 0;
  v53 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v51);
  if (v52 == v51)
  {
    v7 = 0;
    v5 = 0;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v8 = *(_QWORD *)(a2 + 8);
    if (!v8)
      goto LABEL_5;
    goto LABEL_13;
  }
  v4 = v52 - v51 - 8;
  if (v4 >= 8)
  {
    v9 = (v4 >> 3) + 1;
    v6 = &v51[8 * (v9 & 0x3FFFFFFFFFFFFFFELL)];
    v10 = v51 + 8;
    v11 = 1;
    v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
    v13 = 1;
    do
    {
      v11 *= *(v10 - 1);
      v13 *= *v10;
      v10 += 2;
      v12 -= 2;
    }
    while (v12);
    v5 = v13 * v11;
    if (v9 == (v9 & 0x3FFFFFFFFFFFFFFELL))
      goto LABEL_10;
  }
  else
  {
    v5 = 1;
    v6 = v51;
  }
  do
  {
    v14 = *(_QWORD *)v6;
    v6 += 8;
    v5 *= v14;
  }
  while (v6 != v52);
LABEL_10:
  v48 = 0;
  v49 = 0;
  v50 = 0;
  if (v5)
  {
    if ((v5 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = operator new(v5);
    v48 = (char *)v7;
    v50 = (char *)v7 + v5;
    bzero(v7, v5);
    v49 = (char *)v7 + v5;
    v8 = *(_QWORD *)(a2 + 8);
    if (v8)
      goto LABEL_13;
LABEL_5:
    std::istream::read();
    goto LABEL_14;
  }
  v7 = 0;
  v8 = *(_QWORD *)(a2 + 8);
  if (!v8)
    goto LABEL_5;
LABEL_13:
  v15 = *(_QWORD *)(a2 + 16);
  memcpy(v7, (const void *)(v8 + v15), v5);
  *(_QWORD *)(a2 + 16) = v15 + v5;
LABEL_14:
  v16 = operator new[]();
  v46 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC38C8;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v47 = v17;
  if (!v5)
    goto LABEL_30;
  if (v5 < 8)
  {
    v18 = 0;
    goto LABEL_28;
  }
  if (v5 >= 0x20)
  {
    v18 = v5 & 0xFFFFFFFFFFFFFFE0;
    v19 = v7 + 1;
    v20 = (_OWORD *)(v16 + 16);
    v21 = v5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v22 = *v19;
      *(v20 - 1) = *(v19 - 1);
      *v20 = v22;
      v19 += 2;
      v20 += 2;
      v21 -= 32;
    }
    while (v21);
    if (v5 == v18)
      goto LABEL_30;
    if ((v5 & 0x18) == 0)
    {
LABEL_28:
      v28 = v5 - v18;
      v29 = (_BYTE *)(v16 + v18);
      v30 = (char *)v7 + v18;
      do
      {
        v31 = *v30++;
        *v29++ = v31;
        --v28;
      }
      while (v28);
      goto LABEL_30;
    }
  }
  else
  {
    v18 = 0;
  }
  v23 = v18;
  v18 = v5 & 0xFFFFFFFFFFFFFFF8;
  v24 = (uint64_t *)((char *)v7 + v23);
  v25 = (_QWORD *)(v16 + v23);
  v26 = v23 - (v5 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    v27 = *v24++;
    *v25++ = v27;
    v26 += 8;
  }
  while (v26);
  if (v5 != v18)
    goto LABEL_28;
LABEL_30:
  v38 = 0;
  v39 = 0;
  v40 = 0;
  nitro::ndarray<unsigned char>::ndarray(&v41, &v46, (uint64_t)&v51, (uint64_t)&v38, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v41);
  if (__p)
  {
    v45 = __p;
    operator delete(__p);
  }
  if (v42)
  {
    v43 = v42;
    operator delete(v42);
  }
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (v38)
  {
    v39 = v38;
    operator delete(v38);
  }
  v35 = v47;
  if (v47)
  {
    p_shared_owners = (unint64_t *)&v47->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
}

void sub_1911F7484(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911F74E0()
{
  __cxa_end_catch();
  JUMPOUT(0x1911F74F8);
}

void nitro::ndarray<unsigned char>::load_cast_from<unsigned short>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  int8x16_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  int8x16_t *v19;
  int8x16_t *v20;
  unint64_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  unint64_t v26;
  int16x8_t *v27;
  int8x8_t *v28;
  unint64_t v29;
  int16x8_t v30;
  unint64_t v31;
  _BYTE *v32;
  __int8 *v33;
  char v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  __int128 v44;
  void *v45;
  void *v46;
  void *__p;
  void *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  int8x16_t *v51;
  int8x16_t *v52;
  int8x16_t *v53;
  char *v54;
  char *v55;
  uint64_t v56;

  v54 = 0;
  v55 = 0;
  v56 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v54);
  if (v55 == v54)
  {
    v7 = 0;
    v5 = 0;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    goto LABEL_13;
  }
  v4 = v55 - v54 - 8;
  if (v4 < 8)
  {
    v5 = 1;
    v6 = v54;
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v13;
    }
    while (v6 != v55);
    goto LABEL_9;
  }
  v8 = (v4 >> 3) + 1;
  v6 = &v54[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v54 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v5 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v51 = 0;
  v52 = 0;
  v53 = 0;
  if (v5)
  {
    if ((v5 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (int8x16_t *)operator new(2 * v5);
    v51 = v7;
    v53 = (int8x16_t *)((char *)v7 + 2 * v5);
    bzero(v7, 2 * v5);
    v52 = v53;
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 16);
    memcpy(v7, (const void *)(v14 + v15), 2 * v5);
    *(_QWORD *)(a2 + 16) = v15 + 2 * v5;
  }
  else
  {
    std::istream::read();
  }
  v16 = operator new[]();
  v49 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC38C8;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v50 = v17;
  if (v5)
  {
    if (v5 < 8)
    {
      v18 = 0;
      goto LABEL_28;
    }
    if (v5 >= 0x20)
    {
      v18 = v5 & 0xFFFFFFFFFFFFFFE0;
      v19 = v7 + 2;
      v20 = (int8x16_t *)(v16 + 16);
      v21 = v5 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v23 = v19[-2];
        v22 = v19[-1];
        v25 = *v19;
        v24 = v19[1];
        v19 += 4;
        v20[-1] = vuzp1q_s8(v23, v22);
        *v20 = vuzp1q_s8(v25, v24);
        v20 += 2;
        v21 -= 32;
      }
      while (v21);
      if (v5 == v18)
        goto LABEL_30;
      if ((v5 & 0x18) == 0)
      {
LABEL_28:
        v31 = v5 - v18;
        v32 = (_BYTE *)(v16 + v18);
        v33 = &v7->i8[2 * v18];
        do
        {
          v34 = *v33;
          v33 += 2;
          *v32++ = v34;
          --v31;
        }
        while (v31);
        goto LABEL_30;
      }
    }
    else
    {
      v18 = 0;
    }
    v26 = v18;
    v18 = v5 & 0xFFFFFFFFFFFFFFF8;
    v27 = (int16x8_t *)((char *)v7 + 2 * v26);
    v28 = (int8x8_t *)(v16 + v26);
    v29 = v26 - (v5 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v30 = *v27++;
      *v28++ = vmovn_s16(v30);
      v29 += 8;
    }
    while (v29);
    if (v5 != v18)
      goto LABEL_28;
  }
LABEL_30:
  v41 = 0;
  v42 = 0;
  v43 = 0;
  nitro::ndarray<unsigned char>::ndarray(&v44, &v49, (uint64_t)&v54, (uint64_t)&v41, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v44);
  if (__p)
  {
    v48 = __p;
    operator delete(__p);
  }
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  v38 = v50;
  if (v50)
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
  if (v54)
  {
    v55 = v54;
    operator delete(v54);
  }
}

void sub_1911F7874(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911F78D0()
{
  __cxa_end_catch();
  JUMPOUT(0x1911F78E8);
}

void nitro::ndarray<unsigned char>::load_cast_from<unsigned int>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  int8x16x4_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  int8x16x4_t *v19;
  int8x16_t *v20;
  unint64_t v21;
  unint64_t v22;
  int8x16x2_t *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  int *v28;
  int v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  __int128 v39;
  void *v40;
  void *v41;
  void *__p;
  void *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  int8x16x4_t *v46;
  int8x16x4_t *v47;
  int8x16x4_t *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  int8x16x2_t v52;
  int8x16x4_t v53;

  v49 = 0;
  v50 = 0;
  v51 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v49);
  if (v50 == v49)
  {
    v7 = 0;
    v5 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    goto LABEL_13;
  }
  v4 = v50 - v49 - 8;
  if (v4 < 8)
  {
    v5 = 1;
    v6 = v49;
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v13;
    }
    while (v6 != v50);
    goto LABEL_9;
  }
  v8 = (v4 >> 3) + 1;
  v6 = &v49[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v49 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v5 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v46 = 0;
  v47 = 0;
  v48 = 0;
  if (v5)
  {
    if (v5 >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (int8x16x4_t *)operator new(4 * v5);
    v46 = v7;
    v48 = (int8x16x4_t *)((char *)v7 + 4 * v5);
    bzero(v7, 4 * v5);
    v47 = v48;
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 16);
    memcpy(v7, (const void *)(v14 + v15), 4 * v5);
    *(_QWORD *)(a2 + 16) = v15 + 4 * v5;
  }
  else
  {
    std::istream::read();
  }
  v16 = operator new[]();
  v44 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC38C8;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v45 = v17;
  if (v5)
  {
    if (v5 < 8)
    {
      v18 = 0;
      goto LABEL_28;
    }
    if (v5 >= 0x20)
    {
      v18 = v5 & 0xFFFFFFFFFFFFFFE0;
      v19 = v7 + 1;
      v20 = (int8x16_t *)(v16 + 16);
      v21 = v5 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v53 = *v19;
        v20[-1] = vqtbl4q_s8(v19[-1], (int8x16_t)xmmword_191A741D0);
        *v20 = vqtbl4q_s8(v53, (int8x16_t)xmmword_191A741D0);
        v19 += 2;
        v20 += 2;
        v21 -= 32;
      }
      while (v21);
      if (v5 == v18)
        goto LABEL_30;
      if ((v5 & 0x18) == 0)
      {
LABEL_28:
        v26 = v5 - v18;
        v27 = (_BYTE *)(v16 + v18);
        v28 = (int *)v7 + v18;
        do
        {
          v29 = *v28++;
          *v27++ = v29;
          --v26;
        }
        while (v26);
        goto LABEL_30;
      }
    }
    else
    {
      v18 = 0;
    }
    v22 = v18;
    v18 = v5 & 0xFFFFFFFFFFFFFFF8;
    v23 = (int8x16x2_t *)((char *)v7 + 4 * v22);
    v24 = (_QWORD *)(v16 + v22);
    v25 = v22 - (v5 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v52 = *v23++;
      *v24++ = vqtbl2q_s8(v52, (int8x16_t)xmmword_191A741E0).u64[0];
      v25 += 8;
    }
    while (v25);
    if (v5 != v18)
      goto LABEL_28;
  }
LABEL_30:
  v36 = 0;
  v37 = 0;
  v38 = 0;
  nitro::ndarray<unsigned char>::ndarray(&v39, &v44, (uint64_t)&v49, (uint64_t)&v36, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v39);
  if (__p)
  {
    v43 = __p;
    operator delete(__p);
  }
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
  v33 = v45;
  if (v45)
  {
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v46)
  {
    v47 = v46;
    operator delete(v46);
  }
  if (v49)
  {
    v50 = v49;
    operator delete(v49);
  }
}

void sub_1911F7C84(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911F7CE0()
{
  __cxa_end_catch();
  JUMPOUT(0x1911F7CF8);
}

void nitro::ndarray<unsigned char>::load_cast_from<unsigned long long>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  int8x16x4_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  int8x16x4_t *v19;
  _OWORD *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  int8x16x4_t *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  uint64_t *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  __int128 v41;
  void *v42;
  void *v43;
  void *__p;
  void *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  int8x16x4_t *v48;
  int8x16x4_t *v49;
  int8x16x4_t *v50;
  char *v51;
  char *v52;
  uint64_t v53;

  v51 = 0;
  v52 = 0;
  v53 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v51);
  if (v52 == v51)
  {
    v7 = 0;
    v5 = 0;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    goto LABEL_13;
  }
  v4 = v52 - v51 - 8;
  if (v4 < 8)
  {
    v5 = 1;
    v6 = v51;
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v13;
    }
    while (v6 != v52);
    goto LABEL_9;
  }
  v8 = (v4 >> 3) + 1;
  v6 = &v51[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v51 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v5 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v48 = 0;
  v49 = 0;
  v50 = 0;
  if (v5)
  {
    if (v5 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (int8x16x4_t *)operator new(8 * v5);
    v48 = v7;
    v50 = (int8x16x4_t *)((char *)v7 + 8 * v5);
    bzero(v7, 8 * v5);
    v49 = v50;
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 16);
    memcpy(v7, (const void *)(v14 + v15), 8 * v5);
    *(_QWORD *)(a2 + 16) = v15 + 8 * v5;
  }
  else
  {
    std::istream::read();
  }
  v16 = operator new[]();
  v46 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC38C8;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v47 = v17;
  if (v5)
  {
    if (v5 < 8)
    {
      v18 = 0;
      goto LABEL_28;
    }
    if (v5 >= 0x20)
    {
      v18 = v5 & 0xFFFFFFFFFFFFFFE0;
      v19 = v7 + 2;
      v20 = (_OWORD *)(v16 + 16);
      v21 = v5 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        *(_QWORD *)&v22 = vqtbl4q_s8(v19[-2], (int8x16_t)xmmword_191A7F960).u64[0];
        *(_QWORD *)&v23 = vqtbl4q_s8(*v19, (int8x16_t)xmmword_191A7F960).u64[0];
        *((_QWORD *)&v22 + 1) = vqtbl4q_s8(v19[-1], (int8x16_t)xmmword_191A7F960).u64[0];
        *((_QWORD *)&v23 + 1) = vqtbl4q_s8(v19[1], (int8x16_t)xmmword_191A7F960).u64[0];
        *(v20 - 1) = v22;
        *v20 = v23;
        v19 += 4;
        v20 += 2;
        v21 -= 32;
      }
      while (v21);
      if (v5 == v18)
        goto LABEL_30;
      if ((v5 & 0x18) == 0)
      {
LABEL_28:
        v28 = v5 - v18;
        v29 = (_BYTE *)(v16 + v18);
        v30 = (uint64_t *)v7 + v18;
        do
        {
          v31 = *v30++;
          *v29++ = v31;
          --v28;
        }
        while (v28);
        goto LABEL_30;
      }
    }
    else
    {
      v18 = 0;
    }
    v24 = v18;
    v18 = v5 & 0xFFFFFFFFFFFFFFF8;
    v25 = (int8x16x4_t *)((char *)v7 + 8 * v24);
    v26 = (_QWORD *)(v16 + v24);
    v27 = v24 - (v5 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      *v26++ = vqtbl4q_s8(*v25++, (int8x16_t)xmmword_191A7F970).u64[0];
      v27 += 8;
    }
    while (v27);
    if (v5 != v18)
      goto LABEL_28;
  }
LABEL_30:
  v38 = 0;
  v39 = 0;
  v40 = 0;
  nitro::ndarray<unsigned char>::ndarray(&v41, &v46, (uint64_t)&v51, (uint64_t)&v38, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v41);
  if (__p)
  {
    v45 = __p;
    operator delete(__p);
  }
  if (v42)
  {
    v43 = v42;
    operator delete(v42);
  }
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (v38)
  {
    v39 = v38;
    operator delete(v38);
  }
  v35 = v47;
  if (v47)
  {
    p_shared_owners = (unint64_t *)&v47->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
}

void sub_1911F80BC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911F8118()
{
  __cxa_end_catch();
  JUMPOUT(0x1911F8130);
}

void nitro::ndarray<unsigned char>::load_cast_from<half>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  float16x4_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  float16x4_t *v19;
  uint64_t v20;
  unint64_t v21;
  int16x8_t v22;
  int16x8_t v23;
  unint64_t v24;
  _BYTE *v25;
  __int16 *v26;
  __int16 v27;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  __int128 v43;
  void *v44;
  void *v45;
  void *__p;
  void *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  float16x4_t *v50;
  float16x4_t *v51;
  float16x4_t *v52;
  char *v53;
  char *v54;
  uint64_t v55;

  v53 = 0;
  v54 = 0;
  v55 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v53);
  if (v54 == v53)
  {
    v7 = 0;
    v5 = 0;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    goto LABEL_13;
  }
  v4 = v54 - v53 - 8;
  if (v4 < 8)
  {
    v5 = 1;
    v6 = v53;
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v13;
    }
    while (v6 != v54);
    goto LABEL_9;
  }
  v8 = (v4 >> 3) + 1;
  v6 = &v53[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v53 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v5 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v50 = 0;
  v51 = 0;
  v52 = 0;
  if (v5)
  {
    if ((v5 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (float16x4_t *)operator new(2 * v5);
    v50 = v7;
    v52 = (float16x4_t *)((char *)v7 + 2 * v5);
    bzero(v7, 2 * v5);
    v51 = v52;
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 16);
    memcpy(v7, (const void *)(v14 + v15), 2 * v5);
    *(_QWORD *)(a2 + 16) = v15 + 2 * v5;
  }
  else
  {
    std::istream::read();
  }
  v16 = operator new[]();
  v48 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC38C8;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v49 = v17;
  if (v5)
  {
    if (v5 < 8)
    {
      v18 = 0;
LABEL_22:
      v24 = v5 - v18;
      v25 = (_BYTE *)(v16 + v18);
      v26 = (__int16 *)v7 + v18;
      do
      {
        v27 = *v26++;
        _H0 = v27;
        __asm { FCVT            S0, H0 }
        *v25++ = (int)_S0;
        --v24;
      }
      while (v24);
      goto LABEL_24;
    }
    v18 = v5 & 0xFFFFFFFFFFFFFFF8;
    v19 = v7 + 1;
    v20 = v16 + 4;
    v21 = v5 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v22 = (int16x8_t)vcvtq_s32_f32(vcvtq_f32_f16(v19[-1]));
      *(int16x4_t *)v22.i8 = vmovn_s32((int32x4_t)v22);
      v23 = (int16x8_t)vcvtq_s32_f32(vcvtq_f32_f16(*v19));
      *(int16x4_t *)v23.i8 = vmovn_s32((int32x4_t)v23);
      v22.i32[0] = vmovn_s16(v22).u32[0];
      v22.i32[1] = vmovn_s16(v23).u32[0];
      *(_QWORD *)(v20 - 4) = v22.i64[0];
      v19 += 2;
      v20 += 8;
      v21 -= 8;
    }
    while (v21);
    if (v5 != v18)
      goto LABEL_22;
  }
LABEL_24:
  v40 = 0;
  v41 = 0;
  v42 = 0;
  nitro::ndarray<unsigned char>::ndarray(&v43, &v48, (uint64_t)&v53, (uint64_t)&v40, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v43);
  if (__p)
  {
    v47 = __p;
    operator delete(__p);
  }
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  v34 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
  if (*((_QWORD *)&v43 + 1))
  {
    v35 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
  v37 = v49;
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
  if (v53)
  {
    v54 = v53;
    operator delete(v53);
  }
}

void sub_1911F8488(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911F84E4()
{
  __cxa_end_catch();
  JUMPOUT(0x1911F84FCLL);
}

void nitro::ndarray<unsigned char>::load_cast_from<float>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  float32x4_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  float32x4_t *v19;
  int8x16_t *v20;
  unint64_t v21;
  int8x16_t v22;
  uint32x4_t v23;
  unint64_t v24;
  float32x4_t *v25;
  _QWORD *v26;
  unint64_t v27;
  float32x4_t v28;
  float32x4_t v29;
  unint64_t v30;
  _BYTE *v31;
  float *v32;
  float v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  __int128 v43;
  void *v44;
  void *v45;
  void *__p;
  void *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  float32x4_t *v50;
  float32x4_t *v51;
  __int8 *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  int8x16x2_t v56;
  int8x16x4_t v57;

  v53 = 0;
  v54 = 0;
  v55 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v53);
  if (v54 == v53)
  {
    v7 = 0;
    v5 = 0;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    goto LABEL_13;
  }
  v4 = v54 - v53 - 8;
  if (v4 < 8)
  {
    v5 = 1;
    v6 = v53;
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v13;
    }
    while (v6 != v54);
    goto LABEL_9;
  }
  v8 = (v4 >> 3) + 1;
  v6 = &v53[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v53 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v5 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v50 = 0;
  v51 = 0;
  v52 = 0;
  if (v5)
  {
    if (v5 >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (float32x4_t *)operator new(4 * v5);
    v50 = v7;
    v52 = &v7->i8[4 * v5];
    bzero(v7, 4 * v5);
    v51 = (float32x4_t *)v52;
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 16);
    memcpy(v7, (const void *)(v14 + v15), 4 * v5);
    *(_QWORD *)(a2 + 16) = v15 + 4 * v5;
  }
  else
  {
    std::istream::read();
  }
  v16 = operator new[]();
  v48 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC38C8;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v49 = v17;
  if (v5)
  {
    if (v5 < 8)
    {
      v18 = 0;
      goto LABEL_28;
    }
    if (v5 >= 0x20)
    {
      v18 = v5 & 0xFFFFFFFFFFFFFFE0;
      v19 = v7 + 4;
      v20 = (int8x16_t *)(v16 + 16);
      v21 = v5 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v57.val[3] = (int8x16_t)vcvtq_u32_f32(v19[-1]);
        v57.val[2] = (int8x16_t)vcvtq_u32_f32(v19[-2]);
        v57.val[1] = (int8x16_t)vcvtq_u32_f32(v19[-3]);
        v57.val[0] = (int8x16_t)vcvtq_u32_f32(v19[-4]);
        v22 = vqtbl4q_s8(v57, (int8x16_t)xmmword_191A741D0);
        v57.val[2] = (int8x16_t)vcvtq_u32_f32(v19[3]);
        v57.val[1] = (int8x16_t)vcvtq_u32_f32(v19[2]);
        v57.val[0] = (int8x16_t)vcvtq_u32_f32(v19[1]);
        v23 = vcvtq_u32_f32(*v19);
        v20[-1] = v22;
        *v20 = vqtbl4q_s8(v57, (int8x16_t)xmmword_191A741D0);
        v19 += 8;
        v20 += 2;
        v21 -= 32;
      }
      while (v21);
      if (v5 == v18)
        goto LABEL_30;
      if ((v5 & 0x18) == 0)
      {
LABEL_28:
        v30 = v5 - v18;
        v31 = (_BYTE *)(v16 + v18);
        v32 = &v7->f32[v18];
        do
        {
          v33 = *v32++;
          *v31++ = (int)v33;
          --v30;
        }
        while (v30);
        goto LABEL_30;
      }
    }
    else
    {
      v18 = 0;
    }
    v24 = v18;
    v18 = v5 & 0xFFFFFFFFFFFFFFF8;
    v25 = (float32x4_t *)((char *)v7 + 4 * v24);
    v26 = (_QWORD *)(v16 + v24);
    v27 = v24 - (v5 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v28 = *v25;
      v29 = v25[1];
      v25 += 2;
      v56.val[1] = (int8x16_t)vcvtq_u32_f32(v29);
      v56.val[0] = (int8x16_t)vcvtq_u32_f32(v28);
      *v26++ = vqtbl2q_s8(v56, (int8x16_t)xmmword_191A741E0).u64[0];
      v27 += 8;
    }
    while (v27);
    if (v5 != v18)
      goto LABEL_28;
  }
LABEL_30:
  v40 = 0;
  v41 = 0;
  v42 = 0;
  nitro::ndarray<unsigned char>::ndarray(&v43, &v48, (uint64_t)&v53, (uint64_t)&v40, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v43);
  if (__p)
  {
    v47 = __p;
    operator delete(__p);
  }
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  v34 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
  if (*((_QWORD *)&v43 + 1))
  {
    v35 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
  v37 = v49;
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
  if (v53)
  {
    v54 = v53;
    operator delete(v53);
  }
}

void sub_1911F88C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911F8920()
{
  __cxa_end_catch();
  JUMPOUT(0x1911F8938);
}

void nitro::ndarray<unsigned char>::load_cast_from<double>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  float64x2_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  unint64_t v19;
  float64x2_t *v20;
  int8x8_t *v21;
  unint64_t v22;
  unint64_t v23;
  int8x16_t *v24;
  float64x2_t *v25;
  int8x16_t v26;
  int8x16_t v27;
  unint64_t v28;
  _BYTE *v29;
  double *v30;
  double v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  __int128 v41;
  void *v42;
  void *v43;
  void *__p;
  void *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  float64x2_t *v48;
  float64x2_t *v49;
  float64x2_t *v50;
  char *v51;
  char *v52;
  uint64_t v53;

  v51 = 0;
  v52 = 0;
  v53 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v51);
  if (v52 == v51)
  {
    v7 = 0;
    v5 = 0;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    goto LABEL_13;
  }
  v4 = v52 - v51 - 8;
  if (v4 < 8)
  {
    v5 = 1;
    v6 = v51;
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v13;
    }
    while (v6 != v52);
    goto LABEL_9;
  }
  v8 = (v4 >> 3) + 1;
  v6 = &v51[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v51 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v5 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v48 = 0;
  v49 = 0;
  v50 = 0;
  if (v5)
  {
    if (v5 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (float64x2_t *)operator new(8 * v5);
    v48 = v7;
    v50 = (float64x2_t *)((char *)v7 + 8 * v5);
    bzero(v7, 8 * v5);
    v49 = v50;
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 16);
    memcpy(v7, (const void *)(v14 + v15), 8 * v5);
    *(_QWORD *)(a2 + 16) = v15 + 8 * v5;
  }
  else
  {
    std::istream::read();
  }
  v16 = operator new[]();
  v46 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC38C8;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v47 = v17;
  if (v5)
  {
    if (v5 < 8)
    {
      v18 = 0;
      goto LABEL_29;
    }
    if (v5 >= 0x10)
    {
      v18 = v5 & 0xFFFFFFFFFFFFFFF0;
      v23 = v5 & 0xFFFFFFFFFFFFFFF0;
      v24 = (int8x16_t *)v16;
      v25 = v7;
      do
      {
        *(int16x4_t *)v26.i8 = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(v25[4])), (int16x4_t)vmovn_s64(vcvtq_s64_f64(v25[5])));
        v26.u64[1] = (unint64_t)vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(v25[6])), (int16x4_t)vmovn_s64(vcvtq_s64_f64(v25[7])));
        *(int16x4_t *)v27.i8 = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(*v25)), (int16x4_t)vmovn_s64(vcvtq_s64_f64(v25[1])));
        v27.u64[1] = (unint64_t)vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(v25[2])), (int16x4_t)vmovn_s64(vcvtq_s64_f64(v25[3])));
        *v24++ = vuzp1q_s8(v27, v26);
        v25 += 8;
        v23 -= 16;
      }
      while (v23);
      if (v5 == v18)
        goto LABEL_31;
      if ((v5 & 8) == 0)
      {
LABEL_29:
        v28 = v5 - v18;
        v29 = (_BYTE *)(v16 + v18);
        v30 = &v7->f64[v18];
        do
        {
          v31 = *v30++;
          *v29++ = (int)v31;
          --v28;
        }
        while (v28);
        goto LABEL_31;
      }
    }
    else
    {
      v18 = 0;
    }
    v19 = v18;
    v18 = v5 & 0xFFFFFFFFFFFFFFF8;
    v20 = (float64x2_t *)((char *)v7 + 8 * v19);
    v21 = (int8x8_t *)(v16 + v19);
    v22 = v19 - (v5 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      *v21++ = vuzp1_s8((int8x8_t)vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(*v20)), (int16x4_t)vmovn_s64(vcvtq_s64_f64(v20[1]))), (int8x8_t)vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(v20[2])), (int16x4_t)vmovn_s64(vcvtq_s64_f64(v20[3]))));
      v20 += 4;
      v22 += 8;
    }
    while (v22);
    if (v5 != v18)
      goto LABEL_29;
  }
LABEL_31:
  v38 = 0;
  v39 = 0;
  v40 = 0;
  nitro::ndarray<unsigned char>::ndarray(&v41, &v46, (uint64_t)&v51, (uint64_t)&v38, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v41);
  if (__p)
  {
    v45 = __p;
    operator delete(__p);
  }
  if (v42)
  {
    v43 = v42;
    operator delete(v42);
  }
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (v38)
  {
    v39 = v38;
    operator delete(v38);
  }
  v35 = v47;
  if (v47)
  {
    p_shared_owners = (unint64_t *)&v47->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
}

void sub_1911F8D44(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911F8DA0()
{
  __cxa_end_catch();
  JUMPOUT(0x1911F8DB8);
}

void nitro::ndarray<int>::load_cast_from<signed char>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  size_t v5;
  char *v6;
  int8x8_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  int8x8_t *v19;
  int32x4_t *v20;
  unint64_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  unint64_t v28;
  int8x8_t *v29;
  int32x4_t *v30;
  unint64_t v31;
  int8x8_t v32;
  int16x8_t v33;
  size_t v34;
  _DWORD *v35;
  char *v36;
  int v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  __int128 v47;
  void *v48;
  void *v49;
  void *__p;
  void *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  int8x8_t *v54;
  int8x8_t *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;

  v57 = 0;
  v58 = 0;
  v59 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v57);
  if (v58 == v57)
  {
    v7 = 0;
    v5 = 0;
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v8 = *(_QWORD *)(a2 + 8);
    if (!v8)
      goto LABEL_5;
    goto LABEL_13;
  }
  v4 = v58 - v57 - 8;
  if (v4 >= 8)
  {
    v9 = (v4 >> 3) + 1;
    v6 = &v57[8 * (v9 & 0x3FFFFFFFFFFFFFFELL)];
    v10 = v57 + 8;
    v11 = 1;
    v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
    v13 = 1;
    do
    {
      v11 *= *(v10 - 1);
      v13 *= *v10;
      v10 += 2;
      v12 -= 2;
    }
    while (v12);
    v5 = v13 * v11;
    if (v9 == (v9 & 0x3FFFFFFFFFFFFFFELL))
      goto LABEL_10;
  }
  else
  {
    v5 = 1;
    v6 = v57;
  }
  do
  {
    v14 = *(_QWORD *)v6;
    v6 += 8;
    v5 *= v14;
  }
  while (v6 != v58);
LABEL_10:
  v54 = 0;
  v55 = 0;
  v56 = 0;
  if (v5)
  {
    if ((v5 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (int8x8_t *)operator new(v5);
    v54 = v7;
    v56 = (char *)v7 + v5;
    bzero(v7, v5);
    v55 = (int8x8_t *)((char *)v7 + v5);
    v8 = *(_QWORD *)(a2 + 8);
    if (v8)
      goto LABEL_13;
LABEL_5:
    std::istream::read();
    goto LABEL_14;
  }
  v7 = 0;
  v8 = *(_QWORD *)(a2 + 8);
  if (!v8)
    goto LABEL_5;
LABEL_13:
  v15 = *(_QWORD *)(a2 + 16);
  memcpy(v7, (const void *)(v8 + v15), v5);
  *(_QWORD *)(a2 + 16) = v15 + v5;
LABEL_14:
  v16 = operator new[]();
  v52 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3900;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v53 = v17;
  if (!v5)
    goto LABEL_30;
  if (v5 < 8)
  {
    v18 = 0;
    goto LABEL_28;
  }
  if (v5 >= 0x20)
  {
    v18 = v5 & 0xFFFFFFFFFFFFFFE0;
    v19 = v7 + 2;
    v20 = (int32x4_t *)(v16 + 64);
    v21 = v5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v22 = *(int8x16_t *)v19[-2].i8;
      v23 = *(int8x16_t *)v19->i8;
      v24 = vmovl_s8(*(int8x8_t *)v22.i8);
      v25 = vmovl_high_s8(v22);
      v26 = vmovl_s8(*v19);
      v20[-2] = vmovl_s16(*(int16x4_t *)v25.i8);
      v20[-1] = vmovl_high_s16(v25);
      v27 = vmovl_high_s8(v23);
      v20[-4] = vmovl_s16(*(int16x4_t *)v24.i8);
      v20[-3] = vmovl_high_s16(v24);
      v20[2] = vmovl_s16(*(int16x4_t *)v27.i8);
      v20[3] = vmovl_high_s16(v27);
      *v20 = vmovl_s16(*(int16x4_t *)v26.i8);
      v20[1] = vmovl_high_s16(v26);
      v20 += 8;
      v19 += 4;
      v21 -= 32;
    }
    while (v21);
    if (v5 == v18)
      goto LABEL_30;
    if ((v5 & 0x18) == 0)
    {
LABEL_28:
      v34 = v5 - v18;
      v35 = (_DWORD *)(v16 + 4 * v18);
      v36 = (char *)v7 + v18;
      do
      {
        v37 = *v36++;
        *v35++ = v37;
        --v34;
      }
      while (v34);
      goto LABEL_30;
    }
  }
  else
  {
    v18 = 0;
  }
  v28 = v18;
  v18 = v5 & 0xFFFFFFFFFFFFFFF8;
  v29 = (int8x8_t *)((char *)v7 + v28);
  v30 = (int32x4_t *)(v16 + 4 * v28);
  v31 = v28 - (v5 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    v32 = *v29++;
    v33 = vmovl_s8(v32);
    *v30 = vmovl_s16(*(int16x4_t *)v33.i8);
    v30[1] = vmovl_high_s16(v33);
    v30 += 2;
    v31 += 8;
  }
  while (v31);
  if (v5 != v18)
    goto LABEL_28;
LABEL_30:
  v44 = 0;
  v45 = 0;
  v46 = 0;
  nitro::ndarray<int>::ndarray(&v47, &v52, (uint64_t)&v57, (uint64_t)&v44, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v47);
  if (__p)
  {
    v51 = __p;
    operator delete(__p);
  }
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v47 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  v41 = v53;
  if (v53)
  {
    p_shared_owners = (unint64_t *)&v53->__shared_owners_;
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v54)
  {
    v55 = v54;
    operator delete(v54);
  }
  if (v57)
  {
    v58 = v57;
    operator delete(v57);
  }
}

void sub_1911F9178(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911F91D4()
{
  __cxa_end_catch();
  JUMPOUT(0x1911F91ECLL);
}

void nitro::ndarray<int>::load_cast_from<short>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  int16x4_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  int16x4_t *v19;
  int32x4_t *v20;
  unint64_t v21;
  int16x8_t v22;
  int32x4_t v23;
  int32x4_t v24;
  unint64_t v25;
  _DWORD *v26;
  __int16 *v27;
  int v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  __int128 v38;
  void *v39;
  void *v40;
  void *__p;
  void *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  int16x4_t *v45;
  int16x4_t *v46;
  int16x4_t *v47;
  char *v48;
  char *v49;
  uint64_t v50;

  v48 = 0;
  v49 = 0;
  v50 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v48);
  if (v49 == v48)
  {
    v7 = 0;
    v5 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    goto LABEL_13;
  }
  v4 = v49 - v48 - 8;
  if (v4 < 8)
  {
    v5 = 1;
    v6 = v48;
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v13;
    }
    while (v6 != v49);
    goto LABEL_9;
  }
  v8 = (v4 >> 3) + 1;
  v6 = &v48[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v48 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v5 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v45 = 0;
  v46 = 0;
  v47 = 0;
  if (v5)
  {
    if ((v5 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (int16x4_t *)operator new(2 * v5);
    v45 = v7;
    v47 = (int16x4_t *)((char *)v7 + 2 * v5);
    bzero(v7, 2 * v5);
    v46 = v47;
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 16);
    memcpy(v7, (const void *)(v14 + v15), 2 * v5);
    *(_QWORD *)(a2 + 16) = v15 + 2 * v5;
  }
  else
  {
    std::istream::read();
  }
  v16 = operator new[]();
  v43 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3900;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v44 = v17;
  if (v5)
  {
    if (v5 < 0x10)
    {
      v18 = 0;
LABEL_22:
      v25 = v5 - v18;
      v26 = (_DWORD *)(v16 + 4 * v18);
      v27 = (__int16 *)v7 + v18;
      do
      {
        v28 = *v27++;
        *v26++ = v28;
        --v25;
      }
      while (v25);
      goto LABEL_24;
    }
    v18 = v5 & 0xFFFFFFFFFFFFFFF0;
    v19 = v7 + 2;
    v20 = (int32x4_t *)(v16 + 32);
    v21 = v5 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v22 = *(int16x8_t *)v19[-2].i8;
      v23 = vmovl_s16(*v19);
      v24 = vmovl_high_s16(*(int16x8_t *)v19->i8);
      v20[-2] = vmovl_s16(*(int16x4_t *)v22.i8);
      v20[-1] = vmovl_high_s16(v22);
      *v20 = v23;
      v20[1] = v24;
      v20 += 4;
      v19 += 4;
      v21 -= 16;
    }
    while (v21);
    if (v5 != v18)
      goto LABEL_22;
  }
LABEL_24:
  v35 = 0;
  v36 = 0;
  v37 = 0;
  nitro::ndarray<int>::ndarray(&v38, &v43, (uint64_t)&v48, (uint64_t)&v35, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v38);
  if (__p)
  {
    v42 = __p;
    operator delete(__p);
  }
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v35)
  {
    v36 = v35;
    operator delete(v35);
  }
  v32 = v44;
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
}

void sub_1911F9534(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911F9590()
{
  __cxa_end_catch();
  JUMPOUT(0x1911F95A8);
}

void nitro::ndarray<int>::load_cast_from<int>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  __int128 *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  __int128 *v19;
  _OWORD *v20;
  unint64_t v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  int *v26;
  int v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  __int128 v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  __int128 *v44;
  __int128 *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;

  v47 = 0;
  v48 = 0;
  v49 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v47);
  if (v48 == v47)
  {
    v7 = 0;
    v5 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    goto LABEL_13;
  }
  v4 = v48 - v47 - 8;
  if (v4 < 8)
  {
    v5 = 1;
    v6 = v47;
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v13;
    }
    while (v6 != v48);
    goto LABEL_9;
  }
  v8 = (v4 >> 3) + 1;
  v6 = &v47[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v47 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v5 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v44 = 0;
  v45 = 0;
  v46 = 0;
  if (v5)
  {
    if (v5 >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (__int128 *)operator new(4 * v5);
    v44 = v7;
    v46 = (char *)v7 + 4 * v5;
    bzero(v7, 4 * v5);
    v45 = (__int128 *)v46;
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 16);
    memcpy(v7, (const void *)(v14 + v15), 4 * v5);
    *(_QWORD *)(a2 + 16) = v15 + 4 * v5;
  }
  else
  {
    std::istream::read();
  }
  v16 = operator new[]();
  v42 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3900;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v43 = v17;
  if (v5)
  {
    if (v5 < 8)
    {
      v18 = 0;
LABEL_22:
      v23 = v5 - v18;
      v24 = 4 * v18;
      v25 = (_DWORD *)(v16 + 4 * v18);
      v26 = (int *)((char *)v7 + v24);
      do
      {
        v27 = *v26++;
        *v25++ = v27;
        --v23;
      }
      while (v23);
      goto LABEL_24;
    }
    v18 = v5 & 0xFFFFFFFFFFFFFFF8;
    v19 = v7 + 1;
    v20 = (_OWORD *)(v16 + 16);
    v21 = v5 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v22 = *v19;
      *(v20 - 1) = *(v19 - 1);
      *v20 = v22;
      v19 += 2;
      v20 += 2;
      v21 -= 8;
    }
    while (v21);
    if (v5 != v18)
      goto LABEL_22;
  }
LABEL_24:
  v34 = 0;
  v35 = 0;
  v36 = 0;
  nitro::ndarray<int>::ndarray(&v37, &v42, (uint64_t)&v47, (uint64_t)&v34, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v37);
  if (__p)
  {
    v41 = __p;
    operator delete(__p);
  }
  if (v38)
  {
    v39 = v38;
    operator delete(v38);
  }
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
  if (*((_QWORD *)&v37 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  v31 = v43;
  if (v43)
  {
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
}

void sub_1911F98DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911F9938()
{
  __cxa_end_catch();
  JUMPOUT(0x1911F9950);
}

void nitro::ndarray<int>::load_cast_from<long long>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  int32x4_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  int32x4_t *v19;
  int32x4_t *v20;
  unint64_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  unint64_t v26;
  _DWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  __int128 v39;
  void *v40;
  void *v41;
  void *__p;
  void *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  int32x4_t *v46;
  int32x4_t *v47;
  int32x4_t *v48;
  char *v49;
  char *v50;
  uint64_t v51;

  v49 = 0;
  v50 = 0;
  v51 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v49);
  if (v50 == v49)
  {
    v7 = 0;
    v5 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    goto LABEL_13;
  }
  v4 = v50 - v49 - 8;
  if (v4 < 8)
  {
    v5 = 1;
    v6 = v49;
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v13;
    }
    while (v6 != v50);
    goto LABEL_9;
  }
  v8 = (v4 >> 3) + 1;
  v6 = &v49[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v49 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v5 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v46 = 0;
  v47 = 0;
  v48 = 0;
  if (v5)
  {
    if (v5 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (int32x4_t *)operator new(8 * v5);
    v46 = v7;
    v48 = (int32x4_t *)((char *)v7 + 8 * v5);
    bzero(v7, 8 * v5);
    v47 = v48;
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 16);
    memcpy(v7, (const void *)(v14 + v15), 8 * v5);
    *(_QWORD *)(a2 + 16) = v15 + 8 * v5;
  }
  else
  {
    std::istream::read();
  }
  v16 = operator new[]();
  v44 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3900;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v45 = v17;
  if (v5)
  {
    if (v5 < 8)
    {
      v18 = 0;
LABEL_22:
      v26 = v5 - v18;
      v27 = (_DWORD *)(v16 + 4 * v18);
      v28 = &v7->i64[v18];
      do
      {
        v29 = *v28++;
        *v27++ = v29;
        --v26;
      }
      while (v26);
      goto LABEL_24;
    }
    v18 = v5 & 0xFFFFFFFFFFFFFFF8;
    v19 = v7 + 2;
    v20 = (int32x4_t *)(v16 + 16);
    v21 = v5 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v23 = v19[-2];
      v22 = v19[-1];
      v25 = *v19;
      v24 = v19[1];
      v19 += 4;
      v20[-1] = vuzp1q_s32(v23, v22);
      *v20 = vuzp1q_s32(v25, v24);
      v20 += 2;
      v21 -= 8;
    }
    while (v21);
    if (v5 != v18)
      goto LABEL_22;
  }
LABEL_24:
  v36 = 0;
  v37 = 0;
  v38 = 0;
  nitro::ndarray<int>::ndarray(&v39, &v44, (uint64_t)&v49, (uint64_t)&v36, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v39);
  if (__p)
  {
    v43 = __p;
    operator delete(__p);
  }
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
  v33 = v45;
  if (v45)
  {
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v46)
  {
    v47 = v46;
    operator delete(v46);
  }
  if (v49)
  {
    v50 = v49;
    operator delete(v49);
  }
}

void sub_1911F9C88(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911F9CE4()
{
  __cxa_end_catch();
  JUMPOUT(0x1911F9CFCLL);
}

void nitro::ndarray<int>::load_cast_from<unsigned char>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  size_t v5;
  char *v6;
  int8x16_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  int8x16_t v18;
  unint64_t v19;
  int8x16_t *v20;
  int8x16_t *v21;
  unint64_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  unint64_t v27;
  uint64_t *v28;
  int8x16_t *v29;
  unint64_t v30;
  uint64_t v31;
  int8x16_t v32;
  size_t v33;
  _DWORD *v34;
  unsigned __int8 *v35;
  int v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  __int128 v46;
  void *v47;
  void *v48;
  void *__p;
  void *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  int8x16_t *v53;
  __int8 *v54;
  __int8 *v55;
  char *v56;
  char *v57;
  uint64_t v58;

  v56 = 0;
  v57 = 0;
  v58 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v56);
  if (v57 == v56)
  {
    v7 = 0;
    v5 = 0;
    v53 = 0;
    v54 = 0;
    v55 = 0;
    v8 = *(_QWORD *)(a2 + 8);
    if (!v8)
      goto LABEL_5;
    goto LABEL_13;
  }
  v4 = v57 - v56 - 8;
  if (v4 >= 8)
  {
    v9 = (v4 >> 3) + 1;
    v6 = &v56[8 * (v9 & 0x3FFFFFFFFFFFFFFELL)];
    v10 = v56 + 8;
    v11 = 1;
    v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
    v13 = 1;
    do
    {
      v11 *= *(v10 - 1);
      v13 *= *v10;
      v10 += 2;
      v12 -= 2;
    }
    while (v12);
    v5 = v13 * v11;
    if (v9 == (v9 & 0x3FFFFFFFFFFFFFFELL))
      goto LABEL_10;
  }
  else
  {
    v5 = 1;
    v6 = v56;
  }
  do
  {
    v14 = *(_QWORD *)v6;
    v6 += 8;
    v5 *= v14;
  }
  while (v6 != v57);
LABEL_10:
  v53 = 0;
  v54 = 0;
  v55 = 0;
  if (v5)
  {
    if ((v5 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (int8x16_t *)operator new(v5);
    v53 = v7;
    v55 = &v7->i8[v5];
    bzero(v7, v5);
    v54 = &v7->i8[v5];
    v8 = *(_QWORD *)(a2 + 8);
    if (v8)
      goto LABEL_13;
LABEL_5:
    std::istream::read();
    goto LABEL_14;
  }
  v7 = 0;
  v8 = *(_QWORD *)(a2 + 8);
  if (!v8)
    goto LABEL_5;
LABEL_13:
  v15 = *(_QWORD *)(a2 + 16);
  memcpy(v7, (const void *)(v8 + v15), v5);
  *(_QWORD *)(a2 + 16) = v15 + v5;
LABEL_14:
  v16 = operator new[]();
  v51 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3900;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v52 = v17;
  if (!v5)
    goto LABEL_30;
  if (v5 < 8)
  {
    v19 = 0;
    goto LABEL_28;
  }
  if (v5 >= 0x20)
  {
    v19 = v5 & 0xFFFFFFFFFFFFFFE0;
    v20 = v7 + 1;
    v21 = (int8x16_t *)(v16 + 64);
    v18.i64[1] = 0xFFFFFF0BFFFFFF0ALL;
    v22 = v5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v23 = v20[-1];
      v24 = *v20;
      v25 = vqtbl1q_s8(*v20, (int8x16_t)xmmword_191A74190);
      v26 = vqtbl1q_s8(*v20, (int8x16_t)xmmword_191A741A0);
      v21[-2] = vqtbl1q_s8(v23, (int8x16_t)xmmword_191A741B0);
      v21[-1] = vqtbl1q_s8(v23, (int8x16_t)xmmword_191A741C0);
      v21[-4] = vqtbl1q_s8(v23, (int8x16_t)xmmword_191A74190);
      v21[-3] = vqtbl1q_s8(v23, (int8x16_t)xmmword_191A741A0);
      v21[2] = vqtbl1q_s8(v24, (int8x16_t)xmmword_191A741B0);
      v21[3] = vqtbl1q_s8(v24, (int8x16_t)xmmword_191A741C0);
      *v21 = v25;
      v21[1] = v26;
      v21 += 8;
      v20 += 2;
      v22 -= 32;
    }
    while (v22);
    if (v5 == v19)
      goto LABEL_30;
    if ((v5 & 0x18) == 0)
    {
LABEL_28:
      v33 = v5 - v19;
      v34 = (_DWORD *)(v16 + 4 * v19);
      v35 = &v7->u8[v19];
      do
      {
        v36 = *v35++;
        *v34++ = v36;
        --v33;
      }
      while (v33);
      goto LABEL_30;
    }
  }
  else
  {
    v19 = 0;
  }
  v27 = v19;
  v19 = v5 & 0xFFFFFFFFFFFFFFF8;
  v28 = (uint64_t *)((char *)v7->i64 + v27);
  v29 = (int8x16_t *)(v16 + 4 * v27);
  v30 = v27 - (v5 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    v31 = *v28++;
    v18.i64[0] = v31;
    v32 = vqtbl1q_s8(v18, (int8x16_t)xmmword_191A74190);
    v18 = vqtbl1q_s8(v18, (int8x16_t)xmmword_191A741A0);
    *v29 = v32;
    v29[1] = v18;
    v29 += 2;
    v30 += 8;
  }
  while (v30);
  if (v5 != v19)
    goto LABEL_28;
LABEL_30:
  v43 = 0;
  v44 = 0;
  v45 = 0;
  nitro::ndarray<int>::ndarray(&v46, &v51, (uint64_t)&v56, (uint64_t)&v43, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v46);
  if (__p)
  {
    v50 = __p;
    operator delete(__p);
  }
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
  v37 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
  if (*((_QWORD *)&v46 + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
  v40 = v52;
  if (v52)
  {
    p_shared_owners = (unint64_t *)&v52->__shared_owners_;
    do
      v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (v53)
  {
    v54 = (__int8 *)v53;
    operator delete(v53);
  }
  if (v56)
  {
    v57 = v56;
    operator delete(v56);
  }
}

void sub_1911FA0D0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911FA12C()
{
  __cxa_end_catch();
  JUMPOUT(0x1911FA144);
}

void nitro::ndarray<int>::load_cast_from<unsigned short>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  uint16x4_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  uint16x4_t *v19;
  uint32x4_t *v20;
  unint64_t v21;
  uint16x8_t v22;
  uint32x4_t v23;
  uint32x4_t v24;
  unint64_t v25;
  _DWORD *v26;
  unsigned __int16 *v27;
  int v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  __int128 v38;
  void *v39;
  void *v40;
  void *__p;
  void *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint16x4_t *v45;
  uint16x4_t *v46;
  uint16x4_t *v47;
  char *v48;
  char *v49;
  uint64_t v50;

  v48 = 0;
  v49 = 0;
  v50 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v48);
  if (v49 == v48)
  {
    v7 = 0;
    v5 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    goto LABEL_13;
  }
  v4 = v49 - v48 - 8;
  if (v4 < 8)
  {
    v5 = 1;
    v6 = v48;
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v13;
    }
    while (v6 != v49);
    goto LABEL_9;
  }
  v8 = (v4 >> 3) + 1;
  v6 = &v48[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v48 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v5 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v45 = 0;
  v46 = 0;
  v47 = 0;
  if (v5)
  {
    if ((v5 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (uint16x4_t *)operator new(2 * v5);
    v45 = v7;
    v47 = (uint16x4_t *)((char *)v7 + 2 * v5);
    bzero(v7, 2 * v5);
    v46 = v47;
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 16);
    memcpy(v7, (const void *)(v14 + v15), 2 * v5);
    *(_QWORD *)(a2 + 16) = v15 + 2 * v5;
  }
  else
  {
    std::istream::read();
  }
  v16 = operator new[]();
  v43 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3900;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v44 = v17;
  if (v5)
  {
    if (v5 < 0x10)
    {
      v18 = 0;
LABEL_22:
      v25 = v5 - v18;
      v26 = (_DWORD *)(v16 + 4 * v18);
      v27 = (unsigned __int16 *)v7 + v18;
      do
      {
        v28 = *v27++;
        *v26++ = v28;
        --v25;
      }
      while (v25);
      goto LABEL_24;
    }
    v18 = v5 & 0xFFFFFFFFFFFFFFF0;
    v19 = v7 + 2;
    v20 = (uint32x4_t *)(v16 + 32);
    v21 = v5 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v22 = *(uint16x8_t *)v19[-2].i8;
      v23 = vmovl_u16(*v19);
      v24 = vmovl_high_u16(*(uint16x8_t *)v19->i8);
      v20[-2] = vmovl_u16(*(uint16x4_t *)v22.i8);
      v20[-1] = vmovl_high_u16(v22);
      *v20 = v23;
      v20[1] = v24;
      v20 += 4;
      v19 += 4;
      v21 -= 16;
    }
    while (v21);
    if (v5 != v18)
      goto LABEL_22;
  }
LABEL_24:
  v35 = 0;
  v36 = 0;
  v37 = 0;
  nitro::ndarray<int>::ndarray(&v38, &v43, (uint64_t)&v48, (uint64_t)&v35, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v38);
  if (__p)
  {
    v42 = __p;
    operator delete(__p);
  }
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v35)
  {
    v36 = v35;
    operator delete(v35);
  }
  v32 = v44;
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
}

void sub_1911FA48C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911FA4E8()
{
  __cxa_end_catch();
  JUMPOUT(0x1911FA500);
}

void nitro::ndarray<int>::load_cast_from<unsigned int>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  __int128 *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  __int128 *v19;
  _OWORD *v20;
  unint64_t v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  int *v26;
  int v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  __int128 v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  __int128 *v44;
  __int128 *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;

  v47 = 0;
  v48 = 0;
  v49 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v47);
  if (v48 == v47)
  {
    v7 = 0;
    v5 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    goto LABEL_13;
  }
  v4 = v48 - v47 - 8;
  if (v4 < 8)
  {
    v5 = 1;
    v6 = v47;
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v13;
    }
    while (v6 != v48);
    goto LABEL_9;
  }
  v8 = (v4 >> 3) + 1;
  v6 = &v47[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v47 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v5 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v44 = 0;
  v45 = 0;
  v46 = 0;
  if (v5)
  {
    if (v5 >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (__int128 *)operator new(4 * v5);
    v44 = v7;
    v46 = (char *)v7 + 4 * v5;
    bzero(v7, 4 * v5);
    v45 = (__int128 *)v46;
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 16);
    memcpy(v7, (const void *)(v14 + v15), 4 * v5);
    *(_QWORD *)(a2 + 16) = v15 + 4 * v5;
  }
  else
  {
    std::istream::read();
  }
  v16 = operator new[]();
  v42 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3900;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v43 = v17;
  if (v5)
  {
    if (v5 < 8)
    {
      v18 = 0;
LABEL_22:
      v23 = v5 - v18;
      v24 = 4 * v18;
      v25 = (_DWORD *)(v16 + 4 * v18);
      v26 = (int *)((char *)v7 + v24);
      do
      {
        v27 = *v26++;
        *v25++ = v27;
        --v23;
      }
      while (v23);
      goto LABEL_24;
    }
    v18 = v5 & 0xFFFFFFFFFFFFFFF8;
    v19 = v7 + 1;
    v20 = (_OWORD *)(v16 + 16);
    v21 = v5 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v22 = *v19;
      *(v20 - 1) = *(v19 - 1);
      *v20 = v22;
      v19 += 2;
      v20 += 2;
      v21 -= 8;
    }
    while (v21);
    if (v5 != v18)
      goto LABEL_22;
  }
LABEL_24:
  v34 = 0;
  v35 = 0;
  v36 = 0;
  nitro::ndarray<int>::ndarray(&v37, &v42, (uint64_t)&v47, (uint64_t)&v34, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v37);
  if (__p)
  {
    v41 = __p;
    operator delete(__p);
  }
  if (v38)
  {
    v39 = v38;
    operator delete(v38);
  }
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
  if (*((_QWORD *)&v37 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  v31 = v43;
  if (v43)
  {
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
}

void sub_1911FA834(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911FA890()
{
  __cxa_end_catch();
  JUMPOUT(0x1911FA8A8);
}

void nitro::ndarray<int>::load_cast_from<unsigned long long>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  int32x4_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  int32x4_t *v19;
  int32x4_t *v20;
  unint64_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  unint64_t v26;
  _DWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  __int128 v39;
  void *v40;
  void *v41;
  void *__p;
  void *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  int32x4_t *v46;
  int32x4_t *v47;
  int32x4_t *v48;
  char *v49;
  char *v50;
  uint64_t v51;

  v49 = 0;
  v50 = 0;
  v51 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v49);
  if (v50 == v49)
  {
    v7 = 0;
    v5 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    goto LABEL_13;
  }
  v4 = v50 - v49 - 8;
  if (v4 < 8)
  {
    v5 = 1;
    v6 = v49;
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v13;
    }
    while (v6 != v50);
    goto LABEL_9;
  }
  v8 = (v4 >> 3) + 1;
  v6 = &v49[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v49 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v5 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v46 = 0;
  v47 = 0;
  v48 = 0;
  if (v5)
  {
    if (v5 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (int32x4_t *)operator new(8 * v5);
    v46 = v7;
    v48 = (int32x4_t *)((char *)v7 + 8 * v5);
    bzero(v7, 8 * v5);
    v47 = v48;
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 16);
    memcpy(v7, (const void *)(v14 + v15), 8 * v5);
    *(_QWORD *)(a2 + 16) = v15 + 8 * v5;
  }
  else
  {
    std::istream::read();
  }
  v16 = operator new[]();
  v44 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3900;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v45 = v17;
  if (v5)
  {
    if (v5 < 8)
    {
      v18 = 0;
LABEL_22:
      v26 = v5 - v18;
      v27 = (_DWORD *)(v16 + 4 * v18);
      v28 = &v7->i64[v18];
      do
      {
        v29 = *v28++;
        *v27++ = v29;
        --v26;
      }
      while (v26);
      goto LABEL_24;
    }
    v18 = v5 & 0xFFFFFFFFFFFFFFF8;
    v19 = v7 + 2;
    v20 = (int32x4_t *)(v16 + 16);
    v21 = v5 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v23 = v19[-2];
      v22 = v19[-1];
      v25 = *v19;
      v24 = v19[1];
      v19 += 4;
      v20[-1] = vuzp1q_s32(v23, v22);
      *v20 = vuzp1q_s32(v25, v24);
      v20 += 2;
      v21 -= 8;
    }
    while (v21);
    if (v5 != v18)
      goto LABEL_22;
  }
LABEL_24:
  v36 = 0;
  v37 = 0;
  v38 = 0;
  nitro::ndarray<int>::ndarray(&v39, &v44, (uint64_t)&v49, (uint64_t)&v36, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v39);
  if (__p)
  {
    v43 = __p;
    operator delete(__p);
  }
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
  v33 = v45;
  if (v45)
  {
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v46)
  {
    v47 = v46;
    operator delete(v46);
  }
  if (v49)
  {
    v50 = v49;
    operator delete(v49);
  }
}

void sub_1911FABE0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911FAC3C()
{
  __cxa_end_catch();
  JUMPOUT(0x1911FAC54);
}

void nitro::ndarray<int>::load_cast_from<half>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  __int32 *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  __int128 v18;
  float16x4_t v19;
  unint64_t v20;
  __int32 *v21;
  uint64_t v22;
  unint64_t v23;
  __int32 v24;
  unint64_t v25;
  _DWORD *v26;
  __int16 *v27;
  __int16 v28;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  __int128 v44;
  void *v45;
  void *v46;
  void *__p;
  void *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  __int32 *v51;
  __int32 *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;

  v54 = 0;
  v55 = 0;
  v56 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v54);
  if (v55 == v54)
  {
    v7 = 0;
    v5 = 0;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    goto LABEL_13;
  }
  v4 = v55 - v54 - 8;
  if (v4 < 8)
  {
    v5 = 1;
    v6 = v54;
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v13;
    }
    while (v6 != v55);
    goto LABEL_9;
  }
  v8 = (v4 >> 3) + 1;
  v6 = &v54[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v54 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v5 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v51 = 0;
  v52 = 0;
  v53 = 0;
  if (v5)
  {
    if ((v5 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (__int32 *)operator new(2 * v5);
    v51 = v7;
    v53 = (char *)v7 + 2 * v5;
    bzero(v7, 2 * v5);
    v52 = (__int32 *)v53;
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 16);
    memcpy(v7, (const void *)(v14 + v15), 2 * v5);
    *(_QWORD *)(a2 + 16) = v15 + 2 * v5;
  }
  else
  {
    std::istream::read();
  }
  v16 = operator new[]();
  v49 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3900;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v50 = v17;
  if (v5)
  {
    if (v5 < 4)
    {
      v20 = 0;
LABEL_22:
      v25 = v5 - v20;
      v26 = (_DWORD *)(v16 + 4 * v20);
      v27 = (__int16 *)v7 + v20;
      do
      {
        v28 = *v27++;
        _H0 = v28;
        __asm { FCVT            S0, H0 }
        *v26++ = (int)_S0;
        --v25;
      }
      while (v25);
      goto LABEL_24;
    }
    v20 = v5 & 0xFFFFFFFFFFFFFFFCLL;
    v21 = v7 + 1;
    v22 = v16 + 8;
    v23 = v5 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      LODWORD(v18) = *(v21 - 1);
      v24 = *v21;
      v21 += 2;
      v19.i32[0] = v24;
      *(_QWORD *)&v18 = vcvtq_s32_f32(vcvtq_f32_f16(*(float16x4_t *)&v18)).u64[0];
      v19 = (float16x4_t)vcvtq_s32_f32(vcvtq_f32_f16(v19)).u64[0];
      *((float16x4_t *)&v18 + 1) = v19;
      *(_OWORD *)(v22 - 8) = v18;
      v22 += 16;
      v23 -= 4;
    }
    while (v23);
    if (v5 != v20)
      goto LABEL_22;
  }
LABEL_24:
  v41 = 0;
  v42 = 0;
  v43 = 0;
  nitro::ndarray<int>::ndarray(&v44, &v49, (uint64_t)&v54, (uint64_t)&v41, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v44);
  if (__p)
  {
    v48 = __p;
    operator delete(__p);
  }
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  v38 = v50;
  if (v50)
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
  if (v54)
  {
    v55 = v54;
    operator delete(v54);
  }
}

void sub_1911FAFAC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911FB008()
{
  __cxa_end_catch();
  JUMPOUT(0x1911FB020);
}

void nitro::ndarray<int>::load_cast_from<float>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  float32x4_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  float32x4_t *v19;
  int32x4_t *v20;
  unint64_t v21;
  int32x4_t v22;
  unint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  float *v26;
  float v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  __int128 v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  float32x4_t *v44;
  float32x4_t *v45;
  __int8 *v46;
  char *v47;
  char *v48;
  uint64_t v49;

  v47 = 0;
  v48 = 0;
  v49 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v47);
  if (v48 == v47)
  {
    v7 = 0;
    v5 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    goto LABEL_13;
  }
  v4 = v48 - v47 - 8;
  if (v4 < 8)
  {
    v5 = 1;
    v6 = v47;
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v13;
    }
    while (v6 != v48);
    goto LABEL_9;
  }
  v8 = (v4 >> 3) + 1;
  v6 = &v47[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v47 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v5 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v44 = 0;
  v45 = 0;
  v46 = 0;
  if (v5)
  {
    if (v5 >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (float32x4_t *)operator new(4 * v5);
    v44 = v7;
    v46 = &v7->i8[4 * v5];
    bzero(v7, 4 * v5);
    v45 = (float32x4_t *)v46;
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 16);
    memcpy(v7, (const void *)(v14 + v15), 4 * v5);
    *(_QWORD *)(a2 + 16) = v15 + 4 * v5;
  }
  else
  {
    std::istream::read();
  }
  v16 = operator new[]();
  v42 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3900;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v43 = v17;
  if (v5)
  {
    if (v5 < 8)
    {
      v18 = 0;
LABEL_22:
      v23 = v5 - v18;
      v24 = v18;
      v25 = (_DWORD *)(v16 + 4 * v18);
      v26 = &v7->f32[v24];
      do
      {
        v27 = *v26++;
        *v25++ = (int)v27;
        --v23;
      }
      while (v23);
      goto LABEL_24;
    }
    v18 = v5 & 0xFFFFFFFFFFFFFFF8;
    v19 = v7 + 1;
    v20 = (int32x4_t *)(v16 + 16);
    v21 = v5 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v22 = vcvtq_s32_f32(*v19);
      v20[-1] = vcvtq_s32_f32(v19[-1]);
      *v20 = v22;
      v19 += 2;
      v20 += 2;
      v21 -= 8;
    }
    while (v21);
    if (v5 != v18)
      goto LABEL_22;
  }
LABEL_24:
  v34 = 0;
  v35 = 0;
  v36 = 0;
  nitro::ndarray<int>::ndarray(&v37, &v42, (uint64_t)&v47, (uint64_t)&v34, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v37);
  if (__p)
  {
    v41 = __p;
    operator delete(__p);
  }
  if (v38)
  {
    v39 = v38;
    operator delete(v38);
  }
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
  if (*((_QWORD *)&v37 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  v31 = v43;
  if (v43)
  {
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
}

void sub_1911FB360(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911FB3BC()
{
  __cxa_end_catch();
  JUMPOUT(0x1911FB3D4);
}

void nitro::ndarray<int>::load_cast_from<double>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  float64x2_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  float64x2_t *v19;
  int32x4_t *v20;
  unint64_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  unint64_t v26;
  _DWORD *v27;
  double *v28;
  double v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  __int128 v39;
  void *v40;
  void *v41;
  void *__p;
  void *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  float64x2_t *v46;
  float64x2_t *v47;
  float64x2_t *v48;
  char *v49;
  char *v50;
  uint64_t v51;

  v49 = 0;
  v50 = 0;
  v51 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v49);
  if (v50 == v49)
  {
    v7 = 0;
    v5 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    goto LABEL_13;
  }
  v4 = v50 - v49 - 8;
  if (v4 < 8)
  {
    v5 = 1;
    v6 = v49;
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v13;
    }
    while (v6 != v50);
    goto LABEL_9;
  }
  v8 = (v4 >> 3) + 1;
  v6 = &v49[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v49 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v5 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v46 = 0;
  v47 = 0;
  v48 = 0;
  if (v5)
  {
    if (v5 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (float64x2_t *)operator new(8 * v5);
    v46 = v7;
    v48 = (float64x2_t *)((char *)v7 + 8 * v5);
    bzero(v7, 8 * v5);
    v47 = v48;
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 16);
    memcpy(v7, (const void *)(v14 + v15), 8 * v5);
    *(_QWORD *)(a2 + 16) = v15 + 8 * v5;
  }
  else
  {
    std::istream::read();
  }
  v16 = operator new[]();
  v44 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3900;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v45 = v17;
  if (v5)
  {
    if (v5 < 8)
    {
      v18 = 0;
LABEL_22:
      v26 = v5 - v18;
      v27 = (_DWORD *)(v16 + 4 * v18);
      v28 = &v7->f64[v18];
      do
      {
        v29 = *v28++;
        *v27++ = (int)v29;
        --v26;
      }
      while (v26);
      goto LABEL_24;
    }
    v18 = v5 & 0xFFFFFFFFFFFFFFF8;
    v19 = v7 + 2;
    v20 = (int32x4_t *)(v16 + 16);
    v21 = v5 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v22 = v19[-2];
      v23 = v19[-1];
      v24 = *v19;
      v25 = v19[1];
      v19 += 4;
      v20[-1] = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(v22), (int32x4_t)vcvtq_s64_f64(v23));
      *v20 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(v24), (int32x4_t)vcvtq_s64_f64(v25));
      v20 += 2;
      v21 -= 8;
    }
    while (v21);
    if (v5 != v18)
      goto LABEL_22;
  }
LABEL_24:
  v36 = 0;
  v37 = 0;
  v38 = 0;
  nitro::ndarray<int>::ndarray(&v39, &v44, (uint64_t)&v49, (uint64_t)&v36, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v39);
  if (__p)
  {
    v43 = __p;
    operator delete(__p);
  }
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
  v33 = v45;
  if (v45)
  {
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v46)
  {
    v47 = v46;
    operator delete(v46);
  }
  if (v49)
  {
    v50 = v49;
    operator delete(v49);
  }
}

void sub_1911FB720(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911FB77C()
{
  __cxa_end_catch();
  JUMPOUT(0x1911FB794);
}

void nitro::ndarray<half>::load_cast_from<signed char>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  size_t v5;
  char *v6;
  int8x8_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  int8x8_t *v19;
  float16x8_t *v20;
  unint64_t v21;
  int8x16_t v22;
  int16x8_t v23;
  float16x8_t v24;
  int16x8_t v25;
  float16x8_t v26;
  int16x8_t v27;
  float16x8_t v28;
  int16x8_t v29;
  unint64_t v30;
  int8x8_t *v31;
  float16x8_t *v32;
  unint64_t v33;
  int8x8_t v34;
  int16x8_t v35;
  size_t v36;
  _WORD *v37;
  char *v38;
  int v39;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  __int128 v54;
  void *v55;
  void *v56;
  void *__p;
  void *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  int8x8_t *v61;
  int8x8_t *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;

  v64 = 0;
  v65 = 0;
  v66 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v64);
  if (v65 == v64)
  {
    v7 = 0;
    v5 = 0;
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v8 = *(_QWORD *)(a2 + 8);
    if (!v8)
      goto LABEL_5;
    goto LABEL_13;
  }
  v4 = v65 - v64 - 8;
  if (v4 >= 8)
  {
    v9 = (v4 >> 3) + 1;
    v6 = &v64[8 * (v9 & 0x3FFFFFFFFFFFFFFELL)];
    v10 = v64 + 8;
    v11 = 1;
    v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
    v13 = 1;
    do
    {
      v11 *= *(v10 - 1);
      v13 *= *v10;
      v10 += 2;
      v12 -= 2;
    }
    while (v12);
    v5 = v13 * v11;
    if (v9 == (v9 & 0x3FFFFFFFFFFFFFFELL))
      goto LABEL_10;
  }
  else
  {
    v5 = 1;
    v6 = v64;
  }
  do
  {
    v14 = *(_QWORD *)v6;
    v6 += 8;
    v5 *= v14;
  }
  while (v6 != v65);
LABEL_10:
  v61 = 0;
  v62 = 0;
  v63 = 0;
  if (v5)
  {
    if ((v5 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (int8x8_t *)operator new(v5);
    v61 = v7;
    v63 = (char *)v7 + v5;
    bzero(v7, v5);
    v62 = (int8x8_t *)((char *)v7 + v5);
    v8 = *(_QWORD *)(a2 + 8);
    if (v8)
      goto LABEL_13;
LABEL_5:
    std::istream::read();
    goto LABEL_14;
  }
  v7 = 0;
  v8 = *(_QWORD *)(a2 + 8);
  if (!v8)
    goto LABEL_5;
LABEL_13:
  v15 = *(_QWORD *)(a2 + 16);
  memcpy(v7, (const void *)(v8 + v15), v5);
  *(_QWORD *)(a2 + 16) = v15 + v5;
LABEL_14:
  v16 = operator new[]();
  v59 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2B70;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v60 = v17;
  if (!v5)
    goto LABEL_30;
  if (v5 < 8)
  {
    v18 = 0;
    goto LABEL_28;
  }
  if (v5 >= 0x20)
  {
    v18 = v5 & 0xFFFFFFFFFFFFFFE0;
    v19 = v7 + 2;
    v20 = (float16x8_t *)(v16 + 32);
    v21 = v5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v22 = *(int8x16_t *)v19[-2].i8;
      v23 = vmovl_s8(*(int8x8_t *)v22.i8);
      v24 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v23.i8))), vcvtq_f32_s32(vmovl_high_s16(v23)));
      v25 = vmovl_high_s8(v22);
      v26 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v25.i8))), vcvtq_f32_s32(vmovl_high_s16(v25)));
      v27 = vmovl_s8(*v19);
      v28 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v27.i8))), vcvtq_f32_s32(vmovl_high_s16(v27)));
      v29 = vmovl_high_s8(*(int8x16_t *)v19->i8);
      v20[-2] = v24;
      v20[-1] = v26;
      *v20 = v28;
      v20[1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v29.i8))), vcvtq_f32_s32(vmovl_high_s16(v29)));
      v20 += 4;
      v19 += 4;
      v21 -= 32;
    }
    while (v21);
    if (v5 == v18)
      goto LABEL_30;
    if ((v5 & 0x18) == 0)
    {
LABEL_28:
      v36 = v5 - v18;
      v37 = (_WORD *)(v16 + 2 * v18);
      v38 = (char *)v7 + v18;
      do
      {
        v39 = *v38++;
        _S0 = (float)v39;
        __asm { FCVT            H0, S0 }
        *v37++ = LOWORD(_S0);
        --v36;
      }
      while (v36);
      goto LABEL_30;
    }
  }
  else
  {
    v18 = 0;
  }
  v30 = v18;
  v18 = v5 & 0xFFFFFFFFFFFFFFF8;
  v31 = (int8x8_t *)((char *)v7 + v30);
  v32 = (float16x8_t *)(v16 + 2 * v30);
  v33 = v30 - (v5 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    v34 = *v31++;
    v35 = vmovl_s8(v34);
    *v32++ = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v35.i8))), vcvtq_f32_s32(vmovl_high_s16(v35)));
    v33 += 8;
  }
  while (v33);
  if (v5 != v18)
    goto LABEL_28;
LABEL_30:
  v51 = 0;
  v52 = 0;
  v53 = 0;
  nitro::ndarray<half>::ndarray(&v54, &v59, (uint64_t)&v64, (uint64_t)&v51, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v54);
  if (__p)
  {
    v58 = __p;
    operator delete(__p);
  }
  if (v55)
  {
    v56 = v55;
    operator delete(v55);
  }
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
  v48 = v60;
  if (v60)
  {
    p_shared_owners = (unint64_t *)&v60->__shared_owners_;
    do
      v50 = __ldaxr(p_shared_owners);
    while (__stlxr(v50 - 1, p_shared_owners));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  if (v61)
  {
    v62 = v61;
    operator delete(v61);
  }
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
}

void sub_1911FBB98(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911FBBF4()
{
  __cxa_end_catch();
  JUMPOUT(0x1911FBC0CLL);
}

void nitro::ndarray<half>::load_cast_from<short>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  int16x4_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  int16x4_t *v19;
  float16x8_t *v20;
  unint64_t v21;
  float16x8_t v22;
  unint64_t v23;
  uint64_t v24;
  _WORD *v25;
  int16x4_t *v26;
  int v27;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  __int128 v42;
  void *v43;
  void *v44;
  void *__p;
  void *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  int16x4_t *v49;
  int16x4_t *v50;
  int16x4_t *v51;
  char *v52;
  char *v53;
  uint64_t v54;

  v52 = 0;
  v53 = 0;
  v54 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v52);
  if (v53 == v52)
  {
    v7 = 0;
    v5 = 0;
    v49 = 0;
    v50 = 0;
    v51 = 0;
    goto LABEL_13;
  }
  v4 = v53 - v52 - 8;
  if (v4 < 8)
  {
    v5 = 1;
    v6 = v52;
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v13;
    }
    while (v6 != v53);
    goto LABEL_9;
  }
  v8 = (v4 >> 3) + 1;
  v6 = &v52[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v52 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v5 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v49 = 0;
  v50 = 0;
  v51 = 0;
  if (v5)
  {
    if ((v5 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (int16x4_t *)operator new(2 * v5);
    v49 = v7;
    v51 = (int16x4_t *)((char *)v7 + 2 * v5);
    bzero(v7, 2 * v5);
    v50 = v51;
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 16);
    memcpy(v7, (const void *)(v14 + v15), 2 * v5);
    *(_QWORD *)(a2 + 16) = v15 + 2 * v5;
  }
  else
  {
    std::istream::read();
  }
  v16 = operator new[]();
  v47 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2B70;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v48 = v17;
  if (v5)
  {
    if (v5 < 0x10)
    {
      v18 = 0;
LABEL_22:
      v23 = v5 - v18;
      v24 = 2 * v18;
      v25 = (_WORD *)(v16 + 2 * v18);
      v26 = (int16x4_t *)((char *)v7 + v24);
      do
      {
        v27 = v26->i16[0];
        v26 = (int16x4_t *)((char *)v26 + 2);
        _S0 = (float)v27;
        __asm { FCVT            H0, S0 }
        *v25++ = LOWORD(_S0);
        --v23;
      }
      while (v23);
      goto LABEL_24;
    }
    v18 = v5 & 0xFFFFFFFFFFFFFFF0;
    v19 = v7 + 2;
    v20 = (float16x8_t *)(v16 + 16);
    v21 = v5 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v22 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(vmovl_s16(*v19))), vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v19->i8)));
      v20[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(vmovl_s16(v19[-2]))), vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v19[-2].i8)));
      *v20 = v22;
      v19 += 4;
      v20 += 2;
      v21 -= 16;
    }
    while (v21);
    if (v5 != v18)
      goto LABEL_22;
  }
LABEL_24:
  v39 = 0;
  v40 = 0;
  v41 = 0;
  nitro::ndarray<half>::ndarray(&v42, &v47, (uint64_t)&v52, (uint64_t)&v39, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v42);
  if (__p)
  {
    v46 = __p;
    operator delete(__p);
  }
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (*((_QWORD *)&v42 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
  v36 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v49)
  {
    v50 = v49;
    operator delete(v49);
  }
  if (v52)
  {
    v53 = v52;
    operator delete(v52);
  }
}

void sub_1911FBF74(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911FBFD0()
{
  __cxa_end_catch();
  JUMPOUT(0x1911FBFE8);
}

void nitro::ndarray<half>::load_cast_from<int>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  int32x4_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  int32x4_t *v19;
  float16x8_t *v20;
  unint64_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  unint64_t v26;
  _WORD *v27;
  int *v28;
  int v29;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  __int128 v44;
  void *v45;
  void *v46;
  void *__p;
  void *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  int32x4_t *v51;
  int32x4_t *v52;
  int32x4_t *v53;
  char *v54;
  char *v55;
  uint64_t v56;

  v54 = 0;
  v55 = 0;
  v56 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v54);
  if (v55 == v54)
  {
    v7 = 0;
    v5 = 0;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    goto LABEL_13;
  }
  v4 = v55 - v54 - 8;
  if (v4 < 8)
  {
    v5 = 1;
    v6 = v54;
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v13;
    }
    while (v6 != v55);
    goto LABEL_9;
  }
  v8 = (v4 >> 3) + 1;
  v6 = &v54[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v54 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v5 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v51 = 0;
  v52 = 0;
  v53 = 0;
  if (v5)
  {
    if (v5 >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (int32x4_t *)operator new(4 * v5);
    v51 = v7;
    v53 = (int32x4_t *)((char *)v7 + 4 * v5);
    bzero(v7, 4 * v5);
    v52 = v53;
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 16);
    memcpy(v7, (const void *)(v14 + v15), 4 * v5);
    *(_QWORD *)(a2 + 16) = v15 + 4 * v5;
  }
  else
  {
    std::istream::read();
  }
  v16 = operator new[]();
  v49 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2B70;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v50 = v17;
  if (v5)
  {
    if (v5 < 0x10)
    {
      v18 = 0;
LABEL_22:
      v26 = v5 - v18;
      v27 = (_WORD *)(v16 + 2 * v18);
      v28 = &v7->i32[v18];
      do
      {
        v29 = *v28++;
        _S0 = (float)v29;
        __asm { FCVT            H0, S0 }
        *v27++ = LOWORD(_S0);
        --v26;
      }
      while (v26);
      goto LABEL_24;
    }
    v18 = v5 & 0xFFFFFFFFFFFFFFF0;
    v19 = v7 + 2;
    v20 = (float16x8_t *)(v16 + 16);
    v21 = v5 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v22 = v19[-2];
      v23 = v19[-1];
      v24 = *v19;
      v25 = v19[1];
      v19 += 4;
      v20[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(v22)), vcvtq_f32_s32(v23));
      *v20 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(v24)), vcvtq_f32_s32(v25));
      v20 += 2;
      v21 -= 16;
    }
    while (v21);
    if (v5 != v18)
      goto LABEL_22;
  }
LABEL_24:
  v41 = 0;
  v42 = 0;
  v43 = 0;
  nitro::ndarray<half>::ndarray(&v44, &v49, (uint64_t)&v54, (uint64_t)&v41, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v44);
  if (__p)
  {
    v48 = __p;
    operator delete(__p);
  }
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  v38 = v50;
  if (v50)
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
  if (v54)
  {
    v55 = v54;
    operator delete(v54);
  }
}

void sub_1911FC340(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911FC39C()
{
  __cxa_end_catch();
  JUMPOUT(0x1911FC3B4);
}

void nitro::ndarray<half>::load_cast_from<long long>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  int64x2_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  unint64_t v19;
  float16x8_t *v20;
  int64x2_t *v21;
  unint64_t v22;
  _WORD *v23;
  uint64_t *v24;
  uint64_t v25;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  __int128 v40;
  void *v41;
  void *v42;
  void *__p;
  void *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  int64x2_t *v47;
  int64x2_t *v48;
  __int8 *v49;
  char *v50;
  char *v51;
  uint64_t v52;

  v50 = 0;
  v51 = 0;
  v52 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v50);
  if (v51 == v50)
  {
    v7 = 0;
    v5 = 0;
    v47 = 0;
    v48 = 0;
    v49 = 0;
    goto LABEL_13;
  }
  v4 = v51 - v50 - 8;
  if (v4 < 8)
  {
    v5 = 1;
    v6 = v50;
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v13;
    }
    while (v6 != v51);
    goto LABEL_9;
  }
  v8 = (v4 >> 3) + 1;
  v6 = &v50[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v50 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v5 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v47 = 0;
  v48 = 0;
  v49 = 0;
  if (v5)
  {
    if (v5 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (int64x2_t *)operator new(8 * v5);
    v47 = v7;
    v49 = &v7->i8[8 * v5];
    bzero(v7, 8 * v5);
    v48 = (int64x2_t *)v49;
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 16);
    memcpy(v7, (const void *)(v14 + v15), 8 * v5);
    *(_QWORD *)(a2 + 16) = v15 + 8 * v5;
  }
  else
  {
    std::istream::read();
  }
  v16 = operator new[]();
  v45 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2B70;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v46 = v17;
  if (v5)
  {
    if (v5 < 8)
    {
      v18 = 0;
LABEL_22:
      v22 = v5 - v18;
      v23 = (_WORD *)(v16 + 2 * v18);
      v24 = &v7->i64[v18];
      do
      {
        v25 = *v24++;
        _S0 = (float)v25;
        __asm { FCVT            H0, S0 }
        *v23++ = LOWORD(_S0);
        --v22;
      }
      while (v22);
      goto LABEL_24;
    }
    v18 = v5 & 0xFFFFFFFFFFFFFFF8;
    v19 = v5 & 0xFFFFFFFFFFFFFFF8;
    v20 = (float16x8_t *)v16;
    v21 = v7;
    do
    {
      *v20++ = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_s64(*v21)), vcvtq_f64_s64(v21[1]))), vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_s64(v21[2])), vcvtq_f64_s64(v21[3])));
      v21 += 4;
      v19 -= 8;
    }
    while (v19);
    if (v5 != v18)
      goto LABEL_22;
  }
LABEL_24:
  v37 = 0;
  v38 = 0;
  v39 = 0;
  nitro::ndarray<half>::ndarray(&v40, &v45, (uint64_t)&v50, (uint64_t)&v37, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v40);
  if (__p)
  {
    v44 = __p;
    operator delete(__p);
  }
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
  v34 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
}

void sub_1911FC714(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911FC770()
{
  __cxa_end_catch();
  JUMPOUT(0x1911FC788);
}

void nitro::ndarray<half>::load_cast_from<unsigned char>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  size_t v5;
  char *v6;
  uint8x8_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  uint8x8_t *v19;
  float16x8_t *v20;
  unint64_t v21;
  uint8x16_t v22;
  uint16x8_t v23;
  float16x8_t v24;
  uint16x8_t v25;
  float16x8_t v26;
  uint16x8_t v27;
  float16x8_t v28;
  uint16x8_t v29;
  unint64_t v30;
  uint8x8_t *v31;
  float16x8_t *v32;
  unint64_t v33;
  uint8x8_t v34;
  uint16x8_t v35;
  size_t v36;
  _WORD *v37;
  uint8x8_t *v38;
  unsigned int v39;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  __int128 v54;
  void *v55;
  void *v56;
  void *__p;
  void *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint8x8_t *v61;
  uint8x8_t *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;

  v64 = 0;
  v65 = 0;
  v66 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v64);
  if (v65 == v64)
  {
    v7 = 0;
    v5 = 0;
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v8 = *(_QWORD *)(a2 + 8);
    if (!v8)
      goto LABEL_5;
    goto LABEL_13;
  }
  v4 = v65 - v64 - 8;
  if (v4 >= 8)
  {
    v9 = (v4 >> 3) + 1;
    v6 = &v64[8 * (v9 & 0x3FFFFFFFFFFFFFFELL)];
    v10 = v64 + 8;
    v11 = 1;
    v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
    v13 = 1;
    do
    {
      v11 *= *(v10 - 1);
      v13 *= *v10;
      v10 += 2;
      v12 -= 2;
    }
    while (v12);
    v5 = v13 * v11;
    if (v9 == (v9 & 0x3FFFFFFFFFFFFFFELL))
      goto LABEL_10;
  }
  else
  {
    v5 = 1;
    v6 = v64;
  }
  do
  {
    v14 = *(_QWORD *)v6;
    v6 += 8;
    v5 *= v14;
  }
  while (v6 != v65);
LABEL_10:
  v61 = 0;
  v62 = 0;
  v63 = 0;
  if (v5)
  {
    if ((v5 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (uint8x8_t *)operator new(v5);
    v61 = v7;
    v63 = (char *)v7 + v5;
    bzero(v7, v5);
    v62 = (uint8x8_t *)((char *)v7 + v5);
    v8 = *(_QWORD *)(a2 + 8);
    if (v8)
      goto LABEL_13;
LABEL_5:
    std::istream::read();
    goto LABEL_14;
  }
  v7 = 0;
  v8 = *(_QWORD *)(a2 + 8);
  if (!v8)
    goto LABEL_5;
LABEL_13:
  v15 = *(_QWORD *)(a2 + 16);
  memcpy(v7, (const void *)(v8 + v15), v5);
  *(_QWORD *)(a2 + 16) = v15 + v5;
LABEL_14:
  v16 = operator new[]();
  v59 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2B70;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v60 = v17;
  if (!v5)
    goto LABEL_30;
  if (v5 < 8)
  {
    v18 = 0;
    goto LABEL_28;
  }
  if (v5 >= 0x20)
  {
    v18 = v5 & 0xFFFFFFFFFFFFFFE0;
    v19 = v7 + 2;
    v20 = (float16x8_t *)(v16 + 32);
    v21 = v5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v22 = *(uint8x16_t *)v19[-2].i8;
      v23 = vmovl_u8(*(uint8x8_t *)v22.i8);
      v24 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v23.i8))), vcvtq_f32_u32(vmovl_high_u16(v23)));
      v25 = vmovl_high_u8(v22);
      v26 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v25.i8))), vcvtq_f32_u32(vmovl_high_u16(v25)));
      v27 = vmovl_u8(*v19);
      v28 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v27.i8))), vcvtq_f32_u32(vmovl_high_u16(v27)));
      v29 = vmovl_high_u8(*(uint8x16_t *)v19->i8);
      v20[-2] = v24;
      v20[-1] = v26;
      *v20 = v28;
      v20[1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v29.i8))), vcvtq_f32_u32(vmovl_high_u16(v29)));
      v20 += 4;
      v19 += 4;
      v21 -= 32;
    }
    while (v21);
    if (v5 == v18)
      goto LABEL_30;
    if ((v5 & 0x18) == 0)
    {
LABEL_28:
      v36 = v5 - v18;
      v37 = (_WORD *)(v16 + 2 * v18);
      v38 = (uint8x8_t *)((char *)v7 + v18);
      do
      {
        v39 = v38->u8[0];
        v38 = (uint8x8_t *)((char *)v38 + 1);
        _S0 = (float)v39;
        __asm { FCVT            H0, S0 }
        *v37++ = LOWORD(_S0);
        --v36;
      }
      while (v36);
      goto LABEL_30;
    }
  }
  else
  {
    v18 = 0;
  }
  v30 = v18;
  v18 = v5 & 0xFFFFFFFFFFFFFFF8;
  v31 = (uint8x8_t *)((char *)v7 + v30);
  v32 = (float16x8_t *)(v16 + 2 * v30);
  v33 = v30 - (v5 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    v34 = *v31++;
    v35 = vmovl_u8(v34);
    *v32++ = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v35.i8))), vcvtq_f32_u32(vmovl_high_u16(v35)));
    v33 += 8;
  }
  while (v33);
  if (v5 != v18)
    goto LABEL_28;
LABEL_30:
  v51 = 0;
  v52 = 0;
  v53 = 0;
  nitro::ndarray<half>::ndarray(&v54, &v59, (uint64_t)&v64, (uint64_t)&v51, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v54);
  if (__p)
  {
    v58 = __p;
    operator delete(__p);
  }
  if (v55)
  {
    v56 = v55;
    operator delete(v55);
  }
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
  v48 = v60;
  if (v60)
  {
    p_shared_owners = (unint64_t *)&v60->__shared_owners_;
    do
      v50 = __ldaxr(p_shared_owners);
    while (__stlxr(v50 - 1, p_shared_owners));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  if (v61)
  {
    v62 = v61;
    operator delete(v61);
  }
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
}

void sub_1911FCB8C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911FCBE8()
{
  __cxa_end_catch();
  JUMPOUT(0x1911FCC00);
}

void nitro::ndarray<half>::load_cast_from<unsigned short>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  uint16x4_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  uint16x4_t *v19;
  float16x8_t *v20;
  unint64_t v21;
  float16x8_t v22;
  unint64_t v23;
  uint64_t v24;
  _WORD *v25;
  uint16x4_t *v26;
  unsigned int v27;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  __int128 v42;
  void *v43;
  void *v44;
  void *__p;
  void *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint16x4_t *v49;
  uint16x4_t *v50;
  uint16x4_t *v51;
  char *v52;
  char *v53;
  uint64_t v54;

  v52 = 0;
  v53 = 0;
  v54 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v52);
  if (v53 == v52)
  {
    v7 = 0;
    v5 = 0;
    v49 = 0;
    v50 = 0;
    v51 = 0;
    goto LABEL_13;
  }
  v4 = v53 - v52 - 8;
  if (v4 < 8)
  {
    v5 = 1;
    v6 = v52;
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v13;
    }
    while (v6 != v53);
    goto LABEL_9;
  }
  v8 = (v4 >> 3) + 1;
  v6 = &v52[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v52 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v5 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v49 = 0;
  v50 = 0;
  v51 = 0;
  if (v5)
  {
    if ((v5 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (uint16x4_t *)operator new(2 * v5);
    v49 = v7;
    v51 = (uint16x4_t *)((char *)v7 + 2 * v5);
    bzero(v7, 2 * v5);
    v50 = v51;
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 16);
    memcpy(v7, (const void *)(v14 + v15), 2 * v5);
    *(_QWORD *)(a2 + 16) = v15 + 2 * v5;
  }
  else
  {
    std::istream::read();
  }
  v16 = operator new[]();
  v47 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2B70;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v48 = v17;
  if (v5)
  {
    if (v5 < 0x10)
    {
      v18 = 0;
LABEL_22:
      v23 = v5 - v18;
      v24 = 2 * v18;
      v25 = (_WORD *)(v16 + 2 * v18);
      v26 = (uint16x4_t *)((char *)v7 + v24);
      do
      {
        v27 = v26->u16[0];
        v26 = (uint16x4_t *)((char *)v26 + 2);
        _S0 = (float)v27;
        __asm { FCVT            H0, S0 }
        *v25++ = LOWORD(_S0);
        --v23;
      }
      while (v23);
      goto LABEL_24;
    }
    v18 = v5 & 0xFFFFFFFFFFFFFFF0;
    v19 = v7 + 2;
    v20 = (float16x8_t *)(v16 + 16);
    v21 = v5 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v22 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*v19))), vcvtq_f32_u32(vmovl_high_u16(*(uint16x8_t *)v19->i8)));
      v20[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(v19[-2]))), vcvtq_f32_u32(vmovl_high_u16(*(uint16x8_t *)v19[-2].i8)));
      *v20 = v22;
      v19 += 4;
      v20 += 2;
      v21 -= 16;
    }
    while (v21);
    if (v5 != v18)
      goto LABEL_22;
  }
LABEL_24:
  v39 = 0;
  v40 = 0;
  v41 = 0;
  nitro::ndarray<half>::ndarray(&v42, &v47, (uint64_t)&v52, (uint64_t)&v39, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v42);
  if (__p)
  {
    v46 = __p;
    operator delete(__p);
  }
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (*((_QWORD *)&v42 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
  v36 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v49)
  {
    v50 = v49;
    operator delete(v49);
  }
  if (v52)
  {
    v53 = v52;
    operator delete(v52);
  }
}

void sub_1911FCF68(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911FCFC4()
{
  __cxa_end_catch();
  JUMPOUT(0x1911FCFDCLL);
}

void nitro::ndarray<half>::load_cast_from<unsigned int>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  uint32x4_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  uint32x4_t *v19;
  float16x8_t *v20;
  unint64_t v21;
  uint32x4_t v22;
  uint32x4_t v23;
  uint32x4_t v24;
  uint32x4_t v25;
  unint64_t v26;
  _WORD *v27;
  unsigned int *v28;
  unsigned int v29;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  __int128 v44;
  void *v45;
  void *v46;
  void *__p;
  void *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint32x4_t *v51;
  uint32x4_t *v52;
  uint32x4_t *v53;
  char *v54;
  char *v55;
  uint64_t v56;

  v54 = 0;
  v55 = 0;
  v56 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v54);
  if (v55 == v54)
  {
    v7 = 0;
    v5 = 0;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    goto LABEL_13;
  }
  v4 = v55 - v54 - 8;
  if (v4 < 8)
  {
    v5 = 1;
    v6 = v54;
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v13;
    }
    while (v6 != v55);
    goto LABEL_9;
  }
  v8 = (v4 >> 3) + 1;
  v6 = &v54[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v54 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v5 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v51 = 0;
  v52 = 0;
  v53 = 0;
  if (v5)
  {
    if (v5 >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (uint32x4_t *)operator new(4 * v5);
    v51 = v7;
    v53 = (uint32x4_t *)((char *)v7 + 4 * v5);
    bzero(v7, 4 * v5);
    v52 = v53;
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 16);
    memcpy(v7, (const void *)(v14 + v15), 4 * v5);
    *(_QWORD *)(a2 + 16) = v15 + 4 * v5;
  }
  else
  {
    std::istream::read();
  }
  v16 = operator new[]();
  v49 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2B70;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v50 = v17;
  if (v5)
  {
    if (v5 < 0x10)
    {
      v18 = 0;
LABEL_22:
      v26 = v5 - v18;
      v27 = (_WORD *)(v16 + 2 * v18);
      v28 = (unsigned int *)v7 + v18;
      do
      {
        v29 = *v28++;
        _S0 = (float)v29;
        __asm { FCVT            H0, S0 }
        *v27++ = LOWORD(_S0);
        --v26;
      }
      while (v26);
      goto LABEL_24;
    }
    v18 = v5 & 0xFFFFFFFFFFFFFFF0;
    v19 = v7 + 2;
    v20 = (float16x8_t *)(v16 + 16);
    v21 = v5 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v22 = v19[-2];
      v23 = v19[-1];
      v24 = *v19;
      v25 = v19[1];
      v19 += 4;
      v20[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(v22)), vcvtq_f32_u32(v23));
      *v20 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(v24)), vcvtq_f32_u32(v25));
      v20 += 2;
      v21 -= 16;
    }
    while (v21);
    if (v5 != v18)
      goto LABEL_22;
  }
LABEL_24:
  v41 = 0;
  v42 = 0;
  v43 = 0;
  nitro::ndarray<half>::ndarray(&v44, &v49, (uint64_t)&v54, (uint64_t)&v41, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v44);
  if (__p)
  {
    v48 = __p;
    operator delete(__p);
  }
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  v38 = v50;
  if (v50)
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
  if (v54)
  {
    v55 = v54;
    operator delete(v54);
  }
}

void sub_1911FD334(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911FD390()
{
  __cxa_end_catch();
  JUMPOUT(0x1911FD3A8);
}

void nitro::ndarray<half>::load_cast_from<unsigned long long>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  uint64x2_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  unint64_t v19;
  float16x8_t *v20;
  uint64x2_t *v21;
  unint64_t v22;
  _WORD *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  __int128 v40;
  void *v41;
  void *v42;
  void *__p;
  void *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64x2_t *v47;
  uint64x2_t *v48;
  __int8 *v49;
  char *v50;
  char *v51;
  uint64_t v52;

  v50 = 0;
  v51 = 0;
  v52 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v50);
  if (v51 == v50)
  {
    v7 = 0;
    v5 = 0;
    v47 = 0;
    v48 = 0;
    v49 = 0;
    goto LABEL_13;
  }
  v4 = v51 - v50 - 8;
  if (v4 < 8)
  {
    v5 = 1;
    v6 = v50;
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v13;
    }
    while (v6 != v51);
    goto LABEL_9;
  }
  v8 = (v4 >> 3) + 1;
  v6 = &v50[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v50 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v5 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v47 = 0;
  v48 = 0;
  v49 = 0;
  if (v5)
  {
    if (v5 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (uint64x2_t *)operator new(8 * v5);
    v47 = v7;
    v49 = &v7->i8[8 * v5];
    bzero(v7, 8 * v5);
    v48 = (uint64x2_t *)v49;
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 16);
    memcpy(v7, (const void *)(v14 + v15), 8 * v5);
    *(_QWORD *)(a2 + 16) = v15 + 8 * v5;
  }
  else
  {
    std::istream::read();
  }
  v16 = operator new[]();
  v45 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2B70;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v46 = v17;
  if (v5)
  {
    if (v5 < 8)
    {
      v18 = 0;
LABEL_22:
      v22 = v5 - v18;
      v23 = (_WORD *)(v16 + 2 * v18);
      v24 = (unint64_t *)v7 + v18;
      do
      {
        v25 = *v24++;
        _S0 = (float)v25;
        __asm { FCVT            H0, S0 }
        *v23++ = LOWORD(_S0);
        --v22;
      }
      while (v22);
      goto LABEL_24;
    }
    v18 = v5 & 0xFFFFFFFFFFFFFFF8;
    v19 = v5 & 0xFFFFFFFFFFFFFFF8;
    v20 = (float16x8_t *)v16;
    v21 = v7;
    do
    {
      *v20++ = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64(*v21)), vcvtq_f64_u64(v21[1]))), vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64(v21[2])), vcvtq_f64_u64(v21[3])));
      v21 += 4;
      v19 -= 8;
    }
    while (v19);
    if (v5 != v18)
      goto LABEL_22;
  }
LABEL_24:
  v37 = 0;
  v38 = 0;
  v39 = 0;
  nitro::ndarray<half>::ndarray(&v40, &v45, (uint64_t)&v50, (uint64_t)&v37, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v40);
  if (__p)
  {
    v44 = __p;
    operator delete(__p);
  }
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
  v34 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
}

void sub_1911FD708(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911FD764()
{
  __cxa_end_catch();
  JUMPOUT(0x1911FD77CLL);
}

void nitro::ndarray<half>::load_cast_from<half>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  __int128 *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  __int128 *v19;
  _OWORD *v20;
  unint64_t v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  _WORD *v25;
  __int16 *v26;
  __int16 v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  __int128 v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  __int128 *v44;
  __int128 *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;

  v47 = 0;
  v48 = 0;
  v49 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v47);
  if (v48 == v47)
  {
    v7 = 0;
    v5 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    goto LABEL_13;
  }
  v4 = v48 - v47 - 8;
  if (v4 < 8)
  {
    v5 = 1;
    v6 = v47;
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v13;
    }
    while (v6 != v48);
    goto LABEL_9;
  }
  v8 = (v4 >> 3) + 1;
  v6 = &v47[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v47 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v5 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v44 = 0;
  v45 = 0;
  v46 = 0;
  if (v5)
  {
    if ((v5 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (__int128 *)operator new(2 * v5);
    v44 = v7;
    v46 = (char *)v7 + 2 * v5;
    bzero(v7, 2 * v5);
    v45 = (__int128 *)v46;
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 16);
    memcpy(v7, (const void *)(v14 + v15), 2 * v5);
    *(_QWORD *)(a2 + 16) = v15 + 2 * v5;
  }
  else
  {
    std::istream::read();
  }
  v16 = operator new[]();
  v42 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2B70;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v43 = v17;
  if (v5)
  {
    if (v5 < 0x10)
    {
      v18 = 0;
LABEL_22:
      v23 = v5 - v18;
      v24 = 2 * v18;
      v25 = (_WORD *)(v16 + 2 * v18);
      v26 = (__int16 *)((char *)v7 + v24);
      do
      {
        v27 = *v26++;
        *v25++ = v27;
        --v23;
      }
      while (v23);
      goto LABEL_24;
    }
    v18 = v5 & 0xFFFFFFFFFFFFFFF0;
    v19 = v7 + 1;
    v20 = (_OWORD *)(v16 + 16);
    v21 = v5 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v22 = *v19;
      *(v20 - 1) = *(v19 - 1);
      *v20 = v22;
      v19 += 2;
      v20 += 2;
      v21 -= 16;
    }
    while (v21);
    if (v5 != v18)
      goto LABEL_22;
  }
LABEL_24:
  v34 = 0;
  v35 = 0;
  v36 = 0;
  nitro::ndarray<half>::ndarray(&v37, &v42, (uint64_t)&v47, (uint64_t)&v34, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v37);
  if (__p)
  {
    v41 = __p;
    operator delete(__p);
  }
  if (v38)
  {
    v39 = v38;
    operator delete(v38);
  }
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
  if (*((_QWORD *)&v37 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  v31 = v43;
  if (v43)
  {
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
}

void sub_1911FDAAC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911FDB08()
{
  __cxa_end_catch();
  JUMPOUT(0x1911FDB20);
}

void nitro::ndarray<half>::load_cast_from<float>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  float32x4_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  float32x4_t *v19;
  float16x8_t *v20;
  unint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  unint64_t v26;
  _WORD *v27;
  __int32 *v28;
  int v29;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  __int128 v44;
  void *v45;
  void *v46;
  void *__p;
  void *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  float32x4_t *v51;
  float32x4_t *v52;
  float32x4_t *v53;
  char *v54;
  char *v55;
  uint64_t v56;

  v54 = 0;
  v55 = 0;
  v56 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v54);
  if (v55 == v54)
  {
    v7 = 0;
    v5 = 0;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    goto LABEL_13;
  }
  v4 = v55 - v54 - 8;
  if (v4 < 8)
  {
    v5 = 1;
    v6 = v54;
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v13;
    }
    while (v6 != v55);
    goto LABEL_9;
  }
  v8 = (v4 >> 3) + 1;
  v6 = &v54[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v54 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v5 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v51 = 0;
  v52 = 0;
  v53 = 0;
  if (v5)
  {
    if (v5 >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (float32x4_t *)operator new(4 * v5);
    v51 = v7;
    v53 = (float32x4_t *)((char *)v7 + 4 * v5);
    bzero(v7, 4 * v5);
    v52 = v53;
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 16);
    memcpy(v7, (const void *)(v14 + v15), 4 * v5);
    *(_QWORD *)(a2 + 16) = v15 + 4 * v5;
  }
  else
  {
    std::istream::read();
  }
  v16 = operator new[]();
  v49 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2B70;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v50 = v17;
  if (v5)
  {
    if (v5 < 0x10)
    {
      v18 = 0;
LABEL_22:
      v26 = v5 - v18;
      v27 = (_WORD *)(v16 + 2 * v18);
      v28 = &v7->i32[v18];
      do
      {
        v29 = *v28++;
        _S0 = v29;
        __asm { FCVT            H0, S0 }
        *v27++ = _S0;
        --v26;
      }
      while (v26);
      goto LABEL_24;
    }
    v18 = v5 & 0xFFFFFFFFFFFFFFF0;
    v19 = v7 + 2;
    v20 = (float16x8_t *)(v16 + 16);
    v21 = v5 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v23 = v19[-2];
      v22 = v19[-1];
      v25 = *v19;
      v24 = v19[1];
      v19 += 4;
      v20[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v23), v22);
      *v20 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v25), v24);
      v20 += 2;
      v21 -= 16;
    }
    while (v21);
    if (v5 != v18)
      goto LABEL_22;
  }
LABEL_24:
  v41 = 0;
  v42 = 0;
  v43 = 0;
  nitro::ndarray<half>::ndarray(&v44, &v49, (uint64_t)&v54, (uint64_t)&v41, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v44);
  if (__p)
  {
    v48 = __p;
    operator delete(__p);
  }
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  v38 = v50;
  if (v50)
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
  if (v54)
  {
    v55 = v54;
    operator delete(v54);
  }
}

void sub_1911FDE64(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911FDEC0()
{
  __cxa_end_catch();
  JUMPOUT(0x1911FDED8);
}

void nitro::ndarray<half>::load_cast_from<double>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  __int128 *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  __int128 *v19;
  _OWORD *v20;
  unint64_t v21;
  unint64_t v37;
  _WORD *v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  __int128 v51;
  void *v52;
  void *v53;
  void *__p;
  void *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  __int128 *v58;
  __int128 *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;

  v61 = 0;
  v62 = 0;
  v63 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v61);
  if (v62 == v61)
  {
    v7 = 0;
    v5 = 0;
    v58 = 0;
    v59 = 0;
    v60 = 0;
    goto LABEL_13;
  }
  v4 = v62 - v61 - 8;
  if (v4 < 8)
  {
    v5 = 1;
    v6 = v61;
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v13;
    }
    while (v6 != v62);
    goto LABEL_9;
  }
  v8 = (v4 >> 3) + 1;
  v6 = &v61[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v61 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v5 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v58 = 0;
  v59 = 0;
  v60 = 0;
  if (v5)
  {
    if (v5 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (__int128 *)operator new(8 * v5);
    v58 = v7;
    v60 = (char *)v7 + 8 * v5;
    bzero(v7, 8 * v5);
    v59 = (__int128 *)v60;
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 16);
    memcpy(v7, (const void *)(v14 + v15), 8 * v5);
    *(_QWORD *)(a2 + 16) = v15 + 8 * v5;
  }
  else
  {
    std::istream::read();
  }
  v16 = operator new[]();
  v56 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2B70;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v57 = v17;
  if (v5)
  {
    if (v5 < 0x10)
    {
      v18 = 0;
LABEL_22:
      v37 = v5 - v18;
      v38 = (_WORD *)(v16 + 2 * v18);
      v39 = (uint64_t *)v7 + v18;
      do
      {
        v40 = *v39++;
        _D0 = v40;
        __asm { FCVT            H0, D0 }
        *v38++ = _D0;
        --v37;
      }
      while (v37);
      goto LABEL_24;
    }
    v18 = v5 & 0xFFFFFFFFFFFFFFF0;
    v19 = v7 + 4;
    v20 = (_OWORD *)(v16 + 16);
    v21 = v5 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      _Q3 = *(v19 - 2);
      _Q2 = *(v19 - 1);
      _Q1 = *(v19 - 4);
      _Q4 = *(v19 - 3);
      _Q5 = v19[2];
      _Q0 = v19[3];
      _Q7 = *v19;
      _Q6 = v19[1];
      v19 += 8;
      _D16 = *((_QWORD *)&_Q1 + 1);
      __asm
      {
        FCVT            H1, D1
        FCVT            H17, D4
        FCVT            H16, D16
      }
      *(_QWORD *)&_Q4 = *((_QWORD *)&_Q4 + 1);
      __asm { FCVT            H4, D4 }
      _D18 = *((_QWORD *)&_Q7 + 1);
      __asm { FCVT            H18, D18 }
      WORD1(_Q1) = _D16;
      __asm { FCVT            H7, D7 }
      WORD1(_Q7) = _D18;
      __asm { FCVT            H16, D6 }
      WORD2(_Q1) = _H17;
      WORD2(_Q7) = _D16;
      __asm { FCVT            H16, D3 }
      *(_QWORD *)&_Q3 = *((_QWORD *)&_Q3 + 1);
      WORD3(_Q1) = _Q4;
      __asm
      {
        FCVT            H3, D3
        FCVT            H4, D2
      }
      *(_QWORD *)&_Q2 = *((_QWORD *)&_Q2 + 1);
      __asm { FCVT            H2, D2 }
      WORD4(_Q1) = _D16;
      *(_QWORD *)&_Q6 = *((_QWORD *)&_Q6 + 1);
      __asm { FCVT            H6, D6 }
      WORD3(_Q7) = _Q6;
      WORD5(_Q1) = _Q3;
      __asm { FCVT            H3, D5 }
      WORD4(_Q7) = _Q3;
      *(_QWORD *)&_Q3 = *((_QWORD *)&_Q5 + 1);
      WORD6(_Q1) = _Q4;
      __asm { FCVT            H3, D3 }
      WORD5(_Q7) = _Q3;
      __asm { FCVT            H3, D0 }
      HIWORD(_Q1) = _Q2;
      WORD6(_Q7) = _Q3;
      *(_QWORD *)&_Q0 = *((_QWORD *)&_Q0 + 1);
      __asm { FCVT            H0, D0 }
      HIWORD(_Q7) = _Q0;
      *(v20 - 1) = _Q1;
      *v20 = _Q7;
      v20 += 2;
      v21 -= 16;
    }
    while (v21);
    if (v5 != v18)
      goto LABEL_22;
  }
LABEL_24:
  v48 = 0;
  v49 = 0;
  v50 = 0;
  nitro::ndarray<half>::ndarray(&v51, &v56, (uint64_t)&v61, (uint64_t)&v48, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v51);
  if (__p)
  {
    v55 = __p;
    operator delete(__p);
  }
  if (v52)
  {
    v53 = v52;
    operator delete(v52);
  }
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
  if (*((_QWORD *)&v51 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
  v45 = v57;
  if (v57)
  {
    p_shared_owners = (unint64_t *)&v57->__shared_owners_;
    do
      v47 = __ldaxr(p_shared_owners);
    while (__stlxr(v47 - 1, p_shared_owners));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
  if (v61)
  {
    v62 = v61;
    operator delete(v61);
  }
}

void sub_1911FE2AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911FE308()
{
  __cxa_end_catch();
  JUMPOUT(0x1911FE320);
}

void nitro::ndarray<float>::load_cast_from<signed char>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  size_t v5;
  char *v6;
  int8x16_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t *v20;
  float32x4_t *v21;
  unint64_t v22;
  int8x8_t v23;
  unint64_t v24;
  float32x4_t *v25;
  int8x16_t *v26;
  int8x16_t v27;
  int8x8_t v28;
  size_t v29;
  float *v30;
  char *v31;
  int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  __int128 v42;
  void *v43;
  void *v44;
  void *__p;
  void *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  int8x16_t *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;

  v52 = 0;
  v53 = 0;
  v54 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v52);
  if (v53 == v52)
  {
    v7 = 0;
    v5 = 0;
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v8 = *(_QWORD *)(a2 + 8);
    if (!v8)
      goto LABEL_5;
    goto LABEL_13;
  }
  v4 = v53 - v52 - 8;
  if (v4 >= 8)
  {
    v9 = (v4 >> 3) + 1;
    v6 = &v52[8 * (v9 & 0x3FFFFFFFFFFFFFFELL)];
    v10 = v52 + 8;
    v11 = 1;
    v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
    v13 = 1;
    do
    {
      v11 *= *(v10 - 1);
      v13 *= *v10;
      v10 += 2;
      v12 -= 2;
    }
    while (v12);
    v5 = v13 * v11;
    if (v9 == (v9 & 0x3FFFFFFFFFFFFFFELL))
      goto LABEL_10;
  }
  else
  {
    v5 = 1;
    v6 = v52;
  }
  do
  {
    v14 = *(_QWORD *)v6;
    v6 += 8;
    v5 *= v14;
  }
  while (v6 != v53);
LABEL_10:
  v49 = 0;
  v50 = 0;
  v51 = 0;
  if (v5)
  {
    if ((v5 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (int8x16_t *)operator new(v5);
    v49 = v7;
    v51 = &v7->i8[v5];
    bzero(v7, v5);
    v50 = &v7->i8[v5];
    v8 = *(_QWORD *)(a2 + 8);
    if (v8)
      goto LABEL_13;
LABEL_5:
    std::istream::read();
    goto LABEL_14;
  }
  v7 = 0;
  v8 = *(_QWORD *)(a2 + 8);
  if (!v8)
    goto LABEL_5;
LABEL_13:
  v15 = *(_QWORD *)(a2 + 16);
  memcpy(v7, (const void *)(v8 + v15), v5);
  *(_QWORD *)(a2 + 16) = v15 + v5;
LABEL_14:
  v16 = operator new[]();
  v47 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3890;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v48 = v17;
  if (!v5)
    goto LABEL_31;
  if (v5 < 8)
  {
    v18 = 0;
    goto LABEL_29;
  }
  if (v5 >= 0x10)
  {
    v18 = v5 & 0xFFFFFFFFFFFFFFF0;
    v24 = v5 & 0xFFFFFFFFFFFFFFF0;
    v25 = (float32x4_t *)v16;
    v26 = v7;
    do
    {
      v27 = *v26++;
      v28 = (int8x8_t)vextq_s8(v27, v27, 8uLL).u64[0];
      *v25 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v27.i8, *(int8x8_t *)v27.i8), 8uLL), 8uLL)));
      v25[1] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v27.i8, *(int8x8_t *)v27.i8), 8uLL), 8uLL)));
      v25[2] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v28, *(int8x8_t *)v27.i8), 8uLL), 8uLL)));
      v25[3] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v28, *(int8x8_t *)v27.i8), 8uLL), 8uLL)));
      v25 += 4;
      v24 -= 16;
    }
    while (v24);
    if (v5 == v18)
      goto LABEL_31;
    if ((v5 & 8) == 0)
    {
LABEL_29:
      v29 = v5 - v18;
      v30 = (float *)(v16 + 4 * v18);
      v31 = &v7->i8[v18];
      do
      {
        v32 = *v31++;
        *v30++ = (float)v32;
        --v29;
      }
      while (v29);
      goto LABEL_31;
    }
  }
  else
  {
    v18 = 0;
  }
  v19 = v18;
  v18 = v5 & 0xFFFFFFFFFFFFFFF8;
  v20 = (int8x8_t *)&v7->i8[v19];
  v21 = (float32x4_t *)(v16 + 4 * v19);
  v22 = v19 - (v5 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    v23 = *v20++;
    *v21 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v23, v23), 8uLL), 8uLL)));
    v21[1] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v23, v23), 8uLL), 8uLL)));
    v21 += 2;
    v22 += 8;
  }
  while (v22);
  if (v5 != v18)
    goto LABEL_29;
LABEL_31:
  v39 = 0;
  v40 = 0;
  v41 = 0;
  nitro::ndarray<float>::ndarray(&v42, &v47, (uint64_t)&v52, (uint64_t)&v39, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v42);
  if (__p)
  {
    v46 = __p;
    operator delete(__p);
  }
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (*((_QWORD *)&v42 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
  v36 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v49)
  {
    v50 = (char *)v49;
    operator delete(v49);
  }
  if (v52)
  {
    v53 = v52;
    operator delete(v52);
  }
}

void sub_1911FE718(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911FE774()
{
  __cxa_end_catch();
  JUMPOUT(0x1911FE78CLL);
}

void nitro::ndarray<float>::load_cast_from<short>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  int16x4_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  int16x4_t *v19;
  float32x4_t *v20;
  unint64_t v21;
  int16x8_t v22;
  float32x4_t v23;
  int32x4_t v24;
  unint64_t v25;
  float *v26;
  __int16 *v27;
  int v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  __int128 v38;
  void *v39;
  void *v40;
  void *__p;
  void *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  int16x4_t *v45;
  int16x4_t *v46;
  int16x4_t *v47;
  char *v48;
  char *v49;
  uint64_t v50;

  v48 = 0;
  v49 = 0;
  v50 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v48);
  if (v49 == v48)
  {
    v7 = 0;
    v5 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    goto LABEL_13;
  }
  v4 = v49 - v48 - 8;
  if (v4 < 8)
  {
    v5 = 1;
    v6 = v48;
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v13;
    }
    while (v6 != v49);
    goto LABEL_9;
  }
  v8 = (v4 >> 3) + 1;
  v6 = &v48[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v48 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v5 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v45 = 0;
  v46 = 0;
  v47 = 0;
  if (v5)
  {
    if ((v5 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (int16x4_t *)operator new(2 * v5);
    v45 = v7;
    v47 = (int16x4_t *)((char *)v7 + 2 * v5);
    bzero(v7, 2 * v5);
    v46 = v47;
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 16);
    memcpy(v7, (const void *)(v14 + v15), 2 * v5);
    *(_QWORD *)(a2 + 16) = v15 + 2 * v5;
  }
  else
  {
    std::istream::read();
  }
  v16 = operator new[]();
  v43 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3890;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v44 = v17;
  if (v5)
  {
    if (v5 < 0x10)
    {
      v18 = 0;
LABEL_22:
      v25 = v5 - v18;
      v26 = (float *)(v16 + 4 * v18);
      v27 = (__int16 *)v7 + v18;
      do
      {
        v28 = *v27++;
        *v26++ = (float)v28;
        --v25;
      }
      while (v25);
      goto LABEL_24;
    }
    v18 = v5 & 0xFFFFFFFFFFFFFFF0;
    v19 = v7 + 2;
    v20 = (float32x4_t *)(v16 + 32);
    v21 = v5 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v22 = *(int16x8_t *)v19[-2].i8;
      v23 = vcvtq_f32_s32(vmovl_s16(*v19));
      v24 = vmovl_high_s16(*(int16x8_t *)v19->i8);
      v20[-2] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v22.i8));
      v20[-1] = vcvtq_f32_s32(vmovl_high_s16(v22));
      *v20 = v23;
      v20[1] = vcvtq_f32_s32(v24);
      v20 += 4;
      v19 += 4;
      v21 -= 16;
    }
    while (v21);
    if (v5 != v18)
      goto LABEL_22;
  }
LABEL_24:
  v35 = 0;
  v36 = 0;
  v37 = 0;
  nitro::ndarray<float>::ndarray(&v38, &v43, (uint64_t)&v48, (uint64_t)&v35, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v38);
  if (__p)
  {
    v42 = __p;
    operator delete(__p);
  }
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v35)
  {
    v36 = v35;
    operator delete(v35);
  }
  v32 = v44;
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
}

void sub_1911FEAE8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911FEB44()
{
  __cxa_end_catch();
  JUMPOUT(0x1911FEB5CLL);
}

void nitro::ndarray<float>::load_cast_from<int>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  int32x4_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  int32x4_t *v19;
  float32x4_t *v20;
  unint64_t v21;
  float32x4_t v22;
  unint64_t v23;
  uint64_t v24;
  float *v25;
  int *v26;
  int v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  __int128 v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  int32x4_t *v44;
  int32x4_t *v45;
  __int8 *v46;
  char *v47;
  char *v48;
  uint64_t v49;

  v47 = 0;
  v48 = 0;
  v49 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v47);
  if (v48 == v47)
  {
    v7 = 0;
    v5 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    goto LABEL_13;
  }
  v4 = v48 - v47 - 8;
  if (v4 < 8)
  {
    v5 = 1;
    v6 = v47;
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v13;
    }
    while (v6 != v48);
    goto LABEL_9;
  }
  v8 = (v4 >> 3) + 1;
  v6 = &v47[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v47 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v5 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v44 = 0;
  v45 = 0;
  v46 = 0;
  if (v5)
  {
    if (v5 >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (int32x4_t *)operator new(4 * v5);
    v44 = v7;
    v46 = &v7->i8[4 * v5];
    bzero(v7, 4 * v5);
    v45 = (int32x4_t *)v46;
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 16);
    memcpy(v7, (const void *)(v14 + v15), 4 * v5);
    *(_QWORD *)(a2 + 16) = v15 + 4 * v5;
  }
  else
  {
    std::istream::read();
  }
  v16 = operator new[]();
  v42 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3890;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v43 = v17;
  if (v5)
  {
    if (v5 < 8)
    {
      v18 = 0;
LABEL_22:
      v23 = v5 - v18;
      v24 = v18;
      v25 = (float *)(v16 + 4 * v18);
      v26 = &v7->i32[v24];
      do
      {
        v27 = *v26++;
        *v25++ = (float)v27;
        --v23;
      }
      while (v23);
      goto LABEL_24;
    }
    v18 = v5 & 0xFFFFFFFFFFFFFFF8;
    v19 = v7 + 1;
    v20 = (float32x4_t *)(v16 + 16);
    v21 = v5 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v22 = vcvtq_f32_s32(*v19);
      v20[-1] = vcvtq_f32_s32(v19[-1]);
      *v20 = v22;
      v19 += 2;
      v20 += 2;
      v21 -= 8;
    }
    while (v21);
    if (v5 != v18)
      goto LABEL_22;
  }
LABEL_24:
  v34 = 0;
  v35 = 0;
  v36 = 0;
  nitro::ndarray<float>::ndarray(&v37, &v42, (uint64_t)&v47, (uint64_t)&v34, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v37);
  if (__p)
  {
    v41 = __p;
    operator delete(__p);
  }
  if (v38)
  {
    v39 = v38;
    operator delete(v38);
  }
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
  if (*((_QWORD *)&v37 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  v31 = v43;
  if (v43)
  {
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
}

void sub_1911FEE9C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911FEEF8()
{
  __cxa_end_catch();
  JUMPOUT(0x1911FEF10);
}

void nitro::ndarray<float>::load_cast_from<long long>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  int64x2_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  int64x2_t *v19;
  float32x4_t *v20;
  unint64_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  unint64_t v26;
  float *v27;
  uint64_t *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  __int128 v39;
  void *v40;
  void *v41;
  void *__p;
  void *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  int64x2_t *v46;
  int64x2_t *v47;
  int64x2_t *v48;
  char *v49;
  char *v50;
  uint64_t v51;

  v49 = 0;
  v50 = 0;
  v51 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v49);
  if (v50 == v49)
  {
    v7 = 0;
    v5 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    goto LABEL_13;
  }
  v4 = v50 - v49 - 8;
  if (v4 < 8)
  {
    v5 = 1;
    v6 = v49;
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v13;
    }
    while (v6 != v50);
    goto LABEL_9;
  }
  v8 = (v4 >> 3) + 1;
  v6 = &v49[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v49 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v5 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v46 = 0;
  v47 = 0;
  v48 = 0;
  if (v5)
  {
    if (v5 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (int64x2_t *)operator new(8 * v5);
    v46 = v7;
    v48 = (int64x2_t *)((char *)v7 + 8 * v5);
    bzero(v7, 8 * v5);
    v47 = v48;
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 16);
    memcpy(v7, (const void *)(v14 + v15), 8 * v5);
    *(_QWORD *)(a2 + 16) = v15 + 8 * v5;
  }
  else
  {
    std::istream::read();
  }
  v16 = operator new[]();
  v44 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3890;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v45 = v17;
  if (v5)
  {
    if (v5 < 8)
    {
      v18 = 0;
LABEL_22:
      v26 = v5 - v18;
      v27 = (float *)(v16 + 4 * v18);
      v28 = &v7->i64[v18];
      do
      {
        v29 = *v28++;
        *v27++ = (float)v29;
        --v26;
      }
      while (v26);
      goto LABEL_24;
    }
    v18 = v5 & 0xFFFFFFFFFFFFFFF8;
    v19 = v7 + 2;
    v20 = (float32x4_t *)(v16 + 16);
    v21 = v5 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v23 = v19[-2];
      v22 = v19[-1];
      v25 = *v19;
      v24 = v19[1];
      v19 += 4;
      v20[-1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_s64(v23)), vcvtq_f64_s64(v22));
      *v20 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_s64(v25)), vcvtq_f64_s64(v24));
      v20 += 2;
      v21 -= 8;
    }
    while (v21);
    if (v5 != v18)
      goto LABEL_22;
  }
LABEL_24:
  v36 = 0;
  v37 = 0;
  v38 = 0;
  nitro::ndarray<float>::ndarray(&v39, &v44, (uint64_t)&v49, (uint64_t)&v36, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v39);
  if (__p)
  {
    v43 = __p;
    operator delete(__p);
  }
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
  v33 = v45;
  if (v45)
  {
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v46)
  {
    v47 = v46;
    operator delete(v46);
  }
  if (v49)
  {
    v50 = v49;
    operator delete(v49);
  }
}

void sub_1911FF264(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911FF2C0()
{
  __cxa_end_catch();
  JUMPOUT(0x1911FF2D8);
}

void nitro::ndarray<float>::load_cast_from<unsigned char>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  size_t v5;
  char *v6;
  int8x16_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  int8x16_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint32x4_t v25;
  unint64_t v26;
  float32x4_t *v27;
  int8x16_t *v28;
  int8x16_t v29;
  size_t v30;
  float *v31;
  char *v32;
  unsigned int v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  __int128 v43;
  void *v44;
  void *v45;
  void *__p;
  void *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  int8x16_t *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;

  v53 = 0;
  v54 = 0;
  v55 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v53);
  if (v54 == v53)
  {
    v7 = 0;
    v5 = 0;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v8 = *(_QWORD *)(a2 + 8);
    if (!v8)
      goto LABEL_5;
    goto LABEL_13;
  }
  v4 = v54 - v53 - 8;
  if (v4 >= 8)
  {
    v9 = (v4 >> 3) + 1;
    v6 = &v53[8 * (v9 & 0x3FFFFFFFFFFFFFFELL)];
    v10 = v53 + 8;
    v11 = 1;
    v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
    v13 = 1;
    do
    {
      v11 *= *(v10 - 1);
      v13 *= *v10;
      v10 += 2;
      v12 -= 2;
    }
    while (v12);
    v5 = v13 * v11;
    if (v9 == (v9 & 0x3FFFFFFFFFFFFFFELL))
      goto LABEL_10;
  }
  else
  {
    v5 = 1;
    v6 = v53;
  }
  do
  {
    v14 = *(_QWORD *)v6;
    v6 += 8;
    v5 *= v14;
  }
  while (v6 != v54);
LABEL_10:
  v50 = 0;
  v51 = 0;
  v52 = 0;
  if (v5)
  {
    if ((v5 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (int8x16_t *)operator new(v5);
    v50 = v7;
    v52 = &v7->i8[v5];
    bzero(v7, v5);
    v51 = &v7->i8[v5];
    v8 = *(_QWORD *)(a2 + 8);
    if (v8)
      goto LABEL_13;
LABEL_5:
    std::istream::read();
    goto LABEL_14;
  }
  v7 = 0;
  v8 = *(_QWORD *)(a2 + 8);
  if (!v8)
    goto LABEL_5;
LABEL_13:
  v15 = *(_QWORD *)(a2 + 16);
  memcpy(v7, (const void *)(v8 + v15), v5);
  *(_QWORD *)(a2 + 16) = v15 + v5;
LABEL_14:
  v16 = operator new[]();
  v48 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3890;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v49 = v17;
  if (!v5)
    goto LABEL_31;
  if (v5 < 8)
  {
    v19 = 0;
    goto LABEL_29;
  }
  if (v5 >= 0x10)
  {
    v19 = v5 & 0xFFFFFFFFFFFFFFF0;
    v18.i64[1] = 0xFFFFFF07FFFFFF06;
    v26 = v5 & 0xFFFFFFFFFFFFFFF0;
    v27 = (float32x4_t *)v16;
    v28 = v7;
    do
    {
      v29 = *v28++;
      v27[2] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v29, (int8x16_t)xmmword_191A741B0));
      v27[3] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v29, (int8x16_t)xmmword_191A741C0));
      *v27 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v29, (int8x16_t)xmmword_191A74190));
      v27[1] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v29, (int8x16_t)xmmword_191A741A0));
      v27 += 4;
      v26 -= 16;
    }
    while (v26);
    if (v5 == v19)
      goto LABEL_31;
    if ((v5 & 8) == 0)
    {
LABEL_29:
      v30 = v5 - v19;
      v31 = (float *)(v16 + 4 * v19);
      v32 = &v7->i8[v19];
      do
      {
        v33 = *v32++;
        *v31++ = (float)v33;
        --v30;
      }
      while (v30);
      goto LABEL_31;
    }
  }
  else
  {
    v19 = 0;
  }
  v20 = v19;
  v19 = v5 & 0xFFFFFFFFFFFFFFF8;
  v21 = (uint64_t *)((char *)v7->i64 + v20);
  v22 = v16 + 4 * v20;
  v23 = v20 - (v5 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    v24 = *v21++;
    v18.i64[0] = v24;
    v25 = (uint32x4_t)vqtbl1q_s8(v18, (int8x16_t)xmmword_191A741A0);
    v18 = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v18, (int8x16_t)xmmword_191A74190));
    *(int8x16_t *)v22 = v18;
    *(float32x4_t *)(v22 + 16) = vcvtq_f32_u32(v25);
    v22 += 32;
    v23 += 8;
  }
  while (v23);
  if (v5 != v19)
    goto LABEL_29;
LABEL_31:
  v40 = 0;
  v41 = 0;
  v42 = 0;
  nitro::ndarray<float>::ndarray(&v43, &v48, (uint64_t)&v53, (uint64_t)&v40, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v43);
  if (__p)
  {
    v47 = __p;
    operator delete(__p);
  }
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  v34 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
  if (*((_QWORD *)&v43 + 1))
  {
    v35 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
  v37 = v49;
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (v50)
  {
    v51 = (char *)v50;
    operator delete(v50);
  }
  if (v53)
  {
    v54 = v53;
    operator delete(v53);
  }
}

void sub_1911FF6A8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911FF704()
{
  __cxa_end_catch();
  JUMPOUT(0x1911FF71CLL);
}

void nitro::ndarray<float>::load_cast_from<unsigned short>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  uint16x4_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  uint16x4_t *v19;
  float32x4_t *v20;
  unint64_t v21;
  uint16x8_t v22;
  float32x4_t v23;
  uint32x4_t v24;
  unint64_t v25;
  float *v26;
  unsigned __int16 *v27;
  unsigned int v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  __int128 v38;
  void *v39;
  void *v40;
  void *__p;
  void *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint16x4_t *v45;
  uint16x4_t *v46;
  uint16x4_t *v47;
  char *v48;
  char *v49;
  uint64_t v50;

  v48 = 0;
  v49 = 0;
  v50 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v48);
  if (v49 == v48)
  {
    v7 = 0;
    v5 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    goto LABEL_13;
  }
  v4 = v49 - v48 - 8;
  if (v4 < 8)
  {
    v5 = 1;
    v6 = v48;
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v13;
    }
    while (v6 != v49);
    goto LABEL_9;
  }
  v8 = (v4 >> 3) + 1;
  v6 = &v48[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v48 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v5 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v45 = 0;
  v46 = 0;
  v47 = 0;
  if (v5)
  {
    if ((v5 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (uint16x4_t *)operator new(2 * v5);
    v45 = v7;
    v47 = (uint16x4_t *)((char *)v7 + 2 * v5);
    bzero(v7, 2 * v5);
    v46 = v47;
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 16);
    memcpy(v7, (const void *)(v14 + v15), 2 * v5);
    *(_QWORD *)(a2 + 16) = v15 + 2 * v5;
  }
  else
  {
    std::istream::read();
  }
  v16 = operator new[]();
  v43 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3890;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v44 = v17;
  if (v5)
  {
    if (v5 < 0x10)
    {
      v18 = 0;
LABEL_22:
      v25 = v5 - v18;
      v26 = (float *)(v16 + 4 * v18);
      v27 = (unsigned __int16 *)v7 + v18;
      do
      {
        v28 = *v27++;
        *v26++ = (float)v28;
        --v25;
      }
      while (v25);
      goto LABEL_24;
    }
    v18 = v5 & 0xFFFFFFFFFFFFFFF0;
    v19 = v7 + 2;
    v20 = (float32x4_t *)(v16 + 32);
    v21 = v5 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v22 = *(uint16x8_t *)v19[-2].i8;
      v23 = vcvtq_f32_u32(vmovl_u16(*v19));
      v24 = vmovl_high_u16(*(uint16x8_t *)v19->i8);
      v20[-2] = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v22.i8));
      v20[-1] = vcvtq_f32_u32(vmovl_high_u16(v22));
      *v20 = v23;
      v20[1] = vcvtq_f32_u32(v24);
      v20 += 4;
      v19 += 4;
      v21 -= 16;
    }
    while (v21);
    if (v5 != v18)
      goto LABEL_22;
  }
LABEL_24:
  v35 = 0;
  v36 = 0;
  v37 = 0;
  nitro::ndarray<float>::ndarray(&v38, &v43, (uint64_t)&v48, (uint64_t)&v35, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v38);
  if (__p)
  {
    v42 = __p;
    operator delete(__p);
  }
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v35)
  {
    v36 = v35;
    operator delete(v35);
  }
  v32 = v44;
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
}

void sub_1911FFA78(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911FFAD4()
{
  __cxa_end_catch();
  JUMPOUT(0x1911FFAECLL);
}

void nitro::ndarray<float>::load_cast_from<unsigned int>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  uint32x4_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  uint32x4_t *v19;
  float32x4_t *v20;
  unint64_t v21;
  float32x4_t v22;
  unint64_t v23;
  uint64_t v24;
  float *v25;
  unsigned int *v26;
  unsigned int v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  __int128 v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint32x4_t *v44;
  uint32x4_t *v45;
  __int8 *v46;
  char *v47;
  char *v48;
  uint64_t v49;

  v47 = 0;
  v48 = 0;
  v49 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v47);
  if (v48 == v47)
  {
    v7 = 0;
    v5 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    goto LABEL_13;
  }
  v4 = v48 - v47 - 8;
  if (v4 < 8)
  {
    v5 = 1;
    v6 = v47;
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v13;
    }
    while (v6 != v48);
    goto LABEL_9;
  }
  v8 = (v4 >> 3) + 1;
  v6 = &v47[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v47 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v5 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v44 = 0;
  v45 = 0;
  v46 = 0;
  if (v5)
  {
    if (v5 >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (uint32x4_t *)operator new(4 * v5);
    v44 = v7;
    v46 = &v7->i8[4 * v5];
    bzero(v7, 4 * v5);
    v45 = (uint32x4_t *)v46;
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 16);
    memcpy(v7, (const void *)(v14 + v15), 4 * v5);
    *(_QWORD *)(a2 + 16) = v15 + 4 * v5;
  }
  else
  {
    std::istream::read();
  }
  v16 = operator new[]();
  v42 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3890;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v43 = v17;
  if (v5)
  {
    if (v5 < 8)
    {
      v18 = 0;
LABEL_22:
      v23 = v5 - v18;
      v24 = v18;
      v25 = (float *)(v16 + 4 * v18);
      v26 = &v7->u32[v24];
      do
      {
        v27 = *v26++;
        *v25++ = (float)v27;
        --v23;
      }
      while (v23);
      goto LABEL_24;
    }
    v18 = v5 & 0xFFFFFFFFFFFFFFF8;
    v19 = v7 + 1;
    v20 = (float32x4_t *)(v16 + 16);
    v21 = v5 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v22 = vcvtq_f32_u32(*v19);
      v20[-1] = vcvtq_f32_u32(v19[-1]);
      *v20 = v22;
      v19 += 2;
      v20 += 2;
      v21 -= 8;
    }
    while (v21);
    if (v5 != v18)
      goto LABEL_22;
  }
LABEL_24:
  v34 = 0;
  v35 = 0;
  v36 = 0;
  nitro::ndarray<float>::ndarray(&v37, &v42, (uint64_t)&v47, (uint64_t)&v34, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v37);
  if (__p)
  {
    v41 = __p;
    operator delete(__p);
  }
  if (v38)
  {
    v39 = v38;
    operator delete(v38);
  }
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
  if (*((_QWORD *)&v37 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  v31 = v43;
  if (v43)
  {
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
}

void sub_1911FFE2C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1911FFE88()
{
  __cxa_end_catch();
  JUMPOUT(0x1911FFEA0);
}

void nitro::ndarray<float>::load_cast_from<unsigned long long>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  uint64x2_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  uint64x2_t *v19;
  float32x4_t *v20;
  unint64_t v21;
  uint64x2_t v22;
  uint64x2_t v23;
  uint64x2_t v24;
  uint64x2_t v25;
  unint64_t v26;
  float *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  __int128 v39;
  void *v40;
  void *v41;
  void *__p;
  void *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64x2_t *v46;
  uint64x2_t *v47;
  uint64x2_t *v48;
  char *v49;
  char *v50;
  uint64_t v51;

  v49 = 0;
  v50 = 0;
  v51 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v49);
  if (v50 == v49)
  {
    v7 = 0;
    v5 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    goto LABEL_13;
  }
  v4 = v50 - v49 - 8;
  if (v4 < 8)
  {
    v5 = 1;
    v6 = v49;
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v13;
    }
    while (v6 != v50);
    goto LABEL_9;
  }
  v8 = (v4 >> 3) + 1;
  v6 = &v49[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v49 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v5 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v46 = 0;
  v47 = 0;
  v48 = 0;
  if (v5)
  {
    if (v5 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (uint64x2_t *)operator new(8 * v5);
    v46 = v7;
    v48 = (uint64x2_t *)((char *)v7 + 8 * v5);
    bzero(v7, 8 * v5);
    v47 = v48;
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 16);
    memcpy(v7, (const void *)(v14 + v15), 8 * v5);
    *(_QWORD *)(a2 + 16) = v15 + 8 * v5;
  }
  else
  {
    std::istream::read();
  }
  v16 = operator new[]();
  v44 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3890;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v45 = v17;
  if (v5)
  {
    if (v5 < 8)
    {
      v18 = 0;
LABEL_22:
      v26 = v5 - v18;
      v27 = (float *)(v16 + 4 * v18);
      v28 = (unint64_t *)v7 + v18;
      do
      {
        v29 = *v28++;
        *v27++ = (float)v29;
        --v26;
      }
      while (v26);
      goto LABEL_24;
    }
    v18 = v5 & 0xFFFFFFFFFFFFFFF8;
    v19 = v7 + 2;
    v20 = (float32x4_t *)(v16 + 16);
    v21 = v5 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v23 = v19[-2];
      v22 = v19[-1];
      v25 = *v19;
      v24 = v19[1];
      v19 += 4;
      v20[-1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64(v23)), vcvtq_f64_u64(v22));
      *v20 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64(v25)), vcvtq_f64_u64(v24));
      v20 += 2;
      v21 -= 8;
    }
    while (v21);
    if (v5 != v18)
      goto LABEL_22;
  }
LABEL_24:
  v36 = 0;
  v37 = 0;
  v38 = 0;
  nitro::ndarray<float>::ndarray(&v39, &v44, (uint64_t)&v49, (uint64_t)&v36, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v39);
  if (__p)
  {
    v43 = __p;
    operator delete(__p);
  }
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
  v33 = v45;
  if (v45)
  {
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v46)
  {
    v47 = v46;
    operator delete(v46);
  }
  if (v49)
  {
    v50 = v49;
    operator delete(v49);
  }
}

void sub_1912001F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_191200250()
{
  __cxa_end_catch();
  JUMPOUT(0x191200268);
}

void nitro::ndarray<float>::load_cast_from<half>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  float16x4_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  float16x4_t *v19;
  float32x4_t *v20;
  unint64_t v21;
  float16x8_t v22;
  float32x4_t v23;
  float32x4_t v24;
  unint64_t v25;
  _DWORD *v26;
  __int16 *v27;
  __int16 v28;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  __int128 v44;
  void *v45;
  void *v46;
  void *__p;
  void *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  float16x4_t *v51;
  float16x4_t *v52;
  float16x4_t *v53;
  char *v54;
  char *v55;
  uint64_t v56;

  v54 = 0;
  v55 = 0;
  v56 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v54);
  if (v55 == v54)
  {
    v7 = 0;
    v5 = 0;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    goto LABEL_13;
  }
  v4 = v55 - v54 - 8;
  if (v4 < 8)
  {
    v5 = 1;
    v6 = v54;
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v13;
    }
    while (v6 != v55);
    goto LABEL_9;
  }
  v8 = (v4 >> 3) + 1;
  v6 = &v54[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v54 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v5 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v51 = 0;
  v52 = 0;
  v53 = 0;
  if (v5)
  {
    if ((v5 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (float16x4_t *)operator new(2 * v5);
    v51 = v7;
    v53 = (float16x4_t *)((char *)v7 + 2 * v5);
    bzero(v7, 2 * v5);
    v52 = v53;
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 16);
    memcpy(v7, (const void *)(v14 + v15), 2 * v5);
    *(_QWORD *)(a2 + 16) = v15 + 2 * v5;
  }
  else
  {
    std::istream::read();
  }
  v16 = operator new[]();
  v49 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3890;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v50 = v17;
  if (v5)
  {
    if (v5 < 0x10)
    {
      v18 = 0;
LABEL_22:
      v25 = v5 - v18;
      v26 = (_DWORD *)(v16 + 4 * v18);
      v27 = (__int16 *)v7 + v18;
      do
      {
        v28 = *v27++;
        _H0 = v28;
        __asm { FCVT            S0, H0 }
        *v26++ = _S0;
        --v25;
      }
      while (v25);
      goto LABEL_24;
    }
    v18 = v5 & 0xFFFFFFFFFFFFFFF0;
    v19 = v7 + 2;
    v20 = (float32x4_t *)(v16 + 32);
    v21 = v5 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v22 = *(float16x8_t *)v19[-2].i8;
      v23 = vcvtq_f32_f16(*v19);
      v24 = vcvt_hight_f32_f16(*(float16x8_t *)v19->i8);
      v20[-2] = vcvtq_f32_f16(*(float16x4_t *)v22.i8);
      v20[-1] = vcvt_hight_f32_f16(v22);
      *v20 = v23;
      v20[1] = v24;
      v20 += 4;
      v19 += 4;
      v21 -= 16;
    }
    while (v21);
    if (v5 != v18)
      goto LABEL_22;
  }
LABEL_24:
  v41 = 0;
  v42 = 0;
  v43 = 0;
  nitro::ndarray<float>::ndarray(&v44, &v49, (uint64_t)&v54, (uint64_t)&v41, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v44);
  if (__p)
  {
    v48 = __p;
    operator delete(__p);
  }
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  v38 = v50;
  if (v50)
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
  if (v54)
  {
    v55 = v54;
    operator delete(v54);
  }
}

void sub_1912005B4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_191200610()
{
  __cxa_end_catch();
  JUMPOUT(0x191200628);
}

void nitro::ndarray<float>::load_cast_from<float>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  __int128 *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  __int128 *v19;
  _OWORD *v20;
  unint64_t v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  int *v26;
  int v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  __int128 v37;
  void *v38;
  void *v39;
  void *__p;
  void *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  __int128 *v44;
  __int128 *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;

  v47 = 0;
  v48 = 0;
  v49 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v47);
  if (v48 == v47)
  {
    v7 = 0;
    v5 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    goto LABEL_13;
  }
  v4 = v48 - v47 - 8;
  if (v4 < 8)
  {
    v5 = 1;
    v6 = v47;
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v13;
    }
    while (v6 != v48);
    goto LABEL_9;
  }
  v8 = (v4 >> 3) + 1;
  v6 = &v47[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v47 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v5 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v44 = 0;
  v45 = 0;
  v46 = 0;
  if (v5)
  {
    if (v5 >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (__int128 *)operator new(4 * v5);
    v44 = v7;
    v46 = (char *)v7 + 4 * v5;
    bzero(v7, 4 * v5);
    v45 = (__int128 *)v46;
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 16);
    memcpy(v7, (const void *)(v14 + v15), 4 * v5);
    *(_QWORD *)(a2 + 16) = v15 + 4 * v5;
  }
  else
  {
    std::istream::read();
  }
  v16 = operator new[]();
  v42 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3890;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v43 = v17;
  if (v5)
  {
    if (v5 < 8)
    {
      v18 = 0;
LABEL_22:
      v23 = v5 - v18;
      v24 = 4 * v18;
      v25 = (_DWORD *)(v16 + 4 * v18);
      v26 = (int *)((char *)v7 + v24);
      do
      {
        v27 = *v26++;
        *v25++ = v27;
        --v23;
      }
      while (v23);
      goto LABEL_24;
    }
    v18 = v5 & 0xFFFFFFFFFFFFFFF8;
    v19 = v7 + 1;
    v20 = (_OWORD *)(v16 + 16);
    v21 = v5 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v22 = *v19;
      *(v20 - 1) = *(v19 - 1);
      *v20 = v22;
      v19 += 2;
      v20 += 2;
      v21 -= 8;
    }
    while (v21);
    if (v5 != v18)
      goto LABEL_22;
  }
LABEL_24:
  v34 = 0;
  v35 = 0;
  v36 = 0;
  nitro::ndarray<float>::ndarray(&v37, &v42, (uint64_t)&v47, (uint64_t)&v34, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v37);
  if (__p)
  {
    v41 = __p;
    operator delete(__p);
  }
  if (v38)
  {
    v39 = v38;
    operator delete(v38);
  }
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
  if (*((_QWORD *)&v37 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  v31 = v43;
  if (v43)
  {
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
}

void sub_19120095C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_1912009B8()
{
  __cxa_end_catch();
  JUMPOUT(0x1912009D0);
}

void nitro::ndarray<float>::load_cast_from<double>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  float64x2_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  float64x2_t *v19;
  float32x4_t *v20;
  unint64_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  unint64_t v26;
  float *v27;
  double *v28;
  double v29;
  float v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  __int128 v40;
  void *v41;
  void *v42;
  void *__p;
  void *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  float64x2_t *v47;
  float64x2_t *v48;
  float64x2_t *v49;
  char *v50;
  char *v51;
  uint64_t v52;

  v50 = 0;
  v51 = 0;
  v52 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v50);
  if (v51 == v50)
  {
    v7 = 0;
    v5 = 0;
    v47 = 0;
    v48 = 0;
    v49 = 0;
    goto LABEL_13;
  }
  v4 = v51 - v50 - 8;
  if (v4 < 8)
  {
    v5 = 1;
    v6 = v50;
    do
    {
LABEL_8:
      v13 = *(_QWORD *)v6;
      v6 += 8;
      v5 *= v13;
    }
    while (v6 != v51);
    goto LABEL_9;
  }
  v8 = (v4 >> 3) + 1;
  v6 = &v50[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v50 + 8;
  v10 = 1;
  v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  v5 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v47 = 0;
  v48 = 0;
  v49 = 0;
  if (v5)
  {
    if (v5 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (float64x2_t *)operator new(8 * v5);
    v47 = v7;
    v49 = (float64x2_t *)((char *)v7 + 8 * v5);
    bzero(v7, 8 * v5);
    v48 = v49;
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 16);
    memcpy(v7, (const void *)(v14 + v15), 8 * v5);
    *(_QWORD *)(a2 + 16) = v15 + 8 * v5;
  }
  else
  {
    std::istream::read();
  }
  v16 = operator new[]();
  v45 = v16;
  v17 = (std::__shared_weak_count *)operator new();
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3890;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v46 = v17;
  if (v5)
  {
    if (v5 < 8)
    {
      v18 = 0;
LABEL_22:
      v26 = v5 - v18;
      v27 = (float *)(v16 + 4 * v18);
      v28 = &v7->f64[v18];
      do
      {
        v29 = *v28++;
        v30 = v29;
        *v27++ = v30;
        --v26;
      }
      while (v26);
      goto LABEL_24;
    }
    v18 = v5 & 0xFFFFFFFFFFFFFFF8;
    v19 = v7 + 2;
    v20 = (float32x4_t *)(v16 + 16);
    v21 = v5 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v23 = v19[-2];
      v22 = v19[-1];
      v25 = *v19;
      v24 = v19[1];
      v19 += 4;
      v20[-1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v23), v22);
      *v20 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v25), v24);
      v20 += 2;
      v21 -= 8;
    }
    while (v21);
    if (v5 != v18)
      goto LABEL_22;
  }
LABEL_24:
  v37 = 0;
  v38 = 0;
  v39 = 0;
  nitro::ndarray<float>::ndarray(&v40, &v45, (uint64_t)&v50, (uint64_t)&v37, 0);
  nitro::ndarray<unsigned char>::operator=(a1, &v40);
  if (__p)
  {
    v44 = __p;
    operator delete(__p);
  }
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
  v34 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
}

void sub_191200D14(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __break(1u);
}

void sub_191200D70()
{
  __cxa_end_catch();
  JUMPOUT(0x191200D88);
}

void _ZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __n128 v9;
  float16x4_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  double v15;
  double v16;
  int8x16_t v17;
  double v18;
  int8x16_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  void *v30[3];
  void *v31;
  void *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  void *v35[3];
  void *v36;
  void *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  void *v40[3];
  void *__p;
  void *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t *v45[3];
  void *v46;
  void *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;

  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v38, (uint64_t)a1);
      nitro::ndarray<int>::init_from_shape((uint64_t **)v40, &v48);
      _ZN5nitro7ndarrayIiE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clIS1_EEDaS5_EUlRiRKiE_EEvRKNS0_IS5_EET0_(&v48, &v38);
      nitro::ndarray_container::ndarray_container<int,(void *)0>(a2, &v48);
      if (v52)
      {
        v53 = v52;
        operator delete(v52);
      }
      if (v50)
      {
        v51 = v50;
        operator delete(v50);
      }
      v3 = v49;
      if (v49)
      {
        p_shared_owners = (unint64_t *)&v49->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      if (__p)
      {
        v42 = __p;
        operator delete(__p);
      }
      if (v40[0])
      {
        v40[1] = v40[0];
        operator delete(v40[0]);
      }
      v6 = v39;
      if (!v39)
        return;
      v7 = (unint64_t *)&v39->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v43, (uint64_t)a1);
      nitro::ndarray<int>::init_from_shape(v45, &v48);
      _ZN5nitro7ndarrayIiE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clINS0_IhEEEEDaS5_EUlRiRKhE_EEvRKNS0_IS5_EET0_(&v48, &v43, v15, v16, v17, v18, v19);
      nitro::ndarray_container::ndarray_container<int,(void *)0>(a2, &v48);
      if (v52)
      {
        v53 = v52;
        operator delete(v52);
      }
      if (v50)
      {
        v51 = v50;
        operator delete(v50);
      }
      v20 = v49;
      if (v49)
      {
        v21 = (unint64_t *)&v49->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      if (v46)
      {
        v47 = v46;
        operator delete(v46);
      }
      if (v45[0])
      {
        v45[1] = v45[0];
        operator delete(v45[0]);
      }
      v6 = v44;
      if (!v44)
        return;
      v23 = (unint64_t *)&v44->__shared_owners_;
      do
        v8 = __ldaxr(v23);
      while (__stlxr(v8 - 1, v23));
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v28, (uint64_t)a1);
      nitro::ndarray<int>::init_from_shape((uint64_t **)v30, &v48);
      _ZN5nitro7ndarrayIiE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clINS0_IfEEEEDaS5_EUlRiRKfE_EEvRKNS0_IS5_EET0_(&v48, &v28);
      nitro::ndarray_container::ndarray_container<int,(void *)0>(a2, &v48);
      if (v52)
      {
        v53 = v52;
        operator delete(v52);
      }
      if (v50)
      {
        v51 = v50;
        operator delete(v50);
      }
      v24 = v49;
      if (v49)
      {
        v25 = (unint64_t *)&v49->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      if (v31)
      {
        v32 = v31;
        operator delete(v31);
      }
      if (v30[0])
      {
        v30[1] = v30[0];
        operator delete(v30[0]);
      }
      v6 = v29;
      if (!v29)
        return;
      v27 = (unint64_t *)&v29->__shared_owners_;
      do
        v8 = __ldaxr(v27);
      while (__stlxr(v8 - 1, v27));
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v33, (uint64_t)a1);
      nitro::ndarray<int>::init_from_shape((uint64_t **)v35, &v48);
      _ZN5nitro7ndarrayIiE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clINS0_IDhEEEEDaS5_EUlRiRKDhE_EEvRKNS0_IS5_EET0_(&v48, &v33, v9, v10);
      nitro::ndarray_container::ndarray_container<int,(void *)0>(a2, &v48);
      if (v52)
      {
        v53 = v52;
        operator delete(v52);
      }
      if (v50)
      {
        v51 = v50;
        operator delete(v50);
      }
      v11 = v49;
      if (v49)
      {
        v12 = (unint64_t *)&v49->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      if (v36)
      {
        v37 = v36;
        operator delete(v36);
      }
      if (v35[0])
      {
        v35[1] = v35[0];
        operator delete(v35[0]);
      }
      v6 = v34;
      if (!v34)
        return;
      v14 = (unint64_t *)&v34->__shared_owners_;
      do
        v8 = __ldaxr(v14);
      while (__stlxr(v8 - 1, v14));
      break;
    default:
      _ZZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_ENKUlvE_clEv();
  }
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_191201154(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nitro::ndarray<float>::~ndarray(va);
  _Unwind_Resume(a1);
}

void sub_191201190()
{
  uint64_t v0;

  nitro::ndarray<float>::~ndarray((_QWORD *)(v0 - 104));
  JUMPOUT(0x19120119CLL);
}

void sub_1912011AC()
{
  uint64_t v0;

  nitro::ndarray<float>::~ndarray((_QWORD *)(v0 - 104));
  JUMPOUT(0x1912011B8);
}

void sub_1912011C8()
{
  uint64_t v0;

  nitro::ndarray<float>::~ndarray((_QWORD *)(v0 - 104));
  JUMPOUT(0x1912011D4);
}

void _ZZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_191201448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZN5nitro7ndarrayIiE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clINS0_IhEEEEDaS5_EUlRiRKhE_EEvRKNS0_IS5_EET0_(uint64_t *a1, uint64_t *a2, double a3, double a4, int8x16_t a5, double a6, int8x16_t a7)
{
  char *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  _DWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  BOOL v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unsigned __int8 *v68;
  uint64_t v69;
  _DWORD *v70;
  int8x16_t *v71;
  int8x16_t *v72;
  unint64_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  unint64_t v80;
  uint64_t v81;
  int8x16_t *v82;
  int8x16_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  int8x16_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  BOOL v106;
  BOOL v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unsigned __int8 *v113;
  uint64_t v114;
  _DWORD *v115;
  int8x16_t *v116;
  int8x16_t *v117;
  unint64_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  unint64_t v125;
  uint64_t v126;
  int8x16_t *v127;
  int8x16_t v128;
  _QWORD *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  unint64_t v167;
  int8x16_t *v168;
  uint64_t v169;
  unint64_t v170;
  int8x16_t v171;
  int8x16_t v172;
  int8x16_t v173;
  int8x16_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t *v177;
  int8x16_t *v178;
  unint64_t v179;
  int8x16_t v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v189;

  v9 = (unint64_t *)a1[2];
  v8 = (char *)a1[3];
  v10 = (v8 - (char *)v9) >> 3;
  v11 = (_QWORD *)a2[2];
  if (v10 != (a2[3] - (uint64_t)v11) >> 3)
    goto LABEL_13;
  if (v8 == (char *)v9)
    return;
  v12 = v10 <= 1 ? 1 : (v8 - (char *)v9) >> 3;
  if (*v9 != *v11)
    goto LABEL_13;
  v13 = 1;
  do
  {
    v14 = v13;
    if (v12 == v13)
      break;
    v15 = v9[v13];
    v16 = v11[v13++];
  }
  while (v15 == v16);
  if (v14 < v10)
LABEL_13:
    _ZZN5nitro7ndarrayIiE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clINS0_IhEEEEDaS5_EUlRiRKhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv();
  v17 = v8 - (char *)v9;
  if (v8 == (char *)v9)
    return;
  v18 = *a1;
  if (!*a1)
    return;
  if (v17 - 8 < 8)
  {
    v19 = 1;
    v20 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v26 = *v20++;
      v19 *= v26;
    }
    while (v20 != (unint64_t *)v8);
    goto LABEL_21;
  }
  v21 = ((v17 - 8) >> 3) + 1;
  v20 = &v9[v21 & 0x3FFFFFFFFFFFFFFELL];
  v22 = v9 + 1;
  v23 = 1;
  v24 = v21 & 0x3FFFFFFFFFFFFFFELL;
  v25 = 1;
  do
  {
    v23 *= *(v22 - 1);
    v25 *= *v22;
    v22 += 2;
    v24 -= 2;
  }
  while (v24);
  v19 = v25 * v23;
  if (v21 != (v21 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v19)
    return;
  v27 = (uint64_t)v17 >> 3;
  if ((uint64_t)v17 >> 3 == 3)
  {
    v186 = *v9;
    if (!*v9)
      return;
    v84 = 0;
    v85 = a2[8];
    v86 = v9[1];
    v87 = (uint64_t *)a1[5];
    v182 = (uint64_t *)a2[5];
    v184 = *v182;
    v185 = *v87;
    v187 = 4 * *v87;
    v181 = 4 * a1[8];
    v88 = v181 + v18 + 64;
    v89 = v85 + 16;
    v183 = a1[8];
    v90 = v183;
    while (!v86)
    {
LABEL_64:
      v85 += v184;
      ++v84;
      v88 += v187;
      v89 += v184;
      v90 += v185;
      if (v84 == v186)
        return;
    }
    v91 = 0;
    v92 = v181 + v187 * v84;
    v93 = v9[2];
    v94 = *a2;
    v95 = a2[5];
    v96 = v87[1];
    v97 = 4 * v96;
    v98 = v182[1];
    v189 = v93 & 0xFFFFFFFFFFFFFFE0;
    v99 = v93 & 0xFFFFFFFFFFFFFFF8;
    v100 = (int8x16_t *)(*a2 + v89);
    v101 = v90;
    v102 = v85;
    v103 = v88;
    while (!v93)
    {
LABEL_67:
      v101 += v96;
      v102 += v98;
      ++v91;
      v103 += v97;
      v100 = (int8x16_t *)((char *)v100 + v98);
      if (v91 == v86)
        goto LABEL_64;
    }
    v104 = v87[2];
    v105 = *(_QWORD *)(v95 + 16);
    if (v93 < 8
      || (v104 == 1 ? (v106 = v105 == 1) : (v106 = 0),
          !v106
       || (v18 + v92 + v97 * v91 < v94 + v93 + v85 + v98 * v91
         ? (v107 = v94 + v102 >= v18 + v187 * v84 + 4 * (v183 + v93) + v97 * v91)
         : (v107 = 1),
           !v107)))
    {
      v109 = 0;
      v110 = v102;
      v111 = v101;
      goto LABEL_83;
    }
    if (v93 >= 0x20)
    {
      v116 = v100;
      v117 = (int8x16_t *)v103;
      v118 = v93 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v119 = v116[-1];
        v120 = *v116;
        v121 = vqtbl1q_s8(v119, (int8x16_t)xmmword_191A74190);
        v122 = vqtbl1q_s8(v119, (int8x16_t)xmmword_191A741A0);
        v123 = vqtbl1q_s8(*v116, (int8x16_t)xmmword_191A74190);
        v124 = vqtbl1q_s8(*v116, (int8x16_t)xmmword_191A741A0);
        v117[-2] = vqtbl1q_s8(v119, (int8x16_t)xmmword_191A741B0);
        v117[-1] = vqtbl1q_s8(v119, (int8x16_t)xmmword_191A741C0);
        a7 = vqtbl1q_s8(v120, (int8x16_t)xmmword_191A741B0);
        v117[-4] = v121;
        v117[-3] = v122;
        v117[2] = a7;
        v117[3] = vqtbl1q_s8(v120, (int8x16_t)xmmword_191A741C0);
        *v117 = v123;
        v117[1] = v124;
        v117 += 8;
        v116 += 2;
        v118 -= 32;
      }
      while (v118);
      v92 = v181 + v187 * v84;
      if (v93 == v189)
        goto LABEL_67;
      v108 = v93 & 0xFFFFFFFFFFFFFFE0;
      if ((v93 & 0x18) == 0)
      {
        v111 = v101 + v189 * v104;
        v109 = v93 & 0xFFFFFFFFFFFFFFE0;
        v110 = v102 + v189 * v105;
LABEL_83:
        v112 = v93 - v109;
        v113 = (unsigned __int8 *)(v94 + v110);
        v114 = 4 * v104;
        v115 = (_DWORD *)(v18 + 4 * v111);
        do
        {
          *v115 = *v113;
          v113 += v105;
          v115 = (_DWORD *)((char *)v115 + v114);
          --v112;
        }
        while (v112);
        goto LABEL_67;
      }
    }
    else
    {
      v108 = 0;
    }
    v110 = v102 + v99 * v105;
    v111 = v101 + v99 * v104;
    v125 = v108 - (v93 & 0xFFFFFFFFFFFFFFF8);
    v126 = v94 + v108;
    v127 = (int8x16_t *)(v18 + 4 * (v108 + v101));
    do
    {
      a7.i64[0] = *(_QWORD *)(v126 + v102);
      v128 = vqtbl1q_s8(a7, (int8x16_t)xmmword_191A74190);
      a7 = vqtbl1q_s8(a7, (int8x16_t)xmmword_191A741A0);
      *v127 = v128;
      v127[1] = a7;
      v127 += 2;
      v126 += 8;
      v125 += 8;
    }
    while (v125);
    v109 = v93 & 0xFFFFFFFFFFFFFFF8;
    v92 = v181 + v187 * v84;
    if (v93 == v99)
      goto LABEL_67;
    goto LABEL_83;
  }
  if (v27 == 2)
  {
    v41 = *v9;
    if (!*v9)
      return;
    v42 = 0;
    v43 = a2[8];
    v44 = a1[8];
    v45 = v9[1];
    v46 = *a2;
    v47 = (uint64_t *)a2[5];
    v48 = (uint64_t *)a1[5];
    v49 = *v48;
    v50 = *v47;
    v51 = 4 * *v48;
    v52 = v43 + v45;
    v53 = v45 & 0xFFFFFFFFFFFFFFE0;
    v54 = v45 & 0xFFFFFFFFFFFFFFF8;
    v55 = 4 * v44 + v18 + 64;
    v56 = v43 + *a2 + 16;
    v57 = v18 + 4 * v44;
    v58 = v18 + 4 * (v44 + v45);
    while (!v45)
    {
LABEL_34:
      v44 += v49;
      v43 += v50;
      ++v42;
      v55 += v51;
      v56 += v50;
      if (v42 == v41)
        return;
    }
    v59 = v48[1];
    v60 = v47[1];
    if (v45 < 8
      || (v59 == 1 ? (v61 = v60 == 1) : (v61 = 0),
          !v61
       || (v57 + v51 * v42 < (unint64_t)(v46 + v52 + v50 * v42)
         ? (v62 = v46 + v43 >= (unint64_t)(v58 + v51 * v42))
         : (v62 = 1),
           !v62)))
    {
      v64 = 0;
      v65 = v43;
      v66 = v44;
      goto LABEL_50;
    }
    if (v45 >= 0x20)
    {
      v71 = (int8x16_t *)v56;
      v72 = (int8x16_t *)v55;
      v73 = v45 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v74 = v71[-1];
        v75 = *v71;
        v76 = vqtbl1q_s8(v74, (int8x16_t)xmmword_191A74190);
        v77 = vqtbl1q_s8(v74, (int8x16_t)xmmword_191A741A0);
        v78 = vqtbl1q_s8(*v71, (int8x16_t)xmmword_191A74190);
        v79 = vqtbl1q_s8(*v71, (int8x16_t)xmmword_191A741A0);
        v72[-2] = vqtbl1q_s8(v74, (int8x16_t)xmmword_191A741B0);
        v72[-1] = vqtbl1q_s8(v74, (int8x16_t)xmmword_191A741C0);
        a7 = vqtbl1q_s8(v75, (int8x16_t)xmmword_191A741B0);
        v72[-4] = v76;
        v72[-3] = v77;
        v72[2] = a7;
        v72[3] = vqtbl1q_s8(v75, (int8x16_t)xmmword_191A741C0);
        *v72 = v78;
        v72[1] = v79;
        v72 += 8;
        v71 += 2;
        v73 -= 32;
      }
      while (v73);
      if (v45 == v53)
        goto LABEL_34;
      v63 = v45 & 0xFFFFFFFFFFFFFFE0;
      if ((v45 & 0x18) == 0)
      {
        v66 = v44 + v53 * v59;
        v64 = v45 & 0xFFFFFFFFFFFFFFE0;
        v65 = v43 + v53 * v60;
LABEL_50:
        v67 = v45 - v64;
        v68 = (unsigned __int8 *)(v46 + v65);
        v69 = 4 * v59;
        v70 = (_DWORD *)(v18 + 4 * v66);
        do
        {
          *v70 = *v68;
          v68 += v60;
          v70 = (_DWORD *)((char *)v70 + v69);
          --v67;
        }
        while (v67);
        goto LABEL_34;
      }
    }
    else
    {
      v63 = 0;
    }
    v65 = v43 + v54 * v60;
    v66 = v44 + v54 * v59;
    v80 = v63 - (v45 & 0xFFFFFFFFFFFFFFF8);
    v81 = v46 + v63;
    v82 = (int8x16_t *)(v18 + 4 * (v63 + v44));
    do
    {
      a7.i64[0] = *(_QWORD *)(v81 + v43);
      v83 = vqtbl1q_s8(a7, (int8x16_t)xmmword_191A74190);
      a7 = vqtbl1q_s8(a7, (int8x16_t)xmmword_191A741A0);
      *v82 = v83;
      v82[1] = a7;
      v82 += 2;
      v81 += 8;
      v80 += 8;
    }
    while (v80);
    v64 = v45 & 0xFFFFFFFFFFFFFFF8;
    if (v45 == v54)
      goto LABEL_34;
    goto LABEL_50;
  }
  if (v27 != 1)
  {
    if ((v17 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v129 = operator new(v17);
    bzero(v129, v17 & 0xFFFFFFFFFFFFFFF8);
    v130 = *a2;
    if (v17 >> 3 <= 1)
      v131 = 1;
    else
      v131 = v17 >> 3;
    v132 = a2[5];
    v133 = a2[8];
    v134 = v131 & 0x1FFFFFFFFFFFFFFELL;
    v135 = a1[5];
    while (v131 >= 2)
    {
      v138 = 0;
      v139 = 0;
      v140 = v131 & 0x1FFFFFFFFFFFFFFELL;
      v141 = (_QWORD *)(v135 + 8);
      v142 = v129 + 1;
      do
      {
        v138 += *(v141 - 1) * *(v142 - 1);
        v139 += *v141 * *v142;
        v142 += 2;
        v141 += 2;
        v140 -= 2;
      }
      while (v140);
      v136 = v139 + v138;
      v137 = v131 & 0x1FFFFFFFFFFFFFFELL;
      if (v131 != v134)
        goto LABEL_105;
LABEL_107:
      if (v131 < 2)
      {
        v150 = 0;
        v151 = 0;
LABEL_112:
        v157 = v131 - v151;
        v158 = v151;
        v159 = (uint64_t *)(v132 + 8 * v151);
        v160 = &v129[v158];
        do
        {
          v162 = *v160++;
          v161 = v162;
          v163 = *v159++;
          v150 += v163 * v161;
          --v157;
        }
        while (v157);
        goto LABEL_114;
      }
      v152 = 0;
      v153 = 0;
      v154 = v131 & 0x1FFFFFFFFFFFFFFELL;
      v155 = (_QWORD *)(v132 + 8);
      v156 = v129 + 1;
      do
      {
        v152 += *(v155 - 1) * *(v156 - 1);
        v153 += *v155 * *v156;
        v156 += 2;
        v155 += 2;
        v154 -= 2;
      }
      while (v154);
      v150 = v153 + v152;
      v151 = v131 & 0x1FFFFFFFFFFFFFFELL;
      if (v131 != v134)
        goto LABEL_112;
LABEL_114:
      *(_DWORD *)(v18 + 4 * v136) = *(unsigned __int8 *)(v130 + v133 + v150);
      if ((int)(v17 >> 3) >= 1)
      {
        v164 = (v17 >> 3) + 1;
        v165 = v17 >> 3;
        while (1)
        {
          v166 = (v164 - 2);
          v167 = v129[v166] + 1;
          v129[v166] = v167;
          if (v167 < v9[v166])
            break;
          v129[(v164 - 2)] = 0;
          --v165;
          if ((unint64_t)--v164 <= 1)
            goto LABEL_120;
        }
        if (v165 > 0)
          continue;
      }
LABEL_120:
      operator delete(v129);
      return;
    }
    v136 = 0;
    v137 = 0;
LABEL_105:
    v143 = v131 - v137;
    v144 = v137;
    v145 = (uint64_t *)(v135 + 8 * v137);
    v146 = &v129[v144];
    do
    {
      v148 = *v146++;
      v147 = v148;
      v149 = *v145++;
      v136 += v149 * v147;
      --v143;
    }
    while (v143);
    goto LABEL_107;
  }
  v28 = *v9;
  if (!*v9)
    return;
  v29 = a2[8];
  v30 = a1[8];
  v31 = *a2;
  v32 = *(_QWORD *)a1[5];
  v33 = *(_QWORD *)a2[5];
  if (v28 < 8)
    goto LABEL_27;
  v34 = 0;
  if (v32 != 1 || v33 != 1)
    goto LABEL_28;
  if (v18 + 4 * v30 < v31 + v28 + v29 && v31 + v29 < v18 + 4 * (v28 + v30))
  {
LABEL_27:
    v34 = 0;
LABEL_28:
    v35 = a2[8];
    v36 = a1[8];
    goto LABEL_29;
  }
  if (v28 >= 0x20)
  {
    v34 = v28 & 0xFFFFFFFFFFFFFFE0;
    v168 = (int8x16_t *)(v29 + v31 + 16);
    v169 = v18 + 4 * v30 + 64;
    a5.i64[1] = 0xFFFFFF0BFFFFFF0ALL;
    v170 = v28 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v171 = v168[-1];
      v172 = *v168;
      v173 = vqtbl1q_s8(*v168, (int8x16_t)xmmword_191A74190);
      v174 = vqtbl1q_s8(*v168, (int8x16_t)xmmword_191A741A0);
      *(int8x16_t *)(v169 - 32) = vqtbl1q_s8(v171, (int8x16_t)xmmword_191A741B0);
      *(int8x16_t *)(v169 - 16) = vqtbl1q_s8(v171, (int8x16_t)xmmword_191A741C0);
      *(int8x16_t *)(v169 - 64) = vqtbl1q_s8(v171, (int8x16_t)xmmword_191A74190);
      *(int8x16_t *)(v169 - 48) = vqtbl1q_s8(v171, (int8x16_t)xmmword_191A741A0);
      *(int8x16_t *)(v169 + 32) = vqtbl1q_s8(v172, (int8x16_t)xmmword_191A741B0);
      *(int8x16_t *)(v169 + 48) = vqtbl1q_s8(v172, (int8x16_t)xmmword_191A741C0);
      *(int8x16_t *)v169 = v173;
      *(int8x16_t *)(v169 + 16) = v174;
      v169 += 128;
      v168 += 2;
      v170 -= 32;
    }
    while (v170);
    if (v28 == v34)
      return;
    if ((v28 & 0x18) == 0)
    {
      v36 = v30 + v34;
      v35 = v29 + v34;
LABEL_29:
      v37 = v28 - v34;
      v38 = (unsigned __int8 *)(v31 + v35);
      v39 = 4 * v32;
      v40 = (_DWORD *)(v18 + 4 * v36);
      do
      {
        *v40 = *v38;
        v38 += v33;
        v40 = (_DWORD *)((char *)v40 + v39);
        --v37;
      }
      while (v37);
      return;
    }
  }
  else
  {
    v34 = 0;
  }
  v175 = v34;
  v34 = v28 & 0xFFFFFFFFFFFFFFF8;
  v35 = v29 + (v28 & 0xFFFFFFFFFFFFFFF8);
  v36 = v30 + (v28 & 0xFFFFFFFFFFFFFFF8);
  v176 = v175 - (v28 & 0xFFFFFFFFFFFFFFF8);
  v177 = (unint64_t *)(v31 + v175 + v29);
  v178 = (int8x16_t *)(v18 + 4 * (v175 + v30));
  do
  {
    v179 = *v177++;
    a5.i64[0] = v179;
    v180 = vqtbl1q_s8(a5, (int8x16_t)xmmword_191A74190);
    a5 = vqtbl1q_s8(a5, (int8x16_t)xmmword_191A741A0);
    *v178 = v180;
    v178[1] = a5;
    v178 += 2;
    v176 += 8;
  }
  while (v176);
  if (v28 != v34)
    goto LABEL_29;
}

void sub_191201DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void _ZZN5nitro7ndarrayIiE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clINS0_IhEEEEDaS5_EUlRiRKhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZN5nitro7ndarrayIiE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clINS0_IhEEEEDaS5_EUlRiRKhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_19120207C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro7ndarrayIiE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clINS0_IhEEEEDaS5_EUlRiRKhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_191202220(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191202234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19120222CLL);
}

__n128 _ZN5nitro7ndarrayIiE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clIS1_EEDaS5_EUlRiRKiE_EEvRKNS0_IS5_EET0_(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  _DWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  __n128 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  __n128 *v49;
  __n128 *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  __n128 *v62;
  __n128 *v63;
  unint64_t v64;
  __n128 result;
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  __n128 *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  __n128 *v84;
  __n128 *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  _DWORD *v94;
  uint64_t v95;
  uint64_t v96;
  _DWORD *v97;
  __n128 *v99;
  __n128 *v100;
  unint64_t v101;
  __n128 v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  unint64_t v141;
  __n128 *v142;
  __n128 *v143;
  __n128 *v144;
  __n128 *v145;
  unint64_t v146;
  __n128 v147;
  uint64_t v148;
  __n128 *v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v158;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return result;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    _ZZN5nitro7ndarrayIiE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clIS1_EEDaS5_EUlRiRKiE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv();
  v12 = v3 - (char *)v4;
  if (v3 != (char *)v4)
  {
    v13 = *a1;
    if (*a1)
    {
      if (v12 - 8 >= 8)
      {
        v16 = ((v12 - 8) >> 3) + 1;
        v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
        v17 = v4 + 1;
        v18 = 1;
        v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
        v20 = 1;
        do
        {
          v18 *= *(v17 - 1);
          v20 *= *v17;
          v17 += 2;
          v19 -= 2;
        }
        while (v19);
        v14 = v20 * v18;
        if (v16 == (v16 & 0x3FFFFFFFFFFFFFFELL))
          goto LABEL_21;
      }
      else
      {
        v14 = 1;
        v15 = (unint64_t *)a1[2];
      }
      do
      {
        v21 = *v15++;
        v14 *= v21;
      }
      while (v15 != (unint64_t *)v3);
LABEL_21:
      if (!v14)
        return result;
      v22 = (uint64_t)v12 >> 3;
      v158 = *a1;
      if ((uint64_t)v12 >> 3 != 3)
      {
        if (v22 != 2)
        {
          if (v22 == 1)
          {
            v23 = *v4;
            if (!*v4)
              return result;
            v24 = a2[8];
            v25 = a1[8];
            v26 = *a2;
            v27 = *(_QWORD *)a1[5];
            v28 = *(_QWORD *)a2[5];
            if (v23 < 0xC)
              goto LABEL_27;
            v29 = 0;
            if (v27 != 1 || v28 != 1)
              goto LABEL_28;
            v142 = (__n128 *)(4 * v25 + v13);
            v143 = (__n128 *)(4 * v24 + v26);
            if ((unint64_t)((char *)v142 - (char *)v143) < 0x20)
            {
LABEL_27:
              v29 = 0;
            }
            else
            {
              v29 = v23 & 0xFFFFFFFFFFFFFFF8;
              v24 += v23 & 0xFFFFFFFFFFFFFFF8;
              v25 += v23 & 0xFFFFFFFFFFFFFFF8;
              v144 = v143 + 1;
              v145 = v142 + 1;
              v146 = v23 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                result = v144[-1];
                v147 = *v144;
                v145[-1] = result;
                *v145 = v147;
                v144 += 2;
                v145 += 2;
                v146 -= 8;
              }
              while (v146);
              if (v23 == v29)
                return result;
            }
LABEL_28:
            v30 = v23 - v29;
            v31 = (_DWORD *)(v26 + 4 * v24);
            v32 = 4 * v27;
            v33 = (_DWORD *)(v13 + 4 * v25);
            do
            {
              *v33 = *v31;
              v31 += v28;
              v33 = (_DWORD *)((char *)v33 + v32);
              --v30;
            }
            while (v30);
            return result;
          }
          if ((v12 & 0x8000000000000000) != 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v103 = operator new(v12);
          bzero(v103, v12 & 0xFFFFFFFFFFFFFFF8);
          v104 = *a2;
          if (v12 >> 3 <= 1)
            v105 = 1;
          else
            v105 = v12 >> 3;
          v106 = a2[5];
          v107 = a2[8];
          v108 = v105 & 0x1FFFFFFFFFFFFFFELL;
          v109 = a1[5];
          while (v105 >= 2)
          {
            v112 = 0;
            v113 = 0;
            v114 = v105 & 0x1FFFFFFFFFFFFFFELL;
            v115 = (_QWORD *)(v109 + 8);
            v116 = v103 + 1;
            do
            {
              v112 += *(v115 - 1) * *(v116 - 1);
              v113 += *v115 * *v116;
              v116 += 2;
              v115 += 2;
              v114 -= 2;
            }
            while (v114);
            v110 = v113 + v112;
            v111 = v105 & 0x1FFFFFFFFFFFFFFELL;
            v13 = v158;
            if (v105 != v108)
              goto LABEL_84;
LABEL_86:
            if (v105 < 2)
            {
              v124 = 0;
              v125 = 0;
LABEL_91:
              v131 = v105 - v125;
              v132 = v125;
              v133 = (uint64_t *)(v106 + 8 * v125);
              v134 = &v103[v132];
              do
              {
                v136 = *v134++;
                v135 = v136;
                v137 = *v133++;
                v124 += v137 * v135;
                --v131;
              }
              while (v131);
              goto LABEL_93;
            }
            v126 = 0;
            v127 = 0;
            v128 = v105 & 0x1FFFFFFFFFFFFFFELL;
            v129 = (_QWORD *)(v106 + 8);
            v130 = v103 + 1;
            do
            {
              v126 += *(v129 - 1) * *(v130 - 1);
              v127 += *v129 * *v130;
              v130 += 2;
              v129 += 2;
              v128 -= 2;
            }
            while (v128);
            v124 = v127 + v126;
            v125 = v105 & 0x1FFFFFFFFFFFFFFELL;
            v13 = v158;
            if (v105 != v108)
              goto LABEL_91;
LABEL_93:
            *(_DWORD *)(v13 + 4 * v110) = *(_DWORD *)(v104 + 4 * (v107 + v124));
            if ((int)(v12 >> 3) >= 1)
            {
              v138 = (v12 >> 3) + 1;
              v139 = v12 >> 3;
              while (1)
              {
                v140 = (v138 - 2);
                v141 = v103[v140] + 1;
                v103[v140] = v141;
                if (v141 < v4[v140])
                  break;
                v103[(v138 - 2)] = 0;
                --v139;
                if ((unint64_t)--v138 <= 1)
                  goto LABEL_99;
              }
              if (v139 > 0)
                continue;
            }
LABEL_99:
            operator delete(v103);
            return result;
          }
          v110 = 0;
          v111 = 0;
LABEL_84:
          v117 = v105 - v111;
          v118 = v111;
          v119 = (uint64_t *)(v109 + 8 * v111);
          v120 = &v103[v118];
          do
          {
            v122 = *v120++;
            v121 = v122;
            v123 = *v119++;
            v110 += v123 * v121;
            --v117;
          }
          while (v117);
          goto LABEL_86;
        }
        v34 = *v4;
        if (!*v4)
          return result;
        v35 = 0;
        v36 = a2[8];
        v37 = a1[8];
        v38 = v4[1];
        v39 = *a2;
        v40 = (uint64_t *)a2[5];
        v41 = (uint64_t *)a1[5];
        v42 = *v41;
        v43 = (__n128 *)(v13 + 4 * v37);
        v44 = 4 * *v41;
        v45 = *a2 + 4 * v36;
        v46 = *v40;
        v47 = 4 * *v40;
        v48 = v38 & 0xFFFFFFFFFFFFFFF8;
        v49 = v43 + 1;
        v50 = (__n128 *)(v45 + 16);
        while (!v38)
        {
LABEL_33:
          v37 += v42;
          v36 += v46;
          ++v35;
          v49 = (__n128 *)((char *)v49 + v44);
          v50 = (__n128 *)((char *)v50 + v47);
          if (v35 == v34)
            return result;
        }
        v51 = v41[1];
        v52 = v40[1];
        if (v38 >= 8)
        {
          v53 = 0;
          if (v51 == 1 && v52 == 1)
          {
            v54 = v36;
            v55 = v37;
            if ((unint64_t)v43->n128_u64 + v44 * v35 - v45 - v47 * v35 >= 0x20)
            {
              v54 = v36 + v48 * v52;
              v62 = v50;
              v63 = v49;
              v64 = v38 & 0xFFFFFFFFFFFFFFF8;
              v55 = v37 + v48 * v51;
              do
              {
                result = v62[-1];
                v66 = *v62;
                v63[-1] = result;
                *v63 = v66;
                v63 += 2;
                v62 += 2;
                v64 -= 8;
              }
              while (v64);
              v53 = v38 & 0xFFFFFFFFFFFFFFF8;
              if (v38 == v48)
                goto LABEL_33;
            }
            goto LABEL_38;
          }
        }
        else
        {
          v53 = 0;
        }
        v54 = v36;
        v55 = v37;
LABEL_38:
        v56 = v38 - v53;
        v57 = (_DWORD *)(v39 + 4 * v54);
        v58 = 4 * v52;
        v59 = 4 * v51;
        v60 = (_DWORD *)(v158 + 4 * v55);
        do
        {
          *v60 = *v57;
          v57 = (_DWORD *)((char *)v57 + v58);
          v60 = (_DWORD *)((char *)v60 + v59);
          --v56;
        }
        while (v56);
        goto LABEL_33;
      }
      v154 = *v4;
      if (!*v4)
        return result;
      v67 = 0;
      v68 = a2[8];
      v69 = a1[8];
      v70 = v4[1];
      v71 = (uint64_t *)a1[5];
      v150 = (uint64_t *)a2[5];
      v151 = a1[2];
      v152 = *v150;
      v153 = *v71;
      v156 = 4 * *v71;
      v155 = 4 * *v150;
      v148 = 4 * v68;
      v149 = (__n128 *)(v13 + 4 * v69);
      v72 = v149 + 1;
      v73 = 4 * v68 + 16;
      while (!v70)
      {
LABEL_53:
        v69 += v153;
        v68 += v152;
        ++v67;
        v72 = (__n128 *)((char *)v72 + v156);
        v73 += v155;
        if (v67 == v154)
          return result;
      }
      v74 = 0;
      v75 = *(_QWORD *)(v151 + 16);
      v76 = *a2;
      v77 = v71[1];
      v78 = v150[1];
      v79 = 4 * v77;
      v80 = v148 + v155 * v67 + *a2;
      v81 = 4 * v78;
      v82 = v75 & 0xFFFFFFFFFFFFFFF8;
      v83 = a2[5];
      v84 = (__n128 *)(*a2 + v73);
      v85 = v72;
      v86 = v68;
      v87 = v69;
      while (!v75)
      {
LABEL_56:
        v87 += v77;
        v86 += v78;
        ++v74;
        v85 = (__n128 *)((char *)v85 + v79);
        v84 = (__n128 *)((char *)v84 + v81);
        if (v74 == v70)
          goto LABEL_53;
      }
      v88 = v71[2];
      v89 = *(_QWORD *)(v83 + 16);
      if (v75 >= 8)
      {
        v90 = 0;
        if (v88 == 1 && v89 == 1)
        {
          v91 = v86;
          v92 = v87;
          if ((unint64_t)v149->n128_u64 + v156 * v67 + v79 * v74 - v80 - v81 * v74 >= 0x20)
          {
            v91 = v86 + v82 * v89;
            v99 = v84;
            v100 = v85;
            v101 = v75 & 0xFFFFFFFFFFFFFFF8;
            v92 = v87 + v82 * v88;
            do
            {
              result = v99[-1];
              v102 = *v99;
              v100[-1] = result;
              *v100 = v102;
              v100 += 2;
              v99 += 2;
              v101 -= 8;
            }
            while (v101);
            v90 = v75 & 0xFFFFFFFFFFFFFFF8;
            v13 = v158;
            if (v75 == v82)
              goto LABEL_56;
          }
          goto LABEL_61;
        }
      }
      else
      {
        v90 = 0;
      }
      v91 = v86;
      v92 = v87;
LABEL_61:
      v93 = v75 - v90;
      v94 = (_DWORD *)(v76 + 4 * v91);
      v95 = 4 * v89;
      v96 = 4 * v88;
      v97 = (_DWORD *)(v13 + 4 * v92);
      do
      {
        *v97 = *v94;
        v94 = (_DWORD *)((char *)v94 + v95);
        v97 = (_DWORD *)((char *)v97 + v96);
        --v93;
      }
      while (v93);
      goto LABEL_56;
    }
  }
  return result;
}

void sub_191202944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void _ZZN5nitro7ndarrayIiE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clIS1_EEDaS5_EUlRiRKiE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZN5nitro7ndarrayIiE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clIS1_EEDaS5_EUlRiRKiE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_191202BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro7ndarrayIiE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clIS1_EEDaS5_EUlRiRKiE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_191202D68(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191202D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x191202D74);
}

void _ZN5nitro7ndarrayIiE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clINS0_IDhEEEEDaS5_EUlRiRKDhE_EEvRKNS0_IS5_EET0_(uint64_t *a1, uint64_t *a2, __n128 a3, float16x4_t a4)
{
  char *v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __int16 *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  __int16 *v64;
  uint64_t v65;
  uint64_t v66;
  _DWORD *v67;
  __int32 *v70;
  uint64_t v71;
  unint64_t v72;
  __int32 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  __int32 *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  __int16 *v99;
  uint64_t v100;
  uint64_t v101;
  _DWORD *v102;
  __int32 *v105;
  uint64_t v106;
  unint64_t v107;
  __int32 v108;
  _QWORD *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v146;
  int v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  __int32 *v152;
  uint64_t v153;
  unint64_t v154;
  __int32 v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;

  v6 = (unint64_t *)a1[2];
  v5 = (char *)a1[3];
  v7 = (v5 - (char *)v6) >> 3;
  v8 = (_QWORD *)a2[2];
  if (v7 != (a2[3] - (uint64_t)v8) >> 3)
    goto LABEL_13;
  if (v5 == (char *)v6)
    return;
  v9 = v7 <= 1 ? 1 : (v5 - (char *)v6) >> 3;
  if (*v6 != *v8)
    goto LABEL_13;
  v10 = 1;
  do
  {
    v11 = v10;
    if (v9 == v10)
      break;
    v12 = v6[v10];
    v13 = v8[v10++];
  }
  while (v12 == v13);
  if (v11 < v7)
LABEL_13:
    _ZZN5nitro7ndarrayIiE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clINS0_IDhEEEEDaS5_EUlRiRKDhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv();
  v14 = v5 - (char *)v6;
  if (v5 == (char *)v6)
    return;
  v15 = *a1;
  if (!*a1)
    return;
  if (v14 - 8 < 8)
  {
    v16 = 1;
    v17 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v23 = *v17++;
      v16 *= v23;
    }
    while (v17 != (unint64_t *)v5);
    goto LABEL_21;
  }
  v18 = ((v14 - 8) >> 3) + 1;
  v17 = &v6[v18 & 0x3FFFFFFFFFFFFFFELL];
  v19 = v6 + 1;
  v20 = 1;
  v21 = v18 & 0x3FFFFFFFFFFFFFFELL;
  v22 = 1;
  do
  {
    v20 *= *(v19 - 1);
    v22 *= *v19;
    v19 += 2;
    v21 -= 2;
  }
  while (v21);
  v16 = v22 * v20;
  if (v18 != (v18 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v16)
    return;
  v24 = (uint64_t)v14 >> 3;
  if ((uint64_t)v14 >> 3 == 3)
  {
    v161 = *v6;
    if (!*v6)
      return;
    v74 = 0;
    v75 = a2[8];
    v76 = a1[8];
    v77 = v6[1];
    v78 = (uint64_t *)a1[5];
    v156 = (uint64_t *)a2[5];
    v79 = v15 + 4 * v76 + 8;
    v159 = *v156;
    v160 = *v78;
    v158 = 4 * *v78;
    v80 = 2 * v75 + 4;
    v157 = 2 * *v156;
    while (!v77)
    {
LABEL_50:
      v76 += v160;
      v75 += v159;
      ++v74;
      v79 += v158;
      v80 += v157;
      if (v74 == v161)
        return;
    }
    v81 = 0;
    v82 = v6[2];
    v83 = *a2;
    v84 = a2[5];
    v85 = v78[1];
    v86 = v82 & 0xFFFFFFFFFFFFFFFCLL;
    v87 = (__int32 *)(*a2 + v80);
    v88 = v156[1];
    v89 = v79;
    v90 = v75;
    v91 = v76;
    while (1)
    {
      if (v82)
      {
        v92 = v78[2];
        v93 = *(_QWORD *)(v84 + 16);
        if (v82 >= 4 && (v93 == 1 ? (v94 = v92 == 1) : (v94 = 0), v94))
        {
          v96 = v90 + v86 * v93;
          v105 = v87;
          v106 = v89;
          v107 = v82 & 0xFFFFFFFFFFFFFFFCLL;
          v97 = v91 + v86 * v92;
          do
          {
            a3.n128_u32[0] = *(v105 - 1);
            v108 = *v105;
            v105 += 2;
            a4.i32[0] = v108;
            a3.n128_u64[0] = vcvtq_s32_f32(vcvtq_f32_f16((float16x4_t)a3.n128_u64[0])).u64[0];
            a4 = (float16x4_t)vcvtq_s32_f32(vcvtq_f32_f16(a4)).u64[0];
            *(float16x4_t *)&a3.n128_i8[8] = a4;
            *(__n128 *)(v106 - 8) = a3;
            v106 += 16;
            v107 -= 4;
          }
          while (v107);
          v95 = v82 & 0xFFFFFFFFFFFFFFFCLL;
          if (v82 == v86)
            goto LABEL_53;
        }
        else
        {
          v95 = 0;
          v96 = v90;
          v97 = v91;
        }
        v98 = v82 - v95;
        v99 = (__int16 *)(v83 + 2 * v96);
        v100 = 2 * v93;
        v101 = 4 * v92;
        v102 = (_DWORD *)(v15 + 4 * v97);
        do
        {
          _H0 = *v99;
          __asm { FCVT            S0, H0 }
          *v102 = (int)_S0;
          v99 = (__int16 *)((char *)v99 + v100);
          v102 = (_DWORD *)((char *)v102 + v101);
          --v98;
        }
        while (v98);
      }
LABEL_53:
      v91 += v85;
      v90 += v88;
      ++v81;
      v89 += 4 * v85;
      v87 = (__int32 *)((char *)v87 + 2 * v88);
      if (v81 == v77)
        goto LABEL_50;
    }
  }
  if (v24 == 2)
  {
    v42 = *v6;
    if (!*v6)
      return;
    v43 = 0;
    v44 = a2[8];
    v45 = a1[8];
    v46 = v6[1];
    v47 = *a2;
    v48 = (uint64_t *)a2[5];
    v49 = (uint64_t *)a1[5];
    v50 = *v49;
    v51 = *v48;
    v52 = v46 & 0xFFFFFFFFFFFFFFFCLL;
    v53 = v15 + 4 * v45 + 8;
    v54 = 4 * *v49;
    v55 = *a2 + 2 * v44 + 4;
    v56 = 2 * *v48;
    while (1)
    {
      if (v46)
      {
        v57 = v49[1];
        v58 = v48[1];
        if (v46 >= 4 && (v58 == 1 ? (_ZF = v57 == 1) : (_ZF = 0), _ZF))
        {
          v61 = v44 + v52 * v58;
          v70 = (__int32 *)v55;
          v71 = v53;
          v72 = v46 & 0xFFFFFFFFFFFFFFFCLL;
          v62 = v45 + v52 * v57;
          do
          {
            a3.n128_u32[0] = *(v70 - 1);
            v73 = *v70;
            v70 += 2;
            a4.i32[0] = v73;
            a3.n128_u64[0] = vcvtq_s32_f32(vcvtq_f32_f16((float16x4_t)a3.n128_u64[0])).u64[0];
            a4 = (float16x4_t)vcvtq_s32_f32(vcvtq_f32_f16(a4)).u64[0];
            *(float16x4_t *)&a3.n128_i8[8] = a4;
            *(__n128 *)(v71 - 8) = a3;
            v71 += 16;
            v72 -= 4;
          }
          while (v72);
          v60 = v46 & 0xFFFFFFFFFFFFFFFCLL;
          if (v46 == v52)
            goto LABEL_33;
        }
        else
        {
          v60 = 0;
          v61 = v44;
          v62 = v45;
        }
        v63 = v46 - v60;
        v64 = (__int16 *)(v47 + 2 * v61);
        v65 = 2 * v58;
        v66 = 4 * v57;
        v67 = (_DWORD *)(v15 + 4 * v62);
        do
        {
          _H0 = *v64;
          __asm { FCVT            S0, H0 }
          *v67 = (int)_S0;
          v64 = (__int16 *)((char *)v64 + v65);
          v67 = (_DWORD *)((char *)v67 + v66);
          --v63;
        }
        while (v63);
      }
LABEL_33:
      v45 += v50;
      v44 += v51;
      ++v43;
      v53 += v54;
      v55 += v56;
      if (v43 == v42)
        return;
    }
  }
  if (v24 != 1)
  {
    if ((v14 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v109 = operator new(v14);
    bzero(v109, v14 & 0xFFFFFFFFFFFFFFF8);
    v110 = *a2;
    if (v14 >> 3 <= 1)
      v111 = 1;
    else
      v111 = v14 >> 3;
    v112 = a2[5];
    v113 = a2[8];
    v114 = v111 & 0x1FFFFFFFFFFFFFFELL;
    v115 = a1[5];
    while (v111 >= 2)
    {
      v118 = 0;
      v119 = 0;
      v120 = v111 & 0x1FFFFFFFFFFFFFFELL;
      v121 = (_QWORD *)(v115 + 8);
      v122 = v109 + 1;
      do
      {
        v118 += *(v121 - 1) * *(v122 - 1);
        v119 += *v121 * *v122;
        v122 += 2;
        v121 += 2;
        v120 -= 2;
      }
      while (v120);
      v116 = v119 + v118;
      v117 = v111 & 0x1FFFFFFFFFFFFFFELL;
      if (v111 != v114)
        goto LABEL_78;
LABEL_80:
      if (v111 < 2)
      {
        v130 = 0;
        v131 = 0;
LABEL_85:
        v137 = v111 - v131;
        v138 = v131;
        v139 = (uint64_t *)(v112 + 8 * v131);
        v140 = &v109[v138];
        do
        {
          v142 = *v140++;
          v141 = v142;
          v143 = *v139++;
          v130 += v143 * v141;
          --v137;
        }
        while (v137);
        goto LABEL_87;
      }
      v132 = 0;
      v133 = 0;
      v134 = v111 & 0x1FFFFFFFFFFFFFFELL;
      v135 = (_QWORD *)(v112 + 8);
      v136 = v109 + 1;
      do
      {
        v132 += *(v135 - 1) * *(v136 - 1);
        v133 += *v135 * *v136;
        v136 += 2;
        v135 += 2;
        v134 -= 2;
      }
      while (v134);
      v130 = v133 + v132;
      v131 = v111 & 0x1FFFFFFFFFFFFFFELL;
      if (v111 != v114)
        goto LABEL_85;
LABEL_87:
      _H0 = *(_WORD *)(v110 + 2 * (v113 + v130));
      __asm { FCVT            S0, H0 }
      *(_DWORD *)(v15 + 4 * v116) = (int)_S0;
      if ((int)(v14 >> 3) >= 1)
      {
        v146 = (v14 >> 3) + 1;
        v147 = v14 >> 3;
        while (1)
        {
          v148 = (v146 - 2);
          v149 = v109[v148] + 1;
          v109[v148] = v149;
          if (v149 < v6[v148])
            break;
          v109[(v146 - 2)] = 0;
          --v147;
          if ((unint64_t)--v146 <= 1)
            goto LABEL_93;
        }
        if (v147 > 0)
          continue;
      }
LABEL_93:
      operator delete(v109);
      return;
    }
    v116 = 0;
    v117 = 0;
LABEL_78:
    v123 = v111 - v117;
    v124 = v117;
    v125 = (uint64_t *)(v115 + 8 * v117);
    v126 = &v109[v124];
    do
    {
      v128 = *v126++;
      v127 = v128;
      v129 = *v125++;
      v116 += v129 * v127;
      --v123;
    }
    while (v123);
    goto LABEL_80;
  }
  v25 = *v6;
  if (!*v6)
    return;
  v26 = a2[8];
  v27 = a1[8];
  v28 = *a2;
  v29 = *(_QWORD *)a1[5];
  v30 = *(_QWORD *)a2[5];
  if (v25 < 4)
  {
    v31 = 0;
LABEL_28:
    v32 = v25 - v31;
    v33 = (__int16 *)(v28 + 2 * v26);
    v34 = 2 * v30;
    v35 = 4 * v29;
    v36 = (_DWORD *)(v15 + 4 * v27);
    do
    {
      _H0 = *v33;
      __asm { FCVT            S0, H0 }
      *v36 = (int)_S0;
      v33 = (__int16 *)((char *)v33 + v34);
      v36 = (_DWORD *)((char *)v36 + v35);
      --v32;
    }
    while (v32);
    return;
  }
  v31 = 0;
  if (v30 != 1)
    goto LABEL_28;
  if (v29 != 1)
    goto LABEL_28;
  v31 = v25 & 0xFFFFFFFFFFFFFFFCLL;
  v150 = v26 + (v25 & 0xFFFFFFFFFFFFFFFCLL);
  v151 = v27 + (v25 & 0xFFFFFFFFFFFFFFFCLL);
  v152 = (__int32 *)(v28 + 2 * v26 + 4);
  v153 = v15 + 4 * v27 + 8;
  v154 = v25 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    a3.n128_u32[0] = *(v152 - 1);
    v155 = *v152;
    v152 += 2;
    a4.i32[0] = v155;
    a3.n128_u64[0] = vcvtq_s32_f32(vcvtq_f32_f16((float16x4_t)a3.n128_u64[0])).u64[0];
    a4 = (float16x4_t)vcvtq_s32_f32(vcvtq_f32_f16(a4)).u64[0];
    *(float16x4_t *)&a3.n128_i8[8] = a4;
    *(__n128 *)(v153 - 8) = a3;
    v153 += 16;
    v154 -= 4;
  }
  while (v154);
  v26 = v150;
  v27 = v151;
  if (v25 != v31)
    goto LABEL_28;
}

void sub_191203480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void _ZZN5nitro7ndarrayIiE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clINS0_IDhEEEEDaS5_EUlRiRKDhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZN5nitro7ndarrayIiE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clINS0_IDhEEEEDaS5_EUlRiRKDhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_191203700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro7ndarrayIiE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clINS0_IDhEEEEDaS5_EUlRiRKDhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1912038A4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1912038B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1912038B0);
}

void _ZN5nitro7ndarrayIiE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clINS0_IfEEEEDaS5_EUlRiRKfE_EEvRKNS0_IS5_EET0_(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  float *v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  float32x4_t *v61;
  _OWORD *v62;
  unint64_t v63;
  int32x4_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  float32x4_t *v78;
  uint64_t v79;
  int32x4_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  float *v90;
  uint64_t v91;
  uint64_t v92;
  _DWORD *v93;
  float32x4_t *v94;
  int32x4_t *v95;
  unint64_t v96;
  int32x4_t v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  float32x4_t *v139;
  int32x4_t *v140;
  unint64_t v141;
  int32x4_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    _ZZN5nitro7ndarrayIiE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clINS0_IfEEEEDaS5_EUlRiRKfE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return;
  v13 = *a1;
  if (!*a1)
    return;
  if (v12 - 8 < 8)
  {
    v14 = 1;
    v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v16 = ((v12 - 8) >> 3) + 1;
  v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  v17 = v4 + 1;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v148 = *v4;
    if (!*v4)
      return;
    v65 = 0;
    v66 = a2[8];
    v67 = a1[8];
    v68 = v4[1];
    v69 = (uint64_t *)a1[5];
    v143 = (uint64_t *)a2[5];
    v70 = v13 + 4 * v67 + 16;
    v146 = *v143;
    v147 = *v69;
    v145 = 4 * *v69;
    v71 = 4 * v66 + 16;
    v144 = 4 * *v143;
    while (!v68)
    {
LABEL_50:
      v67 += v147;
      v66 += v146;
      ++v65;
      v70 += v145;
      v71 += v144;
      if (v65 == v148)
        return;
    }
    v72 = 0;
    v73 = v4[2];
    v74 = *a2;
    v75 = a2[5];
    v76 = v69[1];
    v77 = v73 & 0xFFFFFFFFFFFFFFF8;
    v78 = (float32x4_t *)(*a2 + v71);
    v79 = v143[1];
    v80 = (int32x4_t *)v70;
    v81 = v66;
    v82 = v67;
    while (1)
    {
      if (v73)
      {
        v83 = v69[2];
        v84 = *(_QWORD *)(v75 + 16);
        if (v73 >= 8 && (v84 == 1 ? (v85 = v83 == 1) : (v85 = 0), v85))
        {
          v87 = v81 + v77 * v84;
          v94 = v78;
          v95 = v80;
          v96 = v73 & 0xFFFFFFFFFFFFFFF8;
          v88 = v82 + v77 * v83;
          do
          {
            v97 = vcvtq_s32_f32(*v94);
            v95[-1] = vcvtq_s32_f32(v94[-1]);
            *v95 = v97;
            v95 += 2;
            v94 += 2;
            v96 -= 8;
          }
          while (v96);
          v86 = v73 & 0xFFFFFFFFFFFFFFF8;
          if (v73 == v77)
            goto LABEL_53;
        }
        else
        {
          v86 = 0;
          v87 = v81;
          v88 = v82;
        }
        v89 = v73 - v86;
        v90 = (float *)(v74 + 4 * v87);
        v91 = 4 * v84;
        v92 = 4 * v83;
        v93 = (_DWORD *)(v13 + 4 * v88);
        do
        {
          *v93 = (int)*v90;
          v90 = (float *)((char *)v90 + v91);
          v93 = (_DWORD *)((char *)v93 + v92);
          --v89;
        }
        while (v89);
      }
LABEL_53:
      v82 += v76;
      v81 += v79;
      ++v72;
      v80 = (int32x4_t *)((char *)v80 + 4 * v76);
      v78 = (float32x4_t *)((char *)v78 + 4 * v79);
      if (v72 == v68)
        goto LABEL_50;
    }
  }
  if (v22 == 2)
  {
    v35 = *v4;
    if (!*v4)
      return;
    v36 = 0;
    v37 = a2[8];
    v38 = a1[8];
    v39 = v4[1];
    v40 = *a2;
    v41 = (uint64_t *)a2[5];
    v42 = (uint64_t *)a1[5];
    v43 = *v42;
    v44 = *v41;
    v45 = v39 & 0xFFFFFFFFFFFFFFF8;
    v46 = v13 + 4 * v38 + 16;
    v47 = 4 * *v42;
    v48 = *a2 + 4 * v37 + 16;
    v49 = 4 * *v41;
    while (1)
    {
      if (v39)
      {
        v50 = v42[1];
        v51 = v41[1];
        if (v39 >= 8 && (v51 == 1 ? (v52 = v50 == 1) : (v52 = 0), v52))
        {
          v54 = v37 + v45 * v51;
          v61 = (float32x4_t *)v48;
          v62 = (_OWORD *)v46;
          v63 = v39 & 0xFFFFFFFFFFFFFFF8;
          v55 = v38 + v45 * v50;
          do
          {
            v64 = vcvtq_s32_f32(*v61);
            *(v62 - 1) = vcvtq_s32_f32(v61[-1]);
            *v62 = v64;
            v62 += 2;
            v61 += 2;
            v63 -= 8;
          }
          while (v63);
          v53 = v39 & 0xFFFFFFFFFFFFFFF8;
          if (v39 == v45)
            goto LABEL_33;
        }
        else
        {
          v53 = 0;
          v54 = v37;
          v55 = v38;
        }
        v56 = v39 - v53;
        v57 = (float *)(v40 + 4 * v54);
        v58 = 4 * v51;
        v59 = 4 * v50;
        v60 = (_DWORD *)(v13 + 4 * v55);
        do
        {
          *v60 = (int)*v57;
          v57 = (float *)((char *)v57 + v58);
          v60 = (_DWORD *)((char *)v60 + v59);
          --v56;
        }
        while (v56);
      }
LABEL_33:
      v38 += v43;
      v37 += v44;
      ++v36;
      v46 += v47;
      v48 += v49;
      if (v36 == v35)
        return;
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v98 = operator new(v12);
    bzero(v98, v12 & 0xFFFFFFFFFFFFFFF8);
    v99 = *a2;
    if (v12 >> 3 <= 1)
      v100 = 1;
    else
      v100 = v12 >> 3;
    v101 = a2[5];
    v102 = a2[8];
    v103 = v100 & 0x1FFFFFFFFFFFFFFELL;
    v104 = a1[5];
    while (v100 >= 2)
    {
      v107 = 0;
      v108 = 0;
      v109 = v100 & 0x1FFFFFFFFFFFFFFELL;
      v110 = (_QWORD *)(v104 + 8);
      v111 = v98 + 1;
      do
      {
        v107 += *(v110 - 1) * *(v111 - 1);
        v108 += *v110 * *v111;
        v111 += 2;
        v110 += 2;
        v109 -= 2;
      }
      while (v109);
      v105 = v108 + v107;
      v106 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103)
        goto LABEL_78;
LABEL_80:
      if (v100 < 2)
      {
        v119 = 0;
        v120 = 0;
LABEL_85:
        v126 = v100 - v120;
        v127 = v120;
        v128 = (uint64_t *)(v101 + 8 * v120);
        v129 = &v98[v127];
        do
        {
          v131 = *v129++;
          v130 = v131;
          v132 = *v128++;
          v119 += v132 * v130;
          --v126;
        }
        while (v126);
        goto LABEL_87;
      }
      v121 = 0;
      v122 = 0;
      v123 = v100 & 0x1FFFFFFFFFFFFFFELL;
      v124 = (_QWORD *)(v101 + 8);
      v125 = v98 + 1;
      do
      {
        v121 += *(v124 - 1) * *(v125 - 1);
        v122 += *v124 * *v125;
        v125 += 2;
        v124 += 2;
        v123 -= 2;
      }
      while (v123);
      v119 = v122 + v121;
      v120 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103)
        goto LABEL_85;
LABEL_87:
      *(_DWORD *)(v13 + 4 * v105) = (int)*(float *)(v99 + 4 * (v102 + v119));
      if ((int)(v12 >> 3) >= 1)
      {
        v133 = (v12 >> 3) + 1;
        v134 = v12 >> 3;
        while (1)
        {
          v135 = (v133 - 2);
          v136 = v98[v135] + 1;
          v98[v135] = v136;
          if (v136 < v4[v135])
            break;
          v98[(v133 - 2)] = 0;
          --v134;
          if ((unint64_t)--v133 <= 1)
            goto LABEL_93;
        }
        if (v134 > 0)
          continue;
      }
LABEL_93:
      operator delete(v98);
      return;
    }
    v105 = 0;
    v106 = 0;
LABEL_78:
    v112 = v100 - v106;
    v113 = v106;
    v114 = (uint64_t *)(v104 + 8 * v106);
    v115 = &v98[v113];
    do
    {
      v117 = *v115++;
      v116 = v117;
      v118 = *v114++;
      v105 += v118 * v116;
      --v112;
    }
    while (v112);
    goto LABEL_80;
  }
  v23 = *v4;
  if (!*v4)
    return;
  v24 = a2[8];
  v25 = a1[8];
  v26 = *a2;
  v27 = *(_QWORD *)a1[5];
  v28 = *(_QWORD *)a2[5];
  if (v23 < 8)
  {
    v29 = 0;
LABEL_28:
    v30 = v23 - v29;
    v31 = (float *)(v26 + 4 * v24);
    v32 = 4 * v28;
    v33 = 4 * v27;
    v34 = (_DWORD *)(v13 + 4 * v25);
    do
    {
      *v34 = (int)*v31;
      v31 = (float *)((char *)v31 + v32);
      v34 = (_DWORD *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  v29 = 0;
  if (v28 != 1)
    goto LABEL_28;
  if (v27 != 1)
    goto LABEL_28;
  v29 = v23 & 0xFFFFFFFFFFFFFFF8;
  v137 = v24 + (v23 & 0xFFFFFFFFFFFFFFF8);
  v138 = v25 + (v23 & 0xFFFFFFFFFFFFFFF8);
  v139 = (float32x4_t *)(v26 + 4 * v24 + 16);
  v140 = (int32x4_t *)(v13 + 4 * v25 + 16);
  v141 = v23 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v142 = vcvtq_s32_f32(*v139);
    v140[-1] = vcvtq_s32_f32(v139[-1]);
    *v140 = v142;
    v139 += 2;
    v140 += 2;
    v141 -= 8;
  }
  while (v141);
  v24 = v137;
  v25 = v138;
  if (v23 != v29)
    goto LABEL_28;
}

void sub_191203F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void _ZZN5nitro7ndarrayIiE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clINS0_IfEEEEDaS5_EUlRiRKfE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZN5nitro7ndarrayIiE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clINS0_IfEEEEDaS5_EUlRiRKfE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1912041F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro7ndarrayIiE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clINS0_IfEEEEDaS5_EUlRiRKfE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_191204394(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1912043A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1912043A0);
}

void _ZZZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_191204500(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191204514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19120450CLL);
}

void _ZNK5nitro17ndarray_container5visitIZNKS0_4castIDhEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  float32x4_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  void *v24[3];
  void *v25;
  void *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  void *v29[3];
  void *v30;
  void *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  void *v34[3];
  void *__p;
  void *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t *v39[3];
  void *v40;
  void *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;

  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v32, (uint64_t)a1);
      nitro::ndarray<half>::init_from_shape((uint64_t **)v34, &v42);
      _ZN5nitro7ndarrayIDhE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clINS0_IiEEEEDaS5_EUlRDhRKiE_EEvRKNS0_IS5_EET0_(&v42, &v32);
      nitro::ndarray_container::ndarray_container<half,(void *)0>(a2, &v42);
      if (v46)
      {
        v47 = v46;
        operator delete(v46);
      }
      if (v44)
      {
        v45 = v44;
        operator delete(v44);
      }
      v3 = v43;
      if (v43)
      {
        p_shared_owners = (unint64_t *)&v43->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      if (__p)
      {
        v36 = __p;
        operator delete(__p);
      }
      if (v34[0])
      {
        v34[1] = v34[0];
        operator delete(v34[0]);
      }
      v6 = v33;
      if (!v33)
        return;
      v7 = (unint64_t *)&v33->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v37, (uint64_t)a1);
      nitro::ndarray<half>::init_from_shape(v39, &v42);
      _ZN5nitro7ndarrayIDhE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clINS0_IhEEEEDaS5_EUlRDhRKhE_EEvRKNS0_IS5_EET0_(&v42, &v37, v13);
      nitro::ndarray_container::ndarray_container<half,(void *)0>(a2, &v42);
      if (v46)
      {
        v47 = v46;
        operator delete(v46);
      }
      if (v44)
      {
        v45 = v44;
        operator delete(v44);
      }
      v14 = v43;
      if (v43)
      {
        v15 = (unint64_t *)&v43->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      if (v40)
      {
        v41 = v40;
        operator delete(v40);
      }
      if (v39[0])
      {
        v39[1] = v39[0];
        operator delete(v39[0]);
      }
      v6 = v38;
      if (!v38)
        return;
      v17 = (unint64_t *)&v38->__shared_owners_;
      do
        v8 = __ldaxr(v17);
      while (__stlxr(v8 - 1, v17));
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v22, (uint64_t)a1);
      nitro::ndarray<half>::init_from_shape((uint64_t **)v24, &v42);
      _ZN5nitro7ndarrayIDhE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clINS0_IfEEEEDaS5_EUlRDhRKfE_EEvRKNS0_IS5_EET0_(&v42, &v22);
      nitro::ndarray_container::ndarray_container<half,(void *)0>(a2, &v42);
      if (v46)
      {
        v47 = v46;
        operator delete(v46);
      }
      if (v44)
      {
        v45 = v44;
        operator delete(v44);
      }
      v18 = v43;
      if (v43)
      {
        v19 = (unint64_t *)&v43->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
      }
      if (v24[0])
      {
        v24[1] = v24[0];
        operator delete(v24[0]);
      }
      v6 = v23;
      if (!v23)
        return;
      v21 = (unint64_t *)&v23->__shared_owners_;
      do
        v8 = __ldaxr(v21);
      while (__stlxr(v8 - 1, v21));
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v27, (uint64_t)a1);
      nitro::ndarray<half>::init_from_shape((uint64_t **)v29, &v42);
      _ZN5nitro7ndarrayIDhE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clIS1_EEDaS5_EUlRDhRKDhE_EEvRKNS0_IS5_EET0_(&v42, &v27);
      nitro::ndarray_container::ndarray_container<half,(void *)0>(a2, &v42);
      if (v46)
      {
        v47 = v46;
        operator delete(v46);
      }
      if (v44)
      {
        v45 = v44;
        operator delete(v44);
      }
      v9 = v43;
      if (v43)
      {
        v10 = (unint64_t *)&v43->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      if (v30)
      {
        v31 = v30;
        operator delete(v30);
      }
      if (v29[0])
      {
        v29[1] = v29[0];
        operator delete(v29[0]);
      }
      v6 = v28;
      if (!v28)
        return;
      v12 = (unint64_t *)&v28->__shared_owners_;
      do
        v8 = __ldaxr(v12);
      while (__stlxr(v8 - 1, v12));
      break;
    default:
      _ZZNK5nitro17ndarray_container5visitIZNKS0_4castIDhEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_ENKUlvE_clEv();
  }
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1912048CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nitro::ndarray<float>::~ndarray(va);
  _Unwind_Resume(a1);
}

void sub_191204908()
{
  uint64_t v0;

  nitro::ndarray<float>::~ndarray((_QWORD *)(v0 - 104));
  JUMPOUT(0x191204914);
}

void sub_191204924()
{
  uint64_t v0;

  nitro::ndarray<float>::~ndarray((_QWORD *)(v0 - 104));
  JUMPOUT(0x191204930);
}

void sub_191204940()
{
  uint64_t v0;

  nitro::ndarray<float>::~ndarray((_QWORD *)(v0 - 104));
  JUMPOUT(0x19120494CLL);
}

void _ZZNK5nitro17ndarray_container5visitIZNKS0_4castIDhEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZNK5nitro17ndarray_container5visitIZNKS0_4castIDhEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_191204BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

float32x4_t _ZN5nitro7ndarrayIDhE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clINS0_IhEEEEDaS5_EUlRDhRKhE_EEvRKNS0_IS5_EET0_(uint64_t *a1, uint64_t *a2, float32x4_t result)
{
  char *v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __int8 *v34;
  uint64_t v35;
  _WORD *v36;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  __int8 *v66;
  uint64_t v67;
  _WORD *v68;
  uint8x8_t *v69;
  float16x8_t *v70;
  unint64_t v71;
  uint8x16_t v72;
  uint16x8_t v73;
  float16x8_t v74;
  uint16x8_t v75;
  float16x8_t v76;
  uint16x8_t v77;
  float16x8_t v78;
  uint16x8_t v79;
  int16x4_t v80;
  unint64_t v81;
  uint64_t v82;
  float16x8_t *v83;
  uint16x8_t v84;
  int16x4_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint8x8_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  BOOL v108;
  BOOL v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  __int8 *v115;
  uint64_t v116;
  _WORD *v117;
  uint8x8_t *v118;
  float16x8_t *v119;
  unint64_t v120;
  uint8x16_t v121;
  uint16x8_t v122;
  float16x8_t v123;
  uint16x8_t v124;
  float16x8_t v125;
  uint16x8_t v126;
  float16x8_t v127;
  uint16x8_t v128;
  int16x4_t v129;
  unint64_t v130;
  uint64_t v131;
  float16x8_t *v132;
  uint16x8_t v133;
  int16x4_t v134;
  _QWORD *v135;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  _QWORD *v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  _QWORD *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  unint64_t v174;
  uint8x8_t *v175;
  uint64_t v176;
  unint64_t v177;
  uint8x16_t v178;
  uint16x8_t v179;
  float16x8_t v180;
  uint16x8_t v181;
  float16x8_t v182;
  uint16x8_t v183;
  float16x8_t v184;
  uint16x8_t v185;
  int16x4_t v186;
  unint64_t v187;
  unint64_t v188;
  uint8x8_t *v189;
  float16x8_t *v190;
  uint8x8_t v191;
  uint16x8_t v192;
  int16x4_t v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v202;

  v5 = (unint64_t *)a1[2];
  v4 = (char *)a1[3];
  v6 = (v4 - (char *)v5) >> 3;
  v7 = (_QWORD *)a2[2];
  if (v6 != (a2[3] - (uint64_t)v7) >> 3)
    goto LABEL_13;
  if (v4 == (char *)v5)
    return result;
  v8 = v6 <= 1 ? 1 : (v4 - (char *)v5) >> 3;
  if (*v5 != *v7)
    goto LABEL_13;
  v9 = 1;
  do
  {
    v10 = v9;
    if (v8 == v9)
      break;
    v11 = v5[v9];
    v12 = v7[v9++];
  }
  while (v11 == v12);
  if (v10 < v6)
LABEL_13:
    _ZZN5nitro7ndarrayIDhE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clINS0_IhEEEEDaS5_EUlRDhRKhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv();
  v13 = v4 - (char *)v5;
  if (v4 == (char *)v5)
    return result;
  v14 = *a1;
  if (!*a1)
    return result;
  if (v13 - 8 < 8)
  {
    v15 = 1;
    v16 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v22 = *v16++;
      v15 *= v22;
    }
    while (v16 != (unint64_t *)v4);
    goto LABEL_21;
  }
  v17 = ((v13 - 8) >> 3) + 1;
  v16 = &v5[v17 & 0x3FFFFFFFFFFFFFFELL];
  v18 = v5 + 1;
  v19 = 1;
  v20 = v17 & 0x3FFFFFFFFFFFFFFELL;
  v21 = 1;
  do
  {
    v19 *= *(v18 - 1);
    v21 *= *v18;
    v18 += 2;
    v20 -= 2;
  }
  while (v20);
  v15 = v21 * v19;
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v15)
    return result;
  v23 = (uint64_t)v13 >> 3;
  if ((uint64_t)v13 >> 3 == 3)
  {
    v199 = *v5;
    if (!*v5)
      return result;
    v86 = 0;
    v87 = a2[8];
    v88 = v5[1];
    v89 = (uint64_t *)a1[5];
    v195 = (uint64_t *)a2[5];
    v196 = a1[8];
    v197 = *v195;
    v198 = *v89;
    v200 = 2 * *v89;
    v194 = 2 * v196;
    v90 = 2 * v196 + v14 + 32;
    v91 = v87 + 16;
    v92 = v196;
    while (!v88)
    {
LABEL_64:
      v87 += v197;
      ++v86;
      v90 += v200;
      v91 += v197;
      v92 += v198;
      if (v86 == v199)
        return result;
    }
    v93 = 0;
    v94 = v194 + v200 * v86;
    v95 = v5[2];
    v96 = *a2;
    v97 = a2[5];
    v98 = v89[1];
    v99 = 2 * v98;
    v100 = v195[1];
    v202 = v95 & 0xFFFFFFFFFFFFFFE0;
    v101 = v95 & 0xFFFFFFFFFFFFFFF8;
    v102 = (uint8x8_t *)(*a2 + v91);
    v103 = v92;
    v104 = v87;
    v105 = v90;
    while (!v95)
    {
LABEL_67:
      v103 += v98;
      v104 += v100;
      ++v93;
      v105 += v99;
      v102 = (uint8x8_t *)((char *)v102 + v100);
      if (v93 == v88)
        goto LABEL_64;
    }
    v106 = v89[2];
    v107 = *(_QWORD *)(v97 + 16);
    if (v95 < 8
      || (v106 == 1 ? (v108 = v107 == 1) : (v108 = 0),
          !v108
       || (v14 + v94 + v99 * v93 < v96 + v95 + v87 + v100 * v93
         ? (v109 = v96 + v104 >= v14 + v200 * v86 + 2 * (v196 + v95) + v99 * v93)
         : (v109 = 1),
           !v109)))
    {
      v111 = 0;
      v112 = v104;
      v113 = v103;
      goto LABEL_83;
    }
    if (v95 >= 0x20)
    {
      v118 = v102;
      v119 = (float16x8_t *)v105;
      v120 = v95 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v121 = *(uint8x16_t *)v118[-2].i8;
        v122 = vmovl_u8(*(uint8x8_t *)v121.i8);
        v123 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v122.i8))), vcvtq_f32_u32(vmovl_high_u16(v122)));
        v124 = vmovl_high_u8(v121);
        v125 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v124.i8))), vcvtq_f32_u32(vmovl_high_u16(v124)));
        v126 = vmovl_u8(*v118);
        v127 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v126.i8))), vcvtq_f32_u32(vmovl_high_u16(v126)));
        v128 = vmovl_high_u8(*(uint8x16_t *)v118->i8);
        v129 = (int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v128.i8)));
        result = vcvtq_f32_u32(vmovl_high_u16(v128));
        v119[-2] = v123;
        v119[-1] = v125;
        *v119 = v127;
        v119[1] = vcvt_hight_f16_f32(v129, result);
        v119 += 4;
        v118 += 4;
        v120 -= 32;
      }
      while (v120);
      v94 = v194 + v200 * v86;
      if (v95 == v202)
        goto LABEL_67;
      v110 = v95 & 0xFFFFFFFFFFFFFFE0;
      if ((v95 & 0x18) == 0)
      {
        v113 = v103 + v202 * v106;
        v111 = v95 & 0xFFFFFFFFFFFFFFE0;
        v112 = v104 + v202 * v107;
LABEL_83:
        v114 = v95 - v111;
        v115 = (__int8 *)(v96 + v112);
        v116 = 2 * v106;
        v117 = (_WORD *)(v14 + 2 * v113);
        do
        {
          result.i8[0] = *v115;
          result.f32[0] = (float)result.u32[0];
          __asm { FCVT            H0, S0 }
          *v117 = result.i16[0];
          v115 += v107;
          v117 = (_WORD *)((char *)v117 + v116);
          --v114;
        }
        while (v114);
        goto LABEL_67;
      }
    }
    else
    {
      v110 = 0;
    }
    v112 = v104 + v101 * v107;
    v113 = v103 + v101 * v106;
    v130 = v110 - (v95 & 0xFFFFFFFFFFFFFFF8);
    v131 = v96 + v110;
    v132 = (float16x8_t *)(v14 + 2 * (v110 + v103));
    do
    {
      v133 = vmovl_u8(*(uint8x8_t *)(v131 + v104));
      v134 = (int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v133.i8)));
      result = vcvtq_f32_u32(vmovl_high_u16(v133));
      *v132++ = vcvt_hight_f16_f32(v134, result);
      v131 += 8;
      v130 += 8;
    }
    while (v130);
    v111 = v95 & 0xFFFFFFFFFFFFFFF8;
    v94 = v194 + v200 * v86;
    if (v95 == v101)
      goto LABEL_67;
    goto LABEL_83;
  }
  if (v23 == 2)
  {
    v39 = *v5;
    if (!*v5)
      return result;
    v40 = 0;
    v41 = a2[8];
    v42 = a1[8];
    v43 = v5[1];
    v44 = *a2;
    v45 = (uint64_t *)a2[5];
    v46 = (uint64_t *)a1[5];
    v47 = *v46;
    v48 = 2 * *v46;
    v49 = v41 + v43;
    v50 = v43 & 0xFFFFFFFFFFFFFFE0;
    v51 = v43 & 0xFFFFFFFFFFFFFFF8;
    v52 = 2 * v42 + v14 + 32;
    v53 = *v45;
    v54 = v41 + *a2 + 16;
    v55 = v14 + 2 * v42;
    v56 = v14 + 2 * (v42 + v43);
    while (!v43)
    {
LABEL_34:
      v42 += v47;
      v41 += v53;
      ++v40;
      v52 += v48;
      v54 += v53;
      if (v40 == v39)
        return result;
    }
    v57 = v46[1];
    v58 = v45[1];
    if (v43 < 8
      || (v57 == 1 ? (_ZF = v58 == 1) : (_ZF = 0),
          !_ZF
       || (v55 + v48 * v40 < (unint64_t)(v44 + v49 + v53 * v40)
         ? (_CF = v44 + v41 >= (unint64_t)(v56 + v48 * v40))
         : (_CF = 1),
           !_CF)))
    {
      v62 = 0;
      v63 = v41;
      v64 = v42;
      goto LABEL_50;
    }
    if (v43 >= 0x20)
    {
      v69 = (uint8x8_t *)v54;
      v70 = (float16x8_t *)v52;
      v71 = v43 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v72 = *(uint8x16_t *)v69[-2].i8;
        v73 = vmovl_u8(*(uint8x8_t *)v72.i8);
        v74 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v73.i8))), vcvtq_f32_u32(vmovl_high_u16(v73)));
        v75 = vmovl_high_u8(v72);
        v76 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v75.i8))), vcvtq_f32_u32(vmovl_high_u16(v75)));
        v77 = vmovl_u8(*v69);
        v78 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v77.i8))), vcvtq_f32_u32(vmovl_high_u16(v77)));
        v79 = vmovl_high_u8(*(uint8x16_t *)v69->i8);
        v80 = (int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v79.i8)));
        result = vcvtq_f32_u32(vmovl_high_u16(v79));
        v70[-2] = v74;
        v70[-1] = v76;
        *v70 = v78;
        v70[1] = vcvt_hight_f16_f32(v80, result);
        v70 += 4;
        v69 += 4;
        v71 -= 32;
      }
      while (v71);
      if (v43 == v50)
        goto LABEL_34;
      v61 = v43 & 0xFFFFFFFFFFFFFFE0;
      if ((v43 & 0x18) == 0)
      {
        v64 = v42 + v50 * v57;
        v62 = v43 & 0xFFFFFFFFFFFFFFE0;
        v63 = v41 + v50 * v58;
LABEL_50:
        v65 = v43 - v62;
        v66 = (__int8 *)(v44 + v63);
        v67 = 2 * v57;
        v68 = (_WORD *)(v14 + 2 * v64);
        do
        {
          result.i8[0] = *v66;
          result.f32[0] = (float)result.u32[0];
          __asm { FCVT            H0, S0 }
          *v68 = result.i16[0];
          v66 += v58;
          v68 = (_WORD *)((char *)v68 + v67);
          --v65;
        }
        while (v65);
        goto LABEL_34;
      }
    }
    else
    {
      v61 = 0;
    }
    v63 = v41 + v51 * v58;
    v64 = v42 + v51 * v57;
    v81 = v61 - (v43 & 0xFFFFFFFFFFFFFFF8);
    v82 = v44 + v61;
    v83 = (float16x8_t *)(v14 + 2 * (v61 + v42));
    do
    {
      v84 = vmovl_u8(*(uint8x8_t *)(v82 + v41));
      v85 = (int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v84.i8)));
      result = vcvtq_f32_u32(vmovl_high_u16(v84));
      *v83++ = vcvt_hight_f16_f32(v85, result);
      v82 += 8;
      v81 += 8;
    }
    while (v81);
    v62 = v43 & 0xFFFFFFFFFFFFFFF8;
    if (v43 == v51)
      goto LABEL_34;
    goto LABEL_50;
  }
  if (v23 != 1)
  {
    if ((v13 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v135 = operator new(v13);
    bzero(v135, v13 & 0xFFFFFFFFFFFFFFF8);
    v137 = *a2;
    if (v13 >> 3 <= 1)
      v138 = 1;
    else
      v138 = v13 >> 3;
    v139 = a2[5];
    v140 = a2[8];
    v141 = v138 & 0x1FFFFFFFFFFFFFFELL;
    v142 = a1[5];
    while (v138 >= 2)
    {
      v145 = 0;
      v146 = 0;
      v147 = v138 & 0x1FFFFFFFFFFFFFFELL;
      v148 = (_QWORD *)(v142 + 8);
      v149 = v135 + 1;
      do
      {
        v145 += *(v148 - 1) * *(v149 - 1);
        v146 += *v148 * *v149;
        v149 += 2;
        v148 += 2;
        v147 -= 2;
      }
      while (v147);
      v143 = v146 + v145;
      v144 = v138 & 0x1FFFFFFFFFFFFFFELL;
      if (v138 != v141)
        goto LABEL_105;
LABEL_107:
      if (v138 < 2)
      {
        v157 = 0;
        v158 = 0;
LABEL_112:
        v164 = v138 - v158;
        v165 = v158;
        v166 = (uint64_t *)(v139 + 8 * v158);
        v167 = &v135[v165];
        do
        {
          v169 = *v167++;
          v168 = v169;
          v170 = *v166++;
          v157 += v170 * v168;
          --v164;
        }
        while (v164);
        goto LABEL_114;
      }
      v159 = 0;
      v160 = 0;
      v161 = v138 & 0x1FFFFFFFFFFFFFFELL;
      v162 = (_QWORD *)(v139 + 8);
      v163 = v135 + 1;
      do
      {
        v159 += *(v162 - 1) * *(v163 - 1);
        v160 += *v162 * *v163;
        v163 += 2;
        v162 += 2;
        v161 -= 2;
      }
      while (v161);
      v157 = v160 + v159;
      v158 = v138 & 0x1FFFFFFFFFFFFFFELL;
      if (v138 != v141)
        goto LABEL_112;
LABEL_114:
      LOBYTE(_S0) = *(_BYTE *)(v137 + v140 + v157);
      _S0 = (float)LODWORD(_S0);
      __asm { FCVT            H0, S0 }
      *(_WORD *)(v14 + 2 * v143) = LOWORD(_S0);
      if ((int)(v13 >> 3) >= 1)
      {
        v171 = (v13 >> 3) + 1;
        v172 = v13 >> 3;
        while (1)
        {
          v173 = (v171 - 2);
          v174 = v135[v173] + 1;
          v135[v173] = v174;
          if (v174 < v5[v173])
            break;
          v135[(v171 - 2)] = 0;
          --v172;
          if ((unint64_t)--v171 <= 1)
            goto LABEL_120;
        }
        if (v172 > 0)
          continue;
      }
LABEL_120:
      operator delete(v135);
      return result;
    }
    v143 = 0;
    v144 = 0;
LABEL_105:
    v150 = v138 - v144;
    v151 = v144;
    v152 = (uint64_t *)(v142 + 8 * v144);
    v153 = &v135[v151];
    do
    {
      v155 = *v153++;
      v154 = v155;
      v156 = *v152++;
      v143 += v156 * v154;
      --v150;
    }
    while (v150);
    goto LABEL_107;
  }
  v24 = *v5;
  if (!*v5)
    return result;
  v25 = a2[8];
  v26 = a1[8];
  v27 = *a2;
  v28 = *(_QWORD *)a1[5];
  v29 = *(_QWORD *)a2[5];
  if (v24 < 8)
    goto LABEL_27;
  v30 = 0;
  if (v28 != 1 || v29 != 1)
    goto LABEL_28;
  if (v14 + 2 * v26 < v27 + v24 + v25 && v27 + v25 < v14 + 2 * (v24 + v26))
  {
LABEL_27:
    v30 = 0;
LABEL_28:
    v31 = a2[8];
    v32 = a1[8];
    goto LABEL_29;
  }
  if (v24 >= 0x20)
  {
    v30 = v24 & 0xFFFFFFFFFFFFFFE0;
    v175 = (uint8x8_t *)(v25 + v27 + 16);
    v176 = v14 + 2 * v26 + 32;
    v177 = v24 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v178 = *(uint8x16_t *)v175[-2].i8;
      v179 = vmovl_u8(*(uint8x8_t *)v178.i8);
      v180 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v179.i8))), vcvtq_f32_u32(vmovl_high_u16(v179)));
      v181 = vmovl_high_u8(v178);
      v182 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v181.i8))), vcvtq_f32_u32(vmovl_high_u16(v181)));
      v183 = vmovl_u8(*v175);
      v184 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v183.i8))), vcvtq_f32_u32(vmovl_high_u16(v183)));
      v185 = vmovl_high_u8(*(uint8x16_t *)v175->i8);
      v186 = (int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v185.i8)));
      result = vcvtq_f32_u32(vmovl_high_u16(v185));
      *(float16x8_t *)(v176 - 32) = v180;
      *(float16x8_t *)(v176 - 16) = v182;
      *(float16x8_t *)v176 = v184;
      *(float16x8_t *)(v176 + 16) = vcvt_hight_f16_f32(v186, result);
      v176 += 64;
      v175 += 4;
      v177 -= 32;
    }
    while (v177);
    if (v24 == v30)
      return result;
    if ((v24 & 0x18) == 0)
    {
      v32 = v26 + v30;
      v31 = v25 + v30;
LABEL_29:
      v33 = v24 - v30;
      v34 = (__int8 *)(v27 + v31);
      v35 = 2 * v28;
      v36 = (_WORD *)(v14 + 2 * v32);
      do
      {
        result.i8[0] = *v34;
        result.f32[0] = (float)result.u32[0];
        __asm { FCVT            H0, S0 }
        *v36 = result.i16[0];
        v34 += v29;
        v36 = (_WORD *)((char *)v36 + v35);
        --v33;
      }
      while (v33);
      return result;
    }
  }
  else
  {
    v30 = 0;
  }
  v187 = v30;
  v30 = v24 & 0xFFFFFFFFFFFFFFF8;
  v31 = v25 + (v24 & 0xFFFFFFFFFFFFFFF8);
  v32 = v26 + (v24 & 0xFFFFFFFFFFFFFFF8);
  v188 = v187 - (v24 & 0xFFFFFFFFFFFFFFF8);
  v189 = (uint8x8_t *)(v27 + v187 + v25);
  v190 = (float16x8_t *)(v14 + 2 * (v187 + v26));
  do
  {
    v191 = *v189++;
    v192 = vmovl_u8(v191);
    v193 = (int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v192.i8)));
    result = vcvtq_f32_u32(vmovl_high_u16(v192));
    *v190++ = vcvt_hight_f16_f32(v193, result);
    v188 += 8;
  }
  while (v188);
  if (v24 != v30)
    goto LABEL_29;
  return result;
}

void sub_19120563C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void _ZZN5nitro7ndarrayIDhE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clINS0_IhEEEEDaS5_EUlRDhRKhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZN5nitro7ndarrayIDhE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clINS0_IhEEEEDaS5_EUlRDhRKhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1912058BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro7ndarrayIDhE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clINS0_IhEEEEDaS5_EUlRDhRKhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_191205A60(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191205A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x191205A6CLL);
}

void _ZN5nitro7ndarrayIDhE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clINS0_IiEEEEDaS5_EUlRDhRKiE_EEvRKNS0_IS5_EET0_(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  _WORD *v34;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int *v61;
  uint64_t v62;
  uint64_t v63;
  _WORD *v64;
  int32x4_t *v66;
  float16x8_t *v67;
  unint64_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int32x4_t *v86;
  uint64_t v87;
  float16x8_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  int *v98;
  uint64_t v99;
  uint64_t v100;
  _WORD *v101;
  int32x4_t *v103;
  float16x8_t *v104;
  unint64_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  _QWORD *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v146;
  int v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int32x4_t *v152;
  float16x8_t *v153;
  unint64_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    _ZZN5nitro7ndarrayIDhE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clINS0_IiEEEEDaS5_EUlRDhRKiE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return;
  v13 = *a1;
  if (!*a1)
    return;
  if (v12 - 8 < 8)
  {
    v14 = 1;
    v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v16 = ((v12 - 8) >> 3) + 1;
  v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  v17 = v4 + 1;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v164 = *v4;
    if (!*v4)
      return;
    v73 = 0;
    v74 = a2[8];
    v75 = a1[8];
    v76 = v4[1];
    v77 = (uint64_t *)a1[5];
    v159 = (uint64_t *)a2[5];
    v78 = v13 + 2 * v75 + 16;
    v162 = *v159;
    v163 = *v77;
    v161 = 2 * *v77;
    v79 = 4 * v74 + 32;
    v160 = 4 * *v159;
    while (!v76)
    {
LABEL_50:
      v75 += v163;
      v74 += v162;
      ++v73;
      v78 += v161;
      v79 += v160;
      if (v73 == v164)
        return;
    }
    v80 = 0;
    v81 = v4[2];
    v82 = *a2;
    v83 = a2[5];
    v84 = v77[1];
    v85 = v81 & 0xFFFFFFFFFFFFFFF0;
    v86 = (int32x4_t *)(*a2 + v79);
    v87 = v159[1];
    v88 = (float16x8_t *)v78;
    v89 = v74;
    v90 = v75;
    while (1)
    {
      if (v81)
      {
        v91 = v77[2];
        v92 = *(_QWORD *)(v83 + 16);
        if (v81 >= 0x10 && (v92 == 1 ? (v93 = v91 == 1) : (v93 = 0), v93))
        {
          v95 = v89 + v85 * v92;
          v103 = v86;
          v104 = v88;
          v105 = v81 & 0xFFFFFFFFFFFFFFF0;
          v96 = v90 + v85 * v91;
          do
          {
            v106 = v103[-2];
            v107 = v103[-1];
            v108 = *v103;
            v109 = v103[1];
            v103 += 4;
            v104[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(v106)), vcvtq_f32_s32(v107));
            *v104 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(v108)), vcvtq_f32_s32(v109));
            v104 += 2;
            v105 -= 16;
          }
          while (v105);
          v94 = v81 & 0xFFFFFFFFFFFFFFF0;
          if (v81 == v85)
            goto LABEL_53;
        }
        else
        {
          v94 = 0;
          v95 = v89;
          v96 = v90;
        }
        v97 = v81 - v94;
        v98 = (int *)(v82 + 4 * v95);
        v99 = 4 * v92;
        v100 = 2 * v91;
        v101 = (_WORD *)(v13 + 2 * v96);
        do
        {
          _S0 = (float)*v98;
          __asm { FCVT            H0, S0 }
          *v101 = LOWORD(_S0);
          v98 = (int *)((char *)v98 + v99);
          v101 = (_WORD *)((char *)v101 + v100);
          --v97;
        }
        while (v97);
      }
LABEL_53:
      v90 += v84;
      v89 += v87;
      ++v80;
      v88 = (float16x8_t *)((char *)v88 + 2 * v84);
      v86 = (int32x4_t *)((char *)v86 + 4 * v87);
      if (v80 == v76)
        goto LABEL_50;
    }
  }
  if (v22 == 2)
  {
    v39 = *v4;
    if (!*v4)
      return;
    v40 = 0;
    v41 = a2[8];
    v42 = a1[8];
    v43 = v4[1];
    v44 = *a2;
    v45 = (uint64_t *)a2[5];
    v46 = (uint64_t *)a1[5];
    v47 = *v46;
    v48 = *v45;
    v49 = v43 & 0xFFFFFFFFFFFFFFF0;
    v50 = v13 + 2 * v42 + 16;
    v51 = 2 * *v46;
    v52 = *a2 + 4 * v41 + 32;
    v53 = 4 * *v45;
    while (1)
    {
      if (v43)
      {
        v54 = v46[1];
        v55 = v45[1];
        if (v43 >= 0x10 && (v55 == 1 ? (_ZF = v54 == 1) : (_ZF = 0), _ZF))
        {
          v58 = v41 + v49 * v55;
          v66 = (int32x4_t *)v52;
          v67 = (float16x8_t *)v50;
          v68 = v43 & 0xFFFFFFFFFFFFFFF0;
          v59 = v42 + v49 * v54;
          do
          {
            v69 = v66[-2];
            v70 = v66[-1];
            v71 = *v66;
            v72 = v66[1];
            v66 += 4;
            v67[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(v69)), vcvtq_f32_s32(v70));
            *v67 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(v71)), vcvtq_f32_s32(v72));
            v67 += 2;
            v68 -= 16;
          }
          while (v68);
          v57 = v43 & 0xFFFFFFFFFFFFFFF0;
          if (v43 == v49)
            goto LABEL_33;
        }
        else
        {
          v57 = 0;
          v58 = v41;
          v59 = v42;
        }
        v60 = v43 - v57;
        v61 = (int *)(v44 + 4 * v58);
        v62 = 4 * v55;
        v63 = 2 * v54;
        v64 = (_WORD *)(v13 + 2 * v59);
        do
        {
          _S0 = (float)*v61;
          __asm { FCVT            H0, S0 }
          *v64 = LOWORD(_S0);
          v61 = (int *)((char *)v61 + v62);
          v64 = (_WORD *)((char *)v64 + v63);
          --v60;
        }
        while (v60);
      }
LABEL_33:
      v42 += v47;
      v41 += v48;
      ++v40;
      v50 += v51;
      v52 += v53;
      if (v40 == v39)
        return;
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v110 = operator new(v12);
    bzero(v110, v12 & 0xFFFFFFFFFFFFFFF8);
    v111 = *a2;
    if (v12 >> 3 <= 1)
      v112 = 1;
    else
      v112 = v12 >> 3;
    v113 = a2[5];
    v114 = a2[8];
    v115 = v112 & 0x1FFFFFFFFFFFFFFELL;
    v116 = a1[5];
    while (v112 >= 2)
    {
      v119 = 0;
      v120 = 0;
      v121 = v112 & 0x1FFFFFFFFFFFFFFELL;
      v122 = (_QWORD *)(v116 + 8);
      v123 = v110 + 1;
      do
      {
        v119 += *(v122 - 1) * *(v123 - 1);
        v120 += *v122 * *v123;
        v123 += 2;
        v122 += 2;
        v121 -= 2;
      }
      while (v121);
      v117 = v120 + v119;
      v118 = v112 & 0x1FFFFFFFFFFFFFFELL;
      if (v112 != v115)
        goto LABEL_78;
LABEL_80:
      if (v112 < 2)
      {
        v131 = 0;
        v132 = 0;
LABEL_85:
        v138 = v112 - v132;
        v139 = v132;
        v140 = (uint64_t *)(v113 + 8 * v132);
        v141 = &v110[v139];
        do
        {
          v143 = *v141++;
          v142 = v143;
          v144 = *v140++;
          v131 += v144 * v142;
          --v138;
        }
        while (v138);
        goto LABEL_87;
      }
      v133 = 0;
      v134 = 0;
      v135 = v112 & 0x1FFFFFFFFFFFFFFELL;
      v136 = (_QWORD *)(v113 + 8);
      v137 = v110 + 1;
      do
      {
        v133 += *(v136 - 1) * *(v137 - 1);
        v134 += *v136 * *v137;
        v137 += 2;
        v136 += 2;
        v135 -= 2;
      }
      while (v135);
      v131 = v134 + v133;
      v132 = v112 & 0x1FFFFFFFFFFFFFFELL;
      if (v112 != v115)
        goto LABEL_85;
LABEL_87:
      _S0 = (float)*(int *)(v111 + 4 * (v114 + v131));
      __asm { FCVT            H0, S0 }
      *(_WORD *)(v13 + 2 * v117) = LOWORD(_S0);
      if ((int)(v12 >> 3) >= 1)
      {
        v146 = (v12 >> 3) + 1;
        v147 = v12 >> 3;
        while (1)
        {
          v148 = (v146 - 2);
          v149 = v110[v148] + 1;
          v110[v148] = v149;
          if (v149 < v4[v148])
            break;
          v110[(v146 - 2)] = 0;
          --v147;
          if ((unint64_t)--v146 <= 1)
            goto LABEL_93;
        }
        if (v147 > 0)
          continue;
      }
LABEL_93:
      operator delete(v110);
      return;
    }
    v117 = 0;
    v118 = 0;
LABEL_78:
    v124 = v112 - v118;
    v125 = v118;
    v126 = (uint64_t *)(v116 + 8 * v118);
    v127 = &v110[v125];
    do
    {
      v129 = *v127++;
      v128 = v129;
      v130 = *v126++;
      v117 += v130 * v128;
      --v124;
    }
    while (v124);
    goto LABEL_80;
  }
  v23 = *v4;
  if (!*v4)
    return;
  v24 = a2[8];
  v25 = a1[8];
  v26 = *a2;
  v27 = *(_QWORD *)a1[5];
  v28 = *(_QWORD *)a2[5];
  if (v23 < 0x10)
  {
    v29 = 0;
LABEL_28:
    v30 = v23 - v29;
    v31 = (int *)(v26 + 4 * v24);
    v32 = 4 * v28;
    v33 = 2 * v27;
    v34 = (_WORD *)(v13 + 2 * v25);
    do
    {
      _S0 = (float)*v31;
      __asm { FCVT            H0, S0 }
      *v34 = LOWORD(_S0);
      v31 = (int *)((char *)v31 + v32);
      v34 = (_WORD *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  v29 = 0;
  if (v28 != 1)
    goto LABEL_28;
  if (v27 != 1)
    goto LABEL_28;
  v29 = v23 & 0xFFFFFFFFFFFFFFF0;
  v150 = v24 + (v23 & 0xFFFFFFFFFFFFFFF0);
  v151 = v25 + (v23 & 0xFFFFFFFFFFFFFFF0);
  v152 = (int32x4_t *)(v26 + 4 * v24 + 32);
  v153 = (float16x8_t *)(v13 + 2 * v25 + 16);
  v154 = v23 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v155 = v152[-2];
    v156 = v152[-1];
    v157 = *v152;
    v158 = v152[1];
    v152 += 4;
    v153[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(v155)), vcvtq_f32_s32(v156));
    *v153 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(v157)), vcvtq_f32_s32(v158));
    v153 += 2;
    v154 -= 16;
  }
  while (v154);
  v24 = v150;
  v25 = v151;
  if (v23 != v29)
    goto LABEL_28;
}

void sub_191206184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void _ZZN5nitro7ndarrayIDhE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clINS0_IiEEEEDaS5_EUlRDhRKiE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZN5nitro7ndarrayIDhE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clINS0_IiEEEEDaS5_EUlRDhRKiE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_191206404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro7ndarrayIDhE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clINS0_IiEEEEDaS5_EUlRDhRKiE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1912065A8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1912065BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1912065B4);
}

__n128 _ZN5nitro7ndarrayIDhE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clIS1_EEDaS5_EUlRDhRKDhE_EEvRKNS0_IS5_EET0_(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int16 *v31;
  uint64_t v32;
  unsigned __int16 *v33;
  __n128 result;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  __n128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  __n128 *v50;
  __n128 *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unsigned __int16 *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int16 *v61;
  __n128 *v63;
  __n128 *v64;
  unint64_t v65;
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  __n128 *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  __n128 *v84;
  __n128 *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unsigned __int16 *v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int16 *v97;
  __n128 *v99;
  __n128 *v100;
  unint64_t v101;
  __n128 v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  unint64_t v141;
  __n128 *v142;
  __n128 *v143;
  __n128 *v144;
  __n128 *v145;
  unint64_t v146;
  __n128 v147;
  uint64_t v148;
  __n128 *v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v158;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return result;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    _ZZN5nitro7ndarrayIDhE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clIS1_EEDaS5_EUlRDhRKDhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv();
  v12 = v3 - (char *)v4;
  if (v3 != (char *)v4)
  {
    v13 = *a1;
    if (*a1)
    {
      if (v12 - 8 >= 8)
      {
        v16 = ((v12 - 8) >> 3) + 1;
        v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
        v17 = v4 + 1;
        v18 = 1;
        v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
        v20 = 1;
        do
        {
          v18 *= *(v17 - 1);
          v20 *= *v17;
          v17 += 2;
          v19 -= 2;
        }
        while (v19);
        v14 = v20 * v18;
        if (v16 == (v16 & 0x3FFFFFFFFFFFFFFELL))
          goto LABEL_21;
      }
      else
      {
        v14 = 1;
        v15 = (unint64_t *)a1[2];
      }
      do
      {
        v21 = *v15++;
        v14 *= v21;
      }
      while (v15 != (unint64_t *)v3);
LABEL_21:
      if (!v14)
        return result;
      v22 = (uint64_t)v12 >> 3;
      v158 = *a1;
      if ((uint64_t)v12 >> 3 != 3)
      {
        if (v22 != 2)
        {
          if (v22 == 1)
          {
            v23 = *v4;
            if (!*v4)
              return result;
            v24 = a2[8];
            v25 = a1[8];
            v26 = *a2;
            v27 = *(_QWORD *)a1[5];
            v28 = *(_QWORD *)a2[5];
            if (v23 < 0x10)
              goto LABEL_27;
            v29 = 0;
            if (v27 != 1 || v28 != 1)
              goto LABEL_28;
            v142 = (__n128 *)(2 * v25 + v13);
            v143 = (__n128 *)(2 * v24 + v26);
            if ((unint64_t)((char *)v142 - (char *)v143) < 0x20)
            {
LABEL_27:
              v29 = 0;
            }
            else
            {
              v29 = v23 & 0xFFFFFFFFFFFFFFF0;
              v24 += v23 & 0xFFFFFFFFFFFFFFF0;
              v25 += v23 & 0xFFFFFFFFFFFFFFF0;
              v144 = v143 + 1;
              v145 = v142 + 1;
              v146 = v23 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                result = v144[-1];
                v147 = *v144;
                v145[-1] = result;
                *v145 = v147;
                v144 += 2;
                v145 += 2;
                v146 -= 16;
              }
              while (v146);
              if (v23 == v29)
                return result;
            }
LABEL_28:
            v30 = v23 - v29;
            v31 = (unsigned __int16 *)(v26 + 2 * v24);
            v32 = 2 * v27;
            v33 = (unsigned __int16 *)(v13 + 2 * v25);
            do
            {
              result.n128_u16[0] = *v31;
              *v33 = *v31;
              v31 += v28;
              v33 = (unsigned __int16 *)((char *)v33 + v32);
              --v30;
            }
            while (v30);
            return result;
          }
          if ((v12 & 0x8000000000000000) != 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v103 = operator new(v12);
          bzero(v103, v12 & 0xFFFFFFFFFFFFFFF8);
          v104 = *a2;
          if (v12 >> 3 <= 1)
            v105 = 1;
          else
            v105 = v12 >> 3;
          v106 = a2[5];
          v107 = a2[8];
          v108 = v105 & 0x1FFFFFFFFFFFFFFELL;
          v109 = a1[5];
          while (v105 >= 2)
          {
            v112 = 0;
            v113 = 0;
            v114 = v105 & 0x1FFFFFFFFFFFFFFELL;
            v115 = (_QWORD *)(v109 + 8);
            v116 = v103 + 1;
            do
            {
              v112 += *(v115 - 1) * *(v116 - 1);
              v113 += *v115 * *v116;
              v116 += 2;
              v115 += 2;
              v114 -= 2;
            }
            while (v114);
            v110 = v113 + v112;
            v111 = v105 & 0x1FFFFFFFFFFFFFFELL;
            v13 = v158;
            if (v105 != v108)
              goto LABEL_84;
LABEL_86:
            if (v105 < 2)
            {
              v124 = 0;
              v125 = 0;
LABEL_91:
              v131 = v105 - v125;
              v132 = v125;
              v133 = (uint64_t *)(v106 + 8 * v125);
              v134 = &v103[v132];
              do
              {
                v136 = *v134++;
                v135 = v136;
                v137 = *v133++;
                v124 += v137 * v135;
                --v131;
              }
              while (v131);
              goto LABEL_93;
            }
            v126 = 0;
            v127 = 0;
            v128 = v105 & 0x1FFFFFFFFFFFFFFELL;
            v129 = (_QWORD *)(v106 + 8);
            v130 = v103 + 1;
            do
            {
              v126 += *(v129 - 1) * *(v130 - 1);
              v127 += *v129 * *v130;
              v130 += 2;
              v129 += 2;
              v128 -= 2;
            }
            while (v128);
            v124 = v127 + v126;
            v125 = v105 & 0x1FFFFFFFFFFFFFFELL;
            v13 = v158;
            if (v105 != v108)
              goto LABEL_91;
LABEL_93:
            *(_WORD *)(v13 + 2 * v110) = *(_WORD *)(v104 + 2 * (v107 + v124));
            if ((int)(v12 >> 3) >= 1)
            {
              v138 = (v12 >> 3) + 1;
              v139 = v12 >> 3;
              while (1)
              {
                v140 = (v138 - 2);
                v141 = v103[v140] + 1;
                v103[v140] = v141;
                if (v141 < v4[v140])
                  break;
                v103[(v138 - 2)] = 0;
                --v139;
                if ((unint64_t)--v138 <= 1)
                  goto LABEL_99;
              }
              if (v139 > 0)
                continue;
            }
LABEL_99:
            operator delete(v103);
            return result;
          }
          v110 = 0;
          v111 = 0;
LABEL_84:
          v117 = v105 - v111;
          v118 = v111;
          v119 = (uint64_t *)(v109 + 8 * v111);
          v120 = &v103[v118];
          do
          {
            v122 = *v120++;
            v121 = v122;
            v123 = *v119++;
            v110 += v123 * v121;
            --v117;
          }
          while (v117);
          goto LABEL_86;
        }
        v35 = *v4;
        if (!*v4)
          return result;
        v36 = 0;
        v37 = a2[8];
        v38 = a1[8];
        v39 = v4[1];
        v40 = *a2;
        v41 = (uint64_t *)a2[5];
        v42 = (uint64_t *)a1[5];
        v43 = *v42;
        v44 = (__n128 *)(v13 + 2 * v38);
        v45 = 2 * *v42;
        v46 = *a2 + 2 * v37;
        v47 = *v41;
        v48 = 2 * *v41;
        v49 = v39 & 0xFFFFFFFFFFFFFFF0;
        v50 = v44 + 1;
        v51 = (__n128 *)(v46 + 16);
        while (!v39)
        {
LABEL_33:
          v38 += v43;
          v37 += v47;
          ++v36;
          v50 = (__n128 *)((char *)v50 + v45);
          v51 = (__n128 *)((char *)v51 + v48);
          if (v36 == v35)
            return result;
        }
        v52 = v42[1];
        v53 = v41[1];
        if (v39 >= 0x10)
        {
          v54 = 0;
          if (v52 == 1 && v53 == 1)
          {
            v55 = v37;
            v56 = v38;
            if ((unint64_t)v44->n128_u64 + v45 * v36 - v46 - v48 * v36 >= 0x20)
            {
              v55 = v37 + v49 * v53;
              v63 = v51;
              v64 = v50;
              v65 = v39 & 0xFFFFFFFFFFFFFFF0;
              v56 = v38 + v49 * v52;
              do
              {
                result = v63[-1];
                v66 = *v63;
                v64[-1] = result;
                *v64 = v66;
                v64 += 2;
                v63 += 2;
                v65 -= 16;
              }
              while (v65);
              v54 = v39 & 0xFFFFFFFFFFFFFFF0;
              if (v39 == v49)
                goto LABEL_33;
            }
            goto LABEL_38;
          }
        }
        else
        {
          v54 = 0;
        }
        v55 = v37;
        v56 = v38;
LABEL_38:
        v57 = v39 - v54;
        v58 = (unsigned __int16 *)(v40 + 2 * v55);
        v59 = 2 * v53;
        v60 = 2 * v52;
        v61 = (unsigned __int16 *)(v158 + 2 * v56);
        do
        {
          result.n128_u16[0] = *v58;
          *v61 = *v58;
          v58 = (unsigned __int16 *)((char *)v58 + v59);
          v61 = (unsigned __int16 *)((char *)v61 + v60);
          --v57;
        }
        while (v57);
        goto LABEL_33;
      }
      v154 = *v4;
      if (!*v4)
        return result;
      v67 = 0;
      v68 = a2[8];
      v69 = a1[8];
      v70 = v4[1];
      v71 = (uint64_t *)a1[5];
      v150 = (uint64_t *)a2[5];
      v151 = a1[2];
      v152 = *v150;
      v153 = *v71;
      v156 = 2 * *v71;
      v155 = 2 * *v150;
      v148 = 2 * v68;
      v149 = (__n128 *)(v13 + 2 * v69);
      v72 = v149 + 1;
      v73 = 2 * v68 + 16;
      while (!v70)
      {
LABEL_53:
        v69 += v153;
        v68 += v152;
        ++v67;
        v72 = (__n128 *)((char *)v72 + v156);
        v73 += v155;
        if (v67 == v154)
          return result;
      }
      v74 = 0;
      v75 = *(_QWORD *)(v151 + 16);
      v76 = *a2;
      v77 = v71[1];
      v78 = v150[1];
      v79 = 2 * v77;
      v80 = v148 + v155 * v67 + *a2;
      v81 = 2 * v78;
      v82 = v75 & 0xFFFFFFFFFFFFFFF0;
      v83 = a2[5];
      v84 = (__n128 *)(*a2 + v73);
      v85 = v72;
      v86 = v68;
      v87 = v69;
      while (!v75)
      {
LABEL_56:
        v87 += v77;
        v86 += v78;
        ++v74;
        v85 = (__n128 *)((char *)v85 + v79);
        v84 = (__n128 *)((char *)v84 + v81);
        if (v74 == v70)
          goto LABEL_53;
      }
      v88 = v71[2];
      v89 = *(_QWORD *)(v83 + 16);
      if (v75 >= 0x10)
      {
        v90 = 0;
        if (v88 == 1 && v89 == 1)
        {
          v91 = v86;
          v92 = v87;
          if ((unint64_t)v149->n128_u64 + v156 * v67 + v79 * v74 - v80 - v81 * v74 >= 0x20)
          {
            v91 = v86 + v82 * v89;
            v99 = v84;
            v100 = v85;
            v101 = v75 & 0xFFFFFFFFFFFFFFF0;
            v92 = v87 + v82 * v88;
            do
            {
              result = v99[-1];
              v102 = *v99;
              v100[-1] = result;
              *v100 = v102;
              v100 += 2;
              v99 += 2;
              v101 -= 16;
            }
            while (v101);
            v90 = v75 & 0xFFFFFFFFFFFFFFF0;
            v13 = v158;
            if (v75 == v82)
              goto LABEL_56;
          }
          goto LABEL_61;
        }
      }
      else
      {
        v90 = 0;
      }
      v91 = v86;
      v92 = v87;
LABEL_61:
      v93 = v75 - v90;
      v94 = (unsigned __int16 *)(v76 + 2 * v91);
      v95 = 2 * v89;
      v96 = 2 * v88;
      v97 = (unsigned __int16 *)(v13 + 2 * v92);
      do
      {
        result.n128_u16[0] = *v94;
        *v97 = *v94;
        v94 = (unsigned __int16 *)((char *)v94 + v95);
        v97 = (unsigned __int16 *)((char *)v97 + v96);
        --v93;
      }
      while (v93);
      goto LABEL_56;
    }
  }
  return result;
}

void sub_191206CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void _ZZN5nitro7ndarrayIDhE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clIS1_EEDaS5_EUlRDhRKDhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZN5nitro7ndarrayIDhE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clIS1_EEDaS5_EUlRDhRKDhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_191206F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro7ndarrayIDhE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clIS1_EEDaS5_EUlRDhRKDhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1912070F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191207104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1912070FCLL);
}

void _ZN5nitro7ndarrayIDhE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clINS0_IfEEEEDaS5_EUlRDhRKfE_EEvRKNS0_IS5_EET0_(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  _WORD *v34;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int *v61;
  uint64_t v62;
  uint64_t v63;
  _WORD *v64;
  float32x4_t *v66;
  float16x8_t *v67;
  unint64_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  float32x4_t *v86;
  uint64_t v87;
  float16x8_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  int *v98;
  uint64_t v99;
  uint64_t v100;
  _WORD *v101;
  float32x4_t *v103;
  float16x8_t *v104;
  unint64_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  _QWORD *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v146;
  int v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  float32x4_t *v152;
  float16x8_t *v153;
  unint64_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;

  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  v5 = (v3 - (char *)v4) >> 3;
  v6 = (_QWORD *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3)
    goto LABEL_13;
  if (v3 == (char *)v4)
    return;
  v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6)
    goto LABEL_13;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v7 == v8)
      break;
    v10 = v4[v8];
    v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5)
LABEL_13:
    _ZZN5nitro7ndarrayIDhE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clINS0_IfEEEEDaS5_EUlRDhRKfE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv();
  v12 = v3 - (char *)v4;
  if (v3 == (char *)v4)
    return;
  v13 = *a1;
  if (!*a1)
    return;
  if (v12 - 8 < 8)
  {
    v14 = 1;
    v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  v16 = ((v12 - 8) >> 3) + 1;
  v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  v17 = v4 + 1;
  v18 = 1;
  v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_20;
LABEL_21:
  if (!v14)
    return;
  v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    v164 = *v4;
    if (!*v4)
      return;
    v73 = 0;
    v74 = a2[8];
    v75 = a1[8];
    v76 = v4[1];
    v77 = (uint64_t *)a1[5];
    v159 = (uint64_t *)a2[5];
    v78 = v13 + 2 * v75 + 16;
    v162 = *v159;
    v163 = *v77;
    v161 = 2 * *v77;
    v79 = 4 * v74 + 32;
    v160 = 4 * *v159;
    while (!v76)
    {
LABEL_50:
      v75 += v163;
      v74 += v162;
      ++v73;
      v78 += v161;
      v79 += v160;
      if (v73 == v164)
        return;
    }
    v80 = 0;
    v81 = v4[2];
    v82 = *a2;
    v83 = a2[5];
    v84 = v77[1];
    v85 = v81 & 0xFFFFFFFFFFFFFFF0;
    v86 = (float32x4_t *)(*a2 + v79);
    v87 = v159[1];
    v88 = (float16x8_t *)v78;
    v89 = v74;
    v90 = v75;
    while (1)
    {
      if (v81)
      {
        v91 = v77[2];
        v92 = *(_QWORD *)(v83 + 16);
        if (v81 >= 0x10 && (v92 == 1 ? (v93 = v91 == 1) : (v93 = 0), v93))
        {
          v95 = v89 + v85 * v92;
          v103 = v86;
          v104 = v88;
          v105 = v81 & 0xFFFFFFFFFFFFFFF0;
          v96 = v90 + v85 * v91;
          do
          {
            v107 = v103[-2];
            v106 = v103[-1];
            v109 = *v103;
            v108 = v103[1];
            v103 += 4;
            v104[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v107), v106);
            *v104 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v109), v108);
            v104 += 2;
            v105 -= 16;
          }
          while (v105);
          v94 = v81 & 0xFFFFFFFFFFFFFFF0;
          if (v81 == v85)
            goto LABEL_53;
        }
        else
        {
          v94 = 0;
          v95 = v89;
          v96 = v90;
        }
        v97 = v81 - v94;
        v98 = (int *)(v82 + 4 * v95);
        v99 = 4 * v92;
        v100 = 2 * v91;
        v101 = (_WORD *)(v13 + 2 * v96);
        do
        {
          _S0 = *v98;
          __asm { FCVT            H0, S0 }
          *v101 = _S0;
          v98 = (int *)((char *)v98 + v99);
          v101 = (_WORD *)((char *)v101 + v100);
          --v97;
        }
        while (v97);
      }
LABEL_53:
      v90 += v84;
      v89 += v87;
      ++v80;
      v88 = (float16x8_t *)((char *)v88 + 2 * v84);
      v86 = (float32x4_t *)((char *)v86 + 4 * v87);
      if (v80 == v76)
        goto LABEL_50;
    }
  }
  if (v22 == 2)
  {
    v39 = *v4;
    if (!*v4)
      return;
    v40 = 0;
    v41 = a2[8];
    v42 = a1[8];
    v43 = v4[1];
    v44 = *a2;
    v45 = (uint64_t *)a2[5];
    v46 = (uint64_t *)a1[5];
    v47 = *v46;
    v48 = *v45;
    v49 = v43 & 0xFFFFFFFFFFFFFFF0;
    v50 = v13 + 2 * v42 + 16;
    v51 = 2 * *v46;
    v52 = *a2 + 4 * v41 + 32;
    v53 = 4 * *v45;
    while (1)
    {
      if (v43)
      {
        v54 = v46[1];
        v55 = v45[1];
        if (v43 >= 0x10 && (v55 == 1 ? (_ZF = v54 == 1) : (_ZF = 0), _ZF))
        {
          v58 = v41 + v49 * v55;
          v66 = (float32x4_t *)v52;
          v67 = (float16x8_t *)v50;
          v68 = v43 & 0xFFFFFFFFFFFFFFF0;
          v59 = v42 + v49 * v54;
          do
          {
            v70 = v66[-2];
            v69 = v66[-1];
            v72 = *v66;
            v71 = v66[1];
            v66 += 4;
            v67[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v70), v69);
            *v67 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v72), v71);
            v67 += 2;
            v68 -= 16;
          }
          while (v68);
          v57 = v43 & 0xFFFFFFFFFFFFFFF0;
          if (v43 == v49)
            goto LABEL_33;
        }
        else
        {
          v57 = 0;
          v58 = v41;
          v59 = v42;
        }
        v60 = v43 - v57;
        v61 = (int *)(v44 + 4 * v58);
        v62 = 4 * v55;
        v63 = 2 * v54;
        v64 = (_WORD *)(v13 + 2 * v59);
        do
        {
          _S0 = *v61;
          __asm { FCVT            H0, S0 }
          *v64 = _S0;
          v61 = (int *)((char *)v61 + v62);
          v64 = (_WORD *)((char *)v64 + v63);
          --v60;
        }
        while (v60);
      }
LABEL_33:
      v42 += v47;
      v41 += v48;
      ++v40;
      v50 += v51;
      v52 += v53;
      if (v40 == v39)
        return;
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v110 = operator new(v12);
    bzero(v110, v12 & 0xFFFFFFFFFFFFFFF8);
    v111 = *a2;
    if (v12 >> 3 <= 1)
      v112 = 1;
    else
      v112 = v12 >> 3;
    v113 = a2[5];
    v114 = a2[8];
    v115 = v112 & 0x1FFFFFFFFFFFFFFELL;
    v116 = a1[5];
    while (v112 >= 2)
    {
      v119 = 0;
      v120 = 0;
      v121 = v112 & 0x1FFFFFFFFFFFFFFELL;
      v122 = (_QWORD *)(v116 + 8);
      v123 = v110 + 1;
      do
      {
        v119 += *(v122 - 1) * *(v123 - 1);
        v120 += *v122 * *v123;
        v123 += 2;
        v122 += 2;
        v121 -= 2;
      }
      while (v121);
      v117 = v120 + v119;
      v118 = v112 & 0x1FFFFFFFFFFFFFFELL;
      if (v112 != v115)
        goto LABEL_78;
LABEL_80:
      if (v112 < 2)
      {
        v131 = 0;
        v132 = 0;
LABEL_85:
        v138 = v112 - v132;
        v139 = v132;
        v140 = (uint64_t *)(v113 + 8 * v132);
        v141 = &v110[v139];
        do
        {
          v143 = *v141++;
          v142 = v143;
          v144 = *v140++;
          v131 += v144 * v142;
          --v138;
        }
        while (v138);
        goto LABEL_87;
      }
      v133 = 0;
      v134 = 0;
      v135 = v112 & 0x1FFFFFFFFFFFFFFELL;
      v136 = (_QWORD *)(v113 + 8);
      v137 = v110 + 1;
      do
      {
        v133 += *(v136 - 1) * *(v137 - 1);
        v134 += *v136 * *v137;
        v137 += 2;
        v136 += 2;
        v135 -= 2;
      }
      while (v135);
      v131 = v134 + v133;
      v132 = v112 & 0x1FFFFFFFFFFFFFFELL;
      if (v112 != v115)
        goto LABEL_85;
LABEL_87:
      _S0 = *(_DWORD *)(v111 + 4 * (v114 + v131));
      __asm { FCVT            H0, S0 }
      *(_WORD *)(v13 + 2 * v117) = _S0;
      if ((int)(v12 >> 3) >= 1)
      {
        v146 = (v12 >> 3) + 1;
        v147 = v12 >> 3;
        while (1)
        {
          v148 = (v146 - 2);
          v149 = v110[v148] + 1;
          v110[v148] = v149;
          if (v149 < v4[v148])
            break;
          v110[(v146 - 2)] = 0;
          --v147;
          if ((unint64_t)--v146 <= 1)
            goto LABEL_93;
        }
        if (v147 > 0)
          continue;
      }
LABEL_93:
      operator delete(v110);
      return;
    }
    v117 = 0;
    v118 = 0;
LABEL_78:
    v124 = v112 - v118;
    v125 = v118;
    v126 = (uint64_t *)(v116 + 8 * v118);
    v127 = &v110[v125];
    do
    {
      v129 = *v127++;
      v128 = v129;
      v130 = *v126++;
      v117 += v130 * v128;
      --v124;
    }
    while (v124);
    goto LABEL_80;
  }
  v23 = *v4;
  if (!*v4)
    return;
  v24 = a2[8];
  v25 = a1[8];
  v26 = *a2;
  v27 = *(_QWORD *)a1[5];
  v28 = *(_QWORD *)a2[5];
  if (v23 < 0x10)
  {
    v29 = 0;
LABEL_28:
    v30 = v23 - v29;
    v31 = (int *)(v26 + 4 * v24);
    v32 = 4 * v28;
    v33 = 2 * v27;
    v34 = (_WORD *)(v13 + 2 * v25);
    do
    {
      _S0 = *v31;
      __asm { FCVT            H0, S0 }
      *v34 = _S0;
      v31 = (int *)((char *)v31 + v32);
      v34 = (_WORD *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  v29 = 0;
  if (v28 != 1)
    goto LABEL_28;
  if (v27 != 1)
    goto LABEL_28;
  v29 = v23 & 0xFFFFFFFFFFFFFFF0;
  v150 = v24 + (v23 & 0xFFFFFFFFFFFFFFF0);
  v151 = v25 + (v23 & 0xFFFFFFFFFFFFFFF0);
  v152 = (float32x4_t *)(v26 + 4 * v24 + 32);
  v153 = (float16x8_t *)(v13 + 2 * v25 + 16);
  v154 = v23 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v156 = v152[-2];
    v155 = v152[-1];
    v158 = *v152;
    v157 = v152[1];
    v152 += 4;
    v153[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v156), v155);
    *v153 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v158), v157);
    v153 += 2;
    v154 -= 16;
  }
  while (v154);
  v24 = v150;
  v25 = v151;
  if (v23 != v29)
    goto LABEL_28;
}

void sub_1912077D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void _ZZN5nitro7ndarrayIDhE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clINS0_IfEEEEDaS5_EUlRDhRKfE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZN5nitro7ndarrayIDhE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clINS0_IfEEEEDaS5_EUlRDhRKfE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_191207A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro7ndarrayIDhE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clINS0_IfEEEEDaS5_EUlRDhRKfE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_191207BF8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191207C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x191207C04);
}

void _ZZZNK5nitro17ndarray_container5visitIZNKS0_4castIDhEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_191207D64(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191207D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x191207D70);
}

void nitro::ndarray_container::visit<nitro::ndarray_container::reshape(std::vector<long long> const&)::$_0>(nitro::ndarray_container::reshape(std::vector<long long> const&)::$_0)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912080A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_191208110(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::reshape(uint64_t *a1@<X0>, int64x2_t **a2@<X1>, _QWORD *a3@<X8>)
{
  int64x2_t *v5;
  int64x2_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int64x2_t *v12;
  int64x2_t v13;
  int64x2_t v14;
  uint64_t v15;
  int64x2_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  int64x2_t *v33;
  int64x2_t *v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  int64x2_t *v38;
  int64x2_t *v39;
  uint64_t v40;
  int64x2_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *p_shared_owners;
  unint64_t v90;
  void *__p;
  void *v92;
  uint64_t v93;
  unint64_t p_p;
  std::__shared_weak_count *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  uint64_t v100;
  void *p_p_p;
  void *v102;
  char *v103;

  v5 = *a2;
  v6 = a2[1];
  if (v6 != *a2)
  {
    v7 = (char *)v6 - (char *)*a2 - 8;
    if (v7 >= 0x18)
    {
      v11 = (v7 >> 3) + 1;
      v9 = &v5->i64[v11 & 0x3FFFFFFFFFFFFFFCLL];
      v12 = v5 + 1;
      v13 = 0uLL;
      v14 = vdupq_n_s64(1uLL);
      v15 = v11 & 0x3FFFFFFFFFFFFFFCLL;
      v16 = 0uLL;
      do
      {
        v13 = vsubq_s64(v13, vcgtq_s64(v14, v12[-1]));
        v16 = vsubq_s64(v16, vcgtq_s64(v14, *v12));
        v12 += 2;
        v15 -= 4;
      }
      while (v15);
      v8 = vaddvq_s64(vaddq_s64(v16, v13));
      if (v11 == (v11 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_13;
    }
    else
    {
      v8 = 0;
      v9 = (uint64_t *)*a2;
    }
    do
    {
      v17 = *v9++;
      if (v17 < 1)
        ++v8;
    }
    while (v9 != (uint64_t *)v6);
LABEL_13:
    p_p = v8;
    if (v8 > 1)
    {
      p_p_p = &p_p;
      nitro::ndarray<unsigned char>::reshape(std::vector<long long> const&)const::{lambda(void)#2}::operator()();
    }
    v18 = (char *)v6 - (char *)v5;
    if (v5 == v6)
    {
      v22 = v18 >> 3;
      p_p_p = 0;
      v102 = 0;
      v103 = 0;
      v20 = 1;
      goto LABEL_36;
    }
    v19 = v18 - 8;
    if (v19 >= 8)
    {
      v23 = (v19 >> 3) + 1;
      v21 = &v5->i64[v23 & 0x3FFFFFFFFFFFFFFELL];
      v24 = &v5->i64[1];
      v25 = 1;
      v26 = v23 & 0x3FFFFFFFFFFFFFFELL;
      v27 = 1;
      do
      {
        v28 = *(v24 - 1);
        v29 = *v24;
        if (v28 <= 1)
          v28 = 1;
        if (v29 <= 1)
          v29 = 1;
        v25 *= v28;
        v27 *= v29;
        v24 += 2;
        v26 -= 2;
      }
      while (v26);
      v20 = v27 * v25;
      if (v23 == (v23 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_28;
    }
    else
    {
      v20 = 1;
      v21 = (uint64_t *)v5;
    }
    do
    {
      v31 = *v21++;
      v30 = v31;
      if (v31 <= 1)
        v30 = 1;
      v20 *= v30;
    }
    while (v21 != (uint64_t *)v6);
LABEL_28:
    p_p_p = 0;
    v102 = 0;
    v103 = 0;
    v32 = (char *)v6 - (char *)v5;
    v22 = ((char *)v6 - (char *)v5) >> 3;
    if (v6 != v5)
    {
      if (v32 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v33 = (int64x2_t *)operator new((char *)v6 - (char *)v5);
      p_p_p = v33;
      v103 = &v33->i8[8 * v22];
      v34 = v5;
      v35 = (uint64_t *)v33;
      if ((unint64_t)(v32 - 8) < 0x18)
        goto LABEL_104;
      v36 = ((unint64_t)(v32 - 8) >> 3) + 1;
      v37 = v36 & 0x3FFFFFFFFFFFFFFCLL;
      v34 = (int64x2_t *)((char *)v5 + v37 * 8);
      v35 = &v33->i64[v37];
      v38 = v33 + 1;
      v39 = v5 + 1;
      v40 = v36 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v41 = *v39;
        v38[-1] = v39[-1];
        *v38 = v41;
        v38 += 2;
        v39 += 2;
        v40 -= 4;
      }
      while (v40);
      if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_104:
        do
        {
          v42 = v34->i64[0];
          v34 = (int64x2_t *)((char *)v34 + 8);
          *v35++ = v42;
        }
        while (v34 != v6);
      }
      v102 = v35;
    }
LABEL_36:
    if (!v8)
    {
      v49 = (char *)a1[2];
      v48 = (char *)a1[3];
      goto LABEL_76;
    }
    p_p = 0;
    v44 = a1[2];
    v43 = (uint64_t *)a1[3];
    if (v43 == (uint64_t *)v44)
    {
      v45 = 0;
      goto LABEL_47;
    }
    v45 = *a1;
    if (!*a1)
      goto LABEL_47;
    v46 = (unint64_t)v43 - v44 - 8;
    if (v46 >= 8)
    {
      v50 = (v46 >> 3) + 1;
      v47 = (uint64_t *)(v44 + 8 * (v50 & 0x3FFFFFFFFFFFFFFELL));
      v51 = (_QWORD *)(v44 + 8);
      v52 = 1;
      v53 = v50 & 0x3FFFFFFFFFFFFFFELL;
      v54 = 1;
      do
      {
        v52 *= *(v51 - 1);
        v54 *= *v51;
        v51 += 2;
        v53 -= 2;
      }
      while (v53);
      v45 = v54 * v52;
      if (v50 == (v50 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_47:
        p_p = v45 % v20;
        if (v45 % v20)
        {
          __p = &p_p;
          nitro::ndarray<unsigned char>::reshape(std::vector<long long> const&)const::{lambda(void)#3}::operator()();
        }
        if (v6 != v5)
        {
          v56 = 0;
          v57 = p_p_p;
          if (v22 <= 1)
            v58 = 1;
          else
            v58 = v22;
          do
          {
            if (v5->i64[v56] > 0)
              goto LABEL_54;
            v61 = a1[2];
            v60 = (uint64_t *)a1[3];
            if (v60 == (uint64_t *)v61 || !*a1)
            {
              v59 = 0;
            }
            else
            {
              v62 = (unint64_t)v60 - v61 - 8;
              if (v62 >= 8)
              {
                v64 = (v62 >> 3) + 1;
                v63 = (uint64_t *)(v61 + 8 * (v64 & 0x3FFFFFFFFFFFFFFELL));
                v65 = (_QWORD *)(v61 + 8);
                v66 = v64 & 0x3FFFFFFFFFFFFFFELL;
                v67 = 1;
                v68 = 1;
                do
                {
                  v67 *= *(v65 - 1);
                  v68 *= *v65;
                  v65 += 2;
                  v66 -= 2;
                }
                while (v66);
                v59 = v68 * v67;
                if (v64 == (v64 & 0x3FFFFFFFFFFFFFFELL))
                  goto LABEL_53;
              }
              else
              {
                v59 = 1;
                v63 = (uint64_t *)a1[2];
              }
              do
              {
                v69 = *v63++;
                v59 *= v69;
              }
              while (v63 != v60);
            }
LABEL_53:
            v57[v56] = v59 / v20;
LABEL_54:
            ++v56;
          }
          while (v56 != v58);
        }
        v49 = (char *)a1[2];
        v48 = (char *)a1[3];
        if (v48 == v49)
          goto LABEL_86;
        if (!*a1)
        {
          v20 = 0;
          goto LABEL_76;
        }
        v70 = v48 - v49 - 8;
        if (v70 >= 8)
        {
          v72 = 0;
          v73 = (v70 >> 3) + 1;
          v74 = v73 & 0x3FFFFFFFFFFFFFFELL;
          v71 = &v49[8 * (v73 & 0x3FFFFFFFFFFFFFFELL)];
          v75 = 1;
          v76 = 1;
          do
          {
            v77 = &v49[8 * v72];
            v75 *= *(_QWORD *)v77;
            v76 *= *((_QWORD *)v77 + 1);
            v72 += 2;
          }
          while (v74 != v72);
          v20 = v76 * v75;
          if (v73 == v74)
          {
LABEL_76:
            __p = (void *)v20;
            if (v48 == v49)
            {
              v79 = 0;
              goto LABEL_85;
            }
            v79 = *a1;
            if (!*a1)
              goto LABEL_85;
            v80 = v48 - v49 - 8;
            if (v80 >= 8)
            {
              v82 = (v80 >> 3) + 1;
              v81 = &v49[8 * (v82 & 0x3FFFFFFFFFFFFFFELL)];
              v83 = v49 + 8;
              v84 = 1;
              v85 = v82 & 0x3FFFFFFFFFFFFFFELL;
              v86 = 1;
              do
              {
                v84 *= *(v83 - 1);
                v86 *= *v83;
                v83 += 2;
                v85 -= 2;
              }
              while (v85);
              v79 = v86 * v84;
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFELL))
              {
LABEL_85:
                v100 = v79;
                if (v20 != v79)
                {
                  p_p = (unint64_t)&__p;
                  v95 = (std::__shared_weak_count *)&v100;
                  nitro::ndarray<unsigned char>::reshape(std::vector<long long> const&)const::{lambda(void)#4}::operator()();
                }
LABEL_86:
                nitro::ndarray<unsigned char>::canonicalize(a1, (uint64_t *)&p_p);
                __p = 0;
                v92 = 0;
                v93 = 0;
                nitro::ndarray<unsigned char>::ndarray(a3, &p_p, (uint64_t)&p_p_p, (uint64_t)&__p, 0);
                if (__p)
                {
                  v92 = __p;
                  operator delete(__p);
                }
                if (v98)
                {
                  v99 = v98;
                  operator delete(v98);
                }
                if (v96)
                {
                  v97 = v96;
                  operator delete(v96);
                }
                v88 = v95;
                if (v95)
                {
                  p_shared_owners = (unint64_t *)&v95->__shared_owners_;
                  do
                    v90 = __ldaxr(p_shared_owners);
                  while (__stlxr(v90 - 1, p_shared_owners));
                  if (!v90)
                  {
                    ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                    std::__shared_weak_count::__release_weak(v88);
                  }
                }
                if (p_p_p)
                {
                  v102 = p_p_p;
                  operator delete(p_p_p);
                }
                return;
              }
            }
            else
            {
              v79 = 1;
              v81 = v49;
            }
            do
            {
              v87 = *(_QWORD *)v81;
              v81 += 8;
              v79 *= v87;
            }
            while (v81 != v48);
            goto LABEL_85;
          }
        }
        else
        {
          v20 = 1;
          v71 = (char *)a1[2];
        }
        do
        {
          v78 = *(_QWORD *)v71;
          v71 += 8;
          v20 *= v78;
        }
        while (v71 != v48);
        goto LABEL_76;
      }
    }
    else
    {
      v45 = 1;
      v47 = (uint64_t *)a1[2];
    }
    do
    {
      v55 = *v47++;
      v45 *= v55;
    }
    while (v47 != v43);
    goto LABEL_47;
  }
  v10 = a1[3] - a1[2];
  p_p = v10 >> 3;
  if (v10)
  {
    p_p_p = &p_p;
    nitro::ndarray<unsigned char>::reshape(std::vector<long long> const&)const::{lambda(void)#1}::operator()();
  }
  nitro::ndarray<unsigned char>::ndarray(a3, a1);
}

void sub_191208724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>::reshape(std::vector<long long> const&)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"m_shape.size()", 14);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1192, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::ndarray<unsigned char>::reshape(std::vector<long long> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_191208A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::reshape(std::vector<long long> const&)const::{lambda(void)#2}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"num_unknown", 11);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"<=", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"<=", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1199, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::ndarray<unsigned char>::reshape(std::vector<long long> const&)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_191208DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::reshape(std::vector<long long> const&)const::{lambda(void)#3}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"num_elem() % new_numel", 22);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1209, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::ndarray<unsigned char>::reshape(std::vector<long long> const&)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_191209118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::reshape(std::vector<long long> const&)const::{lambda(void)#4}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"new_numel", 9);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"num_elem()", 10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1215, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::ndarray<unsigned char>::reshape(std::vector<long long> const&)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_191209478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::reshape(std::vector<long long> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1192, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19120961C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191209630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x191209628);
}

void nitro::ndarray<unsigned char>::reshape(std::vector<long long> const&)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1199, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_191209788(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19120979C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x191209794);
}

void nitro::ndarray<unsigned char>::reshape(std::vector<long long> const&)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1209, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1912098F4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191209908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x191209900);
}

void nitro::ndarray<unsigned char>::reshape(std::vector<long long> const&)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1215, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_191209A60(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191209A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x191209A6CLL);
}

void nitro::ndarray<int>::reshape(uint64_t *a1@<X0>, int64x2_t **a2@<X1>, _QWORD *a3@<X8>)
{
  int64x2_t *v5;
  int64x2_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int64x2_t *v12;
  int64x2_t v13;
  int64x2_t v14;
  uint64_t v15;
  int64x2_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  int64x2_t *v33;
  int64x2_t *v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  int64x2_t *v38;
  int64x2_t *v39;
  uint64_t v40;
  int64x2_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *p_shared_owners;
  unint64_t v90;
  void *__p;
  void *v92;
  uint64_t v93;
  unint64_t p_p;
  std::__shared_weak_count *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  uint64_t v100;
  void *p_p_p;
  void *v102;
  char *v103;

  v5 = *a2;
  v6 = a2[1];
  if (v6 != *a2)
  {
    v7 = (char *)v6 - (char *)*a2 - 8;
    if (v7 >= 0x18)
    {
      v11 = (v7 >> 3) + 1;
      v9 = &v5->i64[v11 & 0x3FFFFFFFFFFFFFFCLL];
      v12 = v5 + 1;
      v13 = 0uLL;
      v14 = vdupq_n_s64(1uLL);
      v15 = v11 & 0x3FFFFFFFFFFFFFFCLL;
      v16 = 0uLL;
      do
      {
        v13 = vsubq_s64(v13, vcgtq_s64(v14, v12[-1]));
        v16 = vsubq_s64(v16, vcgtq_s64(v14, *v12));
        v12 += 2;
        v15 -= 4;
      }
      while (v15);
      v8 = vaddvq_s64(vaddq_s64(v16, v13));
      if (v11 == (v11 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_13;
    }
    else
    {
      v8 = 0;
      v9 = (uint64_t *)*a2;
    }
    do
    {
      v17 = *v9++;
      if (v17 < 1)
        ++v8;
    }
    while (v9 != (uint64_t *)v6);
LABEL_13:
    p_p = v8;
    if (v8 > 1)
    {
      p_p_p = &p_p;
      nitro::ndarray<int>::reshape(std::vector<long long> const&)const::{lambda(void)#2}::operator()();
    }
    v18 = (char *)v6 - (char *)v5;
    if (v5 == v6)
    {
      v22 = v18 >> 3;
      p_p_p = 0;
      v102 = 0;
      v103 = 0;
      v20 = 1;
      goto LABEL_36;
    }
    v19 = v18 - 8;
    if (v19 >= 8)
    {
      v23 = (v19 >> 3) + 1;
      v21 = &v5->i64[v23 & 0x3FFFFFFFFFFFFFFELL];
      v24 = &v5->i64[1];
      v25 = 1;
      v26 = v23 & 0x3FFFFFFFFFFFFFFELL;
      v27 = 1;
      do
      {
        v28 = *(v24 - 1);
        v29 = *v24;
        if (v28 <= 1)
          v28 = 1;
        if (v29 <= 1)
          v29 = 1;
        v25 *= v28;
        v27 *= v29;
        v24 += 2;
        v26 -= 2;
      }
      while (v26);
      v20 = v27 * v25;
      if (v23 == (v23 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_28;
    }
    else
    {
      v20 = 1;
      v21 = (uint64_t *)v5;
    }
    do
    {
      v31 = *v21++;
      v30 = v31;
      if (v31 <= 1)
        v30 = 1;
      v20 *= v30;
    }
    while (v21 != (uint64_t *)v6);
LABEL_28:
    p_p_p = 0;
    v102 = 0;
    v103 = 0;
    v32 = (char *)v6 - (char *)v5;
    v22 = ((char *)v6 - (char *)v5) >> 3;
    if (v6 != v5)
    {
      if (v32 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v33 = (int64x2_t *)operator new((char *)v6 - (char *)v5);
      p_p_p = v33;
      v103 = &v33->i8[8 * v22];
      v34 = v5;
      v35 = (uint64_t *)v33;
      if ((unint64_t)(v32 - 8) < 0x18)
        goto LABEL_104;
      v36 = ((unint64_t)(v32 - 8) >> 3) + 1;
      v37 = v36 & 0x3FFFFFFFFFFFFFFCLL;
      v34 = (int64x2_t *)((char *)v5 + v37 * 8);
      v35 = &v33->i64[v37];
      v38 = v33 + 1;
      v39 = v5 + 1;
      v40 = v36 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v41 = *v39;
        v38[-1] = v39[-1];
        *v38 = v41;
        v38 += 2;
        v39 += 2;
        v40 -= 4;
      }
      while (v40);
      if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_104:
        do
        {
          v42 = v34->i64[0];
          v34 = (int64x2_t *)((char *)v34 + 8);
          *v35++ = v42;
        }
        while (v34 != v6);
      }
      v102 = v35;
    }
LABEL_36:
    if (!v8)
    {
      v49 = (char *)a1[2];
      v48 = (char *)a1[3];
      goto LABEL_76;
    }
    p_p = 0;
    v44 = a1[2];
    v43 = (uint64_t *)a1[3];
    if (v43 == (uint64_t *)v44)
    {
      v45 = 0;
      goto LABEL_47;
    }
    v45 = *a1;
    if (!*a1)
      goto LABEL_47;
    v46 = (unint64_t)v43 - v44 - 8;
    if (v46 >= 8)
    {
      v50 = (v46 >> 3) + 1;
      v47 = (uint64_t *)(v44 + 8 * (v50 & 0x3FFFFFFFFFFFFFFELL));
      v51 = (_QWORD *)(v44 + 8);
      v52 = 1;
      v53 = v50 & 0x3FFFFFFFFFFFFFFELL;
      v54 = 1;
      do
      {
        v52 *= *(v51 - 1);
        v54 *= *v51;
        v51 += 2;
        v53 -= 2;
      }
      while (v53);
      v45 = v54 * v52;
      if (v50 == (v50 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_47:
        p_p = v45 % v20;
        if (v45 % v20)
        {
          __p = &p_p;
          nitro::ndarray<int>::reshape(std::vector<long long> const&)const::{lambda(void)#3}::operator()();
        }
        if (v6 != v5)
        {
          v56 = 0;
          v57 = p_p_p;
          if (v22 <= 1)
            v58 = 1;
          else
            v58 = v22;
          do
          {
            if (v5->i64[v56] > 0)
              goto LABEL_54;
            v61 = a1[2];
            v60 = (uint64_t *)a1[3];
            if (v60 == (uint64_t *)v61 || !*a1)
            {
              v59 = 0;
            }
            else
            {
              v62 = (unint64_t)v60 - v61 - 8;
              if (v62 >= 8)
              {
                v64 = (v62 >> 3) + 1;
                v63 = (uint64_t *)(v61 + 8 * (v64 & 0x3FFFFFFFFFFFFFFELL));
                v65 = (_QWORD *)(v61 + 8);
                v66 = v64 & 0x3FFFFFFFFFFFFFFELL;
                v67 = 1;
                v68 = 1;
                do
                {
                  v67 *= *(v65 - 1);
                  v68 *= *v65;
                  v65 += 2;
                  v66 -= 2;
                }
                while (v66);
                v59 = v68 * v67;
                if (v64 == (v64 & 0x3FFFFFFFFFFFFFFELL))
                  goto LABEL_53;
              }
              else
              {
                v59 = 1;
                v63 = (uint64_t *)a1[2];
              }
              do
              {
                v69 = *v63++;
                v59 *= v69;
              }
              while (v63 != v60);
            }
LABEL_53:
            v57[v56] = v59 / v20;
LABEL_54:
            ++v56;
          }
          while (v56 != v58);
        }
        v49 = (char *)a1[2];
        v48 = (char *)a1[3];
        if (v48 == v49)
          goto LABEL_86;
        if (!*a1)
        {
          v20 = 0;
          goto LABEL_76;
        }
        v70 = v48 - v49 - 8;
        if (v70 >= 8)
        {
          v72 = 0;
          v73 = (v70 >> 3) + 1;
          v74 = v73 & 0x3FFFFFFFFFFFFFFELL;
          v71 = &v49[8 * (v73 & 0x3FFFFFFFFFFFFFFELL)];
          v75 = 1;
          v76 = 1;
          do
          {
            v77 = &v49[8 * v72];
            v75 *= *(_QWORD *)v77;
            v76 *= *((_QWORD *)v77 + 1);
            v72 += 2;
          }
          while (v74 != v72);
          v20 = v76 * v75;
          if (v73 == v74)
          {
LABEL_76:
            __p = (void *)v20;
            if (v48 == v49)
            {
              v79 = 0;
              goto LABEL_85;
            }
            v79 = *a1;
            if (!*a1)
              goto LABEL_85;
            v80 = v48 - v49 - 8;
            if (v80 >= 8)
            {
              v82 = (v80 >> 3) + 1;
              v81 = &v49[8 * (v82 & 0x3FFFFFFFFFFFFFFELL)];
              v83 = v49 + 8;
              v84 = 1;
              v85 = v82 & 0x3FFFFFFFFFFFFFFELL;
              v86 = 1;
              do
              {
                v84 *= *(v83 - 1);
                v86 *= *v83;
                v83 += 2;
                v85 -= 2;
              }
              while (v85);
              v79 = v86 * v84;
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFELL))
              {
LABEL_85:
                v100 = v79;
                if (v20 != v79)
                {
                  p_p = (unint64_t)&__p;
                  v95 = (std::__shared_weak_count *)&v100;
                  nitro::ndarray<int>::reshape(std::vector<long long> const&)const::{lambda(void)#4}::operator()();
                }
LABEL_86:
                nitro::ndarray<int>::canonicalize(a1, (uint64_t *)&p_p);
                __p = 0;
                v92 = 0;
                v93 = 0;
                nitro::ndarray<int>::ndarray(a3, &p_p, (uint64_t)&p_p_p, (uint64_t)&__p, 0);
                if (__p)
                {
                  v92 = __p;
                  operator delete(__p);
                }
                if (v98)
                {
                  v99 = v98;
                  operator delete(v98);
                }
                if (v96)
                {
                  v97 = v96;
                  operator delete(v96);
                }
                v88 = v95;
                if (v95)
                {
                  p_shared_owners = (unint64_t *)&v95->__shared_owners_;
                  do
                    v90 = __ldaxr(p_shared_owners);
                  while (__stlxr(v90 - 1, p_shared_owners));
                  if (!v90)
                  {
                    ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                    std::__shared_weak_count::__release_weak(v88);
                  }
                }
                if (p_p_p)
                {
                  v102 = p_p_p;
                  operator delete(p_p_p);
                }
                return;
              }
            }
            else
            {
              v79 = 1;
              v81 = v49;
            }
            do
            {
              v87 = *(_QWORD *)v81;
              v81 += 8;
              v79 *= v87;
            }
            while (v81 != v48);
            goto LABEL_85;
          }
        }
        else
        {
          v20 = 1;
          v71 = (char *)a1[2];
        }
        do
        {
          v78 = *(_QWORD *)v71;
          v71 += 8;
          v20 *= v78;
        }
        while (v71 != v48);
        goto LABEL_76;
      }
    }
    else
    {
      v45 = 1;
      v47 = (uint64_t *)a1[2];
    }
    do
    {
      v55 = *v47++;
      v45 *= v55;
    }
    while (v47 != v43);
    goto LABEL_47;
  }
  v10 = a1[3] - a1[2];
  p_p = v10 >> 3;
  if (v10)
  {
    p_p_p = &p_p;
    nitro::ndarray<int>::reshape(std::vector<long long> const&)const::{lambda(void)#1}::operator()();
  }
  nitro::ndarray<int>::ndarray(a3, a1);
}

void sub_19120A07C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::reshape(std::vector<long long> const&)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"m_shape.size()", 14);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1192, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::ndarray<int>::reshape(std::vector<long long> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19120A3B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::reshape(std::vector<long long> const&)const::{lambda(void)#2}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"num_unknown", 11);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"<=", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"<=", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1199, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::ndarray<int>::reshape(std::vector<long long> const&)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19120A714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::reshape(std::vector<long long> const&)const::{lambda(void)#3}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"num_elem() % new_numel", 22);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1209, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::ndarray<int>::reshape(std::vector<long long> const&)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19120AA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::reshape(std::vector<long long> const&)const::{lambda(void)#4}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"new_numel", 9);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"num_elem()", 10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1215, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::ndarray<int>::reshape(std::vector<long long> const&)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19120ADD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::reshape(std::vector<long long> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1192, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19120AF74(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19120AF88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19120AF80);
}

void nitro::ndarray<int>::reshape(std::vector<long long> const&)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1199, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19120B0E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19120B0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19120B0ECLL);
}

void nitro::ndarray<int>::reshape(std::vector<long long> const&)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1209, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19120B24C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19120B260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19120B258);
}

void nitro::ndarray<int>::reshape(std::vector<long long> const&)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1215, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19120B3B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19120B3CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19120B3C4);
}

void nitro::ndarray<half>::reshape(uint64_t *a1@<X0>, int64x2_t **a2@<X1>, _QWORD *a3@<X8>)
{
  int64x2_t *v5;
  int64x2_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int64x2_t *v12;
  int64x2_t v13;
  int64x2_t v14;
  uint64_t v15;
  int64x2_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  int64x2_t *v33;
  int64x2_t *v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  int64x2_t *v38;
  int64x2_t *v39;
  uint64_t v40;
  int64x2_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *p_shared_owners;
  unint64_t v90;
  void *__p;
  void *v92;
  uint64_t v93;
  unint64_t p_p;
  std::__shared_weak_count *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  uint64_t v100;
  void *p_p_p;
  void *v102;
  char *v103;

  v5 = *a2;
  v6 = a2[1];
  if (v6 != *a2)
  {
    v7 = (char *)v6 - (char *)*a2 - 8;
    if (v7 >= 0x18)
    {
      v11 = (v7 >> 3) + 1;
      v9 = &v5->i64[v11 & 0x3FFFFFFFFFFFFFFCLL];
      v12 = v5 + 1;
      v13 = 0uLL;
      v14 = vdupq_n_s64(1uLL);
      v15 = v11 & 0x3FFFFFFFFFFFFFFCLL;
      v16 = 0uLL;
      do
      {
        v13 = vsubq_s64(v13, vcgtq_s64(v14, v12[-1]));
        v16 = vsubq_s64(v16, vcgtq_s64(v14, *v12));
        v12 += 2;
        v15 -= 4;
      }
      while (v15);
      v8 = vaddvq_s64(vaddq_s64(v16, v13));
      if (v11 == (v11 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_13;
    }
    else
    {
      v8 = 0;
      v9 = (uint64_t *)*a2;
    }
    do
    {
      v17 = *v9++;
      if (v17 < 1)
        ++v8;
    }
    while (v9 != (uint64_t *)v6);
LABEL_13:
    p_p = v8;
    if (v8 > 1)
    {
      p_p_p = &p_p;
      nitro::ndarray<half>::reshape(std::vector<long long> const&)const::{lambda(void)#2}::operator()();
    }
    v18 = (char *)v6 - (char *)v5;
    if (v5 == v6)
    {
      v22 = v18 >> 3;
      p_p_p = 0;
      v102 = 0;
      v103 = 0;
      v20 = 1;
      goto LABEL_36;
    }
    v19 = v18 - 8;
    if (v19 >= 8)
    {
      v23 = (v19 >> 3) + 1;
      v21 = &v5->i64[v23 & 0x3FFFFFFFFFFFFFFELL];
      v24 = &v5->i64[1];
      v25 = 1;
      v26 = v23 & 0x3FFFFFFFFFFFFFFELL;
      v27 = 1;
      do
      {
        v28 = *(v24 - 1);
        v29 = *v24;
        if (v28 <= 1)
          v28 = 1;
        if (v29 <= 1)
          v29 = 1;
        v25 *= v28;
        v27 *= v29;
        v24 += 2;
        v26 -= 2;
      }
      while (v26);
      v20 = v27 * v25;
      if (v23 == (v23 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_28;
    }
    else
    {
      v20 = 1;
      v21 = (uint64_t *)v5;
    }
    do
    {
      v31 = *v21++;
      v30 = v31;
      if (v31 <= 1)
        v30 = 1;
      v20 *= v30;
    }
    while (v21 != (uint64_t *)v6);
LABEL_28:
    p_p_p = 0;
    v102 = 0;
    v103 = 0;
    v32 = (char *)v6 - (char *)v5;
    v22 = ((char *)v6 - (char *)v5) >> 3;
    if (v6 != v5)
    {
      if (v32 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v33 = (int64x2_t *)operator new((char *)v6 - (char *)v5);
      p_p_p = v33;
      v103 = &v33->i8[8 * v22];
      v34 = v5;
      v35 = (uint64_t *)v33;
      if ((unint64_t)(v32 - 8) < 0x18)
        goto LABEL_104;
      v36 = ((unint64_t)(v32 - 8) >> 3) + 1;
      v37 = v36 & 0x3FFFFFFFFFFFFFFCLL;
      v34 = (int64x2_t *)((char *)v5 + v37 * 8);
      v35 = &v33->i64[v37];
      v38 = v33 + 1;
      v39 = v5 + 1;
      v40 = v36 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v41 = *v39;
        v38[-1] = v39[-1];
        *v38 = v41;
        v38 += 2;
        v39 += 2;
        v40 -= 4;
      }
      while (v40);
      if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_104:
        do
        {
          v42 = v34->i64[0];
          v34 = (int64x2_t *)((char *)v34 + 8);
          *v35++ = v42;
        }
        while (v34 != v6);
      }
      v102 = v35;
    }
LABEL_36:
    if (!v8)
    {
      v49 = (char *)a1[2];
      v48 = (char *)a1[3];
      goto LABEL_76;
    }
    p_p = 0;
    v44 = a1[2];
    v43 = (uint64_t *)a1[3];
    if (v43 == (uint64_t *)v44)
    {
      v45 = 0;
      goto LABEL_47;
    }
    v45 = *a1;
    if (!*a1)
      goto LABEL_47;
    v46 = (unint64_t)v43 - v44 - 8;
    if (v46 >= 8)
    {
      v50 = (v46 >> 3) + 1;
      v47 = (uint64_t *)(v44 + 8 * (v50 & 0x3FFFFFFFFFFFFFFELL));
      v51 = (_QWORD *)(v44 + 8);
      v52 = 1;
      v53 = v50 & 0x3FFFFFFFFFFFFFFELL;
      v54 = 1;
      do
      {
        v52 *= *(v51 - 1);
        v54 *= *v51;
        v51 += 2;
        v53 -= 2;
      }
      while (v53);
      v45 = v54 * v52;
      if (v50 == (v50 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_47:
        p_p = v45 % v20;
        if (v45 % v20)
        {
          __p = &p_p;
          nitro::ndarray<half>::reshape(std::vector<long long> const&)const::{lambda(void)#3}::operator()();
        }
        if (v6 != v5)
        {
          v56 = 0;
          v57 = p_p_p;
          if (v22 <= 1)
            v58 = 1;
          else
            v58 = v22;
          do
          {
            if (v5->i64[v56] > 0)
              goto LABEL_54;
            v61 = a1[2];
            v60 = (uint64_t *)a1[3];
            if (v60 == (uint64_t *)v61 || !*a1)
            {
              v59 = 0;
            }
            else
            {
              v62 = (unint64_t)v60 - v61 - 8;
              if (v62 >= 8)
              {
                v64 = (v62 >> 3) + 1;
                v63 = (uint64_t *)(v61 + 8 * (v64 & 0x3FFFFFFFFFFFFFFELL));
                v65 = (_QWORD *)(v61 + 8);
                v66 = v64 & 0x3FFFFFFFFFFFFFFELL;
                v67 = 1;
                v68 = 1;
                do
                {
                  v67 *= *(v65 - 1);
                  v68 *= *v65;
                  v65 += 2;
                  v66 -= 2;
                }
                while (v66);
                v59 = v68 * v67;
                if (v64 == (v64 & 0x3FFFFFFFFFFFFFFELL))
                  goto LABEL_53;
              }
              else
              {
                v59 = 1;
                v63 = (uint64_t *)a1[2];
              }
              do
              {
                v69 = *v63++;
                v59 *= v69;
              }
              while (v63 != v60);
            }
LABEL_53:
            v57[v56] = v59 / v20;
LABEL_54:
            ++v56;
          }
          while (v56 != v58);
        }
        v49 = (char *)a1[2];
        v48 = (char *)a1[3];
        if (v48 == v49)
          goto LABEL_86;
        if (!*a1)
        {
          v20 = 0;
          goto LABEL_76;
        }
        v70 = v48 - v49 - 8;
        if (v70 >= 8)
        {
          v72 = 0;
          v73 = (v70 >> 3) + 1;
          v74 = v73 & 0x3FFFFFFFFFFFFFFELL;
          v71 = &v49[8 * (v73 & 0x3FFFFFFFFFFFFFFELL)];
          v75 = 1;
          v76 = 1;
          do
          {
            v77 = &v49[8 * v72];
            v75 *= *(_QWORD *)v77;
            v76 *= *((_QWORD *)v77 + 1);
            v72 += 2;
          }
          while (v74 != v72);
          v20 = v76 * v75;
          if (v73 == v74)
          {
LABEL_76:
            __p = (void *)v20;
            if (v48 == v49)
            {
              v79 = 0;
              goto LABEL_85;
            }
            v79 = *a1;
            if (!*a1)
              goto LABEL_85;
            v80 = v48 - v49 - 8;
            if (v80 >= 8)
            {
              v82 = (v80 >> 3) + 1;
              v81 = &v49[8 * (v82 & 0x3FFFFFFFFFFFFFFELL)];
              v83 = v49 + 8;
              v84 = 1;
              v85 = v82 & 0x3FFFFFFFFFFFFFFELL;
              v86 = 1;
              do
              {
                v84 *= *(v83 - 1);
                v86 *= *v83;
                v83 += 2;
                v85 -= 2;
              }
              while (v85);
              v79 = v86 * v84;
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFELL))
              {
LABEL_85:
                v100 = v79;
                if (v20 != v79)
                {
                  p_p = (unint64_t)&__p;
                  v95 = (std::__shared_weak_count *)&v100;
                  nitro::ndarray<half>::reshape(std::vector<long long> const&)const::{lambda(void)#4}::operator()();
                }
LABEL_86:
                nitro::ndarray<half>::canonicalize(a1, (uint64_t *)&p_p);
                __p = 0;
                v92 = 0;
                v93 = 0;
                nitro::ndarray<half>::ndarray(a3, &p_p, (uint64_t)&p_p_p, (uint64_t)&__p, 0);
                if (__p)
                {
                  v92 = __p;
                  operator delete(__p);
                }
                if (v98)
                {
                  v99 = v98;
                  operator delete(v98);
                }
                if (v96)
                {
                  v97 = v96;
                  operator delete(v96);
                }
                v88 = v95;
                if (v95)
                {
                  p_shared_owners = (unint64_t *)&v95->__shared_owners_;
                  do
                    v90 = __ldaxr(p_shared_owners);
                  while (__stlxr(v90 - 1, p_shared_owners));
                  if (!v90)
                  {
                    ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                    std::__shared_weak_count::__release_weak(v88);
                  }
                }
                if (p_p_p)
                {
                  v102 = p_p_p;
                  operator delete(p_p_p);
                }
                return;
              }
            }
            else
            {
              v79 = 1;
              v81 = v49;
            }
            do
            {
              v87 = *(_QWORD *)v81;
              v81 += 8;
              v79 *= v87;
            }
            while (v81 != v48);
            goto LABEL_85;
          }
        }
        else
        {
          v20 = 1;
          v71 = (char *)a1[2];
        }
        do
        {
          v78 = *(_QWORD *)v71;
          v71 += 8;
          v20 *= v78;
        }
        while (v71 != v48);
        goto LABEL_76;
      }
    }
    else
    {
      v45 = 1;
      v47 = (uint64_t *)a1[2];
    }
    do
    {
      v55 = *v47++;
      v45 *= v55;
    }
    while (v47 != v43);
    goto LABEL_47;
  }
  v10 = a1[3] - a1[2];
  p_p = v10 >> 3;
  if (v10)
  {
    p_p_p = &p_p;
    nitro::ndarray<half>::reshape(std::vector<long long> const&)const::{lambda(void)#1}::operator()();
  }
  nitro::ndarray<half>::ndarray(a3, a1);
}

void sub_19120B9D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::reshape(std::vector<long long> const&)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"m_shape.size()", 14);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1192, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::ndarray<half>::reshape(std::vector<long long> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19120BD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::reshape(std::vector<long long> const&)const::{lambda(void)#2}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"num_unknown", 11);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"<=", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"<=", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1199, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::ndarray<half>::reshape(std::vector<long long> const&)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19120C06C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::reshape(std::vector<long long> const&)const::{lambda(void)#3}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"num_elem() % new_numel", 22);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1209, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::ndarray<half>::reshape(std::vector<long long> const&)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19120C3C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::reshape(std::vector<long long> const&)const::{lambda(void)#4}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"new_numel", 9);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"num_elem()", 10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1215, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::ndarray<half>::reshape(std::vector<long long> const&)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19120C728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::reshape(std::vector<long long> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1192, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19120C8CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19120C8E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19120C8D8);
}

void nitro::ndarray<half>::reshape(std::vector<long long> const&)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1199, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19120CA38(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19120CA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19120CA44);
}

void nitro::ndarray<half>::reshape(std::vector<long long> const&)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1209, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19120CBA4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19120CBB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19120CBB0);
}

void nitro::ndarray<half>::reshape(std::vector<long long> const&)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1215, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19120CD10(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19120CD24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19120CD1CLL);
}

void nitro::ndarray<float>::reshape(uint64_t *a1@<X0>, int64x2_t **a2@<X1>, _QWORD *a3@<X8>)
{
  int64x2_t *v5;
  int64x2_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int64x2_t *v12;
  int64x2_t v13;
  int64x2_t v14;
  uint64_t v15;
  int64x2_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  int64x2_t *v33;
  int64x2_t *v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  int64x2_t *v38;
  int64x2_t *v39;
  uint64_t v40;
  int64x2_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *p_shared_owners;
  unint64_t v90;
  void *__p;
  void *v92;
  uint64_t v93;
  unint64_t p_p;
  std::__shared_weak_count *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  uint64_t v100;
  void *p_p_p;
  void *v102;
  char *v103;

  v5 = *a2;
  v6 = a2[1];
  if (v6 != *a2)
  {
    v7 = (char *)v6 - (char *)*a2 - 8;
    if (v7 >= 0x18)
    {
      v11 = (v7 >> 3) + 1;
      v9 = &v5->i64[v11 & 0x3FFFFFFFFFFFFFFCLL];
      v12 = v5 + 1;
      v13 = 0uLL;
      v14 = vdupq_n_s64(1uLL);
      v15 = v11 & 0x3FFFFFFFFFFFFFFCLL;
      v16 = 0uLL;
      do
      {
        v13 = vsubq_s64(v13, vcgtq_s64(v14, v12[-1]));
        v16 = vsubq_s64(v16, vcgtq_s64(v14, *v12));
        v12 += 2;
        v15 -= 4;
      }
      while (v15);
      v8 = vaddvq_s64(vaddq_s64(v16, v13));
      if (v11 == (v11 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_13;
    }
    else
    {
      v8 = 0;
      v9 = (uint64_t *)*a2;
    }
    do
    {
      v17 = *v9++;
      if (v17 < 1)
        ++v8;
    }
    while (v9 != (uint64_t *)v6);
LABEL_13:
    p_p = v8;
    if (v8 > 1)
    {
      p_p_p = &p_p;
      nitro::ndarray<float>::reshape(std::vector<long long> const&)const::{lambda(void)#2}::operator()();
    }
    v18 = (char *)v6 - (char *)v5;
    if (v5 == v6)
    {
      v22 = v18 >> 3;
      p_p_p = 0;
      v102 = 0;
      v103 = 0;
      v20 = 1;
      goto LABEL_36;
    }
    v19 = v18 - 8;
    if (v19 >= 8)
    {
      v23 = (v19 >> 3) + 1;
      v21 = &v5->i64[v23 & 0x3FFFFFFFFFFFFFFELL];
      v24 = &v5->i64[1];
      v25 = 1;
      v26 = v23 & 0x3FFFFFFFFFFFFFFELL;
      v27 = 1;
      do
      {
        v28 = *(v24 - 1);
        v29 = *v24;
        if (v28 <= 1)
          v28 = 1;
        if (v29 <= 1)
          v29 = 1;
        v25 *= v28;
        v27 *= v29;
        v24 += 2;
        v26 -= 2;
      }
      while (v26);
      v20 = v27 * v25;
      if (v23 == (v23 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_28;
    }
    else
    {
      v20 = 1;
      v21 = (uint64_t *)v5;
    }
    do
    {
      v31 = *v21++;
      v30 = v31;
      if (v31 <= 1)
        v30 = 1;
      v20 *= v30;
    }
    while (v21 != (uint64_t *)v6);
LABEL_28:
    p_p_p = 0;
    v102 = 0;
    v103 = 0;
    v32 = (char *)v6 - (char *)v5;
    v22 = ((char *)v6 - (char *)v5) >> 3;
    if (v6 != v5)
    {
      if (v32 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v33 = (int64x2_t *)operator new((char *)v6 - (char *)v5);
      p_p_p = v33;
      v103 = &v33->i8[8 * v22];
      v34 = v5;
      v35 = (uint64_t *)v33;
      if ((unint64_t)(v32 - 8) < 0x18)
        goto LABEL_104;
      v36 = ((unint64_t)(v32 - 8) >> 3) + 1;
      v37 = v36 & 0x3FFFFFFFFFFFFFFCLL;
      v34 = (int64x2_t *)((char *)v5 + v37 * 8);
      v35 = &v33->i64[v37];
      v38 = v33 + 1;
      v39 = v5 + 1;
      v40 = v36 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v41 = *v39;
        v38[-1] = v39[-1];
        *v38 = v41;
        v38 += 2;
        v39 += 2;
        v40 -= 4;
      }
      while (v40);
      if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_104:
        do
        {
          v42 = v34->i64[0];
          v34 = (int64x2_t *)((char *)v34 + 8);
          *v35++ = v42;
        }
        while (v34 != v6);
      }
      v102 = v35;
    }
LABEL_36:
    if (!v8)
    {
      v49 = (char *)a1[2];
      v48 = (char *)a1[3];
      goto LABEL_76;
    }
    p_p = 0;
    v44 = a1[2];
    v43 = (uint64_t *)a1[3];
    if (v43 == (uint64_t *)v44)
    {
      v45 = 0;
      goto LABEL_47;
    }
    v45 = *a1;
    if (!*a1)
      goto LABEL_47;
    v46 = (unint64_t)v43 - v44 - 8;
    if (v46 >= 8)
    {
      v50 = (v46 >> 3) + 1;
      v47 = (uint64_t *)(v44 + 8 * (v50 & 0x3FFFFFFFFFFFFFFELL));
      v51 = (_QWORD *)(v44 + 8);
      v52 = 1;
      v53 = v50 & 0x3FFFFFFFFFFFFFFELL;
      v54 = 1;
      do
      {
        v52 *= *(v51 - 1);
        v54 *= *v51;
        v51 += 2;
        v53 -= 2;
      }
      while (v53);
      v45 = v54 * v52;
      if (v50 == (v50 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_47:
        p_p = v45 % v20;
        if (v45 % v20)
        {
          __p = &p_p;
          nitro::ndarray<float>::reshape(std::vector<long long> const&)const::{lambda(void)#3}::operator()();
        }
        if (v6 != v5)
        {
          v56 = 0;
          v57 = p_p_p;
          if (v22 <= 1)
            v58 = 1;
          else
            v58 = v22;
          do
          {
            if (v5->i64[v56] > 0)
              goto LABEL_54;
            v61 = a1[2];
            v60 = (uint64_t *)a1[3];
            if (v60 == (uint64_t *)v61 || !*a1)
            {
              v59 = 0;
            }
            else
            {
              v62 = (unint64_t)v60 - v61 - 8;
              if (v62 >= 8)
              {
                v64 = (v62 >> 3) + 1;
                v63 = (uint64_t *)(v61 + 8 * (v64 & 0x3FFFFFFFFFFFFFFELL));
                v65 = (_QWORD *)(v61 + 8);
                v66 = v64 & 0x3FFFFFFFFFFFFFFELL;
                v67 = 1;
                v68 = 1;
                do
                {
                  v67 *= *(v65 - 1);
                  v68 *= *v65;
                  v65 += 2;
                  v66 -= 2;
                }
                while (v66);
                v59 = v68 * v67;
                if (v64 == (v64 & 0x3FFFFFFFFFFFFFFELL))
                  goto LABEL_53;
              }
              else
              {
                v59 = 1;
                v63 = (uint64_t *)a1[2];
              }
              do
              {
                v69 = *v63++;
                v59 *= v69;
              }
              while (v63 != v60);
            }
LABEL_53:
            v57[v56] = v59 / v20;
LABEL_54:
            ++v56;
          }
          while (v56 != v58);
        }
        v49 = (char *)a1[2];
        v48 = (char *)a1[3];
        if (v48 == v49)
          goto LABEL_86;
        if (!*a1)
        {
          v20 = 0;
          goto LABEL_76;
        }
        v70 = v48 - v49 - 8;
        if (v70 >= 8)
        {
          v72 = 0;
          v73 = (v70 >> 3) + 1;
          v74 = v73 & 0x3FFFFFFFFFFFFFFELL;
          v71 = &v49[8 * (v73 & 0x3FFFFFFFFFFFFFFELL)];
          v75 = 1;
          v76 = 1;
          do
          {
            v77 = &v49[8 * v72];
            v75 *= *(_QWORD *)v77;
            v76 *= *((_QWORD *)v77 + 1);
            v72 += 2;
          }
          while (v74 != v72);
          v20 = v76 * v75;
          if (v73 == v74)
          {
LABEL_76:
            __p = (void *)v20;
            if (v48 == v49)
            {
              v79 = 0;
              goto LABEL_85;
            }
            v79 = *a1;
            if (!*a1)
              goto LABEL_85;
            v80 = v48 - v49 - 8;
            if (v80 >= 8)
            {
              v82 = (v80 >> 3) + 1;
              v81 = &v49[8 * (v82 & 0x3FFFFFFFFFFFFFFELL)];
              v83 = v49 + 8;
              v84 = 1;
              v85 = v82 & 0x3FFFFFFFFFFFFFFELL;
              v86 = 1;
              do
              {
                v84 *= *(v83 - 1);
                v86 *= *v83;
                v83 += 2;
                v85 -= 2;
              }
              while (v85);
              v79 = v86 * v84;
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFELL))
              {
LABEL_85:
                v100 = v79;
                if (v20 != v79)
                {
                  p_p = (unint64_t)&__p;
                  v95 = (std::__shared_weak_count *)&v100;
                  nitro::ndarray<float>::reshape(std::vector<long long> const&)const::{lambda(void)#4}::operator()();
                }
LABEL_86:
                nitro::ndarray<float>::canonicalize(a1, (uint64_t *)&p_p);
                __p = 0;
                v92 = 0;
                v93 = 0;
                nitro::ndarray<float>::ndarray(a3, &p_p, (uint64_t)&p_p_p, (uint64_t)&__p, 0);
                if (__p)
                {
                  v92 = __p;
                  operator delete(__p);
                }
                if (v98)
                {
                  v99 = v98;
                  operator delete(v98);
                }
                if (v96)
                {
                  v97 = v96;
                  operator delete(v96);
                }
                v88 = v95;
                if (v95)
                {
                  p_shared_owners = (unint64_t *)&v95->__shared_owners_;
                  do
                    v90 = __ldaxr(p_shared_owners);
                  while (__stlxr(v90 - 1, p_shared_owners));
                  if (!v90)
                  {
                    ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                    std::__shared_weak_count::__release_weak(v88);
                  }
                }
                if (p_p_p)
                {
                  v102 = p_p_p;
                  operator delete(p_p_p);
                }
                return;
              }
            }
            else
            {
              v79 = 1;
              v81 = v49;
            }
            do
            {
              v87 = *(_QWORD *)v81;
              v81 += 8;
              v79 *= v87;
            }
            while (v81 != v48);
            goto LABEL_85;
          }
        }
        else
        {
          v20 = 1;
          v71 = (char *)a1[2];
        }
        do
        {
          v78 = *(_QWORD *)v71;
          v71 += 8;
          v20 *= v78;
        }
        while (v71 != v48);
        goto LABEL_76;
      }
    }
    else
    {
      v45 = 1;
      v47 = (uint64_t *)a1[2];
    }
    do
    {
      v55 = *v47++;
      v45 *= v55;
    }
    while (v47 != v43);
    goto LABEL_47;
  }
  v10 = a1[3] - a1[2];
  p_p = v10 >> 3;
  if (v10)
  {
    p_p_p = &p_p;
    nitro::ndarray<float>::reshape(std::vector<long long> const&)const::{lambda(void)#1}::operator()();
  }
  nitro::ndarray<float>::ndarray(a3, a1);
}

void sub_19120D32C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::reshape(std::vector<long long> const&)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"m_shape.size()", 14);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1192, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::ndarray<float>::reshape(std::vector<long long> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19120D668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::reshape(std::vector<long long> const&)const::{lambda(void)#2}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"num_unknown", 11);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"<=", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"<=", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1199, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::ndarray<float>::reshape(std::vector<long long> const&)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19120D9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::reshape(std::vector<long long> const&)const::{lambda(void)#3}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"num_elem() % new_numel", 22);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1209, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::ndarray<float>::reshape(std::vector<long long> const&)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19120DD20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::reshape(std::vector<long long> const&)const::{lambda(void)#4}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"new_numel", 9);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"num_elem()", 10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1215, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::ndarray<float>::reshape(std::vector<long long> const&)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19120E080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::reshape(std::vector<long long> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1192, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19120E224(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19120E238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19120E230);
}

void nitro::ndarray<float>::reshape(std::vector<long long> const&)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1199, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19120E390(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19120E3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19120E39CLL);
}

void nitro::ndarray<float>::reshape(std::vector<long long> const&)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1209, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19120E4FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19120E510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19120E508);
}

void nitro::ndarray<float>::reshape(std::vector<long long> const&)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1215, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19120E668(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19120E67C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19120E674);
}

uint64_t OUTLINED_FUNCTION_0_8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void OUTLINED_FUNCTION_6_1(void *__p)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = __p;
  operator delete(__p);
}

void OUTLINED_FUNCTION_10_2(void *__p)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = __p;
  operator delete(__p);
}

uint64_t OUTLINED_FUNCTION_11(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t OUTLINED_FUNCTION_12_0(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void OUTLINED_FUNCTION_13(void *__p)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = __p;
  operator delete(__p);
}

void OUTLINED_FUNCTION_14(void *__p, uint64_t a2)
{
  *(_QWORD *)(a2 + 8) = __p;
  operator delete(__p);
}

uint64_t OUTLINED_FUNCTION_15(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

void OUTLINED_FUNCTION_16(void *__p, uint64_t a2, void **a3)
{
  *a3 = __p;
  operator delete(__p);
}

void nitro::ndarray_container::concat(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  int v6;

  v2 = (void *)OUTLINED_FUNCTION_0_8(a1);
  if (v2)
    OUTLINED_FUNCTION_6_1(v2);
  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      OUTLINED_FUNCTION_8(v4);
    while (v6);
    if (!v5)
    {
      OUTLINED_FUNCTION_7();
      OUTLINED_FUNCTION_12();
    }
  }
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_10();
}

{
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  int v8;

  v2 = (void *)OUTLINED_FUNCTION_12_0(a1);
  if (v2)
    OUTLINED_FUNCTION_16(v2, v3, v4);
  v5 = *v1;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      OUTLINED_FUNCTION_8(v6);
    while (v8);
    if (!v7)
    {
      OUTLINED_FUNCTION_7();
      OUTLINED_FUNCTION_12();
    }
  }
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_10();
}

void nitro::ndarray_container::copy(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  int v6;

  v2 = (void *)OUTLINED_FUNCTION_11(a1);
  if (v2)
    OUTLINED_FUNCTION_10_2(v2);
  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      OUTLINED_FUNCTION_8(v4);
    while (v6);
    if (!v5)
    {
      OUTLINED_FUNCTION_31();
      OUTLINED_FUNCTION_9();
    }
  }
  OUTLINED_FUNCTION_2();
}

void nitro::ndarray<unsigned char>::concat(uint64_t a1, uint64_t a2)
{
  void **v2;
  void *v3;
  uint64_t v4;

  v3 = (void *)OUTLINED_FUNCTION_15(a1, a2);
  if (v3)
    OUTLINED_FUNCTION_14(v3, v4);
  if (*v2)
    OUTLINED_FUNCTION_13(*v2);
  OUTLINED_FUNCTION_2();
}

void nitro::impl::delayed_variable::~delayed_variable(nitro::impl::delayed_variable *this)
{
  nitro::impl::delayed_variable *v2;
  uint64_t v3;

  nitro::nitro_variable::~nitro_variable((nitro::impl::delayed_variable *)((char *)this + 40));
  v2 = (nitro::impl::delayed_variable *)*((_QWORD *)this + 3);
  if (v2 == this)
  {
    v3 = 4;
    v2 = this;
  }
  else
  {
    if (!v2)
      return;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
}

uint64_t nitro::nitro_function::load_nitro_function(nitro::nitro_function *this, const nitro::ir::DEFMEMBERFUN *a2)
{
  char *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unsigned int *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  void **v30;
  uint64_t v31;
  unint64_t v33;
  uint64_t v34;
  void *lpsrc[3];
  void **v36;
  __int16 v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v4 = (char *)operator new(0x90uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1E2DB61F8;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *((_QWORD *)v4 + 17) = 0;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v4;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_QWORD *)this = v4 + 24;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = *(unsigned int **)this;
  v9 = *(_QWORD **)this;
  *v9 = *((_QWORD *)a2 + 1);
  v10 = v9 + 1;
  if (v8 != (unsigned int *)((char *)a2 + 8))
  {
    std::vector<nitro::variable_type>::__assign_with_size[abi:ne180100]<nitro::variable_type*,nitro::variable_type*>(v10, *((_QWORD *)a2 + 2), *((_QWORD *)a2 + 3), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2)) >> 3));
    v8 = *(unsigned int **)this;
  }
  v11 = v8[16];
  v12 = *((unsigned int *)a2 + 18);
  if ((_DWORD)v11 == -1)
  {
    if ((_DWORD)v12 == -1)
      goto LABEL_13;
  }
  else if ((_DWORD)v12 == -1)
  {
    ((void (*)(void **, unsigned int *))off_1E2DD1810[v11])(lpsrc, v8 + 8);
    v8[16] = -1;
    goto LABEL_13;
  }
  lpsrc[0] = v8 + 8;
  ((void (*)(void **))off_1E2DD1848[v12])(lpsrc);
LABEL_13:
  if (*(const nitro::ir::DEFMEMBERFUN **)this != (const nitro::ir::DEFMEMBERFUN *)((char *)a2 + 8))
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((_QWORD *)(*(_QWORD *)this + 72), *((char **)a2 + 10), *((char **)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 3);
  (*(void (**)(void **__return_ptr, const nitro::ir::DEFMEMBERFUN *))(*(_QWORD *)a2 + 8))(lpsrc, a2);
  v13 = lpsrc[0];
  lpsrc[0] = 0;
  if (v13)
  else
    v14 = 0;
  v15 = *(_QWORD *)this;
  v16 = (_QWORD *)(*(_QWORD *)this + 96);
  v17 = (_QWORD *)*v16;
  if (*v16)
  {
    v18 = *(_QWORD **)(v15 + 104);
    v19 = *(_QWORD **)(*(_QWORD *)this + 96);
    if (v18 != v17)
    {
      do
      {
        v21 = *--v18;
        v20 = v21;
        *v18 = 0;
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
      }
      while (v18 != v17);
      v19 = (_QWORD *)*v16;
    }
    *(_QWORD *)(v15 + 104) = v17;
    operator delete(v19);
    *v16 = 0;
    v16[1] = 0;
    v16[2] = 0;
  }
  *(_OWORD *)(v15 + 96) = *(_OWORD *)(v14 + 104);
  *(_QWORD *)(v15 + 112) = *((_QWORD *)v14 + 15);
  *((_QWORD *)v14 + 13) = 0;
  *((_QWORD *)v14 + 14) = 0;
  *((_QWORD *)v14 + 15) = 0;
  v22 = *(_QWORD *)this;
  v23 = (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 80) - *(_QWORD *)(*(_QWORD *)this + 72)) >> 3;
  v33 = 0xCCCCCCCCCCCCCCCDLL
      * ((uint64_t)(*(_QWORD *)(*(_QWORD *)this + 16) - *(_QWORD *)(*(_QWORD *)this + 8)) >> 3);
  v34 = v23;
  if (v23 != v33)
  {
    lpsrc[0] = &v34;
    lpsrc[1] = &v33;
    nitro::nitro_function::load_nitro_function(nitro::ir::DEFMEMBERFUN const&)::$_0::operator()();
  }
  nitro::impl::nitro_lazy_eval::exec_function_body((nitro::impl::nitro_lazy_eval *)&v34, (const nitro::ir::MEMBER ***)(v22 + 96), (uint64_t)lpsrc);
  v24 = operator new(0x60uLL);
  v25 = v24;
  v24[1] = 0;
  v24[2] = 0;
  *v24 = &off_1E2DB6230;
  v26 = v24 + 3;
  if (v36)
  {
    if (v36 == lpsrc)
    {
      v24[6] = v26;
      (*((void (**)(void **, _QWORD *))lpsrc[0] + 3))(lpsrc, v26);
    }
    else
    {
      v24[6] = v36;
      v36 = 0;
    }
  }
  else
  {
    v24[6] = 0;
  }
  *((_WORD *)v25 + 28) = v37;
  *((_OWORD *)v25 + 4) = v38;
  v38 = 0uLL;
  v25[10] = v39;
  *((_BYTE *)v25 + 88) = v40;
  v40 = 0;
  v27 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 2) = v26;
  *((_QWORD *)this + 3) = v25;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v38);
  v30 = v36;
  if (v36 == lpsrc)
  {
    v31 = 4;
    v30 = lpsrc;
    goto LABEL_41;
  }
  if (v36)
  {
    v31 = 5;
LABEL_41:
    (*((void (**)(void))*v30 + v31))();
  }
  return (*(uint64_t (**)(char *))(*(_QWORD *)v14 + 40))(v14);
}

void sub_19120EC2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void nitro::nitro_function::load_nitro_function(nitro::ir::DEFMEMBERFUN const&)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_function.cpp", 106);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"m_body->m_args.size()", 21);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"m_body->m_input_types.size()", 28);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_function.cpp", "operator()", 49, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_function.cpp", "operator()", 49, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19120F024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_19120F08C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

uint64_t nitro::nitro_function::bind(nitro::nitro_function *this, unint64_t a2, const nitro::nitro_variable *a3)
{
  char *v4;
  unint64_t v6;
  unint64_t *v7;

  v6 = a2;
  v7 = &v6;
  v4 = std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)this + 32, &v6, (uint64_t)&std::piecewise_construct, &v7);
  return nitro::nitro_variable::operator=((uint64_t)(v4 + 24), (uint64_t *)a3);
}

uint64_t nitro::nitro_variable::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t **v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  void *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  void *v40;
  void *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  int v46;
  unint64_t *v48;
  unint64_t v49;

  v5 = *a2;
  v4 = a2[1];
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(std::__shared_weak_count **)(a1 + 8);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v4;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (a2 != (uint64_t *)a1)
  {
    v11 = (unint64_t **)(a1 + 16);
    switch(*(_BYTE *)(a1 + 24))
    {
      case 2:
        v12 = *v11;
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          v15 = *v11;
          if (!*v11)
            goto LABEL_60;
          if (*((char *)v15 + 31) < 0)
            operator delete((void *)v15[1]);
          v16 = v15;
          v17 = 0x1012C404EF22A49;
          goto LABEL_59;
        }
        break;
      case 3:
        v18 = *v11;
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          v21 = *v11;
          if (!*v11)
            goto LABEL_60;
          v22 = (void *)v21[1];
          if (v22)
          {
            v21[2] = (unint64_t)v22;
            operator delete(v22);
          }
          v16 = v21;
          v17 = 0x1080C409938AC02;
          goto LABEL_59;
        }
        break;
      case 4:
        v23 = *v11;
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          v26 = *v11;
          if (!*v11)
            goto LABEL_60;
          v27 = v26[1];
          if (v27)
          {
            v28 = v26[2];
            v29 = (void *)v26[1];
            if (v28 != v27)
            {
              do
              {
                v28 -= 16;
                std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v26 + 3), v28);
              }
              while (v28 != v27);
              v29 = (void *)v26[1];
            }
            v26[2] = v27;
            goto LABEL_43;
          }
          goto LABEL_44;
        }
        break;
      case 5:
        v30 = *v11;
        do
        {
          v31 = __ldaxr(v30);
          v32 = v31 - 1;
        }
        while (__stlxr(v32, v30));
        if (!v32)
        {
          v26 = *v11;
          if (!*v11)
            goto LABEL_60;
          v33 = v26[1];
          if (v33)
          {
            v34 = v26[2];
            v35 = (void *)v26[1];
            if (v34 != v33)
            {
              do
                v34 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v34 - 32);
              while (v34 != v33);
              v35 = (void *)v26[1];
            }
            v26[2] = v33;
            v29 = v35;
LABEL_43:
            operator delete(v29);
          }
LABEL_44:
          v16 = v26;
          v17 = 0x1020C405E66F15BLL;
          goto LABEL_59;
        }
        break;
      case 9:
        v36 = *v11;
        do
        {
          v37 = __ldaxr(v36);
          v38 = v37 - 1;
        }
        while (__stlxr(v38, v36));
        if (!v38)
        {
          v39 = *v11;
          if (*v11)
          {
            v40 = (void *)v39[7];
            if (v40)
            {
              v39[8] = (unint64_t)v40;
              operator delete(v40);
            }
            v41 = (void *)v39[4];
            if (v41)
            {
              v39[5] = (unint64_t)v41;
              operator delete(v41);
            }
            v42 = (std::__shared_weak_count *)v39[3];
            if (v42)
            {
              v43 = (unint64_t *)&v42->__shared_owners_;
              do
                v44 = __ldaxr(v43);
              while (__stlxr(v44 - 1, v43));
              if (!v44)
              {
                ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                std::__shared_weak_count::__release_weak(v42);
              }
            }
            v16 = v39;
            v17 = 0x10B0C4002311774;
LABEL_59:
            MEMORY[0x19401CD90](v16, v17);
          }
LABEL_60:
          *v11 = 0;
        }
        break;
      default:
        break;
    }
    v45 = (unint64_t *)a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    *v11 = v45;
    v46 = *((unsigned __int8 *)a2 + 24);
    *(_BYTE *)(a1 + 24) = v46;
    if ((v46 - 2) < 4 || v46 == 9)
    {
      v48 = *v11;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 + 1, v48));
    }
  }
  return a1;
}

void nitro::nitro_function::run(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD **v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13[2];
  _QWORD **v14;
  _QWORD *v15[2];
  _QWORD **v16;
  _QWORD *v17[2];

  v9 = &v10;
  v10 = 0;
  v13[0] = 0;
  v13[1] = 0;
  v11 = 0;
  v12 = v13;
  v14 = v15;
  v15[0] = 0;
  v17[0] = 0;
  v17[1] = 0;
  v15[1] = 0;
  v16 = v17;
  v6 = *(_QWORD *)*a1;
  v7 = (char *)operator new(0x70uLL);
  *((_QWORD *)v7 + 4) = v6;
  *((_QWORD *)v7 + 13) = 0;
  *(_OWORD *)(v7 + 56) = 0u;
  *(_OWORD *)(v7 + 72) = 0u;
  *(_OWORD *)(v7 + 88) = 0u;
  *(_OWORD *)(v7 + 40) = 0u;
  v8 = (uint64_t)(v7 + 40);
  *((_DWORD *)v7 + 26) = 1065353216;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = &v10;
  v9 = (_QWORD **)v7;
  v10 = v7;
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v7, (uint64_t *)v7);
  ++v11;
  nitro::nitro_function::operator=(v8, a1);
  nitro::nitro_function::run((__int128 *)a1, a2, (unint64_t *)&v9, a3);
  std::__tree<std::__value_type<unsigned long,std::function<nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::function<nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::function<nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>>>>::destroy((uint64_t)&v16, v17[0]);
  std::__tree<std::__value_type<unsigned long,nitro::nitro_variable>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,nitro::nitro_variable>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,nitro::nitro_variable>>>::destroy((uint64_t)&v14, v15[0]);
  std::__tree<std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>>>::destroy((uint64_t)&v12, v13[0]);
  std::__tree<std::__value_type<unsigned long,nitro::nitro_function>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,nitro::nitro_function>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,nitro::nitro_function>>>::destroy((uint64_t)&v9, v10);
}

void sub_19120F520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nitro::nitro_execution_context::~nitro_execution_context((nitro::nitro_execution_context *)&a9);
  _Unwind_Resume(a1);
}

uint64_t nitro::nitro_function::name(nitro::nitro_function *this)
{
  return **(_QWORD **)this;
}

uint64_t nitro::nitro_function::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;

  v5 = *a2;
  v4 = a2[1];
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(std::__shared_weak_count **)(a1 + 8);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v4;
  if (!v8)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v12 = a2[2];
    v11 = a2[3];
    if (!v11)
      goto LABEL_11;
  }
  else
  {
LABEL_8:
    v12 = a2[2];
    v11 = a2[3];
    if (!v11)
      goto LABEL_11;
  }
  v13 = (unint64_t *)(v11 + 8);
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
LABEL_11:
  v15 = *(std::__shared_weak_count **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = v11;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      if ((uint64_t *)a1 == a2)
        return a1;
      goto LABEL_16;
    }
  }
  if ((uint64_t *)a1 != a2)
  {
LABEL_16:
    *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
    std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned long,nitro::nitro_variable>,void *> *>>((_QWORD *)(a1 + 32), (uint64_t *)a2[6], 0);
  }
  return a1;
}

void nitro::nitro_function::run(__int128 *a1@<X0>, uint64_t *a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  int v20;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __int128 *v25;
  unint64_t *v26;
  __int16 v27;
  char v28;
  _OWORD v29[2];
  uint64_t v30;
  __int128 v31[2];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v5 = a2[1];
  *(_QWORD *)&v31[0] = (v5 - *a2) >> 5;
  v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 16) - *(_QWORD *)(*(_QWORD *)a1 + 8)) >> 3);
  if (*(_QWORD *)&v31[0] != v24)
  {
    v25 = v31;
    v26 = &v24;
    nitro::nitro_function::run(std::vector<nitro::nitro_variable> const&,nitro::nitro_execution_context &)::$_0::operator()();
  }
  if (v5 != v6)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      *(_QWORD *)&v31[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 8 * v11);
      v25 = v31;
      v12 = std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)(a1 + 2), (unint64_t *)v31, (uint64_t)&std::piecewise_construct, (_QWORD **)&v25);
      nitro::nitro_variable::operator=((uint64_t)(v12 + 24), (uint64_t *)(v6 + v10));
      ++v11;
      v6 = *a2;
      v10 += 32;
    }
    while (v11 < (a2[1] - *a2) >> 5);
  }
  v25 = a1 + 2;
  v26 = a3;
  v27 = 0;
  v28 = 0;
  memset(v29, 0, sizeof(v29));
  v30 = 0;
  v13 = *((_QWORD *)a1 + 2);
  if (!*(_BYTE *)(v13 + 32))
  {
    v23 = *(_QWORD *)(v13 + 24);
    if (v23)
    {
      (*(void (**)(uint64_t, __int128 **))(*(_QWORD *)v23 + 48))(v23, &v25);
      goto LABEL_22;
    }
    goto LABEL_24;
  }
  if (!*(_BYTE *)(v13 + 33))
  {
    v14 = *(_QWORD *)(v13 + 24);
    if (v14)
    {
      (*(void (**)(__int128 *__return_ptr, uint64_t, __int128 **))(*(_QWORD *)v14 + 48))(v31, v14, &v25);
      nitro::nitro_variable::operator=(v13 + 40, v31);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v31);
      goto LABEL_9;
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
LABEL_9:
  v15 = *(_QWORD *)(v13 + 40);
  *(_BYTE *)(v13 + 33) = 1;
  *(_QWORD *)a4 = v15;
  v16 = *(_QWORD *)(v13 + 48);
  *(_QWORD *)(a4 + 8) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_QWORD *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 24) = 0;
  if (v13 + 40 != a4)
  {
    v19 = *(unint64_t **)(v13 + 56);
    *(_QWORD *)(a4 + 16) = v19;
    v20 = *(unsigned __int8 *)(v13 + 64);
    *(_BYTE *)(a4 + 24) = v20;
    if ((v20 - 2) < 4 || v20 == 9)
    {
      do
        v22 = __ldaxr(v19);
      while (__stlxr(v22 + 1, v19));
    }
  }
LABEL_22:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)((char *)v29 + 8));
}

void sub_19120F8A0(_Unwind_Exception *a1)
{
  nitro::nitro_variable *v1;

  nitro::nitro_variable::~nitro_variable(v1);
  _Unwind_Resume(a1);
}

void nitro::nitro_execution_context::~nitro_execution_context(nitro::nitro_execution_context *this)
{
  std::__tree<std::__value_type<unsigned long,std::function<nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::function<nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::function<nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>>>>::destroy((uint64_t)this + 72, *((_QWORD **)this + 10));
  std::__tree<std::__value_type<unsigned long,nitro::nitro_variable>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,nitro::nitro_variable>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,nitro::nitro_variable>>>::destroy((uint64_t)this + 48, *((_QWORD **)this + 7));
  std::__tree<std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>>>::destroy((uint64_t)this + 24, *((_QWORD *)this + 4));
  std::__tree<std::__value_type<unsigned long,nitro::nitro_function>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,nitro::nitro_function>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,nitro::nitro_function>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
}

void nitro::nitro_function::run(std::vector<nitro::nitro_variable> const&,nitro::nitro_execution_context &)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_function.cpp", 106);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"args.size()", 11);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"m_body->m_input_types.size()", 28);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_function.cpp", "operator()", 76, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_function.cpp", "operator()", 76, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19120FCB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_19120FD18(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

uint64_t nitro::nitro_function::get_input_types(nitro::nitro_function *this)
{
  return *(_QWORD *)this + 8;
}

uint64_t nitro::nitro_function::get_output_type(nitro::nitro_function *this)
{
  return *(_QWORD *)this + 32;
}

void std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned long,nitro::nitro_variable>,void *> *>>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v6 = a1[1];
  if (!v6)
    goto LABEL_9;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (_QWORD *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v8[2] = a2[2];
      nitro::nitro_variable::operator=((uint64_t)(v8 + 3), a2 + 3);
      v9 = (_QWORD *)*v8;
      std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__node_insert_multi(a1, v8);
      a2 = (uint64_t *)*a2;
      v8 = v9;
      if (!v9)
        goto LABEL_9;
    }
    do
    {
      v10 = (_QWORD *)*v8;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v8 + 3));
      operator delete(v8);
      v8 = v10;
    }
    while (v10);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__emplace_multi<std::pair<unsigned long const,nitro::nitro_variable> const&>(a1, (unsigned __int8 *)a2 + 16);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_19120FE2C(void *a1)
{
  uint64_t v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_19120FE44(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__node_insert_multi(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *inserted;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;

  v5 = a2 + 2;
  v4 = a2[2];
  *(v5 - 1) = v4;
  inserted = std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__node_insert_multi_prepare((uint64_t)a1, v4, v5);
  v7 = (int8x8_t)a1[1];
  v8 = *(v5 - 1);
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v7)
      v8 %= *(_QWORD *)&v7;
  }
  else
  {
    v8 &= *(_QWORD *)&v7 - 1;
  }
  if (!inserted)
  {
    *a2 = a1[2];
    a1[2] = a2;
    *(_QWORD *)(*a1 + 8 * v8) = a1 + 2;
    if (!*a2)
      goto LABEL_19;
    v10 = *(_QWORD *)(*a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v7)
        v10 %= *(_QWORD *)&v7;
    }
    else
    {
      v10 &= *(_QWORD *)&v7 - 1;
    }
LABEL_18:
    *(_QWORD *)(*a1 + 8 * v10) = a2;
    goto LABEL_19;
  }
  *a2 = *inserted;
  *inserted = a2;
  if (*a2)
  {
    v10 = *(_QWORD *)(*a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v7)
        v10 %= *(_QWORD *)&v7;
    }
    else
    {
      v10 &= *(_QWORD *)&v7 - 1;
    }
    if (v10 != v8)
      goto LABEL_18;
  }
LABEL_19:
  ++a1[3];
  return a2;
}

void std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  _BOOL8 v9;
  unint64_t v10;
  unint64_t v11;
  size_t prime;
  unint64_t v13;
  uint8x8_t v14;
  uint64_t v15;
  uint8x8_t v16;
  unint64_t v17;
  _QWORD *v18;
  int v19;
  _BOOL4 v20;
  int v21;
  _QWORD *result;
  unint64_t v23;
  unint64_t v24;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 1;
    if (v6 >= 3)
      v9 = (v6 & (v6 - 1)) != 0;
    v10 = v9 | (2 * v6);
    v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11)
      prime = v11;
    else
      prime = v10;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v6 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v6)
      goto LABEL_23;
    if (prime < v6)
    {
      v13 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v6 < 3 || (v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v14.i16[0] = vaddlv_u8(v14), v14.u32[0] > 1uLL))
      {
        v13 = std::__next_prime(v13);
      }
      else
      {
        v15 = 1 << -(char)__clz(v13 - 1);
        if (v13 >= 2)
          v13 = v15;
      }
      if (prime <= v13)
        prime = v13;
      if (prime < v6)
LABEL_23:
        std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__do_rehash<false>(a1, prime);
    }
    v6 = *(_QWORD *)(a1 + 8);
  }
  v16 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v16.i16[0] = vaddlv_u8(v16);
  if (v16.u32[0] > 1uLL)
  {
    v17 = a2;
    if (v6 <= a2)
      v17 = a2 % v6;
  }
  else
  {
    v17 = (v6 - 1) & a2;
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v17);
  if (!v18)
    return 0;
  v19 = 0;
  do
  {
    result = v18;
    v18 = (_QWORD *)*v18;
    if (!v18)
      break;
    v23 = v18[1];
    if (v16.u32[0] > 1uLL)
    {
      v24 = v18[1];
      if (v23 >= v6)
        v24 = v23 % v6;
    }
    else
    {
      v24 = v23 & (v6 - 1);
    }
    if (v24 != v17)
      break;
    v20 = v23 == a2 && v18[2] == *a3;
    v21 = v19 & !v20;
    v19 |= v20;
  }
  while (v21 != 1);
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      for (i = (_QWORD *)*v7; *v7; i = (_QWORD *)*v7)
      {
        v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2)
            v12 %= a2;
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          v7 = i;
        }
        else
        {
          v13 = i;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
          {
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13 && i[2] == v13[2]);
            *v7 = v13;
            v15 = 8 * v12;
            *v14 = **(_QWORD **)(*(_QWORD *)a1 + v15);
            **(_QWORD **)(*(_QWORD *)a1 + v15) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
            v7 = i;
            v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__emplace_multi<std::pair<unsigned long const,nitro::nitro_variable> const&>(_QWORD *a1, unsigned __int8 *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  int v11;
  unint64_t v12;

  v4 = operator new(0x38uLL);
  v5 = v4;
  v6 = *((_QWORD *)a2 + 1);
  v4[2] = *(_QWORD *)a2;
  *v4 = 0;
  v4[1] = 0;
  v7 = *((_QWORD *)a2 + 2);
  v4[3] = v6;
  v4[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v4[5] = 0;
  *((_BYTE *)v4 + 48) = 0;
  if (v4 + 2 != (_QWORD *)a2)
  {
    v10 = (unint64_t *)*((_QWORD *)a2 + 3);
    v4[5] = v10;
    v11 = a2[32];
    *((_BYTE *)v4 + 48) = v11;
    if ((v11 - 2) < 4 || v11 == 9)
    {
      do
        v12 = __ldaxr(v10);
      while (__stlxr(v12 + 1, v10));
      v5 = v4;
    }
  }
  v5[1] = v5[2];
  return std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__node_insert_multi(a1, v5);
}

void sub_191210404(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,nitro::nitro_variable>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,nitro::nitro_variable>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<unsigned long,std::function<nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::function<nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::function<nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;

  if (a2)
  {
    std::__tree<std::__value_type<unsigned long,std::function<nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::function<nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::function<nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long,std::function<nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::function<nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::function<nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>>>>::destroy(a1, a2[1]);
    v4 = (_QWORD *)a2[8];
    if (v4 == a2 + 5)
    {
      v5 = 4;
      v4 = a2 + 5;
    }
    else
    {
      if (!v4)
      {
LABEL_8:
        operator delete(a2);
        return;
      }
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
    goto LABEL_8;
  }
}

void std::__tree<std::__value_type<unsigned long,nitro::nitro_variable>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,nitro::nitro_variable>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,nitro::nitro_variable>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long,nitro::nitro_variable>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,nitro::nitro_variable>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,nitro::nitro_variable>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long,nitro::nitro_variable>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,nitro::nitro_variable>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,nitro::nitro_variable>>>::destroy(a1, a2[1]);
    nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a2 + 5));
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>>>::destroy(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>>>::destroy(a1, *(_QWORD *)(a2 + 8));
    v4 = *(std::__shared_weak_count **)(a2 + 64);
    if (!v4)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
        goto LABEL_8;
    }
    else
    {
LABEL_6:
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
      {
LABEL_8:
        operator delete((void *)a2);
        return;
      }
    }
    operator delete(*(void **)(a2 + 32));
    goto LABEL_8;
  }
}

void std::__tree<std::__value_type<unsigned long,nitro::nitro_function>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,nitro::nitro_function>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,nitro::nitro_function>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long,nitro::nitro_function>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,nitro::nitro_function>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,nitro::nitro_function>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long,nitro::nitro_function>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,nitro::nitro_function>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,nitro::nitro_function>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<unsigned long const,nitro::nitro_function>,0>(a2 + 4);
    operator delete(a2);
  }
}

void std::__shared_ptr_emplace<nitro::nitro_function_body>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB61F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<nitro::nitro_function_body>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB61F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<nitro::nitro_function_body>::__on_zero_shared(uint64_t a1)
{
  nitro::nitro_function_body::~nitro_function_body((nitro::nitro_function_body *)(a1 + 24));
}

void nitro::nitro_function_body::~nitro_function_body(nitro::nitro_function_body *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;

  v2 = (_QWORD *)*((_QWORD *)this + 12);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 13);
    v4 = (void *)*((_QWORD *)this + 12);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 12);
    }
    *((_QWORD *)this + 13) = v2;
    operator delete(v4);
  }
  v7 = (void *)*((_QWORD *)this + 9);
  if (v7)
  {
    *((_QWORD *)this + 10) = v7;
    operator delete(v7);
  }
  v8 = *((unsigned int *)this + 16);
  if ((_DWORD)v8 != -1)
    ((void (*)(char *, char *))off_1E2DD1810[v8])(&v14, (char *)this + 32);
  *((_DWORD *)this + 16) = -1;
  v9 = *((_QWORD *)this + 1);
  if (v9)
  {
    v10 = *((_QWORD *)this + 2);
    v11 = (void *)*((_QWORD *)this + 1);
    if (v10 != v9)
    {
      do
      {
        v12 = v10 - 40;
        v13 = *(unsigned int *)(v10 - 8);
        if ((_DWORD)v13 != -1)
          ((void (*)(char *, uint64_t))off_1E2DD1810[v13])(&v15, v10 - 40);
        *(_DWORD *)(v10 - 8) = -1;
        v10 -= 40;
      }
      while (v12 != v9);
      v11 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v9;
    operator delete(v11);
  }
}

uint64_t *std::vector<nitro::variable_type>::__assign_with_size[abi:ne180100]<nitro::variable_type*,nitro::variable_type*>(uint64_t *result, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = a2;
  v7 = (uint64_t)result;
  v9 = (uint64_t)(result + 2);
  v8 = result[2];
  v10 = *result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *result) >> 3) < __sz)
  {
    if (v10)
    {
      v11 = result[1];
      v12 = (void *)*result;
      if (v11 != v10)
      {
        do
        {
          v13 = v11 - 40;
          v14 = *(unsigned int *)(v11 - 8);
          if ((_DWORD)v14 != -1)
            ((void (*)(uint64_t *, uint64_t))off_1E2DD1810[v14])(&v31, v11 - 40);
          *(_DWORD *)(v11 - 8) = -1;
          v11 -= 40;
        }
        while (v13 != v10);
        v12 = *(void **)v7;
      }
      *(_QWORD *)(v7 + 8) = v10;
      operator delete(v12);
      v8 = 0;
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
    }
    if (__sz > 0x666666666666666)
      goto LABEL_47;
    v24 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    v25 = 2 * v24;
    if (2 * v24 <= __sz)
      v25 = __sz;
    v26 = v24 >= 0x333333333333333 ? 0x666666666666666 : v25;
    if (v26 > 0x666666666666666)
LABEL_47:
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v27 = 40 * v26;
    v28 = (char *)operator new(40 * v26);
    *(_QWORD *)v7 = v28;
    *(_QWORD *)(v7 + 8) = v28;
    *(_QWORD *)(v7 + 16) = &v28[v27];
    result = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nitro::variable_type>,nitro::variable_type*,nitro::variable_type*,nitro::variable_type*>(v9, v6, a3, (uint64_t)v28);
    goto LABEL_37;
  }
  v15 = result[1];
  v16 = 0xCCCCCCCCCCCCCCCDLL * ((v15 - v10) >> 3);
  if (v16 >= __sz)
  {
    if (a2 == a3)
    {
      v21 = *result;
      if (v15 == v10)
      {
LABEL_45:
        *(_QWORD *)(v7 + 8) = v21;
        return result;
      }
      do
      {
LABEL_43:
        v29 = v15 - 40;
        v30 = *(unsigned int *)(v15 - 8);
        if ((_DWORD)v30 != -1)
          result = (uint64_t *)((uint64_t (*)(uint64_t *, uint64_t))off_1E2DD1810[v30])(&v31, v15 - 40);
        *(_DWORD *)(v15 - 8) = -1;
        v15 -= 40;
      }
      while (v29 != v21);
      goto LABEL_45;
    }
    v21 = *result;
    while (1)
    {
      v22 = *(unsigned int *)(v10 + 32);
      v23 = *(unsigned int *)(v6 + 32);
      if ((_DWORD)v22 != -1)
        break;
      if ((_DWORD)v23 != -1)
        goto LABEL_20;
LABEL_21:
      v6 += 40;
      v10 += 40;
      v21 += 40;
      if (v6 == a3)
      {
        v15 = *(_QWORD *)(v7 + 8);
        if (v15 == v21)
          goto LABEL_45;
        goto LABEL_43;
      }
    }
    if ((_DWORD)v23 == -1)
    {
      result = (uint64_t *)((uint64_t (*)(uint64_t *, uint64_t))off_1E2DD1810[v22])(&v31, v10);
      *(_DWORD *)(v10 + 32) = -1;
      goto LABEL_21;
    }
LABEL_20:
    v31 = v10;
    result = (uint64_t *)((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E2DD1848[v23])(&v31, v10, v6);
    goto LABEL_21;
  }
  if (v15 == v10)
    goto LABEL_36;
  v17 = 8 * ((v15 - v10) >> 3);
  v18 = a2;
  do
  {
    v19 = *(unsigned int *)(v10 + 32);
    v20 = *(unsigned int *)(v18 + 32);
    if ((_DWORD)v19 == -1)
    {
      if ((_DWORD)v20 == -1)
        goto LABEL_13;
LABEL_12:
      v31 = v10;
      ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E2DD1848[v20])(&v31, v10, v18);
      goto LABEL_13;
    }
    if ((_DWORD)v20 != -1)
      goto LABEL_12;
    ((void (*)(uint64_t *, uint64_t))off_1E2DD1810[v19])(&v31, v10);
    *(_DWORD *)(v10 + 32) = -1;
LABEL_13:
    v18 += 40;
    v10 += 40;
    v17 -= 40;
  }
  while (v17);
  v10 = *(_QWORD *)(v7 + 8);
LABEL_36:
  result = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nitro::variable_type>,nitro::variable_type*,nitro::variable_type*,nitro::variable_type*>(v9, v6 + 40 * v16, a3, v10);
LABEL_37:
  *(_QWORD *)(v7 + 8) = result;
  return result;
}

void sub_191210A38(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_191210A40(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nitro::variable_type>,nitro::variable_type*,nitro::variable_type*,nitro::variable_type*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _BYTE v10[2];

  v4 = a4;
  v9 = a4;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_BYTE *)v4 = 0;
      *(_DWORD *)(v4 + 32) = -1;
      v7 = *(unsigned int *)(v6 + 32);
      if ((_DWORD)v7 != -1)
      {
        ((void (*)(_BYTE *, uint64_t, uint64_t))off_1E2DD1880[v7])(v10, v4, v6);
        *(_DWORD *)(v4 + 32) = v7;
        v4 = v9;
      }
      v6 += 40;
      v4 += 40;
      v9 = v4;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_191210B10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  va_list va;

  va_start(va, a2);
  v5 = *(unsigned int *)(v2 + 32);
  if ((_DWORD)v5 != -1)
    ((void (*)(uint64_t, uint64_t))off_1E2DD1810[v5])(v3 - 49, v2);
  *(_DWORD *)(v2 + 32) = -1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nitro::variable_type>,nitro::variable_type*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nitro::variable_type>,nitro::variable_type*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  if (!*(_BYTE *)(a1 + 24))
  {
    v4 = *(uint64_t **)(a1 + 8);
    v3 = *(uint64_t **)(a1 + 16);
    v5 = *v3;
    v6 = *v4;
    if (*v3 != *v4)
    {
      do
      {
        v7 = v5 - 40;
        v8 = *(unsigned int *)(v5 - 8);
        if ((_DWORD)v8 != -1)
          ((void (*)(char *, uint64_t))off_1E2DD1810[v8])(&v9, v5 - 40);
        *(_DWORD *)(v5 - 8) = -1;
        v5 -= 40;
      }
      while (v7 != v6);
    }
  }
  return a1;
}

void std::__shared_ptr_emplace<nitro::impl::delayed_variable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6230;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<nitro::impl::delayed_variable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6230;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__shared_ptr_emplace<nitro::impl::delayed_variable>::__on_zero_shared(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *result;
  uint64_t v4;

  v2 = a1 + 3;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 8));
  result = (_QWORD *)a1[6];
  if (result == v2)
  {
    v4 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void nitro::impl::nitro_lazy_eval::exec_function_body(nitro::impl::nitro_lazy_eval *a1@<X0>, const nitro::ir::MEMBER ***a2@<X1>, uint64_t a3@<X8>)
{
  const nitro::ir::MEMBER **v4;
  const nitro::ir::MEMBER **v5;
  __int128 *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char v11;
  char *v12;
  char *v13;
  void *v14;
  nitro::nitro_variable *v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void *v20;
  nitro::nitro_variable *v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  void *__p;
  char *v26;
  void *v27;
  char *v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 *v32;
  __int16 v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v4, a1, (uint64_t)&v30);
      v9 = v28;
      if ((unint64_t)v28 >= v29)
      {
        v10 = std::vector<nitro::impl::delayed_variable>::__push_back_slow_path<nitro::impl::delayed_variable>(&v27, (uint64_t)&v30);
      }
      else
      {
        if (v32)
        {
          if (v32 == &v30)
          {
            *((_QWORD *)v28 + 3) = v28;
            (*(void (**)(__int128 *, char *))(*(_QWORD *)v32 + 24))(v32, v9);
          }
          else
          {
            *((_QWORD *)v28 + 3) = v32;
            v32 = 0;
          }
        }
        else
        {
          *((_QWORD *)v28 + 3) = 0;
        }
        *((_WORD *)v9 + 16) = v33;
        *(_OWORD *)(v9 + 40) = v34;
        v34 = 0uLL;
        *((_QWORD *)v9 + 7) = 0;
        v9[64] = 0;
        v11 = v36;
        *((_QWORD *)v9 + 7) = v35;
        v9[64] = v11;
        v9[64] = v36;
        v36 = 0;
        v10 = v9 + 72;
      }
      v28 = v10;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v34);
      v7 = v32;
      if (v32 == &v30)
      {
        v7 = &v30;
        v8 = 4;
      }
      else
      {
        if (!v32)
          goto LABEL_5;
        v8 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_5:
      ++v4;
    }
    while (v4 != v5);
  }
  std::vector<nitro::impl::delayed_variable>::vector(&__p, (uint64_t *)&v27);
  std::vector<nitro::impl::delayed_variable>::vector(&v30, (uint64_t *)&__p);
  *(_QWORD *)(a3 + 24) = 0;
  v12 = (char *)operator new(0x20uLL);
  *(_QWORD *)v12 = &off_1E2DAF350;
  *(_OWORD *)(v12 + 8) = v30;
  *((_QWORD *)v12 + 3) = v31;
  *(_QWORD *)(a3 + 24) = v12;
  *(_WORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_BYTE *)(a3 + 64) = 0;
  v13 = (char *)__p;
  if (!__p)
    goto LABEL_28;
  v14 = __p;
  if (v26 == __p)
    goto LABEL_27;
  v15 = (nitro::nitro_variable *)(v26 - 32);
  do
  {
    v18 = (char *)v15 - 40;
    nitro::nitro_variable::~nitro_variable(v15);
    v16 = (_QWORD *)*((_QWORD *)v15 - 2);
    if ((_QWORD *)((char *)v15 - 40) == v16)
    {
      v16 = (_QWORD *)((char *)v15 - 40);
      v17 = 4;
LABEL_21:
      (*(void (**)(void))(*v16 + 8 * v17))();
      goto LABEL_22;
    }
    if (v16)
    {
      v17 = 5;
      goto LABEL_21;
    }
LABEL_22:
    v15 = (nitro::nitro_variable *)((char *)v15 - 72);
  }
  while (v18 != v13);
  v14 = __p;
LABEL_27:
  v26 = v13;
  operator delete(v14);
LABEL_28:
  v19 = (char *)v27;
  if (!v27)
    return;
  v20 = v27;
  if (v28 == v27)
    goto LABEL_38;
  v21 = (nitro::nitro_variable *)(v28 - 32);
  while (2)
  {
    v24 = (char *)v21 - 40;
    nitro::nitro_variable::~nitro_variable(v21);
    v22 = (_QWORD *)*((_QWORD *)v21 - 2);
    if ((_QWORD *)((char *)v21 - 40) == v22)
    {
      v22 = (_QWORD *)((char *)v21 - 40);
      v23 = 4;
      goto LABEL_32;
    }
    if (v22)
    {
      v23 = 5;
LABEL_32:
      (*(void (**)(void))(*v22 + 8 * v23))();
    }
    v21 = (nitro::nitro_variable *)((char *)v21 - 72);
    if (v24 != v19)
      continue;
    break;
  }
  v20 = v27;
LABEL_38:
  v28 = v19;
  operator delete(v20);
}

void sub_191210F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15)
    nitro::impl::nitro_lazy_eval::exec_function_body((uint64_t)&a15, a15);
  nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0::~$_0(&a9);
  nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0::~$_0(&a12);
  _Unwind_Resume(a1);
}

void **nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0::~$_0(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  nitro::nitro_variable *v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;

  v2 = (char *)*a1;
  if (!*a1)
    return a1;
  v3 = (char *)a1[1];
  v4 = *a1;
  if (v3 == v2)
    goto LABEL_11;
  v5 = (nitro::nitro_variable *)(v3 - 32);
  do
  {
    v8 = (char *)v5 - 40;
    nitro::nitro_variable::~nitro_variable(v5);
    v6 = (_QWORD *)*((_QWORD *)v5 - 2);
    if ((_QWORD *)((char *)v5 - 40) == v6)
    {
      v6 = (_QWORD *)((char *)v5 - 40);
      v7 = 4;
LABEL_5:
      (*(void (**)(void))(*v6 + 8 * v7))();
      goto LABEL_6;
    }
    if (v6)
    {
      v7 = 5;
      goto LABEL_5;
    }
LABEL_6:
    v5 = (nitro::nitro_variable *)((char *)v5 - 72);
  }
  while (v8 != v2);
  v4 = *a1;
LABEL_11:
  a1[1] = v2;
  operator delete(v4);
  return a1;
}

void nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(const nitro::ir::MEMBER **a1@<X0>, nitro::impl::nitro_lazy_eval *a2@<X1>, uint64_t a3@<X8>)
{
  const nitro::ir::MEMBER *v6;
  uint64_t (**v7)();
  uint64_t symbol_id;
  uint64_t v9;
  const nitro::ir::MEMBER *v10;
  __int128 *v11;
  unint64_t *v12;
  int v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *__p[2];
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  while (2)
  {
    switch((*(unsigned int (**)(const nitro::ir::MEMBER *))(*(_QWORD *)*a1 + 24))(*a1))
    {
      case 0u:
        v6 = *a1;
        if (*((_DWORD *)*a1 + 12) == 5)
        {
          v7 = &off_1E2DAFDA0;
LABEL_24:
          v9 = *((_QWORD *)v6 + 1);
          *(_QWORD *)a3 = v7;
          *(_QWORD *)(a3 + 8) = v9;
LABEL_25:
          *(_QWORD *)(a3 + 24) = a3;
          *(_WORD *)(a3 + 32) = 0;
          *(_QWORD *)(a3 + 48) = 0;
          *(_QWORD *)(a3 + 56) = 0;
          *(_QWORD *)(a3 + 40) = 0;
          *(_BYTE *)(a3 + 64) = 0;
        }
        else
        {
          *(_QWORD *)(a3 + 40) = 0;
          v17 = a3 + 40;
          *(_QWORD *)(v17 - 16) = 0;
          *(_QWORD *)(v17 + 8) = 0;
          *(_QWORD *)(v17 + 16) = 0;
          *(_BYTE *)(v17 + 24) = 0;
          *(_WORD *)(v17 - 8) = 257;
          *(_OWORD *)__p = 0u;
          v19 = 0u;
          nitro::nitro_variable::operator=(v17, (__int128 *)__p);
LABEL_40:
          nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)__p);
        }
        return;
      case 1u:
        v10 = *a1;
        v11 = (__int128 *)((char *)*a1 + 8);
        __p[0] = 0;
        __p[1] = 0;
        BYTE8(v19) = 0;
        *(_QWORD *)&v19 = 0;
        if (&v19 != v11)
        {
          v12 = (unint64_t *)*((_QWORD *)v10 + 1);
          *(_QWORD *)&v19 = v12;
          v13 = *((unsigned __int8 *)v10 + 16);
          BYTE8(v19) = v13;
          if ((v13 - 2) < 4 || v13 == 9)
          {
            do
              v15 = __ldaxr(v12);
            while (__stlxr(v15 + 1, v12));
          }
        }
        *(_QWORD *)(a3 + 40) = 0;
        v16 = a3 + 40;
        *(_QWORD *)(v16 - 16) = 0;
        *(_QWORD *)(v16 + 8) = 0;
        *(_QWORD *)(v16 + 16) = 0;
        *(_BYTE *)(v16 + 24) = 0;
        *(_WORD *)(v16 - 8) = 257;
        nitro::nitro_variable::operator=(v16, (uint64_t *)__p);
        goto LABEL_40;
      case 2u:
        v6 = *a1;
        v7 = &off_1E2DAFEA8;
        goto LABEL_24;
      case 3u:
        nitro::impl::nitro_lazy_eval::exec<nitro::ir::DEFUN>(nitro::ir::DEFUN const&)::{lambda(void)#1}::operator()();
      case 4u:
        nitro::impl::nitro_lazy_eval::exec<nitro::ir::DEFUN>(nitro::ir::DEFUN const&)::{lambda(void)#1}::operator()();
      case 5u:
        nitro::impl::nitro_lazy_eval::exec<nitro::ir::DEFUN>(nitro::ir::DEFUN const&)::{lambda(void)#1}::operator()();
      case 6u:
        nitro::impl::nitro_lazy_eval::exec(a2, *a1, a3);
        return;
      case 7u:
        nitro::impl::nitro_lazy_eval::exec(a2, *a1, a3);
        return;
      case 8u:
        nitro::impl::nitro_lazy_eval::exec(a2, *a1, a3);
        return;
      case 9u:
        nitro::impl::nitro_lazy_eval::exec(a2, *a1, a3);
        return;
      case 0xAu:
        nitro::impl::nitro_lazy_eval::exec(a2, *a1, a3);
        return;
      case 0xBu:
        nitro::impl::nitro_lazy_eval::exec(a2, *a1, a3);
        return;
      case 0xCu:
        nitro::impl::nitro_lazy_eval::exec(a2, *a1, a3);
        return;
      case 0xDu:
        nitro::impl::nitro_lazy_eval::exec(a2, *a1, a3);
        return;
      case 0xEu:
        nitro::impl::nitro_lazy_eval::exec(a2, *a1, a3);
        return;
      case 0xFu:
        nitro::impl::nitro_lazy_eval::exec(a2, *a1, a3);
        return;
      case 0x10u:
        nitro::impl::nitro_lazy_eval::exec(a2, (const nitro::ir::MEMBER **)*a1, a3);
        return;
      case 0x11u:
        a1 = (const nitro::ir::MEMBER **)((char *)*a1 + 48);
        continue;
      case 0x12u:
        nitro::impl::nitro_lazy_eval::exec(a2, (const nitro::ir::MEMBER **)*a1, a3);
        return;
      case 0x13u:
        nitro::impl::nitro_lazy_eval::exec(a2, *a1, a3);
        return;
      case 0x14u:
        nitro::impl::nitro_lazy_eval::exec(a2, *a1, a3);
        return;
      case 0x15u:
        nitro::impl::nitro_lazy_eval::exec(a2, *a1, a3);
        return;
      case 0x16u:
        nitro::impl::nitro_lazy_eval::exec(a2, *a1, a3);
        return;
      case 0x17u:
        BYTE7(v19) = 8;
        strcpy((char *)__p, "__self__");
        symbol_id = nitro::get_symbol_id((const std::string *)__p);
        if (SBYTE7(v19) < 0)
          operator delete(__p[0]);
        *(_QWORD *)a3 = &off_1E2DAFB90;
        *(_QWORD *)(a3 + 8) = symbol_id;
        goto LABEL_25;
      case 0x18u:
        nitro::impl::nitro_lazy_eval::exec(a2, *a1, a3);
        return;
      case 0x19u:
        *(_QWORD *)a3 = &off_1E2DAFBE8;
        goto LABEL_25;
      case 0x1Au:
        *(_QWORD *)a3 = &off_1E2DAFF58;
        goto LABEL_25;
      default:
        _ZZN5nitro17syntax_tree_visitIZNS_4impl15nitro_lazy_eval9exec_nodeERKNSt3__110unique_ptrINS_2ir4NODEENS3_14default_deleteIS6_EEEEE3__0EEDTclfp0_cvNS5_6SYMBOLE_EEESB_T_ENKUlvE_clEv();
    }
  }
}

void sub_191211644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::impl::nitro_lazy_eval::exec@<X0>(nitro::impl::nitro_lazy_eval *this@<X0>, const nitro::ir::MEMBER *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *result;
  uint64_t v26;
  _QWORD v27[3];
  _QWORD *v28;
  __int16 v29;
  __int128 v30;
  unint64_t *v31;
  unsigned __int8 v32;
  uint64_t v33;
  _QWORD v34[3];
  _QWORD *v35;
  __int16 v36;
  __int128 v37;
  unint64_t *v38;
  unsigned __int8 v39;
  _QWORD v40[3];
  _QWORD *v41;
  __int16 v42;
  __int128 v43;
  unint64_t *v44;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v34, (char *)a2 + 8, this);
  v5 = *((_QWORD *)a2 + 2);
  v6 = (uint64_t)v35;
  if (!v35)
    goto LABEL_4;
  if (v35 != v34)
  {
    v6 = (*(uint64_t (**)(void))(*v35 + 16))();
LABEL_4:
    v28 = (_QWORD *)v6;
    goto LABEL_6;
  }
  v28 = v27;
  (*(void (**)(_QWORD *, _QWORD *))(v34[0] + 24))(v34, v27);
LABEL_6:
  v29 = v36;
  v30 = v37;
  if (*((_QWORD *)&v37 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v31 = v38;
  v32 = v39;
  if (v39 - 2 < 4 || v39 == 9)
  {
    v10 = v31;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  v33 = v5;
  v12 = (uint64_t)v28;
  if (!v28)
    goto LABEL_19;
  if (v28 != v27)
  {
    v12 = (*(uint64_t (**)(void))(*v28 + 16))();
LABEL_19:
    v41 = (_QWORD *)v12;
    goto LABEL_21;
  }
  v41 = v40;
  (*(void (**)(_QWORD *, _QWORD *))(v27[0] + 24))(v27, v40);
LABEL_21:
  v42 = v29;
  v43 = v30;
  if (*((_QWORD *)&v30 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = v31;
  v44 = v31;
  v45 = v32;
  if (v32 - 2 < 4 || v32 == 9)
  {
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 + 1, v15));
  }
  v18 = v33;
  v46 = v33;
  *(_QWORD *)(a3 + 24) = 0;
  v19 = operator new(0x58uLL);
  v20 = v19;
  *v19 = &off_1E2DAFDF8;
  if (v41)
  {
    if (v41 == v40)
    {
      v19[4] = v19 + 1;
      (*(void (**)(_QWORD *))(v40[0] + 24))(v40);
      v18 = v46;
    }
    else
    {
      v19[4] = v41;
      v41 = 0;
    }
  }
  else
  {
    v19[4] = 0;
  }
  *((_WORD *)v20 + 20) = v42;
  *((_OWORD *)v20 + 3) = v43;
  v43 = 0uLL;
  v20[8] = v44;
  *((_BYTE *)v20 + 72) = v45;
  v45 = 0;
  v20[10] = v18;
  *(_QWORD *)(a3 + 24) = v20;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v43);
  v21 = v41;
  if (v41 == v40)
  {
    v22 = 4;
    v21 = v40;
  }
  else
  {
    if (!v41)
      goto LABEL_40;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_40:
  *(_WORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_BYTE *)(a3 + 64) = 0;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v30);
  v23 = v28;
  if (v28 == v27)
  {
    v24 = 4;
    v23 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_45;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_45:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v37);
  result = v35;
  if (v35 == v34)
  {
    v26 = 4;
    result = v34;
  }
  else
  {
    if (!v35)
      return result;
    v26 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v26))();
}

void sub_191211998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::impl::nitro_lazy_eval::exec@<X0>(nitro::impl::nitro_lazy_eval *this@<X0>, const nitro::ir::BINARYOPERATOR *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v87;
  unint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v94;
  unint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t *v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t *v108;
  unint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t *v115;
  unint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t *v122;
  unint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t *v129;
  unint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t *v136;
  unint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t *v143;
  unint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t *v150;
  unint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t *v157;
  unint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t *v164;
  unint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  unint64_t *v168;
  unint64_t v169;
  unint64_t *v171;
  unint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  unint64_t *v175;
  unint64_t v176;
  unint64_t *v178;
  unint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  unint64_t *v182;
  unint64_t v183;
  unint64_t *v185;
  unint64_t v186;
  _QWORD *v187;
  _QWORD *v188;
  unint64_t *v189;
  unint64_t v190;
  unint64_t *v192;
  unint64_t v193;
  _QWORD *v194;
  _QWORD *v195;
  unint64_t *v196;
  unint64_t v197;
  unint64_t *v199;
  unint64_t v200;
  _QWORD *v201;
  _QWORD *v202;
  unint64_t *v203;
  unint64_t v204;
  unint64_t *v206;
  unint64_t v207;
  _QWORD *v208;
  _QWORD *v209;
  unint64_t *v210;
  unint64_t v211;
  unint64_t *v213;
  unint64_t v214;
  _QWORD *v215;
  _QWORD *v216;
  __int128 *v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  std::locale *v223;
  uint64_t v224;
  uint64_t v225;
  _BYTE *v226;
  uint64_t v227;
  __int128 *v228;
  uint64_t v229;
  uint64_t *v230;
  uint64_t v231;
  _QWORD *v232;
  uint64_t v233;
  std::locale *v234;
  uint64_t v235;
  uint64_t v236;
  __int128 *v237;
  uint64_t v238;
  uint64_t *v239;
  uint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  std::locale *v243;
  uint64_t v244;
  uint64_t v245;
  __int128 *v246;
  uint64_t v247;
  uint64_t *v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  std::locale *v252;
  uint64_t v253;
  uint64_t v254;
  __int128 *v255;
  uint64_t v256;
  uint64_t *v257;
  uint64_t v258;
  _QWORD *v259;
  uint64_t v260;
  std::locale *v261;
  uint64_t v262;
  uint64_t v263;
  __int128 *v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t v267;
  _QWORD *v268;
  uint64_t v269;
  std::locale *v270;
  uint64_t v271;
  uint64_t v272;
  __int128 *v273;
  uint64_t v274;
  uint64_t *v275;
  uint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  std::locale *v279;
  uint64_t v280;
  uint64_t v281;
  __int128 *v282;
  uint64_t v283;
  uint64_t *v284;
  uint64_t v285;
  _QWORD *v286;
  uint64_t v287;
  std::locale *v288;
  uint64_t v289;
  uint64_t v290;
  __int128 *v291;
  uint64_t v292;
  uint64_t *v293;
  uint64_t v294;
  _QWORD *v295;
  uint64_t v296;
  std::locale *v297;
  uint64_t v298;
  uint64_t v299;
  __int128 *v300;
  uint64_t v301;
  uint64_t *v302;
  uint64_t v303;
  _QWORD *v304;
  uint64_t v305;
  std::locale *v306;
  uint64_t v307;
  uint64_t v308;
  __int128 *v309;
  uint64_t v310;
  uint64_t *v311;
  uint64_t v312;
  _QWORD *v313;
  uint64_t v314;
  std::locale *v315;
  uint64_t v316;
  uint64_t v317;
  __int128 *v318;
  uint64_t v319;
  uint64_t *v320;
  uint64_t v321;
  _QWORD *v322;
  uint64_t v323;
  std::locale *v324;
  uint64_t v325;
  uint64_t v326;
  __int128 *v327;
  uint64_t v328;
  uint64_t *v329;
  uint64_t v330;
  _QWORD *v331;
  uint64_t v332;
  std::locale *v333;
  uint64_t v334;
  uint64_t v335;
  __int128 *v336;
  uint64_t v337;
  uint64_t *v338;
  uint64_t v339;
  _QWORD *v340;
  uint64_t v341;
  std::locale *v342;
  uint64_t v343;
  uint64_t v344;
  _QWORD *v345;
  uint64_t v346;
  _QWORD *result;
  uint64_t v348;
  file_logger *v349;
  pthread_key_t *started;
  _QWORD *v351;
  _QWORD *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  std::ios_base *v357;
  _QWORD *v358;
  _QWORD *v359;
  _QWORD *v360;
  _QWORD *v361;
  _QWORD *v362;
  const std::locale::facet *v363;
  file_logger *v364;
  file_logger *v365;
  char *v366;
  _QWORD *v367;
  void **v368;
  uint64_t v369;
  file_logger *v370;
  file_logger *v371;
  char *v372;
  _QWORD *v373;
  void *locale;
  uint64_t v375;
  _QWORD *v376;
  void *v377;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v380;
  _BYTE v381[24];
  _BYTE *v382;
  __int16 v383;
  _QWORD v384[2];
  unint64_t *v385;
  unsigned __int8 v386;
  _BYTE v387[24];
  _BYTE *v388;
  __int16 v389;
  _QWORD v390[2];
  unint64_t *v391;
  unsigned __int8 v392;
  _BYTE v393[24];
  _BYTE *v394;
  __int16 v395;
  _QWORD v396[2];
  unint64_t *v397;
  unsigned __int8 v398;
  _BYTE v399[24];
  _BYTE *v400;
  __int16 v401;
  _QWORD v402[2];
  unint64_t *v403;
  unsigned __int8 v404;
  _BYTE v405[24];
  _BYTE *v406;
  __int16 v407;
  _QWORD v408[2];
  unint64_t *v409;
  unsigned __int8 v410;
  _BYTE v411[24];
  _BYTE *v412;
  __int16 v413;
  _QWORD v414[2];
  unint64_t *v415;
  unsigned __int8 v416;
  _BYTE v417[24];
  _BYTE *v418;
  __int16 v419;
  _QWORD v420[2];
  unint64_t *v421;
  unsigned __int8 v422;
  _BYTE v423[24];
  _BYTE *v424;
  __int16 v425;
  _QWORD v426[2];
  unint64_t *v427;
  unsigned __int8 v428;
  _BYTE v429[24];
  _BYTE *v430;
  __int16 v431;
  _QWORD v432[2];
  unint64_t *v433;
  unsigned __int8 v434;
  _BYTE v435[24];
  _BYTE *v436;
  __int16 v437;
  _QWORD v438[2];
  unint64_t *v439;
  unsigned __int8 v440;
  _BYTE v441[24];
  _BYTE *v442;
  __int16 v443;
  _QWORD v444[2];
  unint64_t *v445;
  unsigned __int8 v446;
  _BYTE v447[24];
  _BYTE *v448;
  __int16 v449;
  _QWORD v450[2];
  unint64_t *v451;
  unsigned __int8 v452;
  _BYTE v453[24];
  _BYTE *v454;
  __int16 v455;
  _QWORD v456[2];
  unint64_t *v457;
  unsigned __int8 v458;
  _BYTE v459[24];
  _BYTE *v460;
  __int16 v461;
  _QWORD v462[2];
  unint64_t *v463;
  unsigned __int8 v464;
  _BYTE v465[24];
  _BYTE *v466;
  __int16 v467;
  _QWORD v468[2];
  unint64_t *v469;
  unsigned __int8 v470;
  _BYTE v471[24];
  _BYTE *v472;
  __int16 v473;
  _QWORD v474[2];
  unint64_t *v475;
  unsigned __int8 v476;
  _BYTE v477[24];
  _BYTE *v478;
  __int16 v479;
  _QWORD v480[2];
  unint64_t *v481;
  unsigned __int8 v482;
  _BYTE v483[24];
  _BYTE *v484;
  __int16 v485;
  _QWORD v486[2];
  unint64_t *v487;
  unsigned __int8 v488;
  _BYTE v489[24];
  _BYTE *v490;
  __int16 v491;
  _QWORD v492[2];
  unint64_t *v493;
  unsigned __int8 v494;
  _BYTE v495[24];
  _BYTE *v496;
  __int16 v497;
  _QWORD v498[2];
  unint64_t *v499;
  unsigned __int8 v500;
  _BYTE v501[24];
  _BYTE *v502;
  __int16 v503;
  _QWORD v504[2];
  unint64_t *v505;
  unsigned __int8 v506;
  _BYTE v507[24];
  _BYTE *v508;
  __int16 v509;
  _QWORD v510[2];
  unint64_t *v511;
  unsigned __int8 v512;
  _BYTE v513[24];
  _BYTE *v514;
  __int16 v515;
  _QWORD v516[2];
  unint64_t *v517;
  unsigned __int8 v518;
  _BYTE v519[24];
  _BYTE *v520;
  __int16 v521;
  _QWORD v522[2];
  unint64_t *v523;
  unsigned __int8 v524;
  _BYTE v525[24];
  _BYTE *v526;
  __int16 v527;
  _QWORD v528[2];
  unint64_t *v529;
  unsigned __int8 v530;
  _BYTE v531[24];
  _BYTE *v532;
  __int16 v533;
  _QWORD v534[2];
  unint64_t *v535;
  unsigned __int8 v536;
  _BYTE v537[24];
  _BYTE *v538;
  __int16 v539;
  _QWORD v540[2];
  unint64_t *v541;
  unsigned __int8 v542;
  _BYTE v543[24];
  _BYTE *v544;
  __int16 v545;
  _QWORD v546[2];
  unint64_t *v547;
  unsigned __int8 v548;
  std::locale v549;
  uint64_t v550;
  unsigned __int8 v551;
  std::locale *v552;
  __int16 v553;
  __int128 v554;
  uint64_t v555;
  char v556;
  _QWORD v557[3];
  _QWORD *v558;
  __int16 v559;
  uint64_t v560;
  uint64_t v561;
  unint64_t *v562;
  unsigned __int8 v563;
  _QWORD v564[3];
  _QWORD *v565;
  __int16 v566;
  uint64_t v567;
  uint64_t v568;
  unint64_t *v569;
  unsigned __int8 v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t *v573;
  __int16 v574;
  __int128 v575;
  uint64_t v576;
  char v577;
  __int128 v578;
  __int128 v579;
  int v580;
  __int128 v581;
  uint64_t v582;
  char v583;
  uint64_t v584;

  v584 = *MEMORY[0x1E0C80C00];
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v564, (char *)a2 + 16, this);
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v557, (char *)a2 + 24, this);
  v6 = *((_DWORD *)a2 + 2);
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_WORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_BYTE *)(a3 + 64) = 0;
  switch(v6)
  {
    case 0:
      v7 = (uint64_t)v565;
      if (!v565)
        goto LABEL_5;
      if (v565 == v564)
      {
        v538 = v537;
        (*(void (**)(_QWORD *, _BYTE *))(v564[0] + 24))(v564, v537);
      }
      else
      {
        v7 = (*(uint64_t (**)(void))(*v565 + 16))();
LABEL_5:
        v538 = (_BYTE *)v7;
      }
      v539 = v566;
      v540[0] = v567;
      v540[1] = v568;
      if (v568)
      {
        v70 = (unint64_t *)(v568 + 8);
        do
          v71 = __ldxr(v70);
        while (__stxr(v71 + 1, v70));
      }
      v541 = v569;
      v542 = v570;
      if (v570 - 2 < 4 || v570 == 9)
      {
        v73 = v541;
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 + 1, v73));
      }
      v75 = v543;
      v76 = (uint64_t)v558;
      if (!v558)
        goto LABEL_177;
      if (v558 == v557)
      {
        v544 = v543;
        (*(void (**)(_QWORD *, _BYTE *))(v557[0] + 24))(v557, v543);
      }
      else
      {
        v76 = (*(uint64_t (**)(void))(*v558 + 16))();
LABEL_177:
        v544 = (_BYTE *)v76;
      }
      v545 = v559;
      v546[0] = v560;
      v546[1] = v561;
      if (v561)
      {
        v168 = (unint64_t *)(v561 + 8);
        do
          v169 = __ldxr(v168);
        while (__stxr(v169 + 1, v168));
      }
      v547 = v562;
      v548 = v563;
      if (v563 - 2 < 4 || v563 == 9)
      {
        v171 = v547;
        do
          v172 = __ldaxr(v171);
        while (__stlxr(v172 + 1, v171));
      }
      nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0((uint64_t)&v571, (uint64_t)v537);
      v552 = 0;
      v173 = operator new(0x98uLL);
      v174 = v173;
      *v173 = &off_1E2DAF4B0;
      if (v573)
      {
        if (v573 == &v571)
        {
          v173[4] = v173 + 1;
          (*(void (**)(uint64_t *))(v571 + 24))(&v571);
        }
        else
        {
          v173[4] = v573;
          v573 = 0;
        }
      }
      else
      {
        v173[4] = 0;
      }
      *((_WORD *)v174 + 20) = v574;
      *((_OWORD *)v174 + 3) = v575;
      v575 = 0uLL;
      v174[8] = v576;
      *((_BYTE *)v174 + 72) = v577;
      v577 = 0;
      if (*((_QWORD *)&v579 + 1))
      {
        if (*((__int128 **)&v579 + 1) == &v578)
        {
          v174[13] = v174 + 10;
          (*(void (**)(void))(v578 + 24))();
        }
        else
        {
          v174[13] = *((_QWORD *)&v579 + 1);
          *((_QWORD *)&v579 + 1) = 0;
        }
      }
      else
      {
        v174[13] = 0;
      }
      *((_WORD *)v174 + 56) = v580;
      *(_OWORD *)(v174 + 15) = v581;
      v581 = 0uLL;
      v174[17] = v582;
      *((_BYTE *)v174 + 144) = v583;
      v583 = 0;
      v552 = (std::locale *)v174;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v581);
      v282 = (__int128 *)*((_QWORD *)&v579 + 1);
      if (*((__int128 **)&v579 + 1) == &v578)
      {
        v283 = 4;
        v282 = &v578;
      }
      else
      {
        if (!*((_QWORD *)&v579 + 1))
          goto LABEL_750;
        v283 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v282 + 8 * v283))();
LABEL_750:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v575);
      v284 = v573;
      if (v573 == &v571)
      {
        v285 = 4;
        v284 = &v571;
      }
      else
      {
        if (!v573)
          goto LABEL_755;
        v285 = 5;
      }
      (*(void (**)(void))(*v284 + 8 * v285))();
LABEL_755:
      v553 = 0;
      v555 = 0;
      v554 = 0uLL;
      v556 = 0;
      v286 = *(_QWORD **)(a3 + 24);
      *(_QWORD *)(a3 + 24) = 0;
      if (v286 == (_QWORD *)a3)
      {
        v287 = 4;
        v286 = (_QWORD *)a3;
      }
      else
      {
        if (!v286)
          goto LABEL_760;
        v287 = 5;
      }
      (*(void (**)(void))(*v286 + 8 * v287))();
LABEL_760:
      *(_QWORD *)(a3 + 24) = v174;
      v552 = 0;
      *(_WORD *)(a3 + 32) = v553;
      nitro::nitro_variable::operator=(a3 + 40, &v554);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v554);
      v288 = v552;
      if (v552 == &v549)
      {
        v289 = 4;
        v288 = &v549;
      }
      else
      {
        if (!v552)
          goto LABEL_765;
        v289 = 5;
      }
      (*((void (**)(void))v288->__locale_ + v289))();
LABEL_765:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v546);
      if (v544 == v543)
      {
        v290 = 4;
      }
      else
      {
        if (!v544)
          goto LABEL_770;
        v290 = 5;
        v75 = v544;
      }
      (*(void (**)(_QWORD *))(*v75 + 8 * v290))(v75);
LABEL_770:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v540);
      v226 = v538;
      if (v538 != v537)
        goto LABEL_939;
      v227 = 4;
      v226 = v537;
      goto LABEL_941;
    case 1:
      v15 = (uint64_t)v565;
      if (!v565)
        goto LABEL_37;
      if (v565 == v564)
      {
        v526 = v525;
        (*(void (**)(_QWORD *, _BYTE *))(v564[0] + 24))(v564, v525);
      }
      else
      {
        v15 = (*(uint64_t (**)(void))(*v565 + 16))();
LABEL_37:
        v526 = (_BYTE *)v15;
      }
      v527 = v566;
      v528[0] = v567;
      v528[1] = v568;
      if (v568)
      {
        v77 = (unint64_t *)(v568 + 8);
        do
          v78 = __ldxr(v77);
        while (__stxr(v78 + 1, v77));
      }
      v529 = v569;
      v530 = v570;
      if (v570 - 2 < 4 || v570 == 9)
      {
        v80 = v529;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 + 1, v80));
      }
      v82 = v531;
      v83 = (uint64_t)v558;
      if (!v558)
        goto LABEL_192;
      if (v558 == v557)
      {
        v532 = v531;
        (*(void (**)(_QWORD *, _BYTE *))(v557[0] + 24))(v557, v531);
      }
      else
      {
        v83 = (*(uint64_t (**)(void))(*v558 + 16))();
LABEL_192:
        v532 = (_BYTE *)v83;
      }
      v533 = v559;
      v534[0] = v560;
      v534[1] = v561;
      if (v561)
      {
        v175 = (unint64_t *)(v561 + 8);
        do
          v176 = __ldxr(v175);
        while (__stxr(v176 + 1, v175));
      }
      v535 = v562;
      v536 = v563;
      if (v563 - 2 < 4 || v563 == 9)
      {
        v178 = v535;
        do
          v179 = __ldaxr(v178);
        while (__stlxr(v179 + 1, v178));
      }
      nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1::$_1((uint64_t)&v571, (uint64_t)v525);
      v552 = 0;
      v180 = operator new(0x98uLL);
      v181 = v180;
      *v180 = &off_1E2DAF508;
      if (v573)
      {
        if (v573 == &v571)
        {
          v180[4] = v180 + 1;
          (*(void (**)(uint64_t *))(v571 + 24))(&v571);
        }
        else
        {
          v180[4] = v573;
          v573 = 0;
        }
      }
      else
      {
        v180[4] = 0;
      }
      *((_WORD *)v181 + 20) = v574;
      *((_OWORD *)v181 + 3) = v575;
      v575 = 0uLL;
      v181[8] = v576;
      *((_BYTE *)v181 + 72) = v577;
      v577 = 0;
      if (*((_QWORD *)&v579 + 1))
      {
        if (*((__int128 **)&v579 + 1) == &v578)
        {
          v181[13] = v181 + 10;
          (*(void (**)(void))(v578 + 24))();
        }
        else
        {
          v181[13] = *((_QWORD *)&v579 + 1);
          *((_QWORD *)&v579 + 1) = 0;
        }
      }
      else
      {
        v181[13] = 0;
      }
      *((_WORD *)v181 + 56) = v580;
      *(_OWORD *)(v181 + 15) = v581;
      v581 = 0uLL;
      v181[17] = v582;
      *((_BYTE *)v181 + 144) = v583;
      v583 = 0;
      v552 = (std::locale *)v181;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v581);
      v291 = (__int128 *)*((_QWORD *)&v579 + 1);
      if (*((__int128 **)&v579 + 1) == &v578)
      {
        v292 = 4;
        v291 = &v578;
      }
      else
      {
        if (!*((_QWORD *)&v579 + 1))
          goto LABEL_778;
        v292 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v291 + 8 * v292))();
LABEL_778:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v575);
      v293 = v573;
      if (v573 == &v571)
      {
        v294 = 4;
        v293 = &v571;
      }
      else
      {
        if (!v573)
          goto LABEL_783;
        v294 = 5;
      }
      (*(void (**)(void))(*v293 + 8 * v294))();
LABEL_783:
      v553 = 0;
      v555 = 0;
      v554 = 0uLL;
      v556 = 0;
      v295 = *(_QWORD **)(a3 + 24);
      *(_QWORD *)(a3 + 24) = 0;
      if (v295 == (_QWORD *)a3)
      {
        v296 = 4;
        v295 = (_QWORD *)a3;
      }
      else
      {
        if (!v295)
          goto LABEL_788;
        v296 = 5;
      }
      (*(void (**)(void))(*v295 + 8 * v296))();
LABEL_788:
      *(_QWORD *)(a3 + 24) = v181;
      v552 = 0;
      *(_WORD *)(a3 + 32) = v553;
      nitro::nitro_variable::operator=(a3 + 40, &v554);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v554);
      v297 = v552;
      if (v552 == &v549)
      {
        v298 = 4;
        v297 = &v549;
      }
      else
      {
        if (!v552)
          goto LABEL_793;
        v298 = 5;
      }
      (*((void (**)(void))v297->__locale_ + v298))();
LABEL_793:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v534);
      if (v532 == v531)
      {
        v299 = 4;
      }
      else
      {
        if (!v532)
          goto LABEL_798;
        v299 = 5;
        v82 = v532;
      }
      (*(void (**)(_QWORD *))(*v82 + 8 * v299))(v82);
LABEL_798:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v528);
      v226 = v526;
      if (v526 != v525)
        goto LABEL_939;
      v227 = 4;
      v226 = v525;
      goto LABEL_941;
    case 2:
      v12 = (uint64_t)v565;
      if (!v565)
        goto LABEL_25;
      if (v565 == v564)
      {
        v514 = v513;
        (*(void (**)(_QWORD *, _BYTE *))(v564[0] + 24))(v564, v513);
      }
      else
      {
        v12 = (*(uint64_t (**)(void))(*v565 + 16))();
LABEL_25:
        v514 = (_BYTE *)v12;
      }
      v515 = v566;
      v516[0] = v567;
      v516[1] = v568;
      if (v568)
      {
        v49 = (unint64_t *)(v568 + 8);
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
      v517 = v569;
      v518 = v570;
      if (v570 - 2 < 4 || v570 == 9)
      {
        v52 = v517;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 + 1, v52));
      }
      v54 = v519;
      v55 = (uint64_t)v558;
      if (!v558)
        goto LABEL_132;
      if (v558 == v557)
      {
        v520 = v519;
        (*(void (**)(_QWORD *, _BYTE *))(v557[0] + 24))(v557, v519);
      }
      else
      {
        v55 = (*(uint64_t (**)(void))(*v558 + 16))();
LABEL_132:
        v520 = (_BYTE *)v55;
      }
      v521 = v559;
      v522[0] = v560;
      v522[1] = v561;
      if (v561)
      {
        v147 = (unint64_t *)(v561 + 8);
        do
          v148 = __ldxr(v147);
        while (__stxr(v148 + 1, v147));
      }
      v523 = v562;
      v524 = v563;
      if (v563 - 2 < 4 || v563 == 9)
      {
        v150 = v523;
        do
          v151 = __ldaxr(v150);
        while (__stlxr(v151 + 1, v150));
      }
      nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2::$_2((uint64_t)&v571, (uint64_t)v513);
      v552 = 0;
      v152 = operator new(0x98uLL);
      v153 = v152;
      *v152 = &off_1E2DAF560;
      if (v573)
      {
        if (v573 == &v571)
        {
          v152[4] = v152 + 1;
          (*(void (**)(uint64_t *))(v571 + 24))(&v571);
        }
        else
        {
          v152[4] = v573;
          v573 = 0;
        }
      }
      else
      {
        v152[4] = 0;
      }
      *((_WORD *)v153 + 20) = v574;
      *((_OWORD *)v153 + 3) = v575;
      v575 = 0uLL;
      v153[8] = v576;
      *((_BYTE *)v153 + 72) = v577;
      v577 = 0;
      if (*((_QWORD *)&v579 + 1))
      {
        if (*((__int128 **)&v579 + 1) == &v578)
        {
          v153[13] = v153 + 10;
          (*(void (**)(void))(v578 + 24))();
        }
        else
        {
          v153[13] = *((_QWORD *)&v579 + 1);
          *((_QWORD *)&v579 + 1) = 0;
        }
      }
      else
      {
        v153[13] = 0;
      }
      *((_WORD *)v153 + 56) = v580;
      *(_OWORD *)(v153 + 15) = v581;
      v581 = 0uLL;
      v153[17] = v582;
      *((_BYTE *)v153 + 144) = v583;
      v583 = 0;
      v552 = (std::locale *)v153;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v581);
      v255 = (__int128 *)*((_QWORD *)&v579 + 1);
      if (*((__int128 **)&v579 + 1) == &v578)
      {
        v256 = 4;
        v255 = &v578;
      }
      else
      {
        if (!*((_QWORD *)&v579 + 1))
          goto LABEL_666;
        v256 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v255 + 8 * v256))();
LABEL_666:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v575);
      v257 = v573;
      if (v573 == &v571)
      {
        v258 = 4;
        v257 = &v571;
      }
      else
      {
        if (!v573)
          goto LABEL_671;
        v258 = 5;
      }
      (*(void (**)(void))(*v257 + 8 * v258))();
LABEL_671:
      v553 = 0;
      v555 = 0;
      v554 = 0uLL;
      v556 = 0;
      v259 = *(_QWORD **)(a3 + 24);
      *(_QWORD *)(a3 + 24) = 0;
      if (v259 == (_QWORD *)a3)
      {
        v260 = 4;
        v259 = (_QWORD *)a3;
      }
      else
      {
        if (!v259)
          goto LABEL_676;
        v260 = 5;
      }
      (*(void (**)(void))(*v259 + 8 * v260))();
LABEL_676:
      *(_QWORD *)(a3 + 24) = v153;
      v552 = 0;
      *(_WORD *)(a3 + 32) = v553;
      nitro::nitro_variable::operator=(a3 + 40, &v554);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v554);
      v261 = v552;
      if (v552 == &v549)
      {
        v262 = 4;
        v261 = &v549;
      }
      else
      {
        if (!v552)
          goto LABEL_681;
        v262 = 5;
      }
      (*((void (**)(void))v261->__locale_ + v262))();
LABEL_681:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v522);
      if (v520 == v519)
      {
        v263 = 4;
      }
      else
      {
        if (!v520)
          goto LABEL_686;
        v263 = 5;
        v54 = v520;
      }
      (*(void (**)(_QWORD *))(*v54 + 8 * v263))(v54);
LABEL_686:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v516);
      v226 = v514;
      if (v514 != v513)
        goto LABEL_939;
      v227 = 4;
      v226 = v513;
      goto LABEL_941;
    case 3:
      v13 = (uint64_t)v565;
      if (!v565)
        goto LABEL_29;
      if (v565 == v564)
      {
        v490 = v489;
        (*(void (**)(_QWORD *, _BYTE *))(v564[0] + 24))(v564, v489);
      }
      else
      {
        v13 = (*(uint64_t (**)(void))(*v565 + 16))();
LABEL_29:
        v490 = (_BYTE *)v13;
      }
      v491 = v566;
      v492[0] = v567;
      v492[1] = v568;
      if (v568)
      {
        v56 = (unint64_t *)(v568 + 8);
        do
          v57 = __ldxr(v56);
        while (__stxr(v57 + 1, v56));
      }
      v493 = v569;
      v494 = v570;
      if (v570 - 2 < 4 || v570 == 9)
      {
        v59 = v493;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 + 1, v59));
      }
      v61 = v495;
      v62 = (uint64_t)v558;
      if (!v558)
        goto LABEL_147;
      if (v558 == v557)
      {
        v496 = v495;
        (*(void (**)(_QWORD *, _BYTE *))(v557[0] + 24))(v557, v495);
      }
      else
      {
        v62 = (*(uint64_t (**)(void))(*v558 + 16))();
LABEL_147:
        v496 = (_BYTE *)v62;
      }
      v497 = v559;
      v498[0] = v560;
      v498[1] = v561;
      if (v561)
      {
        v154 = (unint64_t *)(v561 + 8);
        do
          v155 = __ldxr(v154);
        while (__stxr(v155 + 1, v154));
      }
      v499 = v562;
      v500 = v563;
      if (v563 - 2 < 4 || v563 == 9)
      {
        v157 = v499;
        do
          v158 = __ldaxr(v157);
        while (__stlxr(v158 + 1, v157));
      }
      nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4::$_4((uint64_t)&v571, (uint64_t)v489);
      v552 = 0;
      v159 = operator new(0x98uLL);
      v160 = v159;
      *v159 = &off_1E2DAF610;
      if (v573)
      {
        if (v573 == &v571)
        {
          v159[4] = v159 + 1;
          (*(void (**)(uint64_t *))(v571 + 24))(&v571);
        }
        else
        {
          v159[4] = v573;
          v573 = 0;
        }
      }
      else
      {
        v159[4] = 0;
      }
      *((_WORD *)v160 + 20) = v574;
      *((_OWORD *)v160 + 3) = v575;
      v575 = 0uLL;
      v160[8] = v576;
      *((_BYTE *)v160 + 72) = v577;
      v577 = 0;
      if (*((_QWORD *)&v579 + 1))
      {
        if (*((__int128 **)&v579 + 1) == &v578)
        {
          v160[13] = v160 + 10;
          (*(void (**)(void))(v578 + 24))();
        }
        else
        {
          v160[13] = *((_QWORD *)&v579 + 1);
          *((_QWORD *)&v579 + 1) = 0;
        }
      }
      else
      {
        v160[13] = 0;
      }
      *((_WORD *)v160 + 56) = v580;
      *(_OWORD *)(v160 + 15) = v581;
      v581 = 0uLL;
      v160[17] = v582;
      *((_BYTE *)v160 + 144) = v583;
      v583 = 0;
      v552 = (std::locale *)v160;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v581);
      v264 = (__int128 *)*((_QWORD *)&v579 + 1);
      if (*((__int128 **)&v579 + 1) == &v578)
      {
        v265 = 4;
        v264 = &v578;
      }
      else
      {
        if (!*((_QWORD *)&v579 + 1))
          goto LABEL_694;
        v265 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v264 + 8 * v265))();
LABEL_694:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v575);
      v266 = v573;
      if (v573 == &v571)
      {
        v267 = 4;
        v266 = &v571;
      }
      else
      {
        if (!v573)
          goto LABEL_699;
        v267 = 5;
      }
      (*(void (**)(void))(*v266 + 8 * v267))();
LABEL_699:
      v553 = 0;
      v555 = 0;
      v554 = 0uLL;
      v556 = 0;
      v268 = *(_QWORD **)(a3 + 24);
      *(_QWORD *)(a3 + 24) = 0;
      if (v268 == (_QWORD *)a3)
      {
        v269 = 4;
        v268 = (_QWORD *)a3;
      }
      else
      {
        if (!v268)
          goto LABEL_704;
        v269 = 5;
      }
      (*(void (**)(void))(*v268 + 8 * v269))();
LABEL_704:
      *(_QWORD *)(a3 + 24) = v160;
      v552 = 0;
      *(_WORD *)(a3 + 32) = v553;
      nitro::nitro_variable::operator=(a3 + 40, &v554);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v554);
      v270 = v552;
      if (v552 == &v549)
      {
        v271 = 4;
        v270 = &v549;
      }
      else
      {
        if (!v552)
          goto LABEL_709;
        v271 = 5;
      }
      (*((void (**)(void))v270->__locale_ + v271))();
LABEL_709:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v498);
      if (v496 == v495)
      {
        v272 = 4;
      }
      else
      {
        if (!v496)
          goto LABEL_714;
        v272 = 5;
        v61 = v496;
      }
      (*(void (**)(_QWORD *))(*v61 + 8 * v272))(v61);
LABEL_714:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v492);
      v226 = v490;
      if (v490 != v489)
        goto LABEL_939;
      v227 = 4;
      v226 = v489;
      goto LABEL_941;
    case 4:
      v9 = (uint64_t)v565;
      if (!v565)
        goto LABEL_13;
      if (v565 == v564)
      {
        v502 = v501;
        (*(void (**)(_QWORD *, _BYTE *))(v564[0] + 24))(v564, v501);
      }
      else
      {
        v9 = (*(uint64_t (**)(void))(*v565 + 16))();
LABEL_13:
        v502 = (_BYTE *)v9;
      }
      v503 = v566;
      v504[0] = v567;
      v504[1] = v568;
      if (v568)
      {
        v28 = (unint64_t *)(v568 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v505 = v569;
      v506 = v570;
      if (v570 - 2 < 4 || v570 == 9)
      {
        v31 = v505;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 + 1, v31));
      }
      v33 = v507;
      v34 = (uint64_t)v558;
      if (!v558)
        goto LABEL_87;
      if (v558 == v557)
      {
        v508 = v507;
        (*(void (**)(_QWORD *, _BYTE *))(v557[0] + 24))(v557, v507);
      }
      else
      {
        v34 = (*(uint64_t (**)(void))(*v558 + 16))();
LABEL_87:
        v508 = (_BYTE *)v34;
      }
      v509 = v559;
      v510[0] = v560;
      v510[1] = v561;
      if (v561)
      {
        v126 = (unint64_t *)(v561 + 8);
        do
          v127 = __ldxr(v126);
        while (__stxr(v127 + 1, v126));
      }
      v511 = v562;
      v512 = v563;
      if (v563 - 2 < 4 || v563 == 9)
      {
        v129 = v511;
        do
          v130 = __ldaxr(v129);
        while (__stlxr(v130 + 1, v129));
      }
      nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3::$_3((uint64_t)&v571, (uint64_t)v501);
      v552 = 0;
      v131 = operator new(0x98uLL);
      v132 = v131;
      *v131 = &off_1E2DAF5B8;
      if (v573)
      {
        if (v573 == &v571)
        {
          v131[4] = v131 + 1;
          (*(void (**)(uint64_t *))(v571 + 24))(&v571);
        }
        else
        {
          v131[4] = v573;
          v573 = 0;
        }
      }
      else
      {
        v131[4] = 0;
      }
      *((_WORD *)v132 + 20) = v574;
      *((_OWORD *)v132 + 3) = v575;
      v575 = 0uLL;
      v132[8] = v576;
      *((_BYTE *)v132 + 72) = v577;
      v577 = 0;
      if (*((_QWORD *)&v579 + 1))
      {
        if (*((__int128 **)&v579 + 1) == &v578)
        {
          v132[13] = v132 + 10;
          (*(void (**)(void))(v578 + 24))();
        }
        else
        {
          v132[13] = *((_QWORD *)&v579 + 1);
          *((_QWORD *)&v579 + 1) = 0;
        }
      }
      else
      {
        v132[13] = 0;
      }
      *((_WORD *)v132 + 56) = v580;
      *(_OWORD *)(v132 + 15) = v581;
      v581 = 0uLL;
      v132[17] = v582;
      *((_BYTE *)v132 + 144) = v583;
      v583 = 0;
      v552 = (std::locale *)v132;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v581);
      v228 = (__int128 *)*((_QWORD *)&v579 + 1);
      if (*((__int128 **)&v579 + 1) == &v578)
      {
        v229 = 4;
        v228 = &v578;
      }
      else
      {
        if (!*((_QWORD *)&v579 + 1))
          goto LABEL_582;
        v229 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v228 + 8 * v229))();
LABEL_582:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v575);
      v230 = v573;
      if (v573 == &v571)
      {
        v231 = 4;
        v230 = &v571;
      }
      else
      {
        if (!v573)
          goto LABEL_587;
        v231 = 5;
      }
      (*(void (**)(void))(*v230 + 8 * v231))();
LABEL_587:
      v553 = 0;
      v555 = 0;
      v554 = 0uLL;
      v556 = 0;
      v232 = *(_QWORD **)(a3 + 24);
      *(_QWORD *)(a3 + 24) = 0;
      if (v232 == (_QWORD *)a3)
      {
        v233 = 4;
        v232 = (_QWORD *)a3;
      }
      else
      {
        if (!v232)
          goto LABEL_592;
        v233 = 5;
      }
      (*(void (**)(void))(*v232 + 8 * v233))();
LABEL_592:
      *(_QWORD *)(a3 + 24) = v132;
      v552 = 0;
      *(_WORD *)(a3 + 32) = v553;
      nitro::nitro_variable::operator=(a3 + 40, &v554);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v554);
      v234 = v552;
      if (v552 == &v549)
      {
        v235 = 4;
        v234 = &v549;
      }
      else
      {
        if (!v552)
          goto LABEL_597;
        v235 = 5;
      }
      (*((void (**)(void))v234->__locale_ + v235))();
LABEL_597:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v510);
      if (v508 == v507)
      {
        v236 = 4;
      }
      else
      {
        if (!v508)
          goto LABEL_602;
        v236 = 5;
        v33 = v508;
      }
      (*(void (**)(_QWORD *))(*v33 + 8 * v236))(v33);
LABEL_602:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v504);
      v226 = v502;
      if (v502 != v501)
        goto LABEL_939;
      v227 = 4;
      v226 = v501;
      goto LABEL_941;
    case 5:
      v16 = (uint64_t)v565;
      if (!v565)
        goto LABEL_41;
      if (v565 == v564)
      {
        v478 = v477;
        (*(void (**)(_QWORD *, _BYTE *))(v564[0] + 24))(v564, v477);
      }
      else
      {
        v16 = (*(uint64_t (**)(void))(*v565 + 16))();
LABEL_41:
        v478 = (_BYTE *)v16;
      }
      v479 = v566;
      v480[0] = v567;
      v480[1] = v568;
      if (v568)
      {
        v84 = (unint64_t *)(v568 + 8);
        do
          v85 = __ldxr(v84);
        while (__stxr(v85 + 1, v84));
      }
      v481 = v569;
      v482 = v570;
      if (v570 - 2 < 4 || v570 == 9)
      {
        v87 = v481;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 + 1, v87));
      }
      v89 = v483;
      v90 = (uint64_t)v558;
      if (!v558)
        goto LABEL_207;
      if (v558 == v557)
      {
        v484 = v483;
        (*(void (**)(_QWORD *, _BYTE *))(v557[0] + 24))(v557, v483);
      }
      else
      {
        v90 = (*(uint64_t (**)(void))(*v558 + 16))();
LABEL_207:
        v484 = (_BYTE *)v90;
      }
      v485 = v559;
      v486[0] = v560;
      v486[1] = v561;
      if (v561)
      {
        v182 = (unint64_t *)(v561 + 8);
        do
          v183 = __ldxr(v182);
        while (__stxr(v183 + 1, v182));
      }
      v487 = v562;
      v488 = v563;
      if (v563 - 2 < 4 || v563 == 9)
      {
        v185 = v487;
        do
          v186 = __ldaxr(v185);
        while (__stlxr(v186 + 1, v185));
      }
      nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5::$_5((uint64_t)&v571, (uint64_t)v477);
      v552 = 0;
      v187 = operator new(0x98uLL);
      v188 = v187;
      *v187 = &off_1E2DAF668;
      if (v573)
      {
        if (v573 == &v571)
        {
          v187[4] = v187 + 1;
          (*(void (**)(uint64_t *))(v571 + 24))(&v571);
        }
        else
        {
          v187[4] = v573;
          v573 = 0;
        }
      }
      else
      {
        v187[4] = 0;
      }
      *((_WORD *)v188 + 20) = v574;
      *((_OWORD *)v188 + 3) = v575;
      v575 = 0uLL;
      v188[8] = v576;
      *((_BYTE *)v188 + 72) = v577;
      v577 = 0;
      if (*((_QWORD *)&v579 + 1))
      {
        if (*((__int128 **)&v579 + 1) == &v578)
        {
          v188[13] = v188 + 10;
          (*(void (**)(void))(v578 + 24))();
        }
        else
        {
          v188[13] = *((_QWORD *)&v579 + 1);
          *((_QWORD *)&v579 + 1) = 0;
        }
      }
      else
      {
        v188[13] = 0;
      }
      *((_WORD *)v188 + 56) = v580;
      *(_OWORD *)(v188 + 15) = v581;
      v581 = 0uLL;
      v188[17] = v582;
      *((_BYTE *)v188 + 144) = v583;
      v583 = 0;
      v552 = (std::locale *)v188;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v581);
      v300 = (__int128 *)*((_QWORD *)&v579 + 1);
      if (*((__int128 **)&v579 + 1) == &v578)
      {
        v301 = 4;
        v300 = &v578;
      }
      else
      {
        if (!*((_QWORD *)&v579 + 1))
          goto LABEL_806;
        v301 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v300 + 8 * v301))();
LABEL_806:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v575);
      v302 = v573;
      if (v573 == &v571)
      {
        v303 = 4;
        v302 = &v571;
      }
      else
      {
        if (!v573)
          goto LABEL_811;
        v303 = 5;
      }
      (*(void (**)(void))(*v302 + 8 * v303))();
LABEL_811:
      v553 = 0;
      v555 = 0;
      v554 = 0uLL;
      v556 = 0;
      v304 = *(_QWORD **)(a3 + 24);
      *(_QWORD *)(a3 + 24) = 0;
      if (v304 == (_QWORD *)a3)
      {
        v305 = 4;
        v304 = (_QWORD *)a3;
      }
      else
      {
        if (!v304)
          goto LABEL_816;
        v305 = 5;
      }
      (*(void (**)(void))(*v304 + 8 * v305))();
LABEL_816:
      *(_QWORD *)(a3 + 24) = v188;
      v552 = 0;
      *(_WORD *)(a3 + 32) = v553;
      nitro::nitro_variable::operator=(a3 + 40, &v554);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v554);
      v306 = v552;
      if (v552 == &v549)
      {
        v307 = 4;
        v306 = &v549;
      }
      else
      {
        if (!v552)
          goto LABEL_821;
        v307 = 5;
      }
      (*((void (**)(void))v306->__locale_ + v307))();
LABEL_821:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v486);
      if (v484 == v483)
      {
        v308 = 4;
      }
      else
      {
        if (!v484)
          goto LABEL_826;
        v308 = 5;
        v89 = v484;
      }
      (*(void (**)(_QWORD *))(*v89 + 8 * v308))(v89);
LABEL_826:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v480);
      v226 = v478;
      if (v478 != v477)
        goto LABEL_939;
      v227 = 4;
      v226 = v477;
      goto LABEL_941;
    case 6:
      v18 = (uint64_t)v565;
      if (!v565)
        goto LABEL_49;
      if (v565 == v564)
      {
        v466 = v465;
        (*(void (**)(_QWORD *, _BYTE *))(v564[0] + 24))(v564, v465);
      }
      else
      {
        v18 = (*(uint64_t (**)(void))(*v565 + 16))();
LABEL_49:
        v466 = (_BYTE *)v18;
      }
      v467 = v566;
      v468[0] = v567;
      v468[1] = v568;
      if (v568)
      {
        v98 = (unint64_t *)(v568 + 8);
        do
          v99 = __ldxr(v98);
        while (__stxr(v99 + 1, v98));
      }
      v469 = v569;
      v470 = v570;
      if (v570 - 2 < 4 || v570 == 9)
      {
        v101 = v469;
        do
          v102 = __ldaxr(v101);
        while (__stlxr(v102 + 1, v101));
      }
      v103 = v471;
      v104 = (uint64_t)v558;
      if (!v558)
        goto LABEL_237;
      if (v558 == v557)
      {
        v472 = v471;
        (*(void (**)(_QWORD *, _BYTE *))(v557[0] + 24))(v557, v471);
      }
      else
      {
        v104 = (*(uint64_t (**)(void))(*v558 + 16))();
LABEL_237:
        v472 = (_BYTE *)v104;
      }
      v473 = v559;
      v474[0] = v560;
      v474[1] = v561;
      if (v561)
      {
        v196 = (unint64_t *)(v561 + 8);
        do
          v197 = __ldxr(v196);
        while (__stxr(v197 + 1, v196));
      }
      v475 = v562;
      v476 = v563;
      if (v563 - 2 < 4 || v563 == 9)
      {
        v199 = v475;
        do
          v200 = __ldaxr(v199);
        while (__stlxr(v200 + 1, v199));
      }
      nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6::$_6((uint64_t)&v571, (uint64_t)v465);
      v552 = 0;
      v201 = operator new(0x98uLL);
      v202 = v201;
      *v201 = &off_1E2DAF6C0;
      if (v573)
      {
        if (v573 == &v571)
        {
          v201[4] = v201 + 1;
          (*(void (**)(uint64_t *))(v571 + 24))(&v571);
        }
        else
        {
          v201[4] = v573;
          v573 = 0;
        }
      }
      else
      {
        v201[4] = 0;
      }
      *((_WORD *)v202 + 20) = v574;
      *((_OWORD *)v202 + 3) = v575;
      v575 = 0uLL;
      v202[8] = v576;
      *((_BYTE *)v202 + 72) = v577;
      v577 = 0;
      if (*((_QWORD *)&v579 + 1))
      {
        if (*((__int128 **)&v579 + 1) == &v578)
        {
          v202[13] = v202 + 10;
          (*(void (**)(void))(v578 + 24))();
        }
        else
        {
          v202[13] = *((_QWORD *)&v579 + 1);
          *((_QWORD *)&v579 + 1) = 0;
        }
      }
      else
      {
        v202[13] = 0;
      }
      *((_WORD *)v202 + 56) = v580;
      *(_OWORD *)(v202 + 15) = v581;
      v581 = 0uLL;
      v202[17] = v582;
      *((_BYTE *)v202 + 144) = v583;
      v583 = 0;
      v552 = (std::locale *)v202;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v581);
      v318 = (__int128 *)*((_QWORD *)&v579 + 1);
      if (*((__int128 **)&v579 + 1) == &v578)
      {
        v319 = 4;
        v318 = &v578;
      }
      else
      {
        if (!*((_QWORD *)&v579 + 1))
          goto LABEL_862;
        v319 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v318 + 8 * v319))();
LABEL_862:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v575);
      v320 = v573;
      if (v573 == &v571)
      {
        v321 = 4;
        v320 = &v571;
      }
      else
      {
        if (!v573)
          goto LABEL_867;
        v321 = 5;
      }
      (*(void (**)(void))(*v320 + 8 * v321))();
LABEL_867:
      v553 = 0;
      v555 = 0;
      v554 = 0uLL;
      v556 = 0;
      v322 = *(_QWORD **)(a3 + 24);
      *(_QWORD *)(a3 + 24) = 0;
      if (v322 == (_QWORD *)a3)
      {
        v323 = 4;
        v322 = (_QWORD *)a3;
      }
      else
      {
        if (!v322)
          goto LABEL_872;
        v323 = 5;
      }
      (*(void (**)(void))(*v322 + 8 * v323))();
LABEL_872:
      *(_QWORD *)(a3 + 24) = v202;
      v552 = 0;
      *(_WORD *)(a3 + 32) = v553;
      nitro::nitro_variable::operator=(a3 + 40, &v554);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v554);
      v324 = v552;
      if (v552 == &v549)
      {
        v325 = 4;
        v324 = &v549;
      }
      else
      {
        if (!v552)
          goto LABEL_877;
        v325 = 5;
      }
      (*((void (**)(void))v324->__locale_ + v325))();
LABEL_877:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v474);
      if (v472 == v471)
      {
        v326 = 4;
      }
      else
      {
        if (!v472)
          goto LABEL_882;
        v326 = 5;
        v103 = v472;
      }
      (*(void (**)(_QWORD *))(*v103 + 8 * v326))(v103);
LABEL_882:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v468);
      v226 = v466;
      if (v466 != v465)
        goto LABEL_939;
      v227 = 4;
      v226 = v465;
      goto LABEL_941;
    case 7:
      v14 = (uint64_t)v565;
      if (!v565)
        goto LABEL_33;
      if (v565 == v564)
      {
        v454 = v453;
        (*(void (**)(_QWORD *, _BYTE *))(v564[0] + 24))(v564, v453);
      }
      else
      {
        v14 = (*(uint64_t (**)(void))(*v565 + 16))();
LABEL_33:
        v454 = (_BYTE *)v14;
      }
      v455 = v566;
      v456[0] = v567;
      v456[1] = v568;
      if (v568)
      {
        v63 = (unint64_t *)(v568 + 8);
        do
          v64 = __ldxr(v63);
        while (__stxr(v64 + 1, v63));
      }
      v457 = v569;
      v458 = v570;
      if (v570 - 2 < 4 || v570 == 9)
      {
        v66 = v457;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 + 1, v66));
      }
      v68 = v459;
      v69 = (uint64_t)v558;
      if (!v558)
        goto LABEL_162;
      if (v558 == v557)
      {
        v460 = v459;
        (*(void (**)(_QWORD *, _BYTE *))(v557[0] + 24))(v557, v459);
      }
      else
      {
        v69 = (*(uint64_t (**)(void))(*v558 + 16))();
LABEL_162:
        v460 = (_BYTE *)v69;
      }
      v461 = v559;
      v462[0] = v560;
      v462[1] = v561;
      if (v561)
      {
        v161 = (unint64_t *)(v561 + 8);
        do
          v162 = __ldxr(v161);
        while (__stxr(v162 + 1, v161));
      }
      v463 = v562;
      v464 = v563;
      if (v563 - 2 < 4 || v563 == 9)
      {
        v164 = v463;
        do
          v165 = __ldaxr(v164);
        while (__stlxr(v165 + 1, v164));
      }
      nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7::$_7((uint64_t)&v571, (uint64_t)v453);
      v552 = 0;
      v166 = operator new(0x98uLL);
      v167 = v166;
      *v166 = &off_1E2DAF718;
      if (v573)
      {
        if (v573 == &v571)
        {
          v166[4] = v166 + 1;
          (*(void (**)(uint64_t *))(v571 + 24))(&v571);
        }
        else
        {
          v166[4] = v573;
          v573 = 0;
        }
      }
      else
      {
        v166[4] = 0;
      }
      *((_WORD *)v167 + 20) = v574;
      *((_OWORD *)v167 + 3) = v575;
      v575 = 0uLL;
      v167[8] = v576;
      *((_BYTE *)v167 + 72) = v577;
      v577 = 0;
      if (*((_QWORD *)&v579 + 1))
      {
        if (*((__int128 **)&v579 + 1) == &v578)
        {
          v167[13] = v167 + 10;
          (*(void (**)(void))(v578 + 24))();
        }
        else
        {
          v167[13] = *((_QWORD *)&v579 + 1);
          *((_QWORD *)&v579 + 1) = 0;
        }
      }
      else
      {
        v167[13] = 0;
      }
      *((_WORD *)v167 + 56) = v580;
      *(_OWORD *)(v167 + 15) = v581;
      v581 = 0uLL;
      v167[17] = v582;
      *((_BYTE *)v167 + 144) = v583;
      v583 = 0;
      v552 = (std::locale *)v167;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v581);
      v273 = (__int128 *)*((_QWORD *)&v579 + 1);
      if (*((__int128 **)&v579 + 1) == &v578)
      {
        v274 = 4;
        v273 = &v578;
      }
      else
      {
        if (!*((_QWORD *)&v579 + 1))
          goto LABEL_722;
        v274 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v273 + 8 * v274))();
LABEL_722:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v575);
      v275 = v573;
      if (v573 == &v571)
      {
        v276 = 4;
        v275 = &v571;
      }
      else
      {
        if (!v573)
          goto LABEL_727;
        v276 = 5;
      }
      (*(void (**)(void))(*v275 + 8 * v276))();
LABEL_727:
      v553 = 0;
      v555 = 0;
      v554 = 0uLL;
      v556 = 0;
      v277 = *(_QWORD **)(a3 + 24);
      *(_QWORD *)(a3 + 24) = 0;
      if (v277 == (_QWORD *)a3)
      {
        v278 = 4;
        v277 = (_QWORD *)a3;
      }
      else
      {
        if (!v277)
          goto LABEL_732;
        v278 = 5;
      }
      (*(void (**)(void))(*v277 + 8 * v278))();
LABEL_732:
      *(_QWORD *)(a3 + 24) = v167;
      v552 = 0;
      *(_WORD *)(a3 + 32) = v553;
      nitro::nitro_variable::operator=(a3 + 40, &v554);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v554);
      v279 = v552;
      if (v552 == &v549)
      {
        v280 = 4;
        v279 = &v549;
      }
      else
      {
        if (!v552)
          goto LABEL_737;
        v280 = 5;
      }
      (*((void (**)(void))v279->__locale_ + v280))();
LABEL_737:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v462);
      if (v460 == v459)
      {
        v281 = 4;
      }
      else
      {
        if (!v460)
          goto LABEL_742;
        v281 = 5;
        v68 = v460;
      }
      (*(void (**)(_QWORD *))(*v68 + 8 * v281))(v68);
LABEL_742:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v456);
      v226 = v454;
      if (v454 != v453)
        goto LABEL_939;
      v227 = 4;
      v226 = v453;
      goto LABEL_941;
    case 8:
      v20 = (uint64_t)v565;
      if (!v565)
        goto LABEL_57;
      if (v565 == v564)
      {
        v442 = v441;
        (*(void (**)(_QWORD *, _BYTE *))(v564[0] + 24))(v564, v441);
      }
      else
      {
        v20 = (*(uint64_t (**)(void))(*v565 + 16))();
LABEL_57:
        v442 = (_BYTE *)v20;
      }
      v443 = v566;
      v444[0] = v567;
      v444[1] = v568;
      if (v568)
      {
        v112 = (unint64_t *)(v568 + 8);
        do
          v113 = __ldxr(v112);
        while (__stxr(v113 + 1, v112));
      }
      v445 = v569;
      v446 = v570;
      if (v570 - 2 < 4 || v570 == 9)
      {
        v115 = v445;
        do
          v116 = __ldaxr(v115);
        while (__stlxr(v116 + 1, v115));
      }
      v117 = v447;
      v118 = (uint64_t)v558;
      if (!v558)
        goto LABEL_267;
      if (v558 == v557)
      {
        v448 = v447;
        (*(void (**)(_QWORD *, _BYTE *))(v557[0] + 24))(v557, v447);
      }
      else
      {
        v118 = (*(uint64_t (**)(void))(*v558 + 16))();
LABEL_267:
        v448 = (_BYTE *)v118;
      }
      v449 = v559;
      v450[0] = v560;
      v450[1] = v561;
      if (v561)
      {
        v210 = (unint64_t *)(v561 + 8);
        do
          v211 = __ldxr(v210);
        while (__stxr(v211 + 1, v210));
      }
      v451 = v562;
      v452 = v563;
      if (v563 - 2 < 4 || v563 == 9)
      {
        v213 = v451;
        do
          v214 = __ldaxr(v213);
        while (__stlxr(v214 + 1, v213));
      }
      nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8::$_8((uint64_t)&v571, (uint64_t)v441);
      v552 = 0;
      v215 = operator new(0x98uLL);
      v216 = v215;
      *v215 = &off_1E2DAF770;
      if (v573)
      {
        if (v573 == &v571)
        {
          v215[4] = v215 + 1;
          (*(void (**)(uint64_t *))(v571 + 24))(&v571);
        }
        else
        {
          v215[4] = v573;
          v573 = 0;
        }
      }
      else
      {
        v215[4] = 0;
      }
      *((_WORD *)v216 + 20) = v574;
      *((_OWORD *)v216 + 3) = v575;
      v575 = 0uLL;
      v216[8] = v576;
      *((_BYTE *)v216 + 72) = v577;
      v577 = 0;
      if (*((_QWORD *)&v579 + 1))
      {
        if (*((__int128 **)&v579 + 1) == &v578)
        {
          v216[13] = v216 + 10;
          (*(void (**)(void))(v578 + 24))();
        }
        else
        {
          v216[13] = *((_QWORD *)&v579 + 1);
          *((_QWORD *)&v579 + 1) = 0;
        }
      }
      else
      {
        v216[13] = 0;
      }
      *((_WORD *)v216 + 56) = v580;
      *(_OWORD *)(v216 + 15) = v581;
      v581 = 0uLL;
      v216[17] = v582;
      *((_BYTE *)v216 + 144) = v583;
      v583 = 0;
      v552 = (std::locale *)v216;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v581);
      v336 = (__int128 *)*((_QWORD *)&v579 + 1);
      if (*((__int128 **)&v579 + 1) == &v578)
      {
        v337 = 4;
        v336 = &v578;
      }
      else
      {
        if (!*((_QWORD *)&v579 + 1))
          goto LABEL_918;
        v337 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v336 + 8 * v337))();
LABEL_918:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v575);
      v338 = v573;
      if (v573 == &v571)
      {
        v339 = 4;
        v338 = &v571;
      }
      else
      {
        if (!v573)
          goto LABEL_923;
        v339 = 5;
      }
      (*(void (**)(void))(*v338 + 8 * v339))();
LABEL_923:
      v553 = 0;
      v555 = 0;
      v554 = 0uLL;
      v556 = 0;
      v340 = *(_QWORD **)(a3 + 24);
      *(_QWORD *)(a3 + 24) = 0;
      if (v340 == (_QWORD *)a3)
      {
        v341 = 4;
        v340 = (_QWORD *)a3;
      }
      else
      {
        if (!v340)
          goto LABEL_928;
        v341 = 5;
      }
      (*(void (**)(void))(*v340 + 8 * v341))();
LABEL_928:
      *(_QWORD *)(a3 + 24) = v216;
      v552 = 0;
      *(_WORD *)(a3 + 32) = v553;
      nitro::nitro_variable::operator=(a3 + 40, &v554);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v554);
      v342 = v552;
      if (v552 == &v549)
      {
        v343 = 4;
        v342 = &v549;
      }
      else
      {
        if (!v552)
          goto LABEL_933;
        v343 = 5;
      }
      (*((void (**)(void))v342->__locale_ + v343))();
LABEL_933:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v450);
      if (v448 == v447)
      {
        v344 = 4;
      }
      else
      {
        if (!v448)
          goto LABEL_938;
        v344 = 5;
        v117 = v448;
      }
      (*(void (**)(_QWORD *))(*v117 + 8 * v344))(v117);
LABEL_938:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v444);
      v226 = v442;
      if (v442 != v441)
        goto LABEL_939;
      v227 = 4;
      v226 = v441;
      goto LABEL_941;
    case 9:
      v11 = (uint64_t)v565;
      if (!v565)
        goto LABEL_21;
      if (v565 == v564)
      {
        v430 = v429;
        (*(void (**)(_QWORD *, _BYTE *))(v564[0] + 24))(v564, v429);
      }
      else
      {
        v11 = (*(uint64_t (**)(void))(*v565 + 16))();
LABEL_21:
        v430 = (_BYTE *)v11;
      }
      v431 = v566;
      v432[0] = v567;
      v432[1] = v568;
      if (v568)
      {
        v42 = (unint64_t *)(v568 + 8);
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      v433 = v569;
      v434 = v570;
      if (v570 - 2 < 4 || v570 == 9)
      {
        v45 = v433;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 + 1, v45));
      }
      v47 = v435;
      v48 = (uint64_t)v558;
      if (!v558)
        goto LABEL_117;
      if (v558 == v557)
      {
        v436 = v435;
        (*(void (**)(_QWORD *, _BYTE *))(v557[0] + 24))(v557, v435);
      }
      else
      {
        v48 = (*(uint64_t (**)(void))(*v558 + 16))();
LABEL_117:
        v436 = (_BYTE *)v48;
      }
      v437 = v559;
      v438[0] = v560;
      v438[1] = v561;
      if (v561)
      {
        v140 = (unint64_t *)(v561 + 8);
        do
          v141 = __ldxr(v140);
        while (__stxr(v141 + 1, v140));
      }
      v439 = v562;
      v440 = v563;
      if (v563 - 2 < 4 || v563 == 9)
      {
        v143 = v439;
        do
          v144 = __ldaxr(v143);
        while (__stlxr(v144 + 1, v143));
      }
      nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9::$_9((uint64_t)&v571, (uint64_t)v429);
      v552 = 0;
      v145 = operator new(0x98uLL);
      v146 = v145;
      *v145 = &off_1E2DAF7C8;
      if (v573)
      {
        if (v573 == &v571)
        {
          v145[4] = v145 + 1;
          (*(void (**)(uint64_t *))(v571 + 24))(&v571);
        }
        else
        {
          v145[4] = v573;
          v573 = 0;
        }
      }
      else
      {
        v145[4] = 0;
      }
      *((_WORD *)v146 + 20) = v574;
      *((_OWORD *)v146 + 3) = v575;
      v575 = 0uLL;
      v146[8] = v576;
      *((_BYTE *)v146 + 72) = v577;
      v577 = 0;
      if (*((_QWORD *)&v579 + 1))
      {
        if (*((__int128 **)&v579 + 1) == &v578)
        {
          v146[13] = v146 + 10;
          (*(void (**)(void))(v578 + 24))();
        }
        else
        {
          v146[13] = *((_QWORD *)&v579 + 1);
          *((_QWORD *)&v579 + 1) = 0;
        }
      }
      else
      {
        v146[13] = 0;
      }
      *((_WORD *)v146 + 56) = v580;
      *(_OWORD *)(v146 + 15) = v581;
      v581 = 0uLL;
      v146[17] = v582;
      *((_BYTE *)v146 + 144) = v583;
      v583 = 0;
      v552 = (std::locale *)v146;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v581);
      v246 = (__int128 *)*((_QWORD *)&v579 + 1);
      if (*((__int128 **)&v579 + 1) == &v578)
      {
        v247 = 4;
        v246 = &v578;
      }
      else
      {
        if (!*((_QWORD *)&v579 + 1))
          goto LABEL_638;
        v247 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v246 + 8 * v247))();
LABEL_638:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v575);
      v248 = v573;
      if (v573 == &v571)
      {
        v249 = 4;
        v248 = &v571;
      }
      else
      {
        if (!v573)
          goto LABEL_643;
        v249 = 5;
      }
      (*(void (**)(void))(*v248 + 8 * v249))();
LABEL_643:
      v553 = 0;
      v555 = 0;
      v554 = 0uLL;
      v556 = 0;
      v250 = *(_QWORD **)(a3 + 24);
      *(_QWORD *)(a3 + 24) = 0;
      if (v250 == (_QWORD *)a3)
      {
        v251 = 4;
        v250 = (_QWORD *)a3;
      }
      else
      {
        if (!v250)
          goto LABEL_648;
        v251 = 5;
      }
      (*(void (**)(void))(*v250 + 8 * v251))();
LABEL_648:
      *(_QWORD *)(a3 + 24) = v146;
      v552 = 0;
      *(_WORD *)(a3 + 32) = v553;
      nitro::nitro_variable::operator=(a3 + 40, &v554);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v554);
      v252 = v552;
      if (v552 == &v549)
      {
        v253 = 4;
        v252 = &v549;
      }
      else
      {
        if (!v552)
          goto LABEL_653;
        v253 = 5;
      }
      (*((void (**)(void))v252->__locale_ + v253))();
LABEL_653:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v438);
      if (v436 == v435)
      {
        v254 = 4;
      }
      else
      {
        if (!v436)
          goto LABEL_658;
        v254 = 5;
        v47 = v436;
      }
      (*(void (**)(_QWORD *))(*v47 + 8 * v254))(v47);
LABEL_658:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v432);
      v226 = v430;
      if (v430 != v429)
        goto LABEL_939;
      v227 = 4;
      v226 = v429;
      goto LABEL_941;
    case 10:
      v19 = (uint64_t)v565;
      if (!v565)
        goto LABEL_53;
      if (v565 == v564)
      {
        v418 = v417;
        (*(void (**)(_QWORD *, _BYTE *))(v564[0] + 24))(v564, v417);
      }
      else
      {
        v19 = (*(uint64_t (**)(void))(*v565 + 16))();
LABEL_53:
        v418 = (_BYTE *)v19;
      }
      v419 = v566;
      v420[0] = v567;
      v420[1] = v568;
      if (v568)
      {
        v105 = (unint64_t *)(v568 + 8);
        do
          v106 = __ldxr(v105);
        while (__stxr(v106 + 1, v105));
      }
      v421 = v569;
      v422 = v570;
      if (v570 - 2 < 4 || v570 == 9)
      {
        v108 = v421;
        do
          v109 = __ldaxr(v108);
        while (__stlxr(v109 + 1, v108));
      }
      v110 = v423;
      v111 = (uint64_t)v558;
      if (!v558)
        goto LABEL_252;
      if (v558 == v557)
      {
        v424 = v423;
        (*(void (**)(_QWORD *, _BYTE *))(v557[0] + 24))(v557, v423);
      }
      else
      {
        v111 = (*(uint64_t (**)(void))(*v558 + 16))();
LABEL_252:
        v424 = (_BYTE *)v111;
      }
      v425 = v559;
      v426[0] = v560;
      v426[1] = v561;
      if (v561)
      {
        v203 = (unint64_t *)(v561 + 8);
        do
          v204 = __ldxr(v203);
        while (__stxr(v204 + 1, v203));
      }
      v427 = v562;
      v428 = v563;
      if (v563 - 2 < 4 || v563 == 9)
      {
        v206 = v427;
        do
          v207 = __ldaxr(v206);
        while (__stlxr(v207 + 1, v206));
      }
      nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10::$_10((uint64_t)&v571, (uint64_t)v417);
      v552 = 0;
      v208 = operator new(0x98uLL);
      v209 = v208;
      *v208 = &off_1E2DAF820;
      if (v573)
      {
        if (v573 == &v571)
        {
          v208[4] = v208 + 1;
          (*(void (**)(uint64_t *))(v571 + 24))(&v571);
        }
        else
        {
          v208[4] = v573;
          v573 = 0;
        }
      }
      else
      {
        v208[4] = 0;
      }
      *((_WORD *)v209 + 20) = v574;
      *((_OWORD *)v209 + 3) = v575;
      v575 = 0uLL;
      v209[8] = v576;
      *((_BYTE *)v209 + 72) = v577;
      v577 = 0;
      if (*((_QWORD *)&v579 + 1))
      {
        if (*((__int128 **)&v579 + 1) == &v578)
        {
          v209[13] = v209 + 10;
          (*(void (**)(void))(v578 + 24))();
        }
        else
        {
          v209[13] = *((_QWORD *)&v579 + 1);
          *((_QWORD *)&v579 + 1) = 0;
        }
      }
      else
      {
        v209[13] = 0;
      }
      *((_WORD *)v209 + 56) = v580;
      *(_OWORD *)(v209 + 15) = v581;
      v581 = 0uLL;
      v209[17] = v582;
      *((_BYTE *)v209 + 144) = v583;
      v583 = 0;
      v552 = (std::locale *)v209;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v581);
      v327 = (__int128 *)*((_QWORD *)&v579 + 1);
      if (*((__int128 **)&v579 + 1) == &v578)
      {
        v328 = 4;
        v327 = &v578;
      }
      else
      {
        if (!*((_QWORD *)&v579 + 1))
          goto LABEL_890;
        v328 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v327 + 8 * v328))();
LABEL_890:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v575);
      v329 = v573;
      if (v573 == &v571)
      {
        v330 = 4;
        v329 = &v571;
      }
      else
      {
        if (!v573)
          goto LABEL_895;
        v330 = 5;
      }
      (*(void (**)(void))(*v329 + 8 * v330))();
LABEL_895:
      v553 = 0;
      v555 = 0;
      v554 = 0uLL;
      v556 = 0;
      v331 = *(_QWORD **)(a3 + 24);
      *(_QWORD *)(a3 + 24) = 0;
      if (v331 == (_QWORD *)a3)
      {
        v332 = 4;
        v331 = (_QWORD *)a3;
      }
      else
      {
        if (!v331)
          goto LABEL_900;
        v332 = 5;
      }
      (*(void (**)(void))(*v331 + 8 * v332))();
LABEL_900:
      *(_QWORD *)(a3 + 24) = v209;
      v552 = 0;
      *(_WORD *)(a3 + 32) = v553;
      nitro::nitro_variable::operator=(a3 + 40, &v554);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v554);
      v333 = v552;
      if (v552 == &v549)
      {
        v334 = 4;
        v333 = &v549;
      }
      else
      {
        if (!v552)
          goto LABEL_905;
        v334 = 5;
      }
      (*((void (**)(void))v333->__locale_ + v334))();
LABEL_905:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v426);
      if (v424 == v423)
      {
        v335 = 4;
      }
      else
      {
        if (!v424)
          goto LABEL_910;
        v335 = 5;
        v110 = v424;
      }
      (*(void (**)(_QWORD *))(*v110 + 8 * v335))(v110);
LABEL_910:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v420);
      v226 = v418;
      if (v418 != v417)
        goto LABEL_939;
      v227 = 4;
      v226 = v417;
      goto LABEL_941;
    case 11:
      v8 = (uint64_t)v565;
      if (!v565)
        goto LABEL_9;
      if (v565 == v564)
      {
        v406 = v405;
        (*(void (**)(_QWORD *, _BYTE *))(v564[0] + 24))(v564, v405);
      }
      else
      {
        v8 = (*(uint64_t (**)(void))(*v565 + 16))();
LABEL_9:
        v406 = (_BYTE *)v8;
      }
      v407 = v566;
      v408[0] = v567;
      v408[1] = v568;
      if (v568)
      {
        v21 = (unint64_t *)(v568 + 8);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v409 = v569;
      v410 = v570;
      if (v570 - 2 < 4 || v570 == 9)
      {
        v24 = v409;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 + 1, v24));
      }
      v26 = v411;
      v27 = (uint64_t)v558;
      if (!v558)
        goto LABEL_72;
      if (v558 == v557)
      {
        v412 = v411;
        (*(void (**)(_QWORD *, _BYTE *))(v557[0] + 24))(v557, v411);
      }
      else
      {
        v27 = (*(uint64_t (**)(void))(*v558 + 16))();
LABEL_72:
        v412 = (_BYTE *)v27;
      }
      v413 = v559;
      v414[0] = v560;
      v414[1] = v561;
      if (v561)
      {
        v119 = (unint64_t *)(v561 + 8);
        do
          v120 = __ldxr(v119);
        while (__stxr(v120 + 1, v119));
      }
      v415 = v562;
      v416 = v563;
      if (v563 - 2 < 4 || v563 == 9)
      {
        v122 = v415;
        do
          v123 = __ldaxr(v122);
        while (__stlxr(v123 + 1, v122));
      }
      nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11::$_11((uint64_t)&v571, (uint64_t)v405);
      v552 = 0;
      v124 = operator new(0x98uLL);
      v125 = v124;
      *v124 = &off_1E2DAF878;
      if (v573)
      {
        if (v573 == &v571)
        {
          v124[4] = v124 + 1;
          (*(void (**)(uint64_t *))(v571 + 24))(&v571);
        }
        else
        {
          v124[4] = v573;
          v573 = 0;
        }
      }
      else
      {
        v124[4] = 0;
      }
      *((_WORD *)v125 + 20) = v574;
      *((_OWORD *)v125 + 3) = v575;
      v575 = 0uLL;
      v125[8] = v576;
      *((_BYTE *)v125 + 72) = v577;
      v577 = 0;
      if (*((_QWORD *)&v579 + 1))
      {
        if (*((__int128 **)&v579 + 1) == &v578)
        {
          v125[13] = v125 + 10;
          (*(void (**)(void))(v578 + 24))();
        }
        else
        {
          v125[13] = *((_QWORD *)&v579 + 1);
          *((_QWORD *)&v579 + 1) = 0;
        }
      }
      else
      {
        v125[13] = 0;
      }
      *((_WORD *)v125 + 56) = v580;
      *(_OWORD *)(v125 + 15) = v581;
      v581 = 0uLL;
      v125[17] = v582;
      *((_BYTE *)v125 + 144) = v583;
      v583 = 0;
      v552 = (std::locale *)v125;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v581);
      v217 = (__int128 *)*((_QWORD *)&v579 + 1);
      if (*((__int128 **)&v579 + 1) == &v578)
      {
        v218 = 4;
        v217 = &v578;
      }
      else
      {
        if (!*((_QWORD *)&v579 + 1))
          goto LABEL_554;
        v218 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v217 + 8 * v218))();
LABEL_554:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v575);
      v219 = v573;
      if (v573 == &v571)
      {
        v220 = 4;
        v219 = &v571;
      }
      else
      {
        if (!v573)
          goto LABEL_559;
        v220 = 5;
      }
      (*(void (**)(void))(*v219 + 8 * v220))();
LABEL_559:
      v553 = 0;
      v555 = 0;
      v554 = 0uLL;
      v556 = 0;
      v221 = *(_QWORD **)(a3 + 24);
      *(_QWORD *)(a3 + 24) = 0;
      if (v221 == (_QWORD *)a3)
      {
        v222 = 4;
        v221 = (_QWORD *)a3;
      }
      else
      {
        if (!v221)
          goto LABEL_564;
        v222 = 5;
      }
      (*(void (**)(void))(*v221 + 8 * v222))();
LABEL_564:
      *(_QWORD *)(a3 + 24) = v125;
      v552 = 0;
      *(_WORD *)(a3 + 32) = v553;
      nitro::nitro_variable::operator=(a3 + 40, &v554);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v554);
      v223 = v552;
      if (v552 == &v549)
      {
        v224 = 4;
        v223 = &v549;
      }
      else
      {
        if (!v552)
          goto LABEL_569;
        v224 = 5;
      }
      (*((void (**)(void))v223->__locale_ + v224))();
LABEL_569:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v414);
      if (v412 == v411)
      {
        v225 = 4;
      }
      else
      {
        if (!v412)
          goto LABEL_574;
        v225 = 5;
        v26 = v412;
      }
      (*(void (**)(_QWORD *))(*v26 + 8 * v225))(v26);
LABEL_574:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v408);
      v226 = v406;
      if (v406 != v405)
        goto LABEL_939;
      v227 = 4;
      v226 = v405;
      goto LABEL_941;
    case 12:
      v10 = (uint64_t)v565;
      if (!v565)
        goto LABEL_17;
      if (v565 == v564)
      {
        v394 = v393;
        (*(void (**)(_QWORD *, _BYTE *))(v564[0] + 24))(v564, v393);
      }
      else
      {
        v10 = (*(uint64_t (**)(void))(*v565 + 16))();
LABEL_17:
        v394 = (_BYTE *)v10;
      }
      v395 = v566;
      v396[0] = v567;
      v396[1] = v568;
      if (v568)
      {
        v35 = (unint64_t *)(v568 + 8);
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      v397 = v569;
      v398 = v570;
      if (v570 - 2 < 4 || v570 == 9)
      {
        v38 = v397;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 + 1, v38));
      }
      v40 = v399;
      v41 = (uint64_t)v558;
      if (!v558)
        goto LABEL_102;
      if (v558 == v557)
      {
        v400 = v399;
        (*(void (**)(_QWORD *, _BYTE *))(v557[0] + 24))(v557, v399);
      }
      else
      {
        v41 = (*(uint64_t (**)(void))(*v558 + 16))();
LABEL_102:
        v400 = (_BYTE *)v41;
      }
      v401 = v559;
      v402[0] = v560;
      v402[1] = v561;
      if (v561)
      {
        v133 = (unint64_t *)(v561 + 8);
        do
          v134 = __ldxr(v133);
        while (__stxr(v134 + 1, v133));
      }
      v403 = v562;
      v404 = v563;
      if (v563 - 2 < 4 || v563 == 9)
      {
        v136 = v403;
        do
          v137 = __ldaxr(v136);
        while (__stlxr(v137 + 1, v136));
      }
      nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12::$_12((uint64_t)&v571, (uint64_t)v393);
      v552 = 0;
      v138 = operator new(0x98uLL);
      v139 = v138;
      *v138 = &off_1E2DAF8D0;
      if (v573)
      {
        if (v573 == &v571)
        {
          v138[4] = v138 + 1;
          (*(void (**)(uint64_t *))(v571 + 24))(&v571);
        }
        else
        {
          v138[4] = v573;
          v573 = 0;
        }
      }
      else
      {
        v138[4] = 0;
      }
      *((_WORD *)v139 + 20) = v574;
      *((_OWORD *)v139 + 3) = v575;
      v575 = 0uLL;
      v139[8] = v576;
      *((_BYTE *)v139 + 72) = v577;
      v577 = 0;
      if (*((_QWORD *)&v579 + 1))
      {
        if (*((__int128 **)&v579 + 1) == &v578)
        {
          v139[13] = v139 + 10;
          (*(void (**)(void))(v578 + 24))();
        }
        else
        {
          v139[13] = *((_QWORD *)&v579 + 1);
          *((_QWORD *)&v579 + 1) = 0;
        }
      }
      else
      {
        v139[13] = 0;
      }
      *((_WORD *)v139 + 56) = v580;
      *(_OWORD *)(v139 + 15) = v581;
      v581 = 0uLL;
      v139[17] = v582;
      *((_BYTE *)v139 + 144) = v583;
      v583 = 0;
      v552 = (std::locale *)v139;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v581);
      v237 = (__int128 *)*((_QWORD *)&v579 + 1);
      if (*((__int128 **)&v579 + 1) == &v578)
      {
        v238 = 4;
        v237 = &v578;
      }
      else
      {
        if (!*((_QWORD *)&v579 + 1))
          goto LABEL_610;
        v238 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v237 + 8 * v238))();
LABEL_610:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v575);
      v239 = v573;
      if (v573 == &v571)
      {
        v240 = 4;
        v239 = &v571;
      }
      else
      {
        if (!v573)
          goto LABEL_615;
        v240 = 5;
      }
      (*(void (**)(void))(*v239 + 8 * v240))();
LABEL_615:
      v553 = 0;
      v555 = 0;
      v554 = 0uLL;
      v556 = 0;
      v241 = *(_QWORD **)(a3 + 24);
      *(_QWORD *)(a3 + 24) = 0;
      if (v241 == (_QWORD *)a3)
      {
        v242 = 4;
        v241 = (_QWORD *)a3;
      }
      else
      {
        if (!v241)
          goto LABEL_620;
        v242 = 5;
      }
      (*(void (**)(void))(*v241 + 8 * v242))();
LABEL_620:
      *(_QWORD *)(a3 + 24) = v139;
      v552 = 0;
      *(_WORD *)(a3 + 32) = v553;
      nitro::nitro_variable::operator=(a3 + 40, &v554);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v554);
      v243 = v552;
      if (v552 == &v549)
      {
        v244 = 4;
        v243 = &v549;
      }
      else
      {
        if (!v552)
          goto LABEL_625;
        v244 = 5;
      }
      (*((void (**)(void))v243->__locale_ + v244))();
LABEL_625:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v402);
      if (v400 == v399)
      {
        v245 = 4;
      }
      else
      {
        if (!v400)
          goto LABEL_630;
        v245 = 5;
        v40 = v400;
      }
      (*(void (**)(_QWORD *))(*v40 + 8 * v245))(v40);
LABEL_630:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v396);
      v226 = v394;
      if (v394 != v393)
        goto LABEL_939;
      v227 = 4;
      v226 = v393;
      goto LABEL_941;
    case 13:
      v17 = (uint64_t)v565;
      if (!v565)
        goto LABEL_45;
      if (v565 == v564)
      {
        v382 = v381;
        (*(void (**)(_QWORD *, _BYTE *))(v564[0] + 24))(v564, v381);
      }
      else
      {
        v17 = (*(uint64_t (**)(void))(*v565 + 16))();
LABEL_45:
        v382 = (_BYTE *)v17;
      }
      v383 = v566;
      v384[0] = v567;
      v384[1] = v568;
      if (v568)
      {
        v91 = (unint64_t *)(v568 + 8);
        do
          v92 = __ldxr(v91);
        while (__stxr(v92 + 1, v91));
      }
      v385 = v569;
      v386 = v570;
      if (v570 - 2 < 4 || v570 == 9)
      {
        v94 = v385;
        do
          v95 = __ldaxr(v94);
        while (__stlxr(v95 + 1, v94));
      }
      v96 = v387;
      v97 = (uint64_t)v558;
      if (!v558)
        goto LABEL_222;
      if (v558 == v557)
      {
        v388 = v387;
        (*(void (**)(_QWORD *, _BYTE *))(v557[0] + 24))(v557, v387);
      }
      else
      {
        v97 = (*(uint64_t (**)(void))(*v558 + 16))();
LABEL_222:
        v388 = (_BYTE *)v97;
      }
      v389 = v559;
      v390[0] = v560;
      v390[1] = v561;
      if (v561)
      {
        v189 = (unint64_t *)(v561 + 8);
        do
          v190 = __ldxr(v189);
        while (__stxr(v190 + 1, v189));
      }
      v391 = v562;
      v392 = v563;
      if (v563 - 2 < 4 || v563 == 9)
      {
        v192 = v391;
        do
          v193 = __ldaxr(v192);
        while (__stlxr(v193 + 1, v192));
      }
      nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13::$_13((uint64_t)&v571, (uint64_t)v381);
      v552 = 0;
      v194 = operator new(0x98uLL);
      v195 = v194;
      *v194 = &off_1E2DAF928;
      if (v573)
      {
        if (v573 == &v571)
        {
          v194[4] = v194 + 1;
          (*(void (**)(uint64_t *))(v571 + 24))(&v571);
        }
        else
        {
          v194[4] = v573;
          v573 = 0;
        }
      }
      else
      {
        v194[4] = 0;
      }
      *((_WORD *)v195 + 20) = v574;
      *((_OWORD *)v195 + 3) = v575;
      v575 = 0uLL;
      v195[8] = v576;
      *((_BYTE *)v195 + 72) = v577;
      v577 = 0;
      if (*((_QWORD *)&v579 + 1))
      {
        if (*((__int128 **)&v579 + 1) == &v578)
        {
          v195[13] = v195 + 10;
          (*(void (**)(void))(v578 + 24))();
        }
        else
        {
          v195[13] = *((_QWORD *)&v579 + 1);
          *((_QWORD *)&v579 + 1) = 0;
        }
      }
      else
      {
        v195[13] = 0;
      }
      *((_WORD *)v195 + 56) = v580;
      *(_OWORD *)(v195 + 15) = v581;
      v581 = 0uLL;
      v195[17] = v582;
      *((_BYTE *)v195 + 144) = v583;
      v583 = 0;
      v552 = (std::locale *)v195;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v581);
      v309 = (__int128 *)*((_QWORD *)&v579 + 1);
      if (*((__int128 **)&v579 + 1) == &v578)
      {
        v310 = 4;
        v309 = &v578;
      }
      else
      {
        if (!*((_QWORD *)&v579 + 1))
          goto LABEL_834;
        v310 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v309 + 8 * v310))();
LABEL_834:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v575);
      v311 = v573;
      if (v573 == &v571)
      {
        v312 = 4;
        v311 = &v571;
      }
      else
      {
        if (!v573)
          goto LABEL_839;
        v312 = 5;
      }
      (*(void (**)(void))(*v311 + 8 * v312))();
LABEL_839:
      v553 = 0;
      v555 = 0;
      v554 = 0uLL;
      v556 = 0;
      v313 = *(_QWORD **)(a3 + 24);
      *(_QWORD *)(a3 + 24) = 0;
      if (v313 == (_QWORD *)a3)
      {
        v314 = 4;
        v313 = (_QWORD *)a3;
      }
      else
      {
        if (!v313)
          goto LABEL_844;
        v314 = 5;
      }
      (*(void (**)(void))(*v313 + 8 * v314))();
LABEL_844:
      *(_QWORD *)(a3 + 24) = v195;
      v552 = 0;
      *(_WORD *)(a3 + 32) = v553;
      nitro::nitro_variable::operator=(a3 + 40, &v554);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v554);
      v315 = v552;
      if (v552 == &v549)
      {
        v316 = 4;
        v315 = &v549;
      }
      else
      {
        if (!v552)
          goto LABEL_849;
        v316 = 5;
      }
      (*((void (**)(void))v315->__locale_ + v316))();
LABEL_849:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v390);
      if (v388 == v387)
      {
        v317 = 4;
      }
      else
      {
        if (!v388)
          goto LABEL_854;
        v317 = 5;
        v96 = v388;
      }
      (*(void (**)(_QWORD *))(*v96 + 8 * v317))(v96);
LABEL_854:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v384);
      v226 = v382;
      if (v382 == v381)
      {
        v227 = 4;
        v226 = v381;
      }
      else
      {
LABEL_939:
        if (!v226)
          goto LABEL_942;
        v227 = 5;
      }
LABEL_941:
      (*(void (**)(void))(*(_QWORD *)v226 + 8 * v227))();
LABEL_942:
      if ((_BYTE)v566)
      {
        if ((_BYTE)v559)
          *(_BYTE *)(a3 + 32) = 1;
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v560);
      v345 = v558;
      if (v558 == v557)
      {
        v346 = 4;
        v345 = v557;
      }
      else
      {
        if (!v558)
          goto LABEL_950;
        v346 = 5;
      }
      (*(void (**)(void))(*v345 + 8 * v346))();
LABEL_950:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v567);
      result = v565;
      if (v565 == v564)
      {
        v348 = 4;
        result = v564;
      }
      else
      {
        if (!v565)
          return result;
        v348 = 5;
      }
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v348))();
    default:
      if (*((int *)global_logger() + 169) <= 6)
      {
        v349 = (file_logger *)global_logger();
        started = (pthread_key_t *)file_logger::start_stream(v349, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "exec", 215, 1);
        LODWORD(v571) = v6;
        v351 = pthread_getspecific(started[74]);
        if (v351 && *((_BYTE *)v351 + 280))
          nitro::ir::operator<<(v351 + 2, (int *)&v571);
        v352 = pthread_getspecific(started[74]);
        if (v352 && *((_BYTE *)v352 + 280))
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v352 + 2, (uint64_t)" binary operator not implemented\n", 33);
          file_logger::stream_flush((file_logger *)started);
        }
      }
      v353 = MEMORY[0x1E0DE4FE0];
      v354 = MEMORY[0x1E0DE4FE0] + 64;
      v355 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v356 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      *(_QWORD *)&v581 = MEMORY[0x1E0DE4FE0] + 64;
      v571 = v355;
      *(uint64_t *)((char *)&v571 + *(_QWORD *)(v355 - 24)) = v356;
      v357 = (std::ios_base *)((char *)&v571 + *(_QWORD *)(v571 - 24));
      std::ios_base::init(v357, &v572);
      v357[1].__vftable = 0;
      v357[1].__fmtflags_ = -1;
      v571 = v353 + 24;
      *(_QWORD *)&v581 = v354;
      std::streambuf::basic_streambuf();
      v572 = MEMORY[0x1E0DE4FB8] + 16;
      v578 = 0u;
      v579 = 0u;
      v580 = 16;
      v358 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v571, (uint64_t)"Check failed (", 14);
      v359 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v358, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", 112);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v359, (uint64_t)":", 1);
      v360 = (_QWORD *)std::ostream::operator<<();
      v361 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v360, (uint64_t)"): ", 3);
      v362 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v361, (uint64_t)"false", 5);
      std::ios_base::getloc((const std::ios_base *)((char *)v362 + *(_QWORD *)(*v362 - 24)));
      v363 = std::locale::use_facet(&v549, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v363->__vftable[2].~facet_0)(v363, 10);
      std::locale::~locale(&v549);
      std::ostream::put();
      std::ostream::flush();
      if (*((int *)global_logger() + 169) <= 6)
      {
        v364 = (file_logger *)global_logger();
        v365 = file_logger::start_stream(v364, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 216, 1);
        std::stringbuf::str();
        v366 = (char *)pthread_getspecific(*((_QWORD *)v365 + 74));
        if (v366 && v366[280])
        {
          v367 = v366 + 16;
          if ((v380 & 0x80u) == 0)
            v368 = __p;
          else
            v368 = (void **)__p[0];
          if ((v380 & 0x80u) == 0)
            v369 = v380;
          else
            v369 = (uint64_t)__p[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v367, (uint64_t)v368, v369);
        }
        if ((char)v380 < 0)
          operator delete(__p[0]);
      }
      __print_back_trace();
      if (*((int *)global_logger() + 169) <= 6)
      {
        v370 = (file_logger *)global_logger();
        v371 = file_logger::start_stream(v370, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 216, 1);
        std::stringbuf::str();
        v372 = (char *)pthread_getspecific(*((_QWORD *)v371 + 74));
        if (v372 && v372[280])
        {
          v373 = v372 + 16;
          if ((v551 & 0x80u) == 0)
            locale = &v549;
          else
            locale = v549.__locale_;
          if ((v551 & 0x80u) == 0)
            v375 = v551;
          else
            v375 = v550;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v373, (uint64_t)locale, v375);
        }
        v376 = pthread_getspecific(*((_QWORD *)v371 + 74));
        if (v376)
        {
          if (*((_BYTE *)v376 + 280))
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v376 + 2, (uint64_t)"\n", 1);
            file_logger::stream_flush(v371);
            if (*((_DWORD *)v371 + 150) == 7)
            {
              __print_back_trace();
              exception = __cxa_allocate_exception(8uLL);
              *exception = "LOG_FATAL encountered";
              __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
            }
          }
        }
        if ((char)v551 < 0)
          operator delete(v549.__locale_);
      }
      v377 = __cxa_allocate_exception(0x18uLL);
      std::stringbuf::str();
  }
}

void sub_1912155AC(_Unwind_Exception *a1)
{
  nitro::impl::delayed_variable *v1;

  if (SLOBYTE(STACK[0x80F]) < 0)
    operator delete((void *)STACK[0x7F8]);
  std::ostringstream::~ostringstream((uint64_t)&STACK[0x8D0]);
  nitro::impl::delayed_variable::~delayed_variable(v1);
  nitro::impl::delayed_variable::~delayed_variable((nitro::impl::delayed_variable *)&STACK[0x840]);
  nitro::impl::delayed_variable::~delayed_variable((nitro::impl::delayed_variable *)&STACK[0x888]);
  _Unwind_Resume(a1);
}

_QWORD *nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::~$_0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 9;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 14));
  v3 = (_QWORD *)a1[12];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 5));
  v5 = (_QWORD *)a1[3];
  if (v5 == a1)
  {
    v6 = 4;
    v5 = a1;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

_QWORD *nitro::impl::nitro_lazy_eval::exec@<X0>(nitro::impl::nitro_lazy_eval *this@<X0>, const nitro::ir::UNARYOPERATOR *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  std::locale *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  std::locale *v46;
  uint64_t v47;
  _QWORD *result;
  uint64_t v49;
  file_logger *v50;
  pthread_key_t *started;
  char *v52;
  _QWORD *v53;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::ios_base *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  const std::locale::facet *v67;
  file_logger *v68;
  file_logger *v69;
  char *v70;
  _QWORD *v71;
  void **v72;
  uint64_t v73;
  file_logger *v74;
  file_logger *v75;
  char *v76;
  _QWORD *v77;
  void *locale;
  uint64_t v79;
  _QWORD *v80;
  void *v81;
  _QWORD *exception;
  std::string __p;
  std::string v84;
  void *v85[2];
  unsigned __int8 v86;
  _QWORD v87[3];
  _QWORD *v88;
  __int16 v89;
  __int128 v90;
  unint64_t *v91;
  unsigned __int8 v92;
  _QWORD v93[3];
  _QWORD *v94;
  __int16 v95;
  __int128 v96;
  unint64_t *v97;
  unsigned __int8 v98;
  std::locale v99;
  uint64_t v100;
  unsigned __int8 v101;
  std::locale *v102;
  __int16 v103;
  __int128 v104;
  uint64_t v105;
  char v106;
  _QWORD v107[3];
  _QWORD *v108;
  __int16 v109;
  __int128 v110;
  unint64_t *v111;
  unsigned __int8 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  __int16 v116;
  __int128 v117;
  unint64_t *v118;
  unsigned __int8 v119;
  __int128 v120;
  __int128 v121;
  int v122;
  uint64_t v123;
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v107, (char *)a2 + 32, this);
  if (*((char *)a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&v84, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  else
    v84 = *(std::string *)((char *)a2 + 8);
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_WORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_BYTE *)(a3 + 64) = 0;
  if ((SHIBYTE(v84.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) != 1)
      goto LABEL_125;
    v5 = v84.__r_.__value_.__s.__data_[0];
    if (v84.__r_.__value_.__s.__data_[0] == 45)
      goto LABEL_7;
    goto LABEL_13;
  }
  if (v84.__r_.__value_.__l.__size_ != 1)
    goto LABEL_125;
  v5 = *v84.__r_.__value_.__l.__data_;
  if (v5 != 45)
  {
LABEL_13:
    if (v5 == 33)
    {
      v7 = (uint64_t)v108;
      if (v108)
      {
        if (v108 == v107)
        {
          v88 = v87;
          (*(void (**)(_QWORD *, _QWORD *))(v107[0] + 24))(v107, v87);
LABEL_48:
          v89 = v109;
          v90 = v110;
          if (*((_QWORD *)&v110 + 1))
          {
            v21 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
            do
              v22 = __ldxr(v21);
            while (__stxr(v22 + 1, v21));
          }
          v91 = v111;
          v92 = v112;
          if (v112 - 2 < 4 || v112 == 9)
          {
            v24 = v91;
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 + 1, v24));
          }
          v26 = (uint64_t)v88;
          if (v88)
          {
            if (v88 == v87)
            {
              v115 = &v113;
              (*(void (**)(_QWORD *, uint64_t *))(v87[0] + 24))(v87, &v113);
LABEL_63:
              v116 = v89;
              v117 = v90;
              if (*((_QWORD *)&v90 + 1))
              {
                v27 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
                do
                  v28 = __ldxr(v27);
                while (__stxr(v28 + 1, v27));
              }
              v29 = v91;
              v118 = v91;
              v119 = v92;
              if (v92 - 2 < 4 || v92 == 9)
              {
                do
                  v31 = __ldaxr(v29);
                while (__stlxr(v31 + 1, v29));
              }
              v102 = 0;
              v32 = operator new(0x50uLL);
              v33 = v32;
              *v32 = &off_1E2DAF458;
              if (v115)
              {
                if (v115 == &v113)
                {
                  v32[4] = v32 + 1;
                  (*(void (**)(uint64_t *))(v113 + 24))(&v113);
                }
                else
                {
                  v32[4] = v115;
                  v115 = 0;
                }
              }
              else
              {
                v32[4] = 0;
              }
              *((_WORD *)v33 + 20) = v116;
              *((_OWORD *)v33 + 3) = v117;
              v117 = 0uLL;
              v33[8] = v118;
              *((_BYTE *)v33 + 72) = v119;
              v119 = 0;
              nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v117);
              v42 = v115;
              if (v115 == &v113)
              {
                v43 = 4;
                v42 = &v113;
              }
              else
              {
                if (!v115)
                  goto LABEL_100;
                v43 = 5;
              }
              (*(void (**)(void))(*v42 + 8 * v43))();
LABEL_100:
              v103 = 0;
              v105 = 0;
              v104 = 0uLL;
              v106 = 0;
              v44 = *(_QWORD **)(a3 + 24);
              *(_QWORD *)(a3 + 24) = 0;
              if (v44 == (_QWORD *)a3)
              {
                v45 = 4;
                v44 = (_QWORD *)a3;
              }
              else
              {
                if (!v44)
                  goto LABEL_105;
                v45 = 5;
              }
              (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_105:
              *(_QWORD *)(a3 + 24) = v33;
              v102 = 0;
              *(_WORD *)(a3 + 32) = v103;
              nitro::nitro_variable::operator=(a3 + 40, &v104);
              nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v104);
              v46 = v102;
              if (v102 == &v99)
              {
                v47 = 4;
                v46 = &v99;
              }
              else
              {
                if (!v102)
                  goto LABEL_110;
                v47 = 5;
              }
              (*((void (**)(void))v46->__locale_ + v47))();
LABEL_110:
              nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v90);
              v40 = v88;
              if (v88 == v87)
              {
                v41 = 4;
                v40 = v87;
                goto LABEL_114;
              }
              goto LABEL_111;
            }
            v26 = (*(uint64_t (**)(void))(*v88 + 16))();
          }
          v115 = (uint64_t *)v26;
          goto LABEL_63;
        }
        v7 = (*(uint64_t (**)(void))(*v108 + 16))();
      }
      v88 = (_QWORD *)v7;
      goto LABEL_48;
    }
LABEL_125:
    if (*((int *)global_logger() + 169) <= 6)
    {
      v50 = (file_logger *)global_logger();
      started = (pthread_key_t *)file_logger::start_stream(v50, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "exec", 240, 1);
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v84.__r_.__value_.__l.__data_, v84.__r_.__value_.__l.__size_);
      else
        __p = v84;
      v52 = (char *)pthread_getspecific(started[74]);
      if (v52 && v52[280])
      {
        v53 = v52 + 16;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)p_p, size);
      }
      v56 = pthread_getspecific(started[74]);
      if (v56 && *((_BYTE *)v56 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56 + 2, (uint64_t)" unary operator not implemented\n", 32);
        file_logger::stream_flush((file_logger *)started);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    v57 = MEMORY[0x1E0DE4FE0];
    v58 = MEMORY[0x1E0DE4FE0] + 64;
    v59 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v60 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v123 = MEMORY[0x1E0DE4FE0] + 64;
    v113 = v59;
    *(uint64_t *)((char *)&v113 + *(_QWORD *)(v59 - 24)) = v60;
    v61 = (std::ios_base *)((char *)&v113 + *(_QWORD *)(v113 - 24));
    std::ios_base::init(v61, &v114);
    v61[1].__vftable = 0;
    v61[1].__fmtflags_ = -1;
    v113 = v57 + 24;
    v123 = v58;
    std::streambuf::basic_streambuf();
    v114 = MEMORY[0x1E0DE4FB8] + 16;
    v120 = 0u;
    v121 = 0u;
    v122 = 16;
    v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v113, (uint64_t)"Check failed (", 14);
    v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", 112);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)":", 1);
    v64 = (_QWORD *)std::ostream::operator<<();
    v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"): ", 3);
    v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"false", 5);
    std::ios_base::getloc((const std::ios_base *)((char *)v66 + *(_QWORD *)(*v66 - 24)));
    v67 = std::locale::use_facet(&v99, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v67->__vftable[2].~facet_0)(v67, 10);
    std::locale::~locale(&v99);
    std::ostream::put();
    std::ostream::flush();
    if (*((int *)global_logger() + 169) <= 6)
    {
      v68 = (file_logger *)global_logger();
      v69 = file_logger::start_stream(v68, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 241, 1);
      std::stringbuf::str();
      v70 = (char *)pthread_getspecific(*((_QWORD *)v69 + 74));
      if (v70 && v70[280])
      {
        v71 = v70 + 16;
        if ((v86 & 0x80u) == 0)
          v72 = v85;
        else
          v72 = (void **)v85[0];
        if ((v86 & 0x80u) == 0)
          v73 = v86;
        else
          v73 = (uint64_t)v85[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)v72, v73);
      }
      if ((char)v86 < 0)
        operator delete(v85[0]);
    }
    __print_back_trace();
    if (*((int *)global_logger() + 169) <= 6)
    {
      v74 = (file_logger *)global_logger();
      v75 = file_logger::start_stream(v74, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 241, 1);
      std::stringbuf::str();
      v76 = (char *)pthread_getspecific(*((_QWORD *)v75 + 74));
      if (v76 && v76[280])
      {
        v77 = v76 + 16;
        if ((v101 & 0x80u) == 0)
          locale = &v99;
        else
          locale = v99.__locale_;
        if ((v101 & 0x80u) == 0)
          v79 = v101;
        else
          v79 = v100;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)locale, v79);
      }
      v80 = pthread_getspecific(*((_QWORD *)v75 + 74));
      if (v80)
      {
        if (*((_BYTE *)v80 + 280))
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80 + 2, (uint64_t)"\n", 1);
          file_logger::stream_flush(v75);
          if (*((_DWORD *)v75 + 150) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
          }
        }
      }
      if ((char)v101 < 0)
        operator delete(v99.__locale_);
    }
    v81 = __cxa_allocate_exception(0x18uLL);
    std::stringbuf::str();
  }
LABEL_7:
  v6 = (uint64_t)v108;
  if (!v108)
  {
LABEL_10:
    v94 = (_QWORD *)v6;
    goto LABEL_19;
  }
  if (v108 != v107)
  {
    v6 = (*(uint64_t (**)(void))(*v108 + 16))();
    goto LABEL_10;
  }
  v94 = v93;
  (*(void (**)(_QWORD *, _QWORD *))(v107[0] + 24))(v107, v93);
LABEL_19:
  v95 = v109;
  v96 = v110;
  if (*((_QWORD *)&v110 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v97 = v111;
  v98 = v112;
  if (v112 - 2 < 4 || v112 == 9)
  {
    v11 = v97;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  v13 = (uint64_t)v94;
  if (!v94)
    goto LABEL_32;
  if (v94 != v93)
  {
    v13 = (*(uint64_t (**)(void))(*v94 + 16))();
LABEL_32:
    v115 = (uint64_t *)v13;
    goto LABEL_34;
  }
  v115 = &v113;
  (*(void (**)(_QWORD *, uint64_t *))(v93[0] + 24))(v93, &v113);
LABEL_34:
  v116 = v95;
  v117 = v96;
  if (*((_QWORD *)&v96 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = v97;
  v118 = v97;
  v119 = v98;
  if (v98 - 2 < 4 || v98 == 9)
  {
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 + 1, v16));
  }
  v102 = 0;
  v19 = operator new(0x50uLL);
  v20 = v19;
  *v19 = &off_1E2DAF400;
  if (v115)
  {
    if (v115 == &v113)
    {
      v19[4] = v19 + 1;
      (*(void (**)(uint64_t *))(v113 + 24))(&v113);
    }
    else
    {
      v19[4] = v115;
      v115 = 0;
    }
  }
  else
  {
    v19[4] = 0;
  }
  *((_WORD *)v20 + 20) = v116;
  *((_OWORD *)v20 + 3) = v117;
  v117 = 0uLL;
  v20[8] = v118;
  *((_BYTE *)v20 + 72) = v119;
  v119 = 0;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v117);
  v34 = v115;
  if (v115 == &v113)
  {
    v35 = 4;
    v34 = &v113;
  }
  else
  {
    if (!v115)
      goto LABEL_82;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_82:
  v103 = 0;
  v105 = 0;
  v104 = 0uLL;
  v106 = 0;
  v36 = *(_QWORD **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  if (v36 == (_QWORD *)a3)
  {
    v37 = 4;
    v36 = (_QWORD *)a3;
  }
  else
  {
    if (!v36)
      goto LABEL_87;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_87:
  *(_QWORD *)(a3 + 24) = v20;
  v102 = 0;
  *(_WORD *)(a3 + 32) = v103;
  nitro::nitro_variable::operator=(a3 + 40, &v104);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v104);
  v38 = v102;
  if (v102 == &v99)
  {
    v39 = 4;
    v38 = &v99;
  }
  else
  {
    if (!v102)
      goto LABEL_92;
    v39 = 5;
  }
  (*((void (**)(void))v38->__locale_ + v39))();
LABEL_92:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v96);
  v40 = v94;
  if (v94 == v93)
  {
    v41 = 4;
    v40 = v93;
    goto LABEL_114;
  }
LABEL_111:
  if (!v40)
    goto LABEL_115;
  v41 = 5;
LABEL_114:
  (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_115:
  if ((_BYTE)v109)
    *(_BYTE *)(a3 + 32) = 1;
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v110);
  result = v108;
  if (v108 == v107)
  {
    v49 = 4;
    result = v107;
  }
  else
  {
    if (!v108)
      return result;
    v49 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v49))();
}

void sub_191216B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  nitro::impl::delayed_variable *v61;

  if (a45 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a61);
  nitro::impl::delayed_variable::~delayed_variable(v61);
  if (a18 < 0)
    operator delete(a13);
  nitro::impl::delayed_variable::~delayed_variable((nitro::impl::delayed_variable *)&a52);
  _Unwind_Resume(a1);
}

void nitro::impl::nitro_lazy_eval::exec(nitro::impl::nitro_lazy_eval *this@<X0>, const nitro::ir::CALL *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  std::string *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t symbol_id;
  char *v19;
  char *v20;
  void *v21;
  nitro::nitro_variable *v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  __int128 *v36;
  __int128 *v37;
  uint64_t v38;
  std::string::size_type v39;
  void *v40;
  nitro::nitro_variable *v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  void *v47;
  nitro::nitro_variable *v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  void *v55;
  nitro::nitro_variable *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  void *__p;
  char *v62;
  __int128 v63;
  void *v64;
  char *v65;
  void *v66;
  char *v67;
  _BYTE v68[24];
  _BYTE *v69;
  __int16 v70;
  _QWORD v71[2];
  unint64_t *v72;
  unsigned __int8 v73;
  uint64_t v74;
  _QWORD v75[3];
  _QWORD *v76;
  __int16 v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  unsigned __int8 v81;
  std::string v82;
  __int128 v83;
  __int128 v84;
  __int16 v85;
  __int128 v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  std::vector<nitro::impl::delayed_variable>::vector(&v64, (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3);
  v60 = a3;
  if (v65 != v64)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 1;
    while (1)
    {
      nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(&v82, *((_QWORD *)a2 + 3) + v7, this);
      v12 = (char *)v64;
      v13 = (char *)v64 + v6;
      v15 = (char **)((char *)v64 + v6 + 24);
      v14 = *v15;
      *v15 = 0;
      if (v13 == v14)
      {
        v14 = v13;
        v16 = 4;
      }
      else
      {
        if (!v14)
          goto LABEL_11;
        v16 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v14 + 8 * v16))();
LABEL_11:
      if (!(_QWORD)v83)
        goto LABEL_14;
      if ((std::string *)v83 != &v82)
      {
        *v15 = (char *)v83;
        v15 = (char **)&v83;
LABEL_14:
        *v15 = 0;
        goto LABEL_16;
      }
      *((_QWORD *)v13 + 3) = v13;
      (*(void (**)(_QWORD, char *))(*(_QWORD *)v83 + 24))(v83, v13);
LABEL_16:
      *(_WORD *)&v12[v6 + 32] = WORD4(v83);
      nitro::nitro_variable::operator=((uint64_t)&v12[v6 + 40], &v84);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v84);
      v10 = (std::string *)v83;
      if ((std::string *)v83 == &v82)
      {
        v10 = &v82;
        v11 = 4;
      }
      else
      {
        if (!(_QWORD)v83)
          goto LABEL_5;
        v11 = 5;
      }
      (*(void (**)(void))(v10->__r_.__value_.__r.__words[0] + 8 * v11))();
LABEL_5:
      v9 &= *((_BYTE *)v64 + v6 + 32) != 0;
      ++v8;
      v7 += 8;
      v6 += 72;
      if (v8 >= 0x8E38E38E38E38E39 * ((v65 - (_BYTE *)v64) >> 3))
        goto LABEL_20;
    }
  }
  v9 = 1;
LABEL_20:
  v17 = *((_QWORD *)a2 + 1);
  if (v17 != -1)
  {
    *((_BYTE *)&v82.__r_.__value_.__s + 23) = 3;
    LODWORD(v82.__r_.__value_.__l.__data_) = 4802118;
    symbol_id = nitro::get_symbol_id(&v82);
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v82.__r_.__value_.__l.__data_);
    std::vector<nitro::impl::delayed_variable>::vector(&__p, (uint64_t *)&v64);
    *(_QWORD *)&v63 = v17;
    *((_QWORD *)&v63 + 1) = symbol_id;
    std::vector<nitro::impl::delayed_variable>::vector(&v82, (uint64_t *)&__p);
    v83 = v63;
    *(_QWORD *)(v60 + 24) = 0;
    v19 = (char *)operator new(0x30uLL);
    *(_QWORD *)v19 = &off_1E2DAFA30;
    *(std::string *)(v19 + 8) = v82;
    *((_OWORD *)v19 + 2) = v63;
    *(_QWORD *)(v60 + 24) = v19;
    *(_BYTE *)(v60 + 32) = v9;
    *(_BYTE *)(v60 + 33) = 0;
    *(_QWORD *)(v60 + 48) = 0;
    *(_QWORD *)(v60 + 56) = 0;
    *(_QWORD *)(v60 + 40) = 0;
    *(_BYTE *)(v60 + 64) = 0;
    v20 = (char *)__p;
    if (!__p)
      goto LABEL_91;
    v21 = __p;
    if (v62 == __p)
      goto LABEL_37;
    v22 = (nitro::nitro_variable *)(v62 - 32);
    while (1)
    {
      v25 = (char *)v22 - 40;
      nitro::nitro_variable::~nitro_variable(v22);
      v23 = (_QWORD *)*((_QWORD *)v22 - 2);
      if ((_QWORD *)((char *)v22 - 40) == v23)
      {
        v23 = (_QWORD *)((char *)v22 - 40);
        v24 = 4;
      }
      else
      {
        if (!v23)
          goto LABEL_28;
        v24 = 5;
      }
      (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_28:
      v22 = (nitro::nitro_variable *)((char *)v22 - 72);
      if (v25 == v20)
      {
        v21 = __p;
LABEL_37:
        v62 = v20;
        operator delete(v21);
        goto LABEL_91;
      }
    }
  }
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v75, *((_QWORD *)a2 + 2) + 8, this);
  v26 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 16);
  std::vector<nitro::impl::delayed_variable>::vector(&v66, (uint64_t *)&v64);
  v27 = v68;
  v28 = (uint64_t)v76;
  if (!v76)
    goto LABEL_35;
  if (v76 != v75)
  {
    v28 = (*(uint64_t (**)(void))(*v76 + 16))();
LABEL_35:
    v69 = (_BYTE *)v28;
    goto LABEL_39;
  }
  v69 = v68;
  (*(void (**)(_QWORD *, _BYTE *))(v75[0] + 24))(v75, v68);
LABEL_39:
  v70 = v77;
  v71[0] = v78;
  v71[1] = v79;
  if (v79)
  {
    v29 = (unint64_t *)(v79 + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v72 = v80;
  v73 = v81;
  if (v81 - 2 < 4 || v81 == 9)
  {
    v32 = v72;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 + 1, v32));
  }
  v74 = v26;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1::$_1((uint64_t)&v82, (uint64_t)&v66);
  *(_QWORD *)(v60 + 24) = 0;
  v34 = (char *)operator new(0x70uLL);
  v35 = v34;
  *(_QWORD *)v34 = &off_1E2DAFA88;
  *(_OWORD *)(v34 + 8) = *(_OWORD *)&v82.__r_.__value_.__l.__data_;
  v36 = (__int128 *)*((_QWORD *)&v84 + 1);
  *((_QWORD *)v34 + 3) = *((_QWORD *)&v82.__r_.__value_.__l + 2);
  memset(&v82, 0, sizeof(v82));
  if (v36)
  {
    if (v36 == &v83)
    {
      *((_QWORD *)v34 + 7) = v34 + 32;
      (*(void (**)(void))(v83 + 24))();
    }
    else
    {
      *((_QWORD *)v34 + 7) = v36;
      *((_QWORD *)&v84 + 1) = 0;
    }
  }
  else
  {
    *((_QWORD *)v34 + 7) = 0;
  }
  *((_WORD *)v35 + 32) = v85;
  *(_OWORD *)(v35 + 72) = v86;
  v86 = 0uLL;
  *((_QWORD *)v35 + 11) = v87;
  v35[96] = v88;
  v88 = 0;
  *((_QWORD *)v35 + 13) = v89;
  *(_QWORD *)(v60 + 24) = v35;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v86);
  v37 = (__int128 *)*((_QWORD *)&v84 + 1);
  if (*((__int128 **)&v84 + 1) == &v83)
  {
    v38 = 4;
    v37 = &v83;
    goto LABEL_58;
  }
  if (*((_QWORD *)&v84 + 1))
  {
    v38 = 5;
LABEL_58:
    (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
  }
  v39 = v82.__r_.__value_.__r.__words[0];
  if (!v82.__r_.__value_.__r.__words[0])
    goto LABEL_70;
  v40 = (void *)v82.__r_.__value_.__r.__words[0];
  if (v82.__r_.__value_.__l.__size_ == v82.__r_.__value_.__r.__words[0])
    goto LABEL_69;
  v41 = (nitro::nitro_variable *)(v82.__r_.__value_.__l.__size_ - 32);
  do
  {
    v44 = (char *)v41 - 40;
    nitro::nitro_variable::~nitro_variable(v41);
    v42 = (_QWORD *)*((_QWORD *)v41 - 2);
    if ((_QWORD *)((char *)v41 - 40) == v42)
    {
      v42 = (_QWORD *)((char *)v41 - 40);
      v43 = 4;
LABEL_63:
      (*(void (**)(void))(*v42 + 8 * v43))();
      goto LABEL_64;
    }
    if (v42)
    {
      v43 = 5;
      goto LABEL_63;
    }
LABEL_64:
    v41 = (nitro::nitro_variable *)((char *)v41 - 72);
  }
  while (v44 != (char *)v39);
  v40 = (void *)v82.__r_.__value_.__r.__words[0];
LABEL_69:
  v82.__r_.__value_.__l.__size_ = v39;
  operator delete(v40);
LABEL_70:
  *(_WORD *)(v60 + 32) = 0;
  *(_QWORD *)(v60 + 48) = 0;
  *(_QWORD *)(v60 + 56) = 0;
  *(_QWORD *)(v60 + 40) = 0;
  *(_BYTE *)(v60 + 64) = 0;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v71);
  if (v69 == v68)
  {
    v45 = 4;
LABEL_74:
    (*(void (**)(_QWORD *))(*v27 + 8 * v45))(v27);
  }
  else if (v69)
  {
    v45 = 5;
    v27 = v69;
    goto LABEL_74;
  }
  v46 = (char *)v66;
  if (!v66)
    goto LABEL_86;
  v47 = v66;
  if (v67 == v66)
    goto LABEL_85;
  v48 = (nitro::nitro_variable *)(v67 - 32);
  while (2)
  {
    v51 = (char *)v48 - 40;
    nitro::nitro_variable::~nitro_variable(v48);
    v49 = (_QWORD *)*((_QWORD *)v48 - 2);
    if ((_QWORD *)((char *)v48 - 40) == v49)
    {
      v49 = (_QWORD *)((char *)v48 - 40);
      v50 = 4;
      goto LABEL_79;
    }
    if (v49)
    {
      v50 = 5;
LABEL_79:
      (*(void (**)(void))(*v49 + 8 * v50))();
    }
    v48 = (nitro::nitro_variable *)((char *)v48 - 72);
    if (v51 != v46)
      continue;
    break;
  }
  v47 = v66;
LABEL_85:
  v67 = v46;
  operator delete(v47);
LABEL_86:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v78);
  v52 = v76;
  if (v76 == v75)
  {
    v53 = 4;
    v52 = v75;
  }
  else
  {
    if (!v76)
      goto LABEL_91;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_91:
  v54 = (char *)v64;
  if (!v64)
    return;
  v55 = v64;
  if (v65 == v64)
    goto LABEL_101;
  v56 = (nitro::nitro_variable *)(v65 - 32);
  while (2)
  {
    v59 = (char *)v56 - 40;
    nitro::nitro_variable::~nitro_variable(v56);
    v57 = (_QWORD *)*((_QWORD *)v56 - 2);
    if ((_QWORD *)((char *)v56 - 40) == v57)
    {
      v57 = (_QWORD *)((char *)v56 - 40);
      v58 = 4;
      goto LABEL_95;
    }
    if (v57)
    {
      v58 = 5;
LABEL_95:
      (*(void (**)(void))(*v57 + 8 * v58))();
    }
    v56 = (nitro::nitro_variable *)((char *)v56 - 72);
    if (v59 != v54)
      continue;
    break;
  }
  v55 = v64;
LABEL_101:
  v65 = v54;
  operator delete(v55);
}

void sub_19121736C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

_QWORD *std::vector<nitro::impl::delayed_variable>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x38E38E38E38E38FLL)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v4 = (char *)operator new(72 * a2);
    *a1 = v4;
    a1[2] = &v4[72 * a2];
    v5 = 72 * ((72 * a2 - 72) / 0x48) + 72;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_191217534(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    std::vector<nitro::impl::delayed_variable>::vector((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1::~$_1(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  nitro::nitro_variable *v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;

  v2 = a1 + 3;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 8));
  v3 = (_QWORD *)a1[6];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = (char *)*a1;
  if (!*a1)
    return a1;
  v6 = (char *)a1[1];
  v7 = (char *)*a1;
  if (v6 == v5)
    goto LABEL_16;
  v8 = (nitro::nitro_variable *)(v6 - 32);
  do
  {
    v11 = (char *)v8 - 40;
    nitro::nitro_variable::~nitro_variable(v8);
    v9 = (_QWORD *)*((_QWORD *)v8 - 2);
    if ((_QWORD *)((char *)v8 - 40) == v9)
    {
      v9 = (_QWORD *)((char *)v8 - 40);
      v10 = 4;
LABEL_10:
      (*(void (**)(void))(*v9 + 8 * v10))();
      goto LABEL_11;
    }
    if (v9)
    {
      v10 = 5;
      goto LABEL_10;
    }
LABEL_11:
    v8 = (nitro::nitro_variable *)((char *)v8 - 72);
  }
  while (v11 != v5);
  v7 = (char *)*a1;
LABEL_16:
  a1[1] = v5;
  operator delete(v7);
  return a1;
}

void nitro::impl::nitro_lazy_eval::exec(nitro::impl::nitro_lazy_eval *this@<X0>, const nitro::ir::MAKEOBJECT *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __int128 *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  std::string *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void *v17;
  nitro::nitro_variable *v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void *v23;
  nitro::nitro_variable *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  void *v29;
  char *v30;
  std::string __p;
  std::string v32;
  void *v33;
  char *v34;
  __int128 v35;
  uint64_t v36;
  std::string v37[2];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  std::vector<nitro::impl::delayed_variable>::vector(&v33, (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3);
  if (v34 != v33)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(&v35, *((_QWORD *)a2 + 4) + v6, this);
      v10 = (char *)v33;
      v11 = (char *)v33 + v5;
      v13 = (std::string *)((char *)v33 + v5 + 24);
      v12 = (char *)v13->__r_.__value_.__r.__words[0];
      v13->__r_.__value_.__r.__words[0] = 0;
      if (v11 == v12)
      {
        v12 = v11;
        v14 = 4;
      }
      else
      {
        if (!v12)
          goto LABEL_11;
        v14 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v12 + 8 * v14))();
LABEL_11:
      if (!v37[0].__r_.__value_.__r.__words[0])
        goto LABEL_14;
      if ((__int128 *)v37[0].__r_.__value_.__l.__data_ != &v35)
      {
        v13->__r_.__value_.__r.__words[0] = v37[0].__r_.__value_.__r.__words[0];
        v13 = v37;
LABEL_14:
        v13->__r_.__value_.__r.__words[0] = 0;
        goto LABEL_16;
      }
      *((_QWORD *)v11 + 3) = v11;
      (*(void (**)(std::string::size_type, char *))(*(_QWORD *)v37[0].__r_.__value_.__l.__data_ + 24))(v37[0].__r_.__value_.__r.__words[0], v11);
LABEL_16:
      *(_WORD *)&v10[v5 + 32] = v37[0].__r_.__value_.__r.__words[1];
      nitro::nitro_variable::operator=((uint64_t)&v10[v5 + 40], (__int128 *)&v37[0].__r_.__value_.__r.__words[2]);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v37[0].__r_.__value_.__r.__words[2]);
      v8 = (__int128 *)v37[0].__r_.__value_.__r.__words[0];
      if ((__int128 *)v37[0].__r_.__value_.__l.__data_ == &v35)
      {
        v8 = &v35;
        v9 = 4;
      }
      else
      {
        if (!v37[0].__r_.__value_.__r.__words[0])
          goto LABEL_5;
        v9 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
LABEL_5:
      ++v7;
      v6 += 8;
      v5 += 72;
    }
    while (v7 < 0x8E38E38E38E38E39 * ((v34 - (_BYTE *)v33) >> 3));
  }
  if (*((char *)a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&v32, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  else
    v32 = *(std::string *)((char *)a2 + 8);
  std::vector<nitro::impl::delayed_variable>::vector(&v29, (uint64_t *)&v33);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
  else
    __p = v32;
  std::vector<nitro::impl::delayed_variable>::vector(&v35, (uint64_t *)&v29);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(v37, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v37[0] = __p;
  *(_QWORD *)(a3 + 24) = 0;
  v15 = (char *)operator new(0x38uLL);
  *(_QWORD *)v15 = off_1E2DAF3A8;
  *(_OWORD *)(v15 + 8) = v35;
  *((_QWORD *)v15 + 3) = v36;
  *(std::string *)(v15 + 32) = v37[0];
  *(_QWORD *)(a3 + 24) = v15;
  *(_WORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_BYTE *)(a3 + 64) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v16 = (char *)v29;
  if (!v29)
    goto LABEL_41;
  v17 = v29;
  if (v30 == v29)
    goto LABEL_40;
  v18 = (nitro::nitro_variable *)(v30 - 32);
  do
  {
    v21 = (char *)v18 - 40;
    nitro::nitro_variable::~nitro_variable(v18);
    v19 = (_QWORD *)*((_QWORD *)v18 - 2);
    if ((_QWORD *)((char *)v18 - 40) == v19)
    {
      v19 = (_QWORD *)((char *)v18 - 40);
      v20 = 4;
LABEL_34:
      (*(void (**)(void))(*v19 + 8 * v20))();
      goto LABEL_35;
    }
    if (v19)
    {
      v20 = 5;
      goto LABEL_34;
    }
LABEL_35:
    v18 = (nitro::nitro_variable *)((char *)v18 - 72);
  }
  while (v21 != v16);
  v17 = v29;
LABEL_40:
  v30 = v16;
  operator delete(v17);
LABEL_41:
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  v22 = (char *)v33;
  if (!v33)
    return;
  v23 = v33;
  if (v34 == v33)
    goto LABEL_53;
  v24 = (nitro::nitro_variable *)(v34 - 32);
  while (2)
  {
    v27 = (char *)v24 - 40;
    nitro::nitro_variable::~nitro_variable(v24);
    v25 = (_QWORD *)*((_QWORD *)v24 - 2);
    if ((_QWORD *)((char *)v24 - 40) == v25)
    {
      v25 = (_QWORD *)((char *)v24 - 40);
      v26 = 4;
      goto LABEL_47;
    }
    if (v25)
    {
      v26 = 5;
LABEL_47:
      (*(void (**)(void))(*v25 + 8 * v26))();
    }
    v24 = (nitro::nitro_variable *)((char *)v24 - 72);
    if (v27 != v22)
      continue;
    break;
  }
  v23 = v33;
LABEL_53:
  v34 = v22;
  operator delete(v23);
}

void sub_1912179E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,_QWORD *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a28)
  {
    nitro::impl::nitro_lazy_eval::exec(&a28, a28, &__p);
    operator delete(__p);
  }
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0::~$_0(&a11);
  if (a22 < 0)
    operator delete(a17);
  nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0::~$_0(&a24);
  _Unwind_Resume(a1);
}

char **nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0::~$_0(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  nitro::nitro_variable *v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;

  if (*((char *)a1 + 47) < 0)
  {
    operator delete(a1[3]);
    v2 = *a1;
    if (!*a1)
      return a1;
  }
  else
  {
    v2 = *a1;
    if (!*a1)
      return a1;
  }
  v3 = a1[1];
  v4 = v2;
  if (v3 == v2)
    goto LABEL_14;
  v5 = (nitro::nitro_variable *)(v3 - 32);
  do
  {
    v8 = (char *)v5 - 40;
    nitro::nitro_variable::~nitro_variable(v5);
    v6 = (_QWORD *)*((_QWORD *)v5 - 2);
    if ((_QWORD *)((char *)v5 - 40) == v6)
    {
      v6 = (_QWORD *)((char *)v5 - 40);
      v7 = 4;
LABEL_8:
      (*(void (**)(void))(*v6 + 8 * v7))();
      goto LABEL_9;
    }
    if (v6)
    {
      v7 = 5;
      goto LABEL_8;
    }
LABEL_9:
    v5 = (nitro::nitro_variable *)((char *)v5 - 72);
  }
  while (v8 != v2);
  v4 = *a1;
LABEL_14:
  a1[1] = v2;
  operator delete(v4);
  return a1;
}

_QWORD *nitro::impl::nitro_lazy_eval::exec@<X0>(nitro::impl::nitro_lazy_eval *this@<X0>, const nitro::ir::WHILE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *result;
  uint64_t v31;
  _BYTE v32[24];
  _BYTE *v33;
  __int16 v34;
  _QWORD v35[2];
  unint64_t *v36;
  unsigned __int8 v37;
  _BYTE v38[24];
  _BYTE *v39;
  __int16 v40;
  _QWORD v41[2];
  unint64_t *v42;
  unsigned __int8 v43;
  _QWORD v44[3];
  _QWORD *v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unsigned __int8 v50;
  _QWORD v51[3];
  _QWORD *v52;
  __int16 v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unsigned __int8 v57;
  _QWORD v58[3];
  _QWORD *v59;
  __int16 v60;
  __int128 v61;
  uint64_t v62;
  char v63;
  _QWORD v64[3];
  _QWORD *v65;
  __int16 v66;
  __int128 v67;
  uint64_t v68;
  char v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v51, (char *)a2 + 8, this);
  nitro::impl::nitro_lazy_eval::exec_function_body(v44, this, (char *)a2 + 16);
  v6 = (uint64_t)v52;
  if (!v52)
    goto LABEL_4;
  if (v52 != v51)
  {
    v6 = (*(uint64_t (**)(void))(*v52 + 16))();
LABEL_4:
    v33 = (_BYTE *)v6;
    goto LABEL_6;
  }
  v33 = v32;
  (*(void (**)(_QWORD *, _BYTE *))(v51[0] + 24))(v51, v32);
LABEL_6:
  v34 = v53;
  v35[0] = v54;
  v35[1] = v55;
  if (v55)
  {
    v7 = (unint64_t *)(v55 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v36 = v56;
  v37 = v57;
  if (v57 - 2 < 4 || v57 == 9)
  {
    v10 = v36;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  v12 = v38;
  v13 = (uint64_t)v45;
  if (!v45)
    goto LABEL_19;
  if (v45 != v44)
  {
    v13 = (*(uint64_t (**)(void))(*v45 + 16))();
LABEL_19:
    v39 = (_BYTE *)v13;
    goto LABEL_21;
  }
  v39 = v38;
  (*(void (**)(_QWORD *, _BYTE *))(v44[0] + 24))(v44, v38);
LABEL_21:
  v40 = v46;
  v41[0] = v47;
  v41[1] = v48;
  if (v48)
  {
    v14 = (unint64_t *)(v48 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v42 = v49;
  v43 = v50;
  if (v50 - 2 < 4 || v50 == 9)
  {
    v17 = v42;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0::$_0((uint64_t)v58, (uint64_t)v32);
  *(_QWORD *)(a3 + 24) = 0;
  v19 = operator new(0x98uLL);
  v20 = v19;
  *v19 = &off_1E2DAFC98;
  if (v59)
  {
    if (v59 == v58)
    {
      v19[4] = v19 + 1;
      (*(void (**)(_QWORD *))(v58[0] + 24))(v58);
    }
    else
    {
      v19[4] = v59;
      v59 = 0;
    }
  }
  else
  {
    v19[4] = 0;
  }
  *((_WORD *)v20 + 20) = v60;
  *((_OWORD *)v20 + 3) = v61;
  v61 = 0uLL;
  v20[8] = v62;
  *((_BYTE *)v20 + 72) = v63;
  v63 = 0;
  if (v65)
  {
    if (v65 == v64)
    {
      v20[13] = v20 + 10;
      (*(void (**)(void))(v64[0] + 24))();
    }
    else
    {
      v20[13] = v65;
      v65 = 0;
    }
  }
  else
  {
    v20[13] = 0;
  }
  *((_WORD *)v20 + 56) = v66;
  *(_OWORD *)(v20 + 15) = v67;
  v67 = 0uLL;
  v20[17] = v68;
  *((_BYTE *)v20 + 144) = v69;
  v69 = 0;
  *(_QWORD *)(a3 + 24) = v20;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v67);
  v21 = v65;
  if (v65 == v64)
  {
    v22 = 4;
    v21 = v64;
  }
  else
  {
    if (!v65)
      goto LABEL_46;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_46:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v61);
  v23 = v59;
  if (v59 == v58)
  {
    v24 = 4;
    v23 = v58;
  }
  else
  {
    if (!v59)
      goto LABEL_51;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_51:
  *(_WORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_BYTE *)(a3 + 64) = 0;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v41);
  if (v39 == v38)
  {
    v25 = 4;
  }
  else
  {
    if (!v39)
      goto LABEL_56;
    v25 = 5;
    v12 = v39;
  }
  (*(void (**)(_QWORD *))(*v12 + 8 * v25))(v12);
LABEL_56:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v35);
  v26 = v33;
  if (v33 == v32)
  {
    v27 = 4;
    v26 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_61;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_61:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v47);
  v28 = v45;
  if (v45 == v44)
  {
    v29 = 4;
    v28 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_66;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_66:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v54);
  result = v52;
  if (v52 == v51)
  {
    v31 = 4;
    result = v51;
  }
  else
  {
    if (!v52)
      return result;
    v31 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v31))();
}

void sub_191217FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::impl::nitro_lazy_eval::exec@<X0>(nitro::impl::nitro_lazy_eval *this@<X0>, const nitro::ir::FOR *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *result;
  uint64_t v55;
  _BYTE v56[24];
  _BYTE *v57;
  __int16 v58;
  _QWORD v59[2];
  unint64_t *v60;
  unsigned __int8 v61;
  _BYTE v62[24];
  _BYTE *v63;
  __int16 v64;
  _QWORD v65[2];
  unint64_t *v66;
  unsigned __int8 v67;
  _BYTE v68[24];
  _BYTE *v69;
  __int16 v70;
  _QWORD v71[2];
  unint64_t *v72;
  unsigned __int8 v73;
  _BYTE v74[24];
  _BYTE *v75;
  __int16 v76;
  _QWORD v77[2];
  unint64_t *v78;
  unsigned __int8 v79;
  _QWORD v80[3];
  _QWORD *v81;
  __int16 v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t *v85;
  unsigned __int8 v86;
  _QWORD v87[3];
  _QWORD *v88;
  __int16 v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t *v92;
  unsigned __int8 v93;
  _QWORD v94[3];
  _QWORD *v95;
  __int16 v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t *v99;
  unsigned __int8 v100;
  _QWORD v101[3];
  _QWORD *v102;
  __int16 v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t *v106;
  unsigned __int8 v107;
  _QWORD v108[3];
  _QWORD *v109;
  __int16 v110;
  __int128 v111;
  uint64_t v112;
  char v113;
  _QWORD v114[3];
  _QWORD *v115;
  __int16 v116;
  __int128 v117;
  uint64_t v118;
  char v119;
  _QWORD v120[3];
  _QWORD *v121;
  __int16 v122;
  __int128 v123;
  uint64_t v124;
  char v125;
  _QWORD v126[3];
  _QWORD *v127;
  __int16 v128;
  __int128 v129;
  uint64_t v130;
  char v131;
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v101, (char *)a2 + 8, this);
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v94, (char *)a2 + 16, this);
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v87, (char *)a2 + 24, this);
  nitro::impl::nitro_lazy_eval::exec_function_body(v80, this, (char *)a2 + 32);
  v6 = (uint64_t)v102;
  if (!v102)
    goto LABEL_4;
  if (v102 != v101)
  {
    v6 = (*(uint64_t (**)(void))(*v102 + 16))();
LABEL_4:
    v57 = (_BYTE *)v6;
    goto LABEL_6;
  }
  v57 = v56;
  (*(void (**)(_QWORD *, _BYTE *))(v101[0] + 24))(v101, v56);
LABEL_6:
  v58 = v103;
  v59[0] = v104;
  v59[1] = v105;
  if (v105)
  {
    v7 = (unint64_t *)(v105 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v60 = v106;
  v61 = v107;
  if (v107 - 2 < 4 || v107 == 9)
  {
    v10 = v60;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  v12 = v62;
  v13 = (uint64_t)v95;
  if (!v95)
    goto LABEL_19;
  if (v95 != v94)
  {
    v13 = (*(uint64_t (**)(void))(*v95 + 16))();
LABEL_19:
    v63 = (_BYTE *)v13;
    goto LABEL_21;
  }
  v63 = v62;
  (*(void (**)(_QWORD *, _BYTE *))(v94[0] + 24))(v94, v62);
LABEL_21:
  v64 = v96;
  v65[0] = v97;
  v65[1] = v98;
  if (v98)
  {
    v14 = (unint64_t *)(v98 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v66 = v99;
  v67 = v100;
  if (v100 - 2 < 4 || v100 == 9)
  {
    v17 = v66;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  v19 = v68;
  v20 = (uint64_t)v88;
  if (!v88)
    goto LABEL_34;
  if (v88 != v87)
  {
    v20 = (*(uint64_t (**)(void))(*v88 + 16))();
LABEL_34:
    v69 = (_BYTE *)v20;
    goto LABEL_36;
  }
  v69 = v68;
  (*(void (**)(_QWORD *, _BYTE *))(v87[0] + 24))(v87, v68);
LABEL_36:
  v70 = v89;
  v71[0] = v90;
  v71[1] = v91;
  if (v91)
  {
    v21 = (unint64_t *)(v91 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v72 = v92;
  v73 = v93;
  if (v93 - 2 < 4 || v93 == 9)
  {
    v24 = v72;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 + 1, v24));
  }
  v26 = v74;
  v27 = (uint64_t)v81;
  if (!v81)
    goto LABEL_49;
  if (v81 != v80)
  {
    v27 = (*(uint64_t (**)(void))(*v81 + 16))();
LABEL_49:
    v75 = (_BYTE *)v27;
    goto LABEL_51;
  }
  v75 = v74;
  (*(void (**)(_QWORD *, _BYTE *))(v80[0] + 24))(v80, v74);
LABEL_51:
  v76 = v82;
  v77[0] = v83;
  v77[1] = v84;
  if (v84)
  {
    v28 = (unint64_t *)(v84 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v78 = v85;
  v79 = v86;
  if (v86 - 2 < 4 || v86 == 9)
  {
    v31 = v78;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 + 1, v31));
  }
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0::$_0((uint64_t)v108, (uint64_t)v56);
  *(_QWORD *)(a3 + 24) = 0;
  v33 = operator new(0x128uLL);
  v34 = v33;
  *v33 = &off_1E2DAF9D8;
  if (v109)
  {
    if (v109 == v108)
    {
      v33[4] = v33 + 1;
      (*(void (**)(_QWORD *))(v108[0] + 24))(v108);
    }
    else
    {
      v33[4] = v109;
      v109 = 0;
    }
  }
  else
  {
    v33[4] = 0;
  }
  *((_WORD *)v34 + 20) = v110;
  *((_OWORD *)v34 + 3) = v111;
  v111 = 0uLL;
  v34[8] = v112;
  *((_BYTE *)v34 + 72) = v113;
  v113 = 0;
  if (v115)
  {
    if (v115 == v114)
    {
      v34[13] = v34 + 10;
      (*(void (**)(void))(v114[0] + 24))();
    }
    else
    {
      v34[13] = v115;
      v115 = 0;
    }
  }
  else
  {
    v34[13] = 0;
  }
  *((_WORD *)v34 + 56) = v116;
  *(_OWORD *)(v34 + 15) = v117;
  v117 = 0uLL;
  v34[17] = v118;
  *((_BYTE *)v34 + 144) = v119;
  v119 = 0;
  if (v121)
  {
    if (v121 == v120)
    {
      v34[22] = v34 + 19;
      (*(void (**)(void))(v120[0] + 24))();
    }
    else
    {
      v34[22] = v121;
      v121 = 0;
    }
  }
  else
  {
    v34[22] = 0;
  }
  *((_WORD *)v34 + 92) = v122;
  *((_OWORD *)v34 + 12) = v123;
  v123 = 0uLL;
  v34[26] = v124;
  *((_BYTE *)v34 + 216) = v125;
  v125 = 0;
  if (v127)
  {
    if (v127 == v126)
    {
      v34[31] = v34 + 28;
      (*(void (**)(void))(v126[0] + 24))();
    }
    else
    {
      v34[31] = v127;
      v127 = 0;
    }
  }
  else
  {
    v34[31] = 0;
  }
  *((_WORD *)v34 + 128) = v128;
  *(_OWORD *)(v34 + 33) = v129;
  v129 = 0uLL;
  v34[35] = v130;
  *((_BYTE *)v34 + 288) = v131;
  v131 = 0;
  *(_QWORD *)(a3 + 24) = v34;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v129);
  v35 = v127;
  if (v127 == v126)
  {
    v36 = 4;
    v35 = v126;
  }
  else
  {
    if (!v127)
      goto LABEL_86;
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_86:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v123);
  v37 = v121;
  if (v121 == v120)
  {
    v38 = 4;
    v37 = v120;
  }
  else
  {
    if (!v121)
      goto LABEL_91;
    v38 = 5;
  }
  (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_91:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v117);
  v39 = v115;
  if (v115 == v114)
  {
    v40 = 4;
    v39 = v114;
  }
  else
  {
    if (!v115)
      goto LABEL_96;
    v40 = 5;
  }
  (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_96:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v111);
  v41 = v109;
  if (v109 == v108)
  {
    v42 = 4;
    v41 = v108;
  }
  else
  {
    if (!v109)
      goto LABEL_101;
    v42 = 5;
  }
  (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_101:
  *(_WORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_BYTE *)(a3 + 64) = 0;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v77);
  if (v75 == v74)
  {
    v43 = 4;
  }
  else
  {
    if (!v75)
      goto LABEL_106;
    v43 = 5;
    v26 = v75;
  }
  (*(void (**)(_QWORD *))(*v26 + 8 * v43))(v26);
LABEL_106:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v71);
  if (v69 == v68)
  {
    v44 = 4;
  }
  else
  {
    if (!v69)
      goto LABEL_111;
    v44 = 5;
    v19 = v69;
  }
  (*(void (**)(_QWORD *))(*v19 + 8 * v44))(v19);
LABEL_111:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v65);
  if (v63 == v62)
  {
    v45 = 4;
  }
  else
  {
    if (!v63)
      goto LABEL_116;
    v45 = 5;
    v12 = v63;
  }
  (*(void (**)(_QWORD *))(*v12 + 8 * v45))(v12);
LABEL_116:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v59);
  v46 = v57;
  if (v57 == v56)
  {
    v47 = 4;
    v46 = v56;
  }
  else
  {
    if (!v57)
      goto LABEL_121;
    v47 = 5;
  }
  (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_121:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v83);
  v48 = v81;
  if (v81 == v80)
  {
    v49 = 4;
    v48 = v80;
  }
  else
  {
    if (!v81)
      goto LABEL_126;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_126:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v90);
  v50 = v88;
  if (v88 == v87)
  {
    v51 = 4;
    v50 = v87;
  }
  else
  {
    if (!v88)
      goto LABEL_131;
    v51 = 5;
  }
  (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_131:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v97);
  v52 = v95;
  if (v95 == v94)
  {
    v53 = 4;
    v52 = v94;
  }
  else
  {
    if (!v95)
      goto LABEL_136;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_136:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v104);
  result = v102;
  if (v102 == v101)
  {
    v55 = 4;
    result = v101;
  }
  else
  {
    if (!v102)
      return result;
    v55 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v55))();
}

